begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|sectioning
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|aria
operator|.
name|AriaCheckBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|aria
operator|.
name|ImageButton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|CourseFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|CourseFinderClasses
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|CourseFinderCourses
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|CourseFinderDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|CourseFinderDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|CourseFinderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|CourseFinderFreeTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|CourseFinderMultipleCourses
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|CourseRequestBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|CourseSelection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|CourseSelectionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|CourseSelectionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|DataProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|FreeTimeParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|P
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|Validator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtAriaMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|SectioningService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|SectioningServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AcademicSessionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|FreeTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|RequestedCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
operator|.
name|ScheduledCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Cursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|shared
operator|.
name|HandlerRegistration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|resources
operator|.
name|client
operator|.
name|ImageResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasValue
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|CourseRequestLine
extends|extends
name|P
implements|implements
name|HasValue
argument_list|<
name|Request
argument_list|>
block|{
specifier|protected
specifier|static
specifier|final
name|StudentSectioningResources
name|RESOURCES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningResources
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|StudentSectioningMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|StudentSectioningConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|GwtAriaMessages
name|ARIA
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtAriaMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|SectioningServiceAsync
name|sSectioningService
init|=
name|GWT
operator|.
name|create
argument_list|(
name|SectioningService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|iAlternate
decl_stmt|;
specifier|private
name|int
name|iPriority
decl_stmt|;
specifier|private
name|AcademicSessionProvider
name|iSessionProvider
decl_stmt|;
specifier|private
name|List
argument_list|<
name|CourseSelectionBox
argument_list|>
name|iCourses
init|=
operator|new
name|ArrayList
argument_list|<
name|CourseSelectionBox
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|AriaCheckBox
name|iWaitList
init|=
literal|null
decl_stmt|;
specifier|private
name|CourseRequestLine
name|iPrevious
init|=
literal|null
decl_stmt|,
name|iNext
init|=
literal|null
decl_stmt|;
specifier|private
name|Validator
argument_list|<
name|CourseSelection
argument_list|>
name|iValidator
init|=
literal|null
decl_stmt|;
specifier|private
name|SpecialRegistrationContext
name|iSpecReg
decl_stmt|;
specifier|private
name|boolean
name|iSectioning
decl_stmt|,
name|iOnline
decl_stmt|;
specifier|private
name|ImageButton
name|iDelete
decl_stmt|;
specifier|public
name|CourseRequestLine
parameter_list|(
name|boolean
name|online
parameter_list|,
name|AcademicSessionProvider
name|session
parameter_list|,
name|int
name|priority
parameter_list|,
name|boolean
name|alternate
parameter_list|,
name|Validator
argument_list|<
name|CourseSelection
argument_list|>
name|validator
parameter_list|,
name|boolean
name|sectioning
parameter_list|,
name|SpecialRegistrationContext
name|specreg
parameter_list|)
block|{
name|super
argument_list|(
literal|"unitime-CourseRequestLine"
argument_list|)
expr_stmt|;
name|iOnline
operator|=
name|online
expr_stmt|;
name|iSessionProvider
operator|=
name|session
expr_stmt|;
name|iValidator
operator|=
name|validator
expr_stmt|;
name|iPriority
operator|=
name|priority
expr_stmt|;
name|iSectioning
operator|=
name|sectioning
expr_stmt|;
name|iAlternate
operator|=
name|alternate
expr_stmt|;
name|iSpecReg
operator|=
name|specreg
expr_stmt|;
name|P
name|line
init|=
operator|new
name|P
argument_list|(
literal|"line"
argument_list|)
decl_stmt|;
if|if
condition|(
name|alternate
condition|)
name|line
operator|.
name|addStyleName
argument_list|(
literal|"alternative"
argument_list|)
expr_stmt|;
name|P
name|title
init|=
operator|new
name|P
argument_list|(
literal|"title"
argument_list|)
decl_stmt|;
name|title
operator|.
name|setText
argument_list|(
name|alternate
condition|?
name|MESSAGES
operator|.
name|courseRequestsAlternate
argument_list|(
name|priority
operator|+
literal|1
argument_list|)
else|:
name|MESSAGES
operator|.
name|courseRequestsPriority
argument_list|(
name|priority
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|CourseSelectionBox
name|box
init|=
operator|new
name|CourseSelectionBox
argument_list|(
operator|!
name|alternate
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|alternate
condition|)
block|{
name|box
operator|.
name|setLabel
argument_list|(
name|ARIA
operator|.
name|titleRequestedAlternate
argument_list|(
literal|1
operator|+
name|priority
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
operator|(
name|char
operator|)
operator|(
operator|(
name|int
operator|)
literal|'a'
operator|+
name|priority
operator|)
argument_list|)
argument_list|)
argument_list|,
name|ARIA
operator|.
name|altRequestedAlternateFinder
argument_list|(
literal|1
operator|+
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|.
name|setAccessKey
argument_list|(
operator|(
name|char
operator|)
operator|(
operator|(
name|int
operator|)
literal|'a'
operator|+
name|priority
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|box
operator|.
name|setLabel
argument_list|(
name|ARIA
operator|.
name|titleRequestedCourse
argument_list|(
literal|1
operator|+
name|priority
argument_list|)
argument_list|,
name|ARIA
operator|.
name|altRequestedCourseFinder
argument_list|(
literal|1
operator|+
name|priority
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|priority
operator|<
literal|9
condition|)
name|box
operator|.
name|setAccessKey
argument_list|(
operator|(
name|char
operator|)
operator|(
operator|(
name|int
operator|)
literal|'1'
operator|+
name|priority
operator|)
argument_list|)
expr_stmt|;
if|else if
condition|(
name|priority
operator|==
literal|9
condition|)
name|box
operator|.
name|setAccessKey
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
block|}
name|box
operator|.
name|addStyleName
argument_list|(
literal|"course"
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|box
argument_list|)
expr_stmt|;
name|iCourses
operator|.
name|add
argument_list|(
name|box
argument_list|)
expr_stmt|;
name|P
name|buttons
init|=
operator|new
name|P
argument_list|(
literal|"buttons"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|alternate
condition|)
block|{
name|iWaitList
operator|=
operator|new
name|AriaCheckBox
argument_list|()
expr_stmt|;
name|iWaitList
operator|.
name|setAriaLabel
argument_list|(
name|ARIA
operator|.
name|titleRequestedWaitList
argument_list|(
literal|1
operator|+
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|iWaitList
operator|.
name|addStyleName
argument_list|(
literal|"wait-list"
argument_list|)
expr_stmt|;
name|iWaitList
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|event
parameter_list|)
block|{
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|CourseRequestLine
operator|.
name|this
argument_list|,
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|buttons
operator|.
name|add
argument_list|(
name|iWaitList
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addStyleName
argument_list|(
literal|"nowaitlist"
argument_list|)
expr_stmt|;
block|}
name|P
name|up
init|=
operator|new
name|P
argument_list|(
literal|"blank"
argument_list|)
decl_stmt|;
name|buttons
operator|.
name|add
argument_list|(
name|up
argument_list|)
expr_stmt|;
name|P
name|down
init|=
operator|new
name|P
argument_list|(
literal|"blank"
argument_list|)
decl_stmt|;
name|buttons
operator|.
name|add
argument_list|(
name|down
argument_list|)
expr_stmt|;
name|iDelete
operator|=
operator|new
name|ImageButton
argument_list|(
name|RESOURCES
operator|.
name|delete
argument_list|()
argument_list|,
name|RESOURCES
operator|.
name|delete_Down
argument_list|()
argument_list|,
name|RESOURCES
operator|.
name|delete_Over
argument_list|()
argument_list|)
expr_stmt|;
name|iDelete
operator|.
name|addStyleName
argument_list|(
literal|"unitime-NoPrint"
argument_list|)
expr_stmt|;
name|iDelete
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|delete
argument_list|()
expr_stmt|;
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|CourseRequestLine
operator|.
name|this
argument_list|,
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iDelete
operator|.
name|addStyleName
argument_list|(
literal|"delete"
argument_list|)
expr_stmt|;
name|iDelete
operator|.
name|setAltText
argument_list|(
name|ARIA
operator|.
name|altDeleteRequest
argument_list|(
name|priority
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|buttons
operator|.
name|add
argument_list|(
name|iDelete
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|buttons
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isWaitListVisible
parameter_list|()
block|{
return|return
name|iWaitList
operator|!=
literal|null
operator|&&
name|iWaitList
operator|.
name|isVisible
argument_list|()
return|;
block|}
specifier|public
name|void
name|setWaitListVisible
parameter_list|(
name|boolean
name|visible
parameter_list|)
block|{
if|if
condition|(
name|iWaitList
operator|!=
literal|null
condition|)
block|{
name|iWaitList
operator|.
name|setVisible
argument_list|(
name|visible
argument_list|)
expr_stmt|;
name|changeVisibleStyle
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|getWaitList
parameter_list|()
block|{
return|return
name|iWaitList
operator|!=
literal|null
operator|&&
name|iWaitList
operator|.
name|getValue
argument_list|()
return|;
block|}
specifier|public
name|void
name|setWaitList
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
name|iWaitList
operator|!=
literal|null
condition|)
name|iWaitList
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setPrevious
parameter_list|(
name|CourseRequestLine
name|previous
parameter_list|)
block|{
name|iPrevious
operator|=
name|previous
expr_stmt|;
name|P
name|line
init|=
operator|(
name|P
operator|)
name|getWidget
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|P
name|buttons
init|=
operator|(
name|P
operator|)
name|line
operator|.
name|getWidget
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|int
name|idx
init|=
operator|(
name|iWaitList
operator|==
literal|null
condition|?
literal|0
else|:
literal|1
operator|)
decl_stmt|;
if|if
condition|(
name|iPrevious
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|buttons
operator|.
name|getWidget
argument_list|(
name|idx
argument_list|)
operator|instanceof
name|ImageButton
condition|)
block|{
name|buttons
operator|.
name|remove
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|P
name|up
init|=
operator|new
name|P
argument_list|(
literal|"blank"
argument_list|)
decl_stmt|;
name|buttons
operator|.
name|add
argument_list|(
name|up
argument_list|)
expr_stmt|;
name|buttons
operator|.
name|insert
argument_list|(
name|up
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|ImageButton
name|up
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|buttons
operator|.
name|getWidget
argument_list|(
name|idx
argument_list|)
operator|instanceof
name|ImageButton
condition|)
block|{
name|up
operator|=
operator|(
name|ImageButton
operator|)
name|buttons
operator|.
name|getWidget
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buttons
operator|.
name|remove
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|up
operator|=
operator|new
name|ImageButton
argument_list|(
name|RESOURCES
operator|.
name|up
argument_list|()
argument_list|,
name|RESOURCES
operator|.
name|up_Down
argument_list|()
argument_list|,
name|RESOURCES
operator|.
name|up_Over
argument_list|()
argument_list|)
expr_stmt|;
name|up
operator|.
name|addStyleName
argument_list|(
literal|"unitime-NoPrint"
argument_list|)
expr_stmt|;
name|up
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|up
argument_list|()
expr_stmt|;
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|CourseRequestLine
operator|.
name|this
argument_list|,
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|up
operator|.
name|addStyleName
argument_list|(
literal|"up"
argument_list|)
expr_stmt|;
name|buttons
operator|.
name|insert
argument_list|(
name|up
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isAlternate
argument_list|()
condition|)
block|{
if|if
condition|(
name|iPrevious
operator|.
name|isAlternate
argument_list|()
condition|)
name|up
operator|.
name|setAltText
argument_list|(
name|ARIA
operator|.
name|altSwapAlternateRequest
argument_list|(
name|getPriority
argument_list|()
operator|+
literal|1
argument_list|,
name|getPriority
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|up
operator|.
name|setAltText
argument_list|(
name|ARIA
operator|.
name|altSwapCourseAlternateRequest
argument_list|(
name|iPrevious
operator|.
name|getPriority
argument_list|()
operator|+
literal|1
argument_list|,
name|getPriority
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|up
operator|.
name|setAltText
argument_list|(
name|ARIA
operator|.
name|altSwapCourseRequest
argument_list|(
name|getPriority
argument_list|()
operator|+
literal|1
argument_list|,
name|getPriority
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|setNext
parameter_list|(
name|CourseRequestLine
name|next
parameter_list|)
block|{
name|iNext
operator|=
name|next
expr_stmt|;
name|P
name|line
init|=
operator|(
name|P
operator|)
name|getWidget
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|P
name|buttons
init|=
operator|(
name|P
operator|)
name|line
operator|.
name|getWidget
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|int
name|idx
init|=
operator|(
name|iWaitList
operator|==
literal|null
condition|?
literal|1
else|:
literal|2
operator|)
decl_stmt|;
if|if
condition|(
name|iNext
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|buttons
operator|.
name|getWidget
argument_list|(
name|idx
argument_list|)
operator|instanceof
name|ImageButton
condition|)
block|{
name|buttons
operator|.
name|remove
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|P
name|down
init|=
operator|new
name|P
argument_list|(
literal|"blank"
argument_list|)
decl_stmt|;
name|buttons
operator|.
name|add
argument_list|(
name|down
argument_list|)
expr_stmt|;
name|buttons
operator|.
name|insert
argument_list|(
name|down
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|ImageButton
name|down
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|buttons
operator|.
name|getWidget
argument_list|(
name|idx
argument_list|)
operator|instanceof
name|ImageButton
condition|)
block|{
name|down
operator|=
operator|(
name|ImageButton
operator|)
name|buttons
operator|.
name|getWidget
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buttons
operator|.
name|remove
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|down
operator|=
operator|new
name|ImageButton
argument_list|(
name|RESOURCES
operator|.
name|down
argument_list|()
argument_list|,
name|RESOURCES
operator|.
name|down_Down
argument_list|()
argument_list|,
name|RESOURCES
operator|.
name|down_Over
argument_list|()
argument_list|)
expr_stmt|;
name|down
operator|.
name|addStyleName
argument_list|(
literal|"unitime-NoPrint"
argument_list|)
expr_stmt|;
name|down
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|down
argument_list|()
expr_stmt|;
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|CourseRequestLine
operator|.
name|this
argument_list|,
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|down
operator|.
name|addStyleName
argument_list|(
literal|"down"
argument_list|)
expr_stmt|;
name|buttons
operator|.
name|insert
argument_list|(
name|down
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isAlternate
argument_list|()
condition|)
block|{
name|down
operator|.
name|setAltText
argument_list|(
name|ARIA
operator|.
name|altSwapAlternateRequest
argument_list|(
name|getPriority
argument_list|()
operator|+
literal|1
argument_list|,
name|getPriority
argument_list|()
operator|+
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|iNext
operator|.
name|isAlternate
argument_list|()
condition|)
name|down
operator|.
name|setAltText
argument_list|(
name|ARIA
operator|.
name|altSwapCourseAlternateRequest
argument_list|(
name|getPriority
argument_list|()
operator|+
literal|1
argument_list|,
name|iNext
operator|.
name|getPriority
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|down
operator|.
name|setAltText
argument_list|(
name|ARIA
operator|.
name|altSwapCourseRequest
argument_list|(
name|getPriority
argument_list|()
operator|+
literal|1
argument_list|,
name|getPriority
argument_list|()
operator|+
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|up
parameter_list|()
block|{
if|if
condition|(
name|iPrevious
operator|!=
literal|null
condition|)
block|{
name|Request
name|r
init|=
name|getValue
argument_list|()
decl_stmt|;
name|setValue
argument_list|(
name|iPrevious
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|iPrevious
operator|.
name|setValue
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|down
parameter_list|()
block|{
if|if
condition|(
name|iNext
operator|!=
literal|null
condition|)
block|{
name|Request
name|r
init|=
name|getValue
argument_list|()
decl_stmt|;
name|setValue
argument_list|(
name|iNext
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|iNext
operator|.
name|setValue
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|CourseSelectionBox
argument_list|>
name|getCourses
parameter_list|()
block|{
return|return
name|iCourses
return|;
block|}
specifier|public
name|void
name|fixTitles
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getWidgetCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|P
name|line
init|=
operator|(
name|P
operator|)
name|getWidget
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|P
name|title
init|=
operator|(
name|P
operator|)
name|line
operator|.
name|getWidget
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|CourseSelectionBox
name|box
init|=
operator|(
name|CourseSelectionBox
operator|)
name|line
operator|.
name|getWidget
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|title
operator|.
name|setText
argument_list|(
name|isAlternate
argument_list|()
condition|?
name|MESSAGES
operator|.
name|courseRequestsAlternate
argument_list|(
name|getPriority
argument_list|()
operator|+
literal|1
argument_list|)
else|:
name|MESSAGES
operator|.
name|courseRequestsPriority
argument_list|(
name|getPriority
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isAlternate
argument_list|()
condition|)
block|{
name|box
operator|.
name|setLabel
argument_list|(
name|ARIA
operator|.
name|titleRequestedAlternate
argument_list|(
literal|1
operator|+
name|getPriority
argument_list|()
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
operator|(
name|char
operator|)
operator|(
operator|(
name|int
operator|)
literal|'a'
operator|+
name|getPriority
argument_list|()
operator|)
argument_list|)
argument_list|)
argument_list|,
name|ARIA
operator|.
name|altRequestedAlternateFinder
argument_list|(
literal|1
operator|+
name|getPriority
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|box
operator|.
name|setLabel
argument_list|(
name|ARIA
operator|.
name|titleRequestedCourse
argument_list|(
literal|1
operator|+
name|getPriority
argument_list|()
argument_list|)
argument_list|,
name|ARIA
operator|.
name|altRequestedCourseFinder
argument_list|(
literal|1
operator|+
name|getPriority
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|title
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|courseRequestsAlternative
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isAlternate
argument_list|()
condition|)
block|{
if|if
condition|(
name|i
operator|==
literal|1
condition|)
name|box
operator|.
name|setLabel
argument_list|(
name|ARIA
operator|.
name|titleRequestedAlternateFirstAlternative
argument_list|(
literal|1
operator|+
name|getPriority
argument_list|()
argument_list|)
argument_list|,
name|ARIA
operator|.
name|altRequestedAlternateFirstFinder
argument_list|(
literal|1
operator|+
name|getPriority
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
name|i
operator|==
literal|2
condition|)
name|box
operator|.
name|setLabel
argument_list|(
name|ARIA
operator|.
name|titleRequestedAlternateSecondAlternative
argument_list|(
literal|1
operator|+
name|getPriority
argument_list|()
argument_list|)
argument_list|,
name|ARIA
operator|.
name|altRequestedAlternateSecondFinder
argument_list|(
literal|1
operator|+
name|getPriority
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|box
operator|.
name|setLabel
argument_list|(
name|ARIA
operator|.
name|titleRequestedAlternateNAlternative
argument_list|(
name|i
argument_list|,
literal|1
operator|+
name|getPriority
argument_list|()
argument_list|)
argument_list|,
name|ARIA
operator|.
name|altRequestedNAlternateFinder
argument_list|(
name|i
argument_list|,
literal|1
operator|+
name|getPriority
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|i
operator|==
literal|1
condition|)
name|box
operator|.
name|setLabel
argument_list|(
name|ARIA
operator|.
name|titleRequestedCourseFirstAlternative
argument_list|(
literal|1
operator|+
name|getPriority
argument_list|()
argument_list|)
argument_list|,
name|ARIA
operator|.
name|altRequestedCourseFirstAlternativeFinder
argument_list|(
literal|1
operator|+
name|getPriority
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
name|i
operator|==
literal|2
condition|)
name|box
operator|.
name|setLabel
argument_list|(
name|ARIA
operator|.
name|titleRequestedCourseSecondAlternative
argument_list|(
literal|1
operator|+
name|getPriority
argument_list|()
argument_list|)
argument_list|,
name|ARIA
operator|.
name|altRequestedCourseSecondAlternativeFinder
argument_list|(
literal|1
operator|+
name|getPriority
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|box
operator|.
name|setLabel
argument_list|(
name|ARIA
operator|.
name|titleRequestedCourseNAlternative
argument_list|(
name|i
argument_list|,
literal|1
operator|+
name|getPriority
argument_list|()
argument_list|)
argument_list|,
name|ARIA
operator|.
name|altRequestedCourseNAlternativeFinder
argument_list|(
name|i
argument_list|,
literal|1
operator|+
name|getPriority
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|box
operator|.
name|resizeFilterIfNeeded
argument_list|()
expr_stmt|;
name|CourseSelectionEvent
operator|.
name|fire
argument_list|(
name|box
argument_list|,
name|box
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isAlternate
parameter_list|()
block|{
return|return
name|iAlternate
return|;
block|}
specifier|public
name|int
name|getPriority
parameter_list|()
block|{
return|return
name|iPriority
return|;
block|}
specifier|public
name|void
name|delete
parameter_list|()
block|{
if|if
condition|(
name|iNext
operator|!=
literal|null
operator|&&
name|isAlternate
argument_list|()
operator|==
name|iNext
operator|.
name|isAlternate
argument_list|()
condition|)
block|{
name|setValue
argument_list|(
name|iNext
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|iNext
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|iCourses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|setValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|iWaitList
operator|!=
literal|null
operator|&&
name|iWaitList
operator|.
name|isVisible
argument_list|()
condition|)
block|{
name|iWaitList
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iWaitList
operator|.
name|setValue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|iCourses
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|deleteAlternative
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|deleteAlternative
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|iCourses
operator|.
name|remove
argument_list|(
name|index
argument_list|)
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|fixTitles
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|insertAlternative
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|P
name|line
init|=
operator|new
name|P
argument_list|(
literal|"alt-line"
argument_list|)
decl_stmt|;
name|P
name|title
init|=
operator|new
name|P
argument_list|(
literal|"title"
argument_list|)
decl_stmt|;
name|title
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|courseRequestsAlternative
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|CourseSelectionBox
name|box
init|=
operator|new
name|CourseSelectionBox
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|isAlternate
argument_list|()
condition|)
block|{
if|if
condition|(
name|index
operator|==
literal|1
condition|)
name|box
operator|.
name|setLabel
argument_list|(
name|ARIA
operator|.
name|titleRequestedAlternateFirstAlternative
argument_list|(
literal|1
operator|+
name|getPriority
argument_list|()
argument_list|)
argument_list|,
name|ARIA
operator|.
name|altRequestedAlternateFirstFinder
argument_list|(
literal|1
operator|+
name|getPriority
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
name|index
operator|==
literal|2
condition|)
name|box
operator|.
name|setLabel
argument_list|(
name|ARIA
operator|.
name|titleRequestedAlternateSecondAlternative
argument_list|(
literal|1
operator|+
name|getPriority
argument_list|()
argument_list|)
argument_list|,
name|ARIA
operator|.
name|altRequestedAlternateSecondFinder
argument_list|(
literal|1
operator|+
name|getPriority
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|box
operator|.
name|setLabel
argument_list|(
name|ARIA
operator|.
name|titleRequestedAlternateNAlternative
argument_list|(
name|index
argument_list|,
literal|1
operator|+
name|getPriority
argument_list|()
argument_list|)
argument_list|,
name|ARIA
operator|.
name|altRequestedNAlternateFinder
argument_list|(
name|index
argument_list|,
literal|1
operator|+
name|getPriority
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|index
operator|==
literal|1
condition|)
name|box
operator|.
name|setLabel
argument_list|(
name|ARIA
operator|.
name|titleRequestedCourseFirstAlternative
argument_list|(
literal|1
operator|+
name|getPriority
argument_list|()
argument_list|)
argument_list|,
name|ARIA
operator|.
name|altRequestedCourseFirstAlternativeFinder
argument_list|(
literal|1
operator|+
name|getPriority
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
name|index
operator|==
literal|2
condition|)
name|box
operator|.
name|setLabel
argument_list|(
name|ARIA
operator|.
name|titleRequestedCourseSecondAlternative
argument_list|(
literal|1
operator|+
name|getPriority
argument_list|()
argument_list|)
argument_list|,
name|ARIA
operator|.
name|altRequestedCourseSecondAlternativeFinder
argument_list|(
literal|1
operator|+
name|getPriority
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|box
operator|.
name|setLabel
argument_list|(
name|ARIA
operator|.
name|titleRequestedCourseNAlternative
argument_list|(
name|index
argument_list|,
literal|1
operator|+
name|getPriority
argument_list|()
argument_list|)
argument_list|,
name|ARIA
operator|.
name|altRequestedCourseNAlternativeFinder
argument_list|(
name|index
argument_list|,
literal|1
operator|+
name|getPriority
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|box
operator|.
name|addStyleName
argument_list|(
literal|"course"
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|box
argument_list|)
expr_stmt|;
name|iCourses
operator|.
name|add
argument_list|(
name|box
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|line
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|box
operator|.
name|setValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fixTitles
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|HandlerRegistration
name|addValueChangeHandler
parameter_list|(
name|ValueChangeHandler
argument_list|<
name|Request
argument_list|>
name|handler
parameter_list|)
block|{
return|return
name|addHandler
argument_list|(
name|handler
argument_list|,
name|ValueChangeEvent
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Request
name|getValue
parameter_list|()
block|{
name|Request
name|ret
init|=
operator|new
name|Request
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseSelectionBox
name|box
range|:
name|iCourses
control|)
block|{
name|RequestedCourse
name|rc
init|=
name|box
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|rc
operator|.
name|isEmpty
argument_list|()
condition|)
name|ret
operator|.
name|addRequestedCourse
argument_list|(
name|rc
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|setFilter
argument_list|(
name|iCourses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCourseFinder
argument_list|()
operator|.
name|getFilter
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iWaitList
operator|!=
literal|null
operator|&&
name|iWaitList
operator|.
name|isVisible
argument_list|()
condition|)
block|{
name|ret
operator|.
name|setWaitList
argument_list|(
name|iWaitList
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|ret
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|ret
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|Request
name|value
parameter_list|)
block|{
name|setValue
argument_list|(
name|value
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isCanChangeAlternatives
parameter_list|()
block|{
for|for
control|(
name|CourseSelectionBox
name|box
range|:
name|iCourses
control|)
if|if
condition|(
operator|!
name|box
operator|.
name|isCanChangePriority
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|setUpArrowEnabled
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
name|P
name|line
init|=
operator|(
name|P
operator|)
name|getWidget
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|P
name|buttons
init|=
operator|(
name|P
operator|)
name|line
operator|.
name|getWidget
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|int
name|upIdx
init|=
operator|(
name|iWaitList
operator|==
literal|null
condition|?
literal|0
else|:
literal|1
operator|)
decl_stmt|;
if|if
condition|(
name|buttons
operator|.
name|getWidget
argument_list|(
name|upIdx
argument_list|)
operator|instanceof
name|ImageButton
condition|)
block|{
operator|(
operator|(
name|ImageButton
operator|)
name|buttons
operator|.
name|getWidget
argument_list|(
name|upIdx
argument_list|)
operator|)
operator|.
name|setEnabled
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ImageButton
operator|)
name|buttons
operator|.
name|getWidget
argument_list|(
name|upIdx
argument_list|)
operator|)
operator|.
name|setVisible
argument_list|(
name|areArrowsVisible
argument_list|()
operator|&&
name|enabled
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setDownArrowEnabled
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
name|P
name|line
init|=
operator|(
name|P
operator|)
name|getWidget
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|P
name|buttons
init|=
operator|(
name|P
operator|)
name|line
operator|.
name|getWidget
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|int
name|downIdx
init|=
operator|(
name|iWaitList
operator|==
literal|null
condition|?
literal|1
else|:
literal|2
operator|)
decl_stmt|;
if|if
condition|(
name|buttons
operator|.
name|getWidget
argument_list|(
name|downIdx
argument_list|)
operator|instanceof
name|ImageButton
condition|)
block|{
operator|(
operator|(
name|ImageButton
operator|)
name|buttons
operator|.
name|getWidget
argument_list|(
name|downIdx
argument_list|)
operator|)
operator|.
name|setEnabled
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ImageButton
operator|)
name|buttons
operator|.
name|getWidget
argument_list|(
name|downIdx
argument_list|)
operator|)
operator|.
name|setVisible
argument_list|(
name|areArrowsVisible
argument_list|()
operator|&&
name|enabled
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|Request
name|value
parameter_list|,
name|boolean
name|fireEvents
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|iWaitList
operator|!=
literal|null
condition|)
name|iWaitList
operator|.
name|setValue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iCourses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|setValue
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|iCourses
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>
literal|0
condition|;
name|i
operator|--
control|)
name|deleteAlternative
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|iWaitList
operator|!=
literal|null
condition|)
name|iWaitList
operator|.
name|setValue
argument_list|(
name|value
operator|.
name|isWaitList
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|value
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|rc
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|iCourses
operator|.
name|size
argument_list|()
operator|<=
name|index
condition|)
name|insertAlternative
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|iCourses
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|setValue
argument_list|(
name|rc
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|index
operator|==
literal|0
condition|)
block|{
name|iCourses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|setValue
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
if|else if
condition|(
name|CONSTANTS
operator|.
name|courseRequestAutomaticallyAddFirstAlternative
argument_list|()
operator|&&
operator|!
name|iAlternate
operator|&&
name|index
operator|==
literal|1
operator|&&
name|iCourses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|hasCourseId
argument_list|()
operator|&&
name|iCourses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|isCanDelete
argument_list|()
condition|)
block|{
name|iCourses
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|setValue
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|iCourses
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
name|index
condition|;
name|i
operator|--
control|)
name|deleteAlternative
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|.
name|hasFilter
argument_list|()
condition|)
name|iCourses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCourseFinder
argument_list|()
operator|.
name|setFilter
argument_list|(
name|value
operator|.
name|getFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iWaitList
operator|!=
literal|null
operator|&&
name|iWaitList
operator|.
name|isVisible
argument_list|()
condition|)
block|{
name|iWaitList
operator|.
name|setEnabled
argument_list|(
name|value
operator|==
literal|null
operator|||
operator|!
name|value
operator|.
name|isReadOnly
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iDelete
operator|!=
literal|null
condition|)
block|{
name|iDelete
operator|.
name|setVisible
argument_list|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|isCanDelete
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iPrevious
operator|!=
literal|null
condition|)
block|{
name|boolean
name|enabled
init|=
name|iPrevious
operator|.
name|isCanChangeAlternatives
argument_list|()
operator|&&
name|isCanChangeAlternatives
argument_list|()
decl_stmt|;
name|setUpArrowEnabled
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
name|iPrevious
operator|.
name|setDownArrowEnabled
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iNext
operator|!=
literal|null
condition|)
block|{
name|boolean
name|enabled
init|=
name|iNext
operator|.
name|isCanChangeAlternatives
argument_list|()
operator|&&
name|isCanChangeAlternatives
argument_list|()
decl_stmt|;
name|setDownArrowEnabled
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
name|iNext
operator|.
name|setUpArrowEnabled
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fireEvents
condition|)
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|this
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|validate
parameter_list|()
block|{
name|String
name|failed
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CourseSelectionBox
name|box
range|:
name|iCourses
control|)
block|{
name|String
name|message
init|=
name|box
operator|.
name|validate
argument_list|()
decl_stmt|;
if|if
condition|(
name|failed
operator|==
literal|null
operator|&&
name|message
operator|!=
literal|null
condition|)
name|failed
operator|=
name|message
expr_stmt|;
block|}
return|return
name|failed
return|;
block|}
specifier|public
class|class
name|CourseSelectionBox
extends|extends
name|CourseRequestBox
block|{
specifier|private
name|HandlerRegistration
name|iCourseSelectionHandlerRegistration
decl_stmt|;
specifier|private
name|FilterStatus
name|iStatus
decl_stmt|;
specifier|private
name|CourseFinderMultipleCourses
name|iCourseFinderMultipleCourses
decl_stmt|;
specifier|public
name|CourseSelectionBox
parameter_list|(
name|boolean
name|allowFreeTime
parameter_list|,
specifier|final
name|boolean
name|alternative
parameter_list|)
block|{
name|super
argument_list|(
name|CONSTANTS
operator|.
name|showCourseTitle
argument_list|()
argument_list|,
name|iSpecReg
argument_list|)
expr_stmt|;
if|if
condition|(
name|allowFreeTime
condition|)
block|{
name|FreeTimeParser
name|parser
init|=
operator|new
name|FreeTimeParser
argument_list|()
decl_stmt|;
name|setFreeTimes
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
name|setCourseFinderFactory
argument_list|(
operator|new
name|CourseFinderFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|CourseFinder
name|createCourseFinder
parameter_list|()
block|{
name|CourseFinder
name|finder
init|=
operator|(
name|alternative
condition|?
operator|new
name|CourseFinderDialog
argument_list|()
else|:
operator|new
name|SelectAllCourseFinderDialog
argument_list|()
operator|)
decl_stmt|;
name|CourseFinder
operator|.
name|CourseFinderTab
argument_list|<
name|Collection
argument_list|<
name|CourseAssignment
argument_list|>
argument_list|>
name|courses
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|alternative
condition|)
block|{
name|iCourseFinderMultipleCourses
operator|=
operator|new
name|CourseFinderMultipleCourses
argument_list|(
name|CONSTANTS
operator|.
name|showCourseTitle
argument_list|()
argument_list|,
name|CONSTANTS
operator|.
name|courseFinderSuggestWhenEmpty
argument_list|()
argument_list|,
name|CONSTANTS
operator|.
name|courseFinderShowRequired
argument_list|()
argument_list|,
name|iSpecReg
argument_list|)
expr_stmt|;
name|courses
operator|=
name|iCourseFinderMultipleCourses
expr_stmt|;
block|}
else|else
block|{
name|courses
operator|=
operator|new
name|CourseFinderCourses
argument_list|(
name|CONSTANTS
operator|.
name|showCourseTitle
argument_list|()
argument_list|,
name|CONSTANTS
operator|.
name|courseFinderSuggestWhenEmpty
argument_list|()
argument_list|,
name|CONSTANTS
operator|.
name|courseFinderShowRequired
argument_list|()
argument_list|,
name|iSpecReg
argument_list|)
expr_stmt|;
block|}
name|courses
operator|.
name|setDataProvider
argument_list|(
operator|new
name|DataProvider
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|CourseAssignment
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|getData
parameter_list|(
name|String
name|source
parameter_list|,
name|AsyncCallback
argument_list|<
name|Collection
argument_list|<
name|CourseAssignment
argument_list|>
argument_list|>
name|callback
parameter_list|)
block|{
name|sSectioningService
operator|.
name|listCourseOfferings
argument_list|(
name|iSessionProvider
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
name|source
argument_list|,
literal|null
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|CourseFinderDetails
name|details
init|=
operator|new
name|CourseFinderDetails
argument_list|()
decl_stmt|;
name|details
operator|.
name|setDataProvider
argument_list|(
operator|new
name|DataProvider
argument_list|<
name|CourseAssignment
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|getData
parameter_list|(
name|CourseAssignment
name|source
parameter_list|,
name|AsyncCallback
argument_list|<
name|String
argument_list|>
name|callback
parameter_list|)
block|{
name|sSectioningService
operator|.
name|retrieveCourseDetails
argument_list|(
name|iSessionProvider
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
name|source
operator|.
name|hasUniqueName
argument_list|()
condition|?
name|source
operator|.
name|getCourseName
argument_list|()
else|:
name|source
operator|.
name|getCourseNameWithTitle
argument_list|()
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|CourseFinderClasses
name|classes
init|=
operator|new
name|CourseFinderClasses
argument_list|(
literal|true
argument_list|,
name|iSpecReg
argument_list|,
name|courses
operator|.
name|getRequiredCheckbox
argument_list|()
argument_list|)
decl_stmt|;
name|classes
operator|.
name|setDataProvider
argument_list|(
operator|new
name|DataProvider
argument_list|<
name|CourseAssignment
argument_list|,
name|Collection
argument_list|<
name|ClassAssignment
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|getData
parameter_list|(
name|CourseAssignment
name|source
parameter_list|,
name|AsyncCallback
argument_list|<
name|Collection
argument_list|<
name|ClassAssignment
argument_list|>
argument_list|>
name|callback
parameter_list|)
block|{
name|sSectioningService
operator|.
name|listClasses
argument_list|(
name|iOnline
argument_list|,
name|iSessionProvider
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
name|source
operator|.
name|hasUniqueName
argument_list|()
condition|?
name|source
operator|.
name|getCourseName
argument_list|()
else|:
name|source
operator|.
name|getCourseNameWithTitle
argument_list|()
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|courses
operator|.
name|setCourseDetails
argument_list|(
name|details
argument_list|,
name|classes
argument_list|)
expr_stmt|;
if|if
condition|(
name|getFreeTimes
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|CourseFinderFreeTime
name|free
init|=
operator|new
name|CourseFinderFreeTime
argument_list|()
decl_stmt|;
name|free
operator|.
name|setDataProvider
argument_list|(
name|getFreeTimes
argument_list|()
argument_list|)
expr_stmt|;
name|finder
operator|.
name|setTabs
argument_list|(
name|courses
argument_list|,
name|free
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|finder
operator|.
name|setTabs
argument_list|(
name|courses
argument_list|)
expr_stmt|;
block|}
return|return
name|finder
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|setSuggestions
argument_list|(
operator|new
name|DataProvider
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|CourseAssignment
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|getData
parameter_list|(
name|String
name|source
parameter_list|,
name|AsyncCallback
argument_list|<
name|Collection
argument_list|<
name|CourseAssignment
argument_list|>
argument_list|>
name|callback
parameter_list|)
block|{
name|sSectioningService
operator|.
name|listCourseOfferings
argument_list|(
name|iSessionProvider
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
name|source
argument_list|,
literal|20
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|setSectionsProvider
argument_list|(
operator|new
name|DataProvider
argument_list|<
name|CourseAssignment
argument_list|,
name|Collection
argument_list|<
name|ClassAssignment
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|getData
parameter_list|(
name|CourseAssignment
name|source
parameter_list|,
name|AsyncCallback
argument_list|<
name|Collection
argument_list|<
name|ClassAssignment
argument_list|>
argument_list|>
name|callback
parameter_list|)
block|{
name|sSectioningService
operator|.
name|listClasses
argument_list|(
name|iOnline
argument_list|,
name|iSessionProvider
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
name|source
operator|.
name|hasUniqueName
argument_list|()
condition|?
name|source
operator|.
name|getCourseName
argument_list|()
else|:
name|source
operator|.
name|getCourseNameWithTitle
argument_list|()
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iCourseSelectionHandlerRegistration
operator|=
name|addCourseSelectionHandler
argument_list|(
operator|new
name|CourseSelectionHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onCourseSelection
parameter_list|(
name|CourseSelectionEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|isValid
argument_list|()
condition|)
name|setError
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|CourseSelectionBox
name|next
init|=
name|getNext
argument_list|()
decl_stmt|;
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|event
operator|.
name|getValue
argument_list|()
operator|==
literal|null
operator|||
name|event
operator|.
name|getValue
argument_list|()
operator|.
name|isFreeTime
argument_list|()
condition|)
block|{
name|next
operator|.
name|setHint
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|next
operator|.
name|resizeFilterIfNeeded
argument_list|()
expr_stmt|;
comment|// next.setEnabled(event.isValid() || !next.getValue().isEmpty());
if|if
condition|(
name|event
operator|.
name|isValid
argument_list|()
operator|&&
name|next
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|CourseSelectionBox
name|prev
init|=
name|getPrevious
argument_list|()
decl_stmt|;
if|if
condition|(
name|prev
operator|!=
literal|null
condition|)
name|next
operator|.
name|setHint
argument_list|(
name|MESSAGES
operator|.
name|courseRequestsHintAlt2
argument_list|(
name|prev
operator|.
name|getText
argument_list|()
argument_list|,
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|next
operator|.
name|setHint
argument_list|(
name|MESSAGES
operator|.
name|courseRequestsHintAlt
argument_list|(
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|next
operator|.
name|setHint
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|CONSTANTS
operator|.
name|courseRequestAutomaticallyAddFirstAlternative
argument_list|()
operator|&&
operator|!
name|iAlternate
operator|&&
name|event
operator|.
name|isValid
argument_list|()
operator|&&
name|event
operator|.
name|getValue
argument_list|()
operator|.
name|isCourse
argument_list|()
operator|&&
name|event
operator|.
name|getValue
argument_list|()
operator|.
name|isCanDelete
argument_list|()
operator|&&
name|getIndex
argument_list|()
operator|==
literal|0
condition|)
block|{
name|insertAlternative
argument_list|(
name|getCourses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|CourseSelectionBox
name|prev
init|=
name|getPrevious
argument_list|()
decl_stmt|;
if|if
condition|(
name|prev
operator|!=
literal|null
condition|)
block|{
name|prev
operator|.
name|resizeFilterIfNeeded
argument_list|()
expr_stmt|;
block|}
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|CourseRequestLine
operator|.
name|this
argument_list|,
name|CourseRequestLine
operator|.
name|this
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addValidator
argument_list|(
operator|new
name|Validator
argument_list|<
name|CourseSelection
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|validate
parameter_list|(
name|CourseSelection
name|source
parameter_list|)
block|{
if|if
condition|(
name|getIndex
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|isAlternate
argument_list|()
condition|)
block|{
if|if
condition|(
name|getValue
argument_list|()
operator|.
name|isFreeTime
argument_list|()
condition|)
return|return
name|MESSAGES
operator|.
name|validationAltFreeTime
argument_list|()
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|getPrevious
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|getIndex
argument_list|()
operator|==
literal|2
condition|)
return|return
name|MESSAGES
operator|.
name|validationSecondAltWithoutFirst
argument_list|()
return|;
return|return
name|MESSAGES
operator|.
name|validationNoCourse
argument_list|()
return|;
block|}
if|if
condition|(
operator|!
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|getPrevious
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|isFreeTime
argument_list|()
condition|)
block|{
return|return
name|MESSAGES
operator|.
name|validationFreeTimeWithAlt
argument_list|()
return|;
block|}
if|if
condition|(
name|getValue
argument_list|()
operator|.
name|isFreeTime
argument_list|()
condition|)
block|{
return|return
name|MESSAGES
operator|.
name|validationAltFreeTime
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|iValidator
operator|!=
literal|null
condition|)
name|addValidator
argument_list|(
name|iValidator
argument_list|)
expr_stmt|;
if|if
condition|(
name|alternative
condition|)
block|{
name|removeClearOperation
argument_list|()
expr_stmt|;
name|FilterOperation
name|moveUp
init|=
operator|new
name|FilterOperation
argument_list|(
name|RESOURCES
operator|.
name|filterSwap
argument_list|()
argument_list|,
literal|'S'
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onBeforeResize
parameter_list|(
name|CourseRequestFilterBox
name|filter
parameter_list|)
block|{
name|setVisible
argument_list|(
name|isCanChangeAlternatives
argument_list|()
operator|&&
operator|(
operator|!
name|iSectioning
operator|||
name|isEnabled
argument_list|()
operator|)
operator|&&
operator|!
name|filter
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|iCourses
operator|.
name|size
argument_list|()
operator|!=
name|getIndex
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|moveUp
operator|.
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|altFilterSwapWithAlternative
argument_list|()
argument_list|)
expr_stmt|;
name|moveUp
operator|.
name|setAltText
argument_list|(
name|MESSAGES
operator|.
name|altFilterSwapWithAlternative
argument_list|()
argument_list|)
expr_stmt|;
name|moveUp
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
specifier|final
name|CourseSelectionBox
name|next
init|=
name|getNext
argument_list|()
decl_stmt|;
if|if
condition|(
name|next
operator|!=
literal|null
operator|&&
name|next
operator|.
name|getValue
argument_list|()
operator|.
name|isCourse
argument_list|()
condition|)
block|{
name|RequestedCourse
name|rc
init|=
name|getValue
argument_list|()
decl_stmt|;
name|setValue
argument_list|(
name|next
operator|.
name|getValue
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|next
operator|.
name|setValue
argument_list|(
name|rc
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|next
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|CourseSelectionBox
name|prev
init|=
name|getPrevious
argument_list|()
decl_stmt|;
if|if
condition|(
name|prev
operator|!=
literal|null
condition|)
block|{
name|RequestedCourse
name|rc
init|=
name|prev
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|prev
operator|.
name|setValue
argument_list|(
name|getValue
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|setValue
argument_list|(
name|rc
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|prev
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|addOperation
argument_list|(
name|moveUp
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FilterOperation
name|remove
init|=
operator|new
name|FilterOperation
argument_list|(
name|RESOURCES
operator|.
name|filterRemoveAlternative
argument_list|()
argument_list|,
literal|'X'
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onBeforeResize
parameter_list|(
name|CourseRequestFilterBox
name|filter
parameter_list|)
block|{
name|setVisible
argument_list|(
name|isCanChangeAlternatives
argument_list|()
operator|&&
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|remove
operator|.
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|altFilterRemoveAlternative
argument_list|()
argument_list|)
expr_stmt|;
name|remove
operator|.
name|setAltText
argument_list|(
name|MESSAGES
operator|.
name|altFilterRemoveAlternative
argument_list|()
argument_list|)
expr_stmt|;
name|remove
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
specifier|final
name|CourseRequestBox
name|prev
init|=
name|getPrevious
argument_list|()
decl_stmt|;
name|deleteAlternative
argument_list|(
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|prev
operator|!=
literal|null
condition|)
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|prev
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addOperation
argument_list|(
name|remove
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|FilterOperation
name|addAlternative
init|=
operator|new
name|FilterOperation
argument_list|(
name|RESOURCES
operator|.
name|filterAddAlternative
argument_list|()
argument_list|,
literal|'A'
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onBeforeResize
parameter_list|(
name|CourseRequestFilterBox
name|filter
parameter_list|)
block|{
name|setVisible
argument_list|(
name|isCanChangeAlternatives
argument_list|()
operator|&&
operator|(
operator|!
name|iSectioning
operator|||
name|isEnabled
argument_list|()
operator|)
operator|&&
name|getValue
argument_list|()
operator|.
name|isCourse
argument_list|()
operator|&&
name|iCourses
operator|.
name|size
argument_list|()
operator|==
name|getIndex
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|addAlternative
operator|.
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|altFilterAddAlternative
argument_list|()
argument_list|)
expr_stmt|;
name|addAlternative
operator|.
name|setAltText
argument_list|(
name|MESSAGES
operator|.
name|altFilterAddAlternative
argument_list|()
argument_list|)
expr_stmt|;
name|addAlternative
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|insertAlternative
argument_list|(
name|iCourses
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iCourses
operator|.
name|get
argument_list|(
name|iCourses
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addOperation
argument_list|(
name|addAlternative
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|removeClearOperation
argument_list|()
expr_stmt|;
name|FilterOperation
name|moveDown
init|=
operator|new
name|FilterOperation
argument_list|(
name|RESOURCES
operator|.
name|filterSwap
argument_list|()
argument_list|,
literal|'S'
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onBeforeResize
parameter_list|(
name|CourseRequestFilterBox
name|filter
parameter_list|)
block|{
name|CourseSelectionBox
name|next
init|=
name|getNext
argument_list|()
decl_stmt|;
name|setVisible
argument_list|(
name|isCanChangeAlternatives
argument_list|()
operator|&&
operator|(
operator|!
name|iSectioning
operator|||
name|isEnabled
argument_list|()
operator|)
operator|&&
operator|!
name|filter
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|next
operator|!=
literal|null
operator|&&
name|next
operator|.
name|getValue
argument_list|()
operator|.
name|isCourse
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|moveDown
operator|.
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|altFilterSwapWithAlternative
argument_list|()
argument_list|)
expr_stmt|;
name|moveDown
operator|.
name|setAltText
argument_list|(
name|MESSAGES
operator|.
name|altFilterSwapWithAlternative
argument_list|()
argument_list|)
expr_stmt|;
name|moveDown
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
specifier|final
name|CourseSelectionBox
name|next
init|=
name|getNext
argument_list|()
decl_stmt|;
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|RequestedCourse
name|rc
init|=
name|getValue
argument_list|()
decl_stmt|;
name|setValue
argument_list|(
name|next
operator|.
name|getValue
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|next
operator|.
name|setValue
argument_list|(
name|rc
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|next
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|addOperation
argument_list|(
name|moveDown
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FilterOperation
name|remove
init|=
operator|new
name|FilterOperation
argument_list|(
name|RESOURCES
operator|.
name|filterRemoveAlternative
argument_list|()
argument_list|,
literal|'X'
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onBeforeResize
parameter_list|(
name|CourseRequestFilterBox
name|filter
parameter_list|)
block|{
name|setVisible
argument_list|(
name|isCanChangeAlternatives
argument_list|()
operator|&&
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|remove
operator|.
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|altFilterClearCourseRequest
argument_list|()
argument_list|)
expr_stmt|;
name|remove
operator|.
name|setAltText
argument_list|(
name|MESSAGES
operator|.
name|altFilterClearCourseRequest
argument_list|()
argument_list|)
expr_stmt|;
name|remove
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|iCourses
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|RequestedCourse
name|rc
init|=
name|iCourses
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|setValue
argument_list|(
name|rc
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|deleteAlternative
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|setValue
argument_list|(
operator|(
name|RequestedCourse
operator|)
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|addOperation
argument_list|(
name|remove
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|FilterOperation
name|addAlternative
init|=
operator|new
name|FilterOperation
argument_list|(
name|RESOURCES
operator|.
name|filterAddAlternative
argument_list|()
argument_list|,
literal|'A'
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onBeforeResize
parameter_list|(
name|CourseRequestFilterBox
name|filter
parameter_list|)
block|{
name|setVisible
argument_list|(
name|isCanChangeAlternatives
argument_list|()
operator|&&
operator|(
operator|!
name|iSectioning
operator|||
name|isEnabled
argument_list|()
operator|)
operator|&&
name|getValue
argument_list|()
operator|.
name|isCourse
argument_list|()
operator|&&
name|iCourses
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|addAlternative
operator|.
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|altFilterAddAlternative
argument_list|()
argument_list|)
expr_stmt|;
name|addAlternative
operator|.
name|setAltText
argument_list|(
name|MESSAGES
operator|.
name|altFilterAddAlternative
argument_list|()
argument_list|)
expr_stmt|;
name|addAlternative
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|insertAlternative
argument_list|(
name|iCourses
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iCourses
operator|.
name|get
argument_list|(
name|iCourses
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addOperation
argument_list|(
name|addAlternative
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|iSectioning
condition|)
block|{
name|iStatus
operator|=
operator|new
name|FilterStatus
argument_list|(
name|RESOURCES
operator|.
name|requestEnrolled
argument_list|()
argument_list|)
expr_stmt|;
name|iStatus
operator|.
name|clearStatus
argument_list|()
expr_stmt|;
name|addStatus
argument_list|(
name|iStatus
argument_list|)
expr_stmt|;
name|iError
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|iStatus
operator|.
name|click
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|select
parameter_list|(
name|RequestedCourse
name|rc
parameter_list|)
block|{
if|if
condition|(
name|isEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|iCourseFinderMultipleCourses
operator|!=
literal|null
operator|&&
operator|!
name|iCourseFinderMultipleCourses
operator|.
name|getCheckedCourses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|RequestedCourse
argument_list|>
name|list
init|=
name|iCourseFinderMultipleCourses
operator|.
name|getCheckedCourses
argument_list|()
decl_stmt|;
name|int
name|courses
init|=
name|list
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|courses
operator|==
literal|1
condition|)
name|courses
operator|=
literal|2
expr_stmt|;
while|while
condition|(
name|iCourses
operator|.
name|size
argument_list|()
operator|<
name|courses
condition|)
block|{
name|insertAlternative
argument_list|(
name|iCourses
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|iCourses
operator|.
name|size
argument_list|()
operator|>
name|courses
condition|)
block|{
name|deleteAlternative
argument_list|(
name|iCourses
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|courses
condition|;
name|i
operator|++
control|)
name|iCourses
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|setValue
argument_list|(
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|?
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
else|:
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setValue
argument_list|(
name|rc
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|openDialog
parameter_list|()
block|{
if|if
condition|(
name|iCourseFinderMultipleCourses
operator|!=
literal|null
operator|&&
name|iCourseFinderMultipleCourses
operator|.
name|getLastQuery
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getCourseFinder
argument_list|()
operator|.
name|setFilter
argument_list|(
name|iCourseFinderMultipleCourses
operator|.
name|getLastQuery
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RequestedCourse
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|RequestedCourse
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseSelectionBox
name|box
range|:
name|iCourses
control|)
block|{
name|RequestedCourse
name|rc
init|=
name|box
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|rc
operator|!=
literal|null
operator|&&
name|rc
operator|.
name|isCourse
argument_list|()
condition|)
name|list
operator|.
name|add
argument_list|(
name|rc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iCourseFinderMultipleCourses
operator|.
name|setCheckedCourses
argument_list|(
name|list
argument_list|)
condition|)
block|{
name|getCourseFinder
argument_list|()
operator|.
name|setEnabled
argument_list|(
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|getCourseFinder
argument_list|()
operator|.
name|findCourse
argument_list|()
expr_stmt|;
name|iCourseFinderMultipleCourses
operator|.
name|scrollToSelectedRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|openDialog
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|super
operator|.
name|openDialog
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setStatus
parameter_list|(
name|ImageResource
name|icon
parameter_list|,
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
name|iStatus
operator|!=
literal|null
condition|)
block|{
name|iStatus
operator|.
name|setStatus
argument_list|(
name|icon
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|iError
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setCursor
argument_list|(
name|Cursor
operator|.
name|POINTER
argument_list|)
expr_stmt|;
name|resizeFilterIfNeeded
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|clearStatus
parameter_list|()
block|{
if|if
condition|(
name|iStatus
operator|!=
literal|null
condition|)
block|{
name|iStatus
operator|.
name|clearStatus
argument_list|()
expr_stmt|;
name|iError
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|clearCursor
argument_list|()
expr_stmt|;
name|resizeFilterIfNeeded
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|RequestedCourse
name|rc
parameter_list|)
block|{
name|super
operator|.
name|setValue
argument_list|(
name|rc
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSectioning
operator|||
name|rc
operator|==
literal|null
operator|||
name|rc
operator|.
name|getStatus
argument_list|()
operator|==
literal|null
condition|)
block|{
name|clearStatus
argument_list|()
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|rc
operator|.
name|getStatus
argument_list|()
condition|)
block|{
case|case
name|ENROLLED
case|:
name|setStatus
argument_list|(
name|RESOURCES
operator|.
name|requestEnrolled
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|enrolled
argument_list|(
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_REJECTED
case|:
name|setStatus
argument_list|(
name|RESOURCES
operator|.
name|requestRejected
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|overrideRejected
argument_list|(
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_PENDING
case|:
name|setStatus
argument_list|(
name|RESOURCES
operator|.
name|requestPending
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|overridePending
argument_list|(
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_CANCELLED
case|:
name|setStatus
argument_list|(
name|RESOURCES
operator|.
name|requestCancelled
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|overrideCancelled
argument_list|(
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_APPROVED
case|:
name|setStatus
argument_list|(
name|RESOURCES
operator|.
name|requestSaved
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|overrideApproved
argument_list|(
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|NEW_REQUEST
case|:
name|clearStatus
argument_list|()
expr_stmt|;
break|break;
default|default:
if|if
condition|(
name|rc
operator|.
name|isCourse
argument_list|()
condition|)
name|setStatus
argument_list|(
name|RESOURCES
operator|.
name|requestSaved
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|requested
argument_list|(
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
name|rc
operator|.
name|isFreeTime
argument_list|()
condition|)
block|{
name|String
name|free
init|=
literal|""
decl_stmt|;
for|for
control|(
name|FreeTime
name|ft
range|:
name|rc
operator|.
name|getFreeTime
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|free
operator|.
name|isEmpty
argument_list|()
condition|)
name|free
operator|+=
literal|", "
expr_stmt|;
name|free
operator|+=
name|ft
operator|.
name|toString
argument_list|(
name|CONSTANTS
operator|.
name|shortDays
argument_list|()
argument_list|,
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|setStatus
argument_list|(
name|RESOURCES
operator|.
name|requestSaved
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|requested
argument_list|(
name|CONSTANTS
operator|.
name|freePrefix
argument_list|()
operator|+
name|free
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|rc
operator|!=
literal|null
operator|&&
name|rc
operator|.
name|isFreeTime
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|iCourses
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|deleteAlternative
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|CourseSelectionBox
name|prev
init|=
name|getPrevious
argument_list|()
decl_stmt|;
comment|// if (rc == null&& prev != null&& !prev.getValue().isCourse()) setEnabled(false);
if|if
condition|(
name|prev
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|(
name|rc
operator|!=
literal|null
operator|&&
name|rc
operator|.
name|isReadOnly
argument_list|()
operator|)
operator|||
name|prev
operator|.
name|getValue
argument_list|()
operator|.
name|isFreeTime
argument_list|()
condition|)
block|{
name|setHint
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|getIndex
argument_list|()
operator|==
literal|1
condition|)
name|setHint
argument_list|(
name|MESSAGES
operator|.
name|courseRequestsHintAlt
argument_list|(
name|prev
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
name|getIndex
argument_list|()
operator|==
literal|2
condition|)
name|setHint
argument_list|(
name|MESSAGES
operator|.
name|courseRequestsHintAlt2
argument_list|(
name|iCourses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|,
name|iCourses
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|setHint
argument_list|(
name|MESSAGES
operator|.
name|courseRequestsHintAlt3
argument_list|(
name|iCourses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|,
name|iCourses
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|int
name|getIndex
parameter_list|()
block|{
return|return
name|iCourses
operator|.
name|indexOf
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
name|CourseSelectionBox
name|getPrevious
parameter_list|()
block|{
return|return
operator|(
name|getIndex
argument_list|()
operator|>
literal|0
condition|?
name|iCourses
operator|.
name|get
argument_list|(
name|getIndex
argument_list|()
operator|-
literal|1
argument_list|)
else|:
literal|null
operator|)
return|;
block|}
specifier|public
name|CourseSelectionBox
name|getNext
parameter_list|()
block|{
return|return
operator|(
name|getIndex
argument_list|()
operator|+
literal|1
operator|<
name|iCourses
operator|.
name|size
argument_list|()
condition|?
name|iCourses
operator|.
name|get
argument_list|(
name|getIndex
argument_list|()
operator|+
literal|1
argument_list|)
else|:
literal|null
operator|)
return|;
block|}
specifier|public
name|void
name|dispose
parameter_list|()
block|{
name|iCourseSelectionHandlerRegistration
operator|.
name|removeHandler
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|iArrowsVisible
init|=
literal|true
decl_stmt|;
specifier|public
name|void
name|setArrowsVisible
parameter_list|(
name|boolean
name|visible
parameter_list|)
block|{
name|iArrowsVisible
operator|=
name|visible
expr_stmt|;
name|changeVisibleStyle
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|areArrowsVisible
parameter_list|()
block|{
return|return
name|iArrowsVisible
return|;
block|}
specifier|protected
name|void
name|changeVisibleStyle
parameter_list|()
block|{
name|setStyleName
argument_list|(
literal|"noarrows"
argument_list|,
operator|!
name|areArrowsVisible
argument_list|()
operator|&&
name|isWaitListVisible
argument_list|()
argument_list|)
expr_stmt|;
name|setStyleName
argument_list|(
literal|"nowaitlist"
argument_list|,
name|areArrowsVisible
argument_list|()
operator|&&
operator|!
name|isWaitListVisible
argument_list|()
argument_list|)
expr_stmt|;
name|setStyleName
argument_list|(
literal|"noarrowswaitlist"
argument_list|,
operator|!
name|areArrowsVisible
argument_list|()
operator|&&
operator|!
name|isWaitListVisible
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

