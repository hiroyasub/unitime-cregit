begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|sectioning
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|aria
operator|.
name|AriaStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|aria
operator|.
name|ImageButton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|P
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|ServerDateTimeFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|SimpleForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeConfirmationDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeDialogBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeHeaderPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtAriaMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|RetrieveSpecialRegistrationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyCodes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|DateTimeFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|resources
operator|.
name|client
operator|.
name|ImageResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Event
operator|.
name|NativePreviewEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|SpecialRegistrationSelectionDialog
extends|extends
name|UniTimeDialogBox
block|{
specifier|protected
specifier|static
name|StudentSectioningMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|StudentSectioningConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|StudentSectioningResources
name|RESOURCES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningResources
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|GwtAriaMessages
name|ARIA
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtAriaMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|DateTimeFormat
name|sModifiedDateFormat
init|=
name|ServerDateTimeFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|timeStampFormat
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|SimpleForm
name|iForm
decl_stmt|;
specifier|private
name|UniTimeTable
argument_list|<
name|RetrieveSpecialRegistrationResponse
argument_list|>
name|iTable
decl_stmt|;
specifier|private
name|UniTimeHeaderPanel
name|iFooter
decl_stmt|;
specifier|private
name|SpecialRegistrationContext
name|iSpecReg
decl_stmt|;
specifier|public
name|SpecialRegistrationSelectionDialog
parameter_list|(
name|SpecialRegistrationContext
name|specReg
parameter_list|)
block|{
name|super
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iSpecReg
operator|=
name|specReg
expr_stmt|;
name|setEscapeToHide
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setEnterToSubmit
argument_list|(
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
if|if
condition|(
name|iTable
operator|.
name|getSelectedRow
argument_list|()
operator|>
literal|0
condition|)
name|doSubmit
argument_list|(
name|iTable
operator|.
name|getData
argument_list|(
name|iTable
operator|.
name|getSelectedRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|setText
argument_list|(
name|MESSAGES
operator|.
name|dialogSpecialRegistrations
argument_list|()
argument_list|)
expr_stmt|;
name|iForm
operator|=
operator|new
name|SimpleForm
argument_list|()
expr_stmt|;
name|iForm
operator|.
name|addStyleName
argument_list|(
literal|"unitime-SpecialRegistrations"
argument_list|)
expr_stmt|;
name|iTable
operator|=
operator|new
name|Table
argument_list|<
name|RetrieveSpecialRegistrationResponse
argument_list|>
argument_list|()
expr_stmt|;
name|iTable
operator|.
name|addStyleName
argument_list|(
literal|"registrations-table"
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|setAllowSelection
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|setAllowMultiSelect
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|iTable
argument_list|)
expr_stmt|;
name|iFooter
operator|=
operator|new
name|UniTimeHeaderPanel
argument_list|()
expr_stmt|;
name|iForm
operator|.
name|addBottomRow
argument_list|(
name|iFooter
argument_list|)
expr_stmt|;
name|setWidget
argument_list|(
name|iForm
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|UniTimeTableHeader
argument_list|>
name|header
init|=
operator|new
name|ArrayList
argument_list|<
name|UniTimeTableHeader
argument_list|>
argument_list|()
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colSpecRegSubmitted
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colSubject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colCourse
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colSubpart
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colClass
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colLimit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colCredit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colSpecRegErrors
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|addRow
argument_list|(
literal|null
argument_list|,
name|header
argument_list|)
expr_stmt|;
name|iFooter
operator|.
name|addButton
argument_list|(
literal|"select"
argument_list|,
name|MESSAGES
operator|.
name|buttonSpecRegSelect
argument_list|()
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|iTable
operator|.
name|getSelectedRow
argument_list|()
operator|>
literal|0
condition|)
name|doSubmit
argument_list|(
name|iTable
operator|.
name|getData
argument_list|(
name|iTable
operator|.
name|getSelectedRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iFooter
operator|.
name|setEnabled
argument_list|(
literal|"select"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iFooter
operator|.
name|addButton
argument_list|(
literal|"cancel"
argument_list|,
name|MESSAGES
operator|.
name|buttonSpecRegCancel
argument_list|()
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|addMouseClickListener
argument_list|(
operator|new
name|UniTimeTable
operator|.
name|MouseClickListener
argument_list|<
name|RetrieveSpecialRegistrationResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseClick
parameter_list|(
name|UniTimeTable
operator|.
name|TableEvent
argument_list|<
name|RetrieveSpecialRegistrationResponse
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getData
argument_list|()
operator|!=
literal|null
condition|)
name|doSubmit
argument_list|(
name|event
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|open
parameter_list|(
name|List
argument_list|<
name|RetrieveSpecialRegistrationResponse
argument_list|>
name|registrations
parameter_list|)
block|{
name|iTable
operator|.
name|clearTable
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|registrations
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|RetrieveSpecialRegistrationResponse
name|reg
range|:
name|registrations
control|)
block|{
name|P
name|p
init|=
operator|new
name|P
argument_list|(
literal|"icons"
argument_list|)
decl_stmt|;
if|if
condition|(
name|reg
operator|.
name|getStatus
argument_list|()
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|reg
operator|.
name|getStatus
argument_list|()
condition|)
block|{
case|case
name|Approved
case|:
name|p
operator|.
name|add
argument_list|(
operator|new
name|Icon
argument_list|(
name|RESOURCES
operator|.
name|specRegApproved
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|hintSpecRegApproved
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Cancelled
case|:
name|p
operator|.
name|add
argument_list|(
operator|new
name|Icon
argument_list|(
name|RESOURCES
operator|.
name|specRegCancelled
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|hintSpecRegCancelled
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Pending
case|:
name|p
operator|.
name|add
argument_list|(
operator|new
name|Icon
argument_list|(
name|RESOURCES
operator|.
name|specRegPending
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|hintSpecRegPending
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Rejected
case|:
name|p
operator|.
name|add
argument_list|(
operator|new
name|Icon
argument_list|(
name|RESOURCES
operator|.
name|specRegRejected
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|hintSpecRegRejected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Draft
case|:
name|p
operator|.
name|add
argument_list|(
operator|new
name|Icon
argument_list|(
name|RESOURCES
operator|.
name|specRegDraft
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|hintSpecRegDraft
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|ImageButton
name|delete
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|reg
operator|.
name|canCancel
argument_list|()
condition|)
block|{
name|delete
operator|=
operator|new
name|ImageButton
argument_list|(
name|RESOURCES
operator|.
name|delete
argument_list|()
argument_list|,
name|RESOURCES
operator|.
name|delete_Down
argument_list|()
argument_list|,
name|RESOURCES
operator|.
name|delete_Over
argument_list|()
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addStyleName
argument_list|(
literal|"unitime-NoPrint"
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|UniTimeConfirmationDialog
operator|.
name|confirm
argument_list|(
name|MESSAGES
operator|.
name|confirmOverrideRequestCancel
argument_list|()
argument_list|,
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|doCancel
argument_list|(
name|reg
operator|.
name|getRequestId
argument_list|()
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
condition|)
block|{
name|iTable
operator|.
name|clearHover
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|iTable
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>
literal|0
condition|;
name|i
operator|--
control|)
block|{
if|if
condition|(
name|iTable
operator|.
name|getData
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|reg
argument_list|)
condition|)
block|{
name|iTable
operator|.
name|removeRow
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addStyleName
argument_list|(
literal|"delete"
argument_list|)
expr_stmt|;
name|delete
operator|.
name|setAltText
argument_list|(
name|ARIA
operator|.
name|altCancelOverrideRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|reg
operator|.
name|hasChanges
argument_list|()
condition|)
block|{
name|Long
name|lastCourseId
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ClassAssignment
name|ca
range|:
name|reg
operator|.
name|getChanges
argument_list|()
control|)
block|{
name|List
argument_list|<
name|Widget
argument_list|>
name|row
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastCourseId
operator|==
literal|null
condition|)
block|{
name|row
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|DateAndNoteCell
argument_list|(
name|reg
operator|.
name|getSubmitDate
argument_list|()
argument_list|,
name|reg
operator|.
name|getNote
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
literal|"icons"
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lastCourseId
operator|==
literal|null
operator|||
operator|!
name|lastCourseId
operator|.
name|equals
argument_list|(
name|ca
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|ca
operator|.
name|getSubject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|ca
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|ca
operator|.
name|getSubpart
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|ca
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|ca
operator|.
name|getLimitString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|CreditCell
argument_list|(
name|ca
operator|.
name|getCredit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|HTML
name|errorsLabel
init|=
operator|new
name|HTML
argument_list|(
name|ca
operator|.
name|hasError
argument_list|()
condition|?
name|ca
operator|.
name|getError
argument_list|()
else|:
literal|""
argument_list|)
decl_stmt|;
name|errorsLabel
operator|.
name|addStyleName
argument_list|(
literal|"registration-errors"
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
name|errorsLabel
argument_list|)
expr_stmt|;
name|P
name|s
init|=
operator|new
name|P
argument_list|(
literal|"icons"
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|ca
operator|.
name|getSpecRegOperation
argument_list|()
condition|)
block|{
case|case
name|Add
case|:
name|s
operator|.
name|add
argument_list|(
operator|new
name|Icon
argument_list|(
name|RESOURCES
operator|.
name|assignment
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|assignment
argument_list|(
name|ca
operator|.
name|getSubject
argument_list|()
operator|+
literal|" "
operator|+
name|ca
operator|.
name|getCourseNbr
argument_list|()
operator|+
literal|" "
operator|+
name|ca
operator|.
name|getSubpart
argument_list|()
operator|+
literal|" "
operator|+
name|ca
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Drop
case|:
name|s
operator|.
name|add
argument_list|(
operator|new
name|Icon
argument_list|(
name|RESOURCES
operator|.
name|unassignment
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|unassignment
argument_list|(
name|ca
operator|.
name|getSubject
argument_list|()
operator|+
literal|" "
operator|+
name|ca
operator|.
name|getCourseNbr
argument_list|()
operator|+
literal|" "
operator|+
name|ca
operator|.
name|getSubpart
argument_list|()
operator|+
literal|" "
operator|+
name|ca
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Keep
case|:
comment|// s.add(new Icon(RESOURCES.saved(), MESSAGES.saved(ca.getSubject() + " " + ca.getCourseNbr() + " " + ca.getSubpart() + " " + ca.getSection())));
comment|// break;
default|default:
name|s
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|row
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
name|delete
operator|!=
literal|null
condition|)
block|{
name|row
operator|.
name|add
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|delete
operator|=
literal|null
expr_stmt|;
block|}
else|else
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
name|iTable
operator|.
name|addRow
argument_list|(
name|reg
argument_list|,
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|reg
operator|.
name|getRequestId
argument_list|()
operator|.
name|equals
argument_list|(
name|iSpecReg
operator|.
name|getRequestId
argument_list|()
argument_list|)
condition|)
name|iTable
operator|.
name|setSelected
argument_list|(
name|idx
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|>
literal|1
operator|&&
name|lastCourseId
operator|==
literal|null
condition|)
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|iTable
operator|.
name|getCellCount
argument_list|(
name|idx
argument_list|)
condition|;
name|c
operator|++
control|)
name|iTable
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
name|idx
argument_list|,
name|c
argument_list|,
literal|"top-border-solid"
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastCourseId
operator|!=
literal|null
operator|&&
operator|!
name|lastCourseId
operator|.
name|equals
argument_list|(
name|ca
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|iTable
operator|.
name|getCellCount
argument_list|(
name|idx
argument_list|)
condition|;
name|c
operator|++
control|)
name|iTable
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
name|idx
argument_list|,
name|c
argument_list|,
literal|"top-border-dashed"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ca
operator|.
name|isCourseAssigned
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|iTable
operator|.
name|getCellCount
argument_list|(
name|idx
argument_list|)
condition|;
name|c
operator|++
control|)
name|iTable
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
name|idx
argument_list|,
name|c
argument_list|,
literal|"change-drop"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|iTable
operator|.
name|getCellCount
argument_list|(
name|idx
argument_list|)
condition|;
name|c
operator|++
control|)
name|iTable
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
name|idx
argument_list|,
name|c
argument_list|,
literal|"change-add"
argument_list|)
expr_stmt|;
block|}
name|lastCourseId
operator|=
name|ca
operator|.
name|getCourseId
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|List
argument_list|<
name|Widget
argument_list|>
name|row
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
name|row
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|DateAndNoteCell
argument_list|(
name|reg
operator|.
name|getSubmitDate
argument_list|()
argument_list|,
name|reg
operator|.
name|getNote
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|DescriptionCell
argument_list|(
name|reg
operator|.
name|getDescription
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|errors
init|=
literal|""
decl_stmt|;
name|Label
name|errorsLabel
init|=
operator|new
name|Label
argument_list|(
name|errors
argument_list|)
decl_stmt|;
name|errorsLabel
operator|.
name|addStyleName
argument_list|(
literal|"registration-errors"
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
name|errorsLabel
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|delete
operator|!=
literal|null
condition|)
name|row
operator|.
name|add
argument_list|(
name|delete
argument_list|)
expr_stmt|;
else|else
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
name|iTable
operator|.
name|addRow
argument_list|(
name|reg
argument_list|,
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|reg
operator|.
name|getRequestId
argument_list|()
operator|.
name|equals
argument_list|(
name|iSpecReg
operator|.
name|getRequestId
argument_list|()
argument_list|)
condition|)
name|iTable
operator|.
name|setSelected
argument_list|(
name|idx
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|>
literal|1
condition|)
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|iTable
operator|.
name|getCellCount
argument_list|(
name|idx
argument_list|)
condition|;
name|c
operator|++
control|)
name|iTable
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
name|idx
argument_list|,
name|c
argument_list|,
literal|"top-border-solid"
argument_list|)
expr_stmt|;
block|}
block|}
name|iFooter
operator|.
name|setEnabled
argument_list|(
literal|"select"
argument_list|,
name|iTable
operator|.
name|getSelectedRow
argument_list|()
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|center
argument_list|()
expr_stmt|;
name|updateAriaStatus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|show
parameter_list|()
block|{
name|super
operator|.
name|show
argument_list|()
expr_stmt|;
name|updateAriaStatus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|doSubmit
parameter_list|(
name|RetrieveSpecialRegistrationResponse
name|reg
parameter_list|)
block|{
if|if
condition|(
name|reg
operator|!=
literal|null
condition|)
name|AriaStatus
operator|.
name|getInstance
argument_list|()
operator|.
name|setText
argument_list|(
name|ARIA
operator|.
name|selectedSpecReg
argument_list|(
name|reg
operator|.
name|getDescription
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|hide
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|int
name|setSelected
parameter_list|(
name|RetrieveSpecialRegistrationResponse
name|data
parameter_list|)
block|{
name|int
name|row
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RetrieveSpecialRegistrationResponse
name|d
init|=
name|iTable
operator|.
name|getData
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|row
operator|<
literal|0
operator|&&
name|d
operator|.
name|equals
argument_list|(
name|data
argument_list|)
condition|)
name|row
operator|=
name|i
expr_stmt|;
name|iTable
operator|.
name|setSelected
argument_list|(
name|i
argument_list|,
name|d
operator|.
name|equals
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|row
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onPreviewNativeEvent
parameter_list|(
name|NativePreviewEvent
name|event
parameter_list|)
block|{
name|super
operator|.
name|onPreviewNativeEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|getTypeInt
argument_list|()
operator|==
name|Event
operator|.
name|ONKEYDOWN
condition|)
block|{
if|if
condition|(
name|event
operator|.
name|getNativeEvent
argument_list|()
operator|.
name|getKeyCode
argument_list|()
operator|==
name|KeyCodes
operator|.
name|KEY_UP
condition|)
block|{
name|RetrieveSpecialRegistrationResponse
name|prev
init|=
literal|null
decl_stmt|;
name|RetrieveSpecialRegistrationResponse
name|selected
init|=
literal|null
decl_stmt|;
name|RetrieveSpecialRegistrationResponse
name|last
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|RetrieveSpecialRegistrationResponse
name|d
init|=
name|iTable
operator|.
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|iTable
operator|.
name|isSelected
argument_list|(
name|row
argument_list|)
condition|)
name|selected
operator|=
name|d
expr_stmt|;
if|else if
condition|(
name|selected
operator|==
literal|null
condition|)
name|prev
operator|=
name|d
expr_stmt|;
name|last
operator|=
name|d
expr_stmt|;
block|}
name|int
name|row
init|=
name|setSelected
argument_list|(
name|prev
operator|==
literal|null
condition|?
name|last
else|:
name|prev
argument_list|)
decl_stmt|;
if|if
condition|(
name|row
operator|>=
literal|0
condition|)
name|iTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|row
argument_list|)
operator|.
name|scrollIntoView
argument_list|()
expr_stmt|;
name|updateAriaStatus
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iFooter
operator|.
name|setEnabled
argument_list|(
literal|"select"
argument_list|,
name|iTable
operator|.
name|getSelectedRow
argument_list|()
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|event
operator|.
name|getNativeEvent
argument_list|()
operator|.
name|getKeyCode
argument_list|()
operator|==
name|KeyCodes
operator|.
name|KEY_DOWN
condition|)
block|{
name|RetrieveSpecialRegistrationResponse
name|first
init|=
literal|null
decl_stmt|;
name|RetrieveSpecialRegistrationResponse
name|selected
init|=
literal|null
decl_stmt|;
name|RetrieveSpecialRegistrationResponse
name|next
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|RetrieveSpecialRegistrationResponse
name|d
init|=
name|iTable
operator|.
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|first
operator|==
literal|null
condition|)
name|first
operator|=
name|d
expr_stmt|;
if|if
condition|(
name|iTable
operator|.
name|isSelected
argument_list|(
name|row
argument_list|)
condition|)
name|selected
operator|=
name|d
expr_stmt|;
if|else if
condition|(
name|selected
operator|!=
literal|null
operator|&&
name|next
operator|==
literal|null
condition|)
name|next
operator|=
name|d
expr_stmt|;
block|}
name|int
name|row
init|=
name|setSelected
argument_list|(
name|next
operator|==
literal|null
condition|?
name|first
else|:
name|next
argument_list|)
decl_stmt|;
if|if
condition|(
name|row
operator|>=
literal|0
condition|)
name|iTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|row
argument_list|)
operator|.
name|scrollIntoView
argument_list|()
expr_stmt|;
name|updateAriaStatus
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iFooter
operator|.
name|setEnabled
argument_list|(
literal|"select"
argument_list|,
name|iTable
operator|.
name|getSelectedRow
argument_list|()
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|updateAriaStatus
parameter_list|(
name|boolean
name|justOpened
parameter_list|)
block|{
name|String
name|text
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|justOpened
condition|)
name|text
operator|=
name|ARIA
operator|.
name|showingSpecRegs
argument_list|(
name|iTable
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|int
name|row
init|=
name|iTable
operator|.
name|getSelectedRow
argument_list|()
decl_stmt|;
name|RetrieveSpecialRegistrationResponse
name|reg
init|=
name|iTable
operator|.
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|row
operator|>=
literal|0
operator|&&
name|reg
operator|!=
literal|null
condition|)
block|{
name|text
operator|+=
operator|(
name|text
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|" "
operator|)
operator|+
name|ARIA
operator|.
name|showingSpecReg
argument_list|(
name|row
argument_list|,
name|iTable
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
argument_list|,
name|reg
operator|.
name|getDescription
argument_list|()
argument_list|,
name|reg
operator|.
name|getSubmitDate
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|AriaStatus
operator|.
name|getInstance
argument_list|()
operator|.
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
specifier|protected
class|class
name|DateAndNoteCell
extends|extends
name|Label
block|{
specifier|public
name|DateAndNoteCell
parameter_list|(
name|Date
name|date
parameter_list|,
name|String
name|note
parameter_list|)
block|{
name|super
argument_list|(
name|date
operator|==
literal|null
condition|?
name|note
operator|==
literal|null
condition|?
literal|""
else|:
name|note
else|:
name|sModifiedDateFormat
operator|.
name|format
argument_list|(
name|date
argument_list|)
operator|+
operator|(
name|note
operator|==
literal|null
operator|||
name|note
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"\n"
operator|+
name|note
operator|)
argument_list|)
expr_stmt|;
name|addStyleName
argument_list|(
literal|"date-and-note"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
class|class
name|DescriptionCell
extends|extends
name|Label
implements|implements
name|UniTimeTable
operator|.
name|HasColSpan
block|{
specifier|public
name|DescriptionCell
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|super
argument_list|(
name|text
operator|==
literal|null
condition|?
literal|""
else|:
name|text
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getColSpan
parameter_list|()
block|{
return|return
literal|6
return|;
block|}
block|}
specifier|protected
class|class
name|Icon
extends|extends
name|Image
block|{
specifier|public
name|Icon
parameter_list|(
name|ImageResource
name|image
parameter_list|,
specifier|final
name|String
name|text
parameter_list|)
block|{
name|super
argument_list|(
name|image
argument_list|)
expr_stmt|;
if|if
condition|(
name|text
operator|!=
literal|null
operator|&&
operator|!
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|setAltText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|setTitle
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
name|UniTimeConfirmationDialog
operator|.
name|info
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
class|class
name|CreditCell
extends|extends
name|HTML
block|{
specifier|public
name|CreditCell
parameter_list|(
name|String
name|text
parameter_list|)
block|{
if|if
condition|(
name|text
operator|!=
literal|null
operator|&&
name|text
operator|.
name|indexOf
argument_list|(
literal|'|'
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|setHTML
argument_list|(
name|text
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|text
operator|.
name|indexOf
argument_list|(
literal|'|'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|setTitle
argument_list|(
name|text
operator|.
name|substring
argument_list|(
name|text
operator|.
name|indexOf
argument_list|(
literal|'|'
argument_list|)
operator|+
literal|1
argument_list|)
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|"<br>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setHTML
argument_list|(
name|text
operator|==
literal|null
condition|?
literal|""
else|:
name|text
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|"<br>"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|text
operator|!=
literal|null
condition|)
name|setTitle
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
class|class
name|Table
parameter_list|<
name|T
parameter_list|>
extends|extends
name|UniTimeTable
argument_list|<
name|T
argument_list|>
block|{
specifier|protected
name|Set
argument_list|<
name|Integer
argument_list|>
name|iLastHoverRows
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|void
name|updateHover
parameter_list|()
block|{
comment|// clear hover if needed
if|if
condition|(
operator|!
name|iLastHoverRows
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|iLastHoverRow
operator|<
literal|0
operator|||
operator|!
name|iLastHoverRows
operator|.
name|contains
argument_list|(
name|iLastHoverRow
argument_list|)
operator|)
condition|)
block|{
for|for
control|(
name|int
name|row
range|:
name|iLastHoverRows
control|)
block|{
name|boolean
name|selected
init|=
literal|false
decl_stmt|;
name|String
name|style
init|=
name|getRowFormatter
argument_list|()
operator|.
name|getStyleName
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|isAllowSelection
argument_list|()
condition|)
block|{
if|if
condition|(
literal|"unitime-TableRowSelected"
operator|.
name|equals
argument_list|(
name|style
argument_list|)
condition|)
block|{
name|selected
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
literal|"unitime-TableRowHover"
operator|.
name|equals
argument_list|(
name|style
argument_list|)
condition|)
block|{
name|getRowFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"unitime-TableRowSelectedHover"
operator|.
name|equals
argument_list|(
name|style
argument_list|)
condition|)
block|{
name|getRowFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
literal|"unitime-TableRowSelected"
argument_list|)
expr_stmt|;
name|selected
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|getRowFormatter
argument_list|()
operator|.
name|removeStyleName
argument_list|(
name|row
argument_list|,
literal|"unitime-TableRowHover"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|selected
condition|)
block|{
name|String
name|color
init|=
name|iLastHoverBackgroundColor
operator|.
name|remove
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|color
operator|!=
literal|null
operator|&&
operator|!
name|color
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|getRowFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|row
argument_list|)
operator|.
name|getStyle
argument_list|()
operator|.
name|setBackgroundColor
argument_list|(
name|color
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|iLastHoverRows
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|// set hover if needed
if|if
condition|(
name|iLastHoverRow
operator|>=
literal|0
operator|&&
name|iLastHoverRows
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|T
name|data
init|=
name|getData
argument_list|(
name|iLastHoverRow
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
if|if
condition|(
name|data
operator|.
name|equals
argument_list|(
name|getData
argument_list|(
name|row
argument_list|)
argument_list|)
condition|)
block|{
name|iLastHoverRows
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|boolean
name|selected
init|=
literal|false
decl_stmt|;
name|String
name|style
init|=
name|getRowFormatter
argument_list|()
operator|.
name|getStyleName
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|isAllowSelection
argument_list|()
condition|)
block|{
if|if
condition|(
literal|"unitime-TableRowSelectedHover"
operator|.
name|equals
argument_list|(
name|style
argument_list|)
condition|)
block|{
name|selected
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
literal|"unitime-TableRowSelected"
operator|.
name|equals
argument_list|(
name|style
argument_list|)
condition|)
block|{
name|getRowFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
literal|"unitime-TableRowSelectedHover"
argument_list|)
expr_stmt|;
name|selected
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|getRowFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
literal|"unitime-TableRowHover"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|getRowFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
literal|"unitime-TableRowHover"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|selected
condition|)
block|{
name|String
name|color
init|=
name|getRowFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|row
argument_list|)
operator|.
name|getStyle
argument_list|()
operator|.
name|getBackgroundColor
argument_list|()
decl_stmt|;
if|if
condition|(
name|color
operator|!=
literal|null
operator|&&
operator|!
name|color
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|getRowFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|row
argument_list|)
operator|.
name|getStyle
argument_list|()
operator|.
name|clearBackgroundColor
argument_list|()
expr_stmt|;
name|iLastHoverBackgroundColor
operator|.
name|put
argument_list|(
name|row
argument_list|,
name|color
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iLastHoverBackgroundColor
operator|.
name|remove
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onBrowserEvent
parameter_list|(
specifier|final
name|Event
name|event
parameter_list|)
block|{
name|super
operator|.
name|onBrowserEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|updateHover
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearHover
parameter_list|()
block|{
name|super
operator|.
name|clearHover
argument_list|()
expr_stmt|;
name|updateHover
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|doCancel
parameter_list|(
name|String
name|requestId
parameter_list|,
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
name|callback
parameter_list|)
block|{
block|}
block|}
end_class

end_unit

