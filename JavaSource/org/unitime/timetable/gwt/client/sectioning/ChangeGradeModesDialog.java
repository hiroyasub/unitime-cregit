begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|sectioning
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|aria
operator|.
name|HasAriaLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|LoadingWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|P
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|SimpleForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeDialogBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeHeaderPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|WebTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|WebTable
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtAriaMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|SectioningService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|SectioningServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|OnlineSectioningInterface
operator|.
name|GradeMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|ChangeGradeModesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|ChangeGradeModesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|RetrieveAvailableGradeModesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|RetrieveAvailableGradeModesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|RetrieveSpecialRegistrationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationCreditChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationGradeMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationGradeModeChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationGradeModeChanges
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationVariableCredit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationVariableCreditChange
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|CheckBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Focusable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ListBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ScrollPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|TextArea
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ChangeGradeModesDialog
extends|extends
name|UniTimeDialogBox
block|{
specifier|protected
specifier|static
name|StudentSectioningMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|GwtMessages
name|GWT_MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|StudentSectioningConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|StudentSectioningResources
name|RESOURCES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningResources
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|SectioningServiceAsync
name|iSectioningService
init|=
name|GWT
operator|.
name|create
argument_list|(
name|SectioningService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|GwtAriaMessages
name|ARIA
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtAriaMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|SimpleForm
name|iForm
decl_stmt|;
specifier|private
name|WebTable
name|iTable
decl_stmt|;
specifier|private
name|UniTimeHeaderPanel
name|iButtons
decl_stmt|;
specifier|private
name|List
argument_list|<
name|GradeModeChange
argument_list|>
name|iChanges
init|=
operator|new
name|ArrayList
argument_list|<
name|GradeModeChange
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|VariableCreditChange
argument_list|>
name|iVarChanges
init|=
operator|new
name|ArrayList
argument_list|<
name|VariableCreditChange
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Focusable
name|iFirstChange
init|=
literal|null
decl_stmt|;
specifier|private
name|ScheduleStatus
name|iStatus
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|iEnrollment
decl_stmt|;
specifier|private
name|List
argument_list|<
name|RetrieveSpecialRegistrationResponse
argument_list|>
name|iApprovals
decl_stmt|;
specifier|private
name|P
name|iApproval
init|=
literal|null
decl_stmt|;
specifier|private
name|TextArea
name|iNote
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|CheckBox
argument_list|>
name|iDisclaimers
init|=
operator|new
name|ArrayList
argument_list|<
name|CheckBox
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Float
name|iCurrentCredit
decl_stmt|,
name|iMaxCredit
decl_stmt|;
specifier|private
name|Long
name|iStudentId
decl_stmt|,
name|iSessionId
decl_stmt|;
specifier|public
name|ChangeGradeModesDialog
parameter_list|(
name|ScheduleStatus
name|status
parameter_list|)
block|{
name|super
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addStyleName
argument_list|(
literal|"unitime-ChangeGradeModesDialog"
argument_list|)
expr_stmt|;
name|setText
argument_list|(
name|MESSAGES
operator|.
name|dialogChangeGradeMode
argument_list|()
argument_list|)
expr_stmt|;
name|iStatus
operator|=
name|status
expr_stmt|;
name|iForm
operator|=
operator|new
name|SimpleForm
argument_list|()
expr_stmt|;
name|iTable
operator|=
operator|new
name|WebTable
argument_list|()
expr_stmt|;
name|iTable
operator|.
name|setHeader
argument_list|(
operator|new
name|WebTable
operator|.
name|Row
argument_list|(
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colSubject
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colCourse
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colSubpart
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colClass
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colDays
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colStart
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colEnd
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colDate
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colRoom
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colCredit
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colPendingCredit
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colTitleGradeMode
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colTitlePendingGradeMode
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|setEmptyMessage
argument_list|(
name|MESSAGES
operator|.
name|emptyGradeChanges
argument_list|()
argument_list|)
expr_stmt|;
name|ScrollPanel
name|scroll
init|=
operator|new
name|ScrollPanel
argument_list|(
name|iTable
argument_list|)
decl_stmt|;
name|scroll
operator|.
name|setStyleName
argument_list|(
literal|"unitime-ScrollPanel"
argument_list|)
expr_stmt|;
name|scroll
operator|.
name|addStyleName
argument_list|(
literal|"class-table"
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|scroll
argument_list|)
expr_stmt|;
name|iButtons
operator|=
operator|new
name|UniTimeHeaderPanel
argument_list|()
expr_stmt|;
name|iButtons
operator|.
name|addButton
argument_list|(
literal|"submit"
argument_list|,
name|MESSAGES
operator|.
name|buttonSubmitGradeModeChanges
argument_list|()
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|hide
argument_list|()
expr_stmt|;
name|onSubmit
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iButtons
operator|.
name|addButton
argument_list|(
literal|"cancel"
argument_list|,
name|MESSAGES
operator|.
name|buttonCloseGradeModeChanges
argument_list|()
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iButtons
operator|.
name|setEnabled
argument_list|(
literal|"submit"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iApproval
operator|=
operator|new
name|P
argument_list|(
literal|"approval-panel"
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|iApproval
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addBottomRow
argument_list|(
name|iButtons
argument_list|)
expr_stmt|;
name|iNote
operator|=
operator|new
name|TextArea
argument_list|()
expr_stmt|;
name|iNote
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TextArea"
argument_list|)
expr_stmt|;
name|iNote
operator|.
name|addStyleName
argument_list|(
literal|"request-note"
argument_list|)
expr_stmt|;
name|iNote
operator|.
name|setVisibleLines
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|iNote
operator|.
name|setCharacterWidth
argument_list|(
literal|80
argument_list|)
expr_stmt|;
name|setWidget
argument_list|(
name|iForm
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|GradeMode
name|getPendingGradeMode
parameter_list|(
name|Long
name|courseId
parameter_list|)
block|{
if|if
condition|(
name|iApprovals
operator|==
literal|null
condition|)
return|return
literal|null
return|;
for|for
control|(
name|RetrieveSpecialRegistrationResponse
name|approval
range|:
name|iApprovals
control|)
block|{
if|if
condition|(
name|approval
operator|.
name|getStatus
argument_list|()
operator|==
name|SpecialRegistrationStatus
operator|.
name|Pending
operator|&&
name|approval
operator|.
name|hasChanges
argument_list|()
condition|)
block|{
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|clazz
range|:
name|approval
operator|.
name|getChanges
argument_list|()
control|)
block|{
if|if
condition|(
name|clazz
operator|.
name|getGradeMode
argument_list|()
operator|!=
literal|null
operator|&&
name|courseId
operator|.
name|equals
argument_list|(
name|clazz
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|clazz
operator|.
name|getGradeMode
argument_list|()
return|;
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|Float
name|getPendingCredit
parameter_list|(
name|Long
name|courseId
parameter_list|)
block|{
if|if
condition|(
name|iApprovals
operator|==
literal|null
condition|)
return|return
literal|null
return|;
for|for
control|(
name|RetrieveSpecialRegistrationResponse
name|approval
range|:
name|iApprovals
control|)
block|{
if|if
condition|(
name|approval
operator|.
name|getStatus
argument_list|()
operator|==
name|SpecialRegistrationStatus
operator|.
name|Pending
operator|&&
name|approval
operator|.
name|hasChanges
argument_list|()
condition|)
block|{
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|clazz
range|:
name|approval
operator|.
name|getChanges
argument_list|()
control|)
block|{
if|if
condition|(
name|clazz
operator|.
name|getCreditHour
argument_list|()
operator|!=
literal|null
operator|&&
name|courseId
operator|.
name|equals
argument_list|(
name|clazz
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|clazz
operator|.
name|getCreditHour
argument_list|()
return|;
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|changeGradeModes
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|Long
name|studentId
parameter_list|,
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|enrollment
parameter_list|,
name|List
argument_list|<
name|RetrieveSpecialRegistrationResponse
argument_list|>
name|approvals
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
name|MESSAGES
operator|.
name|waitRetrieveGradeModes
argument_list|()
argument_list|)
expr_stmt|;
name|iChanges
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iVarChanges
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iFirstChange
operator|=
literal|null
expr_stmt|;
name|iNote
operator|.
name|setValue
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|iApproval
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iEnrollment
operator|=
name|enrollment
expr_stmt|;
name|iApprovals
operator|=
name|approvals
expr_stmt|;
name|iSessionId
operator|=
name|sessionId
expr_stmt|;
name|iStudentId
operator|=
name|studentId
expr_stmt|;
name|iSectioningService
operator|.
name|retrieveGradeModes
argument_list|(
operator|new
name|RetrieveAvailableGradeModesRequest
argument_list|(
name|sessionId
argument_list|,
name|studentId
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|RetrieveAvailableGradeModesResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iStatus
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|exceptionRetrieveGradeModes
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|caught
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|RetrieveAvailableGradeModesResponse
name|result
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|WebTable
operator|.
name|Row
argument_list|>
name|rows
init|=
operator|new
name|ArrayList
argument_list|<
name|WebTable
operator|.
name|Row
argument_list|>
argument_list|()
decl_stmt|;
name|iTable
operator|.
name|clearData
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iCurrentCredit
operator|=
name|result
operator|.
name|getCurrentCredit
argument_list|()
expr_stmt|;
name|iMaxCredit
operator|=
name|result
operator|.
name|getMaxCredit
argument_list|()
expr_stmt|;
name|Long
name|lastCourseId
init|=
literal|null
decl_stmt|;
name|GradeModeChange
name|change
init|=
literal|null
decl_stmt|;
name|boolean
name|hasPendingCredit
init|=
literal|false
decl_stmt|;
name|boolean
name|hasPendingGradeMode
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|clazz
range|:
name|iEnrollment
control|)
block|{
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
continue|continue;
name|SpecialRegistrationGradeModeChanges
name|gradeMode
init|=
name|result
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
name|SpecialRegistrationVariableCreditChange
name|varCredit
init|=
name|result
operator|.
name|getVariableCredits
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|gradeMode
operator|==
literal|null
operator|&&
name|varCredit
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|clazz
operator|.
name|getParentSection
argument_list|()
operator|!=
literal|null
operator|&&
name|clazz
operator|.
name|getParentSection
argument_list|()
operator|.
name|equals
argument_list|(
name|clazz
operator|.
name|getSection
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|clazz
operator|.
name|isTeachingAssignment
argument_list|()
operator|||
name|clazz
operator|.
name|isDummy
argument_list|()
operator|||
name|clazz
operator|.
name|isFreeTime
argument_list|()
condition|)
continue|continue;
name|VariableCreditChange
name|vcc
init|=
literal|null
decl_stmt|;
name|Float
name|pendingCredit
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|varCredit
operator|!=
literal|null
condition|)
block|{
name|vcc
operator|=
operator|new
name|VariableCreditChange
argument_list|(
name|clazz
argument_list|,
name|varCredit
argument_list|)
expr_stmt|;
name|iVarChanges
operator|.
name|add
argument_list|(
name|vcc
argument_list|)
expr_stmt|;
if|if
condition|(
name|iFirstChange
operator|==
literal|null
condition|)
name|iFirstChange
operator|=
operator|(
name|Focusable
operator|)
name|vcc
operator|.
name|getWidget
argument_list|()
expr_stmt|;
name|pendingCredit
operator|=
name|getPendingCredit
argument_list|(
name|clazz
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|pendingCredit
operator|!=
literal|null
condition|)
name|hasPendingCredit
operator|=
literal|true
expr_stmt|;
block|}
name|boolean
name|firstClazz
init|=
operator|!
name|clazz
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|lastCourseId
argument_list|)
decl_stmt|;
name|GradeMode
name|pendingGradeMode
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|gradeMode
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|firstClazz
condition|)
block|{
name|change
operator|=
operator|new
name|GradeModeChange
argument_list|(
name|clazz
argument_list|,
name|gradeMode
argument_list|)
expr_stmt|;
name|iChanges
operator|.
name|add
argument_list|(
name|change
argument_list|)
expr_stmt|;
if|if
condition|(
name|iFirstChange
operator|==
literal|null
condition|)
name|iFirstChange
operator|=
operator|(
name|Focusable
operator|)
name|change
operator|.
name|getWidget
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|change
operator|.
name|addClassAssignment
argument_list|(
name|clazz
argument_list|,
name|gradeMode
argument_list|)
expr_stmt|;
block|}
name|pendingGradeMode
operator|=
name|getPendingGradeMode
argument_list|(
name|clazz
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|pendingGradeMode
operator|!=
literal|null
condition|)
block|{
name|hasPendingGradeMode
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|pendingGradeMode
operator|.
name|getLabel
argument_list|()
operator|==
literal|null
condition|)
block|{
name|SpecialRegistrationGradeMode
name|m
init|=
name|gradeMode
operator|.
name|getAvailableChange
argument_list|(
name|pendingGradeMode
operator|.
name|getCode
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
name|pendingGradeMode
operator|.
name|setLabel
argument_list|(
name|m
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|pendingGradeMode
operator|.
name|setLabel
argument_list|(
name|pendingGradeMode
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|change
operator|=
literal|null
expr_stmt|;
block|}
name|lastCourseId
operator|=
name|clazz
operator|.
name|getCourseId
argument_list|()
expr_stmt|;
name|String
name|style
init|=
operator|(
name|firstClazz
operator|&&
operator|!
name|rows
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"top-border-dashed"
else|:
literal|""
operator|)
decl_stmt|;
name|WebTable
operator|.
name|Row
name|row
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|clazz
operator|.
name|isAssigned
argument_list|()
condition|)
block|{
name|row
operator|=
operator|new
name|WebTable
operator|.
name|Row
argument_list|(
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|firstClazz
condition|?
name|clazz
operator|.
name|getSubject
argument_list|()
else|:
literal|""
argument_list|)
operator|.
name|aria
argument_list|(
name|clazz
operator|.
name|getSubject
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|firstClazz
condition|?
name|CONSTANTS
operator|.
name|showCourseTitle
argument_list|()
condition|?
name|clazz
operator|.
name|getCourseNameWithTitle
argument_list|()
else|:
name|clazz
operator|.
name|getCourseName
argument_list|()
else|:
literal|""
argument_list|)
operator|.
name|aria
argument_list|(
name|CONSTANTS
operator|.
name|showCourseTitle
argument_list|()
condition|?
name|clazz
operator|.
name|getCourseNameWithTitle
argument_list|()
else|:
name|clazz
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getSubpart
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getDaysString
argument_list|(
name|CONSTANTS
operator|.
name|shortDays
argument_list|()
argument_list|)
argument_list|)
operator|.
name|aria
argument_list|(
name|clazz
operator|.
name|getDaysString
argument_list|(
name|CONSTANTS
operator|.
name|longDays
argument_list|()
argument_list|,
literal|" "
argument_list|)
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getStartString
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|)
operator|.
name|aria
argument_list|(
name|clazz
operator|.
name|getStartStringAria
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getEndString
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|)
operator|.
name|aria
argument_list|(
name|clazz
operator|.
name|getEndStringAria
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getDatePattern
argument_list|()
argument_list|)
argument_list|,
operator|(
name|clazz
operator|.
name|hasDistanceConflict
argument_list|()
condition|?
operator|new
name|WebTable
operator|.
name|RoomCell
argument_list|(
name|RESOURCES
operator|.
name|distantConflict
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|backToBackDistance
argument_list|(
name|clazz
operator|.
name|getBackToBackRooms
argument_list|()
argument_list|,
name|clazz
operator|.
name|getBackToBackDistance
argument_list|()
argument_list|)
argument_list|,
name|clazz
operator|.
name|getRooms
argument_list|()
argument_list|,
literal|", "
argument_list|)
else|:
operator|new
name|WebTable
operator|.
name|RoomCell
argument_list|(
name|clazz
operator|.
name|getRooms
argument_list|()
argument_list|,
literal|", "
argument_list|)
operator|)
argument_list|,
operator|(
name|vcc
operator|!=
literal|null
condition|?
name|vcc
else|:
operator|new
name|WebTable
operator|.
name|AbbvTextCell
argument_list|(
name|clazz
operator|.
name|getCredit
argument_list|()
argument_list|)
operator|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|pendingCredit
operator|==
literal|null
condition|?
literal|""
else|:
name|MESSAGES
operator|.
name|credit
argument_list|(
name|pendingCredit
argument_list|)
argument_list|)
argument_list|,
operator|(
name|change
operator|==
literal|null
condition|?
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
literal|""
argument_list|)
else|:
name|firstClazz
condition|?
name|change
else|:
operator|new
name|GradeModeLabel
argument_list|(
name|change
argument_list|,
name|gradeMode
argument_list|)
operator|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|pendingGradeMode
operator|==
literal|null
condition|?
literal|""
else|:
name|pendingGradeMode
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|=
operator|new
name|WebTable
operator|.
name|Row
argument_list|(
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|firstClazz
condition|?
name|clazz
operator|.
name|getSubject
argument_list|()
else|:
literal|""
argument_list|)
operator|.
name|aria
argument_list|(
name|clazz
operator|.
name|getSubject
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|firstClazz
condition|?
name|CONSTANTS
operator|.
name|showCourseTitle
argument_list|()
condition|?
name|clazz
operator|.
name|getCourseNameWithTitle
argument_list|()
else|:
name|clazz
operator|.
name|getCourseName
argument_list|()
else|:
literal|""
argument_list|)
operator|.
name|aria
argument_list|(
name|CONSTANTS
operator|.
name|showCourseTitle
argument_list|()
condition|?
name|clazz
operator|.
name|getCourseNameWithTitle
argument_list|()
else|:
name|clazz
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getSubpart
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|arrangeHours
argument_list|()
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getDatePattern
argument_list|()
argument_list|)
argument_list|,
operator|(
name|clazz
operator|.
name|hasDistanceConflict
argument_list|()
condition|?
operator|new
name|WebTable
operator|.
name|RoomCell
argument_list|(
name|RESOURCES
operator|.
name|distantConflict
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|backToBackDistance
argument_list|(
name|clazz
operator|.
name|getBackToBackRooms
argument_list|()
argument_list|,
name|clazz
operator|.
name|getBackToBackDistance
argument_list|()
argument_list|)
argument_list|,
name|clazz
operator|.
name|getRooms
argument_list|()
argument_list|,
literal|", "
argument_list|)
else|:
operator|new
name|WebTable
operator|.
name|RoomCell
argument_list|(
name|clazz
operator|.
name|getRooms
argument_list|()
argument_list|,
literal|", "
argument_list|)
operator|)
argument_list|,
operator|(
name|vcc
operator|!=
literal|null
condition|?
name|vcc
else|:
operator|new
name|WebTable
operator|.
name|AbbvTextCell
argument_list|(
name|clazz
operator|.
name|getCredit
argument_list|()
argument_list|)
operator|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|pendingCredit
operator|==
literal|null
condition|?
literal|""
else|:
name|MESSAGES
operator|.
name|credit
argument_list|(
name|pendingCredit
argument_list|)
argument_list|)
argument_list|,
operator|(
name|change
operator|==
literal|null
condition|?
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
literal|""
argument_list|)
else|:
name|firstClazz
condition|?
name|change
else|:
operator|new
name|GradeModeLabel
argument_list|(
name|change
argument_list|,
name|gradeMode
argument_list|)
operator|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|pendingGradeMode
operator|==
literal|null
condition|?
literal|""
else|:
name|pendingGradeMode
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|WebTable
operator|.
name|Cell
name|cell
range|:
name|row
operator|.
name|getCells
argument_list|()
control|)
name|cell
operator|.
name|setStyleName
argument_list|(
name|style
argument_list|)
expr_stmt|;
name|rows
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
name|WebTable
operator|.
name|Row
index|[]
name|rowArray
init|=
operator|new
name|WebTable
operator|.
name|Row
index|[
name|rows
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|WebTable
operator|.
name|Row
name|row
range|:
name|rows
control|)
name|rowArray
index|[
name|idx
operator|++
index|]
operator|=
name|row
expr_stmt|;
name|iTable
operator|.
name|setData
argument_list|(
name|rowArray
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|setColumnVisible
argument_list|(
literal|10
argument_list|,
name|hasPendingCredit
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|setColumnVisible
argument_list|(
literal|12
argument_list|,
name|hasPendingGradeMode
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
if|if
condition|(
name|rows
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iStatus
operator|.
name|info
argument_list|(
name|MESSAGES
operator|.
name|statusNoGradeModeChangesAvailable
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|center
argument_list|()
expr_stmt|;
if|if
condition|(
name|iFirstChange
operator|!=
literal|null
condition|)
name|iFirstChange
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|else if
condition|(
operator|!
name|iChanges
operator|.
name|isEmpty
argument_list|()
condition|)
operator|(
operator|(
name|Focusable
operator|)
name|iChanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getWidget
argument_list|()
operator|)
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|else if
condition|(
operator|!
name|iVarChanges
operator|.
name|isEmpty
argument_list|()
condition|)
operator|(
operator|(
name|Focusable
operator|)
name|iVarChanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getWidget
argument_list|()
operator|)
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|formChanged
parameter_list|()
block|{
name|iApproval
operator|.
name|clear
argument_list|()
expr_stmt|;
name|P
name|ctab
init|=
operator|new
name|P
argument_list|(
literal|"course-table"
argument_list|)
decl_stmt|;
name|boolean
name|changes
init|=
literal|false
decl_stmt|,
name|approvals
init|=
literal|false
decl_stmt|;
name|iDisclaimers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|disclaimers
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|GradeModeChange
name|cell
range|:
name|iChanges
control|)
block|{
name|SpecialRegistrationGradeMode
name|change
init|=
name|cell
operator|.
name|getChange
argument_list|()
decl_stmt|;
if|if
condition|(
name|change
operator|==
literal|null
condition|)
continue|continue;
name|changes
operator|=
literal|true
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|ca
range|:
name|cell
operator|.
name|getClassAssignments
argument_list|()
control|)
block|{
name|SpecialRegistrationGradeMode
name|ch
init|=
name|cell
operator|.
name|getChange
argument_list|(
name|ca
operator|.
name|getExternalId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|ch
operator|.
name|getOriginalGradeMode
argument_list|()
operator|!=
literal|null
operator|&&
name|ch
operator|.
name|getOriginalGradeMode
argument_list|()
operator|.
name|equals
argument_list|(
name|change
operator|.
name|getCode
argument_list|()
argument_list|)
condition|)
continue|continue;
name|P
name|cn
init|=
operator|new
name|P
argument_list|(
literal|"course-name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|first
condition|)
name|cn
operator|.
name|setText
argument_list|(
name|ca
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|P
name|sn
init|=
operator|new
name|P
argument_list|(
literal|"section-name"
argument_list|)
decl_stmt|;
name|sn
operator|.
name|setText
argument_list|(
name|ca
operator|.
name|getSection
argument_list|()
argument_list|)
expr_stmt|;
name|P
name|m
init|=
operator|new
name|P
argument_list|(
literal|"approval-message"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|.
name|hasApprovals
argument_list|()
condition|)
block|{
name|m
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|gradeModeApprovalNeeded
argument_list|(
name|ch
operator|.
name|getLabel
argument_list|()
argument_list|,
name|ToolBox
operator|.
name|toString
argument_list|(
name|ch
operator|.
name|getApprovals
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|approvals
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|m
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|gradeModeNoApprovalNeeded
argument_list|(
name|ch
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ch
operator|.
name|hasDisclaimer
argument_list|()
condition|)
name|disclaimers
operator|.
name|add
argument_list|(
name|ch
operator|.
name|getDisclaimer
argument_list|()
argument_list|)
expr_stmt|;
name|P
name|crow
init|=
operator|new
name|P
argument_list|(
literal|"course-row"
argument_list|)
decl_stmt|;
if|if
condition|(
name|first
condition|)
name|crow
operator|.
name|addStyleName
argument_list|(
literal|"first-course-line"
argument_list|)
expr_stmt|;
name|crow
operator|.
name|add
argument_list|(
name|cn
argument_list|)
expr_stmt|;
name|crow
operator|.
name|add
argument_list|(
name|sn
argument_list|)
expr_stmt|;
name|crow
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|ctab
operator|.
name|add
argument_list|(
name|crow
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|P
name|crtab
init|=
operator|new
name|P
argument_list|(
literal|"course-table"
argument_list|)
decl_stmt|;
name|boolean
name|credChanges
init|=
literal|false
decl_stmt|,
name|credApprovals
init|=
literal|false
decl_stmt|;
name|float
name|cred
init|=
operator|(
name|iCurrentCredit
operator|==
literal|null
condition|?
literal|0f
else|:
name|iCurrentCredit
operator|.
name|floatValue
argument_list|()
operator|)
decl_stmt|;
for|for
control|(
name|VariableCreditChange
name|cell
range|:
name|iVarChanges
control|)
block|{
name|SpecialRegistrationVariableCredit
name|change
init|=
name|cell
operator|.
name|getChange
argument_list|()
decl_stmt|;
if|if
condition|(
name|change
operator|==
literal|null
condition|)
continue|continue;
name|cred
operator|+=
name|change
operator|.
name|getCreditChange
argument_list|()
expr_stmt|;
name|credChanges
operator|=
literal|true
expr_stmt|;
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|ca
init|=
name|cell
operator|.
name|getClassAssignment
argument_list|()
decl_stmt|;
name|P
name|cn
init|=
operator|new
name|P
argument_list|(
literal|"course-name"
argument_list|)
decl_stmt|;
name|cn
operator|.
name|setText
argument_list|(
name|ca
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|P
name|sn
init|=
operator|new
name|P
argument_list|(
literal|"section-name"
argument_list|)
decl_stmt|;
name|sn
operator|.
name|setText
argument_list|(
name|ca
operator|.
name|getSection
argument_list|()
argument_list|)
expr_stmt|;
name|P
name|m
init|=
operator|new
name|P
argument_list|(
literal|"approval-message"
argument_list|)
decl_stmt|;
if|if
condition|(
name|change
operator|.
name|hasApprovals
argument_list|()
condition|)
block|{
name|m
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|varCreditApprovalNeeded
argument_list|(
name|change
operator|.
name|getCredit
argument_list|()
argument_list|,
name|ToolBox
operator|.
name|toString
argument_list|(
name|change
operator|.
name|getApprovals
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|credApprovals
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|m
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|varCreditNoApprovalNeeded
argument_list|(
name|change
operator|.
name|getCredit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|P
name|crow
init|=
operator|new
name|P
argument_list|(
literal|"course-row"
argument_list|)
decl_stmt|;
name|crow
operator|.
name|addStyleName
argument_list|(
literal|"first-course-line"
argument_list|)
expr_stmt|;
name|crow
operator|.
name|add
argument_list|(
name|cn
argument_list|)
expr_stmt|;
name|crow
operator|.
name|add
argument_list|(
name|sn
argument_list|)
expr_stmt|;
name|crow
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|crtab
operator|.
name|add
argument_list|(
name|crow
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|changes
condition|)
block|{
name|P
name|m
init|=
operator|new
name|P
argument_list|(
literal|"message"
argument_list|)
decl_stmt|;
name|m
operator|.
name|setHTML
argument_list|(
name|MESSAGES
operator|.
name|gradeModeListChanges
argument_list|()
argument_list|)
expr_stmt|;
name|iApproval
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|iApproval
operator|.
name|add
argument_list|(
name|ctab
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|credChanges
condition|)
block|{
name|P
name|m
init|=
operator|new
name|P
argument_list|(
literal|"message"
argument_list|)
decl_stmt|;
name|m
operator|.
name|setHTML
argument_list|(
name|MESSAGES
operator|.
name|varCreditListChanges
argument_list|()
argument_list|)
expr_stmt|;
name|iApproval
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|iApproval
operator|.
name|add
argument_list|(
name|crtab
argument_list|)
expr_stmt|;
if|if
condition|(
name|iMaxCredit
operator|!=
literal|null
operator|&&
name|cred
operator|>
name|iMaxCredit
condition|)
block|{
name|m
operator|=
operator|new
name|P
argument_list|(
literal|"message"
argument_list|,
literal|"credit-message"
argument_list|)
expr_stmt|;
name|m
operator|.
name|setHTML
argument_list|(
name|MESSAGES
operator|.
name|varCreditMaxExceeded
argument_list|(
name|cred
argument_list|,
name|iMaxCredit
argument_list|)
argument_list|)
expr_stmt|;
name|iApproval
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|approvals
operator|||
name|credApprovals
operator|||
operator|(
name|credChanges
operator|&&
name|iMaxCredit
operator|!=
literal|null
operator|&&
name|cred
operator|>
name|iMaxCredit
operator|)
condition|)
block|{
name|P
name|m
init|=
operator|new
name|P
argument_list|(
literal|"message"
argument_list|)
decl_stmt|;
name|m
operator|.
name|setHTML
argument_list|(
name|MESSAGES
operator|.
name|gradeModeChangesNote
argument_list|()
argument_list|)
expr_stmt|;
name|iApproval
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|iApproval
operator|.
name|add
argument_list|(
name|iNote
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|disclaimers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|P
name|m
init|=
operator|new
name|P
argument_list|(
literal|"message"
argument_list|)
decl_stmt|;
name|m
operator|.
name|setHTML
argument_list|(
name|MESSAGES
operator|.
name|gradeModeDisclaimers
argument_list|()
argument_list|)
expr_stmt|;
name|iApproval
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|d
range|:
name|disclaimers
control|)
block|{
name|CheckBox
name|ch
init|=
operator|new
name|CheckBox
argument_list|(
name|d
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ch
operator|.
name|addStyleName
argument_list|(
literal|"disclaimer-message"
argument_list|)
expr_stmt|;
name|ch
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|event
parameter_list|)
block|{
name|submitUpdateEnabled
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iDisclaimers
operator|.
name|add
argument_list|(
name|ch
argument_list|)
expr_stmt|;
name|iApproval
operator|.
name|add
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|changes
operator|||
name|credChanges
condition|)
block|{
name|P
name|m
init|=
operator|new
name|P
argument_list|(
literal|"message"
argument_list|)
decl_stmt|;
name|m
operator|.
name|setHTML
argument_list|(
name|MESSAGES
operator|.
name|gradeModeChangeOptions
argument_list|()
argument_list|)
expr_stmt|;
name|iApproval
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
name|iButtons
operator|.
name|setEnabled
argument_list|(
literal|"submit"
argument_list|,
operator|(
name|changes
operator|||
name|credChanges
operator|)
operator|&&
name|disclaimers
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|changes
operator|||
name|credChanges
argument_list|)
expr_stmt|;
name|center
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|submitUpdateEnabled
parameter_list|()
block|{
for|for
control|(
name|CheckBox
name|ch
range|:
name|iDisclaimers
control|)
if|if
condition|(
operator|!
name|ch
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|iButtons
operator|.
name|setEnabled
argument_list|(
literal|"submit"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
name|iButtons
operator|.
name|setEnabled
argument_list|(
literal|"submit"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|onChange
parameter_list|(
name|ChangeGradeModesResponse
name|response
parameter_list|)
block|{
block|}
specifier|protected
name|void
name|onSubmit
parameter_list|()
block|{
name|ChangeGradeModesRequest
name|request
init|=
operator|new
name|ChangeGradeModesRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setCurrentCredit
argument_list|(
name|iCurrentCredit
argument_list|)
expr_stmt|;
name|request
operator|.
name|setMaxCredit
argument_list|(
name|iMaxCredit
argument_list|)
expr_stmt|;
name|request
operator|.
name|setNote
argument_list|(
name|iNote
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setSessionId
argument_list|(
name|iSessionId
argument_list|)
expr_stmt|;
name|request
operator|.
name|setStudentId
argument_list|(
name|iStudentId
argument_list|)
expr_stmt|;
for|for
control|(
name|GradeModeChange
name|cell
range|:
name|iChanges
control|)
block|{
name|SpecialRegistrationGradeMode
name|change
init|=
name|cell
operator|.
name|getChange
argument_list|()
decl_stmt|;
if|if
condition|(
name|change
operator|==
literal|null
condition|)
continue|continue;
name|SpecialRegistrationGradeModeChange
name|ch
init|=
operator|new
name|SpecialRegistrationGradeModeChange
argument_list|()
decl_stmt|;
name|ch
operator|.
name|setOriginalGradeMode
argument_list|(
name|cell
operator|.
name|getGradeModes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCurrentGradeMode
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|cell
operator|.
name|getGradeModes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCurrentGradeMode
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|ch
operator|.
name|setSelectedGradeMode
argument_list|(
name|change
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|ch
operator|.
name|setSelectedGradeModeDescription
argument_list|(
name|change
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|ch
operator|.
name|setSubject
argument_list|(
name|cell
operator|.
name|getClassAssignments
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
name|ch
operator|.
name|setCourse
argument_list|(
name|cell
operator|.
name|getClassAssignments
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|ch
operator|.
name|setCredit
argument_list|(
name|cell
operator|.
name|getClassAssignments
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCredit
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|ca
range|:
name|cell
operator|.
name|getClassAssignments
argument_list|()
control|)
block|{
name|SpecialRegistrationGradeMode
name|x
init|=
name|cell
operator|.
name|getChange
argument_list|(
name|ca
operator|.
name|getExternalId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|x
operator|.
name|getOriginalGradeMode
argument_list|()
operator|!=
literal|null
operator|&&
name|x
operator|.
name|getOriginalGradeMode
argument_list|()
operator|.
name|equals
argument_list|(
name|change
operator|.
name|getCode
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|x
operator|.
name|hasApprovals
argument_list|()
condition|)
for|for
control|(
name|String
name|app
range|:
name|x
operator|.
name|getApprovals
argument_list|()
control|)
name|ch
operator|.
name|addApproval
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|ch
operator|.
name|addCrn
argument_list|(
name|ca
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|addChange
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|VariableCreditChange
name|cell
range|:
name|iVarChanges
control|)
block|{
name|SpecialRegistrationVariableCredit
name|change
init|=
name|cell
operator|.
name|getChange
argument_list|()
decl_stmt|;
if|if
condition|(
name|change
operator|==
literal|null
condition|)
continue|continue;
name|SpecialRegistrationCreditChange
name|ch
init|=
operator|new
name|SpecialRegistrationCreditChange
argument_list|()
decl_stmt|;
name|ch
operator|.
name|setCredit
argument_list|(
name|change
operator|.
name|getCredit
argument_list|()
argument_list|)
expr_stmt|;
name|ch
operator|.
name|setOriginalCredit
argument_list|(
name|change
operator|.
name|getOriginalCredit
argument_list|()
argument_list|)
expr_stmt|;
name|ch
operator|.
name|setSubject
argument_list|(
name|cell
operator|.
name|getClassAssignment
argument_list|()
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
name|ch
operator|.
name|setCourse
argument_list|(
name|cell
operator|.
name|getClassAssignment
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|ch
operator|.
name|setCrn
argument_list|(
name|cell
operator|.
name|getClassAssignment
argument_list|()
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|change
operator|.
name|hasApprovals
argument_list|()
condition|)
for|for
control|(
name|String
name|app
range|:
name|change
operator|.
name|getApprovals
argument_list|()
control|)
name|ch
operator|.
name|addApproval
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|request
operator|.
name|addChange
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasGradeModeChanges
argument_list|()
operator|||
name|request
operator|.
name|hasCreditChanges
argument_list|()
condition|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
name|MESSAGES
operator|.
name|waitChangeGradeModes
argument_list|()
argument_list|)
expr_stmt|;
name|iSectioningService
operator|.
name|changeGradeModes
argument_list|(
name|request
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|ChangeGradeModesResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|ChangeGradeModesResponse
name|response
parameter_list|)
block|{
if|if
condition|(
name|response
operator|.
name|hasRequests
argument_list|()
condition|)
name|iStatus
operator|.
name|info
argument_list|(
name|MESSAGES
operator|.
name|statusGradeModeChangesRequested
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|iStatus
operator|.
name|info
argument_list|(
name|MESSAGES
operator|.
name|statusGradeModeChangesApplied
argument_list|()
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|onChange
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iStatus
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|exceptionChangeGradeModes
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|caught
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iStatus
operator|.
name|info
argument_list|(
name|MESSAGES
operator|.
name|statusNoGradeModeChangesMade
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
class|class
name|GradeModeChange
extends|extends
name|Cell
implements|implements
name|HasAriaLabel
block|{
specifier|private
name|ListBox
name|iList
decl_stmt|;
specifier|private
name|List
argument_list|<
name|SpecialRegistrationGradeModeChanges
argument_list|>
name|iGradeMode
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|iClasses
decl_stmt|;
specifier|public
name|GradeModeChange
parameter_list|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|ca
parameter_list|,
name|SpecialRegistrationGradeModeChanges
name|gradeMode
parameter_list|)
block|{
name|super
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|iList
operator|=
operator|new
name|ListBox
argument_list|()
expr_stmt|;
name|iList
operator|.
name|addStyleName
argument_list|(
literal|"grade-mode-list"
argument_list|)
expr_stmt|;
name|iClasses
operator|=
operator|new
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
argument_list|()
expr_stmt|;
name|iClasses
operator|.
name|add
argument_list|(
name|ca
argument_list|)
expr_stmt|;
name|iGradeMode
operator|=
operator|new
name|ArrayList
argument_list|<
name|SpecialRegistrationGradeModeChanges
argument_list|>
argument_list|()
expr_stmt|;
name|iGradeMode
operator|.
name|add
argument_list|(
name|gradeMode
argument_list|)
expr_stmt|;
name|iList
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|formChanged
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|setup
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|setup
parameter_list|()
block|{
name|iList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|SpecialRegistrationGradeMode
name|current
init|=
name|iGradeMode
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCurrentGradeMode
argument_list|()
decl_stmt|;
name|boolean
name|same
init|=
literal|true
decl_stmt|;
for|for
control|(
name|SpecialRegistrationGradeModeChanges
name|gm
range|:
name|iGradeMode
control|)
block|{
name|SpecialRegistrationGradeMode
name|m
init|=
name|gm
operator|.
name|getCurrentGradeMode
argument_list|()
decl_stmt|;
if|if
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|m
operator|==
literal|null
operator|||
operator|!
name|current
operator|.
name|getCode
argument_list|()
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getCode
argument_list|()
argument_list|)
condition|)
name|same
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
name|same
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|same
condition|)
block|{
if|if
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
name|iList
operator|.
name|addItem
argument_list|(
name|current
operator|.
name|getLabel
argument_list|()
argument_list|,
name|current
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|iList
operator|.
name|setSelectedIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iList
operator|.
name|addItem
argument_list|(
name|MESSAGES
operator|.
name|gradeModeItemNotSet
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|iList
operator|.
name|setSelectedIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
name|iList
operator|.
name|addItem
argument_list|(
name|MESSAGES
operator|.
name|gradeModeItemNotSame
argument_list|(
name|current
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|iList
operator|.
name|setSelectedIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iList
operator|.
name|addItem
argument_list|(
name|MESSAGES
operator|.
name|gradeModeItemNotSame
argument_list|(
name|MESSAGES
operator|.
name|gradeModeItemNotSet
argument_list|()
argument_list|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|iList
operator|.
name|setSelectedIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|same
operator|&&
name|current
operator|!=
literal|null
condition|)
block|{
name|boolean
name|canSetCurrent
init|=
literal|true
decl_stmt|;
for|for
control|(
name|SpecialRegistrationGradeModeChanges
name|gm
range|:
name|iGradeMode
control|)
if|if
condition|(
name|gm
operator|.
name|getAvailableChange
argument_list|(
name|current
operator|.
name|getCode
argument_list|()
argument_list|)
operator|==
literal|null
operator|&&
operator|!
name|gm
operator|.
name|isCurrentGradeMode
argument_list|(
name|current
operator|.
name|getCode
argument_list|()
argument_list|)
condition|)
block|{
name|canSetCurrent
operator|=
literal|false
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|canSetCurrent
condition|)
name|iList
operator|.
name|addItem
argument_list|(
name|current
operator|.
name|getLabel
argument_list|()
argument_list|,
name|current
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|av
label|:
for|for
control|(
name|SpecialRegistrationGradeMode
name|mode
range|:
name|iGradeMode
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAvailableChanges
argument_list|()
control|)
block|{
for|for
control|(
name|SpecialRegistrationGradeModeChanges
name|gm
range|:
name|iGradeMode
control|)
if|if
condition|(
name|gm
operator|.
name|getAvailableChange
argument_list|(
name|mode
operator|.
name|getCode
argument_list|()
argument_list|)
operator|==
literal|null
operator|&&
operator|!
name|gm
operator|.
name|isCurrentGradeMode
argument_list|(
name|mode
operator|.
name|getCode
argument_list|()
argument_list|)
condition|)
continue|continue
name|av
continue|;
if|if
condition|(
name|same
operator|&&
name|current
operator|!=
literal|null
operator|&&
name|current
operator|.
name|getCode
argument_list|()
operator|.
name|equals
argument_list|(
name|mode
operator|.
name|getCode
argument_list|()
argument_list|)
condition|)
continue|continue;
name|iList
operator|.
name|addItem
argument_list|(
name|mode
operator|.
name|getLabel
argument_list|()
argument_list|,
name|mode
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addClassAssignment
parameter_list|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|ca
parameter_list|,
name|SpecialRegistrationGradeModeChanges
name|gm
parameter_list|)
block|{
name|iClasses
operator|.
name|add
argument_list|(
name|ca
argument_list|)
expr_stmt|;
name|iGradeMode
operator|.
name|add
argument_list|(
name|gm
argument_list|)
expr_stmt|;
name|setup
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
name|iList
operator|.
name|getValue
argument_list|(
name|iList
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Widget
name|getWidget
parameter_list|()
block|{
return|return
name|iList
return|;
block|}
specifier|public
name|SpecialRegistrationGradeMode
name|getChange
parameter_list|()
block|{
if|if
condition|(
name|iList
operator|.
name|getSelectedIndex
argument_list|()
operator|<=
literal|0
condition|)
return|return
literal|null
return|;
name|SpecialRegistrationGradeMode
name|change
init|=
name|iGradeMode
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAvailableChange
argument_list|(
name|iList
operator|.
name|getValue
argument_list|(
name|iList
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|change
operator|==
literal|null
condition|)
block|{
name|SpecialRegistrationGradeMode
name|current
init|=
name|iGradeMode
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCurrentGradeMode
argument_list|()
decl_stmt|;
if|if
condition|(
name|current
operator|!=
literal|null
operator|&&
name|current
operator|.
name|getCode
argument_list|()
operator|.
name|equals
argument_list|(
name|iList
operator|.
name|getValue
argument_list|(
name|iList
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
argument_list|)
condition|)
name|change
operator|=
name|current
expr_stmt|;
block|}
return|return
name|change
return|;
block|}
specifier|public
name|List
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|getClassAssignments
parameter_list|()
block|{
return|return
name|iClasses
return|;
block|}
specifier|public
name|List
argument_list|<
name|SpecialRegistrationGradeModeChanges
argument_list|>
name|getGradeModes
parameter_list|()
block|{
return|return
name|iGradeMode
return|;
block|}
specifier|public
name|SpecialRegistrationGradeMode
name|getChange
parameter_list|(
name|String
name|extId
parameter_list|)
block|{
if|if
condition|(
name|iList
operator|.
name|getSelectedIndex
argument_list|()
operator|<=
literal|0
condition|)
return|return
literal|null
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iClasses
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|extId
operator|.
name|equals
argument_list|(
name|iClasses
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getExternalId
argument_list|()
argument_list|)
condition|)
return|return
name|iGradeMode
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getAvailableChange
argument_list|(
name|iList
operator|.
name|getValue
argument_list|(
name|iList
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|GradeModeLabel
extends|extends
name|Cell
block|{
specifier|private
name|Label
name|iLabel
decl_stmt|;
specifier|private
name|SpecialRegistrationGradeModeChanges
name|iGradeMode
decl_stmt|;
specifier|public
name|GradeModeLabel
parameter_list|(
name|GradeModeChange
name|change
parameter_list|,
name|SpecialRegistrationGradeModeChanges
name|gradeMode
parameter_list|)
block|{
name|super
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|iGradeMode
operator|=
name|gradeMode
expr_stmt|;
name|iLabel
operator|=
operator|new
name|Label
argument_list|()
expr_stmt|;
name|iLabel
operator|.
name|addStyleName
argument_list|(
literal|"grade-mode-label"
argument_list|)
expr_stmt|;
name|iLabel
operator|.
name|setText
argument_list|(
name|iGradeMode
operator|.
name|getCurrentGradeMode
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|iGradeMode
operator|.
name|getCurrentGradeMode
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ListBox
name|box
init|=
operator|(
name|ListBox
operator|)
name|change
operator|.
name|getWidget
argument_list|()
decl_stmt|;
name|box
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|box
operator|.
name|getSelectedIndex
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|iLabel
operator|.
name|setText
argument_list|(
name|iGradeMode
operator|.
name|getCurrentGradeMode
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|iGradeMode
operator|.
name|getCurrentGradeMode
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SpecialRegistrationGradeMode
name|m
init|=
name|iGradeMode
operator|.
name|getAvailableChange
argument_list|(
name|box
operator|.
name|getValue
argument_list|(
name|box
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
name|iLabel
operator|.
name|setText
argument_list|(
name|iGradeMode
operator|.
name|getCurrentGradeMode
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|iGradeMode
operator|.
name|getCurrentGradeMode
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iLabel
operator|.
name|setText
argument_list|(
name|m
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
name|iLabel
operator|.
name|getText
argument_list|()
return|;
block|}
specifier|public
name|Widget
name|getWidget
parameter_list|()
block|{
return|return
name|iLabel
return|;
block|}
specifier|public
name|void
name|setStyleName
parameter_list|(
name|String
name|styleName
parameter_list|)
block|{
name|super
operator|.
name|setStyleName
argument_list|(
name|styleName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
class|class
name|VariableCreditChange
extends|extends
name|Cell
implements|implements
name|HasAriaLabel
block|{
specifier|private
name|ListBox
name|iList
decl_stmt|;
specifier|private
name|SpecialRegistrationVariableCreditChange
name|iVarCredit
decl_stmt|;
specifier|private
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|iClass
decl_stmt|;
specifier|public
name|VariableCreditChange
parameter_list|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|ca
parameter_list|,
name|SpecialRegistrationVariableCreditChange
name|vcc
parameter_list|)
block|{
name|super
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|iList
operator|=
operator|new
name|ListBox
argument_list|()
expr_stmt|;
name|iList
operator|.
name|addStyleName
argument_list|(
literal|"variable-credit-list"
argument_list|)
expr_stmt|;
name|iClass
operator|=
name|ca
expr_stmt|;
name|iVarCredit
operator|=
name|vcc
expr_stmt|;
name|iList
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|formChanged
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|setup
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|setup
parameter_list|()
block|{
name|iList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|boolean
name|hasCredit
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|iVarCredit
operator|.
name|hasAvailableCredits
argument_list|()
condition|)
block|{
for|for
control|(
name|float
name|cred
range|:
name|iVarCredit
operator|.
name|getAvailableCredits
argument_list|()
control|)
block|{
name|iList
operator|.
name|addItem
argument_list|(
name|MESSAGES
operator|.
name|credit
argument_list|(
name|cred
argument_list|)
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|cred
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iClass
operator|.
name|getCreditHour
argument_list|()
operator|!=
literal|null
operator|&&
name|iClass
operator|.
name|getCreditHour
argument_list|()
operator|==
name|cred
condition|)
block|{
name|iList
operator|.
name|setSelectedIndex
argument_list|(
name|iList
operator|.
name|getItemCount
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|hasCredit
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|iClass
operator|.
name|getCreditHour
argument_list|()
operator|==
literal|null
operator|&&
name|iClass
operator|.
name|hasCredit
argument_list|()
operator|&&
name|iClass
operator|.
name|guessCreditCount
argument_list|()
operator|==
name|cred
condition|)
block|{
name|iList
operator|.
name|setSelectedIndex
argument_list|(
name|iList
operator|.
name|getItemCount
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|hasCredit
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|hasCredit
condition|)
block|{
if|if
condition|(
name|iClass
operator|.
name|getCreditHour
argument_list|()
operator|!=
literal|null
condition|)
name|iList
operator|.
name|insertItem
argument_list|(
name|MESSAGES
operator|.
name|credit
argument_list|(
name|iClass
operator|.
name|getCreditHour
argument_list|()
argument_list|)
argument_list|,
name|iClass
operator|.
name|getCreditHour
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|else if
condition|(
name|iClass
operator|.
name|getCredit
argument_list|()
operator|!=
literal|null
condition|)
name|iList
operator|.
name|insertItem
argument_list|(
name|MESSAGES
operator|.
name|credit
argument_list|(
name|iClass
operator|.
name|guessCreditCount
argument_list|()
argument_list|)
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iClass
operator|.
name|guessCreditCount
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|iList
operator|.
name|insertItem
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|iList
operator|.
name|setSelectedIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
name|iList
operator|.
name|getValue
argument_list|(
name|iList
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Widget
name|getWidget
parameter_list|()
block|{
return|return
name|iList
return|;
block|}
specifier|public
name|SpecialRegistrationVariableCredit
name|getChange
parameter_list|()
block|{
name|String
name|credit
init|=
name|iList
operator|.
name|getValue
argument_list|(
name|iList
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|credit
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|iClass
operator|.
name|getCreditHour
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|iClass
operator|.
name|getCreditHour
argument_list|()
operator|.
name|equals
argument_list|(
name|Float
operator|.
name|valueOf
argument_list|(
name|credit
argument_list|)
argument_list|)
condition|)
return|return
literal|null
return|;
block|}
if|else if
condition|(
name|iClass
operator|.
name|getCredit
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|iClass
operator|.
name|guessCreditCount
argument_list|()
operator|==
name|Float
operator|.
name|valueOf
argument_list|(
name|credit
argument_list|)
condition|)
return|return
literal|null
return|;
block|}
name|SpecialRegistrationVariableCredit
name|change
init|=
operator|new
name|SpecialRegistrationVariableCredit
argument_list|(
name|iVarCredit
argument_list|)
decl_stmt|;
name|change
operator|.
name|setOriginalCredit
argument_list|(
name|iClass
operator|.
name|getCreditHour
argument_list|()
operator|!=
literal|null
condition|?
name|iClass
operator|.
name|getCreditHour
argument_list|()
else|:
name|iClass
operator|.
name|getCredit
argument_list|()
operator|!=
literal|null
condition|?
operator|new
name|Float
argument_list|(
name|iClass
operator|.
name|guessCreditCount
argument_list|()
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
name|change
operator|.
name|setCredit
argument_list|(
name|Float
operator|.
name|valueOf
argument_list|(
name|credit
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|change
return|;
block|}
specifier|public
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|getClassAssignment
parameter_list|()
block|{
return|return
name|iClass
return|;
block|}
specifier|public
name|SpecialRegistrationVariableCreditChange
name|getVarCredits
parameter_list|()
block|{
return|return
name|iVarCredit
return|;
block|}
block|}
block|}
end_class

end_unit

