begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|sectioning
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|aria
operator|.
name|AriaButton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|aria
operator|.
name|AriaStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|aria
operator|.
name|AriaSuggestBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|aria
operator|.
name|AriaTextBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|aria
operator|.
name|ImageButton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|page
operator|.
name|UniTimeNotifications
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeDialogBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeHeaderPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTabPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|WebTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|WebTable
operator|.
name|RowDoubleClickEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtAriaMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|SectioningService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|SectioningServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AcademicSessionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|aria
operator|.
name|client
operator|.
name|Roles
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|RunAsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
operator|.
name|ScheduledCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Overflow
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Unit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|BlurEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|BlurHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|FocusEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|FocusHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyCodes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyDownEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyDownHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyUpEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyUpHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|CloseEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|CloseHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|SelectionEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|SelectionHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|CheckBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|DialogBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasVerticalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HorizontalPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|PopupPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|RootPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ScrollPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|SuggestOracle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|VerticalPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|SuggestOracle
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|SuggestOracle
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|SuggestOracle
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|SuggestOracle
operator|.
name|Suggestion
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|CourseSelectionBox
extends|extends
name|Composite
block|{
specifier|public
specifier|static
specifier|final
name|StudentSectioningResources
name|RESOURCES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningResources
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|StudentSectioningMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|StudentSectioningConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|GwtAriaMessages
name|ARIA
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtAriaMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|AcademicSessionProvider
name|iAcademicSessionProvider
decl_stmt|;
specifier|private
name|AriaSuggestBox
name|iSuggest
decl_stmt|;
specifier|private
name|String
name|iLastSuggestion
decl_stmt|;
specifier|private
name|ImageButton
name|iFinderButton
decl_stmt|;
specifier|private
name|HorizontalPanel
name|iHPanel
decl_stmt|;
specifier|private
name|VerticalPanel
name|iVPanel
decl_stmt|;
specifier|private
name|Label
name|iError
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|iValidCourseNames
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|AriaTextBox
name|iFilter
decl_stmt|;
specifier|private
name|AriaButton
name|iFilterSelect
decl_stmt|;
specifier|private
name|DialogBox
name|iDialog
decl_stmt|;
specifier|private
name|ScrollPanel
name|iCoursesPanel
decl_stmt|;
specifier|private
name|VerticalPanel
name|iDialogPanel
decl_stmt|,
name|iCoursesTab
decl_stmt|,
name|iFreeTimeTab
decl_stmt|;
specifier|private
name|WebTable
name|iCourses
decl_stmt|,
name|iClasses
decl_stmt|;
specifier|private
name|String
name|iLastQuery
init|=
literal|null
decl_stmt|;
specifier|private
name|FreeTimePicker
name|iFreeTimePicker
decl_stmt|;
specifier|private
name|Label
name|iFreeTimeError
init|=
literal|null
decl_stmt|,
name|iCoursesTip
decl_stmt|,
name|iFreeTimeTip
decl_stmt|;
specifier|private
name|UniTimeTabPanel
name|iTabPanel
decl_stmt|,
name|iCourseDetailsTabPanel
init|=
literal|null
decl_stmt|;
specifier|private
name|HTML
name|iCourseDetails
decl_stmt|;
specifier|private
name|ScrollPanel
name|iCourseDetailsPanel
decl_stmt|,
name|iClassesPanel
decl_stmt|;
specifier|private
name|boolean
name|iAllowFreeTime
decl_stmt|;
specifier|private
specifier|final
name|SectioningServiceAsync
name|iSectioningService
init|=
name|GWT
operator|.
name|create
argument_list|(
name|SectioningService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|AsyncCallback
argument_list|<
name|Collection
argument_list|<
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
argument_list|>
argument_list|>
name|iCourseOfferingsCallback
decl_stmt|;
specifier|private
name|AsyncCallback
argument_list|<
name|String
argument_list|>
name|iCourseDetailsCallback
decl_stmt|;
specifier|private
name|AsyncCallback
argument_list|<
name|Collection
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
argument_list|>
name|iCourseClassesCallback
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|CourseSelectionChangeHandler
argument_list|>
name|iCourseSelectionChangeHandlers
init|=
operator|new
name|ArrayList
argument_list|<
name|CourseSelectionChangeHandler
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|Validator
argument_list|>
name|iValitaros
init|=
operator|new
name|ArrayList
argument_list|<
name|Validator
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|String
name|iHint
init|=
literal|""
decl_stmt|;
specifier|private
name|CourseSelectionBox
name|iPrev
decl_stmt|,
name|iNext
decl_stmt|;
specifier|private
name|CourseSelectionBox
name|iPrimary
decl_stmt|,
name|iAlternative
decl_stmt|;
specifier|private
name|CheckBox
name|iWaitList
decl_stmt|;
specifier|private
name|String
name|iLastCourseLookup
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|int
name|sLastSelectedCourseDetailsTab
init|=
literal|0
decl_stmt|;
specifier|public
name|CourseSelectionBox
parameter_list|(
name|AcademicSessionProvider
name|acadSession
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|enabled
parameter_list|,
name|boolean
name|allowFreeTime
parameter_list|)
block|{
name|iAcademicSessionProvider
operator|=
name|acadSession
expr_stmt|;
name|iAllowFreeTime
operator|=
name|allowFreeTime
expr_stmt|;
name|SuggestOracle
name|courseOfferingOracle
init|=
operator|new
name|SuggestOracle
argument_list|()
block|{
specifier|public
name|void
name|requestSuggestions
parameter_list|(
name|Request
name|request
parameter_list|,
name|Callback
name|callback
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|getQuery
argument_list|()
operator|.
name|equals
argument_list|(
name|iHint
argument_list|)
condition|)
return|return;
name|iSectioningService
operator|.
name|listCourseOfferings
argument_list|(
name|iAcademicSessionProvider
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
name|request
operator|.
name|getQuery
argument_list|()
argument_list|,
name|request
operator|.
name|getLimit
argument_list|()
argument_list|,
operator|new
name|SuggestCallback
argument_list|(
name|request
argument_list|,
name|callback
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isDisplayStringHTML
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|iSuggest
operator|=
operator|new
name|AriaSuggestBox
argument_list|(
name|courseOfferingOracle
argument_list|)
expr_stmt|;
name|iSuggest
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TextBoxHint"
argument_list|)
expr_stmt|;
name|iFinderButton
operator|=
operator|new
name|ImageButton
argument_list|(
name|RESOURCES
operator|.
name|search_picker
argument_list|()
argument_list|,
name|RESOURCES
operator|.
name|search_picker_Down
argument_list|()
argument_list|,
name|RESOURCES
operator|.
name|search_picker_Over
argument_list|()
argument_list|,
name|RESOURCES
operator|.
name|search_picker_Disabled
argument_list|()
argument_list|)
expr_stmt|;
name|iFinderButton
operator|.
name|setTabIndex
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|iVPanel
operator|=
operator|new
name|VerticalPanel
argument_list|()
expr_stmt|;
name|iHPanel
operator|=
operator|new
name|HorizontalPanel
argument_list|()
expr_stmt|;
name|iHPanel
operator|.
name|add
argument_list|(
name|iSuggest
argument_list|)
expr_stmt|;
name|iHPanel
operator|.
name|add
argument_list|(
name|iFinderButton
argument_list|)
expr_stmt|;
name|iVPanel
operator|.
name|add
argument_list|(
name|iHPanel
argument_list|)
expr_stmt|;
name|iError
operator|=
operator|new
name|Label
argument_list|()
expr_stmt|;
name|iError
operator|.
name|setStyleName
argument_list|(
literal|"unitime-ErrorHint"
argument_list|)
expr_stmt|;
name|iError
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Roles
operator|.
name|getPresentationRole
argument_list|()
operator|.
name|setAriaHiddenState
argument_list|(
name|iError
operator|.
name|getElement
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iVPanel
operator|.
name|add
argument_list|(
name|iError
argument_list|)
expr_stmt|;
name|iFinderButton
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|iSuggest
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|openDialogAsync
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|enabled
condition|)
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iSuggest
operator|.
name|addSelectionHandler
argument_list|(
operator|new
name|SelectionHandler
argument_list|<
name|Suggestion
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onSelection
parameter_list|(
name|SelectionEvent
argument_list|<
name|Suggestion
argument_list|>
name|event
parameter_list|)
block|{
name|String
name|text
init|=
name|event
operator|.
name|getSelectedItem
argument_list|()
operator|.
name|getReplacementString
argument_list|()
decl_stmt|;
name|iLastSuggestion
operator|=
name|text
expr_stmt|;
for|for
control|(
name|CourseSelectionChangeHandler
name|h
range|:
name|iCourseSelectionChangeHandlers
control|)
name|h
operator|.
name|onChange
argument_list|(
name|text
argument_list|,
operator|!
name|text
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iSuggest
operator|.
name|getValueBox
argument_list|()
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|boolean
name|valid
init|=
literal|false
decl_stmt|;
name|String
name|text
init|=
name|iSuggest
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|text
operator|.
name|equalsIgnoreCase
argument_list|(
name|iLastSuggestion
argument_list|)
condition|)
name|valid
operator|=
literal|true
expr_stmt|;
else|else
for|for
control|(
name|String
name|course
range|:
name|iValidCourseNames
control|)
block|{
if|if
condition|(
name|course
operator|.
name|equalsIgnoreCase
argument_list|(
name|text
argument_list|)
condition|)
block|{
name|valid
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
for|for
control|(
name|CourseSelectionChangeHandler
name|h
range|:
name|iCourseSelectionChangeHandlers
control|)
name|h
operator|.
name|onChange
argument_list|(
name|text
argument_list|,
name|valid
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iSuggest
operator|.
name|getValueBox
argument_list|()
operator|.
name|addKeyDownHandler
argument_list|(
operator|new
name|KeyDownHandler
argument_list|()
block|{
specifier|public
name|void
name|onKeyDown
parameter_list|(
name|KeyDownEvent
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|iSuggest
operator|.
name|isEnabled
argument_list|()
condition|)
return|return;
if|if
condition|(
operator|(
name|event
operator|.
name|getNativeEvent
argument_list|()
operator|.
name|getKeyCode
argument_list|()
operator|==
literal|'F'
operator|||
name|event
operator|.
name|getNativeEvent
argument_list|()
operator|.
name|getKeyCode
argument_list|()
operator|==
literal|'f'
operator|)
operator|&&
operator|(
name|event
operator|.
name|isControlKeyDown
argument_list|()
operator|||
name|event
operator|.
name|isAltKeyDown
argument_list|()
operator|)
condition|)
block|{
name|hideSuggestionList
argument_list|()
expr_stmt|;
name|openDialogAsync
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|getNativeEvent
argument_list|()
operator|.
name|getKeyCode
argument_list|()
operator|==
name|KeyCodes
operator|.
name|KEY_ESCAPE
condition|)
block|{
name|hideSuggestionList
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|event
operator|.
name|getNativeEvent
argument_list|()
operator|.
name|getKeyCode
argument_list|()
operator|==
literal|'L'
operator|||
name|event
operator|.
name|getNativeEvent
argument_list|()
operator|.
name|getKeyCode
argument_list|()
operator|==
literal|'l'
operator|)
operator|&&
operator|(
name|event
operator|.
name|isControlKeyDown
argument_list|()
operator|||
name|event
operator|.
name|isAltKeyDown
argument_list|()
operator|)
condition|)
block|{
name|iSuggest
operator|.
name|showSuggestionList
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|getNativeEvent
argument_list|()
operator|.
name|getKeyCode
argument_list|()
operator|==
name|KeyCodes
operator|.
name|KEY_DOWN
operator|&&
name|event
operator|.
name|isControlKeyDown
argument_list|()
operator|&&
name|iNext
operator|!=
literal|null
condition|)
block|{
name|hideSuggestionList
argument_list|()
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|isShiftKeyDown
argument_list|()
condition|)
name|swapDown
argument_list|()
expr_stmt|;
name|iNext
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iNext
operator|.
name|hideSuggestionList
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|getNativeEvent
argument_list|()
operator|.
name|getKeyCode
argument_list|()
operator|==
name|KeyCodes
operator|.
name|KEY_UP
operator|&&
name|event
operator|.
name|isControlKeyDown
argument_list|()
operator|&&
name|iPrev
operator|!=
literal|null
condition|)
block|{
name|hideSuggestionList
argument_list|()
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|isShiftKeyDown
argument_list|()
condition|)
name|swapUp
argument_list|()
expr_stmt|;
name|iPrev
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iPrev
operator|.
name|hideSuggestionList
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|getNativeEvent
argument_list|()
operator|.
name|getKeyCode
argument_list|()
operator|==
name|KeyCodes
operator|.
name|KEY_LEFT
operator|&&
name|event
operator|.
name|isControlKeyDown
argument_list|()
operator|&&
name|iPrimary
operator|!=
literal|null
condition|)
block|{
name|hideSuggestionList
argument_list|()
expr_stmt|;
name|iPrimary
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|getNativeEvent
argument_list|()
operator|.
name|getKeyCode
argument_list|()
operator|==
name|KeyCodes
operator|.
name|KEY_RIGHT
operator|&&
name|event
operator|.
name|isControlKeyDown
argument_list|()
operator|&&
name|iAlternative
operator|!=
literal|null
operator|&&
name|iAlternative
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|hideSuggestionList
argument_list|()
expr_stmt|;
name|iAlternative
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|iSuggest
operator|.
name|getValueBox
argument_list|()
operator|.
name|addBlurHandler
argument_list|(
operator|new
name|BlurHandler
argument_list|()
block|{
specifier|public
name|void
name|onBlur
parameter_list|(
name|BlurEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|iSuggest
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|iError
operator|.
name|isVisible
argument_list|()
condition|)
name|iError
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|iHint
operator|!=
literal|null
condition|)
name|iSuggest
operator|.
name|setText
argument_list|(
name|iHint
argument_list|)
expr_stmt|;
name|iSuggest
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TextBoxHint"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|iSuggest
operator|.
name|getValueBox
argument_list|()
operator|.
name|addFocusHandler
argument_list|(
operator|new
name|FocusHandler
argument_list|()
block|{
specifier|public
name|void
name|onFocus
parameter_list|(
name|FocusEvent
name|event
parameter_list|)
block|{
name|iSuggest
operator|.
name|setStyleName
argument_list|(
literal|"gwt-SuggestBox"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSuggest
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
name|iHint
argument_list|)
condition|)
name|iSuggest
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iError
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|AriaStatus
operator|.
name|getInstance
argument_list|()
operator|.
name|setText
argument_list|(
name|iError
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|iVPanel
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setLabel
parameter_list|(
name|String
name|title
parameter_list|,
name|String
name|finderTitle
parameter_list|)
block|{
name|iSuggest
operator|.
name|setAriaLabel
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|iFinderButton
operator|.
name|setAltText
argument_list|(
name|finderTitle
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|openDialogAsync
parameter_list|()
block|{
name|GWT
operator|.
name|runAsync
argument_list|(
operator|new
name|RunAsyncCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|()
block|{
name|openDialog
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|courseSelectionChanged
parameter_list|()
block|{
if|if
condition|(
name|iCourses
operator|.
name|getSelectedRow
argument_list|()
operator|>=
literal|0
operator|&&
name|iCourses
operator|.
name|getRows
argument_list|()
operator|!=
literal|null
operator|&&
name|iCourses
operator|.
name|getSelectedRow
argument_list|()
operator|<
name|iCourses
operator|.
name|getRows
argument_list|()
operator|.
name|length
condition|)
block|{
name|WebTable
operator|.
name|Row
name|row
init|=
name|iCourses
operator|.
name|getRows
argument_list|()
index|[
name|iCourses
operator|.
name|getSelectedRow
argument_list|()
index|]
decl_stmt|;
if|if
condition|(
name|row
operator|!=
literal|null
condition|)
block|{
name|String
name|title
init|=
name|row
operator|.
name|getCell
argument_list|(
literal|3
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|note
init|=
name|row
operator|.
name|getCell
argument_list|(
literal|4
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|title
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|note
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|AriaStatus
operator|.
name|getInstance
argument_list|()
operator|.
name|setHTML
argument_list|(
name|ARIA
operator|.
name|courseFinderSelected
argument_list|(
literal|1
operator|+
name|iCourses
operator|.
name|getSelectedRow
argument_list|()
argument_list|,
name|iCourses
operator|.
name|getRowsCount
argument_list|()
argument_list|,
name|row
operator|.
name|getCell
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|,
name|row
operator|.
name|getCell
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|AriaStatus
operator|.
name|getInstance
argument_list|()
operator|.
name|setHTML
argument_list|(
name|ARIA
operator|.
name|courseFinderSelectedWithNote
argument_list|(
literal|1
operator|+
name|iCourses
operator|.
name|getSelectedRow
argument_list|()
argument_list|,
name|iCourses
operator|.
name|getRowsCount
argument_list|()
argument_list|,
name|row
operator|.
name|getCell
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|,
name|row
operator|.
name|getCell
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|,
name|note
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|note
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|AriaStatus
operator|.
name|getInstance
argument_list|()
operator|.
name|setHTML
argument_list|(
name|ARIA
operator|.
name|courseFinderSelectedWithTitle
argument_list|(
literal|1
operator|+
name|iCourses
operator|.
name|getSelectedRow
argument_list|()
argument_list|,
name|iCourses
operator|.
name|getRowsCount
argument_list|()
argument_list|,
name|row
operator|.
name|getCell
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|,
name|row
operator|.
name|getCell
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|,
name|title
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|AriaStatus
operator|.
name|getInstance
argument_list|()
operator|.
name|setHTML
argument_list|(
name|ARIA
operator|.
name|courseFinderSelectedWithTitleAndNote
argument_list|(
literal|1
operator|+
name|iCourses
operator|.
name|getSelectedRow
argument_list|()
argument_list|,
name|iCourses
operator|.
name|getRowsCount
argument_list|()
argument_list|,
name|row
operator|.
name|getCell
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|,
name|row
operator|.
name|getCell
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|,
name|title
argument_list|,
name|note
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|AriaStatus
operator|.
name|getInstance
argument_list|()
operator|.
name|setHTML
argument_list|(
name|ARIA
operator|.
name|courseFinderNoCourse
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|openDialog
parameter_list|()
block|{
if|if
condition|(
name|iDialog
operator|==
literal|null
condition|)
block|{
name|iDialog
operator|=
operator|new
name|UniTimeDialogBox
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iDialog
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|courseSelectionDialog
argument_list|()
argument_list|)
expr_stmt|;
name|iFilter
operator|=
operator|new
name|AriaTextBox
argument_list|()
expr_stmt|;
name|iFilter
operator|.
name|setStyleName
argument_list|(
literal|"gwt-SuggestBox"
argument_list|)
expr_stmt|;
name|iFilter
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setWidth
argument_list|(
literal|600
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|iFilter
operator|.
name|setAriaLabel
argument_list|(
name|iAllowFreeTime
condition|?
name|ARIA
operator|.
name|courseFinderFilterAllowsFreeTime
argument_list|()
else|:
name|ARIA
operator|.
name|courseFinderFilter
argument_list|()
argument_list|)
expr_stmt|;
name|iFilterSelect
operator|=
operator|new
name|AriaButton
argument_list|(
name|MESSAGES
operator|.
name|buttonSelect
argument_list|()
argument_list|)
expr_stmt|;
name|iFilterSelect
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|iCourses
operator|.
name|getSelectedRow
argument_list|()
operator|>=
literal|0
operator|&&
name|iCourses
operator|.
name|getRows
argument_list|()
operator|!=
literal|null
operator|&&
name|iCourses
operator|.
name|getSelectedRow
argument_list|()
operator|<
name|iCourses
operator|.
name|getRows
argument_list|()
operator|.
name|length
operator|&&
name|iTabPanel
operator|.
name|getSelectedTab
argument_list|()
operator|==
literal|0
condition|)
block|{
name|WebTable
operator|.
name|Row
name|r
init|=
name|iCourses
operator|.
name|getRows
argument_list|()
index|[
name|iCourses
operator|.
name|getSelectedRow
argument_list|()
index|]
decl_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
name|iSuggest
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|courseName
argument_list|(
name|r
operator|.
name|getCell
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|,
name|r
operator|.
name|getCell
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|iSuggest
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|courseNameWithTitle
argument_list|(
name|r
operator|.
name|getCell
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|,
name|r
operator|.
name|getCell
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|,
name|r
operator|.
name|getCell
argument_list|(
literal|2
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|CourseSelectionChangeHandler
name|h
range|:
name|iCourseSelectionChangeHandlers
control|)
name|h
operator|.
name|onChange
argument_list|(
name|iSuggest
operator|.
name|getText
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|iFreeTimePicker
operator|.
name|clearFreeTime
argument_list|()
expr_stmt|;
name|ArrayList
argument_list|<
name|CourseRequestInterface
operator|.
name|FreeTime
argument_list|>
name|freeTimes
init|=
name|parseFreeTime
argument_list|(
name|iFilter
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|iFreeTimePicker
operator|.
name|setFreeTime
argument_list|(
name|freeTimes
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iFilter
operator|.
name|setText
argument_list|(
name|freeTimesToString
argument_list|(
name|freeTimes
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
block|}
name|iSuggest
operator|.
name|setText
argument_list|(
name|iFilter
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iDialog
operator|.
name|hide
argument_list|()
expr_stmt|;
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iCourses
operator|=
operator|new
name|WebTable
argument_list|()
expr_stmt|;
name|iCourses
operator|.
name|setHeader
argument_list|(
operator|new
name|WebTable
operator|.
name|Row
argument_list|(
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colSubject
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"80px"
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colCourse
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"80px"
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colLimit
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"60px"
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colTitle
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"300px"
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colNote
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"300px"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|HorizontalPanel
name|filterWithSelect
init|=
operator|new
name|HorizontalPanel
argument_list|()
decl_stmt|;
name|filterWithSelect
operator|.
name|add
argument_list|(
name|iFilter
argument_list|)
expr_stmt|;
name|filterWithSelect
operator|.
name|add
argument_list|(
name|iFilterSelect
argument_list|)
expr_stmt|;
name|filterWithSelect
operator|.
name|setCellVerticalAlignment
argument_list|(
name|iFilter
argument_list|,
name|HasVerticalAlignment
operator|.
name|ALIGN_MIDDLE
argument_list|)
expr_stmt|;
name|filterWithSelect
operator|.
name|setCellVerticalAlignment
argument_list|(
name|iFilterSelect
argument_list|,
name|HasVerticalAlignment
operator|.
name|ALIGN_MIDDLE
argument_list|)
expr_stmt|;
name|iFilterSelect
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setMarginLeft
argument_list|(
literal|5
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|iDialogPanel
operator|=
operator|new
name|VerticalPanel
argument_list|()
expr_stmt|;
name|iDialogPanel
operator|.
name|setSpacing
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|iDialogPanel
operator|.
name|add
argument_list|(
name|filterWithSelect
argument_list|)
expr_stmt|;
name|iDialogPanel
operator|.
name|setCellHorizontalAlignment
argument_list|(
name|filterWithSelect
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_CENTER
argument_list|)
expr_stmt|;
name|iDialog
operator|.
name|addCloseHandler
argument_list|(
operator|new
name|CloseHandler
argument_list|<
name|PopupPanel
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onClose
parameter_list|(
name|CloseEvent
argument_list|<
name|PopupPanel
argument_list|>
name|event
parameter_list|)
block|{
name|RootPanel
operator|.
name|getBodyElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setOverflow
argument_list|(
name|Overflow
operator|.
name|AUTO
argument_list|)
expr_stmt|;
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iCoursesPanel
operator|=
operator|new
name|ScrollPanel
argument_list|(
name|iCourses
argument_list|)
expr_stmt|;
name|iCoursesPanel
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setWidth
argument_list|(
literal|780
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|iCoursesPanel
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setHeight
argument_list|(
literal|200
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|iCoursesPanel
operator|.
name|setStyleName
argument_list|(
literal|"unitime-ScrollPanel"
argument_list|)
expr_stmt|;
name|iCourseDetails
operator|=
operator|new
name|HTML
argument_list|(
literal|"<table width='100%'></tr><td class='unitime-TableEmpty'>"
operator|+
name|MESSAGES
operator|.
name|courseSelectionNoCourseSelected
argument_list|()
operator|+
literal|"</td></tr></table>"
argument_list|)
expr_stmt|;
name|iCourseDetailsPanel
operator|=
operator|new
name|ScrollPanel
argument_list|(
name|iCourseDetails
argument_list|)
expr_stmt|;
name|iCourseDetailsPanel
operator|.
name|setStyleName
argument_list|(
literal|"unitime-ScrollPanel-inner"
argument_list|)
expr_stmt|;
name|iCourseDetailsPanel
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setWidth
argument_list|(
literal|780
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|iCourseDetailsPanel
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setHeight
argument_list|(
literal|200
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|iClasses
operator|=
operator|new
name|WebTable
argument_list|()
expr_stmt|;
name|iClasses
operator|.
name|setHeader
argument_list|(
operator|new
name|WebTable
operator|.
name|Row
argument_list|(
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colSubpart
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"50px"
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colClass
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"90px"
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colLimit
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"60px"
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colDays
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"60px"
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colStart
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"60px"
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colEnd
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"60px"
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colDate
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"100px"
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colRoom
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"100px"
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colInstructor
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"120px"
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colParent
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"90px"
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colHighDemand
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"10px"
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colNoteIcon
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"10px"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|iClasses
operator|.
name|setEmptyMessage
argument_list|(
name|MESSAGES
operator|.
name|courseSelectionNoCourseSelected
argument_list|()
argument_list|)
expr_stmt|;
name|iClassesPanel
operator|=
operator|new
name|ScrollPanel
argument_list|(
name|iClasses
argument_list|)
expr_stmt|;
name|iClassesPanel
operator|.
name|setStyleName
argument_list|(
literal|"unitime-ScrollPanel-inner"
argument_list|)
expr_stmt|;
name|iClassesPanel
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setWidth
argument_list|(
literal|780
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|iClassesPanel
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setHeight
argument_list|(
literal|200
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|iCoursesTip
operator|=
operator|new
name|Label
argument_list|(
name|CONSTANTS
operator|.
name|courseTips
argument_list|()
index|[
operator|(
name|int
operator|)
operator|(
name|Math
operator|.
name|random
argument_list|()
operator|*
name|CONSTANTS
operator|.
name|courseTips
argument_list|()
operator|.
name|length
operator|)
index|]
argument_list|)
expr_stmt|;
name|iCoursesTip
operator|.
name|setStyleName
argument_list|(
literal|"unitime-Hint"
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|disableTextSelectInternal
argument_list|(
name|iCoursesTip
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
name|iCoursesTip
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|String
name|oldText
init|=
name|iCoursesTip
operator|.
name|getText
argument_list|()
decl_stmt|;
do|do
block|{
name|iCoursesTip
operator|.
name|setText
argument_list|(
name|CONSTANTS
operator|.
name|courseTips
argument_list|()
index|[
operator|(
name|int
operator|)
operator|(
name|Math
operator|.
name|random
argument_list|()
operator|*
name|CONSTANTS
operator|.
name|courseTips
argument_list|()
operator|.
name|length
operator|)
index|]
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|oldText
operator|.
name|equals
argument_list|(
name|iCoursesTip
operator|.
name|getText
argument_list|()
argument_list|)
condition|)
do|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iTabPanel
operator|=
operator|new
name|UniTimeTabPanel
argument_list|()
expr_stmt|;
name|iCourseDetailsTabPanel
operator|=
operator|new
name|UniTimeTabPanel
argument_list|()
expr_stmt|;
name|iCourseDetailsTabPanel
operator|.
name|setDeckStyleName
argument_list|(
literal|"unitime-TabPanel"
argument_list|)
expr_stmt|;
name|iCourseDetailsTabPanel
operator|.
name|add
argument_list|(
name|iCourseDetailsPanel
argument_list|,
name|MESSAGES
operator|.
name|courseSelectionDetails
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Character
name|chDetails
init|=
name|UniTimeHeaderPanel
operator|.
name|guessAccessKey
argument_list|(
name|MESSAGES
operator|.
name|courseSelectionDetails
argument_list|()
argument_list|)
decl_stmt|;
name|iCourseDetailsTabPanel
operator|.
name|add
argument_list|(
name|iClassesPanel
argument_list|,
name|MESSAGES
operator|.
name|courseSelectionClasses
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Character
name|chClasses
init|=
name|UniTimeHeaderPanel
operator|.
name|guessAccessKey
argument_list|(
name|MESSAGES
operator|.
name|courseSelectionClasses
argument_list|()
argument_list|)
decl_stmt|;
name|iCourseDetailsTabPanel
operator|.
name|addSelectionHandler
argument_list|(
operator|new
name|SelectionHandler
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onSelection
parameter_list|(
name|SelectionEvent
argument_list|<
name|Integer
argument_list|>
name|event
parameter_list|)
block|{
name|sLastSelectedCourseDetailsTab
operator|=
name|event
operator|.
name|getSelectedItem
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iCoursesTab
operator|=
operator|new
name|VerticalPanel
argument_list|()
expr_stmt|;
name|iCoursesTab
operator|.
name|setSpacing
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|iCoursesTab
operator|.
name|add
argument_list|(
name|iCoursesPanel
argument_list|)
expr_stmt|;
name|iCoursesTab
operator|.
name|add
argument_list|(
name|iCourseDetailsTabPanel
argument_list|)
expr_stmt|;
name|iCoursesTab
operator|.
name|add
argument_list|(
name|iCoursesTip
argument_list|)
expr_stmt|;
name|iTabPanel
operator|.
name|add
argument_list|(
name|iCoursesTab
argument_list|,
name|MESSAGES
operator|.
name|courseSelectionCourses
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Character
name|chCourses
init|=
name|UniTimeHeaderPanel
operator|.
name|guessAccessKey
argument_list|(
name|MESSAGES
operator|.
name|courseSelectionCourses
argument_list|()
argument_list|)
decl_stmt|;
name|iFreeTimeTab
operator|=
operator|new
name|VerticalPanel
argument_list|()
expr_stmt|;
name|iFreeTimeTab
operator|.
name|setSpacing
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|iFreeTimePicker
operator|=
operator|new
name|FreeTimePicker
argument_list|()
expr_stmt|;
name|iFreeTimePicker
operator|.
name|addFreeTimeChangeHandler
argument_list|(
operator|new
name|FreeTimePicker
operator|.
name|FreeTimeChangeHandler
argument_list|()
block|{
specifier|public
name|void
name|onFreeTimeChange
parameter_list|(
name|FreeTimePicker
operator|.
name|FreeTimeChangeEvent
name|event
parameter_list|)
block|{
name|iFilter
operator|.
name|setText
argument_list|(
name|freeTimesToString
argument_list|(
name|event
operator|.
name|getFreeTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iFreeTimeError
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iFreeTimeTab
operator|.
name|add
argument_list|(
name|iFreeTimePicker
argument_list|)
expr_stmt|;
name|iFreeTimeTip
operator|=
operator|new
name|Label
argument_list|(
name|CONSTANTS
operator|.
name|freeTimeTips
argument_list|()
index|[
operator|(
name|int
operator|)
operator|(
name|Math
operator|.
name|random
argument_list|()
operator|*
name|CONSTANTS
operator|.
name|freeTimeTips
argument_list|()
operator|.
name|length
operator|)
index|]
argument_list|)
expr_stmt|;
name|iFreeTimeTip
operator|.
name|setStyleName
argument_list|(
literal|"unitime-Hint"
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|disableTextSelectInternal
argument_list|(
name|iFreeTimeTip
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
name|iFreeTimeTip
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|String
name|oldText
init|=
name|iFreeTimeTip
operator|.
name|getText
argument_list|()
decl_stmt|;
do|do
block|{
name|iFreeTimeTip
operator|.
name|setText
argument_list|(
name|CONSTANTS
operator|.
name|freeTimeTips
argument_list|()
index|[
operator|(
name|int
operator|)
operator|(
name|Math
operator|.
name|random
argument_list|()
operator|*
name|CONSTANTS
operator|.
name|freeTimeTips
argument_list|()
operator|.
name|length
operator|)
index|]
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|oldText
operator|.
name|equals
argument_list|(
name|iFreeTimeTip
operator|.
name|getText
argument_list|()
argument_list|)
condition|)
do|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iFreeTimeTab
operator|.
name|add
argument_list|(
name|iFreeTimeTip
argument_list|)
expr_stmt|;
name|iFreeTimeError
operator|=
operator|new
name|Label
argument_list|()
expr_stmt|;
name|iFreeTimeError
operator|.
name|setStyleName
argument_list|(
literal|"unitime-ErrorMessage"
argument_list|)
expr_stmt|;
name|iFreeTimeError
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iFreeTimeTab
operator|.
name|add
argument_list|(
name|iFreeTimeError
argument_list|)
expr_stmt|;
if|if
condition|(
name|iAllowFreeTime
condition|)
block|{
name|iTabPanel
operator|.
name|add
argument_list|(
name|iFreeTimeTab
argument_list|,
name|MESSAGES
operator|.
name|courseSelectionFreeTime
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iDialogPanel
operator|.
name|add
argument_list|(
name|iTabPanel
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iDialogPanel
operator|.
name|add
argument_list|(
name|iCoursesPanel
argument_list|)
expr_stmt|;
name|iDialogPanel
operator|.
name|add
argument_list|(
name|iCourseDetailsTabPanel
argument_list|)
expr_stmt|;
name|iDialogPanel
operator|.
name|add
argument_list|(
name|iCoursesTip
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Character
name|chFreeTime
init|=
name|UniTimeHeaderPanel
operator|.
name|guessAccessKey
argument_list|(
name|MESSAGES
operator|.
name|courseSelectionFreeTime
argument_list|()
argument_list|)
decl_stmt|;
name|iDialog
operator|.
name|setWidget
argument_list|(
name|iDialogPanel
argument_list|)
expr_stmt|;
specifier|final
name|Timer
name|finderTimer
init|=
operator|new
name|Timer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|updateCourses
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|iFilter
operator|.
name|addKeyUpHandler
argument_list|(
operator|new
name|KeyUpHandler
argument_list|()
block|{
specifier|public
name|void
name|onKeyUp
parameter_list|(
name|KeyUpEvent
name|event
parameter_list|)
block|{
name|finderTimer
operator|.
name|schedule
argument_list|(
literal|250
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|getNativeKeyCode
argument_list|()
operator|==
name|KeyCodes
operator|.
name|KEY_ENTER
operator|||
name|event
operator|.
name|getNativeKeyCode
argument_list|()
operator|==
name|KeyCodes
operator|.
name|KEY_ESCAPE
condition|)
block|{
if|if
condition|(
name|event
operator|.
name|getNativeKeyCode
argument_list|()
operator|==
name|KeyCodes
operator|.
name|KEY_ENTER
condition|)
block|{
if|if
condition|(
name|iCourses
operator|.
name|getSelectedRow
argument_list|()
operator|>=
literal|0
operator|&&
name|iCourses
operator|.
name|getRows
argument_list|()
operator|!=
literal|null
operator|&&
name|iCourses
operator|.
name|getSelectedRow
argument_list|()
operator|<
name|iCourses
operator|.
name|getRows
argument_list|()
operator|.
name|length
operator|&&
name|iTabPanel
operator|.
name|getSelectedTab
argument_list|()
operator|==
literal|0
condition|)
block|{
name|WebTable
operator|.
name|Row
name|r
init|=
name|iCourses
operator|.
name|getRows
argument_list|()
index|[
name|iCourses
operator|.
name|getSelectedRow
argument_list|()
index|]
decl_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
name|iSuggest
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|courseName
argument_list|(
name|r
operator|.
name|getCell
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|,
name|r
operator|.
name|getCell
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|iSuggest
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|courseNameWithTitle
argument_list|(
name|r
operator|.
name|getCell
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|,
name|r
operator|.
name|getCell
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|,
name|r
operator|.
name|getCell
argument_list|(
literal|2
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|CourseSelectionChangeHandler
name|h
range|:
name|iCourseSelectionChangeHandlers
control|)
name|h
operator|.
name|onChange
argument_list|(
name|iSuggest
operator|.
name|getText
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|iFreeTimePicker
operator|.
name|clearFreeTime
argument_list|()
expr_stmt|;
name|ArrayList
argument_list|<
name|CourseRequestInterface
operator|.
name|FreeTime
argument_list|>
name|freeTimes
init|=
name|parseFreeTime
argument_list|(
name|iFilter
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|iFreeTimePicker
operator|.
name|setFreeTime
argument_list|(
name|freeTimes
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iFilter
operator|.
name|setText
argument_list|(
name|freeTimesToString
argument_list|(
name|freeTimes
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
block|}
name|iSuggest
operator|.
name|setText
argument_list|(
name|iFilter
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|iDialog
operator|.
name|hide
argument_list|()
expr_stmt|;
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|getNativeKeyCode
argument_list|()
operator|==
name|KeyCodes
operator|.
name|KEY_DOWN
condition|)
block|{
name|iCourses
operator|.
name|setSelectedRow
argument_list|(
name|iCourses
operator|.
name|getSelectedRow
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|scrollToSelectedRow
argument_list|()
expr_stmt|;
name|updateCourseDetails
argument_list|()
expr_stmt|;
name|courseSelectionChanged
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|getNativeKeyCode
argument_list|()
operator|==
name|KeyCodes
operator|.
name|KEY_UP
condition|)
block|{
name|iCourses
operator|.
name|setSelectedRow
argument_list|(
name|iCourses
operator|.
name|getSelectedRow
argument_list|()
operator|==
literal|0
condition|?
name|iCourses
operator|.
name|getRowsCount
argument_list|()
operator|-
literal|1
else|:
name|iCourses
operator|.
name|getSelectedRow
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|scrollToSelectedRow
argument_list|()
expr_stmt|;
name|updateCourseDetails
argument_list|()
expr_stmt|;
name|courseSelectionChanged
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|chCourses
operator|!=
literal|null
operator|&&
operator|(
name|event
operator|.
name|getNativeKeyCode
argument_list|()
operator|==
name|Character
operator|.
name|toLowerCase
argument_list|(
name|chCourses
argument_list|)
operator|||
name|event
operator|.
name|getNativeKeyCode
argument_list|()
operator|==
name|Character
operator|.
name|toUpperCase
argument_list|(
name|chCourses
argument_list|)
operator|)
operator|&&
operator|!
name|isFreeTime
argument_list|()
operator|&&
operator|(
name|event
operator|.
name|isControlKeyDown
argument_list|()
operator|||
name|event
operator|.
name|isAltKeyDown
argument_list|()
operator|)
condition|)
block|{
name|iTabPanel
operator|.
name|selectTab
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
name|AriaStatus
operator|.
name|getInstance
argument_list|()
operator|.
name|setText
argument_list|(
name|ARIA
operator|.
name|courseFinderCoursesTab
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iAllowFreeTime
operator|&&
name|chFreeTime
operator|!=
literal|null
operator|&&
operator|(
name|event
operator|.
name|getNativeKeyCode
argument_list|()
operator|==
name|Character
operator|.
name|toLowerCase
argument_list|(
name|chFreeTime
argument_list|)
operator|||
name|event
operator|.
name|getNativeKeyCode
argument_list|()
operator|==
name|Character
operator|.
name|toUpperCase
argument_list|(
name|chFreeTime
argument_list|)
operator|)
operator|&&
operator|(
name|event
operator|.
name|isControlKeyDown
argument_list|()
operator|||
name|event
operator|.
name|isAltKeyDown
argument_list|()
operator|)
condition|)
block|{
name|iTabPanel
operator|.
name|selectTab
argument_list|(
name|iCourseDetailsTabPanel
operator|!=
literal|null
condition|?
literal|1
else|:
literal|3
argument_list|)
expr_stmt|;
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
name|AriaStatus
operator|.
name|getInstance
argument_list|()
operator|.
name|setText
argument_list|(
name|ARIA
operator|.
name|courseFinderFreeTimeTab
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|chDetails
operator|!=
literal|null
operator|&&
operator|(
name|event
operator|.
name|getNativeKeyCode
argument_list|()
operator|==
name|Character
operator|.
name|toLowerCase
argument_list|(
name|chDetails
argument_list|)
operator|||
name|event
operator|.
name|getNativeKeyCode
argument_list|()
operator|==
name|Character
operator|.
name|toUpperCase
argument_list|(
name|chDetails
argument_list|)
operator|)
operator|&&
operator|(
name|event
operator|.
name|isControlKeyDown
argument_list|()
operator|||
name|event
operator|.
name|isAltKeyDown
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|iCourseDetailsTabPanel
operator|==
literal|null
condition|)
name|iTabPanel
operator|.
name|selectTab
argument_list|(
literal|1
argument_list|)
expr_stmt|;
else|else
name|iCourseDetailsTabPanel
operator|.
name|selectTab
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
if|if
condition|(
name|iCourses
operator|.
name|getSelectedRow
argument_list|()
operator|>=
literal|0
operator|&&
name|iCourses
operator|.
name|getRows
argument_list|()
operator|!=
literal|null
operator|&&
name|iCourses
operator|.
name|getSelectedRow
argument_list|()
operator|<
name|iCourses
operator|.
name|getRows
argument_list|()
operator|.
name|length
condition|)
name|AriaStatus
operator|.
name|getInstance
argument_list|()
operator|.
name|setHTML
argument_list|(
name|iCourseDetails
operator|.
name|getHTML
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|AriaStatus
operator|.
name|getInstance
argument_list|()
operator|.
name|setHTML
argument_list|(
name|ARIA
operator|.
name|courseFinderNoCourse
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|chClasses
operator|!=
literal|null
operator|&&
operator|(
name|event
operator|.
name|getNativeKeyCode
argument_list|()
operator|==
name|Character
operator|.
name|toLowerCase
argument_list|(
name|chClasses
argument_list|)
operator|||
name|event
operator|.
name|getNativeKeyCode
argument_list|()
operator|==
name|Character
operator|.
name|toUpperCase
argument_list|(
name|chClasses
argument_list|)
operator|)
operator|&&
operator|(
name|event
operator|.
name|isControlKeyDown
argument_list|()
operator|||
name|event
operator|.
name|isAltKeyDown
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|iCourseDetailsTabPanel
operator|==
literal|null
condition|)
name|iTabPanel
operator|.
name|selectTab
argument_list|(
literal|2
argument_list|)
expr_stmt|;
else|else
name|iCourseDetailsTabPanel
operator|.
name|selectTab
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
name|courseSelectionChanged
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|iFilter
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|updateCourses
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iCourses
operator|.
name|addRowDoubleClickHandler
argument_list|(
operator|new
name|WebTable
operator|.
name|RowDoubleClickHandler
argument_list|()
block|{
specifier|public
name|void
name|onRowDoubleClick
parameter_list|(
name|RowDoubleClickEvent
name|event
parameter_list|)
block|{
name|WebTable
operator|.
name|Row
name|r
init|=
name|event
operator|.
name|getRow
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
name|iSuggest
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|courseName
argument_list|(
name|r
operator|.
name|getCell
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|,
name|r
operator|.
name|getCell
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|iSuggest
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|courseNameWithTitle
argument_list|(
name|r
operator|.
name|getCell
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|,
name|r
operator|.
name|getCell
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|,
name|r
operator|.
name|getCell
argument_list|(
literal|2
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iDialog
operator|.
name|hide
argument_list|()
expr_stmt|;
for|for
control|(
name|CourseSelectionChangeHandler
name|h
range|:
name|iCourseSelectionChangeHandlers
control|)
name|h
operator|.
name|onChange
argument_list|(
name|iSuggest
operator|.
name|getText
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iCourses
operator|.
name|addRowClickHandler
argument_list|(
operator|new
name|WebTable
operator|.
name|RowClickHandler
argument_list|()
block|{
specifier|public
name|void
name|onRowClick
parameter_list|(
name|WebTable
operator|.
name|RowClickEvent
name|event
parameter_list|)
block|{
name|iCourses
operator|.
name|setSelectedRow
argument_list|(
name|event
operator|.
name|getRowIdx
argument_list|()
argument_list|)
expr_stmt|;
name|updateCourseDetails
argument_list|()
expr_stmt|;
name|courseSelectionChanged
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iFilter
operator|.
name|addBlurHandler
argument_list|(
operator|new
name|BlurHandler
argument_list|()
block|{
specifier|public
name|void
name|onBlur
parameter_list|(
name|BlurEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|iDialog
operator|.
name|isShowing
argument_list|()
condition|)
block|{
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iFilter
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|iFilter
operator|.
name|setText
argument_list|(
name|iSuggest
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
name|iHint
argument_list|)
condition|?
literal|""
else|:
name|iSuggest
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|iTabPanel
operator|.
name|selectTab
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|iCoursesTip
operator|.
name|setText
argument_list|(
name|CONSTANTS
operator|.
name|courseTips
argument_list|()
index|[
operator|(
name|int
operator|)
operator|(
name|Math
operator|.
name|random
argument_list|()
operator|*
name|CONSTANTS
operator|.
name|courseTips
argument_list|()
operator|.
name|length
operator|)
index|]
argument_list|)
expr_stmt|;
name|iFreeTimeTip
operator|.
name|setText
argument_list|(
name|CONSTANTS
operator|.
name|freeTimeTips
argument_list|()
index|[
operator|(
name|int
operator|)
operator|(
name|Math
operator|.
name|random
argument_list|()
operator|*
name|CONSTANTS
operator|.
name|freeTimeTips
argument_list|()
operator|.
name|length
operator|)
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|iCourseDetailsTabPanel
operator|!=
literal|null
condition|)
name|iCourseDetailsTabPanel
operator|.
name|selectTab
argument_list|(
name|sLastSelectedCourseDetailsTab
argument_list|)
expr_stmt|;
name|AriaStatus
operator|.
name|getInstance
argument_list|()
operator|.
name|setText
argument_list|(
name|ARIA
operator|.
name|courseFinderDialogOpened
argument_list|()
argument_list|)
expr_stmt|;
name|iDialog
operator|.
name|center
argument_list|()
expr_stmt|;
name|RootPanel
operator|.
name|getBodyElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setOverflow
argument_list|(
name|Overflow
operator|.
name|HIDDEN
argument_list|)
expr_stmt|;
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iFilter
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|updateCourses
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|hideSuggestionList
parameter_list|()
block|{
name|iSuggest
operator|.
name|hideSuggestionList
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|showSuggestionList
parameter_list|()
block|{
name|iSuggest
operator|.
name|showSuggestionList
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setAccessKey
parameter_list|(
name|char
name|a
parameter_list|)
block|{
name|iSuggest
operator|.
name|setAccessKey
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setWidth
parameter_list|(
name|String
name|width
parameter_list|)
block|{
name|iSuggest
operator|.
name|setWidth
argument_list|(
name|width
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|iSuggest
operator|.
name|setText
argument_list|(
name|iHint
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iHint
operator|.
name|isEmpty
argument_list|()
condition|)
name|iSuggest
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TextBoxHint"
argument_list|)
expr_stmt|;
name|iError
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|iError
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setError
parameter_list|(
name|String
name|error
parameter_list|)
block|{
name|iError
operator|.
name|setText
argument_list|(
name|error
argument_list|)
expr_stmt|;
name|iError
operator|.
name|setTitle
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|iError
operator|.
name|setVisible
argument_list|(
operator|!
name|iError
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|iSuggest
operator|.
name|setStatus
argument_list|(
name|error
argument_list|)
expr_stmt|;
name|AriaStatus
operator|.
name|getInstance
argument_list|()
operator|.
name|setText
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasError
parameter_list|()
block|{
return|return
name|iError
operator|.
name|isVisible
argument_list|()
return|;
block|}
specifier|public
name|String
name|getError
parameter_list|()
block|{
return|return
name|iError
operator|.
name|getText
argument_list|()
return|;
block|}
specifier|private
name|void
name|scrollToSelectedRow
parameter_list|()
block|{
if|if
condition|(
name|iCourses
operator|.
name|getSelectedRow
argument_list|()
operator|<
literal|0
condition|)
return|return;
name|Element
name|scroll
init|=
name|iCoursesPanel
operator|.
name|getElement
argument_list|()
decl_stmt|;
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Element
name|item
init|=
name|iCourses
operator|.
name|getTable
argument_list|()
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|iCourses
operator|.
name|getSelectedRow
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|==
literal|null
condition|)
return|return;
name|int
name|realOffset
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|item
operator|!=
literal|null
operator|&&
operator|!
name|item
operator|.
name|equals
argument_list|(
name|scroll
argument_list|)
condition|)
block|{
name|realOffset
operator|+=
name|item
operator|.
name|getOffsetTop
argument_list|()
expr_stmt|;
name|item
operator|=
name|item
operator|.
name|getOffsetParent
argument_list|()
expr_stmt|;
block|}
name|scroll
operator|.
name|setScrollTop
argument_list|(
name|realOffset
operator|-
name|scroll
operator|.
name|getOffsetHeight
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addCourseSelectionChangeHandler
parameter_list|(
name|CourseSelectionChangeHandler
name|CourseSelectionChangeHandler
parameter_list|)
block|{
name|iCourseSelectionChangeHandlers
operator|.
name|add
argument_list|(
name|CourseSelectionChangeHandler
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getCourse
parameter_list|()
block|{
return|return
operator|(
name|iSuggest
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
name|iHint
argument_list|)
condition|?
literal|""
else|:
name|iSuggest
operator|.
name|getText
argument_list|()
operator|)
return|;
block|}
specifier|public
name|void
name|setCourse
parameter_list|(
name|String
name|course
parameter_list|,
name|boolean
name|fireChangeEvent
parameter_list|)
block|{
name|iSuggest
operator|.
name|setText
argument_list|(
name|course
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSuggest
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|iHint
operator|!=
literal|null
condition|)
name|iSuggest
operator|.
name|setText
argument_list|(
name|iHint
argument_list|)
expr_stmt|;
name|iSuggest
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TextBoxHint"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iSuggest
operator|.
name|setStyleName
argument_list|(
literal|"gwt-SuggestBox"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fireChangeEvent
condition|)
for|for
control|(
name|CourseSelectionChangeHandler
name|h
range|:
name|iCourseSelectionChangeHandlers
control|)
name|h
operator|.
name|onChange
argument_list|(
name|iSuggest
operator|.
name|getText
argument_list|()
argument_list|,
name|course
operator|!=
literal|null
operator|&&
operator|!
name|course
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setNext
parameter_list|(
name|CourseSelectionBox
name|next
parameter_list|)
block|{
name|iNext
operator|=
name|next
expr_stmt|;
block|}
specifier|public
name|void
name|setPrev
parameter_list|(
name|CourseSelectionBox
name|prev
parameter_list|)
block|{
name|iPrev
operator|=
name|prev
expr_stmt|;
block|}
specifier|public
name|void
name|setPrimary
parameter_list|(
name|CourseSelectionBox
name|primary
parameter_list|)
block|{
name|iPrimary
operator|=
name|primary
expr_stmt|;
block|}
specifier|public
name|void
name|setAlternative
parameter_list|(
name|CourseSelectionBox
name|alternative
parameter_list|)
block|{
name|iAlternative
operator|=
name|alternative
expr_stmt|;
block|}
specifier|public
name|void
name|setWaitList
parameter_list|(
name|CheckBox
name|waitList
parameter_list|)
block|{
name|iWaitList
operator|=
name|waitList
expr_stmt|;
block|}
specifier|public
name|void
name|setWaitList
parameter_list|(
name|boolean
name|waitList
parameter_list|)
block|{
if|if
condition|(
name|iWaitList
operator|!=
literal|null
condition|)
name|iWaitList
operator|.
name|setValue
argument_list|(
name|waitList
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Boolean
name|getWaitList
parameter_list|()
block|{
return|return
name|iWaitList
operator|==
literal|null
condition|?
literal|null
else|:
name|iWaitList
operator|.
name|getValue
argument_list|()
return|;
block|}
specifier|private
name|void
name|swapWith
parameter_list|(
name|CourseSelectionBox
name|other
parameter_list|)
block|{
name|hideSuggestionList
argument_list|()
expr_stmt|;
name|other
operator|.
name|hideSuggestionList
argument_list|()
expr_stmt|;
name|String
name|x
init|=
name|iError
operator|.
name|getText
argument_list|()
decl_stmt|;
name|iError
operator|.
name|setText
argument_list|(
name|other
operator|.
name|iError
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|other
operator|.
name|iError
operator|.
name|setText
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|boolean
name|b
init|=
name|iError
operator|.
name|isVisible
argument_list|()
decl_stmt|;
name|iError
operator|.
name|setVisible
argument_list|(
name|other
operator|.
name|iError
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|other
operator|.
name|iError
operator|.
name|setVisible
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|b
operator|=
name|isEnabled
argument_list|()
expr_stmt|;
name|setEnabled
argument_list|(
name|other
operator|.
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|other
operator|.
name|setEnabled
argument_list|(
name|b
argument_list|)
expr_stmt|;
if|if
condition|(
name|iPrimary
operator|!=
literal|null
condition|)
block|{
name|x
operator|=
name|getHint
argument_list|()
expr_stmt|;
name|setHint
argument_list|(
name|other
operator|.
name|getHint
argument_list|()
argument_list|)
expr_stmt|;
name|other
operator|.
name|setHint
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
name|x
operator|=
name|getCourse
argument_list|()
expr_stmt|;
name|setCourse
argument_list|(
name|other
operator|.
name|getCourse
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|other
operator|.
name|setCourse
argument_list|(
name|x
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|iAlternative
operator|!=
literal|null
condition|)
name|iAlternative
operator|.
name|swapWith
argument_list|(
name|other
operator|.
name|iAlternative
argument_list|)
expr_stmt|;
if|if
condition|(
name|iWaitList
operator|!=
literal|null
operator|&&
name|other
operator|.
name|iWaitList
operator|!=
literal|null
condition|)
block|{
name|Boolean
name|ch
init|=
name|iWaitList
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|iWaitList
operator|.
name|setValue
argument_list|(
name|other
operator|.
name|iWaitList
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|other
operator|.
name|iWaitList
operator|.
name|setValue
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|clearAllAlternatives
parameter_list|()
block|{
if|if
condition|(
name|iPrimary
operator|!=
literal|null
condition|)
block|{
name|iHint
operator|=
literal|""
expr_stmt|;
block|}
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|iAlternative
operator|!=
literal|null
condition|)
name|iAlternative
operator|.
name|clearAllAlternatives
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|clearAll
parameter_list|()
block|{
if|if
condition|(
name|iPrimary
operator|!=
literal|null
condition|)
name|iPrimary
operator|.
name|clearAll
argument_list|()
expr_stmt|;
else|else
name|clearAllAlternatives
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|moveDown
parameter_list|()
block|{
if|if
condition|(
name|iPrimary
operator|!=
literal|null
condition|)
block|{
name|iPrimary
operator|.
name|moveDown
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|iNext
operator|==
literal|null
condition|)
block|{
name|clearAll
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|iNext
operator|.
name|moveDown
argument_list|()
expr_stmt|;
name|swapWith
argument_list|(
name|iNext
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|moveUp
parameter_list|()
block|{
if|if
condition|(
name|iPrimary
operator|!=
literal|null
condition|)
block|{
name|iPrimary
operator|.
name|moveUp
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|iPrev
operator|==
literal|null
condition|)
block|{
name|clearAll
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|iPrev
operator|.
name|moveUp
argument_list|()
expr_stmt|;
name|swapWith
argument_list|(
name|iPrev
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|swapDown
parameter_list|()
block|{
if|if
condition|(
name|iPrimary
operator|!=
literal|null
condition|)
block|{
name|iPrimary
operator|.
name|swapDown
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|swapWith
argument_list|(
name|iNext
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|swapUp
parameter_list|()
block|{
if|if
condition|(
name|iPrimary
operator|!=
literal|null
condition|)
block|{
name|iPrimary
operator|.
name|swapUp
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|swapWith
argument_list|(
name|iPrev
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isFreeTime
parameter_list|()
block|{
try|try
block|{
name|parseFreeTime
argument_list|(
name|iSuggest
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|boolean
name|fillInFreeTime
parameter_list|(
name|CourseRequestInterface
operator|.
name|Request
name|request
parameter_list|)
block|{
try|try
block|{
for|for
control|(
name|CourseRequestInterface
operator|.
name|FreeTime
name|ft
range|:
name|parseFreeTime
argument_list|(
name|iSuggest
operator|.
name|getText
argument_list|()
argument_list|)
control|)
name|request
operator|.
name|addRequestedFreeTime
argument_list|(
name|ft
argument_list|)
expr_stmt|;
return|return
name|request
operator|.
name|hasRequestedFreeTime
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|void
name|setEnabled
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
if|if
condition|(
name|enabled
condition|)
block|{
name|iSuggest
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iFinderButton
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iFinderButton
operator|.
name|setTabIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iSuggest
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iFinderButton
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iFinderButton
operator|.
name|setTabIndex
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isEnabled
parameter_list|()
block|{
return|return
name|iSuggest
operator|.
name|isEnabled
argument_list|()
return|;
block|}
specifier|private
name|void
name|updateCourses
parameter_list|()
block|{
if|if
condition|(
name|iAllowFreeTime
condition|)
block|{
try|try
block|{
name|iFreeTimePicker
operator|.
name|clearFreeTime
argument_list|()
expr_stmt|;
name|ArrayList
argument_list|<
name|CourseRequestInterface
operator|.
name|FreeTime
argument_list|>
name|freeTimes
init|=
name|parseFreeTime
argument_list|(
name|iFilter
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|iFreeTimePicker
operator|.
name|setFreeTime
argument_list|(
name|freeTimes
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iFreeTimeError
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iTabPanel
operator|.
name|selectTab
argument_list|(
name|iTabPanel
operator|.
name|getTabCount
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|String
name|status
init|=
literal|""
decl_stmt|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|FreeTime
name|ft
range|:
name|freeTimes
control|)
block|{
name|status
operator|+=
name|ft
operator|.
name|toAriaString
argument_list|(
name|CONSTANTS
operator|.
name|longDays
argument_list|()
argument_list|,
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
operator|+
literal|" "
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|status
operator|.
name|isEmpty
argument_list|()
condition|)
name|AriaStatus
operator|.
name|getInstance
argument_list|()
operator|.
name|setText
argument_list|(
name|ARIA
operator|.
name|courseFinderSelectedFreeTime
argument_list|(
name|status
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|iFreeTimeError
operator|.
name|setText
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|iFreeTimeError
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|iTabPanel
operator|.
name|getSelectedTab
argument_list|()
operator|!=
literal|0
condition|)
name|AriaStatus
operator|.
name|getInstance
argument_list|()
operator|.
name|setText
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iCourseOfferingsCallback
operator|==
literal|null
condition|)
block|{
name|iCourseOfferingsCallback
operator|=
operator|new
name|AsyncCallback
argument_list|<
name|Collection
argument_list|<
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iCourses
operator|.
name|clearData
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iCourses
operator|.
name|setEmptyMessage
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iTabPanel
operator|.
name|getSelectedTab
argument_list|()
operator|==
literal|0
condition|)
name|AriaStatus
operator|.
name|getInstance
argument_list|()
operator|.
name|setText
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Collection
argument_list|<
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
argument_list|>
name|result
parameter_list|)
block|{
name|WebTable
operator|.
name|Row
index|[]
name|records
init|=
operator|new
name|WebTable
operator|.
name|Row
index|[
name|result
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|int
name|selectRow
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
name|record
range|:
name|result
control|)
block|{
name|records
index|[
name|idx
index|]
operator|=
operator|new
name|WebTable
operator|.
name|Row
argument_list|(
name|record
operator|.
name|getSubject
argument_list|()
argument_list|,
name|record
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
operator|(
name|record
operator|.
name|getLimit
argument_list|()
operator|==
literal|null
operator|||
name|record
operator|.
name|getLimit
argument_list|()
operator|==
literal|0
operator|||
name|record
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|record
operator|.
name|getLimit
argument_list|()
operator|<
literal|0
condition|?
literal|"&infin;"
else|:
operator|(
name|record
operator|.
name|getLimit
argument_list|()
operator|-
name|record
operator|.
name|getEnrollment
argument_list|()
operator|)
operator|+
literal|" / "
operator|+
name|record
operator|.
name|getLimit
argument_list|()
operator|)
argument_list|,
operator|(
name|record
operator|.
name|getTitle
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|record
operator|.
name|getTitle
argument_list|()
operator|)
argument_list|,
operator|(
name|record
operator|.
name|getNote
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|record
operator|.
name|getNote
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|records
index|[
name|idx
index|]
operator|.
name|setId
argument_list|(
name|record
operator|.
name|hasUniqueName
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iFilter
operator|.
name|getText
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|record
operator|.
name|getSubject
argument_list|()
operator|+
literal|" "
operator|+
name|record
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
condition|)
name|selectRow
operator|=
name|idx
expr_stmt|;
if|if
condition|(
name|record
operator|.
name|getTitle
argument_list|()
operator|==
literal|null
operator|||
name|record
operator|.
name|getTitle
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|record
operator|.
name|getNote
argument_list|()
operator|==
literal|null
operator|||
name|record
operator|.
name|getNote
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|records
index|[
name|idx
index|]
operator|.
name|setAriaLabel
argument_list|(
name|ARIA
operator|.
name|courseFinderCourse
argument_list|(
name|record
operator|.
name|getSubject
argument_list|()
argument_list|,
name|record
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|records
index|[
name|idx
index|]
operator|.
name|setAriaLabel
argument_list|(
name|ARIA
operator|.
name|courseFinderCourseWithNote
argument_list|(
name|record
operator|.
name|getSubject
argument_list|()
argument_list|,
name|record
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|record
operator|.
name|getNote
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|record
operator|.
name|getNote
argument_list|()
operator|==
literal|null
operator|||
name|record
operator|.
name|getNote
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|records
index|[
name|idx
index|]
operator|.
name|setAriaLabel
argument_list|(
name|ARIA
operator|.
name|courseFinderCourseWithTitle
argument_list|(
name|record
operator|.
name|getSubject
argument_list|()
argument_list|,
name|record
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|record
operator|.
name|getTitle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|records
index|[
name|idx
index|]
operator|.
name|setAriaLabel
argument_list|(
name|ARIA
operator|.
name|courseFinderCourseWithTitleAndNote
argument_list|(
name|record
operator|.
name|getSubject
argument_list|()
argument_list|,
name|record
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|record
operator|.
name|getTitle
argument_list|()
argument_list|,
name|record
operator|.
name|getNote
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|idx
operator|++
expr_stmt|;
block|}
name|iCourses
operator|.
name|setData
argument_list|(
name|records
argument_list|)
expr_stmt|;
if|if
condition|(
name|records
operator|.
name|length
operator|==
literal|1
condition|)
name|selectRow
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|selectRow
operator|>=
literal|0
condition|)
block|{
name|iCourses
operator|.
name|setSelectedRow
argument_list|(
name|selectRow
argument_list|)
expr_stmt|;
if|if
condition|(
name|iTabPanel
operator|.
name|getSelectedTab
argument_list|()
operator|!=
literal|0
condition|)
name|iTabPanel
operator|.
name|selectTab
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|updateCourseDetails
argument_list|()
expr_stmt|;
name|courseSelectionChanged
argument_list|()
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
block|}
if|if
condition|(
name|iFilter
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
name|iLastQuery
argument_list|)
condition|)
return|return;
if|if
condition|(
name|iFilter
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iCourses
operator|.
name|setEmptyMessage
argument_list|(
name|MESSAGES
operator|.
name|courseSelectionNoCourseFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iCourses
operator|.
name|setEmptyMessage
argument_list|(
name|MESSAGES
operator|.
name|courseSelectionLoadingCourses
argument_list|()
argument_list|)
expr_stmt|;
name|iSectioningService
operator|.
name|listCourseOfferings
argument_list|(
name|iAcademicSessionProvider
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
name|iFilter
operator|.
name|getText
argument_list|()
argument_list|,
literal|null
argument_list|,
name|iCourseOfferingsCallback
argument_list|)
expr_stmt|;
block|}
name|iLastQuery
operator|=
name|iFilter
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|updateCourseDetails
parameter_list|()
block|{
if|if
condition|(
name|iCourseDetailsCallback
operator|==
literal|null
condition|)
block|{
name|iCourseDetailsCallback
operator|=
operator|new
name|AsyncCallback
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iCourseDetails
operator|.
name|setHTML
argument_list|(
literal|"<table width='100%'></tr><td class='unitime-TableEmpty'><font color='red'>"
operator|+
name|caught
operator|.
name|getMessage
argument_list|()
operator|+
literal|"</font></td></tr></table>"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onSuccess
parameter_list|(
name|String
name|result
parameter_list|)
block|{
name|iCourseDetails
operator|.
name|setHTML
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
block|}
if|if
condition|(
name|iCourseClassesCallback
operator|==
literal|null
condition|)
block|{
name|iCourseClassesCallback
operator|=
operator|new
name|AsyncCallback
argument_list|<
name|Collection
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iClasses
operator|.
name|setEmptyMessage
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Collection
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|result
parameter_list|)
block|{
if|if
condition|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|WebTable
operator|.
name|Row
index|[]
name|rows
init|=
operator|new
name|WebTable
operator|.
name|Row
index|[
name|result
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|Long
name|lastSubpartId
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|clazz
range|:
name|result
control|)
block|{
name|WebTable
operator|.
name|Row
name|row
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|clazz
operator|.
name|isAssigned
argument_list|()
condition|)
block|{
name|row
operator|=
operator|new
name|WebTable
operator|.
name|Row
argument_list|(
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getSubpart
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getLimitString
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getDaysString
argument_list|(
name|CONSTANTS
operator|.
name|shortDays
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getStartString
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getEndString
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getDatePattern
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getRooms
argument_list|(
literal|", "
argument_list|)
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getInstructors
argument_list|(
literal|", "
argument_list|)
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getParentSection
argument_list|()
argument_list|)
argument_list|,
operator|(
name|clazz
operator|.
name|isSaved
argument_list|()
condition|?
operator|new
name|WebTable
operator|.
name|IconCell
argument_list|(
name|RESOURCES
operator|.
name|saved
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
else|:
name|clazz
operator|.
name|isOfHighDemand
argument_list|()
condition|?
operator|new
name|WebTable
operator|.
name|IconCell
argument_list|(
name|RESOURCES
operator|.
name|highDemand
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|highDemand
argument_list|(
name|clazz
operator|.
name|getExpected
argument_list|()
argument_list|,
name|clazz
operator|.
name|getAvailableLimit
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
else|:
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
literal|""
argument_list|)
operator|)
argument_list|,
name|clazz
operator|.
name|hasNote
argument_list|()
condition|?
operator|new
name|WebTable
operator|.
name|IconCell
argument_list|(
name|RESOURCES
operator|.
name|note
argument_list|()
argument_list|,
name|clazz
operator|.
name|getNote
argument_list|()
argument_list|,
literal|""
argument_list|)
else|:
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|=
operator|new
name|WebTable
operator|.
name|Row
argument_list|(
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getSubpart
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getLimitString
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|arrangeHours
argument_list|()
argument_list|,
literal|4
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getRooms
argument_list|(
literal|", "
argument_list|)
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getInstructors
argument_list|(
literal|", "
argument_list|)
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getParentSection
argument_list|()
argument_list|)
argument_list|,
operator|(
name|clazz
operator|.
name|isSaved
argument_list|()
condition|?
operator|new
name|WebTable
operator|.
name|IconCell
argument_list|(
name|RESOURCES
operator|.
name|saved
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
else|:
name|clazz
operator|.
name|isOfHighDemand
argument_list|()
condition|?
operator|new
name|WebTable
operator|.
name|IconCell
argument_list|(
name|RESOURCES
operator|.
name|highDemand
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|highDemand
argument_list|(
name|clazz
operator|.
name|getExpected
argument_list|()
argument_list|,
name|clazz
operator|.
name|getAvailableLimit
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
else|:
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
literal|""
argument_list|)
operator|)
argument_list|,
name|clazz
operator|.
name|hasNote
argument_list|()
condition|?
operator|new
name|WebTable
operator|.
name|IconCell
argument_list|(
name|RESOURCES
operator|.
name|note
argument_list|()
argument_list|,
name|clazz
operator|.
name|getNote
argument_list|()
argument_list|,
literal|""
argument_list|)
else|:
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|row
operator|.
name|setId
argument_list|(
name|clazz
operator|.
name|getClassId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|styleName
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|lastSubpartId
operator|!=
literal|null
operator|&&
operator|!
name|clazz
operator|.
name|getSubpartId
argument_list|()
operator|.
name|equals
argument_list|(
name|lastSubpartId
argument_list|)
condition|)
name|styleName
operator|+=
literal|"top-border-dashed"
expr_stmt|;
if|if
condition|(
operator|!
name|clazz
operator|.
name|isSaved
argument_list|()
operator|&&
operator|!
name|clazz
operator|.
name|isAvailable
argument_list|()
condition|)
name|styleName
operator|+=
literal|" text-gray"
expr_stmt|;
for|for
control|(
name|WebTable
operator|.
name|Cell
name|cell
range|:
name|row
operator|.
name|getCells
argument_list|()
control|)
name|cell
operator|.
name|setStyleName
argument_list|(
name|styleName
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|rows
index|[
name|idx
operator|++
index|]
operator|=
name|row
expr_stmt|;
name|lastSubpartId
operator|=
name|clazz
operator|.
name|getSubpartId
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|clazz
operator|.
name|isSaved
argument_list|()
operator|&&
operator|!
name|clazz
operator|.
name|isAvailable
argument_list|()
condition|)
name|row
operator|.
name|setAriaLabel
argument_list|(
name|ARIA
operator|.
name|courseFinderClassNotAvailable
argument_list|(
name|MESSAGES
operator|.
name|clazz
argument_list|(
name|clazz
operator|.
name|getSubject
argument_list|()
argument_list|,
name|clazz
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|clazz
operator|.
name|getSubpart
argument_list|()
argument_list|,
name|clazz
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|,
name|clazz
operator|.
name|isAssigned
argument_list|()
condition|?
name|clazz
operator|.
name|getTimeStringAria
argument_list|(
name|CONSTANTS
operator|.
name|longDays
argument_list|()
argument_list|,
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|,
name|ARIA
operator|.
name|arrangeHours
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|clazz
operator|.
name|getRooms
argument_list|(
literal|","
argument_list|)
else|:
name|ARIA
operator|.
name|arrangeHours
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|row
operator|.
name|setAriaLabel
argument_list|(
name|ARIA
operator|.
name|courseFinderClassAvailable
argument_list|(
name|MESSAGES
operator|.
name|clazz
argument_list|(
name|clazz
operator|.
name|getSubject
argument_list|()
argument_list|,
name|clazz
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|clazz
operator|.
name|getSubpart
argument_list|()
argument_list|,
name|clazz
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|,
name|clazz
operator|.
name|isAssigned
argument_list|()
condition|?
name|clazz
operator|.
name|getTimeStringAria
argument_list|(
name|CONSTANTS
operator|.
name|longDays
argument_list|()
argument_list|,
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|,
name|ARIA
operator|.
name|arrangeHours
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|clazz
operator|.
name|getRooms
argument_list|(
literal|","
argument_list|)
else|:
name|ARIA
operator|.
name|arrangeHours
argument_list|()
argument_list|,
name|clazz
operator|.
name|getLimitString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iClasses
operator|.
name|setData
argument_list|(
name|rows
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iClasses
operator|.
name|setEmptyMessage
argument_list|(
name|MESSAGES
operator|.
name|courseSelectionNoClasses
argument_list|(
name|iFilter
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
block|}
if|if
condition|(
name|iCourses
operator|.
name|getSelectedRow
argument_list|()
operator|<
literal|0
condition|)
block|{
name|iCourseDetails
operator|.
name|setHTML
argument_list|(
literal|"<table width='100%'></tr><td class='unitime-TableEmpty'>"
operator|+
name|MESSAGES
operator|.
name|courseSelectionNoCourseSelected
argument_list|()
operator|+
literal|"</td></tr></table>"
argument_list|)
expr_stmt|;
name|iClasses
operator|.
name|setEmptyMessage
argument_list|(
name|MESSAGES
operator|.
name|courseSelectionNoCourseSelected
argument_list|()
argument_list|)
expr_stmt|;
name|iClasses
operator|.
name|clearData
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|WebTable
operator|.
name|Row
name|row
init|=
name|iCourses
operator|.
name|getRows
argument_list|()
index|[
name|iCourses
operator|.
name|getSelectedRow
argument_list|()
index|]
decl_stmt|;
name|String
name|courseName
init|=
name|MESSAGES
operator|.
name|courseName
argument_list|(
name|row
operator|.
name|getCell
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|,
name|row
operator|.
name|getCell
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"false"
operator|.
name|equals
argument_list|(
name|row
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
name|courseName
operator|=
name|MESSAGES
operator|.
name|courseNameWithTitle
argument_list|(
name|row
operator|.
name|getCell
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|,
name|row
operator|.
name|getCell
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|,
name|row
operator|.
name|getCell
argument_list|(
literal|2
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|courseName
operator|.
name|equals
argument_list|(
name|iLastCourseLookup
argument_list|)
condition|)
return|return;
name|iCourseDetails
operator|.
name|setHTML
argument_list|(
literal|"<table width='100%'></tr><td class='unitime-TableEmpty'>"
operator|+
name|MESSAGES
operator|.
name|courseSelectionLoadingDetails
argument_list|()
operator|+
literal|"</td></tr></table>"
argument_list|)
expr_stmt|;
name|iCourseDetailsPanel
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iClasses
operator|.
name|setEmptyMessage
argument_list|(
name|MESSAGES
operator|.
name|courseSelectionLoadingClasses
argument_list|()
argument_list|)
expr_stmt|;
name|iClasses
operator|.
name|clearData
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iSectioningService
operator|.
name|retrieveCourseDetails
argument_list|(
name|iAcademicSessionProvider
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
name|courseName
argument_list|,
name|iCourseDetailsCallback
argument_list|)
expr_stmt|;
name|iSectioningService
operator|.
name|listClasses
argument_list|(
name|iAcademicSessionProvider
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
name|courseName
argument_list|,
name|iCourseClassesCallback
argument_list|)
expr_stmt|;
name|iLastCourseLookup
operator|=
name|courseName
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFocus
parameter_list|(
name|boolean
name|focus
parameter_list|)
block|{
name|iSuggest
operator|.
name|setFocus
argument_list|(
name|focus
argument_list|)
expr_stmt|;
if|if
condition|(
name|focus
condition|)
name|iSuggest
operator|.
name|getValueBox
argument_list|()
operator|.
name|selectAll
argument_list|()
expr_stmt|;
block|}
specifier|public
interface|interface
name|CourseSelectionChangeHandler
block|{
specifier|public
name|void
name|onChange
parameter_list|(
name|String
name|course
parameter_list|,
name|boolean
name|valid
parameter_list|)
function_decl|;
block|}
specifier|public
class|class
name|SuggestCallback
implements|implements
name|AsyncCallback
argument_list|<
name|Collection
argument_list|<
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
argument_list|>
argument_list|>
block|{
specifier|private
name|Request
name|iRequest
decl_stmt|;
specifier|private
name|Callback
name|iCallback
decl_stmt|;
specifier|public
name|SuggestCallback
parameter_list|(
name|Request
name|request
parameter_list|,
name|Callback
name|callback
parameter_list|)
block|{
name|iRequest
operator|=
name|request
expr_stmt|;
name|iCallback
operator|=
name|callback
expr_stmt|;
block|}
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iValidCourseNames
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ArrayList
argument_list|<
name|Suggestion
argument_list|>
name|suggestions
init|=
operator|new
name|ArrayList
argument_list|<
name|Suggestion
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|iAllowFreeTime
condition|)
block|{
try|try
block|{
name|ArrayList
argument_list|<
name|CourseRequestInterface
operator|.
name|FreeTime
argument_list|>
name|freeTimes
init|=
name|parseFreeTime
argument_list|(
name|iRequest
operator|.
name|getQuery
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|status
init|=
literal|"Free time "
decl_stmt|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|FreeTime
name|ft
range|:
name|freeTimes
control|)
block|{
name|status
operator|+=
name|ft
operator|.
name|toAriaString
argument_list|(
name|CONSTANTS
operator|.
name|longDays
argument_list|()
argument_list|,
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
operator|+
literal|" "
expr_stmt|;
block|}
name|String
name|ft
init|=
name|freeTimesToString
argument_list|(
name|freeTimes
argument_list|)
decl_stmt|;
name|Suggestion
name|suggestion
init|=
operator|new
name|SimpleSuggestion
argument_list|(
name|ft
argument_list|,
name|ft
argument_list|,
name|status
argument_list|)
decl_stmt|;
name|suggestions
operator|.
name|add
argument_list|(
name|suggestion
argument_list|)
expr_stmt|;
comment|// setStatus(status + " matches the entered text. Press enter to select it.");
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
if|if
condition|(
name|iRequest
operator|.
name|getQuery
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|CONSTANTS
operator|.
name|freePrefix
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|SimpleSuggestion
argument_list|(
literal|"<font color='red'>"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"</font>"
argument_list|,
literal|""
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// setStatus(e.getMessage());
block|}
else|else
block|{
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|SimpleSuggestion
argument_list|(
literal|"<font color='red'>"
operator|+
name|caught
operator|.
name|getMessage
argument_list|()
operator|+
literal|"</font>"
argument_list|,
literal|""
argument_list|,
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// setStatus(caught.getMessage());
block|}
block|}
block|}
else|else
block|{
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|SimpleSuggestion
argument_list|(
literal|"<font color='red'>"
operator|+
name|caught
operator|.
name|getMessage
argument_list|()
operator|+
literal|"</font>"
argument_list|,
literal|""
argument_list|,
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// setStatus(caught.getMessage());
block|}
name|iCallback
operator|.
name|onSuggestionsReady
argument_list|(
name|iRequest
argument_list|,
operator|new
name|Response
argument_list|(
name|suggestions
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Collection
argument_list|<
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
argument_list|>
name|result
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Suggestion
argument_list|>
name|suggestions
init|=
operator|new
name|ArrayList
argument_list|<
name|Suggestion
argument_list|>
argument_list|()
decl_stmt|;
name|iValidCourseNames
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
name|suggestion
range|:
name|result
control|)
block|{
name|String
name|courseName
init|=
name|MESSAGES
operator|.
name|courseName
argument_list|(
name|suggestion
operator|.
name|getSubject
argument_list|()
argument_list|,
name|suggestion
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|courseNameWithTitle
init|=
operator|(
name|suggestion
operator|.
name|getTitle
argument_list|()
operator|==
literal|null
condition|?
name|courseName
else|:
name|MESSAGES
operator|.
name|courseNameWithTitle
argument_list|(
name|suggestion
operator|.
name|getSubject
argument_list|()
argument_list|,
name|suggestion
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|suggestion
operator|.
name|getTitle
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|suggestion
operator|.
name|hasUniqueName
argument_list|()
condition|)
block|{
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|SimpleSuggestion
argument_list|(
name|courseNameWithTitle
argument_list|,
name|courseName
argument_list|,
name|suggestion
operator|.
name|getTitle
argument_list|()
operator|==
literal|null
condition|?
name|courseName
else|:
name|courseName
operator|+
literal|" "
operator|+
name|suggestion
operator|.
name|getTitle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iValidCourseNames
operator|.
name|add
argument_list|(
name|courseName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|SimpleSuggestion
argument_list|(
name|courseNameWithTitle
argument_list|,
name|courseNameWithTitle
argument_list|,
name|suggestion
operator|.
name|getTitle
argument_list|()
operator|==
literal|null
condition|?
name|courseName
else|:
name|courseName
operator|+
literal|" "
operator|+
name|suggestion
operator|.
name|getTitle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iValidCourseNames
operator|.
name|add
argument_list|(
name|courseNameWithTitle
argument_list|)
expr_stmt|;
block|}
block|}
name|iCallback
operator|.
name|onSuggestionsReady
argument_list|(
name|iRequest
argument_list|,
operator|new
name|Response
argument_list|(
name|suggestions
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|SimpleSuggestion
implements|implements
name|Suggestion
implements|,
name|AriaSuggestBox
operator|.
name|HasStatus
block|{
specifier|private
name|String
name|iDisplay
decl_stmt|,
name|iReplace
decl_stmt|,
name|iStatus
decl_stmt|;
specifier|public
name|SimpleSuggestion
parameter_list|(
name|String
name|display
parameter_list|,
name|String
name|replace
parameter_list|,
name|String
name|status
parameter_list|)
block|{
name|iDisplay
operator|=
name|display
expr_stmt|;
name|iReplace
operator|=
name|replace
expr_stmt|;
name|iStatus
operator|=
name|status
expr_stmt|;
block|}
specifier|public
name|SimpleSuggestion
parameter_list|(
name|String
name|display
parameter_list|,
name|String
name|replace
parameter_list|)
block|{
name|this
argument_list|(
name|display
argument_list|,
name|replace
argument_list|,
name|display
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SimpleSuggestion
parameter_list|(
name|String
name|replace
parameter_list|)
block|{
name|this
argument_list|(
name|replace
argument_list|,
name|replace
argument_list|,
name|replace
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDisplayString
parameter_list|()
block|{
return|return
name|iDisplay
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getReplacementString
parameter_list|()
block|{
return|return
name|iReplace
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getStatusString
parameter_list|()
block|{
return|return
name|iStatus
return|;
block|}
block|}
specifier|public
name|void
name|setHint
parameter_list|(
name|String
name|hint
parameter_list|)
block|{
if|if
condition|(
name|iSuggest
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
name|iHint
argument_list|)
condition|)
block|{
name|iSuggest
operator|.
name|setText
argument_list|(
name|hint
argument_list|)
expr_stmt|;
name|iSuggest
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TextBoxHint"
argument_list|)
expr_stmt|;
block|}
name|iHint
operator|=
name|hint
expr_stmt|;
block|}
specifier|public
name|String
name|getHint
parameter_list|()
block|{
return|return
name|iHint
return|;
block|}
specifier|public
specifier|static
interface|interface
name|Validator
block|{
specifier|public
name|String
name|validate
parameter_list|(
name|CourseSelectionBox
name|source
parameter_list|)
function_decl|;
block|}
specifier|public
name|void
name|addValidator
parameter_list|(
name|Validator
name|validator
parameter_list|)
block|{
name|iValitaros
operator|.
name|add
argument_list|(
name|validator
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|hideError
parameter_list|()
block|{
name|iError
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|validate
parameter_list|()
block|{
if|if
condition|(
name|iSuggest
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
name|iSuggest
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
name|iHint
argument_list|)
condition|)
block|{
name|iError
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|iAllowFreeTime
condition|)
block|{
try|try
block|{
name|parseFreeTime
argument_list|(
name|iSuggest
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|iError
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
if|if
condition|(
name|iSuggest
operator|.
name|getText
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|CONSTANTS
operator|.
name|freePrefix
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|iError
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|invalidFreeTime
argument_list|()
argument_list|)
expr_stmt|;
name|iError
operator|.
name|setTitle
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|iError
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|e
operator|.
name|getMessage
argument_list|()
return|;
block|}
block|}
block|}
for|for
control|(
name|Validator
name|validator
range|:
name|iValitaros
control|)
block|{
name|String
name|message
init|=
name|validator
operator|.
name|validate
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|iError
operator|.
name|setText
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|iError
operator|.
name|setTitle
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|iError
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|message
return|;
block|}
block|}
name|iError
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|ArrayList
argument_list|<
name|CourseRequestInterface
operator|.
name|FreeTime
argument_list|>
name|parseFreeTime
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
operator|!
name|iAllowFreeTime
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|MESSAGES
operator|.
name|freeTimeNotAllowed
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|iValidCourseNames
operator|.
name|contains
argument_list|(
name|text
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|MESSAGES
operator|.
name|notFreeTimeIsCourse
argument_list|(
name|text
argument_list|)
argument_list|)
throw|;
name|ArrayList
argument_list|<
name|CourseRequestInterface
operator|.
name|FreeTime
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|CourseRequestInterface
operator|.
name|FreeTime
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|MESSAGES
operator|.
name|courseSelectionNoFreeTime
argument_list|()
argument_list|)
throw|;
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|lastDays
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|tokens
index|[]
init|=
name|text
operator|.
name|split
argument_list|(
literal|"[,;]"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|token
range|:
name|tokens
control|)
block|{
name|String
name|original
init|=
name|token
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|CONSTANTS
operator|.
name|freePrefix
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
name|CONSTANTS
operator|.
name|freePrefix
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|days
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
condition|)
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
do|do
block|{
name|found
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CONSTANTS
operator|.
name|longDays
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|token
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|CONSTANTS
operator|.
name|longDays
argument_list|()
index|[
name|i
index|]
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|days
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
name|CONSTANTS
operator|.
name|longDays
argument_list|()
index|[
name|i
index|]
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
condition|)
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CONSTANTS
operator|.
name|days
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|token
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|CONSTANTS
operator|.
name|days
argument_list|()
index|[
name|i
index|]
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|days
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
name|CONSTANTS
operator|.
name|days
argument_list|()
index|[
name|i
index|]
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
condition|)
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CONSTANTS
operator|.
name|days
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|token
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|CONSTANTS
operator|.
name|days
argument_list|()
index|[
name|i
index|]
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|days
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
while|while
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
condition|)
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CONSTANTS
operator|.
name|shortDays
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|token
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|CONSTANTS
operator|.
name|shortDays
argument_list|()
index|[
name|i
index|]
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|days
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
name|CONSTANTS
operator|.
name|shortDays
argument_list|()
index|[
name|i
index|]
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
condition|)
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CONSTANTS
operator|.
name|freeTimeShortDays
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|token
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|CONSTANTS
operator|.
name|freeTimeShortDays
argument_list|()
index|[
name|i
index|]
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|days
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
name|CONSTANTS
operator|.
name|freeTimeShortDays
argument_list|()
index|[
name|i
index|]
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
condition|)
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
name|found
condition|)
do|;
name|int
name|startHour
init|=
literal|0
decl_stmt|,
name|startMin
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
condition|)
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|String
name|number
init|=
literal|""
decl_stmt|;
while|while
condition|(
operator|!
name|token
operator|.
name|isEmpty
argument_list|()
operator|&&
name|token
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|>=
literal|'0'
operator|&&
name|token
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|<=
literal|'9'
condition|)
block|{
name|number
operator|+=
name|token
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|number
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|MESSAGES
operator|.
name|invalidFreeTimeExpectedDayOrNumber
argument_list|(
name|original
argument_list|,
literal|1
operator|+
name|original
operator|.
name|lastIndexOf
argument_list|(
name|token
argument_list|)
argument_list|)
argument_list|)
throw|;
if|if
condition|(
name|number
operator|.
name|length
argument_list|()
operator|>
literal|2
condition|)
block|{
name|startHour
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|number
argument_list|)
operator|/
literal|100
expr_stmt|;
name|startMin
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|number
argument_list|)
operator|%
literal|100
expr_stmt|;
block|}
else|else
block|{
name|startHour
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|number
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
condition|)
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
while|while
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
condition|)
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|number
operator|=
literal|""
expr_stmt|;
while|while
condition|(
operator|!
name|token
operator|.
name|isEmpty
argument_list|()
operator|&&
name|token
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|>=
literal|'0'
operator|&&
name|token
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|<=
literal|'9'
condition|)
block|{
name|number
operator|+=
name|token
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|number
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|MESSAGES
operator|.
name|invalidFreeTimeExpectedNumber
argument_list|(
name|original
argument_list|,
literal|1
operator|+
name|original
operator|.
name|lastIndexOf
argument_list|(
name|token
argument_list|)
argument_list|)
argument_list|)
throw|;
name|startMin
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|number
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
condition|)
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|boolean
name|hasAmOrPm
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"am"
argument_list|)
condition|)
block|{
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|hasAmOrPm
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"a"
argument_list|)
condition|)
block|{
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|hasAmOrPm
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"pm"
argument_list|)
condition|)
block|{
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|hasAmOrPm
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|startHour
operator|<
literal|12
condition|)
name|startHour
operator|+=
literal|12
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"p"
argument_list|)
condition|)
block|{
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|hasAmOrPm
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|startHour
operator|<
literal|12
condition|)
name|startHour
operator|+=
literal|12
expr_stmt|;
block|}
if|if
condition|(
name|startHour
operator|<
literal|7
operator|&&
operator|!
name|hasAmOrPm
condition|)
name|startHour
operator|+=
literal|12
expr_stmt|;
comment|//if (startMin< 29) startMin = 0; else startMin = 30;
if|if
condition|(
name|startMin
operator|%
literal|5
operator|!=
literal|0
condition|)
name|startMin
operator|=
literal|5
operator|*
operator|(
operator|(
name|startMin
operator|+
literal|2
operator|)
operator|/
literal|5
operator|)
expr_stmt|;
if|if
condition|(
name|startHour
operator|==
literal|7
operator|&&
name|startMin
operator|==
literal|0
operator|&&
operator|!
name|hasAmOrPm
condition|)
name|startHour
operator|+=
literal|12
expr_stmt|;
name|int
name|startTime
init|=
operator|(
literal|60
operator|*
name|startHour
operator|+
name|startMin
operator|)
operator|/
literal|5
decl_stmt|;
comment|// (60 * startHour + startMin) / 30 - 15
name|int
name|endTime
init|=
name|startTime
decl_stmt|;
while|while
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
condition|)
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|int
name|endHour
init|=
literal|0
decl_stmt|,
name|endMin
init|=
literal|0
decl_stmt|;
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
while|while
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
condition|)
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|number
operator|=
literal|""
expr_stmt|;
while|while
condition|(
operator|!
name|token
operator|.
name|isEmpty
argument_list|()
operator|&&
name|token
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|>=
literal|'0'
operator|&&
name|token
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|<=
literal|'9'
condition|)
block|{
name|number
operator|+=
name|token
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|number
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|MESSAGES
operator|.
name|invalidFreeTimeExpectedNumber
argument_list|(
name|original
argument_list|,
literal|1
operator|+
name|original
operator|.
name|lastIndexOf
argument_list|(
name|token
argument_list|)
argument_list|)
argument_list|)
throw|;
if|if
condition|(
name|number
operator|.
name|length
argument_list|()
operator|>
literal|2
condition|)
block|{
name|endHour
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|number
argument_list|)
operator|/
literal|100
expr_stmt|;
name|endMin
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|number
argument_list|)
operator|%
literal|100
expr_stmt|;
block|}
else|else
block|{
name|endHour
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|number
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
condition|)
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
while|while
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
condition|)
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|number
operator|=
literal|""
expr_stmt|;
while|while
condition|(
operator|!
name|token
operator|.
name|isEmpty
argument_list|()
operator|&&
name|token
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|>=
literal|'0'
operator|&&
name|token
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|<=
literal|'9'
condition|)
block|{
name|number
operator|+=
name|token
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|number
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|MESSAGES
operator|.
name|invalidFreeTimeExpectedNumber
argument_list|(
name|original
argument_list|,
literal|1
operator|+
name|original
operator|.
name|lastIndexOf
argument_list|(
name|token
argument_list|)
argument_list|)
argument_list|)
throw|;
name|endMin
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|number
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
condition|)
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|hasAmOrPm
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|token
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"am"
argument_list|)
condition|)
block|{
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|hasAmOrPm
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|endHour
operator|==
literal|12
condition|)
name|endHour
operator|+=
literal|12
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"a"
argument_list|)
condition|)
block|{
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|hasAmOrPm
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|endHour
operator|==
literal|12
condition|)
name|endHour
operator|+=
literal|12
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"pm"
argument_list|)
condition|)
block|{
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|hasAmOrPm
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|endHour
operator|<
literal|12
condition|)
name|endHour
operator|+=
literal|12
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"p"
argument_list|)
condition|)
block|{
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|hasAmOrPm
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|endHour
operator|<
literal|12
condition|)
name|endHour
operator|+=
literal|12
expr_stmt|;
block|}
if|if
condition|(
name|endHour
operator|<=
literal|7
operator|&&
operator|!
name|hasAmOrPm
condition|)
name|endHour
operator|+=
literal|12
expr_stmt|;
comment|// if (endMin< 29) endMin = 0; else endMin = 30;
if|if
condition|(
name|endMin
operator|%
literal|5
operator|!=
literal|0
condition|)
name|endMin
operator|=
literal|5
operator|*
operator|(
operator|(
name|endMin
operator|+
literal|2
operator|)
operator|/
literal|5
operator|)
expr_stmt|;
name|endTime
operator|=
operator|(
literal|60
operator|*
name|endHour
operator|+
name|endMin
operator|)
operator|/
literal|5
expr_stmt|;
comment|// (60 * endHour + endMin) / 30 - 15
block|}
while|while
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
condition|)
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|token
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|MESSAGES
operator|.
name|invalidFreeTimeGeneric
argument_list|(
name|original
argument_list|,
literal|1
operator|+
name|original
operator|.
name|lastIndexOf
argument_list|(
name|token
argument_list|)
argument_list|)
argument_list|)
throw|;
if|if
condition|(
name|days
operator|.
name|isEmpty
argument_list|()
condition|)
name|days
operator|=
name|lastDays
expr_stmt|;
if|if
condition|(
name|days
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CONSTANTS
operator|.
name|freeTimeDays
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|days
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|startTime
operator|==
name|endTime
condition|)
block|{
name|endTime
operator|+=
literal|6
expr_stmt|;
if|if
condition|(
operator|(
name|days
operator|.
name|contains
argument_list|(
literal|0
argument_list|)
operator|||
name|days
operator|.
name|contains
argument_list|(
literal|2
argument_list|)
operator|||
name|days
operator|.
name|contains
argument_list|(
literal|4
argument_list|)
operator|)
operator|&&
operator|!
name|days
operator|.
name|contains
argument_list|(
literal|1
argument_list|)
operator|&&
operator|!
name|days
operator|.
name|contains
argument_list|(
literal|3
argument_list|)
condition|)
block|{
if|if
condition|(
name|startTime
operator|%
literal|12
operator|==
literal|6
condition|)
name|endTime
operator|+=
literal|6
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|days
operator|.
name|contains
argument_list|(
literal|1
argument_list|)
operator|||
name|days
operator|.
name|contains
argument_list|(
literal|3
argument_list|)
operator|)
operator|&&
operator|!
name|days
operator|.
name|contains
argument_list|(
literal|0
argument_list|)
operator|&&
operator|!
name|days
operator|.
name|contains
argument_list|(
literal|2
argument_list|)
operator|&&
operator|!
name|days
operator|.
name|contains
argument_list|(
literal|4
argument_list|)
condition|)
block|{
if|if
condition|(
name|startTime
operator|%
literal|18
operator|==
literal|0
condition|)
name|endTime
operator|+=
literal|12
expr_stmt|;
if|else if
condition|(
name|startTime
operator|%
literal|18
operator|==
literal|6
condition|)
name|endTime
operator|+=
literal|6
expr_stmt|;
block|}
block|}
if|if
condition|(
name|startTime
operator|<
literal|0
operator|||
name|startTime
operator|>
literal|24
operator|*
literal|12
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|MESSAGES
operator|.
name|invalidFreeTimeInvalidStartTime
argument_list|(
name|original
argument_list|)
argument_list|)
throw|;
if|if
condition|(
name|endTime
operator|<
literal|0
operator|||
name|endTime
operator|>
literal|24
operator|*
literal|12
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|MESSAGES
operator|.
name|invalidFreeTimeInvalidEndTime
argument_list|(
name|original
argument_list|)
argument_list|)
throw|;
comment|/* 			if (startTime< 0) 				throw new IllegalArgumentException(MESSAGES.invalidFreeTimeStartBeforeFirst(original, CONSTANTS.freeTimePeriods()[0])); 			if (startTime>= CONSTANTS.freeTimePeriods().length - 1) 				throw new IllegalArgumentException(MESSAGES.invalidFreeTimeStartAfterLast(original, CONSTANTS.freeTimePeriods()[CONSTANTS.freeTimePeriods().length - 2])); 			if (endTime< 0) 				throw new IllegalArgumentException(MESSAGES.invalidFreeTimeEndBeforeFirst(original, CONSTANTS.freeTimePeriods()[0])); 			if (endTime>= CONSTANTS.freeTimePeriods().length)  				throw new IllegalArgumentException(MESSAGES.invalidFreeTimeEndAfterLast(original, CONSTANTS.freeTimePeriods()[CONSTANTS.freeTimePeriods().length - 1])); 			*/
if|if
condition|(
name|startTime
operator|>=
name|endTime
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|MESSAGES
operator|.
name|invalidFreeTimeStartNotBeforeEnd
argument_list|(
name|original
argument_list|)
argument_list|)
throw|;
name|CourseRequestInterface
operator|.
name|FreeTime
name|f
init|=
operator|new
name|CourseRequestInterface
operator|.
name|FreeTime
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|day
range|:
name|days
control|)
name|f
operator|.
name|addDay
argument_list|(
name|day
argument_list|)
expr_stmt|;
name|f
operator|.
name|setStart
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
comment|// 6 * (startTime + 15));
name|f
operator|.
name|setLength
argument_list|(
name|endTime
operator|-
name|startTime
argument_list|)
expr_stmt|;
comment|// 6 * (endTime - startTime));
name|ret
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|lastDays
operator|=
name|days
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|String
name|freeTimesToString
parameter_list|(
name|ArrayList
argument_list|<
name|CourseRequestInterface
operator|.
name|FreeTime
argument_list|>
name|freeTimes
parameter_list|)
block|{
name|String
name|ret
init|=
literal|""
decl_stmt|;
name|String
name|lastDays
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|FreeTime
name|ft
range|:
name|freeTimes
control|)
block|{
if|if
condition|(
name|ret
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|ret
operator|+=
literal|", "
expr_stmt|;
name|String
name|days
init|=
name|ft
operator|.
name|getDaysString
argument_list|(
name|CONSTANTS
operator|.
name|shortDays
argument_list|()
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|ft
operator|.
name|getDays
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|CONSTANTS
operator|.
name|freeTimeDays
argument_list|()
operator|.
name|length
operator|&&
operator|!
name|ft
operator|.
name|getDays
argument_list|()
operator|.
name|contains
argument_list|(
literal|5
argument_list|)
operator|&&
operator|!
name|ft
operator|.
name|getDays
argument_list|()
operator|.
name|contains
argument_list|(
literal|6
argument_list|)
condition|)
name|days
operator|=
literal|""
expr_stmt|;
name|ret
operator|+=
operator|(
name|days
operator|.
name|isEmpty
argument_list|()
operator|||
name|days
operator|.
name|equals
argument_list|(
name|lastDays
argument_list|)
condition|?
literal|""
else|:
name|days
operator|+
literal|" "
operator|)
operator|+
name|ft
operator|.
name|getStartString
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
operator|+
literal|" - "
operator|+
name|ft
operator|.
name|getEndString
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
expr_stmt|;
name|lastDays
operator|=
name|days
expr_stmt|;
block|}
return|return
name|CONSTANTS
operator|.
name|freePrefix
argument_list|()
operator|+
name|ret
return|;
block|}
block|}
end_class

end_unit

