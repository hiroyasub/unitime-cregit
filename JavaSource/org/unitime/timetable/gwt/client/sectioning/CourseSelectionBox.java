begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|sectioning
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|CourseFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|CourseFinderClasses
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|CourseFinderCourses
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|CourseFinderDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|CourseFinderDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|CourseFinderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|CourseFinderFreeTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|CourseRequestBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|DataProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|FreeTimeParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtAriaMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|SectioningService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|SectioningServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AcademicSessionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|RequestedCourse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|CheckBox
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|CourseSelectionBox
extends|extends
name|CourseRequestBox
block|{
specifier|public
specifier|static
specifier|final
name|StudentSectioningResources
name|RESOURCES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningResources
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|StudentSectioningMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|StudentSectioningConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|GwtAriaMessages
name|ARIA
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtAriaMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|CourseSelectionBox
name|iPrev
decl_stmt|,
name|iNext
decl_stmt|;
specifier|private
name|CourseSelectionBox
name|iPrimary
decl_stmt|,
name|iAlternative
decl_stmt|;
specifier|private
name|CheckBox
name|iWaitList
decl_stmt|;
specifier|private
name|AcademicSessionProvider
name|iAcademicSessionProvider
decl_stmt|;
specifier|private
specifier|final
name|SectioningServiceAsync
name|iSectioningService
init|=
name|GWT
operator|.
name|create
argument_list|(
name|SectioningService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|CourseSelectionBox
parameter_list|(
name|AcademicSessionProvider
name|acadSession
parameter_list|,
name|boolean
name|enabled
parameter_list|,
name|boolean
name|allowFreeTime
parameter_list|)
block|{
name|super
argument_list|(
name|CONSTANTS
operator|.
name|showCourseTitle
argument_list|()
argument_list|)
expr_stmt|;
name|iAcademicSessionProvider
operator|=
name|acadSession
expr_stmt|;
if|if
condition|(
name|allowFreeTime
condition|)
block|{
name|FreeTimeParser
name|parser
init|=
operator|new
name|FreeTimeParser
argument_list|()
decl_stmt|;
name|setFreeTimes
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
name|setCourseFinderFactory
argument_list|(
operator|new
name|CourseFinderFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|CourseFinder
name|createCourseFinder
parameter_list|()
block|{
name|CourseFinder
name|finder
init|=
operator|new
name|CourseFinderDialog
argument_list|()
decl_stmt|;
name|CourseFinderCourses
name|courses
init|=
operator|new
name|CourseFinderCourses
argument_list|(
name|CONSTANTS
operator|.
name|showCourseTitle
argument_list|()
argument_list|,
name|CONSTANTS
operator|.
name|courseFinderSuggestWhenEmpty
argument_list|()
argument_list|)
decl_stmt|;
name|courses
operator|.
name|setDataProvider
argument_list|(
operator|new
name|DataProvider
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|CourseAssignment
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|getData
parameter_list|(
name|String
name|source
parameter_list|,
name|AsyncCallback
argument_list|<
name|Collection
argument_list|<
name|CourseAssignment
argument_list|>
argument_list|>
name|callback
parameter_list|)
block|{
name|iSectioningService
operator|.
name|listCourseOfferings
argument_list|(
name|iAcademicSessionProvider
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
name|source
argument_list|,
literal|null
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|CourseFinderDetails
name|details
init|=
operator|new
name|CourseFinderDetails
argument_list|()
decl_stmt|;
name|details
operator|.
name|setDataProvider
argument_list|(
operator|new
name|DataProvider
argument_list|<
name|CourseAssignment
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|getData
parameter_list|(
name|CourseAssignment
name|source
parameter_list|,
name|AsyncCallback
argument_list|<
name|String
argument_list|>
name|callback
parameter_list|)
block|{
name|iSectioningService
operator|.
name|retrieveCourseDetails
argument_list|(
name|iAcademicSessionProvider
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
name|source
operator|.
name|hasUniqueName
argument_list|()
condition|?
name|source
operator|.
name|getCourseName
argument_list|()
else|:
name|source
operator|.
name|getCourseNameWithTitle
argument_list|()
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|CourseFinderClasses
name|classes
init|=
operator|new
name|CourseFinderClasses
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|classes
operator|.
name|setDataProvider
argument_list|(
operator|new
name|DataProvider
argument_list|<
name|CourseAssignment
argument_list|,
name|Collection
argument_list|<
name|ClassAssignment
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|getData
parameter_list|(
name|CourseAssignment
name|source
parameter_list|,
name|AsyncCallback
argument_list|<
name|Collection
argument_list|<
name|ClassAssignment
argument_list|>
argument_list|>
name|callback
parameter_list|)
block|{
name|iSectioningService
operator|.
name|listClasses
argument_list|(
name|iAcademicSessionProvider
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
name|source
operator|.
name|hasUniqueName
argument_list|()
condition|?
name|source
operator|.
name|getCourseName
argument_list|()
else|:
name|source
operator|.
name|getCourseNameWithTitle
argument_list|()
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|courses
operator|.
name|setCourseDetails
argument_list|(
name|details
argument_list|,
name|classes
argument_list|)
expr_stmt|;
if|if
condition|(
name|getFreeTimes
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|CourseFinderFreeTime
name|free
init|=
operator|new
name|CourseFinderFreeTime
argument_list|()
decl_stmt|;
name|free
operator|.
name|setDataProvider
argument_list|(
name|getFreeTimes
argument_list|()
argument_list|)
expr_stmt|;
name|finder
operator|.
name|setTabs
argument_list|(
name|courses
argument_list|,
name|free
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|finder
operator|.
name|setTabs
argument_list|(
name|courses
argument_list|)
expr_stmt|;
block|}
return|return
name|finder
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|setSuggestions
argument_list|(
operator|new
name|DataProvider
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|CourseAssignment
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|getData
parameter_list|(
name|String
name|source
parameter_list|,
name|AsyncCallback
argument_list|<
name|Collection
argument_list|<
name|CourseAssignment
argument_list|>
argument_list|>
name|callback
parameter_list|)
block|{
name|iSectioningService
operator|.
name|listCourseOfferings
argument_list|(
name|iAcademicSessionProvider
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
name|source
argument_list|,
literal|20
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|setSectionsProvider
argument_list|(
operator|new
name|DataProvider
argument_list|<
name|CourseAssignment
argument_list|,
name|Collection
argument_list|<
name|ClassAssignment
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|getData
parameter_list|(
name|CourseAssignment
name|source
parameter_list|,
name|AsyncCallback
argument_list|<
name|Collection
argument_list|<
name|ClassAssignment
argument_list|>
argument_list|>
name|callback
parameter_list|)
block|{
name|iSectioningService
operator|.
name|listClasses
argument_list|(
name|iAcademicSessionProvider
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
name|source
operator|.
name|hasUniqueName
argument_list|()
condition|?
name|source
operator|.
name|getCourseName
argument_list|()
else|:
name|source
operator|.
name|getCourseNameWithTitle
argument_list|()
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setNext
parameter_list|(
name|CourseSelectionBox
name|next
parameter_list|)
block|{
name|iNext
operator|=
name|next
expr_stmt|;
block|}
specifier|public
name|void
name|setPrev
parameter_list|(
name|CourseSelectionBox
name|prev
parameter_list|)
block|{
name|iPrev
operator|=
name|prev
expr_stmt|;
block|}
specifier|public
name|void
name|setPrimary
parameter_list|(
name|CourseSelectionBox
name|primary
parameter_list|)
block|{
name|iPrimary
operator|=
name|primary
expr_stmt|;
block|}
specifier|public
name|void
name|setAlternative
parameter_list|(
name|CourseSelectionBox
name|alternative
parameter_list|)
block|{
name|iAlternative
operator|=
name|alternative
expr_stmt|;
block|}
specifier|public
name|void
name|setWaitList
parameter_list|(
name|CheckBox
name|waitList
parameter_list|)
block|{
name|iWaitList
operator|=
name|waitList
expr_stmt|;
block|}
specifier|public
name|void
name|setWaitList
parameter_list|(
name|boolean
name|waitList
parameter_list|)
block|{
if|if
condition|(
name|iWaitList
operator|!=
literal|null
condition|)
name|iWaitList
operator|.
name|setValue
argument_list|(
name|waitList
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Boolean
name|getWaitList
parameter_list|()
block|{
return|return
name|iWaitList
operator|==
literal|null
condition|?
literal|null
else|:
name|iWaitList
operator|.
name|getValue
argument_list|()
return|;
block|}
specifier|public
name|void
name|setWaitListEnabled
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
if|if
condition|(
name|iWaitList
operator|!=
literal|null
condition|)
name|iWaitList
operator|.
name|setEnabled
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|swapWith
parameter_list|(
name|CourseSelectionBox
name|other
parameter_list|)
block|{
name|hideSuggestionList
argument_list|()
expr_stmt|;
name|other
operator|.
name|hideSuggestionList
argument_list|()
expr_stmt|;
name|String
name|x
init|=
name|getError
argument_list|()
decl_stmt|;
name|setError
argument_list|(
name|other
operator|.
name|getError
argument_list|()
argument_list|)
expr_stmt|;
name|other
operator|.
name|setError
argument_list|(
name|x
argument_list|)
expr_stmt|;
if|if
condition|(
name|iPrimary
operator|!=
literal|null
condition|)
block|{
name|x
operator|=
name|getHint
argument_list|()
expr_stmt|;
name|setHint
argument_list|(
name|other
operator|.
name|getHint
argument_list|()
argument_list|)
expr_stmt|;
name|other
operator|.
name|setHint
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
name|RequestedCourse
name|y
init|=
name|getValue
argument_list|()
decl_stmt|;
name|setValue
argument_list|(
name|other
operator|.
name|getValue
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|other
operator|.
name|setValue
argument_list|(
name|y
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|boolean
name|b
init|=
name|isEnabled
argument_list|()
decl_stmt|;
name|setEnabled
argument_list|(
name|other
operator|.
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|other
operator|.
name|setEnabled
argument_list|(
name|b
argument_list|)
expr_stmt|;
if|if
condition|(
name|iAlternative
operator|!=
literal|null
condition|)
name|iAlternative
operator|.
name|swapWith
argument_list|(
name|other
operator|.
name|iAlternative
argument_list|)
expr_stmt|;
if|if
condition|(
name|iWaitList
operator|!=
literal|null
operator|&&
name|other
operator|.
name|iWaitList
operator|!=
literal|null
condition|)
block|{
name|Boolean
name|ch
init|=
name|iWaitList
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|iWaitList
operator|.
name|setValue
argument_list|(
name|other
operator|.
name|iWaitList
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|other
operator|.
name|iWaitList
operator|.
name|setValue
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|replaceWith
parameter_list|(
name|CourseSelectionBox
name|other
parameter_list|)
block|{
name|hideSuggestionList
argument_list|()
expr_stmt|;
if|if
condition|(
name|other
operator|!=
literal|null
condition|)
name|other
operator|.
name|hideSuggestionList
argument_list|()
expr_stmt|;
name|setError
argument_list|(
name|other
operator|==
literal|null
condition|?
literal|null
else|:
name|other
operator|.
name|getError
argument_list|()
argument_list|)
expr_stmt|;
name|setEnabled
argument_list|(
name|other
operator|==
literal|null
condition|?
name|iPrimary
operator|==
literal|null
operator|||
operator|!
name|iPrimary
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
else|:
name|other
operator|.
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|setSaved
argument_list|(
name|other
operator|==
literal|null
condition|?
literal|false
else|:
name|other
operator|.
name|isSaved
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iPrimary
operator|!=
literal|null
condition|)
name|setHint
argument_list|(
name|other
operator|==
literal|null
condition|?
literal|""
else|:
name|other
operator|.
name|getHint
argument_list|()
argument_list|)
expr_stmt|;
name|setValue
argument_list|(
name|other
operator|==
literal|null
condition|?
literal|null
else|:
name|other
operator|.
name|getValue
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|iAlternative
operator|!=
literal|null
condition|)
name|iAlternative
operator|.
name|replaceWith
argument_list|(
name|other
operator|==
literal|null
condition|?
literal|null
else|:
name|other
operator|.
name|iAlternative
argument_list|)
expr_stmt|;
if|if
condition|(
name|iWaitList
operator|!=
literal|null
condition|)
block|{
name|iWaitList
operator|.
name|setValue
argument_list|(
name|other
operator|==
literal|null
operator|||
name|other
operator|.
name|iWaitList
operator|==
literal|null
condition|?
literal|false
else|:
name|other
operator|.
name|iWaitList
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|clearAllAlternatives
parameter_list|()
block|{
if|if
condition|(
name|iPrimary
operator|!=
literal|null
condition|)
block|{
name|setHint
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
name|setValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|iAlternative
operator|!=
literal|null
condition|)
name|iAlternative
operator|.
name|clearAllAlternatives
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|clearAll
parameter_list|()
block|{
if|if
condition|(
name|iPrimary
operator|!=
literal|null
condition|)
name|iPrimary
operator|.
name|clearAll
argument_list|()
expr_stmt|;
else|else
name|clearAllAlternatives
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|moveDown
parameter_list|()
block|{
if|if
condition|(
name|iPrimary
operator|!=
literal|null
condition|)
block|{
name|iPrimary
operator|.
name|moveDown
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|iNext
operator|==
literal|null
condition|)
block|{
name|clearAll
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|iNext
operator|.
name|moveDown
argument_list|()
expr_stmt|;
name|swapWith
argument_list|(
name|iNext
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|moveUp
parameter_list|()
block|{
if|if
condition|(
name|iPrimary
operator|!=
literal|null
condition|)
block|{
name|iPrimary
operator|.
name|moveUp
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|iPrev
operator|==
literal|null
condition|)
block|{
name|clearAll
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|iPrev
operator|.
name|moveUp
argument_list|()
expr_stmt|;
name|swapWith
argument_list|(
name|iPrev
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|swapDown
parameter_list|()
block|{
if|if
condition|(
name|iPrimary
operator|!=
literal|null
condition|)
block|{
name|iPrimary
operator|.
name|swapDown
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|swapWith
argument_list|(
name|iNext
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|swapUp
parameter_list|()
block|{
if|if
condition|(
name|iPrimary
operator|!=
literal|null
condition|)
block|{
name|iPrimary
operator|.
name|swapUp
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|swapWith
argument_list|(
name|iPrev
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
if|if
condition|(
name|iPrimary
operator|!=
literal|null
condition|)
block|{
name|iPrimary
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|iNext
operator|!=
literal|null
operator|&&
name|isAllowFreeTime
argument_list|()
operator|==
name|iNext
operator|.
name|isAllowFreeTime
argument_list|()
condition|)
block|{
name|replaceWith
argument_list|(
name|iNext
argument_list|)
expr_stmt|;
name|iNext
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|replaceWith
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

