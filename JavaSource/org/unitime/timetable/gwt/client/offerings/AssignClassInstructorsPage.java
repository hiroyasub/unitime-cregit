begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|offerings
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|page
operator|.
name|UniTimeNotifications
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|page
operator|.
name|UniTimePageLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|LoadingWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|NumberBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|SimpleForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeHeaderPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|HasCellAlignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|HasFocus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AssignClassInstructorsInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AssignClassInstructorsInterface
operator|.
name|DataColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AssignClassInstructorsInterface
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AssignClassInstructorsInterface
operator|.
name|FieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AssignClassInstructorsInterface
operator|.
name|ListItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AssignClassInstructorsInterface
operator|.
name|PageName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AssignClassInstructorsInterface
operator|.
name|Record
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
operator|.
name|ScheduledCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Cursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|TextAlign
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Unit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|WhiteSpace
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DOM
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|CheckBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Focusable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
operator|.
name|HorizontalAlignmentConstant
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HorizontalPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ListBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|SimplePanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|TextArea
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|TextBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_comment
comment|/**  *   * @author Stephanie Schluttenhofer   *  */
end_comment

begin_class
specifier|public
class|class
name|AssignClassInstructorsPage
extends|extends
name|Composite
block|{
specifier|public
specifier|static
specifier|final
name|GwtResources
name|RESOURCES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtResources
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|GwtRpcServiceAsync
name|RPC
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtRpcService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|SimpleForm
name|iPanel
decl_stmt|;
specifier|protected
name|Label
name|iCourseTitle
decl_stmt|;
specifier|protected
name|HorizontalPanel
name|iCoordinators
decl_stmt|;
specifier|protected
name|HTML
name|iCourseCoordinator
decl_stmt|;
specifier|protected
name|UniTimeHeaderPanel
name|iHeader
decl_stmt|,
name|iBottom
decl_stmt|;
specifier|protected
name|PageName
name|iPageName
init|=
literal|null
decl_stmt|;
specifier|protected
name|UniTimeTable
argument_list|<
name|Record
argument_list|>
name|iTable
decl_stmt|;
comment|//	protected boolean iHasLazy = false;
specifier|protected
name|AssignClassInstructorsInterface
name|iData
decl_stmt|;
specifier|protected
name|SimplePanel
name|iSimple
decl_stmt|;
specifier|protected
name|boolean
name|iEditable
init|=
literal|true
decl_stmt|;
specifier|protected
name|boolean
index|[]
name|iVisible
init|=
literal|null
decl_stmt|;
specifier|public
name|AssignClassInstructorsPage
parameter_list|()
block|{
name|ClickHandler
name|save
init|=
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|String
name|valid
init|=
name|validate
argument_list|()
decl_stmt|;
if|if
condition|(
name|valid
operator|!=
literal|null
condition|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|valid
argument_list|)
expr_stmt|;
return|return;
block|}
name|iHeader
operator|.
name|setMessage
argument_list|(
name|MESSAGES
operator|.
name|waitSavingData
argument_list|()
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|showLoading
argument_list|(
name|MESSAGES
operator|.
name|waitSavingData
argument_list|()
argument_list|)
expr_stmt|;
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iData
operator|.
name|getRecords
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iData
operator|.
name|getRecords
argument_list|()
operator|.
name|addAll
argument_list|(
name|iTable
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
name|AssignClassInstructorsInterface
operator|.
name|SaveDataRpcRequest
operator|.
name|saveData
argument_list|(
name|iData
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|AssignClassInstructorsInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|hideLoading
argument_list|()
expr_stmt|;
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedSave
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|failedSave
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|AssignClassInstructorsInterface
name|result
parameter_list|)
block|{
name|iData
operator|=
name|result
expr_stmt|;
if|if
condition|(
operator|!
name|iData
operator|.
name|isSaveSuccessful
argument_list|()
condition|)
block|{
name|refreshTable
argument_list|()
expr_stmt|;
name|LoadingWidget
operator|.
name|hideLoading
argument_list|()
expr_stmt|;
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedSave
argument_list|(
name|iData
operator|.
name|getErrors
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|failedSave
argument_list|(
name|iData
operator|.
name|getErrors
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LoadingWidget
operator|.
name|hideLoading
argument_list|()
expr_stmt|;
name|ToolBox
operator|.
name|open
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"instructionalOfferingDetail.do?io="
operator|+
name|iData
operator|.
name|getOfferingId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|ClickHandler
name|removeInstrs
init|=
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|Window
operator|.
name|confirm
argument_list|(
name|MESSAGES
operator|.
name|confirmRemoveClassInstructors
argument_list|()
argument_list|)
condition|)
return|return;
name|String
name|valid
init|=
name|validate
argument_list|()
decl_stmt|;
if|if
condition|(
name|valid
operator|!=
literal|null
condition|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|valid
argument_list|)
expr_stmt|;
return|return;
block|}
name|iHeader
operator|.
name|setMessage
argument_list|(
name|MESSAGES
operator|.
name|waitSavingData
argument_list|()
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|showLoading
argument_list|(
name|MESSAGES
operator|.
name|waitSavingData
argument_list|()
argument_list|)
expr_stmt|;
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iData
operator|.
name|getRecords
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iData
operator|.
name|getRecords
argument_list|()
operator|.
name|addAll
argument_list|(
name|iTable
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
name|AssignClassInstructorsInterface
operator|.
name|RemoveAllClassInstructorsDataRpcRequest
operator|.
name|removeInstructorData
argument_list|(
name|iData
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|AssignClassInstructorsInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|hideLoading
argument_list|()
expr_stmt|;
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedSave
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|failedSave
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|AssignClassInstructorsInterface
name|result
parameter_list|)
block|{
name|iData
operator|=
name|result
expr_stmt|;
name|LoadingWidget
operator|.
name|hideLoading
argument_list|()
expr_stmt|;
name|ToolBox
operator|.
name|open
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"instructionalOfferingDetail.do?io="
operator|+
name|iData
operator|.
name|getOfferingId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|ClickHandler
name|prev
init|=
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|String
name|valid
init|=
name|validate
argument_list|()
decl_stmt|;
if|if
condition|(
name|valid
operator|!=
literal|null
condition|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|valid
argument_list|)
expr_stmt|;
return|return;
block|}
name|iHeader
operator|.
name|setMessage
argument_list|(
name|MESSAGES
operator|.
name|waitSavingData
argument_list|()
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|showLoading
argument_list|(
name|MESSAGES
operator|.
name|waitSavingData
argument_list|()
argument_list|)
expr_stmt|;
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iData
operator|.
name|getRecords
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iData
operator|.
name|getRecords
argument_list|()
operator|.
name|addAll
argument_list|(
name|iTable
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
name|AssignClassInstructorsInterface
operator|.
name|SaveDataGoToPreviousRpcRequest
operator|.
name|saveDataAndPrev
argument_list|(
name|iData
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|AssignClassInstructorsInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|hideLoading
argument_list|()
expr_stmt|;
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedSave
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|failedSave
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|AssignClassInstructorsInterface
name|result
parameter_list|)
block|{
name|iData
operator|=
name|result
expr_stmt|;
name|refreshTable
argument_list|()
expr_stmt|;
name|LoadingWidget
operator|.
name|hideLoading
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|iData
operator|.
name|isSaveSuccessful
argument_list|()
condition|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedSave
argument_list|(
name|iData
operator|.
name|getErrors
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|failedSave
argument_list|(
name|iData
operator|.
name|getErrors
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|ClickHandler
name|next
init|=
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|String
name|valid
init|=
name|validate
argument_list|()
decl_stmt|;
if|if
condition|(
name|valid
operator|!=
literal|null
condition|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|valid
argument_list|)
expr_stmt|;
return|return;
block|}
name|iHeader
operator|.
name|setMessage
argument_list|(
name|MESSAGES
operator|.
name|waitSavingData
argument_list|()
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|showLoading
argument_list|(
name|MESSAGES
operator|.
name|waitSavingData
argument_list|()
argument_list|)
expr_stmt|;
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iData
operator|.
name|getRecords
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iData
operator|.
name|getRecords
argument_list|()
operator|.
name|addAll
argument_list|(
name|iTable
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
name|AssignClassInstructorsInterface
operator|.
name|SaveDataGoToNextRpcRequest
operator|.
name|saveDataAndNext
argument_list|(
name|iData
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|AssignClassInstructorsInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|hideLoading
argument_list|()
expr_stmt|;
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedSave
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|failedSave
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|AssignClassInstructorsInterface
name|result
parameter_list|)
block|{
name|iData
operator|=
name|result
expr_stmt|;
name|refreshTable
argument_list|()
expr_stmt|;
name|LoadingWidget
operator|.
name|hideLoading
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|iData
operator|.
name|isSaveSuccessful
argument_list|()
condition|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedSave
argument_list|(
name|iData
operator|.
name|getErrors
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|failedSave
argument_list|(
name|iData
operator|.
name|getErrors
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|ClickHandler
name|back
init|=
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|showLoading
argument_list|(
name|MESSAGES
operator|.
name|waitPlease
argument_list|()
argument_list|)
expr_stmt|;
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|LoadingWidget
operator|.
name|hideLoading
argument_list|()
expr_stmt|;
name|ToolBox
operator|.
name|open
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"instructionalOfferingDetail.do?io="
operator|+
name|iData
operator|.
name|getOfferingId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|iPanel
operator|=
operator|new
name|SimpleForm
argument_list|()
expr_stmt|;
name|iHeader
operator|=
operator|new
name|UniTimeHeaderPanel
argument_list|()
expr_stmt|;
name|iCourseTitle
operator|=
operator|new
name|Label
argument_list|()
expr_stmt|;
name|iHeader
operator|.
name|add
argument_list|(
name|iCourseTitle
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"unassignAll"
argument_list|,
name|MESSAGES
operator|.
name|buttonUnassignAll
argument_list|()
argument_list|,
literal|75
argument_list|,
name|removeInstrs
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"save"
argument_list|,
name|MESSAGES
operator|.
name|buttonSave
argument_list|()
argument_list|,
literal|75
argument_list|,
name|save
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"prev"
argument_list|,
name|MESSAGES
operator|.
name|buttonPrevious
argument_list|()
argument_list|,
literal|75
argument_list|,
name|prev
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"next"
argument_list|,
name|MESSAGES
operator|.
name|buttonNext
argument_list|()
argument_list|,
literal|75
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"back"
argument_list|,
name|MESSAGES
operator|.
name|buttonBack
argument_list|()
argument_list|,
literal|75
argument_list|,
name|back
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|addHeaderRow
argument_list|(
name|iHeader
argument_list|)
expr_stmt|;
name|iCoordinators
operator|=
operator|new
name|HorizontalPanel
argument_list|()
expr_stmt|;
name|iCoordinators
operator|.
name|setSpacing
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|iCoordinators
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|MESSAGES
operator|.
name|labelCourseCoordinators
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iCourseCoordinator
operator|=
operator|new
name|HTML
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|iCourseCoordinator
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setWhiteSpace
argument_list|(
name|WhiteSpace
operator|.
name|PRE_WRAP
argument_list|)
expr_stmt|;
name|iCoordinators
operator|.
name|add
argument_list|(
name|iCourseCoordinator
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|addRow
argument_list|(
name|iCoordinators
argument_list|)
expr_stmt|;
name|iTable
operator|=
operator|new
name|UniTimeTable
argument_list|<
name|Record
argument_list|>
argument_list|()
expr_stmt|;
name|iTable
operator|.
name|setAllowSelection
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|addRow
argument_list|(
name|iTable
argument_list|)
expr_stmt|;
name|iBottom
operator|=
name|iHeader
operator|.
name|clonePanel
argument_list|()
expr_stmt|;
name|iPanel
operator|.
name|addNotPrintableBottomRow
argument_list|(
name|iBottom
argument_list|)
expr_stmt|;
name|iSimple
operator|=
operator|new
name|SimplePanel
argument_list|(
name|iPanel
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|iSimple
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
name|AssignClassInstructorsInterface
operator|.
name|GetPageNameRpcRequest
operator|.
name|getPageName
argument_list|()
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|PageName
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedWrongEditType
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|,
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|PageName
name|result
parameter_list|)
block|{
name|iPageName
operator|=
name|result
expr_stmt|;
name|UniTimePageLabel
operator|.
name|getInstance
argument_list|()
operator|.
name|setPageName
argument_list|(
name|iPageName
operator|.
name|plural
argument_list|()
argument_list|)
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|()
block|{
name|load
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|load
parameter_list|(
specifier|final
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
name|callback
parameter_list|)
block|{
name|iBottom
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iCourseTitle
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|iCoordinators
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iCourseCoordinator
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"add"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"save"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"prev"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"next"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"unassignAll"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"back"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setMessage
argument_list|(
name|MESSAGES
operator|.
name|waitLoadingData
argument_list|()
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|showLoading
argument_list|(
name|MESSAGES
operator|.
name|waitLoadingData
argument_list|()
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|clearTable
argument_list|()
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
name|AssignClassInstructorsInterface
operator|.
name|LoadDataRpcRequest
operator|.
name|loadData
argument_list|(
name|Window
operator|.
name|Location
operator|.
name|getParameter
argument_list|(
literal|"configId"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|AssignClassInstructorsInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|AssignClassInstructorsInterface
name|result
parameter_list|)
block|{
name|iData
operator|=
name|result
expr_stmt|;
name|refreshTable
argument_list|()
expr_stmt|;
name|LoadingWidget
operator|.
name|hideLoading
argument_list|()
expr_stmt|;
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
name|callback
operator|.
name|onSuccess
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|hideLoading
argument_list|()
expr_stmt|;
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedLoadData
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|failedLoadData
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|caught
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|checkAccess
argument_list|(
name|caught
argument_list|)
expr_stmt|;
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
name|callback
operator|.
name|onFailure
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|List
argument_list|<
name|UniTimeTableHeader
argument_list|>
name|header
parameter_list|(
name|boolean
name|top
parameter_list|)
block|{
name|List
argument_list|<
name|UniTimeTableHeader
argument_list|>
name|header
init|=
operator|new
name|ArrayList
argument_list|<
name|UniTimeTableHeader
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|col
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|Field
name|field
range|:
name|iData
operator|.
name|getFields
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|field
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|isHideLabel
argument_list|()
condition|)
block|{
name|name
operator|=
literal|""
expr_stmt|;
block|}
name|UniTimeTableHeader
name|cell
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|top
condition|)
block|{
name|cell
operator|.
name|addStyleName
argument_list|(
literal|"unitime-TopLineDash"
argument_list|)
expr_stmt|;
name|cell
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setPaddingTop
argument_list|(
literal|2
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
block|}
name|header
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|getType
argument_list|()
operator|==
name|FieldType
operator|.
name|number
condition|)
name|cell
operator|.
name|setHorizontalAlignment
argument_list|(
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
if|if
condition|(
name|col
operator|==
name|DataColumn
operator|.
name|DISPLAY
operator|.
name|ordinal
argument_list|()
condition|)
block|{
name|cell
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opSelectAll
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Record
name|r
init|=
name|iTable
operator|.
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
operator|&&
name|r
operator|.
name|isEditable
argument_list|()
condition|)
block|{
name|r
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|DISPLAY
operator|.
name|ordinal
argument_list|()
argument_list|,
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
argument_list|,
name|r
operator|.
name|isEditable
argument_list|(
name|DataColumn
operator|.
name|DISPLAY
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|,
name|r
operator|.
name|isVisible
argument_list|(
name|DataColumn
operator|.
name|DISPLAY
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|CheckBox
operator|)
operator|(
operator|(
name|UniTimeWidget
operator|)
operator|(
operator|(
name|MyCell
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|DataColumn
operator|.
name|DISPLAY
operator|.
name|ordinal
argument_list|()
argument_list|)
operator|)
operator|.
name|getInnerWidget
argument_list|()
operator|)
operator|.
name|getWidget
argument_list|()
operator|)
operator|.
name|setValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|cell
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opClearSelection
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Record
name|r
init|=
name|iTable
operator|.
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
operator|&&
name|r
operator|.
name|isEditable
argument_list|()
condition|)
block|{
name|r
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|DISPLAY
operator|.
name|ordinal
argument_list|()
argument_list|,
name|Boolean
operator|.
name|FALSE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|CheckBox
operator|)
operator|(
operator|(
name|UniTimeWidget
operator|)
operator|(
operator|(
name|MyCell
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|DataColumn
operator|.
name|DISPLAY
operator|.
name|ordinal
argument_list|()
argument_list|)
operator|)
operator|.
name|getInnerWidget
argument_list|()
operator|)
operator|.
name|getWidget
argument_list|()
operator|)
operator|.
name|setValue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|col
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|iData
operator|.
name|isEditable
argument_list|()
operator|&&
name|iEditable
condition|)
block|{
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|()
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|header
return|;
block|}
specifier|private
name|void
name|refreshTable
parameter_list|()
block|{
name|refreshTable
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|refreshTable
parameter_list|(
name|String
name|hidden
parameter_list|)
block|{
name|iCourseTitle
operator|.
name|setText
argument_list|(
name|iData
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|iCourseCoordinator
operator|.
name|setText
argument_list|(
name|iData
operator|.
name|getCourseCoordinators
argument_list|()
argument_list|)
expr_stmt|;
name|iCoordinators
operator|.
name|setVisible
argument_list|(
name|iData
operator|.
name|getCourseCoordinators
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|iData
operator|.
name|getCourseCoordinators
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|UniTimePageLabel
operator|.
name|getInstance
argument_list|()
operator|.
name|setPageName
argument_list|(
name|iPageName
operator|.
name|plural
argument_list|()
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|clearTable
argument_list|()
expr_stmt|;
name|iTable
operator|.
name|setAllowSelection
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|addRow
argument_list|(
literal|null
argument_list|,
name|header
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iVisible
operator|==
literal|null
condition|)
block|{
name|iVisible
operator|=
operator|new
name|boolean
index|[
name|iData
operator|.
name|getFields
argument_list|()
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iVisible
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|iVisible
index|[
name|i
index|]
operator|=
name|iData
operator|.
name|getFields
argument_list|()
index|[
name|i
index|]
operator|.
name|isVisible
argument_list|()
operator|&&
operator|(
name|hidden
operator|==
literal|null
operator|||
operator|!
name|hidden
operator|.
name|contains
argument_list|(
literal|"|"
operator|+
name|iData
operator|.
name|getFields
argument_list|()
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|+
literal|"|"
argument_list|)
operator|)
expr_stmt|;
block|}
name|int
name|row
init|=
literal|1
decl_stmt|;
for|for
control|(
name|Record
name|r
range|:
name|iData
operator|.
name|getRecords
argument_list|()
control|)
block|{
name|fillRow
argument_list|(
name|r
argument_list|,
name|row
operator|++
argument_list|)
expr_stmt|;
block|}
name|iBottom
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|iData
operator|.
name|isEditable
argument_list|()
condition|)
block|{
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"back"
argument_list|,
name|iEditable
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"save"
argument_list|,
name|iEditable
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"prev"
argument_list|,
name|iEditable
operator|&&
name|iData
operator|.
name|getPreviousConfigId
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"next"
argument_list|,
name|iEditable
operator|&&
name|iData
operator|.
name|getNextConfigId
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"add"
argument_list|,
operator|!
name|iEditable
argument_list|)
expr_stmt|;
if|if
condition|(
name|iData
operator|.
name|isAllInstructorsDeletable
argument_list|()
condition|)
block|{
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"unassignAll"
argument_list|,
name|iEditable
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"unassignAll"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iData
operator|.
name|isShowTimeAndRoom
argument_list|()
condition|)
block|{
name|iVisible
index|[
name|DataColumn
operator|.
name|TIME
operator|.
name|ordinal
argument_list|()
index|]
operator|=
literal|true
expr_stmt|;
name|iVisible
index|[
name|DataColumn
operator|.
name|ROOM
operator|.
name|ordinal
argument_list|()
index|]
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|iVisible
index|[
name|DataColumn
operator|.
name|TIME
operator|.
name|ordinal
argument_list|()
index|]
operator|=
literal|false
expr_stmt|;
name|iVisible
index|[
name|DataColumn
operator|.
name|ROOM
operator|.
name|ordinal
argument_list|()
index|]
operator|=
literal|false
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iVisible
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|iTable
operator|.
name|setColumnVisible
argument_list|(
name|i
argument_list|,
name|iVisible
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|fillRow
parameter_list|(
name|Record
name|record
parameter_list|,
name|int
name|row
parameter_list|)
block|{
name|List
argument_list|<
name|Widget
argument_list|>
name|line
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|col
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|iData
operator|.
name|getFields
argument_list|()
control|)
block|{
name|MyCell
name|cell
init|=
operator|new
name|MyCell
argument_list|(
name|iData
operator|.
name|isEditable
argument_list|()
operator|&&
name|iEditable
operator|&&
name|record
operator|.
name|isEditable
argument_list|(
name|col
argument_list|)
argument_list|,
name|field
argument_list|,
name|record
argument_list|,
name|col
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|line
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
name|col
operator|++
expr_stmt|;
block|}
name|iTable
operator|.
name|setRow
argument_list|(
name|row
argument_list|,
name|record
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
specifier|public
class|class
name|MyCell
extends|extends
name|Composite
implements|implements
name|HasFocus
implements|,
name|HasCellAlignment
block|{
specifier|private
name|Field
name|iField
decl_stmt|;
specifier|private
name|Record
name|iRecord
decl_stmt|;
specifier|private
name|int
name|iIndex
decl_stmt|;
specifier|public
name|MyCell
parameter_list|(
name|boolean
name|editable
parameter_list|,
specifier|final
name|Field
name|field
parameter_list|,
specifier|final
name|Record
name|record
parameter_list|,
specifier|final
name|int
name|index
parameter_list|,
name|boolean
name|detail
parameter_list|)
block|{
name|iField
operator|=
name|field
expr_stmt|;
name|iRecord
operator|=
name|record
expr_stmt|;
name|iIndex
operator|=
name|index
expr_stmt|;
if|if
condition|(
name|editable
condition|)
block|{
switch|switch
condition|(
name|field
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|hasError
case|:
if|if
condition|(
name|iEditable
operator|&&
name|record
operator|.
name|getField
argument_list|(
name|index
argument_list|)
operator|==
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
operator|&&
name|record
operator|.
name|isEditable
argument_list|(
name|index
argument_list|)
condition|)
block|{
specifier|final
name|Image
name|error
init|=
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|warning
argument_list|()
argument_list|)
decl_stmt|;
name|error
operator|.
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|fieldError
argument_list|()
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
operator|new
name|UniTimeWidget
argument_list|<
name|Image
argument_list|>
argument_list|(
name|error
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|initWidget
argument_list|(
operator|new
name|UniTimeWidget
argument_list|<
name|Label
argument_list|>
argument_list|(
operator|new
name|Label
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|add
case|:
if|if
condition|(
name|iEditable
operator|&&
name|record
operator|.
name|getField
argument_list|(
name|index
argument_list|)
operator|==
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
operator|&&
name|record
operator|.
name|isEditable
argument_list|(
name|index
argument_list|)
condition|)
block|{
specifier|final
name|Image
name|add
init|=
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|add
argument_list|()
argument_list|)
decl_stmt|;
name|add
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setCursor
argument_list|(
name|Cursor
operator|.
name|POINTER
argument_list|)
expr_stmt|;
name|add
operator|.
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|fieldInsertRowBelow
argument_list|()
argument_list|)
expr_stmt|;
name|add
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|int
name|row
init|=
name|iTable
operator|.
name|getCellForEvent
argument_list|(
name|event
argument_list|)
operator|.
name|getRowIndex
argument_list|()
decl_stmt|;
name|int
name|recId
init|=
name|iData
operator|.
name|getRecords
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|Record
name|rec
init|=
name|iData
operator|.
name|addRecord
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|recId
argument_list|)
argument_list|)
decl_stmt|;
name|Record
name|oldRec
init|=
name|iTable
operator|.
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|rec
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|CLASS_UID
operator|.
name|ordinal
argument_list|()
argument_list|,
name|oldRec
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|CLASS_UID
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|rec
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|IS_FIRST_RECORD_FOR_CLASS
operator|.
name|ordinal
argument_list|()
argument_list|,
name|Boolean
operator|.
name|FALSE
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|rec
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|HAS_ERROR
operator|.
name|ordinal
argument_list|()
argument_list|,
name|Boolean
operator|.
name|FALSE
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|rec
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|DELETE
operator|.
name|ordinal
argument_list|()
argument_list|,
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|rec
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|ADD
operator|.
name|ordinal
argument_list|()
argument_list|,
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|rec
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|CLASS_NAME
operator|.
name|ordinal
argument_list|()
argument_list|,
name|oldRec
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|CLASS_NAME
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|rec
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|CLASS_EXTERNAL_UID
operator|.
name|ordinal
argument_list|()
argument_list|,
name|oldRec
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|CLASS_EXTERNAL_UID
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|rec
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|TIME
operator|.
name|ordinal
argument_list|()
argument_list|,
name|oldRec
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|TIME
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|rec
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|ROOM
operator|.
name|ordinal
argument_list|()
argument_list|,
name|oldRec
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|ROOM
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|rec
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|DISPLAY
operator|.
name|ordinal
argument_list|()
argument_list|,
name|oldRec
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|DISPLAY
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|,
name|oldRec
operator|.
name|isEditable
argument_list|(
name|DataColumn
operator|.
name|DISPLAY
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|rec
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|INSTR_NAME
operator|.
name|ordinal
argument_list|()
argument_list|,
literal|""
argument_list|,
name|oldRec
operator|.
name|isEditable
argument_list|(
name|DataColumn
operator|.
name|INSTR_NAME
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rec
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|PCT_SHARE
operator|.
name|ordinal
argument_list|()
argument_list|,
literal|"0"
argument_list|,
name|oldRec
operator|.
name|isEditable
argument_list|(
name|DataColumn
operator|.
name|PCT_SHARE
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rec
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|CHECK_CONFICTS
operator|.
name|ordinal
argument_list|()
argument_list|,
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
argument_list|,
name|oldRec
operator|.
name|isEditable
argument_list|(
name|DataColumn
operator|.
name|CHECK_CONFICTS
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rec
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|RESPONSIBILITY
operator|.
name|ordinal
argument_list|()
argument_list|,
name|oldRec
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|RESPONSIBILITY
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|,
name|oldRec
operator|.
name|isEditable
argument_list|(
name|DataColumn
operator|.
name|RESPONSIBILITY
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|,
name|oldRec
operator|.
name|isVisible
argument_list|(
name|DataColumn
operator|.
name|RESPONSIBILITY
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rec
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|FUNDING_DEPT
operator|.
name|ordinal
argument_list|()
argument_list|,
name|oldRec
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|FUNDING_DEPT
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|,
name|oldRec
operator|.
name|isEditable
argument_list|(
name|DataColumn
operator|.
name|FUNDING_DEPT
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|oldRec
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|DELETE
operator|.
name|ordinal
argument_list|()
argument_list|,
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fillRow
argument_list|(
name|oldRec
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|fillRow
argument_list|(
name|rec
argument_list|,
name|iTable
operator|.
name|insertRow
argument_list|(
name|row
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
operator|new
name|UniTimeWidget
argument_list|<
name|Image
argument_list|>
argument_list|(
name|add
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|initWidget
argument_list|(
operator|new
name|UniTimeWidget
argument_list|<
name|Label
argument_list|>
argument_list|(
operator|new
name|Label
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|delete
case|:
if|if
condition|(
name|iData
operator|.
name|isEditable
argument_list|()
operator|&&
name|iEditable
operator|&&
name|record
operator|.
name|isDeletable
argument_list|()
operator|&&
name|record
operator|.
name|getField
argument_list|(
name|index
argument_list|)
operator|==
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
operator|&&
name|record
operator|.
name|isEditable
argument_list|(
name|index
argument_list|)
condition|)
block|{
specifier|final
name|Image
name|delete
init|=
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|delete
argument_list|()
argument_list|)
decl_stmt|;
name|delete
operator|.
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|titleDeleteRow
argument_list|()
argument_list|)
expr_stmt|;
name|delete
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setCursor
argument_list|(
name|Cursor
operator|.
name|POINTER
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|int
name|row
init|=
name|iTable
operator|.
name|getCellForEvent
argument_list|(
name|event
argument_list|)
operator|.
name|getRowIndex
argument_list|()
decl_stmt|;
name|Record
name|delRec
init|=
name|iTable
operator|.
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|Record
name|nextRec
init|=
name|iTable
operator|.
name|getData
argument_list|(
name|row
operator|+
literal|1
argument_list|)
decl_stmt|;
name|Record
name|nextNextRec
init|=
name|iTable
operator|.
name|getData
argument_list|(
name|row
operator|+
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|delRec
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|IS_FIRST_RECORD_FOR_CLASS
operator|.
name|ordinal
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
argument_list|)
operator|&&
name|nextRec
operator|!=
literal|null
operator|&&
name|nextRec
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|CLASS_UID
operator|.
name|ordinal
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|delRec
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|CLASS_UID
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|nextRec
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|IS_FIRST_RECORD_FOR_CLASS
operator|.
name|ordinal
argument_list|()
argument_list|,
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|nextRec
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|CLASS_NAME
operator|.
name|ordinal
argument_list|()
argument_list|,
name|delRec
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|CLASS_NAME
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|nextRec
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|CLASS_EXTERNAL_UID
operator|.
name|ordinal
argument_list|()
argument_list|,
name|delRec
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|CLASS_EXTERNAL_UID
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|nextRec
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|TIME
operator|.
name|ordinal
argument_list|()
argument_list|,
name|delRec
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|TIME
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|nextRec
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|ROOM
operator|.
name|ordinal
argument_list|()
argument_list|,
name|delRec
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|ROOM
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|nextRec
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|DISPLAY
operator|.
name|ordinal
argument_list|()
argument_list|,
name|delRec
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|DISPLAY
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|,
name|delRec
operator|.
name|isEditable
argument_list|(
name|DataColumn
operator|.
name|DISPLAY
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|nextRec
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|FUNDING_DEPT
operator|.
name|ordinal
argument_list|()
argument_list|,
name|delRec
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|FUNDING_DEPT
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|,
name|delRec
operator|.
name|isEditable
argument_list|(
name|DataColumn
operator|.
name|FUNDING_DEPT
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|nextNextRec
operator|!=
literal|null
operator|&&
operator|!
name|nextNextRec
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|CLASS_UID
operator|.
name|ordinal
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|nextRec
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|CLASS_UID
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|nextRec
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|DELETE
operator|.
name|ordinal
argument_list|()
argument_list|,
name|Boolean
operator|.
name|FALSE
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|fillRow
argument_list|(
name|nextRec
argument_list|,
name|row
operator|+
literal|1
argument_list|)
expr_stmt|;
name|iData
operator|.
name|getRecords
argument_list|()
operator|.
name|remove
argument_list|(
name|iTable
operator|.
name|getData
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|removeRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|row
operator|>
literal|1
condition|)
block|{
name|Record
name|prevRec
init|=
name|iTable
operator|.
name|getData
argument_list|(
name|row
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|prevRec
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|CLASS_UID
operator|.
name|ordinal
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|delRec
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|CLASS_UID
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
operator|&&
name|prevRec
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|IS_FIRST_RECORD_FOR_CLASS
operator|.
name|ordinal
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
argument_list|)
operator|&&
operator|(
name|nextRec
operator|==
literal|null
operator|||
operator|!
name|nextRec
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|CLASS_UID
operator|.
name|ordinal
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|delRec
operator|.
name|getField
argument_list|(
name|DataColumn
operator|.
name|CLASS_UID
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|prevRec
operator|.
name|setField
argument_list|(
name|DataColumn
operator|.
name|DELETE
operator|.
name|ordinal
argument_list|()
argument_list|,
name|Boolean
operator|.
name|FALSE
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fillRow
argument_list|(
name|prevRec
argument_list|,
name|row
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|iData
operator|.
name|getRecords
argument_list|()
operator|.
name|remove
argument_list|(
name|iTable
operator|.
name|getData
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|removeRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
operator|new
name|UniTimeWidget
argument_list|<
name|Image
argument_list|>
argument_list|(
name|delete
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|initWidget
argument_list|(
operator|new
name|UniTimeWidget
argument_list|<
name|Label
argument_list|>
argument_list|(
operator|new
name|Label
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|textarea
case|:
specifier|final
name|TextArea
name|textarea
init|=
operator|new
name|TextArea
argument_list|()
decl_stmt|;
name|textarea
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TextArea"
argument_list|)
expr_stmt|;
if|if
condition|(
name|detail
condition|)
block|{
name|textarea
operator|.
name|setVisibleLines
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|5
argument_list|,
name|field
operator|.
name|getHeight
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|textarea
operator|.
name|setCharacterWidth
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|80
argument_list|,
name|field
operator|.
name|getWidth
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|textarea
operator|.
name|setVisibleLines
argument_list|(
name|field
operator|.
name|getHeight
argument_list|()
operator|<=
literal|0
condition|?
literal|2
else|:
name|Math
operator|.
name|min
argument_list|(
literal|3
argument_list|,
name|field
operator|.
name|getHeight
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|textarea
operator|.
name|setCharacterWidth
argument_list|(
name|field
operator|.
name|getWidth
argument_list|()
operator|<=
literal|0
condition|?
literal|40
else|:
name|Math
operator|.
name|min
argument_list|(
literal|60
argument_list|,
name|field
operator|.
name|getWidth
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|textarea
operator|.
name|setText
argument_list|(
name|record
operator|.
name|getField
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|textarea
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|record
operator|.
name|setField
argument_list|(
name|index
argument_list|,
name|textarea
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|setError
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
operator|new
name|UniTimeWidget
argument_list|<
name|TextArea
argument_list|>
argument_list|(
name|textarea
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iEditable
operator|&&
name|record
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|textarea
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|iData
operator|.
name|getRecords
argument_list|()
operator|.
name|indexOf
argument_list|(
name|iRecord
argument_list|)
operator|==
name|iData
operator|.
name|getRecords
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|&&
operator|!
name|record
operator|.
name|isEmpty
argument_list|()
condition|)
name|fillRow
argument_list|(
name|iData
operator|.
name|addRecord
argument_list|(
literal|null
argument_list|)
argument_list|,
name|iTable
operator|.
name|insertRow
argument_list|(
name|iTable
operator|.
name|getRowCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|number
case|:
specifier|final
name|NumberBox
name|number
init|=
operator|new
name|NumberBox
argument_list|()
decl_stmt|;
name|number
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setTextAlign
argument_list|(
name|TextAlign
operator|.
name|RIGHT
argument_list|)
expr_stmt|;
name|number
operator|.
name|setText
argument_list|(
name|record
operator|.
name|getField
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|number
operator|.
name|setDecimal
argument_list|(
name|field
operator|.
name|isAllowFloatingPoint
argument_list|()
argument_list|)
expr_stmt|;
name|number
operator|.
name|setNegative
argument_list|(
name|field
operator|.
name|isAllowNegative
argument_list|()
argument_list|)
expr_stmt|;
name|number
operator|.
name|setWidth
argument_list|(
name|field
operator|.
name|getWidth
argument_list|()
operator|+
literal|"px"
argument_list|)
expr_stmt|;
name|number
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|record
operator|.
name|setField
argument_list|(
name|index
argument_list|,
name|number
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|setError
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
operator|new
name|UniTimeWidget
argument_list|<
name|TextBox
argument_list|>
argument_list|(
name|number
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iEditable
operator|&&
name|record
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|number
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|iData
operator|.
name|getRecords
argument_list|()
operator|.
name|indexOf
argument_list|(
name|iRecord
argument_list|)
operator|==
name|iData
operator|.
name|getRecords
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|&&
operator|!
name|record
operator|.
name|isEmpty
argument_list|()
condition|)
name|fillRow
argument_list|(
name|iData
operator|.
name|addRecord
argument_list|(
literal|null
argument_list|)
argument_list|,
name|iTable
operator|.
name|insertRow
argument_list|(
name|iTable
operator|.
name|getRowCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|list
case|:
specifier|final
name|ListBox
name|list
init|=
operator|new
name|ListBox
argument_list|()
decl_stmt|;
name|list
operator|.
name|setMultipleSelect
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|list
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TextBox"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|record
operator|.
name|getField
argument_list|(
name|index
argument_list|)
operator|==
literal|null
operator|||
name|record
operator|.
name|getField
argument_list|(
name|index
argument_list|)
operator|.
name|isEmpty
argument_list|()
operator|)
operator|)
operator|&&
operator|(
name|field
operator|.
name|getValues
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|field
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|list
operator|.
name|addItem
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ListItem
name|item
range|:
name|field
operator|.
name|getValues
argument_list|()
control|)
name|list
operator|.
name|addItem
argument_list|(
name|item
operator|.
name|getText
argument_list|()
argument_list|,
name|item
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|getItemCount
argument_list|()
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|list
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|record
operator|.
name|getField
argument_list|(
name|index
argument_list|)
argument_list|)
condition|)
name|list
operator|.
name|setSelectedIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|list
operator|.
name|setVisible
argument_list|(
name|record
operator|.
name|isVisible
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|record
operator|.
name|setField
argument_list|(
name|index
argument_list|,
operator|(
name|list
operator|.
name|getSelectedIndex
argument_list|()
operator|<
literal|0
operator|||
name|list
operator|.
name|getValue
argument_list|(
name|list
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|list
operator|.
name|getValue
argument_list|(
name|list
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|setError
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
operator|new
name|UniTimeWidget
argument_list|<
name|ListBox
argument_list|>
argument_list|(
name|list
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iEditable
operator|&&
name|record
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|list
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|iData
operator|.
name|getRecords
argument_list|()
operator|.
name|indexOf
argument_list|(
name|iRecord
argument_list|)
operator|==
name|iData
operator|.
name|getRecords
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|&&
operator|!
name|record
operator|.
name|isEmpty
argument_list|()
condition|)
name|fillRow
argument_list|(
name|iData
operator|.
name|addRecord
argument_list|(
literal|null
argument_list|)
argument_list|,
name|iTable
operator|.
name|insertRow
argument_list|(
name|iTable
operator|.
name|getRowCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|toggle
case|:
specifier|final
name|CheckBox
name|check
init|=
operator|new
name|CheckBox
argument_list|()
decl_stmt|;
name|check
operator|.
name|setValue
argument_list|(
name|record
operator|.
name|getField
argument_list|(
name|index
argument_list|)
operator|==
literal|null
condition|?
literal|null
else|:
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|record
operator|.
name|getField
argument_list|(
name|index
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|record
operator|.
name|getField
argument_list|(
name|index
argument_list|)
operator|==
literal|null
operator|&&
name|field
operator|.
name|isCheckedByDefault
argument_list|()
condition|)
name|check
operator|.
name|setValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|check
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|record
operator|.
name|setField
argument_list|(
name|index
argument_list|,
name|check
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|check
operator|.
name|getValue
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
name|setError
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|check
operator|.
name|setVisible
argument_list|(
name|record
operator|.
name|isVisible
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
operator|new
name|UniTimeWidget
argument_list|<
name|CheckBox
argument_list|>
argument_list|(
name|check
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iEditable
operator|&&
name|record
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|check
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|iData
operator|.
name|getRecords
argument_list|()
operator|.
name|indexOf
argument_list|(
name|iRecord
argument_list|)
operator|==
name|iData
operator|.
name|getRecords
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|&&
operator|!
name|record
operator|.
name|isEmpty
argument_list|()
condition|)
name|fillRow
argument_list|(
name|iData
operator|.
name|addRecord
argument_list|(
literal|null
argument_list|)
argument_list|,
name|iTable
operator|.
name|insertRow
argument_list|(
name|iTable
operator|.
name|getRowCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
else|else
block|{
switch|switch
condition|(
name|field
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|toggle
case|:
if|if
condition|(
name|record
operator|.
name|getField
argument_list|(
name|index
argument_list|)
operator|!=
literal|null
operator|&&
operator|!
literal|"true"
operator|.
name|equals
argument_list|(
name|record
operator|.
name|getField
argument_list|(
name|index
argument_list|)
argument_list|)
operator|&&
operator|!
literal|"false"
operator|.
name|equals
argument_list|(
name|record
operator|.
name|getField
argument_list|(
name|index
argument_list|)
argument_list|)
condition|)
block|{
name|initWidget
argument_list|(
operator|new
name|HTML
argument_list|(
name|record
operator|.
name|getField
argument_list|(
name|index
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
name|Image
name|image
init|=
operator|new
name|Image
argument_list|(
operator|(
name|record
operator|.
name|getField
argument_list|(
name|index
argument_list|)
operator|==
literal|null
operator|&&
name|field
operator|.
name|isCheckedByDefault
argument_list|()
operator|)
operator|||
operator|(
name|record
operator|.
name|getField
argument_list|(
name|index
argument_list|)
operator|!=
literal|null
operator|&&
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|record
operator|.
name|getField
argument_list|(
name|index
argument_list|)
argument_list|)
operator|)
condition|?
name|RESOURCES
operator|.
name|on
argument_list|()
else|:
name|RESOURCES
operator|.
name|off
argument_list|()
argument_list|)
decl_stmt|;
name|image
operator|.
name|setVisible
argument_list|(
name|record
operator|.
name|isVisible
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|image
argument_list|)
expr_stmt|;
break|break;
case|case
name|textarea
case|:
name|HTML
name|html
init|=
operator|new
name|HTML
argument_list|(
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|html
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setWhiteSpace
argument_list|(
name|WhiteSpace
operator|.
name|PRE
argument_list|)
expr_stmt|;
name|html
operator|.
name|setVisible
argument_list|(
name|record
operator|.
name|isVisible
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|html
argument_list|)
expr_stmt|;
break|break;
case|case
name|add
case|:
name|initWidget
argument_list|(
operator|new
name|UniTimeWidget
argument_list|<
name|Label
argument_list|>
argument_list|(
operator|new
name|Label
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|delete
case|:
name|initWidget
argument_list|(
operator|new
name|UniTimeWidget
argument_list|<
name|Label
argument_list|>
argument_list|(
operator|new
name|Label
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|Label
name|label
init|=
operator|new
name|Label
argument_list|(
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|initWidget
argument_list|(
name|label
argument_list|)
expr_stmt|;
name|label
operator|.
name|setVisible
argument_list|(
name|record
operator|.
name|isVisible
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|getType
argument_list|()
operator|==
name|FieldType
operator|.
name|number
condition|)
name|label
operator|.
name|setHorizontalAlignment
argument_list|(
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|setError
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setError
parameter_list|(
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
name|getWidget
argument_list|()
operator|instanceof
name|UniTimeWidget
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|UniTimeWidget
argument_list|<
name|?
argument_list|>
name|w
init|=
operator|(
name|UniTimeWidget
argument_list|<
name|?
argument_list|>
operator|)
name|getWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|message
operator|==
literal|null
operator|||
name|message
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|w
operator|.
name|clearHint
argument_list|()
expr_stmt|;
block|}
else|else
name|w
operator|.
name|setErrorHint
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getValue
parameter_list|()
block|{
name|String
name|value
init|=
name|iRecord
operator|.
name|getField
argument_list|(
name|iIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
return|return
literal|""
return|;
if|if
condition|(
name|iField
operator|.
name|getType
argument_list|()
operator|==
name|FieldType
operator|.
name|list
condition|)
block|{
for|for
control|(
name|ListItem
name|item
range|:
name|iField
operator|.
name|getValues
argument_list|()
control|)
block|{
if|if
condition|(
name|item
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
return|return
name|item
operator|.
name|getText
argument_list|()
return|;
block|}
block|}
return|return
name|value
return|;
block|}
specifier|public
name|Record
name|getRecord
parameter_list|()
block|{
return|return
name|iRecord
return|;
block|}
specifier|public
name|boolean
name|focus
parameter_list|()
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|UniTimeWidget
argument_list|<
name|?
argument_list|>
condition|)
name|w
operator|=
operator|(
operator|(
name|UniTimeWidget
argument_list|<
name|?
argument_list|>
operator|)
name|w
operator|)
operator|.
name|getWidget
argument_list|()
expr_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|Focusable
condition|)
block|{
operator|(
operator|(
name|Focusable
operator|)
name|w
operator|)
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|TextBox
condition|)
operator|(
operator|(
name|TextBox
operator|)
name|w
operator|)
operator|.
name|selectAll
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|Widget
name|getInnerWidget
parameter_list|()
block|{
return|return
name|getWidget
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|HorizontalAlignmentConstant
name|getCellAlignment
parameter_list|()
block|{
switch|switch
condition|(
name|iField
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|toggle
case|:
return|return
name|HasHorizontalAlignment
operator|.
name|ALIGN_CENTER
return|;
default|default:
return|return
name|HasHorizontalAlignment
operator|.
name|ALIGN_LEFT
return|;
block|}
block|}
block|}
specifier|public
name|String
name|validate
parameter_list|()
block|{
name|String
name|valid
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|MyCell
argument_list|>
argument_list|>
name|uniqueMap
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|MyCell
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|AssignClassInstructorsInterface
operator|.
name|Record
name|record
init|=
name|iTable
operator|.
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|record
operator|==
literal|null
operator|||
name|record
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|iData
operator|.
name|getFields
argument_list|()
operator|.
name|length
condition|;
name|col
operator|++
control|)
block|{
name|Field
name|field
init|=
name|iData
operator|.
name|getFields
argument_list|()
index|[
name|col
index|]
decl_stmt|;
name|String
name|value
init|=
name|record
operator|.
name|getField
argument_list|(
name|col
argument_list|)
decl_stmt|;
name|MyCell
name|widget
init|=
operator|(
name|MyCell
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
decl_stmt|;
name|widget
operator|.
name|setError
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|field
operator|.
name|isEditable
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|field
operator|.
name|isUnique
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|MyCell
argument_list|>
name|values
init|=
name|uniqueMap
operator|.
name|get
argument_list|(
name|col
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
name|values
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|MyCell
argument_list|>
argument_list|()
expr_stmt|;
name|uniqueMap
operator|.
name|put
argument_list|(
name|col
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|widget
operator|.
name|setError
argument_list|(
name|MESSAGES
operator|.
name|errorMustBeSet
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|valid
operator|==
literal|null
condition|)
block|{
name|valid
operator|=
name|MESSAGES
operator|.
name|errorMustBeSet
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|MyCell
name|old
init|=
name|values
operator|.
name|put
argument_list|(
name|value
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
block|{
name|widget
operator|.
name|setError
argument_list|(
name|MESSAGES
operator|.
name|errorMustBeUnique
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|old
operator|.
name|setError
argument_list|(
name|MESSAGES
operator|.
name|errorMustBeUnique
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|valid
operator|==
literal|null
condition|)
block|{
name|valid
operator|=
name|MESSAGES
operator|.
name|errorMustBeUnique
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|field
operator|.
name|isUniqueIfSet
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|MyCell
argument_list|>
name|values
init|=
name|uniqueMap
operator|.
name|get
argument_list|(
name|col
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
name|values
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|MyCell
argument_list|>
argument_list|()
expr_stmt|;
name|uniqueMap
operator|.
name|put
argument_list|(
name|col
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|MyCell
name|old
init|=
name|values
operator|.
name|put
argument_list|(
name|value
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
block|{
name|widget
operator|.
name|setError
argument_list|(
name|MESSAGES
operator|.
name|errorMustBeUnique
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|old
operator|.
name|setError
argument_list|(
name|MESSAGES
operator|.
name|errorMustBeUnique
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|valid
operator|==
literal|null
condition|)
block|{
name|valid
operator|=
name|MESSAGES
operator|.
name|errorMustBeUnique
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|field
operator|.
name|isNotEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|widget
operator|.
name|setError
argument_list|(
name|MESSAGES
operator|.
name|errorMustBeSet
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|valid
operator|==
literal|null
condition|)
block|{
name|valid
operator|=
name|MESSAGES
operator|.
name|errorMustBeSet
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
switch|switch
condition|(
name|field
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|textarea
case|:
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|length
argument_list|()
operator|>
name|field
operator|.
name|getLength
argument_list|()
condition|)
block|{
name|widget
operator|.
name|setError
argument_list|(
name|MESSAGES
operator|.
name|errorTooLong
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|valid
operator|==
literal|null
condition|)
block|{
name|valid
operator|=
name|MESSAGES
operator|.
name|errorTooLong
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
default|default:
break|break;
block|}
block|}
block|}
return|return
name|valid
return|;
block|}
specifier|public
specifier|static
class|class
name|SimpleFormWithMouseOver
extends|extends
name|SimpleForm
block|{
specifier|public
name|SimpleFormWithMouseOver
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEOVER
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEOUT
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onBrowserEvent
parameter_list|(
specifier|final
name|Event
name|event
parameter_list|)
block|{
name|Element
name|td
init|=
name|getEventTargetCell
argument_list|(
name|event
argument_list|)
decl_stmt|;
if|if
condition|(
name|td
operator|==
literal|null
condition|)
return|return;
specifier|final
name|Element
name|tr
init|=
name|DOM
operator|.
name|getParent
argument_list|(
name|td
argument_list|)
decl_stmt|;
name|int
name|col
init|=
name|DOM
operator|.
name|getChildIndex
argument_list|(
name|tr
argument_list|,
name|td
argument_list|)
decl_stmt|;
name|Element
name|body
init|=
name|DOM
operator|.
name|getParent
argument_list|(
name|tr
argument_list|)
decl_stmt|;
name|int
name|row
init|=
name|DOM
operator|.
name|getChildIndex
argument_list|(
name|body
argument_list|,
name|tr
argument_list|)
decl_stmt|;
name|Widget
name|widget
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
decl_stmt|;
if|if
condition|(
name|widget
operator|!=
literal|null
operator|&&
name|widget
operator|instanceof
name|UniTimeHeaderPanel
condition|)
block|{
name|super
operator|.
name|onBrowserEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|DOM
operator|.
name|eventGetType
argument_list|(
name|event
argument_list|)
condition|)
block|{
case|case
name|Event
operator|.
name|ONMOUSEOVER
case|:
name|getRowFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
literal|"hover"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Event
operator|.
name|ONMOUSEOUT
case|:
name|getRowFormatter
argument_list|()
operator|.
name|removeStyleName
argument_list|(
name|row
argument_list|,
literal|"hover"
argument_list|)
expr_stmt|;
break|break;
block|}
name|super
operator|.
name|onBrowserEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

