begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|admin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|admin
operator|.
name|ScriptPage
operator|.
name|DateTimeBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|events
operator|.
name|SessionDatesSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|events
operator|.
name|SingleDateSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|NumberBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|SimpleForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|TimeSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeDialogBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeFileUpload
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeHeaderPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ScriptInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TaskInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ScriptInterface
operator|.
name|ScriptParameterInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TaskInterface
operator|.
name|ExecutionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TaskInterface
operator|.
name|TaskExecutionInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TaskInterface
operator|.
name|TaskOptionsInterface
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|DateTimeFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|CheckBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ListBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ScrollPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|TextArea
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|TextBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|VerticalPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|TaskEditor
extends|extends
name|UniTimeDialogBox
block|{
specifier|private
specifier|static
specifier|final
name|GwtConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|TaskOptionsInterface
name|iOptions
decl_stmt|;
specifier|private
name|SimpleForm
name|iDialogForm
decl_stmt|;
specifier|private
name|TaskInterface
name|iTask
decl_stmt|;
specifier|private
name|TextBox
name|iName
decl_stmt|;
specifier|private
name|SessionDatesSelector
name|iDates
decl_stmt|;
specifier|private
name|TimeSelector
name|iTime
decl_stmt|;
specifier|private
name|ListBox
name|iScript
decl_stmt|;
specifier|private
name|UniTimeHeaderPanel
name|iBottom
decl_stmt|;
specifier|private
name|int
name|iDescriptionRow
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|HTML
name|iDescription
decl_stmt|;
specifier|private
name|CheckBox
name|iSendEmail
decl_stmt|;
specifier|private
name|TextArea
name|iEmailAddresses
decl_stmt|;
specifier|private
name|VerticalPanel
name|iEmailPanel
decl_stmt|;
specifier|private
name|SimpleForm
name|iForm
decl_stmt|;
specifier|private
name|ScrollPanel
name|iScroll
decl_stmt|;
specifier|public
name|TaskEditor
parameter_list|(
name|TaskInterface
name|task
parameter_list|,
name|TaskOptionsInterface
name|options
parameter_list|)
block|{
name|super
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iOptions
operator|=
name|options
expr_stmt|;
name|addStyleName
argument_list|(
literal|"unitime-PeriodicTaskEditor"
argument_list|)
expr_stmt|;
name|iTask
operator|=
name|task
expr_stmt|;
if|if
condition|(
name|task
operator|==
literal|null
condition|)
name|iTask
operator|=
operator|new
name|TaskInterface
argument_list|()
expr_stmt|;
name|setText
argument_list|(
name|iTask
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|?
name|MESSAGES
operator|.
name|dialogAddTask
argument_list|()
else|:
name|MESSAGES
operator|.
name|dialogEditTask
argument_list|(
name|iTask
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iDialogForm
operator|=
operator|new
name|SimpleForm
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|iForm
operator|=
operator|new
name|SimpleForm
argument_list|()
expr_stmt|;
name|iForm
operator|.
name|removeStyleName
argument_list|(
literal|"unitime-NotPrintableBottomLine"
argument_list|)
expr_stmt|;
name|iScroll
operator|=
operator|new
name|ScrollPanel
argument_list|(
name|iForm
argument_list|)
expr_stmt|;
name|iScroll
operator|.
name|setStyleName
argument_list|(
literal|"unitime-VerticalScrollPanel"
argument_list|)
expr_stmt|;
name|iDialogForm
operator|.
name|addRow
argument_list|(
name|iScroll
argument_list|)
expr_stmt|;
name|iName
operator|=
operator|new
name|TextBox
argument_list|()
expr_stmt|;
if|if
condition|(
name|iTask
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
name|iName
operator|.
name|setText
argument_list|(
name|iTask
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|iName
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TextBox"
argument_list|)
expr_stmt|;
name|iName
operator|.
name|setWidth
argument_list|(
literal|"400px"
argument_list|)
expr_stmt|;
name|iName
operator|.
name|setMaxLength
argument_list|(
literal|128
argument_list|)
expr_stmt|;
name|iName
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|String
argument_list|>
name|event
parameter_list|)
block|{
name|iBottom
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propName
argument_list|()
argument_list|,
name|iName
argument_list|)
expr_stmt|;
if|if
condition|(
name|iTask
operator|.
name|getOwner
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propTaskOwner
argument_list|()
argument_list|,
operator|new
name|Label
argument_list|(
name|iTask
operator|.
name|getOwner
argument_list|()
operator|.
name|getFormattedName
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iDates
operator|=
operator|new
name|SessionDatesSelector
argument_list|(
name|iOptions
operator|.
name|getSessionMonths
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iTask
operator|.
name|hasExecutions
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Date
argument_list|>
name|dates
init|=
operator|new
name|ArrayList
argument_list|<
name|Date
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TaskExecutionInterface
name|e
range|:
name|iTask
operator|.
name|getExecutions
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getStatus
argument_list|()
operator|==
name|ExecutionStatus
operator|.
name|CREATED
condition|)
name|dates
operator|.
name|add
argument_list|(
name|e
operator|.
name|getExecutionDate
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iDates
operator|.
name|setValue
argument_list|(
name|dates
argument_list|)
expr_stmt|;
block|}
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propTaskExecutionDates
argument_list|()
argument_list|,
name|iDates
argument_list|)
expr_stmt|;
name|iDates
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|List
argument_list|<
name|Date
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|List
argument_list|<
name|Date
argument_list|>
argument_list|>
name|event
parameter_list|)
block|{
name|iBottom
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iTime
operator|=
operator|new
name|TimeSelector
argument_list|()
expr_stmt|;
if|if
condition|(
name|iTask
operator|.
name|hasExecutions
argument_list|()
condition|)
name|iTime
operator|.
name|setValue
argument_list|(
name|iTask
operator|.
name|getExecutions
argument_list|()
operator|.
name|last
argument_list|()
operator|.
name|getSlot
argument_list|()
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propTaskStartTime
argument_list|()
argument_list|,
name|iTime
argument_list|)
expr_stmt|;
name|iTime
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Integer
argument_list|>
name|event
parameter_list|)
block|{
name|iBottom
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|iTask
operator|.
name|getScript
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propScript
argument_list|()
argument_list|,
operator|new
name|Label
argument_list|(
name|iTask
operator|.
name|getScript
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iScript
operator|=
operator|new
name|ListBox
argument_list|()
expr_stmt|;
name|iScript
operator|.
name|addItem
argument_list|(
name|MESSAGES
operator|.
name|itemSelect
argument_list|()
argument_list|,
literal|"-1"
argument_list|)
expr_stmt|;
name|iScript
operator|.
name|setSelectedIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|ScriptInterface
name|script
range|:
name|iOptions
operator|.
name|getScripts
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|script
operator|.
name|canExecute
argument_list|()
operator|&&
operator|!
name|script
operator|.
name|canEdit
argument_list|()
operator|&&
operator|!
name|script
operator|.
name|canDelete
argument_list|()
condition|)
continue|continue;
name|iScript
operator|.
name|addItem
argument_list|(
name|script
operator|.
name|getName
argument_list|()
argument_list|,
name|script
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propScript
argument_list|()
argument_list|,
name|iScript
argument_list|)
expr_stmt|;
name|iScript
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|scriptChanged
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iBottom
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|iDescription
operator|=
operator|new
name|HTML
argument_list|()
expr_stmt|;
name|iDescriptionRow
operator|=
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propDescription
argument_list|()
argument_list|,
name|iDescription
argument_list|)
expr_stmt|;
if|if
condition|(
name|iTask
operator|.
name|getScript
argument_list|()
operator|!=
literal|null
condition|)
name|iDescription
operator|.
name|setHTML
argument_list|(
name|iTask
operator|.
name|getScript
argument_list|()
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|iSendEmail
operator|=
operator|new
name|CheckBox
argument_list|(
name|MESSAGES
operator|.
name|scriptSendEmailCheckbox
argument_list|()
argument_list|)
expr_stmt|;
name|iSendEmail
operator|.
name|setValue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iEmailAddresses
operator|=
operator|new
name|TextArea
argument_list|()
expr_stmt|;
name|iEmailAddresses
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TextArea"
argument_list|)
expr_stmt|;
name|iEmailAddresses
operator|.
name|setVisibleLines
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|iEmailAddresses
operator|.
name|setCharacterWidth
argument_list|(
literal|80
argument_list|)
expr_stmt|;
name|iEmailPanel
operator|=
operator|new
name|VerticalPanel
argument_list|()
expr_stmt|;
name|iEmailPanel
operator|.
name|add
argument_list|(
name|iSendEmail
argument_list|)
expr_stmt|;
name|iEmailPanel
operator|.
name|setCellHorizontalAlignment
argument_list|(
name|iSendEmail
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|iEmailPanel
operator|.
name|add
argument_list|(
name|iEmailAddresses
argument_list|)
expr_stmt|;
name|iEmailAddresses
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iSendEmail
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|event
parameter_list|)
block|{
name|iEmailAddresses
operator|.
name|setVisible
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|iTask
operator|.
name|getEmail
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|iSendEmail
operator|.
name|setValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iEmailAddresses
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iEmailAddresses
operator|.
name|setText
argument_list|(
name|iTask
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iTask
operator|.
name|getId
argument_list|()
operator|==
literal|null
operator|&&
name|iOptions
operator|!=
literal|null
operator|&&
name|iOptions
operator|.
name|getManager
argument_list|()
operator|!=
literal|null
operator|&&
name|iOptions
operator|.
name|getManager
argument_list|()
operator|.
name|getEmail
argument_list|()
operator|!=
literal|null
condition|)
name|iEmailAddresses
operator|.
name|setText
argument_list|(
name|iOptions
operator|.
name|getManager
argument_list|()
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propEmail
argument_list|()
argument_list|,
name|iEmailPanel
argument_list|)
expr_stmt|;
name|iBottom
operator|=
operator|new
name|UniTimeHeaderPanel
argument_list|()
expr_stmt|;
name|iBottom
operator|.
name|addButton
argument_list|(
literal|"save"
argument_list|,
name|iTask
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|?
name|MESSAGES
operator|.
name|opTaskSave
argument_list|()
else|:
name|MESSAGES
operator|.
name|opTaskUpdate
argument_list|()
argument_list|,
literal|75
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|validate
argument_list|()
condition|)
return|return;
name|hide
argument_list|()
expr_stmt|;
name|doSave
argument_list|(
name|iTask
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iBottom
operator|.
name|addButton
argument_list|(
literal|"back"
argument_list|,
name|MESSAGES
operator|.
name|opTaskBack
argument_list|()
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iDialogForm
operator|.
name|addBottomRow
argument_list|(
name|iBottom
argument_list|)
expr_stmt|;
name|setWidget
argument_list|(
name|iDialogForm
argument_list|)
expr_stmt|;
if|if
condition|(
name|iTask
operator|.
name|getScript
argument_list|()
operator|!=
literal|null
condition|)
name|scriptChanged
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|setMaxHeight
argument_list|(
name|iScroll
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
argument_list|,
operator|(
name|Window
operator|.
name|getClientHeight
argument_list|()
operator|-
literal|100
operator|)
operator|+
literal|"px"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|doSave
parameter_list|(
name|TaskInterface
name|task
parameter_list|)
block|{
block|}
specifier|protected
name|void
name|setErrorMessage
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|iBottom
operator|.
name|setErrorMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|validate
parameter_list|()
block|{
name|ScriptInterface
name|script
init|=
name|getScript
argument_list|()
decl_stmt|;
if|if
condition|(
name|iName
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iBottom
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|errorNameIsRequired
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|iTask
operator|.
name|setName
argument_list|(
name|iName
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|script
operator|==
literal|null
condition|)
block|{
name|iBottom
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|errorItemNotSelected
argument_list|(
name|MESSAGES
operator|.
name|colTaskScript
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|iTask
operator|.
name|setScript
argument_list|(
name|script
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Integer
argument_list|>
name|dates
init|=
name|iDates
operator|.
name|getSelectedDays
argument_list|()
decl_stmt|;
if|if
condition|(
name|dates
operator|==
literal|null
operator|||
name|dates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iBottom
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|errorNoDateSelected
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|Integer
name|slot
init|=
name|iTime
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|slot
operator|==
literal|null
condition|)
block|{
name|iBottom
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|errorNoStartTime
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|iTask
operator|.
name|clearExecutions
argument_list|()
expr_stmt|;
for|for
control|(
name|Integer
name|date
range|:
name|dates
control|)
block|{
name|TaskExecutionInterface
name|e
init|=
operator|new
name|TaskExecutionInterface
argument_list|()
decl_stmt|;
name|e
operator|.
name|setDayOfYear
argument_list|(
name|date
argument_list|)
expr_stmt|;
name|e
operator|.
name|setSlot
argument_list|(
name|slot
argument_list|)
expr_stmt|;
name|iTask
operator|.
name|addExecution
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|iTask
operator|.
name|setEmail
argument_list|(
name|iSendEmail
operator|.
name|getValue
argument_list|()
operator|&&
operator|!
name|iEmailAddresses
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|iEmailAddresses
operator|.
name|getText
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
name|iBottom
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
name|ScriptInterface
name|getScript
parameter_list|()
block|{
if|if
condition|(
name|iOptions
operator|!=
literal|null
operator|&&
name|iScript
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ScriptInterface
name|s
range|:
name|iOptions
operator|.
name|getScripts
argument_list|()
control|)
if|if
condition|(
name|s
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|iScript
operator|.
name|getValue
argument_list|(
name|iScript
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|s
return|;
block|}
block|}
return|return
name|iTask
operator|.
name|getScript
argument_list|()
return|;
block|}
specifier|private
name|void
name|scriptChanged
parameter_list|(
name|boolean
name|clear
parameter_list|)
block|{
name|ScriptInterface
name|script
init|=
name|getScript
argument_list|()
decl_stmt|;
if|if
condition|(
name|script
operator|==
literal|null
condition|)
block|{
name|iForm
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iDescriptionRow
argument_list|,
literal|false
argument_list|)
expr_stmt|;
while|while
condition|(
name|iForm
operator|.
name|getRowCount
argument_list|()
operator|>
name|iDescriptionRow
operator|+
literal|2
condition|)
name|iForm
operator|.
name|removeRow
argument_list|(
literal|1
operator|+
name|iDescriptionRow
argument_list|)
expr_stmt|;
name|iBottom
operator|.
name|setEnabled
argument_list|(
literal|"save"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iTask
operator|.
name|clearParameters
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|iDescription
operator|.
name|setHTML
argument_list|(
name|script
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iDescriptionRow
argument_list|,
name|script
operator|.
name|getDescription
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|script
operator|.
name|getDescription
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|iBottom
operator|.
name|setEnabled
argument_list|(
literal|"save"
argument_list|,
name|script
operator|.
name|canExecute
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|clear
condition|)
name|iTask
operator|.
name|clearParameters
argument_list|()
expr_stmt|;
while|while
condition|(
name|iForm
operator|.
name|getRowCount
argument_list|()
operator|>
name|iDescriptionRow
operator|+
literal|2
condition|)
name|iForm
operator|.
name|removeRow
argument_list|(
literal|1
operator|+
name|iDescriptionRow
argument_list|)
expr_stmt|;
if|if
condition|(
name|script
operator|.
name|hasParameters
argument_list|()
condition|)
block|{
for|for
control|(
specifier|final
name|ScriptParameterInterface
name|param
range|:
name|script
operator|.
name|getParameters
argument_list|()
control|)
block|{
if|if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
name|iTask
operator|.
name|setParameter
argument_list|(
name|param
operator|.
name|getName
argument_list|()
argument_list|,
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|defaultValue
init|=
name|iTask
operator|.
name|getParameter
argument_list|(
name|param
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultValue
operator|==
literal|null
condition|)
name|defaultValue
operator|=
name|param
operator|.
name|getValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|defaultValue
operator|==
literal|null
condition|)
name|defaultValue
operator|=
name|param
operator|.
name|getDefaultValue
argument_list|()
expr_stmt|;
name|Widget
name|widget
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|param
operator|.
name|hasOptions
argument_list|()
condition|)
block|{
specifier|final
name|ListBox
name|list
init|=
operator|new
name|ListBox
argument_list|()
decl_stmt|;
name|list
operator|.
name|setMultipleSelect
argument_list|(
name|param
operator|.
name|isMultiSelect
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|param
operator|.
name|isMultiSelect
argument_list|()
condition|)
name|list
operator|.
name|addItem
argument_list|(
name|MESSAGES
operator|.
name|itemSelect
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ScriptInterface
operator|.
name|ListItem
name|item
range|:
name|param
operator|.
name|getOptions
argument_list|()
control|)
block|{
name|list
operator|.
name|addItem
argument_list|(
name|item
operator|.
name|getText
argument_list|()
argument_list|,
name|item
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|defaultValue
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|param
operator|.
name|isMultiSelect
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|id
range|:
name|defaultValue
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
if|if
condition|(
operator|!
name|id
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|id
operator|.
name|equalsIgnoreCase
argument_list|(
name|item
operator|.
name|getValue
argument_list|()
argument_list|)
operator|||
name|id
operator|.
name|equalsIgnoreCase
argument_list|(
name|item
operator|.
name|getText
argument_list|()
argument_list|)
operator|||
name|item
operator|.
name|getText
argument_list|()
operator|.
name|startsWith
argument_list|(
name|id
operator|+
literal|" - "
argument_list|)
operator|)
condition|)
block|{
name|list
operator|.
name|setItemSelected
argument_list|(
name|list
operator|.
name|getItemCount
argument_list|()
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|else if
condition|(
name|defaultValue
operator|.
name|equalsIgnoreCase
argument_list|(
name|item
operator|.
name|getValue
argument_list|()
argument_list|)
operator|||
name|defaultValue
operator|.
name|equalsIgnoreCase
argument_list|(
name|item
operator|.
name|getText
argument_list|()
argument_list|)
operator|||
name|item
operator|.
name|getText
argument_list|()
operator|.
name|startsWith
argument_list|(
name|defaultValue
operator|+
literal|" - "
argument_list|)
condition|)
name|list
operator|.
name|setSelectedIndex
argument_list|(
name|list
operator|.
name|getItemCount
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|list
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|param
operator|.
name|isMultiSelect
argument_list|()
condition|)
block|{
name|String
name|value
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|getItemCount
argument_list|()
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|list
operator|.
name|isItemSelected
argument_list|(
name|i
argument_list|)
condition|)
name|value
operator|+=
operator|(
name|value
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
name|list
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|iTask
operator|.
name|setParameter
argument_list|(
name|param
operator|.
name|getName
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iTask
operator|.
name|setParameter
argument_list|(
name|param
operator|.
name|getName
argument_list|()
argument_list|,
name|list
operator|.
name|getValue
argument_list|(
name|list
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|widget
operator|=
name|list
expr_stmt|;
block|}
if|else if
condition|(
literal|"boolean"
operator|.
name|equalsIgnoreCase
argument_list|(
name|param
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|CheckBox
name|ch
init|=
operator|new
name|CheckBox
argument_list|()
decl_stmt|;
name|ch
operator|.
name|setValue
argument_list|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|defaultValue
argument_list|)
argument_list|)
expr_stmt|;
name|ch
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|event
parameter_list|)
block|{
name|iTask
operator|.
name|setParameter
argument_list|(
name|param
operator|.
name|getName
argument_list|()
argument_list|,
name|event
operator|.
name|getValue
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|widget
operator|=
name|ch
expr_stmt|;
block|}
if|else if
condition|(
literal|"file"
operator|.
name|equalsIgnoreCase
argument_list|(
name|param
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|UniTimeFileUpload
name|upload
init|=
operator|new
name|UniTimeFileUpload
argument_list|()
decl_stmt|;
name|upload
operator|.
name|reset
argument_list|()
expr_stmt|;
name|widget
operator|=
name|upload
expr_stmt|;
block|}
if|else if
condition|(
literal|"textarea"
operator|.
name|equalsIgnoreCase
argument_list|(
name|param
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|TextArea
name|textarea
init|=
operator|new
name|TextArea
argument_list|()
decl_stmt|;
name|textarea
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TextArea"
argument_list|)
expr_stmt|;
name|textarea
operator|.
name|setVisibleLines
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|textarea
operator|.
name|setCharacterWidth
argument_list|(
literal|80
argument_list|)
expr_stmt|;
if|if
condition|(
name|defaultValue
operator|!=
literal|null
condition|)
name|textarea
operator|.
name|setText
argument_list|(
name|defaultValue
argument_list|)
expr_stmt|;
name|textarea
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|String
argument_list|>
name|event
parameter_list|)
block|{
name|iTask
operator|.
name|setParameter
argument_list|(
name|param
operator|.
name|getName
argument_list|()
argument_list|,
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|widget
operator|=
name|textarea
expr_stmt|;
block|}
if|else if
condition|(
literal|"integer"
operator|.
name|equalsIgnoreCase
argument_list|(
name|param
operator|.
name|getType
argument_list|()
argument_list|)
operator|||
literal|"int"
operator|.
name|equalsIgnoreCase
argument_list|(
name|param
operator|.
name|getType
argument_list|()
argument_list|)
operator|||
literal|"long"
operator|.
name|equalsIgnoreCase
argument_list|(
name|param
operator|.
name|getType
argument_list|()
argument_list|)
operator|||
literal|"short"
operator|.
name|equalsIgnoreCase
argument_list|(
name|param
operator|.
name|getType
argument_list|()
argument_list|)
operator|||
literal|"byte"
operator|.
name|equalsIgnoreCase
argument_list|(
name|param
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|NumberBox
name|text
init|=
operator|new
name|NumberBox
argument_list|()
decl_stmt|;
name|text
operator|.
name|setDecimal
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|text
operator|.
name|setNegative
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|defaultValue
operator|!=
literal|null
condition|)
name|text
operator|.
name|setText
argument_list|(
name|defaultValue
argument_list|)
expr_stmt|;
name|text
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|String
argument_list|>
name|event
parameter_list|)
block|{
name|iTask
operator|.
name|setParameter
argument_list|(
name|param
operator|.
name|getName
argument_list|()
argument_list|,
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|widget
operator|=
name|text
expr_stmt|;
block|}
if|else if
condition|(
literal|"number"
operator|.
name|equalsIgnoreCase
argument_list|(
name|param
operator|.
name|getType
argument_list|()
argument_list|)
operator|||
literal|"float"
operator|.
name|equalsIgnoreCase
argument_list|(
name|param
operator|.
name|getType
argument_list|()
argument_list|)
operator|||
literal|"double"
operator|.
name|equalsIgnoreCase
argument_list|(
name|param
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|NumberBox
name|text
init|=
operator|new
name|NumberBox
argument_list|()
decl_stmt|;
name|text
operator|.
name|setDecimal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|text
operator|.
name|setNegative
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|defaultValue
operator|!=
literal|null
condition|)
name|text
operator|.
name|setText
argument_list|(
name|defaultValue
argument_list|)
expr_stmt|;
name|text
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|String
argument_list|>
name|event
parameter_list|)
block|{
name|iTask
operator|.
name|setParameter
argument_list|(
name|param
operator|.
name|getName
argument_list|()
argument_list|,
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|widget
operator|=
name|text
expr_stmt|;
block|}
if|else if
condition|(
literal|"date"
operator|.
name|equalsIgnoreCase
argument_list|(
name|param
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|SingleDateSelector
name|text
init|=
operator|new
name|SingleDateSelector
argument_list|()
decl_stmt|;
if|if
condition|(
name|defaultValue
operator|!=
literal|null
condition|)
name|text
operator|.
name|setText
argument_list|(
name|defaultValue
argument_list|)
expr_stmt|;
specifier|final
name|DateTimeFormat
name|format
init|=
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|eventDateFormat
argument_list|()
argument_list|)
decl_stmt|;
name|text
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Date
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Date
argument_list|>
name|event
parameter_list|)
block|{
name|iTask
operator|.
name|setParameter
argument_list|(
name|param
operator|.
name|getName
argument_list|()
argument_list|,
name|format
operator|.
name|format
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|widget
operator|=
name|text
expr_stmt|;
block|}
if|else if
condition|(
literal|"slot"
operator|.
name|equalsIgnoreCase
argument_list|(
name|param
operator|.
name|getType
argument_list|()
argument_list|)
operator|||
literal|"time"
operator|.
name|equalsIgnoreCase
argument_list|(
name|param
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|TimeSelector
name|text
init|=
operator|new
name|TimeSelector
argument_list|()
decl_stmt|;
if|if
condition|(
name|defaultValue
operator|!=
literal|null
condition|)
name|text
operator|.
name|setText
argument_list|(
name|defaultValue
argument_list|)
expr_stmt|;
name|text
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Integer
argument_list|>
name|event
parameter_list|)
block|{
name|iTask
operator|.
name|setParameter
argument_list|(
name|param
operator|.
name|getName
argument_list|()
argument_list|,
name|event
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|widget
operator|=
name|text
expr_stmt|;
block|}
if|else if
condition|(
literal|"datetime"
operator|.
name|equalsIgnoreCase
argument_list|(
name|param
operator|.
name|getType
argument_list|()
argument_list|)
operator|||
literal|"timestamp"
operator|.
name|equalsIgnoreCase
argument_list|(
name|param
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|DateTimeBox
name|text
init|=
operator|new
name|DateTimeBox
argument_list|()
decl_stmt|;
if|if
condition|(
name|defaultValue
operator|!=
literal|null
condition|)
name|text
operator|.
name|setText
argument_list|(
name|defaultValue
argument_list|)
expr_stmt|;
name|text
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|String
argument_list|>
name|event
parameter_list|)
block|{
name|iTask
operator|.
name|setParameter
argument_list|(
name|param
operator|.
name|getName
argument_list|()
argument_list|,
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|widget
operator|=
name|text
expr_stmt|;
block|}
else|else
block|{
name|TextBox
name|text
init|=
operator|new
name|TextBox
argument_list|()
decl_stmt|;
name|text
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TextBox"
argument_list|)
expr_stmt|;
name|text
operator|.
name|setWidth
argument_list|(
literal|"400px"
argument_list|)
expr_stmt|;
if|if
condition|(
name|defaultValue
operator|!=
literal|null
condition|)
name|text
operator|.
name|setText
argument_list|(
name|defaultValue
argument_list|)
expr_stmt|;
name|text
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|String
argument_list|>
name|event
parameter_list|)
block|{
name|iTask
operator|.
name|setParameter
argument_list|(
name|param
operator|.
name|getName
argument_list|()
argument_list|,
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|widget
operator|=
name|text
expr_stmt|;
block|}
name|int
name|row
init|=
name|iForm
operator|.
name|insertRow
argument_list|(
name|iForm
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|iForm
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
operator|new
name|Label
argument_list|(
operator|(
name|param
operator|.
name|getLabel
argument_list|()
operator|==
literal|null
operator|||
name|param
operator|.
name|getLabel
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|param
operator|.
name|getName
argument_list|()
else|:
name|param
operator|.
name|getLabel
argument_list|()
operator|)
operator|+
literal|":"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
literal|1
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|isShowing
argument_list|()
condition|)
name|center
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

