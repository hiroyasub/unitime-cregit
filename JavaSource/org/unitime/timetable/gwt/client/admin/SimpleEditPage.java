begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 - 3.5 (University Timetabling Application)  * Copyright (C) 2010 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|admin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|Lookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|Client
operator|.
name|GwtPageChangeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|events
operator|.
name|SingleDateSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|page
operator|.
name|UniTimeNotifications
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|page
operator|.
name|UniTimePageLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|NumberBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|SimpleForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeDialogBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeHeaderPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|HasCellAlignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|MouseClickListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|TableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|DataChangedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|DataChangedListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|HasFocus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcResponseNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AcademicSessionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|PersonInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
operator|.
name|FieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
operator|.
name|ListItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
operator|.
name|PageName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
operator|.
name|Record
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
operator|.
name|RecordComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|UserDataInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|UserDataInterface
operator|.
name|GetUserDataRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|UserDataInterface
operator|.
name|SetUserDataRpcRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Cursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|TextAlign
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Unit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|DateTimeFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DOM
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|CheckBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Focusable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
operator|.
name|HorizontalAlignmentConstant
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Button
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasVerticalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HorizontalPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ListBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|SimplePanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|TextArea
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|TextBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|VerticalPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|SimpleEditPage
extends|extends
name|Composite
block|{
specifier|public
specifier|static
specifier|final
name|GwtResources
name|RESOURCES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtResources
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|GwtConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|GwtRpcServiceAsync
name|RPC
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtRpcService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|SimpleForm
name|iPanel
decl_stmt|;
specifier|private
name|UniTimeHeaderPanel
name|iHeader
decl_stmt|,
name|iBottom
decl_stmt|;
specifier|private
name|String
name|iType
decl_stmt|;
specifier|private
name|PageName
name|iPageName
init|=
literal|null
decl_stmt|;
specifier|private
name|UniTimeTable
argument_list|<
name|Record
argument_list|>
name|iTable
decl_stmt|;
specifier|private
name|SimpleEditInterface
name|iData
decl_stmt|;
specifier|private
name|SimplePanel
name|iSimple
decl_stmt|;
specifier|private
name|boolean
name|iEditable
init|=
literal|false
decl_stmt|;
specifier|private
name|TextArea
name|iStudentsText
init|=
literal|null
decl_stmt|;
specifier|private
name|Lookup
name|iLookup
decl_stmt|;
specifier|private
name|boolean
index|[]
name|iVisible
init|=
literal|null
decl_stmt|;
specifier|private
name|AcademicSessionProvider
name|iAcademicSessionProvider
init|=
operator|new
name|AcademicSessionProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|selectSession
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
name|callback
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAcademicSessionName
parameter_list|()
block|{
return|return
name|iData
operator|.
name|getSessionName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Long
name|getAcademicSessionId
parameter_list|()
block|{
return|return
name|iData
operator|.
name|getSessionId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addAcademicSessionChangeHandler
parameter_list|(
name|AcademicSessionChangeHandler
name|handler
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|AcademicSessionInfo
name|getAcademicSessionInfo
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
specifier|public
name|SimpleEditPage
parameter_list|()
block|{
name|iType
operator|=
name|Window
operator|.
name|Location
operator|.
name|getParameter
argument_list|(
literal|"type"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iType
operator|==
literal|null
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|MESSAGES
operator|.
name|errorNoEditType
argument_list|()
argument_list|)
throw|;
name|ClickHandler
name|save
init|=
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|String
name|valid
init|=
name|validate
argument_list|()
decl_stmt|;
if|if
condition|(
name|valid
operator|!=
literal|null
condition|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|valid
argument_list|)
expr_stmt|;
return|return;
block|}
name|iData
operator|.
name|getRecords
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iData
operator|.
name|getRecords
argument_list|()
operator|.
name|addAll
argument_list|(
name|iTable
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setMessage
argument_list|(
name|MESSAGES
operator|.
name|waitSavingData
argument_list|()
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
name|SimpleEditInterface
operator|.
name|SaveDataRpcRequest
operator|.
name|saveData
argument_list|(
name|iType
argument_list|,
name|iData
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|SimpleEditInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedSave
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|SimpleEditInterface
name|result
parameter_list|)
block|{
name|iData
operator|=
name|result
expr_stmt|;
name|iEditable
operator|=
literal|false
expr_stmt|;
name|refreshTable
argument_list|()
expr_stmt|;
name|saveOrder
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|ClickHandler
name|edit
init|=
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|iEditable
operator|=
literal|true
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"edit"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|refreshTable
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|ClickHandler
name|back
init|=
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|iEditable
operator|=
literal|false
expr_stmt|;
name|load
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|ClickHandler
name|add
init|=
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|detail
argument_list|(
name|iData
operator|.
name|addRecord
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|iPanel
operator|=
operator|new
name|SimpleForm
argument_list|()
expr_stmt|;
name|iHeader
operator|=
operator|new
name|UniTimeHeaderPanel
argument_list|()
expr_stmt|;
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"add"
argument_list|,
name|MESSAGES
operator|.
name|buttonAdd
argument_list|()
argument_list|,
literal|75
argument_list|,
name|add
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"edit"
argument_list|,
name|MESSAGES
operator|.
name|buttonEdit
argument_list|()
argument_list|,
literal|75
argument_list|,
name|edit
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"save"
argument_list|,
name|MESSAGES
operator|.
name|buttonSave
argument_list|()
argument_list|,
literal|75
argument_list|,
name|save
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"back"
argument_list|,
name|MESSAGES
operator|.
name|buttonBack
argument_list|()
argument_list|,
literal|75
argument_list|,
name|back
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|addHeaderRow
argument_list|(
name|iHeader
argument_list|)
expr_stmt|;
name|iTable
operator|=
operator|new
name|UniTimeTable
argument_list|<
name|Record
argument_list|>
argument_list|()
expr_stmt|;
name|iTable
operator|.
name|setAllowSelection
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|addRow
argument_list|(
name|iTable
argument_list|)
expr_stmt|;
name|iBottom
operator|=
name|iHeader
operator|.
name|clonePanel
argument_list|()
expr_stmt|;
name|iPanel
operator|.
name|addNotPrintableBottomRow
argument_list|(
name|iBottom
argument_list|)
expr_stmt|;
name|iSimple
operator|=
operator|new
name|SimplePanel
argument_list|(
name|iPanel
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|iSimple
argument_list|)
expr_stmt|;
specifier|final
name|Timer
name|timer
init|=
operator|new
name|Timer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|saveOrder
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|iTable
operator|.
name|addDataChangedListener
argument_list|(
operator|new
name|DataChangedListener
argument_list|<
name|Record
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onDataInserted
parameter_list|(
name|DataChangedEvent
argument_list|<
name|Record
argument_list|>
name|event
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|onDataMoved
parameter_list|(
name|List
argument_list|<
name|DataChangedEvent
argument_list|<
name|Record
argument_list|>
argument_list|>
name|event
parameter_list|)
block|{
name|timer
operator|.
name|schedule
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onDataRemoved
parameter_list|(
name|DataChangedEvent
argument_list|<
name|Record
argument_list|>
name|event
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|onDataSorted
parameter_list|(
name|List
argument_list|<
name|DataChangedEvent
argument_list|<
name|Record
argument_list|>
argument_list|>
name|event
parameter_list|)
block|{
block|}
block|}
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|addMouseClickListener
argument_list|(
operator|new
name|MouseClickListener
argument_list|<
name|SimpleEditInterface
operator|.
name|Record
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseClick
parameter_list|(
name|TableEvent
argument_list|<
name|Record
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getCol
argument_list|()
operator|==
literal|0
operator|&&
name|event
operator|.
name|getData
argument_list|()
operator|!=
literal|null
operator|&&
name|hasDetails
argument_list|()
condition|)
block|{
if|if
condition|(
literal|"+"
operator|.
name|equals
argument_list|(
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|setDetailsVisible
argument_list|(
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
if|else if
condition|(
literal|"-"
operator|.
name|equals
argument_list|(
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|setDetailsVisible
argument_list|(
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|iEditable
operator|||
operator|!
name|iData
operator|.
name|isEditable
argument_list|()
operator|||
name|event
operator|.
name|getData
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|event
operator|.
name|getData
argument_list|()
operator|.
name|isEditable
argument_list|()
condition|)
return|return;
name|detail
argument_list|(
name|event
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iLookup
operator|=
operator|new
name|Lookup
argument_list|()
expr_stmt|;
name|iLookup
operator|.
name|setOptions
argument_list|(
literal|"mustHaveExternalId,source=students"
argument_list|)
expr_stmt|;
name|iLookup
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|PersonInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|PersonInterface
argument_list|>
name|event
parameter_list|)
block|{
name|PersonInterface
name|student
init|=
name|event
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|student
operator|!=
literal|null
condition|)
block|{
name|iStudentsText
operator|.
name|setValue
argument_list|(
name|iStudentsText
operator|.
name|getValue
argument_list|()
operator|+
operator|(
name|iStudentsText
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"\n"
operator|)
operator|+
name|student
operator|.
name|getId
argument_list|()
operator|+
literal|" "
operator|+
name|student
operator|.
name|getLastName
argument_list|()
operator|+
literal|", "
operator|+
name|student
operator|.
name|getFirstName
argument_list|()
operator|+
operator|(
name|student
operator|.
name|getMiddleName
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" "
operator|+
name|student
operator|.
name|getMiddleName
argument_list|()
operator|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
name|SimpleEditInterface
operator|.
name|GetPageNameRpcRequest
operator|.
name|getPageName
argument_list|(
name|iType
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|PageName
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedWrongEditType
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|,
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|PageName
name|result
parameter_list|)
block|{
name|iPageName
operator|=
name|result
expr_stmt|;
name|UniTimePageLabel
operator|.
name|getInstance
argument_list|()
operator|.
name|setPageName
argument_list|(
name|iPageName
operator|.
name|plural
argument_list|()
argument_list|)
expr_stmt|;
name|load
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Record
name|next
parameter_list|(
name|Record
name|record
parameter_list|)
block|{
if|if
condition|(
name|record
operator|==
literal|null
operator|||
name|record
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|boolean
name|next
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Record
name|rec
init|=
name|iTable
operator|.
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|rec
operator|==
literal|null
operator|||
name|rec
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
operator|!
name|iTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|isVisible
argument_list|(
name|row
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|next
condition|)
return|return
name|rec
return|;
if|if
condition|(
name|record
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|rec
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
name|next
operator|=
literal|true
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|Record
name|previous
parameter_list|(
name|Record
name|record
parameter_list|)
block|{
if|if
condition|(
name|record
operator|==
literal|null
operator|||
name|record
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Record
name|previous
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Record
name|rec
init|=
name|iTable
operator|.
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|rec
operator|==
literal|null
operator|||
name|rec
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
operator|!
name|iTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|isVisible
argument_list|(
name|row
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|record
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|rec
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
return|return
name|previous
return|;
name|previous
operator|=
name|rec
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|detail
parameter_list|(
specifier|final
name|Record
name|record
parameter_list|)
block|{
name|SimpleForm
name|detail
init|=
operator|new
name|SimpleFormWithMouseOver
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|MyCell
argument_list|>
name|cells
init|=
operator|new
name|ArrayList
argument_list|<
name|SimpleEditPage
operator|.
name|MyCell
argument_list|>
argument_list|()
decl_stmt|;
name|UniTimePageLabel
operator|.
name|getInstance
argument_list|()
operator|.
name|setPageName
argument_list|(
name|record
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|?
name|MESSAGES
operator|.
name|pageAdd
argument_list|(
name|iPageName
operator|.
name|singular
argument_list|()
argument_list|)
else|:
name|MESSAGES
operator|.
name|pageEdit
argument_list|(
name|iPageName
operator|.
name|singular
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|UniTimeHeaderPanel
name|header
init|=
operator|new
name|UniTimeHeaderPanel
argument_list|()
decl_stmt|;
name|Record
name|prev
init|=
name|previous
argument_list|(
name|record
argument_list|)
decl_stmt|;
name|Record
name|next
init|=
name|next
argument_list|(
name|record
argument_list|)
decl_stmt|;
specifier|final
name|Record
name|backup
init|=
name|record
operator|.
name|cloneRecord
argument_list|()
decl_stmt|;
name|header
operator|.
name|addButton
argument_list|(
literal|"save"
argument_list|,
name|MESSAGES
operator|.
name|buttonSave
argument_list|()
argument_list|,
literal|75
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|String
name|valid
init|=
name|validate
argument_list|(
name|record
argument_list|,
name|cells
argument_list|)
decl_stmt|;
if|if
condition|(
name|valid
operator|!=
literal|null
condition|)
block|{
name|header
operator|.
name|setErrorMessage
argument_list|(
name|valid
argument_list|)
expr_stmt|;
return|return;
block|}
name|header
operator|.
name|setMessage
argument_list|(
name|MESSAGES
operator|.
name|waitSavingRecord
argument_list|()
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
name|SimpleEditInterface
operator|.
name|SaveRecordRpcRequest
operator|.
name|saveRecord
argument_list|(
name|iType
argument_list|,
name|record
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|Record
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|header
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedSave
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Record
name|result
parameter_list|)
block|{
name|record
operator|.
name|copyFrom
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|iEditable
operator|=
literal|false
expr_stmt|;
name|iSimple
operator|.
name|setWidget
argument_list|(
name|iPanel
argument_list|)
expr_stmt|;
name|refreshTable
argument_list|()
expr_stmt|;
name|saveOrder
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|r
operator|++
control|)
block|{
if|if
condition|(
name|iTable
operator|.
name|getData
argument_list|(
name|r
argument_list|)
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|record
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|iTable
operator|.
name|getData
argument_list|(
name|r
argument_list|)
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|iTable
operator|.
name|setSelected
argument_list|(
name|r
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|scrollToElement
argument_list|(
name|iTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|r
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|Client
operator|.
name|fireGwtPageChanged
argument_list|(
operator|new
name|GwtPageChangeEvent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|record
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
name|record
operator|.
name|isDeletable
argument_list|()
condition|)
block|{
name|header
operator|.
name|addButton
argument_list|(
literal|"delete"
argument_list|,
name|MESSAGES
operator|.
name|buttonDelete
argument_list|()
argument_list|,
literal|75
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|header
operator|.
name|setMessage
argument_list|(
name|MESSAGES
operator|.
name|waitDeletingRecord
argument_list|()
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
name|SimpleEditInterface
operator|.
name|DeleteRecordRpcRequest
operator|.
name|deleteRecord
argument_list|(
name|iType
argument_list|,
name|record
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|Record
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|header
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedDelete
argument_list|(
name|iPageName
operator|.
name|singular
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Record
name|result
parameter_list|)
block|{
name|iData
operator|.
name|getRecords
argument_list|()
operator|.
name|remove
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|iEditable
operator|=
literal|false
expr_stmt|;
name|iSimple
operator|.
name|setWidget
argument_list|(
name|iPanel
argument_list|)
expr_stmt|;
name|refreshTable
argument_list|()
expr_stmt|;
name|saveOrder
argument_list|()
expr_stmt|;
name|Client
operator|.
name|fireGwtPageChanged
argument_list|(
operator|new
name|GwtPageChangeEvent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|prev
operator|!=
literal|null
condition|)
block|{
name|header
operator|.
name|addButton
argument_list|(
literal|"prev"
argument_list|,
name|MESSAGES
operator|.
name|buttonPrevious
argument_list|()
argument_list|,
literal|75
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|String
name|valid
init|=
name|validate
argument_list|(
name|record
argument_list|,
name|cells
argument_list|)
decl_stmt|;
if|if
condition|(
name|valid
operator|!=
literal|null
condition|)
block|{
name|header
operator|.
name|setErrorMessage
argument_list|(
name|valid
argument_list|)
expr_stmt|;
return|return;
block|}
name|header
operator|.
name|setMessage
argument_list|(
name|MESSAGES
operator|.
name|waitSavingRecord
argument_list|()
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
name|SimpleEditInterface
operator|.
name|SaveRecordRpcRequest
operator|.
name|saveRecord
argument_list|(
name|iType
argument_list|,
name|record
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|Record
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|header
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedSave
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Record
name|result
parameter_list|)
block|{
name|record
operator|.
name|copyFrom
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|refreshTable
argument_list|()
expr_stmt|;
name|Record
name|prev
init|=
name|previous
argument_list|(
name|record
argument_list|)
decl_stmt|;
if|if
condition|(
name|prev
operator|!=
literal|null
condition|)
block|{
name|detail
argument_list|(
name|prev
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iSimple
operator|.
name|setWidget
argument_list|(
name|iPanel
argument_list|)
expr_stmt|;
block|}
name|Client
operator|.
name|fireGwtPageChanged
argument_list|(
operator|new
name|GwtPageChangeEvent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|header
operator|.
name|addButton
argument_list|(
literal|"next"
argument_list|,
name|MESSAGES
operator|.
name|buttonNext
argument_list|()
argument_list|,
literal|75
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|String
name|valid
init|=
name|validate
argument_list|(
name|record
argument_list|,
name|cells
argument_list|)
decl_stmt|;
if|if
condition|(
name|valid
operator|!=
literal|null
condition|)
block|{
name|header
operator|.
name|setErrorMessage
argument_list|(
name|valid
argument_list|)
expr_stmt|;
return|return;
block|}
name|header
operator|.
name|setMessage
argument_list|(
name|MESSAGES
operator|.
name|waitSavingRecord
argument_list|()
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
name|SimpleEditInterface
operator|.
name|SaveRecordRpcRequest
operator|.
name|saveRecord
argument_list|(
name|iType
argument_list|,
name|record
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|Record
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|header
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedSave
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Record
name|result
parameter_list|)
block|{
name|record
operator|.
name|copyFrom
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|refreshTable
argument_list|()
expr_stmt|;
name|Record
name|next
init|=
name|next
argument_list|(
name|record
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|detail
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iSimple
operator|.
name|setWidget
argument_list|(
name|iPanel
argument_list|)
expr_stmt|;
block|}
name|Client
operator|.
name|fireGwtPageChanged
argument_list|(
operator|new
name|GwtPageChangeEvent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|header
operator|.
name|addButton
argument_list|(
literal|"back"
argument_list|,
name|MESSAGES
operator|.
name|buttonBack
argument_list|()
argument_list|,
literal|75
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|iSimple
operator|.
name|setWidget
argument_list|(
name|iPanel
argument_list|)
expr_stmt|;
name|record
operator|.
name|copyFrom
argument_list|(
name|backup
argument_list|)
expr_stmt|;
if|if
condition|(
name|record
operator|.
name|isEmpty
argument_list|()
condition|)
name|iData
operator|.
name|getRecords
argument_list|()
operator|.
name|remove
argument_list|(
name|record
argument_list|)
expr_stmt|;
name|iEditable
operator|=
literal|false
expr_stmt|;
name|iSimple
operator|.
name|setWidget
argument_list|(
name|iPanel
argument_list|)
expr_stmt|;
name|refreshTable
argument_list|()
expr_stmt|;
name|saveOrder
argument_list|()
expr_stmt|;
if|if
condition|(
name|record
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|r
operator|++
control|)
block|{
if|if
condition|(
name|iTable
operator|.
name|getData
argument_list|(
name|r
argument_list|)
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|record
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|iTable
operator|.
name|getData
argument_list|(
name|r
argument_list|)
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|iTable
operator|.
name|setSelected
argument_list|(
name|r
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|scrollToElement
argument_list|(
name|iTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|r
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
name|Client
operator|.
name|fireGwtPageChanged
argument_list|(
operator|new
name|GwtPageChangeEvent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|detail
operator|.
name|addHeaderRow
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|iData
operator|.
name|getFields
argument_list|()
control|)
block|{
name|MyCell
name|cell
init|=
operator|new
name|MyCell
argument_list|(
name|record
operator|.
name|isEditable
argument_list|(
name|idx
argument_list|)
argument_list|,
name|field
argument_list|,
name|record
argument_list|,
name|idx
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|cells
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|isVisible
argument_list|()
operator|&&
name|field
operator|.
name|getType
argument_list|()
operator|!=
name|FieldType
operator|.
name|parent
condition|)
block|{
name|String
name|name
init|=
name|field
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasDetails
argument_list|()
operator|&&
name|name
operator|.
name|contains
argument_list|(
literal|"|"
argument_list|)
condition|)
name|name
operator|=
name|isParent
argument_list|(
name|record
argument_list|)
condition|?
name|name
operator|.
name|split
argument_list|(
literal|"\\|"
argument_list|)
index|[
literal|0
index|]
else|:
name|name
operator|.
name|split
argument_list|(
literal|"\\|"
argument_list|)
index|[
literal|1
index|]
expr_stmt|;
name|detail
operator|.
name|addRow
argument_list|(
name|name
operator|+
literal|":"
argument_list|,
name|cell
argument_list|)
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
block|}
name|UniTimeHeaderPanel
name|bottom
init|=
name|header
operator|.
name|clonePanel
argument_list|()
decl_stmt|;
name|detail
operator|.
name|addNotPrintableBottomRow
argument_list|(
name|bottom
argument_list|)
expr_stmt|;
name|iSimple
operator|.
name|setWidget
argument_list|(
name|detail
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|scrollToElement
argument_list|(
name|detail
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
name|Client
operator|.
name|fireGwtPageChanged
argument_list|(
operator|new
name|GwtPageChangeEvent
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|hasDetails
parameter_list|()
block|{
return|return
name|iData
operator|!=
literal|null
operator|&&
name|iData
operator|.
name|getFields
argument_list|()
operator|.
name|length
operator|>
literal|0
operator|&&
name|iData
operator|.
name|getFields
argument_list|()
index|[
literal|0
index|]
operator|.
name|getType
argument_list|()
operator|==
name|FieldType
operator|.
name|parent
return|;
block|}
specifier|private
name|boolean
name|isParent
parameter_list|(
name|Record
name|r
parameter_list|)
block|{
return|return
name|hasDetails
argument_list|()
operator|&&
operator|(
literal|"+"
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|||
literal|"-"
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|)
return|;
block|}
specifier|private
name|boolean
name|isChild
parameter_list|(
name|Record
name|r
parameter_list|)
block|{
return|return
name|hasDetails
argument_list|()
operator|&&
operator|!
literal|"+"
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|&&
operator|!
literal|"-"
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|void
name|setDetailsVisible
parameter_list|(
name|Long
name|recordId
parameter_list|,
name|boolean
name|show
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hasDetails
argument_list|()
condition|)
return|return;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Record
name|r
init|=
name|iTable
operator|.
name|getData
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|r
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|recordId
argument_list|)
condition|)
block|{
name|Image
name|details
init|=
operator|(
name|Image
operator|)
operator|(
operator|(
name|MyCell
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|i
argument_list|,
literal|0
argument_list|)
operator|)
operator|.
name|getInnerWidget
argument_list|()
decl_stmt|;
name|details
operator|.
name|setResource
argument_list|(
name|show
condition|?
name|RESOURCES
operator|.
name|treeOpen
argument_list|()
else|:
name|RESOURCES
operator|.
name|treeClosed
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|0
argument_list|,
name|show
condition|?
literal|"-"
else|:
literal|"+"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|String
operator|.
name|valueOf
argument_list|(
name|recordId
argument_list|)
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|iTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|i
argument_list|,
name|show
argument_list|)
expr_stmt|;
block|}
block|}
name|saveOrder
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|load
parameter_list|(
specifier|final
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
name|callback
parameter_list|)
block|{
name|iBottom
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"add"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"save"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"edit"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"back"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setMessage
argument_list|(
name|MESSAGES
operator|.
name|waitLoadingData
argument_list|()
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|clearTable
argument_list|()
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
name|SimpleEditInterface
operator|.
name|LoadDataRpcRequest
operator|.
name|loadData
argument_list|(
name|iType
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|SimpleEditInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|SimpleEditInterface
name|result
parameter_list|)
block|{
name|iData
operator|=
name|result
expr_stmt|;
specifier|final
name|Comparator
argument_list|<
name|Record
argument_list|>
name|cmp
init|=
name|iData
operator|.
name|getComparator
argument_list|()
decl_stmt|;
if|if
condition|(
name|iData
operator|.
name|isSaveOrder
argument_list|()
condition|)
block|{
name|GetUserDataRpcRequest
name|ordRequest
init|=
operator|new
name|GetUserDataRpcRequest
argument_list|()
decl_stmt|;
name|ordRequest
operator|.
name|add
argument_list|(
literal|"SimpleEdit.Order["
operator|+
name|iType
operator|.
name|toString
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasDetails
argument_list|()
condition|)
name|ordRequest
operator|.
name|add
argument_list|(
literal|"SimpleEdit.Open["
operator|+
name|iType
operator|.
name|toString
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|ordRequest
operator|.
name|add
argument_list|(
literal|"SimpleEdit.Hidden["
operator|+
name|iType
operator|.
name|toString
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
name|ordRequest
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|UserDataInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|UserDataInterface
name|result
parameter_list|)
block|{
specifier|final
name|String
name|order
init|=
literal|"|"
operator|+
name|result
operator|.
name|get
argument_list|(
literal|"SimpleEdit.Order["
operator|+
name|iType
operator|.
name|toString
argument_list|()
operator|+
literal|"]"
argument_list|)
operator|+
literal|"|"
decl_stmt|;
if|if
condition|(
name|hasDetails
argument_list|()
condition|)
block|{
name|String
name|open
init|=
literal|"|"
operator|+
name|result
operator|.
name|get
argument_list|(
literal|"SimpleEdit.Open["
operator|+
name|iType
operator|.
name|toString
argument_list|()
operator|+
literal|"]"
argument_list|)
operator|+
literal|"|"
decl_stmt|;
for|for
control|(
name|Record
name|r
range|:
name|iData
operator|.
name|getRecords
argument_list|()
control|)
block|{
if|if
condition|(
name|isParent
argument_list|(
name|r
argument_list|)
condition|)
name|r
operator|.
name|setField
argument_list|(
literal|0
argument_list|,
name|open
operator|.
name|indexOf
argument_list|(
literal|"|"
operator|+
name|r
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"|"
argument_list|)
operator|>=
literal|0
condition|?
literal|"-"
else|:
literal|"+"
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|iData
operator|.
name|getRecords
argument_list|()
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Record
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Record
name|r1
parameter_list|,
name|Record
name|r2
parameter_list|)
block|{
if|if
condition|(
name|iData
operator|.
name|getFields
argument_list|()
index|[
literal|0
index|]
operator|.
name|getType
argument_list|()
operator|==
name|FieldType
operator|.
name|parent
condition|)
block|{
name|Record
name|p1
init|=
operator|(
literal|"+"
operator|.
name|equals
argument_list|(
name|r1
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|||
literal|"-"
operator|.
name|equals
argument_list|(
name|r1
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|?
literal|null
else|:
name|iData
operator|.
name|getRecord
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|r1
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
operator|)
decl_stmt|;
name|Record
name|p2
init|=
operator|(
literal|"+"
operator|.
name|equals
argument_list|(
name|r2
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|||
literal|"-"
operator|.
name|equals
argument_list|(
name|r2
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|?
literal|null
else|:
name|iData
operator|.
name|getRecord
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|r2
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
operator|(
name|p1
operator|==
literal|null
condition|?
name|r1
else|:
name|p1
operator|)
operator|.
name|equals
argument_list|(
name|p2
operator|==
literal|null
condition|?
name|r2
else|:
name|p2
argument_list|)
condition|)
block|{
comment|// same parents
if|if
condition|(
name|p1
operator|!=
literal|null
operator|&&
name|p2
operator|==
literal|null
condition|)
return|return
literal|1
return|;
comment|// r1 is already a parent
if|if
condition|(
name|p1
operator|==
literal|null
operator|&&
name|p2
operator|!=
literal|null
condition|)
return|return
operator|-
literal|1
return|;
comment|// r2 is already a parent
comment|// same level
block|}
if|else if
condition|(
name|p1
operator|!=
literal|null
operator|||
name|p2
operator|!=
literal|null
condition|)
block|{
comment|// different parents
return|return
name|compare
argument_list|(
name|p1
operator|==
literal|null
condition|?
name|r1
else|:
name|p1
argument_list|,
name|p2
operator|==
literal|null
condition|?
name|r2
else|:
name|p2
argument_list|)
return|;
comment|// compare parents
block|}
block|}
name|int
name|i1
init|=
operator|(
name|r1
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|order
operator|.
name|indexOf
argument_list|(
literal|"|"
operator|+
name|r1
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"|"
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|i1
operator|>=
literal|0
condition|)
block|{
name|int
name|i2
init|=
operator|(
name|r2
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|order
operator|.
name|indexOf
argument_list|(
literal|"|"
operator|+
name|r2
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"|"
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|i2
operator|>=
literal|0
condition|)
block|{
return|return
operator|(
name|i1
operator|<
name|i2
condition|?
operator|-
literal|1
else|:
name|i1
operator|>
name|i2
condition|?
literal|1
else|:
name|cmp
operator|.
name|compare
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|)
operator|)
return|;
block|}
block|}
return|return
name|cmp
operator|.
name|compare
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|refreshTable
argument_list|(
literal|"|"
operator|+
name|result
operator|.
name|get
argument_list|(
literal|"SimpleEdit.Hidden["
operator|+
name|iType
operator|.
name|toString
argument_list|()
operator|+
literal|"]"
argument_list|)
operator|+
literal|"|"
argument_list|)
expr_stmt|;
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
name|callback
operator|.
name|onSuccess
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|iData
operator|.
name|getRecords
argument_list|()
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|refreshTable
argument_list|()
expr_stmt|;
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
name|callback
operator|.
name|onSuccess
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|refreshTable
argument_list|()
expr_stmt|;
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
name|callback
operator|.
name|onSuccess
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedLoadData
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|checkAccess
argument_list|(
name|caught
argument_list|)
expr_stmt|;
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
name|callback
operator|.
name|onFailure
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|UniTimeTableHeader
argument_list|>
name|header
parameter_list|(
name|boolean
name|top
parameter_list|)
block|{
name|List
argument_list|<
name|UniTimeTableHeader
argument_list|>
name|header
init|=
operator|new
name|ArrayList
argument_list|<
name|UniTimeTableHeader
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|col
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|Field
name|field
range|:
name|iData
operator|.
name|getFields
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|field
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasDetails
argument_list|()
operator|&&
name|name
operator|.
name|contains
argument_list|(
literal|"|"
argument_list|)
condition|)
name|name
operator|=
name|name
operator|.
name|replace
argument_list|(
literal|"|"
argument_list|,
literal|"<br>&nbsp;&nbsp;"
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|cell
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|top
condition|)
block|{
name|cell
operator|.
name|addStyleName
argument_list|(
literal|"unitime-TopLineDash"
argument_list|)
expr_stmt|;
name|cell
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setPaddingTop
argument_list|(
literal|2
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
block|}
name|header
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
specifier|final
name|int
name|index
init|=
name|col
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|getType
argument_list|()
operator|==
name|FieldType
operator|.
name|number
condition|)
name|cell
operator|.
name|setHorizontalAlignment
argument_list|(
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|getType
argument_list|()
operator|==
name|FieldType
operator|.
name|parent
condition|)
block|{
name|cell
operator|.
name|setHorizontalAlignment
argument_list|(
name|HasHorizontalAlignment
operator|.
name|ALIGN_CENTER
argument_list|)
expr_stmt|;
name|cell
operator|.
name|addOperation
argument_list|(
operator|new
name|UniTimeTableHeader
operator|.
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Record
name|r
init|=
name|iTable
operator|.
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
literal|"+"
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|Image
name|details
init|=
operator|(
name|Image
operator|)
operator|(
operator|(
name|MyCell
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
operator|)
operator|.
name|getInnerWidget
argument_list|()
decl_stmt|;
name|details
operator|.
name|setResource
argument_list|(
name|RESOURCES
operator|.
name|treeOpen
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|0
argument_list|,
literal|"-"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
literal|"-"
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|iTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|row
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|saveOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Record
name|r
init|=
name|iTable
operator|.
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
operator|&&
literal|"+"
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opExpandAll
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|cell
operator|.
name|addOperation
argument_list|(
operator|new
name|UniTimeTableHeader
operator|.
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Record
name|r
init|=
name|iTable
operator|.
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
literal|"-"
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|Image
name|details
init|=
operator|(
name|Image
operator|)
operator|(
operator|(
name|MyCell
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
operator|)
operator|.
name|getInnerWidget
argument_list|()
decl_stmt|;
name|details
operator|.
name|setResource
argument_list|(
name|RESOURCES
operator|.
name|treeClosed
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|0
argument_list|,
literal|"+"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
literal|"+"
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|iTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|row
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|saveOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Record
name|r
init|=
name|iTable
operator|.
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
operator|&&
literal|"-"
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opCollapseAll
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cell
operator|.
name|addOperation
argument_list|(
operator|new
name|UniTimeTableHeader
operator|.
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iTable
operator|.
name|sort
argument_list|(
name|index
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Record
argument_list|>
argument_list|()
block|{
name|RecordComparator
name|iComparator
init|=
name|iData
operator|.
name|getComparator
argument_list|()
decl_stmt|;
specifier|public
name|int
name|compare
parameter_list|(
name|Record
name|a
parameter_list|,
name|Record
name|b
parameter_list|)
block|{
name|int
name|cmp
init|=
name|iComparator
operator|.
name|compare
argument_list|(
name|index
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|iComparator
operator|.
name|compare
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|saveOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opSortBy
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|col
operator|==
literal|0
condition|)
block|{
name|cell
operator|.
name|addOperation
argument_list|(
operator|new
name|UniTimeTableHeader
operator|.
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iTable
operator|.
name|sort
argument_list|(
name|index
argument_list|,
name|iData
operator|.
name|getComparator
argument_list|()
argument_list|)
expr_stmt|;
name|saveOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opSortDefault
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|col
operator|==
literal|0
condition|)
block|{
name|cell
operator|.
name|addOperation
argument_list|(
operator|new
name|UniTimeTableHeader
operator|.
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
for|for
control|(
name|int
name|index
init|=
literal|1
init|;
name|index
operator|<
name|iData
operator|.
name|getFields
argument_list|()
operator|.
name|length
condition|;
name|index
operator|++
control|)
block|{
if|if
condition|(
name|iData
operator|.
name|getFields
argument_list|()
index|[
name|index
index|]
operator|.
name|isEditable
argument_list|()
operator|&&
name|iTable
operator|.
name|isColumnVisible
argument_list|(
name|index
argument_list|)
condition|)
block|{
name|iTable
operator|.
name|setColumnVisible
argument_list|(
name|index
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iVisible
index|[
name|index
index|]
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|saveOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
for|for
control|(
name|int
name|index
init|=
literal|1
init|;
name|index
operator|<
name|iData
operator|.
name|getFields
argument_list|()
operator|.
name|length
condition|;
name|index
operator|++
control|)
block|{
if|if
condition|(
name|iData
operator|.
name|getFields
argument_list|()
index|[
name|index
index|]
operator|.
name|isEditable
argument_list|()
operator|&&
name|iTable
operator|.
name|isColumnVisible
argument_list|(
name|index
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opHideAll
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|cell
operator|.
name|addOperation
argument_list|(
operator|new
name|UniTimeTableHeader
operator|.
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
for|for
control|(
name|int
name|index
init|=
literal|1
init|;
name|index
operator|<
name|iData
operator|.
name|getFields
argument_list|()
operator|.
name|length
condition|;
name|index
operator|++
control|)
block|{
if|if
condition|(
name|iData
operator|.
name|getFields
argument_list|()
index|[
name|index
index|]
operator|.
name|isEditable
argument_list|()
operator|&&
operator|!
name|iTable
operator|.
name|isColumnVisible
argument_list|(
name|index
argument_list|)
condition|)
block|{
name|iTable
operator|.
name|setColumnVisible
argument_list|(
name|index
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iVisible
index|[
name|index
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|saveOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
for|for
control|(
name|int
name|index
init|=
literal|1
init|;
name|index
operator|<
name|iData
operator|.
name|getFields
argument_list|()
operator|.
name|length
condition|;
name|index
operator|++
control|)
block|{
if|if
condition|(
name|iData
operator|.
name|getFields
argument_list|()
index|[
name|index
index|]
operator|.
name|isEditable
argument_list|()
operator|&&
operator|!
name|iTable
operator|.
name|isColumnVisible
argument_list|(
name|index
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
for|for
control|(
name|int
name|index
init|=
literal|1
init|;
name|index
operator|<
name|iData
operator|.
name|getFields
argument_list|()
operator|.
name|length
condition|;
name|index
operator|++
control|)
block|{
if|if
condition|(
name|iData
operator|.
name|getFields
argument_list|()
index|[
name|index
index|]
operator|.
name|isEditable
argument_list|()
operator|&&
name|iTable
operator|.
name|isColumnVisible
argument_list|(
name|index
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opShowAll
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|col
operator|++
expr_stmt|;
block|}
for|for
control|(
name|UniTimeTableHeader
name|h
range|:
name|header
control|)
block|{
name|col
operator|=
literal|0
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
specifier|final
name|Field
name|field
range|:
name|iData
operator|.
name|getFields
argument_list|()
control|)
block|{
specifier|final
name|int
name|index
init|=
name|col
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|isEditable
argument_list|()
condition|)
block|{
specifier|final
name|boolean
name|sep
init|=
name|first
decl_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|h
operator|.
name|addOperation
argument_list|(
operator|new
name|UniTimeTableHeader
operator|.
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iTable
operator|.
name|setColumnVisible
argument_list|(
name|index
argument_list|,
operator|!
name|iTable
operator|.
name|isColumnVisible
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|iVisible
index|[
name|index
index|]
operator|=
name|iTable
operator|.
name|isColumnVisible
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|saveOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
if|if
condition|(
operator|!
name|iTable
operator|.
name|isColumnVisible
argument_list|(
name|index
argument_list|)
condition|)
return|return
literal|true
return|;
name|int
name|nrVisible
init|=
literal|0
decl_stmt|;
for|for
control|(
name|boolean
name|v
range|:
name|iVisible
control|)
if|if
condition|(
name|v
condition|)
name|nrVisible
operator|++
expr_stmt|;
return|return
name|nrVisible
operator|>
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
name|sep
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
operator|(
name|iTable
operator|.
name|isColumnVisible
argument_list|(
name|index
argument_list|)
condition|?
name|MESSAGES
operator|.
name|opHide
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
else|:
name|MESSAGES
operator|.
name|opShow
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|col
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iData
operator|.
name|isEditable
argument_list|()
operator|&&
name|iEditable
condition|)
block|{
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|()
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|header
return|;
block|}
specifier|private
name|void
name|refreshTable
parameter_list|()
block|{
name|refreshTable
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|refreshTable
parameter_list|(
name|String
name|hidden
parameter_list|)
block|{
name|UniTimePageLabel
operator|.
name|getInstance
argument_list|()
operator|.
name|setPageName
argument_list|(
name|iEditable
condition|?
name|MESSAGES
operator|.
name|pageEdit
argument_list|(
name|iPageName
operator|.
name|plural
argument_list|()
argument_list|)
else|:
name|iPageName
operator|.
name|plural
argument_list|()
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|clearTable
argument_list|()
expr_stmt|;
name|iTable
operator|.
name|setAllowSelection
argument_list|(
operator|!
name|hasDetails
argument_list|()
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|addRow
argument_list|(
literal|null
argument_list|,
name|header
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iVisible
operator|==
literal|null
condition|)
block|{
name|iVisible
operator|=
operator|new
name|boolean
index|[
name|iData
operator|.
name|getFields
argument_list|()
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iVisible
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|iVisible
index|[
name|i
index|]
operator|=
name|iData
operator|.
name|getFields
argument_list|()
index|[
name|i
index|]
operator|.
name|isVisible
argument_list|()
operator|&&
operator|(
name|hidden
operator|==
literal|null
operator|||
operator|!
name|hidden
operator|.
name|contains
argument_list|(
literal|"|"
operator|+
name|iData
operator|.
name|getFields
argument_list|()
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|+
literal|"|"
argument_list|)
operator|)
expr_stmt|;
block|}
name|boolean
name|empty
init|=
literal|false
decl_stmt|;
name|int
name|row
init|=
literal|1
decl_stmt|;
for|for
control|(
name|Record
name|r
range|:
name|iData
operator|.
name|getRecords
argument_list|()
control|)
block|{
name|fillRow
argument_list|(
name|r
argument_list|,
name|row
operator|++
argument_list|)
expr_stmt|;
name|empty
operator|=
name|r
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|row
operator|%
literal|31
operator|)
operator|==
literal|0
operator|&&
operator|!
name|hasDetails
argument_list|()
condition|)
block|{
name|iTable
operator|.
name|addRow
argument_list|(
literal|null
argument_list|,
name|header
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|empty
operator|&&
name|iEditable
operator|&&
name|iData
operator|.
name|isEditable
argument_list|()
operator|&&
name|iData
operator|.
name|isAddable
argument_list|()
condition|)
name|fillRow
argument_list|(
name|iData
operator|.
name|addRecord
argument_list|(
literal|null
argument_list|)
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|iBottom
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|iData
operator|.
name|isEditable
argument_list|()
condition|)
block|{
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"back"
argument_list|,
name|iEditable
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"save"
argument_list|,
name|iEditable
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"edit"
argument_list|,
operator|!
name|iEditable
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"add"
argument_list|,
operator|!
name|iEditable
operator|&&
name|iData
operator|.
name|isAddable
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iVisible
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|iTable
operator|.
name|setColumnVisible
argument_list|(
name|i
argument_list|,
name|iVisible
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|fillRow
parameter_list|(
name|Record
name|record
parameter_list|,
name|int
name|row
parameter_list|)
block|{
name|List
argument_list|<
name|Widget
argument_list|>
name|line
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|col
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|iData
operator|.
name|getFields
argument_list|()
control|)
block|{
name|MyCell
name|cell
init|=
operator|new
name|MyCell
argument_list|(
name|iData
operator|.
name|isEditable
argument_list|()
operator|&&
name|iEditable
operator|&&
name|record
operator|.
name|isEditable
argument_list|(
name|col
argument_list|)
argument_list|,
name|field
argument_list|,
name|record
argument_list|,
name|col
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|line
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
name|col
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|iData
operator|.
name|isAddable
argument_list|()
operator|&&
name|iEditable
condition|)
block|{
name|Image
name|add
init|=
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|add
argument_list|()
argument_list|)
decl_stmt|;
name|add
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setCursor
argument_list|(
name|Cursor
operator|.
name|POINTER
argument_list|)
expr_stmt|;
name|add
operator|.
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|titleInsertRowAbove
argument_list|()
argument_list|)
expr_stmt|;
name|add
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|int
name|row
init|=
name|iTable
operator|.
name|getCellForEvent
argument_list|(
name|event
argument_list|)
operator|.
name|getRowIndex
argument_list|()
decl_stmt|;
name|fillRow
argument_list|(
name|iData
operator|.
name|addRecord
argument_list|(
literal|null
argument_list|)
argument_list|,
name|iTable
operator|.
name|insertRow
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|add
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|iEditable
operator|&&
name|iData
operator|.
name|isEditable
argument_list|()
condition|)
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iData
operator|.
name|isEditable
argument_list|()
operator|&&
name|iEditable
operator|&&
name|record
operator|.
name|isDeletable
argument_list|()
condition|)
block|{
name|Image
name|delete
init|=
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|delete
argument_list|()
argument_list|)
decl_stmt|;
name|delete
operator|.
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|titleDeleteRow
argument_list|()
argument_list|)
expr_stmt|;
name|delete
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setCursor
argument_list|(
name|Cursor
operator|.
name|POINTER
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|int
name|row
init|=
name|iTable
operator|.
name|getCellForEvent
argument_list|(
name|event
argument_list|)
operator|.
name|getRowIndex
argument_list|()
decl_stmt|;
name|iData
operator|.
name|getRecords
argument_list|()
operator|.
name|remove
argument_list|(
name|iTable
operator|.
name|getData
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|removeRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|iEditable
operator|&&
name|iData
operator|.
name|isEditable
argument_list|()
condition|)
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iTable
operator|.
name|setRow
argument_list|(
name|row
argument_list|,
name|record
argument_list|,
name|line
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasDetails
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
literal|"+"
operator|.
name|equals
argument_list|(
name|record
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|&&
operator|!
literal|"-"
operator|.
name|equals
argument_list|(
name|record
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|Record
name|p
init|=
name|iData
operator|.
name|getRecord
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|record
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
operator|&&
literal|"+"
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
name|iTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|row
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isParent
argument_list|(
name|record
argument_list|)
condition|)
block|{
name|iTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|row
argument_list|)
operator|.
name|getStyle
argument_list|()
operator|.
name|setBackgroundColor
argument_list|(
literal|"#f3f3f3"
argument_list|)
expr_stmt|;
comment|/* 				for (int i = 1; i< iTable.getCellCount(row); i++) 					iTable.getCellFormatter().addStyleName(row, i, "top-border-dashed"); 				*/
block|}
block|}
block|}
specifier|public
class|class
name|MyCell
extends|extends
name|Composite
implements|implements
name|HasFocus
implements|,
name|HasCellAlignment
block|{
specifier|private
name|Field
name|iField
decl_stmt|;
specifier|private
name|Record
name|iRecord
decl_stmt|;
specifier|private
name|int
name|iIndex
decl_stmt|;
specifier|private
name|boolean
name|iDetail
decl_stmt|;
specifier|public
name|MyCell
parameter_list|(
name|boolean
name|editable
parameter_list|,
specifier|final
name|Field
name|field
parameter_list|,
specifier|final
name|Record
name|record
parameter_list|,
specifier|final
name|int
name|index
parameter_list|,
name|boolean
name|detail
parameter_list|)
block|{
name|iField
operator|=
name|field
expr_stmt|;
name|iRecord
operator|=
name|record
expr_stmt|;
name|iIndex
operator|=
name|index
expr_stmt|;
name|iDetail
operator|=
name|detail
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|getType
argument_list|()
operator|==
name|FieldType
operator|.
name|parent
condition|)
block|{
if|if
condition|(
literal|"+"
operator|.
name|equals
argument_list|(
name|record
operator|.
name|getField
argument_list|(
name|index
argument_list|)
argument_list|)
condition|)
block|{
name|initWidget
argument_list|(
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|treeClosed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"-"
operator|.
name|equals
argument_list|(
name|record
operator|.
name|getField
argument_list|(
name|index
argument_list|)
argument_list|)
condition|)
block|{
name|initWidget
argument_list|(
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|treeOpen
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|initWidget
argument_list|(
operator|new
name|Label
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|editable
condition|)
block|{
switch|switch
condition|(
name|field
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|text
case|:
specifier|final
name|TextBox
name|text
init|=
operator|new
name|TextBox
argument_list|()
decl_stmt|;
name|text
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TextBox"
argument_list|)
expr_stmt|;
name|text
operator|.
name|setMaxLength
argument_list|(
name|field
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|text
operator|.
name|setText
argument_list|(
name|record
operator|.
name|getField
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|text
operator|.
name|setWidth
argument_list|(
name|field
operator|.
name|getWidth
argument_list|()
operator|+
literal|"px"
argument_list|)
expr_stmt|;
name|text
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|record
operator|.
name|setField
argument_list|(
name|index
argument_list|,
name|text
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|setError
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
operator|new
name|UniTimeWidget
argument_list|<
name|TextBox
argument_list|>
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iEditable
operator|&&
name|iData
operator|.
name|isAddable
argument_list|()
operator|&&
name|record
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|text
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|iData
operator|.
name|getRecords
argument_list|()
operator|.
name|indexOf
argument_list|(
name|iRecord
argument_list|)
operator|==
name|iData
operator|.
name|getRecords
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|&&
operator|!
name|record
operator|.
name|isEmpty
argument_list|()
condition|)
name|fillRow
argument_list|(
name|iData
operator|.
name|addRecord
argument_list|(
literal|null
argument_list|)
argument_list|,
name|iTable
operator|.
name|insertRow
argument_list|(
name|iTable
operator|.
name|getRowCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|textarea
case|:
specifier|final
name|TextArea
name|textarea
init|=
operator|new
name|TextArea
argument_list|()
decl_stmt|;
name|textarea
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TextArea"
argument_list|)
expr_stmt|;
if|if
condition|(
name|detail
condition|)
block|{
name|textarea
operator|.
name|setVisibleLines
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|5
argument_list|,
name|field
operator|.
name|getHeight
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|textarea
operator|.
name|setCharacterWidth
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|80
argument_list|,
name|field
operator|.
name|getWidth
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|textarea
operator|.
name|setVisibleLines
argument_list|(
name|field
operator|.
name|getHeight
argument_list|()
operator|<=
literal|0
condition|?
literal|2
else|:
name|Math
operator|.
name|min
argument_list|(
literal|3
argument_list|,
name|field
operator|.
name|getHeight
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|textarea
operator|.
name|setCharacterWidth
argument_list|(
name|field
operator|.
name|getWidth
argument_list|()
operator|<=
literal|0
condition|?
literal|40
else|:
name|Math
operator|.
name|min
argument_list|(
literal|60
argument_list|,
name|field
operator|.
name|getWidth
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|textarea
operator|.
name|setText
argument_list|(
name|record
operator|.
name|getField
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|textarea
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|record
operator|.
name|setField
argument_list|(
name|index
argument_list|,
name|textarea
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|setError
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
operator|new
name|UniTimeWidget
argument_list|<
name|TextArea
argument_list|>
argument_list|(
name|textarea
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iEditable
operator|&&
name|iData
operator|.
name|isAddable
argument_list|()
operator|&&
name|record
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|textarea
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|iData
operator|.
name|getRecords
argument_list|()
operator|.
name|indexOf
argument_list|(
name|iRecord
argument_list|)
operator|==
name|iData
operator|.
name|getRecords
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|&&
operator|!
name|record
operator|.
name|isEmpty
argument_list|()
condition|)
name|fillRow
argument_list|(
name|iData
operator|.
name|addRecord
argument_list|(
literal|null
argument_list|)
argument_list|,
name|iTable
operator|.
name|insertRow
argument_list|(
name|iTable
operator|.
name|getRowCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|number
case|:
specifier|final
name|NumberBox
name|number
init|=
operator|new
name|NumberBox
argument_list|()
decl_stmt|;
name|number
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setTextAlign
argument_list|(
name|TextAlign
operator|.
name|RIGHT
argument_list|)
expr_stmt|;
name|number
operator|.
name|setText
argument_list|(
name|record
operator|.
name|getField
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|number
operator|.
name|setDecimal
argument_list|(
name|field
operator|.
name|isAllowFloatingPoint
argument_list|()
argument_list|)
expr_stmt|;
name|number
operator|.
name|setNegative
argument_list|(
name|field
operator|.
name|isAllowNegative
argument_list|()
argument_list|)
expr_stmt|;
name|number
operator|.
name|setWidth
argument_list|(
name|field
operator|.
name|getWidth
argument_list|()
operator|+
literal|"px"
argument_list|)
expr_stmt|;
name|number
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|record
operator|.
name|setField
argument_list|(
name|index
argument_list|,
name|number
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|setError
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
operator|new
name|UniTimeWidget
argument_list|<
name|TextBox
argument_list|>
argument_list|(
name|number
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iEditable
operator|&&
name|iData
operator|.
name|isAddable
argument_list|()
operator|&&
name|record
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|number
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|iData
operator|.
name|getRecords
argument_list|()
operator|.
name|indexOf
argument_list|(
name|iRecord
argument_list|)
operator|==
name|iData
operator|.
name|getRecords
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|&&
operator|!
name|record
operator|.
name|isEmpty
argument_list|()
condition|)
name|fillRow
argument_list|(
name|iData
operator|.
name|addRecord
argument_list|(
literal|null
argument_list|)
argument_list|,
name|iTable
operator|.
name|insertRow
argument_list|(
name|iTable
operator|.
name|getRowCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|list
case|:
specifier|final
name|ListBox
name|list
init|=
operator|new
name|ListBox
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|list
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TextBox"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|record
operator|.
name|getField
argument_list|(
name|index
argument_list|)
operator|==
literal|null
operator|||
name|record
operator|.
name|getField
argument_list|(
name|index
argument_list|)
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
operator|(
operator|!
name|field
operator|.
name|isNotEmpty
argument_list|()
operator|&&
operator|(
name|isChild
argument_list|(
name|record
argument_list|)
operator|||
name|field
operator|.
name|isParentNotEmpty
argument_list|()
operator|)
operator|)
operator|)
operator|&&
operator|(
name|field
operator|.
name|getValues
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|field
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|list
operator|.
name|addItem
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ListItem
name|item
range|:
name|field
operator|.
name|getValues
argument_list|()
control|)
name|list
operator|.
name|addItem
argument_list|(
name|item
operator|.
name|getText
argument_list|()
argument_list|,
name|item
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|getItemCount
argument_list|()
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|list
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|record
operator|.
name|getField
argument_list|(
name|index
argument_list|)
argument_list|)
condition|)
name|list
operator|.
name|setSelectedIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|list
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|record
operator|.
name|setField
argument_list|(
name|index
argument_list|,
operator|(
name|list
operator|.
name|getSelectedIndex
argument_list|()
operator|<
literal|0
operator|||
name|list
operator|.
name|getValue
argument_list|(
name|list
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|list
operator|.
name|getValue
argument_list|(
name|list
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|setError
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
operator|new
name|UniTimeWidget
argument_list|<
name|ListBox
argument_list|>
argument_list|(
name|list
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iEditable
operator|&&
name|iData
operator|.
name|isAddable
argument_list|()
operator|&&
name|record
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|list
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|iData
operator|.
name|getRecords
argument_list|()
operator|.
name|indexOf
argument_list|(
name|iRecord
argument_list|)
operator|==
name|iData
operator|.
name|getRecords
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|&&
operator|!
name|record
operator|.
name|isEmpty
argument_list|()
condition|)
name|fillRow
argument_list|(
name|iData
operator|.
name|addRecord
argument_list|(
literal|null
argument_list|)
argument_list|,
name|iTable
operator|.
name|insertRow
argument_list|(
name|iTable
operator|.
name|getRowCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|multi
case|:
specifier|final
name|ListBox
name|multi
init|=
operator|new
name|ListBox
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|multi
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TextBox"
argument_list|)
expr_stmt|;
name|multi
operator|.
name|setVisibleItemCount
argument_list|(
literal|3
argument_list|)
expr_stmt|;
for|for
control|(
name|ListItem
name|item
range|:
name|field
operator|.
name|getValues
argument_list|()
control|)
name|multi
operator|.
name|addItem
argument_list|(
name|item
operator|.
name|getText
argument_list|()
argument_list|,
name|item
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|vals
init|=
name|record
operator|.
name|getValues
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|vals
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|val
range|:
name|vals
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|multi
operator|.
name|getItemCount
argument_list|()
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|multi
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|val
argument_list|)
condition|)
name|multi
operator|.
name|setItemSelected
argument_list|(
name|i
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|multi
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|record
operator|.
name|setField
argument_list|(
name|index
argument_list|,
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|multi
operator|.
name|getItemCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|multi
operator|.
name|isItemSelected
argument_list|(
name|i
argument_list|)
condition|)
name|record
operator|.
name|addToField
argument_list|(
name|index
argument_list|,
name|multi
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setError
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
operator|new
name|UniTimeWidget
argument_list|<
name|ListBox
argument_list|>
argument_list|(
name|multi
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iEditable
operator|&&
name|iData
operator|.
name|isAddable
argument_list|()
operator|&&
name|record
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|multi
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|iData
operator|.
name|getRecords
argument_list|()
operator|.
name|indexOf
argument_list|(
name|iRecord
argument_list|)
operator|==
name|iData
operator|.
name|getRecords
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|&&
operator|!
name|record
operator|.
name|isEmpty
argument_list|()
condition|)
name|fillRow
argument_list|(
name|iData
operator|.
name|addRecord
argument_list|(
literal|null
argument_list|)
argument_list|,
name|iTable
operator|.
name|insertRow
argument_list|(
name|iTable
operator|.
name|getRowCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|toggle
case|:
specifier|final
name|CheckBox
name|check
init|=
operator|new
name|CheckBox
argument_list|()
decl_stmt|;
name|check
operator|.
name|setValue
argument_list|(
name|record
operator|.
name|getField
argument_list|(
name|index
argument_list|)
operator|==
literal|null
condition|?
literal|null
else|:
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|record
operator|.
name|getField
argument_list|(
name|index
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|check
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|record
operator|.
name|setField
argument_list|(
name|index
argument_list|,
name|check
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|check
operator|.
name|getValue
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
name|setError
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
operator|new
name|UniTimeWidget
argument_list|<
name|CheckBox
argument_list|>
argument_list|(
name|check
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iEditable
operator|&&
name|iData
operator|.
name|isAddable
argument_list|()
operator|&&
name|record
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|check
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|iData
operator|.
name|getRecords
argument_list|()
operator|.
name|indexOf
argument_list|(
name|iRecord
argument_list|)
operator|==
name|iData
operator|.
name|getRecords
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|&&
operator|!
name|record
operator|.
name|isEmpty
argument_list|()
condition|)
name|fillRow
argument_list|(
name|iData
operator|.
name|addRecord
argument_list|(
literal|null
argument_list|)
argument_list|,
name|iTable
operator|.
name|insertRow
argument_list|(
name|iTable
operator|.
name|getRowCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|students
case|:
if|if
condition|(
name|detail
condition|)
block|{
specifier|final
name|TextArea
name|area
init|=
operator|new
name|TextArea
argument_list|()
decl_stmt|;
name|area
operator|.
name|setValue
argument_list|(
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|area
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TextArea"
argument_list|)
expr_stmt|;
name|area
operator|.
name|setVisibleLines
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|area
operator|.
name|setCharacterWidth
argument_list|(
literal|80
argument_list|)
expr_stmt|;
name|area
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|String
argument_list|>
name|event
parameter_list|)
block|{
name|record
operator|.
name|setField
argument_list|(
name|index
argument_list|,
name|area
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|setError
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|VerticalPanel
name|students
init|=
operator|new
name|VerticalPanel
argument_list|()
decl_stmt|;
name|students
operator|.
name|add
argument_list|(
name|area
argument_list|)
expr_stmt|;
name|Button
name|lookup
init|=
operator|new
name|Button
argument_list|(
name|MESSAGES
operator|.
name|buttonLookup
argument_list|()
argument_list|)
decl_stmt|;
name|lookup
operator|.
name|setAccessKey
argument_list|(
name|UniTimeHeaderPanel
operator|.
name|guessAccessKey
argument_list|(
name|MESSAGES
operator|.
name|buttonLookup
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|lookup
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|iStudentsText
operator|=
name|area
expr_stmt|;
name|iLookup
operator|.
name|center
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|students
operator|.
name|add
argument_list|(
name|lookup
argument_list|)
expr_stmt|;
name|students
operator|.
name|setCellHorizontalAlignment
argument_list|(
name|lookup
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
operator|new
name|UniTimeWidget
argument_list|<
name|VerticalPanel
argument_list|>
argument_list|(
name|students
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|HorizontalPanel
name|hp
init|=
operator|new
name|HorizontalPanel
argument_list|()
decl_stmt|;
specifier|final
name|Label
name|label
init|=
operator|new
name|Label
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|0
else|:
name|getValue
argument_list|()
operator|.
name|split
argument_list|(
literal|"\\n"
argument_list|)
operator|.
name|length
argument_list|)
argument_list|)
decl_stmt|;
name|hp
operator|.
name|add
argument_list|(
name|label
argument_list|)
expr_stmt|;
name|Image
name|change
init|=
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|edit
argument_list|()
argument_list|)
decl_stmt|;
name|hp
operator|.
name|add
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|hp
operator|.
name|setCellVerticalAlignment
argument_list|(
name|change
argument_list|,
name|HasVerticalAlignment
operator|.
name|ALIGN_MIDDLE
argument_list|)
expr_stmt|;
name|label
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setPaddingRight
argument_list|(
literal|5
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|change
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
specifier|final
name|UniTimeDialogBox
name|dialog
init|=
operator|new
name|UniTimeDialogBox
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SimpleForm
name|form
init|=
operator|new
name|SimpleForm
argument_list|()
decl_stmt|;
specifier|final
name|TextArea
name|text
init|=
operator|new
name|TextArea
argument_list|()
decl_stmt|;
name|text
operator|.
name|setValue
argument_list|(
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|text
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TextArea"
argument_list|)
expr_stmt|;
name|text
operator|.
name|setVisibleLines
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|text
operator|.
name|setCharacterWidth
argument_list|(
literal|80
argument_list|)
expr_stmt|;
name|text
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|String
argument_list|>
name|event
parameter_list|)
block|{
name|record
operator|.
name|setField
argument_list|(
name|index
argument_list|,
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|label
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|0
else|:
name|event
operator|.
name|getValue
argument_list|()
operator|.
name|split
argument_list|(
literal|"\\n"
argument_list|)
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|setError
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|form
operator|.
name|addRow
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|UniTimeHeaderPanel
name|header
init|=
operator|new
name|UniTimeHeaderPanel
argument_list|()
decl_stmt|;
name|header
operator|.
name|addButton
argument_list|(
literal|"lookup"
argument_list|,
name|MESSAGES
operator|.
name|buttonLookup
argument_list|()
argument_list|,
literal|75
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|iStudentsText
operator|=
name|text
expr_stmt|;
name|iLookup
operator|.
name|center
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|header
operator|.
name|addButton
argument_list|(
literal|"close"
argument_list|,
name|MESSAGES
operator|.
name|buttonClose
argument_list|()
argument_list|,
literal|75
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|dialog
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|form
operator|.
name|addBottomRow
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setText
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setWidget
argument_list|(
name|form
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setEscapeToHide
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|center
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
operator|new
name|UniTimeWidget
argument_list|<
name|HorizontalPanel
argument_list|>
argument_list|(
name|hp
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|person
case|:
name|HorizontalPanel
name|hp
init|=
operator|new
name|HorizontalPanel
argument_list|()
decl_stmt|;
name|String
index|[]
name|name
init|=
name|record
operator|.
name|getValues
argument_list|(
name|index
argument_list|)
decl_stmt|;
specifier|final
name|HTML
name|label
init|=
operator|new
name|HTML
argument_list|(
name|name
operator|.
name|length
operator|<=
literal|2
condition|?
literal|"<i>"
operator|+
name|MESSAGES
operator|.
name|notSet
argument_list|()
operator|+
literal|"</i>"
else|:
name|name
operator|.
name|length
operator|>=
literal|6
operator|&&
operator|!
name|name
index|[
literal|6
index|]
operator|.
name|isEmpty
argument_list|()
condition|?
name|name
index|[
literal|6
index|]
else|:
name|name
index|[
literal|0
index|]
operator|+
literal|", "
operator|+
name|name
index|[
literal|1
index|]
operator|+
operator|(
name|name
index|[
literal|2
index|]
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|" "
operator|+
name|name
index|[
literal|2
index|]
operator|)
argument_list|)
decl_stmt|;
name|label
operator|.
name|setWidth
argument_list|(
name|field
operator|.
name|getWidth
argument_list|()
operator|+
literal|"px"
argument_list|)
expr_stmt|;
name|hp
operator|.
name|add
argument_list|(
name|label
argument_list|)
expr_stmt|;
name|Image
name|change
init|=
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|edit
argument_list|()
argument_list|)
decl_stmt|;
name|hp
operator|.
name|add
argument_list|(
name|change
argument_list|)
expr_stmt|;
name|hp
operator|.
name|setCellVerticalAlignment
argument_list|(
name|change
argument_list|,
name|HasVerticalAlignment
operator|.
name|ALIGN_MIDDLE
argument_list|)
expr_stmt|;
name|hp
operator|.
name|setWidth
argument_list|(
literal|"100%"
argument_list|)
expr_stmt|;
name|hp
operator|.
name|setCellHorizontalAlignment
argument_list|(
name|change
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
name|label
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setPaddingRight
argument_list|(
literal|5
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|change
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|Lookup
name|lookup
init|=
operator|new
name|Lookup
argument_list|()
decl_stmt|;
name|lookup
operator|.
name|setOptions
argument_list|(
literal|"mustHaveExternalId"
argument_list|)
expr_stmt|;
name|String
index|[]
name|name
init|=
name|record
operator|.
name|getValues
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
name|name
operator|.
name|length
operator|>
literal|2
condition|)
name|lookup
operator|.
name|setQuery
argument_list|(
name|name
index|[
literal|0
index|]
operator|+
literal|", "
operator|+
name|name
index|[
literal|1
index|]
operator|+
operator|(
name|name
index|[
literal|2
index|]
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|" "
operator|+
name|name
index|[
literal|2
index|]
operator|)
argument_list|)
expr_stmt|;
name|lookup
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|PersonInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|PersonInterface
argument_list|>
name|event
parameter_list|)
block|{
name|PersonInterface
name|person
init|=
name|event
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|person
operator|!=
literal|null
condition|)
block|{
name|label
operator|.
name|setText
argument_list|(
name|person
operator|.
name|hasFormattedName
argument_list|()
condition|?
name|person
operator|.
name|getFormattedName
argument_list|()
else|:
name|person
operator|.
name|getLastName
argument_list|()
operator|+
literal|", "
operator|+
name|person
operator|.
name|getFirstName
argument_list|()
operator|+
operator|(
name|person
operator|.
name|getMiddleName
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" "
operator|+
name|person
operator|.
name|getMiddleName
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|record
operator|.
name|setField
argument_list|(
name|index
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|record
operator|.
name|addToField
argument_list|(
name|index
argument_list|,
name|person
operator|.
name|getLastName
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|person
operator|.
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
name|record
operator|.
name|addToField
argument_list|(
name|index
argument_list|,
name|person
operator|.
name|getFirstName
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|person
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
name|record
operator|.
name|addToField
argument_list|(
name|index
argument_list|,
name|person
operator|.
name|getMiddleName
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|person
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
name|record
operator|.
name|addToField
argument_list|(
name|index
argument_list|,
name|person
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|person
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|record
operator|.
name|addToField
argument_list|(
name|index
argument_list|,
name|person
operator|.
name|getEmail
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|person
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
name|record
operator|.
name|addToField
argument_list|(
name|index
argument_list|,
name|person
operator|.
name|getAcademicTitle
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|person
operator|.
name|getAcademicTitle
argument_list|()
argument_list|)
expr_stmt|;
name|record
operator|.
name|addToField
argument_list|(
name|index
argument_list|,
name|person
operator|.
name|getFormattedName
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|person
operator|.
name|getFormattedName
argument_list|()
argument_list|)
expr_stmt|;
name|setError
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|lookup
operator|.
name|center
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
operator|new
name|UniTimeWidget
argument_list|<
name|HorizontalPanel
argument_list|>
argument_list|(
name|hp
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|date
case|:
specifier|final
name|SingleDateSelector
name|date
init|=
operator|new
name|SingleDateSelector
argument_list|(
name|iData
operator|.
name|getSessionId
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|iAcademicSessionProvider
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|date
operator|.
name|setText
argument_list|(
name|record
operator|.
name|getField
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|date
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Date
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Date
argument_list|>
name|event
parameter_list|)
block|{
name|record
operator|.
name|setField
argument_list|(
name|index
argument_list|,
name|date
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|setError
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
operator|new
name|UniTimeWidget
argument_list|<
name|SingleDateSelector
argument_list|>
argument_list|(
name|date
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iEditable
operator|&&
name|iData
operator|.
name|isAddable
argument_list|()
operator|&&
name|record
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|date
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Date
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Date
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|iData
operator|.
name|getRecords
argument_list|()
operator|.
name|indexOf
argument_list|(
name|iRecord
argument_list|)
operator|==
name|iData
operator|.
name|getRecords
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|&&
operator|!
name|record
operator|.
name|isEmpty
argument_list|()
condition|)
name|fillRow
argument_list|(
name|iData
operator|.
name|addRecord
argument_list|(
literal|null
argument_list|)
argument_list|,
name|iTable
operator|.
name|insertRow
argument_list|(
name|iTable
operator|.
name|getRowCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
else|else
block|{
switch|switch
condition|(
name|field
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|toggle
case|:
name|Image
name|image
init|=
operator|new
name|Image
argument_list|(
name|record
operator|.
name|getField
argument_list|(
name|index
argument_list|)
operator|!=
literal|null
operator|&&
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|record
operator|.
name|getField
argument_list|(
name|index
argument_list|)
argument_list|)
condition|?
name|RESOURCES
operator|.
name|on
argument_list|()
else|:
name|RESOURCES
operator|.
name|off
argument_list|()
argument_list|)
decl_stmt|;
name|initWidget
argument_list|(
name|image
argument_list|)
expr_stmt|;
break|break;
case|case
name|students
case|:
if|if
condition|(
name|detail
condition|)
block|{
name|HTML
name|html
init|=
operator|new
name|HTML
argument_list|(
name|getValue
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\n"
argument_list|,
literal|"<br>"
argument_list|)
argument_list|)
decl_stmt|;
name|initWidget
argument_list|(
name|html
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Label
name|label
init|=
operator|new
name|Label
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|0
else|:
name|getValue
argument_list|()
operator|.
name|split
argument_list|(
literal|"\\n"
argument_list|)
operator|.
name|length
argument_list|)
argument_list|)
decl_stmt|;
name|initWidget
argument_list|(
name|label
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|person
case|:
name|String
index|[]
name|name
init|=
name|record
operator|.
name|getValues
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|initWidget
argument_list|(
operator|new
name|HTML
argument_list|(
name|name
operator|.
name|length
operator|<=
literal|2
condition|?
literal|"<i>"
operator|+
name|MESSAGES
operator|.
name|notSet
argument_list|()
operator|+
literal|"</i>"
else|:
name|name
operator|.
name|length
operator|>=
literal|6
operator|&&
operator|!
name|name
index|[
literal|6
index|]
operator|.
name|isEmpty
argument_list|()
condition|?
name|name
index|[
literal|6
index|]
else|:
name|name
index|[
literal|0
index|]
operator|+
literal|", "
operator|+
name|name
index|[
literal|1
index|]
operator|+
operator|(
name|name
index|[
literal|2
index|]
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|" "
operator|+
name|name
index|[
literal|2
index|]
operator|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|textarea
case|:
name|HTML
name|html
init|=
operator|new
name|HTML
argument_list|(
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|initWidget
argument_list|(
name|html
argument_list|)
expr_stmt|;
break|break;
default|default:
name|Label
name|label
init|=
operator|new
name|Label
argument_list|(
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|initWidget
argument_list|(
name|label
argument_list|)
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|getType
argument_list|()
operator|==
name|FieldType
operator|.
name|number
condition|)
name|label
operator|.
name|setHorizontalAlignment
argument_list|(
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|detail
operator|&&
name|index
operator|>
literal|0
operator|&&
name|iData
operator|.
name|getFields
argument_list|()
index|[
name|index
index|]
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"|"
argument_list|)
operator|&&
name|isChild
argument_list|(
name|record
argument_list|)
condition|)
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setPaddingLeft
argument_list|(
literal|20
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|setError
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setError
parameter_list|(
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
name|getWidget
argument_list|()
operator|instanceof
name|UniTimeWidget
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|UniTimeWidget
argument_list|<
name|?
argument_list|>
name|w
init|=
operator|(
name|UniTimeWidget
argument_list|<
name|?
argument_list|>
operator|)
name|getWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|message
operator|==
literal|null
operator|||
name|message
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|w
operator|.
name|clearHint
argument_list|()
expr_stmt|;
if|if
condition|(
name|iDetail
operator|&&
name|iField
operator|.
name|isShowParentWhenEmpty
argument_list|()
condition|)
block|{
name|String
name|parent
init|=
name|getParentValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
operator|&&
operator|!
name|parent
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|w
operator|.
name|setHint
argument_list|(
name|MESSAGES
operator|.
name|hintDefaultsToWhenEmpty
argument_list|(
name|parent
operator|.
name|length
argument_list|()
operator|>
literal|80
condition|?
name|parent
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|77
argument_list|)
operator|+
literal|"..."
else|:
name|parent
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
name|w
operator|.
name|setErrorHint
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getParentValue
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isChild
argument_list|(
name|iRecord
argument_list|)
condition|)
return|return
literal|null
return|;
name|Record
name|parent
init|=
name|iData
operator|.
name|getRecord
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|iRecord
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|String
name|value
init|=
name|parent
operator|.
name|getField
argument_list|(
name|iIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
return|return
literal|""
return|;
if|if
condition|(
name|iField
operator|.
name|getType
argument_list|()
operator|==
name|FieldType
operator|.
name|list
condition|)
block|{
for|for
control|(
name|ListItem
name|item
range|:
name|iField
operator|.
name|getValues
argument_list|()
control|)
block|{
if|if
condition|(
name|item
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
return|return
name|item
operator|.
name|getText
argument_list|()
return|;
block|}
block|}
if|else if
condition|(
name|iField
operator|.
name|getType
argument_list|()
operator|==
name|FieldType
operator|.
name|multi
condition|)
block|{
name|String
name|text
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|val
range|:
name|parent
operator|.
name|getValues
argument_list|(
name|iIndex
argument_list|)
control|)
block|{
for|for
control|(
name|ListItem
name|item
range|:
name|iField
operator|.
name|getValues
argument_list|()
control|)
block|{
if|if
condition|(
name|item
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|val
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
name|text
operator|+=
literal|", "
expr_stmt|;
name|text
operator|+=
name|item
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|text
return|;
block|}
return|return
name|value
return|;
block|}
specifier|public
name|String
name|getValue
parameter_list|()
block|{
name|String
name|value
init|=
name|iRecord
operator|.
name|getField
argument_list|(
name|iIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
return|return
literal|""
return|;
if|if
condition|(
name|iField
operator|.
name|getType
argument_list|()
operator|==
name|FieldType
operator|.
name|list
condition|)
block|{
for|for
control|(
name|ListItem
name|item
range|:
name|iField
operator|.
name|getValues
argument_list|()
control|)
block|{
if|if
condition|(
name|item
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
return|return
name|item
operator|.
name|getText
argument_list|()
return|;
block|}
block|}
if|else if
condition|(
name|iField
operator|.
name|getType
argument_list|()
operator|==
name|FieldType
operator|.
name|multi
condition|)
block|{
name|String
name|text
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|val
range|:
name|iRecord
operator|.
name|getValues
argument_list|(
name|iIndex
argument_list|)
control|)
block|{
for|for
control|(
name|ListItem
name|item
range|:
name|iField
operator|.
name|getValues
argument_list|()
control|)
block|{
if|if
condition|(
name|item
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|val
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
name|text
operator|+=
literal|", "
expr_stmt|;
name|text
operator|+=
name|item
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|text
return|;
block|}
return|return
name|value
return|;
block|}
specifier|public
name|Record
name|getRecord
parameter_list|()
block|{
return|return
name|iRecord
return|;
block|}
specifier|public
name|boolean
name|focus
parameter_list|()
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|UniTimeWidget
argument_list|<
name|?
argument_list|>
condition|)
name|w
operator|=
operator|(
operator|(
name|UniTimeWidget
argument_list|<
name|?
argument_list|>
operator|)
name|w
operator|)
operator|.
name|getWidget
argument_list|()
expr_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|Focusable
condition|)
block|{
operator|(
operator|(
name|Focusable
operator|)
name|w
operator|)
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|TextBox
condition|)
operator|(
operator|(
name|TextBox
operator|)
name|w
operator|)
operator|.
name|selectAll
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|Widget
name|getInnerWidget
parameter_list|()
block|{
return|return
name|getWidget
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|HorizontalAlignmentConstant
name|getCellAlignment
parameter_list|()
block|{
switch|switch
condition|(
name|iField
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|toggle
case|:
return|return
name|HasHorizontalAlignment
operator|.
name|ALIGN_CENTER
return|;
case|case
name|students
case|:
return|return
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
return|;
default|default:
return|return
name|HasHorizontalAlignment
operator|.
name|ALIGN_LEFT
return|;
block|}
block|}
block|}
specifier|public
name|void
name|saveOrder
parameter_list|()
block|{
if|if
condition|(
operator|!
name|iData
operator|.
name|isSaveOrder
argument_list|()
condition|)
return|return;
name|iHeader
operator|.
name|setMessage
argument_list|(
name|MESSAGES
operator|.
name|waitSavingOrder
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|ord
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Record
name|r
init|=
name|iTable
operator|.
name|getData
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
operator|||
name|r
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
operator|!
name|ord
operator|.
name|isEmpty
argument_list|()
condition|)
name|ord
operator|+=
literal|"|"
expr_stmt|;
name|ord
operator|+=
name|r
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
block|}
name|SetUserDataRpcRequest
name|data
init|=
operator|new
name|SetUserDataRpcRequest
argument_list|()
decl_stmt|;
name|data
operator|.
name|put
argument_list|(
literal|"SimpleEdit.Order["
operator|+
name|iType
operator|.
name|toString
argument_list|()
operator|+
literal|"]"
argument_list|,
name|ord
argument_list|)
expr_stmt|;
if|if
condition|(
name|iData
operator|.
name|getFields
argument_list|()
index|[
literal|0
index|]
operator|.
name|getType
argument_list|()
operator|==
name|FieldType
operator|.
name|parent
condition|)
block|{
name|String
name|open
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Record
name|r
init|=
name|iTable
operator|.
name|getData
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
operator|||
name|r
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
literal|"-"
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|open
operator|.
name|isEmpty
argument_list|()
condition|)
name|open
operator|+=
literal|"|"
expr_stmt|;
name|open
operator|+=
name|r
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
block|}
block|}
name|data
operator|.
name|put
argument_list|(
literal|"SimpleEdit.Open["
operator|+
name|iType
operator|.
name|toString
argument_list|()
operator|+
literal|"]"
argument_list|,
name|open
argument_list|)
expr_stmt|;
block|}
name|String
name|hidden
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iData
operator|.
name|getFields
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|iTable
operator|.
name|isColumnVisible
argument_list|(
name|i
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|hidden
operator|.
name|isEmpty
argument_list|()
condition|)
name|hidden
operator|+=
literal|"|"
expr_stmt|;
name|hidden
operator|+=
name|iData
operator|.
name|getFields
argument_list|()
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
block|}
name|data
operator|.
name|put
argument_list|(
literal|"SimpleEdit.Hidden["
operator|+
name|iType
operator|.
name|toString
argument_list|()
operator|+
literal|"]"
argument_list|,
name|hidden
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
name|data
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|GwtRpcResponseNull
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|GwtRpcResponseNull
name|result
parameter_list|)
block|{
name|iHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|validate
parameter_list|()
block|{
return|return
name|validate
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|String
name|validate
parameter_list|(
name|Record
name|detailRecord
parameter_list|,
name|List
argument_list|<
name|MyCell
argument_list|>
name|detailCells
parameter_list|)
block|{
name|String
name|valid
init|=
literal|null
decl_stmt|;
name|DateTimeFormat
name|dateFormat
init|=
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|eventDateFormat
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|MyCell
argument_list|>
argument_list|>
name|uniqueMap
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|MyCell
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|SimpleEditInterface
operator|.
name|Record
name|record
init|=
name|iTable
operator|.
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|record
operator|==
literal|null
operator|||
name|record
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|detailRecord
operator|!=
literal|null
operator|&&
name|detailRecord
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
name|detailRecord
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|record
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|iData
operator|.
name|getFields
argument_list|()
operator|.
name|length
condition|;
name|col
operator|++
control|)
block|{
name|Field
name|field
init|=
name|iData
operator|.
name|getFields
argument_list|()
index|[
name|col
index|]
decl_stmt|;
name|String
name|value
init|=
name|record
operator|.
name|getField
argument_list|(
name|col
argument_list|)
decl_stmt|;
name|MyCell
name|widget
init|=
operator|(
name|MyCell
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
decl_stmt|;
name|widget
operator|.
name|setError
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|field
operator|.
name|isEditable
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|field
operator|.
name|isUnique
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|MyCell
argument_list|>
name|values
init|=
name|uniqueMap
operator|.
name|get
argument_list|(
name|col
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
name|values
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|MyCell
argument_list|>
argument_list|()
expr_stmt|;
name|uniqueMap
operator|.
name|put
argument_list|(
name|col
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|widget
operator|.
name|setError
argument_list|(
name|MESSAGES
operator|.
name|errorMustBeSet
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|valid
operator|==
literal|null
operator|&&
name|detailRecord
operator|==
literal|null
condition|)
block|{
name|valid
operator|=
name|MESSAGES
operator|.
name|errorMustBeSet
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|MyCell
name|old
init|=
name|values
operator|.
name|put
argument_list|(
name|value
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
block|{
name|widget
operator|.
name|setError
argument_list|(
name|MESSAGES
operator|.
name|errorMustBeUnique
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|old
operator|.
name|setError
argument_list|(
name|MESSAGES
operator|.
name|errorMustBeUnique
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|valid
operator|==
literal|null
operator|&&
name|detailRecord
operator|==
literal|null
condition|)
block|{
name|valid
operator|=
name|MESSAGES
operator|.
name|errorMustBeUnique
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|else if
condition|(
name|field
operator|.
name|isNotEmpty
argument_list|()
operator|||
operator|(
name|isParent
argument_list|(
name|record
argument_list|)
operator|&&
name|field
operator|.
name|isParentNotEmpty
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|widget
operator|.
name|setError
argument_list|(
name|MESSAGES
operator|.
name|errorMustBeSet
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|valid
operator|==
literal|null
operator|&&
name|detailRecord
operator|==
literal|null
condition|)
block|{
name|valid
operator|=
name|MESSAGES
operator|.
name|errorMustBeSet
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
switch|switch
condition|(
name|field
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|date
case|:
name|Date
name|date
init|=
literal|null
decl_stmt|;
try|try
block|{
name|date
operator|=
name|dateFormat
operator|.
name|parse
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|widget
operator|.
name|setError
argument_list|(
name|MESSAGES
operator|.
name|errorNotValidDate
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|valid
operator|==
literal|null
operator|&&
name|detailRecord
operator|==
literal|null
condition|)
block|{
name|valid
operator|=
name|MESSAGES
operator|.
name|errorNotValidDate
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|date
operator|==
literal|null
operator|&&
name|field
operator|.
name|isNotEmpty
argument_list|()
condition|)
block|{
name|widget
operator|.
name|setError
argument_list|(
name|MESSAGES
operator|.
name|errorMustBeSet
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|valid
operator|==
literal|null
operator|&&
name|detailRecord
operator|==
literal|null
condition|)
block|{
name|valid
operator|=
name|MESSAGES
operator|.
name|errorMustBeSet
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|textarea
case|:
if|if
condition|(
name|value
operator|.
name|length
argument_list|()
operator|>
name|field
operator|.
name|getLength
argument_list|()
condition|)
block|{
name|widget
operator|.
name|setError
argument_list|(
name|MESSAGES
operator|.
name|errorTooLong
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|valid
operator|==
literal|null
operator|&&
name|detailRecord
operator|==
literal|null
condition|)
block|{
name|valid
operator|=
name|MESSAGES
operator|.
name|errorTooLong
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
name|detailRecord
operator|!=
literal|null
operator|&&
operator|!
name|detailCells
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|SimpleEditInterface
operator|.
name|Record
name|record
init|=
name|detailRecord
decl_stmt|;
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|iData
operator|.
name|getFields
argument_list|()
operator|.
name|length
condition|;
name|col
operator|++
control|)
block|{
name|Field
name|field
init|=
name|iData
operator|.
name|getFields
argument_list|()
index|[
name|col
index|]
decl_stmt|;
name|String
name|value
init|=
name|record
operator|.
name|getField
argument_list|(
name|col
argument_list|)
decl_stmt|;
name|MyCell
name|widget
init|=
name|detailCells
operator|.
name|get
argument_list|(
name|col
argument_list|)
decl_stmt|;
name|widget
operator|.
name|setError
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|field
operator|.
name|isEditable
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|field
operator|.
name|isUnique
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|MyCell
argument_list|>
name|values
init|=
name|uniqueMap
operator|.
name|get
argument_list|(
name|col
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
name|values
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|MyCell
argument_list|>
argument_list|()
expr_stmt|;
name|uniqueMap
operator|.
name|put
argument_list|(
name|col
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|widget
operator|.
name|setError
argument_list|(
name|MESSAGES
operator|.
name|errorMustBeSet
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|valid
operator|==
literal|null
condition|)
block|{
name|valid
operator|=
name|MESSAGES
operator|.
name|errorMustBeSet
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|MyCell
name|old
init|=
name|values
operator|.
name|put
argument_list|(
name|value
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
block|{
name|widget
operator|.
name|setError
argument_list|(
name|MESSAGES
operator|.
name|errorMustBeUnique
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|old
operator|.
name|setError
argument_list|(
name|MESSAGES
operator|.
name|errorMustBeUnique
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|valid
operator|==
literal|null
condition|)
block|{
name|valid
operator|=
name|MESSAGES
operator|.
name|errorMustBeUnique
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|else if
condition|(
name|field
operator|.
name|isNotEmpty
argument_list|()
operator|||
operator|(
name|isParent
argument_list|(
name|record
argument_list|)
operator|&&
name|field
operator|.
name|isParentNotEmpty
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|widget
operator|.
name|setError
argument_list|(
name|MESSAGES
operator|.
name|errorMustBeSet
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|valid
operator|==
literal|null
condition|)
block|{
name|valid
operator|=
name|MESSAGES
operator|.
name|errorMustBeSet
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
switch|switch
condition|(
name|field
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|date
case|:
name|Date
name|date
init|=
literal|null
decl_stmt|;
try|try
block|{
name|date
operator|=
name|dateFormat
operator|.
name|parse
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|widget
operator|.
name|setError
argument_list|(
name|MESSAGES
operator|.
name|errorNotValidDate
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|valid
operator|==
literal|null
condition|)
block|{
name|valid
operator|=
name|MESSAGES
operator|.
name|errorNotValidDate
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|date
operator|==
literal|null
operator|&&
name|field
operator|.
name|isNotEmpty
argument_list|()
condition|)
block|{
name|widget
operator|.
name|setError
argument_list|(
name|MESSAGES
operator|.
name|errorMustBeSet
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|valid
operator|==
literal|null
condition|)
block|{
name|valid
operator|=
name|MESSAGES
operator|.
name|errorMustBeSet
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|textarea
case|:
if|if
condition|(
name|value
operator|.
name|length
argument_list|()
operator|>
name|field
operator|.
name|getLength
argument_list|()
condition|)
block|{
name|widget
operator|.
name|setError
argument_list|(
name|MESSAGES
operator|.
name|errorTooLong
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|valid
operator|==
literal|null
condition|)
block|{
name|valid
operator|=
name|MESSAGES
operator|.
name|errorTooLong
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
block|}
block|}
block|}
return|return
name|valid
return|;
block|}
specifier|public
specifier|static
class|class
name|SimpleFormWithMouseOver
extends|extends
name|SimpleForm
block|{
specifier|public
name|SimpleFormWithMouseOver
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEOVER
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEOUT
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onBrowserEvent
parameter_list|(
specifier|final
name|Event
name|event
parameter_list|)
block|{
name|Element
name|td
init|=
name|getEventTargetCell
argument_list|(
name|event
argument_list|)
decl_stmt|;
if|if
condition|(
name|td
operator|==
literal|null
condition|)
return|return;
specifier|final
name|Element
name|tr
init|=
name|DOM
operator|.
name|getParent
argument_list|(
name|td
argument_list|)
decl_stmt|;
name|int
name|col
init|=
name|DOM
operator|.
name|getChildIndex
argument_list|(
name|tr
argument_list|,
name|td
argument_list|)
decl_stmt|;
name|Element
name|body
init|=
name|DOM
operator|.
name|getParent
argument_list|(
name|tr
argument_list|)
decl_stmt|;
name|int
name|row
init|=
name|DOM
operator|.
name|getChildIndex
argument_list|(
name|body
argument_list|,
name|tr
argument_list|)
decl_stmt|;
name|Widget
name|widget
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
decl_stmt|;
if|if
condition|(
name|widget
operator|!=
literal|null
operator|&&
name|widget
operator|instanceof
name|UniTimeHeaderPanel
condition|)
block|{
name|super
operator|.
name|onBrowserEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|DOM
operator|.
name|eventGetType
argument_list|(
name|event
argument_list|)
condition|)
block|{
case|case
name|Event
operator|.
name|ONMOUSEOVER
case|:
name|getRowFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
literal|"hover"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Event
operator|.
name|ONMOUSEOUT
case|:
name|getRowFormatter
argument_list|()
operator|.
name|removeStyleName
argument_list|(
name|row
argument_list|,
literal|"hover"
argument_list|)
expr_stmt|;
break|break;
block|}
name|super
operator|.
name|onBrowserEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

