begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|admin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|page
operator|.
name|UniTimePageLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|SimpleForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeHeaderPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|DataChangedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|DataChangedListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|HasFocus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|MenuService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|MenuServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|SimpleEditService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|SimpleEditServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
operator|.
name|FieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
operator|.
name|ListItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
operator|.
name|Record
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Cursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|CheckBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Focusable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ListBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|TextBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|SimpleEditPage
extends|extends
name|Composite
block|{
specifier|public
specifier|static
specifier|final
name|GwtResources
name|RESOURCES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtResources
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|SimpleEditServiceAsync
name|iService
init|=
name|GWT
operator|.
name|create
argument_list|(
name|SimpleEditService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|MenuServiceAsync
name|iMenuService
init|=
name|GWT
operator|.
name|create
argument_list|(
name|MenuService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|SimpleForm
name|iPanel
decl_stmt|;
specifier|private
name|UniTimeHeaderPanel
name|iHeader
decl_stmt|,
name|iBottom
decl_stmt|;
specifier|private
name|SimpleEditInterface
operator|.
name|Type
name|iType
decl_stmt|;
specifier|private
name|UniTimeTable
argument_list|<
name|Record
argument_list|>
name|iTable
decl_stmt|;
specifier|private
name|SimpleEditInterface
name|iData
decl_stmt|;
specifier|private
name|boolean
name|iEditable
init|=
literal|false
decl_stmt|;
specifier|public
name|SimpleEditPage
parameter_list|()
throws|throws
name|SimpleEditException
block|{
name|String
name|typeString
init|=
name|Window
operator|.
name|Location
operator|.
name|getParameter
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeString
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SimpleEditException
argument_list|(
literal|"Edit type is not provided."
argument_list|)
throw|;
name|iType
operator|=
name|SimpleEditInterface
operator|.
name|Type
operator|.
name|valueOf
argument_list|(
name|typeString
argument_list|)
expr_stmt|;
if|if
condition|(
name|iType
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SimpleEditException
argument_list|(
literal|"Edit type not recognized."
argument_list|)
throw|;
name|UniTimePageLabel
operator|.
name|getInstance
argument_list|()
operator|.
name|setPageName
argument_list|(
name|iType
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|ClickHandler
name|save
init|=
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|iData
operator|.
name|getRecords
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iData
operator|.
name|getRecords
argument_list|()
operator|.
name|addAll
argument_list|(
name|iTable
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setMessage
argument_list|(
literal|"Saving data..."
argument_list|)
expr_stmt|;
name|iService
operator|.
name|save
argument_list|(
name|iData
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|SimpleEditInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
literal|"Save failed ("
operator|+
name|caught
operator|.
name|getMessage
argument_list|()
operator|+
literal|")."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|SimpleEditInterface
name|result
parameter_list|)
block|{
name|iData
operator|=
name|result
expr_stmt|;
name|iEditable
operator|=
literal|false
expr_stmt|;
name|refreshTable
argument_list|()
expr_stmt|;
name|saveOrder
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|ClickHandler
name|edit
init|=
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|iEditable
operator|=
literal|true
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"edit"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|refreshTable
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|ClickHandler
name|back
init|=
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|iEditable
operator|=
literal|false
expr_stmt|;
name|load
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|iPanel
operator|=
operator|new
name|SimpleForm
argument_list|()
expr_stmt|;
name|iHeader
operator|=
operator|new
name|UniTimeHeaderPanel
argument_list|()
expr_stmt|;
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"edit"
argument_list|,
literal|"<u>E</u>dit"
argument_list|,
literal|'e'
argument_list|,
literal|75
argument_list|,
name|edit
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"save"
argument_list|,
literal|"<u>S</u>ave"
argument_list|,
literal|'s'
argument_list|,
literal|75
argument_list|,
name|save
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"back"
argument_list|,
literal|"<u>B</u>ack"
argument_list|,
literal|'b'
argument_list|,
literal|75
argument_list|,
name|back
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|addHeaderRow
argument_list|(
name|iHeader
argument_list|)
expr_stmt|;
name|iTable
operator|=
operator|new
name|UniTimeTable
argument_list|<
name|Record
argument_list|>
argument_list|()
expr_stmt|;
name|iPanel
operator|.
name|addRow
argument_list|(
name|iTable
argument_list|)
expr_stmt|;
name|iBottom
operator|=
name|iHeader
operator|.
name|clonePanel
argument_list|()
expr_stmt|;
name|iPanel
operator|.
name|addNotPrintableBottomRow
argument_list|(
name|iBottom
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|iPanel
argument_list|)
expr_stmt|;
specifier|final
name|Timer
name|timer
init|=
operator|new
name|Timer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|saveOrder
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|iTable
operator|.
name|addDataChangedListener
argument_list|(
operator|new
name|DataChangedListener
argument_list|<
name|Record
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onDataInserted
parameter_list|(
name|DataChangedEvent
argument_list|<
name|Record
argument_list|>
name|event
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|onDataMoved
parameter_list|(
name|List
argument_list|<
name|DataChangedEvent
argument_list|<
name|Record
argument_list|>
argument_list|>
name|event
parameter_list|)
block|{
name|timer
operator|.
name|schedule
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onDataRemoved
parameter_list|(
name|DataChangedEvent
argument_list|<
name|Record
argument_list|>
name|event
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|onDataSorted
parameter_list|(
name|List
argument_list|<
name|DataChangedEvent
argument_list|<
name|Record
argument_list|>
argument_list|>
name|event
parameter_list|)
block|{
block|}
block|}
argument_list|)
expr_stmt|;
name|load
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|load
parameter_list|()
block|{
name|iBottom
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"save"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"edit"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"back"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setMessage
argument_list|(
literal|"Loading data..."
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|clearTable
argument_list|()
expr_stmt|;
name|iService
operator|.
name|load
argument_list|(
name|iType
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|SimpleEditInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|SimpleEditInterface
name|result
parameter_list|)
block|{
name|iData
operator|=
name|result
expr_stmt|;
specifier|final
name|Comparator
argument_list|<
name|Record
argument_list|>
name|cmp
init|=
name|iData
operator|.
name|getComparator
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|ordRequest
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ordRequest
operator|.
name|add
argument_list|(
literal|"SimpleEdit.Order["
operator|+
name|iType
operator|.
name|toString
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|iMenuService
operator|.
name|getUserData
argument_list|(
name|ordRequest
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|result
parameter_list|)
block|{
specifier|final
name|String
name|order
init|=
literal|"|"
operator|+
name|result
operator|.
name|get
argument_list|(
literal|"SimpleEdit.Order["
operator|+
name|iType
operator|.
name|toString
argument_list|()
operator|+
literal|"]"
argument_list|)
operator|+
literal|"|"
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|iData
operator|.
name|getRecords
argument_list|()
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Record
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Record
name|r1
parameter_list|,
name|Record
name|r2
parameter_list|)
block|{
name|int
name|i1
init|=
operator|(
name|r1
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|order
operator|.
name|indexOf
argument_list|(
literal|"|"
operator|+
name|r1
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"|"
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|i1
operator|>=
literal|0
condition|)
block|{
name|int
name|i2
init|=
operator|(
name|r2
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|order
operator|.
name|indexOf
argument_list|(
literal|"|"
operator|+
name|r2
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"|"
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|i2
operator|>=
literal|0
condition|)
block|{
return|return
operator|(
name|i1
operator|<
name|i2
condition|?
operator|-
literal|1
else|:
name|i1
operator|>
name|i2
condition|?
literal|1
else|:
name|cmp
operator|.
name|compare
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|)
operator|)
return|;
block|}
block|}
return|return
name|cmp
operator|.
name|compare
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|refreshTable
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|iData
operator|.
name|getRecords
argument_list|()
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|refreshTable
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
literal|"Unable to load data ("
operator|+
name|caught
operator|.
name|getMessage
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|refreshTable
parameter_list|()
block|{
name|iTable
operator|.
name|clearTable
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Widget
argument_list|>
name|header
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|col
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|Field
name|field
range|:
name|iData
operator|.
name|getFields
argument_list|()
control|)
block|{
name|UniTimeTableHeader
name|cell
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|col
operator|+
literal|1
operator|==
name|iData
operator|.
name|getFields
argument_list|()
operator|.
name|length
operator|&&
name|iData
operator|.
name|isEditable
argument_list|()
operator|&&
name|iEditable
condition|?
literal|3
else|:
literal|1
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
specifier|final
name|int
name|index
init|=
name|col
decl_stmt|;
name|cell
operator|.
name|addOperation
argument_list|(
operator|new
name|UniTimeTableHeader
operator|.
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iTable
operator|.
name|sort
argument_list|(
operator|new
name|Comparator
argument_list|<
name|Record
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Record
name|a
parameter_list|,
name|Record
name|b
parameter_list|)
block|{
name|String
name|f
init|=
name|a
operator|.
name|getField
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|String
name|g
init|=
name|b
operator|.
name|getField
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|g
operator|!=
literal|null
condition|)
return|return
literal|1
return|;
block|}
else|else
block|{
if|if
condition|(
name|g
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|cmp
init|=
name|f
operator|.
name|compareTo
argument_list|(
name|g
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
return|return
operator|(
name|a
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|?
name|b
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
literal|1
else|:
name|b
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|a
operator|.
name|getUniqueId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|b
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|saveOrder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Sort by "
operator|+
name|field
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|col
operator|++
expr_stmt|;
block|}
name|iTable
operator|.
name|addRow
argument_list|(
literal|null
argument_list|,
name|header
argument_list|)
expr_stmt|;
name|boolean
name|empty
init|=
literal|false
decl_stmt|;
name|int
name|row
init|=
literal|1
decl_stmt|;
for|for
control|(
name|Record
name|r
range|:
name|iData
operator|.
name|getRecords
argument_list|()
control|)
block|{
name|fillRow
argument_list|(
name|r
argument_list|,
name|row
operator|++
argument_list|)
expr_stmt|;
name|empty
operator|=
name|r
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|empty
operator|&&
name|iEditable
operator|&&
name|iData
operator|.
name|isEditable
argument_list|()
condition|)
name|fillRow
argument_list|(
name|iData
operator|.
name|addRecord
argument_list|(
literal|null
argument_list|)
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|iBottom
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|iData
operator|.
name|isEditable
argument_list|()
condition|)
block|{
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"back"
argument_list|,
name|iEditable
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"save"
argument_list|,
name|iEditable
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"edit"
argument_list|,
operator|!
name|iEditable
argument_list|)
expr_stmt|;
block|}
name|iHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|fillRow
parameter_list|(
name|Record
name|record
parameter_list|,
name|int
name|row
parameter_list|)
block|{
name|List
argument_list|<
name|Widget
argument_list|>
name|line
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|col
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|iData
operator|.
name|getFields
argument_list|()
control|)
block|{
name|MyCell
name|cell
init|=
operator|new
name|MyCell
argument_list|(
name|iData
operator|.
name|isEditable
argument_list|()
operator|&&
name|iEditable
argument_list|,
name|field
argument_list|,
name|record
argument_list|,
name|col
operator|++
argument_list|)
decl_stmt|;
name|line
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iData
operator|.
name|isEditable
argument_list|()
operator|&&
name|iEditable
condition|)
block|{
name|Image
name|add
init|=
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|add
argument_list|()
argument_list|)
decl_stmt|;
name|add
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setCursor
argument_list|(
name|Cursor
operator|.
name|POINTER
argument_list|)
expr_stmt|;
name|add
operator|.
name|setTitle
argument_list|(
literal|"Insert a new row above this row."
argument_list|)
expr_stmt|;
name|add
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|int
name|row
init|=
name|iTable
operator|.
name|getCellForEvent
argument_list|(
name|event
argument_list|)
operator|.
name|getRowIndex
argument_list|()
decl_stmt|;
name|fillRow
argument_list|(
name|iData
operator|.
name|addRecord
argument_list|(
literal|null
argument_list|)
argument_list|,
name|iTable
operator|.
name|insertRow
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|add
argument_list|)
expr_stmt|;
name|Image
name|delete
init|=
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|delete
argument_list|()
argument_list|)
decl_stmt|;
name|delete
operator|.
name|setTitle
argument_list|(
literal|"Delete this row."
argument_list|)
expr_stmt|;
name|delete
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setCursor
argument_list|(
name|Cursor
operator|.
name|POINTER
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|int
name|row
init|=
name|iTable
operator|.
name|getCellForEvent
argument_list|(
name|event
argument_list|)
operator|.
name|getRowIndex
argument_list|()
decl_stmt|;
name|iData
operator|.
name|getRecords
argument_list|()
operator|.
name|remove
argument_list|(
name|iTable
operator|.
name|getData
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|removeRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
name|iTable
operator|.
name|setRow
argument_list|(
name|row
argument_list|,
name|record
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
specifier|public
class|class
name|MyCell
extends|extends
name|Composite
implements|implements
name|HasFocus
block|{
specifier|private
name|Field
name|iField
decl_stmt|;
specifier|private
name|Record
name|iRecord
decl_stmt|;
specifier|private
name|int
name|iIndex
decl_stmt|;
specifier|public
name|MyCell
parameter_list|(
name|boolean
name|editable
parameter_list|,
name|Field
name|field
parameter_list|,
specifier|final
name|Record
name|record
parameter_list|,
specifier|final
name|int
name|index
parameter_list|)
block|{
name|iField
operator|=
name|field
expr_stmt|;
name|iRecord
operator|=
name|record
expr_stmt|;
name|iIndex
operator|=
name|index
expr_stmt|;
if|if
condition|(
name|editable
condition|)
block|{
if|if
condition|(
name|field
operator|.
name|getType
argument_list|()
operator|==
name|FieldType
operator|.
name|text
condition|)
block|{
specifier|final
name|TextBox
name|text
init|=
operator|new
name|TextBox
argument_list|()
decl_stmt|;
name|text
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TextBox"
argument_list|)
expr_stmt|;
name|text
operator|.
name|setMaxLength
argument_list|(
name|field
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|text
operator|.
name|setText
argument_list|(
name|record
operator|.
name|getField
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|text
operator|.
name|setWidth
argument_list|(
name|field
operator|.
name|getWidth
argument_list|()
operator|+
literal|"px"
argument_list|)
expr_stmt|;
name|text
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|record
operator|.
name|setField
argument_list|(
name|index
argument_list|,
name|text
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|field
operator|.
name|getType
argument_list|()
operator|==
name|FieldType
operator|.
name|list
condition|)
block|{
specifier|final
name|ListBox
name|list
init|=
operator|new
name|ListBox
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|list
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TextBox"
argument_list|)
expr_stmt|;
if|if
condition|(
name|record
operator|.
name|getField
argument_list|(
name|index
argument_list|)
operator|==
literal|null
condition|)
block|{
name|list
operator|.
name|addItem
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ListItem
name|item
range|:
name|field
operator|.
name|getValues
argument_list|()
control|)
name|list
operator|.
name|addItem
argument_list|(
name|item
operator|.
name|getText
argument_list|()
argument_list|,
name|item
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|getItemCount
argument_list|()
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|list
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|record
operator|.
name|getField
argument_list|(
name|index
argument_list|)
argument_list|)
condition|)
name|list
operator|.
name|setSelectedIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|list
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|record
operator|.
name|setField
argument_list|(
name|index
argument_list|,
operator|(
name|list
operator|.
name|getSelectedIndex
argument_list|()
operator|<
literal|0
operator|||
name|list
operator|.
name|getValue
argument_list|(
name|list
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|list
operator|.
name|getValue
argument_list|(
name|list
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|field
operator|.
name|getType
argument_list|()
operator|==
name|FieldType
operator|.
name|multi
condition|)
block|{
specifier|final
name|ListBox
name|list
init|=
operator|new
name|ListBox
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|list
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TextBox"
argument_list|)
expr_stmt|;
name|list
operator|.
name|setVisibleItemCount
argument_list|(
literal|3
argument_list|)
expr_stmt|;
for|for
control|(
name|ListItem
name|item
range|:
name|field
operator|.
name|getValues
argument_list|()
control|)
name|list
operator|.
name|addItem
argument_list|(
name|item
operator|.
name|getText
argument_list|()
argument_list|,
name|item
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|vals
init|=
name|record
operator|.
name|getValues
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|vals
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|val
range|:
name|vals
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|getItemCount
argument_list|()
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|list
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|val
argument_list|)
condition|)
name|list
operator|.
name|setItemSelected
argument_list|(
name|i
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|list
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|record
operator|.
name|setField
argument_list|(
name|index
argument_list|,
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|getItemCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|list
operator|.
name|isItemSelected
argument_list|(
name|i
argument_list|)
condition|)
name|record
operator|.
name|addToField
argument_list|(
name|index
argument_list|,
name|list
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|field
operator|.
name|getType
argument_list|()
operator|==
name|FieldType
operator|.
name|toggle
condition|)
block|{
specifier|final
name|CheckBox
name|check
init|=
operator|new
name|CheckBox
argument_list|()
decl_stmt|;
name|check
operator|.
name|setValue
argument_list|(
name|record
operator|.
name|getField
argument_list|(
name|index
argument_list|)
operator|==
literal|null
condition|?
literal|null
else|:
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|record
operator|.
name|getField
argument_list|(
name|index
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|check
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|record
operator|.
name|setField
argument_list|(
name|index
argument_list|,
name|check
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|check
operator|.
name|getValue
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|check
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Label
name|label
init|=
operator|new
name|Label
argument_list|(
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|initWidget
argument_list|(
name|label
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getValue
parameter_list|()
block|{
name|String
name|value
init|=
name|iRecord
operator|.
name|getField
argument_list|(
name|iIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
return|return
literal|""
return|;
if|if
condition|(
name|iField
operator|.
name|getType
argument_list|()
operator|==
name|FieldType
operator|.
name|list
condition|)
block|{
for|for
control|(
name|ListItem
name|item
range|:
name|iField
operator|.
name|getValues
argument_list|()
control|)
block|{
if|if
condition|(
name|item
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
return|return
name|item
operator|.
name|getText
argument_list|()
return|;
block|}
block|}
if|else if
condition|(
name|iField
operator|.
name|getType
argument_list|()
operator|==
name|FieldType
operator|.
name|multi
condition|)
block|{
name|String
name|text
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|val
range|:
name|iRecord
operator|.
name|getValues
argument_list|(
name|iIndex
argument_list|)
control|)
block|{
for|for
control|(
name|ListItem
name|item
range|:
name|iField
operator|.
name|getValues
argument_list|()
control|)
block|{
if|if
condition|(
name|item
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|val
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
name|text
operator|+=
literal|", "
expr_stmt|;
name|text
operator|+=
name|item
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|text
return|;
block|}
return|return
name|value
return|;
block|}
specifier|public
name|Record
name|getRecord
parameter_list|()
block|{
return|return
name|iRecord
return|;
block|}
specifier|public
name|boolean
name|focus
parameter_list|()
block|{
if|if
condition|(
name|getWidget
argument_list|()
operator|instanceof
name|Focusable
condition|)
block|{
operator|(
operator|(
name|Focusable
operator|)
name|getWidget
argument_list|()
operator|)
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|getWidget
argument_list|()
operator|instanceof
name|TextBox
condition|)
operator|(
operator|(
name|TextBox
operator|)
name|getWidget
argument_list|()
operator|)
operator|.
name|selectAll
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|void
name|saveOrder
parameter_list|()
block|{
name|iHeader
operator|.
name|setMessage
argument_list|(
literal|"Saving order..."
argument_list|)
expr_stmt|;
name|String
name|ord
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Record
name|r
init|=
name|iTable
operator|.
name|getData
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
operator|||
name|r
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
operator|!
name|ord
operator|.
name|isEmpty
argument_list|()
condition|)
name|ord
operator|+=
literal|"|"
expr_stmt|;
name|ord
operator|+=
name|r
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|data
init|=
operator|new
name|ArrayList
argument_list|<
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|data
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"SimpleEdit.Order["
operator|+
name|iType
operator|.
name|toString
argument_list|()
operator|+
literal|"]"
block|,
name|ord
block|}
argument_list|)
expr_stmt|;
name|iMenuService
operator|.
name|setUserData
argument_list|(
name|data
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
comment|// iHeader.setErrorMessage("Failed to save table order (" + caught.getMessage() + ")");
name|iHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{
name|iHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

