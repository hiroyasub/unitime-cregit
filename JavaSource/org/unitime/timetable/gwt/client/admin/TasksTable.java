begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|admin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|GwtHint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|P
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|ServerDateTimeFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|TimeSelector
operator|.
name|TimeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
operator|.
name|HasColumnName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TaskInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ScriptInterface
operator|.
name|ScriptParameterInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TaskInterface
operator|.
name|ExecutionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TaskInterface
operator|.
name|MultiExecutionInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TaskInterface
operator|.
name|TaskExecutionInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TaskInterface
operator|.
name|TaskOptionsInterface
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseOutEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseOutHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseOverEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseOverHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|DateTimeFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|TakesValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
operator|.
name|HorizontalAlignmentConstant
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|TasksTable
extends|extends
name|UniTimeTable
argument_list|<
name|TaskInterface
argument_list|>
implements|implements
name|TakesValue
argument_list|<
name|List
argument_list|<
name|TaskInterface
argument_list|>
argument_list|>
block|{
specifier|protected
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|GwtConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|TasksTableColumn
name|iSortBy
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iAsc
init|=
literal|true
decl_stmt|;
specifier|private
name|TaskOptionsInterface
name|iOptions
decl_stmt|;
specifier|private
specifier|static
name|DateTimeFormat
name|sDateFormatShort
init|=
name|ServerDateTimeFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|eventDateFormatShort
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|DateTimeFormat
name|sDateFormatLong
init|=
name|ServerDateTimeFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|eventDateFormatLong
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
name|TasksTable
parameter_list|()
block|{
name|setStyleName
argument_list|(
literal|"unitime-PeriodicTaskTable"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|UniTimeTableHeader
argument_list|>
name|header
init|=
operator|new
name|ArrayList
argument_list|<
name|UniTimeTableHeader
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TasksTableColumn
name|column
range|:
name|TasksTableColumn
operator|.
name|values
argument_list|()
control|)
block|{
name|int
name|nrCells
init|=
name|getNbrCells
argument_list|(
name|column
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|nrCells
condition|;
name|idx
operator|++
control|)
block|{
name|UniTimeTableHeader
name|h
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|getColumnName
argument_list|(
name|column
argument_list|,
name|idx
argument_list|)
argument_list|,
name|getColumnAlignment
argument_list|(
name|column
argument_list|,
name|idx
argument_list|)
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
specifier|final
name|TasksTableColumn
name|column
range|:
name|TasksTableColumn
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|TasksTableComparator
operator|.
name|isApplicable
argument_list|(
name|column
argument_list|)
operator|&&
name|getNbrCells
argument_list|(
name|column
argument_list|)
operator|>
literal|0
condition|)
block|{
specifier|final
name|UniTimeTableHeader
name|h
init|=
name|header
operator|.
name|get
argument_list|(
name|getCellIndex
argument_list|(
name|column
argument_list|)
argument_list|)
decl_stmt|;
name|Operation
name|op
init|=
operator|new
name|SortOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|doSort
argument_list|(
name|column
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|getRowCount
argument_list|()
operator|>
literal|1
operator|&&
name|h
operator|.
name|isVisible
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opSortBy
argument_list|(
name|getColumnName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getColumnName
parameter_list|()
block|{
return|return
name|h
operator|.
name|getHTML
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|" "
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|h
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
block|}
name|addRow
argument_list|(
literal|null
argument_list|,
name|header
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getCellCount
argument_list|(
literal|0
argument_list|)
condition|;
name|i
operator|++
control|)
name|getCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
literal|0
argument_list|,
name|i
argument_list|,
literal|"unitime-ClickableTableHeader"
argument_list|)
expr_stmt|;
name|setSortBy
argument_list|(
name|AdminCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getSortTasksBy
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setOptions
parameter_list|(
name|TaskOptionsInterface
name|options
parameter_list|)
block|{
name|iOptions
operator|=
name|options
expr_stmt|;
block|}
specifier|public
name|TaskOptionsInterface
name|getOptions
parameter_list|()
block|{
return|return
name|iOptions
return|;
block|}
specifier|protected
name|void
name|doSort
parameter_list|(
name|TasksTableColumn
name|column
parameter_list|)
block|{
if|if
condition|(
name|column
operator|==
name|iSortBy
condition|)
block|{
name|iAsc
operator|=
operator|!
name|iAsc
expr_stmt|;
block|}
else|else
block|{
name|iSortBy
operator|=
name|column
expr_stmt|;
name|iAsc
operator|=
literal|true
expr_stmt|;
block|}
name|AdminCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setSortTasksBy
argument_list|(
name|getSortBy
argument_list|()
argument_list|)
expr_stmt|;
name|sort
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasSortBy
parameter_list|()
block|{
return|return
name|iSortBy
operator|!=
literal|null
return|;
block|}
specifier|public
name|int
name|getSortBy
parameter_list|()
block|{
return|return
name|iSortBy
operator|==
literal|null
condition|?
literal|0
else|:
name|iAsc
condition|?
literal|1
operator|+
name|iSortBy
operator|.
name|ordinal
argument_list|()
else|:
operator|-
literal|1
operator|-
name|iSortBy
operator|.
name|ordinal
argument_list|()
return|;
block|}
specifier|public
name|void
name|setSortBy
parameter_list|(
name|int
name|sortBy
parameter_list|)
block|{
if|if
condition|(
name|sortBy
operator|==
literal|0
condition|)
block|{
name|iSortBy
operator|=
literal|null
expr_stmt|;
name|iAsc
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|sortBy
operator|>
literal|0
condition|)
block|{
name|iSortBy
operator|=
name|TasksTableColumn
operator|.
name|values
argument_list|()
index|[
name|sortBy
operator|-
literal|1
index|]
expr_stmt|;
name|iAsc
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|iSortBy
operator|=
name|TasksTableColumn
operator|.
name|values
argument_list|()
index|[
operator|-
literal|1
operator|-
name|sortBy
index|]
expr_stmt|;
name|iAsc
operator|=
literal|false
expr_stmt|;
block|}
name|sort
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|sort
parameter_list|()
block|{
if|if
condition|(
name|iSortBy
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|getNbrCells
argument_list|(
name|iSortBy
argument_list|)
operator|==
literal|0
condition|)
name|iSortBy
operator|=
name|TasksTableColumn
operator|.
name|NAME
expr_stmt|;
name|UniTimeTableHeader
name|header
init|=
name|getHeader
argument_list|(
name|getCellIndex
argument_list|(
name|iSortBy
argument_list|)
argument_list|)
decl_stmt|;
name|sort
argument_list|(
name|header
argument_list|,
operator|new
name|TasksTableComparator
argument_list|(
name|iSortBy
argument_list|,
literal|true
argument_list|)
argument_list|,
name|iAsc
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|int
name|getNbrCells
parameter_list|(
name|TasksTableColumn
name|column
parameter_list|)
block|{
switch|switch
condition|(
name|column
condition|)
block|{
default|default:
return|return
literal|1
return|;
block|}
block|}
specifier|public
name|String
name|getColumnName
parameter_list|(
name|TasksTableColumn
name|column
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
switch|switch
condition|(
name|column
condition|)
block|{
case|case
name|NAME
case|:
return|return
name|MESSAGES
operator|.
name|colTaskName
argument_list|()
return|;
case|case
name|SCRIPT
case|:
return|return
name|MESSAGES
operator|.
name|colTaskScript
argument_list|()
return|;
case|case
name|OWNER
case|:
return|return
name|MESSAGES
operator|.
name|colTaskOwner
argument_list|()
return|;
case|case
name|PARAMETERS
case|:
return|return
name|MESSAGES
operator|.
name|colTaskParameters
argument_list|()
return|;
case|case
name|DATE
case|:
return|return
name|MESSAGES
operator|.
name|colTaskScheduleDate
argument_list|()
return|;
case|case
name|TIME
case|:
return|return
name|MESSAGES
operator|.
name|colTaskScheduleTime
argument_list|()
return|;
case|case
name|STATUS
case|:
return|return
name|MESSAGES
operator|.
name|colTaskStatus
argument_list|()
return|;
default|default:
return|return
name|column
operator|.
name|name
argument_list|()
return|;
block|}
block|}
specifier|protected
name|HorizontalAlignmentConstant
name|getColumnAlignment
parameter_list|(
name|TasksTableColumn
name|column
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
switch|switch
condition|(
name|column
condition|)
block|{
default|default:
return|return
name|HasHorizontalAlignment
operator|.
name|ALIGN_LEFT
return|;
block|}
block|}
specifier|protected
name|int
name|getCellIndex
parameter_list|(
name|TasksTableColumn
name|column
parameter_list|)
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TasksTableColumn
name|c
range|:
name|TasksTableColumn
operator|.
name|values
argument_list|()
control|)
if|if
condition|(
name|c
operator|.
name|ordinal
argument_list|()
operator|<
name|column
operator|.
name|ordinal
argument_list|()
condition|)
name|ret
operator|+=
name|getNbrCells
argument_list|(
name|c
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|protected
name|Widget
name|getCell
parameter_list|(
specifier|final
name|TaskInterface
name|task
parameter_list|,
specifier|final
name|TasksTableColumn
name|column
parameter_list|,
specifier|final
name|int
name|idx
parameter_list|)
block|{
switch|switch
condition|(
name|column
condition|)
block|{
case|case
name|NAME
case|:
return|return
operator|new
name|Label
argument_list|(
name|task
operator|.
name|getName
argument_list|()
argument_list|)
return|;
case|case
name|SCRIPT
case|:
return|return
operator|new
name|Label
argument_list|(
name|task
operator|.
name|getScript
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
case|case
name|OWNER
case|:
return|return
operator|new
name|Label
argument_list|(
name|task
operator|.
name|getOwner
argument_list|()
operator|.
name|getFormattedName
argument_list|(
literal|false
argument_list|)
argument_list|)
return|;
case|case
name|PARAMETERS
case|:
name|String
name|parameters
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|task
operator|.
name|getScript
argument_list|()
operator|.
name|hasParameters
argument_list|()
condition|)
for|for
control|(
name|ScriptParameterInterface
name|parameter
range|:
name|task
operator|.
name|getScript
argument_list|()
operator|.
name|getParameters
argument_list|()
control|)
block|{
name|String
name|value
init|=
name|task
operator|.
name|getParameter
argument_list|(
name|parameter
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|parameter
operator|.
name|hasOptions
argument_list|()
operator|&&
name|value
operator|!=
literal|null
operator|&&
operator|!
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|parameter
operator|.
name|isMultiSelect
argument_list|()
condition|)
block|{
name|String
name|ids
init|=
name|value
decl_stmt|;
name|value
operator|=
literal|""
expr_stmt|;
for|for
control|(
name|String
name|id
range|:
name|ids
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
name|value
operator|+=
operator|(
name|value
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|", "
operator|)
operator|+
name|parameter
operator|.
name|getOption
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|parameter
operator|.
name|getOption
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|"slot"
operator|.
name|equalsIgnoreCase
argument_list|(
name|parameter
operator|.
name|getType
argument_list|()
argument_list|)
operator|||
literal|"time"
operator|.
name|equalsIgnoreCase
argument_list|(
name|parameter
operator|.
name|getType
argument_list|()
argument_list|)
operator|&&
name|value
operator|!=
literal|null
operator|&&
operator|!
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|value
operator|=
name|TimeUtils
operator|.
name|slot2time
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
name|parameters
operator|+=
operator|(
name|parameters
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"<br>"
operator|)
operator|+
name|parameter
operator|.
name|getLabel
argument_list|()
operator|+
literal|": "
operator|+
name|value
expr_stmt|;
block|}
specifier|final
name|P
name|p
init|=
operator|new
name|P
argument_list|(
literal|"parameters"
argument_list|)
decl_stmt|;
name|p
operator|.
name|setHTML
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
name|p
operator|.
name|addMouseOverHandler
argument_list|(
operator|new
name|MouseOverHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOver
parameter_list|(
name|MouseOverEvent
name|event
parameter_list|)
block|{
name|GwtHint
operator|.
name|showHint
argument_list|(
name|event
operator|.
name|getRelativeElement
argument_list|()
argument_list|,
operator|new
name|HTML
argument_list|(
name|p
operator|.
name|getHTML
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|p
operator|.
name|addMouseOutHandler
argument_list|(
operator|new
name|MouseOutHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOut
parameter_list|(
name|MouseOutEvent
name|event
parameter_list|)
block|{
name|GwtHint
operator|.
name|hideHint
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|p
return|;
case|case
name|DATE
case|:
name|String
name|dates
init|=
literal|""
decl_stmt|;
for|for
control|(
name|MultiExecutionInterface
name|exec
range|:
name|TaskInterface
operator|.
name|getMultiExecutions
argument_list|(
name|task
operator|.
name|getExecutions
argument_list|()
argument_list|,
literal|false
argument_list|)
control|)
block|{
if|if
condition|(
name|exec
operator|.
name|getNrMeetings
argument_list|()
operator|==
literal|1
condition|)
block|{
name|dates
operator|+=
operator|(
name|dates
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"<br>"
operator|)
operator|+
literal|"<span class='status-"
operator|+
name|exec
operator|.
name|getStatus
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"'>"
operator|+
name|exec
operator|.
name|getDays
argument_list|(
name|iOptions
operator|.
name|getFirstDayOfWeek
argument_list|()
argument_list|,
name|CONSTANTS
argument_list|)
operator|+
literal|" "
operator|+
name|sDateFormatLong
operator|.
name|format
argument_list|(
name|exec
operator|.
name|getFirstExecutionDate
argument_list|()
argument_list|)
operator|+
literal|"</span>"
expr_stmt|;
block|}
else|else
block|{
name|dates
operator|+=
operator|(
name|dates
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"<br>"
operator|)
operator|+
literal|"<span class='status-"
operator|+
name|exec
operator|.
name|getStatus
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"'>"
operator|+
name|exec
operator|.
name|getDays
argument_list|(
name|iOptions
operator|.
name|getFirstDayOfWeek
argument_list|()
argument_list|,
name|CONSTANTS
argument_list|)
operator|+
literal|" "
operator|+
name|sDateFormatShort
operator|.
name|format
argument_list|(
name|exec
operator|.
name|getFirstExecutionDate
argument_list|()
argument_list|)
operator|+
literal|" - "
operator|+
name|sDateFormatLong
operator|.
name|format
argument_list|(
name|exec
operator|.
name|getLastExecutionDate
argument_list|()
argument_list|)
operator|+
literal|"</span>"
expr_stmt|;
block|}
block|}
return|return
operator|new
name|HTML
argument_list|(
name|dates
argument_list|,
literal|false
argument_list|)
return|;
case|case
name|TIME
case|:
name|String
name|times
init|=
literal|""
decl_stmt|;
for|for
control|(
name|MultiExecutionInterface
name|exec
range|:
name|TaskInterface
operator|.
name|getMultiExecutions
argument_list|(
name|task
operator|.
name|getExecutions
argument_list|()
argument_list|,
literal|false
argument_list|)
control|)
block|{
if|if
condition|(
name|exec
operator|.
name|getNrMeetings
argument_list|()
operator|==
literal|1
condition|)
block|{
name|times
operator|+=
operator|(
name|times
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"<br>"
operator|)
operator|+
literal|"<span class='status-"
operator|+
name|exec
operator|.
name|getStatus
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"'>"
operator|+
name|exec
operator|.
name|getExecutionTime
argument_list|(
name|CONSTANTS
argument_list|)
operator|+
literal|"</span>"
expr_stmt|;
block|}
else|else
block|{
name|times
operator|+=
operator|(
name|times
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"<br>"
operator|)
operator|+
literal|"<span class='status-"
operator|+
name|exec
operator|.
name|getStatus
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"'>"
operator|+
name|exec
operator|.
name|getExecutionTime
argument_list|(
name|CONSTANTS
argument_list|)
operator|+
literal|"</span>"
expr_stmt|;
block|}
block|}
return|return
operator|new
name|HTML
argument_list|(
name|times
argument_list|,
literal|false
argument_list|)
return|;
case|case
name|STATUS
case|:
name|String
name|statuses
init|=
literal|""
decl_stmt|;
for|for
control|(
name|MultiExecutionInterface
name|exec
range|:
name|TaskInterface
operator|.
name|getMultiExecutions
argument_list|(
name|task
operator|.
name|getExecutions
argument_list|()
argument_list|,
literal|false
argument_list|)
control|)
block|{
name|statuses
operator|+=
operator|(
name|statuses
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"<br>"
operator|)
operator|+
literal|"<span class='status-"
operator|+
name|exec
operator|.
name|getStatus
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"'>"
operator|+
name|CONSTANTS
operator|.
name|taskStatus
argument_list|()
index|[
name|exec
operator|.
name|getStatus
argument_list|()
operator|.
name|ordinal
argument_list|()
index|]
operator|+
literal|"</span>"
expr_stmt|;
block|}
return|return
operator|new
name|HTML
argument_list|(
name|statuses
argument_list|,
literal|false
argument_list|)
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|int
name|getRow
parameter_list|(
name|Long
name|taskId
parameter_list|)
block|{
if|if
condition|(
name|taskId
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|TaskInterface
name|task
init|=
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|task
operator|!=
literal|null
operator|&&
name|taskId
operator|.
name|equals
argument_list|(
name|task
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
return|return
name|row
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
specifier|public
name|void
name|scrollToTask
parameter_list|(
name|Long
name|taskId
parameter_list|)
block|{
if|if
condition|(
name|taskId
operator|==
literal|null
condition|)
return|return;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|TaskInterface
name|task
init|=
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|task
operator|!=
literal|null
operator|&&
name|taskId
operator|.
name|equals
argument_list|(
name|task
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|getRowFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|row
argument_list|)
operator|.
name|scrollIntoView
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|TasksTableComparator
implements|implements
name|Comparator
argument_list|<
name|TaskInterface
argument_list|>
block|{
specifier|private
name|TasksTableColumn
name|iColumn
decl_stmt|;
specifier|private
name|boolean
name|iAsc
decl_stmt|;
specifier|public
name|TasksTableComparator
parameter_list|(
name|TasksTableColumn
name|column
parameter_list|,
name|boolean
name|asc
parameter_list|)
block|{
name|iColumn
operator|=
name|column
expr_stmt|;
name|iAsc
operator|=
name|asc
expr_stmt|;
block|}
specifier|protected
name|int
name|compareByName
parameter_list|(
name|TaskInterface
name|t1
parameter_list|,
name|TaskInterface
name|t2
parameter_list|)
block|{
return|return
name|compare
argument_list|(
name|t1
operator|.
name|getName
argument_list|()
argument_list|,
name|t2
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|int
name|compareByOwner
parameter_list|(
name|TaskInterface
name|t1
parameter_list|,
name|TaskInterface
name|t2
parameter_list|)
block|{
return|return
name|compare
argument_list|(
name|t1
operator|.
name|getOwner
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|t1
operator|.
name|getOwner
argument_list|()
operator|.
name|getLastName
argument_list|()
operator|+
literal|", "
operator|+
name|t1
operator|.
name|getOwner
argument_list|()
operator|.
name|getFirstName
argument_list|()
operator|+
literal|" "
operator|+
name|t1
operator|.
name|getOwner
argument_list|()
operator|.
name|getMiddleName
argument_list|()
argument_list|,
name|t2
operator|.
name|getOwner
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|t2
operator|.
name|getOwner
argument_list|()
operator|.
name|getLastName
argument_list|()
operator|+
literal|", "
operator|+
name|t2
operator|.
name|getOwner
argument_list|()
operator|.
name|getFirstName
argument_list|()
operator|+
literal|" "
operator|+
name|t2
operator|.
name|getOwner
argument_list|()
operator|.
name|getMiddleName
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|int
name|compareByScript
parameter_list|(
name|TaskInterface
name|t1
parameter_list|,
name|TaskInterface
name|t2
parameter_list|)
block|{
return|return
name|compare
argument_list|(
name|t1
operator|.
name|getScript
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|t1
operator|.
name|getScript
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|t2
operator|.
name|getScript
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|t2
operator|.
name|getScript
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|int
name|compareByDate
parameter_list|(
name|TaskInterface
name|t1
parameter_list|,
name|TaskInterface
name|t2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|compare
argument_list|(
name|t1
operator|.
name|getLastExecuted
argument_list|()
argument_list|,
name|t2
operator|.
name|getLastExecuted
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|TaskExecutionInterface
name|e1
init|=
literal|null
decl_stmt|,
name|e2
init|=
literal|null
decl_stmt|;
for|for
control|(
name|TaskExecutionInterface
name|e
range|:
name|t1
operator|.
name|getExecutions
argument_list|()
control|)
if|if
condition|(
name|e
operator|.
name|getStatus
argument_list|()
operator|==
name|ExecutionStatus
operator|.
name|CREATED
condition|)
block|{
name|e1
operator|=
name|e
expr_stmt|;
break|break;
block|}
for|for
control|(
name|TaskExecutionInterface
name|e
range|:
name|t2
operator|.
name|getExecutions
argument_list|()
control|)
if|if
condition|(
name|e
operator|.
name|getStatus
argument_list|()
operator|==
name|ExecutionStatus
operator|.
name|CREATED
condition|)
block|{
name|e2
operator|=
name|e
expr_stmt|;
break|break;
block|}
return|return
operator|(
name|e1
operator|==
literal|null
condition|?
name|e2
operator|==
literal|null
condition|?
literal|0
else|:
operator|-
literal|1
else|:
name|e2
operator|==
literal|null
condition|?
literal|1
else|:
name|e1
operator|.
name|compareTo
argument_list|(
name|e2
argument_list|)
operator|)
return|;
block|}
specifier|protected
name|int
name|compareByTime
parameter_list|(
name|TaskInterface
name|t1
parameter_list|,
name|TaskInterface
name|t2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|compare
argument_list|(
name|t1
operator|.
name|getLastExecuted
argument_list|()
argument_list|,
name|t2
operator|.
name|getLastExecuted
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|TaskExecutionInterface
name|e1
init|=
literal|null
decl_stmt|,
name|e2
init|=
literal|null
decl_stmt|;
for|for
control|(
name|TaskExecutionInterface
name|e
range|:
name|t1
operator|.
name|getExecutions
argument_list|()
control|)
if|if
condition|(
name|e
operator|.
name|getStatus
argument_list|()
operator|==
name|ExecutionStatus
operator|.
name|CREATED
condition|)
block|{
name|e1
operator|=
name|e
expr_stmt|;
break|break;
block|}
for|for
control|(
name|TaskExecutionInterface
name|e
range|:
name|t2
operator|.
name|getExecutions
argument_list|()
control|)
if|if
condition|(
name|e
operator|.
name|getStatus
argument_list|()
operator|==
name|ExecutionStatus
operator|.
name|CREATED
condition|)
block|{
name|e2
operator|=
name|e
expr_stmt|;
break|break;
block|}
return|return
operator|(
name|e1
operator|==
literal|null
condition|?
name|e2
operator|==
literal|null
condition|?
literal|0
else|:
operator|-
literal|1
else|:
name|e2
operator|==
literal|null
condition|?
literal|1
else|:
name|e1
operator|.
name|compareTo
argument_list|(
name|e2
argument_list|)
operator|)
return|;
block|}
specifier|protected
name|int
name|compareByTime
parameter_list|(
name|TaskExecutionInterface
name|t1
parameter_list|,
name|TaskExecutionInterface
name|t2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|t1
operator|.
name|getSlot
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|t2
operator|.
name|getSlot
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|t1
operator|.
name|getDayOfYear
argument_list|()
operator|.
name|compareTo
argument_list|(
name|t2
operator|.
name|getDayOfYear
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|int
name|compareByStatus
parameter_list|(
name|TaskInterface
name|t1
parameter_list|,
name|TaskInterface
name|t2
parameter_list|)
block|{
name|int
name|cmp
init|=
operator|(
name|t1
operator|.
name|getLastStatus
argument_list|()
operator|==
literal|null
condition|?
name|t1
operator|.
name|getLastStatus
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
operator|-
literal|1
else|:
name|t2
operator|.
name|getLastStatus
argument_list|()
operator|==
literal|null
condition|?
literal|1
else|:
name|t1
operator|.
name|getLastStatus
argument_list|()
operator|.
name|compareTo
argument_list|(
name|t2
operator|.
name|getLastStatus
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|TaskExecutionInterface
name|e1
init|=
literal|null
decl_stmt|,
name|e2
init|=
literal|null
decl_stmt|;
for|for
control|(
name|TaskExecutionInterface
name|e
range|:
name|t1
operator|.
name|getExecutions
argument_list|()
control|)
if|if
condition|(
name|e
operator|.
name|getStatus
argument_list|()
operator|==
name|ExecutionStatus
operator|.
name|CREATED
condition|)
block|{
name|e1
operator|=
name|e
expr_stmt|;
break|break;
block|}
for|for
control|(
name|TaskExecutionInterface
name|e
range|:
name|t2
operator|.
name|getExecutions
argument_list|()
control|)
if|if
condition|(
name|e
operator|.
name|getStatus
argument_list|()
operator|==
name|ExecutionStatus
operator|.
name|CREATED
condition|)
block|{
name|e2
operator|=
name|e
expr_stmt|;
break|break;
block|}
return|return
operator|(
name|e1
operator|==
literal|null
condition|?
name|e2
operator|==
literal|null
condition|?
literal|0
else|:
operator|-
literal|1
else|:
name|e2
operator|==
literal|null
condition|?
literal|1
else|:
name|e1
operator|.
name|compareTo
argument_list|(
name|e2
argument_list|)
operator|)
return|;
block|}
specifier|protected
name|int
name|compareByColumn
parameter_list|(
name|TaskInterface
name|t1
parameter_list|,
name|TaskInterface
name|t2
parameter_list|)
block|{
switch|switch
condition|(
name|iColumn
condition|)
block|{
case|case
name|NAME
case|:
return|return
name|compareByName
argument_list|(
name|t1
argument_list|,
name|t2
argument_list|)
return|;
case|case
name|SCRIPT
case|:
return|return
name|compareByScript
argument_list|(
name|t1
argument_list|,
name|t2
argument_list|)
return|;
case|case
name|OWNER
case|:
return|return
name|compareByOwner
argument_list|(
name|t1
argument_list|,
name|t2
argument_list|)
return|;
case|case
name|DATE
case|:
return|return
name|compareByDate
argument_list|(
name|t1
argument_list|,
name|t2
argument_list|)
return|;
case|case
name|TIME
case|:
return|return
name|compareByTime
argument_list|(
name|t1
argument_list|,
name|t2
argument_list|)
return|;
case|case
name|STATUS
case|:
return|return
name|compareByStatus
argument_list|(
name|t1
argument_list|,
name|t2
argument_list|)
return|;
default|default:
return|return
name|t1
operator|.
name|compareTo
argument_list|(
name|t2
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|isApplicable
parameter_list|(
name|TasksTableColumn
name|column
parameter_list|)
block|{
switch|switch
condition|(
name|column
condition|)
block|{
case|case
name|NAME
case|:
case|case
name|SCRIPT
case|:
case|case
name|OWNER
case|:
case|case
name|DATE
case|:
case|case
name|TIME
case|:
case|case
name|STATUS
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|TaskInterface
name|t1
parameter_list|,
name|TaskInterface
name|t2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|compareByColumn
argument_list|(
name|t1
argument_list|,
name|t2
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
operator|(
name|iAsc
condition|?
name|cmp
else|:
operator|-
name|cmp
operator|)
return|;
return|return
operator|(
name|iAsc
condition|?
name|t1
operator|.
name|compareTo
argument_list|(
name|t2
argument_list|)
else|:
name|t2
operator|.
name|compareTo
argument_list|(
name|t1
argument_list|)
operator|)
return|;
block|}
specifier|protected
name|int
name|compare
parameter_list|(
name|String
name|s1
parameter_list|,
name|String
name|s2
parameter_list|)
block|{
if|if
condition|(
name|s1
operator|==
literal|null
operator|||
name|s1
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|(
name|s2
operator|==
literal|null
operator|||
name|s2
operator|.
name|isEmpty
argument_list|()
condition|?
literal|0
else|:
literal|1
operator|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|s2
operator|==
literal|null
operator|||
name|s2
operator|.
name|isEmpty
argument_list|()
condition|?
operator|-
literal|1
else|:
name|s1
operator|.
name|compareToIgnoreCase
argument_list|(
name|s2
argument_list|)
operator|)
return|;
block|}
block|}
specifier|protected
name|int
name|compare
parameter_list|(
name|Number
name|n1
parameter_list|,
name|Number
name|n2
parameter_list|)
block|{
return|return
operator|(
name|n1
operator|==
literal|null
condition|?
name|n2
operator|==
literal|null
condition|?
literal|0
else|:
operator|-
literal|1
else|:
name|n2
operator|==
literal|null
condition|?
literal|1
else|:
name|Double
operator|.
name|compare
argument_list|(
name|n1
operator|.
name|doubleValue
argument_list|()
argument_list|,
name|n2
operator|.
name|doubleValue
argument_list|()
argument_list|)
operator|)
return|;
block|}
specifier|protected
name|int
name|compare
parameter_list|(
name|Date
name|n1
parameter_list|,
name|Date
name|n2
parameter_list|)
block|{
return|return
operator|(
name|n1
operator|==
literal|null
condition|?
name|n2
operator|==
literal|null
condition|?
literal|0
else|:
operator|-
literal|1
else|:
name|n2
operator|==
literal|null
condition|?
literal|1
else|:
name|n1
operator|.
name|compareTo
argument_list|(
name|n2
argument_list|)
operator|)
return|;
block|}
specifier|protected
name|int
name|compare
parameter_list|(
name|Boolean
name|b1
parameter_list|,
name|Boolean
name|b2
parameter_list|)
block|{
return|return
operator|(
name|b1
operator|==
literal|null
condition|?
name|b2
operator|==
literal|null
condition|?
literal|0
else|:
operator|-
literal|1
else|:
name|b2
operator|==
literal|null
condition|?
literal|1
else|:
operator|(
name|b1
operator|.
name|booleanValue
argument_list|()
operator|==
name|b2
operator|.
name|booleanValue
argument_list|()
operator|)
condition|?
literal|0
else|:
operator|(
name|b1
operator|.
name|booleanValue
argument_list|()
condition|?
literal|1
else|:
operator|-
literal|1
operator|)
operator|)
return|;
block|}
block|}
specifier|public
specifier|static
enum|enum
name|TasksTableColumn
block|{
name|NAME
block|,
name|OWNER
block|,
name|SCRIPT
block|,
name|PARAMETERS
block|,
name|DATE
block|,
name|TIME
block|,
name|STATUS
block|, 		; 	}
specifier|public
name|int
name|addTask
parameter_list|(
specifier|final
name|TaskInterface
name|task
parameter_list|)
block|{
name|List
argument_list|<
name|Widget
argument_list|>
name|widgets
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TasksTableColumn
name|column
range|:
name|TasksTableColumn
operator|.
name|values
argument_list|()
control|)
block|{
name|int
name|nbrCells
init|=
name|getNbrCells
argument_list|(
name|column
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|nbrCells
condition|;
name|idx
operator|++
control|)
block|{
name|Widget
name|cell
init|=
name|getCell
argument_list|(
name|task
argument_list|,
name|column
argument_list|,
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|cell
operator|==
literal|null
condition|)
name|cell
operator|=
operator|new
name|P
argument_list|()
expr_stmt|;
name|widgets
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|row
init|=
name|addRow
argument_list|(
name|task
argument_list|,
name|widgets
argument_list|)
decl_stmt|;
name|getRowFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
literal|"row"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|getCellCount
argument_list|(
name|row
argument_list|)
condition|;
name|col
operator|++
control|)
name|getCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
literal|"cell"
argument_list|)
expr_stmt|;
return|return
name|row
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|List
argument_list|<
name|TaskInterface
argument_list|>
name|value
parameter_list|)
block|{
name|clearTable
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
for|for
control|(
name|TaskInterface
name|task
range|:
name|value
control|)
name|addTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|sort
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TaskInterface
argument_list|>
name|getValue
parameter_list|()
block|{
return|return
name|getData
argument_list|()
return|;
block|}
specifier|public
specifier|static
interface|interface
name|SortOperation
extends|extends
name|Operation
extends|,
name|HasColumnName
block|{}
block|}
end_class

end_unit

