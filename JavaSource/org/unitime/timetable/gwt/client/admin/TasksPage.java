begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|admin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|GwtHint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|admin
operator|.
name|ScriptPage
operator|.
name|DateTimeBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|events
operator|.
name|SessionDatesSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|events
operator|.
name|SingleDateSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|page
operator|.
name|UniTimeNotifications
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|page
operator|.
name|UniTimePageLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|LoadingWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|NumberBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|P
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|ServerDateTimeFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|SimpleForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|TimeSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|TimeSelector
operator|.
name|TimeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeConfirmationDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeDialogBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeFileUpload
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeHeaderPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|MouseClickListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|TableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcResponseList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ScriptInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TaskInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ScriptInterface
operator|.
name|ScriptParameterInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TaskInterface
operator|.
name|DeleteTaskDetailsRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TaskInterface
operator|.
name|ExecutionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TaskInterface
operator|.
name|GetTaskExecutionLogRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TaskInterface
operator|.
name|GetTaskOptionsRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TaskInterface
operator|.
name|GetTasksRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TaskInterface
operator|.
name|MultiExecutionInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TaskInterface
operator|.
name|SaveTaskDetailsRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TaskInterface
operator|.
name|TaskExecutionInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TaskInterface
operator|.
name|TaskExecutionLogInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TaskInterface
operator|.
name|TaskOptionsInterface
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseOutEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseOutHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseOverEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseOverHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|DateTimeFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|TakesValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Anchor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|CheckBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ListBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ScrollPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|SimplePanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|TextArea
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|TextBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|VerticalPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|TasksPage
extends|extends
name|Composite
block|{
specifier|protected
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|GwtResources
name|RESOURCES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtResources
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|GwtConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|GwtRpcServiceAsync
name|RPC
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtRpcService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|DateTimeFormat
name|sDateFormatShort
init|=
name|ServerDateTimeFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|eventDateFormatShort
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|DateTimeFormat
name|sDateFormatLong
init|=
name|ServerDateTimeFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|eventDateFormatLong
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|DateTimeFormat
name|sDateFormatMeeting
init|=
name|ServerDateTimeFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|meetingDateFormat
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|DateTimeFormat
name|sDateFormatTS
init|=
name|ServerDateTimeFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|timeStampFormatShort
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|SimpleForm
name|iForm
decl_stmt|;
specifier|private
name|UniTimeHeaderPanel
name|iHeader
decl_stmt|,
name|iFooter
decl_stmt|;
specifier|private
name|UniTimeTable
argument_list|<
name|TaskInterface
argument_list|>
name|iTasksTable
decl_stmt|;
specifier|private
name|TaskOptionsInterface
name|iOptions
init|=
literal|null
decl_stmt|;
specifier|private
name|TaskDetail
name|iTaskDetail
decl_stmt|;
specifier|private
name|SimplePanel
name|iPanel
decl_stmt|;
specifier|public
name|TasksPage
parameter_list|()
block|{
name|iForm
operator|=
operator|new
name|SimpleForm
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|removeStyleName
argument_list|(
literal|"unitime-NotPrintableBottomLine"
argument_list|)
expr_stmt|;
name|iHeader
operator|=
operator|new
name|UniTimeHeaderPanel
argument_list|(
name|MESSAGES
operator|.
name|sectScheduledTasks
argument_list|(
literal|"..."
argument_list|)
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"add"
argument_list|,
name|MESSAGES
operator|.
name|buttonAddNewTask
argument_list|()
argument_list|,
literal|75
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
operator|new
name|TaskEditor
argument_list|(
literal|null
argument_list|)
operator|.
name|center
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"add"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"refresh"
argument_list|,
name|MESSAGES
operator|.
name|buttonRefresh
argument_list|()
argument_list|,
literal|75
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|loadTasks
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addHeaderRow
argument_list|(
name|iHeader
argument_list|)
expr_stmt|;
name|iTasksTable
operator|=
operator|new
name|UniTimeTable
argument_list|<
name|TaskInterface
argument_list|>
argument_list|()
expr_stmt|;
name|iTasksTable
operator|.
name|addStyleName
argument_list|(
literal|"unitime-PeriodicTaskTable"
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|iTasksTable
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|UniTimeTableHeader
argument_list|>
name|header
init|=
operator|new
name|ArrayList
argument_list|<
name|UniTimeTableHeader
argument_list|>
argument_list|()
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colTaskName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colTaskScript
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colTaskOwner
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colTaskParameters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colTaskScheduleDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colTaskScheduleTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colTaskStatus
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iTasksTable
operator|.
name|addRow
argument_list|(
literal|null
argument_list|,
name|header
argument_list|)
expr_stmt|;
name|iFooter
operator|=
name|iHeader
operator|.
name|clonePanel
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addBottomRow
argument_list|(
name|iFooter
argument_list|)
expr_stmt|;
name|iPanel
operator|=
operator|new
name|SimplePanel
argument_list|(
name|iForm
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|iPanel
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|showLoading
argument_list|()
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
operator|new
name|GetTaskOptionsRpcRequest
argument_list|()
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|TaskOptionsInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedLoadData
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|failedLoadData
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|TaskOptionsInterface
name|result
parameter_list|)
block|{
name|iOptions
operator|=
name|result
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"add"
argument_list|,
name|iOptions
operator|.
name|canAdd
argument_list|()
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setHeaderTitle
argument_list|(
name|MESSAGES
operator|.
name|sectScheduledTasks
argument_list|(
name|iOptions
operator|.
name|getSession
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|loadTasks
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iTasksTable
operator|.
name|addMouseClickListener
argument_list|(
operator|new
name|MouseClickListener
argument_list|<
name|TaskInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseClick
parameter_list|(
specifier|final
name|TableEvent
argument_list|<
name|TaskInterface
argument_list|>
name|event
parameter_list|)
block|{
comment|/* 				if (event.getData() != null&& event.getData().canEdit()) { 					new TaskEditor(new TaskInterface(event.getData())).center(); 				} 				*/
if|if
condition|(
name|event
operator|.
name|getData
argument_list|()
operator|!=
literal|null
operator|&&
name|event
operator|.
name|getData
argument_list|()
operator|.
name|canView
argument_list|()
condition|)
block|{
name|iTaskDetail
operator|.
name|setValue
argument_list|(
name|event
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
name|UniTimePageLabel
operator|.
name|getInstance
argument_list|()
operator|.
name|setPageName
argument_list|(
name|MESSAGES
operator|.
name|pageTaskDetails
argument_list|()
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|setWidget
argument_list|(
name|iTaskDetail
argument_list|)
expr_stmt|;
name|Window
operator|.
name|scrollTo
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|GwtHint
operator|.
name|hideHint
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|iTaskDetail
operator|=
operator|new
name|TaskDetail
argument_list|()
block|{
specifier|public
name|void
name|doBack
parameter_list|()
block|{
name|iPanel
operator|.
name|setWidget
argument_list|(
name|iForm
argument_list|)
expr_stmt|;
name|UniTimePageLabel
operator|.
name|getInstance
argument_list|()
operator|.
name|setPageName
argument_list|(
name|MESSAGES
operator|.
name|pageTasks
argument_list|()
argument_list|)
expr_stmt|;
name|loadTasks
argument_list|(
name|getValue
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|getValue
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
block|}
specifier|protected
name|void
name|loadTasks
parameter_list|(
specifier|final
name|Long
name|taskId
parameter_list|)
block|{
name|iHeader
operator|.
name|showLoading
argument_list|()
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
operator|new
name|GetTasksRpcRequest
argument_list|()
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|GwtRpcResponseList
argument_list|<
name|TaskInterface
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedLoadData
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|failedLoadData
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|GwtRpcResponseList
argument_list|<
name|TaskInterface
argument_list|>
name|result
parameter_list|)
block|{
name|iHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
name|populateTasks
argument_list|(
name|result
argument_list|,
name|taskId
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|populateTasks
parameter_list|(
name|List
argument_list|<
name|TaskInterface
argument_list|>
name|tasks
parameter_list|,
name|Long
name|taskId
parameter_list|)
block|{
name|iTasksTable
operator|.
name|clearTable
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|int
name|scrollRow
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|tasks
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|TaskInterface
name|task
range|:
name|tasks
control|)
block|{
name|List
argument_list|<
name|Widget
argument_list|>
name|line
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|task
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|task
operator|.
name|getScript
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|task
operator|.
name|getOwner
argument_list|()
operator|.
name|getFormattedName
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|parameters
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|task
operator|.
name|getScript
argument_list|()
operator|.
name|hasParameters
argument_list|()
condition|)
for|for
control|(
name|ScriptParameterInterface
name|parameter
range|:
name|task
operator|.
name|getScript
argument_list|()
operator|.
name|getParameters
argument_list|()
control|)
block|{
name|String
name|value
init|=
name|task
operator|.
name|getParameter
argument_list|(
name|parameter
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|parameter
operator|.
name|hasOptions
argument_list|()
operator|&&
name|value
operator|!=
literal|null
operator|&&
operator|!
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|parameter
operator|.
name|isMultiSelect
argument_list|()
condition|)
block|{
name|String
name|ids
init|=
name|value
decl_stmt|;
name|value
operator|=
literal|""
expr_stmt|;
for|for
control|(
name|String
name|id
range|:
name|ids
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
name|value
operator|+=
operator|(
name|value
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|", "
operator|)
operator|+
name|parameter
operator|.
name|getOption
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|parameter
operator|.
name|getOption
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|"slot"
operator|.
name|equalsIgnoreCase
argument_list|(
name|parameter
operator|.
name|getType
argument_list|()
argument_list|)
operator|||
literal|"time"
operator|.
name|equalsIgnoreCase
argument_list|(
name|parameter
operator|.
name|getType
argument_list|()
argument_list|)
operator|&&
name|value
operator|!=
literal|null
operator|&&
operator|!
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|value
operator|=
name|TimeUtils
operator|.
name|slot2time
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
name|parameters
operator|+=
operator|(
name|parameters
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"<br>"
operator|)
operator|+
name|parameter
operator|.
name|getLabel
argument_list|()
operator|+
literal|": "
operator|+
name|value
expr_stmt|;
block|}
specifier|final
name|P
name|p
init|=
operator|new
name|P
argument_list|(
literal|"parameters"
argument_list|)
decl_stmt|;
name|p
operator|.
name|setHTML
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
name|p
operator|.
name|addMouseOverHandler
argument_list|(
operator|new
name|MouseOverHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOver
parameter_list|(
name|MouseOverEvent
name|event
parameter_list|)
block|{
name|GwtHint
operator|.
name|showHint
argument_list|(
name|event
operator|.
name|getRelativeElement
argument_list|()
argument_list|,
operator|new
name|HTML
argument_list|(
name|p
operator|.
name|getHTML
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|p
operator|.
name|addMouseOutHandler
argument_list|(
operator|new
name|MouseOutHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOut
parameter_list|(
name|MouseOutEvent
name|event
parameter_list|)
block|{
name|GwtHint
operator|.
name|hideHint
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|String
name|dates
init|=
literal|""
decl_stmt|;
name|String
name|times
init|=
literal|""
decl_stmt|;
name|String
name|statuses
init|=
literal|""
decl_stmt|;
for|for
control|(
name|MultiExecutionInterface
name|exec
range|:
name|TaskInterface
operator|.
name|getMultiExecutions
argument_list|(
name|task
operator|.
name|getExecutions
argument_list|()
argument_list|,
literal|false
argument_list|)
control|)
block|{
if|if
condition|(
name|exec
operator|.
name|getNrMeetings
argument_list|()
operator|==
literal|1
condition|)
block|{
name|dates
operator|+=
operator|(
name|dates
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"<br>"
operator|)
operator|+
literal|"<span class='status-"
operator|+
name|exec
operator|.
name|getStatus
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"'>"
operator|+
name|exec
operator|.
name|getDays
argument_list|(
name|iOptions
operator|.
name|getFirstDayOfWeek
argument_list|()
argument_list|,
name|CONSTANTS
argument_list|)
operator|+
literal|" "
operator|+
name|sDateFormatLong
operator|.
name|format
argument_list|(
name|exec
operator|.
name|getFirstExecutionDate
argument_list|()
argument_list|)
operator|+
literal|"</span>"
expr_stmt|;
name|times
operator|+=
operator|(
name|times
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"<br>"
operator|)
operator|+
literal|"<span class='status-"
operator|+
name|exec
operator|.
name|getStatus
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"'>"
operator|+
name|exec
operator|.
name|getExecutionTime
argument_list|(
name|CONSTANTS
argument_list|)
operator|+
literal|"</span>"
expr_stmt|;
block|}
else|else
block|{
name|dates
operator|+=
operator|(
name|dates
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"<br>"
operator|)
operator|+
literal|"<span class='status-"
operator|+
name|exec
operator|.
name|getStatus
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"'>"
operator|+
name|exec
operator|.
name|getDays
argument_list|(
name|iOptions
operator|.
name|getFirstDayOfWeek
argument_list|()
argument_list|,
name|CONSTANTS
argument_list|)
operator|+
literal|" "
operator|+
name|sDateFormatShort
operator|.
name|format
argument_list|(
name|exec
operator|.
name|getFirstExecutionDate
argument_list|()
argument_list|)
operator|+
literal|" - "
operator|+
name|sDateFormatLong
operator|.
name|format
argument_list|(
name|exec
operator|.
name|getLastExecutionDate
argument_list|()
argument_list|)
operator|+
literal|"</span>"
expr_stmt|;
name|times
operator|+=
operator|(
name|times
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"<br>"
operator|)
operator|+
literal|"<span class='status-"
operator|+
name|exec
operator|.
name|getStatus
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"'>"
operator|+
name|exec
operator|.
name|getExecutionTime
argument_list|(
name|CONSTANTS
argument_list|)
operator|+
literal|"</span>"
expr_stmt|;
block|}
name|statuses
operator|+=
operator|(
name|statuses
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"<br>"
operator|)
operator|+
literal|"<span class='status-"
operator|+
name|exec
operator|.
name|getStatus
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"'>"
operator|+
name|CONSTANTS
operator|.
name|taskStatus
argument_list|()
index|[
name|exec
operator|.
name|getStatus
argument_list|()
operator|.
name|ordinal
argument_list|()
index|]
operator|+
literal|"</span>"
expr_stmt|;
block|}
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|dates
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|times
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|statuses
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|iTasksTable
operator|.
name|addRow
argument_list|(
name|task
argument_list|,
name|line
argument_list|)
expr_stmt|;
if|if
condition|(
name|taskId
operator|!=
literal|null
operator|&&
name|taskId
operator|.
name|equals
argument_list|(
name|task
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
name|scrollRow
operator|=
name|iTasksTable
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
block|}
if|if
condition|(
name|scrollRow
operator|>=
literal|0
condition|)
name|iTasksTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|scrollRow
argument_list|)
operator|.
name|scrollIntoView
argument_list|()
expr_stmt|;
block|}
specifier|public
class|class
name|TaskDetail
extends|extends
name|SimpleForm
implements|implements
name|TakesValue
argument_list|<
name|TaskInterface
argument_list|>
block|{
specifier|private
name|UniTimeHeaderPanel
name|iHeader
decl_stmt|,
name|iFooter
decl_stmt|,
name|iLogHeader
decl_stmt|;
specifier|private
name|TaskInterface
name|iTask
decl_stmt|;
specifier|private
name|UniTimeTable
argument_list|<
name|TaskExecutionInterface
argument_list|>
name|iExecutions
decl_stmt|;
specifier|private
name|int
name|iLogRow
decl_stmt|;
specifier|private
name|HTML
name|iLog
decl_stmt|;
specifier|public
name|TaskDetail
parameter_list|()
block|{
name|iHeader
operator|=
operator|new
name|UniTimeHeaderPanel
argument_list|()
expr_stmt|;
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"edit"
argument_list|,
name|MESSAGES
operator|.
name|buttonEditTask
argument_list|()
argument_list|,
literal|75
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
operator|new
name|TaskEditor
argument_list|(
name|getValue
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|doReload
parameter_list|(
name|TaskInterface
name|task
parameter_list|)
block|{
name|setValue
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|center
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"delete"
argument_list|,
name|MESSAGES
operator|.
name|buttonDeleteTask
argument_list|()
argument_list|,
literal|75
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|UniTimeConfirmationDialog
operator|.
name|confirm
argument_list|(
name|MESSAGES
operator|.
name|confirmDeleteTask
argument_list|()
argument_list|,
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
name|MESSAGES
operator|.
name|waitDelete
argument_list|(
name|getValue
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
operator|new
name|DeleteTaskDetailsRpcRequest
argument_list|(
name|getValue
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|TaskInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedDelete
argument_list|(
name|getValue
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|failedDelete
argument_list|(
name|getValue
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|TaskInterface
name|result
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|doBack
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"back"
argument_list|,
name|MESSAGES
operator|.
name|buttonBack
argument_list|()
argument_list|,
literal|75
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|doBack
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iFooter
operator|=
name|iHeader
operator|.
name|clonePanel
argument_list|()
expr_stmt|;
name|iExecutions
operator|=
operator|new
name|UniTimeTable
argument_list|<
name|TaskExecutionInterface
argument_list|>
argument_list|()
expr_stmt|;
name|iExecutions
operator|.
name|setAllowSelection
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iExecutions
operator|.
name|setAllowMultiSelect
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iExecutions
operator|.
name|addStyleName
argument_list|(
literal|"unitime-PeriodicTaskTable"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|UniTimeTableHeader
argument_list|>
name|header
init|=
operator|new
name|ArrayList
argument_list|<
name|UniTimeTableHeader
argument_list|>
argument_list|()
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colTaskScheduleDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colTaskScheduleTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colTaskQueued
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colTaskStarted
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colTaskFinished
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colTaskStatus
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colTaskStatusMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colTaskOutput
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iExecutions
operator|.
name|addRow
argument_list|(
literal|null
argument_list|,
name|header
argument_list|)
expr_stmt|;
name|iExecutions
operator|.
name|addMouseClickListener
argument_list|(
operator|new
name|MouseClickListener
argument_list|<
name|TaskExecutionInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseClick
parameter_list|(
name|TableEvent
argument_list|<
name|TaskExecutionInterface
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|iExecutions
operator|.
name|getSelectedRow
argument_list|()
operator|>
literal|0
condition|)
block|{
specifier|final
name|TaskExecutionInterface
name|execution
init|=
name|iExecutions
operator|.
name|getData
argument_list|(
name|iExecutions
operator|.
name|getSelectedRow
argument_list|()
argument_list|)
decl_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
operator|new
name|GetTaskExecutionLogRpcRequest
argument_list|(
name|execution
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|TaskExecutionLogInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|failedLoadData
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|caught
argument_list|)
expr_stmt|;
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iLogRow
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iLogRow
operator|+
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|TaskExecutionLogInterface
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
operator|!=
literal|null
operator|&&
name|result
operator|.
name|hasLog
argument_list|()
condition|)
block|{
name|iLogHeader
operator|.
name|setHeaderTitle
argument_list|(
name|MESSAGES
operator|.
name|sectScriptLog
argument_list|(
name|sDateFormatMeeting
operator|.
name|format
argument_list|(
name|execution
operator|.
name|getExecutionDate
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|execution
operator|.
name|getExecutionTime
argument_list|(
name|CONSTANTS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|iLog
operator|.
name|setHTML
argument_list|(
name|result
operator|.
name|getLog
argument_list|()
argument_list|)
expr_stmt|;
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iLogRow
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iLogRow
operator|+
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iLogRow
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iLogRow
operator|+
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iLogRow
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iLogRow
operator|+
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|iLogHeader
operator|=
operator|new
name|UniTimeHeaderPanel
argument_list|()
expr_stmt|;
name|iLog
operator|=
operator|new
name|HTML
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|doBack
parameter_list|()
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|TaskInterface
name|task
parameter_list|)
block|{
name|iTask
operator|=
name|task
expr_stmt|;
name|clear
argument_list|()
expr_stmt|;
name|iHeader
operator|.
name|setHeaderTitle
argument_list|(
name|iTask
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"edit"
argument_list|,
name|iTask
operator|.
name|canEdit
argument_list|()
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"delete"
argument_list|,
name|iTask
operator|.
name|canEdit
argument_list|()
argument_list|)
expr_stmt|;
name|addHeaderRow
argument_list|(
name|iHeader
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propScript
argument_list|()
argument_list|,
operator|new
name|Label
argument_list|(
name|iTask
operator|.
name|getScript
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propTaskOwner
argument_list|()
argument_list|,
operator|new
name|Label
argument_list|(
name|iTask
operator|.
name|getOwner
argument_list|()
operator|.
name|getFormattedName
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iTask
operator|.
name|getScript
argument_list|()
operator|.
name|getDescription
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|iTask
operator|.
name|getScript
argument_list|()
operator|.
name|getDescription
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propDescription
argument_list|()
argument_list|,
operator|new
name|HTML
argument_list|(
name|iTask
operator|.
name|getScript
argument_list|()
operator|.
name|getDescription
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iTask
operator|.
name|getScript
argument_list|()
operator|.
name|hasParameters
argument_list|()
condition|)
for|for
control|(
name|ScriptParameterInterface
name|parameter
range|:
name|iTask
operator|.
name|getScript
argument_list|()
operator|.
name|getParameters
argument_list|()
control|)
block|{
name|String
name|value
init|=
name|iTask
operator|.
name|getParameter
argument_list|(
name|parameter
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
name|value
operator|=
name|parameter
operator|.
name|getValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
name|value
operator|=
name|parameter
operator|.
name|getDefaultValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|parameter
operator|.
name|hasOptions
argument_list|()
operator|&&
name|value
operator|!=
literal|null
operator|&&
operator|!
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|parameter
operator|.
name|isMultiSelect
argument_list|()
condition|)
block|{
name|String
name|ids
init|=
name|value
decl_stmt|;
name|value
operator|=
literal|""
expr_stmt|;
for|for
control|(
name|String
name|id
range|:
name|ids
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
name|value
operator|+=
operator|(
name|value
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"<br>"
operator|)
operator|+
name|parameter
operator|.
name|getOption
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|parameter
operator|.
name|getOption
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|"slot"
operator|.
name|equalsIgnoreCase
argument_list|(
name|parameter
operator|.
name|getType
argument_list|()
argument_list|)
operator|||
literal|"time"
operator|.
name|equalsIgnoreCase
argument_list|(
name|parameter
operator|.
name|getType
argument_list|()
argument_list|)
operator|&&
name|value
operator|!=
literal|null
operator|&&
operator|!
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|value
operator|=
name|TimeUtils
operator|.
name|slot2time
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
if|if
condition|(
literal|"file"
operator|.
name|equalsIgnoreCase
argument_list|(
name|parameter
operator|.
name|getType
argument_list|()
argument_list|)
operator|&&
name|value
operator|!=
literal|null
condition|)
block|{
name|addRow
argument_list|(
name|parameter
operator|.
name|getLabel
argument_list|()
operator|+
literal|":"
argument_list|,
operator|new
name|Anchor
argument_list|(
name|value
argument_list|,
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"/taskfile?t="
operator|+
name|iTask
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addRow
argument_list|(
name|parameter
operator|.
name|getLabel
argument_list|()
operator|+
literal|":"
argument_list|,
operator|new
name|HTML
argument_list|(
name|value
operator|==
literal|null
condition|?
literal|"<i>"
operator|+
name|MESSAGES
operator|.
name|notSet
argument_list|()
operator|+
literal|"</i>"
else|:
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iTask
operator|.
name|getEmail
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|iTask
operator|.
name|getEmail
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propEmail
argument_list|()
argument_list|,
operator|new
name|HTML
argument_list|(
name|iTask
operator|.
name|getEmail
argument_list|()
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|"<br>"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|addHeaderRow
argument_list|(
name|MESSAGES
operator|.
name|sectTaskExecutions
argument_list|()
argument_list|)
expr_stmt|;
name|iExecutions
operator|.
name|clearTable
argument_list|(
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|TaskExecutionInterface
name|e
range|:
name|iTask
operator|.
name|getExecutions
argument_list|()
control|)
block|{
name|List
argument_list|<
name|Widget
argument_list|>
name|line
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|sDateFormatMeeting
operator|.
name|format
argument_list|(
name|e
operator|.
name|getExecutionDate
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|e
operator|.
name|getExecutionTime
argument_list|(
name|CONSTANTS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|e
operator|.
name|getQueued
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|sDateFormatTS
operator|.
name|format
argument_list|(
name|e
operator|.
name|getQueued
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|e
operator|.
name|getStarted
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|sDateFormatTS
operator|.
name|format
argument_list|(
name|e
operator|.
name|getStarted
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|e
operator|.
name|getFinished
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|sDateFormatTS
operator|.
name|format
argument_list|(
name|e
operator|.
name|getFinished
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|CONSTANTS
operator|.
name|taskStatus
argument_list|()
index|[
name|e
operator|.
name|getStatus
argument_list|()
operator|.
name|ordinal
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Label
name|message
init|=
operator|new
name|Label
argument_list|(
name|e
operator|.
name|getStatusMessage
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|e
operator|.
name|getStatusMessage
argument_list|()
argument_list|)
decl_stmt|;
name|message
operator|.
name|addStyleName
argument_list|(
literal|"status-message"
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getStatusMessage
argument_list|()
operator|!=
literal|null
condition|)
name|message
operator|.
name|setTitle
argument_list|(
name|e
operator|.
name|getStatusMessage
argument_list|()
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getOutput
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|Anchor
argument_list|(
name|e
operator|.
name|getOutput
argument_list|()
argument_list|,
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"/taskfile?e="
operator|+
name|e
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Widget
name|w
range|:
name|line
control|)
if|if
condition|(
name|w
operator|!=
literal|null
condition|)
name|w
operator|.
name|addStyleName
argument_list|(
literal|"status-"
operator|+
name|e
operator|.
name|getStatus
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|iExecutions
operator|.
name|addRow
argument_list|(
name|e
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
name|addRow
argument_list|(
name|iExecutions
argument_list|)
expr_stmt|;
name|iLogRow
operator|=
name|addHeaderRow
argument_list|(
name|iLogHeader
argument_list|)
expr_stmt|;
name|iLog
operator|.
name|setHTML
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|iLog
argument_list|)
expr_stmt|;
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iLogRow
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iLogRow
operator|+
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addBottomRow
argument_list|(
name|iFooter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|TaskInterface
name|getValue
parameter_list|()
block|{
return|return
name|iTask
return|;
block|}
block|}
specifier|public
class|class
name|TaskEditor
extends|extends
name|UniTimeDialogBox
block|{
specifier|private
name|SimpleForm
name|iDialogForm
decl_stmt|;
specifier|private
name|TaskInterface
name|iTask
decl_stmt|;
specifier|private
name|TextBox
name|iName
decl_stmt|;
specifier|private
name|SessionDatesSelector
name|iDates
decl_stmt|;
specifier|private
name|TimeSelector
name|iTime
decl_stmt|;
specifier|private
name|ListBox
name|iScript
decl_stmt|;
specifier|private
name|UniTimeHeaderPanel
name|iBottom
decl_stmt|;
specifier|private
name|int
name|iDescriptionRow
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|HTML
name|iDescription
decl_stmt|;
specifier|private
name|CheckBox
name|iSendEmail
decl_stmt|;
specifier|private
name|TextArea
name|iEmailAddresses
decl_stmt|;
specifier|private
name|VerticalPanel
name|iEmailPanel
decl_stmt|;
specifier|private
name|SimpleForm
name|iForm
decl_stmt|;
specifier|private
name|ScrollPanel
name|iScroll
decl_stmt|;
specifier|public
name|TaskEditor
parameter_list|(
name|TaskInterface
name|task
parameter_list|)
block|{
name|super
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addStyleName
argument_list|(
literal|"unitime-PeriodicTaskEditor"
argument_list|)
expr_stmt|;
name|iTask
operator|=
name|task
expr_stmt|;
if|if
condition|(
name|task
operator|==
literal|null
condition|)
name|iTask
operator|=
operator|new
name|TaskInterface
argument_list|()
expr_stmt|;
name|setText
argument_list|(
name|iTask
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|?
name|MESSAGES
operator|.
name|dialogAddTask
argument_list|()
else|:
name|MESSAGES
operator|.
name|dialogEditTask
argument_list|(
name|iTask
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iDialogForm
operator|=
operator|new
name|SimpleForm
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|iForm
operator|=
operator|new
name|SimpleForm
argument_list|()
expr_stmt|;
name|iForm
operator|.
name|removeStyleName
argument_list|(
literal|"unitime-NotPrintableBottomLine"
argument_list|)
expr_stmt|;
name|iScroll
operator|=
operator|new
name|ScrollPanel
argument_list|(
name|iForm
argument_list|)
expr_stmt|;
name|iScroll
operator|.
name|setStyleName
argument_list|(
literal|"unitime-VerticalScrollPanel"
argument_list|)
expr_stmt|;
name|iDialogForm
operator|.
name|addRow
argument_list|(
name|iScroll
argument_list|)
expr_stmt|;
name|iName
operator|=
operator|new
name|TextBox
argument_list|()
expr_stmt|;
if|if
condition|(
name|iTask
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
name|iName
operator|.
name|setText
argument_list|(
name|iTask
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|iName
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TextBox"
argument_list|)
expr_stmt|;
name|iName
operator|.
name|setWidth
argument_list|(
literal|"400px"
argument_list|)
expr_stmt|;
name|iName
operator|.
name|setMaxLength
argument_list|(
literal|128
argument_list|)
expr_stmt|;
name|iName
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|String
argument_list|>
name|event
parameter_list|)
block|{
name|iBottom
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propName
argument_list|()
argument_list|,
name|iName
argument_list|)
expr_stmt|;
if|if
condition|(
name|iTask
operator|.
name|getOwner
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propTaskOwner
argument_list|()
argument_list|,
operator|new
name|Label
argument_list|(
name|iTask
operator|.
name|getOwner
argument_list|()
operator|.
name|getFormattedName
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iDates
operator|=
operator|new
name|SessionDatesSelector
argument_list|(
name|iOptions
operator|.
name|getSessionMonths
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iTask
operator|.
name|hasExecutions
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Date
argument_list|>
name|dates
init|=
operator|new
name|ArrayList
argument_list|<
name|Date
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TaskExecutionInterface
name|e
range|:
name|iTask
operator|.
name|getExecutions
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getStatus
argument_list|()
operator|==
name|ExecutionStatus
operator|.
name|CREATED
condition|)
name|dates
operator|.
name|add
argument_list|(
name|e
operator|.
name|getExecutionDate
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iDates
operator|.
name|setValue
argument_list|(
name|dates
argument_list|)
expr_stmt|;
block|}
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propTaskExecutionDates
argument_list|()
argument_list|,
name|iDates
argument_list|)
expr_stmt|;
name|iDates
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|List
argument_list|<
name|Date
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|List
argument_list|<
name|Date
argument_list|>
argument_list|>
name|event
parameter_list|)
block|{
name|iBottom
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iTime
operator|=
operator|new
name|TimeSelector
argument_list|()
expr_stmt|;
if|if
condition|(
name|iTask
operator|.
name|hasExecutions
argument_list|()
condition|)
name|iTime
operator|.
name|setValue
argument_list|(
name|iTask
operator|.
name|getExecutions
argument_list|()
operator|.
name|last
argument_list|()
operator|.
name|getSlot
argument_list|()
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propTaskStartTime
argument_list|()
argument_list|,
name|iTime
argument_list|)
expr_stmt|;
name|iTime
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Integer
argument_list|>
name|event
parameter_list|)
block|{
name|iBottom
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|iTask
operator|.
name|getScript
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propScript
argument_list|()
argument_list|,
operator|new
name|Label
argument_list|(
name|iTask
operator|.
name|getScript
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iScript
operator|=
operator|new
name|ListBox
argument_list|()
expr_stmt|;
name|iScript
operator|.
name|addItem
argument_list|(
name|MESSAGES
operator|.
name|itemSelect
argument_list|()
argument_list|,
literal|"-1"
argument_list|)
expr_stmt|;
name|iScript
operator|.
name|setSelectedIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|ScriptInterface
name|script
range|:
name|iOptions
operator|.
name|getScripts
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|script
operator|.
name|canExecute
argument_list|()
operator|&&
operator|!
name|script
operator|.
name|canEdit
argument_list|()
operator|&&
operator|!
name|script
operator|.
name|canDelete
argument_list|()
condition|)
continue|continue;
name|iScript
operator|.
name|addItem
argument_list|(
name|script
operator|.
name|getName
argument_list|()
argument_list|,
name|script
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propScript
argument_list|()
argument_list|,
name|iScript
argument_list|)
expr_stmt|;
name|iScript
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|scriptChanged
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iBottom
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|iDescription
operator|=
operator|new
name|HTML
argument_list|()
expr_stmt|;
name|iDescriptionRow
operator|=
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propDescription
argument_list|()
argument_list|,
name|iDescription
argument_list|)
expr_stmt|;
if|if
condition|(
name|iTask
operator|.
name|getScript
argument_list|()
operator|!=
literal|null
condition|)
name|iDescription
operator|.
name|setHTML
argument_list|(
name|iTask
operator|.
name|getScript
argument_list|()
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|iSendEmail
operator|=
operator|new
name|CheckBox
argument_list|(
name|MESSAGES
operator|.
name|scriptSendEmailCheckbox
argument_list|()
argument_list|)
expr_stmt|;
name|iSendEmail
operator|.
name|setValue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iEmailAddresses
operator|=
operator|new
name|TextArea
argument_list|()
expr_stmt|;
name|iEmailAddresses
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TextArea"
argument_list|)
expr_stmt|;
name|iEmailAddresses
operator|.
name|setVisibleLines
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|iEmailAddresses
operator|.
name|setCharacterWidth
argument_list|(
literal|80
argument_list|)
expr_stmt|;
name|iEmailPanel
operator|=
operator|new
name|VerticalPanel
argument_list|()
expr_stmt|;
name|iEmailPanel
operator|.
name|add
argument_list|(
name|iSendEmail
argument_list|)
expr_stmt|;
name|iEmailPanel
operator|.
name|setCellHorizontalAlignment
argument_list|(
name|iSendEmail
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|iEmailPanel
operator|.
name|add
argument_list|(
name|iEmailAddresses
argument_list|)
expr_stmt|;
name|iEmailAddresses
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iSendEmail
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|event
parameter_list|)
block|{
name|iEmailAddresses
operator|.
name|setVisible
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|iTask
operator|.
name|getEmail
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|iSendEmail
operator|.
name|setValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iEmailAddresses
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iEmailAddresses
operator|.
name|setText
argument_list|(
name|iTask
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iTask
operator|.
name|getId
argument_list|()
operator|==
literal|null
operator|&&
name|iOptions
operator|!=
literal|null
operator|&&
name|iOptions
operator|.
name|getManager
argument_list|()
operator|!=
literal|null
operator|&&
name|iOptions
operator|.
name|getManager
argument_list|()
operator|.
name|getEmail
argument_list|()
operator|!=
literal|null
condition|)
name|iEmailAddresses
operator|.
name|setText
argument_list|(
name|iOptions
operator|.
name|getManager
argument_list|()
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propEmail
argument_list|()
argument_list|,
name|iEmailPanel
argument_list|)
expr_stmt|;
name|iBottom
operator|=
operator|new
name|UniTimeHeaderPanel
argument_list|()
expr_stmt|;
name|iBottom
operator|.
name|addButton
argument_list|(
literal|"save"
argument_list|,
name|iTask
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|?
name|MESSAGES
operator|.
name|opTaskSave
argument_list|()
else|:
name|MESSAGES
operator|.
name|opTaskUpdate
argument_list|()
argument_list|,
literal|75
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|validate
argument_list|()
condition|)
return|return;
name|hide
argument_list|()
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
name|iTask
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|?
name|MESSAGES
operator|.
name|waitCreate
argument_list|(
name|iName
operator|.
name|getText
argument_list|()
argument_list|)
else|:
name|MESSAGES
operator|.
name|waitUpdate
argument_list|(
name|iName
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
operator|new
name|SaveTaskDetailsRpcRequest
argument_list|(
name|iTask
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|TaskInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
if|if
condition|(
name|iTask
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|iBottom
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedCreate
argument_list|(
name|iName
operator|.
name|getText
argument_list|()
argument_list|,
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|failedCreate
argument_list|(
name|iName
operator|.
name|getText
argument_list|()
argument_list|,
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|caught
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iBottom
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedUpdate
argument_list|(
name|iName
operator|.
name|getText
argument_list|()
argument_list|,
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|failedUpdate
argument_list|(
name|iName
operator|.
name|getText
argument_list|()
argument_list|,
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|caught
argument_list|)
expr_stmt|;
block|}
name|center
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|TaskInterface
name|result
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|doReload
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|/* 			iBottom.addButton("delete", MESSAGES.opTaskDelete(), 75, new ClickHandler() { 				@Override 				public void onClick(ClickEvent event) { 					if (iTask.getId() != null) { 						hide(); 						LoadingWidget.getInstance().show(MESSAGES.waitDelete(iName.getText())); 						RPC.execute(new DeleteTaskDetailsRpcRequest(iTask.getId()), new AsyncCallback<TaskInterface>(){ 							@Override 							public void onFailure(Throwable caught) { 								LoadingWidget.getInstance().hide(); 								iBottom.setErrorMessage(MESSAGES.failedDelete(iName.getText(), caught.getMessage())); 								UniTimeNotifications.error(MESSAGES.failedDelete(iName.getText(), caught.getMessage()), caught); 								center(); 							}  							@Override 							public void onSuccess(TaskInterface result) { 								LoadingWidget.getInstance().hide(); 								doReload(result); 							} 						}); 					} 				} 			}); 			iBottom.setEnabled("delete", iTask.getId() != null); 			*/
name|iBottom
operator|.
name|addButton
argument_list|(
literal|"back"
argument_list|,
name|MESSAGES
operator|.
name|opTaskBack
argument_list|()
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iDialogForm
operator|.
name|addBottomRow
argument_list|(
name|iBottom
argument_list|)
expr_stmt|;
name|setWidget
argument_list|(
name|iDialogForm
argument_list|)
expr_stmt|;
if|if
condition|(
name|iTask
operator|.
name|getScript
argument_list|()
operator|!=
literal|null
condition|)
name|scriptChanged
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|setMaxHeight
argument_list|(
name|iScroll
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
argument_list|,
operator|(
name|Window
operator|.
name|getClientHeight
argument_list|()
operator|-
literal|100
operator|)
operator|+
literal|"px"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|doReload
parameter_list|(
name|TaskInterface
name|task
parameter_list|)
block|{
name|loadTasks
argument_list|(
name|task
operator|==
literal|null
condition|?
literal|null
else|:
name|task
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|validate
parameter_list|()
block|{
name|ScriptInterface
name|script
init|=
name|getScript
argument_list|()
decl_stmt|;
if|if
condition|(
name|iName
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iBottom
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|errorNameIsRequired
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|iTask
operator|.
name|setName
argument_list|(
name|iName
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|script
operator|==
literal|null
condition|)
block|{
name|iBottom
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|errorItemNotSelected
argument_list|(
name|MESSAGES
operator|.
name|colTaskScript
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|iTask
operator|.
name|setScript
argument_list|(
name|script
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Integer
argument_list|>
name|dates
init|=
name|iDates
operator|.
name|getSelectedDays
argument_list|()
decl_stmt|;
if|if
condition|(
name|dates
operator|==
literal|null
operator|||
name|dates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iBottom
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|errorNoDateSelected
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|Integer
name|slot
init|=
name|iTime
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|slot
operator|==
literal|null
condition|)
block|{
name|iBottom
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|errorNoStartTime
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|iTask
operator|.
name|clearExecutions
argument_list|()
expr_stmt|;
for|for
control|(
name|Integer
name|date
range|:
name|dates
control|)
block|{
name|TaskExecutionInterface
name|e
init|=
operator|new
name|TaskExecutionInterface
argument_list|()
decl_stmt|;
name|e
operator|.
name|setDayOfYear
argument_list|(
name|date
argument_list|)
expr_stmt|;
name|e
operator|.
name|setSlot
argument_list|(
name|slot
argument_list|)
expr_stmt|;
name|iTask
operator|.
name|addExecution
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|iTask
operator|.
name|setEmail
argument_list|(
name|iSendEmail
operator|.
name|getValue
argument_list|()
operator|&&
operator|!
name|iEmailAddresses
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|iEmailAddresses
operator|.
name|getText
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
name|iBottom
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
name|ScriptInterface
name|getScript
parameter_list|()
block|{
if|if
condition|(
name|iOptions
operator|!=
literal|null
operator|&&
name|iScript
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ScriptInterface
name|s
range|:
name|iOptions
operator|.
name|getScripts
argument_list|()
control|)
if|if
condition|(
name|s
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|iScript
operator|.
name|getValue
argument_list|(
name|iScript
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|s
return|;
block|}
block|}
return|return
name|iTask
operator|.
name|getScript
argument_list|()
return|;
block|}
specifier|private
name|void
name|scriptChanged
parameter_list|(
name|boolean
name|clear
parameter_list|)
block|{
name|ScriptInterface
name|script
init|=
name|getScript
argument_list|()
decl_stmt|;
if|if
condition|(
name|script
operator|==
literal|null
condition|)
block|{
name|iForm
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iDescriptionRow
argument_list|,
literal|false
argument_list|)
expr_stmt|;
while|while
condition|(
name|iForm
operator|.
name|getRowCount
argument_list|()
operator|>
name|iDescriptionRow
operator|+
literal|2
condition|)
name|iForm
operator|.
name|removeRow
argument_list|(
literal|1
operator|+
name|iDescriptionRow
argument_list|)
expr_stmt|;
name|iBottom
operator|.
name|setEnabled
argument_list|(
literal|"save"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iTask
operator|.
name|clearParameters
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|iDescription
operator|.
name|setHTML
argument_list|(
name|script
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iDescriptionRow
argument_list|,
name|script
operator|.
name|getDescription
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|script
operator|.
name|getDescription
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|iBottom
operator|.
name|setEnabled
argument_list|(
literal|"save"
argument_list|,
name|script
operator|.
name|canExecute
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|clear
condition|)
name|iTask
operator|.
name|clearParameters
argument_list|()
expr_stmt|;
while|while
condition|(
name|iForm
operator|.
name|getRowCount
argument_list|()
operator|>
name|iDescriptionRow
operator|+
literal|2
condition|)
name|iForm
operator|.
name|removeRow
argument_list|(
literal|1
operator|+
name|iDescriptionRow
argument_list|)
expr_stmt|;
if|if
condition|(
name|script
operator|.
name|hasParameters
argument_list|()
condition|)
block|{
for|for
control|(
specifier|final
name|ScriptParameterInterface
name|param
range|:
name|script
operator|.
name|getParameters
argument_list|()
control|)
block|{
if|if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
name|iTask
operator|.
name|setParameter
argument_list|(
name|param
operator|.
name|getName
argument_list|()
argument_list|,
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|defaultValue
init|=
name|iTask
operator|.
name|getParameter
argument_list|(
name|param
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultValue
operator|==
literal|null
condition|)
name|defaultValue
operator|=
name|param
operator|.
name|getValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|defaultValue
operator|==
literal|null
condition|)
name|defaultValue
operator|=
name|param
operator|.
name|getDefaultValue
argument_list|()
expr_stmt|;
name|Widget
name|widget
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|param
operator|.
name|hasOptions
argument_list|()
condition|)
block|{
specifier|final
name|ListBox
name|list
init|=
operator|new
name|ListBox
argument_list|()
decl_stmt|;
name|list
operator|.
name|setMultipleSelect
argument_list|(
name|param
operator|.
name|isMultiSelect
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|param
operator|.
name|isMultiSelect
argument_list|()
condition|)
name|list
operator|.
name|addItem
argument_list|(
name|MESSAGES
operator|.
name|itemSelect
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ScriptInterface
operator|.
name|ListItem
name|item
range|:
name|param
operator|.
name|getOptions
argument_list|()
control|)
block|{
name|list
operator|.
name|addItem
argument_list|(
name|item
operator|.
name|getText
argument_list|()
argument_list|,
name|item
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|defaultValue
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|param
operator|.
name|isMultiSelect
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|id
range|:
name|defaultValue
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
if|if
condition|(
operator|!
name|id
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|id
operator|.
name|equalsIgnoreCase
argument_list|(
name|item
operator|.
name|getValue
argument_list|()
argument_list|)
operator|||
name|id
operator|.
name|equalsIgnoreCase
argument_list|(
name|item
operator|.
name|getText
argument_list|()
argument_list|)
operator|||
name|item
operator|.
name|getText
argument_list|()
operator|.
name|startsWith
argument_list|(
name|id
operator|+
literal|" - "
argument_list|)
operator|)
condition|)
block|{
name|list
operator|.
name|setItemSelected
argument_list|(
name|list
operator|.
name|getItemCount
argument_list|()
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|else if
condition|(
name|defaultValue
operator|.
name|equalsIgnoreCase
argument_list|(
name|item
operator|.
name|getValue
argument_list|()
argument_list|)
operator|||
name|defaultValue
operator|.
name|equalsIgnoreCase
argument_list|(
name|item
operator|.
name|getText
argument_list|()
argument_list|)
operator|||
name|item
operator|.
name|getText
argument_list|()
operator|.
name|startsWith
argument_list|(
name|defaultValue
operator|+
literal|" - "
argument_list|)
condition|)
name|list
operator|.
name|setSelectedIndex
argument_list|(
name|list
operator|.
name|getItemCount
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|list
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|param
operator|.
name|isMultiSelect
argument_list|()
condition|)
block|{
name|String
name|value
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|getItemCount
argument_list|()
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|list
operator|.
name|isItemSelected
argument_list|(
name|i
argument_list|)
condition|)
name|value
operator|+=
operator|(
name|value
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
name|list
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|iTask
operator|.
name|setParameter
argument_list|(
name|param
operator|.
name|getName
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iTask
operator|.
name|setParameter
argument_list|(
name|param
operator|.
name|getName
argument_list|()
argument_list|,
name|list
operator|.
name|getValue
argument_list|(
name|list
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|widget
operator|=
name|list
expr_stmt|;
block|}
if|else if
condition|(
literal|"boolean"
operator|.
name|equalsIgnoreCase
argument_list|(
name|param
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|CheckBox
name|ch
init|=
operator|new
name|CheckBox
argument_list|()
decl_stmt|;
name|ch
operator|.
name|setValue
argument_list|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|defaultValue
argument_list|)
argument_list|)
expr_stmt|;
name|ch
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|event
parameter_list|)
block|{
name|iTask
operator|.
name|setParameter
argument_list|(
name|param
operator|.
name|getName
argument_list|()
argument_list|,
name|event
operator|.
name|getValue
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|widget
operator|=
name|ch
expr_stmt|;
block|}
if|else if
condition|(
literal|"file"
operator|.
name|equalsIgnoreCase
argument_list|(
name|param
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|UniTimeFileUpload
name|upload
init|=
operator|new
name|UniTimeFileUpload
argument_list|()
decl_stmt|;
name|upload
operator|.
name|reset
argument_list|()
expr_stmt|;
name|widget
operator|=
name|upload
expr_stmt|;
block|}
if|else if
condition|(
literal|"textarea"
operator|.
name|equalsIgnoreCase
argument_list|(
name|param
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|TextArea
name|textarea
init|=
operator|new
name|TextArea
argument_list|()
decl_stmt|;
name|textarea
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TextArea"
argument_list|)
expr_stmt|;
name|textarea
operator|.
name|setVisibleLines
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|textarea
operator|.
name|setCharacterWidth
argument_list|(
literal|80
argument_list|)
expr_stmt|;
if|if
condition|(
name|defaultValue
operator|!=
literal|null
condition|)
name|textarea
operator|.
name|setText
argument_list|(
name|defaultValue
argument_list|)
expr_stmt|;
name|textarea
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|String
argument_list|>
name|event
parameter_list|)
block|{
name|iTask
operator|.
name|setParameter
argument_list|(
name|param
operator|.
name|getName
argument_list|()
argument_list|,
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|widget
operator|=
name|textarea
expr_stmt|;
block|}
if|else if
condition|(
literal|"integer"
operator|.
name|equalsIgnoreCase
argument_list|(
name|param
operator|.
name|getType
argument_list|()
argument_list|)
operator|||
literal|"int"
operator|.
name|equalsIgnoreCase
argument_list|(
name|param
operator|.
name|getType
argument_list|()
argument_list|)
operator|||
literal|"long"
operator|.
name|equalsIgnoreCase
argument_list|(
name|param
operator|.
name|getType
argument_list|()
argument_list|)
operator|||
literal|"short"
operator|.
name|equalsIgnoreCase
argument_list|(
name|param
operator|.
name|getType
argument_list|()
argument_list|)
operator|||
literal|"byte"
operator|.
name|equalsIgnoreCase
argument_list|(
name|param
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|NumberBox
name|text
init|=
operator|new
name|NumberBox
argument_list|()
decl_stmt|;
name|text
operator|.
name|setDecimal
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|text
operator|.
name|setNegative
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|defaultValue
operator|!=
literal|null
condition|)
name|text
operator|.
name|setText
argument_list|(
name|defaultValue
argument_list|)
expr_stmt|;
name|text
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|String
argument_list|>
name|event
parameter_list|)
block|{
name|iTask
operator|.
name|setParameter
argument_list|(
name|param
operator|.
name|getName
argument_list|()
argument_list|,
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|widget
operator|=
name|text
expr_stmt|;
block|}
if|else if
condition|(
literal|"number"
operator|.
name|equalsIgnoreCase
argument_list|(
name|param
operator|.
name|getType
argument_list|()
argument_list|)
operator|||
literal|"float"
operator|.
name|equalsIgnoreCase
argument_list|(
name|param
operator|.
name|getType
argument_list|()
argument_list|)
operator|||
literal|"double"
operator|.
name|equalsIgnoreCase
argument_list|(
name|param
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|NumberBox
name|text
init|=
operator|new
name|NumberBox
argument_list|()
decl_stmt|;
name|text
operator|.
name|setDecimal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|text
operator|.
name|setNegative
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|defaultValue
operator|!=
literal|null
condition|)
name|text
operator|.
name|setText
argument_list|(
name|defaultValue
argument_list|)
expr_stmt|;
name|text
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|String
argument_list|>
name|event
parameter_list|)
block|{
name|iTask
operator|.
name|setParameter
argument_list|(
name|param
operator|.
name|getName
argument_list|()
argument_list|,
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|widget
operator|=
name|text
expr_stmt|;
block|}
if|else if
condition|(
literal|"date"
operator|.
name|equalsIgnoreCase
argument_list|(
name|param
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|SingleDateSelector
name|text
init|=
operator|new
name|SingleDateSelector
argument_list|()
decl_stmt|;
if|if
condition|(
name|defaultValue
operator|!=
literal|null
condition|)
name|text
operator|.
name|setText
argument_list|(
name|defaultValue
argument_list|)
expr_stmt|;
specifier|final
name|DateTimeFormat
name|format
init|=
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|eventDateFormat
argument_list|()
argument_list|)
decl_stmt|;
name|text
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Date
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Date
argument_list|>
name|event
parameter_list|)
block|{
name|iTask
operator|.
name|setParameter
argument_list|(
name|param
operator|.
name|getName
argument_list|()
argument_list|,
name|format
operator|.
name|format
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|widget
operator|=
name|text
expr_stmt|;
block|}
if|else if
condition|(
literal|"slot"
operator|.
name|equalsIgnoreCase
argument_list|(
name|param
operator|.
name|getType
argument_list|()
argument_list|)
operator|||
literal|"time"
operator|.
name|equalsIgnoreCase
argument_list|(
name|param
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|TimeSelector
name|text
init|=
operator|new
name|TimeSelector
argument_list|()
decl_stmt|;
if|if
condition|(
name|defaultValue
operator|!=
literal|null
condition|)
name|text
operator|.
name|setText
argument_list|(
name|defaultValue
argument_list|)
expr_stmt|;
name|text
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Integer
argument_list|>
name|event
parameter_list|)
block|{
name|iTask
operator|.
name|setParameter
argument_list|(
name|param
operator|.
name|getName
argument_list|()
argument_list|,
name|event
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|widget
operator|=
name|text
expr_stmt|;
block|}
if|else if
condition|(
literal|"datetime"
operator|.
name|equalsIgnoreCase
argument_list|(
name|param
operator|.
name|getType
argument_list|()
argument_list|)
operator|||
literal|"timestamp"
operator|.
name|equalsIgnoreCase
argument_list|(
name|param
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|DateTimeBox
name|text
init|=
operator|new
name|DateTimeBox
argument_list|()
decl_stmt|;
if|if
condition|(
name|defaultValue
operator|!=
literal|null
condition|)
name|text
operator|.
name|setText
argument_list|(
name|defaultValue
argument_list|)
expr_stmt|;
name|text
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|String
argument_list|>
name|event
parameter_list|)
block|{
name|iTask
operator|.
name|setParameter
argument_list|(
name|param
operator|.
name|getName
argument_list|()
argument_list|,
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|widget
operator|=
name|text
expr_stmt|;
block|}
else|else
block|{
name|TextBox
name|text
init|=
operator|new
name|TextBox
argument_list|()
decl_stmt|;
name|text
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TextBox"
argument_list|)
expr_stmt|;
name|text
operator|.
name|setWidth
argument_list|(
literal|"400px"
argument_list|)
expr_stmt|;
if|if
condition|(
name|defaultValue
operator|!=
literal|null
condition|)
name|text
operator|.
name|setText
argument_list|(
name|defaultValue
argument_list|)
expr_stmt|;
name|text
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|String
argument_list|>
name|event
parameter_list|)
block|{
name|iTask
operator|.
name|setParameter
argument_list|(
name|param
operator|.
name|getName
argument_list|()
argument_list|,
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|widget
operator|=
name|text
expr_stmt|;
block|}
name|int
name|row
init|=
name|iForm
operator|.
name|insertRow
argument_list|(
name|iForm
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|iForm
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
operator|new
name|Label
argument_list|(
operator|(
name|param
operator|.
name|getLabel
argument_list|()
operator|==
literal|null
operator|||
name|param
operator|.
name|getLabel
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|param
operator|.
name|getName
argument_list|()
else|:
name|param
operator|.
name|getLabel
argument_list|()
operator|)
operator|+
literal|":"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
literal|1
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|isShowing
argument_list|()
condition|)
name|center
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

