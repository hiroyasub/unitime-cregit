begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|admin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|P
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|ServerDateTimeFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
operator|.
name|HasColumnName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TaskInterface
operator|.
name|TaskExecutionInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TaskInterface
operator|.
name|TaskOptionsInterface
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|DateTimeFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|TakesValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Anchor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
operator|.
name|HorizontalAlignmentConstant
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|TaskExecutionsTable
extends|extends
name|UniTimeTable
argument_list|<
name|TaskExecutionInterface
argument_list|>
implements|implements
name|TakesValue
argument_list|<
name|Collection
argument_list|<
name|TaskExecutionInterface
argument_list|>
argument_list|>
block|{
specifier|protected
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|GwtConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|TaskExecutionsTableColumn
name|iSortBy
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iAsc
init|=
literal|true
decl_stmt|;
specifier|private
name|TaskOptionsInterface
name|iOptions
decl_stmt|;
specifier|private
specifier|static
name|DateTimeFormat
name|sDateFormatMeeting
init|=
name|ServerDateTimeFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|meetingDateFormat
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|DateTimeFormat
name|sDateFormatTS
init|=
name|ServerDateTimeFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|timeStampFormatShort
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
name|TaskExecutionsTable
parameter_list|()
block|{
name|setStyleName
argument_list|(
literal|"unitime-PeriodicTaskTable"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|UniTimeTableHeader
argument_list|>
name|header
init|=
operator|new
name|ArrayList
argument_list|<
name|UniTimeTableHeader
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TaskExecutionsTableColumn
name|column
range|:
name|TaskExecutionsTableColumn
operator|.
name|values
argument_list|()
control|)
block|{
name|int
name|nrCells
init|=
name|getNbrCells
argument_list|(
name|column
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|nrCells
condition|;
name|idx
operator|++
control|)
block|{
name|UniTimeTableHeader
name|h
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|getColumnName
argument_list|(
name|column
argument_list|,
name|idx
argument_list|)
argument_list|,
name|getColumnAlignment
argument_list|(
name|column
argument_list|,
name|idx
argument_list|)
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
specifier|final
name|TaskExecutionsTableColumn
name|column
range|:
name|TaskExecutionsTableColumn
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|TaskExecutionsTableComparator
operator|.
name|isApplicable
argument_list|(
name|column
argument_list|)
operator|&&
name|getNbrCells
argument_list|(
name|column
argument_list|)
operator|>
literal|0
condition|)
block|{
specifier|final
name|UniTimeTableHeader
name|h
init|=
name|header
operator|.
name|get
argument_list|(
name|getCellIndex
argument_list|(
name|column
argument_list|)
argument_list|)
decl_stmt|;
name|Operation
name|op
init|=
operator|new
name|SortOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|doSort
argument_list|(
name|column
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|getRowCount
argument_list|()
operator|>
literal|1
operator|&&
name|h
operator|.
name|isVisible
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opSortBy
argument_list|(
name|getColumnName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getColumnName
parameter_list|()
block|{
return|return
name|h
operator|.
name|getHTML
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|" "
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|h
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
block|}
name|addRow
argument_list|(
literal|null
argument_list|,
name|header
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getCellCount
argument_list|(
literal|0
argument_list|)
condition|;
name|i
operator|++
control|)
name|getCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
literal|0
argument_list|,
name|i
argument_list|,
literal|"unitime-ClickableTableHeader"
argument_list|)
expr_stmt|;
name|setSortBy
argument_list|(
name|AdminCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getSortTaskExecutionsBy
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setOptions
parameter_list|(
name|TaskOptionsInterface
name|options
parameter_list|)
block|{
name|iOptions
operator|=
name|options
expr_stmt|;
block|}
specifier|public
name|TaskOptionsInterface
name|getOptions
parameter_list|()
block|{
return|return
name|iOptions
return|;
block|}
specifier|protected
name|void
name|doSort
parameter_list|(
name|TaskExecutionsTableColumn
name|column
parameter_list|)
block|{
if|if
condition|(
name|column
operator|==
name|iSortBy
condition|)
block|{
name|iAsc
operator|=
operator|!
name|iAsc
expr_stmt|;
block|}
else|else
block|{
name|iSortBy
operator|=
name|column
expr_stmt|;
name|iAsc
operator|=
literal|true
expr_stmt|;
block|}
name|AdminCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setSortTaskExecutionsBy
argument_list|(
name|getSortBy
argument_list|()
argument_list|)
expr_stmt|;
name|sort
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasSortBy
parameter_list|()
block|{
return|return
name|iSortBy
operator|!=
literal|null
return|;
block|}
specifier|public
name|int
name|getSortBy
parameter_list|()
block|{
return|return
name|iSortBy
operator|==
literal|null
condition|?
literal|0
else|:
name|iAsc
condition|?
literal|1
operator|+
name|iSortBy
operator|.
name|ordinal
argument_list|()
else|:
operator|-
literal|1
operator|-
name|iSortBy
operator|.
name|ordinal
argument_list|()
return|;
block|}
specifier|public
name|void
name|setSortBy
parameter_list|(
name|int
name|sortBy
parameter_list|)
block|{
if|if
condition|(
name|sortBy
operator|==
literal|0
condition|)
block|{
name|iSortBy
operator|=
literal|null
expr_stmt|;
name|iAsc
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|sortBy
operator|>
literal|0
condition|)
block|{
name|iSortBy
operator|=
name|TaskExecutionsTableColumn
operator|.
name|values
argument_list|()
index|[
name|sortBy
operator|-
literal|1
index|]
expr_stmt|;
name|iAsc
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|iSortBy
operator|=
name|TaskExecutionsTableColumn
operator|.
name|values
argument_list|()
index|[
operator|-
literal|1
operator|-
name|sortBy
index|]
expr_stmt|;
name|iAsc
operator|=
literal|false
expr_stmt|;
block|}
name|sort
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|sort
parameter_list|()
block|{
if|if
condition|(
name|iSortBy
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|getNbrCells
argument_list|(
name|iSortBy
argument_list|)
operator|==
literal|0
condition|)
name|iSortBy
operator|=
name|TaskExecutionsTableColumn
operator|.
name|DATE
expr_stmt|;
name|UniTimeTableHeader
name|header
init|=
name|getHeader
argument_list|(
name|getCellIndex
argument_list|(
name|iSortBy
argument_list|)
argument_list|)
decl_stmt|;
name|sort
argument_list|(
name|header
argument_list|,
operator|new
name|TaskExecutionsTableComparator
argument_list|(
name|iSortBy
argument_list|,
literal|true
argument_list|)
argument_list|,
name|iAsc
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|int
name|getNbrCells
parameter_list|(
name|TaskExecutionsTableColumn
name|column
parameter_list|)
block|{
switch|switch
condition|(
name|column
condition|)
block|{
default|default:
return|return
literal|1
return|;
block|}
block|}
specifier|public
name|String
name|getColumnName
parameter_list|(
name|TaskExecutionsTableColumn
name|column
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
switch|switch
condition|(
name|column
condition|)
block|{
case|case
name|DATE
case|:
return|return
name|MESSAGES
operator|.
name|colTaskScheduleDate
argument_list|()
return|;
case|case
name|TIME
case|:
return|return
name|MESSAGES
operator|.
name|colTaskScheduleTime
argument_list|()
return|;
case|case
name|QUEUED
case|:
return|return
name|MESSAGES
operator|.
name|colTaskQueued
argument_list|()
return|;
case|case
name|STARTED
case|:
return|return
name|MESSAGES
operator|.
name|colTaskStarted
argument_list|()
return|;
case|case
name|FINISHED
case|:
return|return
name|MESSAGES
operator|.
name|colTaskFinished
argument_list|()
return|;
case|case
name|STATUS
case|:
return|return
name|MESSAGES
operator|.
name|colTaskStatus
argument_list|()
return|;
case|case
name|MESSAGE
case|:
return|return
name|MESSAGES
operator|.
name|colTaskStatusMessage
argument_list|()
return|;
case|case
name|OUTPUT
case|:
return|return
name|MESSAGES
operator|.
name|colTaskOutput
argument_list|()
return|;
default|default:
return|return
name|column
operator|.
name|name
argument_list|()
return|;
block|}
block|}
specifier|public
name|int
name|getColumnIndex
parameter_list|(
name|TaskExecutionsTableColumn
name|column
parameter_list|)
block|{
name|int
name|before
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TaskExecutionsTableColumn
name|c
range|:
name|TaskExecutionsTableColumn
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|equals
argument_list|(
name|column
argument_list|)
condition|)
return|return
name|before
return|;
name|before
operator|+=
name|getNbrCells
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
operator|-
literal|1
return|;
block|}
specifier|protected
name|HorizontalAlignmentConstant
name|getColumnAlignment
parameter_list|(
name|TaskExecutionsTableColumn
name|column
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
switch|switch
condition|(
name|column
condition|)
block|{
default|default:
return|return
name|HasHorizontalAlignment
operator|.
name|ALIGN_LEFT
return|;
block|}
block|}
specifier|protected
name|int
name|getCellIndex
parameter_list|(
name|TaskExecutionsTableColumn
name|column
parameter_list|)
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TaskExecutionsTableColumn
name|c
range|:
name|TaskExecutionsTableColumn
operator|.
name|values
argument_list|()
control|)
if|if
condition|(
name|c
operator|.
name|ordinal
argument_list|()
operator|<
name|column
operator|.
name|ordinal
argument_list|()
condition|)
name|ret
operator|+=
name|getNbrCells
argument_list|(
name|c
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|protected
name|Widget
name|getCell
parameter_list|(
specifier|final
name|TaskExecutionInterface
name|e
parameter_list|,
specifier|final
name|TaskExecutionsTableColumn
name|column
parameter_list|,
specifier|final
name|int
name|idx
parameter_list|)
block|{
switch|switch
condition|(
name|column
condition|)
block|{
case|case
name|DATE
case|:
return|return
operator|new
name|Label
argument_list|(
name|sDateFormatMeeting
operator|.
name|format
argument_list|(
name|e
operator|.
name|getExecutionDate
argument_list|()
argument_list|)
argument_list|)
return|;
case|case
name|TIME
case|:
return|return
operator|new
name|Label
argument_list|(
name|e
operator|.
name|getExecutionTime
argument_list|(
name|CONSTANTS
argument_list|)
argument_list|)
return|;
case|case
name|QUEUED
case|:
return|return
operator|new
name|Label
argument_list|(
name|e
operator|.
name|getQueued
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|sDateFormatTS
operator|.
name|format
argument_list|(
name|e
operator|.
name|getQueued
argument_list|()
argument_list|)
argument_list|)
return|;
case|case
name|STARTED
case|:
return|return
operator|new
name|Label
argument_list|(
name|e
operator|.
name|getStarted
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|sDateFormatTS
operator|.
name|format
argument_list|(
name|e
operator|.
name|getStarted
argument_list|()
argument_list|)
argument_list|)
return|;
case|case
name|FINISHED
case|:
return|return
operator|new
name|Label
argument_list|(
name|e
operator|.
name|getFinished
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|sDateFormatTS
operator|.
name|format
argument_list|(
name|e
operator|.
name|getFinished
argument_list|()
argument_list|)
argument_list|)
return|;
case|case
name|STATUS
case|:
return|return
operator|new
name|Label
argument_list|(
name|CONSTANTS
operator|.
name|taskStatus
argument_list|()
index|[
name|e
operator|.
name|getStatus
argument_list|()
operator|.
name|ordinal
argument_list|()
index|]
argument_list|)
return|;
case|case
name|MESSAGE
case|:
name|Label
name|message
init|=
operator|new
name|Label
argument_list|(
name|e
operator|.
name|getStatusMessage
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|e
operator|.
name|getStatusMessage
argument_list|()
argument_list|)
decl_stmt|;
name|message
operator|.
name|addStyleName
argument_list|(
literal|"status-message"
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getStatusMessage
argument_list|()
operator|!=
literal|null
condition|)
name|message
operator|.
name|setTitle
argument_list|(
name|e
operator|.
name|getStatusMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|message
return|;
case|case
name|OUTPUT
case|:
if|if
condition|(
name|e
operator|.
name|getOutput
argument_list|()
operator|!=
literal|null
condition|)
return|return
operator|new
name|Anchor
argument_list|(
name|e
operator|.
name|getOutput
argument_list|()
argument_list|,
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"taskfile?e="
operator|+
name|e
operator|.
name|getId
argument_list|()
argument_list|)
return|;
return|return
operator|new
name|Label
argument_list|(
literal|""
argument_list|)
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|int
name|getRow
parameter_list|(
name|Long
name|execId
parameter_list|)
block|{
if|if
condition|(
name|execId
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|TaskExecutionInterface
name|task
init|=
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|task
operator|!=
literal|null
operator|&&
name|execId
operator|.
name|equals
argument_list|(
name|task
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
return|return
name|row
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
specifier|public
name|void
name|scrollToTaskExecution
parameter_list|(
name|Long
name|execId
parameter_list|)
block|{
if|if
condition|(
name|execId
operator|==
literal|null
condition|)
return|return;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|TaskExecutionInterface
name|task
init|=
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|task
operator|!=
literal|null
operator|&&
name|execId
operator|.
name|equals
argument_list|(
name|task
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|getRowFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|row
argument_list|)
operator|.
name|scrollIntoView
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|TaskExecutionsTableComparator
implements|implements
name|Comparator
argument_list|<
name|TaskExecutionInterface
argument_list|>
block|{
specifier|private
name|TaskExecutionsTableColumn
name|iColumn
decl_stmt|;
specifier|private
name|boolean
name|iAsc
decl_stmt|;
specifier|public
name|TaskExecutionsTableComparator
parameter_list|(
name|TaskExecutionsTableColumn
name|column
parameter_list|,
name|boolean
name|asc
parameter_list|)
block|{
name|iColumn
operator|=
name|column
expr_stmt|;
name|iAsc
operator|=
name|asc
expr_stmt|;
block|}
specifier|protected
name|int
name|compareByTime
parameter_list|(
name|TaskExecutionInterface
name|e1
parameter_list|,
name|TaskExecutionInterface
name|e2
parameter_list|)
block|{
name|int
name|cmp
init|=
operator|new
name|Integer
argument_list|(
name|e1
operator|.
name|getSlot
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getSlot
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|e1
operator|.
name|getDayOfYear
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getDayOfYear
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|int
name|compareByDate
parameter_list|(
name|TaskExecutionInterface
name|e1
parameter_list|,
name|TaskExecutionInterface
name|e2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|e1
operator|.
name|getDayOfYear
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getDayOfYear
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|new
name|Integer
argument_list|(
name|e1
operator|.
name|getSlot
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getSlot
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|int
name|compareByStatus
parameter_list|(
name|TaskExecutionInterface
name|e1
parameter_list|,
name|TaskExecutionInterface
name|e2
parameter_list|)
block|{
return|return
operator|(
name|e1
operator|==
literal|null
condition|?
name|e2
operator|==
literal|null
condition|?
literal|0
else|:
operator|-
literal|1
else|:
name|e2
operator|==
literal|null
condition|?
literal|1
else|:
name|e1
operator|.
name|compareTo
argument_list|(
name|e2
argument_list|)
operator|)
return|;
block|}
specifier|protected
name|int
name|compareByColumn
parameter_list|(
name|TaskExecutionInterface
name|e1
parameter_list|,
name|TaskExecutionInterface
name|e2
parameter_list|)
block|{
switch|switch
condition|(
name|iColumn
condition|)
block|{
case|case
name|DATE
case|:
return|return
name|compareByDate
argument_list|(
name|e1
argument_list|,
name|e2
argument_list|)
return|;
case|case
name|TIME
case|:
return|return
name|compareByTime
argument_list|(
name|e1
argument_list|,
name|e2
argument_list|)
return|;
case|case
name|STATUS
case|:
return|return
name|compareByStatus
argument_list|(
name|e1
argument_list|,
name|e2
argument_list|)
return|;
case|case
name|QUEUED
case|:
return|return
name|compare
argument_list|(
name|e1
operator|.
name|getQueued
argument_list|()
argument_list|,
name|e2
operator|.
name|getQueued
argument_list|()
argument_list|)
return|;
case|case
name|FINISHED
case|:
return|return
name|compare
argument_list|(
name|e1
operator|.
name|getFinished
argument_list|()
argument_list|,
name|e1
operator|.
name|getFinished
argument_list|()
argument_list|)
return|;
case|case
name|STARTED
case|:
return|return
name|compare
argument_list|(
name|e1
operator|.
name|getStarted
argument_list|()
argument_list|,
name|e2
operator|.
name|getStarted
argument_list|()
argument_list|)
return|;
case|case
name|MESSAGE
case|:
return|return
name|compare
argument_list|(
name|e1
operator|.
name|getStatusMessage
argument_list|()
argument_list|,
name|e2
operator|.
name|getStatusMessage
argument_list|()
argument_list|)
return|;
case|case
name|OUTPUT
case|:
return|return
name|compare
argument_list|(
name|e1
operator|.
name|getOutput
argument_list|()
argument_list|,
name|e2
operator|.
name|getOutput
argument_list|()
argument_list|)
return|;
default|default:
return|return
name|e1
operator|.
name|compareTo
argument_list|(
name|e2
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|isApplicable
parameter_list|(
name|TaskExecutionsTableColumn
name|column
parameter_list|)
block|{
switch|switch
condition|(
name|column
condition|)
block|{
case|case
name|DATE
case|:
case|case
name|TIME
case|:
case|case
name|STATUS
case|:
case|case
name|QUEUED
case|:
case|case
name|FINISHED
case|:
case|case
name|STARTED
case|:
case|case
name|MESSAGE
case|:
case|case
name|OUTPUT
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|TaskExecutionInterface
name|e1
parameter_list|,
name|TaskExecutionInterface
name|e2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|compareByColumn
argument_list|(
name|e1
argument_list|,
name|e2
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
operator|(
name|iAsc
condition|?
name|cmp
else|:
operator|-
name|cmp
operator|)
return|;
return|return
operator|(
name|iAsc
condition|?
name|e1
operator|.
name|compareTo
argument_list|(
name|e2
argument_list|)
else|:
name|e2
operator|.
name|compareTo
argument_list|(
name|e1
argument_list|)
operator|)
return|;
block|}
specifier|protected
name|int
name|compare
parameter_list|(
name|String
name|s1
parameter_list|,
name|String
name|s2
parameter_list|)
block|{
if|if
condition|(
name|s1
operator|==
literal|null
operator|||
name|s1
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|(
name|s2
operator|==
literal|null
operator|||
name|s2
operator|.
name|isEmpty
argument_list|()
condition|?
literal|0
else|:
literal|1
operator|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|s2
operator|==
literal|null
operator|||
name|s2
operator|.
name|isEmpty
argument_list|()
condition|?
operator|-
literal|1
else|:
name|s1
operator|.
name|compareToIgnoreCase
argument_list|(
name|s2
argument_list|)
operator|)
return|;
block|}
block|}
specifier|protected
name|int
name|compare
parameter_list|(
name|Number
name|n1
parameter_list|,
name|Number
name|n2
parameter_list|)
block|{
return|return
operator|(
name|n1
operator|==
literal|null
condition|?
name|n2
operator|==
literal|null
condition|?
literal|0
else|:
operator|-
literal|1
else|:
name|n2
operator|==
literal|null
condition|?
literal|1
else|:
name|Double
operator|.
name|compare
argument_list|(
name|n1
operator|.
name|doubleValue
argument_list|()
argument_list|,
name|n2
operator|.
name|doubleValue
argument_list|()
argument_list|)
operator|)
return|;
block|}
specifier|protected
name|int
name|compare
parameter_list|(
name|Date
name|n1
parameter_list|,
name|Date
name|n2
parameter_list|)
block|{
return|return
operator|(
name|n1
operator|==
literal|null
condition|?
name|n2
operator|==
literal|null
condition|?
literal|0
else|:
operator|-
literal|1
else|:
name|n2
operator|==
literal|null
condition|?
literal|1
else|:
name|n1
operator|.
name|compareTo
argument_list|(
name|n2
argument_list|)
operator|)
return|;
block|}
specifier|protected
name|int
name|compare
parameter_list|(
name|Boolean
name|b1
parameter_list|,
name|Boolean
name|b2
parameter_list|)
block|{
return|return
operator|(
name|b1
operator|==
literal|null
condition|?
name|b2
operator|==
literal|null
condition|?
literal|0
else|:
operator|-
literal|1
else|:
name|b2
operator|==
literal|null
condition|?
literal|1
else|:
operator|(
name|b1
operator|.
name|booleanValue
argument_list|()
operator|==
name|b2
operator|.
name|booleanValue
argument_list|()
operator|)
condition|?
literal|0
else|:
operator|(
name|b1
operator|.
name|booleanValue
argument_list|()
condition|?
literal|1
else|:
operator|-
literal|1
operator|)
operator|)
return|;
block|}
block|}
specifier|public
specifier|static
enum|enum
name|TaskExecutionsTableColumn
block|{
name|DATE
block|,
name|TIME
block|,
name|QUEUED
block|,
name|STARTED
block|,
name|FINISHED
block|,
name|STATUS
block|,
name|MESSAGE
block|,
name|OUTPUT
block|, 		; 	}
specifier|public
name|int
name|addExecution
parameter_list|(
specifier|final
name|TaskExecutionInterface
name|exec
parameter_list|)
block|{
name|List
argument_list|<
name|Widget
argument_list|>
name|widgets
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TaskExecutionsTableColumn
name|column
range|:
name|TaskExecutionsTableColumn
operator|.
name|values
argument_list|()
control|)
block|{
name|int
name|nbrCells
init|=
name|getNbrCells
argument_list|(
name|column
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|nbrCells
condition|;
name|idx
operator|++
control|)
block|{
name|Widget
name|cell
init|=
name|getCell
argument_list|(
name|exec
argument_list|,
name|column
argument_list|,
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|cell
operator|==
literal|null
condition|)
name|cell
operator|=
operator|new
name|P
argument_list|()
expr_stmt|;
name|widgets
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Widget
name|w
range|:
name|widgets
control|)
if|if
condition|(
name|w
operator|!=
literal|null
condition|)
name|w
operator|.
name|addStyleName
argument_list|(
literal|"status-"
operator|+
name|exec
operator|.
name|getStatus
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|row
init|=
name|addRow
argument_list|(
name|exec
argument_list|,
name|widgets
argument_list|)
decl_stmt|;
name|getRowFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
literal|"row"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|getCellCount
argument_list|(
name|row
argument_list|)
condition|;
name|col
operator|++
control|)
name|getCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
literal|"cell"
argument_list|)
expr_stmt|;
return|return
name|row
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|Collection
argument_list|<
name|TaskExecutionInterface
argument_list|>
name|value
parameter_list|)
block|{
name|clearTable
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|boolean
name|hasOutput
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|TaskExecutionInterface
name|exec
range|:
name|value
control|)
block|{
name|addExecution
argument_list|(
name|exec
argument_list|)
expr_stmt|;
if|if
condition|(
name|exec
operator|.
name|getOutput
argument_list|()
operator|!=
literal|null
condition|)
name|hasOutput
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|setColumnVisible
argument_list|(
name|getColumnIndex
argument_list|(
name|TaskExecutionsTableColumn
operator|.
name|OUTPUT
argument_list|)
argument_list|,
name|hasOutput
argument_list|)
expr_stmt|;
name|sort
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|TaskExecutionInterface
argument_list|>
name|getValue
parameter_list|()
block|{
return|return
name|getData
argument_list|()
return|;
block|}
specifier|public
specifier|static
interface|interface
name|SortOperation
extends|extends
name|Operation
extends|,
name|HasColumnName
block|{}
block|}
end_class

end_unit

