begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.4 (University Timetabling Application)  * Copyright (C) 2012, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|events
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcImplementedBy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcResponseList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AcademicSessionProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|FocusEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|FocusHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|HasMouseDownHandlers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyCodes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyDownEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyDownHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyUpEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyUpHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseDownEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseDownHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|shared
operator|.
name|HandlerRegistration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DOM
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|IsSerializable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|AbsolutePanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|MenuBar
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|MenuItem
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|PopupPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ScrollPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|TextBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|SuggestOracle
operator|.
name|Suggestion
import|;
end_import

begin_class
specifier|public
class|class
name|AcademicSessionSelectionBox
extends|extends
name|Composite
implements|implements
name|AcademicSessionProvider
block|{
specifier|private
specifier|static
name|GwtRpcServiceAsync
name|RPC
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtRpcService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|TextBox
name|iFilter
decl_stmt|;
specifier|private
name|PopupPanel
name|iPopup
decl_stmt|;
specifier|private
name|SessionMenu
name|iSessionMenu
decl_stmt|;
specifier|private
name|ScrollPanel
name|iSessionScroll
decl_stmt|;
specifier|private
name|AbsolutePanel
name|iPanel
decl_stmt|;
specifier|private
name|Button
name|iPrev
decl_stmt|,
name|iNext
decl_stmt|;
specifier|private
name|List
argument_list|<
name|AcademicSessionChangeHandler
argument_list|>
name|iChangeHandlers
init|=
operator|new
name|ArrayList
argument_list|<
name|AcademicSessionChangeHandler
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|AcademicSession
argument_list|>
name|iSessions
init|=
operator|new
name|ArrayList
argument_list|<
name|AcademicSession
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|AcademicSession
name|iSession
init|=
literal|null
decl_stmt|;
specifier|private
name|Long
name|iLastSessionId
init|=
literal|null
decl_stmt|;
specifier|private
name|UniTimeWidget
argument_list|<
name|AbsolutePanel
argument_list|>
name|iWidget
decl_stmt|;
specifier|public
name|AcademicSessionSelectionBox
parameter_list|()
block|{
name|iPanel
operator|=
operator|new
name|AbsolutePanel
argument_list|()
expr_stmt|;
name|iPanel
operator|.
name|setStyleName
argument_list|(
literal|"unitime-AcademicSessionSelector"
argument_list|)
expr_stmt|;
name|iPrev
operator|=
operator|new
name|Button
argument_list|(
literal|"&laquo;"
argument_list|)
expr_stmt|;
name|iPrev
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iPrev
operator|.
name|setTitle
argument_list|(
literal|"Previous academic session"
argument_list|)
expr_stmt|;
name|iPrev
operator|.
name|addMouseDownHandler
argument_list|(
operator|new
name|MouseDownHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseDown
parameter_list|(
name|MouseDownEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|iSession
operator|!=
literal|null
operator|&&
name|iSession
operator|.
name|getPreviousId
argument_list|()
operator|!=
literal|null
condition|)
name|selectSession
argument_list|(
name|iSession
operator|.
name|getPreviousId
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iNext
operator|=
operator|new
name|Button
argument_list|(
literal|"&raquo;"
argument_list|)
expr_stmt|;
name|iNext
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iNext
operator|.
name|setTitle
argument_list|(
literal|"Next academic session"
argument_list|)
expr_stmt|;
name|iNext
operator|.
name|addMouseDownHandler
argument_list|(
operator|new
name|MouseDownHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseDown
parameter_list|(
name|MouseDownEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|iSession
operator|!=
literal|null
operator|&&
name|iSession
operator|.
name|getNextId
argument_list|()
operator|!=
literal|null
condition|)
name|selectSession
argument_list|(
name|iSession
operator|.
name|getNextId
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iFilter
operator|=
operator|new
name|TextBox
argument_list|()
expr_stmt|;
comment|/*(new SuggestOracle() { 			@Override 			public void requestDefaultSuggestions(Request request, Callback callback) { 				requestSuggestions(request, callback); 			} 			@Override 			public void requestSuggestions(final Request request, final Callback callback) { 				String query = request.getQuery(); 				ArrayList<Suggestion> suggestions = new ArrayList<Suggestion>(); 				iFilter.setAutoSelectEnabled(true); 				if (iSessions == null || iSessions.isEmpty()) { 					suggestions.add(new Suggestion() { 						@Override 						public String getDisplayString() { 							return "<font color='red'>No academic sessions.</font>"; 						} 						@Override 						public String getReplacementString() { 							return ""; 						} 						 					}); 				} else { 					sessions: for (final AcademicSession session: iSessions) { 						for (String c: query.split("[ \\(\\),]")) 							if (!session.getName().toLowerCase().contains(c.trim().toLowerCase())) continue sessions; 						suggestions.add(session); 					} 					Collections.reverse(suggestions); 				} 				if (suggestions.isEmpty()&& iSessions != null) { 					for (final AcademicSession session: iSessions) { 						suggestions.add(session); 					} 					Collections.reverse(suggestions); 				} 				callback.onSuggestionsReady(request, new Response(suggestions)); 			} 			@Override 			public boolean isDisplayStringHTML() { return true; } 			}); 		iFilter.getTextBox().addFocusHandler(new FocusHandler() { 			@Override 			public void onFocus(FocusEvent event) { 				iFilter.showSuggestionList(); 			} 		}); 		iFilter.addStyleName("selection"); 		iFilter.addSelectionHandler(new SelectionHandler<SuggestOracle.Suggestion>() { 			@Override 			public void onSelection(SelectionEvent<Suggestion> event) { 				if (event.getSelectedItem() instanceof AcademicSession) 					selectSession(((AcademicSession)event.getSelectedItem()).getUniqueId(), null); 			} 		});*/
name|iFilter
operator|.
name|addStyleName
argument_list|(
literal|"selection"
argument_list|)
expr_stmt|;
name|iFilter
operator|.
name|addKeyDownHandler
argument_list|(
operator|new
name|KeyDownHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyDown
parameter_list|(
name|KeyDownEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|isSuggestionsShowing
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|event
operator|.
name|getNativeEvent
argument_list|()
operator|.
name|getKeyCode
argument_list|()
condition|)
block|{
case|case
name|KeyCodes
operator|.
name|KEY_DOWN
case|:
name|iSessionMenu
operator|.
name|selectItem
argument_list|(
name|iSessionMenu
operator|.
name|getSelectedItemIndex
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|KeyCodes
operator|.
name|KEY_UP
case|:
if|if
condition|(
name|iSessionMenu
operator|.
name|getSelectedItemIndex
argument_list|()
operator|==
operator|-
literal|1
condition|)
block|{
name|iSessionMenu
operator|.
name|selectItem
argument_list|(
name|iSessionMenu
operator|.
name|getNumItems
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iSessionMenu
operator|.
name|selectItem
argument_list|(
name|iSessionMenu
operator|.
name|getSelectedItemIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|KeyCodes
operator|.
name|KEY_TAB
case|:
case|case
name|KeyCodes
operator|.
name|KEY_ENTER
case|:
name|iSessionMenu
operator|.
name|executeSelected
argument_list|()
expr_stmt|;
name|hideSuggestions
argument_list|()
expr_stmt|;
break|break;
case|case
name|KeyCodes
operator|.
name|KEY_ESCAPE
case|:
name|hideSuggestions
argument_list|()
expr_stmt|;
break|break;
block|}
switch|switch
condition|(
name|event
operator|.
name|getNativeEvent
argument_list|()
operator|.
name|getKeyCode
argument_list|()
condition|)
block|{
case|case
name|KeyCodes
operator|.
name|KEY_DOWN
case|:
case|case
name|KeyCodes
operator|.
name|KEY_UP
case|:
case|case
name|KeyCodes
operator|.
name|KEY_ENTER
case|:
case|case
name|KeyCodes
operator|.
name|KEY_ESCAPE
case|:
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|event
operator|.
name|getNativeEvent
argument_list|()
operator|.
name|getKeyCode
argument_list|()
operator|==
name|KeyCodes
operator|.
name|KEY_DOWN
operator|&&
operator|(
name|event
operator|.
name|getNativeEvent
argument_list|()
operator|.
name|getAltKey
argument_list|()
operator|||
name|iFilter
operator|.
name|getCursorPos
argument_list|()
operator|==
name|iFilter
operator|.
name|getText
argument_list|()
operator|.
name|length
argument_list|()
operator|)
condition|)
block|{
name|showSuggestions
argument_list|()
expr_stmt|;
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|iFilter
operator|.
name|addKeyUpHandler
argument_list|(
operator|new
name|KeyUpHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyUp
parameter_list|(
name|KeyUpEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|selectASuggestion
argument_list|()
operator|&&
operator|!
name|isSuggestionsShowing
argument_list|()
condition|)
name|showSuggestions
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iFilter
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|String
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|iSessions
operator|!=
literal|null
condition|)
for|for
control|(
name|AcademicSession
name|session
range|:
name|iSessions
control|)
block|{
if|if
condition|(
name|session
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
name|selectSession
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|iFilter
operator|.
name|addFocusHandler
argument_list|(
operator|new
name|FocusHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFocus
parameter_list|(
name|FocusEvent
name|event
parameter_list|)
block|{
name|showSuggestions
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iSessionMenu
operator|=
operator|new
name|SessionMenu
argument_list|()
expr_stmt|;
name|iSessionScroll
operator|=
operator|new
name|ScrollPanel
argument_list|(
name|iSessionMenu
argument_list|)
expr_stmt|;
name|iSessionScroll
operator|.
name|addStyleName
argument_list|(
literal|"scroll"
argument_list|)
expr_stmt|;
name|iPopup
operator|=
operator|new
name|PopupPanel
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iPopup
operator|.
name|setPreviewingAllNativeEvents
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iPopup
operator|.
name|setStyleName
argument_list|(
literal|"unitime-AcademicSessionSelectorPopup"
argument_list|)
expr_stmt|;
name|iPopup
operator|.
name|setWidget
argument_list|(
name|iSessionScroll
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|add
argument_list|(
name|iPrev
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|add
argument_list|(
name|iFilter
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|add
argument_list|(
name|iNext
argument_list|)
expr_stmt|;
name|iWidget
operator|=
operator|new
name|UniTimeWidget
argument_list|<
name|AbsolutePanel
argument_list|>
argument_list|(
name|iPanel
argument_list|)
expr_stmt|;
name|iWidget
operator|.
name|setHint
argument_list|(
literal|"Loading academic sessions..."
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
operator|new
name|ListAcademicSessions
argument_list|(
name|Window
operator|.
name|Location
operator|.
name|getParameter
argument_list|(
literal|"term"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|GwtRpcResponseList
argument_list|<
name|AcademicSession
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iWidget
operator|.
name|setErrorHint
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|checkAccess
argument_list|(
name|caught
argument_list|)
expr_stmt|;
name|onInitializationFailure
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|GwtRpcResponseList
argument_list|<
name|AcademicSession
argument_list|>
name|result
parameter_list|)
block|{
name|iWidget
operator|.
name|clearHint
argument_list|()
expr_stmt|;
name|iSessions
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iSessions
operator|.
name|addAll
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|iSession
operator|=
literal|null
expr_stmt|;
name|iPrev
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iNext
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|AcademicSession
name|session
range|:
name|result
control|)
block|{
if|if
condition|(
name|session
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|iSession
operator|=
name|session
expr_stmt|;
name|iPrev
operator|.
name|setEnabled
argument_list|(
name|session
operator|.
name|getPreviousId
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|iNext
operator|.
name|setEnabled
argument_list|(
name|session
operator|.
name|getNextId
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
name|Command
name|command
init|=
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|hideSuggestions
argument_list|()
expr_stmt|;
name|selectSession
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|MenuItem
name|item
init|=
operator|new
name|MenuItem
argument_list|(
name|session
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|,
name|command
argument_list|)
decl_stmt|;
name|item
operator|.
name|setStyleName
argument_list|(
literal|"item"
argument_list|)
expr_stmt|;
name|DOM
operator|.
name|setStyleAttribute
argument_list|(
name|item
operator|.
name|getElement
argument_list|()
argument_list|,
literal|"whiteSpace"
argument_list|,
literal|"nowrap"
argument_list|)
expr_stmt|;
name|iSessionMenu
operator|.
name|addItem
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
name|onInitializationSuccess
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSession
operator|!=
literal|null
condition|)
block|{
name|iFilter
operator|.
name|setText
argument_list|(
name|iSession
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fireAcademicSessionChanged
argument_list|()
expr_stmt|;
block|}
name|selectASuggestion
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|iWidget
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|hideSuggestions
parameter_list|()
block|{
if|if
condition|(
name|iPopup
operator|.
name|isShowing
argument_list|()
condition|)
name|iPopup
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|showSuggestions
parameter_list|()
block|{
name|iPopup
operator|.
name|showRelativeTo
argument_list|(
name|iFilter
argument_list|)
expr_stmt|;
name|iSessionMenu
operator|.
name|scrollToView
argument_list|()
expr_stmt|;
block|}
specifier|private
name|boolean
name|isSuggestionsShowing
parameter_list|()
block|{
return|return
name|iPopup
operator|.
name|isShowing
argument_list|()
return|;
block|}
specifier|private
name|String
name|iLastSelected
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|selectASuggestion
parameter_list|()
block|{
if|if
condition|(
name|iFilter
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
name|iLastSelected
argument_list|)
condition|)
return|return
literal|false
return|;
name|iLastSelected
operator|=
name|iFilter
operator|.
name|getText
argument_list|()
expr_stmt|;
name|int
name|selected
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|iSessions
operator|!=
literal|null
condition|)
block|{
name|sessions
label|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iSessions
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|AcademicSession
name|session
init|=
name|iSessions
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|selected
operator|<
literal|0
operator|&&
name|session
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|selected
operator|=
name|i
expr_stmt|;
block|}
for|for
control|(
name|String
name|c
range|:
name|iLastSelected
operator|.
name|split
argument_list|(
literal|"[ \\(\\),]"
argument_list|)
control|)
if|if
condition|(
operator|!
name|session
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|contains
argument_list|(
name|c
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
continue|continue
name|sessions
continue|;
name|selected
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|selected
operator|>=
literal|0
condition|)
name|iSessionMenu
operator|.
name|selectItem
argument_list|(
name|selected
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|protected
name|void
name|onInitializationSuccess
parameter_list|(
name|List
argument_list|<
name|AcademicSession
argument_list|>
name|sessions
parameter_list|)
block|{
block|}
specifier|protected
name|void
name|onInitializationFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
block|}
specifier|public
specifier|static
class|class
name|Button
extends|extends
name|AbsolutePanel
implements|implements
name|HasMouseDownHandlers
block|{
specifier|private
name|boolean
name|iEnabled
init|=
literal|true
decl_stmt|;
specifier|private
name|Button
parameter_list|(
name|String
name|caption
parameter_list|)
block|{
name|getElement
argument_list|()
operator|.
name|setInnerHTML
argument_list|(
name|caption
argument_list|)
expr_stmt|;
name|addStyleName
argument_list|(
literal|"enabled"
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEDOWN
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isEnabled
parameter_list|()
block|{
return|return
name|iEnabled
return|;
block|}
specifier|public
name|void
name|setEnabled
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
if|if
condition|(
name|iEnabled
operator|==
name|enabled
condition|)
return|return;
name|iEnabled
operator|=
name|enabled
expr_stmt|;
if|if
condition|(
name|iEnabled
condition|)
block|{
name|addStyleName
argument_list|(
literal|"enabled"
argument_list|)
expr_stmt|;
name|removeStyleName
argument_list|(
literal|"disabled"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addStyleName
argument_list|(
literal|"disabled"
argument_list|)
expr_stmt|;
name|removeStyleName
argument_list|(
literal|"enabled"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onBrowserEvent
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|DOM
operator|.
name|eventGetType
argument_list|(
name|event
argument_list|)
condition|)
block|{
case|case
name|Event
operator|.
name|ONMOUSEDOWN
case|:
name|MouseDownEvent
operator|.
name|fireNativeEvent
argument_list|(
name|event
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
annotation|@
name|Override
specifier|public
name|HandlerRegistration
name|addMouseDownHandler
parameter_list|(
name|MouseDownHandler
name|handler
parameter_list|)
block|{
return|return
name|addHandler
argument_list|(
name|handler
argument_list|,
name|MouseDownEvent
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Long
name|getAcademicSessionId
parameter_list|()
block|{
return|return
operator|(
name|iSession
operator|==
literal|null
condition|?
literal|null
else|:
name|iSession
operator|.
name|getUniqueId
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAcademicSessionName
parameter_list|()
block|{
return|return
operator|(
name|iSession
operator|==
literal|null
condition|?
literal|null
else|:
name|iSession
operator|.
name|getName
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addAcademicSessionChangeHandler
parameter_list|(
name|AcademicSessionChangeHandler
name|handler
parameter_list|)
block|{
name|iChangeHandlers
operator|.
name|add
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|selectSession
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
name|callback
parameter_list|)
block|{
if|if
condition|(
name|iSession
operator|!=
literal|null
operator|&&
name|iSession
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|sessionId
argument_list|)
condition|)
block|{
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
name|callback
operator|.
name|onSuccess
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|iSession
operator|==
literal|null
operator|&&
name|sessionId
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
name|callback
operator|.
name|onSuccess
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
block|{
name|iSession
operator|=
literal|null
expr_stmt|;
name|iFilter
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
name|callback
operator|.
name|onSuccess
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iPrev
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iNext
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iSession
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|iSessions
operator|!=
literal|null
condition|)
for|for
control|(
name|AcademicSession
name|session
range|:
name|iSessions
control|)
block|{
if|if
condition|(
name|sessionId
operator|.
name|equals
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|iSession
operator|=
name|session
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|iSession
operator|!=
literal|null
condition|)
block|{
name|iFilter
operator|.
name|setText
argument_list|(
name|iSession
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|iPrev
operator|.
name|setEnabled
argument_list|(
name|iSession
operator|.
name|getPreviousId
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|iNext
operator|.
name|setEnabled
argument_list|(
name|iSession
operator|.
name|getNextId
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
name|callback
operator|.
name|onSuccess
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iFilter
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|iPrev
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iNext
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
name|callback
operator|.
name|onSuccess
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|selectASuggestion
argument_list|()
expr_stmt|;
name|fireAcademicSessionChanged
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|fireAcademicSessionChanged
parameter_list|()
block|{
specifier|final
name|Long
name|oldSession
init|=
name|iLastSessionId
decl_stmt|;
name|iLastSessionId
operator|=
name|getAcademicSessionId
argument_list|()
expr_stmt|;
name|AcademicSessionChangeEvent
name|event
init|=
operator|new
name|AcademicSessionChangeEvent
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isChanged
parameter_list|()
block|{
if|if
condition|(
name|oldSession
operator|==
literal|null
condition|)
return|return
name|getAcademicSessionId
argument_list|()
operator|!=
literal|null
return|;
else|else
return|return
operator|!
name|oldSession
operator|.
name|equals
argument_list|(
name|getAcademicSessionId
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Long
name|getOldAcademicSessionId
parameter_list|()
block|{
return|return
name|oldSession
return|;
block|}
annotation|@
name|Override
specifier|public
name|Long
name|getNewAcademicSessionId
parameter_list|()
block|{
return|return
name|getAcademicSessionId
argument_list|()
return|;
block|}
block|}
decl_stmt|;
for|for
control|(
name|AcademicSessionChangeHandler
name|handler
range|:
name|iChangeHandlers
control|)
name|handler
operator|.
name|onAcademicSessionChange
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
specifier|private
class|class
name|SessionMenu
extends|extends
name|MenuBar
block|{
name|SessionMenu
parameter_list|()
block|{
name|super
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setStyleName
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|setFocusOnHoverEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getNumItems
parameter_list|()
block|{
return|return
name|getItems
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|int
name|getSelectedItemIndex
parameter_list|()
block|{
name|MenuItem
name|selectedItem
init|=
name|getSelectedItem
argument_list|()
decl_stmt|;
if|if
condition|(
name|selectedItem
operator|!=
literal|null
condition|)
return|return
name|getItems
argument_list|()
operator|.
name|indexOf
argument_list|(
name|selectedItem
argument_list|)
return|;
return|return
operator|-
literal|1
return|;
block|}
specifier|public
name|void
name|selectItem
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|List
argument_list|<
name|MenuItem
argument_list|>
name|items
init|=
name|getItems
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
operator|>
operator|-
literal|1
operator|&&
name|index
operator|<
name|items
operator|.
name|size
argument_list|()
condition|)
block|{
name|selectItem
argument_list|(
name|items
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|iSessionScroll
operator|.
name|ensureVisible
argument_list|(
name|items
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|scrollToView
parameter_list|()
block|{
name|List
argument_list|<
name|MenuItem
argument_list|>
name|items
init|=
name|getItems
argument_list|()
decl_stmt|;
name|int
name|index
init|=
name|getSelectedItemIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
operator|>
operator|-
literal|1
operator|&&
name|index
operator|<
name|items
operator|.
name|size
argument_list|()
condition|)
block|{
name|iSessionScroll
operator|.
name|ensureVisible
argument_list|(
name|items
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|executeSelected
parameter_list|()
block|{
name|MenuItem
name|selected
init|=
name|getSelectedItem
argument_list|()
decl_stmt|;
if|if
condition|(
name|selected
operator|!=
literal|null
condition|)
name|selected
operator|.
name|getCommand
argument_list|()
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|AcademicSession
implements|implements
name|IsSerializable
implements|,
name|Suggestion
block|{
specifier|private
name|Long
name|iUniqueId
decl_stmt|;
specifier|private
name|String
name|iName
decl_stmt|;
specifier|private
name|boolean
name|iSelected
decl_stmt|;
specifier|private
name|Long
name|iPreviousId
decl_stmt|,
name|iNextId
decl_stmt|;
specifier|public
name|AcademicSession
parameter_list|()
block|{
block|}
specifier|public
name|AcademicSession
parameter_list|(
name|Long
name|uniqueId
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|selected
parameter_list|)
block|{
name|iUniqueId
operator|=
name|uniqueId
expr_stmt|;
name|iName
operator|=
name|name
expr_stmt|;
name|iSelected
operator|=
name|selected
expr_stmt|;
block|}
specifier|public
name|Long
name|getUniqueId
parameter_list|()
block|{
return|return
name|iUniqueId
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
specifier|public
name|boolean
name|isSelected
parameter_list|()
block|{
return|return
name|iSelected
return|;
block|}
specifier|public
name|Long
name|getPreviousId
parameter_list|()
block|{
return|return
name|iPreviousId
return|;
block|}
specifier|public
name|void
name|setPreviousId
parameter_list|(
name|Long
name|id
parameter_list|)
block|{
name|iPreviousId
operator|=
name|id
expr_stmt|;
block|}
specifier|public
name|Long
name|getNextId
parameter_list|()
block|{
return|return
name|iNextId
return|;
block|}
specifier|public
name|void
name|setNextId
parameter_list|(
name|Long
name|id
parameter_list|)
block|{
name|iNextId
operator|=
name|id
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDisplayString
parameter_list|()
block|{
return|return
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getReplacementString
parameter_list|()
block|{
return|return
name|getName
argument_list|()
return|;
block|}
block|}
annotation|@
name|GwtRpcImplementedBy
argument_list|(
literal|"org.unitime.timetable.events.ListAcademicSessions"
argument_list|)
specifier|public
specifier|static
class|class
name|ListAcademicSessions
implements|implements
name|GwtRpcRequest
argument_list|<
name|GwtRpcResponseList
argument_list|<
name|AcademicSession
argument_list|>
argument_list|>
block|{
specifier|private
name|String
name|iTerm
init|=
literal|null
decl_stmt|;
specifier|public
name|ListAcademicSessions
parameter_list|()
block|{
block|}
specifier|public
name|ListAcademicSessions
parameter_list|(
name|String
name|term
parameter_list|)
block|{
name|iTerm
operator|=
name|term
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasTerm
parameter_list|()
block|{
return|return
name|iTerm
operator|!=
literal|null
operator|&&
operator|!
name|iTerm
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|String
name|getTerm
parameter_list|()
block|{
return|return
name|iTerm
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|(
name|hasTerm
argument_list|()
condition|?
name|getTerm
argument_list|()
else|:
literal|""
operator|)
return|;
block|}
block|}
block|}
end_class

end_unit

