begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|events
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|aria
operator|.
name|AriaStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|aria
operator|.
name|AriaTextBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|aria
operator|.
name|HasAriaLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcResponseList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtAriaMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AcademicSessionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AcademicSessionProvider
operator|.
name|AcademicSessionChangeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AcademicSessionProvider
operator|.
name|AcademicSessionChangeHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|RequestSessionDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|SessionMonth
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|aria
operator|.
name|client
operator|.
name|Id
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|aria
operator|.
name|client
operator|.
name|Roles
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
operator|.
name|ScheduledCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|BlurEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|BlurHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|FocusEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|FocusHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|HasAllFocusHandlers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyCodes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyDownEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyDownHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyPressEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyPressHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyUpEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyUpHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|shared
operator|.
name|HandlerRegistration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|DateTimeFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DOM
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|AbsolutePanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Focusable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|SessionDatesSelector
extends|extends
name|Composite
implements|implements
name|HasValue
argument_list|<
name|List
argument_list|<
name|Date
argument_list|>
argument_list|>
implements|,
name|Focusable
block|{
specifier|private
specifier|static
specifier|final
name|GwtAriaMessages
name|ARIA
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtAriaMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|GwtConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|GwtRpcServiceAsync
name|RPC
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtRpcService
operator|.
name|class
argument_list|)
decl_stmt|;
name|AcademicSessionProvider
name|iAcademicSession
decl_stmt|;
name|UniTimeWidget
argument_list|<
name|DatesPanel
argument_list|>
name|iPanel
decl_stmt|;
specifier|private
name|int
name|iSessionYear
init|=
literal|1900
decl_stmt|;
specifier|private
name|boolean
name|iCanSelectPast
init|=
literal|false
decl_stmt|;
specifier|public
name|SessionDatesSelector
parameter_list|(
name|AcademicSessionProvider
name|session
parameter_list|)
block|{
name|iAcademicSession
operator|=
name|session
expr_stmt|;
name|iPanel
operator|=
operator|new
name|UniTimeWidget
argument_list|<
name|DatesPanel
argument_list|>
argument_list|(
operator|new
name|DatesPanel
argument_list|()
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|iPanel
argument_list|)
expr_stmt|;
name|iAcademicSession
operator|.
name|addAcademicSessionChangeHandler
argument_list|(
operator|new
name|AcademicSessionChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onAcademicSessionChange
parameter_list|(
name|AcademicSessionChangeEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|isChanged
argument_list|()
condition|)
name|init
argument_list|(
name|event
operator|.
name|getNewAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|init
argument_list|(
name|iAcademicSession
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SessionDatesSelector
parameter_list|(
name|List
argument_list|<
name|SessionMonth
argument_list|>
name|months
parameter_list|)
block|{
name|iPanel
operator|=
operator|new
name|UniTimeWidget
argument_list|<
name|DatesPanel
argument_list|>
argument_list|(
operator|new
name|DatesPanel
argument_list|()
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|iPanel
argument_list|)
expr_stmt|;
name|init
argument_list|(
name|months
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isCanSelectPast
parameter_list|()
block|{
return|return
name|iCanSelectPast
return|;
block|}
specifier|public
name|void
name|setCanSelectPast
parameter_list|(
name|boolean
name|canSelectPast
parameter_list|)
block|{
name|iCanSelectPast
operator|=
name|canSelectPast
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
block|{
name|iPanel
operator|.
name|setHint
argument_list|(
name|MESSAGES
operator|.
name|hintNoSession
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iPanel
operator|.
name|setHint
argument_list|(
name|MESSAGES
operator|.
name|waitLoadingDataForSession
argument_list|(
name|iAcademicSession
operator|.
name|getAcademicSessionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
operator|new
name|RequestSessionDetails
argument_list|(
name|sessionId
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|GwtRpcResponseList
argument_list|<
name|SessionMonth
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iPanel
operator|.
name|setErrorHint
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|GwtRpcResponseList
argument_list|<
name|SessionMonth
argument_list|>
name|result
parameter_list|)
block|{
name|iPanel
operator|.
name|clearHint
argument_list|()
expr_stmt|;
name|init
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|init
parameter_list|(
name|List
argument_list|<
name|SessionMonth
argument_list|>
name|months
parameter_list|)
block|{
name|iPanel
operator|.
name|getWidget
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|int
name|firstOutside
init|=
operator|-
literal|1
decl_stmt|,
name|start
init|=
operator|-
literal|1
decl_stmt|,
name|end
init|=
operator|-
literal|1
decl_stmt|,
name|finals
init|=
operator|-
literal|1
decl_stmt|,
name|midterms
init|=
operator|-
literal|1
decl_stmt|,
name|firstHoliday
init|=
operator|-
literal|1
decl_stmt|,
name|firstBreak
init|=
operator|-
literal|1
decl_stmt|,
name|today
init|=
operator|-
literal|1
decl_stmt|,
name|firstPast
init|=
operator|-
literal|1
decl_stmt|,
name|firstEventDate
init|=
operator|-
literal|1
decl_stmt|,
name|firstClassDate
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|P
name|lastWeek
init|=
literal|null
decl_stmt|;
for|for
control|(
name|SessionMonth
name|month
range|:
name|months
control|)
block|{
name|SingleMonth
name|m
init|=
operator|new
name|SingleMonth
argument_list|(
name|month
argument_list|,
name|isCanSelectPast
argument_list|()
argument_list|,
name|idx
operator|++
argument_list|,
name|lastWeek
argument_list|)
decl_stmt|;
name|lastWeek
operator|=
name|m
operator|.
name|getWeeks
argument_list|()
operator|.
name|get
argument_list|(
name|m
operator|.
name|getWeeks
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastWeek
operator|.
name|getDays
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|7
condition|)
name|lastWeek
operator|=
literal|null
expr_stmt|;
name|iPanel
operator|.
name|getWidget
argument_list|()
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
if|if
condition|(
name|start
operator|<
literal|0
condition|)
name|start
operator|=
name|month
operator|.
name|getFirst
argument_list|(
name|SessionMonth
operator|.
name|Flag
operator|.
name|START
argument_list|)
expr_stmt|;
if|if
condition|(
name|end
operator|<
literal|0
condition|)
name|end
operator|=
name|month
operator|.
name|getFirst
argument_list|(
name|SessionMonth
operator|.
name|Flag
operator|.
name|END
argument_list|)
expr_stmt|;
if|if
condition|(
name|finals
operator|<
literal|0
condition|)
name|finals
operator|=
name|month
operator|.
name|getFirst
argument_list|(
name|SessionMonth
operator|.
name|Flag
operator|.
name|FINALS
argument_list|)
expr_stmt|;
if|if
condition|(
name|midterms
operator|<
literal|0
condition|)
name|midterms
operator|=
name|month
operator|.
name|getFirst
argument_list|(
name|SessionMonth
operator|.
name|Flag
operator|.
name|MIDTERMS
argument_list|)
expr_stmt|;
if|if
condition|(
name|firstHoliday
operator|<
literal|0
condition|)
name|firstHoliday
operator|=
name|month
operator|.
name|getFirst
argument_list|(
name|SessionMonth
operator|.
name|Flag
operator|.
name|HOLIDAY
argument_list|)
expr_stmt|;
if|if
condition|(
name|firstBreak
operator|<
literal|0
condition|)
name|firstBreak
operator|=
name|month
operator|.
name|getFirst
argument_list|(
name|SessionMonth
operator|.
name|Flag
operator|.
name|BREAK
argument_list|)
expr_stmt|;
if|if
condition|(
name|firstOutside
operator|<
literal|0
condition|)
name|firstOutside
operator|=
name|month
operator|.
name|getFirst
argument_list|(
name|SessionMonth
operator|.
name|Flag
operator|.
name|DISABLED
argument_list|)
expr_stmt|;
if|if
condition|(
name|firstPast
operator|<
literal|0
condition|)
name|firstPast
operator|=
name|month
operator|.
name|getFirst
argument_list|(
name|SessionMonth
operator|.
name|Flag
operator|.
name|PAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|firstEventDate
operator|<
literal|0
condition|)
name|firstEventDate
operator|=
name|month
operator|.
name|getFirst
argument_list|(
name|SessionMonth
operator|.
name|Flag
operator|.
name|DATE_MAPPING_EVENT
argument_list|)
expr_stmt|;
if|if
condition|(
name|firstClassDate
operator|<
literal|0
condition|)
name|firstClassDate
operator|=
name|month
operator|.
name|getFirst
argument_list|(
name|SessionMonth
operator|.
name|Flag
operator|.
name|DATE_MAPPING_CLASS
argument_list|)
expr_stmt|;
if|if
condition|(
name|month
operator|.
name|getYear
argument_list|()
operator|==
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"yyyy"
argument_list|)
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
operator|&&
name|month
operator|.
name|getMonth
argument_list|()
operator|+
literal|1
operator|==
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"MM"
argument_list|)
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
condition|)
name|today
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"dd"
argument_list|)
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|month
operator|.
name|getFirst
argument_list|(
name|SessionMonth
operator|.
name|Flag
operator|.
name|START
argument_list|)
operator|>=
literal|0
condition|)
name|iSessionYear
operator|=
name|month
operator|.
name|getYear
argument_list|()
expr_stmt|;
block|}
name|iPanel
operator|.
name|getWidget
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Legend
argument_list|(
name|firstOutside
argument_list|,
name|start
argument_list|,
name|finals
argument_list|,
name|midterms
argument_list|,
name|firstHoliday
argument_list|,
name|firstBreak
argument_list|,
name|iCanSelectPast
condition|?
operator|-
literal|1
else|:
name|firstPast
argument_list|,
name|today
argument_list|,
name|firstClassDate
argument_list|,
name|firstEventDate
argument_list|)
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|getWidget
argument_list|()
operator|.
name|setCursor
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
enum|enum
name|SelectionFlag
block|{
name|IncludePast
block|,
name|IncludeWeekend
block|,
name|IncludeVacation
block|,
name|IncludeNoClasses
block|, 		;
specifier|public
name|int
name|flag
parameter_list|()
block|{
return|return
literal|1
operator|<<
name|ordinal
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|in
parameter_list|(
name|int
name|flags
parameter_list|)
block|{
return|return
operator|(
name|flags
operator|&
name|flag
argument_list|()
operator|)
operator|!=
literal|0
return|;
block|}
specifier|public
name|int
name|set
parameter_list|(
name|int
name|flags
parameter_list|)
block|{
return|return
operator|(
name|in
argument_list|(
name|flags
argument_list|)
condition|?
name|flags
else|:
name|flags
operator|+
name|flag
argument_list|()
operator|)
return|;
block|}
specifier|public
name|int
name|clear
parameter_list|(
name|int
name|flags
parameter_list|)
block|{
return|return
operator|(
name|in
argument_list|(
name|flags
argument_list|)
condition|?
name|flags
operator|-
name|flag
argument_list|()
else|:
name|flags
operator|)
return|;
block|}
block|}
specifier|public
specifier|static
enum|enum
name|SelectionMode
block|{
name|FutureClassDays
argument_list|()
block|,
name|FutureWorking
argument_list|(
name|SelectionFlag
operator|.
name|IncludeNoClasses
argument_list|)
block|,
name|AllWorking
argument_list|(
name|SelectionFlag
operator|.
name|IncludeNoClasses
argument_list|,
name|SelectionFlag
operator|.
name|IncludePast
argument_list|)
block|,
name|AllWorkingAndWeekend
argument_list|(
name|SelectionFlag
operator|.
name|IncludeNoClasses
argument_list|,
name|SelectionFlag
operator|.
name|IncludePast
argument_list|,
name|SelectionFlag
operator|.
name|IncludeWeekend
argument_list|)
block|,
name|All
argument_list|(
name|SelectionFlag
operator|.
name|IncludeNoClasses
argument_list|,
name|SelectionFlag
operator|.
name|IncludePast
argument_list|,
name|SelectionFlag
operator|.
name|IncludeWeekend
argument_list|,
name|SelectionFlag
operator|.
name|IncludeVacation
argument_list|)
block|, 		;
specifier|private
name|int
name|iFlags
init|=
literal|0
decl_stmt|;
name|SelectionMode
parameter_list|(
name|SelectionFlag
modifier|...
name|flags
parameter_list|)
block|{
for|for
control|(
name|SelectionFlag
name|flag
range|:
name|flags
control|)
name|iFlags
operator|=
name|flag
operator|.
name|set
argument_list|(
name|iFlags
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasFlag
parameter_list|(
name|SelectionFlag
name|flag
parameter_list|)
block|{
return|return
name|flag
operator|.
name|in
argument_list|(
name|iFlags
argument_list|)
return|;
block|}
block|}
specifier|public
class|class
name|P
extends|extends
name|AbsolutePanel
implements|implements
name|HasAriaLabel
block|{
specifier|private
name|String
name|iCaption
decl_stmt|;
specifier|private
name|int
index|[]
name|iCursor
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|D
argument_list|>
name|iDays
init|=
operator|new
name|ArrayList
argument_list|<
name|D
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|P
parameter_list|(
name|String
name|caption
parameter_list|,
name|int
index|[]
name|cursor
parameter_list|,
name|String
modifier|...
name|styles
parameter_list|)
block|{
name|iCaption
operator|=
name|caption
expr_stmt|;
name|iCursor
operator|=
name|cursor
expr_stmt|;
if|if
condition|(
name|caption
operator|!=
literal|null
condition|)
name|getElement
argument_list|()
operator|.
name|setInnerHTML
argument_list|(
name|caption
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|style
range|:
name|styles
control|)
if|if
condition|(
name|style
operator|!=
literal|null
operator|&&
operator|!
name|style
operator|.
name|isEmpty
argument_list|()
condition|)
name|addStyleName
argument_list|(
name|style
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEDOWN
argument_list|)
expr_stmt|;
block|}
specifier|private
name|P
parameter_list|(
name|String
name|caption
parameter_list|,
name|String
modifier|...
name|styles
parameter_list|)
block|{
name|this
argument_list|(
name|caption
argument_list|,
literal|null
argument_list|,
name|styles
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addDay
parameter_list|(
name|D
name|d
parameter_list|)
block|{
name|iDays
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasUnselectedDays
parameter_list|(
name|SelectionMode
name|mode
parameter_list|)
block|{
for|for
control|(
name|D
name|d
range|:
name|iDays
control|)
block|{
if|if
condition|(
operator|!
name|d
operator|.
name|isEnabled
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|mode
operator|.
name|hasFlag
argument_list|(
name|SelectionFlag
operator|.
name|IncludeNoClasses
argument_list|)
operator|&&
operator|!
name|d
operator|.
name|isClassDay
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|mode
operator|.
name|hasFlag
argument_list|(
name|SelectionFlag
operator|.
name|IncludePast
argument_list|)
operator|&&
name|d
operator|.
name|isPast
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|mode
operator|.
name|hasFlag
argument_list|(
name|SelectionFlag
operator|.
name|IncludeWeekend
argument_list|)
operator|&&
name|d
operator|.
name|isWeekend
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|mode
operator|.
name|hasFlag
argument_list|(
name|SelectionFlag
operator|.
name|IncludeVacation
argument_list|)
operator|&&
name|d
operator|.
name|isVacation
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|d
operator|.
name|getValue
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|setAllSelected
parameter_list|(
name|boolean
name|selected
parameter_list|,
name|SelectionMode
name|mode
parameter_list|)
block|{
for|for
control|(
name|D
name|d
range|:
name|iDays
control|)
block|{
if|if
condition|(
operator|!
name|d
operator|.
name|isEnabled
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|mode
operator|.
name|hasFlag
argument_list|(
name|SelectionFlag
operator|.
name|IncludeNoClasses
argument_list|)
operator|&&
operator|!
name|d
operator|.
name|isClassDay
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|mode
operator|.
name|hasFlag
argument_list|(
name|SelectionFlag
operator|.
name|IncludePast
argument_list|)
operator|&&
name|d
operator|.
name|isPast
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|mode
operator|.
name|hasFlag
argument_list|(
name|SelectionFlag
operator|.
name|IncludeWeekend
argument_list|)
operator|&&
name|d
operator|.
name|isWeekend
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|mode
operator|.
name|hasFlag
argument_list|(
name|SelectionFlag
operator|.
name|IncludeVacation
argument_list|)
operator|&&
name|d
operator|.
name|isVacation
argument_list|()
condition|)
continue|continue;
name|d
operator|.
name|setValue
argument_list|(
name|selected
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onBrowserEvent
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|DOM
operator|.
name|eventGetType
argument_list|(
name|event
argument_list|)
condition|)
block|{
case|case
name|Event
operator|.
name|ONMOUSEDOWN
case|:
name|SelectionMode
name|mode
init|=
literal|null
decl_stmt|;
for|for
control|(
name|SelectionMode
name|m
range|:
name|SelectionMode
operator|.
name|values
argument_list|()
control|)
if|if
condition|(
name|hasUnselectedDays
argument_list|(
name|m
argument_list|)
condition|)
block|{
name|mode
operator|=
name|m
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|mode
operator|!=
literal|null
condition|)
name|setAllSelected
argument_list|(
literal|true
argument_list|,
name|mode
argument_list|)
expr_stmt|;
else|else
name|setAllSelected
argument_list|(
literal|false
argument_list|,
name|SelectionMode
operator|.
name|All
argument_list|)
expr_stmt|;
if|if
condition|(
name|iCursor
operator|!=
literal|null
condition|)
name|iPanel
operator|.
name|getWidget
argument_list|()
operator|.
name|setCursor
argument_list|(
name|iCursor
argument_list|)
expr_stmt|;
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
break|break;
block|}
name|super
operator|.
name|onBrowserEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getCaption
parameter_list|()
block|{
return|return
name|iCaption
return|;
block|}
specifier|public
name|List
argument_list|<
name|D
argument_list|>
name|getDays
parameter_list|()
block|{
return|return
name|iDays
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getCaption
argument_list|()
operator|+
literal|" "
operator|+
name|iDays
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAriaLabel
parameter_list|()
block|{
return|return
name|Roles
operator|.
name|getTextboxRole
argument_list|()
operator|.
name|getAriaLabelProperty
argument_list|(
name|getElement
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setAriaLabel
parameter_list|(
name|String
name|text
parameter_list|)
block|{
if|if
condition|(
name|text
operator|==
literal|null
operator|||
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
name|Roles
operator|.
name|getTextboxRole
argument_list|()
operator|.
name|removeAriaLabelProperty
argument_list|(
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|Roles
operator|.
name|getTextboxRole
argument_list|()
operator|.
name|setAriaLabelProperty
argument_list|(
name|getElement
argument_list|()
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
class|class
name|D
extends|extends
name|AbsolutePanel
implements|implements
name|HasValue
argument_list|<
name|Boolean
argument_list|>
implements|,
name|HasAriaLabel
block|{
specifier|private
name|boolean
name|iSelected
init|=
literal|false
decl_stmt|,
name|iEnabled
init|=
literal|true
decl_stmt|;
specifier|private
name|int
name|iFlag
decl_stmt|;
specifier|private
name|int
name|iNumber
decl_stmt|;
specifier|private
name|int
index|[]
name|iCursor
decl_stmt|;
specifier|private
name|D
parameter_list|(
name|int
name|number
parameter_list|,
name|int
name|flag
parameter_list|,
name|int
index|[]
name|cursor
parameter_list|,
name|boolean
name|selected
parameter_list|,
name|String
modifier|...
name|styles
parameter_list|)
block|{
name|iNumber
operator|=
name|number
expr_stmt|;
name|iFlag
operator|=
name|flag
expr_stmt|;
name|iCursor
operator|=
name|cursor
expr_stmt|;
name|iSelected
operator|=
name|selected
expr_stmt|;
name|getElement
argument_list|()
operator|.
name|setInnerHTML
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
literal|1
operator|+
name|number
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|style
range|:
name|styles
control|)
if|if
condition|(
name|style
operator|!=
literal|null
operator|&&
operator|!
name|style
operator|.
name|isEmpty
argument_list|()
condition|)
name|addStyleName
argument_list|(
name|style
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSelected
condition|)
name|addStyleName
argument_list|(
literal|"selected"
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEDOWN
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isEnabled
parameter_list|()
block|{
return|return
name|iEnabled
return|;
block|}
specifier|public
name|void
name|setEnabled
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
if|if
condition|(
name|iEnabled
operator|==
name|enabled
condition|)
return|return;
name|iEnabled
operator|=
name|enabled
expr_stmt|;
if|if
condition|(
name|iEnabled
condition|)
block|{
name|addStyleName
argument_list|(
literal|"clickable"
argument_list|)
expr_stmt|;
name|removeStyleName
argument_list|(
literal|"disabled"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|removeStyleName
argument_list|(
literal|"clickable"
argument_list|)
expr_stmt|;
name|addStyleName
argument_list|(
literal|"disabled"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|hasFlag
parameter_list|(
name|SessionMonth
operator|.
name|Flag
name|flag
parameter_list|)
block|{
return|return
operator|(
name|iFlag
operator|&
name|flag
operator|.
name|flag
argument_list|()
operator|)
operator|!=
literal|0
return|;
block|}
specifier|public
name|boolean
name|isVacation
parameter_list|()
block|{
return|return
name|hasFlag
argument_list|(
name|SessionMonth
operator|.
name|Flag
operator|.
name|BREAK
argument_list|)
operator|||
name|hasFlag
argument_list|(
name|SessionMonth
operator|.
name|Flag
operator|.
name|HOLIDAY
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isPast
parameter_list|()
block|{
return|return
name|hasFlag
argument_list|(
name|SessionMonth
operator|.
name|Flag
operator|.
name|PAST
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isClassDay
parameter_list|()
block|{
return|return
name|hasFlag
argument_list|(
name|SessionMonth
operator|.
name|Flag
operator|.
name|CLASSES
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isWeekend
parameter_list|()
block|{
return|return
name|SingleDateSelector
operator|.
name|isWeekend
argument_list|(
name|getDow
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onBrowserEvent
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|DOM
operator|.
name|eventGetType
argument_list|(
name|event
argument_list|)
condition|)
block|{
case|case
name|Event
operator|.
name|ONMOUSEDOWN
case|:
if|if
condition|(
name|isEnabled
argument_list|()
condition|)
block|{
name|setValue
argument_list|(
operator|!
name|getValue
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|getWidget
argument_list|()
operator|.
name|setCursor
argument_list|(
name|iCursor
argument_list|)
expr_stmt|;
block|}
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
break|break;
block|}
name|super
operator|.
name|onBrowserEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getNumber
parameter_list|()
block|{
return|return
name|iNumber
return|;
block|}
specifier|public
name|int
name|getDow
parameter_list|()
block|{
return|return
name|iCursor
index|[
literal|1
index|]
return|;
block|}
specifier|public
name|int
name|getWeek
parameter_list|()
block|{
return|return
name|iCursor
index|[
literal|2
index|]
return|;
block|}
specifier|public
name|int
name|getMonth
parameter_list|()
block|{
return|return
name|iCursor
index|[
literal|0
index|]
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|valueOf
argument_list|(
literal|1
operator|+
name|getNumber
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|HandlerRegistration
name|addValueChangeHandler
parameter_list|(
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
name|handler
parameter_list|)
block|{
return|return
name|addHandler
argument_list|(
name|handler
argument_list|,
name|ValueChangeEvent
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|getValue
parameter_list|()
block|{
return|return
name|iSelected
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|Boolean
name|value
parameter_list|)
block|{
name|setValue
argument_list|(
name|value
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|Boolean
name|value
parameter_list|,
name|boolean
name|fireEvents
parameter_list|)
block|{
if|if
condition|(
name|iSelected
operator|==
name|value
operator|||
name|value
operator|==
literal|null
operator|||
operator|!
name|isEnabled
argument_list|()
condition|)
return|return;
name|iSelected
operator|=
name|value
expr_stmt|;
if|if
condition|(
name|iSelected
condition|)
name|addStyleName
argument_list|(
literal|"selected"
argument_list|)
expr_stmt|;
else|else
name|removeStyleName
argument_list|(
literal|"selected"
argument_list|)
expr_stmt|;
if|if
condition|(
name|fireEvents
condition|)
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|this
argument_list|,
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAriaLabel
parameter_list|()
block|{
return|return
name|Roles
operator|.
name|getTextboxRole
argument_list|()
operator|.
name|getAriaLabelProperty
argument_list|(
name|getElement
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setAriaLabel
parameter_list|(
name|String
name|text
parameter_list|)
block|{
if|if
condition|(
name|text
operator|==
literal|null
operator|||
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
name|Roles
operator|.
name|getTextboxRole
argument_list|()
operator|.
name|removeAriaLabelProperty
argument_list|(
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|Roles
operator|.
name|getTextboxRole
argument_list|()
operator|.
name|setAriaLabelProperty
argument_list|(
name|getElement
argument_list|()
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
class|class
name|SingleMonth
extends|extends
name|AbsolutePanel
block|{
specifier|private
name|SessionMonth
name|iSessionMonth
decl_stmt|;
specifier|private
name|List
argument_list|<
name|D
argument_list|>
name|iDays
init|=
operator|new
name|ArrayList
argument_list|<
name|D
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|P
index|[]
name|iWeekDays
init|=
operator|new
name|P
index|[
literal|7
index|]
decl_stmt|;
specifier|private
name|List
argument_list|<
name|P
argument_list|>
name|iWeeks
init|=
operator|new
name|ArrayList
argument_list|<
name|P
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|P
name|iCorner
init|=
literal|null
decl_stmt|;
specifier|public
name|SingleMonth
parameter_list|(
name|SessionMonth
name|month
parameter_list|,
name|boolean
name|canSelectPast
parameter_list|,
name|int
name|index
parameter_list|,
name|P
name|previousWeek
parameter_list|)
block|{
name|iSessionMonth
operator|=
name|month
expr_stmt|;
name|addStyleName
argument_list|(
literal|"month"
argument_list|)
expr_stmt|;
name|P
name|name
init|=
operator|new
name|P
argument_list|(
name|SingleDateSelector
operator|.
name|monthName
argument_list|(
name|iSessionMonth
operator|.
name|getYear
argument_list|()
argument_list|,
name|iSessionMonth
operator|.
name|getMonth
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|,
literal|"label"
argument_list|)
decl_stmt|;
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|name
operator|.
name|getElement
argument_list|()
operator|.
name|setId
argument_list|(
name|DOM
operator|.
name|createUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|Roles
operator|.
name|getGridRole
argument_list|()
operator|.
name|set
argument_list|(
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
name|Roles
operator|.
name|getGridRole
argument_list|()
operator|.
name|setAriaLabelledbyProperty
argument_list|(
name|getElement
argument_list|()
argument_list|,
name|Id
operator|.
name|of
argument_list|(
name|name
operator|.
name|getElement
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|P
name|box
init|=
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"box"
argument_list|)
decl_stmt|;
name|add
argument_list|(
name|box
argument_list|)
expr_stmt|;
name|P
name|header
init|=
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"row"
argument_list|)
decl_stmt|;
name|box
operator|.
name|add
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|iCorner
operator|=
operator|new
name|P
argument_list|(
literal|null
argument_list|,
operator|new
name|int
index|[]
block|{
name|index
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
argument_list|,
literal|"cell"
argument_list|,
literal|"corner"
argument_list|,
literal|"clickable"
argument_list|)
expr_stmt|;
name|iCorner
operator|.
name|setAriaLabel
argument_list|(
name|SingleDateSelector
operator|.
name|monthName
argument_list|(
name|iSessionMonth
operator|.
name|getYear
argument_list|()
argument_list|,
name|iSessionMonth
operator|.
name|getMonth
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|iCorner
argument_list|)
expr_stmt|;
name|Roles
operator|.
name|getRowheaderRole
argument_list|()
operator|.
name|set
argument_list|(
name|iCorner
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|firstDayOfWeek
init|=
name|SingleDateSelector
operator|.
name|firstDayOfWeek
argument_list|(
name|iSessionMonth
operator|.
name|getYear
argument_list|()
argument_list|,
name|iSessionMonth
operator|.
name|getMonth
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|int
name|weekNumber
init|=
name|SingleDateSelector
operator|.
name|weekNumber
argument_list|(
name|iSessionMonth
operator|.
name|getYear
argument_list|()
argument_list|,
name|iSessionMonth
operator|.
name|getMonth
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|int
name|nrDays
init|=
name|SingleDateSelector
operator|.
name|daysInMonth
argument_list|(
name|iSessionMonth
operator|.
name|getYear
argument_list|()
argument_list|,
name|iSessionMonth
operator|.
name|getMonth
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|int
name|startDayOfWeek
init|=
name|SingleDateSelector
operator|.
name|startingDayOfWeek
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|7
condition|;
name|i
operator|++
control|)
block|{
name|iWeekDays
index|[
name|i
index|]
operator|=
operator|new
name|P
argument_list|(
name|CONSTANTS
operator|.
name|days
argument_list|()
index|[
operator|(
name|i
operator|+
name|startDayOfWeek
operator|)
operator|%
literal|7
index|]
argument_list|,
operator|new
name|int
index|[]
block|{
name|index
block|,
operator|(
name|i
operator|+
name|startDayOfWeek
operator|)
operator|%
literal|7
block|,
operator|-
literal|1
block|}
argument_list|,
literal|"cell"
argument_list|,
literal|"dow"
argument_list|,
literal|"clickable"
argument_list|)
expr_stmt|;
name|iWeekDays
index|[
name|i
index|]
operator|.
name|setAriaLabel
argument_list|(
name|ARIA
operator|.
name|datesDayOfWeekSelection
argument_list|(
name|CONSTANTS
operator|.
name|longDays
argument_list|()
index|[
operator|(
name|i
operator|+
name|startDayOfWeek
operator|)
operator|%
literal|7
index|]
argument_list|,
name|SingleDateSelector
operator|.
name|monthName
argument_list|(
name|iSessionMonth
operator|.
name|getYear
argument_list|()
argument_list|,
name|iSessionMonth
operator|.
name|getMonth
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Roles
operator|.
name|getColumnheaderRole
argument_list|()
operator|.
name|set
argument_list|(
name|iWeekDays
index|[
name|i
index|]
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|iWeekDays
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|P
name|line
init|=
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"row"
argument_list|)
decl_stmt|;
name|box
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|P
name|week
init|=
operator|new
name|P
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|weekNumber
operator|++
argument_list|)
argument_list|,
operator|new
name|int
index|[]
block|{
name|index
block|,
operator|-
literal|1
block|,
name|iWeeks
operator|.
name|size
argument_list|()
block|}
argument_list|,
literal|"cell"
argument_list|,
literal|"week"
argument_list|,
literal|"clickable"
argument_list|)
decl_stmt|;
name|Roles
operator|.
name|getRowheaderRole
argument_list|()
operator|.
name|set
argument_list|(
name|week
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|weekAria
init|=
literal|false
decl_stmt|;
name|line
operator|.
name|add
argument_list|(
name|week
argument_list|)
expr_stmt|;
name|iWeeks
operator|.
name|add
argument_list|(
name|week
argument_list|)
expr_stmt|;
if|if
condition|(
name|previousWeek
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|D
name|d
range|:
name|previousWeek
operator|.
name|getDays
argument_list|()
control|)
name|week
operator|.
name|addDay
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|week
operator|.
name|setAriaLabel
argument_list|(
name|previousWeek
operator|.
name|getAriaLabel
argument_list|()
argument_list|)
expr_stmt|;
name|weekAria
operator|=
literal|true
expr_stmt|;
block|}
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|int
name|blanks
init|=
operator|(
name|firstDayOfWeek
operator|+
literal|7
operator|-
name|startDayOfWeek
operator|)
operator|%
literal|7
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blanks
condition|;
name|i
operator|++
control|)
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"cell"
argument_list|,
operator|(
name|i
operator|+
literal|1
operator|==
name|blanks
condition|?
literal|"last-blank"
else|:
literal|"blank"
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
name|int
name|today
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|month
operator|.
name|getYear
argument_list|()
operator|==
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"yyyy"
argument_list|)
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
operator|&&
name|month
operator|.
name|getMonth
argument_list|()
operator|+
literal|1
operator|==
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"MM"
argument_list|)
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
condition|)
name|today
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"dd"
argument_list|)
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
operator|-
literal|1
expr_stmt|;
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
name|onChange
init|=
operator|new
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|event
parameter_list|)
block|{
name|fireDaySelected
argument_list|(
operator|(
operator|(
name|D
operator|)
name|event
operator|.
name|getSource
argument_list|()
operator|)
operator|.
name|getNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|DateTimeFormat
name|df
init|=
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"yyyy/MM/dd"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nrDays
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
operator|&&
name|idx
operator|%
literal|7
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|idx
operator|==
literal|7
operator|&&
name|iSessionMonth
operator|.
name|getMonth
argument_list|()
operator|==
literal|0
operator|&&
name|weekNumber
operator|>
literal|50
condition|)
name|weekNumber
operator|=
literal|1
expr_stmt|;
name|line
operator|=
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"row"
argument_list|)
expr_stmt|;
name|box
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|week
operator|=
operator|new
name|P
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|weekNumber
operator|++
argument_list|)
argument_list|,
operator|new
name|int
index|[]
block|{
name|index
block|,
operator|-
literal|1
block|,
name|iWeeks
operator|.
name|size
argument_list|()
block|}
argument_list|,
literal|"cell"
argument_list|,
literal|"week"
argument_list|,
literal|"clickable"
argument_list|)
expr_stmt|;
name|Roles
operator|.
name|getRowheaderRole
argument_list|()
operator|.
name|set
argument_list|(
name|week
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
name|weekAria
operator|=
literal|false
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|week
argument_list|)
expr_stmt|;
name|iWeeks
operator|.
name|add
argument_list|(
name|week
argument_list|)
expr_stmt|;
name|previousWeek
operator|=
literal|null
expr_stmt|;
block|}
name|Date
name|date
init|=
name|df
operator|.
name|parse
argument_list|(
name|getYear
argument_list|()
operator|+
literal|"/"
operator|+
operator|(
literal|1
operator|+
name|getMonth
argument_list|()
operator|)
operator|+
literal|"/"
operator|+
operator|(
literal|1
operator|+
name|i
operator|)
argument_list|)
decl_stmt|;
name|D
name|d
init|=
operator|new
name|D
argument_list|(
name|i
argument_list|,
name|iSessionMonth
operator|.
name|getFlags
argument_list|(
name|i
argument_list|)
argument_list|,
operator|new
name|int
index|[]
block|{
name|index
block|,
operator|(
name|idx
operator|+
name|startDayOfWeek
operator|)
operator|%
literal|7
block|,
name|iWeeks
operator|.
name|size
argument_list|()
operator|-
literal|1
block|}
argument_list|,
literal|false
argument_list|,
literal|"cell"
argument_list|,
operator|(
name|SingleDateSelector
operator|.
name|isWeekend
argument_list|(
operator|(
name|idx
operator|+
name|startDayOfWeek
operator|)
operator|%
literal|7
argument_list|)
condition|?
literal|"weekend"
else|:
literal|"day"
operator|)
argument_list|,
literal|"clickable"
argument_list|)
decl_stmt|;
name|Roles
operator|.
name|getGridcellRole
argument_list|()
operator|.
name|set
argument_list|(
name|d
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|d
operator|.
name|addValueChangeHandler
argument_list|(
name|onChange
argument_list|)
expr_stmt|;
name|iCorner
operator|.
name|addDay
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|iWeekDays
index|[
name|idx
operator|%
literal|7
index|]
operator|.
name|addDay
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|weekAria
condition|)
block|{
name|week
operator|.
name|setAriaLabel
argument_list|(
name|ARIA
operator|.
name|datesWeekSelection
argument_list|(
name|weekNumber
operator|-
literal|1
argument_list|,
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|weekSelectionDateFormat
argument_list|()
argument_list|)
operator|.
name|format
argument_list|(
name|date
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|weekAria
operator|=
literal|true
expr_stmt|;
block|}
name|d
operator|.
name|setAriaLabel
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|dateSelectionDateFormat
argument_list|()
argument_list|)
operator|.
name|format
argument_list|(
name|date
argument_list|)
argument_list|)
expr_stmt|;
name|week
operator|.
name|addDay
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|previousWeek
operator|!=
literal|null
condition|)
name|previousWeek
operator|.
name|addDay
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|iDays
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
if|if
condition|(
name|today
operator|==
name|i
condition|)
name|d
operator|.
name|addStyleName
argument_list|(
literal|"today"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSessionMonth
operator|.
name|hasFlag
argument_list|(
name|i
argument_list|,
name|SessionMonth
operator|.
name|Flag
operator|.
name|START
argument_list|)
condition|)
block|{
name|d
operator|.
name|addStyleName
argument_list|(
literal|"start"
argument_list|)
expr_stmt|;
name|d
operator|.
name|setAriaLabel
argument_list|(
name|d
operator|.
name|getAriaLabel
argument_list|()
operator|+
literal|" "
operator|+
name|MESSAGES
operator|.
name|legendClassesStart
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|iSessionMonth
operator|.
name|hasFlag
argument_list|(
name|i
argument_list|,
name|SessionMonth
operator|.
name|Flag
operator|.
name|END
argument_list|)
condition|)
block|{
name|d
operator|.
name|addStyleName
argument_list|(
literal|"start"
argument_list|)
expr_stmt|;
name|d
operator|.
name|setAriaLabel
argument_list|(
name|d
operator|.
name|getAriaLabel
argument_list|()
operator|+
literal|" "
operator|+
name|MESSAGES
operator|.
name|legendClassesEnd
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|iSessionMonth
operator|.
name|hasFlag
argument_list|(
name|i
argument_list|,
name|SessionMonth
operator|.
name|Flag
operator|.
name|FINALS
argument_list|)
condition|)
block|{
name|d
operator|.
name|addStyleName
argument_list|(
literal|"exam"
argument_list|)
expr_stmt|;
name|d
operator|.
name|setAriaLabel
argument_list|(
name|d
operator|.
name|getAriaLabel
argument_list|()
operator|+
literal|" "
operator|+
name|MESSAGES
operator|.
name|legendFinals
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|iSessionMonth
operator|.
name|hasFlag
argument_list|(
name|i
argument_list|,
name|SessionMonth
operator|.
name|Flag
operator|.
name|MIDTERMS
argument_list|)
condition|)
block|{
name|d
operator|.
name|addStyleName
argument_list|(
literal|"midterm"
argument_list|)
expr_stmt|;
name|d
operator|.
name|setAriaLabel
argument_list|(
name|d
operator|.
name|getAriaLabel
argument_list|()
operator|+
literal|" "
operator|+
name|MESSAGES
operator|.
name|legendMidterms
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|iSessionMonth
operator|.
name|hasFlag
argument_list|(
name|i
argument_list|,
name|SessionMonth
operator|.
name|Flag
operator|.
name|HOLIDAY
argument_list|)
condition|)
block|{
name|d
operator|.
name|addStyleName
argument_list|(
literal|"holiday"
argument_list|)
expr_stmt|;
name|d
operator|.
name|setAriaLabel
argument_list|(
name|d
operator|.
name|getAriaLabel
argument_list|()
operator|+
literal|" "
operator|+
name|MESSAGES
operator|.
name|legendHoliday
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|iSessionMonth
operator|.
name|hasFlag
argument_list|(
name|i
argument_list|,
name|SessionMonth
operator|.
name|Flag
operator|.
name|BREAK
argument_list|)
condition|)
block|{
name|d
operator|.
name|addStyleName
argument_list|(
literal|"break"
argument_list|)
expr_stmt|;
name|d
operator|.
name|setAriaLabel
argument_list|(
name|d
operator|.
name|getAriaLabel
argument_list|()
operator|+
literal|" "
operator|+
name|MESSAGES
operator|.
name|legendBreak
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iSessionMonth
operator|.
name|hasFlag
argument_list|(
name|i
argument_list|,
name|SessionMonth
operator|.
name|Flag
operator|.
name|DATE_MAPPING_CLASS
argument_list|)
condition|)
name|d
operator|.
name|addStyleName
argument_list|(
literal|"classDate"
argument_list|)
expr_stmt|;
if|else if
condition|(
name|iSessionMonth
operator|.
name|hasFlag
argument_list|(
name|i
argument_list|,
name|SessionMonth
operator|.
name|Flag
operator|.
name|DATE_MAPPING_EVENT
argument_list|)
condition|)
name|d
operator|.
name|addStyleName
argument_list|(
literal|"eventDate"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSessionMonth
operator|.
name|hasFlag
argument_list|(
name|i
argument_list|,
name|SessionMonth
operator|.
name|Flag
operator|.
name|SELECTED
argument_list|)
condition|)
name|d
operator|.
name|setValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSessionMonth
operator|.
name|hasFlag
argument_list|(
name|i
argument_list|,
name|SessionMonth
operator|.
name|Flag
operator|.
name|DISABLED
argument_list|)
condition|)
name|d
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSessionMonth
operator|.
name|hasFlag
argument_list|(
name|i
argument_list|,
name|SessionMonth
operator|.
name|Flag
operator|.
name|PAST
argument_list|)
condition|)
block|{
name|d
operator|.
name|addStyleName
argument_list|(
literal|"past"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|canSelectPast
condition|)
name|d
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|D
name|get
parameter_list|(
name|int
name|day
parameter_list|)
block|{
return|return
name|iDays
operator|.
name|get
argument_list|(
name|day
argument_list|)
return|;
block|}
specifier|protected
name|void
name|fireDaySelected
parameter_list|(
name|int
name|day
parameter_list|)
block|{
block|}
specifier|public
name|List
argument_list|<
name|P
argument_list|>
name|getWeeks
parameter_list|()
block|{
return|return
name|iWeeks
return|;
block|}
specifier|public
name|P
name|getDays
parameter_list|(
name|int
name|dayOfWeek
parameter_list|)
block|{
return|return
name|iWeekDays
index|[
name|dayOfWeek
index|]
return|;
block|}
specifier|public
name|List
argument_list|<
name|D
argument_list|>
name|getDays
parameter_list|()
block|{
return|return
name|iDays
return|;
block|}
specifier|public
name|P
name|getCorner
parameter_list|()
block|{
return|return
name|iCorner
return|;
block|}
specifier|public
name|int
name|getYear
parameter_list|()
block|{
return|return
name|iSessionMonth
operator|.
name|getYear
argument_list|()
return|;
block|}
specifier|public
name|int
name|getMonth
parameter_list|()
block|{
return|return
name|iSessionMonth
operator|.
name|getMonth
argument_list|()
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|SingleDateSelector
operator|.
name|monthName
argument_list|(
name|iSessionMonth
operator|.
name|getYear
argument_list|()
argument_list|,
name|iSessionMonth
operator|.
name|getMonth
argument_list|()
operator|+
literal|1
argument_list|)
return|;
block|}
block|}
specifier|public
class|class
name|Legend
extends|extends
name|AbsolutePanel
block|{
specifier|public
name|Legend
parameter_list|(
name|int
name|firstOutside
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|finals
parameter_list|,
name|int
name|midterms
parameter_list|,
name|int
name|firstHoliday
parameter_list|,
name|int
name|firstBreak
parameter_list|,
name|int
name|firstPast
parameter_list|,
name|int
name|today
parameter_list|,
name|int
name|firstClassDate
parameter_list|,
name|int
name|firstEventDate
parameter_list|)
block|{
name|addStyleName
argument_list|(
literal|"legend"
argument_list|)
expr_stmt|;
name|P
name|box
init|=
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"box"
argument_list|)
decl_stmt|;
name|add
argument_list|(
name|box
argument_list|)
expr_stmt|;
name|P
name|line
init|=
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"row"
argument_list|)
decl_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"cell"
argument_list|,
literal|"selected"
argument_list|,
literal|"first"
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
name|MESSAGES
operator|.
name|legendSelected
argument_list|()
argument_list|,
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|line
operator|=
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"row"
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"cell"
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
name|MESSAGES
operator|.
name|legendNotSelected
argument_list|()
argument_list|,
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
if|if
condition|(
name|firstOutside
operator|>=
literal|0
condition|)
block|{
name|line
operator|=
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"row"
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|firstOutside
operator|+
literal|1
argument_list|)
argument_list|,
literal|"cell"
argument_list|,
literal|"disabled"
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
name|MESSAGES
operator|.
name|legendNotInSession
argument_list|()
argument_list|,
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|firstPast
operator|>=
literal|0
condition|)
block|{
name|line
operator|=
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"row"
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|firstPast
operator|+
literal|1
argument_list|)
argument_list|,
literal|"cell"
argument_list|,
literal|"disabled"
argument_list|,
literal|"past"
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
name|MESSAGES
operator|.
name|legendPast
argument_list|()
argument_list|,
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|start
operator|>=
literal|0
condition|)
block|{
name|line
operator|=
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"row"
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|start
operator|+
literal|1
argument_list|)
argument_list|,
literal|"cell"
argument_list|,
literal|"start"
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
name|MESSAGES
operator|.
name|legendClassesStartOrEnd
argument_list|()
argument_list|,
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|finals
operator|>=
literal|0
condition|)
block|{
name|line
operator|=
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"row"
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|finals
operator|+
literal|1
argument_list|)
argument_list|,
literal|"cell"
argument_list|,
literal|"exam"
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
name|MESSAGES
operator|.
name|legendFinals
argument_list|()
argument_list|,
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|midterms
operator|>=
literal|0
condition|)
block|{
name|line
operator|=
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"row"
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|finals
operator|+
literal|1
argument_list|)
argument_list|,
literal|"cell"
argument_list|,
literal|"midterm"
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
name|MESSAGES
operator|.
name|legendMidterms
argument_list|()
argument_list|,
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|firstHoliday
operator|>=
literal|0
condition|)
block|{
name|line
operator|=
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"row"
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|firstHoliday
operator|+
literal|1
argument_list|)
argument_list|,
literal|"cell"
argument_list|,
literal|"holiday"
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
name|MESSAGES
operator|.
name|legendHoliday
argument_list|()
argument_list|,
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|firstBreak
operator|>=
literal|0
condition|)
block|{
name|line
operator|=
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"row"
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|firstBreak
operator|+
literal|1
argument_list|)
argument_list|,
literal|"cell"
argument_list|,
literal|"break"
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
name|MESSAGES
operator|.
name|legendBreak
argument_list|()
argument_list|,
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|firstClassDate
operator|>=
literal|0
condition|)
block|{
name|line
operator|=
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"row"
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|firstClassDate
operator|+
literal|1
argument_list|)
argument_list|,
literal|"cell"
argument_list|,
literal|"classDate"
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
name|MESSAGES
operator|.
name|legendDateMappingClassDate
argument_list|()
argument_list|,
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|firstEventDate
operator|>=
literal|0
condition|)
block|{
name|line
operator|=
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"row"
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|firstEventDate
operator|+
literal|1
argument_list|)
argument_list|,
literal|"cell"
argument_list|,
literal|"eventDate"
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
name|MESSAGES
operator|.
name|legendDateMappingEventDate
argument_list|()
argument_list|,
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|today
operator|>=
literal|1
condition|)
block|{
name|line
operator|=
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"row"
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|today
argument_list|)
argument_list|,
literal|"cell"
argument_list|,
literal|"today"
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
name|MESSAGES
operator|.
name|legendToday
argument_list|()
argument_list|,
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|HandlerRegistration
name|addValueChangeHandler
parameter_list|(
name|ValueChangeHandler
argument_list|<
name|List
argument_list|<
name|Date
argument_list|>
argument_list|>
name|handler
parameter_list|)
block|{
return|return
name|addHandler
argument_list|(
name|handler
argument_list|,
name|ValueChangeEvent
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|int
name|dayOfYear
parameter_list|(
name|int
name|year
parameter_list|,
name|int
name|month
parameter_list|,
name|int
name|day
parameter_list|)
block|{
name|int
name|dayOfYear
init|=
name|SingleDateSelector
operator|.
name|dayOfYear
argument_list|(
name|year
argument_list|,
name|month
argument_list|,
name|day
argument_list|)
decl_stmt|;
if|if
condition|(
name|year
operator|<
name|iSessionYear
condition|)
block|{
name|dayOfYear
operator|-=
name|SingleDateSelector
operator|.
name|dayOfYear
argument_list|(
name|year
argument_list|,
literal|12
argument_list|,
literal|31
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|year
operator|>
name|iSessionYear
condition|)
block|{
name|dayOfYear
operator|+=
name|SingleDateSelector
operator|.
name|dayOfYear
argument_list|(
name|iSessionYear
argument_list|,
literal|12
argument_list|,
literal|31
argument_list|)
expr_stmt|;
block|}
return|return
name|dayOfYear
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Date
argument_list|>
name|getValue
parameter_list|()
block|{
name|List
argument_list|<
name|Date
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|Date
argument_list|>
argument_list|()
decl_stmt|;
name|DateTimeFormat
name|df
init|=
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"yyyy/MM/dd"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iPanel
operator|.
name|getWidget
argument_list|()
operator|.
name|getWidgetCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|iPanel
operator|.
name|getWidget
argument_list|()
operator|.
name|getWidget
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|SingleMonth
condition|)
block|{
name|SingleMonth
name|s
init|=
operator|(
name|SingleMonth
operator|)
name|w
decl_stmt|;
for|for
control|(
name|D
name|d
range|:
name|s
operator|.
name|getDays
argument_list|()
control|)
block|{
if|if
condition|(
name|d
operator|.
name|getValue
argument_list|()
condition|)
name|ret
operator|.
name|add
argument_list|(
name|df
operator|.
name|parse
argument_list|(
name|s
operator|.
name|getYear
argument_list|()
operator|+
literal|"/"
operator|+
operator|(
literal|1
operator|+
name|s
operator|.
name|getMonth
argument_list|()
operator|)
operator|+
literal|"/"
operator|+
operator|(
literal|1
operator|+
name|d
operator|.
name|getNumber
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|int
name|getSelectedDaysCount
parameter_list|()
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iPanel
operator|.
name|getWidget
argument_list|()
operator|.
name|getWidgetCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|iPanel
operator|.
name|getWidget
argument_list|()
operator|.
name|getWidget
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|SingleMonth
condition|)
block|{
name|SingleMonth
name|s
init|=
operator|(
name|SingleMonth
operator|)
name|w
decl_stmt|;
for|for
control|(
name|D
name|d
range|:
name|s
operator|.
name|getDays
argument_list|()
control|)
block|{
if|if
condition|(
name|d
operator|.
name|getValue
argument_list|()
condition|)
name|ret
operator|++
expr_stmt|;
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|List
argument_list|<
name|Integer
argument_list|>
name|getSelectedDays
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iPanel
operator|.
name|getWidget
argument_list|()
operator|.
name|getWidgetCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|iPanel
operator|.
name|getWidget
argument_list|()
operator|.
name|getWidget
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|SingleMonth
condition|)
block|{
name|SingleMonth
name|s
init|=
operator|(
name|SingleMonth
operator|)
name|w
decl_stmt|;
for|for
control|(
name|D
name|d
range|:
name|s
operator|.
name|getDays
argument_list|()
control|)
block|{
if|if
condition|(
name|d
operator|.
name|getValue
argument_list|()
condition|)
name|ret
operator|.
name|add
argument_list|(
name|dayOfYear
argument_list|(
name|s
operator|.
name|getYear
argument_list|()
argument_list|,
literal|1
operator|+
name|s
operator|.
name|getMonth
argument_list|()
argument_list|,
literal|1
operator|+
name|d
operator|.
name|getNumber
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|Date
name|getDate
parameter_list|(
name|int
name|day
parameter_list|)
block|{
return|return
name|SingleDateSelector
operator|.
name|dayOfYear
argument_list|(
name|iSessionYear
argument_list|,
name|day
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|List
argument_list|<
name|Date
argument_list|>
name|value
parameter_list|)
block|{
name|setValue
argument_list|(
name|value
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|List
argument_list|<
name|Date
argument_list|>
name|value
parameter_list|,
name|boolean
name|fireEvents
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iPanel
operator|.
name|getWidget
argument_list|()
operator|.
name|getWidgetCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|iPanel
operator|.
name|getWidget
argument_list|()
operator|.
name|getWidget
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|SingleMonth
condition|)
block|{
name|SingleMonth
name|s
init|=
operator|(
name|SingleMonth
operator|)
name|w
decl_stmt|;
for|for
control|(
name|D
name|d
range|:
name|s
operator|.
name|getDays
argument_list|()
control|)
name|d
operator|.
name|setValue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Date
name|d
range|:
name|value
control|)
block|{
if|if
condition|(
name|s
operator|.
name|getYear
argument_list|()
operator|==
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"yyyy"
argument_list|)
operator|.
name|format
argument_list|(
name|d
argument_list|)
argument_list|)
operator|&&
name|s
operator|.
name|getMonth
argument_list|()
operator|+
literal|1
operator|==
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"MM"
argument_list|)
operator|.
name|format
argument_list|(
name|d
argument_list|)
argument_list|)
condition|)
block|{
name|s
operator|.
name|get
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"dd"
argument_list|)
operator|.
name|format
argument_list|(
name|d
argument_list|)
argument_list|)
operator|-
literal|1
argument_list|)
operator|.
name|setValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|fireEvents
condition|)
block|{
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|this
argument_list|,
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|clearMessage
parameter_list|()
block|{
name|iPanel
operator|.
name|clearHint
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setMessage
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|iPanel
operator|.
name|setHint
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setError
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|iPanel
operator|.
name|setErrorHint
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isEnabled
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
name|int
name|year
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"yyyy"
argument_list|)
operator|.
name|format
argument_list|(
name|date
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|month
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"MM"
argument_list|)
operator|.
name|format
argument_list|(
name|date
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|day
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"dd"
argument_list|)
operator|.
name|format
argument_list|(
name|date
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iPanel
operator|.
name|getWidget
argument_list|()
operator|.
name|getWidgetCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|iPanel
operator|.
name|getWidget
argument_list|()
operator|.
name|getWidget
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|SingleMonth
condition|)
block|{
name|SingleMonth
name|s
init|=
operator|(
name|SingleMonth
operator|)
name|w
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|getYear
argument_list|()
operator|==
name|year
operator|&&
name|s
operator|.
name|getMonth
argument_list|()
operator|+
literal|1
operator|==
name|month
condition|)
return|return
name|s
operator|.
name|get
argument_list|(
name|day
operator|-
literal|1
argument_list|)
operator|.
name|isEnabled
argument_list|()
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|hasFlag
parameter_list|(
name|Date
name|date
parameter_list|,
name|SessionMonth
operator|.
name|Flag
name|flag
parameter_list|)
block|{
name|int
name|year
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"yyyy"
argument_list|)
operator|.
name|format
argument_list|(
name|date
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|month
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"MM"
argument_list|)
operator|.
name|format
argument_list|(
name|date
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|day
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"dd"
argument_list|)
operator|.
name|format
argument_list|(
name|date
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iPanel
operator|.
name|getWidget
argument_list|()
operator|.
name|getWidgetCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|iPanel
operator|.
name|getWidget
argument_list|()
operator|.
name|getWidget
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|SingleMonth
condition|)
block|{
name|SingleMonth
name|s
init|=
operator|(
name|SingleMonth
operator|)
name|w
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|getYear
argument_list|()
operator|==
name|year
operator|&&
name|s
operator|.
name|getMonth
argument_list|()
operator|+
literal|1
operator|==
name|month
condition|)
return|return
name|s
operator|.
name|get
argument_list|(
name|day
operator|-
literal|1
argument_list|)
operator|.
name|hasFlag
argument_list|(
name|flag
argument_list|)
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
class|class
name|DatesPanel
extends|extends
name|AbsolutePanel
implements|implements
name|Focusable
implements|,
name|HasAllFocusHandlers
block|{
specifier|private
name|int
name|iMonth
init|=
operator|-
literal|1
decl_stmt|,
name|iDow
init|=
operator|-
literal|1
decl_stmt|,
name|iWeek
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|AriaTextBox
name|iText
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iHasFocus
init|=
literal|false
decl_stmt|;
specifier|public
name|DatesPanel
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|setStyleName
argument_list|(
literal|"unitime-DateSelector"
argument_list|)
expr_stmt|;
name|iText
operator|=
operator|new
name|AriaTextBox
argument_list|()
expr_stmt|;
name|iText
operator|.
name|addStyleName
argument_list|(
literal|"text"
argument_list|)
expr_stmt|;
name|iText
operator|.
name|addKeyUpHandler
argument_list|(
operator|new
name|KeyUpHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyUp
parameter_list|(
name|KeyUpEvent
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|event
operator|.
name|getNativeKeyCode
argument_list|()
condition|)
block|{
case|case
name|KeyCodes
operator|.
name|KEY_RIGHT
case|:
name|moveLeftOrRight
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
case|case
name|KeyCodes
operator|.
name|KEY_LEFT
case|:
name|moveLeftOrRight
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|KeyCodes
operator|.
name|KEY_UP
case|:
name|moveUpOrDown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|KeyCodes
operator|.
name|KEY_DOWN
case|:
name|moveUpOrDown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
case|case
literal|32
case|:
if|if
condition|(
name|iText
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|select
argument_list|()
expr_stmt|;
break|break;
case|case
name|KeyCodes
operator|.
name|KEY_ENTER
case|:
if|if
condition|(
name|iText
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|parseText
argument_list|(
name|iText
operator|.
name|getValue
argument_list|()
argument_list|,
literal|true
argument_list|)
condition|)
name|select
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|iText
operator|.
name|addKeyDownHandler
argument_list|(
operator|new
name|KeyDownHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyDown
parameter_list|(
name|KeyDownEvent
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|event
operator|.
name|getNativeEvent
argument_list|()
operator|.
name|getKeyCode
argument_list|()
condition|)
block|{
case|case
name|KeyCodes
operator|.
name|KEY_RIGHT
case|:
case|case
name|KeyCodes
operator|.
name|KEY_LEFT
case|:
case|case
name|KeyCodes
operator|.
name|KEY_UP
case|:
case|case
name|KeyCodes
operator|.
name|KEY_DOWN
case|:
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|iText
operator|.
name|addKeyPressHandler
argument_list|(
operator|new
name|KeyPressHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyPress
parameter_list|(
name|KeyPressEvent
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|event
operator|.
name|getNativeEvent
argument_list|()
operator|.
name|getKeyCode
argument_list|()
condition|)
block|{
case|case
literal|32
case|:
if|if
condition|(
name|iText
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
return|return;
case|case
name|KeyCodes
operator|.
name|KEY_ENTER
case|:
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
return|return;
block|}
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|parseText
argument_list|(
name|iText
operator|.
name|getValue
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iText
operator|.
name|addFocusHandler
argument_list|(
operator|new
name|FocusHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFocus
parameter_list|(
name|FocusEvent
name|event
parameter_list|)
block|{
comment|// addStyleName("unitime-DateSelectorFocus");
name|iHasFocus
operator|=
literal|true
expr_stmt|;
name|String
name|selection
init|=
name|toAriaString
argument_list|()
decl_stmt|;
if|if
condition|(
name|iMonth
operator|>=
literal|0
condition|)
block|{
name|addCursorStyleName
argument_list|(
name|iMonth
argument_list|,
name|iDow
argument_list|,
name|iWeek
argument_list|)
expr_stmt|;
if|if
condition|(
name|selection
operator|.
name|isEmpty
argument_list|()
condition|)
name|iText
operator|.
name|setAriaLabel
argument_list|(
name|ARIA
operator|.
name|datesSelectionNoSelection
argument_list|(
name|iText
operator|.
name|getAriaLabel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|iText
operator|.
name|setAriaLabel
argument_list|(
name|ARIA
operator|.
name|datesSelectionWithSelection
argument_list|(
name|selection
argument_list|,
name|iText
operator|.
name|getAriaLabel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|selection
operator|.
name|isEmpty
argument_list|()
condition|)
name|iText
operator|.
name|setAriaLabel
argument_list|(
name|ARIA
operator|.
name|datesSelection
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|iText
operator|.
name|setAriaLabel
argument_list|(
name|ARIA
operator|.
name|datesSelectionWithSelectionNoCursor
argument_list|(
name|selection
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|iText
operator|.
name|addBlurHandler
argument_list|(
operator|new
name|BlurHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onBlur
parameter_list|(
name|BlurEvent
name|event
parameter_list|)
block|{
comment|// removeStyleName("unitime-DateSelectorFocus");
if|if
condition|(
name|iMonth
operator|>=
literal|0
condition|)
name|removeCursorStyleName
argument_list|(
name|iMonth
argument_list|,
name|iDow
argument_list|,
name|iWeek
argument_list|)
expr_stmt|;
name|iHasFocus
operator|=
literal|false
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|iText
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEDOWN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onBrowserEvent
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|DOM
operator|.
name|eventGetType
argument_list|(
name|event
argument_list|)
condition|)
block|{
case|case
name|Event
operator|.
name|ONMOUSEDOWN
case|:
if|if
condition|(
operator|!
name|iHasFocus
condition|)
name|iText
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|super
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iMonth
operator|=
operator|-
literal|1
expr_stmt|;
name|iDow
operator|=
operator|-
literal|1
expr_stmt|;
name|iWeek
operator|=
operator|-
literal|1
expr_stmt|;
name|add
argument_list|(
name|iText
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setCursor
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
name|int
name|dateYear
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"yyyy"
argument_list|)
operator|.
name|format
argument_list|(
name|date
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|dateMonth
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"MM"
argument_list|)
operator|.
name|format
argument_list|(
name|date
argument_list|)
argument_list|)
operator|-
literal|1
decl_stmt|;
name|int
name|dateDay
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"dd"
argument_list|)
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
operator|-
literal|1
decl_stmt|;
name|SingleMonth
name|lastMonth
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getWidgetCount
argument_list|()
operator|-
literal|2
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|getWidget
argument_list|(
literal|1
operator|+
name|i
argument_list|)
operator|instanceof
name|SingleMonth
condition|)
block|{
name|SingleMonth
name|m
init|=
operator|(
name|SingleMonth
operator|)
name|getWidget
argument_list|(
literal|1
operator|+
name|i
argument_list|)
decl_stmt|;
comment|// before
if|if
condition|(
name|i
operator|==
literal|0
operator|&&
name|dateYear
operator|<
name|m
operator|.
name|getYear
argument_list|()
operator|||
operator|(
name|dateYear
operator|==
name|m
operator|.
name|getYear
argument_list|()
operator|&&
name|dateMonth
operator|<
name|m
operator|.
name|getMonth
argument_list|()
operator|)
condition|)
block|{
name|D
name|last
init|=
literal|null
decl_stmt|;
for|for
control|(
name|D
name|d
range|:
name|m
operator|.
name|getDays
argument_list|()
control|)
if|if
condition|(
name|d
operator|.
name|isEnabled
argument_list|()
condition|)
name|last
operator|=
name|d
expr_stmt|;
if|if
condition|(
name|last
operator|!=
literal|null
condition|)
block|{
name|iMonth
operator|=
name|i
expr_stmt|;
name|iDow
operator|=
name|last
operator|.
name|getDow
argument_list|()
expr_stmt|;
name|iWeek
operator|=
name|last
operator|.
name|getWeek
argument_list|()
expr_stmt|;
name|last
operator|.
name|addStyleName
argument_list|(
literal|"cursor"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|// match
if|if
condition|(
name|m
operator|.
name|getYear
argument_list|()
operator|==
name|dateYear
operator|&&
name|m
operator|.
name|getMonth
argument_list|()
operator|==
name|dateMonth
condition|)
block|{
name|D
name|d
init|=
name|m
operator|.
name|getDays
argument_list|()
operator|.
name|get
argument_list|(
name|dateDay
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|iMonth
operator|=
name|i
expr_stmt|;
name|iDow
operator|=
name|d
operator|.
name|getDow
argument_list|()
expr_stmt|;
name|iWeek
operator|=
name|d
operator|.
name|getWeek
argument_list|()
expr_stmt|;
name|d
operator|.
name|addStyleName
argument_list|(
literal|"cursor"
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|D
name|first
init|=
literal|null
decl_stmt|,
name|last
init|=
literal|null
decl_stmt|;
for|for
control|(
name|D
name|x
range|:
name|m
operator|.
name|getDays
argument_list|()
control|)
if|if
condition|(
name|x
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|first
operator|==
literal|null
condition|)
name|first
operator|=
name|x
expr_stmt|;
name|last
operator|=
name|x
expr_stmt|;
block|}
if|if
condition|(
name|first
operator|!=
literal|null
operator|&&
name|dateDay
operator|<
name|first
operator|.
name|getNumber
argument_list|()
condition|)
block|{
name|iMonth
operator|=
name|i
expr_stmt|;
name|iDow
operator|=
name|first
operator|.
name|getDow
argument_list|()
expr_stmt|;
name|iWeek
operator|=
name|first
operator|.
name|getWeek
argument_list|()
expr_stmt|;
name|first
operator|.
name|addStyleName
argument_list|(
literal|"cursor"
argument_list|)
expr_stmt|;
return|return;
block|}
if|else if
condition|(
name|last
operator|!=
literal|null
condition|)
block|{
name|iMonth
operator|=
name|i
expr_stmt|;
name|iDow
operator|=
name|last
operator|.
name|getDow
argument_list|()
expr_stmt|;
name|iWeek
operator|=
name|last
operator|.
name|getWeek
argument_list|()
expr_stmt|;
name|last
operator|.
name|addStyleName
argument_list|(
literal|"cursor"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
name|lastMonth
operator|=
name|m
expr_stmt|;
block|}
block|}
name|D
name|last
init|=
literal|null
decl_stmt|;
for|for
control|(
name|D
name|d
range|:
name|lastMonth
operator|.
name|getDays
argument_list|()
control|)
if|if
condition|(
name|d
operator|.
name|isEnabled
argument_list|()
condition|)
name|last
operator|=
name|d
expr_stmt|;
if|if
condition|(
name|last
operator|!=
literal|null
condition|)
block|{
name|iMonth
operator|=
name|getWidgetIndex
argument_list|(
name|lastMonth
argument_list|)
operator|-
literal|1
expr_stmt|;
name|iDow
operator|=
name|last
operator|.
name|getDow
argument_list|()
expr_stmt|;
name|iWeek
operator|=
name|last
operator|.
name|getWeek
argument_list|()
expr_stmt|;
name|last
operator|.
name|addStyleName
argument_list|(
literal|"cursor"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
specifier|public
name|void
name|setCursor
parameter_list|(
name|int
modifier|...
name|cursor
parameter_list|)
block|{
if|if
condition|(
name|iMonth
operator|>=
literal|0
condition|)
name|removeCursorStyleName
argument_list|(
name|iMonth
argument_list|,
name|iDow
argument_list|,
name|iWeek
argument_list|)
expr_stmt|;
if|if
condition|(
name|cursor
operator|==
literal|null
condition|)
block|{
name|iMonth
operator|=
operator|-
literal|1
expr_stmt|;
name|iDow
operator|=
operator|-
literal|1
expr_stmt|;
name|iWeek
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|iMonth
operator|=
name|cursor
index|[
literal|0
index|]
expr_stmt|;
name|iDow
operator|=
name|cursor
index|[
literal|1
index|]
expr_stmt|;
name|iWeek
operator|=
name|cursor
index|[
literal|2
index|]
expr_stmt|;
if|if
condition|(
name|iMonth
operator|>=
literal|0
condition|)
name|addCursorStyleName
argument_list|(
name|iMonth
argument_list|,
name|iDow
argument_list|,
name|iWeek
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addCursorStyleName
parameter_list|(
name|int
name|month
parameter_list|,
name|int
name|dow
parameter_list|,
name|int
name|week
parameter_list|)
block|{
if|if
condition|(
operator|!
name|iHasFocus
condition|)
return|return;
name|SingleMonth
name|m
init|=
operator|(
name|SingleMonth
operator|)
name|getWidget
argument_list|(
literal|1
operator|+
name|month
argument_list|)
decl_stmt|;
if|if
condition|(
name|dow
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|week
operator|>=
literal|0
condition|)
block|{
for|for
control|(
name|D
name|d
range|:
name|m
operator|.
name|getDays
argument_list|()
control|)
if|if
condition|(
name|d
operator|.
name|getWeek
argument_list|()
operator|==
name|week
operator|&&
name|d
operator|.
name|getDow
argument_list|()
operator|==
name|dow
condition|)
block|{
name|d
operator|.
name|addStyleName
argument_list|(
literal|"cursor"
argument_list|)
expr_stmt|;
name|iText
operator|.
name|setAriaLabel
argument_list|(
name|d
operator|.
name|getValue
argument_list|()
condition|?
name|ARIA
operator|.
name|datesSelected
argument_list|(
name|d
operator|.
name|getAriaLabel
argument_list|()
argument_list|)
else|:
name|d
operator|.
name|getAriaLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|P
name|p
init|=
name|m
operator|.
name|getDays
argument_list|(
operator|(
literal|7
operator|-
name|SingleDateSelector
operator|.
name|startingDayOfWeek
argument_list|()
operator|+
name|dow
operator|)
operator|%
literal|7
argument_list|)
decl_stmt|;
name|p
operator|.
name|addStyleName
argument_list|(
literal|"cursor"
argument_list|)
expr_stmt|;
name|iText
operator|.
name|setAriaLabel
argument_list|(
name|p
operator|.
name|getAriaLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|week
operator|>=
literal|0
condition|)
block|{
name|P
name|p
init|=
name|m
operator|.
name|getWeeks
argument_list|()
operator|.
name|get
argument_list|(
name|week
argument_list|)
decl_stmt|;
name|p
operator|.
name|addStyleName
argument_list|(
literal|"cursor"
argument_list|)
expr_stmt|;
name|iText
operator|.
name|setAriaLabel
argument_list|(
name|p
operator|.
name|getAriaLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|P
name|p
init|=
name|m
operator|.
name|getCorner
argument_list|()
decl_stmt|;
name|p
operator|.
name|addStyleName
argument_list|(
literal|"cursor"
argument_list|)
expr_stmt|;
name|iText
operator|.
name|setAriaLabel
argument_list|(
name|p
operator|.
name|getAriaLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|String
name|getAriaString
parameter_list|(
name|int
name|month
parameter_list|,
name|int
name|dow
parameter_list|,
name|int
name|week
parameter_list|)
block|{
name|SingleMonth
name|m
init|=
operator|(
name|SingleMonth
operator|)
name|getWidget
argument_list|(
literal|1
operator|+
name|month
argument_list|)
decl_stmt|;
if|if
condition|(
name|dow
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|week
operator|>=
literal|0
condition|)
block|{
for|for
control|(
name|D
name|d
range|:
name|m
operator|.
name|getDays
argument_list|()
control|)
if|if
condition|(
name|d
operator|.
name|getWeek
argument_list|()
operator|==
name|week
operator|&&
name|d
operator|.
name|getDow
argument_list|()
operator|==
name|dow
condition|)
return|return
name|d
operator|.
name|getAriaLabel
argument_list|()
return|;
block|}
else|else
block|{
name|P
name|p
init|=
name|m
operator|.
name|getDays
argument_list|(
operator|(
literal|7
operator|-
name|SingleDateSelector
operator|.
name|startingDayOfWeek
argument_list|()
operator|+
name|dow
operator|)
operator|%
literal|7
argument_list|)
decl_stmt|;
return|return
name|p
operator|.
name|getAriaLabel
argument_list|()
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|week
operator|>=
literal|0
condition|)
block|{
name|P
name|p
init|=
name|m
operator|.
name|getWeeks
argument_list|()
operator|.
name|get
argument_list|(
name|week
argument_list|)
decl_stmt|;
return|return
name|p
operator|.
name|getAriaLabel
argument_list|()
return|;
block|}
else|else
block|{
name|P
name|p
init|=
name|m
operator|.
name|getCorner
argument_list|()
decl_stmt|;
return|return
name|p
operator|.
name|getAriaLabel
argument_list|()
return|;
block|}
block|}
return|return
literal|""
return|;
block|}
specifier|private
name|void
name|removeCursorStyleName
parameter_list|(
name|int
name|month
parameter_list|,
name|int
name|dow
parameter_list|,
name|int
name|week
parameter_list|)
block|{
name|SingleMonth
name|m
init|=
operator|(
name|SingleMonth
operator|)
name|getWidget
argument_list|(
literal|1
operator|+
name|month
argument_list|)
decl_stmt|;
if|if
condition|(
name|dow
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|week
operator|>=
literal|0
condition|)
block|{
for|for
control|(
name|D
name|d
range|:
name|m
operator|.
name|getDays
argument_list|()
control|)
if|if
condition|(
name|d
operator|.
name|getWeek
argument_list|()
operator|==
name|week
operator|&&
name|d
operator|.
name|getDow
argument_list|()
operator|==
name|dow
condition|)
block|{
name|d
operator|.
name|removeStyleName
argument_list|(
literal|"cursor"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|m
operator|.
name|getDays
argument_list|(
operator|(
literal|7
operator|-
name|SingleDateSelector
operator|.
name|startingDayOfWeek
argument_list|()
operator|+
name|dow
operator|)
operator|%
literal|7
argument_list|)
operator|.
name|removeStyleName
argument_list|(
literal|"cursor"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|week
operator|>=
literal|0
condition|)
block|{
name|m
operator|.
name|getWeeks
argument_list|()
operator|.
name|get
argument_list|(
name|week
argument_list|)
operator|.
name|removeStyleName
argument_list|(
literal|"cursor"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m
operator|.
name|getCorner
argument_list|()
operator|.
name|removeStyleName
argument_list|(
literal|"cursor"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|moveUpOrDown
parameter_list|(
name|boolean
name|up
parameter_list|)
block|{
if|if
condition|(
name|iMonth
operator|>=
literal|0
condition|)
name|removeCursorStyleName
argument_list|(
name|iMonth
argument_list|,
name|iDow
argument_list|,
name|iWeek
argument_list|)
expr_stmt|;
else|else
block|{
name|months
label|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getWidgetCount
argument_list|()
operator|-
literal|2
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|getWidget
argument_list|(
literal|1
operator|+
name|i
argument_list|)
operator|instanceof
name|SingleMonth
condition|)
block|{
name|SingleMonth
name|m
init|=
operator|(
name|SingleMonth
operator|)
name|getWidget
argument_list|(
literal|1
operator|+
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|D
name|d
range|:
name|m
operator|.
name|getDays
argument_list|()
control|)
if|if
condition|(
name|d
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|iDow
operator|=
name|d
operator|.
name|getDow
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|up
condition|)
break|break
name|months
break|;
block|}
block|}
block|}
name|int
index|[]
name|first
init|=
literal|null
decl_stmt|,
name|last
init|=
literal|null
decl_stmt|,
name|current
init|=
literal|null
decl_stmt|,
name|previous
init|=
literal|null
decl_stmt|,
name|next
init|=
literal|null
decl_stmt|;
name|int
name|startingDayOfWeek
init|=
name|SingleDateSelector
operator|.
name|startingDayOfWeek
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
operator|-
literal|1
init|;
name|x
operator|<
literal|7
condition|;
name|x
operator|++
control|)
block|{
name|int
name|k
init|=
operator|(
name|x
operator|<
literal|0
condition|?
name|x
else|:
operator|(
name|x
operator|+
name|startingDayOfWeek
operator|)
operator|%
literal|7
operator|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getWidgetCount
argument_list|()
operator|-
literal|2
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|getWidget
argument_list|(
literal|1
operator|+
name|i
argument_list|)
operator|instanceof
name|SingleMonth
condition|)
block|{
name|SingleMonth
name|m
init|=
operator|(
name|SingleMonth
operator|)
name|getWidget
argument_list|(
literal|1
operator|+
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
operator|-
literal|1
init|;
name|j
operator|<
name|m
operator|.
name|getWeeks
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|boolean
name|enabled
init|=
literal|false
decl_stmt|;
for|for
control|(
name|D
name|d
range|:
name|m
operator|.
name|getDays
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
name|j
operator|==
operator|-
literal|1
operator|||
name|j
operator|==
name|d
operator|.
name|getWeek
argument_list|()
operator|)
operator|&&
operator|(
name|k
operator|==
operator|-
literal|1
operator|||
name|k
operator|==
name|d
operator|.
name|getDow
argument_list|()
operator|)
operator|&&
name|d
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|enabled
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|enabled
operator|&&
name|first
operator|==
literal|null
condition|)
name|first
operator|=
operator|new
name|int
index|[]
block|{
name|i
block|,
name|j
block|,
name|k
block|}
expr_stmt|;
if|if
condition|(
name|enabled
condition|)
name|last
operator|=
operator|new
name|int
index|[]
block|{
name|i
block|,
name|j
block|,
name|k
block|}
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|iMonth
operator|&&
name|j
operator|==
name|iWeek
operator|&&
name|k
operator|==
name|iDow
condition|)
name|current
operator|=
operator|new
name|int
index|[]
block|{
name|i
block|,
name|j
block|,
name|k
block|}
expr_stmt|;
if|else if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|enabled
condition|)
name|previous
operator|=
operator|new
name|int
index|[]
block|{
name|i
block|,
name|j
block|,
name|k
block|}
expr_stmt|;
block|}
if|else if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|enabled
condition|)
name|next
operator|=
operator|new
name|int
index|[]
block|{
name|i
block|,
name|j
block|,
name|k
block|}
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|up
condition|)
block|{
if|if
condition|(
name|previous
operator|!=
literal|null
condition|)
block|{
name|iMonth
operator|=
name|previous
index|[
literal|0
index|]
expr_stmt|;
name|iWeek
operator|=
name|previous
index|[
literal|1
index|]
expr_stmt|;
name|iDow
operator|=
name|previous
index|[
literal|2
index|]
expr_stmt|;
block|}
else|else
block|{
name|iMonth
operator|=
name|last
index|[
literal|0
index|]
expr_stmt|;
name|iWeek
operator|=
name|last
index|[
literal|1
index|]
expr_stmt|;
name|iDow
operator|=
name|last
index|[
literal|2
index|]
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|iMonth
operator|=
name|next
index|[
literal|0
index|]
expr_stmt|;
name|iWeek
operator|=
name|next
index|[
literal|1
index|]
expr_stmt|;
name|iDow
operator|=
name|next
index|[
literal|2
index|]
expr_stmt|;
block|}
else|else
block|{
name|iMonth
operator|=
name|first
index|[
literal|0
index|]
expr_stmt|;
name|iWeek
operator|=
name|first
index|[
literal|1
index|]
expr_stmt|;
name|iDow
operator|=
name|first
index|[
literal|2
index|]
expr_stmt|;
block|}
block|}
name|addCursorStyleName
argument_list|(
name|iMonth
argument_list|,
name|iDow
argument_list|,
name|iWeek
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|moveLeftOrRight
parameter_list|(
name|boolean
name|left
parameter_list|)
block|{
if|if
condition|(
name|iMonth
operator|>=
literal|0
condition|)
name|removeCursorStyleName
argument_list|(
name|iMonth
argument_list|,
name|iDow
argument_list|,
name|iWeek
argument_list|)
expr_stmt|;
else|else
block|{
name|months
label|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getWidgetCount
argument_list|()
operator|-
literal|2
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|getWidget
argument_list|(
name|i
argument_list|)
operator|instanceof
name|SingleMonth
condition|)
block|{
name|SingleMonth
name|m
init|=
operator|(
name|SingleMonth
operator|)
name|getWidget
argument_list|(
literal|1
operator|+
name|i
argument_list|)
decl_stmt|;
name|boolean
name|enabled
init|=
literal|false
decl_stmt|;
for|for
control|(
name|D
name|d
range|:
name|m
operator|.
name|getDays
argument_list|()
control|)
if|if
condition|(
name|d
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|enabled
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|enabled
condition|)
block|{
name|iMonth
operator|=
name|i
expr_stmt|;
if|if
condition|(
operator|!
name|left
condition|)
break|break
name|months
break|;
block|}
block|}
block|}
name|int
index|[]
name|first
init|=
literal|null
decl_stmt|,
name|last
init|=
literal|null
decl_stmt|,
name|current
init|=
literal|null
decl_stmt|,
name|previous
init|=
literal|null
decl_stmt|,
name|next
init|=
literal|null
decl_stmt|;
name|int
name|startingDayOfWeek
init|=
name|SingleDateSelector
operator|.
name|startingDayOfWeek
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getWidgetCount
argument_list|()
operator|-
literal|2
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|getWidget
argument_list|(
literal|1
operator|+
name|i
argument_list|)
operator|instanceof
name|SingleMonth
condition|)
block|{
name|SingleMonth
name|m
init|=
operator|(
name|SingleMonth
operator|)
name|getWidget
argument_list|(
literal|1
operator|+
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
operator|-
literal|1
init|;
name|j
operator|<
name|m
operator|.
name|getWeeks
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
for|for
control|(
name|int
name|x
init|=
operator|-
literal|1
init|;
name|x
operator|<
literal|7
condition|;
name|x
operator|++
control|)
block|{
name|int
name|k
init|=
operator|(
name|x
operator|<
literal|0
condition|?
name|x
else|:
operator|(
name|x
operator|+
name|startingDayOfWeek
operator|)
operator|%
literal|7
operator|)
decl_stmt|;
name|boolean
name|enabled
init|=
literal|false
decl_stmt|;
for|for
control|(
name|D
name|d
range|:
name|m
operator|.
name|getDays
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
name|j
operator|==
operator|-
literal|1
operator|||
name|j
operator|==
name|d
operator|.
name|getWeek
argument_list|()
operator|)
operator|&&
operator|(
name|k
operator|==
operator|-
literal|1
operator|||
name|k
operator|==
name|d
operator|.
name|getDow
argument_list|()
operator|)
operator|&&
name|d
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|enabled
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|enabled
operator|&&
name|first
operator|==
literal|null
condition|)
name|first
operator|=
operator|new
name|int
index|[]
block|{
name|i
block|,
name|j
block|,
name|k
block|}
expr_stmt|;
if|if
condition|(
name|enabled
condition|)
name|last
operator|=
operator|new
name|int
index|[]
block|{
name|i
block|,
name|j
block|,
name|k
block|}
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|iMonth
operator|&&
name|j
operator|==
name|iWeek
operator|&&
name|k
operator|==
name|iDow
condition|)
name|current
operator|=
operator|new
name|int
index|[]
block|{
name|i
block|,
name|j
block|,
name|k
block|}
expr_stmt|;
if|else if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|enabled
condition|)
name|previous
operator|=
operator|new
name|int
index|[]
block|{
name|i
block|,
name|j
block|,
name|k
block|}
expr_stmt|;
block|}
if|else if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|enabled
condition|)
name|next
operator|=
operator|new
name|int
index|[]
block|{
name|i
block|,
name|j
block|,
name|k
block|}
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|left
condition|)
block|{
if|if
condition|(
name|previous
operator|!=
literal|null
condition|)
block|{
name|iMonth
operator|=
name|previous
index|[
literal|0
index|]
expr_stmt|;
name|iWeek
operator|=
name|previous
index|[
literal|1
index|]
expr_stmt|;
name|iDow
operator|=
name|previous
index|[
literal|2
index|]
expr_stmt|;
block|}
else|else
block|{
name|iMonth
operator|=
name|last
index|[
literal|0
index|]
expr_stmt|;
name|iWeek
operator|=
name|last
index|[
literal|1
index|]
expr_stmt|;
name|iDow
operator|=
name|last
index|[
literal|2
index|]
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|iMonth
operator|=
name|next
index|[
literal|0
index|]
expr_stmt|;
name|iWeek
operator|=
name|next
index|[
literal|1
index|]
expr_stmt|;
name|iDow
operator|=
name|next
index|[
literal|2
index|]
expr_stmt|;
block|}
else|else
block|{
name|iMonth
operator|=
name|first
index|[
literal|0
index|]
expr_stmt|;
name|iWeek
operator|=
name|first
index|[
literal|1
index|]
expr_stmt|;
name|iDow
operator|=
name|first
index|[
literal|2
index|]
expr_stmt|;
block|}
block|}
name|addCursorStyleName
argument_list|(
name|iMonth
argument_list|,
name|iDow
argument_list|,
name|iWeek
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|hasUnselectedDays
parameter_list|(
name|SelectionMode
name|mode
parameter_list|)
block|{
if|if
condition|(
name|iMonth
operator|<
literal|0
condition|)
return|return
literal|false
return|;
name|SingleMonth
name|m
init|=
operator|(
name|SingleMonth
operator|)
name|getWidget
argument_list|(
literal|1
operator|+
name|iMonth
argument_list|)
decl_stmt|;
for|for
control|(
name|D
name|d
range|:
name|m
operator|.
name|getDays
argument_list|()
control|)
if|if
condition|(
operator|(
name|iWeek
operator|==
operator|-
literal|1
operator|||
name|iWeek
operator|==
name|d
operator|.
name|getWeek
argument_list|()
operator|)
operator|&&
operator|(
name|iDow
operator|==
operator|-
literal|1
operator|||
name|iDow
operator|==
name|d
operator|.
name|getDow
argument_list|()
operator|)
operator|&&
name|d
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|mode
operator|.
name|hasFlag
argument_list|(
name|SelectionFlag
operator|.
name|IncludeNoClasses
argument_list|)
operator|&&
operator|!
name|d
operator|.
name|isClassDay
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|mode
operator|.
name|hasFlag
argument_list|(
name|SelectionFlag
operator|.
name|IncludePast
argument_list|)
operator|&&
name|d
operator|.
name|isPast
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|mode
operator|.
name|hasFlag
argument_list|(
name|SelectionFlag
operator|.
name|IncludeWeekend
argument_list|)
operator|&&
name|d
operator|.
name|isWeekend
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|mode
operator|.
name|hasFlag
argument_list|(
name|SelectionFlag
operator|.
name|IncludeVacation
argument_list|)
operator|&&
name|d
operator|.
name|isVacation
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|d
operator|.
name|getValue
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|setAllSelected
parameter_list|(
name|boolean
name|selected
parameter_list|,
name|SelectionMode
name|mode
parameter_list|)
block|{
if|if
condition|(
name|iMonth
operator|<
literal|0
condition|)
return|return;
name|SingleMonth
name|m
init|=
operator|(
name|SingleMonth
operator|)
name|getWidget
argument_list|(
literal|1
operator|+
name|iMonth
argument_list|)
decl_stmt|;
name|boolean
name|skipNoClass
init|=
literal|false
decl_stmt|;
name|boolean
name|skipPast
init|=
literal|false
decl_stmt|;
name|boolean
name|skipVacation
init|=
literal|false
decl_stmt|;
name|boolean
name|skipWeekend
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|iWeek
operator|<
literal|0
condition|)
block|{
for|for
control|(
name|D
name|d
range|:
name|m
operator|.
name|getDays
argument_list|()
control|)
if|if
condition|(
operator|(
name|iWeek
operator|==
operator|-
literal|1
operator|||
name|iWeek
operator|==
name|d
operator|.
name|getWeek
argument_list|()
operator|)
operator|&&
operator|(
name|iDow
operator|==
operator|-
literal|1
operator|||
name|iDow
operator|==
name|d
operator|.
name|getDow
argument_list|()
operator|)
operator|&&
name|d
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|mode
operator|.
name|hasFlag
argument_list|(
name|SelectionFlag
operator|.
name|IncludeNoClasses
argument_list|)
operator|&&
operator|!
name|d
operator|.
name|isClassDay
argument_list|()
condition|)
block|{
name|skipNoClass
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|mode
operator|.
name|hasFlag
argument_list|(
name|SelectionFlag
operator|.
name|IncludePast
argument_list|)
operator|&&
name|d
operator|.
name|isPast
argument_list|()
condition|)
block|{
name|skipPast
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|mode
operator|.
name|hasFlag
argument_list|(
name|SelectionFlag
operator|.
name|IncludeWeekend
argument_list|)
operator|&&
name|d
operator|.
name|isWeekend
argument_list|()
condition|)
block|{
name|skipWeekend
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|mode
operator|.
name|hasFlag
argument_list|(
name|SelectionFlag
operator|.
name|IncludeVacation
argument_list|)
operator|&&
name|d
operator|.
name|isVacation
argument_list|()
condition|)
block|{
name|skipVacation
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
name|d
operator|.
name|setValue
argument_list|(
name|selected
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|D
name|d
range|:
name|m
operator|.
name|getWeeks
argument_list|()
operator|.
name|get
argument_list|(
name|iWeek
argument_list|)
operator|.
name|getDays
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
name|iDow
operator|==
operator|-
literal|1
operator|||
name|iDow
operator|==
name|d
operator|.
name|getDow
argument_list|()
operator|)
operator|&&
name|d
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|mode
operator|.
name|hasFlag
argument_list|(
name|SelectionFlag
operator|.
name|IncludeNoClasses
argument_list|)
operator|&&
operator|!
name|d
operator|.
name|isClassDay
argument_list|()
condition|)
block|{
name|skipNoClass
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|mode
operator|.
name|hasFlag
argument_list|(
name|SelectionFlag
operator|.
name|IncludePast
argument_list|)
operator|&&
name|d
operator|.
name|isPast
argument_list|()
condition|)
block|{
name|skipPast
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|mode
operator|.
name|hasFlag
argument_list|(
name|SelectionFlag
operator|.
name|IncludeWeekend
argument_list|)
operator|&&
name|d
operator|.
name|isWeekend
argument_list|()
condition|)
block|{
name|skipWeekend
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|mode
operator|.
name|hasFlag
argument_list|(
name|SelectionFlag
operator|.
name|IncludeVacation
argument_list|)
operator|&&
name|d
operator|.
name|isVacation
argument_list|()
condition|)
block|{
name|skipVacation
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
name|d
operator|.
name|setValue
argument_list|(
name|selected
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|String
name|aria
init|=
name|getAriaString
argument_list|(
name|iMonth
argument_list|,
name|iDow
argument_list|,
name|iWeek
argument_list|)
decl_stmt|;
if|if
condition|(
name|selected
condition|)
block|{
if|if
condition|(
name|iDow
operator|<
literal|0
operator|||
name|iWeek
operator|<
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|mode
operator|.
name|hasFlag
argument_list|(
name|SelectionFlag
operator|.
name|IncludeNoClasses
argument_list|)
operator|&&
name|skipNoClass
condition|)
block|{
if|if
condition|(
name|mode
operator|.
name|hasFlag
argument_list|(
name|SelectionFlag
operator|.
name|IncludePast
argument_list|)
operator|||
operator|!
name|skipPast
condition|)
name|AriaStatus
operator|.
name|getInstance
argument_list|()
operator|.
name|setHTML
argument_list|(
name|ARIA
operator|.
name|datesSelectedAllClassDays
argument_list|(
name|aria
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|AriaStatus
operator|.
name|getInstance
argument_list|()
operator|.
name|setHTML
argument_list|(
name|ARIA
operator|.
name|datesSelectedAllClassDaysFuture
argument_list|(
name|aria
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|mode
operator|.
name|hasFlag
argument_list|(
name|SelectionFlag
operator|.
name|IncludeWeekend
argument_list|)
operator|||
operator|!
name|skipWeekend
condition|)
block|{
if|if
condition|(
name|mode
operator|.
name|hasFlag
argument_list|(
name|SelectionFlag
operator|.
name|IncludeVacation
argument_list|)
operator|||
operator|!
name|skipVacation
condition|)
name|AriaStatus
operator|.
name|getInstance
argument_list|()
operator|.
name|setHTML
argument_list|(
name|ARIA
operator|.
name|datesSelectedAll
argument_list|(
name|aria
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|AriaStatus
operator|.
name|getInstance
argument_list|()
operator|.
name|setHTML
argument_list|(
name|ARIA
operator|.
name|datesSelectedAllButVacations
argument_list|(
name|aria
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|mode
operator|.
name|hasFlag
argument_list|(
name|SelectionFlag
operator|.
name|IncludePast
argument_list|)
operator|||
operator|!
name|skipPast
condition|)
name|AriaStatus
operator|.
name|getInstance
argument_list|()
operator|.
name|setHTML
argument_list|(
name|ARIA
operator|.
name|datesSelectedWorkDays
argument_list|(
name|aria
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|AriaStatus
operator|.
name|getInstance
argument_list|()
operator|.
name|setHTML
argument_list|(
name|ARIA
operator|.
name|datesSelectedWorkDaysFuture
argument_list|(
name|aria
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
name|AriaStatus
operator|.
name|getInstance
argument_list|()
operator|.
name|setHTML
argument_list|(
name|ARIA
operator|.
name|datesSelected
argument_list|(
name|aria
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|AriaStatus
operator|.
name|getInstance
argument_list|()
operator|.
name|setHTML
argument_list|(
name|ARIA
operator|.
name|datesUnselected
argument_list|(
name|aria
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|select
parameter_list|()
block|{
name|iText
operator|.
name|setValue
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|SelectionMode
name|mode
init|=
literal|null
decl_stmt|;
for|for
control|(
name|SelectionMode
name|m
range|:
name|SelectionMode
operator|.
name|values
argument_list|()
control|)
if|if
condition|(
name|hasUnselectedDays
argument_list|(
name|m
argument_list|)
condition|)
block|{
name|mode
operator|=
name|m
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|mode
operator|!=
literal|null
condition|)
name|setAllSelected
argument_list|(
literal|true
argument_list|,
name|mode
argument_list|)
expr_stmt|;
else|else
name|setAllSelected
argument_list|(
literal|false
argument_list|,
name|SelectionMode
operator|.
name|All
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|select
parameter_list|(
name|List
argument_list|<
name|D
argument_list|>
name|days
parameter_list|)
block|{
name|iText
operator|.
name|setValue
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|String
name|aria
init|=
literal|""
decl_stmt|;
name|boolean
name|unselected
init|=
literal|false
decl_stmt|;
for|for
control|(
name|D
name|d
range|:
name|days
control|)
if|if
condition|(
operator|!
name|d
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|unselected
operator|=
literal|true
expr_stmt|;
break|break;
block|}
for|for
control|(
name|D
name|d
range|:
name|days
control|)
block|{
name|d
operator|.
name|setValue
argument_list|(
name|unselected
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|aria
operator|.
name|isEmpty
argument_list|()
condition|)
name|aria
operator|+=
literal|", "
expr_stmt|;
name|aria
operator|+=
name|d
operator|.
name|getAriaLabel
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|unselected
condition|)
name|AriaStatus
operator|.
name|getInstance
argument_list|()
operator|.
name|setHTML
argument_list|(
name|ARIA
operator|.
name|datesSelected
argument_list|(
name|aria
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|AriaStatus
operator|.
name|getInstance
argument_list|()
operator|.
name|setHTML
argument_list|(
name|ARIA
operator|.
name|datesUnselected
argument_list|(
name|aria
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|toAriaString
parameter_list|()
block|{
name|String
name|aria
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getWidgetCount
argument_list|()
operator|-
literal|2
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|getWidget
argument_list|(
literal|1
operator|+
name|i
argument_list|)
operator|instanceof
name|SingleMonth
condition|)
block|{
name|SingleMonth
name|m
init|=
operator|(
name|SingleMonth
operator|)
name|getWidget
argument_list|(
literal|1
operator|+
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|D
name|d
range|:
name|m
operator|.
name|getDays
argument_list|()
control|)
block|{
if|if
condition|(
name|d
operator|.
name|getValue
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|aria
operator|.
name|isEmpty
argument_list|()
condition|)
name|aria
operator|+=
literal|", "
expr_stmt|;
name|aria
operator|+=
name|d
operator|.
name|getAriaLabel
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|aria
return|;
block|}
specifier|private
name|boolean
name|parseText
parameter_list|(
name|String
name|text
parameter_list|,
name|boolean
name|select
parameter_list|)
block|{
if|if
condition|(
name|text
operator|==
literal|null
operator|||
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|text
operator|.
name|endsWith
argument_list|(
literal|"?"
argument_list|)
condition|)
block|{
name|String
name|aria
init|=
name|toAriaString
argument_list|()
decl_stmt|;
if|if
condition|(
name|aria
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|AriaStatus
operator|.
name|getInstance
argument_list|()
operator|.
name|setHTML
argument_list|(
name|ARIA
operator|.
name|datesNothingSelected
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|AriaStatus
operator|.
name|getInstance
argument_list|()
operator|.
name|setHTML
argument_list|(
name|ARIA
operator|.
name|datesSelected
argument_list|(
name|aria
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iText
operator|.
name|setValue
argument_list|(
literal|""
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|int
name|pMonth
init|=
operator|-
literal|1
decl_stmt|,
name|pDow
init|=
operator|-
literal|1
decl_stmt|,
name|pWeek
init|=
operator|-
literal|1
decl_stmt|,
name|dCnt
init|=
operator|-
literal|1
decl_stmt|;
name|boolean
name|wk
init|=
literal|false
decl_stmt|;
name|boolean
name|dayFirst
init|=
name|CONSTANTS
operator|.
name|firstDayThenMonth
argument_list|()
decl_stmt|;
if|if
condition|(
name|text
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
condition|)
name|dayFirst
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|text
operator|.
name|contains
argument_list|(
literal|"/"
argument_list|)
condition|)
name|dayFirst
operator|=
literal|false
expr_stmt|;
name|Integer
name|day
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|tokens
init|=
name|text
operator|.
name|split
argument_list|(
literal|"[\\./\\- ]"
argument_list|)
decl_stmt|;
name|tokens
label|:
for|for
control|(
name|String
name|token
range|:
name|tokens
control|)
block|{
if|if
condition|(
name|token
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
comment|// Is it a day of week
if|if
condition|(
name|pDow
operator|<
literal|0
condition|)
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
literal|7
condition|;
name|d
operator|++
control|)
block|{
if|if
condition|(
name|CONSTANTS
operator|.
name|longDays
argument_list|()
index|[
name|d
index|]
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|token
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|pDow
operator|=
name|d
expr_stmt|;
continue|continue
name|tokens
continue|;
block|}
block|}
comment|// Is it a number?
name|Integer
name|number
init|=
literal|null
decl_stmt|;
try|try
block|{
name|number
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
comment|// Is it a day of month?
if|if
condition|(
name|day
operator|==
literal|null
operator|&&
name|number
operator|!=
literal|null
operator|&&
name|tokens
operator|.
name|length
operator|>
literal|1
operator|&&
name|dayFirst
operator|&&
name|pMonth
operator|<
literal|0
operator|&&
name|number
operator|>=
literal|1
operator|&&
name|number
operator|<=
literal|31
condition|)
block|{
name|day
operator|=
name|number
expr_stmt|;
continue|continue
name|tokens
continue|;
block|}
comment|// Is it a month?
if|if
condition|(
name|pMonth
operator|<
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getWidgetCount
argument_list|()
operator|-
literal|2
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|getWidget
argument_list|(
literal|1
operator|+
name|i
argument_list|)
operator|instanceof
name|SingleMonth
condition|)
block|{
name|SingleMonth
name|m
init|=
operator|(
name|SingleMonth
operator|)
name|getWidget
argument_list|(
literal|1
operator|+
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|number
operator|!=
literal|null
operator|&&
name|m
operator|.
name|getMonth
argument_list|()
operator|+
literal|1
operator|==
name|number
operator|)
operator|||
name|m
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|token
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|pMonth
operator|=
name|i
expr_stmt|;
if|if
condition|(
name|day
operator|!=
literal|null
operator|&&
operator|(
name|pWeek
operator|<
literal|0
operator|||
name|pDow
operator|<
literal|0
operator|)
condition|)
block|{
name|int
index|[]
name|first
init|=
literal|null
decl_stmt|,
name|last
init|=
literal|null
decl_stmt|;
for|for
control|(
name|D
name|d
range|:
name|m
operator|.
name|getDays
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|d
operator|.
name|isEnabled
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|first
operator|==
literal|null
condition|)
name|first
operator|=
operator|new
name|int
index|[]
block|{
name|d
operator|.
name|getNumber
argument_list|()
block|,
name|d
operator|.
name|getDow
argument_list|()
block|,
name|d
operator|.
name|getWeek
argument_list|()
block|}
expr_stmt|;
name|last
operator|=
operator|new
name|int
index|[]
block|{
name|d
operator|.
name|getNumber
argument_list|()
block|,
name|d
operator|.
name|getDow
argument_list|()
block|,
name|d
operator|.
name|getWeek
argument_list|()
block|}
expr_stmt|;
if|if
condition|(
name|d
operator|.
name|getNumber
argument_list|()
operator|+
literal|1
operator|==
name|day
condition|)
block|{
name|pWeek
operator|=
name|d
operator|.
name|getWeek
argument_list|()
expr_stmt|;
name|pDow
operator|=
name|d
operator|.
name|getDow
argument_list|()
expr_stmt|;
name|day
operator|=
literal|null
expr_stmt|;
continue|continue
name|tokens
continue|;
block|}
block|}
if|if
condition|(
name|first
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|day
operator|<
name|first
index|[
literal|0
index|]
condition|)
block|{
name|pDow
operator|=
name|first
index|[
literal|2
index|]
expr_stmt|;
name|pWeek
operator|=
name|first
index|[
literal|3
index|]
expr_stmt|;
block|}
else|else
block|{
name|pDow
operator|=
name|last
index|[
literal|2
index|]
expr_stmt|;
name|pWeek
operator|=
name|last
index|[
literal|3
index|]
expr_stmt|;
block|}
block|}
block|}
continue|continue
name|tokens
continue|;
block|}
block|}
block|}
block|}
comment|// Is it a week?
if|if
condition|(
name|pMonth
operator|<
literal|0
operator|&&
name|number
operator|!=
literal|null
operator|&&
name|day
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getWidgetCount
argument_list|()
operator|-
literal|2
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|getWidget
argument_list|(
literal|1
operator|+
name|i
argument_list|)
operator|instanceof
name|SingleMonth
condition|)
block|{
name|SingleMonth
name|m
init|=
operator|(
name|SingleMonth
operator|)
name|getWidget
argument_list|(
literal|1
operator|+
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|P
name|p
range|:
name|m
operator|.
name|getWeeks
argument_list|()
control|)
if|if
condition|(
name|p
operator|.
name|getCaption
argument_list|()
operator|.
name|equals
argument_list|(
name|token
argument_list|)
condition|)
block|{
name|pMonth
operator|=
name|i
expr_stmt|;
name|pWeek
operator|=
name|m
operator|.
name|getWeeks
argument_list|()
operator|.
name|indexOf
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|wk
operator|=
literal|true
expr_stmt|;
continue|continue
name|tokens
continue|;
block|}
block|}
block|}
block|}
comment|// Is it a day?
if|if
condition|(
name|pMonth
operator|>=
literal|0
operator|&&
operator|(
name|pWeek
operator|<
literal|0
operator|||
name|pDow
operator|<
literal|0
operator|)
operator|&&
name|number
operator|!=
literal|null
condition|)
block|{
name|SingleMonth
name|m
init|=
operator|(
name|SingleMonth
operator|)
name|getWidget
argument_list|(
literal|1
operator|+
name|pMonth
argument_list|)
decl_stmt|;
name|int
index|[]
name|first
init|=
literal|null
decl_stmt|,
name|last
init|=
literal|null
decl_stmt|;
for|for
control|(
name|D
name|d
range|:
name|m
operator|.
name|getDays
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|d
operator|.
name|isEnabled
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|first
operator|==
literal|null
condition|)
name|first
operator|=
operator|new
name|int
index|[]
block|{
name|d
operator|.
name|getNumber
argument_list|()
block|,
name|d
operator|.
name|getDow
argument_list|()
block|,
name|d
operator|.
name|getWeek
argument_list|()
block|}
expr_stmt|;
name|last
operator|=
operator|new
name|int
index|[]
block|{
name|d
operator|.
name|getNumber
argument_list|()
block|,
name|d
operator|.
name|getDow
argument_list|()
block|,
name|d
operator|.
name|getWeek
argument_list|()
block|}
expr_stmt|;
if|if
condition|(
name|d
operator|.
name|getNumber
argument_list|()
operator|+
literal|1
operator|==
name|number
condition|)
block|{
name|pWeek
operator|=
name|d
operator|.
name|getWeek
argument_list|()
expr_stmt|;
name|pDow
operator|=
name|d
operator|.
name|getDow
argument_list|()
expr_stmt|;
continue|continue
name|tokens
continue|;
block|}
block|}
if|if
condition|(
name|first
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|number
operator|<
name|first
index|[
literal|0
index|]
condition|)
block|{
name|pDow
operator|=
name|first
index|[
literal|2
index|]
expr_stmt|;
name|pWeek
operator|=
name|first
index|[
literal|3
index|]
expr_stmt|;
block|}
else|else
block|{
name|pDow
operator|=
name|last
index|[
literal|2
index|]
expr_stmt|;
name|pWeek
operator|=
name|last
index|[
literal|3
index|]
expr_stmt|;
block|}
continue|continue
name|tokens
continue|;
block|}
block|}
comment|// Is it a count?
if|if
condition|(
name|number
operator|!=
literal|null
operator|&&
name|number
operator|>=
literal|1
condition|)
block|{
name|dCnt
operator|=
name|number
expr_stmt|;
continue|continue
name|tokens
continue|;
block|}
if|else if
condition|(
name|token
operator|.
name|length
argument_list|()
operator|>=
literal|2
condition|)
block|{
try|try
block|{
name|char
name|last
init|=
name|token
operator|.
name|charAt
argument_list|(
name|token
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|number
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|token
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|token
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|number
operator|>=
literal|1
condition|)
block|{
switch|switch
condition|(
name|last
condition|)
block|{
case|case
literal|'x'
case|:
name|dCnt
operator|=
name|number
expr_stmt|;
continue|continue
name|tokens
continue|;
case|case
literal|'w'
case|:
name|dCnt
operator|=
name|number
expr_stmt|;
name|wk
operator|=
literal|true
expr_stmt|;
continue|continue
name|tokens
continue|;
case|case
literal|'d'
case|:
name|dCnt
operator|=
name|number
expr_stmt|;
name|wk
operator|=
literal|false
expr_stmt|;
continue|continue
name|tokens
continue|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
block|}
block|}
name|boolean
name|cursor
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|pMonth
operator|>=
literal|0
condition|)
block|{
name|setCursor
argument_list|(
name|pMonth
argument_list|,
name|pDow
argument_list|,
name|pWeek
argument_list|)
expr_stmt|;
name|cursor
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|pDow
operator|>=
literal|0
operator|&&
name|iMonth
operator|>=
literal|0
condition|)
block|{
name|setCursor
argument_list|(
name|iMonth
argument_list|,
name|pDow
argument_list|,
name|pWeek
argument_list|)
expr_stmt|;
name|cursor
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|select
operator|&&
name|cursor
condition|)
block|{
if|if
condition|(
name|dCnt
operator|<
literal|0
condition|)
name|select
argument_list|()
expr_stmt|;
if|else if
condition|(
name|dCnt
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|D
argument_list|>
name|days
init|=
operator|new
name|ArrayList
argument_list|<
name|D
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|match
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|iMonth
init|;
name|i
operator|<
name|getWidgetCount
argument_list|()
operator|-
literal|2
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|getWidget
argument_list|(
literal|1
operator|+
name|i
argument_list|)
operator|instanceof
name|SingleMonth
condition|)
block|{
name|SingleMonth
name|m
init|=
operator|(
name|SingleMonth
operator|)
name|getWidget
argument_list|(
literal|1
operator|+
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|D
name|d
range|:
name|m
operator|.
name|getDays
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|match
operator|&&
operator|(
name|iDow
operator|<
literal|0
operator|||
name|d
operator|.
name|getDow
argument_list|()
operator|==
name|iDow
operator|)
operator|&&
operator|(
name|iWeek
operator|<
literal|0
operator|||
name|d
operator|.
name|getWeek
argument_list|()
operator|==
name|iWeek
operator|)
condition|)
block|{
name|match
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|match
operator|&&
name|d
operator|.
name|isEnabled
argument_list|()
operator|&&
name|dCnt
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|wk
operator|&&
name|d
operator|.
name|getDow
argument_list|()
operator|!=
name|iDow
condition|)
continue|continue;
name|days
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|dCnt
operator|--
expr_stmt|;
block|}
block|}
block|}
block|}
name|select
argument_list|(
name|days
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|cursor
return|;
block|}
annotation|@
name|Override
specifier|public
name|HandlerRegistration
name|addFocusHandler
parameter_list|(
name|FocusHandler
name|handler
parameter_list|)
block|{
return|return
name|iText
operator|.
name|addFocusHandler
argument_list|(
name|handler
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|HandlerRegistration
name|addBlurHandler
parameter_list|(
name|BlurHandler
name|handler
parameter_list|)
block|{
return|return
name|iText
operator|.
name|addBlurHandler
argument_list|(
name|handler
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTabIndex
parameter_list|()
block|{
return|return
name|iText
operator|.
name|getTabIndex
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setAccessKey
parameter_list|(
name|char
name|key
parameter_list|)
block|{
name|iText
operator|.
name|setAccessKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setFocus
parameter_list|(
name|boolean
name|focused
parameter_list|)
block|{
name|iText
operator|.
name|setFocus
argument_list|(
name|focused
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setTabIndex
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|iText
operator|.
name|setTabIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTabIndex
parameter_list|()
block|{
return|return
name|iPanel
operator|.
name|getWidget
argument_list|()
operator|.
name|getTabIndex
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setAccessKey
parameter_list|(
name|char
name|key
parameter_list|)
block|{
name|iPanel
operator|.
name|getWidget
argument_list|()
operator|.
name|setAccessKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setFocus
parameter_list|(
name|boolean
name|focused
parameter_list|)
block|{
name|iPanel
operator|.
name|getWidget
argument_list|()
operator|.
name|setFocus
argument_list|(
name|focused
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setTabIndex
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|iPanel
operator|.
name|getWidget
argument_list|()
operator|.
name|setTabIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

