begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.4 (University Timetabling Application)  * Copyright (C) 2012, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|events
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcImplementedBy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcResponseList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AcademicSessionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AcademicSessionProvider
operator|.
name|AcademicSessionChangeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AcademicSessionProvider
operator|.
name|AcademicSessionChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
operator|.
name|ScheduledCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|shared
operator|.
name|HandlerRegistration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|DateTimeFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DOM
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|IsSerializable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|AbsolutePanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_class
specifier|public
class|class
name|SessionDatesSelector
extends|extends
name|Composite
implements|implements
name|HasValue
argument_list|<
name|List
argument_list|<
name|Date
argument_list|>
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|GwtConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|GwtRpcServiceAsync
name|RPC
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtRpcService
operator|.
name|class
argument_list|)
decl_stmt|;
name|AcademicSessionProvider
name|iAcademicSession
decl_stmt|;
name|UniTimeWidget
argument_list|<
name|AbsolutePanel
argument_list|>
name|iPanel
decl_stmt|;
specifier|private
name|int
name|iSessionYear
init|=
literal|1900
decl_stmt|;
specifier|public
name|SessionDatesSelector
parameter_list|(
name|AcademicSessionProvider
name|session
parameter_list|)
block|{
name|iAcademicSession
operator|=
name|session
expr_stmt|;
name|iPanel
operator|=
operator|new
name|UniTimeWidget
argument_list|<
name|AbsolutePanel
argument_list|>
argument_list|(
operator|new
name|AbsolutePanel
argument_list|()
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|getWidget
argument_list|()
operator|.
name|setStyleName
argument_list|(
literal|"unitime-DateSelector"
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|iPanel
argument_list|)
expr_stmt|;
name|iAcademicSession
operator|.
name|addAcademicSessionChangeHandler
argument_list|(
operator|new
name|AcademicSessionChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onAcademicSessionChange
parameter_list|(
name|AcademicSessionChangeEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|isChanged
argument_list|()
condition|)
name|init
argument_list|(
name|event
operator|.
name|getNewAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|init
argument_list|(
name|iAcademicSession
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
block|{
name|iPanel
operator|.
name|setHint
argument_list|(
name|MESSAGES
operator|.
name|hintNoSession
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iPanel
operator|.
name|setHint
argument_list|(
name|MESSAGES
operator|.
name|waitLoadingData
argument_list|(
name|iAcademicSession
operator|.
name|getAcademicSessionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
operator|new
name|RequestSessionDetails
argument_list|(
name|sessionId
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|GwtRpcResponseList
argument_list|<
name|SessionMonth
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iPanel
operator|.
name|setErrorHint
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|GwtRpcResponseList
argument_list|<
name|SessionMonth
argument_list|>
name|result
parameter_list|)
block|{
name|iPanel
operator|.
name|clearHint
argument_list|()
expr_stmt|;
name|init
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|init
parameter_list|(
name|List
argument_list|<
name|SessionMonth
argument_list|>
name|months
parameter_list|)
block|{
name|iPanel
operator|.
name|getWidget
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|int
name|firstOutside
init|=
operator|-
literal|1
decl_stmt|,
name|start
init|=
operator|-
literal|1
decl_stmt|,
name|end
init|=
operator|-
literal|1
decl_stmt|,
name|exam
init|=
operator|-
literal|1
decl_stmt|,
name|firstHoliday
init|=
operator|-
literal|1
decl_stmt|,
name|firstBreak
init|=
operator|-
literal|1
decl_stmt|,
name|today
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|SessionMonth
name|month
range|:
name|months
control|)
block|{
name|iPanel
operator|.
name|getWidget
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|SingleMonth
argument_list|(
name|month
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|start
operator|<
literal|0
condition|)
name|start
operator|=
name|month
operator|.
name|getFirst
argument_list|(
name|SessionMonth
operator|.
name|Flag
operator|.
name|START
argument_list|)
expr_stmt|;
if|if
condition|(
name|end
operator|<
literal|0
condition|)
name|end
operator|=
name|month
operator|.
name|getFirst
argument_list|(
name|SessionMonth
operator|.
name|Flag
operator|.
name|END
argument_list|)
expr_stmt|;
if|if
condition|(
name|exam
operator|<
literal|0
condition|)
name|exam
operator|=
name|month
operator|.
name|getFirst
argument_list|(
name|SessionMonth
operator|.
name|Flag
operator|.
name|EXAM_START
argument_list|)
expr_stmt|;
if|if
condition|(
name|firstHoliday
operator|<
literal|0
condition|)
name|firstHoliday
operator|=
name|month
operator|.
name|getFirst
argument_list|(
name|SessionMonth
operator|.
name|Flag
operator|.
name|HOLIDAY
argument_list|)
expr_stmt|;
if|if
condition|(
name|firstBreak
operator|<
literal|0
condition|)
name|firstBreak
operator|=
name|month
operator|.
name|getFirst
argument_list|(
name|SessionMonth
operator|.
name|Flag
operator|.
name|BREAK
argument_list|)
expr_stmt|;
if|if
condition|(
name|firstOutside
operator|<
literal|0
condition|)
name|firstOutside
operator|=
name|month
operator|.
name|getFirst
argument_list|(
name|SessionMonth
operator|.
name|Flag
operator|.
name|DISABLED
argument_list|)
expr_stmt|;
if|if
condition|(
name|month
operator|.
name|getYear
argument_list|()
operator|==
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"yyyy"
argument_list|)
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
operator|&&
name|month
operator|.
name|getMonth
argument_list|()
operator|+
literal|1
operator|==
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"MM"
argument_list|)
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
condition|)
name|today
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"dd"
argument_list|)
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|month
operator|.
name|getFirst
argument_list|(
name|SessionMonth
operator|.
name|Flag
operator|.
name|START
argument_list|)
operator|>=
literal|0
condition|)
name|iSessionYear
operator|=
name|month
operator|.
name|getYear
argument_list|()
expr_stmt|;
block|}
name|iPanel
operator|.
name|getWidget
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Legend
argument_list|(
name|firstOutside
argument_list|,
name|start
argument_list|,
name|exam
argument_list|,
name|firstHoliday
argument_list|,
name|firstBreak
argument_list|,
name|today
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|SessionMonth
implements|implements
name|IsSerializable
block|{
specifier|public
specifier|static
enum|enum
name|Flag
implements|implements
name|IsSerializable
block|{
name|START
block|,
name|END
block|,
name|EXAM_START
block|,
name|VACATION
block|,
name|HOLIDAY
block|,
name|BREAK
block|,
name|SELECTED
block|,
name|DISABLED
block|;
specifier|public
name|int
name|flag
parameter_list|()
block|{
return|return
literal|1
operator|<<
name|ordinal
argument_list|()
return|;
block|}
block|}
specifier|private
name|int
name|iYear
decl_stmt|,
name|iMonth
decl_stmt|;
specifier|private
name|int
index|[]
name|iDays
decl_stmt|;
specifier|public
name|SessionMonth
parameter_list|()
block|{
block|}
specifier|public
name|SessionMonth
parameter_list|(
name|int
name|year
parameter_list|,
name|int
name|month
parameter_list|)
block|{
name|iYear
operator|=
name|year
expr_stmt|;
name|iMonth
operator|=
name|month
expr_stmt|;
name|iDays
operator|=
operator|new
name|int
index|[
literal|31
index|]
expr_stmt|;
block|}
specifier|public
name|int
name|getYear
parameter_list|()
block|{
return|return
name|iYear
return|;
block|}
specifier|public
name|int
name|getMonth
parameter_list|()
block|{
return|return
name|iMonth
return|;
block|}
specifier|public
name|boolean
name|hasFlag
parameter_list|(
name|int
name|day
parameter_list|,
name|Flag
name|f
parameter_list|)
block|{
return|return
operator|(
name|iDays
index|[
name|day
index|]
operator|&
name|f
operator|.
name|flag
argument_list|()
operator|)
operator|!=
literal|0
return|;
block|}
specifier|public
name|void
name|setFlag
parameter_list|(
name|int
name|day
parameter_list|,
name|Flag
name|f
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hasFlag
argument_list|(
name|day
argument_list|,
name|f
argument_list|)
condition|)
name|iDays
index|[
name|day
index|]
operator|+=
name|f
operator|.
name|flag
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|clearFlag
parameter_list|(
name|int
name|day
parameter_list|,
name|Flag
name|f
parameter_list|)
block|{
if|if
condition|(
name|hasFlag
argument_list|(
name|day
argument_list|,
name|f
argument_list|)
condition|)
name|iDays
index|[
name|day
index|]
operator|-=
name|f
operator|.
name|flag
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|getFlags
parameter_list|(
name|int
name|day
parameter_list|)
block|{
return|return
name|iDays
index|[
name|day
index|]
return|;
block|}
specifier|public
name|int
name|getFirst
parameter_list|(
name|Flag
name|flag
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iDays
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|hasFlag
argument_list|(
name|i
argument_list|,
name|flag
argument_list|)
condition|)
return|return
name|i
return|;
return|return
operator|-
literal|1
return|;
block|}
block|}
annotation|@
name|GwtRpcImplementedBy
argument_list|(
literal|"org.unitime.timetable.events.DateSelectorBackend"
argument_list|)
specifier|public
specifier|static
class|class
name|RequestSessionDetails
implements|implements
name|GwtRpcRequest
argument_list|<
name|GwtRpcResponseList
argument_list|<
name|SessionMonth
argument_list|>
argument_list|>
block|{
specifier|private
name|Long
name|iSessionId
decl_stmt|;
specifier|public
name|RequestSessionDetails
parameter_list|()
block|{
block|}
specifier|public
name|RequestSessionDetails
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
name|iSessionId
operator|=
name|sessionId
expr_stmt|;
block|}
specifier|public
name|Long
name|getSessionId
parameter_list|()
block|{
return|return
name|iSessionId
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getSessionId
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|P
extends|extends
name|AbsolutePanel
block|{
specifier|private
name|String
name|iCaption
decl_stmt|;
specifier|private
name|List
argument_list|<
name|D
argument_list|>
name|iDays
init|=
operator|new
name|ArrayList
argument_list|<
name|D
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|P
parameter_list|(
name|String
name|caption
parameter_list|,
name|String
modifier|...
name|styles
parameter_list|)
block|{
name|iCaption
operator|=
name|caption
expr_stmt|;
if|if
condition|(
name|caption
operator|!=
literal|null
condition|)
name|getElement
argument_list|()
operator|.
name|setInnerHTML
argument_list|(
name|caption
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|style
range|:
name|styles
control|)
if|if
condition|(
name|style
operator|!=
literal|null
operator|&&
operator|!
name|style
operator|.
name|isEmpty
argument_list|()
condition|)
name|addStyleName
argument_list|(
name|style
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEDOWN
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addDay
parameter_list|(
name|D
name|d
parameter_list|)
block|{
name|iDays
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasUnselectedDays
parameter_list|(
name|boolean
name|includeVacations
parameter_list|,
name|boolean
name|includeWeekend
parameter_list|)
block|{
for|for
control|(
name|D
name|d
range|:
name|iDays
control|)
block|{
if|if
condition|(
operator|!
name|d
operator|.
name|isEnabled
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|includeVacations
operator|&&
name|d
operator|.
name|isVacation
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|includeWeekend
operator|&&
name|d
operator|.
name|isWeekend
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|d
operator|.
name|getValue
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|setAllSelected
parameter_list|(
name|boolean
name|selected
parameter_list|,
name|boolean
name|includeVacations
parameter_list|,
name|boolean
name|includeWeekend
parameter_list|)
block|{
for|for
control|(
name|D
name|d
range|:
name|iDays
control|)
block|{
if|if
condition|(
operator|!
name|d
operator|.
name|isEnabled
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|includeVacations
operator|&&
name|d
operator|.
name|isVacation
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|includeWeekend
operator|&&
name|d
operator|.
name|isWeekend
argument_list|()
condition|)
continue|continue;
name|d
operator|.
name|setValue
argument_list|(
name|selected
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onBrowserEvent
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|DOM
operator|.
name|eventGetType
argument_list|(
name|event
argument_list|)
condition|)
block|{
case|case
name|Event
operator|.
name|ONMOUSEDOWN
case|:
if|if
condition|(
name|hasUnselectedDays
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
condition|)
name|setAllSelected
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|else if
condition|(
name|hasUnselectedDays
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
name|setAllSelected
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|else if
condition|(
name|hasUnselectedDays
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
condition|)
name|setAllSelected
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
else|else
name|setAllSelected
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
specifier|public
name|String
name|getCaption
parameter_list|()
block|{
return|return
name|iCaption
return|;
block|}
specifier|public
name|List
argument_list|<
name|D
argument_list|>
name|getDays
parameter_list|()
block|{
return|return
name|iDays
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getCaption
argument_list|()
operator|+
literal|" "
operator|+
name|iDays
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|D
extends|extends
name|AbsolutePanel
implements|implements
name|HasValue
argument_list|<
name|Boolean
argument_list|>
block|{
specifier|private
name|boolean
name|iSelected
init|=
literal|false
decl_stmt|,
name|iEnabled
init|=
literal|true
decl_stmt|;
specifier|private
name|int
name|iFlag
decl_stmt|,
name|iDow
decl_stmt|;
specifier|private
name|int
name|iNumber
decl_stmt|;
specifier|private
name|D
parameter_list|(
name|int
name|number
parameter_list|,
name|int
name|flag
parameter_list|,
name|int
name|dow
parameter_list|,
name|boolean
name|selected
parameter_list|,
name|String
modifier|...
name|styles
parameter_list|)
block|{
name|iNumber
operator|=
name|number
expr_stmt|;
name|iFlag
operator|=
name|flag
expr_stmt|;
name|iDow
operator|=
name|dow
expr_stmt|;
name|iSelected
operator|=
name|selected
expr_stmt|;
name|getElement
argument_list|()
operator|.
name|setInnerHTML
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
literal|1
operator|+
name|number
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|style
range|:
name|styles
control|)
if|if
condition|(
name|style
operator|!=
literal|null
operator|&&
operator|!
name|style
operator|.
name|isEmpty
argument_list|()
condition|)
name|addStyleName
argument_list|(
name|style
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSelected
condition|)
name|addStyleName
argument_list|(
literal|"selected"
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEDOWN
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isEnabled
parameter_list|()
block|{
return|return
name|iEnabled
return|;
block|}
specifier|public
name|void
name|setEnabled
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
if|if
condition|(
name|iEnabled
operator|==
name|enabled
condition|)
return|return;
name|iEnabled
operator|=
name|enabled
expr_stmt|;
if|if
condition|(
name|iEnabled
condition|)
block|{
name|addStyleName
argument_list|(
literal|"clickable"
argument_list|)
expr_stmt|;
name|removeStyleName
argument_list|(
literal|"disabled"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|removeStyleName
argument_list|(
literal|"clickable"
argument_list|)
expr_stmt|;
name|addStyleName
argument_list|(
literal|"disabled"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|hasFlag
parameter_list|(
name|SessionMonth
operator|.
name|Flag
name|flag
parameter_list|)
block|{
return|return
operator|(
name|iFlag
operator|&
name|flag
operator|.
name|flag
argument_list|()
operator|)
operator|!=
literal|0
return|;
block|}
specifier|public
name|boolean
name|isVacation
parameter_list|()
block|{
return|return
name|hasFlag
argument_list|(
name|SessionMonth
operator|.
name|Flag
operator|.
name|BREAK
argument_list|)
operator|||
name|hasFlag
argument_list|(
name|SessionMonth
operator|.
name|Flag
operator|.
name|HOLIDAY
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isWeekend
parameter_list|()
block|{
return|return
name|iDow
operator|>=
literal|5
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onBrowserEvent
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|DOM
operator|.
name|eventGetType
argument_list|(
name|event
argument_list|)
condition|)
block|{
case|case
name|Event
operator|.
name|ONMOUSEDOWN
case|:
if|if
condition|(
name|isEnabled
argument_list|()
condition|)
name|setValue
argument_list|(
operator|!
name|getValue
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
specifier|public
name|int
name|getNumber
parameter_list|()
block|{
return|return
name|iNumber
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|valueOf
argument_list|(
literal|1
operator|+
name|getNumber
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|HandlerRegistration
name|addValueChangeHandler
parameter_list|(
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
name|handler
parameter_list|)
block|{
return|return
name|addHandler
argument_list|(
name|handler
argument_list|,
name|ValueChangeEvent
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|getValue
parameter_list|()
block|{
return|return
name|iSelected
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|Boolean
name|value
parameter_list|)
block|{
name|setValue
argument_list|(
name|value
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|Boolean
name|value
parameter_list|,
name|boolean
name|fireEvents
parameter_list|)
block|{
if|if
condition|(
name|iSelected
operator|==
name|value
operator|||
name|value
operator|==
literal|null
condition|)
return|return;
name|iSelected
operator|=
name|value
expr_stmt|;
if|if
condition|(
name|iSelected
condition|)
name|addStyleName
argument_list|(
literal|"selected"
argument_list|)
expr_stmt|;
else|else
name|removeStyleName
argument_list|(
literal|"selected"
argument_list|)
expr_stmt|;
if|if
condition|(
name|fireEvents
condition|)
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|this
argument_list|,
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|SingleMonth
extends|extends
name|AbsolutePanel
block|{
specifier|private
name|SessionMonth
name|iSessionMonth
decl_stmt|;
specifier|private
name|List
argument_list|<
name|D
argument_list|>
name|iDays
init|=
operator|new
name|ArrayList
argument_list|<
name|D
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|P
index|[]
name|iWeekDays
init|=
operator|new
name|P
index|[
literal|7
index|]
decl_stmt|;
specifier|private
name|List
argument_list|<
name|P
argument_list|>
name|iWeeks
init|=
operator|new
name|ArrayList
argument_list|<
name|P
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|SingleMonth
parameter_list|(
name|SessionMonth
name|month
parameter_list|)
block|{
name|iSessionMonth
operator|=
name|month
expr_stmt|;
name|addStyleName
argument_list|(
literal|"month"
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|P
argument_list|(
name|SingleDateSelector
operator|.
name|monthName
argument_list|(
name|iSessionMonth
operator|.
name|getYear
argument_list|()
argument_list|,
name|iSessionMonth
operator|.
name|getMonth
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|,
literal|"label"
argument_list|)
argument_list|)
expr_stmt|;
name|P
name|box
init|=
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"box"
argument_list|)
decl_stmt|;
name|add
argument_list|(
name|box
argument_list|)
expr_stmt|;
name|P
name|header
init|=
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"row"
argument_list|)
decl_stmt|;
name|box
operator|.
name|add
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|P
name|corner
init|=
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"cell"
argument_list|,
literal|"corner"
argument_list|,
literal|"clickable"
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|corner
argument_list|)
expr_stmt|;
name|int
name|firstDayOfWeek
init|=
name|SingleDateSelector
operator|.
name|firstDayOfWeek
argument_list|(
name|iSessionMonth
operator|.
name|getYear
argument_list|()
argument_list|,
name|iSessionMonth
operator|.
name|getMonth
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|int
name|weekNumber
init|=
name|SingleDateSelector
operator|.
name|weekNumber
argument_list|(
name|iSessionMonth
operator|.
name|getYear
argument_list|()
argument_list|,
name|iSessionMonth
operator|.
name|getMonth
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|int
name|nrDays
init|=
name|SingleDateSelector
operator|.
name|daysInMonth
argument_list|(
name|iSessionMonth
operator|.
name|getYear
argument_list|()
argument_list|,
name|iSessionMonth
operator|.
name|getMonth
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|int
name|startDayOfWeek
init|=
name|SingleDateSelector
operator|.
name|startingDayOfWeek
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|7
condition|;
name|i
operator|++
control|)
block|{
name|iWeekDays
index|[
name|i
index|]
operator|=
operator|new
name|P
argument_list|(
name|CONSTANTS
operator|.
name|days
argument_list|()
index|[
operator|(
name|i
operator|+
name|startDayOfWeek
operator|)
operator|%
literal|7
index|]
argument_list|,
literal|"cell"
argument_list|,
literal|"dow"
argument_list|,
literal|"clickable"
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|iWeekDays
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|P
name|line
init|=
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"row"
argument_list|)
decl_stmt|;
name|box
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|P
name|week
init|=
operator|new
name|P
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|weekNumber
operator|++
argument_list|)
argument_list|,
literal|"cell"
argument_list|,
literal|"week"
argument_list|,
literal|"clickable"
argument_list|)
decl_stmt|;
name|line
operator|.
name|add
argument_list|(
name|week
argument_list|)
expr_stmt|;
name|iWeeks
operator|.
name|add
argument_list|(
name|week
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|int
name|blanks
init|=
operator|(
name|firstDayOfWeek
operator|+
literal|7
operator|-
name|startDayOfWeek
operator|)
operator|%
literal|7
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blanks
condition|;
name|i
operator|++
control|)
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"cell"
argument_list|,
operator|(
name|i
operator|+
literal|1
operator|==
name|blanks
condition|?
literal|"last-blank"
else|:
literal|"blank"
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
name|int
name|today
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|month
operator|.
name|getYear
argument_list|()
operator|==
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"yyyy"
argument_list|)
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
operator|&&
name|month
operator|.
name|getMonth
argument_list|()
operator|+
literal|1
operator|==
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"MM"
argument_list|)
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
condition|)
name|today
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"dd"
argument_list|)
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
operator|-
literal|1
expr_stmt|;
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
name|onChange
init|=
operator|new
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|event
parameter_list|)
block|{
name|fireDaySelected
argument_list|(
operator|(
operator|(
name|D
operator|)
name|event
operator|.
name|getSource
argument_list|()
operator|)
operator|.
name|getNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nrDays
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
operator|&&
name|idx
operator|%
literal|7
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|idx
operator|==
literal|7
operator|&&
name|iSessionMonth
operator|.
name|getMonth
argument_list|()
operator|==
literal|0
operator|&&
name|weekNumber
operator|>
literal|50
condition|)
name|weekNumber
operator|=
literal|1
expr_stmt|;
name|line
operator|=
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"row"
argument_list|)
expr_stmt|;
name|box
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|week
operator|=
operator|new
name|P
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|weekNumber
operator|++
argument_list|)
argument_list|,
literal|"cell"
argument_list|,
literal|"week"
argument_list|,
literal|"clickable"
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|week
argument_list|)
expr_stmt|;
name|iWeeks
operator|.
name|add
argument_list|(
name|week
argument_list|)
expr_stmt|;
block|}
name|D
name|d
init|=
operator|new
name|D
argument_list|(
name|i
argument_list|,
name|iSessionMonth
operator|.
name|getFlags
argument_list|(
name|i
argument_list|)
argument_list|,
operator|(
name|idx
operator|+
name|startDayOfWeek
operator|)
operator|%
literal|7
argument_list|,
literal|false
argument_list|,
literal|"cell"
argument_list|,
operator|(
operator|(
operator|(
name|idx
operator|+
name|startDayOfWeek
operator|)
operator|%
literal|7
operator|)
operator|<
literal|5
condition|?
literal|"day"
else|:
literal|"weekend"
operator|)
argument_list|,
literal|"clickable"
argument_list|)
decl_stmt|;
name|line
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|d
operator|.
name|addValueChangeHandler
argument_list|(
name|onChange
argument_list|)
expr_stmt|;
name|corner
operator|.
name|addDay
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|iWeekDays
index|[
name|idx
operator|%
literal|7
index|]
operator|.
name|addDay
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|week
operator|.
name|addDay
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|iDays
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
if|if
condition|(
name|today
operator|==
name|i
condition|)
name|d
operator|.
name|addStyleName
argument_list|(
literal|"today"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSessionMonth
operator|.
name|hasFlag
argument_list|(
name|i
argument_list|,
name|SessionMonth
operator|.
name|Flag
operator|.
name|START
argument_list|)
condition|)
name|d
operator|.
name|addStyleName
argument_list|(
literal|"start"
argument_list|)
expr_stmt|;
if|else if
condition|(
name|iSessionMonth
operator|.
name|hasFlag
argument_list|(
name|i
argument_list|,
name|SessionMonth
operator|.
name|Flag
operator|.
name|END
argument_list|)
condition|)
name|d
operator|.
name|addStyleName
argument_list|(
literal|"start"
argument_list|)
expr_stmt|;
if|else if
condition|(
name|iSessionMonth
operator|.
name|hasFlag
argument_list|(
name|i
argument_list|,
name|SessionMonth
operator|.
name|Flag
operator|.
name|EXAM_START
argument_list|)
condition|)
name|d
operator|.
name|addStyleName
argument_list|(
literal|"exam"
argument_list|)
expr_stmt|;
if|else if
condition|(
name|iSessionMonth
operator|.
name|hasFlag
argument_list|(
name|i
argument_list|,
name|SessionMonth
operator|.
name|Flag
operator|.
name|HOLIDAY
argument_list|)
condition|)
name|d
operator|.
name|addStyleName
argument_list|(
literal|"holiday"
argument_list|)
expr_stmt|;
if|else if
condition|(
name|iSessionMonth
operator|.
name|hasFlag
argument_list|(
name|i
argument_list|,
name|SessionMonth
operator|.
name|Flag
operator|.
name|BREAK
argument_list|)
condition|)
name|d
operator|.
name|addStyleName
argument_list|(
literal|"break"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSessionMonth
operator|.
name|hasFlag
argument_list|(
name|i
argument_list|,
name|SessionMonth
operator|.
name|Flag
operator|.
name|SELECTED
argument_list|)
condition|)
name|d
operator|.
name|setValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSessionMonth
operator|.
name|hasFlag
argument_list|(
name|i
argument_list|,
name|SessionMonth
operator|.
name|Flag
operator|.
name|DISABLED
argument_list|)
condition|)
name|d
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|D
name|get
parameter_list|(
name|int
name|day
parameter_list|)
block|{
return|return
name|iDays
operator|.
name|get
argument_list|(
name|day
argument_list|)
return|;
block|}
specifier|protected
name|void
name|fireDaySelected
parameter_list|(
name|int
name|day
parameter_list|)
block|{
block|}
specifier|public
name|List
argument_list|<
name|P
argument_list|>
name|getWeeks
parameter_list|()
block|{
return|return
name|iWeeks
return|;
block|}
specifier|public
name|P
name|getDays
parameter_list|(
name|int
name|dayOfWeek
parameter_list|)
block|{
return|return
name|iWeekDays
index|[
name|dayOfWeek
index|]
return|;
block|}
specifier|public
name|List
argument_list|<
name|D
argument_list|>
name|getDays
parameter_list|()
block|{
return|return
name|iDays
return|;
block|}
specifier|public
name|int
name|getYear
parameter_list|()
block|{
return|return
name|iSessionMonth
operator|.
name|getYear
argument_list|()
return|;
block|}
specifier|public
name|int
name|getMonth
parameter_list|()
block|{
return|return
name|iSessionMonth
operator|.
name|getMonth
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|Legend
extends|extends
name|AbsolutePanel
block|{
specifier|public
name|Legend
parameter_list|(
name|int
name|firstOutside
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|exam
parameter_list|,
name|int
name|firstHoliday
parameter_list|,
name|int
name|firstBreak
parameter_list|,
name|int
name|today
parameter_list|)
block|{
name|addStyleName
argument_list|(
literal|"legend"
argument_list|)
expr_stmt|;
name|P
name|box
init|=
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"box"
argument_list|)
decl_stmt|;
name|add
argument_list|(
name|box
argument_list|)
expr_stmt|;
name|P
name|line
init|=
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"row"
argument_list|)
decl_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"cell"
argument_list|,
literal|"selected"
argument_list|,
literal|"first"
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
name|MESSAGES
operator|.
name|legendSelected
argument_list|()
argument_list|,
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|line
operator|=
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"row"
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"cell"
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
name|MESSAGES
operator|.
name|legendNotSelected
argument_list|()
argument_list|,
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
if|if
condition|(
name|firstOutside
operator|>=
literal|0
condition|)
block|{
name|line
operator|=
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"row"
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|firstOutside
operator|+
literal|1
argument_list|)
argument_list|,
literal|"cell"
argument_list|,
literal|"disabled"
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
name|MESSAGES
operator|.
name|legendNotInSession
argument_list|()
argument_list|,
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|start
operator|>=
literal|0
condition|)
block|{
name|line
operator|=
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"row"
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|start
operator|+
literal|1
argument_list|)
argument_list|,
literal|"cell"
argument_list|,
literal|"start"
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
name|MESSAGES
operator|.
name|legendClassesStartOrEnd
argument_list|()
argument_list|,
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|exam
operator|>=
literal|0
condition|)
block|{
name|line
operator|=
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"row"
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|exam
operator|+
literal|1
argument_list|)
argument_list|,
literal|"cell"
argument_list|,
literal|"exam"
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
name|MESSAGES
operator|.
name|legendExamStart
argument_list|()
argument_list|,
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|firstHoliday
operator|>=
literal|0
condition|)
block|{
name|line
operator|=
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"row"
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|firstHoliday
operator|+
literal|1
argument_list|)
argument_list|,
literal|"cell"
argument_list|,
literal|"holiday"
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
name|MESSAGES
operator|.
name|legendHoliday
argument_list|()
argument_list|,
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|firstBreak
operator|>=
literal|0
condition|)
block|{
name|line
operator|=
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"row"
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|firstBreak
operator|+
literal|1
argument_list|)
argument_list|,
literal|"cell"
argument_list|,
literal|"break"
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
name|MESSAGES
operator|.
name|legendBreak
argument_list|()
argument_list|,
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|today
operator|>=
literal|1
condition|)
block|{
name|line
operator|=
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"row"
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|today
argument_list|)
argument_list|,
literal|"cell"
argument_list|,
literal|"today"
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
name|MESSAGES
operator|.
name|legendToday
argument_list|()
argument_list|,
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|HandlerRegistration
name|addValueChangeHandler
parameter_list|(
name|ValueChangeHandler
argument_list|<
name|List
argument_list|<
name|Date
argument_list|>
argument_list|>
name|handler
parameter_list|)
block|{
return|return
name|addHandler
argument_list|(
name|handler
argument_list|,
name|ValueChangeEvent
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|int
name|dayOfYear
parameter_list|(
name|int
name|year
parameter_list|,
name|int
name|month
parameter_list|,
name|int
name|day
parameter_list|)
block|{
name|int
name|dayOfYear
init|=
name|SingleDateSelector
operator|.
name|dayOfYear
argument_list|(
name|year
argument_list|,
name|month
argument_list|,
name|day
argument_list|)
decl_stmt|;
if|if
condition|(
name|year
operator|<
name|iSessionYear
condition|)
block|{
name|dayOfYear
operator|-=
name|SingleDateSelector
operator|.
name|dayOfYear
argument_list|(
name|year
argument_list|,
literal|12
argument_list|,
literal|31
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|year
operator|>
name|iSessionYear
condition|)
block|{
name|dayOfYear
operator|+=
name|SingleDateSelector
operator|.
name|dayOfYear
argument_list|(
name|iSessionYear
argument_list|,
literal|12
argument_list|,
literal|31
argument_list|)
expr_stmt|;
block|}
return|return
name|dayOfYear
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Date
argument_list|>
name|getValue
parameter_list|()
block|{
name|List
argument_list|<
name|Date
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|Date
argument_list|>
argument_list|()
decl_stmt|;
name|DateTimeFormat
name|df
init|=
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"yyyy/MM/dd"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iPanel
operator|.
name|getWidget
argument_list|()
operator|.
name|getWidgetCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|iPanel
operator|.
name|getWidget
argument_list|()
operator|.
name|getWidget
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|SingleMonth
condition|)
block|{
name|SingleMonth
name|s
init|=
operator|(
name|SingleMonth
operator|)
name|w
decl_stmt|;
for|for
control|(
name|D
name|d
range|:
name|s
operator|.
name|getDays
argument_list|()
control|)
block|{
if|if
condition|(
name|d
operator|.
name|getValue
argument_list|()
condition|)
name|ret
operator|.
name|add
argument_list|(
name|df
operator|.
name|parse
argument_list|(
name|s
operator|.
name|getYear
argument_list|()
operator|+
literal|"/"
operator|+
operator|(
literal|1
operator|+
name|s
operator|.
name|getMonth
argument_list|()
operator|)
operator|+
literal|"/"
operator|+
operator|(
literal|1
operator|+
name|d
operator|.
name|getNumber
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|int
name|getSelectedDaysCount
parameter_list|()
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iPanel
operator|.
name|getWidget
argument_list|()
operator|.
name|getWidgetCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|iPanel
operator|.
name|getWidget
argument_list|()
operator|.
name|getWidget
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|SingleMonth
condition|)
block|{
name|SingleMonth
name|s
init|=
operator|(
name|SingleMonth
operator|)
name|w
decl_stmt|;
for|for
control|(
name|D
name|d
range|:
name|s
operator|.
name|getDays
argument_list|()
control|)
block|{
if|if
condition|(
name|d
operator|.
name|getValue
argument_list|()
condition|)
name|ret
operator|++
expr_stmt|;
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|List
argument_list|<
name|Integer
argument_list|>
name|getSelectedDays
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iPanel
operator|.
name|getWidget
argument_list|()
operator|.
name|getWidgetCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|iPanel
operator|.
name|getWidget
argument_list|()
operator|.
name|getWidget
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|SingleMonth
condition|)
block|{
name|SingleMonth
name|s
init|=
operator|(
name|SingleMonth
operator|)
name|w
decl_stmt|;
for|for
control|(
name|D
name|d
range|:
name|s
operator|.
name|getDays
argument_list|()
control|)
block|{
if|if
condition|(
name|d
operator|.
name|getValue
argument_list|()
condition|)
name|ret
operator|.
name|add
argument_list|(
name|dayOfYear
argument_list|(
name|s
operator|.
name|getYear
argument_list|()
argument_list|,
literal|1
operator|+
name|s
operator|.
name|getMonth
argument_list|()
argument_list|,
literal|1
operator|+
name|d
operator|.
name|getNumber
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|Date
name|getDate
parameter_list|(
name|int
name|day
parameter_list|)
block|{
return|return
name|SingleDateSelector
operator|.
name|dayOfYear
argument_list|(
name|iSessionYear
argument_list|,
name|day
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|List
argument_list|<
name|Date
argument_list|>
name|value
parameter_list|)
block|{
name|setValue
argument_list|(
name|value
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|List
argument_list|<
name|Date
argument_list|>
name|value
parameter_list|,
name|boolean
name|fireEvents
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iPanel
operator|.
name|getWidget
argument_list|()
operator|.
name|getWidgetCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|iPanel
operator|.
name|getWidget
argument_list|()
operator|.
name|getWidget
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|SingleMonth
condition|)
block|{
name|SingleMonth
name|s
init|=
operator|(
name|SingleMonth
operator|)
name|w
decl_stmt|;
for|for
control|(
name|D
name|d
range|:
name|s
operator|.
name|getDays
argument_list|()
control|)
name|d
operator|.
name|setValue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Date
name|d
range|:
name|value
control|)
block|{
if|if
condition|(
name|s
operator|.
name|getYear
argument_list|()
operator|==
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"yyyy"
argument_list|)
operator|.
name|format
argument_list|(
name|d
argument_list|)
argument_list|)
operator|&&
name|s
operator|.
name|getMonth
argument_list|()
operator|+
literal|1
operator|==
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"MM"
argument_list|)
operator|.
name|format
argument_list|(
name|d
argument_list|)
argument_list|)
condition|)
block|{
name|s
operator|.
name|get
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"dd"
argument_list|)
operator|.
name|format
argument_list|(
name|d
argument_list|)
argument_list|)
operator|-
literal|1
argument_list|)
operator|.
name|setValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|fireEvents
condition|)
block|{
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|this
argument_list|,
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|clearMessage
parameter_list|()
block|{
name|iPanel
operator|.
name|clearHint
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setMessage
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|iPanel
operator|.
name|setHint
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setError
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|iPanel
operator|.
name|setErrorHint
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

