begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.4 (University Timetabling Application)  * Copyright (C) 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|events
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|Components
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|events
operator|.
name|AcademicSessionSelectionBox
operator|.
name|AcademicSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|events
operator|.
name|AcademicSessionSelectionBox
operator|.
name|AcademicSessionFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|events
operator|.
name|AddMeetingsDialog
operator|.
name|SortRoomsBy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|events
operator|.
name|EventAdd
operator|.
name|EventPropertiesProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|events
operator|.
name|EventResourceTimetable
operator|.
name|HistoryToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|events
operator|.
name|EventResourceTimetable
operator|.
name|PageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|events
operator|.
name|StartEndTimeSelector
operator|.
name|StartEndTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|events
operator|.
name|TimeGrid
operator|.
name|MeetingClickEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|events
operator|.
name|TimeGrid
operator|.
name|MeetingClickHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|page
operator|.
name|UniTimeNotifications
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|page
operator|.
name|UniTimePageHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|page
operator|.
name|UniTimePageLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|LoadingWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|SimpleForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|FilterBox
operator|.
name|Chip
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|TimeSelector
operator|.
name|TimeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeHeaderPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcResponseList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AcademicSessionProvider
operator|.
name|AcademicSessionChangeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AcademicSessionProvider
operator|.
name|AcademicSessionChangeHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|ApprovalStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|ContactInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|DateInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|EventDetailRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|EventFilterRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|EventLookupRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|EventPropertiesRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|EventPropertiesRpcResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|FilterRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|FilterRpcResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|MeetingInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|RequestSessionDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|ResourceInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|ResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|SelectionInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|SessionMonth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|WeekInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|SessionMonth
operator|.
name|Flag
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
operator|.
name|ScheduledCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Cursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|DateTimeFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|History
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasVerticalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HorizontalPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|MenuBar
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|MenuItem
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|PopupPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|RootPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|SimplePanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|UIObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|VerticalPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_class
specifier|public
class|class
name|EventRoomAvailability
extends|extends
name|Composite
implements|implements
name|AcademicSessionFilter
implements|,
name|EventPropertiesProvider
block|{
specifier|private
specifier|static
specifier|final
name|GwtConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|GwtRpcServiceAsync
name|RPC
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtRpcService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|DateTimeFormat
name|sDateFormat
init|=
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|eventDateFormatShort
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|HistoryToken
name|iHistoryToken
init|=
literal|null
decl_stmt|;
specifier|private
name|SimplePanel
name|iRootPanel
decl_stmt|;
specifier|private
name|SimpleForm
name|iPanel
decl_stmt|,
name|iFilter
decl_stmt|;
specifier|private
name|UniTimeHeaderPanel
name|iHeader
decl_stmt|,
name|iFooter
decl_stmt|,
name|iFilterHeader
decl_stmt|;
specifier|private
name|AcademicSessionSelectionBox
name|iSession
decl_stmt|;
specifier|private
name|int
name|iSessionRow
decl_stmt|;
specifier|private
name|StartEndTimeSelector
name|iTimes
decl_stmt|;
specifier|private
name|SessionDatesSelector
name|iDates
decl_stmt|;
specifier|private
name|RoomFilterBox
name|iRooms
decl_stmt|;
specifier|private
name|VerticalPanel
name|iTables
decl_stmt|;
specifier|private
name|EventPropertiesRpcResponse
name|iProperties
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iInitialized
init|=
literal|false
decl_stmt|;
specifier|private
name|StartEndTime
name|iSelectedTimes
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Integer
argument_list|>
name|iSelectedDates
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ResourceInterface
argument_list|>
name|iSelectedRooms
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|EventInterface
argument_list|>
name|iData
decl_stmt|;
specifier|private
name|List
argument_list|<
name|SessionMonth
argument_list|>
name|iSessionMonths
init|=
literal|null
decl_stmt|;
specifier|private
name|EventDetail
name|iEventDetail
decl_stmt|;
specifier|private
name|EventAdd
name|iEventAdd
decl_stmt|;
specifier|private
name|MeetingClickHandler
name|iMeetingClickHandler
decl_stmt|;
specifier|public
name|EventRoomAvailability
parameter_list|()
block|{
name|iHistoryToken
operator|=
operator|new
name|HistoryToken
argument_list|(
name|PageType
operator|.
name|Availability
argument_list|)
expr_stmt|;
name|iFilter
operator|=
operator|new
name|SimpleForm
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|iFilter
operator|.
name|removeStyleName
argument_list|(
literal|"unitime-NotPrintableBottomLine"
argument_list|)
expr_stmt|;
name|iFilter
operator|.
name|getColumnFormatter
argument_list|()
operator|.
name|setWidth
argument_list|(
literal|0
argument_list|,
literal|"120px"
argument_list|)
expr_stmt|;
name|iFilterHeader
operator|=
operator|new
name|UniTimeHeaderPanel
argument_list|(
name|MESSAGES
operator|.
name|sectFilter
argument_list|()
argument_list|)
expr_stmt|;
name|iFilterHeader
operator|.
name|addButton
argument_list|(
literal|"add"
argument_list|,
name|MESSAGES
operator|.
name|buttonAddEvent
argument_list|()
argument_list|,
literal|75
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|iEventAdd
operator|.
name|setEvent
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|iEventAdd
operator|.
name|show
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iFilterHeader
operator|.
name|setEnabled
argument_list|(
literal|"add"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iFilter
operator|.
name|addHeaderRow
argument_list|(
name|iFilterHeader
argument_list|)
expr_stmt|;
name|iFilterHeader
operator|.
name|addButton
argument_list|(
literal|"search"
argument_list|,
name|MESSAGES
operator|.
name|buttonSearch
argument_list|()
argument_list|,
literal|75
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|reload
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iSession
operator|=
operator|new
name|AcademicSessionSelectionBox
argument_list|(
name|iHistoryToken
operator|.
name|getParameter
argument_list|(
literal|"term"
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|onInitializationSuccess
parameter_list|(
name|List
argument_list|<
name|AcademicSession
argument_list|>
name|sessions
parameter_list|)
block|{
name|iFilter
operator|.
name|setVisible
argument_list|(
name|sessions
operator|!=
literal|null
operator|&&
operator|!
name|sessions
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
try|try
block|{
operator|(
operator|(
name|UniTimePageHeader
operator|)
name|RootPanel
operator|.
name|get
argument_list|(
name|Components
operator|.
name|header
operator|.
name|id
argument_list|()
argument_list|)
operator|.
name|getWidget
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|hideSessionInfo
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Try one more time in 5 seconds
operator|new
name|Timer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
operator|(
operator|(
name|UniTimePageHeader
operator|)
name|RootPanel
operator|.
name|get
argument_list|(
name|Components
operator|.
name|header
operator|.
name|id
argument_list|()
argument_list|)
operator|.
name|getWidget
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|hideSessionInfo
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
block|}
operator|.
name|schedule
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onInitializationFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|failedLoadSessions
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|caught
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|iSession
operator|.
name|setFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|iSessionRow
operator|=
name|iFilter
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propAcademicSession
argument_list|()
argument_list|,
name|iSession
argument_list|)
expr_stmt|;
name|iDates
operator|=
operator|new
name|SessionDatesSelector
argument_list|(
name|iSession
argument_list|)
expr_stmt|;
name|iDates
operator|.
name|setCanSelectPast
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|setMaxWidth
argument_list|(
name|iDates
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
argument_list|,
name|Math
operator|.
name|round
argument_list|(
literal|0.9
operator|*
name|ToolBox
operator|.
name|getClientWidth
argument_list|()
operator|-
literal|120
argument_list|)
operator|+
literal|"px"
argument_list|)
expr_stmt|;
name|iFilter
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propDates
argument_list|()
argument_list|,
name|iDates
argument_list|)
expr_stmt|;
name|iTimes
operator|=
operator|new
name|StartEndTimeSelector
argument_list|()
expr_stmt|;
name|iTimes
operator|.
name|setDiff
argument_list|(
literal|12
argument_list|)
expr_stmt|;
name|iFilter
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propTimes
argument_list|()
argument_list|,
name|iTimes
argument_list|)
expr_stmt|;
name|iRooms
operator|=
operator|new
name|RoomFilterBox
argument_list|(
name|iSession
argument_list|)
expr_stmt|;
name|iFilter
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propLocations
argument_list|()
argument_list|,
name|iRooms
argument_list|)
expr_stmt|;
name|iPanel
operator|=
operator|new
name|SimpleForm
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|removeStyleName
argument_list|(
literal|"unitime-NotPrintableBottomLine"
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|addRow
argument_list|(
name|iFilter
argument_list|)
expr_stmt|;
name|iHeader
operator|=
operator|new
name|UniTimeHeaderPanel
argument_list|()
expr_stmt|;
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"add"
argument_list|,
name|MESSAGES
operator|.
name|buttonAddEvent
argument_list|()
argument_list|,
literal|75
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|iEventAdd
operator|.
name|setEvent
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|iEventAdd
operator|.
name|show
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"add"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"sort"
argument_list|,
name|MESSAGES
operator|.
name|buttonSortBy
argument_list|()
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
specifier|final
name|PopupPanel
name|popup
init|=
operator|new
name|PopupPanel
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|MenuBar
name|menu
init|=
operator|new
name|MenuBar
argument_list|(
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|SortRoomsBy
name|sortBy
range|:
name|SortRoomsBy
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|sortBy
operator|==
name|SortRoomsBy
operator|.
name|DISTANCE
operator|&&
operator|!
name|iRooms
operator|.
name|hasChip
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"flag"
argument_list|,
literal|"Nearby"
argument_list|)
argument_list|)
condition|)
continue|continue;
name|MenuItem
name|item
init|=
operator|new
name|MenuItem
argument_list|(
operator|(
name|sortBy
operator|.
name|ordinal
argument_list|()
operator|==
name|EventCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getRoomsSortBy
argument_list|()
condition|?
literal|"&uarr; "
else|:
operator|(
name|sortBy
operator|.
name|ordinal
argument_list|()
operator|+
name|SortRoomsBy
operator|.
name|values
argument_list|()
operator|.
name|length
operator|==
name|EventCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getRoomsSortBy
argument_list|()
operator|)
condition|?
literal|"&darr; "
else|:
literal|""
operator|)
operator|+
name|AddMeetingsDialog
operator|.
name|getSortRoomsByName
argument_list|(
name|sortBy
argument_list|)
argument_list|,
literal|true
argument_list|,
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|popup
operator|.
name|hide
argument_list|()
expr_stmt|;
if|if
condition|(
name|sortBy
operator|.
name|ordinal
argument_list|()
operator|==
name|EventCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getRoomsSortBy
argument_list|()
condition|)
block|{
name|EventCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setSortRoomsBy
argument_list|(
name|SortRoomsBy
operator|.
name|values
argument_list|()
operator|.
name|length
operator|+
name|sortBy
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|EventCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setSortRoomsBy
argument_list|(
name|sortBy
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|populate
argument_list|(
name|iData
argument_list|,
name|EventCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getRoomsSortBy
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|item
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setCursor
argument_list|(
name|Cursor
operator|.
name|POINTER
argument_list|)
expr_stmt|;
name|menu
operator|.
name|addItem
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
name|menu
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|menu
operator|.
name|setFocusOnHoverEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|menu
argument_list|)
expr_stmt|;
name|popup
operator|.
name|showRelativeTo
argument_list|(
operator|(
name|UIObject
operator|)
name|event
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|MenuBar
operator|)
name|popup
operator|.
name|getWidget
argument_list|()
operator|)
operator|.
name|focus
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|addHeaderRow
argument_list|(
name|iHeader
argument_list|)
expr_stmt|;
name|iTables
operator|=
operator|new
name|VerticalPanel
argument_list|()
expr_stmt|;
name|iPanel
operator|.
name|addRow
argument_list|(
name|iTables
argument_list|)
expr_stmt|;
name|iFooter
operator|=
name|iHeader
operator|.
name|clonePanel
argument_list|()
expr_stmt|;
name|iPanel
operator|.
name|addRow
argument_list|(
name|iFooter
argument_list|)
expr_stmt|;
name|iRootPanel
operator|=
operator|new
name|SimplePanel
argument_list|(
name|iPanel
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|iRootPanel
argument_list|)
expr_stmt|;
name|hideResults
argument_list|()
expr_stmt|;
name|iSession
operator|.
name|addAcademicSessionChangeHandler
argument_list|(
operator|new
name|AcademicSessionChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onAcademicSessionChange
parameter_list|(
name|AcademicSessionChangeEvent
name|event
parameter_list|)
block|{
name|loadProperties
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|EventPropertiesRpcResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|EventPropertiesRpcResponse
name|result
parameter_list|)
block|{
if|if
condition|(
operator|!
name|iInitialized
condition|)
name|setup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
else|else
name|reload
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iEventDetail
operator|=
operator|new
name|EventDetail
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|onHide
parameter_list|()
block|{
name|iRootPanel
operator|.
name|setWidget
argument_list|(
name|iPanel
argument_list|)
expr_stmt|;
name|UniTimePageLabel
operator|.
name|getInstance
argument_list|()
operator|.
name|setPageName
argument_list|(
name|MESSAGES
operator|.
name|pageEventRoomAvailability
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isShowingResults
argument_list|()
condition|)
name|reload
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|changeUrl
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onShow
parameter_list|()
block|{
name|iRootPanel
operator|.
name|setWidget
argument_list|(
name|iEventDetail
argument_list|)
expr_stmt|;
name|changeUrl
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|edit
parameter_list|()
block|{
name|hide
argument_list|()
expr_stmt|;
name|iEventAdd
operator|.
name|setEvent
argument_list|(
name|getEvent
argument_list|()
argument_list|)
expr_stmt|;
name|iEventAdd
operator|.
name|show
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|EventInterface
name|getPrevious
parameter_list|(
name|Long
name|eventId
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|protected
name|EventInterface
name|getNext
parameter_list|(
name|Long
name|eventId
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|previous
parameter_list|(
specifier|final
name|EventInterface
name|event
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|execute
argument_list|(
name|EventDetailRpcRequest
operator|.
name|requestEventDetails
argument_list|(
name|iSession
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
name|event
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|EventInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|failedLoad
argument_list|(
name|event
operator|.
name|getName
argument_list|()
argument_list|,
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|EventInterface
name|result
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|setEvent
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|changeUrl
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
name|MESSAGES
operator|.
name|waitLoading
argument_list|(
name|event
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|next
parameter_list|(
specifier|final
name|EventInterface
name|event
parameter_list|)
block|{
name|previous
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|hide
parameter_list|()
block|{
name|super
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onApprovalOrReject
parameter_list|(
name|Long
name|eventId
parameter_list|,
name|EventInterface
name|event
parameter_list|)
block|{
if|if
condition|(
name|iData
operator|!=
literal|null
condition|)
name|populate
argument_list|(
name|tinker
argument_list|(
operator|new
name|GwtRpcResponseList
argument_list|<
name|EventInterface
argument_list|>
argument_list|(
name|iData
argument_list|)
argument_list|,
name|eventId
argument_list|,
name|event
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|iEventAdd
operator|=
operator|new
name|EventAdd
argument_list|(
name|iSession
argument_list|,
name|this
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|onHide
parameter_list|()
block|{
name|iSession
operator|.
name|setFilter
argument_list|(
name|EventRoomAvailability
operator|.
name|this
argument_list|)
expr_stmt|;
name|iFilter
operator|.
name|setWidget
argument_list|(
name|iSessionRow
argument_list|,
literal|1
argument_list|,
name|iSession
argument_list|)
expr_stmt|;
specifier|final
name|EventInterface
name|modified
init|=
name|iEventAdd
operator|.
name|getEvent
argument_list|()
decl_stmt|,
name|detail
init|=
name|iEventDetail
operator|.
name|getEvent
argument_list|()
decl_stmt|,
name|saved
init|=
name|iEventAdd
operator|.
name|getSavedEvent
argument_list|()
decl_stmt|;
if|if
condition|(
name|saved
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|iData
operator|!=
literal|null
condition|)
name|populate
argument_list|(
name|tinker
argument_list|(
operator|new
name|GwtRpcResponseList
argument_list|<
name|EventInterface
argument_list|>
argument_list|(
name|iData
argument_list|)
argument_list|,
operator|(
name|saved
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|?
name|modified
operator|.
name|getId
argument_list|()
else|:
name|saved
operator|.
name|getId
argument_list|()
operator|)
argument_list|,
name|saved
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|saved
operator|.
name|getId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|iEventDetail
operator|.
name|setEvent
argument_list|(
name|saved
argument_list|)
expr_stmt|;
name|iEventDetail
operator|.
name|show
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|iRootPanel
operator|.
name|setWidget
argument_list|(
name|iPanel
argument_list|)
expr_stmt|;
name|UniTimePageLabel
operator|.
name|getInstance
argument_list|()
operator|.
name|setPageName
argument_list|(
name|MESSAGES
operator|.
name|pageEventRoomAvailability
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|modified
operator|!=
literal|null
operator|&&
name|detail
operator|!=
literal|null
operator|&&
name|detail
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|modified
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|LoadingWidget
operator|.
name|execute
argument_list|(
name|EventDetailRpcRequest
operator|.
name|requestEventDetails
argument_list|(
name|iSession
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
name|modified
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|EventInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|failedLoad
argument_list|(
name|detail
operator|.
name|getName
argument_list|()
argument_list|,
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|EventInterface
name|result
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|iEventDetail
operator|.
name|setEvent
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|iEventDetail
operator|.
name|show
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
name|MESSAGES
operator|.
name|waitLoading
argument_list|(
name|detail
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iRootPanel
operator|.
name|setWidget
argument_list|(
name|iPanel
argument_list|)
expr_stmt|;
name|UniTimePageLabel
operator|.
name|getInstance
argument_list|()
operator|.
name|setPageName
argument_list|(
name|MESSAGES
operator|.
name|pageEventRoomAvailability
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|changeUrl
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onShow
parameter_list|()
block|{
name|iRootPanel
operator|.
name|setWidget
argument_list|(
name|iEventAdd
argument_list|)
expr_stmt|;
name|changeUrl
argument_list|()
expr_stmt|;
block|}
block|}
expr_stmt|;
name|iMeetingClickHandler
operator|=
operator|new
name|MeetingClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMeetingClick
parameter_list|(
specifier|final
name|MeetingClickEvent
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|event
operator|.
name|getEvent
argument_list|()
operator|.
name|isCanView
argument_list|()
condition|)
return|return;
name|LoadingWidget
operator|.
name|execute
argument_list|(
name|EventDetailRpcRequest
operator|.
name|requestEventDetails
argument_list|(
name|iSession
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
name|event
operator|.
name|getEvent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|EventInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|failedLoad
argument_list|(
name|event
operator|.
name|getEvent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|EventInterface
name|result
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|iEventDetail
operator|.
name|setEvent
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|iEventDetail
operator|.
name|show
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
name|MESSAGES
operator|.
name|waitLoading
argument_list|(
name|event
operator|.
name|getEvent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|History
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|String
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|iInitialized
condition|)
block|{
name|iHistoryToken
operator|.
name|reset
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|setup
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|isShowing
argument_list|()
condition|)
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Integer
name|getOccupancy
parameter_list|(
name|ResourceInterface
name|room
parameter_list|)
block|{
name|int
name|startSlot
init|=
operator|(
name|iSelectedTimes
operator|.
name|getStart
argument_list|()
operator|==
literal|null
condition|?
literal|90
else|:
name|iSelectedTimes
operator|.
name|getStart
argument_list|()
operator|)
decl_stmt|;
name|int
name|endSlot
init|=
operator|(
name|iSelectedTimes
operator|.
name|getEnd
argument_list|()
operator|==
literal|null
condition|?
literal|210
else|:
name|iSelectedTimes
operator|.
name|getEnd
argument_list|()
operator|)
decl_stmt|;
name|int
name|use
init|=
literal|0
decl_stmt|;
for|for
control|(
name|EventInterface
name|event
range|:
name|iData
control|)
block|{
for|for
control|(
name|MeetingInterface
name|meeting
range|:
name|event
operator|.
name|getMeetings
argument_list|()
control|)
block|{
if|if
condition|(
name|room
operator|.
name|equals
argument_list|(
name|meeting
operator|.
name|getLocation
argument_list|()
argument_list|)
condition|)
block|{
name|int
name|start
init|=
name|Math
operator|.
name|max
argument_list|(
name|startSlot
argument_list|,
name|meeting
operator|.
name|getStartSlot
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|end
init|=
name|Math
operator|.
name|min
argument_list|(
name|endSlot
argument_list|,
name|meeting
operator|.
name|getEndSlot
argument_list|()
argument_list|)
decl_stmt|;
name|use
operator|+=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|end
operator|-
name|start
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|use
return|;
block|}
specifier|private
name|Comparator
argument_list|<
name|ResourceInterface
argument_list|>
name|getSortRoomsComparator
parameter_list|(
name|SortRoomsBy
name|sortBy
parameter_list|,
specifier|final
name|boolean
name|preferSize
parameter_list|)
block|{
switch|switch
condition|(
name|sortBy
condition|)
block|{
case|case
name|CAPACITY
case|:
return|return
operator|new
name|Comparator
argument_list|<
name|ResourceInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ResourceInterface
name|r1
parameter_list|,
name|ResourceInterface
name|r2
parameter_list|)
block|{
name|int
name|cmp
init|=
operator|(
name|r1
operator|.
name|getSize
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
else|:
name|r1
operator|.
name|getSize
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getSize
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
else|:
name|r2
operator|.
name|getSize
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|r1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|cmp
operator|==
literal|0
condition|?
name|r1
operator|.
name|getId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getId
argument_list|()
argument_list|)
else|:
name|cmp
operator|)
return|;
block|}
block|}
return|;
case|case
name|NAME
case|:
return|return
operator|new
name|Comparator
argument_list|<
name|ResourceInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ResourceInterface
name|r1
parameter_list|,
name|ResourceInterface
name|r2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|r1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|cmp
operator|==
literal|0
condition|?
name|r1
operator|.
name|getId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getId
argument_list|()
argument_list|)
else|:
name|cmp
operator|)
return|;
block|}
block|}
return|;
case|case
name|DISTANCE
case|:
return|return
operator|new
name|Comparator
argument_list|<
name|ResourceInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ResourceInterface
name|r1
parameter_list|,
name|ResourceInterface
name|r2
parameter_list|)
block|{
name|int
name|cmp
init|=
operator|(
name|r1
operator|.
name|getDistance
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Double
argument_list|(
literal|0.0
argument_list|)
else|:
name|r1
operator|.
name|getDistance
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getDistance
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Double
argument_list|(
literal|0.0
argument_list|)
else|:
name|r2
operator|.
name|getDistance
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
if|if
condition|(
name|preferSize
condition|)
block|{
name|cmp
operator|=
operator|(
name|r1
operator|.
name|getSize
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
else|:
name|r1
operator|.
name|getSize
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getSize
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
else|:
name|r2
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
name|cmp
operator|=
name|r1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|cmp
operator|==
literal|0
condition|?
name|r1
operator|.
name|getId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getId
argument_list|()
argument_list|)
else|:
name|cmp
operator|)
return|;
block|}
block|}
return|;
case|case
name|AVAILABILITY
case|:
return|return
operator|new
name|Comparator
argument_list|<
name|ResourceInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ResourceInterface
name|r1
parameter_list|,
name|ResourceInterface
name|r2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|getOccupancy
argument_list|(
name|r1
argument_list|)
operator|.
name|compareTo
argument_list|(
name|getOccupancy
argument_list|(
name|r2
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
operator|(
name|r1
operator|.
name|getDistance
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Double
argument_list|(
literal|0.0
argument_list|)
else|:
name|r1
operator|.
name|getDistance
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getDistance
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Double
argument_list|(
literal|0.0
argument_list|)
else|:
name|r2
operator|.
name|getDistance
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
if|if
condition|(
name|preferSize
condition|)
block|{
name|cmp
operator|=
operator|(
name|r1
operator|.
name|getSize
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
else|:
name|r1
operator|.
name|getSize
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getSize
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
else|:
name|r2
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
name|cmp
operator|=
name|r1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|cmp
operator|==
literal|0
condition|?
name|r1
operator|.
name|getId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getId
argument_list|()
argument_list|)
else|:
name|cmp
operator|)
return|;
block|}
block|}
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|Comparator
argument_list|<
name|ResourceInterface
argument_list|>
name|inverse
parameter_list|(
specifier|final
name|Comparator
argument_list|<
name|ResourceInterface
argument_list|>
name|cmp
parameter_list|)
block|{
return|return
operator|new
name|Comparator
argument_list|<
name|ResourceInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ResourceInterface
name|r1
parameter_list|,
name|ResourceInterface
name|r2
parameter_list|)
block|{
return|return
operator|-
name|cmp
operator|.
name|compare
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|AcademicSession
name|session
parameter_list|)
block|{
return|return
name|session
operator|.
name|has
argument_list|(
name|AcademicSession
operator|.
name|Flag
operator|.
name|HasEvents
argument_list|)
return|;
block|}
specifier|private
name|void
name|hideResults
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|iPanel
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
name|iPanel
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|i
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"print"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"export"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"operations"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|showResults
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|iPanel
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
name|iPanel
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|i
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"print"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// iHeader.setEnabled("export", iTable.getRowCount()> 1);
comment|// iHeader.setEnabled("operations", getSelectedTab()> 0&& iTable.getRowCount()> 1);
block|}
specifier|private
name|boolean
name|isShowingResults
parameter_list|()
block|{
return|return
name|iPanel
operator|.
name|equals
argument_list|(
name|iRootPanel
operator|.
name|getWidget
argument_list|()
argument_list|)
operator|&&
name|iPanel
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|isVisible
argument_list|(
literal|1
argument_list|)
return|;
block|}
specifier|private
name|void
name|setup
parameter_list|(
name|boolean
name|init
parameter_list|)
block|{
if|if
condition|(
name|init
condition|)
name|iInitialized
operator|=
literal|true
expr_stmt|;
name|boolean
name|reload
init|=
name|init
decl_stmt|;
name|boolean
name|isDefault
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|iHistoryToken
operator|.
name|isChanged
argument_list|(
literal|"rooms"
argument_list|,
literal|"flag:Event"
argument_list|,
name|iRooms
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
name|iRooms
operator|.
name|setValue
argument_list|(
name|iHistoryToken
operator|.
name|getParameter
argument_list|(
literal|"rooms"
argument_list|,
literal|"flag:Event"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|reload
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|iRooms
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
literal|"flag:Event"
argument_list|)
condition|)
block|{
name|isDefault
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iHistoryToken
operator|.
name|isChanged
argument_list|(
literal|"after"
argument_list|,
name|iTimes
operator|.
name|getValue
argument_list|()
operator|.
name|getStart
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|iTimes
operator|.
name|getValue
argument_list|()
operator|.
name|getStart
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|||
name|iHistoryToken
operator|.
name|isChanged
argument_list|(
literal|"before"
argument_list|,
name|iTimes
operator|.
name|getValue
argument_list|()
operator|.
name|getEnd
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|iTimes
operator|.
name|getValue
argument_list|()
operator|.
name|getEnd
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|after
init|=
name|iHistoryToken
operator|.
name|getParameter
argument_list|(
literal|"after"
argument_list|)
decl_stmt|;
name|String
name|before
init|=
name|iHistoryToken
operator|.
name|getParameter
argument_list|(
literal|"before"
argument_list|)
decl_stmt|;
name|iTimes
operator|.
name|setValue
argument_list|(
operator|new
name|StartEndTime
argument_list|(
name|after
operator|==
literal|null
operator|||
name|after
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|Integer
operator|.
name|valueOf
argument_list|(
name|after
argument_list|)
argument_list|,
name|before
operator|==
literal|null
operator|||
name|before
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|Integer
operator|.
name|valueOf
argument_list|(
name|before
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|reload
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|iTimes
operator|.
name|getValue
argument_list|()
operator|.
name|getStart
argument_list|()
operator|!=
literal|null
condition|)
name|isDefault
operator|=
literal|false
expr_stmt|;
block|}
name|String
name|dates
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Integer
name|date
range|:
name|iDates
operator|.
name|getSelectedDays
argument_list|()
control|)
block|{
name|dates
operator|+=
operator|(
name|dates
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
name|date
expr_stmt|;
block|}
if|if
condition|(
name|iHistoryToken
operator|.
name|isChanged
argument_list|(
literal|"dates"
argument_list|,
name|dates
argument_list|)
condition|)
block|{
name|dates
operator|=
name|iHistoryToken
operator|.
name|getParameter
argument_list|(
literal|"dates"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Date
argument_list|>
name|val
init|=
operator|new
name|ArrayList
argument_list|<
name|Date
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|dates
operator|!=
literal|null
operator|&&
operator|!
name|dates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|d
range|:
name|dates
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
name|val
operator|.
name|add
argument_list|(
name|iDates
operator|.
name|getDate
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|d
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iDates
operator|.
name|setValue
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|reload
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|iDates
operator|.
name|getSelectedDaysCount
argument_list|()
operator|>
literal|0
condition|)
name|isDefault
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|iHistoryToken
operator|.
name|isChanged
argument_list|(
literal|"term"
argument_list|,
name|iSession
operator|.
name|getAcademicSessionAbbreviation
argument_list|()
argument_list|)
operator|&&
name|iHistoryToken
operator|.
name|getParameter
argument_list|(
literal|"term"
argument_list|)
operator|!=
literal|null
condition|)
name|iSession
operator|.
name|selectSession
argument_list|(
name|iHistoryToken
operator|.
name|getParameter
argument_list|(
literal|"term"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|iHistoryToken
operator|.
name|hasParameter
argument_list|(
literal|"event"
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"add"
operator|.
name|equals
argument_list|(
name|iHistoryToken
operator|.
name|getParameter
argument_list|(
literal|"event"
argument_list|)
argument_list|)
condition|)
block|{
name|iEventAdd
operator|.
name|setEvent
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|iEventAdd
operator|.
name|show
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Long
name|eventId
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|iHistoryToken
operator|.
name|getParameter
argument_list|(
literal|"event"
argument_list|)
argument_list|)
decl_stmt|;
name|LoadingWidget
operator|.
name|execute
argument_list|(
name|EventDetailRpcRequest
operator|.
name|requestEventDetails
argument_list|(
name|iSession
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
name|eventId
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|EventInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|failedLoad
argument_list|(
name|MESSAGES
operator|.
name|anEvent
argument_list|()
argument_list|,
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|EventInterface
name|result
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|iEventDetail
operator|.
name|setEvent
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|iEventDetail
operator|.
name|show
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
name|MESSAGES
operator|.
name|waitLoading
argument_list|(
name|MESSAGES
operator|.
name|anEvent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|iRootPanel
operator|.
name|setWidget
argument_list|(
name|iPanel
argument_list|)
expr_stmt|;
if|if
condition|(
name|iHistoryToken
operator|.
name|hasParameter
argument_list|(
literal|"term"
argument_list|)
operator|&&
name|iHistoryToken
operator|.
name|isChanged
argument_list|(
literal|"term"
argument_list|,
name|iSession
operator|.
name|getAcademicSessionAbbreviation
argument_list|()
argument_list|)
condition|)
block|{
name|iSession
operator|.
name|selectSession
argument_list|(
name|iHistoryToken
operator|.
name|getParameter
argument_list|(
literal|"term"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|reload
operator|&&
name|iProperties
operator|!=
literal|null
condition|)
block|{
name|reload
argument_list|(
name|isShowingResults
argument_list|()
operator|||
operator|!
name|isDefault
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|EventFilterRpcRequest
name|getEventsRequest
parameter_list|()
block|{
name|EventFilterRpcRequest
name|request
init|=
operator|new
name|EventFilterRpcRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setSessionId
argument_list|(
name|iSession
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setCommand
argument_list|(
name|FilterRpcRequest
operator|.
name|Command
operator|.
name|ENUMERATE
argument_list|)
expr_stmt|;
name|iSelectedTimes
operator|=
name|iTimes
operator|.
name|getValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|iSelectedTimes
operator|.
name|getStart
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|startHour
init|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
operator|(
name|iSelectedTimes
operator|.
name|getStart
argument_list|()
operator|-
literal|6
operator|)
operator|/
literal|12
argument_list|)
decl_stmt|;
name|request
operator|.
name|setOption
argument_list|(
literal|"after"
argument_list|,
name|TimeUtils
operator|.
name|slot2time
argument_list|(
literal|12
operator|*
name|startHour
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iSelectedTimes
operator|.
name|getEnd
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|endHour
init|=
name|Math
operator|.
name|min
argument_list|(
literal|24
argument_list|,
operator|(
literal|17
operator|+
name|iSelectedTimes
operator|.
name|getEnd
argument_list|()
operator|)
operator|/
literal|12
argument_list|)
decl_stmt|;
name|request
operator|.
name|setOption
argument_list|(
literal|"before"
argument_list|,
name|TimeUtils
operator|.
name|slot2time
argument_list|(
literal|12
operator|*
name|endHour
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iSelectedDates
operator|=
name|iDates
operator|.
name|getSelectedDays
argument_list|()
expr_stmt|;
for|for
control|(
name|Integer
name|date
range|:
name|iSelectedDates
control|)
block|{
name|request
operator|.
name|addOption
argument_list|(
literal|"dates"
argument_list|,
name|date
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|request
return|;
block|}
specifier|private
name|void
name|reload
parameter_list|(
name|boolean
name|loadData
parameter_list|)
block|{
if|if
condition|(
name|loadData
condition|)
block|{
if|if
condition|(
name|iSession
operator|.
name|getAcademicSessionId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|UniTimeNotifications
operator|.
name|warn
argument_list|(
name|MESSAGES
operator|.
name|warnNoSession
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|iProperties
operator|==
literal|null
condition|)
block|{
name|UniTimeNotifications
operator|.
name|warn
argument_list|(
name|MESSAGES
operator|.
name|warnNoEventProperties
argument_list|(
name|iSession
operator|.
name|getAcademicSessionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|iDates
operator|.
name|getSelectedDaysCount
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|UniTimeNotifications
operator|.
name|warn
argument_list|(
name|MESSAGES
operator|.
name|errorNoDateSelected
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ResourceInterface
name|resource
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|resource
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|ROOM
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setName
argument_list|(
name|iRooms
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|execute
argument_list|(
name|iRooms
operator|.
name|getElementsRequest
argument_list|()
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|FilterRpcResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|failedLoad
argument_list|(
name|MESSAGES
operator|.
name|resourceRoom
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|caught
argument_list|)
expr_stmt|;
name|hideResults
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|FilterRpcResponse
name|result
parameter_list|)
block|{
name|iSelectedRooms
operator|=
operator|new
name|ArrayList
argument_list|<
name|ResourceInterface
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|hasResults
argument_list|()
condition|)
for|for
control|(
name|FilterRpcResponse
operator|.
name|Entity
name|room
range|:
name|result
operator|.
name|getResults
argument_list|()
control|)
block|{
name|iSelectedRooms
operator|.
name|add
argument_list|(
operator|new
name|ResourceInterface
argument_list|(
name|room
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iRooms
operator|.
name|getChip
argument_list|(
literal|"size"
argument_list|)
operator|!=
literal|null
condition|)
name|Collections
operator|.
name|sort
argument_list|(
name|iSelectedRooms
argument_list|,
operator|new
name|Comparator
argument_list|<
name|ResourceInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ResourceInterface
name|r1
parameter_list|,
name|ResourceInterface
name|r2
parameter_list|)
block|{
name|int
name|cmp
init|=
operator|(
name|r1
operator|.
name|getSize
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Integer
argument_list|(
operator|-
literal|1
argument_list|)
else|:
name|r1
operator|.
name|getSize
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getSize
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Integer
argument_list|(
operator|-
literal|1
argument_list|)
else|:
name|r2
operator|.
name|getSize
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|r1
operator|.
name|compareTo
argument_list|(
name|r2
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
else|else
name|Collections
operator|.
name|sort
argument_list|(
name|iSelectedRooms
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|hasResults
argument_list|()
operator|||
name|result
operator|.
name|getResults
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|errorNoMatchingRooms
argument_list|()
argument_list|)
expr_stmt|;
name|hideResults
argument_list|()
expr_stmt|;
return|return;
block|}
name|LoadingWidget
operator|.
name|execute
argument_list|(
name|EventLookupRpcRequest
operator|.
name|findEvents
argument_list|(
name|iSession
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|getEventsRequest
argument_list|()
argument_list|,
name|iRooms
operator|.
name|getElementsRequest
argument_list|()
argument_list|,
name|CONSTANTS
operator|.
name|maxMeetings
argument_list|()
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|GwtRpcResponseList
argument_list|<
name|EventInterface
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|GwtRpcResponseList
argument_list|<
name|EventInterface
argument_list|>
name|result
parameter_list|)
block|{
name|populate
argument_list|(
name|result
argument_list|,
name|EventCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getRoomsSortBy
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|failedLoad
argument_list|(
name|MESSAGES
operator|.
name|resourceRoom
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|caught
argument_list|)
expr_stmt|;
name|hideResults
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
name|MESSAGES
operator|.
name|waitLoadingTimetable
argument_list|(
name|MESSAGES
operator|.
name|resourceRoom
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|iSession
operator|.
name|getAcademicSessionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|MESSAGES
operator|.
name|waitLoadingTimetable
argument_list|(
name|MESSAGES
operator|.
name|resourceRoom
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|iSession
operator|.
name|getAcademicSessionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|iData
operator|=
literal|null
expr_stmt|;
name|hideResults
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|loadProperties
parameter_list|(
specifier|final
name|AsyncCallback
argument_list|<
name|EventPropertiesRpcResponse
argument_list|>
name|callback
parameter_list|)
block|{
name|iProperties
operator|=
literal|null
expr_stmt|;
name|iSessionMonths
operator|=
literal|null
expr_stmt|;
name|iFilterHeader
operator|.
name|setEnabled
argument_list|(
literal|"add"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iFooter
operator|.
name|setEnabled
argument_list|(
literal|"add"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSession
operator|.
name|getAcademicSessionId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|RPC
operator|.
name|execute
argument_list|(
name|EventPropertiesRpcRequest
operator|.
name|requestEventProperties
argument_list|(
name|iSession
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|EventPropertiesRpcResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|failedLoad
argument_list|(
name|iSession
operator|.
name|getAcademicSessionName
argument_list|()
argument_list|,
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|caught
argument_list|)
expr_stmt|;
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
name|callback
operator|.
name|onFailure
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
specifier|final
name|EventPropertiesRpcResponse
name|result
parameter_list|)
block|{
name|RPC
operator|.
name|execute
argument_list|(
operator|new
name|RequestSessionDetails
argument_list|(
name|iSession
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|GwtRpcResponseList
argument_list|<
name|SessionMonth
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|failedLoad
argument_list|(
name|iSession
operator|.
name|getAcademicSessionName
argument_list|()
argument_list|,
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|caught
argument_list|)
expr_stmt|;
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
name|callback
operator|.
name|onFailure
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|GwtRpcResponseList
argument_list|<
name|SessionMonth
argument_list|>
name|months
parameter_list|)
block|{
name|iProperties
operator|=
name|result
expr_stmt|;
name|iSessionMonths
operator|=
name|months
expr_stmt|;
name|iFilterHeader
operator|.
name|setEnabled
argument_list|(
literal|"add"
argument_list|,
name|result
operator|.
name|isCanAddEvent
argument_list|()
operator|&&
literal|"true"
operator|.
name|equals
argument_list|(
name|iHistoryToken
operator|.
name|getParameter
argument_list|(
literal|"addEvent"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|iFooter
operator|.
name|setEnabled
argument_list|(
literal|"add"
argument_list|,
name|result
operator|.
name|isCanAddEvent
argument_list|()
operator|&&
literal|"true"
operator|.
name|equals
argument_list|(
name|iHistoryToken
operator|.
name|getParameter
argument_list|(
literal|"addEvent"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
name|callback
operator|.
name|onSuccess
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Collection
argument_list|<
name|EventInterface
argument_list|>
name|sortedEvents
parameter_list|()
block|{
name|TreeSet
argument_list|<
name|EventInterface
argument_list|>
name|data
init|=
operator|new
name|TreeSet
argument_list|<
name|EventInterface
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|EventInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|EventInterface
name|e1
parameter_list|,
name|EventInterface
name|e2
parameter_list|)
block|{
name|int
name|cmp
init|=
operator|new
name|Integer
argument_list|(
name|e1
operator|.
name|getMeetings
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|getDayOfYear
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getMeetings
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|getDayOfYear
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
operator|new
name|Integer
argument_list|(
name|e1
operator|.
name|getMeetings
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getMeetings
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|e1
operator|.
name|compareTo
argument_list|(
name|e2
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|data
operator|.
name|addAll
argument_list|(
name|iData
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|private
name|void
name|populate
parameter_list|(
name|List
argument_list|<
name|EventInterface
argument_list|>
name|result
parameter_list|,
name|Integer
name|sortBy
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iTables
operator|.
name|getWidgetCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|iTables
operator|.
name|getWidget
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|TimeGrid
condition|)
operator|(
operator|(
name|TimeGrid
operator|)
name|w
operator|)
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
name|iData
operator|=
name|result
expr_stmt|;
if|if
condition|(
name|sortBy
operator|!=
literal|null
operator|&&
name|sortBy
operator|>=
literal|0
operator|&&
name|sortBy
operator|<
name|SortRoomsBy
operator|.
name|values
argument_list|()
operator|.
name|length
condition|)
block|{
name|Comparator
argument_list|<
name|ResourceInterface
argument_list|>
name|comparator
init|=
name|getSortRoomsComparator
argument_list|(
name|SortRoomsBy
operator|.
name|values
argument_list|()
index|[
name|sortBy
index|]
argument_list|,
name|iRooms
operator|.
name|getChip
argument_list|(
literal|"size"
argument_list|)
operator|!=
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|comparator
operator|!=
literal|null
condition|)
name|Collections
operator|.
name|sort
argument_list|(
name|iSelectedRooms
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|sortBy
operator|!=
literal|null
operator|&&
name|sortBy
operator|>=
name|SortRoomsBy
operator|.
name|values
argument_list|()
operator|.
name|length
operator|&&
name|sortBy
operator|<
literal|2
operator|*
name|SortRoomsBy
operator|.
name|values
argument_list|()
operator|.
name|length
condition|)
block|{
name|Comparator
argument_list|<
name|ResourceInterface
argument_list|>
name|comparator
init|=
name|getSortRoomsComparator
argument_list|(
name|SortRoomsBy
operator|.
name|values
argument_list|()
index|[
name|sortBy
operator|-
name|SortRoomsBy
operator|.
name|values
argument_list|()
operator|.
name|length
index|]
argument_list|,
name|iRooms
operator|.
name|getChip
argument_list|(
literal|"size"
argument_list|)
operator|!=
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|comparator
operator|!=
literal|null
condition|)
name|Collections
operator|.
name|sort
argument_list|(
name|iSelectedRooms
argument_list|,
name|inverse
argument_list|(
name|comparator
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|iTables
operator|.
name|clear
argument_list|()
expr_stmt|;
name|HashMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|colors
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|int
index|[]
name|days
init|=
operator|new
name|int
index|[
name|iSelectedDates
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|WeekInterface
name|week
init|=
operator|new
name|WeekInterface
argument_list|()
decl_stmt|;
name|week
operator|.
name|setDayOfYear
argument_list|(
name|iSelectedDates
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dows
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|lastPast
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iSelectedDates
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Date
name|date
init|=
name|iDates
operator|.
name|getDate
argument_list|(
name|iSelectedDates
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|year
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"yyyy"
argument_list|)
operator|.
name|format
argument_list|(
name|date
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|month
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"MM"
argument_list|)
operator|.
name|format
argument_list|(
name|date
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|dow
init|=
operator|(
name|SingleDateSelector
operator|.
name|firstDayOfWeek
argument_list|(
name|year
argument_list|,
name|month
argument_list|)
operator|+
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"dd"
argument_list|)
operator|.
name|format
argument_list|(
name|date
argument_list|)
argument_list|)
operator|-
literal|1
operator|)
operator|%
literal|7
decl_stmt|;
name|days
index|[
name|i
index|]
operator|=
name|i
expr_stmt|;
name|week
operator|.
name|addDayName
argument_list|(
operator|new
name|DateInterface
argument_list|(
name|sDateFormat
operator|.
name|format
argument_list|(
name|date
argument_list|)
argument_list|,
name|month
argument_list|,
name|iSelectedDates
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|dows
operator|.
name|add
argument_list|(
name|CONSTANTS
operator|.
name|days
argument_list|()
index|[
name|dow
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iDates
operator|.
name|isEnabled
argument_list|(
name|date
argument_list|)
operator|||
name|iDates
operator|.
name|hasFlag
argument_list|(
name|date
argument_list|,
name|Flag
operator|.
name|PAST
argument_list|)
condition|)
name|lastPast
operator|=
name|i
expr_stmt|;
block|}
name|List
argument_list|<
name|WeekInterface
argument_list|>
name|weeks
init|=
operator|new
name|ArrayList
argument_list|<
name|WeekInterface
argument_list|>
argument_list|()
decl_stmt|;
name|weeks
operator|.
name|add
argument_list|(
name|week
argument_list|)
expr_stmt|;
for|for
control|(
name|ResourceInterface
name|room
range|:
name|iSelectedRooms
control|)
block|{
name|HorizontalPanel
name|hp
init|=
operator|new
name|HorizontalPanel
argument_list|()
decl_stmt|;
name|hp
operator|.
name|setStyleName
argument_list|(
literal|"unitime-RoomAvailabilityHeader"
argument_list|)
expr_stmt|;
name|HTML
name|name
init|=
operator|new
name|HTML
argument_list|(
name|room
operator|.
name|getNameWithHint
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|name
operator|.
name|setStyleName
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|hp
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|HTML
name|type
init|=
operator|new
name|HTML
argument_list|(
name|room
operator|.
name|getRoomType
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|type
operator|.
name|setStyleName
argument_list|(
literal|"type"
argument_list|)
expr_stmt|;
name|hp
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|HTML
name|size
init|=
operator|new
name|HTML
argument_list|(
name|room
operator|.
name|getSize
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|MESSAGES
operator|.
name|hintRoomCapacity
argument_list|(
name|room
operator|.
name|getSize
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|size
operator|.
name|setStyleName
argument_list|(
literal|"size"
argument_list|)
expr_stmt|;
name|hp
operator|.
name|add
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|hp
operator|.
name|setCellHorizontalAlignment
argument_list|(
name|name
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|hp
operator|.
name|setCellHorizontalAlignment
argument_list|(
name|type
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_CENTER
argument_list|)
expr_stmt|;
name|hp
operator|.
name|setCellHorizontalAlignment
argument_list|(
name|size
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
name|hp
operator|.
name|setCellVerticalAlignment
argument_list|(
name|name
argument_list|,
name|HasVerticalAlignment
operator|.
name|ALIGN_BOTTOM
argument_list|)
expr_stmt|;
name|hp
operator|.
name|setCellVerticalAlignment
argument_list|(
name|type
argument_list|,
name|HasVerticalAlignment
operator|.
name|ALIGN_BOTTOM
argument_list|)
expr_stmt|;
name|hp
operator|.
name|setCellVerticalAlignment
argument_list|(
name|size
argument_list|,
name|HasVerticalAlignment
operator|.
name|ALIGN_BOTTOM
argument_list|)
expr_stmt|;
name|hp
operator|.
name|setCellWidth
argument_list|(
name|name
argument_list|,
literal|"33%"
argument_list|)
expr_stmt|;
name|hp
operator|.
name|setCellWidth
argument_list|(
name|type
argument_list|,
literal|"34%"
argument_list|)
expr_stmt|;
name|hp
operator|.
name|setCellWidth
argument_list|(
name|size
argument_list|,
literal|"33%"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iTables
operator|.
name|getWidgetCount
argument_list|()
operator|>
literal|0
condition|)
name|hp
operator|.
name|addStyleName
argument_list|(
literal|"unitime-TopLineDash"
argument_list|)
expr_stmt|;
name|iTables
operator|.
name|add
argument_list|(
name|hp
argument_list|)
expr_stmt|;
name|int
name|startHour
init|=
literal|7
decl_stmt|;
if|if
condition|(
name|iSelectedTimes
operator|.
name|getStart
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|startHour
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
operator|(
name|iSelectedTimes
operator|.
name|getStart
argument_list|()
operator|-
literal|6
operator|)
operator|/
literal|12
argument_list|)
expr_stmt|;
block|}
name|int
name|endHour
init|=
literal|18
decl_stmt|;
if|if
condition|(
name|iSelectedTimes
operator|.
name|getEnd
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|endHour
operator|=
name|Math
operator|.
name|min
argument_list|(
literal|24
argument_list|,
operator|(
literal|17
operator|+
name|iSelectedTimes
operator|.
name|getEnd
argument_list|()
operator|)
operator|/
literal|12
argument_list|)
expr_stmt|;
block|}
name|TimeGrid
name|grid
init|=
operator|new
name|TimeGrid
argument_list|(
name|colors
argument_list|,
name|days
argument_list|,
operator|(
name|int
operator|)
operator|(
literal|0.9
operator|*
name|ToolBox
operator|.
name|getClientWidth
argument_list|()
operator|/
name|days
operator|.
name|length
operator|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|startHour
argument_list|,
name|endHour
argument_list|)
decl_stmt|;
name|grid
operator|.
name|setResourceType
argument_list|(
name|ResourceType
operator|.
name|ROOM
argument_list|)
expr_stmt|;
name|grid
operator|.
name|setSelectedWeeks
argument_list|(
name|weeks
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ResourceInterface
argument_list|>
name|rooms
init|=
operator|new
name|ArrayList
argument_list|<
name|EventInterface
operator|.
name|ResourceInterface
argument_list|>
argument_list|()
decl_stmt|;
name|rooms
operator|.
name|add
argument_list|(
name|room
argument_list|)
expr_stmt|;
name|grid
operator|.
name|setRoomResources
argument_list|(
name|rooms
argument_list|)
expr_stmt|;
name|grid
operator|.
name|setMode
argument_list|(
name|TimeGrid
operator|.
name|Mode
operator|.
name|OVERLAP
argument_list|)
expr_stmt|;
for|for
control|(
name|EventInterface
name|event
range|:
name|sortedEvents
argument_list|()
control|)
block|{
name|List
argument_list|<
name|MeetingInterface
argument_list|>
name|meetings
init|=
operator|new
name|ArrayList
argument_list|<
name|MeetingInterface
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|MeetingInterface
name|meeting
range|:
name|event
operator|.
name|getMeetings
argument_list|()
control|)
block|{
if|if
condition|(
name|meeting
operator|.
name|getApprovalStatus
argument_list|()
operator|!=
name|ApprovalStatus
operator|.
name|Pending
operator|&&
name|meeting
operator|.
name|getApprovalStatus
argument_list|()
operator|!=
name|ApprovalStatus
operator|.
name|Approved
condition|)
continue|continue;
if|if
condition|(
name|meeting
operator|.
name|getMeetingDate
argument_list|()
operator|!=
literal|null
operator|&&
name|meeting
operator|.
name|hasLocation
argument_list|()
operator|&&
name|meeting
operator|.
name|getLocation
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|room
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|int
name|idx
init|=
name|iSelectedDates
operator|.
name|indexOf
argument_list|(
name|meeting
operator|.
name|getDayOfYear
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>=
literal|0
condition|)
block|{
name|meeting
operator|.
name|setDayOfWeek
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|meetings
operator|.
name|add
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|meetings
operator|.
name|isEmpty
argument_list|()
condition|)
name|grid
operator|.
name|addEvent
argument_list|(
name|event
argument_list|,
name|meetings
argument_list|)
expr_stmt|;
block|}
name|grid
operator|.
name|labelDays
argument_list|(
name|dows
argument_list|,
name|week
argument_list|)
expr_stmt|;
name|grid
operator|.
name|setCalendarUrl
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|grid
operator|.
name|yellow
argument_list|(
name|iSelectedTimes
operator|.
name|getStart
argument_list|()
operator|==
literal|null
condition|?
literal|90
else|:
name|iSelectedTimes
operator|.
name|getStart
argument_list|()
argument_list|,
name|iSelectedTimes
operator|.
name|getEnd
argument_list|()
operator|==
literal|null
condition|?
literal|210
else|:
name|iSelectedTimes
operator|.
name|getEnd
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastPast
operator|>=
literal|0
condition|)
name|grid
operator|.
name|gray
argument_list|(
literal|0
argument_list|,
name|lastPast
argument_list|)
expr_stmt|;
name|grid
operator|.
name|addMeetingClickHandler
argument_list|(
name|iMeetingClickHandler
argument_list|)
expr_stmt|;
name|iTables
operator|.
name|add
argument_list|(
name|grid
argument_list|)
expr_stmt|;
block|}
name|showResults
argument_list|()
expr_stmt|;
name|changeUrl
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Long
name|getSessionId
parameter_list|()
block|{
return|return
name|iSession
operator|.
name|getAcademicSessionId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|EventPropertiesRpcResponse
name|getProperties
parameter_list|()
block|{
return|return
name|iProperties
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|SelectionInterface
argument_list|>
name|getSelection
parameter_list|()
block|{
name|List
argument_list|<
name|SelectionInterface
argument_list|>
name|selection
init|=
operator|new
name|ArrayList
argument_list|<
name|EventInterface
operator|.
name|SelectionInterface
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iTables
operator|.
name|getWidgetCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|iTables
operator|.
name|getWidget
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|TimeGrid
condition|)
for|for
control|(
name|SelectionInterface
name|s
range|:
operator|(
operator|(
name|TimeGrid
operator|)
name|w
operator|)
operator|.
name|getSelections
argument_list|()
control|)
block|{
name|SelectionInterface
name|x
init|=
operator|new
name|SelectionInterface
argument_list|()
decl_stmt|;
name|x
operator|.
name|setLength
argument_list|(
name|s
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|x
operator|.
name|setStartSlot
argument_list|(
name|s
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ResourceInterface
name|r
range|:
name|s
operator|.
name|getLocations
argument_list|()
control|)
name|x
operator|.
name|addLocation
argument_list|(
name|r
argument_list|)
expr_stmt|;
for|for
control|(
name|Integer
name|d
range|:
name|s
operator|.
name|getDays
argument_list|()
control|)
name|x
operator|.
name|addDay
argument_list|(
name|iSelectedDates
operator|.
name|get
argument_list|(
name|d
operator|-
name|iSelectedDates
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|selection
operator|.
name|add
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|selection
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRoomFilter
parameter_list|()
block|{
return|return
name|iRooms
operator|.
name|getValue
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Date
argument_list|>
name|getSelectedDates
parameter_list|()
block|{
return|return
name|iDates
operator|.
name|getValue
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|StartEndTime
name|getSelectedTime
parameter_list|()
block|{
return|return
name|iTimes
operator|.
name|getValue
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ContactInterface
name|getMainContact
parameter_list|()
block|{
return|return
name|iProperties
operator|==
literal|null
condition|?
literal|null
else|:
name|iProperties
operator|.
name|getMainContact
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|SessionMonth
operator|.
name|Flag
name|getDateFlag
parameter_list|(
name|EventType
name|type
parameter_list|,
name|Date
name|date
parameter_list|)
block|{
if|if
condition|(
name|iSessionMonths
operator|==
literal|null
operator|||
name|iSessionMonths
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|date
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|int
name|m
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"MM"
argument_list|)
operator|.
name|format
argument_list|(
name|date
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|SessionMonth
name|month
range|:
name|iSessionMonths
control|)
if|if
condition|(
name|m
operator|==
name|month
operator|.
name|getMonth
argument_list|()
operator|+
literal|1
condition|)
block|{
name|int
name|d
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"dd"
argument_list|)
operator|.
name|format
argument_list|(
name|date
argument_list|)
argument_list|)
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|month
operator|.
name|hasFlag
argument_list|(
name|d
argument_list|,
name|SessionMonth
operator|.
name|Flag
operator|.
name|FINALS
argument_list|)
operator|&&
name|type
operator|!=
name|EventType
operator|.
name|FinalExam
condition|)
return|return
name|SessionMonth
operator|.
name|Flag
operator|.
name|FINALS
return|;
if|if
condition|(
name|month
operator|.
name|hasFlag
argument_list|(
name|d
argument_list|,
name|SessionMonth
operator|.
name|Flag
operator|.
name|BREAK
argument_list|)
condition|)
return|return
name|SessionMonth
operator|.
name|Flag
operator|.
name|BREAK
return|;
if|if
condition|(
name|month
operator|.
name|hasFlag
argument_list|(
name|d
argument_list|,
name|SessionMonth
operator|.
name|Flag
operator|.
name|WEEKEND
argument_list|)
condition|)
return|return
name|SessionMonth
operator|.
name|Flag
operator|.
name|WEEKEND
return|;
if|if
condition|(
name|month
operator|.
name|hasFlag
argument_list|(
name|d
argument_list|,
name|SessionMonth
operator|.
name|Flag
operator|.
name|HOLIDAY
argument_list|)
condition|)
return|return
name|SessionMonth
operator|.
name|Flag
operator|.
name|HOLIDAY
return|;
return|return
literal|null
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|void
name|changeUrl
parameter_list|()
block|{
name|iHistoryToken
operator|.
name|reset
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|iHistoryToken
operator|.
name|setParameter
argument_list|(
literal|"term"
argument_list|,
name|iSession
operator|.
name|getAcademicSessionAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|iHistoryToken
operator|.
name|setParameter
argument_list|(
literal|"rooms"
argument_list|,
name|iRooms
operator|.
name|getValue
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iEventDetail
operator|.
name|equals
argument_list|(
name|iRootPanel
operator|.
name|getWidget
argument_list|()
argument_list|)
condition|)
name|iHistoryToken
operator|.
name|setParameter
argument_list|(
literal|"event"
argument_list|,
name|iEventDetail
operator|.
name|getEvent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|iEventAdd
operator|.
name|equals
argument_list|(
name|iRootPanel
operator|.
name|getWidget
argument_list|()
argument_list|)
condition|)
block|{
name|Long
name|id
init|=
name|iEventAdd
operator|.
name|getEventId
argument_list|()
decl_stmt|;
name|iHistoryToken
operator|.
name|setParameter
argument_list|(
literal|"event"
argument_list|,
name|id
operator|==
literal|null
condition|?
literal|"add"
else|:
name|id
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iSelectedTimes
operator|=
name|iTimes
operator|.
name|getValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|iTimes
operator|.
name|getValue
argument_list|()
operator|.
name|getStart
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|iHistoryToken
operator|.
name|setParameter
argument_list|(
literal|"after"
argument_list|,
name|iTimes
operator|.
name|getValue
argument_list|()
operator|.
name|getStart
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iTimes
operator|.
name|getValue
argument_list|()
operator|.
name|getEnd
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|iHistoryToken
operator|.
name|setParameter
argument_list|(
literal|"before"
argument_list|,
name|iTimes
operator|.
name|getValue
argument_list|()
operator|.
name|getEnd
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iSelectedDates
operator|=
name|iDates
operator|.
name|getSelectedDays
argument_list|()
expr_stmt|;
name|String
name|dates
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Integer
name|date
range|:
name|iDates
operator|.
name|getSelectedDays
argument_list|()
control|)
block|{
name|dates
operator|+=
operator|(
name|dates
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
name|date
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|dates
operator|.
name|isEmpty
argument_list|()
condition|)
name|iHistoryToken
operator|.
name|setParameter
argument_list|(
literal|"dates"
argument_list|,
name|dates
argument_list|)
expr_stmt|;
name|iHistoryToken
operator|.
name|mark
argument_list|()
expr_stmt|;
name|Client
operator|.
name|fireGwtPageChanged
argument_list|(
operator|new
name|Client
operator|.
name|GwtPageChangeEvent
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|GwtRpcResponseList
argument_list|<
name|EventInterface
argument_list|>
name|tinker
parameter_list|(
name|GwtRpcResponseList
argument_list|<
name|EventInterface
argument_list|>
name|data
parameter_list|,
name|Long
name|oldEventId
parameter_list|,
name|EventInterface
name|newEvent
parameter_list|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|EventInterface
argument_list|>
name|i
init|=
name|data
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|EventInterface
name|event
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|oldEventId
argument_list|)
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
continue|continue;
block|}
if|else if
condition|(
name|event
operator|.
name|hasConflicts
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|EventInterface
argument_list|>
name|j
init|=
name|event
operator|.
name|getConflicts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
if|if
condition|(
name|j
operator|.
name|next
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|oldEventId
argument_list|)
condition|)
name|j
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|newEvent
operator|!=
literal|null
operator|&&
name|newEvent
operator|.
name|getId
argument_list|()
operator|!=
literal|null
operator|&&
name|event
operator|.
name|inConflict
argument_list|(
name|newEvent
argument_list|)
condition|)
block|{
name|event
operator|.
name|addConflict
argument_list|(
name|event
operator|.
name|createConflictingEvent
argument_list|(
name|newEvent
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|newEvent
operator|!=
literal|null
operator|&&
name|newEvent
operator|.
name|getId
argument_list|()
operator|!=
literal|null
condition|)
name|data
operator|.
name|add
argument_list|(
name|newEvent
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
block|}
end_class

end_unit

