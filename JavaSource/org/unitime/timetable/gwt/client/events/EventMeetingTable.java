begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.4 (University Timetabling Application)  * Copyright (C) 2012, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|events
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|events
operator|.
name|EventComparator
operator|.
name|EventMeetingSortBy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|NumberBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|P
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|SimpleForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeDialogBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeHeaderPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|EventFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|MeetingConflictInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|MeetingInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|MultiMeetingInterface
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|shared
operator|.
name|HandlerRegistration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|DateTimeFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|CheckBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_class
specifier|public
class|class
name|EventMeetingTable
extends|extends
name|UniTimeTable
argument_list|<
name|EventMeetingTable
operator|.
name|EventMeetingRow
argument_list|>
implements|implements
name|HasValue
argument_list|<
name|List
argument_list|<
name|EventMeetingTable
operator|.
name|EventMeetingRow
argument_list|>
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|GwtConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|DateTimeFormat
name|sDateFormat
init|=
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|eventDateFormat
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|DateTimeFormat
name|sDateFormatShort
init|=
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|eventDateFormatShort
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|DateTimeFormat
name|sDateFormatLong
init|=
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|eventDateFormatLong
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|DateTimeFormat
name|sDateFormatMeeting
init|=
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|meetingDateFormat
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
specifier|static
enum|enum
name|Mode
block|{
name|ListOfEvents
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
block|,
name|ListOfMeetings
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
block|,
name|MeetingsOfAnEvent
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
block|,
name|ApprovalOfEvents
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
block|,
name|ApprovalOfMeetings
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
block|,
name|ApprovalOfSingleEventMeetings
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
block|;
specifier|private
name|boolean
name|iShowEventDetails
decl_stmt|,
name|iShowMeetings
decl_stmt|,
name|iShowOptionalColumns
decl_stmt|,
name|iMustShowApproval
decl_stmt|,
name|iAllowApproveAll
decl_stmt|;
name|Mode
parameter_list|(
name|boolean
name|showEventDetails
parameter_list|,
name|boolean
name|showMeetings
parameter_list|,
name|boolean
name|showOptionalColumns
parameter_list|,
name|boolean
name|mustShowApproval
parameter_list|,
name|boolean
name|approveAll
parameter_list|)
block|{
name|iShowEventDetails
operator|=
name|showEventDetails
expr_stmt|;
name|iShowMeetings
operator|=
name|showMeetings
expr_stmt|;
name|iShowOptionalColumns
operator|=
name|showOptionalColumns
expr_stmt|;
name|iMustShowApproval
operator|=
name|mustShowApproval
expr_stmt|;
name|iAllowApproveAll
operator|=
name|approveAll
expr_stmt|;
block|}
specifier|public
name|boolean
name|isShowEventDetails
parameter_list|()
block|{
return|return
name|iShowEventDetails
return|;
block|}
specifier|public
name|boolean
name|isShowMeetings
parameter_list|()
block|{
return|return
name|iShowMeetings
return|;
block|}
specifier|public
name|boolean
name|isShowOptionalColumns
parameter_list|()
block|{
return|return
name|iShowOptionalColumns
return|;
block|}
specifier|public
name|boolean
name|isMustShowApproval
parameter_list|()
block|{
return|return
name|iMustShowApproval
return|;
block|}
specifier|public
name|boolean
name|isAllowApproveAll
parameter_list|()
block|{
return|return
name|iAllowApproveAll
return|;
block|}
block|}
specifier|public
specifier|static
enum|enum
name|OperationType
block|{
name|Approve
block|,
name|Reject
block|,
name|Inquire
block|,
name|AddMeetings
block|}
specifier|private
name|Mode
name|iMode
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iShowMainContact
init|=
literal|false
decl_stmt|;
specifier|private
name|EventMeetingSortBy
name|iSortBy
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iSelectable
init|=
literal|true
decl_stmt|,
name|iEditable
init|=
literal|false
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|OperationType
argument_list|,
name|Implementation
argument_list|>
name|iImplementations
init|=
operator|new
name|HashMap
argument_list|<
name|OperationType
argument_list|,
name|Implementation
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|MeetingFilter
name|iMeetingFilter
init|=
literal|null
decl_stmt|;
specifier|public
name|EventMeetingTable
parameter_list|(
name|Mode
name|mode
parameter_list|,
name|boolean
name|selectable
parameter_list|)
block|{
name|setStyleName
argument_list|(
literal|"unitime-EventMeetings"
argument_list|)
expr_stmt|;
name|iMode
operator|=
name|mode
expr_stmt|;
name|iSelectable
operator|=
name|selectable
expr_stmt|;
if|if
condition|(
name|getRowCount
argument_list|()
operator|>
literal|0
condition|)
name|clearTable
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|UniTimeTableHeader
argument_list|>
name|header
init|=
operator|new
name|ArrayList
argument_list|<
name|UniTimeTableHeader
argument_list|>
argument_list|()
decl_stmt|;
name|UniTimeTableHeader
name|hTimes
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
literal|"&otimes;"
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_CENTER
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hTimes
argument_list|)
expr_stmt|;
name|hTimes
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|CheckBox
name|ch
init|=
operator|(
name|CheckBox
operator|)
name|w
decl_stmt|;
name|ch
operator|.
name|setValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|CheckBox
name|ch
init|=
operator|(
name|CheckBox
operator|)
name|w
decl_stmt|;
if|if
condition|(
operator|!
name|ch
operator|.
name|getValue
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opSelectAll
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hTimes
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|CheckBox
name|ch
init|=
operator|(
name|CheckBox
operator|)
name|w
decl_stmt|;
name|ch
operator|.
name|setValue
argument_list|(
name|getData
argument_list|(
name|row
argument_list|)
operator|.
name|inConflict
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
if|if
condition|(
name|getData
argument_list|(
name|row
argument_list|)
operator|.
name|inConflict
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opSelectAllConflicting
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hTimes
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|CheckBox
name|ch
init|=
operator|(
name|CheckBox
operator|)
name|w
decl_stmt|;
name|ch
operator|.
name|setValue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|CheckBox
name|ch
init|=
operator|(
name|CheckBox
operator|)
name|w
decl_stmt|;
if|if
condition|(
name|ch
operator|.
name|getValue
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opClearSelection
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hTimes
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|getOperation
argument_list|(
name|OperationType
operator|.
name|AddMeetings
argument_list|)
operator|.
name|execute
argument_list|(
name|EventMeetingTable
operator|.
name|this
argument_list|,
name|OperationType
operator|.
name|AddMeetings
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|hasOperation
argument_list|(
name|OperationType
operator|.
name|AddMeetings
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opAddMeetings
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hTimes
operator|.
name|addOperation
argument_list|(
operator|new
name|EventMeetingOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
operator|(
name|hasSelection
argument_list|()
condition|?
name|MESSAGES
operator|.
name|opDeleteSelectedMeetings
argument_list|()
else|:
name|MESSAGES
operator|.
name|opDeleteNewMeetings
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|(
name|EventMeetingRow
name|row
parameter_list|)
block|{
return|return
name|isEditable
argument_list|()
operator|&&
name|row
operator|.
name|isEditable
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|int
name|row
parameter_list|,
name|EventMeetingRow
name|event
parameter_list|)
block|{
while|while
condition|(
name|row
operator|+
literal|1
operator|<
name|getRowCount
argument_list|()
operator|&&
name|getData
argument_list|(
name|row
operator|+
literal|1
argument_list|)
operator|.
name|hasParent
argument_list|()
condition|)
name|removeRow
argument_list|(
name|row
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|getData
argument_list|(
name|row
argument_list|)
operator|.
name|getMeeting
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|)
name|removeRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
else|else
block|{
name|getData
argument_list|(
name|row
argument_list|)
operator|.
name|getMeeting
argument_list|()
operator|.
name|setDelete
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|getRowFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
literal|"deleted-row"
argument_list|)
expr_stmt|;
name|setWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
operator|new
name|HTML
argument_list|(
literal|"&nbsp;"
argument_list|)
argument_list|)
expr_stmt|;
name|HTML
name|approval
init|=
operator|(
name|HTML
operator|)
name|getWidget
argument_list|(
name|row
argument_list|,
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colApproval
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|)
decl_stmt|;
name|approval
operator|.
name|setStyleName
argument_list|(
literal|"deleted-meeting"
argument_list|)
expr_stmt|;
name|approval
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|approvalDeleted
argument_list|()
argument_list|)
expr_stmt|;
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|EventMeetingTable
operator|.
name|this
argument_list|,
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|hTimes
operator|.
name|addOperation
argument_list|(
operator|new
name|EventMeetingOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
operator|(
name|hasSelection
argument_list|()
condition|?
name|MESSAGES
operator|.
name|opApproveSelectedMeetings
argument_list|()
else|:
name|MESSAGES
operator|.
name|opApproveAllMeetings
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|(
name|EventMeetingRow
name|row
parameter_list|)
block|{
return|return
name|hasOperation
argument_list|(
name|OperationType
operator|.
name|Approve
argument_list|)
operator|&&
name|row
operator|.
name|isCanApprove
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|int
name|row
parameter_list|,
name|EventMeetingRow
name|event
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|getOperation
argument_list|(
name|OperationType
operator|.
name|Approve
argument_list|)
operator|.
name|execute
argument_list|(
name|EventMeetingTable
operator|.
name|this
argument_list|,
name|OperationType
operator|.
name|Approve
argument_list|,
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|allowNoSelection
parameter_list|()
block|{
return|return
name|getMode
argument_list|()
operator|.
name|isAllowApproveAll
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hTimes
operator|.
name|addOperation
argument_list|(
operator|new
name|EventMeetingOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|allMustMatch
parameter_list|(
name|boolean
name|hasSelection
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
operator|(
name|hasSelection
argument_list|()
condition|?
name|MESSAGES
operator|.
name|opInquireSelectedMeetings
argument_list|()
else|:
name|MESSAGES
operator|.
name|opInquireAllMeetings
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|(
name|EventMeetingRow
name|row
parameter_list|)
block|{
return|return
name|hasOperation
argument_list|(
name|OperationType
operator|.
name|Inquire
argument_list|)
operator|&&
name|row
operator|.
name|isCanApprove
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|int
name|row
parameter_list|,
name|EventMeetingRow
name|event
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|getOperation
argument_list|(
name|OperationType
operator|.
name|Approve
argument_list|)
operator|.
name|execute
argument_list|(
name|EventMeetingTable
operator|.
name|this
argument_list|,
name|OperationType
operator|.
name|Inquire
argument_list|,
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|allowNoSelection
parameter_list|()
block|{
return|return
name|getMode
argument_list|()
operator|.
name|isAllowApproveAll
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hTimes
operator|.
name|addOperation
argument_list|(
operator|new
name|EventMeetingOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
operator|(
name|hasSelection
argument_list|()
condition|?
name|MESSAGES
operator|.
name|opRejectSelectedMeetings
argument_list|()
else|:
name|MESSAGES
operator|.
name|opRejectAllMeetings
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|(
name|EventMeetingRow
name|row
parameter_list|)
block|{
return|return
name|hasOperation
argument_list|(
name|OperationType
operator|.
name|Reject
argument_list|)
operator|&&
name|row
operator|.
name|isCanApprove
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|int
name|row
parameter_list|,
name|EventMeetingRow
name|event
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|getOperation
argument_list|(
name|OperationType
operator|.
name|Approve
argument_list|)
operator|.
name|execute
argument_list|(
name|EventMeetingTable
operator|.
name|this
argument_list|,
name|OperationType
operator|.
name|Reject
argument_list|,
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|allowNoSelection
parameter_list|()
block|{
return|return
name|getMode
argument_list|()
operator|.
name|isAllowApproveAll
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hTimes
operator|.
name|addOperation
argument_list|(
operator|new
name|EventMeetingOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|Integer
name|so
init|=
literal|null
decl_stmt|,
name|eo
init|=
literal|null
decl_stmt|;
name|boolean
name|soSame
init|=
literal|true
decl_stmt|,
name|eoSame
init|=
literal|true
decl_stmt|;
for|for
control|(
name|EventMeetingRow
name|r
range|:
name|data
argument_list|()
control|)
block|{
name|MeetingInterface
name|m
init|=
name|r
operator|.
name|getMeeting
argument_list|()
decl_stmt|;
if|if
condition|(
name|so
operator|==
literal|null
condition|)
name|so
operator|=
name|m
operator|.
name|getStartOffset
argument_list|()
expr_stmt|;
if|else if
condition|(
name|m
operator|.
name|getStartOffset
argument_list|()
operator|!=
name|so
condition|)
name|soSame
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|eo
operator|==
literal|null
condition|)
name|eo
operator|=
operator|-
name|m
operator|.
name|getEndOffset
argument_list|()
expr_stmt|;
if|else if
condition|(
operator|-
name|m
operator|.
name|getEndOffset
argument_list|()
operator|!=
name|eo
condition|)
name|eoSame
operator|=
literal|false
expr_stmt|;
block|}
specifier|final
name|UniTimeDialogBox
name|dialog
init|=
operator|new
name|UniTimeDialogBox
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SimpleForm
name|simple
init|=
operator|new
name|SimpleForm
argument_list|()
decl_stmt|;
name|simple
operator|.
name|removeStyleName
argument_list|(
literal|"unitime-NotPrintableBottomLine"
argument_list|)
expr_stmt|;
specifier|final
name|NumberBox
name|setupTime
init|=
operator|new
name|NumberBox
argument_list|()
decl_stmt|;
if|if
condition|(
name|soSame
operator|&&
name|so
operator|!=
literal|null
condition|)
name|setupTime
operator|.
name|setValue
argument_list|(
name|so
argument_list|)
expr_stmt|;
name|simple
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propSetupTime
argument_list|()
argument_list|,
name|setupTime
argument_list|)
expr_stmt|;
specifier|final
name|NumberBox
name|teardownTime
init|=
operator|new
name|NumberBox
argument_list|()
decl_stmt|;
if|if
condition|(
name|eoSame
operator|&&
name|eo
operator|!=
literal|null
condition|)
name|teardownTime
operator|.
name|setValue
argument_list|(
name|eo
argument_list|)
expr_stmt|;
name|simple
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propTeardownTime
argument_list|()
argument_list|,
name|teardownTime
argument_list|)
expr_stmt|;
name|UniTimeHeaderPanel
name|footer
init|=
operator|new
name|UniTimeHeaderPanel
argument_list|()
decl_stmt|;
name|footer
operator|.
name|addButton
argument_list|(
literal|"ok"
argument_list|,
name|MESSAGES
operator|.
name|buttonOk
argument_list|()
argument_list|,
literal|75
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|int
name|colSetup
init|=
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colSetupTimeShort
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
decl_stmt|;
name|int
name|colTear
init|=
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colTeardownTimeShort
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
decl_stmt|;
name|int
name|colPubl
init|=
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colPublishedTime
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|row
range|:
name|rows
argument_list|()
control|)
block|{
name|MeetingInterface
name|meeting
init|=
name|getData
argument_list|(
name|row
argument_list|)
operator|.
name|getMeeting
argument_list|()
decl_stmt|;
if|if
condition|(
name|setupTime
operator|.
name|toInteger
argument_list|()
operator|!=
literal|null
condition|)
name|meeting
operator|.
name|setStartOffset
argument_list|(
name|setupTime
operator|.
name|toInteger
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|teardownTime
operator|.
name|toInteger
argument_list|()
operator|!=
literal|null
condition|)
name|meeting
operator|.
name|setEndOffset
argument_list|(
operator|-
name|teardownTime
operator|.
name|toInteger
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|NumberCell
operator|)
name|getWidget
argument_list|(
name|row
argument_list|,
name|colSetup
argument_list|)
operator|)
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|meeting
operator|.
name|getStartOffset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|NumberCell
operator|)
name|getWidget
argument_list|(
name|row
argument_list|,
name|colTear
argument_list|)
operator|)
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
operator|-
name|meeting
operator|.
name|getEndOffset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Label
operator|)
name|getWidget
argument_list|(
name|row
argument_list|,
name|colPubl
argument_list|)
operator|)
operator|.
name|setText
argument_list|(
name|meeting
operator|.
name|getMeetingTime
argument_list|(
name|CONSTANTS
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|dialog
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|footer
operator|.
name|addButton
argument_list|(
literal|"cancel"
argument_list|,
name|MESSAGES
operator|.
name|buttonCancel
argument_list|()
argument_list|,
literal|75
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|dialog
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|simple
operator|.
name|addBottomRow
argument_list|(
name|footer
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setWidget
argument_list|(
name|simple
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|dlgChangeOffsets
argument_list|()
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setEscapeToHide
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|center
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opChangeOffsets
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|(
name|EventMeetingRow
name|data
parameter_list|)
block|{
return|return
name|isEditable
argument_list|()
operator|&&
name|data
operator|.
name|getMeeting
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
name|data
operator|.
name|getMeeting
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
literal|null
operator|||
name|data
operator|.
name|getMeeting
argument_list|()
operator|.
name|isCanEdit
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|int
name|row
parameter_list|,
name|EventMeetingRow
name|data
parameter_list|)
block|{
block|}
block|}
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hName
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colName
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hName
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hSection
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colSection
argument_list|()
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hSection
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hType
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colType
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hType
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hTitle
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colTitle
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hTitle
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hNote
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colNote
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hNote
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hDate
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colDate
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hDate
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hTimePub
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colPublishedTime
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hTimePub
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hTimeAll
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colAllocatedTime
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hTimeAll
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hTimeSetup
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colSetupTimeShort
argument_list|()
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hTimeSetup
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hTimeTeardown
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colTeardownTimeShort
argument_list|()
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hTimeTeardown
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hLocation
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colLocation
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hLocation
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hCapacity
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colCapacity
argument_list|()
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hCapacity
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hEnrollment
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colEnrollment
argument_list|()
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hEnrollment
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hLimit
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colLimit
argument_list|()
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hLimit
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hSponsor
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colSponsorOrInstructor
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hSponsor
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hContact
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colMainContact
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hContact
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hApproval
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colApproval
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hApproval
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
literal|null
argument_list|,
name|header
argument_list|)
expr_stmt|;
specifier|final
name|Operation
name|titleOp
init|=
name|addHideOperation
argument_list|(
name|hTitle
argument_list|,
name|EventFlag
operator|.
name|SHOW_TITLE
argument_list|,
operator|new
name|Check
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isChecked
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
argument_list|)
decl_stmt|;
specifier|final
name|Operation
name|noteOp
init|=
name|addHideOperation
argument_list|(
name|hNote
argument_list|,
name|EventFlag
operator|.
name|SHOW_NOTE
argument_list|,
operator|new
name|Check
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isChecked
parameter_list|()
block|{
return|return
operator|!
name|titleOp
operator|.
name|isApplicable
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|addHideOperation
argument_list|(
name|hTimePub
argument_list|,
name|EventFlag
operator|.
name|SHOW_PUBLISHED_TIME
argument_list|,
operator|new
name|Check
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isChecked
parameter_list|()
block|{
return|return
operator|!
name|titleOp
operator|.
name|isApplicable
argument_list|()
operator|&&
operator|!
name|noteOp
operator|.
name|isApplicable
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addHideOperation
argument_list|(
name|hTimeAll
argument_list|,
name|EventFlag
operator|.
name|SHOW_ALLOCATED_TIME
argument_list|)
expr_stmt|;
name|addHideOperation
argument_list|(
name|hTimeSetup
argument_list|,
name|EventFlag
operator|.
name|SHOW_SETUP_TIME
argument_list|)
expr_stmt|;
name|addHideOperation
argument_list|(
name|hTimeTeardown
argument_list|,
name|EventFlag
operator|.
name|SHOW_TEARDOWN_TIME
argument_list|)
expr_stmt|;
name|addHideOperation
argument_list|(
name|hCapacity
argument_list|,
name|EventFlag
operator|.
name|SHOW_CAPACITY
argument_list|)
expr_stmt|;
name|addHideOperation
argument_list|(
name|hEnrollment
argument_list|,
name|EventFlag
operator|.
name|SHOW_ENROLLMENT
argument_list|)
expr_stmt|;
name|addHideOperation
argument_list|(
name|hLimit
argument_list|,
name|EventFlag
operator|.
name|SHOW_LIMIT
argument_list|)
expr_stmt|;
name|addHideOperation
argument_list|(
name|hSponsor
argument_list|,
name|EventFlag
operator|.
name|SHOW_SPONSOR
argument_list|)
expr_stmt|;
name|addHideOperation
argument_list|(
name|hContact
argument_list|,
name|EventFlag
operator|.
name|SHOW_MAIN_CONTACT
argument_list|)
expr_stmt|;
name|addHideOperation
argument_list|(
name|hApproval
argument_list|,
name|EventFlag
operator|.
name|SHOW_APPROVAL
argument_list|)
expr_stmt|;
name|addSortByOperation
argument_list|(
name|hName
argument_list|,
name|EventMeetingSortBy
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|addSortByOperation
argument_list|(
name|hSection
argument_list|,
name|EventMeetingSortBy
operator|.
name|SECTION
argument_list|)
expr_stmt|;
name|addSortByOperation
argument_list|(
name|hType
argument_list|,
name|EventMeetingSortBy
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|addSortByOperation
argument_list|(
name|hTitle
argument_list|,
name|EventMeetingSortBy
operator|.
name|TITLE
argument_list|)
expr_stmt|;
name|addSortByOperation
argument_list|(
name|hNote
argument_list|,
name|EventMeetingSortBy
operator|.
name|NOTE
argument_list|)
expr_stmt|;
name|addSortByOperation
argument_list|(
name|hDate
argument_list|,
name|EventMeetingSortBy
operator|.
name|DATE
argument_list|)
expr_stmt|;
name|addSortByOperation
argument_list|(
name|hTimePub
argument_list|,
name|EventMeetingSortBy
operator|.
name|PUBLISHED_TIME
argument_list|)
expr_stmt|;
name|addSortByOperation
argument_list|(
name|hTimeAll
argument_list|,
name|EventMeetingSortBy
operator|.
name|ALLOCATED_TIME
argument_list|)
expr_stmt|;
name|addSortByOperation
argument_list|(
name|hTimeSetup
argument_list|,
name|EventMeetingSortBy
operator|.
name|SETUP_TIME
argument_list|)
expr_stmt|;
name|addSortByOperation
argument_list|(
name|hTimeTeardown
argument_list|,
name|EventMeetingSortBy
operator|.
name|TEARDOWN_TIME
argument_list|)
expr_stmt|;
name|addSortByOperation
argument_list|(
name|hLocation
argument_list|,
name|EventMeetingSortBy
operator|.
name|LOCATION
argument_list|)
expr_stmt|;
name|addSortByOperation
argument_list|(
name|hCapacity
argument_list|,
name|EventMeetingSortBy
operator|.
name|CAPACITY
argument_list|)
expr_stmt|;
name|addSortByOperation
argument_list|(
name|hEnrollment
argument_list|,
name|EventMeetingSortBy
operator|.
name|ENROLLMENT
argument_list|)
expr_stmt|;
name|addSortByOperation
argument_list|(
name|hLimit
argument_list|,
name|EventMeetingSortBy
operator|.
name|LIMIT
argument_list|)
expr_stmt|;
name|addSortByOperation
argument_list|(
name|hSponsor
argument_list|,
name|EventMeetingSortBy
operator|.
name|SPONSOR
argument_list|)
expr_stmt|;
name|addSortByOperation
argument_list|(
name|hContact
argument_list|,
name|EventMeetingSortBy
operator|.
name|MAIN_CONTACT
argument_list|)
expr_stmt|;
name|addSortByOperation
argument_list|(
name|hApproval
argument_list|,
name|EventMeetingSortBy
operator|.
name|APPROVAL
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getCellCount
argument_list|(
literal|0
argument_list|)
condition|;
name|i
operator|++
control|)
name|getCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
literal|0
argument_list|,
name|i
argument_list|,
literal|"unitime-ClickableTableHeaderNoBorderLine"
argument_list|)
expr_stmt|;
name|resetColumnVisibility
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Mode
name|getMode
parameter_list|()
block|{
return|return
name|iMode
return|;
block|}
specifier|public
name|void
name|setMode
parameter_list|(
name|Mode
name|mode
parameter_list|)
block|{
name|iMode
operator|=
name|mode
expr_stmt|;
block|}
specifier|public
name|void
name|setSelectable
parameter_list|(
name|boolean
name|selectable
parameter_list|)
block|{
name|iSelectable
operator|=
name|selectable
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSelectable
parameter_list|()
block|{
return|return
name|iSelectable
return|;
block|}
specifier|public
name|void
name|setEditable
parameter_list|(
name|boolean
name|editable
parameter_list|)
block|{
name|iEditable
operator|=
name|editable
expr_stmt|;
block|}
specifier|public
name|boolean
name|isEditable
parameter_list|()
block|{
return|return
name|iEditable
return|;
block|}
specifier|public
name|MeetingFilter
name|getMeetingFilter
parameter_list|()
block|{
return|return
name|iMeetingFilter
return|;
block|}
specifier|public
name|void
name|setMeetingFilter
parameter_list|(
name|MeetingFilter
name|filter
parameter_list|)
block|{
name|iMeetingFilter
operator|=
name|filter
expr_stmt|;
block|}
specifier|public
name|void
name|setShowMainContact
parameter_list|(
name|boolean
name|show
parameter_list|)
block|{
name|iShowMainContact
operator|=
name|show
expr_stmt|;
block|}
specifier|public
name|boolean
name|isShowMainContact
parameter_list|()
block|{
return|return
name|iShowMainContact
return|;
block|}
specifier|public
name|void
name|setOperation
parameter_list|(
name|OperationType
name|operation
parameter_list|,
name|Implementation
name|command
parameter_list|)
block|{
if|if
condition|(
name|command
operator|==
literal|null
condition|)
name|iImplementations
operator|.
name|remove
argument_list|(
name|operation
argument_list|)
expr_stmt|;
else|else
name|iImplementations
operator|.
name|put
argument_list|(
name|operation
argument_list|,
name|command
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Implementation
name|getOperation
parameter_list|(
name|OperationType
name|operation
parameter_list|)
block|{
return|return
name|iImplementations
operator|.
name|get
argument_list|(
name|operation
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|hasOperation
parameter_list|(
name|OperationType
name|operation
parameter_list|)
block|{
return|return
name|getOperation
argument_list|(
name|operation
argument_list|)
operator|!=
literal|null
return|;
block|}
specifier|protected
name|boolean
name|isSelectable
parameter_list|(
name|EventMeetingRow
name|data
parameter_list|)
block|{
return|return
operator|(
name|hasOperation
argument_list|(
name|OperationType
operator|.
name|Approve
argument_list|)
operator|&&
name|data
operator|.
name|isCanApprove
argument_list|()
operator|)
operator|||
operator|(
name|isEditable
argument_list|()
operator|&&
name|data
operator|.
name|isEditable
argument_list|()
operator|)
return|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|EventMeetingRow
name|data
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getMode
argument_list|()
operator|.
name|isShowMeetings
argument_list|()
operator|&&
name|data
operator|.
name|getMeetings
argument_list|(
name|getMeetingFilter
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|List
argument_list|<
name|Widget
argument_list|>
name|row
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
name|EventInterface
name|event
init|=
name|data
operator|.
name|getEvent
argument_list|()
decl_stmt|;
name|MeetingInterface
name|meeting
init|=
name|data
operator|.
name|getMeeting
argument_list|()
decl_stmt|;
name|MeetingConflictInterface
name|conflict
init|=
operator|(
name|meeting
operator|instanceof
name|MeetingConflictInterface
condition|?
operator|(
name|MeetingConflictInterface
operator|)
name|meeting
else|:
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|hasParent
argument_list|()
condition|)
block|{
if|if
condition|(
name|conflict
operator|!=
literal|null
operator|&&
name|conflict
operator|.
name|getType
argument_list|()
operator|==
name|EventType
operator|.
name|Message
condition|)
name|row
operator|.
name|add
argument_list|(
operator|new
name|CenterredCell
argument_list|(
name|MESSAGES
operator|.
name|signMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|row
operator|.
name|add
argument_list|(
operator|new
name|CenterredCell
argument_list|(
name|MESSAGES
operator|.
name|signConflict
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|isSelectable
argument_list|()
condition|)
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|MESSAGES
operator|.
name|signSelected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|isSelectable
argument_list|(
name|data
argument_list|)
condition|)
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|CheckBoxCell
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isColumnVisible
argument_list|(
literal|0
argument_list|)
condition|)
name|setColumnVisible
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
literal|"&nbsp;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|!=
literal|null
operator|&&
name|event
operator|.
name|getType
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|event
operator|.
name|hasCourseNames
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|name
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|section
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|title
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|EventType
operator|.
name|Course
condition|)
block|{
name|name
operator|.
name|add
argument_list|(
name|event
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|section
operator|.
name|add
argument_list|(
literal|"&nbsp;"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|cn
range|:
name|event
operator|.
name|getCourseNames
argument_list|()
control|)
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|name
operator|.
name|add
argument_list|(
name|cn
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|event
operator|.
name|getInstruction
argument_list|()
operator|!=
literal|null
operator|||
name|event
operator|.
name|getType
argument_list|()
operator|==
name|EventType
operator|.
name|Course
condition|)
block|{
name|name
operator|.
name|add
argument_list|(
literal|"<span class='no-control'>"
operator|+
name|cn
operator|+
literal|"</span>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|name
operator|.
name|add
argument_list|(
name|cn
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|hasExternalIds
argument_list|()
condition|)
for|for
control|(
name|String
name|ex
range|:
name|event
operator|.
name|getExternalIds
argument_list|()
control|)
block|{
if|if
condition|(
name|section
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|section
operator|.
name|add
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|event
operator|.
name|getInstruction
argument_list|()
operator|!=
literal|null
operator|||
name|event
operator|.
name|getType
argument_list|()
operator|==
name|EventType
operator|.
name|Course
condition|)
block|{
name|section
operator|.
name|add
argument_list|(
literal|"<span class='no-control'>"
operator|+
name|ex
operator|+
literal|"</span>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|section
operator|.
name|add
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|event
operator|.
name|hasSectionNumber
argument_list|()
condition|)
block|{
name|section
operator|.
name|clear
argument_list|()
expr_stmt|;
name|section
operator|.
name|add
argument_list|(
name|event
operator|.
name|getSectionNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|hasCourseTitles
argument_list|()
condition|)
block|{
name|String
name|last
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|ct
range|:
name|event
operator|.
name|getCourseTitles
argument_list|()
control|)
block|{
if|if
condition|(
name|last
operator|!=
literal|null
operator|&&
operator|!
name|last
operator|.
name|isEmpty
argument_list|()
operator|&&
name|last
operator|.
name|equals
argument_list|(
name|ct
argument_list|)
condition|)
name|ct
operator|=
literal|""
expr_stmt|;
else|else
name|last
operator|=
name|ct
expr_stmt|;
if|if
condition|(
name|title
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|title
operator|.
name|add
argument_list|(
name|ct
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|event
operator|.
name|getInstruction
argument_list|()
operator|!=
literal|null
operator|||
name|event
operator|.
name|getType
argument_list|()
operator|==
name|EventType
operator|.
name|Course
condition|)
block|{
name|title
operator|.
name|add
argument_list|(
literal|"<span class='no-control'>"
operator|+
name|ct
operator|+
literal|"</span>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|title
operator|.
name|add
argument_list|(
name|ct
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|row
operator|.
name|add
argument_list|(
operator|new
name|MultiLineCell
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|MultiLineNumberCell
argument_list|(
name|section
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|event
operator|.
name|getInstruction
argument_list|()
operator|==
literal|null
condition|?
name|event
operator|.
name|getType
argument_list|()
operator|.
name|getAbbreviation
argument_list|(
name|CONSTANTS
argument_list|)
else|:
name|event
operator|.
name|getInstruction
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|MultiLineCell
argument_list|(
name|title
argument_list|)
argument_list|)
expr_stmt|;
name|P
name|note
init|=
operator|new
name|P
argument_list|(
literal|"note"
argument_list|)
decl_stmt|;
name|note
operator|.
name|setHTML
argument_list|(
name|event
operator|.
name|hasEventNote
argument_list|()
operator|&&
name|getMode
argument_list|()
operator|.
name|isShowEventDetails
argument_list|()
condition|?
name|event
operator|.
name|getEventNote
argument_list|()
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|"<br>"
argument_list|)
else|:
literal|"&nbsp;"
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|hasNotes
argument_list|()
condition|)
name|note
operator|.
name|setTitle
argument_list|(
name|event
operator|.
name|getNotes
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
name|note
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|section
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|isColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colSection
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|)
condition|)
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colSection
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|title
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|isColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colTitle
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|)
operator|&&
name|EventCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|EventFlag
operator|.
name|SHOW_TITLE
argument_list|)
operator|&&
name|getMode
argument_list|()
operator|.
name|isShowOptionalColumns
argument_list|()
condition|)
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colTitle
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|hasNotes
argument_list|()
operator|&&
operator|!
name|isColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colNote
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|)
operator|&&
name|EventCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|EventFlag
operator|.
name|SHOW_NOTE
argument_list|)
operator|&&
name|getMode
argument_list|()
operator|.
name|isShowOptionalColumns
argument_list|()
condition|)
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colNote
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|event
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
literal|"&nbsp;"
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|event
operator|.
name|getType
argument_list|()
operator|.
name|getAbbreviation
argument_list|(
name|CONSTANTS
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
literal|"&nbsp;"
argument_list|)
argument_list|)
expr_stmt|;
name|P
name|note
init|=
operator|new
name|P
argument_list|(
literal|"note"
argument_list|)
decl_stmt|;
name|note
operator|.
name|setHTML
argument_list|(
name|event
operator|.
name|hasEventNote
argument_list|()
operator|&&
name|getMode
argument_list|()
operator|.
name|isShowEventDetails
argument_list|()
condition|?
name|event
operator|.
name|getEventNote
argument_list|()
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|"<br>"
argument_list|)
else|:
literal|"&nbsp;"
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|hasNotes
argument_list|()
condition|)
name|note
operator|.
name|setTitle
argument_list|(
name|event
operator|.
name|getNotes
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
name|note
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|hasNotes
argument_list|()
operator|&&
operator|!
name|isColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colNote
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|)
operator|&&
name|EventCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|EventFlag
operator|.
name|SHOW_NOTE
argument_list|)
operator|&&
name|getMode
argument_list|()
operator|.
name|isShowOptionalColumns
argument_list|()
condition|)
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colNote
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|conflict
operator|!=
literal|null
condition|)
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|conflict
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
literal|"&nbsp;"
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|conflict
operator|.
name|getType
argument_list|()
operator|.
name|getAbbreviation
argument_list|(
name|CONSTANTS
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
literal|"&nbsp;"
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
literal|"&nbsp;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|approval
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|meeting
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|conflict
operator|!=
literal|null
operator|&&
operator|(
name|conflict
operator|.
name|getType
argument_list|()
operator|==
name|EventType
operator|.
name|Message
operator|||
name|conflict
operator|.
name|getType
argument_list|()
operator|==
name|EventType
operator|.
name|Unavailabile
operator|)
operator|&&
name|conflict
operator|.
name|isAllDay
argument_list|()
condition|)
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|HTMLWithColSpan
argument_list|(
name|conflict
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|get
argument_list|(
name|row
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|addStyleName
argument_list|(
literal|"indent"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|conflict
operator|!=
literal|null
condition|)
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|conflict
operator|.
name|getType
argument_list|()
operator|==
name|EventType
operator|.
name|Unavailabile
operator|||
name|conflict
operator|.
name|getType
argument_list|()
operator|==
name|EventType
operator|.
name|Message
condition|?
name|conflict
operator|.
name|getName
argument_list|()
else|:
name|MESSAGES
operator|.
name|conflictWith
argument_list|(
name|conflict
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|get
argument_list|(
name|row
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|addStyleName
argument_list|(
literal|"indent"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|meeting
operator|.
name|isArrangeHours
argument_list|()
condition|?
name|CONSTANTS
operator|.
name|arrangeHours
argument_list|()
else|:
name|sDateFormatMeeting
operator|.
name|format
argument_list|(
name|meeting
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|meeting
operator|.
name|getMeetingTime
argument_list|(
name|CONSTANTS
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|meeting
operator|.
name|getAllocatedTime
argument_list|(
name|CONSTANTS
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|NumberCell
argument_list|(
name|meeting
operator|.
name|getStartOffset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|NumberCell
argument_list|(
operator|-
name|meeting
operator|.
name|getEndOffset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|meeting
operator|.
name|getLocation
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|data
operator|.
name|hasParent
argument_list|()
operator|&&
name|data
operator|.
name|getParent
argument_list|()
operator|.
name|hasMeeting
argument_list|()
operator|&&
name|data
operator|.
name|getParent
argument_list|()
operator|.
name|getMeeting
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|data
operator|.
name|getParent
argument_list|()
operator|.
name|getMeeting
argument_list|()
operator|.
name|getLocationNameWithHint
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|NumberCell
argument_list|(
name|data
operator|.
name|getParent
argument_list|()
operator|.
name|getMeeting
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|.
name|getSize
argument_list|()
operator|==
literal|null
condition|?
name|MESSAGES
operator|.
name|notApplicable
argument_list|()
else|:
name|data
operator|.
name|getParent
argument_list|()
operator|.
name|getMeeting
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|.
name|getSize
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|meeting
operator|.
name|getLocationNameWithHint
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|NumberCell
argument_list|(
name|meeting
operator|.
name|getLocation
argument_list|()
operator|.
name|getSize
argument_list|()
operator|==
literal|null
condition|?
name|MESSAGES
operator|.
name|notApplicable
argument_list|()
else|:
name|meeting
operator|.
name|getLocation
argument_list|()
operator|.
name|getSize
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|meeting
operator|.
name|isPast
argument_list|()
operator|||
operator|(
name|data
operator|.
name|hasParent
argument_list|()
operator|&&
name|data
operator|.
name|getParent
argument_list|()
operator|.
name|hasMeeting
argument_list|()
operator|&&
name|data
operator|.
name|getParent
argument_list|()
operator|.
name|getMeeting
argument_list|()
operator|.
name|isPast
argument_list|()
operator|)
condition|)
for|for
control|(
name|int
name|i
init|=
name|row
operator|.
name|size
argument_list|()
operator|-
literal|7
init|;
name|i
operator|<
name|row
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|row
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|addStyleName
argument_list|(
literal|"past-meeting"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
index|[]
name|mtgs
init|=
operator|new
name|String
index|[]
block|{
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
decl_stmt|;
name|String
name|prevApproval
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|prev
init|=
literal|null
decl_stmt|;
name|boolean
name|prevPast
init|=
literal|false
decl_stmt|;
for|for
control|(
name|MultiMeetingInterface
name|m
range|:
name|EventInterface
operator|.
name|getMultiMeetings
argument_list|(
name|data
operator|.
name|getMeetings
argument_list|(
name|getMeetingFilter
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
control|)
block|{
name|String
index|[]
name|mtg
init|=
operator|new
name|String
index|[]
block|{
name|m
operator|.
name|isArrangeHours
argument_list|()
condition|?
name|CONSTANTS
operator|.
name|arrangeHours
argument_list|()
else|:
operator|(
name|m
operator|.
name|getDays
argument_list|(
name|CONSTANTS
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|m
operator|.
name|getNrMeetings
argument_list|()
operator|==
literal|1
condition|?
name|sDateFormatLong
operator|.
name|format
argument_list|(
name|m
operator|.
name|getFirstMeetingDate
argument_list|()
argument_list|)
else|:
name|sDateFormatShort
operator|.
name|format
argument_list|(
name|m
operator|.
name|getFirstMeetingDate
argument_list|()
argument_list|)
operator|+
literal|" - "
operator|+
name|sDateFormatLong
operator|.
name|format
argument_list|(
name|m
operator|.
name|getLastMeetingDate
argument_list|()
argument_list|)
operator|)
operator|)
block|,
name|m
operator|.
name|getMeetings
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|getMeetingTime
argument_list|(
name|CONSTANTS
argument_list|)
block|,
name|m
operator|.
name|getMeetings
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|getAllocatedTime
argument_list|(
name|CONSTANTS
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|m
operator|.
name|getMeetings
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|getStartOffset
argument_list|()
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
operator|-
name|m
operator|.
name|getMeetings
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|getEndOffset
argument_list|()
argument_list|)
block|,
name|m
operator|.
name|getLocationNameWithHint
argument_list|()
block|,
operator|(
name|m
operator|.
name|getMeetings
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|m
operator|.
name|getMeetings
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|.
name|hasSize
argument_list|()
condition|?
name|m
operator|.
name|getMeetings
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|.
name|getSize
argument_list|()
operator|.
name|toString
argument_list|()
else|:
name|MESSAGES
operator|.
name|notApplicable
argument_list|()
operator|)
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mtgs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|mtgs
index|[
name|i
index|]
operator|+=
operator|(
name|mtgs
index|[
name|i
index|]
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"<br>"
operator|)
operator|+
operator|(
name|prev
operator|!=
literal|null
operator|&&
name|prevPast
operator|==
name|m
operator|.
name|isPast
argument_list|()
operator|&&
name|prev
index|[
name|i
operator|==
literal|6
condition|?
name|i
operator|-
literal|1
else|:
name|i
index|]
operator|.
name|equals
argument_list|(
name|mtg
index|[
name|i
operator|==
literal|6
condition|?
name|i
operator|-
literal|1
else|:
name|i
index|]
argument_list|)
condition|?
literal|""
else|:
operator|(
operator|(
name|m
operator|.
name|isPast
argument_list|()
condition|?
literal|"<span class='past-meeting'>"
else|:
literal|""
operator|)
operator|+
name|mtg
index|[
name|i
index|]
operator|+
operator|(
name|m
operator|.
name|isPast
argument_list|()
condition|?
literal|"</span>"
else|:
literal|""
operator|)
operator|)
operator|)
expr_stmt|;
block|}
name|approval
operator|+=
operator|(
name|approval
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"<br>"
operator|)
operator|+
operator|(
name|prev
operator|!=
literal|null
operator|&&
name|prevPast
operator|==
name|m
operator|.
name|isPast
argument_list|()
operator|&&
name|prevApproval
operator|.
name|equals
argument_list|(
name|m
operator|.
name|isApproved
argument_list|()
condition|?
name|sDateFormat
operator|.
name|format
argument_list|(
name|m
operator|.
name|getApprovalDate
argument_list|()
argument_list|)
else|:
literal|""
argument_list|)
condition|?
literal|""
else|:
operator|(
name|m
operator|.
name|isApproved
argument_list|()
condition|?
name|m
operator|.
name|isPast
argument_list|()
condition|?
literal|"<span class='past-meeting'>"
operator|+
name|sDateFormat
operator|.
name|format
argument_list|(
name|m
operator|.
name|getApprovalDate
argument_list|()
argument_list|)
operator|+
literal|"</span>"
else|:
name|sDateFormat
operator|.
name|format
argument_list|(
name|m
operator|.
name|getApprovalDate
argument_list|()
argument_list|)
else|:
name|m
operator|.
name|getFirstMeetingDate
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|m
operator|.
name|isPast
argument_list|()
condition|?
literal|"<span class='not-approved-past'>"
operator|+
name|MESSAGES
operator|.
name|approvalNotApprovedPast
argument_list|()
operator|+
literal|"</span>"
else|:
literal|"<span class='not-approved'>"
operator|+
name|MESSAGES
operator|.
name|approvalNotApproved
argument_list|()
operator|+
literal|"</span>"
operator|)
operator|)
expr_stmt|;
name|prev
operator|=
name|mtg
expr_stmt|;
name|prevPast
operator|=
name|m
operator|.
name|isPast
argument_list|()
expr_stmt|;
name|prevApproval
operator|=
operator|(
name|m
operator|.
name|isApproved
argument_list|()
condition|?
name|sDateFormat
operator|.
name|format
argument_list|(
name|m
operator|.
name|getApprovalDate
argument_list|()
argument_list|)
else|:
literal|""
operator|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mtgs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
literal|3
operator|||
name|i
operator|==
literal|4
operator|||
name|i
operator|==
literal|6
condition|)
name|row
operator|.
name|add
argument_list|(
operator|new
name|NumberCell
argument_list|(
name|mtgs
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|row
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|mtgs
index|[
name|i
index|]
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|event
operator|!=
literal|null
operator|&&
name|event
operator|.
name|hasEnrollment
argument_list|()
operator|&&
name|iShowMainContact
condition|)
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|NumberCell
argument_list|(
name|event
operator|.
name|getEnrollment
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
literal|"&nbsp;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|!=
literal|null
operator|&&
name|event
operator|.
name|hasMaxCapacity
argument_list|()
operator|&&
name|iShowMainContact
condition|)
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|NumberCell
argument_list|(
name|event
operator|.
name|getMaxCapacity
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
literal|"&nbsp;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|!=
literal|null
operator|&&
name|event
operator|.
name|hasInstructors
argument_list|()
condition|)
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|event
operator|.
name|getInstructorNames
argument_list|(
literal|"<br>"
argument_list|,
name|MESSAGES
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|event
operator|!=
literal|null
operator|&&
name|event
operator|.
name|hasSponsor
argument_list|()
condition|)
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|event
operator|.
name|getSponsor
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
literal|"&nbsp;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|!=
literal|null
operator|&&
name|iShowMainContact
condition|)
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|event
operator|.
name|hasContact
argument_list|()
condition|?
name|event
operator|.
name|getContact
argument_list|()
operator|.
name|getName
argument_list|(
name|MESSAGES
argument_list|)
else|:
literal|"&nbsp;"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colMainContact
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|)
operator|&&
name|EventCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|EventFlag
operator|.
name|SHOW_MAIN_CONTACT
argument_list|)
operator|&&
name|getMode
argument_list|()
operator|.
name|isShowOptionalColumns
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|event
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|Course
case|:
case|case
name|Special
case|:
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colMainContact
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
literal|"&nbsp;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|meeting
operator|!=
literal|null
condition|)
block|{
name|boolean
name|past
init|=
name|meeting
operator|.
name|isPast
argument_list|()
operator|||
operator|(
name|data
operator|.
name|hasParent
argument_list|()
operator|&&
name|data
operator|.
name|getParent
argument_list|()
operator|.
name|hasMeeting
argument_list|()
operator|&&
name|data
operator|.
name|getParent
argument_list|()
operator|.
name|getMeeting
argument_list|()
operator|.
name|isPast
argument_list|()
operator|)
decl_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|conflict
operator|!=
literal|null
operator|&&
operator|(
name|conflict
operator|.
name|getType
argument_list|()
operator|==
name|EventType
operator|.
name|Unavailabile
operator|||
name|conflict
operator|.
name|getType
argument_list|()
operator|==
name|EventType
operator|.
name|Message
operator|)
condition|?
literal|""
else|:
name|meeting
operator|.
name|isDelete
argument_list|()
condition|?
literal|"<span class='deleted-meeting'>"
operator|+
name|MESSAGES
operator|.
name|approvalDeleted
argument_list|()
operator|+
literal|"</span>"
else|:
name|meeting
operator|.
name|getMeetingDate
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|meeting
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|?
name|event
operator|!=
literal|null
operator|&&
name|event
operator|.
name|getType
argument_list|()
operator|==
name|EventType
operator|.
name|Unavailabile
condition|?
literal|"<span class='new-meeting'>"
operator|+
name|MESSAGES
operator|.
name|approvalNewUnavailabiliyMeeting
argument_list|()
operator|+
literal|"</span>"
else|:
name|meeting
operator|.
name|isCanApprove
argument_list|()
condition|?
literal|"<span class='new-approved-meeting'>"
operator|+
name|MESSAGES
operator|.
name|approvelNewApprovedMeeting
argument_list|()
operator|+
literal|"</span>"
else|:
literal|"<span class='new-meeting'>"
operator|+
name|MESSAGES
operator|.
name|approvalNewMeeting
argument_list|()
operator|+
literal|"</span>"
else|:
name|meeting
operator|.
name|isApproved
argument_list|()
condition|?
name|past
condition|?
literal|"<span class='past-meeting'>"
operator|+
name|sDateFormat
operator|.
name|format
argument_list|(
name|meeting
operator|.
name|getApprovalDate
argument_list|()
argument_list|)
operator|+
literal|"</span>"
else|:
name|sDateFormat
operator|.
name|format
argument_list|(
name|meeting
operator|.
name|getApprovalDate
argument_list|()
argument_list|)
else|:
name|past
condition|?
literal|"<span class='not-approved-past'>"
operator|+
name|MESSAGES
operator|.
name|approvalNotApprovedPast
argument_list|()
operator|+
literal|"</span>"
else|:
literal|"<span class='not-approved'>"
operator|+
name|MESSAGES
operator|.
name|approvalNotApproved
argument_list|()
operator|+
literal|"</span>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|approval
operator|==
literal|null
condition|?
literal|""
else|:
name|approval
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|getMode
argument_list|()
operator|.
name|isMustShowApproval
argument_list|()
operator|&&
operator|!
name|isColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colApproval
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|)
operator|&&
name|EventCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|EventFlag
operator|.
name|SHOW_APPROVAL
argument_list|)
condition|)
block|{
if|if
condition|(
name|event
operator|!=
literal|null
condition|)
switch|switch
condition|(
name|event
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|Course
case|:
case|case
name|Special
case|:
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colApproval
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|rowNumber
init|=
name|addRow
argument_list|(
name|data
argument_list|,
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|meeting
operator|!=
literal|null
condition|)
name|getRowFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
name|rowNumber
argument_list|,
name|meeting
operator|.
name|isDelete
argument_list|()
condition|?
literal|"deleted-row"
else|:
literal|"meeting-row"
argument_list|)
expr_stmt|;
if|else if
condition|(
name|event
operator|!=
literal|null
condition|)
name|getRowFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
name|rowNumber
argument_list|,
literal|"event-row"
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|hasParent
argument_list|()
condition|)
block|{
name|row
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|addStyleName
argument_list|(
literal|"indent"
argument_list|)
expr_stmt|;
if|if
condition|(
name|conflict
operator|!=
literal|null
operator|&&
name|conflict
operator|.
name|getType
argument_list|()
operator|==
name|EventType
operator|.
name|Message
condition|)
block|{
name|getRowFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
name|rowNumber
argument_list|,
literal|"message-row"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getCellCount
argument_list|(
name|rowNumber
argument_list|)
condition|;
name|i
operator|++
control|)
name|getCellFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
name|rowNumber
argument_list|,
name|i
argument_list|,
literal|"message-cell"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getRowFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
name|rowNumber
argument_list|,
literal|"conflict-row"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getCellCount
argument_list|(
name|rowNumber
argument_list|)
condition|;
name|i
operator|++
control|)
name|getCellFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
name|rowNumber
argument_list|,
name|i
argument_list|,
literal|"conflict-cell"
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|meeting
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getCellCount
argument_list|(
name|rowNumber
argument_list|)
condition|;
name|i
operator|++
control|)
name|getCellFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
name|rowNumber
argument_list|,
name|i
argument_list|,
literal|"meeting-cell"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|event
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getCellCount
argument_list|(
name|rowNumber
argument_list|)
condition|;
name|i
operator|++
control|)
name|getCellFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
name|rowNumber
argument_list|,
name|i
argument_list|,
literal|"event-cell"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|data
operator|.
name|hasParent
argument_list|()
condition|)
block|{
if|if
condition|(
name|meeting
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|meeting
operator|.
name|hasConflicts
argument_list|()
condition|)
block|{
for|for
control|(
name|MeetingConflictInterface
name|cMeeting
range|:
name|meeting
operator|.
name|getConflicts
argument_list|()
control|)
name|add
argument_list|(
operator|new
name|EventMeetingRow
argument_list|(
literal|null
argument_list|,
name|cMeeting
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|event
operator|.
name|hasConflicts
argument_list|()
condition|)
block|{
for|for
control|(
name|EventInterface
name|cEvent
range|:
name|event
operator|.
name|getConflicts
argument_list|()
control|)
block|{
if|if
condition|(
name|cEvent
operator|.
name|hasMeetings
argument_list|()
condition|)
for|for
control|(
name|MeetingInterface
name|cMeeting
range|:
name|cEvent
operator|.
name|getMeetings
argument_list|()
control|)
block|{
if|if
condition|(
name|meeting
operator|.
name|inConflict
argument_list|(
name|cMeeting
argument_list|)
condition|)
name|add
argument_list|(
operator|new
name|EventMeetingRow
argument_list|(
name|cEvent
argument_list|,
name|cMeeting
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|else if
condition|(
name|event
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|event
operator|.
name|hasConflicts
argument_list|()
condition|)
for|for
control|(
name|EventInterface
name|cEvent
range|:
name|event
operator|.
name|getConflicts
argument_list|()
control|)
name|add
argument_list|(
operator|new
name|EventMeetingRow
argument_list|(
name|cEvent
argument_list|,
literal|null
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Set
argument_list|<
name|Integer
argument_list|>
name|getEventColumns
parameter_list|()
block|{
name|Set
argument_list|<
name|Integer
argument_list|>
name|cols
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colName
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colSection
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colType
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colEnrollment
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colLimit
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colSponsorOrInstructor
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colMainContact
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|cols
return|;
block|}
specifier|public
name|void
name|resetColumnVisibility
parameter_list|()
block|{
if|if
condition|(
name|getRowCount
argument_list|()
operator|<=
literal|1
condition|)
block|{
name|setColumnVisible
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colSection
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colTitle
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colNote
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colMainContact
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colApproval
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
name|getMode
argument_list|()
operator|.
name|isMustShowApproval
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colName
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
name|getMode
argument_list|()
operator|.
name|isShowEventDetails
argument_list|()
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colType
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
name|getMode
argument_list|()
operator|.
name|isShowEventDetails
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|getMode
argument_list|()
operator|.
name|isShowOptionalColumns
argument_list|()
condition|)
block|{
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colPublishedTime
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
name|EventCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|EventFlag
operator|.
name|SHOW_PUBLISHED_TIME
argument_list|)
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colAllocatedTime
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
name|EventCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|EventFlag
operator|.
name|SHOW_ALLOCATED_TIME
argument_list|)
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colSetupTimeShort
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
name|EventCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|EventFlag
operator|.
name|SHOW_SETUP_TIME
argument_list|)
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colTeardownTimeShort
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
name|EventCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|EventFlag
operator|.
name|SHOW_TEARDOWN_TIME
argument_list|)
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colLimit
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
name|getMode
argument_list|()
operator|.
name|isShowEventDetails
argument_list|()
operator|&&
name|iShowMainContact
operator|&&
name|EventCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|EventFlag
operator|.
name|SHOW_LIMIT
argument_list|)
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colEnrollment
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
name|getMode
argument_list|()
operator|.
name|isShowEventDetails
argument_list|()
operator|&&
name|iShowMainContact
operator|&&
name|EventCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|EventFlag
operator|.
name|SHOW_ENROLLMENT
argument_list|)
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colCapacity
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
name|EventCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|EventFlag
operator|.
name|SHOW_CAPACITY
argument_list|)
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colSponsorOrInstructor
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
name|getMode
argument_list|()
operator|.
name|isShowEventDetails
argument_list|()
operator|&&
name|EventCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|EventFlag
operator|.
name|SHOW_SPONSOR
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colPublishedTime
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
name|EventCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|EventFlag
operator|.
name|SHOW_PUBLISHED_TIME
argument_list|)
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colAllocatedTime
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
operator|!
name|EventCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|EventFlag
operator|.
name|SHOW_PUBLISHED_TIME
argument_list|)
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colSetupTimeShort
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colTeardownTimeShort
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colLimit
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colEnrollment
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colCapacity
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colSponsorOrInstructor
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colMainContact
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colTitle
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colNote
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colApproval
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
name|getMode
argument_list|()
operator|.
name|isMustShowApproval
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|hasSortBy
parameter_list|()
block|{
return|return
name|iSortBy
operator|!=
literal|null
return|;
block|}
specifier|public
name|Integer
name|getSortBy
parameter_list|()
block|{
return|return
name|iSortBy
operator|==
literal|null
condition|?
literal|null
else|:
name|iSortBy
operator|.
name|ordinal
argument_list|()
return|;
block|}
specifier|public
name|void
name|setSortBy
parameter_list|(
name|Integer
name|sortBy
parameter_list|)
block|{
name|iSortBy
operator|=
operator|(
name|sortBy
operator|==
literal|null
condition|?
literal|null
else|:
name|EventMeetingSortBy
operator|.
name|values
argument_list|()
index|[
name|sortBy
index|]
operator|)
expr_stmt|;
name|sort
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|addSortByOperation
parameter_list|(
specifier|final
name|UniTimeTableHeader
name|header
parameter_list|,
specifier|final
name|EventMeetingSortBy
name|sortBy
parameter_list|)
block|{
name|header
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iSortBy
operator|=
name|sortBy
expr_stmt|;
name|sort
argument_list|()
expr_stmt|;
name|onSortByChanded
argument_list|(
name|sortBy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|getRowCount
argument_list|()
operator|>
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opSortBy
argument_list|(
name|header
operator|.
name|getHTML
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|onSortByChanded
parameter_list|(
name|EventMeetingSortBy
name|sortBy
parameter_list|)
block|{
block|}
empty_stmt|;
specifier|protected
name|void
name|onColumnShownOrHid
parameter_list|(
name|int
name|eventCookieFlags
parameter_list|)
block|{
block|}
specifier|protected
name|Operation
name|addHideOperation
parameter_list|(
specifier|final
name|UniTimeTableHeader
name|header
parameter_list|,
specifier|final
name|EventFlag
name|flag
parameter_list|)
block|{
return|return
name|addHideOperation
argument_list|(
name|header
argument_list|,
name|flag
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|protected
name|Operation
name|addHideOperation
parameter_list|(
specifier|final
name|UniTimeTableHeader
name|header
parameter_list|,
specifier|final
name|EventFlag
name|flag
parameter_list|,
specifier|final
name|Check
name|separator
parameter_list|)
block|{
name|Operation
name|op
init|=
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|boolean
name|visible
init|=
name|isColumnVisible
argument_list|(
name|header
operator|.
name|getColumn
argument_list|()
argument_list|)
decl_stmt|;
name|setColumnVisible
argument_list|(
name|header
operator|.
name|getColumn
argument_list|()
argument_list|,
operator|!
name|visible
argument_list|)
expr_stmt|;
name|EventCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|set
argument_list|(
name|flag
argument_list|,
operator|!
name|visible
argument_list|)
expr_stmt|;
if|if
condition|(
name|flag
operator|==
name|EventFlag
operator|.
name|SHOW_ALLOCATED_TIME
operator|&&
name|visible
condition|)
block|{
name|UniTimeTableHeader
name|other
init|=
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colPublishedTime
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isColumnVisible
argument_list|(
name|other
operator|.
name|getColumn
argument_list|()
argument_list|)
condition|)
block|{
name|setColumnVisible
argument_list|(
name|other
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|EventCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|set
argument_list|(
name|EventFlag
operator|.
name|SHOW_PUBLISHED_TIME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|flag
operator|==
name|EventFlag
operator|.
name|SHOW_PUBLISHED_TIME
operator|&&
name|visible
condition|)
block|{
name|UniTimeTableHeader
name|other
init|=
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colAllocatedTime
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isColumnVisible
argument_list|(
name|other
operator|.
name|getColumn
argument_list|()
argument_list|)
condition|)
block|{
name|setColumnVisible
argument_list|(
name|other
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|EventCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|set
argument_list|(
name|EventFlag
operator|.
name|SHOW_ALLOCATED_TIME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|onColumnShownOrHid
argument_list|(
name|EventCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getFlags
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
switch|switch
condition|(
name|flag
condition|)
block|{
case|case
name|SHOW_LIMIT
case|:
case|case
name|SHOW_ENROLLMENT
case|:
case|case
name|SHOW_MAIN_CONTACT
case|:
return|return
name|iShowMainContact
operator|&&
name|getMode
argument_list|()
operator|.
name|isShowEventDetails
argument_list|()
return|;
case|case
name|SHOW_SPONSOR
case|:
case|case
name|SHOW_NOTE
case|:
return|return
name|getMode
argument_list|()
operator|.
name|isShowEventDetails
argument_list|()
return|;
case|case
name|SHOW_TITLE
case|:
return|return
name|isColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colSection
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|)
return|;
case|case
name|SHOW_APPROVAL
case|:
return|return
operator|!
name|getMode
argument_list|()
operator|.
name|isMustShowApproval
argument_list|()
return|;
default|default:
return|return
literal|true
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
name|separator
operator|!=
literal|null
operator|&&
name|separator
operator|.
name|isChecked
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|isColumnVisible
argument_list|(
name|header
operator|.
name|getColumn
argument_list|()
argument_list|)
condition|?
name|MESSAGES
operator|.
name|opHide
argument_list|(
name|header
operator|.
name|getHTML
argument_list|()
argument_list|)
else|:
name|MESSAGES
operator|.
name|opShow
argument_list|(
name|header
operator|.
name|getHTML
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|getHeader
argument_list|(
literal|null
argument_list|)
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colName
argument_list|()
argument_list|)
operator|.
name|addOperation
argument_list|(
name|ifNotSelectable
argument_list|(
name|op
argument_list|)
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|flag
condition|)
block|{
case|case
name|SHOW_ALLOCATED_TIME
case|:
case|case
name|SHOW_PUBLISHED_TIME
case|:
case|case
name|SHOW_SETUP_TIME
case|:
case|case
name|SHOW_TEARDOWN_TIME
case|:
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colAllocatedTime
argument_list|()
argument_list|)
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colPublishedTime
argument_list|()
argument_list|)
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colSetupTimeShort
argument_list|()
argument_list|)
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colTeardownTimeShort
argument_list|()
argument_list|)
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_CAPACITY
case|:
case|case
name|SHOW_LIMIT
case|:
case|case
name|SHOW_ENROLLMENT
case|:
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colLocation
argument_list|()
argument_list|)
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|header
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_MAIN_CONTACT
case|:
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colApproval
argument_list|()
argument_list|)
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|header
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_SPONSOR
case|:
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colApproval
argument_list|()
argument_list|)
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|header
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_TITLE
case|:
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colSection
argument_list|()
argument_list|)
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colType
argument_list|()
argument_list|)
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|header
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
break|break;
default|default:
name|header
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
return|return
name|op
return|;
block|}
specifier|private
name|Operation
name|ifNotSelectable
parameter_list|(
specifier|final
name|Operation
name|op
parameter_list|)
block|{
return|return
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|op
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|op
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|op
operator|.
name|isApplicable
argument_list|()
operator|&&
operator|!
name|isColumnVisible
argument_list|(
name|getHeader
argument_list|(
literal|null
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
name|op
operator|.
name|hasSeparator
argument_list|()
return|;
block|}
block|}
return|;
block|}
specifier|public
name|void
name|sort
parameter_list|()
block|{
if|if
condition|(
name|getSortBy
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sort
argument_list|(
operator|new
name|Comparator
argument_list|<
name|EventMeetingRow
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|EventMeetingRow
name|o1
parameter_list|,
name|EventMeetingRow
name|o2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|compareRows
argument_list|(
name|o1
operator|.
name|hasParent
argument_list|()
condition|?
name|o1
operator|.
name|getParent
argument_list|()
else|:
name|o1
argument_list|,
name|o2
operator|.
name|hasParent
argument_list|()
condition|?
name|o2
operator|.
name|getParent
argument_list|()
else|:
name|o2
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|compareRows
argument_list|(
name|o1
operator|.
name|hasParent
argument_list|()
condition|?
name|o1
else|:
literal|null
argument_list|,
name|o2
operator|.
name|hasParent
argument_list|()
condition|?
name|o2
else|:
literal|null
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getMode
argument_list|()
operator|.
name|isShowMeetings
argument_list|()
operator|&&
name|getMode
argument_list|()
operator|.
name|isShowEventDetails
argument_list|()
condition|)
block|{
name|Long
name|eventId
init|=
literal|null
decl_stmt|,
name|conflictId
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|eventCols
init|=
name|getEventColumns
argument_list|()
decl_stmt|;
name|int
name|line
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|EventMeetingRow
name|data
init|=
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|data
operator|.
name|hasParent
argument_list|()
condition|)
block|{
if|if
condition|(
name|eventId
operator|==
literal|null
operator|||
operator|!
name|eventId
operator|.
name|equals
argument_list|(
name|data
operator|.
name|getEventId
argument_list|()
argument_list|)
condition|)
block|{
name|line
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|getCellCount
argument_list|(
name|row
argument_list|)
condition|;
name|col
operator|++
control|)
name|getCellFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
literal|"event-cell"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|col
range|:
name|eventCols
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|MultiLineCell
condition|)
operator|(
operator|(
name|MultiLineCell
operator|)
name|w
operator|)
operator|.
name|showLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
else|else
name|w
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|getCellCount
argument_list|(
name|row
argument_list|)
condition|;
name|col
operator|++
control|)
name|getCellFormatter
argument_list|()
operator|.
name|removeStyleName
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
literal|"event-cell"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|col
range|:
name|eventCols
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|MultiLineCell
condition|)
operator|(
operator|(
name|MultiLineCell
operator|)
name|w
operator|)
operator|.
name|showLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
else|else
name|w
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|conflictId
operator|==
literal|null
operator|||
operator|!
name|conflictId
operator|.
name|equals
argument_list|(
name|data
operator|.
name|getEventId
argument_list|()
argument_list|)
condition|)
block|{
name|line
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|col
range|:
name|eventCols
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|MultiLineCell
condition|)
operator|(
operator|(
name|MultiLineCell
operator|)
name|w
operator|)
operator|.
name|showLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
else|else
name|w
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|col
range|:
name|eventCols
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|MultiLineCell
condition|)
operator|(
operator|(
name|MultiLineCell
operator|)
name|w
operator|)
operator|.
name|showLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
else|else
name|w
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|eventId
operator|=
operator|(
name|data
operator|.
name|hasParent
argument_list|()
condition|?
literal|null
else|:
name|data
operator|.
name|getEventId
argument_list|()
operator|)
expr_stmt|;
name|conflictId
operator|=
operator|(
name|data
operator|.
name|hasParent
argument_list|()
condition|?
name|data
operator|.
name|getEventId
argument_list|()
else|:
literal|null
operator|)
expr_stmt|;
name|line
operator|++
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|int
name|compareRows
parameter_list|(
name|EventMeetingRow
name|r1
parameter_list|,
name|EventMeetingRow
name|r2
parameter_list|)
block|{
comment|// Null first
if|if
condition|(
name|r1
operator|==
literal|null
condition|)
return|return
operator|(
name|r2
operator|==
literal|null
condition|?
literal|0
else|:
operator|-
literal|1
operator|)
return|;
if|if
condition|(
name|r2
operator|==
literal|null
condition|)
return|return
literal|1
return|;
comment|// Compare event properties (if applicable)
if|if
condition|(
name|r1
operator|.
name|hasEvent
argument_list|()
operator|&&
name|r2
operator|.
name|hasEvent
argument_list|()
condition|)
block|{
name|int
name|cmp
init|=
name|EventComparator
operator|.
name|compareEvents
argument_list|(
name|r1
operator|.
name|getEvent
argument_list|()
argument_list|,
name|r2
operator|.
name|getEvent
argument_list|()
argument_list|,
name|iSortBy
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
comment|// Compare meeting properties (if applicable)
if|if
condition|(
name|r1
operator|.
name|hasMeeting
argument_list|()
operator|&&
name|r2
operator|.
name|hasMeeting
argument_list|()
condition|)
block|{
name|int
name|cmp
init|=
name|EventComparator
operator|.
name|compareMeetings
argument_list|(
name|r1
operator|.
name|getMeeting
argument_list|()
argument_list|,
name|r2
operator|.
name|getMeeting
argument_list|()
argument_list|,
name|iSortBy
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
else|else
block|{
name|Iterator
argument_list|<
name|MeetingInterface
argument_list|>
name|i1
init|=
name|r1
operator|.
name|getMeetings
argument_list|(
name|getMeetingFilter
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|,
name|i2
init|=
name|r2
operator|.
name|getMeetings
argument_list|(
name|getMeetingFilter
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i1
operator|.
name|hasNext
argument_list|()
operator|&&
name|i2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|int
name|cmp
init|=
name|EventComparator
operator|.
name|compareMeetings
argument_list|(
name|i1
operator|.
name|next
argument_list|()
argument_list|,
name|i2
operator|.
name|next
argument_list|()
argument_list|,
name|iSortBy
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
block|}
comment|// Fallback 1
if|if
condition|(
name|r1
operator|.
name|hasEvent
argument_list|()
operator|&&
name|r2
operator|.
name|hasEvent
argument_list|()
condition|)
block|{
name|int
name|cmp
init|=
name|EventComparator
operator|.
name|compareFallback
argument_list|(
name|r1
operator|.
name|getEvent
argument_list|()
argument_list|,
name|r2
operator|.
name|getEvent
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
if|if
condition|(
name|r1
operator|.
name|hasMeeting
argument_list|()
operator|&&
name|r2
operator|.
name|hasMeeting
argument_list|()
condition|)
block|{
name|int
name|cmp
init|=
name|EventComparator
operator|.
name|compareFallback
argument_list|(
name|r1
operator|.
name|getMeeting
argument_list|()
argument_list|,
name|r2
operator|.
name|getMeeting
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
else|else
block|{
name|Iterator
argument_list|<
name|MeetingInterface
argument_list|>
name|i1
init|=
name|r1
operator|.
name|getMeetings
argument_list|(
name|getMeetingFilter
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|,
name|i2
init|=
name|r2
operator|.
name|getMeetings
argument_list|(
name|getMeetingFilter
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i1
operator|.
name|hasNext
argument_list|()
operator|&&
name|i2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|int
name|cmp
init|=
name|EventComparator
operator|.
name|compareFallback
argument_list|(
name|i1
operator|.
name|next
argument_list|()
argument_list|,
name|i2
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
if|if
condition|(
name|i1
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|i2
operator|.
name|hasNext
argument_list|()
condition|)
return|return
literal|1
return|;
if|if
condition|(
operator|!
name|i1
operator|.
name|hasNext
argument_list|()
operator|&&
name|i2
operator|.
name|hasNext
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
block|}
comment|// Fallback 2
if|if
condition|(
name|r1
operator|.
name|hasMeeting
argument_list|()
operator|&&
name|r2
operator|.
name|hasMeeting
argument_list|()
condition|)
block|{
return|return
name|r1
operator|.
name|getMeeting
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getMeeting
argument_list|()
argument_list|)
return|;
block|}
if|else  if
condition|(
name|r1
operator|.
name|hasEvent
argument_list|()
operator|&&
name|r2
operator|.
name|hasEvent
argument_list|()
condition|)
block|{
return|return
name|r1
operator|.
name|getEvent
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getEvent
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
specifier|protected
specifier|abstract
class|class
name|EventMeetingOperation
implements|implements
name|Operation
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
if|if
condition|(
name|hasSelection
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|row
init|=
name|getRowCount
argument_list|()
operator|-
literal|1
init|;
name|row
operator|>=
literal|1
condition|;
name|row
operator|--
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|CheckBox
name|ch
init|=
operator|(
name|CheckBox
operator|)
name|w
decl_stmt|;
if|if
condition|(
name|ch
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|EventMeetingRow
name|e
init|=
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|isApplicable
argument_list|(
name|e
argument_list|)
condition|)
name|execute
argument_list|(
name|row
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|else if
condition|(
name|allowNoSelection
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|row
init|=
name|getRowCount
argument_list|()
operator|-
literal|1
init|;
name|row
operator|>=
literal|1
condition|;
name|row
operator|--
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|EventMeetingRow
name|e
init|=
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|isApplicable
argument_list|(
name|e
argument_list|)
condition|)
name|execute
argument_list|(
name|row
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|boolean
name|hasSelection
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|CheckBox
name|ch
init|=
operator|(
name|CheckBox
operator|)
name|w
decl_stmt|;
if|if
condition|(
name|ch
operator|.
name|getValue
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
name|boolean
name|hasSelection
init|=
name|hasSelection
argument_list|()
decl_stmt|;
name|boolean
name|allMustMatch
init|=
name|allMustMatch
argument_list|(
name|hasSelection
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasSelection
condition|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|CheckBox
name|ch
init|=
operator|(
name|CheckBox
operator|)
name|w
decl_stmt|;
if|if
condition|(
name|ch
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|EventMeetingRow
name|e
init|=
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|isApplicable
argument_list|(
name|e
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|allMustMatch
condition|)
return|return
literal|true
return|;
block|}
else|else
block|{
if|if
condition|(
name|allMustMatch
condition|)
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
return|return
name|allMustMatch
return|;
block|}
if|else if
condition|(
name|allowNoSelection
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|EventMeetingRow
name|e
init|=
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|isApplicable
argument_list|(
name|e
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|allMustMatch
condition|)
return|return
literal|true
return|;
block|}
else|else
block|{
if|if
condition|(
name|allMustMatch
condition|)
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
name|allMustMatch
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|EventMeetingRow
argument_list|>
name|data
parameter_list|()
block|{
name|List
argument_list|<
name|EventMeetingRow
argument_list|>
name|data
init|=
operator|new
name|ArrayList
argument_list|<
name|EventMeetingRow
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasSelection
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|CheckBox
name|ch
init|=
operator|(
name|CheckBox
operator|)
name|w
decl_stmt|;
if|if
condition|(
name|ch
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|EventMeetingRow
name|e
init|=
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|isApplicable
argument_list|(
name|e
argument_list|)
condition|)
name|data
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|else if
condition|(
name|allowNoSelection
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|EventMeetingRow
name|e
init|=
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|isApplicable
argument_list|(
name|e
argument_list|)
condition|)
name|data
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|data
return|;
block|}
specifier|public
name|List
argument_list|<
name|Integer
argument_list|>
name|rows
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|rows
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasSelection
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|CheckBox
name|ch
init|=
operator|(
name|CheckBox
operator|)
name|w
decl_stmt|;
if|if
condition|(
name|ch
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|EventMeetingRow
name|e
init|=
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|isApplicable
argument_list|(
name|e
argument_list|)
condition|)
name|rows
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|else if
condition|(
name|allowNoSelection
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|EventMeetingRow
name|e
init|=
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|isApplicable
argument_list|(
name|e
argument_list|)
condition|)
name|rows
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|rows
return|;
block|}
specifier|public
name|boolean
name|allMustMatch
parameter_list|(
name|boolean
name|hasSelection
parameter_list|)
block|{
return|return
name|hasSelection
return|;
block|}
specifier|public
name|boolean
name|allowNoSelection
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
specifier|abstract
name|boolean
name|isApplicable
parameter_list|(
name|EventMeetingRow
name|event
parameter_list|)
function_decl|;
specifier|public
specifier|abstract
name|void
name|execute
parameter_list|(
name|int
name|row
parameter_list|,
name|EventMeetingRow
name|event
parameter_list|)
function_decl|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|EventInterface
name|next
parameter_list|(
name|Long
name|eventId
parameter_list|)
block|{
name|boolean
name|next
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|EventMeetingRow
name|data
init|=
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|data
operator|.
name|hasParent
argument_list|()
condition|)
block|{
if|if
condition|(
name|next
operator|&&
operator|!
name|eventId
operator|.
name|equals
argument_list|(
name|data
operator|.
name|getEventId
argument_list|()
argument_list|)
condition|)
return|return
name|data
operator|.
name|getEvent
argument_list|()
return|;
if|else if
condition|(
name|eventId
operator|.
name|equals
argument_list|(
name|data
operator|.
name|getEvent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
name|next
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|EventInterface
name|previous
parameter_list|(
name|Long
name|eventId
parameter_list|)
block|{
name|EventInterface
name|prev
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|EventMeetingRow
name|data
init|=
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|data
operator|.
name|hasParent
argument_list|()
condition|)
block|{
if|if
condition|(
name|eventId
operator|.
name|equals
argument_list|(
name|data
operator|.
name|getEventId
argument_list|()
argument_list|)
condition|)
return|return
name|prev
return|;
else|else
name|prev
operator|=
name|data
operator|.
name|getEvent
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|HandlerRegistration
name|addValueChangeHandler
parameter_list|(
name|ValueChangeHandler
argument_list|<
name|List
argument_list|<
name|EventMeetingRow
argument_list|>
argument_list|>
name|handler
parameter_list|)
block|{
return|return
name|addHandler
argument_list|(
name|handler
argument_list|,
name|ValueChangeEvent
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|EventMeetingRow
argument_list|>
name|getValue
parameter_list|()
block|{
name|List
argument_list|<
name|EventMeetingRow
argument_list|>
name|value
init|=
operator|new
name|ArrayList
argument_list|<
name|EventMeetingRow
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|EventMeetingRow
name|data
init|=
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
operator|&&
operator|!
name|data
operator|.
name|hasParent
argument_list|()
condition|)
name|value
operator|.
name|add
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
specifier|public
name|List
argument_list|<
name|MeetingInterface
argument_list|>
name|getMeetings
parameter_list|()
block|{
name|List
argument_list|<
name|MeetingInterface
argument_list|>
name|meetings
init|=
operator|new
name|ArrayList
argument_list|<
name|MeetingInterface
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|EventMeetingRow
name|data
init|=
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
operator|&&
name|data
operator|.
name|hasMeeting
argument_list|()
operator|&&
operator|!
name|data
operator|.
name|hasParent
argument_list|()
condition|)
name|meetings
operator|.
name|add
argument_list|(
name|data
operator|.
name|getMeeting
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|meetings
return|;
block|}
specifier|public
name|List
argument_list|<
name|EventInterface
argument_list|>
name|getEvents
parameter_list|()
block|{
name|List
argument_list|<
name|EventInterface
argument_list|>
name|events
init|=
operator|new
name|ArrayList
argument_list|<
name|EventInterface
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|EventMeetingRow
name|data
init|=
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
operator|&&
name|data
operator|.
name|hasEvent
argument_list|()
operator|&&
operator|!
name|data
operator|.
name|hasParent
argument_list|()
condition|)
name|events
operator|.
name|add
argument_list|(
name|data
operator|.
name|getEvent
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|events
return|;
block|}
specifier|public
name|Map
argument_list|<
name|EventInterface
argument_list|,
name|List
argument_list|<
name|MeetingInterface
argument_list|>
argument_list|>
name|getEventMeetings
parameter_list|()
block|{
name|Map
argument_list|<
name|EventInterface
argument_list|,
name|List
argument_list|<
name|MeetingInterface
argument_list|>
argument_list|>
name|event2meetings
init|=
operator|new
name|HashMap
argument_list|<
name|EventInterface
argument_list|,
name|List
argument_list|<
name|MeetingInterface
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|EventMeetingRow
name|data
init|=
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|==
literal|null
operator|||
name|data
operator|.
name|hasParent
argument_list|()
operator|||
operator|!
name|data
operator|.
name|hasEvent
argument_list|()
condition|)
continue|continue;
name|List
argument_list|<
name|MeetingInterface
argument_list|>
name|meetings
init|=
name|event2meetings
operator|.
name|get
argument_list|(
name|data
operator|.
name|getEvent
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|meetings
operator|==
literal|null
condition|)
block|{
name|meetings
operator|=
operator|new
name|ArrayList
argument_list|<
name|MeetingInterface
argument_list|>
argument_list|()
expr_stmt|;
name|event2meetings
operator|.
name|put
argument_list|(
name|data
operator|.
name|getEvent
argument_list|()
argument_list|,
name|meetings
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|data
operator|.
name|hasMeeting
argument_list|()
condition|)
name|meetings
operator|.
name|add
argument_list|(
name|data
operator|.
name|getMeeting
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|meetings
operator|.
name|addAll
argument_list|(
name|data
operator|.
name|getMeetings
argument_list|(
name|getMeetingFilter
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|event2meetings
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|List
argument_list|<
name|EventMeetingRow
argument_list|>
name|value
parameter_list|)
block|{
name|setValue
argument_list|(
name|value
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|List
argument_list|<
name|EventMeetingRow
argument_list|>
name|value
parameter_list|,
name|boolean
name|fireEvents
parameter_list|)
block|{
name|clearTable
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|resetColumnVisibility
argument_list|()
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
for|for
control|(
name|EventMeetingRow
name|row
range|:
name|value
control|)
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|sort
argument_list|()
expr_stmt|;
if|if
condition|(
name|fireEvents
condition|)
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|this
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setEvents
parameter_list|(
name|Collection
argument_list|<
name|EventInterface
argument_list|>
name|events
parameter_list|)
block|{
name|setEvents
argument_list|(
name|events
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setEvents
parameter_list|(
name|Collection
argument_list|<
name|EventInterface
argument_list|>
name|events
parameter_list|,
name|boolean
name|fireEvents
parameter_list|)
block|{
name|List
argument_list|<
name|EventMeetingRow
argument_list|>
name|rows
init|=
operator|new
name|ArrayList
argument_list|<
name|EventMeetingTable
operator|.
name|EventMeetingRow
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|events
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|EventInterface
name|event
range|:
name|events
control|)
block|{
if|if
condition|(
name|getMode
argument_list|()
operator|.
name|isShowMeetings
argument_list|()
condition|)
block|{
for|for
control|(
name|MeetingInterface
name|meeting
range|:
name|event
operator|.
name|getMeetings
argument_list|()
control|)
if|if
condition|(
name|getMeetingFilter
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|getMeetingFilter
argument_list|()
operator|.
name|filter
argument_list|(
name|event
argument_list|,
name|meeting
argument_list|)
condition|)
name|rows
operator|.
name|add
argument_list|(
operator|new
name|EventMeetingRow
argument_list|(
name|event
argument_list|,
name|meeting
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rows
operator|.
name|add
argument_list|(
operator|new
name|EventMeetingRow
argument_list|(
name|event
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|setValue
argument_list|(
name|rows
argument_list|,
name|fireEvents
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setMeetings
parameter_list|(
name|EventInterface
name|event
parameter_list|,
name|Collection
argument_list|<
name|MeetingInterface
argument_list|>
name|meetings
parameter_list|)
block|{
name|setMeetings
argument_list|(
name|event
argument_list|,
name|meetings
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setMeetings
parameter_list|(
name|EventInterface
name|event
parameter_list|,
name|Collection
argument_list|<
name|MeetingInterface
argument_list|>
name|meetings
parameter_list|,
name|boolean
name|fireEvents
parameter_list|)
block|{
name|List
argument_list|<
name|EventMeetingRow
argument_list|>
name|rows
init|=
operator|new
name|ArrayList
argument_list|<
name|EventMeetingTable
operator|.
name|EventMeetingRow
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|getMode
argument_list|()
operator|.
name|isShowMeetings
argument_list|()
condition|)
block|{
for|for
control|(
name|MeetingInterface
name|meeting
range|:
name|meetings
control|)
name|rows
operator|.
name|add
argument_list|(
operator|new
name|EventMeetingRow
argument_list|(
name|event
argument_list|,
name|meeting
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rows
operator|.
name|add
argument_list|(
operator|new
name|EventMeetingRow
argument_list|(
name|event
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setValue
argument_list|(
name|rows
argument_list|,
name|fireEvents
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|EventMeetingRow
block|{
name|EventInterface
name|iEvent
decl_stmt|;
name|MeetingInterface
name|iMeeting
decl_stmt|;
name|EventMeetingRow
name|iParent
decl_stmt|;
name|EventMeetingRow
parameter_list|(
name|EventInterface
name|event
parameter_list|,
name|MeetingInterface
name|meeting
parameter_list|,
name|EventMeetingRow
name|parent
parameter_list|)
block|{
name|iEvent
operator|=
name|event
expr_stmt|;
name|iMeeting
operator|=
name|meeting
expr_stmt|;
name|iParent
operator|=
name|parent
expr_stmt|;
block|}
name|EventMeetingRow
parameter_list|(
name|EventInterface
name|event
parameter_list|,
name|MeetingInterface
name|meeting
parameter_list|)
block|{
name|this
argument_list|(
name|event
argument_list|,
name|meeting
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasEvent
parameter_list|()
block|{
return|return
name|iEvent
operator|!=
literal|null
return|;
block|}
specifier|public
name|EventInterface
name|getEvent
parameter_list|()
block|{
return|return
name|iEvent
return|;
block|}
specifier|public
name|Long
name|getEventId
parameter_list|()
block|{
if|if
condition|(
name|iEvent
operator|!=
literal|null
condition|)
return|return
name|iEvent
operator|.
name|getId
argument_list|()
return|;
if|if
condition|(
name|iMeeting
operator|!=
literal|null
operator|&&
name|iMeeting
operator|instanceof
name|MeetingConflictInterface
condition|)
return|return
operator|(
operator|(
name|MeetingConflictInterface
operator|)
name|iMeeting
operator|)
operator|.
name|getEventId
argument_list|()
return|;
return|return
literal|null
return|;
block|}
specifier|public
name|boolean
name|hasMeeting
parameter_list|()
block|{
return|return
name|iMeeting
operator|!=
literal|null
return|;
block|}
specifier|public
name|MeetingInterface
name|getMeeting
parameter_list|()
block|{
return|return
name|iMeeting
return|;
block|}
specifier|public
name|boolean
name|hasParent
parameter_list|()
block|{
return|return
name|iParent
operator|!=
literal|null
return|;
block|}
specifier|public
name|EventMeetingRow
name|getParent
parameter_list|()
block|{
return|return
name|iParent
return|;
block|}
specifier|public
name|boolean
name|inConflict
parameter_list|()
block|{
if|if
condition|(
name|iMeeting
operator|!=
literal|null
operator|&&
name|iMeeting
operator|.
name|inConflict
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|iEvent
operator|!=
literal|null
operator|&&
name|iEvent
operator|.
name|hasConflicts
argument_list|()
condition|)
block|{
if|if
condition|(
name|iMeeting
operator|==
literal|null
condition|)
return|return
literal|true
return|;
for|for
control|(
name|EventInterface
name|conflict
range|:
name|iEvent
operator|.
name|getConflicts
argument_list|()
control|)
block|{
if|if
condition|(
name|conflict
operator|.
name|getType
argument_list|()
operator|==
name|EventType
operator|.
name|Message
condition|)
continue|continue;
if|if
condition|(
name|conflict
operator|.
name|inConflict
argument_list|(
name|iMeeting
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isCanApprove
parameter_list|()
block|{
if|if
condition|(
name|iMeeting
operator|!=
literal|null
condition|)
return|return
name|iMeeting
operator|.
name|isCanApprove
argument_list|()
operator|&&
operator|!
name|iMeeting
operator|.
name|isDelete
argument_list|()
return|;
if|if
condition|(
name|iEvent
operator|!=
literal|null
operator|&&
name|iEvent
operator|.
name|hasMeetings
argument_list|()
condition|)
for|for
control|(
name|MeetingInterface
name|meeting
range|:
name|iEvent
operator|.
name|getMeetings
argument_list|()
control|)
if|if
condition|(
name|meeting
operator|.
name|isCanApprove
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isEditable
parameter_list|()
block|{
return|return
name|iMeeting
operator|!=
literal|null
operator|&&
operator|(
name|iMeeting
operator|.
name|getId
argument_list|()
operator|==
literal|null
operator|||
name|iMeeting
operator|.
name|isCanEdit
argument_list|()
operator|)
operator|&&
operator|!
name|iMeeting
operator|.
name|isDelete
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|MeetingInterface
argument_list|>
name|getMeetings
parameter_list|(
name|MeetingFilter
name|filter
parameter_list|)
block|{
name|List
argument_list|<
name|MeetingInterface
argument_list|>
name|meetings
init|=
operator|new
name|ArrayList
argument_list|<
name|MeetingInterface
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|iMeeting
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|filter
operator|==
literal|null
operator|||
operator|!
name|filter
operator|.
name|filter
argument_list|(
name|iEvent
argument_list|,
name|iMeeting
argument_list|)
condition|)
name|meetings
operator|.
name|add
argument_list|(
name|iMeeting
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|iEvent
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MeetingInterface
name|meeting
range|:
name|iEvent
operator|.
name|getMeetings
argument_list|()
control|)
if|if
condition|(
name|filter
operator|==
literal|null
operator|||
operator|!
name|filter
operator|.
name|filter
argument_list|(
name|iEvent
argument_list|,
name|meeting
argument_list|)
condition|)
name|meetings
operator|.
name|add
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
block|}
return|return
name|meetings
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|MultiLineCell
extends|extends
name|HTML
block|{
name|List
argument_list|<
name|String
argument_list|>
name|iValue
decl_stmt|;
specifier|public
name|MultiLineCell
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|value
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|setWordWrap
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iValue
operator|=
name|value
expr_stmt|;
name|showLine
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|showLine
parameter_list|(
name|Integer
name|line
parameter_list|)
block|{
if|if
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
name|setHTML
argument_list|(
name|line
operator|>=
literal|0
operator|&&
name|line
operator|<
name|iValue
operator|.
name|size
argument_list|()
condition|?
name|iValue
operator|.
name|get
argument_list|(
name|line
argument_list|)
else|:
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|html
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|value
range|:
name|iValue
control|)
block|{
if|if
condition|(
operator|!
name|html
operator|.
name|isEmpty
argument_list|()
condition|)
name|html
operator|+=
literal|"<br>"
expr_stmt|;
name|html
operator|+=
name|value
expr_stmt|;
block|}
name|setHTML
argument_list|(
name|html
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|MultiLineNumberCell
extends|extends
name|MultiLineCell
implements|implements
name|HasCellAlignment
block|{
specifier|public
name|MultiLineNumberCell
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|value
parameter_list|)
block|{
name|super
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|HorizontalAlignmentConstant
name|getCellAlignment
parameter_list|()
block|{
return|return
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
return|;
block|}
block|}
specifier|public
interface|interface
name|MeetingFilter
block|{
specifier|public
name|boolean
name|filter
parameter_list|(
name|EventInterface
name|event
parameter_list|,
name|MeetingInterface
name|meeting
parameter_list|)
function_decl|;
block|}
specifier|public
interface|interface
name|Implementation
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|EventMeetingTable
name|source
parameter_list|,
name|OperationType
name|operation
parameter_list|,
name|List
argument_list|<
name|EventMeetingRow
argument_list|>
name|selection
parameter_list|)
function_decl|;
block|}
specifier|public
interface|interface
name|Check
block|{
specifier|public
name|boolean
name|isChecked
parameter_list|()
function_decl|;
block|}
specifier|public
specifier|static
class|class
name|HTMLWithColSpan
extends|extends
name|HTML
implements|implements
name|UniTimeTable
operator|.
name|HasColSpan
block|{
specifier|private
name|int
name|iColspan
init|=
literal|1
decl_stmt|;
specifier|public
name|HTMLWithColSpan
parameter_list|(
name|String
name|html
parameter_list|,
name|boolean
name|wordWrap
parameter_list|,
name|int
name|colspan
parameter_list|)
block|{
name|super
argument_list|(
name|html
argument_list|,
name|wordWrap
argument_list|)
expr_stmt|;
name|iColspan
operator|=
name|colspan
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getColSpan
parameter_list|()
block|{
return|return
name|iColspan
return|;
block|}
block|}
block|}
end_class

end_unit

