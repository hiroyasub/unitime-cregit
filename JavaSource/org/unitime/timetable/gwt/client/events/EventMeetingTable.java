begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.4 (University Timetabling Application)  * Copyright (C) 2012, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|events
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|events
operator|.
name|EventCookie
operator|.
name|EventFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|events
operator|.
name|EventTable
operator|.
name|EventSortBy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|events
operator|.
name|EventTable
operator|.
name|MeetingFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|events
operator|.
name|MeetingTable
operator|.
name|MeetingsSortBy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|MeetingInterface
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|shared
operator|.
name|HandlerRegistration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|DateTimeFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|CheckBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
operator|.
name|HorizontalAlignmentConstant
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|SimplePanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_class
specifier|public
class|class
name|EventMeetingTable
extends|extends
name|UniTimeTable
argument_list|<
name|EventMeetingTable
operator|.
name|EventMeetingRow
argument_list|>
implements|implements
name|HasValue
argument_list|<
name|List
argument_list|<
name|EventMeetingTable
operator|.
name|EventMeetingRow
argument_list|>
argument_list|>
implements|,
name|ApproveDialog
operator|.
name|CanHideUnimportantColumns
block|{
specifier|private
specifier|static
specifier|final
name|GwtConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|DateTimeFormat
name|sDateFormat
init|=
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|eventDateFormat
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|iShowMainContact
init|=
literal|false
decl_stmt|;
specifier|private
name|String
name|iSortBy
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iSelectable
init|=
literal|true
decl_stmt|;
specifier|private
name|ApproveDialog
argument_list|<
name|EventMeetingRow
argument_list|>
name|iApproveDialog
init|=
literal|null
decl_stmt|;
specifier|private
name|MeetingFilter
name|iMeetingFilter
init|=
literal|null
decl_stmt|;
specifier|public
name|EventMeetingTable
parameter_list|()
block|{
name|setStyleName
argument_list|(
literal|"unitime-EventMeetings"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|UniTimeTableHeader
argument_list|>
name|header
init|=
operator|new
name|ArrayList
argument_list|<
name|UniTimeTableHeader
argument_list|>
argument_list|()
decl_stmt|;
name|UniTimeTableHeader
name|hTimes
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
literal|"&otimes;"
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_CENTER
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hTimes
argument_list|)
expr_stmt|;
name|hTimes
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|CheckBox
name|ch
init|=
operator|(
name|CheckBox
operator|)
name|w
decl_stmt|;
name|ch
operator|.
name|setValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|CheckBox
name|ch
init|=
operator|(
name|CheckBox
operator|)
name|w
decl_stmt|;
if|if
condition|(
operator|!
name|ch
operator|.
name|getValue
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opSelectAll
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hTimes
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|CheckBox
name|ch
init|=
operator|(
name|CheckBox
operator|)
name|w
decl_stmt|;
name|ch
operator|.
name|setValue
argument_list|(
name|inConflict
argument_list|(
name|getData
argument_list|(
name|row
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|boolean
name|inConflict
parameter_list|(
name|EventMeetingRow
name|row
parameter_list|)
block|{
if|if
condition|(
name|row
operator|.
name|getEvent
argument_list|()
operator|.
name|hasConflicts
argument_list|()
condition|)
block|{
for|for
control|(
name|EventInterface
name|conflict
range|:
name|row
operator|.
name|getEvent
argument_list|()
operator|.
name|getConflicts
argument_list|()
control|)
if|if
condition|(
name|conflict
operator|.
name|inConflict
argument_list|(
name|row
operator|.
name|getMeeting
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
if|if
condition|(
name|inConflict
argument_list|(
name|getData
argument_list|(
name|row
argument_list|)
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opSelectAllConflicting
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hTimes
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|CheckBox
name|ch
init|=
operator|(
name|CheckBox
operator|)
name|w
decl_stmt|;
name|ch
operator|.
name|setValue
argument_list|(
name|getData
argument_list|(
name|row
argument_list|)
operator|.
name|getMeeting
argument_list|()
operator|.
name|hasConflicts
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
if|if
condition|(
name|getData
argument_list|(
name|row
argument_list|)
operator|.
name|getMeeting
argument_list|()
operator|.
name|hasConflicts
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opSelectAllConflicting
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hTimes
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|CheckBox
name|ch
init|=
operator|(
name|CheckBox
operator|)
name|w
decl_stmt|;
name|ch
operator|.
name|setValue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|CheckBox
name|ch
init|=
operator|(
name|CheckBox
operator|)
name|w
decl_stmt|;
if|if
condition|(
name|ch
operator|.
name|getValue
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opClearSelection
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hTimes
operator|.
name|addOperation
argument_list|(
operator|new
name|EventMeetingOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
operator|(
name|hasSelection
argument_list|()
condition|?
name|MESSAGES
operator|.
name|opApproveSelectedMeetings
argument_list|()
else|:
name|MESSAGES
operator|.
name|opApproveAllMeetings
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|(
name|EventMeetingRow
name|row
parameter_list|)
block|{
return|return
name|iApproveDialog
operator|!=
literal|null
operator|&&
name|row
operator|.
name|getMeeting
argument_list|()
operator|.
name|isCanApprove
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|int
name|row
parameter_list|,
name|EventMeetingRow
name|event
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iApproveDialog
operator|.
name|showApprove
argument_list|(
name|events
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hTimes
operator|.
name|addOperation
argument_list|(
operator|new
name|EventMeetingOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|allMustMatch
parameter_list|(
name|boolean
name|hasSelection
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
operator|(
name|hasSelection
argument_list|()
condition|?
name|MESSAGES
operator|.
name|opInquireSelectedMeetings
argument_list|()
else|:
name|MESSAGES
operator|.
name|opInquireAllMeetings
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|(
name|EventMeetingRow
name|row
parameter_list|)
block|{
return|return
name|iApproveDialog
operator|!=
literal|null
operator|&&
name|row
operator|.
name|getMeeting
argument_list|()
operator|.
name|isCanApprove
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|int
name|row
parameter_list|,
name|EventMeetingRow
name|event
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iApproveDialog
operator|.
name|showInquire
argument_list|(
name|events
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hTimes
operator|.
name|addOperation
argument_list|(
operator|new
name|EventMeetingOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
operator|(
name|hasSelection
argument_list|()
condition|?
name|MESSAGES
operator|.
name|opRejectSelectedMeetings
argument_list|()
else|:
name|MESSAGES
operator|.
name|opRejectAllMeetings
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|(
name|EventMeetingRow
name|row
parameter_list|)
block|{
return|return
name|iApproveDialog
operator|!=
literal|null
operator|&&
name|row
operator|.
name|getMeeting
argument_list|()
operator|.
name|isCanApprove
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|int
name|row
parameter_list|,
name|EventMeetingRow
name|event
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iApproveDialog
operator|.
name|showReject
argument_list|(
name|events
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hName
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colName
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hName
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hSection
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colSection
argument_list|()
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hSection
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hType
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colType
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hType
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hDate
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colDate
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hDate
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hTimePub
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colPublishedTime
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hTimePub
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hTimeAll
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colAllocatedTime
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hTimeAll
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hTimeSetup
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colSetupTimeShort
argument_list|()
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hTimeSetup
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hTimeTeardown
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colTeardownTimeShort
argument_list|()
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hTimeTeardown
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hLocation
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colLocation
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hLocation
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hCapacity
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colCapacity
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hCapacity
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hEnrollment
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colEnrollment
argument_list|()
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hEnrollment
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hLimit
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colLimit
argument_list|()
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hLimit
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hSponsor
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colSponsorOrInstructor
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hSponsor
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hContact
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colMainContact
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hContact
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hApproval
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colApproval
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hApproval
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
literal|null
argument_list|,
name|header
argument_list|)
expr_stmt|;
name|addHideOperation
argument_list|(
name|hTimePub
argument_list|,
name|EventFlag
operator|.
name|SHOW_PUBLISHED_TIME
argument_list|)
expr_stmt|;
name|addHideOperation
argument_list|(
name|hTimeAll
argument_list|,
name|EventFlag
operator|.
name|SHOW_ALLOCATED_TIME
argument_list|)
expr_stmt|;
name|addHideOperation
argument_list|(
name|hTimeSetup
argument_list|,
name|EventFlag
operator|.
name|SHOW_SETUP_TIME
argument_list|)
expr_stmt|;
name|addHideOperation
argument_list|(
name|hTimeTeardown
argument_list|,
name|EventFlag
operator|.
name|SHOW_TEARDOWN_TIME
argument_list|)
expr_stmt|;
name|addHideOperation
argument_list|(
name|hCapacity
argument_list|,
name|EventFlag
operator|.
name|SHOW_CAPACITY
argument_list|)
expr_stmt|;
name|addHideOperation
argument_list|(
name|hEnrollment
argument_list|,
name|EventFlag
operator|.
name|SHOW_ENROLLMENT
argument_list|)
expr_stmt|;
name|addHideOperation
argument_list|(
name|hLimit
argument_list|,
name|EventFlag
operator|.
name|SHOW_LIMIT
argument_list|)
expr_stmt|;
name|addHideOperation
argument_list|(
name|hSponsor
argument_list|,
name|EventFlag
operator|.
name|SHOW_SPONSOR
argument_list|)
expr_stmt|;
name|addHideOperation
argument_list|(
name|hContact
argument_list|,
name|EventFlag
operator|.
name|SHOW_MAIN_CONTACT
argument_list|)
expr_stmt|;
name|addSortByOperation
argument_list|(
name|hName
argument_list|,
name|EventSortBy
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|addSortByOperation
argument_list|(
name|hSection
argument_list|,
name|EventSortBy
operator|.
name|SECTION
argument_list|)
expr_stmt|;
name|addSortByOperation
argument_list|(
name|hType
argument_list|,
name|EventSortBy
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|addSortByOperation
argument_list|(
name|hDate
argument_list|,
name|EventSortBy
operator|.
name|DATE
argument_list|)
expr_stmt|;
name|addSortByOperation
argument_list|(
name|hTimePub
argument_list|,
name|EventSortBy
operator|.
name|PUBLISHED_TIME
argument_list|)
expr_stmt|;
name|addSortByOperation
argument_list|(
name|hTimeAll
argument_list|,
name|EventSortBy
operator|.
name|ALLOCATED_TIME
argument_list|)
expr_stmt|;
name|addSortByOperation
argument_list|(
name|hTimeSetup
argument_list|,
name|EventSortBy
operator|.
name|SETUP_TIME
argument_list|)
expr_stmt|;
name|addSortByOperation
argument_list|(
name|hTimeTeardown
argument_list|,
name|EventSortBy
operator|.
name|TEARDOWN_TIME
argument_list|)
expr_stmt|;
name|addSortByOperation
argument_list|(
name|hLocation
argument_list|,
name|EventSortBy
operator|.
name|LOCATION
argument_list|)
expr_stmt|;
name|addSortByOperation
argument_list|(
name|hCapacity
argument_list|,
name|EventSortBy
operator|.
name|CAPACITY
argument_list|)
expr_stmt|;
name|addSortByOperation
argument_list|(
name|hEnrollment
argument_list|,
name|EventSortBy
operator|.
name|ENROLLMENT
argument_list|)
expr_stmt|;
name|addSortByOperation
argument_list|(
name|hLimit
argument_list|,
name|EventSortBy
operator|.
name|LIMIT
argument_list|)
expr_stmt|;
name|addSortByOperation
argument_list|(
name|hSponsor
argument_list|,
name|EventSortBy
operator|.
name|SPONSOR
argument_list|)
expr_stmt|;
name|addSortByOperation
argument_list|(
name|hContact
argument_list|,
name|EventSortBy
operator|.
name|MAIN_CONTACT
argument_list|)
expr_stmt|;
name|addSortByOperation
argument_list|(
name|hApproval
argument_list|,
name|EventSortBy
operator|.
name|APPROVAL
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getCellCount
argument_list|(
literal|0
argument_list|)
condition|;
name|i
operator|++
control|)
name|getCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
literal|0
argument_list|,
name|i
argument_list|,
literal|"unitime-ClickableTableHeaderNoBorderLine"
argument_list|)
expr_stmt|;
name|resetColumnVisibility
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setSelectable
parameter_list|(
name|boolean
name|selectable
parameter_list|)
block|{
name|iSelectable
operator|=
name|selectable
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSelectable
parameter_list|()
block|{
return|return
name|iSelectable
return|;
block|}
specifier|public
name|boolean
name|hasApproveDialog
parameter_list|()
block|{
return|return
name|iApproveDialog
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setApproveDialog
parameter_list|(
name|ApproveDialog
argument_list|<
name|EventMeetingRow
argument_list|>
name|dialog
parameter_list|)
block|{
name|iApproveDialog
operator|=
name|dialog
expr_stmt|;
block|}
specifier|public
name|ApproveDialog
argument_list|<
name|EventMeetingRow
argument_list|>
name|getApproveDialog
parameter_list|()
block|{
return|return
name|iApproveDialog
return|;
block|}
specifier|public
name|void
name|setMeetingFilter
parameter_list|(
name|MeetingFilter
name|filter
parameter_list|)
block|{
name|iMeetingFilter
operator|=
name|filter
expr_stmt|;
block|}
specifier|public
name|void
name|setShowMainContact
parameter_list|(
name|boolean
name|show
parameter_list|)
block|{
name|iShowMainContact
operator|=
name|show
expr_stmt|;
block|}
specifier|public
name|boolean
name|isShowMainContact
parameter_list|()
block|{
return|return
name|iShowMainContact
return|;
block|}
specifier|private
name|void
name|add
parameter_list|(
name|EventInterface
name|event
parameter_list|)
block|{
name|TreeSet
argument_list|<
name|MeetingInterface
argument_list|>
name|meetings
init|=
operator|new
name|TreeSet
argument_list|<
name|MeetingInterface
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|MeetingInterface
name|meeting
range|:
name|event
operator|.
name|getMeetings
argument_list|()
control|)
if|if
condition|(
name|iMeetingFilter
operator|==
literal|null
operator|||
operator|!
name|iMeetingFilter
operator|.
name|filter
argument_list|(
name|meeting
argument_list|)
condition|)
block|{
name|meetings
operator|.
name|add
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|meetings
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
for|for
control|(
name|MeetingInterface
name|meeting
range|:
operator|new
name|TreeSet
argument_list|<
name|MeetingInterface
argument_list|>
argument_list|(
name|meetings
argument_list|)
control|)
block|{
name|add
argument_list|(
name|event
argument_list|,
name|meeting
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|add
parameter_list|(
name|EventInterface
name|event
parameter_list|,
name|MeetingInterface
name|meeting
parameter_list|)
block|{
name|List
argument_list|<
name|Widget
argument_list|>
name|row
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isSelectable
argument_list|()
condition|)
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|MESSAGES
operator|.
name|signSelected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|meeting
operator|.
name|isCanApprove
argument_list|()
condition|)
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|CheckBoxCell
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isColumnVisible
argument_list|(
literal|0
argument_list|)
condition|)
name|setColumnVisible
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
literal|"&nbsp;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|hasCourseNames
argument_list|()
condition|)
block|{
name|String
name|name
init|=
literal|""
decl_stmt|;
name|String
name|section
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|EventType
operator|.
name|Course
condition|)
block|{
name|name
operator|=
name|event
operator|.
name|getName
argument_list|()
expr_stmt|;
name|section
operator|=
literal|"&nbsp;"
expr_stmt|;
block|}
for|for
control|(
name|String
name|cn
range|:
name|event
operator|.
name|getCourseNames
argument_list|()
control|)
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|name
operator|+=
name|cn
expr_stmt|;
block|}
if|else if
condition|(
name|event
operator|.
name|getInstruction
argument_list|()
operator|!=
literal|null
operator|||
name|event
operator|.
name|getType
argument_list|()
operator|==
name|EventType
operator|.
name|Course
condition|)
block|{
comment|// name += "<br><span class='no-control'>" + cn + "</span>";
block|}
else|else
block|{
comment|// name += "<br>" + cn;
block|}
if|if
condition|(
name|event
operator|.
name|hasExternalIds
argument_list|()
condition|)
for|for
control|(
name|String
name|ex
range|:
name|event
operator|.
name|getExternalIds
argument_list|()
control|)
block|{
if|if
condition|(
name|section
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|section
operator|+=
name|ex
expr_stmt|;
block|}
if|else if
condition|(
name|event
operator|.
name|getInstruction
argument_list|()
operator|!=
literal|null
operator|||
name|event
operator|.
name|getType
argument_list|()
operator|==
name|EventType
operator|.
name|Course
condition|)
block|{
comment|// section += "<br><span class='no-control'>" + ex + "</span>";
block|}
else|else
block|{
comment|// section += "<br>" + ex;
block|}
block|}
if|else if
condition|(
name|event
operator|.
name|hasSectionNumber
argument_list|()
condition|)
name|section
operator|=
name|event
operator|.
name|getSectionNumber
argument_list|()
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Hideable
argument_list|(
operator|new
name|HTML
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Hideable
argument_list|(
operator|new
name|NumberCell
argument_list|(
name|section
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Hideable
argument_list|(
operator|new
name|Label
argument_list|(
name|event
operator|.
name|getInstruction
argument_list|()
operator|==
literal|null
condition|?
name|event
operator|.
name|getType
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
else|:
name|event
operator|.
name|getInstruction
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|section
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|isColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colSection
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|)
condition|)
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colSection
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|Hideable
argument_list|(
operator|new
name|HTML
argument_list|(
name|event
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Hideable
argument_list|(
operator|new
name|HTML
argument_list|(
literal|"&nbsp;"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Hideable
argument_list|(
operator|new
name|Label
argument_list|(
name|event
operator|.
name|getType
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|sDateFormat
operator|.
name|format
argument_list|(
name|meeting
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|meeting
operator|.
name|getMeetingTime
argument_list|(
name|CONSTANTS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|meeting
operator|.
name|getAllocatedTime
argument_list|(
name|CONSTANTS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|NumberCell
argument_list|(
name|meeting
operator|.
name|getStartOffset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|NumberCell
argument_list|(
operator|-
name|meeting
operator|.
name|getEndOffset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|meeting
operator|.
name|getLocation
argument_list|()
operator|==
literal|null
condition|)
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|meeting
operator|.
name|getLocationName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|NumberCell
argument_list|(
name|meeting
operator|.
name|getLocation
argument_list|()
operator|.
name|getSize
argument_list|()
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|meeting
operator|.
name|getLocation
argument_list|()
operator|.
name|getSize
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|hasEnrollment
argument_list|()
operator|&&
name|iShowMainContact
condition|)
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|Hideable
argument_list|(
operator|new
name|NumberCell
argument_list|(
name|event
operator|.
name|getEnrollment
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colEnrollment
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|)
condition|)
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colEnrollment
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|Hideable
argument_list|(
operator|new
name|HTML
argument_list|(
literal|"&nbsp;"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|hasMaxCapacity
argument_list|()
operator|&&
name|iShowMainContact
condition|)
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|Hideable
argument_list|(
operator|new
name|NumberCell
argument_list|(
name|event
operator|.
name|getMaxCapacity
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colLimit
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|)
condition|)
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colLimit
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|Hideable
argument_list|(
operator|new
name|HTML
argument_list|(
literal|"&nbsp;"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|hasInstructors
argument_list|()
condition|)
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|Hideable
argument_list|(
operator|new
name|HTML
argument_list|(
name|event
operator|.
name|getInstructorNames
argument_list|(
literal|", "
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|Hideable
argument_list|(
operator|new
name|Label
argument_list|(
name|event
operator|.
name|hasSponsor
argument_list|()
condition|?
name|event
operator|.
name|getSponsor
argument_list|()
operator|.
name|getName
argument_list|()
else|:
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iShowMainContact
condition|)
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|Hideable
argument_list|(
operator|new
name|HTML
argument_list|(
name|event
operator|.
name|hasContact
argument_list|()
condition|?
name|event
operator|.
name|getContact
argument_list|()
operator|.
name|getName
argument_list|()
else|:
literal|"&nbsp;"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|Hideable
argument_list|(
operator|new
name|HTML
argument_list|(
literal|"&nbsp;"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|meeting
operator|.
name|isPast
argument_list|()
condition|)
for|for
control|(
name|Widget
name|w
range|:
name|row
control|)
if|if
condition|(
operator|!
operator|(
name|w
operator|instanceof
name|Hideable
operator|)
condition|)
name|w
operator|.
name|addStyleName
argument_list|(
literal|"past-meeting"
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|meeting
operator|.
name|isApproved
argument_list|()
condition|?
name|meeting
operator|.
name|isPast
argument_list|()
condition|?
literal|"<span class='past-meeting'>"
operator|+
name|sDateFormat
operator|.
name|format
argument_list|(
name|meeting
operator|.
name|getApprovalDate
argument_list|()
argument_list|)
operator|+
literal|"</span>"
else|:
name|sDateFormat
operator|.
name|format
argument_list|(
name|meeting
operator|.
name|getApprovalDate
argument_list|()
argument_list|)
else|:
name|meeting
operator|.
name|isPast
argument_list|()
condition|?
literal|"<span class='not-approved-past'>"
operator|+
name|MESSAGES
operator|.
name|approvalNotApprovedPast
argument_list|()
operator|+
literal|"</span>"
else|:
literal|"<span class='not-approved'>"
operator|+
name|MESSAGES
operator|.
name|approvalNotApproved
argument_list|()
operator|+
literal|"</span>"
argument_list|)
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
operator|new
name|EventMeetingRow
argument_list|(
name|event
argument_list|,
name|meeting
argument_list|,
literal|null
argument_list|)
argument_list|,
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|hasConflicts
argument_list|()
condition|)
for|for
control|(
name|EventInterface
name|conflict
range|:
name|event
operator|.
name|getConflicts
argument_list|()
control|)
name|addConflict
argument_list|(
name|event
argument_list|,
name|meeting
argument_list|,
name|conflict
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addConflict
parameter_list|(
name|EventInterface
name|parent
parameter_list|,
name|MeetingInterface
name|parentMeeting
parameter_list|,
name|EventInterface
name|event
parameter_list|)
block|{
name|TreeSet
argument_list|<
name|MeetingInterface
argument_list|>
name|meetings
init|=
operator|new
name|TreeSet
argument_list|<
name|MeetingInterface
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|MeetingInterface
name|meeting
range|:
name|event
operator|.
name|getMeetings
argument_list|()
control|)
block|{
if|if
condition|(
name|meeting
operator|.
name|inConflict
argument_list|(
name|parentMeeting
argument_list|)
operator|&&
operator|(
name|iMeetingFilter
operator|==
literal|null
operator|||
operator|!
name|iMeetingFilter
operator|.
name|filter
argument_list|(
name|meeting
argument_list|)
operator|)
condition|)
block|{
name|meetings
operator|.
name|add
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|meetings
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
for|for
control|(
name|MeetingInterface
name|meeting
range|:
operator|new
name|TreeSet
argument_list|<
name|MeetingInterface
argument_list|>
argument_list|(
name|meetings
argument_list|)
control|)
block|{
name|List
argument_list|<
name|Widget
argument_list|>
name|row
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|CenterredCell
argument_list|(
name|MESSAGES
operator|.
name|signConflict
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|hasCourseNames
argument_list|()
condition|)
block|{
name|String
name|name
init|=
literal|""
decl_stmt|;
name|String
name|section
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|EventType
operator|.
name|Course
condition|)
block|{
name|name
operator|=
name|event
operator|.
name|getName
argument_list|()
expr_stmt|;
name|section
operator|=
literal|"&nbsp;"
expr_stmt|;
block|}
for|for
control|(
name|String
name|cn
range|:
name|event
operator|.
name|getCourseNames
argument_list|()
control|)
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|name
operator|+=
name|cn
expr_stmt|;
block|}
if|else if
condition|(
name|event
operator|.
name|getInstruction
argument_list|()
operator|!=
literal|null
operator|||
name|event
operator|.
name|getType
argument_list|()
operator|==
name|EventType
operator|.
name|Course
condition|)
block|{
comment|// name += "<br><span class='no-control'>" + cn + "</span>";
block|}
else|else
block|{
comment|// name += "<br>" + cn;
block|}
if|if
condition|(
name|event
operator|.
name|hasExternalIds
argument_list|()
condition|)
for|for
control|(
name|String
name|ex
range|:
name|event
operator|.
name|getExternalIds
argument_list|()
control|)
block|{
if|if
condition|(
name|section
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|section
operator|+=
name|ex
expr_stmt|;
block|}
if|else if
condition|(
name|event
operator|.
name|getInstruction
argument_list|()
operator|!=
literal|null
operator|||
name|event
operator|.
name|getType
argument_list|()
operator|==
name|EventType
operator|.
name|Course
condition|)
block|{
comment|// section += "<br><span class='no-control'>" + ex + "</span>";
block|}
else|else
block|{
comment|// section += "<br>" + ex;
block|}
block|}
if|else if
condition|(
name|event
operator|.
name|hasSectionNumber
argument_list|()
condition|)
name|section
operator|=
name|event
operator|.
name|getSectionNumber
argument_list|()
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Hideable
argument_list|(
operator|new
name|HTML
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Hideable
argument_list|(
operator|new
name|NumberCell
argument_list|(
name|section
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Hideable
argument_list|(
operator|new
name|Label
argument_list|(
name|event
operator|.
name|getInstruction
argument_list|()
operator|==
literal|null
condition|?
name|event
operator|.
name|getType
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
else|:
name|event
operator|.
name|getInstruction
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colSection
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|)
condition|)
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colSection
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|Hideable
argument_list|(
operator|new
name|HTML
argument_list|(
name|event
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Hideable
argument_list|(
operator|new
name|HTML
argument_list|(
literal|"&nbsp;"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Hideable
argument_list|(
operator|new
name|Label
argument_list|(
name|event
operator|.
name|getType
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|sDateFormat
operator|.
name|format
argument_list|(
name|meeting
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|meeting
operator|.
name|getMeetingTime
argument_list|(
name|CONSTANTS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|meeting
operator|.
name|getAllocatedTime
argument_list|(
name|CONSTANTS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|NumberCell
argument_list|(
name|meeting
operator|.
name|getStartOffset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|NumberCell
argument_list|(
operator|-
name|meeting
operator|.
name|getEndOffset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|meeting
operator|.
name|getLocation
argument_list|()
operator|==
literal|null
condition|)
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|meeting
operator|.
name|getLocationName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|NumberCell
argument_list|(
name|meeting
operator|.
name|getLocation
argument_list|()
operator|.
name|getSize
argument_list|()
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|meeting
operator|.
name|getLocation
argument_list|()
operator|.
name|getSize
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|hasEnrollment
argument_list|()
operator|&&
name|iShowMainContact
condition|)
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|Hideable
argument_list|(
operator|new
name|NumberCell
argument_list|(
name|event
operator|.
name|getEnrollment
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colEnrollment
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|)
condition|)
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colEnrollment
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|Hideable
argument_list|(
operator|new
name|HTML
argument_list|(
literal|"&nbsp;"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|hasMaxCapacity
argument_list|()
operator|&&
name|iShowMainContact
condition|)
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|Hideable
argument_list|(
operator|new
name|NumberCell
argument_list|(
name|event
operator|.
name|getMaxCapacity
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colLimit
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|)
condition|)
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colLimit
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|Hideable
argument_list|(
operator|new
name|HTML
argument_list|(
literal|"&nbsp;"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|hasInstructors
argument_list|()
condition|)
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|Hideable
argument_list|(
operator|new
name|HTML
argument_list|(
name|event
operator|.
name|getInstructorNames
argument_list|(
literal|", "
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|Hideable
argument_list|(
operator|new
name|Label
argument_list|(
name|event
operator|.
name|hasSponsor
argument_list|()
condition|?
name|event
operator|.
name|getSponsor
argument_list|()
operator|.
name|getName
argument_list|()
else|:
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iShowMainContact
condition|)
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|Hideable
argument_list|(
operator|new
name|HTML
argument_list|(
name|event
operator|.
name|hasContact
argument_list|()
condition|?
name|event
operator|.
name|getContact
argument_list|()
operator|.
name|getName
argument_list|()
else|:
literal|"&nbsp;"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|Hideable
argument_list|(
operator|new
name|HTML
argument_list|(
literal|"&nbsp;"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|meeting
operator|.
name|isPast
argument_list|()
condition|)
for|for
control|(
name|Widget
name|w
range|:
name|row
control|)
if|if
condition|(
operator|!
operator|(
name|w
operator|instanceof
name|Hideable
operator|)
condition|)
name|w
operator|.
name|addStyleName
argument_list|(
literal|"past-meeting"
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|meeting
operator|.
name|isApproved
argument_list|()
condition|?
name|meeting
operator|.
name|isPast
argument_list|()
condition|?
literal|"<span class='past-meeting'>"
operator|+
name|sDateFormat
operator|.
name|format
argument_list|(
name|meeting
operator|.
name|getApprovalDate
argument_list|()
argument_list|)
operator|+
literal|"</span>"
else|:
name|sDateFormat
operator|.
name|format
argument_list|(
name|meeting
operator|.
name|getApprovalDate
argument_list|()
argument_list|)
else|:
name|meeting
operator|.
name|isPast
argument_list|()
condition|?
literal|"<span class='not-approved-past'>"
operator|+
name|MESSAGES
operator|.
name|approvalNotApprovedPast
argument_list|()
operator|+
literal|"</span>"
else|:
literal|"<span class='not-approved'>"
operator|+
name|MESSAGES
operator|.
name|approvalNotApproved
argument_list|()
operator|+
literal|"</span>"
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|rowNumber
init|=
name|addRow
argument_list|(
operator|new
name|EventMeetingRow
argument_list|(
name|parent
argument_list|,
name|parentMeeting
argument_list|,
operator|new
name|EventMeetingRow
argument_list|(
name|event
argument_list|,
name|meeting
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|,
name|row
argument_list|)
decl_stmt|;
name|getRowFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
name|rowNumber
argument_list|,
literal|"conflict"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getCellCount
argument_list|(
name|rowNumber
argument_list|)
condition|;
name|i
operator|++
control|)
name|getCellFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
name|rowNumber
argument_list|,
name|i
argument_list|,
literal|"conflict-cell"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|resetColumnVisibility
parameter_list|()
block|{
if|if
condition|(
name|getRowCount
argument_list|()
operator|<=
literal|1
condition|)
block|{
name|setColumnVisible
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colSection
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colPublishedTime
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
name|EventCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|EventFlag
operator|.
name|SHOW_PUBLISHED_TIME
argument_list|)
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colAllocatedTime
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
name|EventCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|EventFlag
operator|.
name|SHOW_ALLOCATED_TIME
argument_list|)
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colSetupTimeShort
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
name|EventCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|EventFlag
operator|.
name|SHOW_SETUP_TIME
argument_list|)
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colTeardownTimeShort
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
name|EventCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|EventFlag
operator|.
name|SHOW_TEARDOWN_TIME
argument_list|)
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colMainContact
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
name|iShowMainContact
operator|&&
name|EventCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|EventFlag
operator|.
name|SHOW_MAIN_CONTACT
argument_list|)
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colLimit
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
name|iShowMainContact
operator|&&
name|EventCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|EventFlag
operator|.
name|SHOW_LIMIT
argument_list|)
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colEnrollment
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
name|iShowMainContact
operator|&&
name|EventCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|EventFlag
operator|.
name|SHOW_ENROLLMENT
argument_list|)
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colCapacity
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
name|iShowMainContact
operator|&&
name|EventCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|EventFlag
operator|.
name|SHOW_CAPACITY
argument_list|)
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colSponsorOrInstructor
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
name|EventCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|EventFlag
operator|.
name|SHOW_SPONSOR
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|hideUnimportantColumns
parameter_list|()
block|{
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colPublishedTime
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
name|EventCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|EventFlag
operator|.
name|SHOW_PUBLISHED_TIME
argument_list|)
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colAllocatedTime
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
operator|!
name|EventCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|EventFlag
operator|.
name|SHOW_PUBLISHED_TIME
argument_list|)
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colSetupTimeShort
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colTeardownTimeShort
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colMainContact
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colLimit
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colEnrollment
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colCapacity
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colSponsorOrInstructor
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasSortBy
parameter_list|()
block|{
return|return
name|iSortBy
operator|!=
literal|null
return|;
block|}
specifier|public
name|String
name|getSortBy
parameter_list|()
block|{
return|return
name|iSortBy
return|;
block|}
specifier|public
name|void
name|setSortBy
parameter_list|(
name|String
name|sortBy
parameter_list|)
block|{
name|sort
argument_list|(
name|sortBy
operator|==
literal|null
operator|||
name|sortBy
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|EventSortBy
operator|.
name|valueOf
argument_list|(
name|sortBy
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|onSortByChanded
parameter_list|(
name|EventSortBy
name|sortBy
parameter_list|)
block|{
name|iSortBy
operator|=
operator|(
name|sortBy
operator|==
literal|null
condition|?
literal|null
else|:
name|sortBy
operator|.
name|name
argument_list|()
operator|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addSortByOperation
parameter_list|(
specifier|final
name|UniTimeTableHeader
name|header
parameter_list|,
specifier|final
name|EventSortBy
name|sortBy
parameter_list|)
block|{
name|header
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|sort
argument_list|(
name|sortBy
argument_list|)
expr_stmt|;
name|onSortByChanded
argument_list|(
name|sortBy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|getRowCount
argument_list|()
operator|>
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opSortBy
argument_list|(
name|header
operator|.
name|getHTML
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|sort
parameter_list|(
name|EventSortBy
name|sortBy
parameter_list|)
block|{
if|if
condition|(
name|sortBy
operator|!=
literal|null
condition|)
name|sort
argument_list|(
name|createComparator
argument_list|(
name|sortBy
argument_list|)
argument_list|)
expr_stmt|;
name|iSortBy
operator|=
operator|(
name|sortBy
operator|==
literal|null
condition|?
literal|null
else|:
name|sortBy
operator|.
name|name
argument_list|()
operator|)
expr_stmt|;
name|hideSomeCells
argument_list|()
expr_stmt|;
block|}
specifier|private
name|boolean
name|iFirstHideOperation
init|=
literal|true
decl_stmt|;
specifier|protected
name|void
name|addHideOperation
parameter_list|(
specifier|final
name|UniTimeTableHeader
name|header
parameter_list|,
specifier|final
name|EventFlag
name|flag
parameter_list|)
block|{
specifier|final
name|boolean
name|separator
init|=
name|iFirstHideOperation
decl_stmt|;
name|iFirstHideOperation
operator|=
literal|false
expr_stmt|;
name|Operation
name|op
init|=
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|boolean
name|visible
init|=
name|isColumnVisible
argument_list|(
name|header
operator|.
name|getColumn
argument_list|()
argument_list|)
decl_stmt|;
name|setColumnVisible
argument_list|(
name|header
operator|.
name|getColumn
argument_list|()
argument_list|,
operator|!
name|visible
argument_list|)
expr_stmt|;
name|EventCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|set
argument_list|(
name|flag
argument_list|,
operator|!
name|visible
argument_list|)
expr_stmt|;
if|if
condition|(
name|flag
operator|==
name|EventFlag
operator|.
name|SHOW_ALLOCATED_TIME
operator|&&
name|visible
condition|)
block|{
name|UniTimeTableHeader
name|other
init|=
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colPublishedTime
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isColumnVisible
argument_list|(
name|other
operator|.
name|getColumn
argument_list|()
argument_list|)
condition|)
block|{
name|setColumnVisible
argument_list|(
name|other
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|EventCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|set
argument_list|(
name|EventFlag
operator|.
name|SHOW_PUBLISHED_TIME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|flag
operator|==
name|EventFlag
operator|.
name|SHOW_PUBLISHED_TIME
operator|&&
name|visible
condition|)
block|{
name|UniTimeTableHeader
name|other
init|=
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colAllocatedTime
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isColumnVisible
argument_list|(
name|other
operator|.
name|getColumn
argument_list|()
argument_list|)
condition|)
block|{
name|setColumnVisible
argument_list|(
name|other
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|EventCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|set
argument_list|(
name|EventFlag
operator|.
name|SHOW_ALLOCATED_TIME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
switch|switch
condition|(
name|flag
condition|)
block|{
case|case
name|SHOW_LIMIT
case|:
case|case
name|SHOW_ENROLLMENT
case|:
case|case
name|SHOW_MAIN_CONTACT
case|:
case|case
name|SHOW_CAPACITY
case|:
return|return
name|iShowMainContact
return|;
default|default:
return|return
literal|true
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
name|separator
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|isColumnVisible
argument_list|(
name|header
operator|.
name|getColumn
argument_list|()
argument_list|)
condition|?
name|MESSAGES
operator|.
name|opHide
argument_list|(
name|header
operator|.
name|getHTML
argument_list|()
argument_list|)
else|:
name|MESSAGES
operator|.
name|opShow
argument_list|(
name|header
operator|.
name|getHTML
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|getHeader
argument_list|(
literal|null
argument_list|)
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colName
argument_list|()
argument_list|)
operator|.
name|addOperation
argument_list|(
name|ifNotSelectable
argument_list|(
name|op
argument_list|)
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|flag
condition|)
block|{
case|case
name|SHOW_ALLOCATED_TIME
case|:
case|case
name|SHOW_PUBLISHED_TIME
case|:
case|case
name|SHOW_SETUP_TIME
case|:
case|case
name|SHOW_TEARDOWN_TIME
case|:
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colAllocatedTime
argument_list|()
argument_list|)
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colPublishedTime
argument_list|()
argument_list|)
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colSetupTimeShort
argument_list|()
argument_list|)
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colTeardownTimeShort
argument_list|()
argument_list|)
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_CAPACITY
case|:
case|case
name|SHOW_LIMIT
case|:
case|case
name|SHOW_ENROLLMENT
case|:
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colLocation
argument_list|()
argument_list|)
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|header
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_MAIN_CONTACT
case|:
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colApproval
argument_list|()
argument_list|)
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|header
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_SPONSOR
case|:
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colApproval
argument_list|()
argument_list|)
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|header
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
break|break;
default|default:
name|header
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Operation
name|ifNotSelectable
parameter_list|(
specifier|final
name|Operation
name|op
parameter_list|)
block|{
return|return
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|op
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|op
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|op
operator|.
name|isApplicable
argument_list|()
operator|&&
operator|!
name|isColumnVisible
argument_list|(
name|getHeader
argument_list|(
literal|null
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
name|op
operator|.
name|hasSeparator
argument_list|()
return|;
block|}
block|}
return|;
block|}
specifier|protected
name|Comparator
argument_list|<
name|EventMeetingRow
argument_list|>
name|createComparator
parameter_list|(
specifier|final
name|EventSortBy
name|sortBy
parameter_list|)
block|{
return|return
operator|new
name|Comparator
argument_list|<
name|EventMeetingRow
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|EventMeetingRow
name|o1
parameter_list|,
name|EventMeetingRow
name|o2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|EventMeetingTable
operator|.
name|compare
argument_list|(
name|o1
argument_list|,
name|o2
argument_list|,
name|sortBy
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
if|if
condition|(
name|o1
operator|.
name|isConflict
argument_list|()
condition|)
block|{
if|if
condition|(
name|o2
operator|.
name|isConflict
argument_list|()
condition|)
return|return
name|EventMeetingTable
operator|.
name|compare
argument_list|(
name|o1
operator|.
name|getConflict
argument_list|()
argument_list|,
name|o2
operator|.
name|getConflict
argument_list|()
argument_list|,
name|sortBy
argument_list|)
return|;
else|else
return|return
literal|1
return|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
block|}
return|;
block|}
specifier|public
specifier|static
name|int
name|compareMeetings
parameter_list|(
name|EventInterface
name|o1
parameter_list|,
name|EventInterface
name|o2
parameter_list|,
name|MeetingsSortBy
name|sortBy
parameter_list|)
block|{
name|Iterator
argument_list|<
name|MeetingInterface
argument_list|>
name|i1
init|=
name|o1
operator|.
name|getMeetings
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|,
name|i2
init|=
name|o2
operator|.
name|getMeetings
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i1
operator|.
name|hasNext
argument_list|()
operator|&&
name|i2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|int
name|cmp
init|=
name|MeetingTable
operator|.
name|compare
argument_list|(
name|i1
operator|.
name|next
argument_list|()
argument_list|,
name|i2
operator|.
name|next
argument_list|()
argument_list|,
name|sortBy
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
return|return
operator|(
name|i1
operator|.
name|hasNext
argument_list|()
condition|?
name|i2
operator|.
name|hasNext
argument_list|()
condition|?
literal|0
else|:
literal|1
else|:
name|i2
operator|.
name|hasNext
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|0
operator|)
return|;
block|}
specifier|private
specifier|static
name|int
name|compare
parameter_list|(
name|String
name|s1
parameter_list|,
name|String
name|s2
parameter_list|)
block|{
if|if
condition|(
name|s1
operator|==
literal|null
operator|||
name|s1
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|(
name|s2
operator|==
literal|null
operator|||
name|s2
operator|.
name|isEmpty
argument_list|()
condition|?
literal|0
else|:
literal|1
operator|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|s2
operator|==
literal|null
operator|||
name|s2
operator|.
name|isEmpty
argument_list|()
condition|?
operator|-
literal|1
else|:
name|s1
operator|.
name|compareToIgnoreCase
argument_list|(
name|s2
argument_list|)
operator|)
return|;
block|}
block|}
specifier|public
specifier|static
name|int
name|compare
parameter_list|(
name|EventMeetingRow
name|o1
parameter_list|,
name|EventMeetingRow
name|o2
parameter_list|,
name|EventSortBy
name|sortBy
parameter_list|)
block|{
name|int
name|cmp
decl_stmt|;
switch|switch
condition|(
name|sortBy
condition|)
block|{
case|case
name|NAME
case|:
name|cmp
operator|=
name|o1
operator|.
name|getEvent
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getEvent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|o1
operator|.
name|getEvent
argument_list|()
operator|.
name|getType
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getEvent
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
break|break;
case|case
name|SECTION
case|:
if|if
condition|(
name|o1
operator|.
name|getEvent
argument_list|()
operator|.
name|hasExternalIds
argument_list|()
condition|)
block|{
if|if
condition|(
name|o2
operator|.
name|getEvent
argument_list|()
operator|.
name|hasExternalIds
argument_list|()
condition|)
block|{
name|cmp
operator|=
name|o1
operator|.
name|getEvent
argument_list|()
operator|.
name|getExternalIds
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getEvent
argument_list|()
operator|.
name|getExternalIds
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
else|else
return|return
operator|-
literal|1
return|;
block|}
if|else if
condition|(
name|o2
operator|.
name|getEvent
argument_list|()
operator|.
name|hasExternalIds
argument_list|()
condition|)
return|return
literal|1
return|;
case|case
name|TYPE
case|:
name|cmp
operator|=
name|o1
operator|.
name|getEvent
argument_list|()
operator|.
name|getType
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getEvent
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
if|if
condition|(
name|o1
operator|.
name|getEvent
argument_list|()
operator|.
name|getInstructionType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cmp
operator|=
name|o1
operator|.
name|getEvent
argument_list|()
operator|.
name|getInstructionType
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getEvent
argument_list|()
operator|.
name|getInstructionType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
break|break;
case|case
name|DATE
case|:
name|cmp
operator|=
name|MeetingTable
operator|.
name|compare
argument_list|(
name|o1
operator|.
name|getMeeting
argument_list|()
argument_list|,
name|o2
operator|.
name|getMeeting
argument_list|()
argument_list|,
name|MeetingsSortBy
operator|.
name|DATE
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
break|break;
case|case
name|PUBLISHED_TIME
case|:
name|cmp
operator|=
name|MeetingTable
operator|.
name|compare
argument_list|(
name|o1
operator|.
name|getMeeting
argument_list|()
argument_list|,
name|o2
operator|.
name|getMeeting
argument_list|()
argument_list|,
name|MeetingsSortBy
operator|.
name|PUBLISHED_TIME
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
break|break;
case|case
name|ALLOCATED_TIME
case|:
name|cmp
operator|=
name|MeetingTable
operator|.
name|compare
argument_list|(
name|o1
operator|.
name|getMeeting
argument_list|()
argument_list|,
name|o2
operator|.
name|getMeeting
argument_list|()
argument_list|,
name|MeetingsSortBy
operator|.
name|ALLOCATED_TIME
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
break|break;
case|case
name|SETUP_TIME
case|:
name|cmp
operator|=
name|MeetingTable
operator|.
name|compare
argument_list|(
name|o1
operator|.
name|getMeeting
argument_list|()
argument_list|,
name|o2
operator|.
name|getMeeting
argument_list|()
argument_list|,
name|MeetingsSortBy
operator|.
name|SETUP_TIME
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
break|break;
case|case
name|TEARDOWN_TIME
case|:
name|cmp
operator|=
name|MeetingTable
operator|.
name|compare
argument_list|(
name|o1
operator|.
name|getMeeting
argument_list|()
argument_list|,
name|o2
operator|.
name|getMeeting
argument_list|()
argument_list|,
name|MeetingsSortBy
operator|.
name|TEARDOWN_TIME
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
break|break;
case|case
name|LOCATION
case|:
name|cmp
operator|=
name|MeetingTable
operator|.
name|compare
argument_list|(
name|o1
operator|.
name|getMeeting
argument_list|()
argument_list|,
name|o2
operator|.
name|getMeeting
argument_list|()
argument_list|,
name|MeetingsSortBy
operator|.
name|LOCATION
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
break|break;
case|case
name|CAPACITY
case|:
name|cmp
operator|=
name|MeetingTable
operator|.
name|compare
argument_list|(
name|o1
operator|.
name|getMeeting
argument_list|()
argument_list|,
name|o2
operator|.
name|getMeeting
argument_list|()
argument_list|,
name|MeetingsSortBy
operator|.
name|CAPACITY
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
break|break;
case|case
name|SPONSOR
case|:
name|cmp
operator|=
name|compare
argument_list|(
name|o1
operator|.
name|getEvent
argument_list|()
operator|.
name|getInstructorNames
argument_list|(
literal|"|"
argument_list|)
argument_list|,
name|o2
operator|.
name|getEvent
argument_list|()
operator|.
name|getInstructorNames
argument_list|(
literal|"|"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|compare
argument_list|(
name|o1
operator|.
name|getEvent
argument_list|()
operator|.
name|hasSponsor
argument_list|()
condition|?
name|o1
operator|.
name|getEvent
argument_list|()
operator|.
name|getSponsor
argument_list|()
operator|.
name|getName
argument_list|()
else|:
literal|null
argument_list|,
name|o2
operator|.
name|getEvent
argument_list|()
operator|.
name|hasSponsor
argument_list|()
condition|?
name|o2
operator|.
name|getEvent
argument_list|()
operator|.
name|getSponsor
argument_list|()
operator|.
name|getName
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
break|break;
case|case
name|MAIN_CONTACT
case|:
name|cmp
operator|=
name|compare
argument_list|(
name|o1
operator|.
name|getEvent
argument_list|()
operator|.
name|hasContact
argument_list|()
condition|?
name|o1
operator|.
name|getEvent
argument_list|()
operator|.
name|getContact
argument_list|()
operator|.
name|getName
argument_list|()
else|:
literal|null
argument_list|,
name|o2
operator|.
name|getEvent
argument_list|()
operator|.
name|hasContact
argument_list|()
condition|?
name|o2
operator|.
name|getEvent
argument_list|()
operator|.
name|getContact
argument_list|()
operator|.
name|getName
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
break|break;
case|case
name|APPROVAL
case|:
name|cmp
operator|=
name|MeetingTable
operator|.
name|compare
argument_list|(
name|o1
operator|.
name|getMeeting
argument_list|()
argument_list|,
name|o2
operator|.
name|getMeeting
argument_list|()
argument_list|,
name|MeetingsSortBy
operator|.
name|APPROVAL
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
break|break;
case|case
name|LIMIT
case|:
name|cmp
operator|=
operator|-
operator|(
name|o1
operator|.
name|getEvent
argument_list|()
operator|.
name|hasMaxCapacity
argument_list|()
condition|?
name|o1
operator|.
name|getEvent
argument_list|()
operator|.
name|getMaxCapacity
argument_list|()
else|:
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getEvent
argument_list|()
operator|.
name|hasMaxCapacity
argument_list|()
condition|?
name|o2
operator|.
name|getEvent
argument_list|()
operator|.
name|getMaxCapacity
argument_list|()
else|:
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
break|break;
case|case
name|ENROLLMENT
case|:
name|cmp
operator|=
operator|-
operator|(
name|o1
operator|.
name|getEvent
argument_list|()
operator|.
name|hasEnrollment
argument_list|()
condition|?
name|o1
operator|.
name|getEvent
argument_list|()
operator|.
name|getEnrollment
argument_list|()
else|:
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getEvent
argument_list|()
operator|.
name|hasEnrollment
argument_list|()
condition|?
name|o2
operator|.
name|getEvent
argument_list|()
operator|.
name|getEnrollment
argument_list|()
else|:
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
break|break;
block|}
name|cmp
operator|=
name|o1
operator|.
name|getEvent
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getEvent
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|o1
operator|.
name|getMeeting
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getMeeting
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
specifier|abstract
class|class
name|EventMeetingOperation
implements|implements
name|Operation
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
if|if
condition|(
name|hasSelection
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|row
init|=
name|getRowCount
argument_list|()
operator|-
literal|1
init|;
name|row
operator|>=
literal|1
condition|;
name|row
operator|--
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|CheckBox
name|ch
init|=
operator|(
name|CheckBox
operator|)
name|w
decl_stmt|;
if|if
condition|(
name|ch
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|EventMeetingRow
name|e
init|=
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|isApplicable
argument_list|(
name|e
argument_list|)
condition|)
name|execute
argument_list|(
name|row
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|else if
condition|(
name|allowNoSelection
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|row
init|=
name|getRowCount
argument_list|()
operator|-
literal|1
init|;
name|row
operator|>=
literal|1
condition|;
name|row
operator|--
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|EventMeetingRow
name|e
init|=
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|isApplicable
argument_list|(
name|e
argument_list|)
condition|)
name|execute
argument_list|(
name|row
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|boolean
name|hasSelection
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|CheckBox
name|ch
init|=
operator|(
name|CheckBox
operator|)
name|w
decl_stmt|;
if|if
condition|(
name|ch
operator|.
name|getValue
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
name|boolean
name|hasSelection
init|=
name|hasSelection
argument_list|()
decl_stmt|;
name|boolean
name|allMustMatch
init|=
name|allMustMatch
argument_list|(
name|hasSelection
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasSelection
condition|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|CheckBox
name|ch
init|=
operator|(
name|CheckBox
operator|)
name|w
decl_stmt|;
if|if
condition|(
name|ch
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|EventMeetingRow
name|e
init|=
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|isApplicable
argument_list|(
name|e
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|allMustMatch
condition|)
return|return
literal|true
return|;
block|}
else|else
block|{
if|if
condition|(
name|allMustMatch
condition|)
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
return|return
name|allMustMatch
return|;
block|}
if|else if
condition|(
name|allowNoSelection
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|EventMeetingRow
name|e
init|=
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|isApplicable
argument_list|(
name|e
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|allMustMatch
condition|)
return|return
literal|true
return|;
block|}
else|else
block|{
if|if
condition|(
name|allMustMatch
condition|)
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
name|allMustMatch
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|EventMeetingRow
argument_list|>
name|events
parameter_list|()
block|{
name|List
argument_list|<
name|EventMeetingRow
argument_list|>
name|events
init|=
operator|new
name|ArrayList
argument_list|<
name|EventMeetingRow
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasSelection
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|CheckBox
name|ch
init|=
operator|(
name|CheckBox
operator|)
name|w
decl_stmt|;
if|if
condition|(
name|ch
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|EventMeetingRow
name|e
init|=
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|isApplicable
argument_list|(
name|e
argument_list|)
condition|)
name|events
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|else if
condition|(
name|allowNoSelection
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|EventMeetingRow
name|e
init|=
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|isApplicable
argument_list|(
name|e
argument_list|)
condition|)
name|events
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|events
return|;
block|}
specifier|public
name|List
argument_list|<
name|Integer
argument_list|>
name|rows
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|rows
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasSelection
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|CheckBox
name|ch
init|=
operator|(
name|CheckBox
operator|)
name|w
decl_stmt|;
if|if
condition|(
name|ch
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|EventMeetingRow
name|e
init|=
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|isApplicable
argument_list|(
name|e
argument_list|)
condition|)
name|rows
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|else if
condition|(
name|allowNoSelection
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|EventMeetingRow
name|e
init|=
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|isApplicable
argument_list|(
name|e
argument_list|)
condition|)
name|rows
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|rows
return|;
block|}
specifier|public
name|boolean
name|allMustMatch
parameter_list|(
name|boolean
name|hasSelection
parameter_list|)
block|{
return|return
name|hasSelection
return|;
block|}
specifier|public
name|boolean
name|allowNoSelection
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
specifier|abstract
name|boolean
name|isApplicable
parameter_list|(
name|EventMeetingRow
name|event
parameter_list|)
function_decl|;
specifier|public
specifier|abstract
name|void
name|execute
parameter_list|(
name|int
name|row
parameter_list|,
name|EventMeetingRow
name|event
parameter_list|)
function_decl|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|EventInterface
name|next
parameter_list|(
name|Long
name|eventId
parameter_list|)
block|{
name|boolean
name|next
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|EventMeetingRow
name|data
init|=
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|data
operator|.
name|isConflict
argument_list|()
condition|)
block|{
if|if
condition|(
name|next
operator|&&
operator|!
name|eventId
operator|.
name|equals
argument_list|(
name|data
operator|.
name|getEvent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
return|return
name|data
operator|.
name|getEvent
argument_list|()
return|;
if|else if
condition|(
name|eventId
operator|.
name|equals
argument_list|(
name|data
operator|.
name|getEvent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
name|next
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|EventInterface
name|previous
parameter_list|(
name|Long
name|eventId
parameter_list|)
block|{
name|EventInterface
name|prev
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|EventMeetingRow
name|data
init|=
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|data
operator|.
name|isConflict
argument_list|()
condition|)
block|{
if|if
condition|(
name|eventId
operator|.
name|equals
argument_list|(
name|data
operator|.
name|getEvent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
return|return
name|prev
return|;
else|else
name|prev
operator|=
name|data
operator|.
name|getEvent
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|HandlerRegistration
name|addValueChangeHandler
parameter_list|(
name|ValueChangeHandler
argument_list|<
name|List
argument_list|<
name|EventMeetingRow
argument_list|>
argument_list|>
name|handler
parameter_list|)
block|{
return|return
name|addHandler
argument_list|(
name|handler
argument_list|,
name|ValueChangeEvent
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|EventMeetingRow
argument_list|>
name|getValue
parameter_list|()
block|{
name|List
argument_list|<
name|EventMeetingRow
argument_list|>
name|value
init|=
operator|new
name|ArrayList
argument_list|<
name|EventMeetingRow
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|EventMeetingRow
name|data
init|=
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
operator|&&
operator|!
name|data
operator|.
name|isConflict
argument_list|()
condition|)
name|value
operator|.
name|add
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|List
argument_list|<
name|EventMeetingRow
argument_list|>
name|value
parameter_list|)
block|{
name|setValue
argument_list|(
name|value
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|List
argument_list|<
name|EventMeetingRow
argument_list|>
name|value
parameter_list|,
name|boolean
name|fireEvents
parameter_list|)
block|{
name|clearTable
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|resetColumnVisibility
argument_list|()
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
for|for
control|(
name|EventMeetingRow
name|event
range|:
name|value
control|)
name|add
argument_list|(
name|event
operator|.
name|getEvent
argument_list|()
argument_list|,
name|event
operator|.
name|getMeeting
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSortBy
operator|!=
literal|null
condition|)
name|sort
argument_list|(
name|createComparator
argument_list|(
name|EventSortBy
operator|.
name|valueOf
argument_list|(
name|iSortBy
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|hideSomeCells
argument_list|()
expr_stmt|;
if|if
condition|(
name|fireEvents
condition|)
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|this
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setEvents
parameter_list|(
name|List
argument_list|<
name|EventInterface
argument_list|>
name|value
parameter_list|)
block|{
name|setEvents
argument_list|(
name|value
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setEvents
parameter_list|(
name|List
argument_list|<
name|EventInterface
argument_list|>
name|value
parameter_list|,
name|boolean
name|fireEvents
parameter_list|)
block|{
name|clearTable
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|resetColumnVisibility
argument_list|()
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
for|for
control|(
name|EventInterface
name|event
range|:
name|value
control|)
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSortBy
operator|!=
literal|null
condition|)
name|sort
argument_list|(
name|createComparator
argument_list|(
name|EventSortBy
operator|.
name|valueOf
argument_list|(
name|iSortBy
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|hideSomeCells
argument_list|()
expr_stmt|;
if|if
condition|(
name|fireEvents
condition|)
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|this
argument_list|,
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|EventMeetingRow
block|{
name|EventInterface
name|iEvent
decl_stmt|;
name|MeetingInterface
name|iMeeting
decl_stmt|;
name|EventMeetingRow
name|iConflict
decl_stmt|;
name|EventMeetingRow
parameter_list|(
name|EventInterface
name|event
parameter_list|,
name|MeetingInterface
name|meeting
parameter_list|,
name|EventMeetingRow
name|conflict
parameter_list|)
block|{
name|iEvent
operator|=
name|event
expr_stmt|;
name|iMeeting
operator|=
name|meeting
expr_stmt|;
name|iConflict
operator|=
name|conflict
expr_stmt|;
block|}
specifier|public
name|EventInterface
name|getEvent
parameter_list|()
block|{
return|return
name|iEvent
return|;
block|}
specifier|public
name|MeetingInterface
name|getMeeting
parameter_list|()
block|{
return|return
name|iMeeting
return|;
block|}
specifier|public
name|boolean
name|isConflict
parameter_list|()
block|{
return|return
name|iConflict
operator|!=
literal|null
return|;
block|}
specifier|public
name|EventMeetingRow
name|getConflict
parameter_list|()
block|{
return|return
name|iConflict
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|Hideable
extends|extends
name|SimplePanel
implements|implements
name|HasCellAlignment
block|{
specifier|public
name|Hideable
parameter_list|(
name|Widget
name|child
parameter_list|)
block|{
name|super
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setVisible
parameter_list|(
name|boolean
name|visible
parameter_list|)
block|{
name|getWidget
argument_list|()
operator|.
name|setVisible
argument_list|(
name|visible
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isVisible
parameter_list|()
block|{
return|return
name|getWidget
argument_list|()
operator|.
name|isVisible
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|HorizontalAlignmentConstant
name|getCellAlignment
parameter_list|()
block|{
if|if
condition|(
name|getWidget
argument_list|()
operator|instanceof
name|HasCellAlignment
condition|)
return|return
operator|(
operator|(
name|HasCellAlignment
operator|)
name|getWidget
argument_list|()
operator|)
operator|.
name|getCellAlignment
argument_list|()
return|;
return|return
name|HasHorizontalAlignment
operator|.
name|ALIGN_LEFT
return|;
block|}
block|}
specifier|public
name|void
name|hideSomeCells
parameter_list|()
block|{
name|Long
name|eventId
init|=
literal|null
decl_stmt|,
name|conflictId
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|EventMeetingRow
name|data
init|=
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|data
operator|.
name|isConflict
argument_list|()
condition|)
block|{
if|if
condition|(
name|eventId
operator|==
literal|null
operator|||
operator|!
name|eventId
operator|.
name|equals
argument_list|(
name|data
operator|.
name|getEvent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|getCellCount
argument_list|(
name|row
argument_list|)
condition|;
name|col
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|Hideable
condition|)
name|w
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|getCellFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
literal|"event-cell"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|getCellCount
argument_list|(
name|row
argument_list|)
condition|;
name|col
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|Hideable
condition|)
name|w
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|getCellFormatter
argument_list|()
operator|.
name|removeStyleName
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
literal|"event-cell"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|conflictId
operator|==
literal|null
operator|||
operator|!
name|conflictId
operator|.
name|equals
argument_list|(
name|data
operator|.
name|getConflict
argument_list|()
operator|.
name|getEvent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|getCellCount
argument_list|(
name|row
argument_list|)
condition|;
name|col
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|Hideable
condition|)
name|w
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|getCellFormatter
argument_list|()
operator|.
name|removeStyleName
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
literal|"event-cell"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|getCellCount
argument_list|(
name|row
argument_list|)
condition|;
name|col
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|Hideable
condition|)
name|w
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|getCellFormatter
argument_list|()
operator|.
name|removeStyleName
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
literal|"event-cell"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|eventId
operator|=
name|data
operator|.
name|getEvent
argument_list|()
operator|.
name|getId
argument_list|()
expr_stmt|;
name|conflictId
operator|=
operator|(
name|data
operator|.
name|isConflict
argument_list|()
condition|?
name|data
operator|.
name|getConflict
argument_list|()
operator|.
name|getEvent
argument_list|()
operator|.
name|getId
argument_list|()
else|:
literal|null
operator|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

