begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|events
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|aria
operator|.
name|AriaStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|aria
operator|.
name|AriaTextBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|ServerDateTimeFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcResponseList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtAriaMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AcademicSessionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AcademicSessionProvider
operator|.
name|AcademicSessionChangeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AcademicSessionProvider
operator|.
name|AcademicSessionChangeHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|RequestSessionDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|SessionMonth
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
operator|.
name|ScheduledCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|BlurEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|BlurHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|FocusEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|FocusHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|HasMouseDownHandlers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyCodes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyDownEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyDownHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseDownEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseDownHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|shared
operator|.
name|HandlerRegistration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|DateTimeFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|regexp
operator|.
name|shared
operator|.
name|MatchResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|regexp
operator|.
name|shared
operator|.
name|RegExp
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DOM
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|AbsolutePanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasText
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|PopupPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|RootPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|datepicker
operator|.
name|client
operator|.
name|CalendarUtil
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|SingleDateSelector
extends|extends
name|UniTimeWidget
argument_list|<
name|AriaTextBox
argument_list|>
implements|implements
name|HasValue
argument_list|<
name|Date
argument_list|>
implements|,
name|HasText
block|{
specifier|private
specifier|static
specifier|final
name|GwtAriaMessages
name|ARIA
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtAriaMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|GwtRpcServiceAsync
name|RPC
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtRpcService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|GwtConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|RegExp
index|[]
name|iRegExp
init|=
operator|new
name|RegExp
index|[]
block|{
name|RegExp
operator|.
name|compile
argument_list|(
literal|"^([0-9]+)[/ ]*([0-9]*)[/ ]*([0-9]*)$"
argument_list|)
block|,
name|RegExp
operator|.
name|compile
argument_list|(
literal|"^([0-9]+)\\.?([0-9]*)\\.?([0-9]*)$"
argument_list|)
block|}
decl_stmt|;
specifier|private
name|PopupPanel
name|iPopup
decl_stmt|;
specifier|private
name|SingleMonth
name|iMonth
decl_stmt|;
specifier|private
name|DateTimeFormat
name|iFormat
init|=
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|eventDateFormat
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|AcademicSessionProvider
name|iAcademicSession
decl_stmt|;
name|AriaTextBox
name|iPicker
decl_stmt|;
specifier|private
name|boolean
name|iHint
decl_stmt|;
specifier|public
name|SingleDateSelector
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|AriaTextBox
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SingleDateSelector
parameter_list|(
name|AcademicSessionProvider
name|session
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|AriaTextBox
argument_list|()
argument_list|,
name|session
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SingleDateSelector
parameter_list|(
name|AcademicSessionProvider
name|session
parameter_list|,
name|boolean
name|hint
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|AriaTextBox
argument_list|()
argument_list|,
name|session
argument_list|,
name|hint
argument_list|)
expr_stmt|;
block|}
specifier|private
name|SingleDateSelector
parameter_list|(
name|AriaTextBox
name|text
parameter_list|,
name|AcademicSessionProvider
name|session
parameter_list|,
name|boolean
name|hint
parameter_list|)
block|{
name|super
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|iPicker
operator|=
name|getWidget
argument_list|()
expr_stmt|;
name|iAcademicSession
operator|=
name|session
expr_stmt|;
name|iHint
operator|=
name|hint
expr_stmt|;
if|if
condition|(
name|iHint
condition|)
name|setHint
argument_list|(
name|iFormat
operator|.
name|getPattern
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
name|iPicker
operator|.
name|setStyleName
argument_list|(
literal|"gwt-SuggestBox"
argument_list|)
expr_stmt|;
name|iPicker
operator|.
name|addStyleName
argument_list|(
literal|"unitime-DateSelectionBox"
argument_list|)
expr_stmt|;
name|iPicker
operator|.
name|setAriaLabel
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|iMonth
operator|=
operator|new
name|SingleMonth
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|init
parameter_list|()
block|{
name|super
operator|.
name|init
argument_list|()
expr_stmt|;
if|if
condition|(
name|iPopup
operator|!=
literal|null
operator|&&
name|iPopup
operator|.
name|isShowing
argument_list|()
operator|&&
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|AriaStatus
operator|.
name|getInstance
argument_list|()
operator|.
name|setText
argument_list|(
name|ARIA
operator|.
name|singleDateCursor
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|singleDateSelectionFormat
argument_list|()
argument_list|)
operator|.
name|format
argument_list|(
name|getValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
name|AbsolutePanel
name|panel
init|=
operator|new
name|AbsolutePanel
argument_list|()
decl_stmt|;
name|panel
operator|.
name|setStyleName
argument_list|(
literal|"unitime-DateSelector"
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|iMonth
argument_list|)
expr_stmt|;
name|iPopup
operator|=
operator|new
name|PopupPanel
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iPopup
operator|.
name|setPreviewingAllNativeEvents
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iPopup
operator|.
name|setStyleName
argument_list|(
literal|"unitime-DateSelectionBoxPopup"
argument_list|)
expr_stmt|;
name|iPopup
operator|.
name|setWidget
argument_list|(
name|panel
argument_list|)
expr_stmt|;
name|iPicker
operator|.
name|addFocusHandler
argument_list|(
operator|new
name|FocusHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFocus
parameter_list|(
name|FocusEvent
name|event
parameter_list|)
block|{
name|iPopup
operator|.
name|showRelativeTo
argument_list|(
name|iPicker
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iPicker
operator|.
name|addBlurHandler
argument_list|(
operator|new
name|BlurHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onBlur
parameter_list|(
name|BlurEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|iPopup
operator|.
name|isShowing
argument_list|()
condition|)
name|iPopup
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iPicker
operator|.
name|addKeyDownHandler
argument_list|(
operator|new
name|KeyDownHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyDown
parameter_list|(
name|KeyDownEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|iPopup
operator|.
name|isShowing
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|event
operator|.
name|getNativeEvent
argument_list|()
operator|.
name|getKeyCode
argument_list|()
condition|)
block|{
case|case
name|KeyCodes
operator|.
name|KEY_UP
case|:
name|iMonth
operator|.
name|addDays
argument_list|(
operator|-
literal|7
argument_list|)
expr_stmt|;
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
break|break;
case|case
name|KeyCodes
operator|.
name|KEY_DOWN
case|:
name|iMonth
operator|.
name|addDays
argument_list|(
operator|+
literal|7
argument_list|)
expr_stmt|;
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
break|break;
case|case
name|KeyCodes
operator|.
name|KEY_RIGHT
case|:
if|if
condition|(
name|iPicker
operator|.
name|getCursorPos
argument_list|()
operator|==
name|iPicker
operator|.
name|getText
argument_list|()
operator|.
name|length
argument_list|()
condition|)
block|{
name|iMonth
operator|.
name|addDays
argument_list|(
operator|+
literal|1
argument_list|)
expr_stmt|;
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|KeyCodes
operator|.
name|KEY_LEFT
case|:
if|if
condition|(
name|iPicker
operator|.
name|getCursorPos
argument_list|()
operator|==
literal|0
condition|)
block|{
name|iMonth
operator|.
name|addDays
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|KeyCodes
operator|.
name|KEY_PAGEUP
case|:
name|iMonth
operator|.
name|addMonths
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
break|break;
case|case
name|KeyCodes
operator|.
name|KEY_PAGEDOWN
case|:
name|iMonth
operator|.
name|addMonths
argument_list|(
operator|+
literal|1
argument_list|)
expr_stmt|;
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
break|break;
case|case
name|KeyCodes
operator|.
name|KEY_ESCAPE
case|:
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
name|iPopup
operator|.
name|hide
argument_list|()
expr_stmt|;
break|break;
case|case
name|KeyCodes
operator|.
name|KEY_ENTER
case|:
if|if
condition|(
name|iMonth
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|iPicker
operator|.
name|setText
argument_list|(
name|iFormat
operator|.
name|format
argument_list|(
name|iMonth
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|SingleDateSelector
operator|.
name|this
argument_list|,
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|AriaStatus
operator|.
name|getInstance
argument_list|()
operator|.
name|setText
argument_list|(
name|ARIA
operator|.
name|singleDateSelected
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|singleDateSelectionFormat
argument_list|()
argument_list|)
operator|.
name|format
argument_list|(
name|getValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
name|iPopup
operator|.
name|hide
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
if|if
condition|(
name|event
operator|.
name|getNativeEvent
argument_list|()
operator|.
name|getKeyCode
argument_list|()
operator|==
name|KeyCodes
operator|.
name|KEY_DOWN
operator|&&
operator|(
name|event
operator|.
name|getNativeEvent
argument_list|()
operator|.
name|getAltKey
argument_list|()
operator|||
name|iPicker
operator|.
name|getCursorPos
argument_list|()
operator|==
name|iPicker
operator|.
name|getText
argument_list|()
operator|.
name|length
argument_list|()
operator|)
condition|)
block|{
try|try
block|{
name|iMonth
operator|.
name|setValue
argument_list|(
name|iFormat
operator|.
name|parse
argument_list|(
name|iPicker
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|iPopup
operator|.
name|showRelativeTo
argument_list|(
name|iPicker
argument_list|)
expr_stmt|;
if|if
condition|(
name|iMonth
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|AriaStatus
operator|.
name|getInstance
argument_list|()
operator|.
name|setText
argument_list|(
name|ARIA
operator|.
name|singleDatePopupOpenedDateSelected
argument_list|(
name|ARIA
operator|.
name|singleDateCursor
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|singleDateSelectionFormat
argument_list|()
argument_list|)
operator|.
name|format
argument_list|(
name|iMonth
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|AriaStatus
operator|.
name|getInstance
argument_list|()
operator|.
name|setText
argument_list|(
name|ARIA
operator|.
name|singleDatePopupOpenedNoDateSelected
argument_list|(
name|iMonth
operator|.
name|getCalendarTitle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|iMonth
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Date
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Date
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|iPicker
operator|.
name|setText
argument_list|(
name|iFormat
operator|.
name|format
argument_list|(
name|iMonth
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iPopup
operator|.
name|isShowing
argument_list|()
condition|)
name|iPopup
operator|.
name|hide
argument_list|()
expr_stmt|;
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|SingleDateSelector
operator|.
name|this
argument_list|,
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|iPicker
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|MatchResult
name|match
init|=
name|iRegExp
index|[
literal|0
index|]
operator|.
name|exec
argument_list|(
name|iPicker
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|month
init|=
operator|-
literal|1
decl_stmt|,
name|day
init|=
operator|-
literal|1
decl_stmt|,
name|year
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|match
operator|!=
literal|null
condition|)
block|{
name|month
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|match
operator|.
name|getGroup
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|day
operator|=
operator|(
name|match
operator|.
name|getGroup
argument_list|(
literal|2
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|?
literal|1
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|match
operator|.
name|getGroup
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|)
expr_stmt|;
name|year
operator|=
operator|(
name|match
operator|.
name|getGroup
argument_list|(
literal|3
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|?
operator|-
literal|1
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|match
operator|.
name|getGroup
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|)
expr_stmt|;
block|}
else|else
block|{
name|match
operator|=
name|iRegExp
index|[
literal|1
index|]
operator|.
name|exec
argument_list|(
name|iPicker
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|match
operator|!=
literal|null
condition|)
block|{
name|day
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|match
operator|.
name|getGroup
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|month
operator|=
operator|(
name|match
operator|.
name|getGroup
argument_list|(
literal|2
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|?
operator|-
literal|1
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|match
operator|.
name|getGroup
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|)
expr_stmt|;
name|year
operator|=
operator|(
name|match
operator|.
name|getGroup
argument_list|(
literal|3
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|?
operator|-
literal|1
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|match
operator|.
name|getGroup
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|year
operator|<=
literal|99
operator|&&
name|month
operator|>=
literal|0
operator|&&
name|iMonth
operator|.
name|getMonths
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SessionMonth
name|m
range|:
name|iMonth
operator|.
name|getMonths
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getMonth
argument_list|()
operator|+
literal|1
operator|==
name|month
condition|)
block|{
if|if
condition|(
name|year
operator|<
literal|0
operator|||
name|year
operator|==
name|m
operator|.
name|getYear
argument_list|()
operator|+
literal|1900
operator|||
name|year
operator|==
name|m
operator|.
name|getYear
argument_list|()
operator|+
literal|2000
condition|)
block|{
name|year
operator|=
name|m
operator|.
name|getYear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|year
operator|<
literal|0
condition|)
block|{
name|year
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"yyyy"
argument_list|)
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|year
operator|<=
literal|99
condition|)
block|{
name|year
operator|+=
literal|2000
expr_stmt|;
block|}
if|if
condition|(
name|year
operator|>=
literal|0
operator|&&
name|month
operator|>=
literal|1
operator|&&
name|month
operator|<=
literal|12
operator|&&
name|day
operator|>=
literal|1
condition|)
block|{
name|iMonth
operator|.
name|setDate
argument_list|(
name|year
argument_list|,
name|month
argument_list|,
name|day
argument_list|)
expr_stmt|;
name|setValue
argument_list|(
name|iMonth
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|SingleDateSelector
operator|.
name|this
argument_list|,
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|Date
name|date
init|=
literal|null
decl_stmt|;
try|try
block|{
name|date
operator|=
name|iFormat
operator|.
name|parse
argument_list|(
name|iPicker
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|iMonth
operator|.
name|setValue
argument_list|(
name|date
argument_list|)
expr_stmt|;
name|setValue
argument_list|(
name|date
operator|==
literal|null
condition|?
literal|null
else|:
name|iMonth
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|SingleDateSelector
operator|.
name|this
argument_list|,
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|iAcademicSession
operator|!=
literal|null
condition|)
block|{
name|iAcademicSession
operator|.
name|addAcademicSessionChangeHandler
argument_list|(
operator|new
name|AcademicSessionChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onAcademicSessionChange
parameter_list|(
name|AcademicSessionChangeEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|isChanged
argument_list|()
condition|)
name|init
argument_list|(
name|event
operator|.
name|getNewAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|init
argument_list|(
name|iAcademicSession
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFirstDate
parameter_list|(
name|Date
name|firstDate
parameter_list|)
block|{
name|iMonth
operator|.
name|setFirstDate
argument_list|(
name|firstDate
operator|==
literal|null
condition|?
literal|null
else|:
name|iFormat
operator|.
name|parse
argument_list|(
name|iFormat
operator|.
name|format
argument_list|(
name|firstDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setLastDate
parameter_list|(
name|Date
name|lastDate
parameter_list|)
block|{
name|iMonth
operator|.
name|setLastDate
argument_list|(
name|lastDate
operator|==
literal|null
condition|?
literal|null
else|:
name|iFormat
operator|.
name|parse
argument_list|(
name|iFormat
operator|.
name|format
argument_list|(
name|lastDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|iHint
condition|)
name|setHint
argument_list|(
name|MESSAGES
operator|.
name|hintNoSession
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|iHint
condition|)
name|setHint
argument_list|(
name|MESSAGES
operator|.
name|waitLoadingDataForSession
argument_list|(
name|iAcademicSession
operator|.
name|getAcademicSessionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
operator|new
name|RequestSessionDetails
argument_list|(
name|sessionId
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|GwtRpcResponseList
argument_list|<
name|SessionMonth
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|setErrorHint
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|GwtRpcResponseList
argument_list|<
name|SessionMonth
argument_list|>
name|result
parameter_list|)
block|{
if|if
condition|(
name|iHint
condition|)
name|setHint
argument_list|(
name|iFormat
operator|.
name|getPattern
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
name|iMonth
operator|.
name|setMonths
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|P
extends|extends
name|AbsolutePanel
implements|implements
name|HasMouseDownHandlers
block|{
specifier|private
name|String
name|iCaption
decl_stmt|;
specifier|private
name|P
parameter_list|(
name|String
name|caption
parameter_list|,
name|String
modifier|...
name|styles
parameter_list|)
block|{
name|iCaption
operator|=
name|caption
expr_stmt|;
if|if
condition|(
name|caption
operator|!=
literal|null
condition|)
name|getElement
argument_list|()
operator|.
name|setInnerHTML
argument_list|(
name|caption
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|style
range|:
name|styles
control|)
if|if
condition|(
name|style
operator|!=
literal|null
operator|&&
operator|!
name|style
operator|.
name|isEmpty
argument_list|()
condition|)
name|addStyleName
argument_list|(
name|style
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEDOWN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onBrowserEvent
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|DOM
operator|.
name|eventGetType
argument_list|(
name|event
argument_list|)
condition|)
block|{
case|case
name|Event
operator|.
name|ONMOUSEDOWN
case|:
name|MouseDownEvent
operator|.
name|fireNativeEvent
argument_list|(
name|event
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
annotation|@
name|Override
specifier|public
name|HandlerRegistration
name|addMouseDownHandler
parameter_list|(
name|MouseDownHandler
name|handler
parameter_list|)
block|{
return|return
name|addHandler
argument_list|(
name|handler
argument_list|,
name|MouseDownEvent
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|getCaption
parameter_list|()
block|{
return|return
name|iCaption
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|D
extends|extends
name|AbsolutePanel
implements|implements
name|HasMouseDownHandlers
block|{
specifier|private
name|int
name|iNumber
decl_stmt|;
specifier|private
name|D
parameter_list|(
name|int
name|number
parameter_list|,
name|String
modifier|...
name|styles
parameter_list|)
block|{
name|iNumber
operator|=
name|number
expr_stmt|;
name|getElement
argument_list|()
operator|.
name|setInnerHTML
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|number
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|style
range|:
name|styles
control|)
if|if
condition|(
name|style
operator|!=
literal|null
operator|&&
operator|!
name|style
operator|.
name|isEmpty
argument_list|()
condition|)
name|addStyleName
argument_list|(
name|style
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEDOWN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onBrowserEvent
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|DOM
operator|.
name|eventGetType
argument_list|(
name|event
argument_list|)
condition|)
block|{
case|case
name|Event
operator|.
name|ONMOUSEDOWN
case|:
name|MouseDownEvent
operator|.
name|fireNativeEvent
argument_list|(
name|event
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
specifier|public
name|int
name|getNumber
parameter_list|()
block|{
return|return
name|iNumber
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|valueOf
argument_list|(
literal|1
operator|+
name|getNumber
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|HandlerRegistration
name|addMouseDownHandler
parameter_list|(
name|MouseDownHandler
name|handler
parameter_list|)
block|{
return|return
name|addHandler
argument_list|(
name|handler
argument_list|,
name|MouseDownEvent
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|static
name|int
name|startingDayOfWeek
parameter_list|()
block|{
return|return
operator|(
literal|6
operator|+
name|CalendarUtil
operator|.
name|getStartingDayOfWeek
argument_list|()
operator|)
operator|%
literal|7
return|;
block|}
specifier|static
name|Date
name|toDate
parameter_list|(
name|int
name|year
parameter_list|,
name|int
name|month
parameter_list|,
name|int
name|day
parameter_list|)
block|{
return|return
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"yyyy/MM/dd"
argument_list|)
operator|.
name|parse
argument_list|(
name|year
operator|+
literal|"/"
operator|+
name|month
operator|+
literal|"/"
operator|+
name|day
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|static
name|int
name|firstDayOfWeek
parameter_list|(
name|int
name|year
parameter_list|,
name|int
name|month
parameter_list|)
block|{
return|return
operator|(
literal|6
operator|+
operator|new
name|Date
argument_list|(
name|year
operator|-
literal|1900
argument_list|,
name|month
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|getDay
argument_list|()
operator|)
operator|%
literal|7
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|static
name|int
name|daysInMonth
parameter_list|(
name|int
name|year
parameter_list|,
name|int
name|month
parameter_list|)
block|{
return|return
operator|new
name|Date
argument_list|(
name|year
operator|+
operator|(
name|month
operator|==
literal|12
condition|?
literal|1
else|:
literal|0
operator|)
operator|-
literal|1900
argument_list|,
operator|(
name|month
operator|==
literal|12
condition|?
literal|1
else|:
name|month
operator|+
literal|1
operator|)
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
operator|.
name|getDate
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|static
name|int
name|weekNumber
parameter_list|(
name|int
name|year
parameter_list|,
name|int
name|month
parameter_list|)
block|{
name|Date
name|d
init|=
operator|new
name|Date
argument_list|(
name|year
operator|-
literal|1900
argument_list|,
name|month
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
while|while
condition|(
name|d
operator|.
name|getDay
argument_list|()
operator|!=
name|CalendarUtil
operator|.
name|getStartingDayOfWeek
argument_list|()
condition|)
name|d
operator|.
name|setDate
argument_list|(
name|d
operator|.
name|getDate
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|int
name|y
init|=
name|d
operator|.
name|getYear
argument_list|()
decl_stmt|;
name|int
name|week
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|d
operator|.
name|getYear
argument_list|()
operator|==
name|y
condition|)
block|{
name|d
operator|.
name|setDate
argument_list|(
name|d
operator|.
name|getDate
argument_list|()
operator|-
literal|7
argument_list|)
expr_stmt|;
name|week
operator|+=
literal|1
expr_stmt|;
block|}
return|return
name|week
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|static
name|int
name|dayOfYear
parameter_list|(
name|int
name|year
parameter_list|,
name|int
name|month
parameter_list|,
name|int
name|day
parameter_list|)
block|{
name|Date
name|d
init|=
operator|new
name|Date
argument_list|(
name|year
operator|-
literal|1900
argument_list|,
name|month
operator|-
literal|1
argument_list|,
name|day
argument_list|)
decl_stmt|;
name|int
name|doy
init|=
literal|0
decl_stmt|,
name|y
init|=
name|d
operator|.
name|getYear
argument_list|()
decl_stmt|;
while|while
condition|(
name|d
operator|.
name|getYear
argument_list|()
operator|==
name|y
condition|)
block|{
name|d
operator|.
name|setDate
argument_list|(
name|d
operator|.
name|getDate
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|doy
operator|++
expr_stmt|;
block|}
return|return
name|doy
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|static
name|Date
name|dayOfYear
parameter_list|(
name|int
name|year
parameter_list|,
name|int
name|dayOfYear
parameter_list|)
block|{
name|Date
name|d
init|=
operator|new
name|Date
argument_list|(
name|year
operator|-
literal|1900
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|dayOfYear
operator|--
expr_stmt|;
while|while
condition|(
name|dayOfYear
operator|<
literal|0
condition|)
block|{
name|d
operator|.
name|setDate
argument_list|(
name|d
operator|.
name|getDate
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|dayOfYear
operator|++
expr_stmt|;
block|}
while|while
condition|(
name|dayOfYear
operator|>
literal|0
condition|)
block|{
name|d
operator|.
name|setDate
argument_list|(
name|d
operator|.
name|getDate
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|dayOfYear
operator|--
expr_stmt|;
block|}
return|return
name|d
return|;
block|}
specifier|static
name|String
name|monthName
parameter_list|(
name|int
name|year
parameter_list|,
name|int
name|month
parameter_list|)
block|{
return|return
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"MMMM yyyy"
argument_list|)
operator|.
name|format
argument_list|(
name|toDate
argument_list|(
name|year
argument_list|,
name|month
argument_list|,
literal|1
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
class|class
name|SingleMonth
extends|extends
name|AbsolutePanel
implements|implements
name|HasValue
argument_list|<
name|Date
argument_list|>
block|{
name|List
argument_list|<
name|D
argument_list|>
name|iDays
init|=
operator|new
name|ArrayList
argument_list|<
name|D
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|iYear
decl_stmt|,
name|iMonth
decl_stmt|,
name|iDay
decl_stmt|;
name|String
name|iTitle
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|SessionMonth
argument_list|>
name|iMonths
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iAllowDeselect
decl_stmt|;
specifier|private
name|Date
name|iFirstDate
init|=
literal|null
decl_stmt|,
name|iLastDate
init|=
literal|null
decl_stmt|;
specifier|public
name|SingleMonth
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"yyyy"
argument_list|)
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"MM"
argument_list|)
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SingleMonth
parameter_list|(
name|String
name|title
parameter_list|)
block|{
name|this
argument_list|(
name|title
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"yyyy"
argument_list|)
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"MM"
argument_list|)
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SingleMonth
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"yyyy"
argument_list|)
operator|.
name|format
argument_list|(
name|date
argument_list|)
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"MM"
argument_list|)
operator|.
name|format
argument_list|(
name|date
argument_list|)
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"dd"
argument_list|)
operator|.
name|format
argument_list|(
name|date
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SingleMonth
parameter_list|(
name|String
name|title
parameter_list|,
name|int
name|year
parameter_list|,
name|int
name|month
parameter_list|,
name|int
name|day
parameter_list|)
block|{
name|iTitle
operator|=
name|title
expr_stmt|;
name|iYear
operator|=
name|year
expr_stmt|;
name|iMonth
operator|=
name|month
expr_stmt|;
name|iDay
operator|=
name|day
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|isAllowDeselect
parameter_list|()
block|{
return|return
name|iAllowDeselect
return|;
block|}
specifier|public
name|void
name|setAllowDeselect
parameter_list|(
name|boolean
name|allowDeselect
parameter_list|)
block|{
name|iAllowDeselect
operator|=
name|allowDeselect
expr_stmt|;
block|}
specifier|public
name|void
name|setMonths
parameter_list|(
name|List
argument_list|<
name|SessionMonth
argument_list|>
name|months
parameter_list|)
block|{
name|iMonths
operator|=
name|months
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|SessionMonth
argument_list|>
name|getMonths
parameter_list|()
block|{
return|return
name|iMonths
return|;
block|}
specifier|public
name|void
name|setFirstDate
parameter_list|(
name|Date
name|firstDate
parameter_list|)
block|{
name|iFirstDate
operator|=
name|firstDate
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setLastDate
parameter_list|(
name|Date
name|lastDate
parameter_list|)
block|{
name|iLastDate
operator|=
name|lastDate
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|init
parameter_list|()
block|{
name|clear
argument_list|()
expr_stmt|;
name|iDays
operator|.
name|clear
argument_list|()
expr_stmt|;
name|SessionMonth
name|sessionMonth
init|=
literal|null
decl_stmt|;
name|boolean
name|hasPrev
init|=
literal|false
decl_stmt|,
name|hasNext
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|iMonths
operator|!=
literal|null
operator|&&
operator|!
name|iMonths
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iMonths
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SessionMonth
name|m
init|=
name|iMonths
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|getMonth
argument_list|()
operator|+
literal|1
operator|==
name|iMonth
operator|&&
name|m
operator|.
name|getYear
argument_list|()
operator|==
name|iYear
condition|)
block|{
name|sessionMonth
operator|=
name|m
expr_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|hasPrev
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|iMonths
operator|.
name|size
argument_list|()
condition|)
name|hasNext
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sessionMonth
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|iYear
operator|<
name|iMonths
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getYear
argument_list|()
operator|||
operator|(
name|iYear
operator|==
name|iMonths
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getYear
argument_list|()
operator|&&
name|iMonth
operator|<=
name|iMonths
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getMonth
argument_list|()
operator|)
condition|)
block|{
name|sessionMonth
operator|=
name|iMonths
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|iYear
operator|=
name|sessionMonth
operator|.
name|getYear
argument_list|()
expr_stmt|;
name|iMonth
operator|=
name|sessionMonth
operator|.
name|getMonth
argument_list|()
operator|+
literal|1
expr_stmt|;
name|hasPrev
operator|=
literal|false
expr_stmt|;
name|hasNext
operator|=
name|iMonths
operator|.
name|size
argument_list|()
operator|>
literal|1
expr_stmt|;
if|if
condition|(
name|iDay
operator|>
literal|0
condition|)
name|iDay
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|sessionMonth
operator|=
name|iMonths
operator|.
name|get
argument_list|(
name|iMonths
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|iYear
operator|=
name|sessionMonth
operator|.
name|getYear
argument_list|()
expr_stmt|;
name|iMonth
operator|=
name|sessionMonth
operator|.
name|getMonth
argument_list|()
operator|+
literal|1
expr_stmt|;
name|hasPrev
operator|=
name|iMonths
operator|.
name|size
argument_list|()
operator|>
literal|1
expr_stmt|;
name|hasNext
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|iDay
operator|>
literal|0
condition|)
name|iDay
operator|=
name|daysInMonth
argument_list|(
name|iYear
argument_list|,
name|iMonth
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|sessionMonth
operator|!=
literal|null
operator|&&
name|iDay
operator|>=
literal|0
condition|)
block|{
while|while
condition|(
name|iDay
operator|>
literal|0
operator|&&
name|sessionMonth
operator|.
name|hasFlag
argument_list|(
name|iDay
operator|-
literal|1
argument_list|,
name|SessionMonth
operator|.
name|Flag
operator|.
name|DISABLED
argument_list|)
condition|)
name|iDay
operator|--
expr_stmt|;
if|if
condition|(
name|iDay
operator|==
literal|0
condition|)
block|{
name|iDay
operator|=
literal|1
expr_stmt|;
while|while
condition|(
name|iDay
operator|<=
name|daysInMonth
argument_list|(
name|iYear
argument_list|,
name|iMonth
argument_list|)
operator|&&
name|sessionMonth
operator|.
name|hasFlag
argument_list|(
name|iDay
operator|-
literal|1
argument_list|,
name|SessionMonth
operator|.
name|Flag
operator|.
name|DISABLED
argument_list|)
condition|)
name|iDay
operator|++
expr_stmt|;
if|if
condition|(
name|iDay
operator|>
name|daysInMonth
argument_list|(
name|iYear
argument_list|,
name|iMonth
argument_list|)
condition|)
name|iDay
operator|=
literal|0
expr_stmt|;
comment|// all disabled
block|}
block|}
name|int
name|firstDayOfWeek
init|=
name|firstDayOfWeek
argument_list|(
name|iYear
argument_list|,
name|iMonth
argument_list|)
decl_stmt|;
name|int
name|nrDays
init|=
name|daysInMonth
argument_list|(
name|iYear
argument_list|,
name|iMonth
argument_list|)
decl_stmt|;
name|int
name|firstWeekNumber
init|=
name|weekNumber
argument_list|(
name|iYear
argument_list|,
name|iMonth
argument_list|)
decl_stmt|;
name|addStyleName
argument_list|(
literal|"month"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iTitle
operator|!=
literal|null
condition|)
block|{
name|P
name|box
init|=
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"box"
argument_list|)
decl_stmt|;
name|add
argument_list|(
name|box
argument_list|)
expr_stmt|;
name|P
name|row
init|=
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"row"
argument_list|)
decl_stmt|;
name|box
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
name|iTitle
argument_list|,
literal|"command"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|P
name|box
init|=
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"box"
argument_list|)
decl_stmt|;
name|add
argument_list|(
name|box
argument_list|)
expr_stmt|;
name|P
name|top
init|=
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"row"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sessionMonth
operator|==
literal|null
condition|)
block|{
name|P
name|py
init|=
operator|new
name|P
argument_list|(
literal|"&laquo;"
argument_list|,
literal|"cell"
argument_list|,
literal|"left"
argument_list|,
literal|"clickable"
argument_list|)
decl_stmt|;
name|py
operator|.
name|addMouseDownHandler
argument_list|(
operator|new
name|MouseDownHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseDown
parameter_list|(
name|MouseDownEvent
name|event
parameter_list|)
block|{
name|addMonths
argument_list|(
operator|-
literal|12
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|top
operator|.
name|add
argument_list|(
name|py
argument_list|)
expr_stmt|;
name|P
name|pm
init|=
operator|new
name|P
argument_list|(
literal|"&lsaquo;"
argument_list|,
literal|"cell"
argument_list|,
literal|"left"
argument_list|,
literal|"clickable"
argument_list|)
decl_stmt|;
name|top
operator|.
name|add
argument_list|(
name|pm
argument_list|)
expr_stmt|;
name|pm
operator|.
name|addMouseDownHandler
argument_list|(
operator|new
name|MouseDownHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseDown
parameter_list|(
name|MouseDownEvent
name|event
parameter_list|)
block|{
name|addMonths
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|P
name|m
init|=
operator|new
name|P
argument_list|(
name|monthName
argument_list|(
name|iYear
argument_list|,
name|iMonth
argument_list|)
argument_list|,
literal|"cell"
argument_list|,
literal|"label"
argument_list|,
literal|"middle"
argument_list|,
literal|"clickable"
argument_list|)
decl_stmt|;
name|m
operator|.
name|addMouseDownHandler
argument_list|(
operator|new
name|MouseDownHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseDown
parameter_list|(
name|MouseDownEvent
name|event
parameter_list|)
block|{
name|setDate
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|top
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|P
name|nm
init|=
operator|new
name|P
argument_list|(
literal|"&rsaquo;"
argument_list|,
literal|"cell"
argument_list|,
literal|"right"
argument_list|,
literal|"clickable"
argument_list|)
decl_stmt|;
name|nm
operator|.
name|addMouseDownHandler
argument_list|(
operator|new
name|MouseDownHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseDown
parameter_list|(
name|MouseDownEvent
name|event
parameter_list|)
block|{
name|addMonths
argument_list|(
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|top
operator|.
name|add
argument_list|(
name|nm
argument_list|)
expr_stmt|;
name|P
name|ny
init|=
operator|new
name|P
argument_list|(
literal|"&raquo;"
argument_list|,
literal|"cell"
argument_list|,
literal|"right"
argument_list|,
literal|"clickable"
argument_list|)
decl_stmt|;
name|ny
operator|.
name|addMouseDownHandler
argument_list|(
operator|new
name|MouseDownHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseDown
parameter_list|(
name|MouseDownEvent
name|event
parameter_list|)
block|{
name|addMonths
argument_list|(
operator|+
literal|12
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|top
operator|.
name|add
argument_list|(
name|ny
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|top
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"cell"
argument_list|,
literal|"left"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasPrev
condition|)
block|{
name|P
name|pm
init|=
operator|new
name|P
argument_list|(
literal|"&lsaquo;"
argument_list|,
literal|"cell"
argument_list|,
literal|"left"
argument_list|,
literal|"clickable"
argument_list|)
decl_stmt|;
name|top
operator|.
name|add
argument_list|(
name|pm
argument_list|)
expr_stmt|;
name|pm
operator|.
name|addMouseDownHandler
argument_list|(
operator|new
name|MouseDownHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseDown
parameter_list|(
name|MouseDownEvent
name|event
parameter_list|)
block|{
name|addMonths
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|top
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"cell"
argument_list|,
literal|"left"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|P
name|m
init|=
operator|new
name|P
argument_list|(
name|monthName
argument_list|(
name|iYear
argument_list|,
name|iMonth
argument_list|)
argument_list|,
literal|"cell"
argument_list|,
literal|"label"
argument_list|,
literal|"middle"
argument_list|,
literal|"clickable"
argument_list|)
decl_stmt|;
name|m
operator|.
name|addMouseDownHandler
argument_list|(
operator|new
name|MouseDownHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseDown
parameter_list|(
name|MouseDownEvent
name|event
parameter_list|)
block|{
name|setDate
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|top
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasNext
condition|)
block|{
name|P
name|nm
init|=
operator|new
name|P
argument_list|(
literal|"&rsaquo;"
argument_list|,
literal|"cell"
argument_list|,
literal|"right"
argument_list|,
literal|"clickable"
argument_list|)
decl_stmt|;
name|nm
operator|.
name|addMouseDownHandler
argument_list|(
operator|new
name|MouseDownHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseDown
parameter_list|(
name|MouseDownEvent
name|event
parameter_list|)
block|{
name|addMonths
argument_list|(
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|top
operator|.
name|add
argument_list|(
name|nm
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|top
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"cell"
argument_list|,
literal|"right"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|top
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"cell"
argument_list|,
literal|"right"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|box
operator|.
name|add
argument_list|(
name|top
argument_list|)
expr_stmt|;
name|box
operator|=
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"box"
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|box
argument_list|)
expr_stmt|;
name|P
name|header
init|=
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"row"
argument_list|)
decl_stmt|;
name|box
operator|.
name|add
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|P
name|corner
init|=
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"cell"
argument_list|,
literal|"corner"
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|corner
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|7
condition|;
name|i
operator|++
control|)
block|{
name|header
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
name|CONSTANTS
operator|.
name|days
argument_list|()
index|[
operator|(
name|i
operator|+
name|startingDayOfWeek
argument_list|()
operator|)
operator|%
literal|7
index|]
argument_list|,
literal|"cell"
argument_list|,
literal|"dow"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|weekNumber
init|=
name|firstWeekNumber
decl_stmt|;
name|P
name|line
init|=
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"row"
argument_list|)
decl_stmt|;
name|box
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|P
name|week
init|=
operator|new
name|P
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|weekNumber
operator|++
argument_list|)
argument_list|,
literal|"cell"
argument_list|,
literal|"week"
argument_list|)
decl_stmt|;
name|line
operator|.
name|add
argument_list|(
name|week
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|int
name|blanks
init|=
operator|(
name|firstDayOfWeek
operator|+
literal|7
operator|-
name|startingDayOfWeek
argument_list|()
operator|)
operator|%
literal|7
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blanks
condition|;
name|i
operator|++
control|)
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"cell"
argument_list|,
operator|(
name|i
operator|+
literal|1
operator|==
name|blanks
condition|?
literal|"last-blank"
else|:
literal|"blank"
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
name|MouseDownHandler
name|onClick
init|=
operator|new
name|MouseDownHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseDown
parameter_list|(
name|MouseDownEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|iDay
operator|==
operator|(
operator|(
name|D
operator|)
name|event
operator|.
name|getSource
argument_list|()
operator|)
operator|.
name|getNumber
argument_list|()
operator|&&
name|iAllowDeselect
condition|)
block|{
name|D
name|old
init|=
operator|(
name|iDay
operator|<=
literal|0
operator|||
name|iDay
operator|>
name|iDays
operator|.
name|size
argument_list|()
condition|?
literal|null
else|:
name|iDays
operator|.
name|get
argument_list|(
name|iDay
operator|-
literal|1
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
name|old
operator|.
name|removeStyleName
argument_list|(
literal|"selected"
argument_list|)
expr_stmt|;
name|iDay
operator|=
literal|0
expr_stmt|;
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|SingleMonth
operator|.
name|this
argument_list|,
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|D
name|old
init|=
operator|(
name|iDay
operator|<=
literal|0
operator|||
name|iDay
operator|>
name|iDays
operator|.
name|size
argument_list|()
condition|?
literal|null
else|:
name|iDays
operator|.
name|get
argument_list|(
name|iDay
operator|-
literal|1
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
name|old
operator|.
name|removeStyleName
argument_list|(
literal|"selected"
argument_list|)
expr_stmt|;
name|iDay
operator|=
operator|(
operator|(
name|D
operator|)
name|event
operator|.
name|getSource
argument_list|()
operator|)
operator|.
name|getNumber
argument_list|()
expr_stmt|;
name|iDays
operator|.
name|get
argument_list|(
name|iDay
operator|-
literal|1
argument_list|)
operator|.
name|addStyleName
argument_list|(
literal|"selected"
argument_list|)
expr_stmt|;
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|SingleMonth
operator|.
name|this
argument_list|,
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|int
name|today
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|iYear
operator|==
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"yyyy"
argument_list|)
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
operator|&&
name|iMonth
operator|==
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"MM"
argument_list|)
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
condition|)
name|today
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"dd"
argument_list|)
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|nrDays
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|1
operator|&&
name|idx
operator|%
literal|7
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|idx
operator|==
literal|7
operator|&&
name|iMonth
operator|==
literal|1
operator|&&
name|weekNumber
operator|>
literal|50
condition|)
name|weekNumber
operator|=
literal|1
expr_stmt|;
name|line
operator|=
operator|new
name|P
argument_list|(
literal|null
argument_list|,
literal|"row"
argument_list|)
expr_stmt|;
name|box
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|week
operator|=
operator|new
name|P
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|weekNumber
operator|++
argument_list|)
argument_list|,
literal|"cell"
argument_list|,
literal|"week"
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|week
argument_list|)
expr_stmt|;
block|}
name|D
name|d
init|=
operator|new
name|D
argument_list|(
name|i
argument_list|,
literal|"cell"
argument_list|,
operator|(
operator|(
operator|(
name|idx
operator|+
name|startingDayOfWeek
argument_list|()
operator|)
operator|%
literal|7
operator|)
operator|<
literal|5
condition|?
literal|"day"
else|:
literal|"weekend"
operator|)
argument_list|,
literal|"clickable"
argument_list|,
operator|(
name|iDay
operator|==
name|i
condition|?
literal|"selected"
else|:
literal|null
operator|)
argument_list|)
decl_stmt|;
name|line
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|iDays
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
name|boolean
name|enabled
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|i
operator|==
name|today
condition|)
name|d
operator|.
name|addStyleName
argument_list|(
literal|"today"
argument_list|)
expr_stmt|;
if|if
condition|(
name|sessionMonth
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sessionMonth
operator|.
name|hasFlag
argument_list|(
name|i
operator|-
literal|1
argument_list|,
name|SessionMonth
operator|.
name|Flag
operator|.
name|START
argument_list|)
condition|)
name|d
operator|.
name|addStyleName
argument_list|(
literal|"start"
argument_list|)
expr_stmt|;
if|else if
condition|(
name|sessionMonth
operator|.
name|hasFlag
argument_list|(
name|i
operator|-
literal|1
argument_list|,
name|SessionMonth
operator|.
name|Flag
operator|.
name|END
argument_list|)
condition|)
name|d
operator|.
name|addStyleName
argument_list|(
literal|"start"
argument_list|)
expr_stmt|;
if|else if
condition|(
name|sessionMonth
operator|.
name|hasFlag
argument_list|(
name|i
operator|-
literal|1
argument_list|,
name|SessionMonth
operator|.
name|Flag
operator|.
name|FINALS
argument_list|)
condition|)
name|d
operator|.
name|addStyleName
argument_list|(
literal|"exam"
argument_list|)
expr_stmt|;
if|else if
condition|(
name|sessionMonth
operator|.
name|hasFlag
argument_list|(
name|i
operator|-
literal|1
argument_list|,
name|SessionMonth
operator|.
name|Flag
operator|.
name|MIDTERMS
argument_list|)
condition|)
name|d
operator|.
name|addStyleName
argument_list|(
literal|"midterm"
argument_list|)
expr_stmt|;
if|else if
condition|(
name|sessionMonth
operator|.
name|hasFlag
argument_list|(
name|i
operator|-
literal|1
argument_list|,
name|SessionMonth
operator|.
name|Flag
operator|.
name|HOLIDAY
argument_list|)
condition|)
name|d
operator|.
name|addStyleName
argument_list|(
literal|"holiday"
argument_list|)
expr_stmt|;
if|else if
condition|(
name|sessionMonth
operator|.
name|hasFlag
argument_list|(
name|i
operator|-
literal|1
argument_list|,
name|SessionMonth
operator|.
name|Flag
operator|.
name|BREAK
argument_list|)
condition|)
name|d
operator|.
name|addStyleName
argument_list|(
literal|"break"
argument_list|)
expr_stmt|;
if|if
condition|(
name|sessionMonth
operator|.
name|hasFlag
argument_list|(
name|i
operator|-
literal|1
argument_list|,
name|SessionMonth
operator|.
name|Flag
operator|.
name|DISABLED
argument_list|)
condition|)
block|{
name|d
operator|.
name|removeStyleName
argument_list|(
literal|"clickable"
argument_list|)
expr_stmt|;
name|d
operator|.
name|addStyleName
argument_list|(
literal|"disabled"
argument_list|)
expr_stmt|;
name|enabled
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|enabled
operator|&&
name|iFirstDate
operator|!=
literal|null
operator|&&
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"yyyy/MM/dd"
argument_list|)
operator|.
name|parse
argument_list|(
name|iYear
operator|+
literal|"/"
operator|+
name|iMonth
operator|+
literal|"/"
operator|+
name|i
argument_list|)
operator|.
name|before
argument_list|(
name|iFirstDate
argument_list|)
condition|)
block|{
name|d
operator|.
name|removeStyleName
argument_list|(
literal|"clickable"
argument_list|)
expr_stmt|;
name|d
operator|.
name|addStyleName
argument_list|(
literal|"disabled"
argument_list|)
expr_stmt|;
name|enabled
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|enabled
operator|&&
name|iLastDate
operator|!=
literal|null
operator|&&
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"yyyy/MM/dd"
argument_list|)
operator|.
name|parse
argument_list|(
name|iYear
operator|+
literal|"/"
operator|+
name|iMonth
operator|+
literal|"/"
operator|+
name|i
argument_list|)
operator|.
name|after
argument_list|(
name|iLastDate
argument_list|)
condition|)
block|{
name|d
operator|.
name|removeStyleName
argument_list|(
literal|"clickable"
argument_list|)
expr_stmt|;
name|d
operator|.
name|addStyleName
argument_list|(
literal|"disabled"
argument_list|)
expr_stmt|;
name|enabled
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|enabled
condition|)
name|d
operator|.
name|addMouseDownHandler
argument_list|(
name|onClick
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addMonths
parameter_list|(
name|int
name|months
parameter_list|)
block|{
name|iMonth
operator|+=
name|months
expr_stmt|;
if|if
condition|(
name|iMonth
operator|<=
literal|0
condition|)
block|{
name|iYear
operator|-=
literal|1
expr_stmt|;
name|iMonth
operator|+=
literal|12
expr_stmt|;
block|}
if|if
condition|(
name|iMonth
operator|>
literal|12
condition|)
block|{
name|iYear
operator|+=
literal|1
expr_stmt|;
name|iMonth
operator|-=
literal|12
expr_stmt|;
block|}
name|init
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
name|void
name|addDays
parameter_list|(
name|int
name|days
parameter_list|)
block|{
name|Date
name|d
init|=
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|==
literal|null
condition|)
block|{
name|setDate
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|.
name|setDate
argument_list|(
name|d
operator|.
name|getDate
argument_list|()
operator|+
name|days
argument_list|)
expr_stmt|;
name|setDate
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|clearSelection
parameter_list|()
block|{
name|D
name|old
init|=
operator|(
name|iDay
operator|<=
literal|0
operator|||
name|iDay
operator|>
name|iDays
operator|.
name|size
argument_list|()
condition|?
literal|null
else|:
name|iDays
operator|.
name|get
argument_list|(
name|iDay
operator|-
literal|1
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
block|{
name|old
operator|.
name|removeStyleName
argument_list|(
literal|"selected"
argument_list|)
expr_stmt|;
name|iDay
operator|=
literal|0
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setDate
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
name|iYear
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"yyyy"
argument_list|)
operator|.
name|format
argument_list|(
name|date
argument_list|)
argument_list|)
expr_stmt|;
name|iMonth
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"MM"
argument_list|)
operator|.
name|format
argument_list|(
name|date
argument_list|)
argument_list|)
expr_stmt|;
name|iDay
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"dd"
argument_list|)
operator|.
name|format
argument_list|(
name|date
argument_list|)
argument_list|)
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setDate
parameter_list|(
name|int
name|year
parameter_list|,
name|int
name|month
parameter_list|,
name|int
name|day
parameter_list|)
block|{
name|iYear
operator|=
name|year
expr_stmt|;
name|iMonth
operator|=
name|month
expr_stmt|;
name|iDay
operator|=
name|day
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|HandlerRegistration
name|addValueChangeHandler
parameter_list|(
name|ValueChangeHandler
argument_list|<
name|Date
argument_list|>
name|handler
parameter_list|)
block|{
return|return
name|addHandler
argument_list|(
name|handler
argument_list|,
name|ValueChangeEvent
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Date
name|getValue
parameter_list|()
block|{
if|if
condition|(
name|iDay
operator|<=
literal|0
operator|||
name|iDay
operator|>
name|iDays
operator|.
name|size
argument_list|()
condition|)
return|return
literal|null
return|;
return|return
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"yyyy/MM/dd"
argument_list|)
operator|.
name|parse
argument_list|(
name|iYear
operator|+
literal|"/"
operator|+
name|iMonth
operator|+
literal|"/"
operator|+
name|iDay
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|Date
name|value
parameter_list|)
block|{
name|setValue
argument_list|(
name|value
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|Date
name|value
parameter_list|,
name|boolean
name|fireEvents
parameter_list|)
block|{
name|iYear
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"yyyy"
argument_list|)
operator|.
name|format
argument_list|(
name|value
operator|==
literal|null
condition|?
operator|new
name|Date
argument_list|()
else|:
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|iMonth
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"MM"
argument_list|)
operator|.
name|format
argument_list|(
name|value
operator|==
literal|null
condition|?
operator|new
name|Date
argument_list|()
else|:
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|iDay
operator|=
operator|(
name|value
operator|==
literal|null
condition|?
literal|0
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"dd"
argument_list|)
operator|.
name|format
argument_list|(
name|value
argument_list|)
argument_list|)
operator|)
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
if|if
condition|(
name|fireEvents
condition|)
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|this
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|(
name|getValue
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|eventDateFormat
argument_list|()
argument_list|)
operator|.
name|format
argument_list|(
name|getValue
argument_list|()
argument_list|)
operator|)
return|;
block|}
specifier|public
name|String
name|getCalendarTitle
parameter_list|()
block|{
return|return
name|iTitle
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|HandlerRegistration
name|addValueChangeHandler
parameter_list|(
name|ValueChangeHandler
argument_list|<
name|Date
argument_list|>
name|handler
parameter_list|)
block|{
return|return
name|addHandler
argument_list|(
name|handler
argument_list|,
name|ValueChangeEvent
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Date
name|getValue
parameter_list|()
block|{
try|try
block|{
return|return
name|iFormat
operator|.
name|parse
argument_list|(
name|iPicker
operator|.
name|getText
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|Date
name|value
parameter_list|)
block|{
name|setValue
argument_list|(
name|value
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|Date
name|value
parameter_list|,
name|boolean
name|fireEvents
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|iPicker
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|iMonth
operator|.
name|setValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iPicker
operator|.
name|setText
argument_list|(
name|iFormat
operator|.
name|format
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|iMonth
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fireEvents
condition|)
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|this
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setValueInServerTimeZone
parameter_list|(
name|Date
name|value
parameter_list|)
block|{
name|setValue
argument_list|(
name|ServerDateTimeFormat
operator|.
name|toLocalDate
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Date
name|getValueInServerTimeZone
parameter_list|()
block|{
return|return
name|ServerDateTimeFormat
operator|.
name|toServerDate
argument_list|(
name|getValue
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setText
parameter_list|(
name|String
name|text
parameter_list|)
block|{
if|if
condition|(
name|text
operator|==
literal|null
operator|||
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
name|setValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
else|else
name|setValue
argument_list|(
name|iFormat
operator|.
name|parse
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getText
parameter_list|()
block|{
return|return
name|iPicker
operator|.
name|getText
argument_list|()
return|;
block|}
specifier|public
name|Date
name|today
parameter_list|()
block|{
return|return
name|iFormat
operator|.
name|parse
argument_list|(
name|iFormat
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SingleDateSelector
name|insert
parameter_list|(
name|RootPanel
name|panel
parameter_list|)
block|{
name|String
name|format
init|=
name|panel
operator|.
name|getElement
argument_list|()
operator|.
name|getAttribute
argument_list|(
literal|"format"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|onchange
init|=
name|panel
operator|.
name|getElement
argument_list|()
operator|.
name|getAttribute
argument_list|(
literal|"onchange"
argument_list|)
decl_stmt|;
name|String
name|error
init|=
name|panel
operator|.
name|getElement
argument_list|()
operator|.
name|getAttribute
argument_list|(
literal|"error"
argument_list|)
decl_stmt|;
name|AriaTextBox
name|text
init|=
operator|new
name|AriaTextBox
argument_list|(
name|panel
operator|.
name|getElement
argument_list|()
operator|.
name|getFirstChildElement
argument_list|()
argument_list|)
decl_stmt|;
name|SingleDateSelector
name|selector
init|=
operator|new
name|SingleDateSelector
argument_list|(
name|text
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|format
operator|!=
literal|null
condition|)
name|selector
operator|.
name|iFormat
operator|=
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
name|format
argument_list|)
expr_stmt|;
if|if
condition|(
name|onchange
operator|!=
literal|null
condition|)
name|selector
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Date
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Date
argument_list|>
name|event
parameter_list|)
block|{
name|ToolBox
operator|.
name|eval
argument_list|(
name|onchange
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|text
operator|.
name|getText
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|text
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Date
name|date
init|=
literal|null
decl_stmt|;
try|try
block|{
name|date
operator|=
name|selector
operator|.
name|iFormat
operator|.
name|parse
argument_list|(
name|text
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|date
operator|!=
literal|null
condition|)
name|selector
operator|.
name|setValue
argument_list|(
name|date
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|error
operator|!=
literal|null
operator|&&
operator|!
name|error
operator|.
name|isEmpty
argument_list|()
condition|)
name|selector
operator|.
name|setErrorHint
argument_list|(
name|error
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|selector
argument_list|)
expr_stmt|;
return|return
name|selector
return|;
block|}
specifier|public
name|void
name|setFormat
parameter_list|(
name|DateTimeFormat
name|format
parameter_list|)
block|{
name|iFormat
operator|=
name|format
expr_stmt|;
if|if
condition|(
name|iHint
condition|)
name|setHint
argument_list|(
name|iFormat
operator|.
name|getPattern
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

