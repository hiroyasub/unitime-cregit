begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.4 (University Timetabling Application)  * Copyright (C) 2012, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|events
package|;
end_package

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|EventFlag
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Cookies
import|;
end_import

begin_class
specifier|public
class|class
name|EventCookie
block|{
specifier|private
name|int
name|iFlags
init|=
name|EventInterface
operator|.
name|sDefaultEventFlags
decl_stmt|;
specifier|private
name|String
name|iType
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iHash
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|EventCookie
name|sInstance
init|=
literal|null
decl_stmt|;
specifier|private
name|EventCookie
parameter_list|()
block|{
try|try
block|{
name|String
name|cookie
init|=
name|Cookies
operator|.
name|getCookie
argument_list|(
literal|"UniTime:Event"
argument_list|)
decl_stmt|;
if|if
condition|(
name|cookie
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|params
init|=
name|cookie
operator|.
name|split
argument_list|(
literal|"\\|"
argument_list|)
decl_stmt|;
name|iFlags
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|params
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|iType
operator|=
name|params
index|[
literal|1
index|]
expr_stmt|;
name|iHash
operator|=
name|params
index|[
literal|2
index|]
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
specifier|private
name|void
name|save
parameter_list|()
block|{
name|Cookies
operator|.
name|setCookie
argument_list|(
literal|"UniTime:Event"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iFlags
argument_list|)
operator|+
literal|"|"
operator|+
operator|(
name|iType
operator|==
literal|null
condition|?
literal|""
else|:
name|iType
operator|)
operator|+
literal|"|"
operator|+
operator|(
name|iHash
operator|==
literal|null
condition|?
literal|""
else|:
name|iHash
operator|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|EventCookie
name|getInstance
parameter_list|()
block|{
if|if
condition|(
name|sInstance
operator|==
literal|null
condition|)
name|sInstance
operator|=
operator|new
name|EventCookie
argument_list|()
expr_stmt|;
return|return
name|sInstance
return|;
block|}
specifier|public
name|boolean
name|get
parameter_list|(
name|EventFlag
name|f
parameter_list|)
block|{
return|return
name|f
operator|.
name|in
argument_list|(
name|iFlags
argument_list|)
return|;
block|}
specifier|public
name|void
name|set
parameter_list|(
name|EventFlag
name|f
parameter_list|,
name|boolean
name|value
parameter_list|)
block|{
name|iFlags
operator|=
operator|(
name|value
condition|?
name|f
operator|.
name|set
argument_list|(
name|iFlags
argument_list|)
else|:
name|f
operator|.
name|clear
argument_list|(
name|iFlags
argument_list|)
operator|)
expr_stmt|;
name|save
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|getFlags
parameter_list|()
block|{
return|return
name|iFlags
return|;
block|}
specifier|public
name|boolean
name|hasHash
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
name|type
operator|.
name|equals
argument_list|(
name|iType
argument_list|)
operator|&&
name|iHash
operator|!=
literal|null
operator|&&
operator|!
name|iHash
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|String
name|getHash
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
operator|(
name|type
operator|.
name|equals
argument_list|(
name|iType
argument_list|)
condition|?
name|iHash
else|:
literal|null
operator|)
return|;
block|}
specifier|public
name|void
name|setHash
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|hash
parameter_list|)
block|{
name|iType
operator|=
name|type
expr_stmt|;
name|iHash
operator|=
name|hash
expr_stmt|;
name|save
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

