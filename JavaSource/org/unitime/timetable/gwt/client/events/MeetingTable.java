begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.4 (University Timetabling Application)  * Copyright (C) 2012, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|events
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|events
operator|.
name|EventCookie
operator|.
name|EventFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|NumberBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|SimpleForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeDialogBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeHeaderPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|MeetingConglictInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|MeetingInterface
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Unit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|shared
operator|.
name|HandlerRegistration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|DateTimeFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|CheckBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_class
specifier|public
class|class
name|MeetingTable
extends|extends
name|UniTimeTable
argument_list|<
name|MeetingInterface
index|[]
argument_list|>
implements|implements
name|HasValue
argument_list|<
name|List
argument_list|<
name|MeetingInterface
argument_list|>
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|GwtConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|DateTimeFormat
name|sDateFormat
init|=
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|meetingDateFormat
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|Command
name|iAddMeetingsCommand
decl_stmt|;
specifier|private
name|ApproveDialog
name|iApproveDialog
decl_stmt|;
specifier|private
name|boolean
name|iSelectable
init|=
literal|true
decl_stmt|;
specifier|public
name|MeetingTable
parameter_list|(
name|ApproveDialog
name|approval
parameter_list|,
specifier|final
name|boolean
name|editable
parameter_list|)
block|{
name|setStyleName
argument_list|(
literal|"unitime-EventMeetings"
argument_list|)
expr_stmt|;
name|iApproveDialog
operator|=
name|approval
expr_stmt|;
name|List
argument_list|<
name|UniTimeTableHeader
argument_list|>
name|header
init|=
operator|new
name|ArrayList
argument_list|<
name|UniTimeTableHeader
argument_list|>
argument_list|()
decl_stmt|;
name|UniTimeTableHeader
name|hTimes
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
literal|"&otimes;"
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_CENTER
argument_list|)
decl_stmt|;
name|hTimes
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|CheckBox
name|ch
init|=
operator|(
name|CheckBox
operator|)
name|w
decl_stmt|;
name|ch
operator|.
name|setValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|CheckBox
name|ch
init|=
operator|(
name|CheckBox
operator|)
name|w
decl_stmt|;
if|if
condition|(
operator|!
name|ch
operator|.
name|getValue
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opSelectAll
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hTimes
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|CheckBox
name|ch
init|=
operator|(
name|CheckBox
operator|)
name|w
decl_stmt|;
name|ch
operator|.
name|setValue
argument_list|(
name|getData
argument_list|(
name|row
argument_list|)
index|[
literal|0
index|]
operator|.
name|hasConflicts
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
if|if
condition|(
name|getData
argument_list|(
name|row
argument_list|)
index|[
literal|0
index|]
operator|.
name|hasConflicts
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opSelectAllConflicting
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hTimes
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|CheckBox
name|ch
init|=
operator|(
name|CheckBox
operator|)
name|w
decl_stmt|;
name|ch
operator|.
name|setValue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|CheckBox
name|ch
init|=
operator|(
name|CheckBox
operator|)
name|w
decl_stmt|;
if|if
condition|(
name|ch
operator|.
name|getValue
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opClearSelection
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hTimes
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iAddMeetingsCommand
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|iAddMeetingsCommand
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opAddMeetings
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hTimes
operator|.
name|addOperation
argument_list|(
operator|new
name|MeetingOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
operator|(
name|hasSelection
argument_list|()
condition|?
name|MESSAGES
operator|.
name|opDeleteSelectedMeetings
argument_list|()
else|:
name|MESSAGES
operator|.
name|opDeleteNewMeetings
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|(
name|MeetingInterface
name|meeting
parameter_list|)
block|{
return|return
name|editable
operator|&&
operator|(
name|meeting
operator|.
name|getId
argument_list|()
operator|==
literal|null
operator|||
name|meeting
operator|.
name|isCanEdit
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|int
name|row
parameter_list|,
name|MeetingInterface
name|meeting
parameter_list|)
block|{
while|while
condition|(
name|row
operator|+
literal|1
operator|<
name|getRowCount
argument_list|()
operator|&&
name|getData
argument_list|(
name|row
operator|+
literal|1
argument_list|)
operator|.
name|length
operator|==
literal|2
condition|)
name|removeRow
argument_list|(
name|row
operator|+
literal|1
argument_list|)
expr_stmt|;
name|removeRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|MeetingTable
operator|.
name|this
argument_list|,
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hTimes
operator|.
name|addOperation
argument_list|(
operator|new
name|MeetingOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
operator|(
name|hasSelection
argument_list|()
condition|?
name|MESSAGES
operator|.
name|opApproveSelectedMeetings
argument_list|()
else|:
name|MESSAGES
operator|.
name|opApproveAllMeetings
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|(
name|MeetingInterface
name|meeting
parameter_list|)
block|{
return|return
name|iApproveDialog
operator|!=
literal|null
operator|&&
name|meeting
operator|.
name|getId
argument_list|()
operator|!=
literal|null
operator|&&
name|meeting
operator|.
name|isCanApprove
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|int
name|row
parameter_list|,
name|MeetingInterface
name|meeting
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iApproveDialog
operator|.
name|showApprove
argument_list|(
name|meetings
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hTimes
operator|.
name|addOperation
argument_list|(
operator|new
name|MeetingOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|allMustMatch
parameter_list|(
name|boolean
name|hasSelection
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
operator|(
name|hasSelection
argument_list|()
condition|?
name|MESSAGES
operator|.
name|opInquireSelectedMeetings
argument_list|()
else|:
name|MESSAGES
operator|.
name|opInquireAllMeetings
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|(
name|MeetingInterface
name|meeting
parameter_list|)
block|{
return|return
name|iApproveDialog
operator|!=
literal|null
operator|&&
name|meeting
operator|.
name|getId
argument_list|()
operator|!=
literal|null
operator|&&
name|meeting
operator|.
name|isCanApprove
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|int
name|row
parameter_list|,
name|MeetingInterface
name|meeting
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iApproveDialog
operator|.
name|showInquire
argument_list|(
name|meetings
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hTimes
operator|.
name|addOperation
argument_list|(
operator|new
name|MeetingOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
operator|(
name|hasSelection
argument_list|()
condition|?
name|MESSAGES
operator|.
name|opRejectSelectedMeetings
argument_list|()
else|:
name|MESSAGES
operator|.
name|opRejectAllMeetings
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|(
name|MeetingInterface
name|meeting
parameter_list|)
block|{
return|return
name|iApproveDialog
operator|!=
literal|null
operator|&&
name|meeting
operator|.
name|getId
argument_list|()
operator|!=
literal|null
operator|&&
name|meeting
operator|.
name|isCanApprove
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|int
name|row
parameter_list|,
name|MeetingInterface
name|meeting
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iApproveDialog
operator|.
name|showReject
argument_list|(
name|meetings
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hTimes
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hDate
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colDate
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hDate
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hTimePub
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colPublishedTime
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hTimePub
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hTimeAll
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colAllocatedTime
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hTimeAll
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hTimeSetup
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colSetupTimeShort
argument_list|()
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hTimeSetup
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hTimeTeardown
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colTeardownTimeShort
argument_list|()
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hTimeTeardown
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hLocation
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colLocation
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hLocation
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hCapacity
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colCapacity
argument_list|()
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hCapacity
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hApproval
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colApproval
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hApproval
argument_list|)
expr_stmt|;
name|hTimes
operator|.
name|addOperation
argument_list|(
operator|new
name|MeetingOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|Integer
name|so
init|=
literal|null
decl_stmt|,
name|eo
init|=
literal|null
decl_stmt|;
name|boolean
name|soSame
init|=
literal|true
decl_stmt|,
name|eoSame
init|=
literal|true
decl_stmt|;
for|for
control|(
name|MeetingInterface
name|m
range|:
name|meetings
argument_list|()
control|)
block|{
if|if
condition|(
name|so
operator|==
literal|null
condition|)
name|so
operator|=
name|m
operator|.
name|getStartOffset
argument_list|()
expr_stmt|;
if|else if
condition|(
name|m
operator|.
name|getStartOffset
argument_list|()
operator|!=
name|so
condition|)
name|soSame
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|eo
operator|==
literal|null
condition|)
name|eo
operator|=
operator|-
name|m
operator|.
name|getEndOffset
argument_list|()
expr_stmt|;
if|else if
condition|(
operator|-
name|m
operator|.
name|getEndOffset
argument_list|()
operator|!=
name|eo
condition|)
name|eoSame
operator|=
literal|false
expr_stmt|;
block|}
specifier|final
name|UniTimeDialogBox
name|dialog
init|=
operator|new
name|UniTimeDialogBox
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SimpleForm
name|simple
init|=
operator|new
name|SimpleForm
argument_list|()
decl_stmt|;
name|simple
operator|.
name|removeStyleName
argument_list|(
literal|"unitime-NotPrintableBottomLine"
argument_list|)
expr_stmt|;
specifier|final
name|NumberBox
name|setupTime
init|=
operator|new
name|NumberBox
argument_list|()
decl_stmt|;
if|if
condition|(
name|soSame
operator|&&
name|so
operator|!=
literal|null
condition|)
name|setupTime
operator|.
name|setValue
argument_list|(
name|so
argument_list|)
expr_stmt|;
name|simple
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propSetupTime
argument_list|()
argument_list|,
name|setupTime
argument_list|)
expr_stmt|;
specifier|final
name|NumberBox
name|teardownTime
init|=
operator|new
name|NumberBox
argument_list|()
decl_stmt|;
if|if
condition|(
name|eoSame
operator|&&
name|eo
operator|!=
literal|null
condition|)
name|teardownTime
operator|.
name|setValue
argument_list|(
name|eo
argument_list|)
expr_stmt|;
name|simple
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propTeardownTime
argument_list|()
argument_list|,
name|teardownTime
argument_list|)
expr_stmt|;
name|UniTimeHeaderPanel
name|footer
init|=
operator|new
name|UniTimeHeaderPanel
argument_list|()
decl_stmt|;
name|footer
operator|.
name|addButton
argument_list|(
literal|"ok"
argument_list|,
name|MESSAGES
operator|.
name|buttonOk
argument_list|()
argument_list|,
literal|75
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|int
name|colSetup
init|=
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colSetupTimeShort
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
decl_stmt|;
name|int
name|colTear
init|=
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colTeardownTimeShort
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
decl_stmt|;
name|int
name|colPubl
init|=
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colPublishedTime
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|row
range|:
name|rows
argument_list|()
control|)
block|{
name|MeetingInterface
name|meeting
init|=
name|getData
argument_list|(
name|row
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|setupTime
operator|.
name|toInteger
argument_list|()
operator|!=
literal|null
condition|)
name|meeting
operator|.
name|setStartOffset
argument_list|(
name|setupTime
operator|.
name|toInteger
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|teardownTime
operator|.
name|toInteger
argument_list|()
operator|!=
literal|null
condition|)
name|meeting
operator|.
name|setEndOffset
argument_list|(
operator|-
name|teardownTime
operator|.
name|toInteger
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|NumberCell
operator|)
name|getWidget
argument_list|(
name|row
argument_list|,
name|colSetup
argument_list|)
operator|)
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|meeting
operator|.
name|getStartOffset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|NumberCell
operator|)
name|getWidget
argument_list|(
name|row
argument_list|,
name|colTear
argument_list|)
operator|)
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
operator|-
name|meeting
operator|.
name|getEndOffset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Label
operator|)
name|getWidget
argument_list|(
name|row
argument_list|,
name|colPubl
argument_list|)
operator|)
operator|.
name|setText
argument_list|(
name|meetingTime
argument_list|(
name|meeting
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|dialog
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|footer
operator|.
name|addButton
argument_list|(
literal|"cancel"
argument_list|,
name|MESSAGES
operator|.
name|buttonCancel
argument_list|()
argument_list|,
literal|75
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|dialog
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|simple
operator|.
name|addBottomRow
argument_list|(
name|footer
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setWidget
argument_list|(
name|simple
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|dlgChangeOffsets
argument_list|()
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setEscapeToHide
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|center
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opChangeOffsets
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|(
name|MeetingInterface
name|meeting
parameter_list|)
block|{
return|return
name|meeting
operator|.
name|getId
argument_list|()
operator|==
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|int
name|row
parameter_list|,
name|MeetingInterface
name|meeting
parameter_list|)
block|{
block|}
block|}
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
literal|null
argument_list|,
name|header
argument_list|)
expr_stmt|;
comment|// Add show/hide operations
name|addHideOperation
argument_list|(
name|hTimePub
argument_list|,
name|EventFlag
operator|.
name|SHOW_PUBLISHED_TIME
argument_list|)
expr_stmt|;
name|addHideOperation
argument_list|(
name|hTimeAll
argument_list|,
name|EventFlag
operator|.
name|SHOW_ALLOCATED_TIME
argument_list|)
expr_stmt|;
name|addHideOperation
argument_list|(
name|hTimeSetup
argument_list|,
name|EventFlag
operator|.
name|SHOW_SETUP_TIME
argument_list|)
expr_stmt|;
name|addHideOperation
argument_list|(
name|hTimeTeardown
argument_list|,
name|EventFlag
operator|.
name|SHOW_TEARDOWN_TIME
argument_list|)
expr_stmt|;
name|addHideOperation
argument_list|(
name|hCapacity
argument_list|,
name|EventFlag
operator|.
name|SHOW_CAPACITY
argument_list|)
expr_stmt|;
comment|// Add sorting operations
name|addSortByOperation
argument_list|(
name|hDate
argument_list|,
name|createComparator
argument_list|(
name|MeetingsSortBy
operator|.
name|DATE
argument_list|)
argument_list|)
expr_stmt|;
name|addSortByOperation
argument_list|(
name|hTimePub
argument_list|,
name|createComparator
argument_list|(
name|MeetingsSortBy
operator|.
name|PUBLISHED_TIME
argument_list|)
argument_list|)
expr_stmt|;
name|addSortByOperation
argument_list|(
name|hTimeSetup
argument_list|,
name|createComparator
argument_list|(
name|MeetingsSortBy
operator|.
name|SETUP_TIME
argument_list|)
argument_list|)
expr_stmt|;
name|addSortByOperation
argument_list|(
name|hTimeAll
argument_list|,
name|createComparator
argument_list|(
name|MeetingsSortBy
operator|.
name|ALLOCATED_TIME
argument_list|)
argument_list|)
expr_stmt|;
name|addSortByOperation
argument_list|(
name|hTimeTeardown
argument_list|,
name|createComparator
argument_list|(
name|MeetingsSortBy
operator|.
name|TEARDOWN_TIME
argument_list|)
argument_list|)
expr_stmt|;
name|addSortByOperation
argument_list|(
name|hLocation
argument_list|,
name|createComparator
argument_list|(
name|MeetingsSortBy
operator|.
name|LOCATION
argument_list|)
argument_list|)
expr_stmt|;
name|addSortByOperation
argument_list|(
name|hCapacity
argument_list|,
name|createComparator
argument_list|(
name|MeetingsSortBy
operator|.
name|CAPACITY
argument_list|)
argument_list|)
expr_stmt|;
name|addSortByOperation
argument_list|(
name|hApproval
argument_list|,
name|createComparator
argument_list|(
name|MeetingsSortBy
operator|.
name|APPROVAL
argument_list|)
argument_list|)
expr_stmt|;
name|resetColumnVisibility
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setSelectable
parameter_list|(
name|boolean
name|selectable
parameter_list|)
block|{
name|iSelectable
operator|=
name|selectable
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSelectable
parameter_list|()
block|{
return|return
name|iSelectable
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearTable
parameter_list|(
name|int
name|headerRows
parameter_list|)
block|{
name|super
operator|.
name|clearTable
argument_list|(
name|headerRows
argument_list|)
expr_stmt|;
name|resetColumnVisibility
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|resetColumnVisibility
parameter_list|()
block|{
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colPublishedTime
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
name|EventCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|EventFlag
operator|.
name|SHOW_PUBLISHED_TIME
argument_list|)
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colAllocatedTime
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
name|EventCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|EventFlag
operator|.
name|SHOW_ALLOCATED_TIME
argument_list|)
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colSetupTimeShort
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
name|EventCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|EventFlag
operator|.
name|SHOW_SETUP_TIME
argument_list|)
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colTeardownTimeShort
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
name|EventCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|EventFlag
operator|.
name|SHOW_TEARDOWN_TIME
argument_list|)
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colCapacity
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|,
name|EventCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|EventFlag
operator|.
name|SHOW_CAPACITY
argument_list|)
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addHideOperation
parameter_list|(
specifier|final
name|UniTimeTableHeader
name|header
parameter_list|,
specifier|final
name|EventFlag
name|flag
parameter_list|)
block|{
name|Operation
name|op
init|=
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|boolean
name|visible
init|=
name|isColumnVisible
argument_list|(
name|header
operator|.
name|getColumn
argument_list|()
argument_list|)
decl_stmt|;
name|setColumnVisible
argument_list|(
name|header
operator|.
name|getColumn
argument_list|()
argument_list|,
operator|!
name|visible
argument_list|)
expr_stmt|;
name|EventCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|set
argument_list|(
name|flag
argument_list|,
operator|!
name|visible
argument_list|)
expr_stmt|;
if|if
condition|(
name|flag
operator|==
name|EventFlag
operator|.
name|SHOW_ALLOCATED_TIME
operator|&&
name|visible
condition|)
block|{
name|UniTimeTableHeader
name|other
init|=
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colPublishedTime
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isColumnVisible
argument_list|(
name|other
operator|.
name|getColumn
argument_list|()
argument_list|)
condition|)
block|{
name|setColumnVisible
argument_list|(
name|other
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|EventCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|set
argument_list|(
name|EventFlag
operator|.
name|SHOW_PUBLISHED_TIME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|flag
operator|==
name|EventFlag
operator|.
name|SHOW_PUBLISHED_TIME
operator|&&
name|visible
condition|)
block|{
name|UniTimeTableHeader
name|other
init|=
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colAllocatedTime
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isColumnVisible
argument_list|(
name|other
operator|.
name|getColumn
argument_list|()
argument_list|)
condition|)
block|{
name|setColumnVisible
argument_list|(
name|other
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|EventCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|set
argument_list|(
name|EventFlag
operator|.
name|SHOW_ALLOCATED_TIME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|isColumnVisible
argument_list|(
name|header
operator|.
name|getColumn
argument_list|()
argument_list|)
condition|?
name|MESSAGES
operator|.
name|opHide
argument_list|(
name|header
operator|.
name|getHTML
argument_list|()
argument_list|)
else|:
name|MESSAGES
operator|.
name|opShow
argument_list|(
name|header
operator|.
name|getHTML
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|getHeader
argument_list|(
literal|null
argument_list|)
operator|.
name|addOperation
argument_list|(
name|flag
operator|==
name|EventFlag
operator|.
name|SHOW_PUBLISHED_TIME
condition|?
name|separated
argument_list|(
name|op
argument_list|)
else|:
name|op
argument_list|)
expr_stmt|;
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colDate
argument_list|()
argument_list|)
operator|.
name|addOperation
argument_list|(
name|ifNotSelectable
argument_list|(
name|op
argument_list|)
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|flag
condition|)
block|{
case|case
name|SHOW_ALLOCATED_TIME
case|:
case|case
name|SHOW_PUBLISHED_TIME
case|:
case|case
name|SHOW_SETUP_TIME
case|:
case|case
name|SHOW_TEARDOWN_TIME
case|:
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colAllocatedTime
argument_list|()
argument_list|)
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colPublishedTime
argument_list|()
argument_list|)
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colSetupTimeShort
argument_list|()
argument_list|)
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colTeardownTimeShort
argument_list|()
argument_list|)
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_CAPACITY
case|:
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colLocation
argument_list|()
argument_list|)
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|header
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
break|break;
default|default:
name|header
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Operation
name|separated
parameter_list|(
specifier|final
name|Operation
name|op
parameter_list|)
block|{
return|return
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|op
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|op
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|op
operator|.
name|isApplicable
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
return|;
block|}
specifier|private
name|Operation
name|ifNotSelectable
parameter_list|(
specifier|final
name|Operation
name|op
parameter_list|)
block|{
return|return
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|op
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|op
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|op
operator|.
name|isApplicable
argument_list|()
operator|&&
operator|!
name|isColumnVisible
argument_list|(
name|getHeader
argument_list|(
literal|null
argument_list|)
operator|.
name|getColumn
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
name|op
operator|.
name|hasSeparator
argument_list|()
return|;
block|}
block|}
return|;
block|}
specifier|public
name|void
name|setAddMeetingsCommand
parameter_list|(
name|Command
name|command
parameter_list|)
block|{
name|iAddMeetingsCommand
operator|=
name|command
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasMeeting
parameter_list|(
name|MeetingInterface
name|meeting
parameter_list|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
if|if
condition|(
name|meeting
operator|.
name|equals
argument_list|(
name|getData
argument_list|(
name|row
argument_list|)
index|[
literal|0
index|]
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|MeetingInterface
name|meeting
parameter_list|)
block|{
name|List
argument_list|<
name|Widget
argument_list|>
name|row
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|isSelectable
argument_list|()
operator|&&
operator|(
name|meeting
operator|.
name|getId
argument_list|()
operator|==
literal|null
operator|||
operator|(
name|meeting
operator|.
name|isCanEdit
argument_list|()
operator|||
name|meeting
operator|.
name|isCanApprove
argument_list|()
operator|)
operator|)
condition|)
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|CheckBoxCell
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isColumnVisible
argument_list|(
literal|0
argument_list|)
condition|)
name|setColumnVisible
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
literal|"&nbsp;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|sDateFormat
operator|.
name|format
argument_list|(
name|meeting
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|meetingTime
argument_list|(
name|meeting
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|allocatedTime
argument_list|(
name|meeting
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|NumberCell
argument_list|(
name|meeting
operator|.
name|getStartOffset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|NumberCell
argument_list|(
operator|-
name|meeting
operator|.
name|getEndOffset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|meeting
operator|.
name|getLocation
argument_list|()
operator|==
literal|null
condition|)
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|meeting
operator|.
name|getLocationName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|NumberCell
argument_list|(
name|meeting
operator|.
name|getLocation
argument_list|()
operator|.
name|getSize
argument_list|()
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|meeting
operator|.
name|getLocation
argument_list|()
operator|.
name|getSize
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|meeting
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|?
name|MESSAGES
operator|.
name|approvalNewMeeting
argument_list|()
else|:
name|meeting
operator|.
name|getApprovalDate
argument_list|()
operator|==
literal|null
condition|?
operator|(
name|meeting
operator|.
name|isPast
argument_list|()
condition|?
name|MESSAGES
operator|.
name|approvalNotApprovedPast
argument_list|()
else|:
name|MESSAGES
operator|.
name|approvalNotApproved
argument_list|()
operator|)
else|:
name|sDateFormat
operator|.
name|format
argument_list|(
name|meeting
operator|.
name|getApprovalDate
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|meeting
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|)
name|row
operator|.
name|get
argument_list|(
name|row
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|addStyleName
argument_list|(
literal|"new-meeting"
argument_list|)
expr_stmt|;
if|else if
condition|(
operator|!
name|meeting
operator|.
name|isApproved
argument_list|()
condition|)
block|{
if|if
condition|(
name|meeting
operator|.
name|isPast
argument_list|()
condition|)
name|row
operator|.
name|get
argument_list|(
name|row
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|addStyleName
argument_list|(
literal|"not-approved-past"
argument_list|)
expr_stmt|;
else|else
name|row
operator|.
name|get
argument_list|(
name|row
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|addStyleName
argument_list|(
literal|"not-approved"
argument_list|)
expr_stmt|;
block|}
name|int
name|meetingRow
init|=
name|addRow
argument_list|(
operator|new
name|MeetingInterface
index|[]
block|{
name|meeting
block|}
argument_list|,
name|row
argument_list|)
decl_stmt|;
name|getRowFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
name|meetingRow
argument_list|,
literal|"meeting-row"
argument_list|)
expr_stmt|;
if|if
condition|(
name|meeting
operator|.
name|isPast
argument_list|()
condition|)
name|getRowFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
name|meetingRow
argument_list|,
literal|"past-meeting"
argument_list|)
expr_stmt|;
if|if
condition|(
name|meeting
operator|.
name|hasConflicts
argument_list|()
condition|)
block|{
for|for
control|(
name|MeetingConglictInterface
name|m
range|:
name|meeting
operator|.
name|getConflicts
argument_list|()
control|)
block|{
name|List
argument_list|<
name|Widget
argument_list|>
name|r
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
name|r
operator|.
name|add
argument_list|(
operator|new
name|CenterredCell
argument_list|(
name|MESSAGES
operator|.
name|signConflict
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|m
operator|.
name|getType
argument_list|()
operator|==
name|EventType
operator|.
name|Unavailabile
condition|?
name|m
operator|.
name|getName
argument_list|()
else|:
name|MESSAGES
operator|.
name|conflictWith
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|meetingTime
argument_list|(
name|m
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|allocatedTime
argument_list|(
name|m
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|add
argument_list|(
operator|new
name|NumberCell
argument_list|(
name|m
operator|.
name|getStartOffset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|add
argument_list|(
operator|new
name|NumberCell
argument_list|(
operator|-
name|m
operator|.
name|getEndOffset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|add
argument_list|(
operator|new
name|NumberCell
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|m
operator|.
name|getType
argument_list|()
operator|==
name|EventType
operator|.
name|Unavailabile
condition|?
literal|""
else|:
name|m
operator|.
name|getApprovalDate
argument_list|()
operator|==
literal|null
condition|?
name|MESSAGES
operator|.
name|approvalNotApproved
argument_list|()
else|:
name|sDateFormat
operator|.
name|format
argument_list|(
name|m
operator|.
name|getApprovalDate
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m
operator|.
name|isApproved
argument_list|()
operator|&&
name|m
operator|.
name|getType
argument_list|()
operator|!=
name|EventType
operator|.
name|Unavailabile
condition|)
name|r
operator|.
name|get
argument_list|(
name|r
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|addStyleName
argument_list|(
literal|"not-approved"
argument_list|)
expr_stmt|;
name|r
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setPaddingLeft
argument_list|(
literal|5
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|int
name|conflictRow
init|=
name|addRow
argument_list|(
operator|new
name|MeetingInterface
index|[]
block|{
name|meeting
block|,
name|m
block|}
argument_list|,
name|r
argument_list|)
decl_stmt|;
name|getRowFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
name|conflictRow
argument_list|,
literal|"conflict"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|addSortByOperation
parameter_list|(
specifier|final
name|UniTimeTableHeader
name|header
parameter_list|,
specifier|final
name|Comparator
argument_list|<
name|MeetingInterface
index|[]
argument_list|>
name|comparator
parameter_list|)
block|{
name|header
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|sort
argument_list|(
name|comparator
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|getRowCount
argument_list|()
operator|>
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opSortBy
argument_list|(
name|header
operator|.
name|getHTML
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
enum|enum
name|MeetingsSortBy
block|{
name|DATE
block|,
name|PUBLISHED_TIME
block|,
name|ALLOCATED_TIME
block|,
name|SETUP_TIME
block|,
name|TEARDOWN_TIME
block|,
name|LOCATION
block|,
name|CAPACITY
block|,
name|APPROVAL
block|}
specifier|protected
name|Comparator
argument_list|<
name|MeetingInterface
index|[]
argument_list|>
name|createComparator
parameter_list|(
specifier|final
name|MeetingsSortBy
name|sortBy
parameter_list|)
block|{
return|return
operator|new
name|Comparator
argument_list|<
name|MeetingInterface
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|MeetingInterface
index|[]
name|m1
parameter_list|,
name|MeetingInterface
index|[]
name|m2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|MeetingTable
operator|.
name|compare
argument_list|(
name|m1
index|[
literal|0
index|]
argument_list|,
name|m2
index|[
literal|0
index|]
argument_list|,
name|sortBy
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
if|if
condition|(
name|m1
operator|.
name|length
operator|==
literal|2
condition|)
block|{
if|if
condition|(
name|m2
operator|.
name|length
operator|==
literal|2
condition|)
return|return
name|MeetingTable
operator|.
name|compare
argument_list|(
name|m1
index|[
literal|1
index|]
argument_list|,
name|m2
index|[
literal|1
index|]
argument_list|,
name|sortBy
argument_list|)
return|;
else|else
return|return
literal|1
return|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
block|}
return|;
block|}
specifier|private
specifier|static
name|int
name|compateByApproval
parameter_list|(
name|MeetingInterface
name|m1
parameter_list|,
name|MeetingInterface
name|m2
parameter_list|)
block|{
if|if
condition|(
name|m1
operator|.
name|getId
argument_list|()
operator|==
literal|null
operator|&&
name|m2
operator|.
name|getId
argument_list|()
operator|!=
literal|null
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|m1
operator|.
name|getId
argument_list|()
operator|!=
literal|null
operator|&&
name|m2
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|1
return|;
name|Date
name|now
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
return|return
operator|(
name|m1
operator|.
name|getApprovalDate
argument_list|()
operator|==
literal|null
condition|?
name|now
else|:
name|m1
operator|.
name|getApprovalDate
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|m2
operator|.
name|getApprovalDate
argument_list|()
operator|==
literal|null
condition|?
name|now
else|:
name|m2
operator|.
name|getApprovalDate
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|int
name|compareByDate
parameter_list|(
name|MeetingInterface
name|m1
parameter_list|,
name|MeetingInterface
name|m2
parameter_list|)
block|{
if|if
condition|(
name|m1
operator|instanceof
name|MeetingConglictInterface
operator|&&
name|m2
operator|instanceof
name|MeetingConglictInterface
condition|)
block|{
name|int
name|cmp
init|=
operator|(
operator|(
name|MeetingConglictInterface
operator|)
name|m1
operator|)
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
operator|(
operator|(
name|MeetingConglictInterface
operator|)
name|m2
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
return|return
name|m1
operator|.
name|getMeetingDate
argument_list|()
operator|.
name|compareTo
argument_list|(
name|m2
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|int
name|compareByAllocatedTime
parameter_list|(
name|MeetingInterface
name|m1
parameter_list|,
name|MeetingInterface
name|m2
parameter_list|)
block|{
name|int
name|cmp
init|=
operator|new
name|Integer
argument_list|(
name|m1
operator|.
name|getStartSlot
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|m2
operator|.
name|getStartSlot
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|new
name|Integer
argument_list|(
name|m1
operator|.
name|getEndSlot
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|m2
operator|.
name|getEndSlot
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|int
name|compareByPublishedTime
parameter_list|(
name|MeetingInterface
name|m1
parameter_list|,
name|MeetingInterface
name|m2
parameter_list|)
block|{
name|int
name|cmp
init|=
operator|new
name|Integer
argument_list|(
operator|(
literal|5
operator|*
name|m1
operator|.
name|getStartSlot
argument_list|()
operator|)
operator|+
name|m1
operator|.
name|getStartOffset
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
operator|(
literal|5
operator|*
name|m2
operator|.
name|getStartSlot
argument_list|()
operator|)
operator|+
name|m2
operator|.
name|getStartOffset
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|new
name|Integer
argument_list|(
operator|(
literal|5
operator|*
name|m1
operator|.
name|getEndSlot
argument_list|()
operator|)
operator|+
name|m2
operator|.
name|getEndOffset
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
operator|(
literal|5
operator|*
name|m2
operator|.
name|getEndSlot
argument_list|()
operator|)
operator|+
name|m2
operator|.
name|getEndOffset
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|int
name|compareBySetupTime
parameter_list|(
name|MeetingInterface
name|m1
parameter_list|,
name|MeetingInterface
name|m2
parameter_list|)
block|{
return|return
operator|new
name|Integer
argument_list|(
name|m1
operator|.
name|getStartOffset
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|m2
operator|.
name|getStartOffset
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|int
name|compareByTeardownTime
parameter_list|(
name|MeetingInterface
name|m1
parameter_list|,
name|MeetingInterface
name|m2
parameter_list|)
block|{
return|return
operator|new
name|Integer
argument_list|(
name|m2
operator|.
name|getEndOffset
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|m1
operator|.
name|getEndOffset
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|int
name|compareByLocation
parameter_list|(
name|MeetingInterface
name|m1
parameter_list|,
name|MeetingInterface
name|m2
parameter_list|)
block|{
return|return
name|m1
operator|.
name|getLocationName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|m2
operator|.
name|getLocationName
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|int
name|compareByCapacity
parameter_list|(
name|MeetingInterface
name|m1
parameter_list|,
name|MeetingInterface
name|m2
parameter_list|)
block|{
return|return
operator|(
name|m1
operator|.
name|getLocation
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Integer
argument_list|(
operator|-
literal|1
argument_list|)
else|:
name|m1
operator|.
name|getLocation
argument_list|()
operator|.
name|getSize
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|m2
operator|.
name|getLocation
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Integer
argument_list|(
operator|-
literal|1
argument_list|)
else|:
name|m2
operator|.
name|getLocation
argument_list|()
operator|.
name|getSize
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|int
name|compareFallback
parameter_list|(
name|MeetingInterface
name|m1
parameter_list|,
name|MeetingInterface
name|m2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|compareByDate
argument_list|(
name|m1
argument_list|,
name|m2
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|compareByPublishedTime
argument_list|(
name|m1
argument_list|,
name|m2
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|compareByLocation
argument_list|(
name|m1
argument_list|,
name|m2
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|m1
operator|.
name|compareTo
argument_list|(
name|m2
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|int
name|compare
parameter_list|(
name|MeetingInterface
name|m1
parameter_list|,
name|MeetingInterface
name|m2
parameter_list|,
name|MeetingsSortBy
name|sortBy
parameter_list|)
block|{
name|int
name|cmp
decl_stmt|;
switch|switch
condition|(
name|sortBy
condition|)
block|{
case|case
name|APPROVAL
case|:
name|cmp
operator|=
name|compateByApproval
argument_list|(
name|m1
argument_list|,
name|m2
argument_list|)
expr_stmt|;
return|return
operator|(
name|cmp
operator|==
literal|0
condition|?
name|compareFallback
argument_list|(
name|m1
argument_list|,
name|m2
argument_list|)
else|:
name|cmp
operator|)
return|;
case|case
name|DATE
case|:
name|cmp
operator|=
name|compareByDate
argument_list|(
name|m1
argument_list|,
name|m2
argument_list|)
expr_stmt|;
return|return
operator|(
name|cmp
operator|==
literal|0
condition|?
name|compareFallback
argument_list|(
name|m1
argument_list|,
name|m2
argument_list|)
else|:
name|cmp
operator|)
return|;
case|case
name|SETUP_TIME
case|:
name|cmp
operator|=
name|compareBySetupTime
argument_list|(
name|m1
argument_list|,
name|m2
argument_list|)
expr_stmt|;
return|return
operator|(
name|cmp
operator|==
literal|0
condition|?
name|compareFallback
argument_list|(
name|m1
argument_list|,
name|m2
argument_list|)
else|:
name|cmp
operator|)
return|;
case|case
name|TEARDOWN_TIME
case|:
name|cmp
operator|=
name|compareByTeardownTime
argument_list|(
name|m1
argument_list|,
name|m2
argument_list|)
expr_stmt|;
return|return
operator|(
name|cmp
operator|==
literal|0
condition|?
name|compareFallback
argument_list|(
name|m1
argument_list|,
name|m2
argument_list|)
else|:
name|cmp
operator|)
return|;
case|case
name|PUBLISHED_TIME
case|:
name|cmp
operator|=
name|compareBySetupTime
argument_list|(
name|m1
argument_list|,
name|m2
argument_list|)
expr_stmt|;
return|return
operator|(
name|cmp
operator|==
literal|0
condition|?
name|compareFallback
argument_list|(
name|m1
argument_list|,
name|m2
argument_list|)
else|:
name|cmp
operator|)
return|;
case|case
name|ALLOCATED_TIME
case|:
name|cmp
operator|=
name|compareByAllocatedTime
argument_list|(
name|m1
argument_list|,
name|m2
argument_list|)
expr_stmt|;
return|return
operator|(
name|cmp
operator|==
literal|0
condition|?
name|compareFallback
argument_list|(
name|m1
argument_list|,
name|m2
argument_list|)
else|:
name|cmp
operator|)
return|;
case|case
name|LOCATION
case|:
name|cmp
operator|=
name|compareByLocation
argument_list|(
name|m1
argument_list|,
name|m2
argument_list|)
expr_stmt|;
return|return
operator|(
name|cmp
operator|==
literal|0
condition|?
name|compareFallback
argument_list|(
name|m1
argument_list|,
name|m2
argument_list|)
else|:
name|cmp
operator|)
return|;
case|case
name|CAPACITY
case|:
name|cmp
operator|=
name|compareByCapacity
argument_list|(
name|m1
argument_list|,
name|m2
argument_list|)
expr_stmt|;
return|return
operator|(
name|cmp
operator|==
literal|0
condition|?
name|compareFallback
argument_list|(
name|m1
argument_list|,
name|m2
argument_list|)
else|:
name|cmp
operator|)
return|;
block|}
return|return
name|m1
operator|.
name|compareTo
argument_list|(
name|m2
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|meetingTime
parameter_list|(
name|MeetingInterface
name|m
parameter_list|)
block|{
if|if
condition|(
name|m
operator|.
name|getStartSlot
argument_list|()
operator|==
literal|0
operator|&&
name|m
operator|.
name|getStartOffset
argument_list|()
operator|==
literal|0
operator|&&
name|m
operator|.
name|getEndOffset
argument_list|()
operator|==
literal|0
operator|&&
name|m
operator|.
name|getEndSlot
argument_list|()
operator|==
literal|288
condition|)
return|return
name|MESSAGES
operator|.
name|timeAllDay
argument_list|()
return|;
name|String
name|startTime
init|=
name|m
operator|.
name|getStartTime
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|int
name|start
init|=
literal|5
operator|*
name|m
operator|.
name|getStartSlot
argument_list|()
operator|+
name|m
operator|.
name|getStartOffset
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
operator|==
literal|0
operator|||
name|start
operator|==
literal|1440
condition|)
name|startTime
operator|=
name|MESSAGES
operator|.
name|timeMidnitgh
argument_list|()
expr_stmt|;
if|if
condition|(
name|start
operator|==
literal|720
condition|)
name|startTime
operator|=
name|MESSAGES
operator|.
name|timeNoon
argument_list|()
expr_stmt|;
name|String
name|endTime
init|=
name|m
operator|.
name|getEndTime
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|int
name|end
init|=
literal|5
operator|*
name|m
operator|.
name|getEndSlot
argument_list|()
operator|+
name|m
operator|.
name|getEndOffset
argument_list|()
decl_stmt|;
if|if
condition|(
name|end
operator|==
literal|0
operator|||
name|end
operator|==
literal|1440
condition|)
name|endTime
operator|=
name|MESSAGES
operator|.
name|timeMidnitgh
argument_list|()
expr_stmt|;
if|if
condition|(
name|end
operator|==
literal|720
condition|)
name|endTime
operator|=
name|MESSAGES
operator|.
name|timeNoon
argument_list|()
expr_stmt|;
return|return
name|startTime
operator|+
literal|" - "
operator|+
name|endTime
return|;
block|}
specifier|public
specifier|static
name|String
name|allocatedTime
parameter_list|(
name|MeetingInterface
name|m
parameter_list|)
block|{
if|if
condition|(
name|m
operator|.
name|getStartSlot
argument_list|()
operator|==
literal|0
operator|&&
name|m
operator|.
name|getEndSlot
argument_list|()
operator|==
literal|288
condition|)
return|return
name|MESSAGES
operator|.
name|timeAllDay
argument_list|()
return|;
name|String
name|startTime
init|=
name|m
operator|.
name|getStartTime
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|getStartSlot
argument_list|()
operator|==
literal|0
operator|||
name|m
operator|.
name|getStartSlot
argument_list|()
operator|==
literal|288
condition|)
name|startTime
operator|=
name|MESSAGES
operator|.
name|timeMidnitgh
argument_list|()
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|getStartSlot
argument_list|()
operator|==
literal|144
condition|)
name|startTime
operator|=
name|MESSAGES
operator|.
name|timeNoon
argument_list|()
expr_stmt|;
name|String
name|endTime
init|=
name|m
operator|.
name|getEndTime
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|getEndSlot
argument_list|()
operator|==
literal|0
operator|||
name|m
operator|.
name|getEndSlot
argument_list|()
operator|==
literal|288
condition|)
name|endTime
operator|=
name|MESSAGES
operator|.
name|timeMidnitgh
argument_list|()
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|getEndSlot
argument_list|()
operator|==
literal|144
condition|)
name|endTime
operator|=
name|MESSAGES
operator|.
name|timeNoon
argument_list|()
expr_stmt|;
return|return
name|startTime
operator|+
literal|" - "
operator|+
name|endTime
return|;
block|}
specifier|private
specifier|abstract
class|class
name|MeetingOperation
implements|implements
name|Operation
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
if|if
condition|(
name|hasSelection
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|row
init|=
name|getRowCount
argument_list|()
operator|-
literal|1
init|;
name|row
operator|>=
literal|1
condition|;
name|row
operator|--
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|CheckBox
name|ch
init|=
operator|(
name|CheckBox
operator|)
name|w
decl_stmt|;
if|if
condition|(
name|ch
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|MeetingInterface
name|m
init|=
name|getData
argument_list|(
name|row
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|isApplicable
argument_list|(
name|m
argument_list|)
condition|)
name|execute
argument_list|(
name|row
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|row
init|=
name|getRowCount
argument_list|()
operator|-
literal|1
init|;
name|row
operator|>=
literal|1
condition|;
name|row
operator|--
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|MeetingInterface
name|m
init|=
name|getData
argument_list|(
name|row
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|isApplicable
argument_list|(
name|m
argument_list|)
condition|)
name|execute
argument_list|(
name|row
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|boolean
name|hasSelection
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|CheckBox
name|ch
init|=
operator|(
name|CheckBox
operator|)
name|w
decl_stmt|;
if|if
condition|(
name|ch
operator|.
name|getValue
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
name|boolean
name|hasSelection
init|=
name|hasSelection
argument_list|()
decl_stmt|;
name|boolean
name|allMustMatch
init|=
name|allMustMatch
argument_list|(
name|hasSelection
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasSelection
condition|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|CheckBox
name|ch
init|=
operator|(
name|CheckBox
operator|)
name|w
decl_stmt|;
if|if
condition|(
name|ch
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|MeetingInterface
name|m
init|=
name|getData
argument_list|(
name|row
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|isApplicable
argument_list|(
name|m
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|allMustMatch
condition|)
return|return
literal|true
return|;
block|}
else|else
block|{
if|if
condition|(
name|allMustMatch
condition|)
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
return|return
name|allMustMatch
return|;
block|}
else|else
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|MeetingInterface
name|m
init|=
name|getData
argument_list|(
name|row
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|isApplicable
argument_list|(
name|m
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|allMustMatch
condition|)
return|return
literal|true
return|;
block|}
else|else
block|{
if|if
condition|(
name|allMustMatch
condition|)
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
name|allMustMatch
return|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|MeetingInterface
argument_list|>
name|meetings
parameter_list|()
block|{
name|List
argument_list|<
name|MeetingInterface
argument_list|>
name|meetings
init|=
operator|new
name|ArrayList
argument_list|<
name|MeetingInterface
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasSelection
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|CheckBox
name|ch
init|=
operator|(
name|CheckBox
operator|)
name|w
decl_stmt|;
if|if
condition|(
name|ch
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|MeetingInterface
name|m
init|=
name|getData
argument_list|(
name|row
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|isApplicable
argument_list|(
name|m
argument_list|)
condition|)
name|meetings
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|MeetingInterface
name|m
init|=
name|getData
argument_list|(
name|row
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|isApplicable
argument_list|(
name|m
argument_list|)
condition|)
name|meetings
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|meetings
return|;
block|}
specifier|public
name|List
argument_list|<
name|Integer
argument_list|>
name|rows
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|rows
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasSelection
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|CheckBox
name|ch
init|=
operator|(
name|CheckBox
operator|)
name|w
decl_stmt|;
if|if
condition|(
name|ch
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|MeetingInterface
name|m
init|=
name|getData
argument_list|(
name|row
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|isApplicable
argument_list|(
name|m
argument_list|)
condition|)
name|rows
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|MeetingInterface
name|m
init|=
name|getData
argument_list|(
name|row
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|isApplicable
argument_list|(
name|m
argument_list|)
condition|)
name|rows
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|rows
return|;
block|}
specifier|public
name|boolean
name|allMustMatch
parameter_list|(
name|boolean
name|hasSelection
parameter_list|)
block|{
return|return
name|hasSelection
return|;
block|}
specifier|public
specifier|abstract
name|boolean
name|isApplicable
parameter_list|(
name|MeetingInterface
name|meeting
parameter_list|)
function_decl|;
specifier|public
specifier|abstract
name|void
name|execute
parameter_list|(
name|int
name|row
parameter_list|,
name|MeetingInterface
name|meeting
parameter_list|)
function_decl|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|HandlerRegistration
name|addValueChangeHandler
parameter_list|(
name|ValueChangeHandler
argument_list|<
name|List
argument_list|<
name|MeetingInterface
argument_list|>
argument_list|>
name|handler
parameter_list|)
block|{
return|return
name|addHandler
argument_list|(
name|handler
argument_list|,
name|ValueChangeEvent
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|MeetingInterface
argument_list|>
name|getValue
parameter_list|()
block|{
name|List
argument_list|<
name|MeetingInterface
argument_list|>
name|value
init|=
operator|new
name|ArrayList
argument_list|<
name|MeetingInterface
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|MeetingInterface
index|[]
name|data
init|=
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
operator|&&
name|data
operator|.
name|length
operator|==
literal|1
condition|)
name|value
operator|.
name|add
argument_list|(
name|data
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|List
argument_list|<
name|MeetingInterface
argument_list|>
name|value
parameter_list|)
block|{
name|setValue
argument_list|(
name|value
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|List
argument_list|<
name|MeetingInterface
argument_list|>
name|value
parameter_list|,
name|boolean
name|fireEvents
parameter_list|)
block|{
name|clearTable
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
for|for
control|(
name|MeetingInterface
name|meeting
range|:
name|value
control|)
name|add
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
if|if
condition|(
name|fireEvents
condition|)
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|this
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

