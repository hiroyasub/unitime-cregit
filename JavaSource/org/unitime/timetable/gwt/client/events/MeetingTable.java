begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.4 (University Timetabling Application)  * Copyright (C) 2012, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|events
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|MeetingConglictInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|MeetingInterface
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Unit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|DateTimeFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|CheckBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
operator|.
name|HorizontalAlignmentConstant
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_class
specifier|public
class|class
name|MeetingTable
extends|extends
name|UniTimeTable
argument_list|<
name|MeetingInterface
index|[]
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|GwtConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|DateTimeFormat
name|sDateFormat
init|=
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|meetingDateFormat
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|Command
name|iAddMeetingsCommand
decl_stmt|;
specifier|public
name|MeetingTable
parameter_list|()
block|{
name|setStyleName
argument_list|(
literal|"unitime-EventMeetings"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Widget
argument_list|>
name|header
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
name|UniTimeTableHeader
name|hTimes
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
literal|"&otimes;"
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_CENTER
argument_list|)
decl_stmt|;
name|hTimes
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|CheckBox
name|ch
init|=
operator|(
name|CheckBox
operator|)
name|w
decl_stmt|;
name|ch
operator|.
name|setValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|CheckBox
name|ch
init|=
operator|(
name|CheckBox
operator|)
name|w
decl_stmt|;
if|if
condition|(
operator|!
name|ch
operator|.
name|getValue
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opSelectAll
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hTimes
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|CheckBox
name|ch
init|=
operator|(
name|CheckBox
operator|)
name|w
decl_stmt|;
name|ch
operator|.
name|setValue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|CheckBox
name|ch
init|=
operator|(
name|CheckBox
operator|)
name|w
decl_stmt|;
if|if
condition|(
name|ch
operator|.
name|getValue
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opClearSelection
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hTimes
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
name|getRowCount
argument_list|()
operator|-
literal|1
init|;
name|row
operator|>=
literal|1
condition|;
name|row
operator|--
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
operator|&&
name|getData
argument_list|(
name|row
argument_list|)
index|[
literal|0
index|]
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|)
block|{
while|while
condition|(
name|row
operator|+
literal|1
operator|<
name|getRowCount
argument_list|()
operator|&&
name|getData
argument_list|(
name|row
operator|+
literal|1
argument_list|)
operator|.
name|length
operator|==
literal|2
condition|)
name|removeRow
argument_list|(
name|row
operator|+
literal|1
argument_list|)
expr_stmt|;
name|removeRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
operator|&&
name|getData
argument_list|(
name|row
argument_list|)
index|[
literal|0
index|]
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opDeleteNewMeetings
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hTimes
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
name|getRowCount
argument_list|()
operator|-
literal|1
init|;
name|row
operator|>=
literal|1
condition|;
name|row
operator|--
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|CheckBox
name|ch
init|=
operator|(
name|CheckBox
operator|)
name|w
decl_stmt|;
if|if
condition|(
name|ch
operator|.
name|getValue
argument_list|()
operator|&&
name|getData
argument_list|(
name|row
argument_list|)
index|[
literal|0
index|]
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|)
block|{
while|while
condition|(
name|row
operator|+
literal|1
operator|<
name|getRowCount
argument_list|()
operator|&&
name|getData
argument_list|(
name|row
operator|+
literal|1
argument_list|)
operator|.
name|length
operator|==
literal|2
condition|)
name|removeRow
argument_list|(
name|row
operator|+
literal|1
argument_list|)
expr_stmt|;
name|removeRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
name|boolean
name|selected
init|=
literal|false
decl_stmt|,
name|allNew
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|CheckBox
name|ch
init|=
operator|(
name|CheckBox
operator|)
name|w
decl_stmt|;
if|if
condition|(
name|ch
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|selected
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|getData
argument_list|(
name|row
argument_list|)
index|[
literal|0
index|]
operator|.
name|getId
argument_list|()
operator|!=
literal|null
condition|)
name|allNew
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
return|return
name|selected
operator|&&
name|allNew
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opDeleteSelectedMeetings
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hTimes
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iAddMeetingsCommand
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|iAddMeetingsCommand
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opAddMeetings
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hTimes
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hDate
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colDate
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hDate
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hTime
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colTime
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hTime
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hLocation
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colLocation
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hLocation
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hCapacity
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colCapacity
argument_list|()
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hCapacity
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hApproval
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colApproval
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hApproval
argument_list|)
expr_stmt|;
name|hDate
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|sort
argument_list|(
name|createComparator
argument_list|(
name|SortBy
operator|.
name|DATE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|getRowCount
argument_list|()
operator|>
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opSortBy
argument_list|(
name|MESSAGES
operator|.
name|colDate
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hTime
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|sort
argument_list|(
name|createComparator
argument_list|(
name|SortBy
operator|.
name|TIME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|getRowCount
argument_list|()
operator|>
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opSortBy
argument_list|(
name|MESSAGES
operator|.
name|colTime
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hLocation
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|sort
argument_list|(
name|createComparator
argument_list|(
name|SortBy
operator|.
name|LOCATION
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|getRowCount
argument_list|()
operator|>
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opSortBy
argument_list|(
name|MESSAGES
operator|.
name|colLocation
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hCapacity
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|sort
argument_list|(
name|createComparator
argument_list|(
name|SortBy
operator|.
name|CAPACITY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|getRowCount
argument_list|()
operator|>
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opSortBy
argument_list|(
name|MESSAGES
operator|.
name|colCapacity
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hApproval
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|sort
argument_list|(
name|createComparator
argument_list|(
name|SortBy
operator|.
name|APPROVAL
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|getRowCount
argument_list|()
operator|>
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opSortBy
argument_list|(
name|MESSAGES
operator|.
name|colApproval
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
literal|null
argument_list|,
name|header
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setAddMeetingsCommand
parameter_list|(
name|Command
name|command
parameter_list|)
block|{
name|iAddMeetingsCommand
operator|=
name|command
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasMeeting
parameter_list|(
name|MeetingInterface
name|meeting
parameter_list|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
if|if
condition|(
name|meeting
operator|.
name|equals
argument_list|(
name|getData
argument_list|(
name|row
argument_list|)
index|[
literal|0
index|]
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|MeetingInterface
name|meeting
parameter_list|)
block|{
name|List
argument_list|<
name|Widget
argument_list|>
name|row
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|CheckBoxCell
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|sDateFormat
operator|.
name|format
argument_list|(
name|meeting
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|meeting
operator|.
name|getMeetingTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|meeting
operator|.
name|getLocation
argument_list|()
operator|==
literal|null
condition|)
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|meeting
operator|.
name|getLocationName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|NumberCell
argument_list|(
name|meeting
operator|.
name|getLocation
argument_list|()
operator|.
name|getSize
argument_list|()
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|meeting
operator|.
name|getLocation
argument_list|()
operator|.
name|getSize
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|meeting
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|?
name|MESSAGES
operator|.
name|approvalNewMeeting
argument_list|()
else|:
name|meeting
operator|.
name|getApprovalDate
argument_list|()
operator|==
literal|null
condition|?
name|MESSAGES
operator|.
name|approvalNotApproved
argument_list|()
else|:
name|sDateFormat
operator|.
name|format
argument_list|(
name|meeting
operator|.
name|getApprovalDate
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|meeting
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|)
name|row
operator|.
name|get
argument_list|(
name|row
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|addStyleName
argument_list|(
literal|"new-meeting"
argument_list|)
expr_stmt|;
if|else if
condition|(
operator|!
name|meeting
operator|.
name|isApproved
argument_list|()
condition|)
name|row
operator|.
name|get
argument_list|(
name|row
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|addStyleName
argument_list|(
literal|"not-approved"
argument_list|)
expr_stmt|;
name|int
name|meetingRow
init|=
name|addRow
argument_list|(
operator|new
name|MeetingInterface
index|[]
block|{
name|meeting
block|}
argument_list|,
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|meeting
operator|.
name|isPast
argument_list|()
condition|)
name|getRowFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
name|meetingRow
argument_list|,
literal|"past-meeting"
argument_list|)
expr_stmt|;
if|if
condition|(
name|meeting
operator|.
name|hasConflicts
argument_list|()
condition|)
block|{
for|for
control|(
name|MeetingConglictInterface
name|m
range|:
name|meeting
operator|.
name|getConflicts
argument_list|()
control|)
block|{
name|List
argument_list|<
name|Widget
argument_list|>
name|r
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
name|r
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|MESSAGES
operator|.
name|conflictWith
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|m
operator|.
name|getMeetingTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|add
argument_list|(
operator|new
name|NumberCell
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|m
operator|.
name|getApprovalDate
argument_list|()
operator|==
literal|null
condition|?
name|MESSAGES
operator|.
name|approvalNotApproved
argument_list|()
else|:
name|sDateFormat
operator|.
name|format
argument_list|(
name|m
operator|.
name|getApprovalDate
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m
operator|.
name|isApproved
argument_list|()
condition|)
name|r
operator|.
name|get
argument_list|(
name|r
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|addStyleName
argument_list|(
literal|"not-approved"
argument_list|)
expr_stmt|;
name|r
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setPaddingLeft
argument_list|(
literal|5
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|int
name|conflictRow
init|=
name|addRow
argument_list|(
operator|new
name|MeetingInterface
index|[]
block|{
name|meeting
block|,
name|m
block|}
argument_list|,
name|r
argument_list|)
decl_stmt|;
name|getRowFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
name|conflictRow
argument_list|,
literal|"conflict"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|int
name|compare
parameter_list|(
name|MeetingInterface
index|[]
name|m1
parameter_list|,
name|MeetingInterface
index|[]
name|m2
parameter_list|,
name|SortBy
name|sortBy
parameter_list|)
block|{
name|int
name|cmp
init|=
name|compare
argument_list|(
name|m1
index|[
literal|0
index|]
argument_list|,
name|m2
index|[
literal|0
index|]
argument_list|,
name|sortBy
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
if|if
condition|(
name|m1
operator|.
name|length
operator|==
literal|2
condition|)
block|{
if|if
condition|(
name|m2
operator|.
name|length
operator|==
literal|2
condition|)
return|return
name|compare
argument_list|(
name|m1
index|[
literal|1
index|]
argument_list|,
name|m2
index|[
literal|1
index|]
argument_list|,
name|sortBy
argument_list|)
return|;
else|else
return|return
literal|1
return|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
specifier|public
specifier|static
enum|enum
name|SortBy
block|{
name|DATE
block|,
name|TIME
block|,
name|LOCATION
block|,
name|CAPACITY
block|,
name|APPROVAL
block|}
specifier|protected
name|Comparator
argument_list|<
name|MeetingInterface
index|[]
argument_list|>
name|createComparator
parameter_list|(
specifier|final
name|SortBy
name|sortyBy
parameter_list|)
block|{
return|return
operator|new
name|Comparator
argument_list|<
name|MeetingInterface
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|MeetingInterface
index|[]
name|o1
parameter_list|,
name|MeetingInterface
index|[]
name|o2
parameter_list|)
block|{
return|return
name|MeetingTable
operator|.
name|this
operator|.
name|compare
argument_list|(
name|o1
argument_list|,
name|o2
argument_list|,
name|sortyBy
argument_list|)
return|;
block|}
block|}
return|;
block|}
specifier|public
name|int
name|compare
parameter_list|(
name|MeetingInterface
name|m1
parameter_list|,
name|MeetingInterface
name|m2
parameter_list|,
name|SortBy
name|sortBy
parameter_list|)
block|{
name|int
name|cmp
decl_stmt|;
switch|switch
condition|(
name|sortBy
condition|)
block|{
case|case
name|APPROVAL
case|:
if|if
condition|(
name|m1
operator|.
name|getId
argument_list|()
operator|==
literal|null
operator|&&
name|m2
operator|.
name|getId
argument_list|()
operator|!=
literal|null
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|m1
operator|.
name|getId
argument_list|()
operator|!=
literal|null
operator|&&
name|m2
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|1
return|;
name|Date
name|now
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|cmp
operator|=
operator|(
name|m1
operator|.
name|getApprovalDate
argument_list|()
operator|==
literal|null
condition|?
name|now
else|:
name|m1
operator|.
name|getApprovalDate
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|m2
operator|.
name|getApprovalDate
argument_list|()
operator|==
literal|null
condition|?
name|now
else|:
name|m2
operator|.
name|getApprovalDate
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
case|case
name|DATE
case|:
if|if
condition|(
name|m1
operator|instanceof
name|MeetingConglictInterface
operator|&&
name|m2
operator|instanceof
name|MeetingConglictInterface
condition|)
block|{
name|cmp
operator|=
operator|(
operator|(
name|MeetingConglictInterface
operator|)
name|m1
operator|)
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
operator|(
operator|(
name|MeetingConglictInterface
operator|)
name|m2
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
name|cmp
operator|=
name|m1
operator|.
name|getMeetingDate
argument_list|()
operator|.
name|compareTo
argument_list|(
name|m2
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
case|case
name|TIME
case|:
name|cmp
operator|=
operator|new
name|Integer
argument_list|(
name|m1
operator|.
name|getStartSlot
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|m2
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
operator|new
name|Integer
argument_list|(
name|m1
operator|.
name|getEndSlot
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|m2
operator|.
name|getEndSlot
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|m1
operator|.
name|getMeetingDate
argument_list|()
operator|.
name|compareTo
argument_list|(
name|m2
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
case|case
name|LOCATION
case|:
if|if
condition|(
name|m1
operator|instanceof
name|MeetingConglictInterface
operator|&&
name|m2
operator|instanceof
name|MeetingConglictInterface
condition|)
block|{
name|cmp
operator|=
operator|(
operator|(
name|MeetingConglictInterface
operator|)
name|m1
operator|)
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
operator|(
operator|(
name|MeetingConglictInterface
operator|)
name|m2
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
operator|new
name|Integer
argument_list|(
name|m1
operator|.
name|getStartSlot
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|m2
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
operator|new
name|Integer
argument_list|(
name|m1
operator|.
name|getEndSlot
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|m2
operator|.
name|getEndSlot
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
name|cmp
operator|=
name|m1
operator|.
name|getLocationName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|m2
operator|.
name|getLocationName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|m1
operator|.
name|getMeetingDate
argument_list|()
operator|.
name|compareTo
argument_list|(
name|m2
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
operator|new
name|Integer
argument_list|(
name|m1
operator|.
name|getStartSlot
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|m2
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
operator|new
name|Integer
argument_list|(
name|m1
operator|.
name|getEndSlot
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|m2
operator|.
name|getEndSlot
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
break|break;
case|case
name|CAPACITY
case|:
if|if
condition|(
name|m1
operator|instanceof
name|MeetingConglictInterface
operator|&&
name|m2
operator|instanceof
name|MeetingConglictInterface
condition|)
block|{
name|cmp
operator|=
operator|(
operator|(
name|MeetingConglictInterface
operator|)
name|m1
operator|)
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
operator|(
operator|(
name|MeetingConglictInterface
operator|)
name|m2
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
operator|new
name|Integer
argument_list|(
name|m1
operator|.
name|getStartSlot
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|m2
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
operator|new
name|Integer
argument_list|(
name|m1
operator|.
name|getEndSlot
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|m2
operator|.
name|getEndSlot
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
name|cmp
operator|=
operator|(
name|m1
operator|.
name|getLocation
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Integer
argument_list|(
operator|-
literal|1
argument_list|)
else|:
name|m1
operator|.
name|getLocation
argument_list|()
operator|.
name|getSize
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|m2
operator|.
name|getLocation
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Integer
argument_list|(
operator|-
literal|1
argument_list|)
else|:
name|m2
operator|.
name|getLocation
argument_list|()
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|m1
operator|.
name|getLocationName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|m2
operator|.
name|getLocationName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|m1
operator|.
name|getMeetingDate
argument_list|()
operator|.
name|compareTo
argument_list|(
name|m2
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
operator|new
name|Integer
argument_list|(
name|m1
operator|.
name|getStartSlot
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|m2
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
operator|new
name|Integer
argument_list|(
name|m1
operator|.
name|getEndSlot
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|m2
operator|.
name|getEndSlot
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
return|return
name|m1
operator|.
name|compareTo
argument_list|(
name|m2
argument_list|)
return|;
block|}
specifier|public
specifier|static
class|class
name|NumberCell
extends|extends
name|HTML
implements|implements
name|HasCellAlignment
block|{
specifier|public
name|NumberCell
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|super
argument_list|(
name|text
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|HorizontalAlignmentConstant
name|getCellAlignment
parameter_list|()
block|{
return|return
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|CheckBoxCell
extends|extends
name|CheckBox
implements|implements
name|HasCellAlignment
block|{
specifier|public
name|CheckBoxCell
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|HorizontalAlignmentConstant
name|getCellAlignment
parameter_list|()
block|{
return|return
name|HasHorizontalAlignment
operator|.
name|ALIGN_CENTER
return|;
block|}
block|}
block|}
end_class

end_unit

