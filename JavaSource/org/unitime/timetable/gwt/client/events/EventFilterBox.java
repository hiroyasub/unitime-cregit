begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.4 (University Timetabling Application)  * Copyright (C) 2012, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|events
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|FilterBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|TimeSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|FilterBox
operator|.
name|Chip
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|FilterBox
operator|.
name|Suggestion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|TimeSelector
operator|.
name|TimeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcResponseList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtAriaMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AcademicSessionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AcademicSessionProvider
operator|.
name|AcademicSessionChangeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AcademicSessionProvider
operator|.
name|AcademicSessionChangeHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|EventFilterRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|FilterRpcResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|RequestSessionDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|SessionMonth
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Unit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|FocusEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|FocusHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseDownEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseDownHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|DateTimeFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|AbsolutePanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|CheckBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ListBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|TextBox
import|;
end_import

begin_class
specifier|public
class|class
name|EventFilterBox
extends|extends
name|UniTimeFilterBox
argument_list|<
name|EventFilterRpcRequest
argument_list|>
block|{
specifier|private
name|ListBox
name|iSponsors
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|GwtConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|GwtAriaMessages
name|ARIA
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtAriaMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|GwtRpcServiceAsync
name|RPC
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtRpcService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|DateTimeFormat
name|sDateFormat
init|=
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|eventDateFormat
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|FilterBox
operator|.
name|CustomFilter
name|iOther
init|=
literal|null
decl_stmt|;
specifier|public
name|EventFilterBox
parameter_list|(
name|AcademicSessionProvider
name|session
parameter_list|)
block|{
name|super
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|addFilter
argument_list|(
operator|new
name|FilterBox
operator|.
name|StaticSimpleFilter
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
name|iSponsors
operator|=
operator|new
name|ListBox
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iSponsors
operator|.
name|setWidth
argument_list|(
literal|"100%"
argument_list|)
expr_stmt|;
name|iSponsors
operator|.
name|setVisibleItemCount
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|addFilter
argument_list|(
operator|new
name|FilterBox
operator|.
name|CustomFilter
argument_list|(
literal|"sponsor"
argument_list|,
name|iSponsors
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|getSuggestions
parameter_list|(
name|List
argument_list|<
name|Chip
argument_list|>
name|chips
parameter_list|,
name|String
name|text
parameter_list|,
name|AsyncCallback
argument_list|<
name|Collection
argument_list|<
name|Suggestion
argument_list|>
argument_list|>
name|callback
parameter_list|)
block|{
if|if
condition|(
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|callback
operator|.
name|onSuccess
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|Suggestion
argument_list|>
name|suggestions
init|=
operator|new
name|ArrayList
argument_list|<
name|Suggestion
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iSponsors
operator|.
name|getItemCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Chip
name|chip
init|=
operator|new
name|Chip
argument_list|(
literal|"sponsor"
argument_list|,
name|iSponsors
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|iSponsors
operator|.
name|getItemText
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|iSponsors
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|text
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|Suggestion
argument_list|(
name|name
argument_list|,
name|chip
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|text
operator|.
name|length
argument_list|()
operator|>
literal|2
operator|&&
name|name
operator|.
name|toLowerCase
argument_list|()
operator|.
name|contains
argument_list|(
literal|" "
operator|+
name|text
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|Suggestion
argument_list|(
name|name
argument_list|,
name|chip
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|callback
operator|.
name|onSuccess
argument_list|(
name|suggestions
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isVisible
parameter_list|()
block|{
return|return
name|iSponsors
operator|.
name|getItemCount
argument_list|()
operator|>
literal|0
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iSponsors
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iSponsors
operator|.
name|getItemCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Chip
name|chip
init|=
operator|new
name|Chip
argument_list|(
literal|"sponsor"
argument_list|,
name|iSponsors
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|iSponsors
operator|.
name|isItemSelected
argument_list|(
name|i
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|hasChip
argument_list|(
name|chip
argument_list|)
condition|)
block|{
name|addChip
argument_list|(
name|chip
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|hasChip
argument_list|(
name|chip
argument_list|)
condition|)
block|{
name|removeChip
argument_list|(
name|chip
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|changed
condition|)
name|fireValueChangeEvent
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|FilterBox
operator|.
name|StaticSimpleFilter
name|mode
init|=
operator|new
name|FilterBox
operator|.
name|StaticSimpleFilter
argument_list|(
literal|"mode"
argument_list|)
decl_stmt|;
name|mode
operator|.
name|setMultipleSelection
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|addFilter
argument_list|(
name|mode
argument_list|)
expr_stmt|;
name|Label
name|reqLab
init|=
operator|new
name|Label
argument_list|(
name|MESSAGES
operator|.
name|propRequestedBy
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|TextBox
name|requested
init|=
operator|new
name|TextBox
argument_list|()
decl_stmt|;
name|requested
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TextArea"
argument_list|)
expr_stmt|;
name|requested
operator|.
name|setMaxLength
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|requested
operator|.
name|setWidth
argument_list|(
literal|"200px"
argument_list|)
expr_stmt|;
specifier|final
name|CheckBox
name|conflicts
init|=
operator|new
name|CheckBox
argument_list|(
name|MESSAGES
operator|.
name|checkDisplayConflicts
argument_list|()
argument_list|)
decl_stmt|;
name|conflicts
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setMarginLeft
argument_list|(
literal|10
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
specifier|final
name|CheckBox
name|sessions
init|=
operator|new
name|CheckBox
argument_list|(
name|MESSAGES
operator|.
name|checkSpanMultipleSessions
argument_list|()
argument_list|)
decl_stmt|;
name|sessions
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setMarginLeft
argument_list|(
literal|10
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|iOther
operator|=
operator|new
name|FilterBox
operator|.
name|CustomFilter
argument_list|(
literal|"other"
argument_list|,
name|reqLab
argument_list|,
name|requested
argument_list|,
name|conflicts
argument_list|,
name|sessions
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|getSuggestions
parameter_list|(
specifier|final
name|List
argument_list|<
name|Chip
argument_list|>
name|chips
parameter_list|,
specifier|final
name|String
name|text
parameter_list|,
name|AsyncCallback
argument_list|<
name|Collection
argument_list|<
name|FilterBox
operator|.
name|Suggestion
argument_list|>
argument_list|>
name|callback
parameter_list|)
block|{
if|if
condition|(
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|callback
operator|.
name|onSuccess
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|FilterBox
operator|.
name|Suggestion
argument_list|>
name|suggestions
init|=
operator|new
name|ArrayList
argument_list|<
name|FilterBox
operator|.
name|Suggestion
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"conflicts"
operator|.
name|startsWith
argument_list|(
name|text
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|||
name|MESSAGES
operator|.
name|checkDisplayConflicts
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|text
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|Suggestion
argument_list|(
name|MESSAGES
operator|.
name|checkDisplayConflicts
argument_list|()
argument_list|,
operator|new
name|Chip
argument_list|(
literal|"flag"
argument_list|,
literal|"Conflicts"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"sessinons"
operator|.
name|startsWith
argument_list|(
name|text
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|||
name|MESSAGES
operator|.
name|checkSpanMultipleSessions
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|text
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|Suggestion
argument_list|(
name|MESSAGES
operator|.
name|checkSpanMultipleSessions
argument_list|()
argument_list|,
operator|new
name|Chip
argument_list|(
literal|"flag"
argument_list|,
literal|"All Sessions"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|callback
operator|.
name|onSuccess
argument_list|(
name|suggestions
argument_list|)
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
name|addFilter
argument_list|(
name|iOther
argument_list|)
expr_stmt|;
name|addFilter
argument_list|(
operator|new
name|FilterBox
operator|.
name|StaticSimpleFilter
argument_list|(
literal|"requested"
argument_list|)
argument_list|)
expr_stmt|;
name|addFilter
argument_list|(
operator|new
name|FilterBox
operator|.
name|StaticSimpleFilter
argument_list|(
literal|"flag"
argument_list|)
argument_list|)
expr_stmt|;
name|requested
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|boolean
name|removed
init|=
name|removeChip
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"requested"
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|requested
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|removed
condition|)
name|fireValueChangeEvent
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|addChip
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"requested"
argument_list|,
name|requested
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|conflicts
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|event
parameter_list|)
block|{
name|Chip
name|chip
init|=
operator|new
name|Chip
argument_list|(
literal|"flag"
argument_list|,
literal|"Conflicts"
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|getValue
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|hasChip
argument_list|(
name|chip
argument_list|)
condition|)
name|addChip
argument_list|(
name|chip
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|hasChip
argument_list|(
name|chip
argument_list|)
condition|)
name|removeChip
argument_list|(
name|chip
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|conflicts
operator|.
name|addMouseDownHandler
argument_list|(
operator|new
name|MouseDownHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseDown
parameter_list|(
name|MouseDownEvent
name|event
parameter_list|)
block|{
name|event
operator|.
name|getNativeEvent
argument_list|()
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
name|event
operator|.
name|getNativeEvent
argument_list|()
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|sessions
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|event
parameter_list|)
block|{
name|Chip
name|chip
init|=
operator|new
name|Chip
argument_list|(
literal|"flag"
argument_list|,
literal|"All Sessions"
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|getValue
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|hasChip
argument_list|(
name|chip
argument_list|)
condition|)
name|addChip
argument_list|(
name|chip
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|hasChip
argument_list|(
name|chip
argument_list|)
condition|)
name|removeChip
argument_list|(
name|chip
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|sessions
operator|.
name|addMouseDownHandler
argument_list|(
operator|new
name|MouseDownHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseDown
parameter_list|(
name|MouseDownEvent
name|event
parameter_list|)
block|{
name|event
operator|.
name|getNativeEvent
argument_list|()
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
name|event
operator|.
name|getNativeEvent
argument_list|()
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|AbsolutePanel
name|m
init|=
operator|new
name|AbsolutePanel
argument_list|()
decl_stmt|;
name|m
operator|.
name|setStyleName
argument_list|(
literal|"unitime-DateSelector"
argument_list|)
expr_stmt|;
specifier|final
name|SingleDateSelector
operator|.
name|SingleMonth
name|m1
init|=
operator|new
name|SingleDateSelector
operator|.
name|SingleMonth
argument_list|(
literal|"From"
argument_list|)
decl_stmt|;
name|m1
operator|.
name|setAllowDeselect
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|m
operator|.
name|add
argument_list|(
name|m1
argument_list|)
expr_stmt|;
specifier|final
name|SingleDateSelector
operator|.
name|SingleMonth
name|m2
init|=
operator|new
name|SingleDateSelector
operator|.
name|SingleMonth
argument_list|(
literal|"To"
argument_list|)
decl_stmt|;
name|m2
operator|.
name|setAllowDeselect
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|m
operator|.
name|add
argument_list|(
name|m2
argument_list|)
expr_stmt|;
name|addFilter
argument_list|(
operator|new
name|FilterBox
operator|.
name|CustomFilter
argument_list|(
literal|"date"
argument_list|,
name|m
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|getSuggestions
parameter_list|(
name|List
argument_list|<
name|Chip
argument_list|>
name|chips
parameter_list|,
name|String
name|text
parameter_list|,
name|AsyncCallback
argument_list|<
name|Collection
argument_list|<
name|Suggestion
argument_list|>
argument_list|>
name|callback
parameter_list|)
block|{
name|List
argument_list|<
name|FilterBox
operator|.
name|Suggestion
argument_list|>
name|suggestions
init|=
operator|new
name|ArrayList
argument_list|<
name|FilterBox
operator|.
name|Suggestion
argument_list|>
argument_list|()
decl_stmt|;
name|Chip
name|chFrom
init|=
literal|null
decl_stmt|,
name|chTo
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Chip
name|c
range|:
name|chips
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getCommand
argument_list|()
operator|.
name|equals
argument_list|(
literal|"from"
argument_list|)
condition|)
name|chFrom
operator|=
name|c
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getCommand
argument_list|()
operator|.
name|equals
argument_list|(
literal|"to"
argument_list|)
condition|)
name|chTo
operator|=
name|c
expr_stmt|;
block|}
try|try
block|{
name|Date
name|date
init|=
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"MM/dd"
argument_list|)
operator|.
name|parse
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|FilterBox
operator|.
name|Suggestion
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"from"
argument_list|,
name|sDateFormat
operator|.
name|format
argument_list|(
name|date
argument_list|)
argument_list|)
argument_list|,
name|chFrom
argument_list|)
argument_list|)
expr_stmt|;
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|FilterBox
operator|.
name|Suggestion
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"to"
argument_list|,
name|sDateFormat
operator|.
name|format
argument_list|(
name|date
argument_list|)
argument_list|)
argument_list|,
name|chTo
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
try|try
block|{
name|Date
name|date
init|=
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"dd.MM"
argument_list|)
operator|.
name|parse
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|FilterBox
operator|.
name|Suggestion
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"from"
argument_list|,
name|sDateFormat
operator|.
name|format
argument_list|(
name|date
argument_list|)
argument_list|)
argument_list|,
name|chFrom
argument_list|)
argument_list|)
expr_stmt|;
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|FilterBox
operator|.
name|Suggestion
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"to"
argument_list|,
name|sDateFormat
operator|.
name|format
argument_list|(
name|date
argument_list|)
argument_list|)
argument_list|,
name|chTo
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
try|try
block|{
name|Date
name|date
init|=
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"MM/dd/yy"
argument_list|)
operator|.
name|parse
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|FilterBox
operator|.
name|Suggestion
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"from"
argument_list|,
name|sDateFormat
operator|.
name|format
argument_list|(
name|date
argument_list|)
argument_list|)
argument_list|,
name|chFrom
argument_list|)
argument_list|)
expr_stmt|;
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|FilterBox
operator|.
name|Suggestion
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"to"
argument_list|,
name|sDateFormat
operator|.
name|format
argument_list|(
name|date
argument_list|)
argument_list|)
argument_list|,
name|chTo
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
try|try
block|{
name|Date
name|date
init|=
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"dd.MM.yy"
argument_list|)
operator|.
name|parse
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|FilterBox
operator|.
name|Suggestion
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"from"
argument_list|,
name|sDateFormat
operator|.
name|format
argument_list|(
name|date
argument_list|)
argument_list|)
argument_list|,
name|chFrom
argument_list|)
argument_list|)
expr_stmt|;
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|FilterBox
operator|.
name|Suggestion
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"to"
argument_list|,
name|sDateFormat
operator|.
name|format
argument_list|(
name|date
argument_list|)
argument_list|)
argument_list|,
name|chTo
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
try|try
block|{
name|Date
name|date
init|=
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"MMM dd"
argument_list|)
operator|.
name|parse
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|FilterBox
operator|.
name|Suggestion
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"from"
argument_list|,
name|sDateFormat
operator|.
name|format
argument_list|(
name|date
argument_list|)
argument_list|)
argument_list|,
name|chFrom
argument_list|)
argument_list|)
expr_stmt|;
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|FilterBox
operator|.
name|Suggestion
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"to"
argument_list|,
name|sDateFormat
operator|.
name|format
argument_list|(
name|date
argument_list|)
argument_list|)
argument_list|,
name|chTo
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
try|try
block|{
name|Date
name|date
init|=
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"MMM dd yy"
argument_list|)
operator|.
name|parse
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|FilterBox
operator|.
name|Suggestion
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"from"
argument_list|,
name|sDateFormat
operator|.
name|format
argument_list|(
name|date
argument_list|)
argument_list|)
argument_list|,
name|chFrom
argument_list|)
argument_list|)
expr_stmt|;
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|FilterBox
operator|.
name|Suggestion
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"to"
argument_list|,
name|sDateFormat
operator|.
name|format
argument_list|(
name|date
argument_list|)
argument_list|)
argument_list|,
name|chTo
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|callback
operator|.
name|onSuccess
argument_list|(
name|suggestions
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addFilter
argument_list|(
operator|new
name|FilterBox
operator|.
name|StaticSimpleFilter
argument_list|(
literal|"from"
argument_list|)
argument_list|)
expr_stmt|;
name|addFilter
argument_list|(
operator|new
name|FilterBox
operator|.
name|StaticSimpleFilter
argument_list|(
literal|"to"
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|addAcademicSessionChangeHandler
argument_list|(
operator|new
name|AcademicSessionChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onAcademicSessionChange
parameter_list|(
name|AcademicSessionChangeEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|isChanged
argument_list|()
operator|&&
name|event
operator|.
name|getNewAcademicSessionId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|RPC
operator|.
name|execute
argument_list|(
operator|new
name|RequestSessionDetails
argument_list|(
name|event
operator|.
name|getNewAcademicSessionId
argument_list|()
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|GwtRpcResponseList
argument_list|<
name|SessionMonth
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|GwtRpcResponseList
argument_list|<
name|SessionMonth
argument_list|>
name|result
parameter_list|)
block|{
name|m1
operator|.
name|setMonths
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|m2
operator|.
name|setMonths
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|m1
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Date
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Date
argument_list|>
name|event
parameter_list|)
block|{
name|Chip
name|ch
init|=
name|getChip
argument_list|(
literal|"from"
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|ch
operator|!=
literal|null
condition|)
name|removeChip
argument_list|(
name|ch
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|text
init|=
name|m1
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|ch
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ch
operator|.
name|getCommand
argument_list|()
operator|.
name|equals
argument_list|(
name|text
argument_list|)
condition|)
return|return;
name|removeChip
argument_list|(
name|ch
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|addChip
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"from"
argument_list|,
name|text
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|m2
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Date
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Date
argument_list|>
name|event
parameter_list|)
block|{
name|Chip
name|ch
init|=
name|getChip
argument_list|(
literal|"to"
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|ch
operator|!=
literal|null
condition|)
name|removeChip
argument_list|(
name|ch
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|text
init|=
name|m2
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|ch
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ch
operator|.
name|getCommand
argument_list|()
operator|.
name|equals
argument_list|(
name|text
argument_list|)
condition|)
return|return;
name|removeChip
argument_list|(
name|ch
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|addChip
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"to"
argument_list|,
name|text
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|addFilter
argument_list|(
operator|new
name|FilterBox
operator|.
name|StaticSimpleFilter
argument_list|(
literal|"day"
argument_list|,
literal|"Monday"
argument_list|,
literal|"Tuesday"
argument_list|,
literal|"Wednesday"
argument_list|,
literal|"Thursday"
argument_list|,
literal|"Friday"
argument_list|,
literal|"Saturday"
argument_list|,
literal|"Sunday"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|TimeSelector
name|st
init|=
operator|new
name|TimeSelector
argument_list|(
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|TimeSelector
name|et
init|=
operator|new
name|TimeSelector
argument_list|(
name|st
argument_list|)
decl_stmt|;
name|st
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TextArea"
argument_list|)
expr_stmt|;
name|st
operator|.
name|addStyleName
argument_list|(
literal|"unitime-TimeSelector"
argument_list|)
expr_stmt|;
name|et
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TextArea"
argument_list|)
expr_stmt|;
name|et
operator|.
name|addStyleName
argument_list|(
literal|"unitime-TimeSelector"
argument_list|)
expr_stmt|;
name|addFilter
argument_list|(
operator|new
name|FilterBox
operator|.
name|CustomFilter
argument_list|(
literal|"time"
argument_list|,
operator|new
name|Label
argument_list|(
name|MESSAGES
operator|.
name|propAfter
argument_list|()
argument_list|)
argument_list|,
name|st
argument_list|,
operator|new
name|Label
argument_list|(
literal|" "
operator|+
name|MESSAGES
operator|.
name|propBefore
argument_list|()
argument_list|)
argument_list|,
name|et
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|getSuggestions
parameter_list|(
name|List
argument_list|<
name|Chip
argument_list|>
name|chips
parameter_list|,
name|String
name|text
parameter_list|,
name|AsyncCallback
argument_list|<
name|Collection
argument_list|<
name|Suggestion
argument_list|>
argument_list|>
name|callback
parameter_list|)
block|{
name|List
argument_list|<
name|FilterBox
operator|.
name|Suggestion
argument_list|>
name|suggestions
init|=
operator|new
name|ArrayList
argument_list|<
name|FilterBox
operator|.
name|Suggestion
argument_list|>
argument_list|()
decl_stmt|;
name|Chip
name|chStart
init|=
literal|null
decl_stmt|,
name|chStop
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Chip
name|c
range|:
name|chips
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getCommand
argument_list|()
operator|.
name|equals
argument_list|(
literal|"after"
argument_list|)
condition|)
name|chStart
operator|=
name|c
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getCommand
argument_list|()
operator|.
name|equals
argument_list|(
literal|"before"
argument_list|)
condition|)
name|chStop
operator|=
name|c
expr_stmt|;
block|}
name|Integer
name|start
init|=
name|TimeSelector
operator|.
name|TimeUtils
operator|.
name|parseTime
argument_list|(
name|CONSTANTS
argument_list|,
name|text
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Integer
name|stop
init|=
name|TimeSelector
operator|.
name|TimeUtils
operator|.
name|parseTime
argument_list|(
name|CONSTANTS
argument_list|,
name|text
argument_list|,
name|chStart
operator|==
literal|null
condition|?
literal|null
else|:
name|TimeSelector
operator|.
name|TimeUtils
operator|.
name|parseTime
argument_list|(
name|CONSTANTS
argument_list|,
name|chStart
operator|.
name|getValue
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|chStart
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|start
operator|!=
literal|null
condition|)
block|{
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|FilterBox
operator|.
name|Suggestion
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"after"
argument_list|,
name|TimeUtils
operator|.
name|slot2time
argument_list|(
name|start
argument_list|)
argument_list|)
argument_list|,
name|chStart
argument_list|)
argument_list|)
expr_stmt|;
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|FilterBox
operator|.
name|Suggestion
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"after"
argument_list|,
name|TimeUtils
operator|.
name|slot2time
argument_list|(
name|start
operator|+
literal|3
argument_list|)
argument_list|)
argument_list|,
name|chStart
argument_list|)
argument_list|)
expr_stmt|;
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|FilterBox
operator|.
name|Suggestion
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"after"
argument_list|,
name|TimeUtils
operator|.
name|slot2time
argument_list|(
name|start
operator|+
literal|6
argument_list|)
argument_list|)
argument_list|,
name|chStart
argument_list|)
argument_list|)
expr_stmt|;
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|FilterBox
operator|.
name|Suggestion
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"after"
argument_list|,
name|TimeUtils
operator|.
name|slot2time
argument_list|(
name|start
operator|+
literal|9
argument_list|)
argument_list|)
argument_list|,
name|chStart
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stop
operator|!=
literal|null
condition|)
block|{
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|FilterBox
operator|.
name|Suggestion
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"before"
argument_list|,
name|TimeUtils
operator|.
name|slot2time
argument_list|(
name|stop
argument_list|)
argument_list|)
argument_list|,
name|chStop
argument_list|)
argument_list|)
expr_stmt|;
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|FilterBox
operator|.
name|Suggestion
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"before"
argument_list|,
name|TimeUtils
operator|.
name|slot2time
argument_list|(
name|stop
operator|+
literal|3
argument_list|)
argument_list|)
argument_list|,
name|chStop
argument_list|)
argument_list|)
expr_stmt|;
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|FilterBox
operator|.
name|Suggestion
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"before"
argument_list|,
name|TimeUtils
operator|.
name|slot2time
argument_list|(
name|stop
operator|+
literal|6
argument_list|)
argument_list|)
argument_list|,
name|chStop
argument_list|)
argument_list|)
expr_stmt|;
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|FilterBox
operator|.
name|Suggestion
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"before"
argument_list|,
name|TimeUtils
operator|.
name|slot2time
argument_list|(
name|stop
operator|+
literal|9
argument_list|)
argument_list|)
argument_list|,
name|chStop
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|stop
operator|!=
literal|null
condition|)
block|{
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|FilterBox
operator|.
name|Suggestion
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"before"
argument_list|,
name|TimeUtils
operator|.
name|slot2time
argument_list|(
name|stop
argument_list|)
argument_list|)
argument_list|,
name|chStop
argument_list|)
argument_list|)
expr_stmt|;
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|FilterBox
operator|.
name|Suggestion
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"before"
argument_list|,
name|TimeUtils
operator|.
name|slot2time
argument_list|(
name|stop
operator|+
literal|3
argument_list|)
argument_list|)
argument_list|,
name|chStop
argument_list|)
argument_list|)
expr_stmt|;
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|FilterBox
operator|.
name|Suggestion
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"before"
argument_list|,
name|TimeUtils
operator|.
name|slot2time
argument_list|(
name|stop
operator|+
literal|6
argument_list|)
argument_list|)
argument_list|,
name|chStop
argument_list|)
argument_list|)
expr_stmt|;
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|FilterBox
operator|.
name|Suggestion
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"before"
argument_list|,
name|TimeUtils
operator|.
name|slot2time
argument_list|(
name|stop
operator|+
literal|9
argument_list|)
argument_list|)
argument_list|,
name|chStop
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|start
operator|!=
literal|null
condition|)
block|{
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|FilterBox
operator|.
name|Suggestion
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"after"
argument_list|,
name|TimeUtils
operator|.
name|slot2time
argument_list|(
name|start
argument_list|)
argument_list|)
argument_list|,
name|chStart
argument_list|)
argument_list|)
expr_stmt|;
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|FilterBox
operator|.
name|Suggestion
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"after"
argument_list|,
name|TimeUtils
operator|.
name|slot2time
argument_list|(
name|start
operator|+
literal|3
argument_list|)
argument_list|)
argument_list|,
name|chStart
argument_list|)
argument_list|)
expr_stmt|;
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|FilterBox
operator|.
name|Suggestion
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"after"
argument_list|,
name|TimeUtils
operator|.
name|slot2time
argument_list|(
name|start
operator|+
literal|6
argument_list|)
argument_list|)
argument_list|,
name|chStart
argument_list|)
argument_list|)
expr_stmt|;
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|FilterBox
operator|.
name|Suggestion
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"after"
argument_list|,
name|TimeUtils
operator|.
name|slot2time
argument_list|(
name|start
operator|+
literal|9
argument_list|)
argument_list|)
argument_list|,
name|chStart
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|callback
operator|.
name|onSuccess
argument_list|(
name|suggestions
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|st
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Integer
argument_list|>
name|event
parameter_list|)
block|{
name|Chip
name|ch
init|=
name|getChip
argument_list|(
literal|"after"
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|ch
operator|!=
literal|null
condition|)
name|removeChip
argument_list|(
name|ch
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|text
init|=
name|TimeUtils
operator|.
name|slot2time
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ch
operator|.
name|getCommand
argument_list|()
operator|.
name|equals
argument_list|(
name|text
argument_list|)
condition|)
return|return;
name|removeChip
argument_list|(
name|ch
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|addChip
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"after"
argument_list|,
name|text
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|et
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Integer
argument_list|>
name|event
parameter_list|)
block|{
name|Chip
name|ch
init|=
name|getChip
argument_list|(
literal|"before"
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|ch
operator|!=
literal|null
condition|)
name|removeChip
argument_list|(
name|ch
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|text
init|=
name|TimeUtils
operator|.
name|slot2time
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ch
operator|.
name|getCommand
argument_list|()
operator|.
name|equals
argument_list|(
name|text
argument_list|)
condition|)
return|return;
name|removeChip
argument_list|(
name|ch
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|addChip
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"before"
argument_list|,
name|text
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|addFilter
argument_list|(
operator|new
name|FilterBox
operator|.
name|StaticSimpleFilter
argument_list|(
literal|"after"
argument_list|)
argument_list|)
expr_stmt|;
name|addFilter
argument_list|(
operator|new
name|FilterBox
operator|.
name|StaticSimpleFilter
argument_list|(
literal|"before"
argument_list|)
argument_list|)
expr_stmt|;
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|String
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isFilterPopupShowing
argument_list|()
condition|)
block|{
name|conflicts
operator|.
name|setValue
argument_list|(
name|hasChip
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"flag"
argument_list|,
literal|"Conflicts"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sessions
operator|.
name|setValue
argument_list|(
name|hasChip
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"flag"
argument_list|,
literal|"All Sessions"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Chip
name|req
init|=
name|getChip
argument_list|(
literal|"requested"
argument_list|)
decl_stmt|;
if|if
condition|(
name|req
operator|==
literal|null
condition|)
name|requested
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
else|else
name|requested
operator|.
name|setText
argument_list|(
name|req
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iSponsors
operator|.
name|getItemCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|value
init|=
name|iSponsors
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|iSponsors
operator|.
name|setItemSelected
argument_list|(
name|i
argument_list|,
name|hasChip
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"sponsor"
argument_list|,
name|value
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Chip
name|chFrom
init|=
name|getChip
argument_list|(
literal|"from"
argument_list|)
decl_stmt|;
if|if
condition|(
name|chFrom
operator|!=
literal|null
condition|)
name|m1
operator|.
name|setDate
argument_list|(
name|sDateFormat
operator|.
name|parse
argument_list|(
name|chFrom
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|m1
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
name|Chip
name|chTo
init|=
name|getChip
argument_list|(
literal|"to"
argument_list|)
decl_stmt|;
if|if
condition|(
name|chTo
operator|!=
literal|null
condition|)
name|m2
operator|.
name|setDate
argument_list|(
name|sDateFormat
operator|.
name|parse
argument_list|(
name|chTo
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|m2
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
name|Chip
name|chStart
init|=
name|getChip
argument_list|(
literal|"after"
argument_list|)
decl_stmt|;
if|if
condition|(
name|chStart
operator|!=
literal|null
condition|)
name|st
operator|.
name|setValue
argument_list|(
name|TimeSelector
operator|.
name|TimeUtils
operator|.
name|parseTime
argument_list|(
name|CONSTANTS
argument_list|,
name|chStart
operator|.
name|getValue
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|st
operator|.
name|setValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Chip
name|chStop
init|=
name|getChip
argument_list|(
literal|"before"
argument_list|)
decl_stmt|;
if|if
condition|(
name|chStop
operator|!=
literal|null
condition|)
name|et
operator|.
name|setValue
argument_list|(
name|TimeSelector
operator|.
name|TimeUtils
operator|.
name|parseTime
argument_list|(
name|CONSTANTS
argument_list|,
name|chStop
operator|.
name|getValue
argument_list|()
argument_list|,
name|st
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|et
operator|.
name|setValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getAcademicSessionId
argument_list|()
operator|!=
literal|null
condition|)
name|init
argument_list|(
literal|false
argument_list|,
name|getAcademicSessionId
argument_list|()
argument_list|,
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
if|if
condition|(
name|isFilterPopupShowing
argument_list|()
condition|)
name|showFilterPopup
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|setAriaLabel
argument_list|(
name|ARIA
operator|.
name|eventFilter
argument_list|(
name|toAriaString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addFocusHandler
argument_list|(
operator|new
name|FocusHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFocus
parameter_list|(
name|FocusEvent
name|event
parameter_list|)
block|{
name|setAriaLabel
argument_list|(
name|ARIA
operator|.
name|eventFilter
argument_list|(
name|toAriaString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setOtherVisible
parameter_list|(
name|boolean
name|visible
parameter_list|)
block|{
name|iOther
operator|.
name|setVisible
argument_list|(
name|visible
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|populateFilter
parameter_list|(
name|FilterBox
operator|.
name|Filter
name|filter
parameter_list|,
name|List
argument_list|<
name|FilterRpcResponse
operator|.
name|Entity
argument_list|>
name|entities
parameter_list|)
block|{
if|if
condition|(
literal|"sponsor"
operator|.
name|equals
argument_list|(
name|filter
operator|.
name|getCommand
argument_list|()
argument_list|)
condition|)
block|{
name|iSponsors
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|entities
operator|!=
literal|null
condition|)
for|for
control|(
name|FilterRpcResponse
operator|.
name|Entity
name|entity
range|:
name|entities
control|)
name|iSponsors
operator|.
name|addItem
argument_list|(
name|entity
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|entity
operator|.
name|getCount
argument_list|()
operator|<=
literal|0
condition|?
literal|""
else|:
literal|" ("
operator|+
name|entity
operator|.
name|getCount
argument_list|()
operator|+
literal|")"
operator|)
argument_list|,
name|entity
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iSponsors
operator|.
name|getItemCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|value
init|=
name|iSponsors
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|iSponsors
operator|.
name|setItemSelected
argument_list|(
name|i
argument_list|,
name|hasChip
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"sponsor"
argument_list|,
name|value
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
else|else
return|return
name|super
operator|.
name|populateFilter
argument_list|(
name|filter
argument_list|,
name|entities
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|addSuggestion
parameter_list|(
name|List
argument_list|<
name|FilterBox
operator|.
name|Suggestion
argument_list|>
name|suggestions
parameter_list|,
name|FilterRpcResponse
operator|.
name|Entity
name|entity
parameter_list|)
block|{
if|if
condition|(
literal|"Requested By"
operator|.
name|equals
argument_list|(
name|entity
operator|.
name|getProperty
argument_list|(
literal|"hint"
argument_list|,
literal|null
argument_list|)
argument_list|)
condition|)
block|{
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|FilterBox
operator|.
name|Suggestion
argument_list|(
name|entity
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|FilterBox
operator|.
name|Chip
argument_list|(
literal|"requested"
argument_list|,
name|entity
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
argument_list|,
name|getChip
argument_list|(
literal|"requested"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|addSuggestion
argument_list|(
name|suggestions
argument_list|,
name|entity
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|EventFilterRpcRequest
name|createRpcRequest
parameter_list|()
block|{
return|return
operator|new
name|EventFilterRpcRequest
argument_list|()
return|;
block|}
block|}
end_class

end_unit

