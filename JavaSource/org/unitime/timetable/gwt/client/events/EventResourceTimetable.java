begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|events
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|Lookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|page
operator|.
name|UniTimePageLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|LoadingWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|SimpleForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeHeaderPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|HasCellAlignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|HasColSpan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|EventService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|EventServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|IdValueInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|MeetingInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|MultiMeetingInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|ResourceInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|ResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|WeekInterface
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|JavaScriptObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Unit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|SelectionEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|SelectionHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|DateTimeFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Button
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasVerticalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HorizontalPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ListBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|SimplePanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|SuggestBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|SuggestOracle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|SuggestOracle
operator|.
name|Suggestion
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|EventResourceTimetable
extends|extends
name|Composite
block|{
specifier|private
name|SimpleForm
name|iPanel
decl_stmt|,
name|iFilter
decl_stmt|;
specifier|private
name|SimplePanel
name|iGridPanel
decl_stmt|,
name|iTablePanel
decl_stmt|;
specifier|private
name|UniTimeHeaderPanel
name|iHeader
decl_stmt|,
name|iTableHeader
decl_stmt|,
name|iFooter
decl_stmt|,
name|iFilterHeader
decl_stmt|;
specifier|private
name|ListBox
name|iWeek
decl_stmt|;
specifier|private
name|TimeGrid
name|iTimeGrid
decl_stmt|;
specifier|private
name|UniTimeTable
argument_list|<
name|EventInterface
argument_list|>
name|iTable
decl_stmt|;
specifier|private
name|ResourceInterface
name|iResource
decl_stmt|;
specifier|private
name|List
argument_list|<
name|EventInterface
argument_list|>
name|iData
decl_stmt|;
specifier|private
name|Button
name|iPrevious
decl_stmt|,
name|iNext
decl_stmt|;
specifier|private
name|HorizontalPanel
name|iWeekPanel
decl_stmt|;
specifier|private
name|ListBox
name|iSessions
decl_stmt|;
specifier|private
name|ListBox
name|iResourceTypes
decl_stmt|;
specifier|private
name|SuggestBox
name|iResources
decl_stmt|;
specifier|private
name|boolean
name|iCanLookupPeople
init|=
literal|false
decl_stmt|;
specifier|private
name|int
name|iResourcesRow
init|=
operator|-
literal|1
decl_stmt|,
name|iWeekRow
init|=
operator|-
literal|1
decl_stmt|,
name|iLastRow
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
specifier|static
name|EventResourceTimetable
name|sInstance
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|EventServiceAsync
name|iEventService
init|=
name|GWT
operator|.
name|create
argument_list|(
name|EventService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|EventResourceTimetable
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|sInstance
operator|=
name|this
expr_stmt|;
name|iFilter
operator|=
operator|new
name|SimpleForm
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|iFilter
operator|.
name|removeStyleName
argument_list|(
literal|"unitime-NotPrintableBottomLine"
argument_list|)
expr_stmt|;
name|iFilter
operator|.
name|getColumnFormatter
argument_list|()
operator|.
name|setWidth
argument_list|(
literal|0
argument_list|,
literal|"120px"
argument_list|)
expr_stmt|;
name|iFilterHeader
operator|=
operator|new
name|UniTimeHeaderPanel
argument_list|(
literal|"Filter"
argument_list|)
expr_stmt|;
name|iFilterHeader
operator|.
name|addButton
argument_list|(
literal|"search"
argument_list|,
literal|"<u>S</u>earch"
argument_list|,
literal|'s'
argument_list|,
literal|75
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|resourceTypeChanged
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Lookup
operator|.
name|getInstance
argument_list|()
operator|.
name|setOptions
argument_list|(
literal|"mustHaveExternalId"
argument_list|)
expr_stmt|;
name|Lookup
operator|.
name|getInstance
argument_list|()
operator|.
name|setCallback
argument_list|(
name|createLookupCallback
argument_list|()
argument_list|)
expr_stmt|;
name|iFilterHeader
operator|.
name|addButton
argument_list|(
literal|"lookup"
argument_list|,
literal|"<u>L</u>ookup"
argument_list|,
literal|'p'
argument_list|,
literal|75
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|Lookup
operator|.
name|getInstance
argument_list|()
operator|.
name|center
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iFilterHeader
operator|.
name|setEnabled
argument_list|(
literal|"lookup"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iFilter
operator|.
name|addHeaderRow
argument_list|(
name|iFilterHeader
argument_list|)
expr_stmt|;
name|iSessions
operator|=
operator|new
name|ListBox
argument_list|()
expr_stmt|;
name|iFilter
operator|.
name|addRow
argument_list|(
literal|"Academic Session:"
argument_list|,
name|iSessions
argument_list|)
expr_stmt|;
name|iEventService
operator|.
name|findSessions
argument_list|(
name|Window
operator|.
name|Location
operator|.
name|getParameter
argument_list|(
literal|"term"
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|List
argument_list|<
name|IdValueInterface
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iFilterHeader
operator|.
name|setErrorMessage
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|checkAccess
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|List
argument_list|<
name|IdValueInterface
argument_list|>
name|result
parameter_list|)
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|result
operator|.
name|size
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|IdValueInterface
name|idVal
init|=
name|result
operator|.
name|get
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|iSessions
operator|.
name|addItem
argument_list|(
name|idVal
operator|.
name|getValue
argument_list|()
argument_list|,
name|idVal
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|idVal
operator|.
name|isSelected
argument_list|()
condition|)
name|iSessions
operator|.
name|setSelectedIndex
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iSessions
operator|.
name|getItemCount
argument_list|()
operator|>
literal|0
condition|)
name|iFilter
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSessions
operator|.
name|getSelectedIndex
argument_list|()
operator|>=
literal|0
condition|)
name|sessionChanged
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iSessions
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|sessionChanged
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iResourceTypes
operator|=
operator|new
name|ListBox
argument_list|()
expr_stmt|;
for|for
control|(
name|ResourceType
name|resource
range|:
name|ResourceType
operator|.
name|values
argument_list|()
control|)
block|{
name|iResourceTypes
operator|.
name|addItem
argument_list|(
name|resource
operator|.
name|getPageTitle
argument_list|()
argument_list|,
name|resource
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iResourceTypes
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|iResources
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|UniTimePageLabel
operator|.
name|getInstance
argument_list|()
operator|.
name|setPageName
argument_list|(
name|getResourceType
argument_list|()
operator|.
name|getPageTitle
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|iPanel
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
name|iPanel
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|i
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|resourceTypeChanged
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iFilter
operator|.
name|addRow
argument_list|(
literal|"Resource Type:"
argument_list|,
name|iResourceTypes
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
name|iFilter
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iFilter
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iResources
operator|=
operator|new
name|SuggestBox
argument_list|(
operator|new
name|SuggestOracle
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|requestSuggestions
parameter_list|(
specifier|final
name|Request
name|request
parameter_list|,
specifier|final
name|Callback
name|callback
parameter_list|)
block|{
if|if
condition|(
name|iSessions
operator|.
name|getSelectedIndex
argument_list|()
operator|>=
literal|0
operator|&&
name|iResourceTypes
operator|.
name|getSelectedIndex
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|iEventService
operator|.
name|findResources
argument_list|(
name|iSessions
operator|.
name|getValue
argument_list|(
name|iSessions
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
argument_list|,
name|ResourceType
operator|.
name|valueOf
argument_list|(
name|iResourceTypes
operator|.
name|getValue
argument_list|(
name|iResourceTypes
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|request
operator|.
name|getQuery
argument_list|()
argument_list|,
name|request
operator|.
name|getLimit
argument_list|()
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|List
argument_list|<
name|ResourceInterface
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
specifier|final
name|Throwable
name|caught
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Suggestion
argument_list|>
name|suggestions
init|=
operator|new
name|ArrayList
argument_list|<
name|Suggestion
argument_list|>
argument_list|()
decl_stmt|;
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|Suggestion
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getDisplayString
parameter_list|()
block|{
return|return
literal|"<font color='red'>"
operator|+
name|caught
operator|.
name|getMessage
argument_list|()
operator|+
literal|"</font>"
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getReplacementString
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|callback
operator|.
name|onSuggestionsReady
argument_list|(
name|request
argument_list|,
operator|new
name|Response
argument_list|(
name|suggestions
argument_list|)
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|checkAccess
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|List
argument_list|<
name|ResourceInterface
argument_list|>
name|result
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Suggestion
argument_list|>
name|suggestions
init|=
operator|new
name|ArrayList
argument_list|<
name|Suggestion
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ResourceInterface
name|resource
range|:
name|result
control|)
block|{
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|ResourceSuggestion
argument_list|(
name|resource
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|callback
operator|.
name|onSuggestionsReady
argument_list|(
name|request
argument_list|,
operator|new
name|Response
argument_list|(
name|suggestions
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isDisplayStringHTML
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iResourcesRow
operator|=
name|iFilter
operator|.
name|addRow
argument_list|(
literal|"Resource:"
argument_list|,
name|iResources
argument_list|)
expr_stmt|;
name|iResources
operator|.
name|addSelectionHandler
argument_list|(
operator|new
name|SelectionHandler
argument_list|<
name|Suggestion
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onSelection
parameter_list|(
name|SelectionEvent
argument_list|<
name|Suggestion
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getSelectedItem
argument_list|()
operator|instanceof
name|ResourceSuggestion
condition|)
block|{
name|resourceChanged
argument_list|(
operator|(
operator|(
name|ResourceSuggestion
operator|)
name|event
operator|.
name|getSelectedItem
argument_list|()
operator|)
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|iResourceTypes
operator|.
name|setSelectedIndex
argument_list|(
name|ResourceType
operator|.
name|PERSON
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|typeString
init|=
operator|(
name|type
operator|!=
literal|null
condition|?
name|type
else|:
name|Window
operator|.
name|Location
operator|.
name|getParameter
argument_list|(
literal|"type"
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|typeString
operator|!=
literal|null
condition|)
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|iResourceTypes
operator|.
name|getItemCount
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|iResourceTypes
operator|.
name|getValue
argument_list|(
name|idx
argument_list|)
operator|.
name|equals
argument_list|(
name|typeString
operator|.
name|toUpperCase
argument_list|()
argument_list|)
condition|)
block|{
name|iResourceTypes
operator|.
name|setSelectedIndex
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|name
init|=
name|Window
operator|.
name|Location
operator|.
name|getParameter
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|iResources
operator|.
name|setText
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|UniTimePageLabel
operator|.
name|getInstance
argument_list|()
operator|.
name|setPageName
argument_list|(
name|getResourceType
argument_list|()
operator|.
name|getPageTitle
argument_list|()
argument_list|)
expr_stmt|;
name|resourceTypeChanged
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iPanel
operator|=
operator|new
name|SimpleForm
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|removeStyleName
argument_list|(
literal|"unitime-NotPrintableBottomLine"
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|addRow
argument_list|(
name|iFilter
argument_list|)
expr_stmt|;
name|iHeader
operator|=
operator|new
name|UniTimeHeaderPanel
argument_list|()
expr_stmt|;
name|iPanel
operator|.
name|addHeaderRow
argument_list|(
name|iHeader
argument_list|)
expr_stmt|;
name|iWeekPanel
operator|=
operator|new
name|HorizontalPanel
argument_list|()
expr_stmt|;
name|iWeekPanel
operator|.
name|setSpacing
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|iPrevious
operator|=
operator|new
name|Button
argument_list|(
literal|"&larr;"
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|iWeek
operator|.
name|getSelectedIndex
argument_list|()
operator|>
literal|0
condition|)
block|{
name|iWeek
operator|.
name|setSelectedIndex
argument_list|(
name|iWeek
operator|.
name|getSelectedIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|weekChanged
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|iPrevious
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iPrevious
operator|.
name|setTitle
argument_list|(
literal|"Previous week (Alt+p)"
argument_list|)
expr_stmt|;
name|iPrevious
operator|.
name|setAccessKey
argument_list|(
literal|'p'
argument_list|)
expr_stmt|;
name|iWeekPanel
operator|.
name|add
argument_list|(
name|iPrevious
argument_list|)
expr_stmt|;
name|iWeekPanel
operator|.
name|setCellVerticalAlignment
argument_list|(
name|iPrevious
argument_list|,
name|HasVerticalAlignment
operator|.
name|ALIGN_MIDDLE
argument_list|)
expr_stmt|;
name|iWeek
operator|=
operator|new
name|ListBox
argument_list|()
expr_stmt|;
name|iWeekPanel
operator|.
name|add
argument_list|(
name|iWeek
argument_list|)
expr_stmt|;
name|iNext
operator|=
operator|new
name|Button
argument_list|(
literal|"&rarr;"
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|iWeek
operator|.
name|getSelectedIndex
argument_list|()
operator|+
literal|1
operator|<
name|iWeek
operator|.
name|getItemCount
argument_list|()
condition|)
block|{
name|iWeek
operator|.
name|setSelectedIndex
argument_list|(
name|iWeek
operator|.
name|getSelectedIndex
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|weekChanged
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|iNext
operator|.
name|setTitle
argument_list|(
literal|"Next week (Alt+n)"
argument_list|)
expr_stmt|;
name|iNext
operator|.
name|setAccessKey
argument_list|(
literal|'n'
argument_list|)
expr_stmt|;
name|iWeekPanel
operator|.
name|add
argument_list|(
name|iNext
argument_list|)
expr_stmt|;
name|iWeekPanel
operator|.
name|setCellVerticalAlignment
argument_list|(
name|iNext
argument_list|,
name|HasVerticalAlignment
operator|.
name|ALIGN_MIDDLE
argument_list|)
expr_stmt|;
name|iWeekRow
operator|=
name|iPanel
operator|.
name|addRow
argument_list|(
name|iWeekPanel
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setHorizontalAlignment
argument_list|(
name|iWeekRow
argument_list|,
literal|0
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
name|iGridPanel
operator|=
operator|new
name|SimplePanel
argument_list|()
expr_stmt|;
name|iPanel
operator|.
name|addRow
argument_list|(
name|iGridPanel
argument_list|)
expr_stmt|;
name|iTableHeader
operator|=
operator|new
name|UniTimeHeaderPanel
argument_list|()
expr_stmt|;
name|iPanel
operator|.
name|addHeaderRow
argument_list|(
name|iTableHeader
argument_list|)
expr_stmt|;
name|iTablePanel
operator|=
operator|new
name|SimplePanel
argument_list|()
expr_stmt|;
name|iPanel
operator|.
name|addRow
argument_list|(
name|iTablePanel
argument_list|)
expr_stmt|;
name|iFooter
operator|=
name|iHeader
operator|.
name|clonePanel
argument_list|()
expr_stmt|;
name|iLastRow
operator|=
name|iPanel
operator|.
name|addBottomRow
argument_list|(
name|iFooter
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|iPanel
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|iPanel
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
name|iPanel
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|i
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"print"
argument_list|,
literal|"<u>P</u>rint"
argument_list|,
literal|'p'
argument_list|,
literal|75
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|clickEvent
parameter_list|)
block|{
name|UniTimeTable
argument_list|<
name|EventInterface
argument_list|>
name|table
init|=
name|createEventTable
argument_list|()
decl_stmt|;
name|populateEventTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
comment|// table.getElement().getStyle().setProperty("page-break-before", "always");
name|TimeGrid
name|tg
init|=
name|iTimeGrid
operator|.
name|getPrintWidget
argument_list|()
decl_stmt|;
name|WeekInterface
name|week
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|iWeek
operator|.
name|getSelectedIndex
argument_list|()
operator|==
literal|0
condition|)
block|{
for|for
control|(
name|EventInterface
name|event
range|:
name|iData
control|)
name|tg
operator|.
name|addPrintEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|iWeek
operator|.
name|getSelectedIndex
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|dayOfYear
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|iWeek
operator|.
name|getValue
argument_list|(
name|iWeek
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|WeekInterface
name|w
range|:
name|iResource
operator|.
name|getWeeks
argument_list|()
control|)
if|if
condition|(
name|w
operator|.
name|getDayOfYear
argument_list|()
operator|==
name|dayOfYear
condition|)
block|{
name|week
operator|=
name|w
expr_stmt|;
break|break;
block|}
for|for
control|(
name|EventInterface
name|event
range|:
name|iData
control|)
block|{
name|List
argument_list|<
name|MeetingInterface
argument_list|>
name|meetings
init|=
operator|new
name|ArrayList
argument_list|<
name|MeetingInterface
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|MeetingInterface
name|meeting
range|:
name|event
operator|.
name|getMeetings
argument_list|()
control|)
if|if
condition|(
name|meeting
operator|.
name|getDayOfYear
argument_list|()
operator|>=
name|dayOfYear
operator|&&
name|meeting
operator|.
name|getDayOfYear
argument_list|()
operator|<
name|dayOfYear
operator|+
literal|7
condition|)
name|meetings
operator|.
name|add
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|meetings
operator|.
name|isEmpty
argument_list|()
condition|)
name|tg
operator|.
name|addPrintEvent
argument_list|(
name|event
argument_list|,
name|meetings
argument_list|)
expr_stmt|;
block|}
block|}
name|tg
operator|.
name|labelDays
argument_list|(
name|week
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|print
argument_list|(
name|iHeader
operator|.
name|getHeaderTitle
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
name|tg
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"export"
argument_list|,
literal|"E<u>x</u>port"
argument_list|,
literal|'x'
argument_list|,
literal|75
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|clickEvent
parameter_list|)
block|{
name|ToolBox
operator|.
name|open
argument_list|(
name|iTimeGrid
operator|.
name|getCalendarUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setTitle
argument_list|(
literal|"Export timetable in iCalendar format."
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"print"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"export"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iEventService
operator|.
name|canLookupPeople
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{
name|iCanLookupPeople
operator|=
operator|(
name|result
operator|==
literal|null
condition|?
literal|false
else|:
name|result
operator|)
expr_stmt|;
name|iFilterHeader
operator|.
name|setEnabled
argument_list|(
literal|"lookup"
argument_list|,
name|iCanLookupPeople
operator|&&
name|getResourceType
argument_list|()
operator|==
name|ResourceType
operator|.
name|PERSON
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|sessionChanged
parameter_list|()
block|{
name|resourceTypeChanged
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ResourceType
name|getResourceType
parameter_list|()
block|{
if|if
condition|(
name|iResourceTypes
operator|.
name|getSelectedIndex
argument_list|()
operator|<
literal|0
condition|)
return|return
literal|null
return|;
return|return
name|ResourceType
operator|.
name|values
argument_list|()
index|[
name|iResourceTypes
operator|.
name|getSelectedIndex
argument_list|()
index|]
return|;
block|}
specifier|public
name|String
name|getSessionName
parameter_list|()
block|{
if|if
condition|(
name|iSessions
operator|.
name|getSelectedIndex
argument_list|()
operator|<
literal|0
condition|)
return|return
literal|null
return|;
return|return
name|iSessions
operator|.
name|getValue
argument_list|(
name|iSessions
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|getResourceName
parameter_list|()
block|{
if|if
condition|(
name|getResourceType
argument_list|()
operator|==
name|ResourceType
operator|.
name|PERSON
operator|&&
operator|!
name|iCanLookupPeople
condition|)
return|return
literal|""
return|;
return|return
operator|(
name|iResources
operator|.
name|getText
argument_list|()
operator|==
literal|null
operator|||
name|iResources
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|iResources
operator|.
name|getText
argument_list|()
operator|)
return|;
block|}
specifier|private
name|void
name|resourceTypeChanged
parameter_list|(
name|boolean
name|allowEmptyResource
parameter_list|)
block|{
name|ResourceType
name|type
init|=
name|getResourceType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|iFilter
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iResourcesRow
argument_list|,
name|type
operator|!=
name|ResourceType
operator|.
name|PERSON
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Label
operator|)
name|iFilter
operator|.
name|getWidget
argument_list|(
name|iResourcesRow
argument_list|,
literal|0
argument_list|)
operator|)
operator|.
name|setText
argument_list|(
name|type
operator|.
name|getLabel
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
operator|+
name|type
operator|.
name|getLabel
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|":"
argument_list|)
expr_stmt|;
name|iFilterHeader
operator|.
name|setEnabled
argument_list|(
literal|"lookup"
argument_list|,
name|iCanLookupPeople
operator|&&
name|getResourceType
argument_list|()
operator|==
name|ResourceType
operator|.
name|PERSON
argument_list|)
expr_stmt|;
if|if
condition|(
name|getSessionName
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
operator|(
name|type
operator|==
name|ResourceType
operator|.
name|PERSON
operator|&&
name|allowEmptyResource
operator|)
operator|||
name|getResourceName
argument_list|()
operator|!=
literal|null
operator|)
condition|)
block|{
name|iFilterHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
literal|"Loading "
operator|+
name|type
operator|.
name|getLabel
argument_list|()
operator|+
operator|(
name|type
operator|!=
name|ResourceType
operator|.
name|PERSON
condition|?
literal|" "
operator|+
name|getResourceName
argument_list|()
else|:
literal|""
operator|)
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|iEventService
operator|.
name|findResource
argument_list|(
name|getSessionName
argument_list|()
argument_list|,
name|type
argument_list|,
name|getResourceName
argument_list|()
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|ResourceInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|iFilterHeader
operator|.
name|setErrorMessage
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|iPanel
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
name|iPanel
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|i
argument_list|,
name|i
operator|==
name|iLastRow
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"print"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"export"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|ResourceInterface
name|result
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|resourceChanged
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|resourceChanged
parameter_list|(
name|ResourceInterface
name|resource
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
literal|"Loading "
operator|+
name|resource
operator|.
name|getName
argument_list|()
operator|+
literal|" timetable for "
operator|+
name|resource
operator|.
name|getSessionName
argument_list|()
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|iResource
operator|=
name|resource
expr_stmt|;
name|iFilterHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
name|iEventService
operator|.
name|findEvents
argument_list|(
name|iResource
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|List
argument_list|<
name|EventInterface
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|List
argument_list|<
name|EventInterface
argument_list|>
name|result
parameter_list|)
block|{
name|iData
operator|=
name|result
expr_stmt|;
if|if
condition|(
name|iResource
operator|.
name|getType
argument_list|()
operator|!=
name|ResourceType
operator|.
name|PERSON
condition|)
name|changeUrl
argument_list|(
name|Window
operator|.
name|Location
operator|.
name|getParameter
argument_list|(
literal|"page"
argument_list|)
argument_list|,
name|iResource
operator|.
name|getSessionAbbv
argument_list|()
argument_list|,
name|iResource
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|iResource
operator|.
name|getAbbreviation
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
if|if
condition|(
name|iData
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iFilterHeader
operator|.
name|setErrorMessage
argument_list|(
operator|(
name|iResource
operator|.
name|getType
argument_list|()
operator|==
name|ResourceType
operator|.
name|PERSON
condition|?
literal|""
else|:
name|iResource
operator|.
name|getType
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
operator|+
name|iResource
operator|.
name|getType
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|" "
operator|)
operator|+
name|iResource
operator|.
name|getName
argument_list|()
operator|+
literal|" has no events in "
operator|+
name|iResource
operator|.
name|getSessionName
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|iPanel
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
name|iPanel
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|i
argument_list|,
name|i
operator|==
name|iLastRow
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"print"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"export"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|iData
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setHeaderTitle
argument_list|(
name|iResource
operator|.
name|getName
argument_list|()
operator|+
literal|" timetable for "
operator|+
name|iResource
operator|.
name|getSessionName
argument_list|()
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setMessage
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|int
name|nrDays
init|=
literal|4
decl_stmt|;
name|int
name|firstSlot
init|=
operator|-
literal|1
decl_stmt|,
name|lastSlot
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|EventInterface
name|event
range|:
name|iData
control|)
block|{
for|for
control|(
name|MeetingInterface
name|meeting
range|:
name|event
operator|.
name|getMeetings
argument_list|()
control|)
block|{
if|if
condition|(
name|firstSlot
operator|<
literal|0
operator|||
name|firstSlot
operator|>
name|meeting
operator|.
name|getStartSlot
argument_list|()
condition|)
name|firstSlot
operator|=
name|meeting
operator|.
name|getStartSlot
argument_list|()
expr_stmt|;
if|if
condition|(
name|lastSlot
operator|<
literal|0
operator|||
name|lastSlot
operator|<
name|meeting
operator|.
name|getEndSlot
argument_list|()
condition|)
name|lastSlot
operator|=
name|meeting
operator|.
name|getEndSlot
argument_list|()
expr_stmt|;
name|nrDays
operator|=
name|Math
operator|.
name|max
argument_list|(
name|nrDays
argument_list|,
name|meeting
operator|.
name|getDayOfWeek
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|nrDays
operator|++
expr_stmt|;
name|int
name|firstHour
init|=
name|firstSlot
operator|/
literal|12
decl_stmt|;
name|int
name|lastHour
init|=
literal|1
operator|+
operator|(
name|lastSlot
operator|-
literal|1
operator|)
operator|/
literal|12
decl_stmt|;
name|HashMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|colors
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|iTimeGrid
operator|=
operator|new
name|TimeGrid
argument_list|(
name|colors
argument_list|,
name|nrDays
argument_list|,
operator|(
name|int
operator|)
operator|(
literal|0.9
operator|*
name|Window
operator|.
name|getClientWidth
argument_list|()
operator|/
name|nrDays
operator|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
operator|(
name|firstHour
operator|<
literal|7
condition|?
name|firstHour
else|:
literal|7
operator|)
argument_list|,
operator|(
name|lastHour
operator|>
literal|18
condition|?
name|lastHour
else|:
literal|18
operator|)
argument_list|)
expr_stmt|;
name|String
name|eventIds
init|=
literal|""
decl_stmt|;
name|iTimeGrid
operator|.
name|setOneWeek
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iTimeGrid
operator|.
name|setRoomResource
argument_list|(
name|iResource
operator|.
name|getType
argument_list|()
operator|==
name|ResourceType
operator|.
name|ROOM
argument_list|)
expr_stmt|;
for|for
control|(
name|EventInterface
name|event
range|:
name|iData
control|)
block|{
name|iTimeGrid
operator|.
name|addEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|eventIds
operator|.
name|isEmpty
argument_list|()
condition|)
name|eventIds
operator|+=
literal|","
expr_stmt|;
name|eventIds
operator|+=
name|event
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|iResource
operator|.
name|hasCalendar
argument_list|()
condition|)
block|{
name|iTimeGrid
operator|.
name|setCalendarUrl
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"calendar?q="
operator|+
name|iResource
operator|.
name|getCalendar
argument_list|()
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"export"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"export"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|iGridPanel
operator|.
name|setWidget
argument_list|(
name|iTimeGrid
argument_list|)
expr_stmt|;
name|iTableHeader
operator|.
name|setHeaderTitle
argument_list|(
name|iResource
operator|.
name|getName
argument_list|()
operator|+
literal|" events for "
operator|+
name|iResource
operator|.
name|getSessionName
argument_list|()
argument_list|)
expr_stmt|;
name|iTable
operator|=
name|createEventTable
argument_list|()
expr_stmt|;
name|populateEventTable
argument_list|(
name|iTable
argument_list|)
expr_stmt|;
name|iTablePanel
operator|.
name|setWidget
argument_list|(
name|iTable
argument_list|)
expr_stmt|;
name|iWeek
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iWeek
operator|.
name|addItem
argument_list|(
literal|"All weeks"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|iWeek
operator|.
name|setSelectedIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|iResource
operator|.
name|hasWeeks
argument_list|()
condition|)
block|{
for|for
control|(
name|WeekInterface
name|week
range|:
name|iResource
operator|.
name|getWeeks
argument_list|()
control|)
block|{
name|boolean
name|hasEvents
init|=
literal|false
decl_stmt|;
name|events
label|:
for|for
control|(
name|EventInterface
name|event
range|:
name|iData
control|)
block|{
for|for
control|(
name|MeetingInterface
name|meeting
range|:
name|event
operator|.
name|getMeetings
argument_list|()
control|)
block|{
if|if
condition|(
name|meeting
operator|.
name|getDayOfYear
argument_list|()
operator|>=
name|week
operator|.
name|getDayOfYear
argument_list|()
operator|&&
name|meeting
operator|.
name|getDayOfYear
argument_list|()
operator|<
name|week
operator|.
name|getDayOfYear
argument_list|()
operator|+
literal|7
condition|)
block|{
name|hasEvents
operator|=
literal|true
expr_stmt|;
break|break
name|events
break|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|hasEvents
condition|)
continue|continue;
name|iWeek
operator|.
name|addItem
argument_list|(
literal|"Week "
operator|+
name|week
operator|.
name|getName
argument_list|()
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|week
operator|.
name|getDayOfYear
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iWeek
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|changeEvent
parameter_list|)
block|{
name|weekChanged
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|String
name|start
init|=
name|Window
operator|.
name|Location
operator|.
name|getParameter
argument_list|(
literal|"date"
argument_list|)
decl_stmt|;
if|if
condition|(
name|start
operator|!=
literal|null
condition|)
block|{
name|DateTimeFormat
name|df
init|=
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"MM/dd"
argument_list|)
decl_stmt|;
name|String
name|date
init|=
name|start
decl_stmt|;
if|if
condition|(
literal|"today"
operator|.
name|equalsIgnoreCase
argument_list|(
name|start
argument_list|)
condition|)
block|{
name|date
operator|=
name|df
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|date
operator|=
name|df
operator|.
name|format
argument_list|(
name|df
operator|.
name|parse
argument_list|(
name|start
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
block|}
block|}
name|WeekInterface
name|week
init|=
literal|null
decl_stmt|;
for|for
control|(
name|WeekInterface
name|w
range|:
name|iResource
operator|.
name|getWeeks
argument_list|()
control|)
block|{
if|if
condition|(
name|w
operator|.
name|getDayNames
argument_list|()
operator|.
name|contains
argument_list|(
name|date
argument_list|)
condition|)
block|{
name|week
operator|=
name|w
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|week
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|iWeek
operator|.
name|getItemCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|iWeek
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|week
operator|.
name|getDayOfYear
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|iWeek
operator|.
name|setSelectedIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|weekChanged
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"print"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|iPanel
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
name|iPanel
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|i
argument_list|,
name|i
operator|!=
name|iWeekRow
operator|||
name|iResource
operator|.
name|hasWeeks
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|iFilterHeader
operator|.
name|setErrorMessage
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|iPanel
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
name|iPanel
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|i
argument_list|,
name|i
operator|==
name|iLastRow
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"print"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"export"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|weekChanged
parameter_list|()
block|{
name|iTimeGrid
operator|.
name|clear
argument_list|()
expr_stmt|;
name|populateEventTable
argument_list|(
name|iTable
argument_list|)
expr_stmt|;
name|WeekInterface
name|week
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|iWeek
operator|.
name|getSelectedIndex
argument_list|()
operator|<=
literal|0
condition|)
block|{
if|if
condition|(
name|iResource
operator|.
name|getType
argument_list|()
operator|!=
name|ResourceType
operator|.
name|PERSON
condition|)
name|changeUrl
argument_list|(
name|Window
operator|.
name|Location
operator|.
name|getParameter
argument_list|(
literal|"page"
argument_list|)
argument_list|,
name|iResource
operator|.
name|getSessionAbbv
argument_list|()
argument_list|,
name|iResource
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|iResource
operator|.
name|getAbbreviation
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setHeaderTitle
argument_list|(
name|iResource
operator|.
name|getName
argument_list|()
operator|+
literal|" timetable for "
operator|+
name|iResource
operator|.
name|getSessionName
argument_list|()
argument_list|)
expr_stmt|;
name|iTableHeader
operator|.
name|setHeaderTitle
argument_list|(
name|iResource
operator|.
name|getName
argument_list|()
operator|+
literal|" events for "
operator|+
name|iResource
operator|.
name|getSessionName
argument_list|()
argument_list|)
expr_stmt|;
name|iTimeGrid
operator|.
name|setOneWeek
argument_list|(
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|EventInterface
name|event
range|:
name|iData
control|)
block|{
name|iTimeGrid
operator|.
name|addEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|iWeek
operator|.
name|getSelectedIndex
argument_list|()
operator|>
literal|0
condition|)
block|{
name|iHeader
operator|.
name|setHeaderTitle
argument_list|(
name|iResource
operator|.
name|getName
argument_list|()
operator|+
literal|" timetable for "
operator|+
name|iWeek
operator|.
name|getItemText
argument_list|(
name|iWeek
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|iTableHeader
operator|.
name|setHeaderTitle
argument_list|(
name|iResource
operator|.
name|getName
argument_list|()
operator|+
literal|" events for "
operator|+
name|iWeek
operator|.
name|getItemText
argument_list|(
name|iWeek
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|iTimeGrid
operator|.
name|setOneWeek
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|int
name|dayOfYear
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|iWeek
operator|.
name|getValue
argument_list|(
name|iWeek
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|WeekInterface
name|w
range|:
name|iResource
operator|.
name|getWeeks
argument_list|()
control|)
block|{
if|if
condition|(
name|w
operator|.
name|getDayOfYear
argument_list|()
operator|==
name|dayOfYear
condition|)
block|{
name|week
operator|=
name|w
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|iResource
operator|.
name|getType
argument_list|()
operator|!=
name|ResourceType
operator|.
name|PERSON
operator|&&
name|week
operator|!=
literal|null
condition|)
name|changeUrl
argument_list|(
name|Window
operator|.
name|Location
operator|.
name|getParameter
argument_list|(
literal|"page"
argument_list|)
argument_list|,
name|iResource
operator|.
name|getSessionAbbv
argument_list|()
argument_list|,
name|iResource
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|iResource
operator|.
name|getAbbreviation
argument_list|()
argument_list|,
name|week
operator|.
name|getDayNames
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|EventInterface
name|event
range|:
name|iData
control|)
block|{
name|List
argument_list|<
name|MeetingInterface
argument_list|>
name|meetings
init|=
operator|new
name|ArrayList
argument_list|<
name|MeetingInterface
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|MeetingInterface
name|meeting
range|:
name|event
operator|.
name|getMeetings
argument_list|()
control|)
block|{
if|if
condition|(
name|meeting
operator|.
name|getDayOfYear
argument_list|()
operator|>=
name|dayOfYear
operator|&&
name|meeting
operator|.
name|getDayOfYear
argument_list|()
operator|<
name|dayOfYear
operator|+
literal|7
condition|)
block|{
name|meetings
operator|.
name|add
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|meetings
operator|.
name|isEmpty
argument_list|()
condition|)
name|iTimeGrid
operator|.
name|addEvent
argument_list|(
name|event
argument_list|,
name|meetings
argument_list|)
expr_stmt|;
block|}
block|}
name|iTimeGrid
operator|.
name|labelDays
argument_list|(
name|week
argument_list|)
expr_stmt|;
name|iTimeGrid
operator|.
name|shrink
argument_list|()
expr_stmt|;
name|iPrevious
operator|.
name|setEnabled
argument_list|(
name|iWeek
operator|.
name|getSelectedIndex
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|iNext
operator|.
name|setEnabled
argument_list|(
name|iWeek
operator|.
name|getSelectedIndex
argument_list|()
operator|<
name|iWeek
operator|.
name|getItemCount
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|UniTimeTable
argument_list|<
name|EventInterface
argument_list|>
name|createEventTable
parameter_list|()
block|{
specifier|final
name|UniTimeTable
name|table
init|=
operator|new
name|UniTimeTable
argument_list|<
name|EventInterface
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|UniTimeTableHeader
argument_list|>
name|header
init|=
operator|new
name|ArrayList
argument_list|<
name|UniTimeTableHeader
argument_list|>
argument_list|()
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
literal|"Name"
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
literal|"Section"
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
literal|"Type"
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
literal|"Date"
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
literal|"Time"
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
literal|"Location"
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
literal|"Instructor / Sponsor"
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|table
operator|.
name|sort
argument_list|(
operator|new
name|Comparator
argument_list|<
name|EventInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|EventInterface
name|o1
parameter_list|,
name|EventInterface
name|o2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|o1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|o1
operator|.
name|getType
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|o1
operator|.
name|getId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Sort by Name"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|header
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|table
operator|.
name|sort
argument_list|(
operator|new
name|Comparator
argument_list|<
name|EventInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|EventInterface
name|o1
parameter_list|,
name|EventInterface
name|o2
parameter_list|)
block|{
if|if
condition|(
name|o1
operator|.
name|hasExternalIds
argument_list|()
condition|)
block|{
if|if
condition|(
name|o2
operator|.
name|hasExternalIds
argument_list|()
condition|)
block|{
name|int
name|cmp
init|=
name|o1
operator|.
name|getExternalIds
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getExternalIds
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
else|else
return|return
operator|-
literal|1
return|;
block|}
if|else if
condition|(
name|o2
operator|.
name|hasExternalIds
argument_list|()
condition|)
return|return
literal|1
return|;
name|int
name|cmp
init|=
name|o1
operator|.
name|getType
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
if|if
condition|(
name|o1
operator|.
name|getInstructionType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cmp
operator|=
name|o1
operator|.
name|getInstructionType
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getInstructionType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
name|cmp
operator|=
name|o1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|o1
operator|.
name|getId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Sort by Section"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|header
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|table
operator|.
name|sort
argument_list|(
operator|new
name|Comparator
argument_list|<
name|EventInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|EventInterface
name|o1
parameter_list|,
name|EventInterface
name|o2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|o1
operator|.
name|getType
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
if|if
condition|(
name|o1
operator|.
name|getInstructionType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cmp
operator|=
name|o1
operator|.
name|getInstructionType
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getInstructionType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
name|cmp
operator|=
name|o1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|o1
operator|.
name|getId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Sort by Type"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|header
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|table
operator|.
name|sort
argument_list|(
operator|new
name|Comparator
argument_list|<
name|EventInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|EventInterface
name|o1
parameter_list|,
name|EventInterface
name|o2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|o1
operator|.
name|getMeetings
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getMeetings
argument_list|()
operator|.
name|first
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|o1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|o1
operator|.
name|getType
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|o1
operator|.
name|getId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Sort by Date"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|header
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|table
operator|.
name|sort
argument_list|(
operator|new
name|Comparator
argument_list|<
name|EventInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|EventInterface
name|o1
parameter_list|,
name|EventInterface
name|o2
parameter_list|)
block|{
name|int
name|cmp
init|=
operator|new
name|Integer
argument_list|(
name|o1
operator|.
name|getMeetings
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|getDayOfWeek
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getMeetings
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|getDayOfWeek
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
operator|new
name|Integer
argument_list|(
name|o1
operator|.
name|getMeetings
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getMeetings
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|o1
operator|.
name|getMeetings
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getMeetings
argument_list|()
operator|.
name|first
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|o1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|o1
operator|.
name|getType
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|o1
operator|.
name|getId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Sort by Time"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|header
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|table
operator|.
name|sort
argument_list|(
operator|new
name|Comparator
argument_list|<
name|EventInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|EventInterface
name|o1
parameter_list|,
name|EventInterface
name|o2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|o1
operator|.
name|getMeetings
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|getLocationName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getMeetings
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|getLocationName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|o1
operator|.
name|getMeetings
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getMeetings
argument_list|()
operator|.
name|first
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|o1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|o1
operator|.
name|getType
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|o1
operator|.
name|getId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Sort by Location"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|header
operator|.
name|get
argument_list|(
literal|6
argument_list|)
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|table
operator|.
name|sort
argument_list|(
operator|new
name|Comparator
argument_list|<
name|EventInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|EventInterface
name|o1
parameter_list|,
name|EventInterface
name|o2
parameter_list|)
block|{
name|int
name|cmp
init|=
operator|(
name|o1
operator|.
name|hasInstructor
argument_list|()
condition|?
name|o1
operator|.
name|getInstructor
argument_list|()
else|:
name|o1
operator|.
name|hasSponsor
argument_list|()
condition|?
name|o1
operator|.
name|getSponsor
argument_list|()
else|:
literal|""
operator|)
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|hasInstructor
argument_list|()
condition|?
name|o2
operator|.
name|getInstructor
argument_list|()
else|:
name|o2
operator|.
name|hasSponsor
argument_list|()
condition|?
name|o2
operator|.
name|getSponsor
argument_list|()
else|:
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|o1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|o1
operator|.
name|getType
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|o1
operator|.
name|getId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Sort by Instructor / Sponsor"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|table
operator|.
name|addRow
argument_list|(
literal|null
argument_list|,
name|header
argument_list|)
expr_stmt|;
return|return
name|table
return|;
block|}
specifier|public
name|void
name|populateEventTable
parameter_list|(
name|UniTimeTable
argument_list|<
name|EventInterface
argument_list|>
name|table
parameter_list|)
block|{
name|table
operator|.
name|clearTable
argument_list|(
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|EventInterface
name|event
range|:
name|iData
control|)
block|{
name|List
argument_list|<
name|Widget
argument_list|>
name|line
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|hasCourseNames
argument_list|()
condition|)
block|{
name|String
name|name
init|=
literal|""
decl_stmt|;
name|String
name|section
init|=
literal|""
decl_stmt|;
name|String
name|prevCn
init|=
literal|""
decl_stmt|,
name|prevExt
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|event
operator|.
name|getCourseNames
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|cn
init|=
name|event
operator|.
name|getCourseNames
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|ext
init|=
name|event
operator|.
name|getExternalIds
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|name
operator|+=
name|cn
expr_stmt|;
name|section
operator|+=
name|ext
expr_stmt|;
block|}
if|else if
condition|(
name|event
operator|.
name|getInstruction
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|name
operator|+=
literal|"<br><span style='color:gray;'>"
operator|+
operator|(
name|cn
operator|.
name|equals
argument_list|(
name|prevCn
argument_list|)
condition|?
literal|""
else|:
name|cn
operator|)
operator|+
literal|"</span>"
expr_stmt|;
name|section
operator|+=
literal|"<br><span style='color:gray;'>"
operator|+
operator|(
name|ext
operator|.
name|equals
argument_list|(
name|prevExt
argument_list|)
condition|?
literal|""
else|:
name|ext
operator|)
operator|+
literal|"</span>"
expr_stmt|;
block|}
else|else
block|{
name|name
operator|+=
literal|"<br>"
operator|+
operator|(
name|cn
operator|.
name|equals
argument_list|(
name|prevCn
argument_list|)
condition|?
literal|""
else|:
name|cn
operator|)
expr_stmt|;
name|section
operator|+=
literal|"<br>"
operator|+
operator|(
name|ext
operator|.
name|equals
argument_list|(
name|prevExt
argument_list|)
condition|?
literal|""
else|:
name|ext
operator|)
expr_stmt|;
block|}
name|prevCn
operator|=
name|cn
expr_stmt|;
name|prevExt
operator|=
name|ext
expr_stmt|;
block|}
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|NumberCell
argument_list|(
name|section
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|event
operator|.
name|getInstruction
argument_list|()
operator|==
literal|null
condition|?
name|event
operator|.
name|getType
argument_list|()
else|:
name|event
operator|.
name|getInstruction
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|DoubleCell
argument_list|(
name|event
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|event
operator|.
name|getType
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|date
init|=
literal|""
decl_stmt|,
name|time
init|=
literal|""
decl_stmt|,
name|room
init|=
literal|""
decl_stmt|;
name|TreeSet
argument_list|<
name|MeetingInterface
argument_list|>
name|meetings
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|iWeek
operator|.
name|getSelectedIndex
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|meetings
operator|=
name|event
operator|.
name|getMeetings
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|meetings
operator|=
operator|new
name|TreeSet
argument_list|<
name|MeetingInterface
argument_list|>
argument_list|()
expr_stmt|;
name|int
name|dayOfYear
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|iWeek
operator|.
name|getValue
argument_list|(
name|iWeek
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|MeetingInterface
name|meeting
range|:
name|event
operator|.
name|getMeetings
argument_list|()
control|)
if|if
condition|(
name|meeting
operator|.
name|getDayOfYear
argument_list|()
operator|>=
name|dayOfYear
operator|&&
name|meeting
operator|.
name|getDayOfYear
argument_list|()
operator|<
name|dayOfYear
operator|+
literal|7
condition|)
name|meetings
operator|.
name|add
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|meetings
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|String
name|prevDate
init|=
literal|""
decl_stmt|,
name|prevTime
init|=
literal|""
decl_stmt|,
name|prevRoom
init|=
literal|""
decl_stmt|;
name|boolean
name|prevPast
init|=
literal|false
decl_stmt|;
for|for
control|(
name|MultiMeetingInterface
name|m
range|:
name|EventInterface
operator|.
name|getMultiMeetings
argument_list|(
name|meetings
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|date
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|date
operator|+=
literal|"<br>"
expr_stmt|;
name|time
operator|+=
literal|"<br>"
expr_stmt|;
name|room
operator|+=
literal|"<br>"
expr_stmt|;
block|}
if|if
condition|(
name|prevPast
operator|!=
name|m
operator|.
name|isPast
argument_list|()
operator|||
operator|!
name|prevDate
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getMeetingDates
argument_list|()
argument_list|)
condition|)
name|date
operator|+=
operator|(
name|m
operator|.
name|isPast
argument_list|()
condition|?
literal|"<span style='font-style:italic;color:gray;'>"
else|:
literal|""
operator|)
operator|+
name|m
operator|.
name|getMeetingDates
argument_list|()
operator|+
operator|(
name|m
operator|.
name|isPast
argument_list|()
condition|?
literal|"</span>"
else|:
literal|""
operator|)
expr_stmt|;
if|if
condition|(
name|prevPast
operator|!=
name|m
operator|.
name|isPast
argument_list|()
operator|||
operator|!
name|prevTime
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getMeetingTime
argument_list|()
argument_list|)
condition|)
name|time
operator|+=
operator|(
name|m
operator|.
name|isPast
argument_list|()
condition|?
literal|"<span style='font-style:italic;color:gray;'>"
else|:
literal|""
operator|)
operator|+
name|m
operator|.
name|getMeetingTime
argument_list|()
operator|+
operator|(
name|m
operator|.
name|isPast
argument_list|()
condition|?
literal|"</span>"
else|:
literal|""
operator|)
expr_stmt|;
if|if
condition|(
name|prevPast
operator|!=
name|m
operator|.
name|isPast
argument_list|()
operator|||
operator|!
name|prevRoom
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getLocationName
argument_list|()
argument_list|)
condition|)
name|room
operator|+=
operator|(
name|m
operator|.
name|isPast
argument_list|()
condition|?
literal|"<span style='font-style:italic;color:gray;'>"
else|:
literal|""
operator|)
operator|+
name|m
operator|.
name|getLocationName
argument_list|()
operator|+
operator|(
name|m
operator|.
name|isPast
argument_list|()
condition|?
literal|"</span>"
else|:
literal|""
operator|)
expr_stmt|;
name|prevPast
operator|=
name|m
operator|.
name|isPast
argument_list|()
expr_stmt|;
name|prevDate
operator|=
name|m
operator|.
name|getMeetingDates
argument_list|()
expr_stmt|;
name|prevTime
operator|=
name|m
operator|.
name|getMeetingTime
argument_list|()
expr_stmt|;
name|prevRoom
operator|=
name|m
operator|.
name|getLocationName
argument_list|()
expr_stmt|;
block|}
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|date
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|time
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|room
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|hasInstructor
argument_list|()
condition|)
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|event
operator|.
name|getInstructor
argument_list|()
operator|.
name|replace
argument_list|(
literal|"|"
argument_list|,
literal|"<br>"
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|event
operator|.
name|hasSponsor
argument_list|()
condition|?
name|event
operator|.
name|getSponsor
argument_list|()
else|:
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|row
init|=
name|table
operator|.
name|addRow
argument_list|(
name|event
argument_list|,
name|line
argument_list|)
decl_stmt|;
name|table
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVerticalAlign
argument_list|(
name|row
argument_list|,
name|HasVerticalAlignment
operator|.
name|ALIGN_TOP
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setWidth
argument_list|(
literal|100
argument_list|,
name|Unit
operator|.
name|PCT
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|table
argument_list|,
literal|3
argument_list|,
name|iWeek
operator|.
name|getSelectedIndex
argument_list|()
operator|<=
literal|0
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|table
argument_list|,
literal|5
argument_list|,
name|iResource
operator|.
name|getType
argument_list|()
operator|!=
name|ResourceType
operator|.
name|ROOM
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setColumnVisible
parameter_list|(
name|UniTimeTable
argument_list|<
name|EventInterface
argument_list|>
name|table
parameter_list|,
name|int
name|col
parameter_list|,
name|boolean
name|visible
parameter_list|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|table
operator|.
name|getRowCount
argument_list|()
condition|;
name|r
operator|++
control|)
block|{
name|table
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|r
argument_list|,
name|col
operator|-
operator|(
name|table
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|getColSpan
argument_list|(
name|r
argument_list|,
literal|0
argument_list|)
operator|==
literal|2
condition|?
literal|1
else|:
literal|0
operator|)
argument_list|,
name|visible
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|NumberCell
extends|extends
name|HTML
implements|implements
name|HasCellAlignment
block|{
specifier|public
name|NumberCell
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|super
argument_list|(
name|text
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|HorizontalAlignmentConstant
name|getCellAlignment
parameter_list|()
block|{
return|return
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DoubleCell
extends|extends
name|HTML
implements|implements
name|HasColSpan
block|{
specifier|public
name|DoubleCell
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|super
argument_list|(
name|text
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getColSpan
parameter_list|()
block|{
return|return
literal|2
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ResourceSuggestion
implements|implements
name|Suggestion
block|{
specifier|private
name|ResourceInterface
name|iResource
decl_stmt|;
specifier|public
name|ResourceSuggestion
parameter_list|(
name|ResourceInterface
name|resource
parameter_list|)
block|{
name|iResource
operator|=
name|resource
expr_stmt|;
block|}
specifier|public
name|ResourceInterface
name|getResource
parameter_list|()
block|{
return|return
name|iResource
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDisplayString
parameter_list|()
block|{
if|if
condition|(
name|iResource
operator|.
name|hasTitle
argument_list|()
condition|)
return|return
name|iResource
operator|.
name|getTitle
argument_list|()
return|;
if|if
condition|(
name|iResource
operator|.
name|hasAbbreviation
argument_list|()
operator|&&
operator|!
name|iResource
operator|.
name|getAbbreviation
argument_list|()
operator|.
name|equals
argument_list|(
name|iResource
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
return|return
name|iResource
operator|.
name|getAbbreviation
argument_list|()
operator|+
literal|" - "
operator|+
name|iResource
operator|.
name|getName
argument_list|()
return|;
return|return
operator|(
name|iResource
operator|.
name|hasAbbreviation
argument_list|()
condition|?
name|iResource
operator|.
name|getAbbreviation
argument_list|()
else|:
name|iResource
operator|.
name|getName
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getReplacementString
parameter_list|()
block|{
return|return
operator|(
name|iResource
operator|.
name|hasAbbreviation
argument_list|()
condition|?
name|iResource
operator|.
name|getAbbreviation
argument_list|()
else|:
name|iResource
operator|.
name|getName
argument_list|()
operator|)
return|;
block|}
block|}
specifier|public
specifier|static
name|void
name|personFound
parameter_list|(
name|String
name|externalUniqueId
parameter_list|)
block|{
name|sInstance
operator|.
name|iResources
operator|.
name|setText
argument_list|(
name|externalUniqueId
argument_list|)
expr_stmt|;
name|sInstance
operator|.
name|resourceTypeChanged
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|native
name|JavaScriptObject
name|createLookupCallback
parameter_list|()
comment|/*-{ 		return function(person) { 			@org.unitime.timetable.gwt.client.events.EventResourceTimetable::personFound(Ljava/lang/String;)(person[0]); 	    }; 	 }-*/
function_decl|;
specifier|private
specifier|native
specifier|static
name|void
name|changeUrl
parameter_list|(
name|String
name|page
parameter_list|,
name|String
name|term
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|date
parameter_list|)
comment|/*-{ 		try { 			var state = "term=" + term + "&type=" + type + "&name=" + name.replace(' ', '+') + (date == null ? "" : "&date=" + date); 			$wnd.history.pushState(state, "", "gwt.jsp?page=" + page + "&" + state); 		} catch (err) { 		} 	}-*/
function_decl|;
block|}
end_class

end_unit

