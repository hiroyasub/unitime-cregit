begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.0 (University Timetabling Application)  * Copyright (C) 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|events
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|ImageLink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|MeetingInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|WeekInterface
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
operator|.
name|ScheduledCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|EventTarget
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DOM
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|AbsolutePanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HorizontalPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ScrollPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|SimplePanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|VerticalPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|TimeGrid
extends|extends
name|Composite
block|{
specifier|public
specifier|static
specifier|final
name|StudentSectioningResources
name|RESOURCES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningResources
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|StudentSectioningMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|StudentSectioningConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|VerticalPanel
name|iContainer
decl_stmt|;
specifier|private
name|SimplePanel
name|iScrollPanel
decl_stmt|;
specifier|private
name|AbsolutePanel
name|iPanel
decl_stmt|;
specifier|private
name|AbsolutePanel
name|iGrid
decl_stmt|;
specifier|private
name|HorizontalPanel
name|iHeader
decl_stmt|,
name|iDock
decl_stmt|;
specifier|private
name|SimplePanel
index|[]
name|iSeparators
init|=
operator|new
name|SimplePanel
index|[
literal|8
index|]
decl_stmt|;
specifier|private
name|SimplePanel
name|iWorkingHours
decl_stmt|;
specifier|private
name|ImageLink
name|iCalendar
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
argument_list|>
name|iMeetings
init|=
operator|new
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
index|[]
index|[]
name|iMeetingTable
init|=
operator|new
name|ArrayList
index|[
literal|7
index|]
index|[
literal|24
operator|*
literal|60
operator|/
literal|5
index|]
decl_stmt|;
specifier|private
name|int
name|iCellWidth
init|=
literal|150
decl_stmt|;
specifier|private
name|int
name|iCellHeight
init|=
literal|60
decl_stmt|;
specifier|private
name|int
name|iNrDays
init|=
literal|5
decl_stmt|;
specifier|private
name|int
name|iStart
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|iEnd
init|=
literal|24
decl_stmt|;
specifier|private
name|boolean
name|iScroll
init|=
literal|false
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|MeetingClickHandler
argument_list|>
name|iMeetingClickHandlers
init|=
operator|new
name|ArrayList
argument_list|<
name|MeetingClickHandler
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|iColors
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|iOneWeek
init|=
literal|false
decl_stmt|,
name|iRoomResource
init|=
literal|false
decl_stmt|;
specifier|public
name|TimeGrid
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
literal|5
argument_list|,
operator|(
name|int
operator|)
operator|(
literal|0.9
operator|*
name|Window
operator|.
name|getClientWidth
argument_list|()
operator|/
literal|5
operator|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|24
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|Label
argument_list|>
name|iDayLabels
init|=
operator|new
name|ArrayList
argument_list|<
name|Label
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|TimeGrid
parameter_list|(
name|HashMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|colors
parameter_list|,
name|int
name|nrDays
parameter_list|,
name|int
name|cellWidth
parameter_list|,
name|boolean
name|print
parameter_list|,
name|boolean
name|scroll
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|iColors
operator|=
name|colors
expr_stmt|;
name|iNrDays
operator|=
name|nrDays
expr_stmt|;
name|iCellWidth
operator|=
name|cellWidth
expr_stmt|;
name|iStart
operator|=
name|start
expr_stmt|;
name|iEnd
operator|=
name|end
expr_stmt|;
name|iScroll
operator|=
name|scroll
expr_stmt|;
name|iContainer
operator|=
operator|new
name|VerticalPanel
argument_list|()
expr_stmt|;
name|iContainer
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TimeGrid"
argument_list|)
expr_stmt|;
name|iHeader
operator|=
operator|new
name|HorizontalPanel
argument_list|()
expr_stmt|;
name|iDock
operator|=
operator|new
name|HorizontalPanel
argument_list|()
expr_stmt|;
name|iPanel
operator|=
operator|new
name|AbsolutePanel
argument_list|()
expr_stmt|;
name|AbsolutePanel
name|times
init|=
operator|new
name|AbsolutePanel
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
operator|-
literal|1
init|;
name|i
operator|<
name|iNrDays
condition|;
name|i
operator|++
control|)
block|{
name|SimplePanel
name|sp
init|=
operator|new
name|SimplePanel
argument_list|()
decl_stmt|;
name|sp
operator|.
name|setStyleName
argument_list|(
literal|"header-time-interval"
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
literal|0
condition|)
block|{
name|sp
operator|.
name|setWidth
argument_list|(
literal|"30px"
argument_list|)
expr_stmt|;
name|iCalendar
operator|=
operator|new
name|ImageLink
argument_list|()
expr_stmt|;
name|iCalendar
operator|.
name|setImage
argument_list|(
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|calendar
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iCalendar
operator|.
name|setTarget
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|iCalendar
operator|.
name|setTitle
argument_list|(
literal|"Export in iCalendar format."
argument_list|)
expr_stmt|;
name|iCalendar
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|print
condition|)
name|sp
operator|.
name|setWidget
argument_list|(
name|iCalendar
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sp
operator|.
name|setWidth
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iCellWidth
argument_list|)
argument_list|)
expr_stmt|;
name|Label
name|l
init|=
operator|new
name|Label
argument_list|(
name|CONSTANTS
operator|.
name|longDays
argument_list|()
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|iDayLabels
operator|.
name|add
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|sp
operator|.
name|setWidget
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
name|iHeader
operator|.
name|add
argument_list|(
name|sp
argument_list|)
expr_stmt|;
block|}
name|iPanel
operator|.
name|setSize
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iNrDays
operator|*
name|iCellWidth
operator|+
operator|(
name|scroll
condition|?
literal|0
else|:
literal|5
operator|)
argument_list|)
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iCellHeight
operator|*
operator|(
name|iEnd
operator|-
name|iStart
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|times
operator|.
name|setSize
argument_list|(
literal|"30"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iCellHeight
operator|*
operator|(
name|iEnd
operator|-
name|iStart
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|iGrid
operator|=
operator|new
name|AbsolutePanel
argument_list|()
expr_stmt|;
name|iGrid
operator|.
name|setSize
argument_list|(
literal|"100%"
argument_list|,
literal|"100%"
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|setStyleName
argument_list|(
literal|"bottom-line"
argument_list|)
expr_stmt|;
name|iWorkingHours
operator|=
operator|new
name|SimplePanel
argument_list|()
expr_stmt|;
name|iWorkingHours
operator|.
name|setStyleName
argument_list|(
literal|"working-hours"
argument_list|)
expr_stmt|;
name|iWorkingHours
operator|.
name|setSize
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
literal|2
operator|+
name|iCellWidth
operator|*
literal|5
argument_list|)
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iCellHeight
operator|*
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|add
argument_list|(
name|iWorkingHours
argument_list|,
literal|0
argument_list|,
literal|15
operator|*
name|iCellHeight
operator|/
literal|2
operator|-
operator|(
name|iCellHeight
operator|*
name|iStart
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|iStart
init|;
name|i
operator|<
name|iEnd
condition|;
name|i
operator|++
control|)
block|{
comment|//create major interval
name|SimplePanel
name|sp1
init|=
operator|new
name|SimplePanel
argument_list|()
decl_stmt|;
name|sp1
operator|.
name|setStyleName
argument_list|(
literal|"major-time-interval"
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|add
argument_list|(
name|sp1
argument_list|,
literal|0
argument_list|,
name|iCellHeight
operator|*
operator|(
name|i
operator|-
name|iStart
operator|)
argument_list|)
expr_stmt|;
name|SimplePanel
name|sp3
init|=
operator|new
name|SimplePanel
argument_list|()
decl_stmt|;
name|sp3
operator|.
name|setStyleName
argument_list|(
literal|"dummy-time-interval"
argument_list|)
expr_stmt|;
name|Label
name|title
init|=
operator|new
name|Label
argument_list|(
name|i
operator|==
literal|0
condition|?
literal|"12am"
else|:
name|i
operator|<=
literal|11
condition|?
name|i
operator|+
literal|"am"
else|:
name|i
operator|==
literal|12
condition|?
literal|"12pm"
else|:
operator|(
name|i
operator|-
literal|12
operator|)
operator|+
literal|"pm"
argument_list|)
decl_stmt|;
name|sp3
operator|.
name|setWidget
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|times
operator|.
name|add
argument_list|(
name|sp3
argument_list|,
literal|0
argument_list|,
name|iCellHeight
operator|*
operator|(
name|i
operator|-
name|iStart
operator|)
argument_list|)
expr_stmt|;
name|SimplePanel
name|sp2
init|=
operator|new
name|SimplePanel
argument_list|()
decl_stmt|;
name|sp2
operator|.
name|setStyleName
argument_list|(
literal|"minor-time-interval"
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|add
argument_list|(
name|sp2
argument_list|,
literal|0
argument_list|,
name|iCellHeight
operator|*
operator|(
name|i
operator|-
name|iStart
operator|)
operator|+
name|iCellHeight
operator|/
literal|2
argument_list|)
expr_stmt|;
name|SimplePanel
name|sp4
init|=
operator|new
name|SimplePanel
argument_list|()
decl_stmt|;
name|sp4
operator|.
name|setStyleName
argument_list|(
literal|"dummy-time-interval"
argument_list|)
expr_stmt|;
name|times
operator|.
name|add
argument_list|(
name|sp4
argument_list|,
literal|0
argument_list|,
name|iCellHeight
operator|*
operator|(
name|i
operator|-
name|iStart
operator|)
operator|+
name|iCellHeight
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|day
init|=
literal|0
init|;
name|day
operator|<
name|iNrDays
operator|+
operator|(
name|scroll
condition|?
literal|0
else|:
literal|1
operator|)
condition|;
name|day
operator|++
control|)
block|{
name|iSeparators
index|[
name|day
index|]
operator|=
operator|new
name|SimplePanel
argument_list|()
expr_stmt|;
name|iSeparators
index|[
name|day
index|]
operator|.
name|setStyleName
argument_list|(
literal|"day-separator"
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|add
argument_list|(
name|iSeparators
index|[
name|day
index|]
argument_list|,
name|iCellWidth
operator|*
name|day
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|iPanel
operator|.
name|add
argument_list|(
name|iGrid
argument_list|)
expr_stmt|;
name|iDock
operator|.
name|add
argument_list|(
name|times
argument_list|)
expr_stmt|;
name|iDock
operator|.
name|add
argument_list|(
name|iPanel
argument_list|)
expr_stmt|;
name|iContainer
operator|.
name|add
argument_list|(
name|iHeader
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setHorizontalAlignment
argument_list|(
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
if|if
condition|(
name|scroll
condition|)
block|{
name|iScrollPanel
operator|=
operator|new
name|ScrollPanel
argument_list|()
expr_stmt|;
name|iScrollPanel
operator|.
name|setStyleName
argument_list|(
literal|"calendar-scroll"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iScrollPanel
operator|=
operator|new
name|SimplePanel
argument_list|()
expr_stmt|;
block|}
name|iScrollPanel
operator|.
name|add
argument_list|(
name|iDock
argument_list|)
expr_stmt|;
name|iContainer
operator|.
name|add
argument_list|(
name|iScrollPanel
argument_list|)
expr_stmt|;
name|iScrollPanel
operator|.
name|setWidth
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iNrDays
operator|*
name|iCellWidth
operator|+
literal|30
operator|+
operator|(
name|scroll
condition|?
name|ToolBox
operator|.
name|getScrollBarWidth
argument_list|()
else|:
literal|5
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|iContainer
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isOneWeek
parameter_list|()
block|{
return|return
name|iOneWeek
return|;
block|}
specifier|public
name|void
name|setOneWeek
parameter_list|(
name|boolean
name|oneWeek
parameter_list|)
block|{
name|iOneWeek
operator|=
name|oneWeek
expr_stmt|;
block|}
specifier|public
name|boolean
name|isRoomResource
parameter_list|()
block|{
return|return
name|iRoomResource
return|;
block|}
specifier|public
name|void
name|setRoomResource
parameter_list|(
name|boolean
name|roomResource
parameter_list|)
block|{
name|iRoomResource
operator|=
name|roomResource
expr_stmt|;
block|}
specifier|public
name|void
name|setCalendarUrl
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|iCalendar
operator|.
name|setUrl
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|iCalendar
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getCalendarUrl
parameter_list|()
block|{
return|return
name|iCalendar
operator|.
name|getUrl
argument_list|()
return|;
block|}
specifier|public
name|TimeGrid
name|getPrintWidget
parameter_list|()
block|{
name|int
name|firstHour
init|=
name|firstSlot
argument_list|()
operator|/
literal|12
decl_stmt|;
name|int
name|lastHour
init|=
operator|(
literal|11
operator|+
name|lastSlot
argument_list|()
operator|)
operator|/
literal|12
decl_stmt|;
name|TimeGrid
name|tg
init|=
operator|new
name|TimeGrid
argument_list|(
name|iColors
argument_list|,
name|iNrDays
argument_list|,
operator|(
name|int
operator|)
operator|(
literal|0.9
operator|*
name|Window
operator|.
name|getClientWidth
argument_list|()
operator|/
name|iNrDays
operator|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
operator|(
name|firstHour
operator|<
literal|7
condition|?
name|firstHour
else|:
literal|7
operator|)
argument_list|,
operator|(
name|lastHour
operator|>
literal|18
condition|?
name|lastHour
else|:
literal|18
operator|)
argument_list|)
decl_stmt|;
name|tg
operator|.
name|setOneWeek
argument_list|(
name|isOneWeek
argument_list|()
argument_list|)
expr_stmt|;
name|tg
operator|.
name|setRoomResource
argument_list|(
name|isRoomResource
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|tg
return|;
block|}
specifier|public
name|void
name|addPrintEvent
parameter_list|(
name|EventInterface
name|event
parameter_list|)
block|{
name|addPrintEvent
argument_list|(
name|event
argument_list|,
name|event
operator|.
name|getMeetings
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addPrintEvent
parameter_list|(
name|EventInterface
name|event
parameter_list|,
name|Collection
argument_list|<
name|MeetingInterface
argument_list|>
name|meetings
parameter_list|)
block|{
for|for
control|(
name|Meeting
name|m
range|:
name|addEvent
argument_list|(
name|event
argument_list|,
name|meetings
argument_list|)
control|)
block|{
name|m
operator|.
name|setDummy
argument_list|()
expr_stmt|;
name|m
operator|.
name|addStyleName
argument_list|(
literal|"meeting-selected-noshadow"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|labelDays
parameter_list|(
name|WeekInterface
name|first
parameter_list|,
name|WeekInterface
name|last
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iDayLabels
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|iDayLabels
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|setText
argument_list|(
name|CONSTANTS
operator|.
name|longDays
argument_list|()
index|[
name|i
index|]
operator|+
operator|(
name|first
operator|==
literal|null
condition|?
literal|""
else|:
literal|" "
operator|+
name|first
operator|.
name|getDayNames
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|+
operator|(
name|last
operator|==
literal|null
condition|?
literal|""
else|:
literal|" - "
operator|+
name|last
operator|.
name|getDayNames
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setNrDays
parameter_list|(
name|int
name|days
parameter_list|)
block|{
if|if
condition|(
name|iNrDays
operator|==
name|days
condition|)
return|return;
name|iNrDays
operator|=
name|days
expr_stmt|;
name|iCellWidth
operator|=
operator|(
name|int
operator|)
operator|(
literal|0.9
operator|*
name|Window
operator|.
name|getClientWidth
argument_list|()
operator|/
name|days
operator|)
expr_stmt|;
name|iPanel
operator|.
name|setWidth
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iNrDays
operator|*
name|iCellWidth
operator|+
operator|(
name|iScroll
condition|?
literal|0
else|:
literal|5
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|iWorkingHours
operator|.
name|setWidth
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
literal|2
operator|+
name|iCellWidth
operator|*
operator|(
name|iNrDays
operator|<
literal|5
condition|?
name|iNrDays
else|:
literal|5
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|iScrollPanel
operator|.
name|setWidth
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iNrDays
operator|*
name|iCellWidth
operator|+
literal|30
operator|+
operator|(
name|iScroll
condition|?
name|ToolBox
operator|.
name|getScrollBarWidth
argument_list|()
else|:
literal|5
operator|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|day
init|=
literal|0
init|;
name|day
operator|<
literal|7
operator|+
operator|(
name|iScroll
condition|?
literal|0
else|:
literal|1
operator|)
condition|;
name|day
operator|++
control|)
block|{
if|if
condition|(
name|day
operator|<
name|days
operator|+
operator|(
name|iScroll
condition|?
literal|0
else|:
literal|1
operator|)
condition|)
block|{
if|if
condition|(
name|iSeparators
index|[
name|day
index|]
operator|==
literal|null
condition|)
block|{
name|iSeparators
index|[
name|day
index|]
operator|=
operator|new
name|SimplePanel
argument_list|()
expr_stmt|;
name|iSeparators
index|[
name|day
index|]
operator|.
name|setStyleName
argument_list|(
literal|"day-separator"
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|add
argument_list|(
name|iSeparators
index|[
name|day
index|]
argument_list|,
name|iCellWidth
operator|*
name|day
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DOM
operator|.
name|setStyleAttribute
argument_list|(
name|iSeparators
index|[
name|day
index|]
operator|.
name|getElement
argument_list|()
argument_list|,
literal|"left"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iCellWidth
operator|*
name|day
argument_list|)
argument_list|)
expr_stmt|;
name|iSeparators
index|[
name|day
index|]
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|iSeparators
index|[
name|day
index|]
operator|!=
literal|null
condition|)
name|iSeparators
index|[
name|day
index|]
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|iHeader
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iDayLabels
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
operator|-
literal|1
init|;
name|i
operator|<
name|iNrDays
condition|;
name|i
operator|++
control|)
block|{
name|SimplePanel
name|sp
init|=
operator|new
name|SimplePanel
argument_list|()
decl_stmt|;
name|sp
operator|.
name|setStyleName
argument_list|(
literal|"header-time-interval"
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|iCalendar
operator|!=
literal|null
condition|)
name|sp
operator|.
name|setWidget
argument_list|(
name|iCalendar
argument_list|)
expr_stmt|;
name|sp
operator|.
name|setWidth
argument_list|(
literal|"30px"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sp
operator|.
name|setWidth
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iCellWidth
argument_list|)
argument_list|)
expr_stmt|;
name|Label
name|l
init|=
operator|new
name|Label
argument_list|(
name|CONSTANTS
operator|.
name|longDays
argument_list|()
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|iDayLabels
operator|.
name|add
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|sp
operator|.
name|setWidget
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
name|iHeader
operator|.
name|add
argument_list|(
name|sp
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
name|meetings
range|:
name|iMeetings
control|)
for|for
control|(
name|Meeting
name|meeting
range|:
name|meetings
control|)
name|meeting
operator|.
name|move
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|firstSlot
parameter_list|()
block|{
for|for
control|(
name|int
name|slot
init|=
literal|0
init|;
name|slot
operator|<
literal|24
operator|*
literal|60
operator|/
literal|5
condition|;
name|slot
operator|++
control|)
block|{
for|for
control|(
name|int
name|day
init|=
literal|0
init|;
name|day
operator|<
literal|7
condition|;
name|day
operator|++
control|)
block|{
if|if
condition|(
name|iMeetingTable
index|[
name|day
index|]
index|[
name|slot
index|]
operator|!=
literal|null
operator|&&
operator|!
name|iMeetingTable
index|[
name|day
index|]
index|[
name|slot
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|slot
return|;
block|}
block|}
return|return
literal|24
operator|*
literal|60
operator|/
literal|5
operator|+
literal|1
return|;
block|}
specifier|public
name|int
name|lastSlot
parameter_list|()
block|{
for|for
control|(
name|int
name|slot
init|=
literal|24
operator|*
literal|60
operator|/
literal|5
operator|-
literal|1
init|;
name|slot
operator|>=
literal|0
condition|;
name|slot
operator|--
control|)
block|{
for|for
control|(
name|int
name|day
init|=
literal|0
init|;
name|day
operator|<
literal|7
condition|;
name|day
operator|++
control|)
block|{
if|if
condition|(
name|iMeetingTable
index|[
name|day
index|]
index|[
name|slot
index|]
operator|!=
literal|null
operator|&&
operator|!
name|iMeetingTable
index|[
name|day
index|]
index|[
name|slot
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|slot
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|shrink
parameter_list|()
block|{
name|boolean
name|hasSat
init|=
literal|false
decl_stmt|,
name|hasSun
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|slot
init|=
literal|0
init|;
name|slot
operator|<
literal|24
operator|*
literal|60
operator|/
literal|5
condition|;
name|slot
operator|++
control|)
block|{
if|if
condition|(
name|iMeetingTable
index|[
literal|5
index|]
index|[
name|slot
index|]
operator|!=
literal|null
operator|&&
operator|!
name|iMeetingTable
index|[
literal|5
index|]
index|[
name|slot
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|hasSat
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|iMeetingTable
index|[
literal|6
index|]
index|[
name|slot
index|]
operator|!=
literal|null
operator|&&
operator|!
name|iMeetingTable
index|[
literal|6
index|]
index|[
name|slot
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|hasSun
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|hasSat
operator|&&
operator|!
name|hasSun
condition|)
name|setNrDays
argument_list|(
literal|5
argument_list|)
expr_stmt|;
if|else if
condition|(
operator|!
name|hasSun
condition|)
name|setNrDays
argument_list|(
literal|6
argument_list|)
expr_stmt|;
else|else
name|setNrDays
argument_list|(
literal|7
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getWidth
parameter_list|()
block|{
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|iNrDays
operator|*
name|iCellWidth
operator|+
literal|30
operator|+
name|ToolBox
operator|.
name|getScrollBarWidth
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|scrollDown
parameter_list|()
block|{
name|iScrollPanel
operator|.
name|setWidth
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iNrDays
operator|*
name|iCellWidth
operator|+
literal|30
operator|+
name|ToolBox
operator|.
name|getScrollBarWidth
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
if|if
condition|(
name|iScrollPanel
operator|instanceof
name|ScrollPanel
condition|)
operator|(
operator|(
name|ScrollPanel
operator|)
name|iScrollPanel
operator|)
operator|.
name|setVerticalScrollPosition
argument_list|(
literal|350
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
for|for
control|(
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
name|meetings
range|:
name|iMeetings
control|)
for|for
control|(
name|Meeting
name|meeting
range|:
name|meetings
control|)
name|iPanel
operator|.
name|remove
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
name|iMeetings
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iMeetingTable
operator|.
name|length
condition|;
name|i
operator|++
control|)
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|iMeetingTable
index|[
name|i
index|]
operator|.
name|length
condition|;
name|j
operator|++
control|)
if|if
condition|(
name|iMeetingTable
index|[
name|i
index|]
index|[
name|j
index|]
operator|!=
literal|null
condition|)
name|iMeetingTable
index|[
name|i
index|]
index|[
name|j
index|]
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|getColor
parameter_list|(
name|EventInterface
name|event
parameter_list|)
block|{
name|String
name|color
init|=
name|iColors
operator|.
name|get
argument_list|(
name|event
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|color
operator|==
literal|null
condition|)
block|{
name|color
operator|=
name|CONSTANTS
operator|.
name|meetingColors
argument_list|()
index|[
name|iColors
operator|.
name|size
argument_list|()
operator|%
name|CONSTANTS
operator|.
name|meetingColors
argument_list|()
operator|.
name|length
index|]
expr_stmt|;
name|iColors
operator|.
name|put
argument_list|(
name|event
operator|.
name|getId
argument_list|()
argument_list|,
name|color
argument_list|)
expr_stmt|;
block|}
return|return
name|color
return|;
block|}
specifier|protected
name|Meeting
name|addMeeting
parameter_list|(
name|EventInterface
name|event
parameter_list|,
name|int
name|day
parameter_list|,
name|int
name|startSlot
parameter_list|,
name|int
name|length
parameter_list|,
name|String
name|name
parameter_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
name|note
parameter_list|,
name|String
name|title
parameter_list|,
name|String
name|color
parameter_list|,
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
name|meetings
parameter_list|)
block|{
name|int
name|col
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|iMeetingTable
index|[
name|day
index|]
index|[
name|startSlot
operator|+
name|i
index|]
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Meeting
argument_list|>
name|j
init|=
name|iMeetingTable
index|[
name|day
index|]
index|[
name|startSlot
operator|+
name|i
index|]
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Meeting
name|m
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|getColumn
argument_list|()
operator|>
name|col
condition|)
name|col
operator|=
name|m
operator|.
name|getColumn
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|col
operator|+=
literal|1
expr_stmt|;
name|int
name|cols
init|=
name|col
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|col
operator|>
literal|0
condition|)
block|{
name|boolean
name|used
index|[]
init|=
operator|new
name|boolean
index|[
name|cols
operator|-
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cols
operator|-
literal|1
condition|;
name|i
operator|++
control|)
name|used
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|iMeetingTable
index|[
name|day
index|]
index|[
name|startSlot
operator|+
name|i
index|]
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Meeting
argument_list|>
name|j
init|=
name|iMeetingTable
index|[
name|day
index|]
index|[
name|startSlot
operator|+
name|i
index|]
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Meeting
name|m
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|used
index|[
name|m
operator|.
name|getColumn
argument_list|()
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cols
operator|-
literal|1
condition|;
name|i
operator|++
control|)
if|if
condition|(
operator|!
name|used
index|[
name|i
index|]
condition|)
block|{
name|col
operator|=
name|i
expr_stmt|;
name|cols
operator|--
expr_stmt|;
break|break;
block|}
block|}
name|Meeting
name|meeting
init|=
operator|new
name|Meeting
argument_list|(
name|event
argument_list|,
name|name
argument_list|,
name|note
argument_list|,
name|day
argument_list|,
name|startSlot
argument_list|,
name|length
argument_list|,
name|col
argument_list|,
name|cols
argument_list|,
name|meetings
argument_list|)
decl_stmt|;
name|meeting
operator|.
name|addStyleName
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setTitle
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|add
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|iMeetingTable
index|[
name|day
index|]
index|[
name|startSlot
operator|+
name|i
index|]
operator|==
literal|null
condition|)
name|iMeetingTable
index|[
name|day
index|]
index|[
name|startSlot
operator|+
name|i
index|]
operator|=
operator|new
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Meeting
argument_list|>
name|j
init|=
name|iMeetingTable
index|[
name|day
index|]
index|[
name|startSlot
operator|+
name|i
index|]
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Meeting
name|m
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|m
operator|.
name|setNrColumns
argument_list|(
name|cols
argument_list|)
expr_stmt|;
block|}
name|iMeetingTable
index|[
name|day
index|]
index|[
name|startSlot
operator|+
name|i
index|]
operator|.
name|add
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
block|}
return|return
name|meeting
return|;
block|}
specifier|public
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
name|addEvent
parameter_list|(
name|EventInterface
name|event
parameter_list|)
block|{
return|return
name|addEvent
argument_list|(
name|event
argument_list|,
name|event
operator|.
name|getMeetings
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
name|addEvent
parameter_list|(
name|EventInterface
name|event
parameter_list|,
name|Collection
argument_list|<
name|MeetingInterface
argument_list|>
name|eventMeetings
parameter_list|)
block|{
name|String
name|color
init|=
name|getColor
argument_list|(
name|event
argument_list|)
decl_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
name|done
init|=
operator|new
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|MeetingInterface
argument_list|>
name|meetings
init|=
operator|new
name|ArrayList
argument_list|<
name|MeetingInterface
argument_list|>
argument_list|(
name|eventMeetings
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|meetings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|MeetingInterface
name|meeting
init|=
literal|null
decl_stmt|;
name|TreeSet
argument_list|<
name|MeetingInterface
argument_list|>
name|dates
init|=
operator|new
name|TreeSet
argument_list|<
name|MeetingInterface
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|MeetingInterface
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|MeetingInterface
name|m1
parameter_list|,
name|MeetingInterface
name|m2
parameter_list|)
block|{
name|int
name|cmp
init|=
operator|new
name|Integer
argument_list|(
name|m1
operator|.
name|getDayOfYear
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
operator|new
name|Integer
argument_list|(
name|m2
operator|.
name|getDayOfYear
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|m1
operator|.
name|getId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|m2
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|MeetingInterface
argument_list|>
name|i
init|=
name|meetings
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|MeetingInterface
name|m
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|meeting
operator|==
literal|null
condition|)
block|{
name|meeting
operator|=
name|m
expr_stmt|;
name|dates
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|meeting
operator|.
name|getStartSlot
argument_list|()
operator|==
name|m
operator|.
name|getStartSlot
argument_list|()
operator|&&
name|meeting
operator|.
name|getEndSlot
argument_list|()
operator|==
name|m
operator|.
name|getEndSlot
argument_list|()
operator|&&
name|meeting
operator|.
name|getDayOfWeek
argument_list|()
operator|==
name|m
operator|.
name|getDayOfWeek
argument_list|()
condition|)
block|{
name|dates
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|String
name|dateString
init|=
literal|null
decl_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|rooms
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|lastDay
init|=
literal|0
decl_stmt|;
name|String
name|endDate
init|=
literal|null
decl_stmt|;
for|for
control|(
name|MeetingInterface
name|m
range|:
name|dates
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
name|rooms
operator|.
name|add
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|dateString
operator|==
literal|null
condition|)
block|{
name|dateString
operator|=
name|m
operator|.
name|getMeetingDate
argument_list|()
expr_stmt|;
name|lastDay
operator|=
name|m
operator|.
name|getDayOfYear
argument_list|()
expr_stmt|;
name|endDate
operator|=
literal|null
expr_stmt|;
block|}
if|else if
condition|(
name|lastDay
operator|==
name|m
operator|.
name|getDayOfYear
argument_list|()
condition|)
block|{
block|}
if|else if
condition|(
name|lastDay
operator|+
literal|7
operator|==
name|m
operator|.
name|getDayOfYear
argument_list|()
condition|)
block|{
name|endDate
operator|=
name|m
operator|.
name|getMeetingDate
argument_list|()
expr_stmt|;
name|lastDay
operator|=
name|m
operator|.
name|getDayOfYear
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|endDate
operator|!=
literal|null
condition|)
name|dateString
operator|+=
literal|" - "
operator|+
name|endDate
expr_stmt|;
name|dateString
operator|+=
literal|", "
operator|+
name|m
operator|.
name|getMeetingDate
argument_list|()
expr_stmt|;
name|lastDay
operator|=
name|m
operator|.
name|getDayOfYear
argument_list|()
expr_stmt|;
name|endDate
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|endDate
operator|!=
literal|null
condition|)
block|{
name|dateString
operator|+=
literal|" - "
operator|+
name|endDate
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|String
argument_list|>
name|notes
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|notes
operator|.
name|add
argument_list|(
name|meeting
operator|.
name|getMeetingTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iOneWeek
condition|)
name|notes
operator|.
name|add
argument_list|(
name|dateString
argument_list|)
expr_stmt|;
name|String
name|roomString
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|room
range|:
name|rooms
control|)
block|{
if|if
condition|(
operator|!
name|roomString
operator|.
name|isEmpty
argument_list|()
condition|)
name|roomString
operator|+=
literal|", "
expr_stmt|;
name|roomString
operator|+=
name|room
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|iRoomResource
condition|)
name|notes
operator|.
name|add
argument_list|(
name|roomString
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|hasInstructor
argument_list|()
condition|)
name|notes
operator|.
name|add
argument_list|(
name|event
operator|.
name|getInstructor
argument_list|()
operator|.
name|replace
argument_list|(
literal|"|"
argument_list|,
literal|"<br>"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|hasSponsor
argument_list|()
condition|)
name|notes
operator|.
name|add
argument_list|(
name|event
operator|.
name|getSponsor
argument_list|()
argument_list|)
expr_stmt|;
name|done
operator|.
name|add
argument_list|(
name|addMeeting
argument_list|(
name|event
argument_list|,
name|meeting
operator|.
name|getDayOfWeek
argument_list|()
argument_list|,
name|meeting
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|meeting
operator|.
name|getEndSlot
argument_list|()
operator|-
name|meeting
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|event
operator|.
name|getName
argument_list|()
operator|+
literal|" ("
operator|+
operator|(
name|event
operator|.
name|hasInstruction
argument_list|()
condition|?
name|event
operator|.
name|getInstruction
argument_list|()
else|:
name|event
operator|.
name|getType
argument_list|()
operator|)
operator|+
literal|")"
argument_list|,
name|notes
argument_list|,
operator|(
name|event
operator|.
name|hasInstruction
argument_list|()
condition|?
name|event
operator|.
name|getInstruction
argument_list|()
else|:
name|event
operator|.
name|getType
argument_list|()
operator|)
operator|+
literal|" "
operator|+
name|event
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|dateString
operator|+
literal|" "
operator|+
name|meeting
operator|.
name|getMeetingTime
argument_list|()
operator|+
literal|" "
operator|+
name|roomString
argument_list|,
name|color
argument_list|,
name|done
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iMeetings
operator|.
name|add
argument_list|(
name|done
argument_list|)
expr_stmt|;
return|return
name|done
return|;
block|}
specifier|public
interface|interface
name|MeetingClickHandler
block|{
specifier|public
name|void
name|onMeetingClick
parameter_list|(
name|MeetingClickEvent
name|event
parameter_list|)
function_decl|;
block|}
specifier|public
class|class
name|MeetingClickEvent
block|{
specifier|private
name|Meeting
name|iMeeting
decl_stmt|;
name|MeetingClickEvent
parameter_list|(
name|Meeting
name|meeting
parameter_list|)
block|{
name|iMeeting
operator|=
name|meeting
expr_stmt|;
block|}
specifier|public
name|EventInterface
name|getEvent
parameter_list|()
block|{
return|return
name|iMeeting
operator|.
name|getEvent
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|addMeetingClickHandler
parameter_list|(
name|MeetingClickHandler
name|h
parameter_list|)
block|{
name|iMeetingClickHandlers
operator|.
name|add
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
specifier|public
class|class
name|Meeting
extends|extends
name|AbsolutePanel
block|{
specifier|private
name|EventInterface
name|iEvent
decl_stmt|;
specifier|private
name|int
name|iColumn
decl_stmt|,
name|iDay
decl_stmt|,
name|iNrColumns
decl_stmt|;
specifier|private
name|int
name|iLeft
decl_stmt|,
name|iWidth
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
name|iMeetings
decl_stmt|;
specifier|private
name|HorizontalPanel
name|iHeaderPanel
decl_stmt|;
specifier|private
name|boolean
name|iDummy
init|=
literal|false
decl_stmt|;
specifier|private
name|Meeting
parameter_list|(
name|EventInterface
name|event
parameter_list|,
name|String
name|name
parameter_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
name|note
parameter_list|,
name|int
name|day
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|,
name|int
name|column
parameter_list|,
name|int
name|nrColumns
parameter_list|,
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
name|meetings
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|iEvent
operator|=
name|event
expr_stmt|;
name|iMeetings
operator|=
name|meetings
expr_stmt|;
name|iDay
operator|=
name|day
expr_stmt|;
name|iColumn
operator|=
name|column
expr_stmt|;
name|iNrColumns
operator|=
name|nrColumns
expr_stmt|;
name|iHeaderPanel
operator|=
operator|new
name|HorizontalPanel
argument_list|()
expr_stmt|;
name|iHeaderPanel
operator|.
name|setStylePrimaryName
argument_list|(
literal|"header"
argument_list|)
expr_stmt|;
name|Label
name|nameLabel
init|=
operator|new
name|Label
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|nameLabel
operator|.
name|setStyleName
argument_list|(
literal|"label"
argument_list|)
expr_stmt|;
name|iHeaderPanel
operator|.
name|add
argument_list|(
name|nameLabel
argument_list|)
expr_stmt|;
name|SimplePanel
name|mbot
init|=
operator|new
name|SimplePanel
argument_list|()
decl_stmt|;
name|mbot
operator|.
name|setStylePrimaryName
argument_list|(
literal|"footer"
argument_list|)
expr_stmt|;
name|String
name|notes
init|=
literal|""
decl_stmt|;
name|String
name|delim
init|=
literal|"<br>"
decl_stmt|;
if|if
condition|(
name|note
operator|.
name|size
argument_list|()
operator|>
literal|2
operator|&&
name|length
operator|<
literal|12
condition|)
name|delim
operator|=
literal|", "
expr_stmt|;
if|if
condition|(
name|note
operator|.
name|size
argument_list|()
operator|>
literal|3
operator|&&
name|length
operator|<
literal|18
condition|)
name|delim
operator|=
literal|", "
expr_stmt|;
for|for
control|(
name|String
name|n
range|:
name|note
control|)
block|{
if|if
condition|(
name|n
operator|==
literal|null
operator|||
name|n
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|notes
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|notes
operator|+=
name|delim
expr_stmt|;
name|notes
operator|+=
literal|"<span  style=\"white-space: nowrap\">"
operator|+
name|n
operator|+
literal|"</span>"
expr_stmt|;
block|}
name|mbot
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|notes
argument_list|)
argument_list|)
expr_stmt|;
name|setStylePrimaryName
argument_list|(
literal|"meeting"
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|iHeaderPanel
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|mbot
argument_list|)
expr_stmt|;
name|iWidth
operator|=
operator|(
name|iCellWidth
operator|-
literal|6
operator|)
operator|/
name|nrColumns
operator|+
operator|(
name|column
operator|+
literal|1
operator|!=
name|nrColumns
operator|&&
name|nrColumns
operator|>
literal|1
condition|?
operator|-
literal|3
else|:
literal|0
operator|)
expr_stmt|;
name|setSize
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iWidth
argument_list|)
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iCellHeight
operator|*
name|length
operator|/
literal|12
operator|-
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|DOM
operator|.
name|setStyleAttribute
argument_list|(
name|getElement
argument_list|()
argument_list|,
literal|"position"
argument_list|,
literal|"absolute"
argument_list|)
expr_stmt|;
name|iLeft
operator|=
literal|4
operator|+
name|iCellWidth
operator|*
name|day
operator|+
name|column
operator|*
operator|(
name|iCellWidth
operator|-
literal|6
operator|)
operator|/
name|nrColumns
expr_stmt|;
name|DOM
operator|.
name|setStyleAttribute
argument_list|(
name|getElement
argument_list|()
argument_list|,
literal|"left"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iLeft
argument_list|)
argument_list|)
expr_stmt|;
name|DOM
operator|.
name|setStyleAttribute
argument_list|(
name|getElement
argument_list|()
argument_list|,
literal|"top"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|1
operator|+
name|iCellHeight
operator|*
name|start
operator|/
literal|12
operator|-
name|iCellHeight
operator|*
name|iStart
argument_list|)
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONCLICK
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEOVER
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEMOVE
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEOUT
argument_list|)
expr_stmt|;
block|}
specifier|public
name|EventInterface
name|getEvent
parameter_list|()
block|{
return|return
name|iEvent
return|;
block|}
specifier|public
name|void
name|addIcon
parameter_list|(
name|Widget
name|image
parameter_list|)
block|{
name|iHeaderPanel
operator|.
name|add
argument_list|(
name|image
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onBrowserEvent
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
if|if
condition|(
name|iDummy
condition|)
return|return;
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Element
name|target
init|=
name|DOM
operator|.
name|eventGetTarget
argument_list|(
name|event
argument_list|)
decl_stmt|;
name|boolean
name|anchor
init|=
literal|false
decl_stmt|;
for|for
control|(
init|;
name|target
operator|!=
literal|null
condition|;
name|target
operator|=
name|DOM
operator|.
name|getParent
argument_list|(
name|target
argument_list|)
control|)
block|{
name|String
name|tag
init|=
name|DOM
operator|.
name|getElementProperty
argument_list|(
name|target
argument_list|,
literal|"tagName"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tag
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"a"
argument_list|)
condition|)
block|{
name|anchor
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|else if
condition|(
name|tag
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"div"
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
name|EventTarget
name|related
init|=
name|event
operator|.
name|getRelatedEventTarget
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|DOM
operator|.
name|eventGetType
argument_list|(
name|event
argument_list|)
condition|)
block|{
case|case
name|Event
operator|.
name|ONCLICK
case|:
name|setWidth
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iWidth
argument_list|)
argument_list|)
expr_stmt|;
name|DOM
operator|.
name|setStyleAttribute
argument_list|(
name|getElement
argument_list|()
argument_list|,
literal|"zIndex"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|DOM
operator|.
name|setStyleAttribute
argument_list|(
name|getElement
argument_list|()
argument_list|,
literal|"left"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iLeft
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Meeting
name|meeting
range|:
name|iMeetings
control|)
name|meeting
operator|.
name|removeStyleName
argument_list|(
literal|"meeting-selected"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|anchor
condition|)
block|{
name|MeetingClickEvent
name|e
init|=
operator|new
name|MeetingClickEvent
argument_list|(
name|Meeting
operator|.
name|this
argument_list|)
decl_stmt|;
for|for
control|(
name|MeetingClickHandler
name|h
range|:
name|iMeetingClickHandlers
control|)
name|h
operator|.
name|onMeetingClick
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Event
operator|.
name|ONMOUSEOVER
case|:
if|if
condition|(
name|related
operator|==
literal|null
operator|||
operator|!
name|getElement
argument_list|()
operator|.
name|isOrHasChild
argument_list|(
operator|(
name|Element
operator|)
name|related
operator|.
name|cast
argument_list|()
argument_list|)
condition|)
block|{
name|setWidth
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iCellWidth
operator|-
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setZIndex
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|DOM
operator|.
name|setStyleAttribute
argument_list|(
name|getElement
argument_list|()
argument_list|,
literal|"left"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|4
operator|+
name|iCellWidth
operator|*
name|iDay
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Meeting
name|meeting
range|:
name|iMeetings
control|)
name|meeting
operator|.
name|addStyleName
argument_list|(
literal|"meeting-selected"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Event
operator|.
name|ONMOUSEOUT
case|:
if|if
condition|(
name|related
operator|==
literal|null
operator|||
operator|!
name|getElement
argument_list|()
operator|.
name|isOrHasChild
argument_list|(
operator|(
name|Element
operator|)
name|related
operator|.
name|cast
argument_list|()
argument_list|)
condition|)
block|{
name|setWidth
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iWidth
argument_list|)
argument_list|)
expr_stmt|;
name|DOM
operator|.
name|setStyleAttribute
argument_list|(
name|getElement
argument_list|()
argument_list|,
literal|"zIndex"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|DOM
operator|.
name|setStyleAttribute
argument_list|(
name|getElement
argument_list|()
argument_list|,
literal|"left"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iLeft
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Meeting
name|meeting
range|:
name|iMeetings
control|)
name|meeting
operator|.
name|removeStyleName
argument_list|(
literal|"meeting-selected"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Event
operator|.
name|ONMOUSEMOVE
case|:
name|int
name|relativeX
init|=
name|event
operator|.
name|getClientX
argument_list|()
operator|-
name|getElement
argument_list|()
operator|.
name|getAbsoluteLeft
argument_list|()
operator|+
name|getElement
argument_list|()
operator|.
name|getScrollLeft
argument_list|()
operator|+
name|getElement
argument_list|()
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|getScrollLeft
argument_list|()
decl_stmt|;
if|if
condition|(
name|relativeX
operator|<
name|iLeft
operator|-
literal|6
operator|-
name|iDay
operator|*
name|iCellWidth
operator|||
name|relativeX
operator|>
name|iLeft
operator|-
literal|2
operator|-
name|iDay
operator|*
name|iCellWidth
operator|+
name|iWidth
condition|)
block|{
name|setWidth
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iWidth
argument_list|)
argument_list|)
expr_stmt|;
name|DOM
operator|.
name|setStyleAttribute
argument_list|(
name|getElement
argument_list|()
argument_list|,
literal|"zIndex"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|DOM
operator|.
name|setStyleAttribute
argument_list|(
name|getElement
argument_list|()
argument_list|,
literal|"left"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iLeft
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
name|super
operator|.
name|onBrowserEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setNrColumns
parameter_list|(
name|int
name|nrColumns
parameter_list|)
block|{
if|if
condition|(
name|nrColumns
operator|==
name|iNrColumns
condition|)
return|return;
name|iNrColumns
operator|=
name|nrColumns
expr_stmt|;
name|move
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|move
parameter_list|()
block|{
name|iWidth
operator|=
operator|(
name|iCellWidth
operator|-
literal|6
operator|)
operator|/
name|iNrColumns
operator|+
operator|(
name|iColumn
operator|+
literal|1
operator|!=
name|iNrColumns
operator|&&
name|iNrColumns
operator|>
literal|1
condition|?
operator|-
literal|3
else|:
literal|0
operator|)
expr_stmt|;
name|iLeft
operator|=
literal|4
operator|+
name|iCellWidth
operator|*
name|iDay
operator|+
name|iColumn
operator|*
operator|(
name|iCellWidth
operator|-
literal|6
operator|)
operator|/
name|iNrColumns
expr_stmt|;
name|setWidth
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iWidth
argument_list|)
argument_list|)
expr_stmt|;
name|DOM
operator|.
name|setStyleAttribute
argument_list|(
name|getElement
argument_list|()
argument_list|,
literal|"left"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iLeft
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setTitle
parameter_list|(
name|String
name|title
parameter_list|)
block|{
name|super
operator|.
name|setTitle
argument_list|(
name|title
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getColumn
parameter_list|()
block|{
return|return
name|iColumn
return|;
block|}
specifier|public
name|int
name|getDay
parameter_list|()
block|{
return|return
name|iDay
return|;
block|}
specifier|public
name|int
name|getNrColumns
parameter_list|()
block|{
return|return
name|iNrColumns
return|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|Widget
name|w
parameter_list|)
block|{
name|super
operator|.
name|add
argument_list|(
name|w
argument_list|,
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setDummy
parameter_list|()
block|{
name|iDummy
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

