begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.0 (University Timetabling Application)  * Copyright (C) 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|events
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|ImageLink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|P
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|ContactInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|MeetingInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|ResourceInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|ResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|SelectionInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|WeekInterface
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|EventTarget
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Cursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Position
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Unit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseDownEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseDownHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseUpEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseUpHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|shared
operator|.
name|HandlerRegistration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|DateTimeFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DOM
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|AbsolutePanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|PopupPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|RootPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ScrollPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|TimeGrid
extends|extends
name|Composite
block|{
specifier|public
specifier|static
specifier|final
name|GwtResources
name|RESOURCES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtResources
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|GwtConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|DateTimeFormat
name|sDateFormat
init|=
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|eventDateFormat
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|P
name|iContainer
decl_stmt|;
specifier|private
name|ScrollPanel
name|iScrollPanel
decl_stmt|;
specifier|private
name|P
name|iPanel
decl_stmt|;
specifier|private
name|P
name|iGrid
decl_stmt|;
specifier|private
name|P
name|iHeader
decl_stmt|,
name|iDock
decl_stmt|;
specifier|private
name|P
name|iVLines
decl_stmt|;
specifier|private
name|P
name|iSelections
decl_stmt|;
specifier|private
name|P
index|[]
name|iSeparators
init|=
operator|new
name|P
index|[
literal|7
index|]
decl_stmt|;
specifier|private
name|P
name|iWorkingHours
decl_stmt|;
specifier|private
name|P
name|iTimes
decl_stmt|;
specifier|private
name|ImageLink
name|iCalendar
decl_stmt|;
specifier|private
name|SelectionLayer
name|iSelectionLayer
decl_stmt|;
specifier|private
name|List
argument_list|<
name|SelectionInterface
argument_list|>
name|iAllSelections
init|=
operator|new
name|ArrayList
argument_list|<
name|SelectionInterface
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|ResourceType
name|iResourceType
decl_stmt|;
specifier|private
name|boolean
name|iShowShadows
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
argument_list|>
name|iMeetings
init|=
operator|new
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
index|[]
index|[]
name|iMeetingTable
init|=
operator|new
name|ArrayList
index|[
literal|7
index|]
index|[
literal|24
operator|*
literal|60
operator|/
literal|5
index|]
decl_stmt|;
specifier|private
name|int
name|iCellWidth
init|=
literal|150
decl_stmt|;
specifier|private
name|int
name|iCellHeight
init|=
literal|60
decl_stmt|;
specifier|private
name|int
index|[]
name|iDays
init|=
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|}
decl_stmt|;
specifier|private
name|int
name|iStart
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|iEnd
init|=
literal|24
decl_stmt|;
specifier|private
name|int
name|iTotalNrColumns
init|=
literal|0
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|MeetingClickHandler
argument_list|>
name|iMeetingClickHandlers
init|=
operator|new
name|ArrayList
argument_list|<
name|MeetingClickHandler
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|iColors
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ResourceInterface
argument_list|>
name|iRoomResources
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|WeekInterface
argument_list|>
name|iSelectedWeeks
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|HandlerRegistration
argument_list|>
name|iHandlerRegistrations
init|=
operator|new
name|ArrayList
argument_list|<
name|HandlerRegistration
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
specifier|static
enum|enum
name|Mode
block|{
name|FILLSPACE
block|,
name|PROPORTIONAL
block|,
name|OVERLAP
block|}
specifier|private
name|Mode
name|iMode
init|=
name|Mode
operator|.
name|FILLSPACE
decl_stmt|;
specifier|public
name|TimeGrid
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|}
argument_list|,
operator|(
name|int
operator|)
operator|(
literal|0.9
operator|*
name|Window
operator|.
name|getClientWidth
argument_list|()
operator|/
literal|5
operator|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|24
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|P
argument_list|>
name|iDayLabels
init|=
operator|new
name|ArrayList
argument_list|<
name|P
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|TimeGrid
parameter_list|(
name|HashMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|colors
parameter_list|,
name|int
index|[]
name|days
parameter_list|,
name|int
name|cellWidth
parameter_list|,
name|boolean
name|print
parameter_list|,
name|boolean
name|scroll
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|iColors
operator|=
name|colors
expr_stmt|;
name|iDays
operator|=
name|days
expr_stmt|;
name|iCellWidth
operator|=
name|cellWidth
expr_stmt|;
name|iStart
operator|=
name|start
expr_stmt|;
name|iEnd
operator|=
name|end
expr_stmt|;
name|iShowShadows
operator|=
operator|!
name|print
expr_stmt|;
name|iContainer
operator|=
operator|new
name|P
argument_list|(
literal|"unitime-TimeGrid"
argument_list|)
expr_stmt|;
name|iContainer
operator|.
name|setSize
argument_list|(
literal|40
operator|+
name|iDays
operator|.
name|length
operator|*
name|iCellWidth
argument_list|,
name|scroll
condition|?
literal|575
else|:
literal|25
operator|+
name|iCellHeight
operator|*
operator|(
name|iEnd
operator|-
name|iStart
operator|)
argument_list|)
expr_stmt|;
name|iHeader
operator|=
operator|new
name|P
argument_list|(
literal|"calendar-header"
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setWidth
argument_list|(
name|iDays
operator|.
name|length
operator|*
name|iCellWidth
argument_list|)
expr_stmt|;
name|iDock
operator|=
operator|new
name|P
argument_list|(
literal|"calendar-dock"
argument_list|)
expr_stmt|;
name|iDock
operator|.
name|setHeight
argument_list|(
name|iCellHeight
operator|*
operator|(
name|iEnd
operator|-
name|iStart
operator|)
operator|+
literal|5
argument_list|)
expr_stmt|;
name|iPanel
operator|=
operator|new
name|P
argument_list|(
literal|"calendar-panel"
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|setSize
argument_list|(
name|iDays
operator|.
name|length
operator|*
name|iCellWidth
operator|+
literal|5
argument_list|,
name|iCellHeight
operator|*
operator|(
name|iEnd
operator|-
name|iStart
operator|)
argument_list|)
expr_stmt|;
name|iTimes
operator|=
operator|new
name|P
argument_list|(
literal|"calendar-times"
argument_list|)
expr_stmt|;
name|iTimes
operator|.
name|setHeight
argument_list|(
name|iCellHeight
operator|*
operator|(
name|iEnd
operator|-
name|iStart
operator|)
argument_list|)
expr_stmt|;
name|iCalendar
operator|=
operator|new
name|ImageLink
argument_list|()
expr_stmt|;
name|iCalendar
operator|.
name|setImage
argument_list|(
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|calendar
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iCalendar
operator|.
name|setTarget
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|iCalendar
operator|.
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|exportICalendar
argument_list|()
argument_list|)
expr_stmt|;
name|iCalendar
operator|.
name|addStyleName
argument_list|(
literal|"calendar"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|print
condition|)
name|iContainer
operator|.
name|add
argument_list|(
name|iCalendar
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iDays
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|P
name|sp
init|=
operator|new
name|P
argument_list|(
literal|"header-time-interval"
argument_list|)
decl_stmt|;
name|sp
operator|.
name|setWidth
argument_list|(
name|iCellWidth
argument_list|)
expr_stmt|;
name|sp
operator|.
name|setText
argument_list|(
name|CONSTANTS
operator|.
name|longDays
argument_list|()
index|[
name|iDays
index|[
name|i
index|]
index|]
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|add
argument_list|(
name|sp
argument_list|,
name|i
operator|*
name|iCellWidth
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|iDayLabels
operator|.
name|add
argument_list|(
name|sp
argument_list|)
expr_stmt|;
block|}
name|iGrid
operator|=
operator|new
name|P
argument_list|(
literal|"calendar-grid"
argument_list|)
expr_stmt|;
name|iWorkingHours
operator|=
operator|new
name|P
argument_list|(
literal|"working-hours"
argument_list|)
expr_stmt|;
name|iWorkingHours
operator|.
name|setSize
argument_list|(
name|iCellWidth
operator|*
name|nrWorkDays
argument_list|()
argument_list|,
name|iCellHeight
operator|*
literal|10
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|add
argument_list|(
name|iWorkingHours
argument_list|,
name|iCellWidth
operator|*
name|firstWorkDay
argument_list|()
argument_list|,
literal|15
operator|*
name|iCellHeight
operator|/
literal|2
operator|-
operator|(
name|iCellHeight
operator|*
name|iStart
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|iStart
init|;
name|i
operator|<
name|iEnd
condition|;
name|i
operator|++
control|)
block|{
comment|//create major interval
name|P
name|sp1
init|=
operator|new
name|P
argument_list|(
literal|"major-time-interval"
argument_list|)
decl_stmt|;
name|iGrid
operator|.
name|add
argument_list|(
name|sp1
argument_list|,
literal|0
argument_list|,
name|iCellHeight
operator|*
operator|(
name|i
operator|-
name|iStart
operator|)
argument_list|)
expr_stmt|;
name|P
name|sp3
init|=
operator|new
name|P
argument_list|(
literal|"dummy-time-interval"
argument_list|)
decl_stmt|;
name|sp3
operator|.
name|setText
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
condition|?
operator|(
name|i
operator|==
literal|0
condition|?
literal|"12am"
else|:
name|i
operator|<=
literal|11
condition|?
name|i
operator|+
literal|"am"
else|:
name|i
operator|==
literal|12
condition|?
literal|"12pm"
else|:
operator|(
name|i
operator|-
literal|12
operator|)
operator|+
literal|"pm"
operator|)
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|iTimes
operator|.
name|add
argument_list|(
name|sp3
argument_list|,
literal|0
argument_list|,
name|iCellHeight
operator|*
operator|(
name|i
operator|-
name|iStart
operator|)
argument_list|)
expr_stmt|;
name|P
name|sp2
init|=
operator|new
name|P
argument_list|(
literal|"minor-time-interval"
argument_list|)
decl_stmt|;
name|iGrid
operator|.
name|add
argument_list|(
name|sp2
argument_list|,
literal|0
argument_list|,
name|iCellHeight
operator|*
operator|(
name|i
operator|-
name|iStart
operator|)
operator|+
name|iCellHeight
operator|/
literal|2
argument_list|)
expr_stmt|;
name|P
name|sp4
init|=
operator|new
name|P
argument_list|(
literal|"dummy-time-interval"
argument_list|)
decl_stmt|;
name|iTimes
operator|.
name|add
argument_list|(
name|sp4
argument_list|,
literal|0
argument_list|,
name|iCellHeight
operator|*
operator|(
name|i
operator|-
name|iStart
operator|)
operator|+
name|iCellHeight
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|day
init|=
literal|0
init|;
name|day
operator|<
name|iDays
operator|.
name|length
condition|;
name|day
operator|++
control|)
block|{
name|iSeparators
index|[
name|day
index|]
operator|=
operator|new
name|P
argument_list|(
literal|"day-separator"
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|add
argument_list|(
name|iSeparators
index|[
name|day
index|]
argument_list|,
name|iCellWidth
operator|*
name|day
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|P
name|lastSeparator
init|=
operator|new
name|P
argument_list|(
literal|"day-separator"
argument_list|)
decl_stmt|;
name|lastSeparator
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setRight
argument_list|(
literal|0
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|lastSeparator
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setTop
argument_list|(
literal|0
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|lastSeparator
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setPosition
argument_list|(
name|Position
operator|.
name|ABSOLUTE
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|add
argument_list|(
name|lastSeparator
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|add
argument_list|(
name|iGrid
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|iDock
operator|.
name|add
argument_list|(
name|iTimes
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|iDock
operator|.
name|add
argument_list|(
name|iPanel
argument_list|,
literal|30
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|iContainer
operator|.
name|add
argument_list|(
name|iHeader
argument_list|,
literal|30
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|iVLines
operator|=
operator|new
name|P
argument_list|(
literal|"calendar-grid"
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|add
argument_list|(
name|iVLines
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|iSelections
operator|=
operator|new
name|P
argument_list|(
literal|"calendar-grid"
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|add
argument_list|(
name|iSelections
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|iSelectionLayer
operator|=
operator|new
name|SelectionLayer
argument_list|()
expr_stmt|;
name|iSelectionLayer
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|add
argument_list|(
name|iSelectionLayer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|scroll
condition|)
block|{
name|iScrollPanel
operator|=
operator|new
name|ScrollPanel
argument_list|(
name|iDock
argument_list|)
expr_stmt|;
name|iScrollPanel
operator|.
name|setStyleName
argument_list|(
literal|"calendar-scroll"
argument_list|)
expr_stmt|;
name|iContainer
operator|.
name|add
argument_list|(
name|iScrollPanel
argument_list|,
literal|0
argument_list|,
literal|20
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iContainer
operator|.
name|add
argument_list|(
name|iDock
argument_list|,
literal|0
argument_list|,
literal|20
argument_list|)
expr_stmt|;
block|}
name|initWidget
argument_list|(
name|iContainer
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|print
condition|)
block|{
name|iHandlerRegistrations
operator|.
name|add
argument_list|(
name|RootPanel
operator|.
name|get
argument_list|()
operator|.
name|addDomHandler
argument_list|(
operator|new
name|MouseUpHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseUp
parameter_list|(
name|MouseUpEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|iSelectionLayer
operator|.
name|isVisible
argument_list|()
condition|)
name|iSelectionLayer
operator|.
name|onMouseUp
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
name|MouseUpEvent
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|destroy
parameter_list|()
block|{
name|iMeetingClickHandlers
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|HandlerRegistration
name|reg
range|:
name|iHandlerRegistrations
control|)
name|reg
operator|.
name|removeHandler
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setResourceType
parameter_list|(
name|ResourceType
name|resourceType
parameter_list|)
block|{
name|iResourceType
operator|=
name|resourceType
expr_stmt|;
block|}
specifier|public
name|ResourceType
name|getResourceType
parameter_list|()
block|{
return|return
name|iResourceType
return|;
block|}
specifier|public
name|boolean
name|isShowVerticalSplit
parameter_list|()
block|{
return|return
name|getMode
argument_list|()
operator|==
name|Mode
operator|.
name|OVERLAP
operator|&&
operator|(
name|getResourceType
argument_list|()
operator|!=
name|ResourceType
operator|.
name|PERSON
operator|||
operator|!
name|isSingleWeek
argument_list|()
operator|)
return|;
block|}
specifier|public
name|boolean
name|isAllowSelection
parameter_list|()
block|{
return|return
name|getMode
argument_list|()
operator|==
name|Mode
operator|.
name|OVERLAP
operator|&&
operator|(
name|isSingleRoom
argument_list|()
operator|||
name|isSingleWeek
argument_list|()
operator|)
operator|&&
operator|(
name|getResourceType
argument_list|()
operator|!=
name|ResourceType
operator|.
name|PERSON
operator|)
return|;
block|}
specifier|private
name|boolean
name|isVerticalSplitByWeek
parameter_list|()
block|{
return|return
name|isSingleRoom
argument_list|()
operator|||
name|getResourceType
argument_list|()
operator|==
name|ResourceType
operator|.
name|PERSON
return|;
block|}
specifier|public
name|List
argument_list|<
name|WeekInterface
argument_list|>
name|getSelectedWeeks
parameter_list|()
block|{
return|return
name|iSelectedWeeks
return|;
block|}
specifier|public
name|void
name|setSelectedWeeks
parameter_list|(
name|List
argument_list|<
name|WeekInterface
argument_list|>
name|weeks
parameter_list|)
block|{
name|iSelectedWeeks
operator|=
name|weeks
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSingleWeek
parameter_list|()
block|{
return|return
name|iSelectedWeeks
operator|!=
literal|null
operator|&&
name|iSelectedWeeks
operator|.
name|size
argument_list|()
operator|==
literal|1
return|;
block|}
specifier|public
name|void
name|setRoomResources
parameter_list|(
name|List
argument_list|<
name|ResourceInterface
argument_list|>
name|roomResources
parameter_list|)
block|{
name|iRoomResources
operator|=
name|roomResources
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|ResourceInterface
argument_list|>
name|getRoomResources
parameter_list|()
block|{
return|return
name|iRoomResources
return|;
block|}
specifier|public
name|boolean
name|isSingleRoom
parameter_list|()
block|{
return|return
name|iRoomResources
operator|!=
literal|null
operator|&&
name|iRoomResources
operator|.
name|size
argument_list|()
operator|==
literal|1
return|;
block|}
specifier|public
name|void
name|setMode
parameter_list|(
name|Mode
name|mode
parameter_list|)
block|{
name|iMode
operator|=
name|mode
expr_stmt|;
name|showSelections
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Mode
name|getMode
parameter_list|()
block|{
return|return
name|iMode
return|;
block|}
specifier|public
name|void
name|setCalendarUrl
parameter_list|(
name|String
name|url
parameter_list|)
block|{
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
name|iCalendar
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iCalendar
operator|.
name|setUrl
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|iCalendar
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getCalendarUrl
parameter_list|()
block|{
return|return
operator|(
name|iCalendar
operator|.
name|isVisible
argument_list|()
condition|?
name|iCalendar
operator|.
name|getUrl
argument_list|()
else|:
literal|null
operator|)
return|;
block|}
specifier|public
name|TimeGrid
name|getPrintWidget
parameter_list|()
block|{
name|int
name|firstHour
init|=
name|firstSlot
argument_list|()
operator|/
literal|12
decl_stmt|;
name|int
name|lastHour
init|=
operator|(
literal|11
operator|+
name|lastSlot
argument_list|()
operator|)
operator|/
literal|12
decl_stmt|;
name|TimeGrid
name|tg
init|=
operator|new
name|TimeGrid
argument_list|(
name|iColors
argument_list|,
name|iDays
argument_list|,
operator|(
name|int
operator|)
operator|(
literal|1000
operator|/
name|iDays
operator|.
name|length
operator|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
operator|(
name|firstHour
operator|<
literal|7
condition|?
name|firstHour
else|:
literal|7
operator|)
argument_list|,
operator|(
name|lastHour
operator|>
literal|18
condition|?
name|lastHour
else|:
literal|18
operator|)
argument_list|)
decl_stmt|;
name|tg
operator|.
name|setSelectedWeeks
argument_list|(
name|getSelectedWeeks
argument_list|()
argument_list|)
expr_stmt|;
name|tg
operator|.
name|setRoomResources
argument_list|(
name|getRoomResources
argument_list|()
argument_list|)
expr_stmt|;
name|tg
operator|.
name|setResourceType
argument_list|(
name|getResourceType
argument_list|()
argument_list|)
expr_stmt|;
name|tg
operator|.
name|setMode
argument_list|(
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|tg
return|;
block|}
specifier|public
name|void
name|addPrintEvent
parameter_list|(
name|EventInterface
name|event
parameter_list|)
block|{
name|addPrintEvent
argument_list|(
name|event
argument_list|,
name|event
operator|.
name|getMeetings
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addPrintEvent
parameter_list|(
name|EventInterface
name|event
parameter_list|,
name|Collection
argument_list|<
name|MeetingInterface
argument_list|>
name|meetings
parameter_list|)
block|{
for|for
control|(
name|Meeting
name|m
range|:
name|addEvent
argument_list|(
name|event
argument_list|,
name|meetings
argument_list|)
control|)
block|{
name|m
operator|.
name|setDummy
argument_list|()
expr_stmt|;
name|m
operator|.
name|addStyleName
argument_list|(
literal|"meeting-selected-noshadow"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|labelDays
parameter_list|(
name|WeekInterface
name|first
parameter_list|,
name|WeekInterface
name|last
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iDays
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|iDayLabels
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|setText
argument_list|(
name|CONSTANTS
operator|.
name|longDays
argument_list|()
index|[
name|iDays
index|[
name|i
index|]
index|]
operator|+
operator|(
name|first
operator|==
literal|null
condition|?
literal|""
else|:
literal|" "
operator|+
name|first
operator|.
name|getDayNames
argument_list|()
operator|.
name|get
argument_list|(
name|iDays
index|[
name|i
index|]
argument_list|)
operator|)
operator|+
operator|(
name|last
operator|==
literal|null
condition|?
literal|""
else|:
literal|" - "
operator|+
name|last
operator|.
name|getDayNames
argument_list|()
operator|.
name|get
argument_list|(
name|iDays
index|[
name|i
index|]
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|nrWorkDays
parameter_list|()
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iDays
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|iDays
index|[
name|i
index|]
operator|<
literal|5
condition|)
name|ret
operator|++
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|private
name|int
name|firstWorkDay
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iDays
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|iDays
index|[
name|i
index|]
operator|<
literal|5
condition|)
return|return
name|i
return|;
return|return
name|iDays
operator|.
name|length
return|;
block|}
specifier|public
name|void
name|setDays
parameter_list|(
name|int
index|[]
name|days
parameter_list|)
block|{
name|iDays
operator|=
name|days
expr_stmt|;
name|iCellWidth
operator|=
operator|(
name|int
operator|)
operator|(
literal|0.9
operator|*
name|Window
operator|.
name|getClientWidth
argument_list|()
operator|/
name|iDays
operator|.
name|length
operator|)
expr_stmt|;
name|iContainer
operator|.
name|setWidth
argument_list|(
literal|40
operator|+
name|iDays
operator|.
name|length
operator|*
name|iCellWidth
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setWidth
argument_list|(
name|iDays
operator|.
name|length
operator|*
name|iCellWidth
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|setWidth
argument_list|(
name|iDays
operator|.
name|length
operator|*
name|iCellWidth
argument_list|)
expr_stmt|;
name|iWorkingHours
operator|.
name|setWidth
argument_list|(
name|iCellWidth
operator|*
name|nrWorkDays
argument_list|()
argument_list|)
expr_stmt|;
name|iWorkingHours
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setLeft
argument_list|(
name|iCellWidth
operator|*
name|firstWorkDay
argument_list|()
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|day
init|=
literal|0
init|;
name|day
operator|<
literal|7
condition|;
name|day
operator|++
control|)
block|{
if|if
condition|(
name|day
operator|<
name|iDays
operator|.
name|length
condition|)
block|{
if|if
condition|(
name|iSeparators
index|[
name|day
index|]
operator|==
literal|null
condition|)
block|{
name|iSeparators
index|[
name|day
index|]
operator|=
operator|new
name|P
argument_list|(
literal|"day-separator"
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|add
argument_list|(
name|iSeparators
index|[
name|day
index|]
argument_list|,
name|iCellWidth
operator|*
name|day
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iSeparators
index|[
name|day
index|]
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setLeft
argument_list|(
name|iCellWidth
operator|*
name|day
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|iSeparators
index|[
name|day
index|]
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|iSeparators
index|[
name|day
index|]
operator|!=
literal|null
condition|)
name|iSeparators
index|[
name|day
index|]
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|iHeader
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iDayLabels
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iDays
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|P
name|sp
init|=
operator|new
name|P
argument_list|(
literal|"header-time-interval"
argument_list|)
decl_stmt|;
name|sp
operator|.
name|setWidth
argument_list|(
name|iCellWidth
argument_list|)
expr_stmt|;
name|sp
operator|.
name|setText
argument_list|(
name|CONSTANTS
operator|.
name|longDays
argument_list|()
index|[
name|iDays
index|[
name|i
index|]
index|]
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|add
argument_list|(
name|sp
argument_list|,
name|i
operator|*
name|iCellWidth
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|iDayLabels
operator|.
name|add
argument_list|(
name|sp
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
name|meetings
range|:
name|iMeetings
control|)
for|for
control|(
name|Meeting
name|meeting
range|:
name|meetings
control|)
name|meeting
operator|.
name|move
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iSelections
operator|.
name|getWidgetCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|iSelections
operator|.
name|getWidget
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|SelectionPanel
condition|)
operator|(
operator|(
name|SelectionPanel
operator|)
name|w
operator|)
operator|.
name|move
argument_list|()
expr_stmt|;
block|}
name|iVLines
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|isShowVerticalSplit
argument_list|()
condition|)
block|{
if|if
condition|(
name|isVerticalSplitByWeek
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
name|iDays
operator|.
name|length
condition|;
name|d
operator|++
control|)
block|{
for|for
control|(
name|int
name|w
init|=
literal|0
init|;
name|w
operator|<
name|iSelectedWeeks
operator|.
name|size
argument_list|()
condition|;
name|w
operator|++
control|)
block|{
if|if
condition|(
name|w
operator|>
literal|0
condition|)
name|iVLines
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
literal|"week-separator"
argument_list|)
argument_list|,
literal|3
operator|+
name|iCellWidth
operator|*
name|d
operator|+
name|w
operator|*
operator|(
name|iCellWidth
operator|-
literal|6
operator|)
operator|/
name|iSelectedWeeks
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|P
name|p
init|=
operator|new
name|P
argument_list|(
literal|"week-title"
argument_list|)
decl_stmt|;
name|p
operator|.
name|setHTML
argument_list|(
name|iSelectedWeeks
operator|.
name|get
argument_list|(
name|w
argument_list|)
operator|.
name|getDayNames
argument_list|()
operator|.
name|get
argument_list|(
name|iDays
index|[
name|d
index|]
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"/"
argument_list|,
literal|"<br>"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setWidth
argument_list|(
operator|(
name|iCellWidth
operator|-
literal|6
operator|)
operator|/
name|iSelectedWeeks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|iVLines
operator|.
name|add
argument_list|(
name|p
argument_list|,
literal|3
operator|+
name|iCellWidth
operator|*
name|d
operator|+
name|w
operator|*
operator|(
name|iCellWidth
operator|-
literal|6
operator|)
operator|/
name|iSelectedWeeks
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
name|iDays
operator|.
name|length
condition|;
name|d
operator|++
control|)
block|{
for|for
control|(
name|int
name|w
init|=
literal|0
init|;
name|w
operator|<
name|iRoomResources
operator|.
name|size
argument_list|()
condition|;
name|w
operator|++
control|)
block|{
if|if
condition|(
name|w
operator|>
literal|0
condition|)
name|iVLines
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
literal|"week-separator"
argument_list|)
argument_list|,
literal|3
operator|+
name|iCellWidth
operator|*
name|d
operator|+
name|w
operator|*
operator|(
name|iCellWidth
operator|-
literal|6
operator|)
operator|/
name|iRoomResources
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|P
name|p
init|=
operator|new
name|P
argument_list|(
literal|"week-title"
argument_list|)
decl_stmt|;
name|p
operator|.
name|setHTML
argument_list|(
name|iRoomResources
operator|.
name|get
argument_list|(
name|w
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|"<br>"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setWidth
argument_list|(
operator|(
name|iCellWidth
operator|-
literal|6
operator|)
operator|/
name|iRoomResources
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|iVLines
operator|.
name|add
argument_list|(
name|p
argument_list|,
literal|3
operator|+
name|iCellWidth
operator|*
name|d
operator|+
name|w
operator|*
operator|(
name|iCellWidth
operator|-
literal|6
operator|)
operator|/
name|iRoomResources
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|public
name|int
name|firstSlot
parameter_list|()
block|{
for|for
control|(
name|int
name|slot
init|=
literal|0
init|;
name|slot
operator|<
literal|24
operator|*
literal|60
operator|/
literal|5
condition|;
name|slot
operator|++
control|)
block|{
for|for
control|(
name|int
name|day
init|=
literal|0
init|;
name|day
operator|<
literal|7
condition|;
name|day
operator|++
control|)
block|{
if|if
condition|(
name|iMeetingTable
index|[
name|day
index|]
index|[
name|slot
index|]
operator|!=
literal|null
operator|&&
operator|!
name|iMeetingTable
index|[
name|day
index|]
index|[
name|slot
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|slot
return|;
block|}
block|}
return|return
literal|24
operator|*
literal|60
operator|/
literal|5
operator|+
literal|1
return|;
block|}
specifier|public
name|int
name|lastSlot
parameter_list|()
block|{
for|for
control|(
name|int
name|slot
init|=
literal|24
operator|*
literal|60
operator|/
literal|5
operator|-
literal|1
init|;
name|slot
operator|>=
literal|0
condition|;
name|slot
operator|--
control|)
block|{
for|for
control|(
name|int
name|day
init|=
literal|0
init|;
name|day
operator|<
literal|7
condition|;
name|day
operator|++
control|)
block|{
if|if
condition|(
name|iMeetingTable
index|[
name|day
index|]
index|[
name|slot
index|]
operator|!=
literal|null
operator|&&
operator|!
name|iMeetingTable
index|[
name|day
index|]
index|[
name|slot
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|slot
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|shrink
parameter_list|()
block|{
name|boolean
name|hasDay
index|[]
init|=
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|}
decl_stmt|;
for|for
control|(
name|int
name|slot
init|=
literal|0
init|;
name|slot
operator|<
literal|24
operator|*
literal|60
operator|/
literal|5
condition|;
name|slot
operator|++
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|7
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|iMeetingTable
index|[
name|i
index|]
index|[
name|slot
index|]
operator|!=
literal|null
operator|&&
operator|!
name|iMeetingTable
index|[
name|i
index|]
index|[
name|slot
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|hasDay
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iSelections
operator|.
name|getWidgetCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|iSelections
operator|.
name|getWidget
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|SelectionPanel
condition|)
block|{
name|hasDay
index|[
operator|(
operator|(
name|SelectionPanel
operator|)
name|w
operator|)
operator|.
name|getDayOfWeek
argument_list|()
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|int
name|nrDays
init|=
literal|0
decl_stmt|;
for|for
control|(
name|boolean
name|d
range|:
name|hasDay
control|)
if|if
condition|(
name|d
condition|)
name|nrDays
operator|++
expr_stmt|;
name|int
name|days
index|[]
init|=
operator|new
name|int
index|[
name|nrDays
index|]
decl_stmt|;
name|int
name|d
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|7
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|hasDay
index|[
name|i
index|]
condition|)
name|days
index|[
name|d
operator|++
index|]
operator|=
name|i
expr_stmt|;
name|setDays
argument_list|(
name|days
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
for|for
control|(
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
name|meetings
range|:
name|iMeetings
control|)
for|for
control|(
name|Meeting
name|meeting
range|:
name|meetings
control|)
block|{
if|if
condition|(
name|meeting
operator|.
name|hasShadow
argument_list|()
condition|)
name|iPanel
operator|.
name|remove
argument_list|(
name|meeting
operator|.
name|getShadow
argument_list|()
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|remove
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
block|}
name|iMeetings
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iMeetingTable
operator|.
name|length
condition|;
name|i
operator|++
control|)
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|iMeetingTable
index|[
name|i
index|]
operator|.
name|length
condition|;
name|j
operator|++
control|)
if|if
condition|(
name|iMeetingTable
index|[
name|i
index|]
index|[
name|j
index|]
operator|!=
literal|null
condition|)
name|iMeetingTable
index|[
name|i
index|]
index|[
name|j
index|]
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iTotalNrColumns
operator|=
literal|0
expr_stmt|;
name|iSelections
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|showSelections
parameter_list|()
block|{
name|iSelectionLayer
operator|.
name|setVisible
argument_list|(
name|isAllowSelection
argument_list|()
argument_list|)
expr_stmt|;
name|iSelections
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isAllowSelection
argument_list|()
condition|)
return|return;
for|for
control|(
name|SelectionInterface
name|selection
range|:
name|iAllSelections
control|)
block|{
for|for
control|(
name|ResourceInterface
name|location
range|:
name|iRoomResources
control|)
block|{
if|if
condition|(
name|selection
operator|.
name|getLocations
argument_list|()
operator|.
name|contains
argument_list|(
name|location
argument_list|)
condition|)
block|{
name|SelectionPanel
name|panel
init|=
operator|new
name|SelectionPanel
argument_list|(
name|selection
argument_list|)
decl_stmt|;
if|if
condition|(
name|panel
operator|.
name|isVisible
argument_list|()
condition|)
name|iSelections
operator|.
name|add
argument_list|(
name|panel
argument_list|,
name|panel
operator|.
name|getLeft
argument_list|()
argument_list|,
name|panel
operator|.
name|getTop
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
specifier|public
name|String
name|getColor
parameter_list|(
name|EventInterface
name|event
parameter_list|)
block|{
name|String
name|color
init|=
name|iColors
operator|.
name|get
argument_list|(
name|event
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|color
operator|==
literal|null
condition|)
block|{
name|color
operator|=
name|CONSTANTS
operator|.
name|meetingColors
argument_list|()
index|[
name|iColors
operator|.
name|size
argument_list|()
operator|%
name|CONSTANTS
operator|.
name|meetingColors
argument_list|()
operator|.
name|length
index|]
expr_stmt|;
name|iColors
operator|.
name|put
argument_list|(
name|event
operator|.
name|getId
argument_list|()
argument_list|,
name|color
argument_list|)
expr_stmt|;
block|}
return|return
name|color
return|;
block|}
specifier|protected
name|Meeting
name|addMeeting
parameter_list|(
name|EventInterface
name|event
parameter_list|,
name|int
name|day
parameter_list|,
name|int
name|startSlot
parameter_list|,
name|int
name|length
parameter_list|,
name|int
name|startOffset
parameter_list|,
name|int
name|endOffset
parameter_list|,
name|String
name|name
parameter_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
name|note
parameter_list|,
name|String
name|title
parameter_list|,
name|String
name|color
parameter_list|,
name|int
name|firstWeekIndex
parameter_list|,
name|int
name|nrMeetings
parameter_list|,
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
name|meetings
parameter_list|)
block|{
switch|switch
condition|(
name|iMode
condition|)
block|{
case|case
name|PROPORTIONAL
case|:
block|{
name|boolean
name|used
index|[]
init|=
operator|new
name|boolean
index|[
name|iTotalNrColumns
operator|+
name|nrMeetings
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|used
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|used
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|iMeetingTable
index|[
name|day
index|]
index|[
name|startSlot
operator|+
name|i
index|]
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Meeting
argument_list|>
name|j
init|=
name|iMeetingTable
index|[
name|day
index|]
index|[
name|startSlot
operator|+
name|i
index|]
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Meeting
name|m
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|m
operator|.
name|getNrMeetings
argument_list|()
condition|;
name|k
operator|++
control|)
name|used
index|[
name|m
operator|.
name|getColumn
argument_list|()
operator|+
name|k
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
name|int
name|col
init|=
literal|0
decl_stmt|;
name|i
label|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|iTotalNrColumns
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|nrMeetings
condition|;
name|j
operator|++
control|)
if|if
condition|(
name|used
index|[
name|i
operator|+
name|j
index|]
condition|)
continue|continue
name|i
continue|;
name|col
operator|=
name|i
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|iTotalNrColumns
operator|<
name|col
operator|+
name|nrMeetings
condition|)
block|{
name|iTotalNrColumns
operator|=
name|col
operator|+
name|nrMeetings
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iPanel
operator|.
name|getWidgetCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|iPanel
operator|.
name|getWidget
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|Meeting
condition|)
operator|(
operator|(
name|Meeting
operator|)
name|w
operator|)
operator|.
name|move
argument_list|()
expr_stmt|;
block|}
block|}
name|Meeting
name|meeting
init|=
operator|new
name|Meeting
argument_list|(
name|event
argument_list|,
name|name
argument_list|,
name|note
argument_list|,
name|day
argument_list|,
name|startSlot
argument_list|,
name|length
argument_list|,
name|col
argument_list|,
literal|1
argument_list|,
name|nrMeetings
argument_list|,
name|meetings
argument_list|,
name|startOffset
argument_list|,
name|endOffset
argument_list|)
decl_stmt|;
name|meeting
operator|.
name|setColor
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setTitle
argument_list|(
name|title
argument_list|)
expr_stmt|;
if|if
condition|(
name|meeting
operator|.
name|hasShadow
argument_list|()
condition|)
name|iPanel
operator|.
name|add
argument_list|(
name|meeting
operator|.
name|getShadow
argument_list|()
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|add
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|iMeetingTable
index|[
name|day
index|]
index|[
name|startSlot
operator|+
name|i
index|]
operator|==
literal|null
condition|)
name|iMeetingTable
index|[
name|day
index|]
index|[
name|startSlot
operator|+
name|i
index|]
operator|=
operator|new
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
argument_list|()
expr_stmt|;
name|iMeetingTable
index|[
name|day
index|]
index|[
name|startSlot
operator|+
name|i
index|]
operator|.
name|add
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
block|}
return|return
name|meeting
return|;
block|}
case|case
name|FILLSPACE
case|:
block|{
name|int
name|col
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|iMeetingTable
index|[
name|day
index|]
index|[
name|startSlot
operator|+
name|i
index|]
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Meeting
argument_list|>
name|j
init|=
name|iMeetingTable
index|[
name|day
index|]
index|[
name|startSlot
operator|+
name|i
index|]
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Meeting
name|m
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|getColumn
argument_list|()
operator|>
name|col
condition|)
name|col
operator|=
name|m
operator|.
name|getColumn
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|col
operator|+=
literal|1
expr_stmt|;
name|int
name|cols
init|=
name|col
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|col
operator|>
literal|0
condition|)
block|{
name|boolean
name|used
index|[]
init|=
operator|new
name|boolean
index|[
name|cols
operator|-
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cols
operator|-
literal|1
condition|;
name|i
operator|++
control|)
name|used
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|iMeetingTable
index|[
name|day
index|]
index|[
name|startSlot
operator|+
name|i
index|]
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Meeting
argument_list|>
name|j
init|=
name|iMeetingTable
index|[
name|day
index|]
index|[
name|startSlot
operator|+
name|i
index|]
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Meeting
name|m
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|used
index|[
name|m
operator|.
name|getColumn
argument_list|()
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cols
operator|-
literal|1
condition|;
name|i
operator|++
control|)
if|if
condition|(
operator|!
name|used
index|[
name|i
index|]
condition|)
block|{
name|col
operator|=
name|i
expr_stmt|;
name|cols
operator|--
expr_stmt|;
break|break;
block|}
block|}
name|Meeting
name|meeting
init|=
operator|new
name|Meeting
argument_list|(
name|event
argument_list|,
name|name
argument_list|,
name|note
argument_list|,
name|day
argument_list|,
name|startSlot
argument_list|,
name|length
argument_list|,
name|col
argument_list|,
name|cols
argument_list|,
literal|1
argument_list|,
name|meetings
argument_list|,
name|startOffset
argument_list|,
name|endOffset
argument_list|)
decl_stmt|;
name|meeting
operator|.
name|setColor
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setTitle
argument_list|(
name|title
argument_list|)
expr_stmt|;
if|if
condition|(
name|meeting
operator|.
name|hasShadow
argument_list|()
condition|)
name|iPanel
operator|.
name|add
argument_list|(
name|meeting
operator|.
name|getShadow
argument_list|()
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|add
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|iMeetingTable
index|[
name|day
index|]
index|[
name|startSlot
operator|+
name|i
index|]
operator|==
literal|null
condition|)
name|iMeetingTable
index|[
name|day
index|]
index|[
name|startSlot
operator|+
name|i
index|]
operator|=
operator|new
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Meeting
argument_list|>
name|j
init|=
name|iMeetingTable
index|[
name|day
index|]
index|[
name|startSlot
operator|+
name|i
index|]
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Meeting
name|m
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|m
operator|.
name|setNrColumns
argument_list|(
name|cols
argument_list|)
expr_stmt|;
block|}
name|iMeetingTable
index|[
name|day
index|]
index|[
name|startSlot
operator|+
name|i
index|]
operator|.
name|add
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
block|}
return|return
name|meeting
return|;
block|}
case|case
name|OVERLAP
case|:
block|{
name|int
name|overlap
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|iMeetingTable
index|[
name|day
index|]
index|[
name|startSlot
operator|+
name|i
index|]
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Meeting
argument_list|>
name|j
init|=
name|iMeetingTable
index|[
name|day
index|]
index|[
name|startSlot
operator|+
name|i
index|]
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Meeting
name|m
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|getColumn
argument_list|()
operator|==
name|firstWeekIndex
operator|&&
name|m
operator|.
name|getNrColumns
argument_list|()
operator|>
name|overlap
condition|)
name|overlap
operator|=
name|m
operator|.
name|getNrColumns
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|overlap
operator|+=
literal|1
expr_stmt|;
name|int
name|overlaps
init|=
name|overlap
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|overlap
operator|>
literal|0
condition|)
block|{
name|boolean
name|used
index|[]
init|=
operator|new
name|boolean
index|[
name|overlaps
operator|-
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|overlaps
operator|-
literal|1
condition|;
name|i
operator|++
control|)
name|used
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|iMeetingTable
index|[
name|day
index|]
index|[
name|startSlot
operator|+
name|i
index|]
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Meeting
argument_list|>
name|j
init|=
name|iMeetingTable
index|[
name|day
index|]
index|[
name|startSlot
operator|+
name|i
index|]
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Meeting
name|m
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|getColumn
argument_list|()
operator|==
name|firstWeekIndex
condition|)
name|used
index|[
name|m
operator|.
name|getNrColumns
argument_list|()
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|overlaps
operator|-
literal|1
condition|;
name|i
operator|++
control|)
if|if
condition|(
operator|!
name|used
index|[
name|i
index|]
condition|)
block|{
name|overlap
operator|=
name|i
expr_stmt|;
name|overlaps
operator|--
expr_stmt|;
break|break;
block|}
block|}
name|Meeting
name|meeting
init|=
operator|new
name|Meeting
argument_list|(
name|event
argument_list|,
name|name
argument_list|,
name|note
argument_list|,
name|day
argument_list|,
name|startSlot
argument_list|,
name|length
argument_list|,
name|firstWeekIndex
argument_list|,
name|overlap
argument_list|,
name|nrMeetings
argument_list|,
name|meetings
argument_list|,
name|startOffset
argument_list|,
name|endOffset
argument_list|)
decl_stmt|;
name|meeting
operator|.
name|setColor
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setTitle
argument_list|(
name|title
argument_list|)
expr_stmt|;
if|if
condition|(
name|meeting
operator|.
name|hasShadow
argument_list|()
condition|)
name|iPanel
operator|.
name|add
argument_list|(
name|meeting
operator|.
name|getShadow
argument_list|()
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|add
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|iMeetingTable
index|[
name|day
index|]
index|[
name|startSlot
operator|+
name|i
index|]
operator|==
literal|null
condition|)
name|iMeetingTable
index|[
name|day
index|]
index|[
name|startSlot
operator|+
name|i
index|]
operator|=
operator|new
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
argument_list|()
expr_stmt|;
name|iMeetingTable
index|[
name|day
index|]
index|[
name|startSlot
operator|+
name|i
index|]
operator|.
name|add
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
block|}
return|return
name|meeting
return|;
block|}
default|default:
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|int
name|weekIndex
parameter_list|(
name|MeetingInterface
name|m
parameter_list|)
block|{
if|if
condition|(
name|isVerticalSplitByWeek
argument_list|()
condition|)
block|{
if|if
condition|(
name|iSelectedWeeks
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iSelectedWeeks
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|iSelectedWeeks
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getDayOfYear
argument_list|()
operator|<=
name|m
operator|.
name|getDayOfYear
argument_list|()
operator|&&
name|m
operator|.
name|getDayOfYear
argument_list|()
operator|<=
name|iSelectedWeeks
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getDayOfYear
argument_list|()
operator|+
literal|6
condition|)
return|return
name|i
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
if|else if
condition|(
name|isSingleWeek
argument_list|()
condition|)
block|{
return|return
operator|(
name|iRoomResources
operator|==
literal|null
operator|||
name|m
operator|.
name|getLocation
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|iRoomResources
operator|.
name|indexOf
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
argument_list|)
operator|)
return|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
specifier|public
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
name|addEvent
parameter_list|(
name|EventInterface
name|event
parameter_list|)
block|{
return|return
name|addEvent
argument_list|(
name|event
argument_list|,
name|event
operator|.
name|getMeetings
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
name|addEvent
parameter_list|(
name|EventInterface
name|event
parameter_list|,
name|Collection
argument_list|<
name|MeetingInterface
argument_list|>
name|eventMeetings
parameter_list|)
block|{
name|String
name|color
init|=
name|getColor
argument_list|(
name|event
argument_list|)
decl_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
name|done
init|=
operator|new
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|MeetingInterface
argument_list|>
name|meetings
init|=
operator|new
name|ArrayList
argument_list|<
name|MeetingInterface
argument_list|>
argument_list|(
name|eventMeetings
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|meetings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|MeetingInterface
name|meeting
init|=
literal|null
decl_stmt|;
name|TreeSet
argument_list|<
name|MeetingInterface
argument_list|>
name|dates
init|=
operator|new
name|TreeSet
argument_list|<
name|MeetingInterface
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|MeetingInterface
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|MeetingInterface
name|m1
parameter_list|,
name|MeetingInterface
name|m2
parameter_list|)
block|{
if|if
condition|(
name|isVerticalSplitByWeek
argument_list|()
condition|)
block|{
name|int
name|cmp
init|=
operator|new
name|Integer
argument_list|(
name|m1
operator|.
name|getDayOfYear
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
operator|new
name|Integer
argument_list|(
name|m2
operator|.
name|getDayOfYear
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
else|else
block|{
name|int
name|cmp
init|=
operator|(
name|m1
operator|.
name|getLocationName
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|m1
operator|.
name|getLocationName
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|m2
operator|.
name|getLocationName
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|m2
operator|.
name|getLocationName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
return|return
name|m1
operator|.
name|getId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|m2
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|MeetingInterface
name|prev
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|MeetingInterface
argument_list|>
name|i
init|=
name|meetings
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|MeetingInterface
name|m
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|meeting
operator|==
literal|null
condition|)
block|{
name|meeting
operator|=
name|m
expr_stmt|;
name|prev
operator|=
name|m
expr_stmt|;
name|dates
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|meeting
operator|.
name|getStartSlot
argument_list|()
operator|==
name|m
operator|.
name|getStartSlot
argument_list|()
operator|&&
name|meeting
operator|.
name|getEndSlot
argument_list|()
operator|==
name|m
operator|.
name|getEndSlot
argument_list|()
operator|&&
name|meeting
operator|.
name|getDayOfWeek
argument_list|()
operator|==
name|m
operator|.
name|getDayOfWeek
argument_list|()
operator|&&
name|meeting
operator|.
name|getStartOffset
argument_list|()
operator|==
name|m
operator|.
name|getStartOffset
argument_list|()
operator|&&
name|meeting
operator|.
name|getEndOffset
argument_list|()
operator|==
name|m
operator|.
name|getEndOffset
argument_list|()
condition|)
block|{
if|if
condition|(
name|iMode
operator|==
name|Mode
operator|.
name|OVERLAP
operator|&&
operator|(
name|weekIndex
argument_list|(
name|prev
argument_list|)
operator|!=
name|weekIndex
argument_list|(
name|m
argument_list|)
operator|&&
name|weekIndex
argument_list|(
name|prev
argument_list|)
operator|+
literal|1
operator|!=
name|weekIndex
argument_list|(
name|m
argument_list|)
operator|)
condition|)
continue|continue;
name|dates
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|prev
operator|=
name|m
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|String
name|dateString
init|=
literal|null
decl_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|rooms
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|lastDay
init|=
literal|0
decl_stmt|;
name|String
name|endDate
init|=
literal|null
decl_stmt|;
name|TreeSet
argument_list|<
name|Integer
argument_list|>
name|days
init|=
operator|new
name|TreeSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|MeetingInterface
name|m
range|:
name|dates
control|)
block|{
name|days
operator|.
name|add
argument_list|(
name|m
operator|.
name|getDayOfYear
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
name|rooms
operator|.
name|add
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|dateString
operator|==
literal|null
condition|)
block|{
name|dateString
operator|=
name|sDateFormat
operator|.
name|format
argument_list|(
name|m
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
expr_stmt|;
name|lastDay
operator|=
name|m
operator|.
name|getDayOfYear
argument_list|()
expr_stmt|;
name|endDate
operator|=
literal|null
expr_stmt|;
block|}
if|else if
condition|(
name|lastDay
operator|==
name|m
operator|.
name|getDayOfYear
argument_list|()
condition|)
block|{
block|}
if|else if
condition|(
name|lastDay
operator|+
literal|7
operator|==
name|m
operator|.
name|getDayOfYear
argument_list|()
condition|)
block|{
name|endDate
operator|=
name|sDateFormat
operator|.
name|format
argument_list|(
name|m
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
expr_stmt|;
name|lastDay
operator|=
name|m
operator|.
name|getDayOfYear
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|endDate
operator|!=
literal|null
condition|)
name|dateString
operator|+=
literal|" - "
operator|+
name|endDate
expr_stmt|;
name|dateString
operator|+=
literal|", "
operator|+
name|sDateFormat
operator|.
name|format
argument_list|(
name|m
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
expr_stmt|;
name|lastDay
operator|=
name|m
operator|.
name|getDayOfYear
argument_list|()
expr_stmt|;
name|endDate
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|endDate
operator|!=
literal|null
condition|)
block|{
name|dateString
operator|+=
literal|" - "
operator|+
name|endDate
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|String
argument_list|>
name|notes
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|notes
operator|.
name|add
argument_list|(
name|meeting
operator|.
name|getMeetingTime
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|dates
operator|.
name|size
argument_list|()
operator|!=
name|getSelectedWeeks
argument_list|()
operator|.
name|size
argument_list|()
condition|)
name|notes
operator|.
name|add
argument_list|(
name|dateString
argument_list|)
expr_stmt|;
name|String
name|roomString
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|room
range|:
name|rooms
control|)
block|{
if|if
condition|(
operator|!
name|roomString
operator|.
name|isEmpty
argument_list|()
condition|)
name|roomString
operator|+=
literal|", "
expr_stmt|;
name|roomString
operator|+=
name|room
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isSingleRoom
argument_list|()
operator|||
name|getResourceType
argument_list|()
operator|!=
name|ResourceType
operator|.
name|ROOM
condition|)
name|notes
operator|.
name|add
argument_list|(
name|roomString
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|hasInstructors
argument_list|()
condition|)
for|for
control|(
name|ContactInterface
name|instructor
range|:
name|event
operator|.
name|getInstructors
argument_list|()
control|)
name|notes
operator|.
name|add
argument_list|(
name|instructor
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|hasSponsor
argument_list|()
condition|)
name|notes
operator|.
name|add
argument_list|(
name|event
operator|.
name|getSponsor
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|done
operator|.
name|add
argument_list|(
name|addMeeting
argument_list|(
name|event
argument_list|,
name|meeting
operator|.
name|getDayOfWeek
argument_list|()
argument_list|,
name|meeting
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|meeting
operator|.
name|getEndSlot
argument_list|()
operator|-
name|meeting
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|meeting
operator|.
name|getStartOffset
argument_list|()
argument_list|,
name|meeting
operator|.
name|getEndOffset
argument_list|()
argument_list|,
operator|(
name|meeting
operator|.
name|isApproved
argument_list|()
condition|?
literal|""
else|:
literal|"<i>"
operator|)
operator|+
name|event
operator|.
name|getName
argument_list|()
operator|+
literal|" ("
operator|+
operator|(
name|event
operator|.
name|hasInstruction
argument_list|()
condition|?
name|event
operator|.
name|getInstruction
argument_list|()
else|:
name|event
operator|.
name|getType
argument_list|()
operator|)
operator|+
literal|")"
operator|+
operator|(
name|meeting
operator|.
name|isApproved
argument_list|()
condition|?
literal|""
else|:
literal|" -- not approved</i>"
operator|)
argument_list|,
name|notes
argument_list|,
operator|(
name|event
operator|.
name|hasInstruction
argument_list|()
condition|?
name|event
operator|.
name|getInstruction
argument_list|()
else|:
name|event
operator|.
name|getType
argument_list|()
operator|)
operator|+
literal|" "
operator|+
name|event
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|dateString
operator|+
literal|" "
operator|+
name|meeting
operator|.
name|getMeetingTime
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|roomString
argument_list|,
name|color
argument_list|,
name|weekIndex
argument_list|(
name|meeting
argument_list|)
argument_list|,
name|days
operator|.
name|size
argument_list|()
argument_list|,
name|done
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iMeetings
operator|.
name|add
argument_list|(
name|done
argument_list|)
expr_stmt|;
return|return
name|done
return|;
block|}
specifier|public
interface|interface
name|MeetingClickHandler
block|{
specifier|public
name|void
name|onMeetingClick
parameter_list|(
name|MeetingClickEvent
name|event
parameter_list|)
function_decl|;
block|}
specifier|public
class|class
name|MeetingClickEvent
block|{
specifier|private
name|Meeting
name|iMeeting
decl_stmt|;
name|MeetingClickEvent
parameter_list|(
name|Meeting
name|meeting
parameter_list|)
block|{
name|iMeeting
operator|=
name|meeting
expr_stmt|;
block|}
specifier|public
name|EventInterface
name|getEvent
parameter_list|()
block|{
return|return
name|iMeeting
operator|.
name|getEvent
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|addMeetingClickHandler
parameter_list|(
name|MeetingClickHandler
name|h
parameter_list|)
block|{
name|iMeetingClickHandlers
operator|.
name|add
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeMeetingClickHandler
parameter_list|(
name|MeetingClickHandler
name|h
parameter_list|)
block|{
name|iMeetingClickHandlers
operator|.
name|remove
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
specifier|public
class|class
name|Meeting
extends|extends
name|AbsolutePanel
block|{
specifier|private
name|EventInterface
name|iEvent
decl_stmt|;
specifier|private
name|int
name|iColumn
decl_stmt|,
name|iDayOfWeek
decl_stmt|,
name|iNrColumns
decl_stmt|;
specifier|private
name|double
name|iLeft
decl_stmt|,
name|iWidth
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
name|iMeetings
decl_stmt|;
specifier|private
name|boolean
name|iDummy
init|=
literal|false
decl_stmt|;
specifier|private
name|int
name|iNrMeetings
decl_stmt|;
specifier|private
name|P
name|iShadow
decl_stmt|;
specifier|private
name|Meeting
parameter_list|(
name|EventInterface
name|event
parameter_list|,
name|String
name|name
parameter_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
name|note
parameter_list|,
name|int
name|dayOfWeek
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|,
name|int
name|column
parameter_list|,
name|int
name|nrColumns
parameter_list|,
name|int
name|nrMeetings
parameter_list|,
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
name|meetings
parameter_list|,
name|int
name|startOffset
parameter_list|,
name|int
name|endOffset
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|iEvent
operator|=
name|event
expr_stmt|;
name|iMeetings
operator|=
name|meetings
expr_stmt|;
name|iDayOfWeek
operator|=
name|dayOfWeek
expr_stmt|;
name|iColumn
operator|=
name|column
expr_stmt|;
name|iNrMeetings
operator|=
name|nrMeetings
expr_stmt|;
name|iNrColumns
operator|=
name|nrColumns
expr_stmt|;
name|setStyleName
argument_list|(
literal|"meeting"
argument_list|)
expr_stmt|;
name|P
name|header
init|=
operator|new
name|P
argument_list|(
literal|"header"
argument_list|,
literal|"label"
argument_list|)
decl_stmt|;
name|header
operator|.
name|setHTML
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|P
name|footer
init|=
operator|new
name|P
argument_list|(
literal|"footer"
argument_list|)
decl_stmt|;
name|String
name|notes
init|=
literal|""
decl_stmt|;
name|String
name|delim
init|=
literal|"<br>"
decl_stmt|;
if|if
condition|(
name|note
operator|.
name|size
argument_list|()
operator|>
literal|2
operator|&&
name|length
operator|<
literal|12
condition|)
name|delim
operator|=
literal|", "
expr_stmt|;
if|if
condition|(
name|note
operator|.
name|size
argument_list|()
operator|>
literal|3
operator|&&
name|length
operator|<
literal|18
condition|)
name|delim
operator|=
literal|", "
expr_stmt|;
for|for
control|(
name|String
name|n
range|:
name|note
control|)
block|{
if|if
condition|(
name|n
operator|==
literal|null
operator|||
name|n
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|notes
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|notes
operator|+=
name|delim
expr_stmt|;
name|notes
operator|+=
literal|"<span  style=\"white-space: nowrap\">"
operator|+
name|n
operator|+
literal|"</span>"
expr_stmt|;
block|}
name|footer
operator|.
name|setHTML
argument_list|(
name|notes
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|footer
argument_list|)
expr_stmt|;
name|double
name|totalHeight
init|=
name|iCellHeight
operator|*
name|length
operator|/
literal|12.0
operator|-
literal|3
decl_stmt|;
name|double
name|setupHeight
init|=
name|iCellHeight
operator|*
name|startOffset
operator|/
literal|60.0
decl_stmt|;
name|double
name|teardownHeight
init|=
operator|-
name|iCellHeight
operator|*
name|endOffset
operator|/
literal|60.0
decl_stmt|;
name|int
name|day
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
name|iDays
operator|.
name|length
condition|;
name|d
operator|++
control|)
if|if
condition|(
name|iDays
index|[
name|d
index|]
operator|==
name|iDayOfWeek
condition|)
block|{
name|day
operator|=
name|d
expr_stmt|;
break|break;
block|}
switch|switch
condition|(
name|iMode
condition|)
block|{
case|case
name|PROPORTIONAL
case|:
name|iWidth
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|3.0
argument_list|,
name|iNrMeetings
operator|*
operator|(
name|iCellWidth
operator|-
literal|6.0
operator|)
operator|/
name|iTotalNrColumns
operator|+
operator|(
name|iColumn
operator|+
name|iNrMeetings
operator|!=
name|iTotalNrColumns
operator|&&
name|iTotalNrColumns
operator|>
literal|1
condition|?
operator|-
literal|3
else|:
literal|0
operator|)
argument_list|)
expr_stmt|;
name|iLeft
operator|=
literal|4.0
operator|+
name|iCellWidth
operator|*
name|day
operator|+
name|iColumn
operator|*
operator|(
name|iCellWidth
operator|-
literal|6.0
operator|)
operator|/
name|iTotalNrColumns
expr_stmt|;
break|break;
case|case
name|FILLSPACE
case|:
name|iWidth
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|3.0
argument_list|,
operator|(
name|iCellWidth
operator|-
literal|6.0
operator|)
operator|/
name|iNrColumns
operator|+
operator|(
name|iColumn
operator|+
literal|1
operator|!=
name|iNrColumns
operator|&&
name|iNrColumns
operator|>
literal|1
condition|?
operator|-
literal|3
else|:
literal|0
operator|)
argument_list|)
expr_stmt|;
name|iLeft
operator|=
literal|4.0
operator|+
name|iCellWidth
operator|*
name|day
operator|+
name|iColumn
operator|*
operator|(
name|iCellWidth
operator|-
literal|6
operator|)
operator|/
name|iNrColumns
expr_stmt|;
break|break;
case|case
name|OVERLAP
case|:
name|int
name|weeks
init|=
operator|(
name|isVerticalSplitByWeek
argument_list|()
condition|?
name|iSelectedWeeks
operator|.
name|size
argument_list|()
else|:
name|iRoomResources
operator|.
name|size
argument_list|()
operator|)
decl_stmt|;
name|iWidth
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|3.0
argument_list|,
name|iNrMeetings
operator|*
operator|(
name|iCellWidth
operator|-
literal|6.0
operator|)
operator|/
name|weeks
operator|+
operator|(
name|iColumn
operator|+
name|iNrMeetings
operator|!=
name|weeks
operator|&&
name|weeks
operator|>
literal|1
condition|?
operator|-
literal|3
else|:
literal|0
operator|)
operator|-
literal|5
operator|*
name|iNrColumns
argument_list|)
expr_stmt|;
name|iLeft
operator|=
literal|4.0
operator|+
name|iCellWidth
operator|*
name|day
operator|+
name|iColumn
operator|*
operator|(
name|iCellWidth
operator|-
literal|6
operator|)
operator|/
name|weeks
operator|+
literal|5
operator|*
name|iNrColumns
expr_stmt|;
block|}
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setWidth
argument_list|(
name|iWidth
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setHeight
argument_list|(
name|totalHeight
operator|-
name|setupHeight
operator|-
name|teardownHeight
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setPosition
argument_list|(
name|Position
operator|.
name|ABSOLUTE
argument_list|)
expr_stmt|;
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setLeft
argument_list|(
name|iLeft
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setTop
argument_list|(
literal|1
operator|+
name|iCellHeight
operator|*
name|start
operator|/
literal|12
operator|-
name|iCellHeight
operator|*
name|iStart
operator|+
name|setupHeight
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
if|if
condition|(
name|iShowShadows
operator|&&
operator|(
name|startOffset
operator|!=
literal|0
operator|||
name|endOffset
operator|!=
literal|0
operator|)
condition|)
block|{
name|iShadow
operator|=
operator|new
name|P
argument_list|(
literal|"meeting-shadow"
argument_list|)
expr_stmt|;
name|iShadow
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setHeight
argument_list|(
name|totalHeight
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|iShadow
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setTop
argument_list|(
literal|1
operator|+
name|iCellHeight
operator|*
name|start
operator|/
literal|12
operator|-
name|iCellHeight
operator|*
name|iStart
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|iShadow
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setLeft
argument_list|(
name|iLeft
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|iShadow
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setWidth
argument_list|(
name|iWidth
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|iShadow
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setPosition
argument_list|(
name|Position
operator|.
name|ABSOLUTE
argument_list|)
expr_stmt|;
block|}
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONCLICK
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEOVER
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEMOVE
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEOUT
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setColor
parameter_list|(
name|String
name|color
parameter_list|)
block|{
name|addStyleName
argument_list|(
name|color
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasShadow
argument_list|()
condition|)
name|iShadow
operator|.
name|addStyleName
argument_list|(
name|color
argument_list|)
expr_stmt|;
block|}
specifier|public
name|EventInterface
name|getEvent
parameter_list|()
block|{
return|return
name|iEvent
return|;
block|}
specifier|public
name|boolean
name|hasShadow
parameter_list|()
block|{
return|return
name|iShadow
operator|!=
literal|null
return|;
block|}
specifier|public
name|P
name|getShadow
parameter_list|()
block|{
return|return
name|iShadow
return|;
block|}
specifier|private
name|void
name|select
parameter_list|(
name|boolean
name|selected
parameter_list|)
block|{
if|if
condition|(
name|selected
condition|)
block|{
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setWidth
argument_list|(
name|iCellWidth
operator|-
literal|6
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setLeft
argument_list|(
literal|4
operator|+
name|iCellWidth
operator|*
name|getDay
argument_list|()
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasShadow
argument_list|()
condition|)
block|{
name|iShadow
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setWidth
argument_list|(
name|iCellWidth
operator|-
literal|6
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|iShadow
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setLeft
argument_list|(
literal|4
operator|+
name|iCellWidth
operator|*
name|getDay
argument_list|()
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
block|}
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setZIndex
argument_list|(
literal|1001
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasShadow
argument_list|()
condition|)
name|iShadow
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setZIndex
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
for|for
control|(
name|Meeting
name|meeting
range|:
name|iMeetings
control|)
block|{
name|meeting
operator|.
name|addStyleName
argument_list|(
literal|"meeting-selected"
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setCursor
argument_list|(
name|iEvent
operator|.
name|isCanView
argument_list|()
condition|?
name|Cursor
operator|.
name|POINTER
else|:
name|Cursor
operator|.
name|AUTO
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setWidth
argument_list|(
name|iWidth
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setLeft
argument_list|(
name|iLeft
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasShadow
argument_list|()
condition|)
block|{
name|iShadow
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setWidth
argument_list|(
name|iWidth
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|iShadow
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setLeft
argument_list|(
name|iLeft
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
block|}
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|clearZIndex
argument_list|()
expr_stmt|;
if|if
condition|(
name|hasShadow
argument_list|()
condition|)
name|iShadow
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|clearZIndex
argument_list|()
expr_stmt|;
for|for
control|(
name|Meeting
name|meeting
range|:
name|iMeetings
control|)
block|{
name|meeting
operator|.
name|removeStyleName
argument_list|(
literal|"meeting-selected"
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|clearCursor
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|onBrowserEvent
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
if|if
condition|(
name|iDummy
condition|)
return|return;
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Element
name|target
init|=
name|DOM
operator|.
name|eventGetTarget
argument_list|(
name|event
argument_list|)
decl_stmt|;
name|boolean
name|anchor
init|=
literal|false
decl_stmt|;
for|for
control|(
init|;
name|target
operator|!=
literal|null
condition|;
name|target
operator|=
name|DOM
operator|.
name|getParent
argument_list|(
name|target
argument_list|)
control|)
block|{
name|String
name|tag
init|=
name|DOM
operator|.
name|getElementProperty
argument_list|(
name|target
argument_list|,
literal|"tagName"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tag
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"a"
argument_list|)
condition|)
block|{
name|anchor
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|else if
condition|(
name|tag
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"div"
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
name|EventTarget
name|related
init|=
name|event
operator|.
name|getRelatedEventTarget
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|DOM
operator|.
name|eventGetType
argument_list|(
name|event
argument_list|)
condition|)
block|{
case|case
name|Event
operator|.
name|ONCLICK
case|:
name|select
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|anchor
condition|)
block|{
name|MeetingClickEvent
name|e
init|=
operator|new
name|MeetingClickEvent
argument_list|(
name|Meeting
operator|.
name|this
argument_list|)
decl_stmt|;
for|for
control|(
name|MeetingClickHandler
name|h
range|:
name|iMeetingClickHandlers
control|)
name|h
operator|.
name|onMeetingClick
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Event
operator|.
name|ONMOUSEOVER
case|:
if|if
condition|(
name|related
operator|==
literal|null
operator|||
operator|!
name|getElement
argument_list|()
operator|.
name|isOrHasChild
argument_list|(
operator|(
name|Element
operator|)
name|related
operator|.
name|cast
argument_list|()
argument_list|)
condition|)
block|{
name|select
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Event
operator|.
name|ONMOUSEOUT
case|:
if|if
condition|(
name|related
operator|==
literal|null
operator|||
operator|!
name|getElement
argument_list|()
operator|.
name|isOrHasChild
argument_list|(
operator|(
name|Element
operator|)
name|related
operator|.
name|cast
argument_list|()
argument_list|)
condition|)
block|{
name|select
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Event
operator|.
name|ONMOUSEMOVE
case|:
name|int
name|relativeX
init|=
name|event
operator|.
name|getClientX
argument_list|()
operator|-
name|getElement
argument_list|()
operator|.
name|getAbsoluteLeft
argument_list|()
operator|+
name|getElement
argument_list|()
operator|.
name|getScrollLeft
argument_list|()
operator|+
name|getElement
argument_list|()
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|getScrollLeft
argument_list|()
decl_stmt|;
if|if
condition|(
name|relativeX
operator|<
name|iLeft
operator|-
literal|6
operator|-
name|getDay
argument_list|()
operator|*
name|iCellWidth
operator|||
name|relativeX
operator|>
name|iLeft
operator|-
literal|2
operator|-
name|getDay
argument_list|()
operator|*
name|iCellWidth
operator|+
name|iWidth
condition|)
block|{
name|select
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
name|super
operator|.
name|onBrowserEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setNrColumns
parameter_list|(
name|int
name|nrColumns
parameter_list|)
block|{
if|if
condition|(
name|nrColumns
operator|==
name|iNrColumns
condition|)
return|return;
name|iNrColumns
operator|=
name|nrColumns
expr_stmt|;
name|move
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|move
parameter_list|()
block|{
switch|switch
condition|(
name|iMode
condition|)
block|{
case|case
name|PROPORTIONAL
case|:
name|iWidth
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|3
argument_list|,
name|iNrMeetings
operator|*
operator|(
name|iCellWidth
operator|-
literal|6.0
operator|)
operator|/
name|iTotalNrColumns
operator|+
operator|(
name|iColumn
operator|+
name|iNrMeetings
operator|!=
name|iTotalNrColumns
operator|&&
name|iTotalNrColumns
operator|>
literal|1
condition|?
operator|-
literal|3
else|:
literal|0
operator|)
argument_list|)
expr_stmt|;
name|iLeft
operator|=
literal|4.0
operator|+
name|iCellWidth
operator|*
name|getDay
argument_list|()
operator|+
name|iColumn
operator|*
operator|(
name|iCellWidth
operator|-
literal|6.0
operator|)
operator|/
name|iTotalNrColumns
expr_stmt|;
break|break;
case|case
name|FILLSPACE
case|:
name|iWidth
operator|=
operator|(
name|iCellWidth
operator|-
literal|6.0
operator|)
operator|/
name|iNrColumns
operator|+
operator|(
name|iColumn
operator|+
literal|1
operator|!=
name|iNrColumns
operator|&&
name|iNrColumns
operator|>
literal|1
condition|?
operator|-
literal|3
else|:
literal|0
operator|)
expr_stmt|;
name|iLeft
operator|=
literal|4.0
operator|+
name|iCellWidth
operator|*
name|getDay
argument_list|()
operator|+
name|iColumn
operator|*
operator|(
name|iCellWidth
operator|-
literal|6
operator|)
operator|/
name|iNrColumns
expr_stmt|;
break|break;
case|case
name|OVERLAP
case|:
name|int
name|weeks
init|=
operator|(
name|isVerticalSplitByWeek
argument_list|()
condition|?
name|iSelectedWeeks
operator|.
name|size
argument_list|()
else|:
name|iRoomResources
operator|.
name|size
argument_list|()
operator|)
decl_stmt|;
name|iWidth
operator|=
name|iNrMeetings
operator|*
operator|(
name|iCellWidth
operator|-
literal|6.0
operator|)
operator|/
name|weeks
operator|+
operator|(
name|iColumn
operator|+
name|iNrMeetings
operator|!=
name|weeks
operator|&&
name|weeks
operator|>
literal|1
condition|?
operator|-
literal|3
else|:
literal|0
operator|)
operator|-
literal|5
operator|*
name|iNrColumns
expr_stmt|;
name|iLeft
operator|=
literal|4.0
operator|+
name|iCellWidth
operator|*
name|getDay
argument_list|()
operator|+
name|iColumn
operator|*
operator|(
name|iCellWidth
operator|-
literal|6
operator|)
operator|/
name|weeks
operator|+
literal|5
operator|*
name|iNrColumns
expr_stmt|;
block|}
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setWidth
argument_list|(
name|iWidth
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setLeft
argument_list|(
name|iLeft
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasShadow
argument_list|()
condition|)
block|{
name|iShadow
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setWidth
argument_list|(
name|iWidth
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|iShadow
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setLeft
argument_list|(
name|iLeft
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setTitle
parameter_list|(
name|String
name|title
parameter_list|)
block|{
name|super
operator|.
name|setTitle
argument_list|(
name|title
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getColumn
parameter_list|()
block|{
return|return
name|iColumn
return|;
block|}
specifier|public
name|int
name|getDayOfWeek
parameter_list|()
block|{
return|return
name|iDayOfWeek
return|;
block|}
specifier|public
name|int
name|getDay
parameter_list|()
block|{
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
name|iDays
operator|.
name|length
condition|;
name|d
operator|++
control|)
if|if
condition|(
name|iDays
index|[
name|d
index|]
operator|==
name|iDayOfWeek
condition|)
return|return
name|d
return|;
return|return
operator|-
literal|1
return|;
block|}
specifier|public
name|int
name|getNrColumns
parameter_list|()
block|{
return|return
name|iNrColumns
return|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|Widget
name|w
parameter_list|)
block|{
name|super
operator|.
name|add
argument_list|(
name|w
argument_list|,
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setDummy
parameter_list|()
block|{
name|iDummy
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|int
name|getNrMeetings
parameter_list|()
block|{
return|return
name|iNrMeetings
return|;
block|}
block|}
specifier|public
name|void
name|hideSelectionPopup
parameter_list|()
block|{
if|if
condition|(
name|iSelectionLayer
operator|!=
literal|null
condition|)
name|iSelectionLayer
operator|.
name|iPopup
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
class|class
name|SelectionLayer
extends|extends
name|AbsolutePanel
block|{
specifier|private
name|SelectionPanel
name|iSelection
decl_stmt|;
specifier|private
name|P
name|iHint
decl_stmt|;
specifier|private
name|PopupPanel
name|iPopup
decl_stmt|;
specifier|private
name|SelectionPanel
name|iMoving
init|=
literal|null
decl_stmt|;
specifier|public
name|SelectionLayer
parameter_list|()
block|{
name|setStyleName
argument_list|(
literal|"selection-layer"
argument_list|)
expr_stmt|;
name|iPopup
operator|=
operator|new
name|PopupPanel
argument_list|()
expr_stmt|;
name|iPopup
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TimeGridSelectionPopup"
argument_list|)
expr_stmt|;
name|iHint
operator|=
operator|new
name|P
argument_list|(
literal|"content"
argument_list|)
expr_stmt|;
name|iPopup
operator|.
name|setWidget
argument_list|(
name|iHint
argument_list|)
expr_stmt|;
name|iSelection
operator|=
operator|new
name|SelectionPanel
argument_list|()
expr_stmt|;
name|iSelection
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|iSelection
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEDOWN
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEUP
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEMOVE
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEOVER
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEOUT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onBrowserEvent
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
if|if
condition|(
name|Event
operator|.
name|ONMOUSEMOVE
operator|==
name|DOM
operator|.
name|eventGetType
argument_list|(
name|event
argument_list|)
operator|&&
operator|!
name|iSelection
operator|.
name|isActive
argument_list|()
operator|&&
name|iMoving
operator|!=
literal|null
condition|)
block|{
name|iMoving
operator|.
name|onBrowserEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
if|if
condition|(
name|iMoving
operator|.
name|iCursor
operator|!=
literal|null
condition|)
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setCursor
argument_list|(
name|iMoving
operator|.
name|iCursor
argument_list|)
expr_stmt|;
return|return;
block|}
name|double
name|x
init|=
name|event
operator|.
name|getClientX
argument_list|()
operator|-
name|getAbsoluteLeft
argument_list|()
operator|+
name|Window
operator|.
name|getScrollLeft
argument_list|()
decl_stmt|;
name|double
name|y
init|=
name|event
operator|.
name|getClientY
argument_list|()
operator|-
name|getAbsoluteTop
argument_list|()
operator|+
name|Window
operator|.
name|getScrollTop
argument_list|()
decl_stmt|;
name|int
name|slot
init|=
literal|3
operator|*
name|Math
operator|.
name|min
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
literal|4
operator|*
operator|(
name|y
operator|-
literal|1
operator|+
name|iStart
operator|*
name|iCellHeight
operator|)
operator|/
name|iCellHeight
argument_list|)
argument_list|)
argument_list|,
literal|96
argument_list|)
decl_stmt|;
name|int
name|day
init|=
name|Math
operator|.
name|min
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
operator|(
name|x
operator|-
literal|2
operator|)
operator|/
name|iCellWidth
argument_list|)
argument_list|)
argument_list|,
name|iDays
operator|.
name|length
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|dayOfWeek
init|=
name|iDays
index|[
name|day
index|]
decl_stmt|;
name|int
name|weeks
init|=
operator|(
name|isSingleRoom
argument_list|()
condition|?
name|iSelectedWeeks
operator|.
name|size
argument_list|()
else|:
name|iRoomResources
operator|.
name|size
argument_list|()
operator|)
decl_stmt|;
name|int
name|week
init|=
name|Math
operator|.
name|min
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|weeks
operator|*
operator|(
name|x
operator|-
literal|2
operator|-
name|iCellWidth
operator|*
name|day
operator|)
operator|/
operator|(
name|iCellWidth
operator|-
literal|6
operator|)
argument_list|)
argument_list|)
argument_list|,
name|weeks
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|h
init|=
name|slot
operator|/
literal|12
decl_stmt|;
name|int
name|m
init|=
literal|5
operator|*
operator|(
name|slot
operator|%
literal|12
operator|)
decl_stmt|;
name|String
name|time
init|=
operator|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
condition|?
operator|(
name|h
operator|==
literal|0
condition|?
literal|"12"
else|:
name|h
operator|<=
literal|12
condition|?
name|h
else|:
name|h
operator|-
literal|12
operator|)
else|:
name|h
operator|)
operator|+
literal|":"
operator|+
operator|(
name|m
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|m
operator|+
operator|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
condition|?
operator|(
name|h
operator|<=
literal|11
condition|?
literal|"a"
else|:
literal|"p"
operator|)
else|:
literal|""
operator|)
decl_stmt|;
name|String
name|text
init|=
name|CONSTANTS
operator|.
name|longDays
argument_list|()
index|[
name|dayOfWeek
index|]
operator|+
literal|" "
operator|+
operator|(
name|isSingleRoom
argument_list|()
condition|?
name|iSelectedWeeks
operator|.
name|get
argument_list|(
name|week
argument_list|)
else|:
name|iSelectedWeeks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getDayNames
argument_list|()
operator|.
name|get
argument_list|(
name|dayOfWeek
argument_list|)
operator|+
literal|" "
operator|+
name|time
operator|+
operator|(
name|isSingleRoom
argument_list|()
condition|?
literal|""
else|:
literal|" "
operator|+
name|iRoomResources
operator|.
name|get
argument_list|(
name|week
argument_list|)
operator|.
name|getName
argument_list|()
operator|)
decl_stmt|;
name|iPopup
operator|.
name|setPopupPosition
argument_list|(
name|event
operator|.
name|getClientX
argument_list|()
operator|+
name|Window
operator|.
name|getScrollLeft
argument_list|()
argument_list|,
name|event
operator|.
name|getClientY
argument_list|()
operator|+
name|Window
operator|.
name|getScrollTop
argument_list|()
argument_list|)
expr_stmt|;
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setCursor
argument_list|(
name|Cursor
operator|.
name|CROSSHAIR
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|DOM
operator|.
name|eventGetType
argument_list|(
name|event
argument_list|)
condition|)
block|{
case|case
name|Event
operator|.
name|ONMOUSEDOWN
case|:
name|iSelection
operator|.
name|setStart
argument_list|(
name|dayOfWeek
argument_list|,
name|slot
argument_list|,
name|week
argument_list|)
expr_stmt|;
name|iSelection
operator|.
name|setEnd
argument_list|(
name|dayOfWeek
argument_list|,
name|slot
argument_list|,
name|week
argument_list|)
expr_stmt|;
name|iSelection
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iSelection
operator|.
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|Event
operator|.
name|ONMOUSEMOVE
case|:
name|iSelection
operator|.
name|setEnd
argument_list|(
name|dayOfWeek
argument_list|,
name|slot
argument_list|,
name|week
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iPopup
operator|.
name|isShowing
argument_list|()
condition|)
name|iPopup
operator|.
name|show
argument_list|()
expr_stmt|;
break|break;
case|case
name|Event
operator|.
name|ONMOUSEUP
case|:
name|onMouseUp
argument_list|()
expr_stmt|;
break|break;
case|case
name|Event
operator|.
name|ONMOUSEOVER
case|:
if|if
condition|(
operator|!
name|iPopup
operator|.
name|isShowing
argument_list|()
operator|&&
operator|(
name|iSelection
operator|.
name|isActive
argument_list|()
operator|||
name|iMoving
operator|==
literal|null
operator|)
condition|)
name|iPopup
operator|.
name|show
argument_list|()
expr_stmt|;
if|if
condition|(
name|iSelection
operator|.
name|isActive
argument_list|()
operator|&&
operator|!
name|iSelection
operator|.
name|isVisible
argument_list|()
condition|)
block|{
name|iSelection
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Event
operator|.
name|ONMOUSEOUT
case|:
if|if
condition|(
operator|!
name|DOM
operator|.
name|isOrHasChild
argument_list|(
name|getElement
argument_list|()
argument_list|,
name|DOM
operator|.
name|eventGetToElement
argument_list|(
name|event
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|iPopup
operator|.
name|isShowing
argument_list|()
condition|)
name|iPopup
operator|.
name|hide
argument_list|()
expr_stmt|;
name|iSelection
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/* 				if (iSelection.isActive()&& !DOM.isOrHasChild(TimeGrid.this.getElement(), DOM.eventGetToElement(event))) { 					iSelection.setActive(false); 				} 				*/
break|break;
block|}
name|iHint
operator|.
name|setText
argument_list|(
operator|(
name|iSelection
operator|.
name|isVisible
argument_list|()
operator|&&
name|iSelection
operator|.
name|isActive
argument_list|()
condition|?
name|iSelection
operator|.
name|toString
argument_list|()
else|:
name|text
operator|)
argument_list|)
expr_stmt|;
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|onMouseUp
parameter_list|()
block|{
if|if
condition|(
name|iSelection
operator|.
name|isVisible
argument_list|()
operator|&&
name|iSelection
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|SelectionPanel
name|s
init|=
operator|new
name|SelectionPanel
argument_list|(
name|iSelection
operator|.
name|getDayOfWeek
argument_list|()
argument_list|,
name|iSelection
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|iSelection
operator|.
name|getLength
argument_list|()
argument_list|,
name|iSelection
operator|.
name|getStartWeek
argument_list|()
argument_list|,
name|iSelection
operator|.
name|getNrWeeks
argument_list|()
argument_list|)
decl_stmt|;
name|iSelections
operator|.
name|add
argument_list|(
name|s
argument_list|,
name|s
operator|.
name|getLeft
argument_list|()
argument_list|,
name|s
operator|.
name|getTop
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iSelection
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iSelection
operator|.
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iSelections
operator|.
name|getWidgetCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|iSelections
operator|.
name|getWidget
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|SelectionPanel
condition|)
operator|(
operator|(
name|SelectionPanel
operator|)
name|w
operator|)
operator|.
name|onMouseUp
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|super
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iSelection
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iSelection
operator|.
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|iSelection
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
class|class
name|SelectionPanel
extends|extends
name|AbsolutePanel
block|{
specifier|private
name|int
name|iDayOfWeek
init|=
operator|-
literal|1
decl_stmt|,
name|iStartSlot
decl_stmt|,
name|iEndSlot
decl_stmt|,
name|iStartWeek
decl_stmt|,
name|iEndWeek
decl_stmt|;
specifier|private
name|boolean
name|iActive
init|=
literal|false
decl_stmt|;
specifier|private
name|P
name|iRemove
init|=
literal|null
decl_stmt|,
name|iText
init|=
literal|null
decl_stmt|;
specifier|private
name|SelectionInterface
name|iSelection
init|=
literal|null
decl_stmt|;
specifier|public
name|SelectionPanel
parameter_list|(
name|boolean
name|fixed
parameter_list|)
block|{
name|setStyleName
argument_list|(
name|fixed
condition|?
literal|"selection"
else|:
literal|"active-selection"
argument_list|)
expr_stmt|;
if|if
condition|(
name|fixed
condition|)
block|{
name|iRemove
operator|=
operator|new
name|P
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|iRemove
operator|.
name|setHTML
argument_list|(
literal|"&times;"
argument_list|)
expr_stmt|;
name|iRemove
operator|.
name|addMouseDownHandler
argument_list|(
operator|new
name|MouseDownHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseDown
parameter_list|(
name|MouseDownEvent
name|event
parameter_list|)
block|{
name|iSelections
operator|.
name|remove
argument_list|(
name|SelectionPanel
operator|.
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSelection
operator|!=
literal|null
condition|)
name|iAllSelections
operator|.
name|remove
argument_list|(
name|iSelection
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iRemove
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setRight
argument_list|(
literal|2
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|iRemove
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setTop
argument_list|(
literal|2
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|iRemove
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setPosition
argument_list|(
name|Position
operator|.
name|ABSOLUTE
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|iRemove
argument_list|)
expr_stmt|;
name|iText
operator|=
operator|new
name|P
argument_list|(
literal|"text"
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|iText
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEDOWN
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEUP
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEMOVE
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Cursor
name|iCursor
init|=
literal|null
decl_stmt|;
specifier|private
name|double
name|iX
decl_stmt|,
name|iY
decl_stmt|;
specifier|private
name|int
name|iSS
decl_stmt|,
name|iES
decl_stmt|,
name|iSW
decl_stmt|,
name|iEW
decl_stmt|;
specifier|private
name|Cursor
name|cursor
parameter_list|(
name|double
name|x
parameter_list|,
name|double
name|y
parameter_list|)
block|{
if|if
condition|(
name|x
operator|<=
literal|6
condition|)
block|{
if|if
condition|(
name|y
operator|<=
literal|6
condition|)
return|return
name|Cursor
operator|.
name|NW_RESIZE
return|;
if|else if
condition|(
name|y
operator|>=
name|getHeight
argument_list|()
operator|-
literal|6
condition|)
return|return
name|Cursor
operator|.
name|SW_RESIZE
return|;
else|else
return|return
name|Cursor
operator|.
name|W_RESIZE
return|;
block|}
if|else if
condition|(
name|x
operator|>=
name|getWidth
argument_list|()
operator|-
literal|6
condition|)
block|{
if|if
condition|(
name|y
operator|<=
literal|6
condition|)
return|return
name|Cursor
operator|.
name|NE_RESIZE
return|;
if|else if
condition|(
name|y
operator|>=
name|getHeight
argument_list|()
operator|-
literal|6
condition|)
return|return
name|Cursor
operator|.
name|SE_RESIZE
return|;
else|else
return|return
name|Cursor
operator|.
name|E_RESIZE
return|;
block|}
if|else if
condition|(
name|y
operator|<=
literal|6
condition|)
block|{
return|return
name|Cursor
operator|.
name|N_RESIZE
return|;
block|}
if|else if
condition|(
name|y
operator|>=
name|getHeight
argument_list|()
operator|-
literal|6
condition|)
block|{
return|return
name|Cursor
operator|.
name|S_RESIZE
return|;
block|}
else|else
block|{
return|return
name|Cursor
operator|.
name|MOVE
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onBrowserEvent
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
if|if
condition|(
name|iText
operator|==
literal|null
condition|)
return|return;
name|double
name|dx
init|=
name|event
operator|.
name|getClientX
argument_list|()
operator|-
name|getAbsoluteLeft
argument_list|()
operator|+
name|Window
operator|.
name|getScrollLeft
argument_list|()
decl_stmt|;
name|double
name|dy
init|=
name|event
operator|.
name|getClientY
argument_list|()
operator|-
name|getAbsoluteTop
argument_list|()
operator|+
name|Window
operator|.
name|getScrollTop
argument_list|()
decl_stmt|;
name|double
name|x
init|=
name|event
operator|.
name|getClientX
argument_list|()
operator|-
name|iSelectionLayer
operator|.
name|getAbsoluteLeft
argument_list|()
operator|+
name|Window
operator|.
name|getScrollLeft
argument_list|()
decl_stmt|;
name|double
name|y
init|=
name|event
operator|.
name|getClientY
argument_list|()
operator|-
name|iSelectionLayer
operator|.
name|getAbsoluteTop
argument_list|()
operator|+
name|Window
operator|.
name|getScrollTop
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|DOM
operator|.
name|eventGetType
argument_list|(
name|event
argument_list|)
condition|)
block|{
case|case
name|Event
operator|.
name|ONMOUSEMOVE
case|:
if|if
condition|(
name|iCursor
operator|==
literal|null
condition|)
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setCursor
argument_list|(
name|cursor
argument_list|(
name|dx
argument_list|,
name|dy
argument_list|)
argument_list|)
expr_stmt|;
else|else
block|{
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setCursor
argument_list|(
name|iCursor
argument_list|)
expr_stmt|;
name|int
name|dSlot
init|=
literal|3
operator|*
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
literal|4
operator|*
operator|(
name|y
operator|-
name|iY
operator|)
operator|/
name|iCellHeight
argument_list|)
decl_stmt|;
name|int
name|weeks
init|=
operator|(
name|isSingleRoom
argument_list|()
condition|?
name|iSelectedWeeks
operator|.
name|size
argument_list|()
else|:
name|iRoomResources
operator|.
name|size
argument_list|()
operator|)
decl_stmt|;
name|int
name|dWeek
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|weeks
operator|*
operator|(
name|x
operator|-
name|iX
operator|)
operator|/
operator|(
name|iCellWidth
operator|-
literal|6
operator|)
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|iCursor
condition|)
block|{
case|case
name|MOVE
case|:
name|dSlot
operator|=
name|Math
operator|.
name|min
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|dSlot
argument_list|,
name|iStart
operator|*
literal|12
operator|-
name|iSS
argument_list|)
argument_list|,
literal|12
operator|*
name|iEnd
operator|-
name|iES
argument_list|)
expr_stmt|;
name|dWeek
operator|=
name|Math
operator|.
name|min
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|dWeek
argument_list|,
operator|-
name|iSW
argument_list|)
argument_list|,
name|weeks
operator|-
name|iEW
operator|-
literal|1
argument_list|)
expr_stmt|;
name|iStartSlot
operator|=
name|iSS
operator|+
name|dSlot
expr_stmt|;
name|iEndSlot
operator|=
name|iES
operator|+
name|dSlot
expr_stmt|;
name|iStartWeek
operator|=
name|iSW
operator|+
name|dWeek
expr_stmt|;
name|iEndWeek
operator|=
name|iEW
operator|+
name|dWeek
expr_stmt|;
break|break;
case|case
name|N_RESIZE
case|:
name|dSlot
operator|=
name|Math
operator|.
name|max
argument_list|(
name|dSlot
argument_list|,
name|iStart
operator|*
literal|12
operator|-
name|iSS
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSS
operator|+
name|dSlot
operator|<
name|iES
condition|)
name|iStartSlot
operator|=
name|iSS
operator|+
name|dSlot
expr_stmt|;
break|break;
case|case
name|NW_RESIZE
case|:
name|dSlot
operator|=
name|Math
operator|.
name|max
argument_list|(
name|dSlot
argument_list|,
name|iStart
operator|*
literal|12
operator|-
name|iSS
argument_list|)
expr_stmt|;
name|dWeek
operator|=
name|Math
operator|.
name|max
argument_list|(
name|dWeek
argument_list|,
operator|-
name|iSW
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSS
operator|+
name|dSlot
operator|<
name|iES
condition|)
name|iStartSlot
operator|=
name|iSS
operator|+
name|dSlot
expr_stmt|;
if|if
condition|(
name|iSW
operator|+
name|dWeek
operator|<=
name|iEW
condition|)
name|iStartWeek
operator|=
name|iSW
operator|+
name|dWeek
expr_stmt|;
break|break;
case|case
name|NE_RESIZE
case|:
name|dSlot
operator|=
name|Math
operator|.
name|max
argument_list|(
name|dSlot
argument_list|,
name|iStart
operator|*
literal|12
operator|-
name|iSS
argument_list|)
expr_stmt|;
name|dWeek
operator|=
name|Math
operator|.
name|min
argument_list|(
name|dWeek
argument_list|,
name|weeks
operator|-
name|iEW
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSS
operator|+
name|dSlot
operator|<
name|iES
condition|)
name|iStartSlot
operator|=
name|iSS
operator|+
name|dSlot
expr_stmt|;
if|if
condition|(
name|iSW
operator|<=
name|iEW
operator|+
name|dWeek
condition|)
name|iEndWeek
operator|=
name|iEW
operator|+
name|dWeek
expr_stmt|;
break|break;
case|case
name|E_RESIZE
case|:
name|dWeek
operator|=
name|Math
operator|.
name|min
argument_list|(
name|dWeek
argument_list|,
name|weeks
operator|-
name|iEW
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSW
operator|<=
name|iEW
operator|+
name|dWeek
condition|)
name|iEndWeek
operator|=
name|iEW
operator|+
name|dWeek
expr_stmt|;
break|break;
case|case
name|SE_RESIZE
case|:
name|dWeek
operator|=
name|Math
operator|.
name|min
argument_list|(
name|dWeek
argument_list|,
name|weeks
operator|-
name|iEW
operator|-
literal|1
argument_list|)
expr_stmt|;
name|dSlot
operator|=
name|Math
operator|.
name|min
argument_list|(
name|dSlot
argument_list|,
literal|12
operator|*
name|iEnd
operator|-
name|iES
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSW
operator|<=
name|iEW
operator|+
name|dWeek
condition|)
name|iEndWeek
operator|=
name|iEW
operator|+
name|dWeek
expr_stmt|;
if|if
condition|(
name|iSS
operator|<
name|iES
operator|+
name|dSlot
condition|)
name|iEndSlot
operator|=
name|iES
operator|+
name|dSlot
expr_stmt|;
break|break;
case|case
name|S_RESIZE
case|:
name|dSlot
operator|=
name|Math
operator|.
name|min
argument_list|(
name|dSlot
argument_list|,
literal|12
operator|*
name|iEnd
operator|-
name|iES
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSS
operator|<
name|iES
operator|+
name|dSlot
condition|)
name|iEndSlot
operator|=
name|iES
operator|+
name|dSlot
expr_stmt|;
break|break;
case|case
name|SW_RESIZE
case|:
name|dSlot
operator|=
name|Math
operator|.
name|min
argument_list|(
name|dSlot
argument_list|,
literal|12
operator|*
name|iEnd
operator|-
name|iES
argument_list|)
expr_stmt|;
name|dWeek
operator|=
name|Math
operator|.
name|max
argument_list|(
name|dWeek
argument_list|,
operator|-
name|iSW
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSS
operator|<
name|iES
operator|+
name|dSlot
condition|)
name|iEndSlot
operator|=
name|iES
operator|+
name|dSlot
expr_stmt|;
if|if
condition|(
name|iSW
operator|+
name|dWeek
operator|<=
name|iEW
condition|)
name|iStartWeek
operator|=
name|iSW
operator|+
name|dWeek
expr_stmt|;
break|break;
case|case
name|W_RESIZE
case|:
name|dWeek
operator|=
name|Math
operator|.
name|max
argument_list|(
name|dWeek
argument_list|,
operator|-
name|iSW
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSW
operator|+
name|dWeek
operator|<=
name|iEW
condition|)
name|iStartWeek
operator|=
name|iSW
operator|+
name|dWeek
expr_stmt|;
break|break;
block|}
name|move
argument_list|()
expr_stmt|;
if|if
condition|(
name|iSS
operator|!=
name|iStartSlot
operator|||
name|iES
operator|!=
name|iEndSlot
condition|)
block|{
name|iSelection
operator|.
name|setStartSlot
argument_list|(
name|iStartSlot
argument_list|)
expr_stmt|;
name|iSelection
operator|.
name|setLength
argument_list|(
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iSW
operator|!=
name|iStartWeek
operator|||
name|iEW
operator|!=
name|iEndWeek
condition|)
block|{
if|if
condition|(
name|isSingleRoom
argument_list|()
condition|)
block|{
name|iSelection
operator|.
name|getDays
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|getStartWeek
argument_list|()
init|;
name|i
operator|<=
name|getEndWeek
argument_list|()
condition|;
name|i
operator|++
control|)
name|iSelection
operator|.
name|getDays
argument_list|()
operator|.
name|add
argument_list|(
name|iSelectedWeeks
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getDayOfYear
argument_list|()
operator|+
name|getDayOfWeek
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iSelection
operator|.
name|getLocations
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|getStartWeek
argument_list|()
init|;
name|i
operator|<=
name|getEndWeek
argument_list|()
condition|;
name|i
operator|++
control|)
name|iSelection
operator|.
name|addLocation
argument_list|(
name|iRoomResources
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|Event
operator|.
name|ONMOUSEDOWN
case|:
name|iCursor
operator|=
name|cursor
argument_list|(
name|dx
argument_list|,
name|dy
argument_list|)
expr_stmt|;
name|iX
operator|=
name|x
expr_stmt|;
name|iY
operator|=
name|y
expr_stmt|;
name|iSelectionLayer
operator|.
name|iMoving
operator|=
name|this
expr_stmt|;
name|iSS
operator|=
name|iStartSlot
expr_stmt|;
name|iES
operator|=
name|iEndSlot
expr_stmt|;
name|iSW
operator|=
name|iStartWeek
expr_stmt|;
name|iEW
operator|=
name|iEndWeek
expr_stmt|;
break|break;
case|case
name|Event
operator|.
name|ONMOUSEUP
case|:
name|onMouseUp
argument_list|()
expr_stmt|;
break|break;
block|}
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
block|}
specifier|public
name|SelectionPanel
parameter_list|()
block|{
name|this
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SelectionPanel
parameter_list|(
name|int
name|dayOfWeek
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|,
name|int
name|week
parameter_list|,
name|int
name|nrWeeks
parameter_list|)
block|{
name|this
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setStart
argument_list|(
name|dayOfWeek
argument_list|,
name|start
argument_list|,
name|week
argument_list|)
expr_stmt|;
name|setEnd
argument_list|(
name|dayOfWeek
argument_list|,
name|start
operator|+
name|length
argument_list|,
name|week
operator|+
name|nrWeeks
operator|-
literal|1
argument_list|)
expr_stmt|;
name|iSelection
operator|=
operator|new
name|SelectionInterface
argument_list|()
expr_stmt|;
name|iSelection
operator|.
name|setStartSlot
argument_list|(
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|iSelection
operator|.
name|setLength
argument_list|(
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isSingleRoom
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|getStartWeek
argument_list|()
init|;
name|i
operator|<=
name|getEndWeek
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|iSelection
operator|.
name|addDay
argument_list|(
name|iSelectedWeeks
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getDayOfYear
argument_list|()
operator|+
name|getDayOfWeek
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iSelection
operator|.
name|addLocation
argument_list|(
name|getRoomResources
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iSelection
operator|.
name|addDay
argument_list|(
name|iSelectedWeeks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDayOfYear
argument_list|()
operator|+
name|getDayOfWeek
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|getStartWeek
argument_list|()
init|;
name|i
operator|<=
name|getEndWeek
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|iSelection
operator|.
name|addLocation
argument_list|(
name|iRoomResources
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|iAllSelections
operator|.
name|add
argument_list|(
name|iSelection
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SelectionPanel
parameter_list|(
name|SelectionInterface
name|selection
parameter_list|)
block|{
name|this
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iSelection
operator|=
name|selection
expr_stmt|;
name|int
name|dayOfWeek
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|startWeek
init|=
name|iSelectedWeeks
operator|.
name|size
argument_list|()
decl_stmt|,
name|endWeek
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|d
range|:
name|selection
operator|.
name|getDays
argument_list|()
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iSelectedWeeks
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|WeekInterface
name|w
init|=
name|iSelectedWeeks
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|.
name|getDayOfYear
argument_list|()
operator|<=
name|d
operator|&&
name|d
operator|<
name|w
operator|.
name|getDayOfYear
argument_list|()
operator|+
literal|7
condition|)
block|{
name|startWeek
operator|=
name|Math
operator|.
name|min
argument_list|(
name|startWeek
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|endWeek
operator|=
name|Math
operator|.
name|max
argument_list|(
name|endWeek
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|dayOfWeek
operator|=
name|d
operator|-
name|w
operator|.
name|getDayOfYear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|int
name|startRoom
init|=
name|iRoomResources
operator|.
name|size
argument_list|()
decl_stmt|,
name|endRoom
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|ResourceInterface
name|location
range|:
name|selection
operator|.
name|getLocations
argument_list|()
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iRoomResources
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ResourceInterface
name|r
init|=
name|iRoomResources
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|equals
argument_list|(
name|location
argument_list|)
condition|)
block|{
name|startRoom
operator|=
name|Math
operator|.
name|min
argument_list|(
name|startRoom
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|endRoom
operator|=
name|Math
operator|.
name|max
argument_list|(
name|endRoom
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|dayOfWeek
operator|>=
literal|0
condition|)
block|{
name|setStart
argument_list|(
name|dayOfWeek
argument_list|,
name|selection
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|isSingleRoom
argument_list|()
condition|?
name|startWeek
else|:
name|startRoom
argument_list|)
expr_stmt|;
name|setEnd
argument_list|(
name|dayOfWeek
argument_list|,
name|selection
operator|.
name|getStartSlot
argument_list|()
operator|+
name|selection
operator|.
name|getLength
argument_list|()
argument_list|,
name|isSingleRoom
argument_list|()
condition|?
name|endWeek
else|:
name|endRoom
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setStart
parameter_list|(
name|int
name|day
parameter_list|,
name|int
name|slot
parameter_list|,
name|int
name|week
parameter_list|)
block|{
name|iDayOfWeek
operator|=
name|day
expr_stmt|;
name|iStartSlot
operator|=
name|slot
expr_stmt|;
name|iStartWeek
operator|=
name|week
expr_stmt|;
block|}
specifier|public
name|void
name|setEnd
parameter_list|(
name|int
name|day
parameter_list|,
name|int
name|slot
parameter_list|,
name|int
name|week
parameter_list|)
block|{
name|iEndSlot
operator|=
name|slot
expr_stmt|;
if|if
condition|(
name|iDayOfWeek
operator|==
name|day
condition|)
block|{
name|iEndWeek
operator|=
name|week
expr_stmt|;
block|}
if|else if
condition|(
name|day
operator|<
name|iDayOfWeek
condition|)
block|{
name|iEndWeek
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|iEndWeek
operator|=
operator|(
name|isSingleRoom
argument_list|()
condition|?
name|iSelectedWeeks
operator|.
name|size
argument_list|()
else|:
name|iRoomResources
operator|.
name|size
argument_list|()
operator|)
operator|-
literal|1
expr_stmt|;
block|}
name|move
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setActive
parameter_list|(
name|boolean
name|active
parameter_list|)
block|{
name|iActive
operator|=
name|active
expr_stmt|;
block|}
specifier|public
name|boolean
name|isActive
parameter_list|()
block|{
return|return
name|iActive
return|;
block|}
specifier|private
name|void
name|move
parameter_list|()
block|{
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setWidth
argument_list|(
name|getWidth
argument_list|()
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setLeft
argument_list|(
name|getLeft
argument_list|()
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setTop
argument_list|(
name|getTop
argument_list|()
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setHeight
argument_list|(
name|getHeight
argument_list|()
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
if|if
condition|(
name|iText
operator|!=
literal|null
condition|)
name|iText
operator|.
name|setHTML
argument_list|(
name|CONSTANTS
operator|.
name|days
argument_list|()
index|[
name|getDayOfWeek
argument_list|()
index|]
operator|+
literal|" "
operator|+
operator|(
name|isSingleRoom
argument_list|()
condition|?
name|iSelectedWeeks
operator|.
name|get
argument_list|(
name|getStartWeek
argument_list|()
argument_list|)
operator|.
name|getDayNames
argument_list|()
operator|.
name|get
argument_list|(
name|getDayOfWeek
argument_list|()
argument_list|)
operator|+
operator|(
name|getNrWeeks
argument_list|()
operator|<=
literal|1
condition|?
literal|""
else|:
literal|"&nbsp;&#8209;&nbsp;"
operator|+
name|iSelectedWeeks
operator|.
name|get
argument_list|(
name|getEndWeek
argument_list|()
argument_list|)
operator|.
name|getDayNames
argument_list|()
operator|.
name|get
argument_list|(
name|getDayOfWeek
argument_list|()
argument_list|)
operator|)
else|:
name|iSelectedWeeks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDayNames
argument_list|()
operator|.
name|get
argument_list|(
name|getDayOfWeek
argument_list|()
argument_list|)
operator|)
operator|+
literal|" "
operator|+
name|getStartTime
argument_list|()
operator|+
literal|"&nbsp;&#8209;&nbsp;"
operator|+
name|getEndTime
argument_list|()
operator|+
literal|" ("
operator|+
operator|(
literal|5
operator|*
name|getLength
argument_list|()
operator|)
operator|+
literal|"&nbsp;mins) "
operator|+
operator|(
name|isSingleRoom
argument_list|()
condition|?
name|iRoomResources
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|"&nbsp;"
argument_list|)
else|:
name|iRoomResources
operator|.
name|get
argument_list|(
name|getStartWeek
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|"&nbsp;"
argument_list|)
operator|+
operator|(
name|getNrWeeks
argument_list|()
operator|<=
literal|1
condition|?
literal|""
else|:
literal|"&nbsp;&#8209;&nbsp;"
operator|+
name|iRoomResources
operator|.
name|get
argument_list|(
name|getEndWeek
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|"&nbsp;"
argument_list|)
operator|)
operator|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getLeft
parameter_list|()
block|{
return|return
literal|4
operator|+
name|iCellWidth
operator|*
name|getDay
argument_list|()
operator|+
name|getStartWeek
argument_list|()
operator|*
operator|(
name|iCellWidth
operator|-
literal|6
operator|)
operator|/
operator|(
name|isSingleRoom
argument_list|()
condition|?
name|iSelectedWeeks
operator|.
name|size
argument_list|()
else|:
name|iRoomResources
operator|.
name|size
argument_list|()
operator|)
return|;
block|}
specifier|public
name|int
name|getTop
parameter_list|()
block|{
return|return
literal|1
operator|+
name|iCellHeight
operator|*
name|getStartSlot
argument_list|()
operator|/
literal|12
operator|-
name|iCellHeight
operator|*
name|iStart
return|;
block|}
specifier|public
name|int
name|getHeight
parameter_list|()
block|{
return|return
name|iCellHeight
operator|*
name|getLength
argument_list|()
operator|/
literal|12
return|;
block|}
specifier|public
name|int
name|getWidth
parameter_list|()
block|{
name|int
name|weeks
init|=
operator|(
name|isSingleRoom
argument_list|()
condition|?
name|iSelectedWeeks
operator|.
name|size
argument_list|()
else|:
name|iRoomResources
operator|.
name|size
argument_list|()
operator|)
decl_stmt|;
return|return
name|getNrWeeks
argument_list|()
operator|*
operator|(
name|iCellWidth
operator|-
literal|6
operator|)
operator|/
name|weeks
operator|+
operator|(
name|getStartWeek
argument_list|()
operator|+
name|getNrWeeks
argument_list|()
operator|!=
name|weeks
operator|&&
name|weeks
operator|>
literal|1
condition|?
literal|0
else|:
literal|3
operator|)
return|;
block|}
specifier|public
name|int
name|getDay
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iDays
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|iDays
index|[
name|i
index|]
operator|==
name|iDayOfWeek
condition|)
return|return
name|i
return|;
return|return
operator|-
literal|1
return|;
block|}
specifier|public
name|int
name|getDayOfWeek
parameter_list|()
block|{
return|return
name|iDayOfWeek
return|;
block|}
specifier|public
name|int
name|getStartSlot
parameter_list|()
block|{
return|return
operator|(
name|iStartSlot
operator|<=
name|iEndSlot
condition|?
name|iStartSlot
else|:
name|iEndSlot
operator|)
return|;
block|}
specifier|public
name|int
name|getEndSlot
parameter_list|()
block|{
return|return
name|getStartSlot
argument_list|()
operator|+
name|getLength
argument_list|()
return|;
block|}
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|Math
operator|.
name|max
argument_list|(
literal|3
argument_list|,
name|iStartSlot
operator|<
name|iEndSlot
condition|?
name|iEndSlot
operator|-
name|iStartSlot
else|:
name|iStartSlot
operator|-
name|iEndSlot
argument_list|)
return|;
block|}
specifier|public
name|int
name|getStartWeek
parameter_list|()
block|{
return|return
operator|(
name|iStartWeek
operator|<=
name|iEndWeek
condition|?
name|iStartWeek
else|:
name|iEndWeek
operator|)
return|;
block|}
specifier|public
name|int
name|getEndWeek
parameter_list|()
block|{
return|return
operator|(
name|iStartWeek
operator|<=
name|iEndWeek
condition|?
name|iEndWeek
else|:
name|iStartWeek
operator|)
return|;
block|}
specifier|public
name|int
name|getNrWeeks
parameter_list|()
block|{
return|return
name|iStartWeek
operator|<
name|iEndWeek
condition|?
literal|1
operator|+
name|iEndWeek
operator|-
name|iStartWeek
else|:
literal|1
operator|+
name|iStartWeek
operator|-
name|iEndWeek
return|;
block|}
specifier|public
name|String
name|getStartTime
parameter_list|()
block|{
name|int
name|h
init|=
name|getStartSlot
argument_list|()
operator|/
literal|12
decl_stmt|;
name|int
name|m
init|=
literal|5
operator|*
operator|(
name|getStartSlot
argument_list|()
operator|%
literal|12
operator|)
decl_stmt|;
return|return
operator|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
condition|?
operator|(
name|h
operator|==
literal|0
condition|?
literal|"12"
else|:
name|h
operator|<=
literal|12
condition|?
name|h
else|:
name|h
operator|-
literal|12
operator|)
else|:
name|h
operator|)
operator|+
literal|":"
operator|+
operator|(
name|m
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|m
operator|+
operator|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
condition|?
operator|(
name|h
operator|<=
literal|11
condition|?
literal|"a"
else|:
literal|"p"
operator|)
else|:
literal|""
operator|)
return|;
block|}
specifier|public
name|String
name|getEndTime
parameter_list|()
block|{
name|int
name|h
init|=
operator|(
name|getStartSlot
argument_list|()
operator|+
name|getLength
argument_list|()
operator|)
operator|/
literal|12
decl_stmt|;
name|int
name|m
init|=
literal|5
operator|*
operator|(
operator|(
name|getStartSlot
argument_list|()
operator|+
name|getLength
argument_list|()
operator|)
operator|%
literal|12
operator|)
decl_stmt|;
return|return
operator|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
condition|?
operator|(
name|h
operator|==
literal|0
condition|?
literal|"12"
else|:
name|h
operator|<=
literal|12
condition|?
name|h
else|:
name|h
operator|-
literal|12
operator|)
else|:
name|h
operator|)
operator|+
literal|":"
operator|+
operator|(
name|m
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|m
operator|+
operator|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
condition|?
operator|(
name|h
operator|<=
literal|11
condition|?
literal|"a"
else|:
literal|"p"
operator|)
else|:
literal|""
operator|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|CONSTANTS
operator|.
name|longDays
argument_list|()
index|[
name|getDayOfWeek
argument_list|()
index|]
operator|+
literal|" "
operator|+
operator|(
name|isSingleRoom
argument_list|()
condition|?
name|iSelectedWeeks
operator|.
name|get
argument_list|(
name|getStartWeek
argument_list|()
argument_list|)
operator|.
name|getDayNames
argument_list|()
operator|.
name|get
argument_list|(
name|getDayOfWeek
argument_list|()
argument_list|)
operator|+
operator|(
name|getNrWeeks
argument_list|()
operator|<=
literal|1
condition|?
literal|""
else|:
literal|" - "
operator|+
name|iSelectedWeeks
operator|.
name|get
argument_list|(
name|getEndWeek
argument_list|()
argument_list|)
operator|.
name|getDayNames
argument_list|()
operator|.
name|get
argument_list|(
name|getDayOfWeek
argument_list|()
argument_list|)
operator|)
else|:
name|iSelectedWeeks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDayNames
argument_list|()
operator|.
name|get
argument_list|(
name|getDayOfWeek
argument_list|()
argument_list|)
operator|)
operator|+
literal|" "
operator|+
name|getStartTime
argument_list|()
operator|+
literal|" - "
operator|+
name|getEndTime
argument_list|()
operator|+
literal|" ("
operator|+
operator|(
literal|5
operator|*
name|getLength
argument_list|()
operator|)
operator|+
literal|" mins)"
operator|+
literal|" "
operator|+
operator|(
name|isSingleRoom
argument_list|()
condition|?
name|iRoomResources
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
else|:
name|iRoomResources
operator|.
name|get
argument_list|(
name|getStartWeek
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|getNrWeeks
argument_list|()
operator|<=
literal|1
condition|?
literal|""
else|:
literal|" - "
operator|+
name|iRoomResources
operator|.
name|get
argument_list|(
name|getEndWeek
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|()
operator|)
operator|)
return|;
block|}
specifier|public
name|SelectionInterface
name|getSelection
parameter_list|()
block|{
return|return
name|iSelection
return|;
block|}
specifier|private
name|void
name|onMouseUp
parameter_list|()
block|{
if|if
condition|(
name|iSelectionLayer
operator|.
name|iMoving
operator|!=
literal|null
condition|)
block|{
name|iSelectionLayer
operator|.
name|iMoving
operator|.
name|iCursor
operator|=
literal|null
expr_stmt|;
name|iSelectionLayer
operator|.
name|iMoving
operator|=
literal|null
expr_stmt|;
block|}
name|iCursor
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|SelectionInterface
argument_list|>
name|getSelections
parameter_list|()
block|{
return|return
name|iAllSelections
return|;
block|}
block|}
end_class

end_unit

