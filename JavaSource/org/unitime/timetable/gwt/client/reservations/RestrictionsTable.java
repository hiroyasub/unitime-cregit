begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|reservations
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|P
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTextBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ReservationInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ReservationInterface
operator|.
name|Clazz
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ReservationInterface
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ReservationInterface
operator|.
name|IdName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ReservationInterface
operator|.
name|Offering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ReservationInterface
operator|.
name|Subpart
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Unit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyCodes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyDownEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyDownHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|shared
operator|.
name|HandlerRegistration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|CheckBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasEnabled
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|RestrictionsTable
extends|extends
name|UniTimeTable
argument_list|<
name|RestrictionsTable
operator|.
name|Node
argument_list|>
block|{
specifier|protected
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|GwtResources
name|RESOURCES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtResources
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|UniTimeWidget
argument_list|<
name|UniTimeTextBox
argument_list|>
name|iLimit
decl_stmt|;
specifier|private
name|Offering
name|iOffering
init|=
literal|null
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|Node
argument_list|>
name|iConfigs
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Node
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|Node
argument_list|>
name|iClasses
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Node
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|RestrictionsTable
parameter_list|(
name|UniTimeWidget
argument_list|<
name|UniTimeTextBox
argument_list|>
name|limit
parameter_list|)
block|{
name|iLimit
operator|=
name|limit
expr_stmt|;
name|iLimit
operator|.
name|getWidget
argument_list|()
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|String
argument_list|>
name|event
parameter_list|)
block|{
name|computeLimit
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Widget
argument_list|>
name|header
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colConfigOrClass
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colExternalId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colLimit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colRoom
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colInstructor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
literal|null
argument_list|,
name|header
argument_list|)
expr_stmt|;
name|setAllowSelection
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|addMouseClickListener
argument_list|(
operator|new
name|UniTimeTable
operator|.
name|MouseClickListener
argument_list|<
name|Node
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseClick
parameter_list|(
name|UniTimeTable
operator|.
name|TableEvent
argument_list|<
name|Node
argument_list|>
name|event
parameter_list|)
block|{
name|selectRow
argument_list|(
name|event
operator|.
name|getRow
argument_list|()
argument_list|,
name|isSelected
argument_list|(
name|event
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setStyleName
argument_list|(
literal|"unitime-RestrictionsTable"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|clearTable
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|iConfigs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iClasses
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iOffering
operator|=
literal|null
expr_stmt|;
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setOffering
parameter_list|(
name|Offering
name|offering
parameter_list|)
block|{
name|clear
argument_list|()
expr_stmt|;
name|iOffering
operator|=
name|offering
expr_stmt|;
for|for
control|(
name|Config
name|config
range|:
name|offering
operator|.
name|getConfigs
argument_list|()
control|)
name|addConfig
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|computeLimit
argument_list|()
expr_stmt|;
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|boolean
name|hasInstructor
init|=
literal|false
decl_stmt|,
name|hasAssignment
init|=
literal|false
decl_stmt|,
name|hasExternalId
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Config
name|config
range|:
name|offering
operator|.
name|getConfigs
argument_list|()
control|)
block|{
for|for
control|(
name|Subpart
name|subpart
range|:
name|config
operator|.
name|getSubparts
argument_list|()
control|)
for|for
control|(
name|Clazz
name|clazz
range|:
name|subpart
operator|.
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
name|clazz
operator|.
name|hasInstructor
argument_list|()
condition|)
name|hasInstructor
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|hasTime
argument_list|()
operator|||
name|clazz
operator|.
name|hasRoom
argument_list|()
operator|||
name|clazz
operator|.
name|hasDate
argument_list|()
operator|||
name|clazz
operator|.
name|isCancelled
argument_list|()
condition|)
name|hasAssignment
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|hasExternalId
argument_list|()
condition|)
name|hasExternalId
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|hasInstructionalMethod
argument_list|()
condition|)
name|hasExternalId
operator|=
literal|true
expr_stmt|;
block|}
name|setColumnVisible
argument_list|(
literal|1
argument_list|,
name|hasExternalId
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
literal|3
argument_list|,
name|hasAssignment
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
literal|4
argument_list|,
name|hasAssignment
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
literal|5
argument_list|,
name|hasAssignment
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
literal|6
argument_list|,
name|hasInstructor
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addConfig
parameter_list|(
name|Config
name|config
parameter_list|)
block|{
name|List
argument_list|<
name|Widget
argument_list|>
name|line
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
operator|new
name|Node
argument_list|(
literal|null
argument_list|,
name|MESSAGES
operator|.
name|labelConfiguration
argument_list|(
name|config
operator|.
name|getAbbv
argument_list|()
argument_list|)
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|line
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|config
operator|.
name|hasInstructionalMethod
argument_list|()
condition|?
name|config
operator|.
name|getInstructionalMethod
argument_list|()
else|:
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTable
operator|.
name|NumberCell
argument_list|(
name|config
operator|.
name|getLimit
argument_list|()
operator|==
literal|null
condition|?
name|MESSAGES
operator|.
name|configUnlimited
argument_list|()
else|:
name|config
operator|.
name|getLimit
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|iConfigs
operator|.
name|put
argument_list|(
name|config
operator|.
name|getId
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|node
operator|.
name|setRow
argument_list|(
name|addRow
argument_list|(
name|node
argument_list|,
name|line
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Subpart
name|subpart
range|:
name|config
operator|.
name|getSubparts
argument_list|()
control|)
block|{
if|if
condition|(
name|subpart
operator|.
name|getParentId
argument_list|()
operator|==
literal|null
condition|)
name|addClasses
argument_list|(
name|node
argument_list|,
name|subpart
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|addClasses
parameter_list|(
name|Node
name|node
parameter_list|,
name|Subpart
name|subpart
parameter_list|,
name|Long
name|parent
parameter_list|)
block|{
for|for
control|(
name|Clazz
name|clazz
range|:
name|subpart
operator|.
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
name|parent
operator|!=
literal|null
operator|&&
operator|!
name|parent
operator|.
name|equals
argument_list|(
name|clazz
operator|.
name|getParentId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|Node
name|classNode
init|=
name|addClass
argument_list|(
name|node
argument_list|,
name|clazz
argument_list|)
decl_stmt|;
for|for
control|(
name|Subpart
name|child
range|:
name|subpart
operator|.
name|getConfig
argument_list|()
operator|.
name|getSubparts
argument_list|()
control|)
block|{
if|if
condition|(
name|subpart
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|child
operator|.
name|getParentId
argument_list|()
argument_list|)
condition|)
name|addClasses
argument_list|(
name|classNode
argument_list|,
name|child
argument_list|,
name|clazz
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|Node
name|addClass
parameter_list|(
name|Node
name|parent
parameter_list|,
name|Clazz
name|clazz
parameter_list|)
block|{
name|List
argument_list|<
name|Widget
argument_list|>
name|line
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
operator|new
name|Node
argument_list|(
name|parent
argument_list|,
name|clazz
operator|.
name|getAbbv
argument_list|()
argument_list|,
name|clazz
argument_list|)
decl_stmt|;
name|line
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|clazz
operator|.
name|hasExternalId
argument_list|()
condition|?
name|clazz
operator|.
name|getExternalId
argument_list|()
else|:
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTable
operator|.
name|NumberCell
argument_list|(
name|clazz
operator|.
name|getLimit
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|clazz
operator|.
name|getLimit
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|CancelledCell
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|clazz
operator|.
name|hasTime
argument_list|()
condition|?
name|clazz
operator|.
name|getTime
argument_list|()
else|:
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|clazz
operator|.
name|hasDate
argument_list|()
condition|?
name|clazz
operator|.
name|getDate
argument_list|()
else|:
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|clazz
operator|.
name|hasRoom
argument_list|()
condition|?
name|clazz
operator|.
name|getRoom
argument_list|()
else|:
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|clazz
operator|.
name|hasInstructor
argument_list|()
condition|?
name|clazz
operator|.
name|getInstructor
argument_list|()
else|:
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|node
operator|.
name|setRow
argument_list|(
name|addRow
argument_list|(
name|node
argument_list|,
name|line
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|isCancelled
argument_list|()
condition|)
for|for
control|(
name|Widget
name|w
range|:
name|line
control|)
name|w
operator|.
name|addStyleName
argument_list|(
literal|"cancelled"
argument_list|)
expr_stmt|;
name|iClasses
operator|.
name|put
argument_list|(
name|clazz
operator|.
name|getId
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|parent
operator|.
name|addChildNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
specifier|public
name|void
name|selectRow
parameter_list|(
name|int
name|row
parameter_list|,
name|boolean
name|value
parameter_list|)
block|{
name|Node
name|node
init|=
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
operator|&&
name|node
operator|.
name|isEnabled
argument_list|()
condition|)
name|node
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|else if
condition|(
name|value
condition|)
name|selectRow
argument_list|(
name|row
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
class|class
name|Node
extends|extends
name|P
implements|implements
name|HasValue
argument_list|<
name|Boolean
argument_list|>
implements|,
name|HasEnabled
block|{
specifier|private
name|Image
name|iImage
decl_stmt|;
specifier|private
name|IdName
name|iItem
decl_stmt|;
specifier|private
name|CheckBox
name|iCheck
decl_stmt|;
specifier|private
name|Node
name|iParent
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Node
argument_list|>
name|iChildren
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|iOpened
init|=
literal|false
decl_stmt|;
specifier|private
name|int
name|iRow
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|Node
parameter_list|(
name|Node
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|IdName
name|item
parameter_list|)
block|{
name|super
argument_list|(
literal|"unitime-RestrictionsNode"
argument_list|)
expr_stmt|;
name|iImage
operator|=
operator|new
name|Image
argument_list|()
expr_stmt|;
name|iImage
operator|.
name|addStyleName
argument_list|(
literal|"tree-icon"
argument_list|)
expr_stmt|;
name|iItem
operator|=
name|item
expr_stmt|;
name|iParent
operator|=
name|parent
expr_stmt|;
name|iCheck
operator|=
operator|new
name|CheckBox
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|iCheck
operator|.
name|addStyleName
argument_list|(
literal|"check-box"
argument_list|)
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
name|iImage
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setPaddingLeft
argument_list|(
literal|16
operator|*
name|getIndent
argument_list|()
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|iCheck
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iCheck
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|iRow
operator|>=
literal|0
condition|)
name|setSelected
argument_list|(
name|iRow
argument_list|,
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|propagate
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|iImage
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|iCheck
argument_list|)
expr_stmt|;
name|iCheck
operator|.
name|addKeyDownHandler
argument_list|(
operator|new
name|KeyDownHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyDown
parameter_list|(
name|KeyDownEvent
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|event
operator|.
name|getNativeKeyCode
argument_list|()
condition|)
block|{
case|case
name|KeyCodes
operator|.
name|KEY_RIGHT
case|:
if|if
condition|(
operator|!
name|getChildrenNodes
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|isOpened
argument_list|()
condition|)
block|{
name|setOpened
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Node
name|n
range|:
name|getChildrenNodes
argument_list|()
control|)
block|{
if|if
condition|(
name|n
operator|.
name|isEnabled
argument_list|()
operator|&&
name|n
operator|.
name|isNodeVisible
argument_list|()
condition|)
block|{
name|n
operator|.
name|getCheckBox
argument_list|()
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
break|break;
case|case
name|KeyCodes
operator|.
name|KEY_LEFT
case|:
if|if
condition|(
operator|!
name|getChildrenNodes
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|isOpened
argument_list|()
condition|)
name|setOpened
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|else if
condition|(
name|hasParentNode
argument_list|()
condition|)
name|getParentNode
argument_list|()
operator|.
name|getCheckBox
argument_list|()
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|hasParentNode
argument_list|()
condition|)
name|getParentNode
argument_list|()
operator|.
name|getCheckBox
argument_list|()
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
break|break;
case|case
name|KeyCodes
operator|.
name|KEY_UP
case|:
for|for
control|(
name|int
name|r
init|=
name|iRow
operator|-
literal|1
init|;
name|r
operator|>
literal|0
condition|;
name|r
operator|--
control|)
block|{
name|Node
name|n
init|=
name|getData
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|.
name|isEnabled
argument_list|()
operator|&&
name|n
operator|.
name|isNodeVisible
argument_list|()
condition|)
block|{
name|n
operator|.
name|getCheckBox
argument_list|()
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
break|break;
case|case
name|KeyCodes
operator|.
name|KEY_DOWN
case|:
for|for
control|(
name|int
name|r
init|=
name|iRow
operator|+
literal|1
init|;
name|r
operator|<
name|getRowCount
argument_list|()
condition|;
name|r
operator|++
control|)
block|{
name|Node
name|n
init|=
name|getData
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|.
name|isEnabled
argument_list|()
operator|&&
name|n
operator|.
name|isNodeVisible
argument_list|()
condition|)
block|{
name|n
operator|.
name|getCheckBox
argument_list|()
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Clazz
name|getClazz
parameter_list|()
block|{
return|return
operator|(
name|Clazz
operator|)
name|iItem
return|;
block|}
specifier|public
name|Config
name|getConfig
parameter_list|()
block|{
return|return
operator|(
name|Config
operator|)
name|iItem
return|;
block|}
specifier|public
name|boolean
name|isConfig
parameter_list|()
block|{
return|return
name|iParent
operator|==
literal|null
return|;
block|}
specifier|public
name|boolean
name|isClazz
parameter_list|()
block|{
return|return
name|iParent
operator|!=
literal|null
return|;
block|}
specifier|public
name|Node
name|getParentNode
parameter_list|()
block|{
return|return
name|iParent
return|;
block|}
specifier|public
name|boolean
name|hasParentNode
parameter_list|()
block|{
return|return
name|iParent
operator|!=
literal|null
return|;
block|}
specifier|public
name|List
argument_list|<
name|Node
argument_list|>
name|getChildrenNodes
parameter_list|()
block|{
return|return
name|iChildren
return|;
block|}
specifier|public
name|CheckBox
name|getCheckBox
parameter_list|()
block|{
return|return
name|iCheck
return|;
block|}
specifier|public
name|void
name|addChildNode
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
name|iChildren
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
if|if
condition|(
name|iChildren
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|iImage
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|setOpened
argument_list|(
operator|!
name|isOpened
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setRow
parameter_list|(
name|int
name|row
parameter_list|)
block|{
name|iRow
operator|=
name|row
expr_stmt|;
block|}
specifier|public
name|int
name|getRow
parameter_list|()
block|{
return|return
name|iRow
return|;
block|}
specifier|protected
name|int
name|getIndent
parameter_list|()
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
name|Node
name|p
init|=
name|iParent
decl_stmt|;
while|while
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|ret
operator|++
expr_stmt|;
name|p
operator|=
name|p
operator|.
name|iParent
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|boolean
name|isNodeVisible
parameter_list|()
block|{
name|Node
name|p
init|=
name|iParent
decl_stmt|;
while|while
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|p
operator|.
name|isOpened
argument_list|()
condition|)
return|return
literal|false
return|;
name|p
operator|=
name|p
operator|.
name|iParent
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|protected
name|void
name|update
parameter_list|()
block|{
if|if
condition|(
name|iChildren
operator|.
name|isEmpty
argument_list|()
condition|)
name|iImage
operator|.
name|setResource
argument_list|(
name|RESOURCES
operator|.
name|treeLeaf
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|iOpened
condition|)
name|iImage
operator|.
name|setResource
argument_list|(
name|RESOURCES
operator|.
name|treeOpen
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|iImage
operator|.
name|setResource
argument_list|(
name|RESOURCES
operator|.
name|treeClosed
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iRow
operator|>=
literal|0
condition|)
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iRow
argument_list|,
name|isNodeVisible
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Node
name|child
range|:
name|iChildren
control|)
name|child
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|HandlerRegistration
name|addValueChangeHandler
parameter_list|(
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
name|handler
parameter_list|)
block|{
return|return
name|addHandler
argument_list|(
name|handler
argument_list|,
name|ValueChangeEvent
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isOpened
parameter_list|()
block|{
return|return
name|iOpened
return|;
block|}
specifier|public
name|void
name|setOpened
parameter_list|(
name|boolean
name|opened
parameter_list|)
block|{
name|iOpened
operator|=
name|opened
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|getValue
parameter_list|()
block|{
return|return
name|iCheck
operator|.
name|getValue
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|Boolean
name|value
parameter_list|)
block|{
name|setValue
argument_list|(
name|value
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|Boolean
name|value
parameter_list|,
name|boolean
name|fireEvents
parameter_list|)
block|{
name|iCheck
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|iRow
operator|>=
literal|0
condition|)
name|setSelected
argument_list|(
name|iRow
argument_list|,
name|value
operator|&&
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|fireEvents
condition|)
block|{
name|propagate
argument_list|()
expr_stmt|;
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|this
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEnabled
parameter_list|()
block|{
return|return
name|iCheck
operator|.
name|isEnabled
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setEnabled
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
name|iCheck
operator|.
name|setEnabled
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
if|if
condition|(
name|iRow
operator|>=
literal|0
condition|)
name|setSelected
argument_list|(
name|iRow
argument_list|,
name|getValue
argument_list|()
operator|&&
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|propagate
parameter_list|()
block|{
name|propagateDown
argument_list|()
expr_stmt|;
name|propagateUp
argument_list|()
expr_stmt|;
name|computeLimit
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|propagateDown
parameter_list|()
block|{
for|for
control|(
name|Node
name|child
range|:
name|getChildrenNodes
argument_list|()
control|)
block|{
name|child
operator|.
name|setEnabled
argument_list|(
operator|!
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|child
operator|.
name|setValue
argument_list|(
name|getValue
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|child
operator|.
name|propagateDown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|propagateUp
parameter_list|()
block|{
if|if
condition|(
name|hasParentNode
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|getValue
argument_list|()
condition|)
block|{
for|for
control|(
name|Node
name|c
range|:
name|getParentNode
argument_list|()
operator|.
name|getChildrenNodes
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getValue
argument_list|()
condition|)
return|return;
block|}
block|}
name|getParentNode
argument_list|()
operator|.
name|setEnabled
argument_list|(
operator|!
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|getParentNode
argument_list|()
operator|.
name|setValue
argument_list|(
name|getValue
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|getParentNode
argument_list|()
operator|.
name|propagateUp
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|populate
parameter_list|(
name|ReservationInterface
name|reservation
parameter_list|)
block|{
for|for
control|(
name|Config
name|config
range|:
name|reservation
operator|.
name|getConfigs
argument_list|()
control|)
block|{
name|Node
name|node
init|=
name|iConfigs
operator|.
name|get
argument_list|(
name|config
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
name|node
operator|.
name|setValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Clazz
name|clazz
range|:
name|reservation
operator|.
name|getClasses
argument_list|()
control|)
block|{
name|Node
name|node
init|=
name|iClasses
operator|.
name|get
argument_list|(
name|clazz
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|node
operator|.
name|setValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Node
name|p
init|=
name|node
operator|.
name|getParentNode
argument_list|()
decl_stmt|;
while|while
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|setOpened
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|p
operator|=
name|p
operator|.
name|getParentNode
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|validate
parameter_list|(
name|ReservationInterface
name|reservation
parameter_list|)
block|{
for|for
control|(
name|Node
name|config
range|:
name|iConfigs
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|config
operator|.
name|getValue
argument_list|()
operator|&&
name|config
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|Config
name|c
init|=
operator|new
name|Config
argument_list|()
decl_stmt|;
name|c
operator|.
name|setId
argument_list|(
name|config
operator|.
name|getConfig
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setName
argument_list|(
name|config
operator|.
name|getConfig
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|reservation
operator|.
name|getConfigs
argument_list|()
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Node
name|clazz
range|:
name|iClasses
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|clazz
operator|.
name|getValue
argument_list|()
operator|&&
name|clazz
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|Clazz
name|c
init|=
operator|new
name|Clazz
argument_list|()
decl_stmt|;
name|c
operator|.
name|setId
argument_list|(
name|clazz
operator|.
name|getClazz
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setName
argument_list|(
name|clazz
operator|.
name|getClazz
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|reservation
operator|.
name|getClasses
argument_list|()
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|computeLimit
parameter_list|()
block|{
if|if
condition|(
name|iOffering
operator|==
literal|null
condition|)
block|{
name|iLimit
operator|.
name|clearHint
argument_list|()
expr_stmt|;
block|}
comment|// if (iLimit.isReadOnly()) return;
name|int
name|total
init|=
literal|0
decl_stmt|,
name|limit
init|=
operator|-
literal|1
decl_stmt|;
name|boolean
name|totalUnlimited
init|=
literal|false
decl_stmt|,
name|unlimited
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Config
name|config
range|:
name|iOffering
operator|.
name|getConfigs
argument_list|()
control|)
block|{
for|for
control|(
name|Subpart
name|subpart
range|:
name|config
operator|.
name|getSubparts
argument_list|()
control|)
block|{
name|int
name|lim
init|=
literal|0
decl_stmt|;
name|boolean
name|selected
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Clazz
name|clazz
range|:
name|subpart
operator|.
name|getClasses
argument_list|()
control|)
block|{
name|Node
name|node
init|=
name|iClasses
operator|.
name|get
argument_list|(
name|clazz
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|lim
operator|+=
name|clazz
operator|.
name|getLimit
argument_list|()
expr_stmt|;
name|selected
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|selected
operator|&&
operator|(
name|limit
operator|<
literal|0
operator|||
name|limit
operator|>
name|lim
operator|)
condition|)
block|{
name|limit
operator|=
name|lim
expr_stmt|;
block|}
block|}
block|}
name|int
name|lim
init|=
literal|0
decl_stmt|;
name|boolean
name|selected
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Config
name|config
range|:
name|iOffering
operator|.
name|getConfigs
argument_list|()
control|)
block|{
if|if
condition|(
name|config
operator|.
name|getLimit
argument_list|()
operator|==
literal|null
condition|)
name|totalUnlimited
operator|=
literal|true
expr_stmt|;
else|else
name|total
operator|+=
name|config
operator|.
name|getLimit
argument_list|()
expr_stmt|;
name|Node
name|cfg
init|=
name|iConfigs
operator|.
name|get
argument_list|(
name|config
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cfg
operator|!=
literal|null
operator|&&
name|cfg
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|selected
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|cfg
operator|.
name|getConfig
argument_list|()
operator|.
name|getLimit
argument_list|()
operator|==
literal|null
condition|)
name|unlimited
operator|=
literal|true
expr_stmt|;
else|else
name|lim
operator|+=
name|cfg
operator|.
name|getConfig
argument_list|()
operator|.
name|getLimit
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|selected
operator|&&
operator|(
name|limit
operator|<
literal|0
operator|||
name|limit
operator|>
name|lim
operator|)
condition|)
block|{
name|limit
operator|=
name|lim
expr_stmt|;
block|}
name|int
name|entered
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
try|try
block|{
name|entered
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|iLimit
operator|.
name|getWidget
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|limit
operator|>=
literal|0
operator|||
name|unlimited
condition|)
block|{
if|if
condition|(
name|unlimited
operator|||
name|limit
operator|>=
name|entered
condition|)
name|iLimit
operator|.
name|clearHint
argument_list|()
expr_stmt|;
else|else
name|iLimit
operator|.
name|setHint
argument_list|(
name|limit
operator|==
literal|0
condition|?
name|MESSAGES
operator|.
name|hintNoSpaceSelected
argument_list|()
else|:
name|limit
operator|==
literal|1
condition|?
name|MESSAGES
operator|.
name|hintOnlyOneSpaceSelected
argument_list|()
else|:
name|MESSAGES
operator|.
name|hintOnlyNSpacesSelected
argument_list|(
name|limit
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|iOffering
operator|.
name|isOffered
argument_list|()
condition|)
name|iLimit
operator|.
name|setHint
argument_list|(
name|MESSAGES
operator|.
name|hintCourseNotOffered
argument_list|(
name|iOffering
operator|.
name|getAbbv
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
name|totalUnlimited
operator|||
name|total
operator|>=
name|entered
operator|||
name|entered
operator|==
name|Integer
operator|.
name|MAX_VALUE
condition|)
name|iLimit
operator|.
name|clearHint
argument_list|()
expr_stmt|;
else|else
name|iLimit
operator|.
name|setHint
argument_list|(
name|total
operator|==
literal|0
condition|?
name|MESSAGES
operator|.
name|hintNoSpaceInCourse
argument_list|(
name|iOffering
operator|.
name|getAbbv
argument_list|()
argument_list|)
else|:
name|total
operator|==
literal|1
condition|?
name|MESSAGES
operator|.
name|hintOnlyOneSpaceInCourse
argument_list|(
name|iOffering
operator|.
name|getAbbv
argument_list|()
argument_list|)
else|:
name|MESSAGES
operator|.
name|hintOnlyNSpacesInCourse
argument_list|(
name|total
argument_list|,
name|iOffering
operator|.
name|getAbbv
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|CancelledCell
extends|extends
name|Label
implements|implements
name|UniTimeTable
operator|.
name|HasColSpan
implements|,
name|UniTimeTable
operator|.
name|HasCellAlignment
block|{
specifier|public
name|CancelledCell
parameter_list|()
block|{
name|super
argument_list|(
name|MESSAGES
operator|.
name|reservationCancelledClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getColSpan
parameter_list|()
block|{
return|return
literal|3
return|;
block|}
annotation|@
name|Override
specifier|public
name|HorizontalAlignmentConstant
name|getCellAlignment
parameter_list|()
block|{
return|return
name|HasHorizontalAlignment
operator|.
name|ALIGN_CENTER
return|;
block|}
block|}
block|}
end_class

end_unit

