begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|reservations
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|SimpleForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|ServerDateTimeFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeHeaderPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|HasCellAlignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|HasColSpan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|HasStyleName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|MouseClickListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|TableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|ReservationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|ReservationServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ReservationInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ReservationInterface
operator|.
name|Clazz
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ReservationInterface
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ReservationInterface
operator|.
name|Course
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ReservationInterface
operator|.
name|CourseReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ReservationInterface
operator|.
name|Areas
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ReservationInterface
operator|.
name|CurriculumReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ReservationInterface
operator|.
name|GroupReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ReservationInterface
operator|.
name|IdName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ReservationInterface
operator|.
name|IndividualReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ReservationInterface
operator|.
name|LCReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ReservationInterface
operator|.
name|OverrideReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ReservationInterface
operator|.
name|ReservationFilterRpcRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Unit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|WhiteSpace
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|DateTimeFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|IsSerializable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasVerticalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|RootPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|VerticalPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ReservationTable
extends|extends
name|Composite
block|{
specifier|protected
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|GwtConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|GwtResources
name|RESOURCES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtResources
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ReservationServiceAsync
name|iReservationService
init|=
name|GWT
operator|.
name|create
argument_list|(
name|ReservationService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|DateTimeFormat
name|sDF
init|=
name|ServerDateTimeFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|eventDateFormat
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|Long
name|iOfferingId
init|=
literal|null
decl_stmt|;
specifier|private
name|SimpleForm
name|iReservationPanel
decl_stmt|;
specifier|private
name|UniTimeTable
argument_list|<
name|ReservationInterface
argument_list|>
name|iReservations
decl_stmt|;
specifier|private
name|UniTimeHeaderPanel
name|iHeader
decl_stmt|;
specifier|private
name|AsyncCallback
argument_list|<
name|List
argument_list|<
name|ReservationInterface
argument_list|>
argument_list|>
name|iLoadCallback
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ReservationClickHandler
argument_list|>
name|iReservationClickHandlers
init|=
operator|new
name|ArrayList
argument_list|<
name|ReservationClickHandler
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|ReservationFilterRpcRequest
name|iLastQuery
init|=
literal|null
decl_stmt|;
specifier|public
name|ReservationTable
parameter_list|(
name|boolean
name|editable
parameter_list|,
name|boolean
name|showHeader
parameter_list|)
block|{
name|iReservationPanel
operator|=
operator|new
name|SimpleForm
argument_list|()
expr_stmt|;
name|iReservationPanel
operator|.
name|removeStyleName
argument_list|(
literal|"unitime-NotPrintableBottomLine"
argument_list|)
expr_stmt|;
name|iHeader
operator|=
operator|new
name|UniTimeHeaderPanel
argument_list|(
name|showHeader
condition|?
name|MESSAGES
operator|.
name|sectReservations
argument_list|()
else|:
literal|""
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setCollapsible
argument_list|(
name|showHeader
condition|?
name|ReservationCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getReservationCoursesDetails
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setTitleStyleName
argument_list|(
literal|"unitime3-HeaderTitle"
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|addCollapsibleHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|event
parameter_list|)
block|{
name|ReservationCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setReservationCoursesDetails
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iReservations
operator|.
name|getRowCount
argument_list|()
operator|==
literal|0
condition|)
name|refresh
argument_list|()
expr_stmt|;
if|else if
condition|(
name|iReservations
operator|.
name|getRowCount
argument_list|()
operator|>
literal|2
condition|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iReservations
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
condition|;
name|row
operator|++
control|)
block|{
name|iReservations
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|row
argument_list|,
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|showHeader
condition|)
block|{
name|iReservationPanel
operator|.
name|addHeaderRow
argument_list|(
name|iHeader
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setMarginTop
argument_list|(
literal|10
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
if|if
condition|(
name|editable
condition|)
block|{
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"add"
argument_list|,
name|MESSAGES
operator|.
name|buttonAddReservation
argument_list|()
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|ToolBox
operator|.
name|open
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"gwt.jsp?page=reservation&offering="
operator|+
name|iOfferingId
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|iReservations
operator|=
operator|new
name|UniTimeTable
argument_list|<
name|ReservationInterface
argument_list|>
argument_list|()
expr_stmt|;
name|iReservationPanel
operator|.
name|addRow
argument_list|(
name|iReservations
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|showHeader
condition|)
name|iReservationPanel
operator|.
name|addRow
argument_list|(
name|iHeader
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|iReservationPanel
argument_list|)
expr_stmt|;
if|if
condition|(
name|editable
condition|)
block|{
name|iReservations
operator|.
name|addMouseClickListener
argument_list|(
operator|new
name|MouseClickListener
argument_list|<
name|ReservationInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseClick
parameter_list|(
name|TableEvent
argument_list|<
name|ReservationInterface
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getData
argument_list|()
operator|!=
literal|null
operator|&&
name|event
operator|.
name|getData
argument_list|()
operator|.
name|isEditable
argument_list|()
condition|)
block|{
name|ReservationClickedEvent
name|e
init|=
operator|new
name|ReservationClickedEvent
argument_list|(
name|event
operator|.
name|getData
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ReservationClickHandler
name|h
range|:
name|iReservationClickHandlers
control|)
block|{
name|h
operator|.
name|onClick
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|initCallbacks
parameter_list|()
block|{
if|if
condition|(
name|iLoadCallback
operator|==
literal|null
condition|)
block|{
name|iLoadCallback
operator|=
operator|new
name|AsyncCallback
argument_list|<
name|List
argument_list|<
name|ReservationInterface
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedToLoadReservations
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setCollapsible
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|ReservationCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setReservationCoursesDetails
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|List
argument_list|<
name|ReservationInterface
argument_list|>
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iHeader
operator|.
name|setMessage
argument_list|(
name|MESSAGES
operator|.
name|hintOfferingHasNoReservations
argument_list|()
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setCollapsible
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|populate
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|iReservations
operator|.
name|getRowCount
argument_list|()
operator|>
literal|2
condition|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iReservations
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
condition|;
name|row
operator|++
control|)
block|{
name|iReservations
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|row
argument_list|,
name|ReservationCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getReservationCoursesDetails
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|iHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|refresh
parameter_list|()
block|{
name|clear
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|iOfferingId
operator|!=
literal|null
condition|)
block|{
name|iReservationService
operator|.
name|getReservations
argument_list|(
name|iOfferingId
argument_list|,
name|iLoadCallback
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
argument_list|(
name|iLastQuery
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|clear
parameter_list|(
name|boolean
name|loading
parameter_list|)
block|{
for|for
control|(
name|int
name|row
init|=
name|iReservations
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
init|;
name|row
operator|>=
literal|0
condition|;
name|row
operator|--
control|)
block|{
name|iReservations
operator|.
name|removeRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
name|iReservations
operator|.
name|clear
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|loading
condition|)
name|iHeader
operator|.
name|showLoading
argument_list|()
expr_stmt|;
else|else
name|iHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|populate
parameter_list|(
name|List
argument_list|<
name|ReservationInterface
argument_list|>
name|reservations
parameter_list|)
block|{
name|List
argument_list|<
name|UniTimeTableHeader
argument_list|>
name|header
init|=
operator|new
name|ArrayList
argument_list|<
name|UniTimeTableHeader
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|ReservationColumn
name|column
range|:
name|ReservationColumn
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|column
operator|==
name|ReservationColumn
operator|.
name|OFFERING
operator|&&
name|iOfferingId
operator|!=
literal|null
condition|)
continue|continue;
specifier|final
name|UniTimeTableHeader
name|h
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|getColumnName
argument_list|(
name|column
argument_list|)
argument_list|)
decl_stmt|;
name|h
operator|.
name|setWidth
argument_list|(
name|getColumnWidth
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Comparator
argument_list|<
name|ReservationInterface
argument_list|>
name|cmp
init|=
name|column
operator|.
name|getComparator
argument_list|()
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|null
condition|)
block|{
name|h
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iReservations
operator|.
name|sort
argument_list|(
name|h
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|ReservationCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setSortBy
argument_list|(
name|h
operator|.
name|getOrder
argument_list|()
condition|?
literal|1
operator|+
name|column
operator|.
name|ordinal
argument_list|()
else|:
operator|-
literal|1
operator|-
name|column
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opSortBy
argument_list|(
name|getFieldName
argument_list|(
name|column
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|header
operator|.
name|add
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
name|iReservations
operator|.
name|addRow
argument_list|(
literal|null
argument_list|,
name|header
argument_list|)
expr_stmt|;
name|int
name|total
init|=
literal|0
decl_stmt|,
name|lastLike
init|=
literal|0
decl_stmt|,
name|projection
init|=
literal|0
decl_stmt|,
name|enrollment
init|=
literal|0
decl_stmt|;
name|boolean
name|unlimited
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ReservationInterface
name|reservation
range|:
name|reservations
control|)
block|{
name|List
argument_list|<
name|Widget
argument_list|>
name|line
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|iOfferingId
operator|==
literal|null
condition|)
block|{
name|VerticalPanel
name|courses
init|=
operator|new
name|VerticalPanel
argument_list|()
decl_stmt|;
if|if
condition|(
name|reservation
operator|instanceof
name|CourseReservation
condition|)
block|{
name|Course
name|course
init|=
operator|(
operator|(
name|CourseReservation
operator|)
name|reservation
operator|)
operator|.
name|getCourse
argument_list|()
decl_stmt|;
name|courses
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|course
operator|.
name|getAbbv
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|LCReservation
condition|)
block|{
name|Course
name|course
init|=
operator|(
operator|(
name|LCReservation
operator|)
name|reservation
operator|)
operator|.
name|getCourse
argument_list|()
decl_stmt|;
name|courses
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|course
operator|.
name|getAbbv
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|courses
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|reservation
operator|.
name|getOffering
argument_list|()
operator|.
name|getAbbv
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Course
name|course
range|:
name|reservation
operator|.
name|getOffering
argument_list|()
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|course
operator|.
name|getAbbv
argument_list|()
operator|.
name|equals
argument_list|(
name|reservation
operator|.
name|getOffering
argument_list|()
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
continue|continue;
name|Label
name|l
init|=
operator|new
name|Label
argument_list|(
name|course
operator|.
name|getAbbv
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|l
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setMarginLeft
argument_list|(
literal|10
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|l
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
literal|"gray"
argument_list|)
expr_stmt|;
name|courses
operator|.
name|add
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
block|}
name|line
operator|.
name|add
argument_list|(
name|courses
argument_list|)
expr_stmt|;
block|}
name|String
name|flags
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|reservation
operator|.
name|isOverride
argument_list|()
condition|)
block|{
if|if
condition|(
name|reservation
operator|.
name|isAllowOverlaps
argument_list|()
condition|)
name|flags
operator|+=
literal|"\n  "
operator|+
name|MESSAGES
operator|.
name|checkCanOverlap
argument_list|()
expr_stmt|;
if|if
condition|(
name|reservation
operator|.
name|isOverLimit
argument_list|()
condition|)
name|flags
operator|+=
literal|"\n  "
operator|+
name|MESSAGES
operator|.
name|checkCanOverLimit
argument_list|()
expr_stmt|;
if|if
condition|(
name|reservation
operator|.
name|isMustBeUsed
argument_list|()
condition|)
name|flags
operator|+=
literal|"\n  "
operator|+
name|MESSAGES
operator|.
name|checkMustBeUsed
argument_list|()
expr_stmt|;
if|if
condition|(
name|reservation
operator|.
name|isAlwaysExpired
argument_list|()
condition|)
name|flags
operator|+=
literal|"\n  "
operator|+
name|MESSAGES
operator|.
name|checkAllwaysExpired
argument_list|()
expr_stmt|;
block|}
name|Integer
name|limit
init|=
name|reservation
operator|.
name|getLimit
argument_list|()
decl_stmt|;
if|if
condition|(
name|reservation
operator|instanceof
name|CourseReservation
condition|)
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|MESSAGES
operator|.
name|reservationCourseAbbv
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Course
name|course
init|=
operator|(
operator|(
name|CourseReservation
operator|)
name|reservation
operator|)
operator|.
name|getCourse
argument_list|()
decl_stmt|;
name|limit
operator|=
name|course
operator|.
name|getLimit
argument_list|()
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|course
operator|.
name|getAbbv
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|IndividualReservation
condition|)
block|{
if|if
condition|(
name|reservation
operator|.
name|isOverride
argument_list|()
condition|)
block|{
name|Label
name|label
init|=
operator|new
name|Label
argument_list|(
name|MESSAGES
operator|.
name|reservationIndividualOverrideAbbv
argument_list|()
operator|+
name|flags
argument_list|)
decl_stmt|;
name|label
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setWhiteSpace
argument_list|(
name|WhiteSpace
operator|.
name|PRE
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|label
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|OverrideReservation
condition|)
block|{
name|String
name|type
init|=
name|CONSTANTS
operator|.
name|reservationOverrideTypeAbbv
argument_list|()
index|[
operator|(
operator|(
name|OverrideReservation
operator|)
name|reservation
operator|)
operator|.
name|getType
argument_list|()
operator|.
name|ordinal
argument_list|()
index|]
decl_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|type
operator|==
literal|null
condition|?
operator|(
operator|(
name|OverrideReservation
operator|)
name|reservation
operator|)
operator|.
name|getType
argument_list|()
operator|.
name|name
argument_list|()
else|:
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|MESSAGES
operator|.
name|reservationIndividualAbbv
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|VerticalPanel
name|students
init|=
operator|new
name|VerticalPanel
argument_list|()
decl_stmt|;
name|limit
operator|=
operator|(
operator|(
name|IndividualReservation
operator|)
name|reservation
operator|)
operator|.
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
for|for
control|(
name|IdName
name|student
range|:
operator|(
operator|(
name|IndividualReservation
operator|)
name|reservation
operator|)
operator|.
name|getStudents
argument_list|()
control|)
block|{
name|students
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|student
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|line
operator|.
name|add
argument_list|(
name|students
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|GroupReservation
condition|)
block|{
if|if
condition|(
name|reservation
operator|.
name|isOverride
argument_list|()
condition|)
block|{
name|Label
name|label
init|=
operator|new
name|Label
argument_list|(
name|MESSAGES
operator|.
name|reservationStudentGroupOverrideAbbv
argument_list|()
operator|+
name|flags
argument_list|)
decl_stmt|;
name|label
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setWhiteSpace
argument_list|(
name|WhiteSpace
operator|.
name|PRE
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|label
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|MESSAGES
operator|.
name|reservationStudentGroupAbbv
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|IdName
name|group
init|=
operator|(
operator|(
name|GroupReservation
operator|)
name|reservation
operator|)
operator|.
name|getGroup
argument_list|()
decl_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|group
operator|.
name|getAbbv
argument_list|()
operator|+
literal|" - "
operator|+
name|group
operator|.
name|getName
argument_list|()
operator|+
literal|" ("
operator|+
name|group
operator|.
name|getLimit
argument_list|()
operator|+
literal|")"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|LCReservation
condition|)
block|{
if|if
condition|(
name|reservation
operator|.
name|getOffering
argument_list|()
operator|.
name|getCourses
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|&&
name|iOfferingId
operator|!=
literal|null
condition|)
block|{
name|Course
name|course
init|=
operator|(
operator|(
name|LCReservation
operator|)
name|reservation
operator|)
operator|.
name|getCourse
argument_list|()
decl_stmt|;
name|Label
name|label
init|=
operator|new
name|Label
argument_list|(
name|MESSAGES
operator|.
name|reservationLearningCommunityAbbv
argument_list|()
operator|+
literal|"\n  "
operator|+
name|course
operator|.
name|getAbbv
argument_list|()
argument_list|)
decl_stmt|;
name|label
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setWhiteSpace
argument_list|(
name|WhiteSpace
operator|.
name|PRE
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|label
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|MESSAGES
operator|.
name|reservationLearningCommunityAbbv
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|IdName
name|group
init|=
operator|(
operator|(
name|LCReservation
operator|)
name|reservation
operator|)
operator|.
name|getGroup
argument_list|()
decl_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|group
operator|.
name|getAbbv
argument_list|()
operator|+
literal|" - "
operator|+
name|group
operator|.
name|getName
argument_list|()
operator|+
literal|" ("
operator|+
name|group
operator|.
name|getLimit
argument_list|()
operator|+
literal|")"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|CurriculumReservation
condition|)
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|MESSAGES
operator|.
name|reservationCurriculumAbbv
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Areas
name|curriculum
init|=
operator|(
operator|(
name|CurriculumReservation
operator|)
name|reservation
operator|)
operator|.
name|getCurriculum
argument_list|()
decl_stmt|;
name|VerticalPanel
name|owner
init|=
operator|new
name|VerticalPanel
argument_list|()
decl_stmt|;
for|for
control|(
name|IdName
name|area
range|:
name|curriculum
operator|.
name|getAreas
argument_list|()
control|)
block|{
name|Label
name|l
init|=
operator|new
name|Label
argument_list|(
name|area
operator|.
name|getAbbv
argument_list|()
operator|+
literal|" - "
operator|+
name|area
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|owner
operator|.
name|add
argument_list|(
name|l
argument_list|)
expr_stmt|;
for|for
control|(
name|IdName
name|major
range|:
name|curriculum
operator|.
name|getMajors
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|area
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|major
operator|.
name|getParentId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|Label
name|o
init|=
operator|new
name|Label
argument_list|(
name|major
operator|.
name|getAbbv
argument_list|()
operator|+
literal|" - "
operator|+
name|major
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|o
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setMarginLeft
argument_list|(
literal|10
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|owner
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
for|for
control|(
name|IdName
name|conc
range|:
name|curriculum
operator|.
name|getConcentrations
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|major
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|conc
operator|.
name|getParentId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|Label
name|c
init|=
operator|new
name|Label
argument_list|(
name|conc
operator|.
name|getAbbv
argument_list|()
operator|+
literal|" - "
operator|+
name|conc
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|c
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setMarginLeft
argument_list|(
literal|20
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|owner
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|IdName
name|minor
range|:
name|curriculum
operator|.
name|getMinors
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|area
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|minor
operator|.
name|getParentId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|Label
name|o
init|=
operator|new
name|Label
argument_list|(
name|minor
operator|.
name|getAbbv
argument_list|()
operator|+
literal|" - "
operator|+
name|minor
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|o
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setMarginLeft
argument_list|(
literal|10
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|owner
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|IdName
name|clasf
range|:
name|curriculum
operator|.
name|getClassifications
argument_list|()
control|)
block|{
name|Label
name|l
init|=
operator|new
name|Label
argument_list|(
name|clasf
operator|.
name|getAbbv
argument_list|()
operator|+
literal|" - "
operator|+
name|clasf
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|l
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setMarginLeft
argument_list|(
literal|10
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|owner
operator|.
name|add
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|IdName
name|major
range|:
name|curriculum
operator|.
name|getMajors
argument_list|()
control|)
block|{
if|if
condition|(
name|major
operator|.
name|getParentId
argument_list|()
operator|!=
literal|null
condition|)
continue|continue;
name|Label
name|l
init|=
operator|new
name|Label
argument_list|(
name|major
operator|.
name|getAbbv
argument_list|()
operator|+
literal|" - "
operator|+
name|major
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|l
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setMarginLeft
argument_list|(
literal|10
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|owner
operator|.
name|add
argument_list|(
name|l
argument_list|)
expr_stmt|;
for|for
control|(
name|IdName
name|conc
range|:
name|curriculum
operator|.
name|getConcentrations
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|major
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|conc
operator|.
name|getParentId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|Label
name|c
init|=
operator|new
name|Label
argument_list|(
name|conc
operator|.
name|getAbbv
argument_list|()
operator|+
literal|" - "
operator|+
name|conc
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|c
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setMarginLeft
argument_list|(
literal|20
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|owner
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|IdName
name|minor
range|:
name|curriculum
operator|.
name|getMinors
argument_list|()
control|)
block|{
if|if
condition|(
name|minor
operator|.
name|getParentId
argument_list|()
operator|!=
literal|null
condition|)
continue|continue;
name|Label
name|l
init|=
operator|new
name|Label
argument_list|(
name|minor
operator|.
name|getAbbv
argument_list|()
operator|+
literal|" - "
operator|+
name|minor
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|l
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setMarginLeft
argument_list|(
literal|10
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|owner
operator|.
name|add
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
name|line
operator|.
name|add
argument_list|(
name|owner
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|MESSAGES
operator|.
name|reservationUnknownAbbv
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|VerticalPanel
name|restrictions
init|=
operator|new
name|VerticalPanel
argument_list|()
decl_stmt|;
for|for
control|(
name|Config
name|config
range|:
name|reservation
operator|.
name|getConfigs
argument_list|()
control|)
block|{
name|restrictions
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|MESSAGES
operator|.
name|selectionConfiguration
argument_list|(
name|config
operator|.
name|getName
argument_list|()
argument_list|,
name|config
operator|.
name|getLimit
argument_list|()
operator|==
literal|null
condition|?
name|MESSAGES
operator|.
name|configUnlimited
argument_list|()
else|:
name|config
operator|.
name|getLimit
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Clazz
name|clazz
range|:
name|reservation
operator|.
name|getClasses
argument_list|()
control|)
block|{
name|restrictions
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
operator|+
literal|" ("
operator|+
name|clazz
operator|.
name|getLimit
argument_list|()
operator|+
literal|")"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|line
operator|.
name|add
argument_list|(
name|restrictions
argument_list|)
expr_stmt|;
if|if
condition|(
name|reservation
operator|.
name|hasInclusive
argument_list|()
operator|&&
name|reservation
operator|.
name|isInclusive
argument_list|()
condition|)
block|{
name|restrictions
operator|.
name|addStyleName
argument_list|(
literal|"unitime-ReservationInclusive"
argument_list|)
expr_stmt|;
name|restrictions
operator|.
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|reservationInclusiveTrue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|reservation
operator|.
name|hasInclusive
argument_list|()
operator|&&
operator|!
name|reservation
operator|.
name|isInclusive
argument_list|()
condition|)
block|{
name|restrictions
operator|.
name|addStyleName
argument_list|(
literal|"unitime-ReservationExclusive"
argument_list|)
expr_stmt|;
name|restrictions
operator|.
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|reservationInclusiveFalse
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|line
operator|.
name|add
argument_list|(
operator|new
name|Number
argument_list|(
name|limit
operator|==
literal|null
condition|?
name|MESSAGES
operator|.
name|infinity
argument_list|()
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|limit
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|==
literal|null
condition|)
name|unlimited
operator|=
literal|true
expr_stmt|;
else|else
name|total
operator|+=
name|limit
expr_stmt|;
if|if
condition|(
name|reservation
operator|.
name|getLastLike
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|Number
argument_list|(
name|reservation
operator|.
name|getLastLike
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|lastLike
operator|+=
name|reservation
operator|.
name|getLastLike
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|reservation
operator|.
name|getProjection
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|Number
argument_list|(
name|reservation
operator|.
name|getProjection
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|projection
operator|+=
name|reservation
operator|.
name|getProjection
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|reservation
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|Number
argument_list|(
name|reservation
operator|.
name|getEnrollment
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|enrollment
operator|+=
name|reservation
operator|.
name|getEnrollment
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|reservation
operator|instanceof
name|OverrideReservation
operator|&&
operator|!
operator|(
operator|(
name|OverrideReservation
operator|)
name|reservation
operator|)
operator|.
name|getType
argument_list|()
operator|.
name|isCanHaveExpirationDate
argument_list|()
condition|)
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|MESSAGES
operator|.
name|reservationOverrideAbbv
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|MESSAGES
operator|.
name|reservationOverrideAbbv
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|reservation
operator|.
name|isOverride
argument_list|()
operator|&&
name|reservation
operator|.
name|isAlwaysExpired
argument_list|()
condition|)
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|MESSAGES
operator|.
name|reservationOverrideAbbv
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|MESSAGES
operator|.
name|reservationOverrideAbbv
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|reservation
operator|.
name|getStartDate
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|sDF
operator|.
name|format
argument_list|(
name|reservation
operator|.
name|getStartDate
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|reservation
operator|.
name|getExpirationDate
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|sDF
operator|.
name|format
argument_list|(
name|reservation
operator|.
name|getExpirationDate
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iReservations
operator|.
name|addRow
argument_list|(
name|reservation
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|iReservations
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVerticalAlign
argument_list|(
name|iReservations
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
argument_list|,
name|HasVerticalAlignment
operator|.
name|ALIGN_TOP
argument_list|)
expr_stmt|;
if|if
condition|(
name|reservation
operator|.
name|isExpired
argument_list|()
condition|)
for|for
control|(
name|Widget
name|w
range|:
name|line
control|)
name|w
operator|.
name|addStyleName
argument_list|(
literal|"unitime-ReservationExpired"
argument_list|)
expr_stmt|;
if|if
condition|(
name|reservation
operator|.
name|isEditable
argument_list|()
condition|)
for|for
control|(
name|Widget
name|w
range|:
name|line
control|)
name|w
operator|.
name|addStyleName
argument_list|(
literal|"unitime-Editable"
argument_list|)
expr_stmt|;
else|else
for|for
control|(
name|Widget
name|w
range|:
name|line
control|)
name|w
operator|.
name|addStyleName
argument_list|(
literal|"unitime-ReservationDisabled"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iOfferingId
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Widget
argument_list|>
name|footer
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
name|footer
operator|.
name|add
argument_list|(
operator|new
name|TotalLabel
argument_list|(
name|MESSAGES
operator|.
name|totalReservedSpace
argument_list|()
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|footer
operator|.
name|add
argument_list|(
operator|new
name|TotalNumber
argument_list|(
name|unlimited
condition|?
name|MESSAGES
operator|.
name|infinity
argument_list|()
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|total
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|footer
operator|.
name|add
argument_list|(
operator|new
name|TotalNumber
argument_list|(
name|lastLike
operator|<=
literal|0
condition|?
literal|""
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|lastLike
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|footer
operator|.
name|add
argument_list|(
operator|new
name|TotalNumber
argument_list|(
name|projection
operator|<=
literal|0
condition|?
literal|""
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|projection
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|footer
operator|.
name|add
argument_list|(
operator|new
name|TotalNumber
argument_list|(
name|enrollment
operator|<=
literal|0
condition|?
literal|""
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|enrollment
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|footer
operator|.
name|add
argument_list|(
operator|new
name|TotalLabel
argument_list|(
literal|"&nbsp;"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|footer
operator|.
name|add
argument_list|(
operator|new
name|TotalLabel
argument_list|(
literal|"&nbsp;"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|iReservations
operator|.
name|addRow
argument_list|(
literal|null
argument_list|,
name|footer
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|reservations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|errorNoMatchingReservation
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|sortBy
init|=
name|ReservationCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getSortBy
argument_list|()
decl_stmt|;
if|if
condition|(
name|sortBy
operator|!=
literal|0
condition|)
block|{
name|int
name|col
init|=
name|Math
operator|.
name|abs
argument_list|(
name|sortBy
argument_list|)
operator|-
literal|1
decl_stmt|;
name|ReservationColumn
name|column
init|=
name|ReservationColumn
operator|.
name|values
argument_list|()
index|[
name|col
index|]
decl_stmt|;
name|Comparator
argument_list|<
name|ReservationInterface
argument_list|>
name|cmp
init|=
name|column
operator|.
name|getComparator
argument_list|()
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|null
condition|)
block|{
name|boolean
name|asc
init|=
name|sortBy
operator|>
literal|0
decl_stmt|;
name|UniTimeTableHeader
name|h
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|iOfferingId
operator|==
literal|null
condition|)
name|h
operator|=
name|header
operator|.
name|get
argument_list|(
name|col
argument_list|)
expr_stmt|;
if|else if
condition|(
name|Math
operator|.
name|abs
argument_list|(
name|sortBy
argument_list|)
operator|>
literal|1
condition|)
name|h
operator|=
name|header
operator|.
name|get
argument_list|(
name|col
operator|-
literal|1
argument_list|)
expr_stmt|;
name|iReservations
operator|.
name|sort
argument_list|(
name|h
argument_list|,
name|cmp
argument_list|,
name|asc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|Number
extends|extends
name|HTML
implements|implements
name|HasCellAlignment
block|{
specifier|public
name|Number
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|super
argument_list|(
name|text
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|HorizontalAlignmentConstant
name|getCellAlignment
parameter_list|()
block|{
return|return
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TotalNumber
extends|extends
name|Number
implements|implements
name|HasStyleName
block|{
specifier|public
name|TotalNumber
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|super
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getStyleName
parameter_list|()
block|{
return|return
literal|"unitime-TotalRow"
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TotalLabel
extends|extends
name|HTML
implements|implements
name|HasColSpan
implements|,
name|HasStyleName
block|{
specifier|private
name|int
name|iColSpan
decl_stmt|;
specifier|public
name|TotalLabel
parameter_list|(
name|String
name|text
parameter_list|,
name|int
name|colspan
parameter_list|)
block|{
name|super
argument_list|(
name|text
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iColSpan
operator|=
name|colspan
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getColSpan
parameter_list|()
block|{
return|return
name|iColSpan
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getStyleName
parameter_list|()
block|{
return|return
literal|"unitime-TotalRow"
return|;
block|}
block|}
specifier|public
name|void
name|insert
parameter_list|(
specifier|final
name|RootPanel
name|panel
parameter_list|)
block|{
name|initCallbacks
argument_list|()
expr_stmt|;
name|iOfferingId
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|panel
operator|.
name|getElement
argument_list|()
operator|.
name|getInnerText
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ReservationCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getReservationCoursesDetails
argument_list|()
condition|)
block|{
name|refresh
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|clear
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
name|iHeader
operator|.
name|setCollapsible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|panel
operator|.
name|getElement
argument_list|()
operator|.
name|setInnerText
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|panel
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|addReservationClickHandler
argument_list|(
operator|new
name|ReservationClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ReservationClickedEvent
name|evt
parameter_list|)
block|{
name|ToolBox
operator|.
name|open
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"gwt.jsp?page=reservation&id="
operator|+
name|evt
operator|.
name|getReservation
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|"&reservations="
operator|+
name|getReservationIds
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|scrollIntoView
parameter_list|(
name|Long
name|reservationId
parameter_list|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|1
init|;
name|r
operator|<
name|iReservations
operator|.
name|getRowCount
argument_list|()
condition|;
name|r
operator|++
control|)
block|{
if|if
condition|(
name|iReservations
operator|.
name|getData
argument_list|(
name|r
argument_list|)
operator|!=
literal|null
operator|&&
name|iReservations
operator|.
name|getData
argument_list|(
name|r
argument_list|)
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|reservationId
argument_list|)
condition|)
block|{
name|iReservations
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|r
argument_list|)
operator|.
name|scrollIntoView
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|ReservationClickedEvent
block|{
specifier|private
name|ReservationInterface
name|iReservation
decl_stmt|;
specifier|public
name|ReservationClickedEvent
parameter_list|(
name|ReservationInterface
name|reservation
parameter_list|)
block|{
name|iReservation
operator|=
name|reservation
expr_stmt|;
block|}
specifier|public
name|ReservationInterface
name|getReservation
parameter_list|()
block|{
return|return
name|iReservation
return|;
block|}
block|}
specifier|public
interface|interface
name|ReservationClickHandler
block|{
specifier|public
name|void
name|onClick
parameter_list|(
name|ReservationClickedEvent
name|evt
parameter_list|)
function_decl|;
block|}
specifier|public
name|void
name|addReservationClickHandler
parameter_list|(
name|ReservationClickHandler
name|h
parameter_list|)
block|{
name|iReservationClickHandlers
operator|.
name|add
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|query
parameter_list|(
name|ReservationFilterRpcRequest
name|filter
parameter_list|,
specifier|final
name|AsyncCallback
argument_list|<
name|List
argument_list|<
name|ReservationInterface
argument_list|>
argument_list|>
name|callback
parameter_list|)
block|{
name|iLastQuery
operator|=
name|filter
expr_stmt|;
name|clear
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iReservationService
operator|.
name|findReservations
argument_list|(
name|filter
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|List
argument_list|<
name|ReservationInterface
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|List
argument_list|<
name|ReservationInterface
argument_list|>
name|result
parameter_list|)
block|{
name|populate
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
name|callback
operator|.
name|onSuccess
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedToLoadReservations
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|checkAccess
argument_list|(
name|caught
argument_list|)
expr_stmt|;
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
name|callback
operator|.
name|onFailure
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|select
parameter_list|(
name|Long
name|curriculumId
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iReservations
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ReservationInterface
name|r
init|=
name|iReservations
operator|.
name|getData
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|r
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|curriculumId
argument_list|)
condition|)
name|iReservations
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|i
argument_list|,
literal|"unitime-TableRowSelected"
argument_list|)
expr_stmt|;
if|else if
condition|(
literal|"unitime-TableRowSelected"
operator|.
name|equals
argument_list|(
name|iReservations
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|getStyleName
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
name|iReservations
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|removeStyleName
argument_list|(
name|i
argument_list|,
literal|"unitime-TableRowSelected"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setErrorMessage
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ReservationInterface
name|getNext
parameter_list|(
name|Long
name|reservationId
parameter_list|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iReservations
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
condition|;
name|row
operator|++
control|)
block|{
name|ReservationInterface
name|r
init|=
name|iReservations
operator|.
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
operator|&&
name|r
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|reservationId
argument_list|)
condition|)
return|return
name|iReservations
operator|.
name|getData
argument_list|(
name|row
operator|+
literal|1
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|ReservationInterface
name|getPrevious
parameter_list|(
name|Long
name|reservationId
parameter_list|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|2
init|;
name|row
operator|<
name|iReservations
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|ReservationInterface
name|r
init|=
name|iReservations
operator|.
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
operator|&&
name|r
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|reservationId
argument_list|)
condition|)
return|return
name|iReservations
operator|.
name|getData
argument_list|(
name|row
operator|-
literal|1
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|getReservationIds
parameter_list|()
block|{
name|String
name|ret
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iReservations
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|ReservationInterface
name|r
init|=
name|iReservations
operator|.
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
operator|&&
name|r
operator|.
name|getId
argument_list|()
operator|!=
literal|null
condition|)
name|ret
operator|+=
operator|(
name|ret
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
name|r
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|String
name|getColumnWidth
parameter_list|(
name|ReservationColumn
name|column
parameter_list|)
block|{
switch|switch
condition|(
name|column
condition|)
block|{
case|case
name|OFFERING
case|:
case|case
name|TYPE
case|:
return|return
literal|"100px"
return|;
case|case
name|OWNER
case|:
return|return
literal|"250px"
return|;
case|case
name|RESTRICTIONS
case|:
return|return
literal|"160px"
return|;
case|case
name|RESERVED_SPACE
case|:
case|case
name|LAST_LIKE
case|:
case|case
name|PROJECTED_BY_RULE
case|:
case|case
name|CURRENT_ENROLLMENT
case|:
case|case
name|EXPIRATION_DATE
case|:
case|case
name|START_DATE
case|:
return|return
literal|"80px"
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|String
name|getColumnName
parameter_list|(
name|ReservationColumn
name|column
parameter_list|)
block|{
switch|switch
condition|(
name|column
condition|)
block|{
case|case
name|OFFERING
case|:
return|return
name|MESSAGES
operator|.
name|colInstructionalOffering
argument_list|()
return|;
case|case
name|TYPE
case|:
return|return
name|MESSAGES
operator|.
name|colReservationType
argument_list|()
return|;
case|case
name|OWNER
case|:
return|return
name|MESSAGES
operator|.
name|colOwner
argument_list|()
return|;
case|case
name|RESTRICTIONS
case|:
return|return
name|MESSAGES
operator|.
name|colRestrictions
argument_list|()
return|;
case|case
name|RESERVED_SPACE
case|:
return|return
name|MESSAGES
operator|.
name|colReservedSpace
argument_list|()
return|;
case|case
name|LAST_LIKE
case|:
return|return
name|MESSAGES
operator|.
name|colLastLikeEnrollment
argument_list|()
return|;
case|case
name|PROJECTED_BY_RULE
case|:
return|return
name|MESSAGES
operator|.
name|colProjectedByRule
argument_list|()
return|;
case|case
name|CURRENT_ENROLLMENT
case|:
return|return
name|MESSAGES
operator|.
name|colCurrentEnrollment
argument_list|()
return|;
case|case
name|EXPIRATION_DATE
case|:
return|return
name|MESSAGES
operator|.
name|colExpirationDate
argument_list|()
return|;
case|case
name|START_DATE
case|:
return|return
name|MESSAGES
operator|.
name|colStartDate
argument_list|()
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|String
name|getFieldName
parameter_list|(
name|ReservationColumn
name|column
parameter_list|)
block|{
switch|switch
condition|(
name|column
condition|)
block|{
case|case
name|OFFERING
case|:
return|return
name|MESSAGES
operator|.
name|fieldInstructionalOffering
argument_list|()
return|;
case|case
name|TYPE
case|:
return|return
name|MESSAGES
operator|.
name|fieldReservationType
argument_list|()
return|;
case|case
name|OWNER
case|:
return|return
name|MESSAGES
operator|.
name|fieldOwner
argument_list|()
return|;
case|case
name|RESTRICTIONS
case|:
return|return
name|MESSAGES
operator|.
name|colRestrictions
argument_list|()
return|;
case|case
name|RESERVED_SPACE
case|:
return|return
name|MESSAGES
operator|.
name|fieldReservedSpace
argument_list|()
return|;
case|case
name|LAST_LIKE
case|:
return|return
name|MESSAGES
operator|.
name|fieldLastLikeEnrollment
argument_list|()
return|;
case|case
name|PROJECTED_BY_RULE
case|:
return|return
name|MESSAGES
operator|.
name|fieldProjectedByRule
argument_list|()
return|;
case|case
name|CURRENT_ENROLLMENT
case|:
return|return
name|MESSAGES
operator|.
name|fieldCurrentEnrollment
argument_list|()
return|;
case|case
name|EXPIRATION_DATE
case|:
return|return
name|MESSAGES
operator|.
name|fieldExpirationDate
argument_list|()
return|;
case|case
name|START_DATE
case|:
return|return
name|MESSAGES
operator|.
name|fieldStartDate
argument_list|()
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
enum|enum
name|ReservationColumn
implements|implements
name|IsSerializable
block|{
name|OFFERING
block|,
name|TYPE
block|,
name|OWNER
block|,
name|RESTRICTIONS
block|,
name|RESERVED_SPACE
block|,
name|LAST_LIKE
block|,
name|PROJECTED_BY_RULE
block|,
name|CURRENT_ENROLLMENT
block|,
name|START_DATE
block|,
name|EXPIRATION_DATE
block|, 		;
specifier|public
name|Comparator
argument_list|<
name|ReservationInterface
argument_list|>
name|getComparator
parameter_list|()
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|OFFERING
case|:
return|return
operator|new
name|Comparator
argument_list|<
name|ReservationInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ReservationInterface
name|r1
parameter_list|,
name|ReservationInterface
name|r2
parameter_list|)
block|{
return|return
name|r1
operator|.
name|compareTo
argument_list|(
name|r2
argument_list|)
return|;
block|}
block|}
return|;
case|case
name|TYPE
case|:
return|return
operator|new
name|Comparator
argument_list|<
name|ReservationInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ReservationInterface
name|r1
parameter_list|,
name|ReservationInterface
name|r2
parameter_list|)
block|{
name|int
name|cmp
init|=
operator|new
name|Integer
argument_list|(
name|r1
operator|.
name|getPriority
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getPriority
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|r1
operator|.
name|compareTo
argument_list|(
name|r2
argument_list|)
return|;
block|}
block|}
return|;
case|case
name|OWNER
case|:
return|return
operator|new
name|Comparator
argument_list|<
name|ReservationInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ReservationInterface
name|r1
parameter_list|,
name|ReservationInterface
name|r2
parameter_list|)
block|{
name|int
name|cmp
init|=
operator|new
name|Integer
argument_list|(
name|r1
operator|.
name|getPriority
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getPriority
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|r1
operator|.
name|toString
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|r1
operator|.
name|compareTo
argument_list|(
name|r2
argument_list|)
return|;
block|}
block|}
return|;
case|case
name|RESTRICTIONS
case|:
return|return
operator|new
name|Comparator
argument_list|<
name|ReservationInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ReservationInterface
name|r1
parameter_list|,
name|ReservationInterface
name|r2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|r1
operator|.
name|getOffering
argument_list|()
operator|.
name|getAbbv
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getOffering
argument_list|()
operator|.
name|getAbbv
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|r1
operator|.
name|getConfigs
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getConfigs
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|r1
operator|.
name|getClasses
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getClasses
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|r1
operator|.
name|compareTo
argument_list|(
name|r2
argument_list|)
return|;
block|}
block|}
return|;
case|case
name|RESERVED_SPACE
case|:
return|return
operator|new
name|Comparator
argument_list|<
name|ReservationInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ReservationInterface
name|r1
parameter_list|,
name|ReservationInterface
name|r2
parameter_list|)
block|{
name|int
name|cmp
init|=
operator|new
name|Integer
argument_list|(
name|r1
operator|.
name|getLimit
argument_list|()
operator|==
literal|null
condition|?
name|Integer
operator|.
name|MAX_VALUE
else|:
name|r1
operator|.
name|getLimit
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getLimit
argument_list|()
operator|==
literal|null
condition|?
name|Integer
operator|.
name|MAX_VALUE
else|:
name|r2
operator|.
name|getLimit
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
operator|-
name|cmp
return|;
return|return
name|r1
operator|.
name|compareTo
argument_list|(
name|r2
argument_list|)
return|;
block|}
block|}
return|;
case|case
name|LAST_LIKE
case|:
return|return
operator|new
name|Comparator
argument_list|<
name|ReservationInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ReservationInterface
name|r1
parameter_list|,
name|ReservationInterface
name|r2
parameter_list|)
block|{
name|int
name|cmp
init|=
operator|new
name|Integer
argument_list|(
name|r1
operator|.
name|getLastLike
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|r1
operator|.
name|getLastLike
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getLastLike
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|r2
operator|.
name|getLastLike
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
operator|-
name|cmp
return|;
return|return
name|r1
operator|.
name|compareTo
argument_list|(
name|r2
argument_list|)
return|;
block|}
block|}
return|;
case|case
name|PROJECTED_BY_RULE
case|:
return|return
operator|new
name|Comparator
argument_list|<
name|ReservationInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ReservationInterface
name|r1
parameter_list|,
name|ReservationInterface
name|r2
parameter_list|)
block|{
name|int
name|cmp
init|=
operator|new
name|Integer
argument_list|(
name|r1
operator|.
name|getProjection
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|r1
operator|.
name|getProjection
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getProjection
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|r2
operator|.
name|getProjection
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
operator|-
name|cmp
return|;
return|return
name|r1
operator|.
name|compareTo
argument_list|(
name|r2
argument_list|)
return|;
block|}
block|}
return|;
case|case
name|CURRENT_ENROLLMENT
case|:
return|return
operator|new
name|Comparator
argument_list|<
name|ReservationInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ReservationInterface
name|r1
parameter_list|,
name|ReservationInterface
name|r2
parameter_list|)
block|{
name|int
name|cmp
init|=
operator|new
name|Integer
argument_list|(
name|r1
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|r1
operator|.
name|getEnrollment
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|r2
operator|.
name|getEnrollment
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
operator|-
name|cmp
return|;
return|return
name|r1
operator|.
name|compareTo
argument_list|(
name|r2
argument_list|)
return|;
block|}
block|}
return|;
case|case
name|EXPIRATION_DATE
case|:
return|return
operator|new
name|Comparator
argument_list|<
name|ReservationInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ReservationInterface
name|r1
parameter_list|,
name|ReservationInterface
name|r2
parameter_list|)
block|{
name|int
name|cmp
init|=
operator|new
name|Long
argument_list|(
name|r1
operator|.
name|getExpirationDate
argument_list|()
operator|==
literal|null
condition|?
name|Long
operator|.
name|MAX_VALUE
else|:
name|r1
operator|.
name|getExpirationDate
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getExpirationDate
argument_list|()
operator|==
literal|null
condition|?
name|Long
operator|.
name|MAX_VALUE
else|:
name|r2
operator|.
name|getExpirationDate
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|r1
operator|.
name|compareTo
argument_list|(
name|r2
argument_list|)
return|;
block|}
block|}
return|;
case|case
name|START_DATE
case|:
return|return
operator|new
name|Comparator
argument_list|<
name|ReservationInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ReservationInterface
name|r1
parameter_list|,
name|ReservationInterface
name|r2
parameter_list|)
block|{
name|int
name|cmp
init|=
operator|new
name|Long
argument_list|(
name|r1
operator|.
name|getStartDate
argument_list|()
operator|==
literal|null
condition|?
name|Long
operator|.
name|MIN_VALUE
else|:
name|r1
operator|.
name|getStartDate
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getStartDate
argument_list|()
operator|==
literal|null
condition|?
name|Long
operator|.
name|MIN_VALUE
else|:
name|r2
operator|.
name|getStartDate
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|r1
operator|.
name|compareTo
argument_list|(
name|r2
argument_list|)
return|;
block|}
block|}
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

