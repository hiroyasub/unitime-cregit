begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|page
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|Refresh
block|{
specifier|public
specifier|static
specifier|native
name|void
name|createTriggers
parameter_list|()
comment|/*-{ 	$wnd.refreshPage = function(message) { 		@org.unitime.timetable.gwt.client.page.Refresh::refreshPage()(); 	}; 	@org.unitime.timetable.gwt.client.page.Refresh::scrollDown()(); 	}-*/
function_decl|;
specifier|public
specifier|static
name|void
name|refreshPage
parameter_list|()
block|{
name|String
name|url
init|=
name|Window
operator|.
name|Location
operator|.
name|getHref
argument_list|()
decl_stmt|;
if|if
condition|(
name|url
operator|.
name|indexOf
argument_list|(
literal|'#'
argument_list|)
operator|>=
literal|0
condition|)
name|url
operator|=
name|url
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|url
operator|.
name|lastIndexOf
argument_list|(
literal|'#'
argument_list|)
argument_list|)
expr_stmt|;
name|url
operator|+=
literal|"#"
operator|+
name|Window
operator|.
name|getScrollLeft
argument_list|()
operator|+
literal|":"
operator|+
name|Window
operator|.
name|getScrollTop
argument_list|()
expr_stmt|;
name|Window
operator|.
name|Location
operator|.
name|assign
argument_list|(
name|url
argument_list|)
expr_stmt|;
operator|new
name|Timer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Window
operator|.
name|Location
operator|.
name|reload
argument_list|()
expr_stmt|;
block|}
block|}
operator|.
name|schedule
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|scrollDown
parameter_list|()
block|{
name|String
name|hash
init|=
name|Window
operator|.
name|Location
operator|.
name|getHash
argument_list|()
decl_stmt|;
if|if
condition|(
name|hash
operator|!=
literal|null
operator|&&
name|hash
operator|.
name|matches
argument_list|(
literal|"#[0-9]+:[0-9]+"
argument_list|)
condition|)
block|{
name|String
index|[]
name|scroll
init|=
name|hash
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|Window
operator|.
name|scrollTo
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|scroll
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|scroll
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

