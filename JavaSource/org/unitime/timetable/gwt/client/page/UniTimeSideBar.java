begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|page
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|Client
operator|.
name|GwtPageChangeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|Client
operator|.
name|GwtPageChangedHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|LoadingWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeFrameDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|MenuService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|MenuServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|MenuInterface
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Display
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseOutEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseOutHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseOverEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseOverHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|CloseEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|CloseHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|OpenEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|OpenHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Cookies
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DOM
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|DisclosurePanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasVerticalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HorizontalPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|RootPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|SimplePanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|StackPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|TreeItem
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|UniTimeSideBar
extends|extends
name|Composite
block|{
specifier|protected
specifier|final
name|MenuServiceAsync
name|iService
init|=
name|GWT
operator|.
name|create
argument_list|(
name|MenuService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|GwtResources
name|RESOURCES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtResources
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Timer
name|iScrollTimer
init|=
literal|null
decl_stmt|;
specifier|private
name|SimplePanel
name|iPanel
decl_stmt|;
specifier|private
name|DisclosurePanel
name|iDisclosurePanel
decl_stmt|;
specifier|private
name|MyStackPanel
name|iStackPanel
decl_stmt|;
specifier|private
name|Tree
name|iTree
decl_stmt|;
specifier|private
name|int
name|iTop
init|=
literal|0
decl_stmt|;
specifier|public
name|UniTimeSideBar
parameter_list|(
name|boolean
name|useStackPanel
parameter_list|)
block|{
name|iPanel
operator|=
operator|new
name|SimplePanel
argument_list|()
expr_stmt|;
name|iPanel
operator|.
name|addStyleName
argument_list|(
literal|"unitime-NoPrint"
argument_list|)
expr_stmt|;
specifier|final
name|HorizontalPanel
name|header
init|=
operator|new
name|HorizontalPanel
argument_list|()
decl_stmt|;
specifier|final
name|Label
name|menuLabel
init|=
operator|new
name|Label
argument_list|(
literal|"Navigation"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|menuLabel
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|menuLabel
operator|.
name|setStyleName
argument_list|(
literal|"unitime-MenuHeaderLabel"
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|menuLabel
argument_list|)
expr_stmt|;
specifier|final
name|Image
name|menuImage
init|=
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|menu_closed
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|menuImage
argument_list|)
expr_stmt|;
name|header
operator|.
name|setCellHorizontalAlignment
argument_list|(
name|menuImage
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
name|header
operator|.
name|setCellVerticalAlignment
argument_list|(
name|menuImage
argument_list|,
name|HasVerticalAlignment
operator|.
name|ALIGN_MIDDLE
argument_list|)
expr_stmt|;
name|header
operator|.
name|setStyleName
argument_list|(
literal|"unitime-MenuHeaderClose"
argument_list|)
expr_stmt|;
name|iDisclosurePanel
operator|=
operator|new
name|DisclosurePanel
argument_list|()
expr_stmt|;
name|iDisclosurePanel
operator|.
name|setHeader
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|menuImage
operator|.
name|addMouseOverHandler
argument_list|(
operator|new
name|MouseOverHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOver
parameter_list|(
name|MouseOverEvent
name|event
parameter_list|)
block|{
name|menuImage
operator|.
name|setResource
argument_list|(
name|iDisclosurePanel
operator|.
name|isOpen
argument_list|()
condition|?
name|RESOURCES
operator|.
name|menu_opened_hover
argument_list|()
else|:
name|RESOURCES
operator|.
name|menu_closed_hover
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|menuImage
operator|.
name|addMouseOutHandler
argument_list|(
operator|new
name|MouseOutHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOut
parameter_list|(
name|MouseOutEvent
name|event
parameter_list|)
block|{
name|menuImage
operator|.
name|setResource
argument_list|(
name|iDisclosurePanel
operator|.
name|isOpen
argument_list|()
condition|?
name|RESOURCES
operator|.
name|menu_opened
argument_list|()
else|:
name|RESOURCES
operator|.
name|menu_closed
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iDisclosurePanel
operator|.
name|addOpenHandler
argument_list|(
operator|new
name|OpenHandler
argument_list|<
name|DisclosurePanel
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onOpen
parameter_list|(
name|OpenEvent
argument_list|<
name|DisclosurePanel
argument_list|>
name|event
parameter_list|)
block|{
name|menuImage
operator|.
name|setResource
argument_list|(
name|iDisclosurePanel
operator|.
name|isOpen
argument_list|()
condition|?
name|RESOURCES
operator|.
name|menu_opened
argument_list|()
else|:
name|RESOURCES
operator|.
name|menu_closed
argument_list|()
argument_list|)
expr_stmt|;
name|menuLabel
operator|.
name|setVisible
argument_list|(
name|iDisclosurePanel
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|header
operator|.
name|setStyleName
argument_list|(
literal|"unitime-MenuHeader"
operator|+
operator|(
name|iDisclosurePanel
operator|.
name|isOpen
argument_list|()
condition|?
literal|"Open"
else|:
literal|"Close"
operator|)
argument_list|)
expr_stmt|;
name|saveState
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iDisclosurePanel
operator|.
name|addCloseHandler
argument_list|(
operator|new
name|CloseHandler
argument_list|<
name|DisclosurePanel
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClose
parameter_list|(
name|CloseEvent
argument_list|<
name|DisclosurePanel
argument_list|>
name|event
parameter_list|)
block|{
name|menuImage
operator|.
name|setResource
argument_list|(
name|iDisclosurePanel
operator|.
name|isOpen
argument_list|()
condition|?
name|RESOURCES
operator|.
name|menu_opened
argument_list|()
else|:
name|RESOURCES
operator|.
name|menu_closed
argument_list|()
argument_list|)
expr_stmt|;
name|menuLabel
operator|.
name|setVisible
argument_list|(
name|iDisclosurePanel
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|header
operator|.
name|setStyleName
argument_list|(
literal|"unitime-MenuHeader"
operator|+
operator|(
name|iDisclosurePanel
operator|.
name|isOpen
argument_list|()
condition|?
literal|"Open"
else|:
literal|"Close"
operator|)
argument_list|)
expr_stmt|;
name|saveState
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iStackPanel
operator|=
operator|new
name|MyStackPanel
argument_list|()
expr_stmt|;
name|iTree
operator|=
operator|new
name|Tree
argument_list|(
name|RESOURCES
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iTree
operator|.
name|addOpenHandler
argument_list|(
operator|new
name|OpenHandler
argument_list|<
name|TreeItem
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onOpen
parameter_list|(
name|OpenEvent
argument_list|<
name|TreeItem
argument_list|>
name|event
parameter_list|)
block|{
name|saveState
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iTree
operator|.
name|addCloseHandler
argument_list|(
operator|new
name|CloseHandler
argument_list|<
name|TreeItem
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClose
parameter_list|(
name|CloseEvent
argument_list|<
name|TreeItem
argument_list|>
name|event
parameter_list|)
block|{
name|saveState
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|SimplePanel
name|simple
init|=
operator|new
name|SimplePanel
argument_list|()
decl_stmt|;
if|if
condition|(
name|useStackPanel
condition|)
name|simple
operator|.
name|setWidget
argument_list|(
name|iStackPanel
argument_list|)
expr_stmt|;
else|else
name|simple
operator|.
name|setWidget
argument_list|(
name|iTree
argument_list|)
expr_stmt|;
name|iDisclosurePanel
operator|.
name|add
argument_list|(
name|simple
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|setWidget
argument_list|(
name|iDisclosurePanel
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|setHeight
argument_list|(
literal|"100%"
argument_list|)
expr_stmt|;
name|DOM
operator|.
name|setStyleAttribute
argument_list|(
name|iDisclosurePanel
operator|.
name|getElement
argument_list|()
argument_list|,
literal|"position"
argument_list|,
literal|"relative"
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|iPanel
argument_list|)
expr_stmt|;
name|iService
operator|.
name|getMenu
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|List
argument_list|<
name|MenuInterface
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|List
argument_list|<
name|MenuInterface
argument_list|>
name|result
parameter_list|)
block|{
name|initMenu
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
block|}
block|}
argument_list|)
expr_stmt|;
name|iScrollTimer
operator|=
operator|new
name|Timer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|DOM
operator|.
name|setStyleAttribute
argument_list|(
name|iDisclosurePanel
operator|.
name|getElement
argument_list|()
argument_list|,
literal|"top"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iTop
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|Window
operator|.
name|addWindowScrollHandler
argument_list|(
operator|new
name|Window
operator|.
name|ScrollHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onWindowScroll
parameter_list|(
name|Window
operator|.
name|ScrollEvent
name|event
parameter_list|)
block|{
name|int
name|fromTop
init|=
name|Math
operator|.
name|max
argument_list|(
name|Window
operator|.
name|getScrollTop
argument_list|()
operator|-
name|iPanel
operator|.
name|getAbsoluteTop
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// 20 pixels for the top menu
name|int
name|fromBottom
init|=
name|Window
operator|.
name|getClientHeight
argument_list|()
operator|+
name|Window
operator|.
name|getScrollTop
argument_list|()
operator|-
name|iDisclosurePanel
operator|.
name|getOffsetHeight
argument_list|()
operator|-
literal|60
decl_stmt|;
name|iDisclosurePanel
operator|.
name|getAbsoluteTop
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromTop
operator|<=
name|fromBottom
condition|)
block|{
name|iTop
operator|=
name|fromTop
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|fromBottom
operator|<=
name|iTop
operator|&&
name|iTop
operator|<=
name|fromTop
condition|)
block|{
block|}
if|else if
condition|(
name|iTop
operator|>
name|fromTop
condition|)
block|{
name|iTop
operator|=
name|fromTop
expr_stmt|;
block|}
else|else
block|{
name|iTop
operator|=
name|fromBottom
expr_stmt|;
block|}
block|}
name|iScrollTimer
operator|.
name|schedule
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Client
operator|.
name|addGwtPageChangedHandler
argument_list|(
operator|new
name|GwtPageChangedHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|GwtPageChangeEvent
name|event
parameter_list|)
block|{
name|int
name|fromTop
init|=
name|Math
operator|.
name|max
argument_list|(
name|Window
operator|.
name|getScrollTop
argument_list|()
operator|-
name|iPanel
operator|.
name|getAbsoluteTop
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// 20 pixels for the top menu
name|int
name|fromBottom
init|=
name|Window
operator|.
name|getClientHeight
argument_list|()
operator|+
name|Window
operator|.
name|getScrollTop
argument_list|()
operator|-
name|iDisclosurePanel
operator|.
name|getOffsetHeight
argument_list|()
operator|-
literal|60
decl_stmt|;
name|iDisclosurePanel
operator|.
name|getAbsoluteTop
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromTop
operator|<=
name|fromBottom
condition|)
block|{
name|iTop
operator|=
name|fromTop
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|fromBottom
operator|<=
name|iTop
operator|&&
name|iTop
operator|<=
name|fromTop
condition|)
block|{
block|}
if|else if
condition|(
name|iTop
operator|>
name|fromTop
condition|)
block|{
name|iTop
operator|=
name|fromTop
expr_stmt|;
block|}
else|else
block|{
name|iTop
operator|=
name|fromBottom
expr_stmt|;
block|}
block|}
name|iScrollTimer
operator|.
name|schedule
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isOpenned
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|sideBarCookie
init|=
name|Cookies
operator|.
name|getCookie
argument_list|(
literal|"UniTime:SideBar"
argument_list|)
decl_stmt|;
return|return
name|sideBarCookie
operator|!=
literal|null
operator|&&
name|sideBarCookie
operator|.
name|indexOf
argument_list|(
literal|"|"
operator|+
name|name
operator|+
literal|"|"
argument_list|)
operator|>=
literal|0
return|;
block|}
specifier|private
name|void
name|openedNodes
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|ret
parameter_list|,
name|TreeItem
name|item
parameter_list|)
block|{
if|if
condition|(
name|item
operator|.
name|getState
argument_list|()
condition|)
name|ret
operator|.
name|add
argument_list|(
name|item
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|item
operator|.
name|getChildCount
argument_list|()
condition|;
name|i
operator|++
control|)
name|openedNodes
argument_list|(
name|ret
argument_list|,
name|item
operator|.
name|getChild
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|saveState
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|nodes
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|iStackPanel
operator|.
name|isAttached
argument_list|()
condition|)
block|{
name|nodes
operator|.
name|add
argument_list|(
name|iStackPanel
operator|.
name|getStackText
argument_list|(
name|iStackPanel
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iStackPanel
operator|.
name|getWidgetCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|iStackPanel
operator|.
name|getWidget
argument_list|(
name|i
argument_list|)
operator|instanceof
name|Tree
condition|)
block|{
name|Tree
name|t
init|=
operator|(
name|Tree
operator|)
name|iStackPanel
operator|.
name|getWidget
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|t
operator|.
name|getItemCount
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|openedNodes
argument_list|(
name|nodes
argument_list|,
name|t
operator|.
name|getItem
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iTree
operator|.
name|getItemCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|openedNodes
argument_list|(
name|nodes
argument_list|,
name|iTree
operator|.
name|getItem
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|sideBarCookie
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|iDisclosurePanel
operator|.
name|isOpen
argument_list|()
condition|)
name|sideBarCookie
operator|+=
literal|"Root"
expr_stmt|;
for|for
control|(
name|String
name|node
range|:
name|nodes
control|)
block|{
if|if
condition|(
operator|!
name|sideBarCookie
operator|.
name|isEmpty
argument_list|()
condition|)
name|sideBarCookie
operator|+=
literal|"|"
expr_stmt|;
name|sideBarCookie
operator|+=
name|node
expr_stmt|;
block|}
name|Cookies
operator|.
name|setCookie
argument_list|(
literal|"UniTime:SideBar"
argument_list|,
name|sideBarCookie
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|openNodes
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|nodes
parameter_list|,
name|TreeItem
name|item
parameter_list|)
block|{
if|if
condition|(
name|nodes
operator|.
name|contains
argument_list|(
name|item
operator|.
name|getText
argument_list|()
argument_list|)
condition|)
name|item
operator|.
name|setState
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|item
operator|.
name|getChildCount
argument_list|()
condition|;
name|i
operator|++
control|)
name|openNodes
argument_list|(
name|nodes
argument_list|,
name|item
operator|.
name|getChild
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|restoreState
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|nodes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|sideBarCookie
init|=
name|Cookies
operator|.
name|getCookie
argument_list|(
literal|"UniTime:SideBar"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sideBarCookie
operator|!=
literal|null
condition|)
for|for
control|(
name|String
name|node
range|:
name|sideBarCookie
operator|.
name|split
argument_list|(
literal|"\\|"
argument_list|)
control|)
name|nodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|iDisclosurePanel
operator|.
name|setOpen
argument_list|(
name|nodes
operator|.
name|contains
argument_list|(
literal|"Root"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iStackPanel
operator|.
name|isAttached
argument_list|()
condition|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iStackPanel
operator|.
name|getWidgetCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|nodes
operator|.
name|contains
argument_list|(
name|iStackPanel
operator|.
name|getStackText
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|iStackPanel
operator|.
name|showStack
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iStackPanel
operator|.
name|getWidget
argument_list|(
name|i
argument_list|)
operator|instanceof
name|Tree
condition|)
block|{
name|Tree
name|t
init|=
operator|(
name|Tree
operator|)
name|iStackPanel
operator|.
name|getWidget
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|t
operator|.
name|getItemCount
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|openNodes
argument_list|(
name|nodes
argument_list|,
name|t
operator|.
name|getItem
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iTree
operator|.
name|getItemCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|openNodes
argument_list|(
name|nodes
argument_list|,
name|iTree
operator|.
name|getItem
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|insert
parameter_list|(
specifier|final
name|RootPanel
name|panel
parameter_list|)
block|{
name|panel
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|panel
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|TreeItem
name|generateItem
parameter_list|(
specifier|final
name|MenuInterface
name|item
parameter_list|)
block|{
name|Label
name|label
init|=
operator|new
name|Label
argument_list|(
name|item
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|TreeItem
name|treeItem
init|=
operator|new
name|TreeItem
argument_list|(
name|label
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|.
name|getPage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|label
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|item
operator|.
name|isGWT
argument_list|()
condition|)
name|openUrl
argument_list|(
name|item
operator|.
name|getName
argument_list|()
argument_list|,
literal|"gwt.jsp?page="
operator|+
name|item
operator|.
name|getPage
argument_list|()
argument_list|,
name|item
operator|.
name|getTarget
argument_list|()
argument_list|)
expr_stmt|;
else|else
block|{
name|openUrl
argument_list|(
name|item
operator|.
name|getName
argument_list|()
argument_list|,
name|item
operator|.
name|getPage
argument_list|()
argument_list|,
name|item
operator|.
name|getTarget
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|item
operator|.
name|hasSubMenus
argument_list|()
condition|)
for|for
control|(
name|MenuInterface
name|subItem
range|:
name|item
operator|.
name|getSubMenus
argument_list|()
control|)
if|if
condition|(
operator|!
name|subItem
operator|.
name|isSeparator
argument_list|()
condition|)
name|treeItem
operator|.
name|addItem
argument_list|(
name|generateItem
argument_list|(
name|subItem
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|treeItem
return|;
block|}
specifier|private
name|void
name|initMenu
parameter_list|(
name|List
argument_list|<
name|MenuInterface
argument_list|>
name|items
parameter_list|)
block|{
for|for
control|(
specifier|final
name|MenuInterface
name|item
range|:
name|items
control|)
block|{
if|if
condition|(
name|item
operator|.
name|isSeparator
argument_list|()
condition|)
continue|continue;
name|iTree
operator|.
name|addItem
argument_list|(
name|generateItem
argument_list|(
name|item
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|item
operator|.
name|hasSubMenus
argument_list|()
condition|)
block|{
name|Tree
name|tree
init|=
operator|new
name|Tree
argument_list|(
name|RESOURCES
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|MenuInterface
name|subItem
range|:
name|item
operator|.
name|getSubMenus
argument_list|()
control|)
if|if
condition|(
operator|!
name|subItem
operator|.
name|isSeparator
argument_list|()
condition|)
name|tree
operator|.
name|addItem
argument_list|(
name|generateItem
argument_list|(
name|subItem
argument_list|)
argument_list|)
expr_stmt|;
name|iStackPanel
operator|.
name|add
argument_list|(
name|tree
argument_list|,
name|item
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tree
operator|.
name|addOpenHandler
argument_list|(
operator|new
name|OpenHandler
argument_list|<
name|TreeItem
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onOpen
parameter_list|(
name|OpenEvent
argument_list|<
name|TreeItem
argument_list|>
name|event
parameter_list|)
block|{
name|saveState
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|tree
operator|.
name|addCloseHandler
argument_list|(
operator|new
name|CloseHandler
argument_list|<
name|TreeItem
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClose
parameter_list|(
name|CloseEvent
argument_list|<
name|TreeItem
argument_list|>
name|event
parameter_list|)
block|{
name|saveState
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iStackPanel
operator|.
name|add
argument_list|(
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
if|if
condition|(
name|item
operator|.
name|isGWT
argument_list|()
condition|)
name|openUrl
argument_list|(
name|item
operator|.
name|getName
argument_list|()
argument_list|,
literal|"gwt.jsp?page="
operator|+
name|item
operator|.
name|getPage
argument_list|()
argument_list|,
name|item
operator|.
name|getTarget
argument_list|()
argument_list|)
expr_stmt|;
else|else
block|{
name|openUrl
argument_list|(
name|item
operator|.
name|getName
argument_list|()
argument_list|,
name|item
operator|.
name|getPage
argument_list|()
argument_list|,
name|item
operator|.
name|getTarget
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|,
name|item
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|restoreState
argument_list|()
expr_stmt|;
name|iStackPanel
operator|.
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|openUrl
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|url
parameter_list|,
name|String
name|target
parameter_list|)
block|{
if|if
condition|(
name|target
operator|==
literal|null
condition|)
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|()
expr_stmt|;
if|if
condition|(
literal|"dialog"
operator|.
name|equals
argument_list|(
name|target
argument_list|)
condition|)
block|{
name|UniTimeFrameDialog
operator|.
name|openDialog
argument_list|(
name|name
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"download"
operator|.
name|equals
argument_list|(
name|target
argument_list|)
condition|)
block|{
name|ToolBox
operator|.
name|open
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ToolBox
operator|.
name|open
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
name|url
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
class|class
name|MyStackPanel
extends|extends
name|StackPanel
block|{
specifier|private
name|Element
name|body
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iActive
init|=
literal|false
decl_stmt|;
specifier|public
name|MyStackPanel
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|body
operator|=
name|DOM
operator|.
name|getFirstChild
argument_list|(
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getStackText
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|>=
name|getWidgetCount
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Element
name|tdWrapper
init|=
name|DOM
operator|.
name|getChild
argument_list|(
name|DOM
operator|.
name|getChild
argument_list|(
name|body
argument_list|,
name|index
operator|*
literal|2
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|DOM
operator|.
name|getFirstChild
argument_list|(
name|tdWrapper
argument_list|)
operator|.
name|getInnerText
argument_list|()
return|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|Command
name|cmd
parameter_list|,
name|String
name|text
parameter_list|)
block|{
name|add
argument_list|(
operator|new
name|DummyWidget
argument_list|(
name|cmd
argument_list|)
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|showStack
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|iActive
condition|)
block|{
if|if
condition|(
name|getWidget
argument_list|(
name|index
argument_list|)
operator|instanceof
name|DummyWidget
condition|)
block|{
operator|(
operator|(
name|DummyWidget
operator|)
name|getWidget
argument_list|(
name|index
argument_list|)
operator|)
operator|.
name|getClickCommand
argument_list|()
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|showStack
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|saveState
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|super
operator|.
name|showStack
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setActive
parameter_list|(
name|boolean
name|active
parameter_list|)
block|{
name|iActive
operator|=
name|active
expr_stmt|;
block|}
specifier|public
class|class
name|DummyWidget
extends|extends
name|SimplePanel
block|{
specifier|private
name|Command
name|iClickCommand
init|=
literal|null
decl_stmt|;
specifier|public
name|DummyWidget
parameter_list|(
name|Command
name|cmd
parameter_list|)
block|{
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setDisplay
argument_list|(
name|Display
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|iClickCommand
operator|=
name|cmd
expr_stmt|;
block|}
specifier|public
name|Command
name|getClickCommand
parameter_list|()
block|{
return|return
name|iClickCommand
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

