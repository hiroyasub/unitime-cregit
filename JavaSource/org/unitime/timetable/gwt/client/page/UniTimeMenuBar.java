begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|page
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|Pages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|Client
operator|.
name|GwtPageChangeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|Client
operator|.
name|GwtPageChangedHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|LoadingWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeFrameDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|MenuService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|MenuServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|MenuInterface
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Position
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Unit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ResizeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ResizeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|http
operator|.
name|client
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
operator|.
name|ScrollEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|MenuBar
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|MenuItem
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|MenuItemSeparator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|RootPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|SimplePanel
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|UniTimeMenuBar
extends|extends
name|UniTimeMenu
block|{
specifier|protected
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|MenuServiceAsync
name|iService
init|=
name|GWT
operator|.
name|create
argument_list|(
name|MenuService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|MenuBar
name|iMenu
decl_stmt|;
specifier|private
name|SimplePanel
name|iSimple
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|iLastScrollLeft
init|=
literal|0
decl_stmt|,
name|iLastScrollTop
init|=
literal|0
decl_stmt|,
name|iLastClientWidth
init|=
literal|0
decl_stmt|;
specifier|private
name|Timer
name|iMoveTimer
decl_stmt|;
specifier|public
name|UniTimeMenuBar
parameter_list|(
name|boolean
name|absolute
parameter_list|)
block|{
name|iMenu
operator|=
operator|new
name|MenuBar
argument_list|()
expr_stmt|;
name|iMenu
operator|.
name|addStyleName
argument_list|(
literal|"unitime-NoPrint"
argument_list|)
expr_stmt|;
name|iMenu
operator|.
name|addStyleName
argument_list|(
literal|"unitime-Menu"
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|iMenu
argument_list|)
expr_stmt|;
if|if
condition|(
name|absolute
condition|)
block|{
name|iMenu
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setPosition
argument_list|(
name|Position
operator|.
name|ABSOLUTE
argument_list|)
expr_stmt|;
name|move
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iMoveTimer
operator|=
operator|new
name|Timer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|move
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|Window
operator|.
name|addResizeHandler
argument_list|(
operator|new
name|ResizeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResize
parameter_list|(
name|ResizeEvent
name|event
parameter_list|)
block|{
name|delayedMove
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Window
operator|.
name|addWindowScrollHandler
argument_list|(
operator|new
name|Window
operator|.
name|ScrollHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onWindowScroll
parameter_list|(
name|ScrollEvent
name|event
parameter_list|)
block|{
name|delayedMove
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Client
operator|.
name|addGwtPageChangedHandler
argument_list|(
operator|new
name|GwtPageChangedHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|GwtPageChangeEvent
name|event
parameter_list|)
block|{
name|delayedMove
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iSimple
operator|=
operator|new
name|SimplePanel
argument_list|()
expr_stmt|;
name|iSimple
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setHeight
argument_list|(
literal|23
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
operator|new
name|Timer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|delayedMove
argument_list|()
expr_stmt|;
block|}
block|}
operator|.
name|scheduleRepeating
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|attach
parameter_list|(
specifier|final
name|RootPanel
name|rootPanel
parameter_list|)
block|{
name|iService
operator|.
name|getMenu
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|List
argument_list|<
name|MenuInterface
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|List
argument_list|<
name|MenuInterface
argument_list|>
name|result
parameter_list|)
block|{
name|initMenu
argument_list|(
name|iMenu
argument_list|,
name|result
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSimple
operator|!=
literal|null
condition|)
name|rootPanel
operator|.
name|add
argument_list|(
name|iSimple
argument_list|)
expr_stmt|;
name|rootPanel
operator|.
name|add
argument_list|(
name|UniTimeMenuBar
operator|.
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSimple
operator|!=
literal|null
condition|)
name|iSimple
operator|.
name|setHeight
argument_list|(
name|iMenu
operator|.
name|getOffsetHeight
argument_list|()
operator|+
literal|"px"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reload
parameter_list|()
block|{
name|iService
operator|.
name|getMenu
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|List
argument_list|<
name|MenuInterface
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|List
argument_list|<
name|MenuInterface
argument_list|>
name|result
parameter_list|)
block|{
name|iMenu
operator|.
name|clearItems
argument_list|()
expr_stmt|;
name|initMenu
argument_list|(
name|iMenu
argument_list|,
name|result
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|move
parameter_list|(
name|boolean
name|show
parameter_list|)
block|{
name|iLastClientWidth
operator|=
name|Window
operator|.
name|getClientWidth
argument_list|()
expr_stmt|;
name|iLastScrollLeft
operator|=
name|Window
operator|.
name|getScrollLeft
argument_list|()
expr_stmt|;
name|iLastScrollTop
operator|=
name|Window
operator|.
name|getScrollTop
argument_list|()
expr_stmt|;
name|iMenu
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setWidth
argument_list|(
name|iLastClientWidth
operator|-
literal|2
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|iMenu
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setLeft
argument_list|(
name|iLastScrollLeft
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|iMenu
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setTop
argument_list|(
name|iLastScrollTop
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|iMenu
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|needsMove
parameter_list|()
block|{
return|return
name|iLastClientWidth
operator|!=
name|Window
operator|.
name|getClientWidth
argument_list|()
operator|||
name|iLastScrollLeft
operator|!=
name|Window
operator|.
name|getScrollLeft
argument_list|()
operator|||
name|iLastScrollTop
operator|!=
name|Window
operator|.
name|getScrollTop
argument_list|()
return|;
block|}
specifier|private
name|void
name|delayedMove
parameter_list|()
block|{
if|if
condition|(
name|needsMove
argument_list|()
condition|)
block|{
name|iMenu
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iMoveTimer
operator|.
name|schedule
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|initMenu
parameter_list|(
name|MenuBar
name|menu
parameter_list|,
name|List
argument_list|<
name|MenuInterface
argument_list|>
name|items
parameter_list|,
name|int
name|level
parameter_list|)
block|{
specifier|final
name|MenuInterface
operator|.
name|ValueEncoder
name|encoder
init|=
operator|new
name|MenuInterface
operator|.
name|ValueEncoder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|encode
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|URL
operator|.
name|encodeQueryString
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|MenuItemSeparator
name|lastSeparator
init|=
literal|null
decl_stmt|;
for|for
control|(
specifier|final
name|MenuInterface
name|item
range|:
name|items
control|)
block|{
if|if
condition|(
name|item
operator|.
name|isSeparator
argument_list|()
condition|)
block|{
name|lastSeparator
operator|=
operator|new
name|MenuItemSeparator
argument_list|()
expr_stmt|;
name|menu
operator|.
name|addSeparator
argument_list|(
name|lastSeparator
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|item
operator|.
name|hasSubMenus
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|item
operator|.
name|hasPage
argument_list|()
condition|)
block|{
name|MenuBar
name|m
init|=
operator|new
name|MenuBar
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|initMenu
argument_list|(
name|m
argument_list|,
name|item
operator|.
name|getSubMenus
argument_list|()
argument_list|,
name|level
operator|+
literal|1
argument_list|)
expr_stmt|;
name|menu
operator|.
name|addItem
argument_list|(
operator|new
name|MenuItem
argument_list|(
name|item
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|"&nbsp;"
argument_list|)
argument_list|,
literal|true
argument_list|,
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|menu
operator|.
name|addItem
argument_list|(
operator|new
name|MenuItem
argument_list|(
name|item
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|"&nbsp;"
argument_list|)
argument_list|,
literal|true
argument_list|,
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
if|if
condition|(
name|item
operator|.
name|hasPage
argument_list|()
condition|)
name|openUrl
argument_list|(
name|item
operator|.
name|getName
argument_list|()
argument_list|,
name|item
operator|.
name|getURL
argument_list|(
name|encoder
argument_list|)
argument_list|,
name|item
operator|.
name|getTarget
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|initMenu
argument_list|(
name|menu
argument_list|,
name|item
operator|.
name|getSubMenus
argument_list|()
argument_list|,
name|level
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|menu
operator|.
name|addItem
argument_list|(
operator|new
name|MenuItem
argument_list|(
name|item
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|"&nbsp;"
argument_list|)
argument_list|,
literal|true
argument_list|,
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
if|if
condition|(
name|item
operator|.
name|hasPage
argument_list|()
condition|)
name|openUrl
argument_list|(
name|item
operator|.
name|getName
argument_list|()
argument_list|,
name|item
operator|.
name|getURL
argument_list|(
name|encoder
argument_list|)
argument_list|,
name|item
operator|.
name|getTarget
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|level
operator|==
literal|0
operator|&&
name|lastSeparator
operator|!=
literal|null
condition|)
block|{
name|lastSeparator
operator|.
name|setStyleName
argument_list|(
literal|"unitime-BlankSeparator"
argument_list|)
expr_stmt|;
name|lastSeparator
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setWidth
argument_list|(
literal|100
argument_list|,
name|Unit
operator|.
name|PCT
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|openUrl
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|url
parameter_list|,
name|String
name|target
parameter_list|)
block|{
if|if
condition|(
name|target
operator|==
literal|null
condition|)
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|()
expr_stmt|;
if|if
condition|(
literal|"dialog"
operator|.
name|equals
argument_list|(
name|target
argument_list|)
condition|)
block|{
name|UniTimeFrameDialog
operator|.
name|openDialog
argument_list|(
name|name
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"eval"
operator|.
name|equals
argument_list|(
name|target
argument_list|)
condition|)
block|{
name|ToolBox
operator|.
name|eval
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"download"
operator|.
name|equals
argument_list|(
name|target
argument_list|)
condition|)
block|{
name|ToolBox
operator|.
name|open
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ToolBox
operator|.
name|open
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
name|url
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|openPage
parameter_list|(
name|String
name|page
parameter_list|)
block|{
try|try
block|{
for|for
control|(
name|Pages
name|p
range|:
name|Pages
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|page
argument_list|)
condition|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|setMessage
argument_list|(
name|MESSAGES
operator|.
name|waitLoading
argument_list|(
name|p
operator|.
name|name
argument_list|(
name|MESSAGES
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|UniTimePageLabel
operator|.
name|getInstance
argument_list|()
operator|.
name|setTitle
argument_list|(
name|p
operator|.
name|name
argument_list|(
name|MESSAGES
argument_list|)
argument_list|)
expr_stmt|;
name|RootPanel
operator|.
name|get
argument_list|(
literal|"UniTimeGWT:Body"
argument_list|)
operator|.
name|add
argument_list|(
name|p
operator|.
name|widget
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|Label
name|error
init|=
operator|new
name|Label
argument_list|(
name|page
operator|==
literal|null
condition|?
name|MESSAGES
operator|.
name|failedToLoadPageNotProvided
argument_list|()
else|:
name|MESSAGES
operator|.
name|failedToLoadPageNotRegistered
argument_list|(
name|page
argument_list|)
argument_list|)
decl_stmt|;
name|error
operator|.
name|setStyleName
argument_list|(
literal|"unitime-ErrorMessage"
argument_list|)
expr_stmt|;
name|RootPanel
operator|.
name|get
argument_list|(
literal|"UniTimeGWT:Body"
argument_list|)
operator|.
name|add
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Label
name|error
init|=
operator|new
name|Label
argument_list|(
name|MESSAGES
operator|.
name|failedToLoadPage
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|error
operator|.
name|setStyleName
argument_list|(
literal|"unitime-ErrorMessage"
argument_list|)
expr_stmt|;
name|RootPanel
operator|.
name|get
argument_list|(
literal|"UniTimeGWT:Body"
argument_list|)
operator|.
name|add
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|insert
parameter_list|(
specifier|final
name|RootPanel
name|panel
parameter_list|)
block|{
if|if
condition|(
literal|"hide"
operator|.
name|equals
argument_list|(
name|Window
operator|.
name|Location
operator|.
name|getParameter
argument_list|(
literal|"menu"
argument_list|)
argument_list|)
condition|)
name|panel
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
else|else
name|attach
argument_list|(
name|panel
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

