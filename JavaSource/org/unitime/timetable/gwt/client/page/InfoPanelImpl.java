begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.5 (University Timetabling Application)  * Copyright (C) 2014, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|page
package|;
end_package

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|aria
operator|.
name|ClickableHint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|P
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|MenuInterface
operator|.
name|InfoInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|MenuInterface
operator|.
name|InfoPairInterface
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|shared
operator|.
name|HandlerRegistration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DOM
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FlexTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|PopupPanel
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|InfoPanelImpl
extends|extends
name|P
implements|implements
name|InfoPanelDisplay
block|{
specifier|private
name|String
name|iUrl
init|=
literal|null
decl_stmt|;
specifier|private
name|P
name|iText
decl_stmt|;
specifier|private
name|ClickableHint
name|iHint
decl_stmt|;
specifier|private
name|FlexTable
name|iInfo
decl_stmt|;
specifier|private
name|PopupPanel
name|iInfoPanel
init|=
literal|null
decl_stmt|;
specifier|private
name|Timer
name|iShowInfo
decl_stmt|,
name|iHideInfo
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|iX
decl_stmt|,
name|iY
decl_stmt|;
specifier|private
name|Callback
name|iUpdateInfo
init|=
literal|null
decl_stmt|;
specifier|private
name|ClickHandler
name|iDefaultClickHandler
decl_stmt|;
specifier|private
name|HandlerRegistration
name|iTextClick
decl_stmt|,
name|iHintClick
decl_stmt|;
specifier|public
name|InfoPanelImpl
parameter_list|()
block|{
name|super
argument_list|(
literal|"cell"
argument_list|)
expr_stmt|;
name|iText
operator|=
operator|new
name|P
argument_list|(
literal|"text"
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|iText
argument_list|)
expr_stmt|;
name|iHint
operator|=
operator|new
name|ClickableHint
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|iHint
operator|.
name|setStyleName
argument_list|(
literal|"hint"
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|iHint
argument_list|)
expr_stmt|;
name|iUpdateInfo
operator|=
operator|new
name|Callback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Callback
name|callback
parameter_list|)
block|{
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
name|callback
operator|.
name|execute
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|iInfo
operator|=
operator|new
name|FlexTable
argument_list|()
expr_stmt|;
name|iInfo
operator|.
name|setStyleName
argument_list|(
literal|"unitime-InfoTable"
argument_list|)
expr_stmt|;
comment|// iUpdateInfo = updateInfo;
name|iInfoPanel
operator|=
operator|new
name|PopupPanel
argument_list|()
expr_stmt|;
name|iInfoPanel
operator|.
name|setWidget
argument_list|(
name|iInfo
argument_list|)
expr_stmt|;
name|iInfoPanel
operator|.
name|setStyleName
argument_list|(
literal|"unitime-PopupHint"
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEOVER
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEOUT
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEMOVE
argument_list|)
expr_stmt|;
name|iShowInfo
operator|=
operator|new
name|Timer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|iInfo
operator|.
name|getRowCount
argument_list|()
operator|==
literal|0
condition|)
return|return;
name|iUpdateInfo
operator|.
name|execute
argument_list|(
operator|new
name|Callback
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Callback
name|callback
parameter_list|)
block|{
name|iInfoPanel
operator|.
name|setPopupPositionAndShow
argument_list|(
operator|new
name|PopupPanel
operator|.
name|PositionCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|setPosition
parameter_list|(
name|int
name|offsetWidth
parameter_list|,
name|int
name|offsetHeight
parameter_list|)
block|{
name|int
name|maxX
init|=
name|Window
operator|.
name|getScrollLeft
argument_list|()
operator|+
name|Window
operator|.
name|getClientWidth
argument_list|()
operator|-
name|offsetWidth
operator|-
literal|10
decl_stmt|;
name|iInfoPanel
operator|.
name|setPopupPosition
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|iX
argument_list|,
name|maxX
argument_list|)
argument_list|,
name|iY
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
name|callback
operator|.
name|execute
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|iHideInfo
operator|=
operator|new
name|Timer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|iInfoPanel
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
expr_stmt|;
name|iDefaultClickHandler
operator|=
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|iUrl
operator|!=
literal|null
operator|&&
operator|!
name|iUrl
operator|.
name|isEmpty
argument_list|()
condition|)
name|ToolBox
operator|.
name|open
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
name|iUrl
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|iTextClick
operator|=
name|iHint
operator|.
name|addClickHandler
argument_list|(
name|iDefaultClickHandler
argument_list|)
expr_stmt|;
name|iHintClick
operator|=
name|iText
operator|.
name|addClickHandler
argument_list|(
name|iDefaultClickHandler
argument_list|)
expr_stmt|;
name|iHint
operator|.
name|setTabIndex
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getHint
parameter_list|()
block|{
return|return
name|iHint
operator|.
name|getText
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setHint
parameter_list|(
name|String
name|hint
parameter_list|)
block|{
name|iHint
operator|.
name|setText
argument_list|(
name|hint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getText
parameter_list|()
block|{
return|return
name|iText
operator|.
name|getText
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setText
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|iText
operator|.
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setInfo
parameter_list|(
name|InfoInterface
name|info
parameter_list|)
block|{
name|iInfo
operator|.
name|clear
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|int
name|row
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
for|for
control|(
name|InfoPairInterface
name|pair
range|:
name|info
operator|.
name|getPairs
argument_list|()
control|)
block|{
if|if
condition|(
name|pair
operator|.
name|getValue
argument_list|()
operator|==
literal|null
operator|||
name|pair
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|iInfo
operator|.
name|setText
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|pair
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|iInfo
operator|.
name|setHTML
argument_list|(
name|row
argument_list|,
literal|1
argument_list|,
name|pair
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|pair
operator|.
name|hasSeparator
argument_list|()
condition|)
block|{
name|iInfo
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
literal|"separator"
argument_list|)
expr_stmt|;
name|iInfo
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
literal|1
argument_list|,
literal|"separator"
argument_list|)
expr_stmt|;
block|}
name|row
operator|++
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|onBrowserEvent
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
if|if
condition|(
name|iHint
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|iX
operator|=
literal|10
operator|+
name|event
operator|.
name|getClientX
argument_list|()
operator|+
name|getElement
argument_list|()
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|getScrollLeft
argument_list|()
expr_stmt|;
name|iY
operator|=
literal|10
operator|+
name|event
operator|.
name|getClientY
argument_list|()
operator|+
name|getElement
argument_list|()
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|getScrollTop
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|DOM
operator|.
name|eventGetType
argument_list|(
name|event
argument_list|)
condition|)
block|{
case|case
name|Event
operator|.
name|ONMOUSEMOVE
case|:
if|if
condition|(
name|iInfoPanel
operator|.
name|isShowing
argument_list|()
condition|)
block|{
name|int
name|maxX
init|=
name|Window
operator|.
name|getScrollLeft
argument_list|()
operator|+
name|Window
operator|.
name|getClientWidth
argument_list|()
operator|-
name|iInfoPanel
operator|.
name|getOffsetWidth
argument_list|()
operator|-
literal|10
decl_stmt|;
name|iInfoPanel
operator|.
name|setPopupPosition
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|iX
argument_list|,
name|maxX
argument_list|)
argument_list|,
name|iY
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|iInfo
operator|.
name|getRowCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|iShowInfo
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|iShowInfo
operator|.
name|schedule
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Event
operator|.
name|ONMOUSEOUT
case|:
name|iShowInfo
operator|.
name|cancel
argument_list|()
expr_stmt|;
if|if
condition|(
name|iInfoPanel
operator|.
name|isShowing
argument_list|()
condition|)
name|iHideInfo
operator|.
name|schedule
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setCallback
parameter_list|(
name|Callback
name|callback
parameter_list|)
block|{
name|iUpdateInfo
operator|=
name|callback
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setUrl
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|iUrl
operator|=
name|url
expr_stmt|;
if|if
condition|(
name|iUrl
operator|!=
literal|null
operator|&&
operator|!
name|iUrl
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iText
operator|.
name|addStyleName
argument_list|(
literal|"clickable"
argument_list|)
expr_stmt|;
name|iHint
operator|.
name|addStyleName
argument_list|(
literal|"clickable"
argument_list|)
expr_stmt|;
name|iHint
operator|.
name|setTabIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isPopupShowing
parameter_list|()
block|{
return|return
name|iInfoPanel
operator|.
name|isShowing
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setClickHandler
parameter_list|(
name|ClickHandler
name|clickHandler
parameter_list|)
block|{
name|iTextClick
operator|.
name|removeHandler
argument_list|()
expr_stmt|;
name|iHintClick
operator|.
name|removeHandler
argument_list|()
expr_stmt|;
if|if
condition|(
name|clickHandler
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|iUrl
operator|!=
literal|null
operator|&&
operator|!
name|iUrl
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iText
operator|.
name|addStyleName
argument_list|(
literal|"clickable"
argument_list|)
expr_stmt|;
name|iHint
operator|.
name|addStyleName
argument_list|(
literal|"clickable"
argument_list|)
expr_stmt|;
name|iHint
operator|.
name|setTabIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|iTextClick
operator|=
name|iHint
operator|.
name|addClickHandler
argument_list|(
name|iDefaultClickHandler
argument_list|)
expr_stmt|;
name|iHintClick
operator|=
name|iText
operator|.
name|addClickHandler
argument_list|(
name|iDefaultClickHandler
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iText
operator|.
name|addStyleName
argument_list|(
literal|"clickable"
argument_list|)
expr_stmt|;
name|iHint
operator|.
name|addStyleName
argument_list|(
literal|"clickable"
argument_list|)
expr_stmt|;
name|iHint
operator|.
name|setTabIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|iTextClick
operator|=
name|iHint
operator|.
name|addClickHandler
argument_list|(
name|clickHandler
argument_list|)
expr_stmt|;
name|iHintClick
operator|=
name|iText
operator|.
name|addClickHandler
argument_list|(
name|clickHandler
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAriaLabel
parameter_list|()
block|{
return|return
name|iHint
operator|.
name|getAriaLabel
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setAriaLabel
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|iHint
operator|.
name|setAriaLabel
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

