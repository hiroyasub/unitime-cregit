begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 - 3.5 (University Timetabling Application)  * Copyright (C) 2010 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|page
package|;
end_package

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|MenuInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|MenuInterface
operator|.
name|PageNameInterface
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|shared
operator|.
name|GwtEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|shared
operator|.
name|HandlerRegistration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|RootPanel
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|UniTimePageLabel
implements|implements
name|HasValue
argument_list|<
name|PageNameInterface
argument_list|>
block|{
specifier|protected
specifier|static
specifier|final
name|GwtConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|GwtRpcServiceAsync
name|RPC
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtRpcService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|PageLabel
name|iLabel
init|=
operator|new
name|PageLabel
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|UniTimePageLabel
name|sInstance
init|=
literal|null
decl_stmt|;
specifier|private
name|UniTimePageLabel
parameter_list|()
block|{
block|}
specifier|public
specifier|static
name|UniTimePageLabel
name|getInstance
parameter_list|()
block|{
if|if
condition|(
name|sInstance
operator|==
literal|null
condition|)
name|sInstance
operator|=
operator|new
name|UniTimePageLabel
argument_list|()
expr_stmt|;
return|return
name|sInstance
return|;
block|}
specifier|public
name|void
name|insert
parameter_list|(
name|RootPanel
name|panel
parameter_list|)
block|{
name|String
name|title
init|=
name|panel
operator|.
name|getElement
argument_list|()
operator|.
name|getInnerText
argument_list|()
decl_stmt|;
if|if
condition|(
name|title
operator|!=
literal|null
operator|&&
operator|!
name|title
operator|.
name|isEmpty
argument_list|()
condition|)
name|iLabel
operator|.
name|setValue
argument_list|(
operator|new
name|PageNameInterface
argument_list|(
name|title
argument_list|)
argument_list|)
expr_stmt|;
name|panel
operator|.
name|getElement
argument_list|()
operator|.
name|setInnerText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|iLabel
argument_list|)
expr_stmt|;
name|setPageName
argument_list|(
name|title
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setPageName
parameter_list|(
specifier|final
name|String
name|title
parameter_list|)
block|{
if|if
condition|(
name|title
operator|==
literal|null
operator|||
name|title
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|RPC
operator|.
name|execute
argument_list|(
operator|new
name|MenuInterface
operator|.
name|PageNameRpcRequest
argument_list|(
name|title
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|PageNameInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|setValue
argument_list|(
operator|new
name|PageNameInterface
argument_list|(
name|title
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|PageNameInterface
name|result
parameter_list|)
block|{
if|if
condition|(
operator|!
name|result
operator|.
name|hasName
argument_list|()
condition|)
name|result
operator|.
name|setName
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|setValue
argument_list|(
name|result
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|HandlerRegistration
name|addValueChangeHandler
parameter_list|(
name|ValueChangeHandler
argument_list|<
name|PageNameInterface
argument_list|>
name|handler
parameter_list|)
block|{
return|return
name|iLabel
operator|.
name|addValueChangeHandler
argument_list|(
name|handler
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|fireEvent
parameter_list|(
name|GwtEvent
argument_list|<
name|?
argument_list|>
name|event
parameter_list|)
block|{
name|iLabel
operator|.
name|fireEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|PageNameInterface
name|getValue
parameter_list|()
block|{
return|return
name|iLabel
operator|.
name|getValue
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|PageNameInterface
name|value
parameter_list|)
block|{
name|Window
operator|.
name|setTitle
argument_list|(
literal|"UniTime "
operator|+
name|CONSTANTS
operator|.
name|version
argument_list|()
operator|+
literal|"| "
operator|+
name|value
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|iLabel
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|PageNameInterface
name|value
parameter_list|,
name|boolean
name|fireEvents
parameter_list|)
block|{
name|Window
operator|.
name|setTitle
argument_list|(
literal|"UniTime "
operator|+
name|CONSTANTS
operator|.
name|version
argument_list|()
operator|+
literal|"| "
operator|+
name|value
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|iLabel
operator|.
name|setValue
argument_list|(
name|value
argument_list|,
name|fireEvents
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

