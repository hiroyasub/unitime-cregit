begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|pointintimedata
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|page
operator|.
name|UniTimePageLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|LoadingWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|SimpleForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeHeaderPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcResponseList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcResponseNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|EncodeQueryRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|EncodeQueryRpcResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|PointInTimeDataReportsInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|PointInTimeDataReportsInterface
operator|.
name|PITDExecuteRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|PointInTimeDataReportsInterface
operator|.
name|PITDParametersInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|PointInTimeDataReportsInterface
operator|.
name|PITDParametersRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|PointInTimeDataReportsInterface
operator|.
name|PITDQueriesRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|PointInTimeDataReportsInterface
operator|.
name|PITDSetBackRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|PointInTimeDataReportsInterface
operator|.
name|Report
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|PointInTimeDataReportsInterface
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Unit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DOM
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|History
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasVerticalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ListBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|TextBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_comment
comment|/**  * @author Stephanie Schluttenhofer  */
end_comment

begin_class
specifier|public
class|class
name|PointInTimeDataReportsPage
extends|extends
name|Composite
block|{
specifier|protected
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|GwtRpcServiceAsync
name|RPC
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtRpcService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|SimpleForm
name|iForm
init|=
literal|null
decl_stmt|;
specifier|private
name|UniTimeHeaderPanel
name|iHeader
init|=
literal|null
decl_stmt|,
name|iTableHeader
init|=
literal|null
decl_stmt|;
empty_stmt|;
specifier|private
name|UniTimeWidget
argument_list|<
name|ListBox
argument_list|>
name|iReportSelector
init|=
literal|null
decl_stmt|;
specifier|private
name|HTML
name|iDescription
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|PointInTimeDataReportsInterface
operator|.
name|Report
argument_list|>
name|iReports
init|=
operator|new
name|ArrayList
argument_list|<
name|PointInTimeDataReportsInterface
operator|.
name|Report
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|PointInTimeDataReportsInterface
operator|.
name|Parameter
argument_list|>
name|iParameters
init|=
operator|new
name|ArrayList
argument_list|<
name|PointInTimeDataReportsInterface
operator|.
name|Parameter
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|UniTimeTable
argument_list|<
name|String
index|[]
argument_list|>
name|iTable
init|=
operator|new
name|UniTimeTable
argument_list|<
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|String
name|iFirstField
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|iLastSort
init|=
literal|0
decl_stmt|;
specifier|private
name|String
name|iLastHistory
init|=
literal|null
decl_stmt|;
specifier|public
name|PointInTimeDataReportsPage
parameter_list|()
block|{
name|UniTimePageLabel
operator|.
name|getInstance
argument_list|()
operator|.
name|setPageName
argument_list|(
name|MESSAGES
operator|.
name|pagePointInTimeDataReports
argument_list|()
argument_list|)
expr_stmt|;
name|iForm
operator|=
operator|new
name|SimpleForm
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|removeStyleName
argument_list|(
literal|"unitime-NotPrintableBottomLine"
argument_list|)
expr_stmt|;
name|iHeader
operator|=
operator|new
name|UniTimeHeaderPanel
argument_list|(
name|MESSAGES
operator|.
name|sectFilter
argument_list|()
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"execute"
argument_list|,
name|MESSAGES
operator|.
name|buttonExecute
argument_list|()
argument_list|,
literal|75
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|iLastSort
operator|=
literal|0
expr_stmt|;
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"print"
argument_list|,
name|MESSAGES
operator|.
name|buttonPrint
argument_list|()
argument_list|,
literal|75
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|PITDExecuteRpcRequest
name|request
init|=
operator|new
name|PITDExecuteRpcRequest
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|iReportSelector
operator|.
name|getWidget
argument_list|()
operator|.
name|getValue
argument_list|(
name|iReportSelector
operator|.
name|getWidget
argument_list|()
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|PointInTimeDataReportsInterface
operator|.
name|Report
name|q
range|:
name|iReports
control|)
block|{
if|if
condition|(
name|id
operator|.
name|equals
argument_list|(
name|q
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|request
operator|.
name|setReport
argument_list|(
name|q
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|request
operator|.
name|getReport
argument_list|()
operator|==
literal|null
condition|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|errorNoReportSelected
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|SimpleForm
name|form
init|=
operator|new
name|SimpleForm
argument_list|()
decl_stmt|;
name|form
operator|.
name|addHeaderRow
argument_list|(
name|request
operator|.
name|getReport
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|request
operator|.
name|getReport
argument_list|()
operator|.
name|getDescription
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|form
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propDescription
argument_list|()
argument_list|,
operator|new
name|HTML
argument_list|(
name|request
operator|.
name|getReport
argument_list|()
operator|.
name|getDescription
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iParameters
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|PointInTimeDataReportsInterface
operator|.
name|Parameter
name|parameter
init|=
name|iParameters
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getReport
argument_list|()
operator|.
name|parametersContain
argument_list|(
name|parameter
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|parameter
operator|.
name|isTextField
argument_list|()
condition|)
block|{
name|TextBox
name|textBox
init|=
operator|(
operator|(
name|UniTimeWidget
argument_list|<
name|TextBox
argument_list|>
operator|)
name|iForm
operator|.
name|getWidget
argument_list|(
literal|3
operator|+
name|i
argument_list|,
literal|1
argument_list|)
operator|)
operator|.
name|getWidget
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|textBox
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|errorItemNotSelected
argument_list|(
name|parameter
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|request
operator|.
name|addParameter
argument_list|(
name|parameter
operator|.
name|getType
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|form
operator|.
name|addRow
argument_list|(
name|parameter
operator|.
name|getName
argument_list|()
operator|+
literal|":"
argument_list|,
operator|new
name|Label
argument_list|(
name|value
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ListBox
name|list
init|=
operator|(
operator|(
name|UniTimeWidget
argument_list|<
name|ListBox
argument_list|>
operator|)
name|iForm
operator|.
name|getWidget
argument_list|(
literal|3
operator|+
name|i
argument_list|,
literal|1
argument_list|)
operator|)
operator|.
name|getWidget
argument_list|()
decl_stmt|;
name|String
name|value
init|=
literal|""
decl_stmt|;
name|String
name|values
init|=
literal|""
decl_stmt|;
name|boolean
name|allSelected
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|isMultipleSelect
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|list
operator|.
name|getItemCount
argument_list|()
condition|;
name|j
operator|++
control|)
if|if
condition|(
name|list
operator|.
name|isItemSelected
argument_list|(
name|j
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|value
operator|+=
literal|","
expr_stmt|;
name|values
operator|+=
literal|", "
expr_stmt|;
block|}
name|value
operator|+=
name|list
operator|.
name|getValue
argument_list|(
name|j
argument_list|)
expr_stmt|;
name|values
operator|+=
name|list
operator|.
name|getItemText
argument_list|(
name|j
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|allSelected
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|allSelected
condition|)
name|values
operator|=
name|MESSAGES
operator|.
name|itemAll
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|list
operator|.
name|getSelectedIndex
argument_list|()
operator|>
literal|0
condition|)
block|{
name|value
operator|=
name|list
operator|.
name|getValue
argument_list|(
name|list
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
expr_stmt|;
name|values
operator|=
name|list
operator|.
name|getItemText
argument_list|(
name|list
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|errorItemNotSelected
argument_list|(
name|parameter
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|request
operator|.
name|addParameter
argument_list|(
name|parameter
operator|.
name|getType
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|form
operator|.
name|addRow
argument_list|(
name|parameter
operator|.
name|getName
argument_list|()
operator|+
literal|":"
argument_list|,
operator|new
name|Label
argument_list|(
name|values
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
name|MESSAGES
operator|.
name|waitExecuting
argument_list|(
name|request
operator|.
name|getReport
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
name|request
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|Table
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iTableHeader
operator|.
name|setErrorMessage
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Table
name|result
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
operator|||
name|result
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
block|{
name|iTableHeader
operator|.
name|setMessage
argument_list|(
name|MESSAGES
operator|.
name|errorNoResults
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|UniTimeTable
argument_list|<
name|String
index|[]
argument_list|>
name|table
init|=
operator|new
name|UniTimeTable
argument_list|<
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|firstField
init|=
literal|null
decl_stmt|;
name|int
name|nrCols
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|result
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
index|[]
name|row
init|=
name|result
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Widget
argument_list|>
name|line
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|firstField
operator|=
name|row
index|[
literal|0
index|]
expr_stmt|;
name|nrCols
operator|=
name|row
operator|.
name|length
expr_stmt|;
for|for
control|(
name|String
name|x
range|:
name|row
control|)
block|{
specifier|final
name|String
name|name
init|=
name|x
operator|.
name|replace
argument_list|(
literal|'_'
argument_list|,
literal|' '
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|UniTimeTableHeader
name|h
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|name
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|line
operator|.
name|add
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|String
name|x
range|:
name|row
control|)
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|x
operator|==
literal|null
condition|?
literal|""
else|:
name|x
operator|.
name|replace
argument_list|(
literal|"\\n"
argument_list|,
literal|"<br>"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|table
operator|.
name|addRow
argument_list|(
name|i
operator|==
literal|0
condition|?
literal|null
else|:
name|row
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|firstField
operator|!=
literal|null
operator|&&
name|firstField
operator|.
name|startsWith
argument_list|(
literal|"__"
argument_list|)
condition|)
name|table
operator|.
name|setColumnVisible
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|iLastSort
operator|!=
literal|0
operator|&&
name|Math
operator|.
name|abs
argument_list|(
name|iLastSort
argument_list|)
operator|<=
name|nrCols
condition|)
block|{
name|table
operator|.
name|sort
argument_list|(
name|table
operator|.
name|getHeader
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|iLastSort
argument_list|)
operator|-
literal|1
argument_list|)
argument_list|,
operator|new
name|Comparator
argument_list|<
name|String
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|String
index|[]
name|o1
parameter_list|,
name|String
index|[]
name|o2
parameter_list|)
block|{
return|return
name|PointInTimeDataReportsPage
operator|.
name|compare
argument_list|(
name|o1
argument_list|,
name|o2
argument_list|,
name|Math
operator|.
name|abs
argument_list|(
name|iLastSort
argument_list|)
operator|-
literal|1
argument_list|)
return|;
block|}
block|}
argument_list|,
name|iLastSort
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setWidth
argument_list|(
literal|1040
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
comment|// Move header row to thead
name|Element
name|headerRow
init|=
name|table
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Element
name|tableElement
init|=
name|table
operator|.
name|getElement
argument_list|()
decl_stmt|;
name|Element
name|thead
init|=
name|DOM
operator|.
name|createTHead
argument_list|()
decl_stmt|;
name|tableElement
operator|.
name|insertFirst
argument_list|(
name|thead
argument_list|)
expr_stmt|;
name|headerRow
operator|.
name|getParentElement
argument_list|()
operator|.
name|removeChild
argument_list|(
name|headerRow
argument_list|)
expr_stmt|;
name|thead
operator|.
name|appendChild
argument_list|(
name|headerRow
argument_list|)
expr_stmt|;
specifier|final
name|Element
name|div
init|=
name|DOM
operator|.
name|createDiv
argument_list|()
decl_stmt|;
name|div
operator|.
name|appendChild
argument_list|(
name|form
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
name|div
operator|.
name|appendChild
argument_list|(
name|table
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|MESSAGES
operator|.
name|pagePointInTimeDataReports
argument_list|()
decl_stmt|;
specifier|final
name|String
name|pageName
init|=
name|name
decl_stmt|;
name|ToolBox
operator|.
name|print
argument_list|(
operator|new
name|ToolBox
operator|.
name|Page
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|pageName
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getSession
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
annotation|@
name|Override
specifier|public
name|Element
name|getBody
parameter_list|()
block|{
return|return
name|div
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"export"
argument_list|,
name|MESSAGES
operator|.
name|buttonExportCSV
argument_list|()
argument_list|,
literal|85
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|String
name|id
init|=
name|iReportSelector
operator|.
name|getWidget
argument_list|()
operator|.
name|getValue
argument_list|(
name|iReportSelector
operator|.
name|getWidget
argument_list|()
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
decl_stmt|;
name|PointInTimeDataReportsInterface
operator|.
name|Report
name|query
init|=
literal|null
decl_stmt|;
for|for
control|(
name|PointInTimeDataReportsInterface
operator|.
name|Report
name|q
range|:
name|iReports
control|)
block|{
if|if
condition|(
name|id
operator|.
name|equals
argument_list|(
name|q
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|query
operator|=
name|q
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|query
operator|==
literal|null
condition|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|errorNoReportSelected
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|params
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iParameters
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|PointInTimeDataReportsInterface
operator|.
name|Parameter
name|parameter
init|=
name|iParameters
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|parametersContain
argument_list|(
name|parameter
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|parameter
operator|.
name|isTextField
argument_list|()
condition|)
block|{
name|TextBox
name|textBox
init|=
operator|(
operator|(
name|UniTimeWidget
argument_list|<
name|TextBox
argument_list|>
operator|)
name|iForm
operator|.
name|getWidget
argument_list|(
literal|3
operator|+
name|i
argument_list|,
literal|1
argument_list|)
operator|)
operator|.
name|getWidget
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|textBox
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|errorItemNotSelected
argument_list|(
name|parameter
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|params
operator|.
name|isEmpty
argument_list|()
condition|)
name|params
operator|+=
literal|":"
expr_stmt|;
name|params
operator|+=
operator|(
name|value
operator|==
literal|null
condition|?
literal|""
else|:
name|value
operator|)
expr_stmt|;
block|}
else|else
block|{
name|ListBox
name|list
init|=
operator|(
operator|(
name|UniTimeWidget
argument_list|<
name|ListBox
argument_list|>
operator|)
name|iForm
operator|.
name|getWidget
argument_list|(
literal|3
operator|+
name|i
argument_list|,
literal|1
argument_list|)
operator|)
operator|.
name|getWidget
argument_list|()
decl_stmt|;
name|String
name|value
init|=
literal|""
decl_stmt|;
name|boolean
name|allSelected
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|isMultipleSelect
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|list
operator|.
name|getItemCount
argument_list|()
condition|;
name|j
operator|++
control|)
if|if
condition|(
name|list
operator|.
name|isItemSelected
argument_list|(
name|j
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
name|value
operator|+=
literal|","
expr_stmt|;
name|value
operator|+=
name|list
operator|.
name|getValue
argument_list|(
name|j
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|allSelected
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|list
operator|.
name|getSelectedIndex
argument_list|()
operator|>
literal|0
condition|)
block|{
name|value
operator|=
name|list
operator|.
name|getValue
argument_list|(
name|list
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|errorItemNotSelected
argument_list|(
name|parameter
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|params
operator|.
name|isEmpty
argument_list|()
condition|)
name|params
operator|+=
literal|":"
expr_stmt|;
name|params
operator|+=
operator|(
name|list
operator|.
name|isMultipleSelect
argument_list|()
operator|&&
name|allSelected
condition|?
literal|""
else|:
name|value
operator|)
expr_stmt|;
block|}
block|}
block|}
name|String
name|reportId
init|=
name|iReportSelector
operator|.
name|getWidget
argument_list|()
operator|.
name|getValue
argument_list|(
name|iReportSelector
operator|.
name|getWidget
argument_list|()
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
decl_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
name|EncodeQueryRpcRequest
operator|.
name|encode
argument_list|(
literal|"output=pitd-report.csv&report="
operator|+
name|reportId
operator|+
literal|"&params="
operator|+
name|params
operator|+
literal|"&sort="
operator|+
name|iLastSort
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|EncodeQueryRpcResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|EncodeQueryRpcResponse
name|result
parameter_list|)
block|{
name|ToolBox
operator|.
name|open
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"export?q="
operator|+
name|result
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addHeaderRow
argument_list|(
name|iHeader
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"execute"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"print"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"export"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|getColumnFormatter
argument_list|()
operator|.
name|setWidth
argument_list|(
literal|0
argument_list|,
literal|"120px"
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|getColumnFormatter
argument_list|()
operator|.
name|setWidth
argument_list|(
literal|1
argument_list|,
literal|"100%"
argument_list|)
expr_stmt|;
name|iReportSelector
operator|=
operator|new
name|UniTimeWidget
argument_list|<
name|ListBox
argument_list|>
argument_list|(
operator|new
name|ListBox
argument_list|()
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propReport
argument_list|()
argument_list|,
name|iReportSelector
argument_list|)
expr_stmt|;
name|iReportSelector
operator|.
name|getWidget
argument_list|()
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|iReportSelector
operator|.
name|clearHint
argument_list|()
expr_stmt|;
name|iReportSelector
operator|.
name|setPrintText
argument_list|(
name|iReportSelector
operator|.
name|getWidget
argument_list|()
operator|.
name|getItemText
argument_list|(
name|iReportSelector
operator|.
name|getWidget
argument_list|()
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|queryChanged
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iDescription
operator|=
operator|new
name|HTML
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propDescription
argument_list|()
argument_list|,
name|iDescription
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setVerticalAlignment
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
name|HasVerticalAlignment
operator|.
name|ALIGN_TOP
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
name|MESSAGES
operator|.
name|waitLoadingReports
argument_list|()
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
operator|new
name|PITDParametersRpcRequest
argument_list|()
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|PITDParametersInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|ToolBox
operator|.
name|checkAccess
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|PITDParametersInterface
name|result
parameter_list|)
block|{
name|iParameters
operator|=
name|result
operator|.
name|getParameters
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iParameters
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|PointInTimeDataReportsInterface
operator|.
name|Parameter
name|parameter
init|=
name|iParameters
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|parameter
operator|.
name|isTextField
argument_list|()
condition|)
block|{
name|TextBox
name|text
init|=
operator|new
name|TextBox
argument_list|()
decl_stmt|;
if|if
condition|(
name|parameter
operator|.
name|getDefaultTextValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|text
operator|.
name|setText
argument_list|(
name|parameter
operator|.
name|getDefaultTextValue
argument_list|()
argument_list|)
expr_stmt|;
name|text
operator|.
name|setValue
argument_list|(
name|parameter
operator|.
name|getDefaultTextValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|UniTimeWidget
argument_list|<
name|TextBox
argument_list|>
name|u
init|=
operator|new
name|UniTimeWidget
argument_list|<
name|TextBox
argument_list|>
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|parameter
operator|.
name|getName
argument_list|()
operator|+
literal|":"
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setVerticalAlignment
argument_list|(
literal|3
operator|+
name|i
argument_list|,
literal|0
argument_list|,
name|HasVerticalAlignment
operator|.
name|ALIGN_TOP
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
literal|3
operator|+
name|i
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|u
operator|.
name|setPrintText
argument_list|(
name|text
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|text
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|u
operator|.
name|clearHint
argument_list|()
expr_stmt|;
name|String
name|entered
init|=
name|u
operator|.
name|getWidget
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|u
operator|.
name|setPrintText
argument_list|(
name|entered
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ListBox
name|list
init|=
operator|new
name|ListBox
argument_list|()
decl_stmt|;
name|list
operator|.
name|setMultipleSelect
argument_list|(
name|parameter
operator|.
name|isMultiSelect
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|parameter
operator|.
name|isMultiSelect
argument_list|()
condition|)
name|list
operator|.
name|addItem
argument_list|(
name|MESSAGES
operator|.
name|itemSelect
argument_list|()
argument_list|,
literal|"-1"
argument_list|)
expr_stmt|;
for|for
control|(
name|PointInTimeDataReportsInterface
operator|.
name|IdValue
name|v
range|:
name|parameter
operator|.
name|values
argument_list|()
control|)
name|list
operator|.
name|addItem
argument_list|(
name|v
operator|.
name|getText
argument_list|()
argument_list|,
name|v
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|UniTimeWidget
argument_list|<
name|ListBox
argument_list|>
name|u
init|=
operator|new
name|UniTimeWidget
argument_list|<
name|ListBox
argument_list|>
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|parameter
operator|.
name|getName
argument_list|()
operator|+
literal|":"
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setVerticalAlignment
argument_list|(
literal|3
operator|+
name|i
argument_list|,
literal|0
argument_list|,
name|HasVerticalAlignment
operator|.
name|ALIGN_TOP
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
literal|3
operator|+
name|i
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|list
operator|.
name|isMultipleSelect
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|list
operator|.
name|getItemCount
argument_list|()
condition|;
name|j
operator|++
control|)
name|list
operator|.
name|setItemSelected
argument_list|(
name|j
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|u
operator|.
name|setPrintText
argument_list|(
name|MESSAGES
operator|.
name|itemAll
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|list
operator|.
name|getItemCount
argument_list|()
operator|==
literal|2
condition|)
block|{
name|list
operator|.
name|setSelectedIndex
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|u
operator|.
name|setPrintText
argument_list|(
name|list
operator|.
name|getItemText
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|u
operator|.
name|clearHint
argument_list|()
expr_stmt|;
name|String
name|selected
init|=
literal|""
decl_stmt|;
name|boolean
name|hasAll
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|u
operator|.
name|getWidget
argument_list|()
operator|.
name|getItemCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|u
operator|.
name|getWidget
argument_list|()
operator|.
name|isItemSelected
argument_list|(
name|i
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|selected
operator|.
name|isEmpty
argument_list|()
condition|)
name|selected
operator|+=
literal|","
expr_stmt|;
name|selected
operator|+=
name|u
operator|.
name|getWidget
argument_list|()
operator|.
name|getItemText
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
else|else
name|hasAll
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|hasAll
operator|&&
name|u
operator|.
name|getWidget
argument_list|()
operator|.
name|getItemCount
argument_list|()
operator|>
literal|5
condition|)
name|selected
operator|=
name|MESSAGES
operator|.
name|itemAll
argument_list|()
expr_stmt|;
if|if
condition|(
name|selected
operator|.
name|length
argument_list|()
operator|>
literal|150
condition|)
name|selected
operator|=
name|selected
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|147
argument_list|)
operator|+
literal|"..."
expr_stmt|;
name|u
operator|.
name|setPrintText
argument_list|(
name|selected
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|iTableHeader
operator|=
operator|new
name|UniTimeHeaderPanel
argument_list|(
name|MESSAGES
operator|.
name|sectResults
argument_list|()
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addHeaderRow
argument_list|(
name|iTableHeader
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|iTable
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addBottomRow
argument_list|(
name|iHeader
operator|.
name|clonePanel
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|loadQueries
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|addMouseClickListener
argument_list|(
operator|new
name|UniTimeTable
operator|.
name|MouseClickListener
argument_list|<
name|String
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseClick
parameter_list|(
name|UniTimeTable
operator|.
name|TableEvent
argument_list|<
name|String
index|[]
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getRow
argument_list|()
operator|>
literal|0
operator|&&
name|event
operator|.
name|getData
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|"__Class"
operator|.
name|equals
argument_list|(
name|iFirstField
argument_list|)
condition|)
name|ToolBox
operator|.
name|open
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"classDetail.do?cid="
operator|+
name|event
operator|.
name|getData
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
if|else if
condition|(
literal|"__Offering"
operator|.
name|equals
argument_list|(
name|iFirstField
argument_list|)
condition|)
name|ToolBox
operator|.
name|open
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"instructionalOfferingDetail.do?op=view&io="
operator|+
name|event
operator|.
name|getData
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
if|else if
condition|(
literal|"__Subpart"
operator|.
name|equals
argument_list|(
name|iFirstField
argument_list|)
condition|)
name|ToolBox
operator|.
name|open
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"schedulingSubpartDetail.do?ssuid="
operator|+
name|event
operator|.
name|getData
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
if|else if
condition|(
literal|"__Room"
operator|.
name|equals
argument_list|(
name|iFirstField
argument_list|)
condition|)
name|ToolBox
operator|.
name|open
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"gwt.jsp?page=rooms&back=1&id="
operator|+
name|event
operator|.
name|getData
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
if|else if
condition|(
literal|"__Instructor"
operator|.
name|equals
argument_list|(
name|iFirstField
argument_list|)
condition|)
name|ToolBox
operator|.
name|open
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"instructorDetail.do?instructorId="
operator|+
name|event
operator|.
name|getData
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
if|else if
condition|(
literal|"__Exam"
operator|.
name|equals
argument_list|(
name|iFirstField
argument_list|)
condition|)
name|ToolBox
operator|.
name|open
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"examDetail.do?examId="
operator|+
name|event
operator|.
name|getData
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
if|else if
condition|(
literal|"__Event"
operator|.
name|equals
argument_list|(
name|iFirstField
argument_list|)
condition|)
name|ToolBox
operator|.
name|open
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"gwt.jsp?page=events#event="
operator|+
name|event
operator|.
name|getData
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|iForm
argument_list|)
expr_stmt|;
name|History
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|String
argument_list|>
name|event
parameter_list|)
block|{
name|reload
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|loadQueries
parameter_list|(
specifier|final
name|Long
name|select
parameter_list|,
specifier|final
name|boolean
name|reload
parameter_list|)
block|{
if|if
condition|(
operator|!
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|isShowing
argument_list|()
condition|)
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
name|MESSAGES
operator|.
name|waitLoadingReports
argument_list|()
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
operator|new
name|PITDQueriesRpcRequest
argument_list|()
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|GwtRpcResponseList
argument_list|<
name|Report
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|GwtRpcResponseList
argument_list|<
name|Report
argument_list|>
name|result
parameter_list|)
block|{
name|String
name|selected
init|=
operator|(
name|select
operator|==
literal|null
condition|?
literal|null
else|:
name|select
operator|.
name|toString
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|selected
operator|==
literal|null
operator|&&
name|iReportSelector
operator|.
name|getWidget
argument_list|()
operator|.
name|getSelectedIndex
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|selected
operator|=
name|iReportSelector
operator|.
name|getWidget
argument_list|()
operator|.
name|getValue
argument_list|(
name|iReportSelector
operator|.
name|getWidget
argument_list|()
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iReportSelector
operator|.
name|getWidget
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|errorNoReportsAvailable
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iReportSelector
operator|.
name|getWidget
argument_list|()
operator|.
name|addItem
argument_list|(
name|MESSAGES
operator|.
name|itemSelect
argument_list|()
argument_list|,
literal|"-1"
argument_list|)
expr_stmt|;
name|iReports
operator|=
name|result
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|result
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|iReportSelector
operator|.
name|getWidget
argument_list|()
operator|.
name|addItem
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|selected
operator|!=
literal|null
operator|&&
name|selected
operator|.
name|equals
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
name|iReportSelector
operator|.
name|getWidget
argument_list|()
operator|.
name|setSelectedIndex
argument_list|(
literal|1
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|queryChanged
argument_list|()
expr_stmt|;
block|}
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
if|if
condition|(
name|reload
condition|)
name|reload
argument_list|(
name|History
operator|.
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|queryChanged
parameter_list|()
block|{
name|iHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
if|if
condition|(
name|iReportSelector
operator|.
name|getWidget
argument_list|()
operator|.
name|getSelectedIndex
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"execute"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iDescription
operator|.
name|setHTML
argument_list|(
literal|""
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iParameters
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|iForm
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
literal|3
operator|+
name|i
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"execute"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|id
init|=
name|iReportSelector
operator|.
name|getWidget
argument_list|()
operator|.
name|getValue
argument_list|(
name|iReportSelector
operator|.
name|getWidget
argument_list|()
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|PointInTimeDataReportsInterface
operator|.
name|Report
name|rpt
range|:
name|iReports
control|)
block|{
if|if
condition|(
name|id
operator|.
name|equals
argument_list|(
name|rpt
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|iDescription
operator|.
name|setHTML
argument_list|(
name|rpt
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iParameters
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|PointInTimeDataReportsInterface
operator|.
name|Parameter
name|parameter
init|=
name|iParameters
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|iForm
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
literal|3
operator|+
name|i
argument_list|,
name|rpt
operator|.
name|parametersContain
argument_list|(
name|parameter
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|public
specifier|static
name|int
name|compare
parameter_list|(
name|String
index|[]
name|a
parameter_list|,
name|String
index|[]
name|b
parameter_list|,
name|int
name|col
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|a
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|c
init|=
operator|(
name|col
operator|+
name|i
operator|)
operator|%
name|a
operator|.
name|length
decl_stmt|;
try|try
block|{
name|int
name|cmp
init|=
name|Double
operator|.
name|valueOf
argument_list|(
name|a
index|[
name|c
index|]
operator|==
literal|null
condition|?
literal|"0"
else|:
name|a
index|[
name|c
index|]
argument_list|)
operator|.
name|compareTo
argument_list|(
name|Double
operator|.
name|valueOf
argument_list|(
name|b
index|[
name|c
index|]
operator|==
literal|null
condition|?
literal|"0"
else|:
name|b
index|[
name|c
index|]
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|int
name|cmp
init|=
operator|(
name|a
index|[
name|c
index|]
operator|==
literal|null
condition|?
literal|""
else|:
name|a
index|[
name|c
index|]
operator|)
operator|.
name|compareTo
argument_list|(
name|b
index|[
name|c
index|]
operator|==
literal|null
condition|?
literal|""
else|:
name|b
index|[
name|c
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|populate
parameter_list|(
name|Table
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
operator|==
literal|null
operator|||
name|result
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
block|{
name|iTableHeader
operator|.
name|setMessage
argument_list|(
name|MESSAGES
operator|.
name|errorNoResults
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|result
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
index|[]
name|row
init|=
name|result
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Widget
argument_list|>
name|line
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|iFirstField
operator|=
name|row
index|[
literal|0
index|]
expr_stmt|;
for|for
control|(
name|String
name|x
range|:
name|row
control|)
block|{
specifier|final
name|String
name|name
init|=
name|x
operator|.
name|replace
argument_list|(
literal|'_'
argument_list|,
literal|' '
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
specifier|final
name|UniTimeTableHeader
name|h
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|name
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|col
init|=
name|line
operator|.
name|size
argument_list|()
decl_stmt|;
name|h
operator|.
name|addOperation
argument_list|(
operator|new
name|UniTimeTableHeader
operator|.
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iTable
operator|.
name|sort
argument_list|(
name|col
argument_list|,
operator|new
name|Comparator
argument_list|<
name|String
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|String
index|[]
name|o1
parameter_list|,
name|String
index|[]
name|o2
parameter_list|)
block|{
return|return
name|PointInTimeDataReportsPage
operator|.
name|compare
argument_list|(
name|o1
argument_list|,
name|o2
argument_list|,
name|col
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iLastSort
operator|=
operator|(
name|h
operator|.
name|getOrder
argument_list|()
operator|!=
literal|null
operator|&&
name|h
operator|.
name|getOrder
argument_list|()
condition|?
operator|(
literal|1
operator|+
name|col
operator|)
else|:
operator|-
literal|1
operator|-
name|col
operator|)
expr_stmt|;
name|History
operator|.
name|newItem
argument_list|(
name|iLastHistory
operator|+
literal|":"
operator|+
name|iLastSort
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setBack
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opSortBy
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|String
name|x
range|:
name|row
control|)
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|x
operator|==
literal|null
condition|?
literal|""
else|:
name|x
operator|.
name|replace
argument_list|(
literal|"\\n"
argument_list|,
literal|"<br>"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|iTable
operator|.
name|addRow
argument_list|(
name|i
operator|==
literal|0
condition|?
literal|null
else|:
name|row
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iFirstField
operator|!=
literal|null
operator|&&
name|iFirstField
operator|.
name|startsWith
argument_list|(
literal|"__"
argument_list|)
condition|)
name|iTable
operator|.
name|setColumnVisible
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"print"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"export"
argument_list|,
name|iTable
operator|.
name|getRowCount
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
name|iTableHeader
operator|.
name|setMessage
argument_list|(
name|MESSAGES
operator|.
name|infoShowingAllLines
argument_list|(
name|result
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iLastSort
operator|!=
literal|0
condition|)
block|{
name|iTable
operator|.
name|sort
argument_list|(
name|iTable
operator|.
name|getHeader
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|iLastSort
argument_list|)
operator|-
literal|1
argument_list|)
argument_list|,
operator|new
name|Comparator
argument_list|<
name|String
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|String
index|[]
name|o1
parameter_list|,
name|String
index|[]
name|o2
parameter_list|)
block|{
return|return
name|PointInTimeDataReportsPage
operator|.
name|compare
argument_list|(
name|o1
argument_list|,
name|o2
argument_list|,
name|Math
operator|.
name|abs
argument_list|(
name|iLastSort
argument_list|)
operator|-
literal|1
argument_list|)
return|;
block|}
block|}
argument_list|,
name|iLastSort
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|setBack
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setBack
parameter_list|()
block|{
if|if
condition|(
name|iFirstField
operator|==
literal|null
operator|||
operator|!
name|iFirstField
operator|.
name|startsWith
argument_list|(
literal|"__"
argument_list|)
operator|||
name|iTable
operator|.
name|getRowCount
argument_list|()
operator|<=
literal|1
condition|)
return|return;
name|PITDSetBackRpcRequest
name|request
init|=
operator|new
name|PITDSetBackRpcRequest
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
index|[]
name|row
init|=
name|iTable
operator|.
name|getData
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|row
operator|!=
literal|null
condition|)
block|{
name|Long
name|id
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|row
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|request
operator|.
name|addId
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
name|request
operator|.
name|setHistory
argument_list|(
name|History
operator|.
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setType
argument_list|(
name|iFirstField
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
name|request
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|GwtRpcResponseNull
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|GwtRpcResponseNull
name|result
parameter_list|)
block|{
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|reload
parameter_list|(
name|String
name|history
parameter_list|)
block|{
if|if
condition|(
name|history
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|history
operator|.
name|indexOf
argument_list|(
literal|'&'
argument_list|)
operator|>=
literal|0
condition|)
name|history
operator|=
name|history
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|history
operator|.
name|indexOf
argument_list|(
literal|'&'
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|history
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|String
index|[]
name|params
init|=
name|history
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|params
index|[
literal|0
index|]
decl_stmt|;
name|PointInTimeDataReportsInterface
operator|.
name|Report
name|rpt
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iReports
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|PointInTimeDataReportsInterface
operator|.
name|Report
name|q
init|=
name|iReports
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|.
name|equals
argument_list|(
name|q
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|rpt
operator|=
name|q
expr_stmt|;
name|iReportSelector
operator|.
name|getWidget
argument_list|()
operator|.
name|setSelectedIndex
argument_list|(
literal|1
operator|+
name|i
argument_list|)
expr_stmt|;
name|queryChanged
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|rpt
operator|==
literal|null
condition|)
return|return;
name|int
name|idx
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iParameters
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|PointInTimeDataReportsInterface
operator|.
name|Parameter
name|parameter
init|=
name|iParameters
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|rpt
operator|.
name|parametersContain
argument_list|(
name|parameter
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|param
init|=
name|params
index|[
name|idx
operator|++
index|]
decl_stmt|;
if|if
condition|(
name|param
operator|==
literal|null
operator|||
name|param
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|parameter
operator|.
name|isTextField
argument_list|()
condition|)
block|{
name|TextBox
name|text
init|=
operator|(
operator|(
name|UniTimeWidget
argument_list|<
name|TextBox
argument_list|>
operator|)
name|iForm
operator|.
name|getWidget
argument_list|(
literal|3
operator|+
name|i
argument_list|,
literal|1
argument_list|)
operator|)
operator|.
name|getWidget
argument_list|()
decl_stmt|;
name|text
operator|.
name|setText
argument_list|(
name|param
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ListBox
name|list
init|=
operator|(
operator|(
name|UniTimeWidget
argument_list|<
name|ListBox
argument_list|>
operator|)
name|iForm
operator|.
name|getWidget
argument_list|(
literal|3
operator|+
name|i
argument_list|,
literal|1
argument_list|)
operator|)
operator|.
name|getWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|isMultipleSelect
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|list
operator|.
name|getItemCount
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|String
name|value
init|=
name|list
operator|.
name|getValue
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|boolean
name|contains
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|o
range|:
name|param
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
if|if
condition|(
name|o
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|contains
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|list
operator|.
name|setItemSelected
argument_list|(
name|j
argument_list|,
name|contains
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<
name|list
operator|.
name|getItemCount
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|list
operator|.
name|getValue
argument_list|(
name|j
argument_list|)
operator|.
name|equals
argument_list|(
name|param
argument_list|)
condition|)
block|{
name|list
operator|.
name|setSelectedIndex
argument_list|(
name|j
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
block|}
name|iLastSort
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|params
index|[
name|idx
operator|++
index|]
argument_list|)
expr_stmt|;
name|execute
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|execute
parameter_list|()
block|{
name|PITDExecuteRpcRequest
name|request
init|=
operator|new
name|PITDExecuteRpcRequest
argument_list|()
decl_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"print"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"export"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|String
name|id
init|=
name|iReportSelector
operator|.
name|getWidget
argument_list|()
operator|.
name|getValue
argument_list|(
name|iReportSelector
operator|.
name|getWidget
argument_list|()
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|PointInTimeDataReportsInterface
operator|.
name|Report
name|r
range|:
name|iReports
control|)
block|{
if|if
condition|(
name|id
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|request
operator|.
name|setReport
argument_list|(
name|r
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|request
operator|.
name|getReport
argument_list|()
operator|==
literal|null
condition|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|errorNoReportSelected
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|iLastHistory
operator|=
name|request
operator|.
name|getReport
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iParameters
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|PointInTimeDataReportsInterface
operator|.
name|Parameter
name|parameter
init|=
name|iParameters
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getReport
argument_list|()
operator|.
name|parametersContain
argument_list|(
name|parameter
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|parameter
operator|.
name|isTextField
argument_list|()
condition|)
block|{
name|TextBox
name|textBox
init|=
operator|(
operator|(
name|UniTimeWidget
argument_list|<
name|TextBox
argument_list|>
operator|)
name|iForm
operator|.
name|getWidget
argument_list|(
literal|3
operator|+
name|i
argument_list|,
literal|1
argument_list|)
operator|)
operator|.
name|getWidget
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|textBox
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|errorItemNotSelected
argument_list|(
name|parameter
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|request
operator|.
name|addParameter
argument_list|(
name|parameter
operator|.
name|getType
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|iLastHistory
operator|+=
literal|":"
operator|+
operator|(
name|value
operator|==
literal|null
condition|?
literal|""
else|:
name|value
operator|)
expr_stmt|;
block|}
else|else
block|{
name|PointInTimeDataReportsInterface
operator|.
name|IdValue
name|o
init|=
operator|new
name|PointInTimeDataReportsInterface
operator|.
name|IdValue
argument_list|()
decl_stmt|;
name|o
operator|.
name|setValue
argument_list|(
name|parameter
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|ListBox
name|list
init|=
operator|(
operator|(
name|UniTimeWidget
argument_list|<
name|ListBox
argument_list|>
operator|)
name|iForm
operator|.
name|getWidget
argument_list|(
literal|3
operator|+
name|i
argument_list|,
literal|1
argument_list|)
operator|)
operator|.
name|getWidget
argument_list|()
decl_stmt|;
name|String
name|value
init|=
literal|""
decl_stmt|;
name|boolean
name|allSelected
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|isMultipleSelect
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|list
operator|.
name|getItemCount
argument_list|()
condition|;
name|j
operator|++
control|)
if|if
condition|(
name|list
operator|.
name|isItemSelected
argument_list|(
name|j
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
name|value
operator|+=
literal|","
expr_stmt|;
name|value
operator|+=
name|list
operator|.
name|getValue
argument_list|(
name|j
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|allSelected
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|list
operator|.
name|getSelectedIndex
argument_list|()
operator|>
literal|0
condition|)
block|{
name|value
operator|=
name|list
operator|.
name|getValue
argument_list|(
name|list
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|errorItemNotSelected
argument_list|(
name|parameter
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|request
operator|.
name|addParameter
argument_list|(
name|parameter
operator|.
name|getType
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|iLastHistory
operator|+=
literal|":"
operator|+
operator|(
name|list
operator|.
name|isMultipleSelect
argument_list|()
operator|&&
name|allSelected
condition|?
literal|""
else|:
name|value
operator|)
expr_stmt|;
block|}
block|}
block|}
name|iTable
operator|.
name|clearTable
argument_list|()
expr_stmt|;
name|iFirstField
operator|=
literal|null
expr_stmt|;
name|iTableHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
name|iHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
name|MESSAGES
operator|.
name|waitExecuting
argument_list|(
name|request
operator|.
name|getReport
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|History
operator|.
name|newItem
argument_list|(
name|iLastHistory
operator|+
literal|":"
operator|+
name|iLastSort
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
name|request
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|Table
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iTableHeader
operator|.
name|setErrorMessage
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Table
name|result
parameter_list|)
block|{
name|populate
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

