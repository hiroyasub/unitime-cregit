begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|rooms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|page
operator|.
name|UniTimePageLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|rooms
operator|.
name|RoomsTable
operator|.
name|DepartmentCell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|ImageLink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|P
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|SimpleForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeHeaderPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|DepartmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|ExamTypeInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|FeatureInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|FeatureTypeInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|GroupInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|PeriodPreferenceModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomDetailInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomPictureInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomPropertiesInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomSharingModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomsPageMode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|InlineHTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|RoomDetail
extends|extends
name|Composite
block|{
specifier|private
specifier|static
specifier|final
name|GwtRpcServiceAsync
name|RPC
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtRpcService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|GwtConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|GwtResources
name|RESOURCES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtResources
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|SimpleForm
name|iForm
decl_stmt|;
specifier|private
name|UniTimeHeaderPanel
name|iHeader
decl_stmt|,
name|iFooter
decl_stmt|;
specifier|private
name|RoomPropertiesInterface
name|iProperties
init|=
literal|null
decl_stmt|;
specifier|private
name|RoomDetailInterface
name|iRoom
init|=
literal|null
decl_stmt|;
specifier|private
name|RoomsPageMode
name|iMode
init|=
literal|null
decl_stmt|;
specifier|public
name|RoomDetail
parameter_list|(
name|RoomsPageMode
name|mode
parameter_list|)
block|{
name|iMode
operator|=
name|mode
expr_stmt|;
name|iHeader
operator|=
operator|new
name|UniTimeHeaderPanel
argument_list|()
expr_stmt|;
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"edit"
argument_list|,
name|MESSAGES
operator|.
name|buttonEditRoom
argument_list|()
argument_list|,
literal|100
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|edit
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"previous"
argument_list|,
name|MESSAGES
operator|.
name|buttonPrevious
argument_list|()
argument_list|,
literal|75
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|RoomDetailInterface
name|prev
init|=
name|getPrevious
argument_list|(
name|getRoom
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|prev
operator|!=
literal|null
condition|)
name|previous
argument_list|(
name|prev
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"next"
argument_list|,
name|MESSAGES
operator|.
name|buttonNext
argument_list|()
argument_list|,
literal|75
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|RoomDetailInterface
name|next
init|=
name|getNext
argument_list|(
name|getRoom
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
name|next
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"back"
argument_list|,
name|MESSAGES
operator|.
name|buttonBack
argument_list|()
argument_list|,
literal|75
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
if|if
condition|(
literal|"1"
operator|.
name|equals
argument_list|(
name|Location
operator|.
name|getParameter
argument_list|(
literal|"back"
argument_list|)
argument_list|)
condition|)
name|ToolBox
operator|.
name|open
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"back.do"
argument_list|)
expr_stmt|;
else|else
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iForm
operator|=
operator|new
name|SimpleForm
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addStyleName
argument_list|(
literal|"unitime-RoomDetail"
argument_list|)
expr_stmt|;
name|iFooter
operator|=
name|iHeader
operator|.
name|clonePanel
argument_list|()
expr_stmt|;
name|initWidget
argument_list|(
name|iForm
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|iLastScrollLeft
decl_stmt|,
name|iLastScrollTop
decl_stmt|;
specifier|public
name|void
name|show
parameter_list|()
block|{
name|UniTimePageLabel
operator|.
name|getInstance
argument_list|()
operator|.
name|setPageName
argument_list|(
name|MESSAGES
operator|.
name|pageRoomDetail
argument_list|()
argument_list|)
expr_stmt|;
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iLastScrollLeft
operator|=
name|Window
operator|.
name|getScrollLeft
argument_list|()
expr_stmt|;
name|iLastScrollTop
operator|=
name|Window
operator|.
name|getScrollTop
argument_list|()
expr_stmt|;
name|onShow
argument_list|()
expr_stmt|;
name|Window
operator|.
name|scrollTo
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|show
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|show
argument_list|()
expr_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
else|else
name|iHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|hide
parameter_list|()
block|{
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|onHide
argument_list|()
expr_stmt|;
name|Window
operator|.
name|scrollTo
argument_list|(
name|iLastScrollLeft
argument_list|,
name|iLastScrollTop
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|onHide
parameter_list|()
block|{
block|}
specifier|protected
name|void
name|onShow
parameter_list|()
block|{
block|}
specifier|protected
name|void
name|edit
parameter_list|()
block|{
block|}
specifier|protected
name|RoomDetailInterface
name|getNext
parameter_list|(
name|Long
name|roomId
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|protected
name|void
name|next
parameter_list|(
name|RoomDetailInterface
name|event
parameter_list|)
block|{
block|}
specifier|protected
name|RoomDetailInterface
name|getPrevious
parameter_list|(
name|Long
name|roomId
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|protected
name|void
name|previous
parameter_list|(
name|RoomDetailInterface
name|previous
parameter_list|)
block|{
block|}
specifier|public
name|void
name|setProperties
parameter_list|(
name|RoomPropertiesInterface
name|properties
parameter_list|)
block|{
name|iProperties
operator|=
name|properties
expr_stmt|;
block|}
specifier|public
name|RoomDetailInterface
name|getRoom
parameter_list|()
block|{
return|return
name|iRoom
return|;
block|}
specifier|public
name|void
name|setRoom
parameter_list|(
name|RoomDetailInterface
name|room
parameter_list|)
block|{
name|iRoom
operator|=
name|room
expr_stmt|;
name|iForm
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
name|iHeader
operator|.
name|setHeaderTitle
argument_list|(
name|iRoom
operator|.
name|hasDisplayName
argument_list|()
condition|?
name|MESSAGES
operator|.
name|label
argument_list|(
name|room
operator|.
name|getLabel
argument_list|()
argument_list|,
name|room
operator|.
name|getDisplayName
argument_list|()
argument_list|)
else|:
name|iRoom
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"edit"
argument_list|,
name|iRoom
operator|.
name|isCanEdit
argument_list|()
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"previous"
argument_list|,
name|getPrevious
argument_list|(
name|iRoom
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"next"
argument_list|,
name|getNext
argument_list|(
name|iRoom
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addHeaderRow
argument_list|(
name|iHeader
argument_list|)
expr_stmt|;
name|boolean
name|courses
init|=
name|iProperties
operator|!=
literal|null
operator|&&
name|iProperties
operator|.
name|isCanSeeCourses
argument_list|()
decl_stmt|;
name|boolean
name|exams
init|=
name|iProperties
operator|!=
literal|null
operator|&&
name|iProperties
operator|.
name|isCanSeeExams
argument_list|()
decl_stmt|;
name|boolean
name|events
init|=
name|iProperties
operator|!=
literal|null
operator|&&
name|iProperties
operator|.
name|isCanSeeEvents
argument_list|()
decl_stmt|;
name|int
name|firstRow
init|=
name|iForm
operator|.
name|getRowCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|iMode
operator|.
name|hasSessionSelection
argument_list|()
condition|)
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propAcademicSession
argument_list|()
argument_list|,
operator|new
name|Label
argument_list|(
name|iRoom
operator|.
name|hasSessionName
argument_list|()
condition|?
name|iRoom
operator|.
name|getSessionName
argument_list|()
else|:
name|iProperties
operator|.
name|getAcademicSessionName
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propType
argument_list|()
argument_list|,
operator|new
name|Label
argument_list|(
name|iRoom
operator|.
name|getRoomType
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|iRoom
operator|.
name|hasExternalId
argument_list|()
condition|)
block|{
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propExternalId
argument_list|()
argument_list|,
operator|new
name|Label
argument_list|(
name|iRoom
operator|.
name|getExternalId
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iRoom
operator|.
name|getCapacity
argument_list|()
operator|!=
literal|null
condition|)
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propCapacity
argument_list|()
argument_list|,
operator|new
name|Label
argument_list|(
name|iRoom
operator|.
name|getCapacity
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|exams
operator|&&
operator|(
name|iRoom
operator|.
name|getExamCapacity
argument_list|()
operator|!=
literal|null
operator|||
name|iRoom
operator|.
name|hasExamTypes
argument_list|()
operator|)
condition|)
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propExamCapacity
argument_list|()
argument_list|,
operator|new
name|ExamSeatingCapacityLabel
argument_list|(
name|iRoom
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|courses
operator|&&
name|iRoom
operator|.
name|getControlDepartment
argument_list|()
operator|!=
literal|null
condition|)
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propControllingDepartment
argument_list|()
argument_list|,
operator|new
name|Label
argument_list|(
name|RoomDetail
operator|.
name|toString
argument_list|(
name|iRoom
operator|.
name|getControlDepartment
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|iRoom
operator|.
name|hasCoordinates
argument_list|()
condition|)
if|if
condition|(
name|iProperties
operator|!=
literal|null
operator|&&
name|iProperties
operator|.
name|hasEllipsoid
argument_list|()
condition|)
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propCoordinates
argument_list|()
argument_list|,
operator|new
name|HTML
argument_list|(
name|MESSAGES
operator|.
name|coordinatesWithEllipsoid
argument_list|(
name|iRoom
operator|.
name|getX
argument_list|()
argument_list|,
name|iRoom
operator|.
name|getY
argument_list|()
argument_list|,
name|iProperties
operator|.
name|getEllipsoid
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
else|else
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propCoordinates
argument_list|()
argument_list|,
operator|new
name|HTML
argument_list|(
name|MESSAGES
operator|.
name|coordinates
argument_list|(
name|iRoom
operator|.
name|getX
argument_list|()
argument_list|,
name|iRoom
operator|.
name|getY
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|iRoom
operator|.
name|getArea
argument_list|()
operator|!=
literal|null
condition|)
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propRoomArea
argument_list|()
argument_list|,
operator|new
name|HTML
argument_list|(
name|MESSAGES
operator|.
name|roomArea
argument_list|(
name|iRoom
operator|.
name|getArea
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|iProperties
operator|!=
literal|null
operator|&&
name|iProperties
operator|.
name|isRoomAreaInMetricUnits
argument_list|()
condition|?
name|CONSTANTS
operator|.
name|roomAreaMetricUnitsShort
argument_list|()
else|:
name|CONSTANTS
operator|.
name|roomAreaUnitsShort
argument_list|()
operator|)
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|courses
condition|)
block|{
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propDistanceCheck
argument_list|()
argument_list|,
operator|new
name|Check
argument_list|(
operator|!
name|room
operator|.
name|isIgnoreTooFar
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|infoDistanceCheckOn
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|infoDistanceCheckOff
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propRoomCheck
argument_list|()
argument_list|,
operator|new
name|Check
argument_list|(
operator|!
name|room
operator|.
name|isIgnoreRoomCheck
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|infoRoomCheckOn
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|infoRoomCheckOff
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|events
condition|)
block|{
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propRoomCheck
argument_list|()
argument_list|,
operator|new
name|Check
argument_list|(
operator|!
name|room
operator|.
name|isIgnoreRoomCheck
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|infoRoomCheckOn
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|infoRoomCheckOff
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|events
operator|&&
name|iRoom
operator|.
name|getEventDepartment
argument_list|()
operator|!=
literal|null
condition|)
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propEventDepartment
argument_list|()
argument_list|,
operator|new
name|Label
argument_list|(
name|RoomDetail
operator|.
name|toString
argument_list|(
name|iRoom
operator|.
name|getEventDepartment
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|events
operator|&&
operator|(
name|iRoom
operator|.
name|getEventStatus
argument_list|()
operator|!=
literal|null
operator|||
name|iRoom
operator|.
name|getDefaultEventStatus
argument_list|()
operator|!=
literal|null
operator|)
condition|)
block|{
name|Label
name|status
init|=
operator|new
name|Label
argument_list|(
name|CONSTANTS
operator|.
name|eventStatusName
argument_list|()
index|[
name|iRoom
operator|.
name|getEventStatus
argument_list|()
operator|==
literal|null
condition|?
name|iRoom
operator|.
name|getDefaultEventStatus
argument_list|()
else|:
name|iRoom
operator|.
name|getEventStatus
argument_list|()
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|iRoom
operator|.
name|getEventStatus
argument_list|()
operator|==
literal|null
condition|)
name|status
operator|.
name|addStyleName
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propEventStatus
argument_list|()
argument_list|,
name|status
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|events
operator|&&
operator|(
name|iRoom
operator|.
name|hasEventNote
argument_list|()
operator|||
name|iRoom
operator|.
name|hasDefaultEventNote
argument_list|()
operator|)
condition|)
block|{
name|HTML
name|note
init|=
operator|new
name|HTML
argument_list|(
name|iRoom
operator|.
name|hasEventNote
argument_list|()
condition|?
name|iRoom
operator|.
name|getEventNote
argument_list|()
else|:
name|iRoom
operator|.
name|getDefaultEventNote
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|iRoom
operator|.
name|hasEventNote
argument_list|()
condition|)
name|note
operator|.
name|addStyleName
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propEventNote
argument_list|()
argument_list|,
name|note
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|events
operator|&&
operator|(
name|iRoom
operator|.
name|getBreakTime
argument_list|()
operator|!=
literal|null
operator|||
name|iRoom
operator|.
name|getDefaultBreakTime
argument_list|()
operator|!=
literal|null
operator|)
condition|)
block|{
name|Label
name|bt
init|=
operator|new
name|Label
argument_list|(
operator|(
name|iRoom
operator|.
name|getBreakTime
argument_list|()
operator|==
literal|null
condition|?
name|iRoom
operator|.
name|getDefaultBreakTime
argument_list|()
else|:
name|iRoom
operator|.
name|getBreakTime
argument_list|()
operator|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|iRoom
operator|.
name|getBreakTime
argument_list|()
operator|==
literal|null
condition|)
name|bt
operator|.
name|addStyleName
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propBreakTime
argument_list|()
argument_list|,
name|bt
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|courses
operator|&&
name|iRoom
operator|.
name|hasPreference
argument_list|()
condition|)
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propPreference
argument_list|()
argument_list|,
operator|new
name|PreferenceCell
argument_list|(
name|iRoom
operator|.
name|getDepartments
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|GroupInterface
argument_list|>
name|globalGroups
init|=
name|iRoom
operator|.
name|getGlobalGroups
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|globalGroups
operator|.
name|isEmpty
argument_list|()
condition|)
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propGlobalGroups
argument_list|()
argument_list|,
operator|new
name|GroupsCell
argument_list|(
name|globalGroups
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|GroupInterface
argument_list|>
name|departmentalGroups
init|=
name|iRoom
operator|.
name|getDepartmentalGroups
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|departmentalGroups
operator|.
name|isEmpty
argument_list|()
condition|)
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propDepartmenalGroups
argument_list|()
argument_list|,
operator|new
name|GroupsCell
argument_list|(
name|departmentalGroups
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FeatureInterface
argument_list|>
name|features
init|=
name|iRoom
operator|.
name|getFeatures
argument_list|(
operator|(
name|Long
operator|)
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|features
operator|.
name|isEmpty
argument_list|()
condition|)
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propFeatures
argument_list|()
argument_list|,
operator|new
name|FeaturesCell
argument_list|(
name|features
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|iProperties
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|FeatureTypeInterface
name|type
range|:
name|iProperties
operator|.
name|getFeatureTypes
argument_list|()
control|)
block|{
name|List
argument_list|<
name|FeatureInterface
argument_list|>
name|featuresOfType
init|=
name|iRoom
operator|.
name|getFeatures
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|featuresOfType
operator|.
name|isEmpty
argument_list|()
condition|)
name|iForm
operator|.
name|addRow
argument_list|(
name|type
operator|.
name|getLabel
argument_list|()
operator|+
literal|":"
argument_list|,
operator|new
name|FeaturesCell
argument_list|(
name|featuresOfType
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iRoom
operator|.
name|hasLastChange
argument_list|()
condition|)
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propLastChange
argument_list|()
argument_list|,
operator|new
name|Label
argument_list|(
name|iRoom
operator|.
name|getLastChange
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|iRoom
operator|.
name|hasMapUrl
argument_list|()
condition|)
block|{
name|Image
name|image
init|=
operator|new
name|Image
argument_list|(
name|iRoom
operator|.
name|getMapUrl
argument_list|()
argument_list|)
decl_stmt|;
name|image
operator|.
name|setStyleName
argument_list|(
literal|"map"
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|setWidget
argument_list|(
name|firstRow
argument_list|,
literal|2
argument_list|,
name|image
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setRowSpan
argument_list|(
name|firstRow
argument_list|,
literal|2
argument_list|,
name|iForm
operator|.
name|getRowCount
argument_list|()
operator|-
name|firstRow
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|courses
operator|&&
name|iRoom
operator|.
name|isCanSeeAvailability
argument_list|()
condition|)
block|{
specifier|final
name|UniTimeHeaderPanel
name|header
init|=
operator|new
name|UniTimeHeaderPanel
argument_list|(
name|MESSAGES
operator|.
name|headerRoomSharing
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|showLoading
argument_list|()
expr_stmt|;
name|iForm
operator|.
name|addHeaderRow
argument_list|(
name|header
argument_list|)
expr_stmt|;
specifier|final
name|RoomSharingWidget
name|sharing
init|=
operator|new
name|RoomSharingWidget
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|sharing
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|sharing
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
name|RoomInterface
operator|.
name|RoomSharingRequest
operator|.
name|load
argument_list|(
name|iRoom
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|iRoom
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|RoomSharingModel
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|header
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedToLoadRoomAvailability
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|RoomSharingModel
name|result
parameter_list|)
block|{
name|header
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
name|sharing
operator|.
name|setModel
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|sharing
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|exams
operator|&&
name|iRoom
operator|.
name|isCanSeePeriodPreferences
argument_list|()
operator|&&
name|iRoom
operator|.
name|hasExamTypes
argument_list|()
condition|)
block|{
specifier|final
name|UniTimeHeaderPanel
name|header
init|=
operator|new
name|UniTimeHeaderPanel
argument_list|(
name|MESSAGES
operator|.
name|headerExaminationPeriodPreferences
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|showLoading
argument_list|()
expr_stmt|;
name|iForm
operator|.
name|addHeaderRow
argument_list|(
name|header
argument_list|)
expr_stmt|;
for|for
control|(
name|ExamTypeInterface
name|type
range|:
name|iRoom
operator|.
name|getExamTypes
argument_list|()
control|)
block|{
specifier|final
name|PeriodPreferencesWidget
name|pref
init|=
operator|new
name|PeriodPreferencesWidget
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|int
name|row
init|=
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propExaminationPreferences
argument_list|(
name|type
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|,
name|pref
argument_list|)
decl_stmt|;
name|iForm
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|row
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
name|RoomInterface
operator|.
name|PeriodPreferenceRequest
operator|.
name|load
argument_list|(
name|iRoom
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|iRoom
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|type
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|PeriodPreferenceModel
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|header
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedToLoadPeriodPreferences
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|PeriodPreferenceModel
name|result
parameter_list|)
block|{
name|header
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
name|pref
operator|.
name|setModel
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|row
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|events
operator|&&
name|iRoom
operator|.
name|isCanSeeEventAvailability
argument_list|()
condition|)
block|{
specifier|final
name|UniTimeHeaderPanel
name|header
init|=
operator|new
name|UniTimeHeaderPanel
argument_list|(
name|MESSAGES
operator|.
name|headerEventAvailability
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|showLoading
argument_list|()
expr_stmt|;
name|iForm
operator|.
name|addHeaderRow
argument_list|(
name|header
argument_list|)
expr_stmt|;
specifier|final
name|RoomSharingWidget
name|sharing
init|=
operator|new
name|RoomSharingWidget
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|sharing
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|sharing
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
name|RoomInterface
operator|.
name|RoomSharingRequest
operator|.
name|load
argument_list|(
name|iRoom
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|iRoom
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|RoomSharingModel
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|header
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedToLoadRoomAvailability
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|RoomSharingModel
name|result
parameter_list|)
block|{
name|header
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
name|sharing
operator|.
name|setModel
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|sharing
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iRoom
operator|.
name|hasPictures
argument_list|()
condition|)
block|{
name|UniTimeHeaderPanel
name|header
init|=
operator|new
name|UniTimeHeaderPanel
argument_list|(
name|MESSAGES
operator|.
name|headerRoomPictures
argument_list|()
argument_list|)
decl_stmt|;
name|iForm
operator|.
name|addHeaderRow
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
operator|new
name|PicturesCell
argument_list|(
name|iRoom
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iRoom
operator|.
name|isCanShowDetail
argument_list|()
condition|)
block|{
name|RoomNoteChanges
name|noteChanges
init|=
operator|new
name|RoomNoteChanges
argument_list|()
decl_stmt|;
name|noteChanges
operator|.
name|load
argument_list|(
name|iRoom
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|noteChanges
argument_list|)
expr_stmt|;
block|}
name|iForm
operator|.
name|addNotPrintableBottomRow
argument_list|(
name|iFooter
argument_list|)
expr_stmt|;
block|}
specifier|static
class|class
name|ExamSeatingCapacityLabel
extends|extends
name|Label
block|{
name|ExamSeatingCapacityLabel
parameter_list|(
name|RoomDetailInterface
name|room
parameter_list|)
block|{
if|if
condition|(
name|room
operator|.
name|hasExamTypes
argument_list|()
condition|)
block|{
name|String
name|types
init|=
literal|""
decl_stmt|;
for|for
control|(
name|ExamTypeInterface
name|type
range|:
name|room
operator|.
name|getExamTypes
argument_list|()
control|)
name|types
operator|+=
operator|(
name|types
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|", "
operator|)
operator|+
name|type
operator|.
name|getLabel
argument_list|()
expr_stmt|;
if|if
condition|(
name|room
operator|.
name|getExamCapacity
argument_list|()
operator|!=
literal|null
condition|)
name|setText
argument_list|(
name|room
operator|.
name|getExamCapacity
argument_list|()
operator|+
literal|" ("
operator|+
name|types
operator|+
literal|")"
argument_list|)
expr_stmt|;
else|else
name|setText
argument_list|(
literal|"("
operator|+
name|types
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|room
operator|.
name|getExamCapacity
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|setText
argument_list|(
name|room
operator|.
name|getExamCapacity
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|static
class|class
name|GroupsCell
extends|extends
name|P
block|{
name|GroupsCell
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|GroupInterface
argument_list|>
name|groups
parameter_list|)
block|{
name|this
argument_list|(
name|groups
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|GroupsCell
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|GroupInterface
argument_list|>
name|groups
parameter_list|,
name|boolean
name|department
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|setStyleName
argument_list|(
literal|"groups"
argument_list|)
expr_stmt|;
for|for
control|(
name|GroupInterface
name|group
range|:
name|groups
control|)
block|{
name|P
name|p
init|=
operator|new
name|P
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
name|p
operator|.
name|setText
argument_list|(
name|group
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|group
operator|.
name|getTitle
argument_list|()
operator|!=
literal|null
condition|)
name|p
operator|.
name|setTitle
argument_list|(
name|group
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|group
operator|.
name|getDepartment
argument_list|()
operator|!=
literal|null
operator|&&
name|department
condition|)
name|p
operator|.
name|setText
argument_list|(
name|group
operator|.
name|getLabel
argument_list|()
operator|+
literal|" ("
operator|+
name|RoomDetail
operator|.
name|toString
argument_list|(
name|group
operator|.
name|getDepartment
argument_list|()
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|static
class|class
name|FeaturesCell
extends|extends
name|P
block|{
name|FeaturesCell
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|FeatureInterface
argument_list|>
name|features
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|setStyleName
argument_list|(
literal|"features"
argument_list|)
expr_stmt|;
for|for
control|(
name|FeatureInterface
name|feature
range|:
name|features
control|)
block|{
name|P
name|p
init|=
operator|new
name|P
argument_list|(
literal|"feature"
argument_list|)
decl_stmt|;
name|p
operator|.
name|setText
argument_list|(
name|feature
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|feature
operator|.
name|getTitle
argument_list|()
operator|!=
literal|null
condition|)
name|p
operator|.
name|setTitle
argument_list|(
name|feature
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|feature
operator|.
name|getDepartment
argument_list|()
operator|!=
literal|null
condition|)
name|p
operator|.
name|setText
argument_list|(
name|feature
operator|.
name|getLabel
argument_list|()
operator|+
literal|" ("
operator|+
name|RoomDetail
operator|.
name|toString
argument_list|(
name|feature
operator|.
name|getDepartment
argument_list|()
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|static
class|class
name|PreferenceCell
extends|extends
name|DepartmentCell
block|{
name|PreferenceCell
parameter_list|(
name|List
argument_list|<
name|DepartmentInterface
argument_list|>
name|departments
parameter_list|)
block|{
name|super
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|DepartmentInterface
name|department
range|:
name|departments
control|)
block|{
if|if
condition|(
name|department
operator|.
name|getPreference
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|P
name|p
init|=
operator|new
name|P
argument_list|(
literal|"department"
argument_list|)
decl_stmt|;
name|p
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|roomPreference
argument_list|(
name|RoomDetail
operator|.
name|toString
argument_list|(
name|department
argument_list|)
argument_list|,
name|department
operator|.
name|getPreference
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setTitle
argument_list|(
name|department
operator|.
name|getPreference
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|department
operator|.
name|getExtLabelWhenExist
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|department
operator|.
name|getPreference
argument_list|()
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
name|iP
operator|.
name|put
argument_list|(
name|department
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|static
class|class
name|PicturesCell
extends|extends
name|P
block|{
name|PicturesCell
parameter_list|(
name|RoomDetailInterface
name|room
parameter_list|)
block|{
name|super
argument_list|(
literal|"pictures"
argument_list|)
expr_stmt|;
if|if
condition|(
name|room
operator|.
name|hasPictures
argument_list|()
condition|)
block|{
for|for
control|(
name|RoomPictureInterface
name|picture
range|:
name|room
operator|.
name|getPictures
argument_list|()
control|)
block|{
name|add
argument_list|(
name|picture
operator|.
name|getPictureType
argument_list|()
operator|==
literal|null
operator|||
name|picture
operator|.
name|getPictureType
argument_list|()
operator|.
name|isImage
argument_list|()
condition|?
operator|new
name|PictureCell
argument_list|(
name|picture
argument_list|)
else|:
operator|new
name|LinkCell
argument_list|(
name|picture
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|static
class|class
name|PictureCell
extends|extends
name|Image
block|{
name|PictureCell
parameter_list|(
name|RoomPictureInterface
name|picture
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|setStyleName
argument_list|(
literal|"picture"
argument_list|)
expr_stmt|;
name|setUrl
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"picture?id="
operator|+
name|picture
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|setTitle
argument_list|(
name|picture
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|picture
operator|.
name|getPictureType
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" ("
operator|+
name|picture
operator|.
name|getPictureType
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|")"
operator|)
argument_list|)
expr_stmt|;
name|setAltText
argument_list|(
name|picture
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|picture
operator|.
name|getPictureType
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" ("
operator|+
name|picture
operator|.
name|getPictureType
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
operator|+
literal|")"
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|LinkCell
extends|extends
name|ImageLink
block|{
name|LinkCell
parameter_list|(
name|RoomPictureInterface
name|picture
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|download
argument_list|()
argument_list|)
argument_list|,
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"picture?id="
operator|+
name|picture
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|setStyleName
argument_list|(
literal|"link"
argument_list|)
expr_stmt|;
name|setTitle
argument_list|(
name|picture
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|picture
operator|.
name|getPictureType
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" ("
operator|+
name|picture
operator|.
name|getPictureType
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|")"
operator|)
argument_list|)
expr_stmt|;
name|setText
argument_list|(
name|picture
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|picture
operator|.
name|getPictureType
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" ("
operator|+
name|picture
operator|.
name|getPictureType
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
operator|+
literal|")"
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
name|String
name|toString
parameter_list|(
name|DepartmentInterface
name|department
parameter_list|,
name|boolean
name|events
parameter_list|)
block|{
if|if
condition|(
name|events
condition|)
return|return
name|department
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|" - "
operator|+
name|department
operator|.
name|getLabel
argument_list|()
return|;
else|else
return|return
name|department
operator|.
name|getExtAbbreviationOrCode
argument_list|()
operator|+
literal|" - "
operator|+
name|department
operator|.
name|getExtLabelWhenExist
argument_list|()
return|;
block|}
specifier|static
name|String
name|toString
parameter_list|(
name|DepartmentInterface
name|department
parameter_list|)
block|{
return|return
name|toString
argument_list|(
name|department
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|static
class|class
name|Check
extends|extends
name|P
block|{
name|Check
parameter_list|(
name|boolean
name|value
parameter_list|,
name|String
name|onMessage
parameter_list|,
name|String
name|offMessage
parameter_list|)
block|{
name|Image
name|image
init|=
operator|new
name|Image
argument_list|(
name|value
condition|?
name|RESOURCES
operator|.
name|on
argument_list|()
else|:
name|RESOURCES
operator|.
name|off
argument_list|()
argument_list|)
decl_stmt|;
name|image
operator|.
name|addStyleName
argument_list|(
literal|"image"
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|image
argument_list|)
expr_stmt|;
name|InlineHTML
name|text
init|=
operator|new
name|InlineHTML
argument_list|(
name|value
condition|?
name|onMessage
else|:
name|offMessage
argument_list|)
decl_stmt|;
name|text
operator|.
name|addStyleName
argument_list|(
literal|"message"
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|text
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
condition|)
name|addStyleName
argument_list|(
literal|"check-enabled"
argument_list|)
expr_stmt|;
else|else
name|addStyleName
argument_list|(
literal|"check-disabled"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

