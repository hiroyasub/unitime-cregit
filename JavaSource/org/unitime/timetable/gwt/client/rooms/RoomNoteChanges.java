begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.4 (University Timetabling Application)  * Copyright (C) 2012, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|rooms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|SimpleForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeHeaderPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcResponseList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|LastChangesInterface
operator|.
name|ChangeLogInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|LastChangesInterface
operator|.
name|LastChangesRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Float
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Unit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|DateTimeFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Cookies
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|CheckBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasVerticalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|RootPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_class
specifier|public
class|class
name|RoomNoteChanges
extends|extends
name|Composite
block|{
specifier|private
specifier|static
specifier|final
name|GwtRpcServiceAsync
name|RPC
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtRpcService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|GwtConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|DateTimeFormat
name|sDateFormat
init|=
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|timeStampFormat
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|Long
name|iLocationId
init|=
literal|null
decl_stmt|;
specifier|private
name|SimpleForm
name|iChangesPanel
decl_stmt|;
specifier|private
name|UniTimeTable
argument_list|<
name|ChangeLogInterface
argument_list|>
name|iChanges
decl_stmt|;
specifier|private
name|UniTimeHeaderPanel
name|iHeader
decl_stmt|;
specifier|private
name|CheckBox
name|iMultiSessionToggle
decl_stmt|;
specifier|public
name|RoomNoteChanges
parameter_list|()
block|{
name|iChangesPanel
operator|=
operator|new
name|SimpleForm
argument_list|()
expr_stmt|;
name|iChangesPanel
operator|.
name|removeStyleName
argument_list|(
literal|"unitime-NotPrintableBottomLine"
argument_list|)
expr_stmt|;
name|iHeader
operator|=
operator|new
name|UniTimeHeaderPanel
argument_list|(
name|MESSAGES
operator|.
name|sectRoomNoteHistory
argument_list|()
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setCollapsible
argument_list|(
name|LastChangesCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getShowLastChanges
argument_list|()
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setTitleStyleName
argument_list|(
literal|"unitime3-HeaderTitle"
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|addCollapsibleHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|event
parameter_list|)
block|{
name|LastChangesCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setShowLastChanges
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iChanges
operator|.
name|getRowCount
argument_list|()
operator|==
literal|0
condition|)
name|refresh
argument_list|()
expr_stmt|;
if|else if
condition|(
name|iChanges
operator|.
name|getRowCount
argument_list|()
operator|>
literal|1
condition|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iChanges
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|iChanges
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|row
argument_list|,
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|iMultiSessionToggle
operator|.
name|setVisible
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iChangesPanel
operator|.
name|addHeaderRow
argument_list|(
name|iHeader
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setMarginTop
argument_list|(
literal|10
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|iChanges
operator|=
operator|new
name|UniTimeTable
argument_list|<
name|ChangeLogInterface
argument_list|>
argument_list|()
expr_stmt|;
name|iChanges
operator|.
name|setWidth
argument_list|(
literal|"100%"
argument_list|)
expr_stmt|;
name|iChangesPanel
operator|.
name|addRow
argument_list|(
name|iChanges
argument_list|)
expr_stmt|;
name|iMultiSessionToggle
operator|=
operator|new
name|CheckBox
argument_list|(
name|MESSAGES
operator|.
name|checkAllSessions
argument_list|()
argument_list|)
expr_stmt|;
name|iMultiSessionToggle
operator|.
name|setValue
argument_list|(
name|LastChangesCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|isMultiSession
argument_list|()
argument_list|)
expr_stmt|;
name|iMultiSessionToggle
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setFloat
argument_list|(
name|Float
operator|.
name|RIGHT
argument_list|)
expr_stmt|;
name|iChangesPanel
operator|.
name|addRow
argument_list|(
name|iMultiSessionToggle
argument_list|)
expr_stmt|;
name|iMultiSessionToggle
operator|.
name|setVisible
argument_list|(
name|iHeader
operator|.
name|isCollapsible
argument_list|()
argument_list|)
expr_stmt|;
name|iMultiSessionToggle
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|event
parameter_list|)
block|{
name|LastChangesCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setMultiSession
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|iChangesPanel
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|refresh
parameter_list|()
block|{
name|clear
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|iLocationId
operator|!=
literal|null
condition|)
block|{
name|RPC
operator|.
name|execute
argument_list|(
name|LastChangesRequest
operator|.
name|createRequest
argument_list|(
literal|"org.unitime.timetable.model.Location"
argument_list|,
name|iLocationId
argument_list|,
literal|"multi-session"
argument_list|,
operator|(
name|iMultiSessionToggle
operator|.
name|getValue
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
operator|)
argument_list|,
literal|"page"
argument_list|,
literal|"ROOM_EDIT"
argument_list|,
literal|"operation"
argument_list|,
literal|"NOTE"
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|GwtRpcResponseList
argument_list|<
name|ChangeLogInterface
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedLoadRoomNoteChanges
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setCollapsible
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|LastChangesCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setShowLastChanges
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|GwtRpcResponseList
argument_list|<
name|ChangeLogInterface
argument_list|>
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iHeader
operator|.
name|setMessage
argument_list|(
name|MESSAGES
operator|.
name|noRoomNoteChanges
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|populate
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|iChanges
operator|.
name|getRowCount
argument_list|()
operator|>
literal|1
condition|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iChanges
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|iChanges
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|row
argument_list|,
name|LastChangesCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getShowLastChanges
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|iHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|clear
parameter_list|(
name|boolean
name|loading
parameter_list|)
block|{
for|for
control|(
name|int
name|row
init|=
name|iChanges
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
init|;
name|row
operator|>=
literal|0
condition|;
name|row
operator|--
control|)
block|{
name|iChanges
operator|.
name|removeRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
name|iChanges
operator|.
name|clear
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|loading
condition|)
name|iHeader
operator|.
name|showLoading
argument_list|()
expr_stmt|;
else|else
name|iHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Comparator
argument_list|<
name|ChangeLogInterface
argument_list|>
name|comparator
parameter_list|(
name|int
name|column
parameter_list|,
specifier|final
name|boolean
name|order
parameter_list|)
block|{
switch|switch
condition|(
name|column
condition|)
block|{
case|case
literal|0
case|:
return|return
operator|new
name|Comparator
argument_list|<
name|ChangeLogInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ChangeLogInterface
name|c1
parameter_list|,
name|ChangeLogInterface
name|c2
parameter_list|)
block|{
return|return
operator|(
name|order
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
operator|*
name|c1
operator|.
name|getDate
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getDate
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
case|case
literal|1
case|:
return|return
operator|new
name|Comparator
argument_list|<
name|ChangeLogInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ChangeLogInterface
name|c1
parameter_list|,
name|ChangeLogInterface
name|c2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|c1
operator|.
name|getSessionDate
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getSessionDate
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
operator|(
name|order
condition|?
operator|-
name|cmp
else|:
name|cmp
operator|)
return|;
name|cmp
operator|=
name|c1
operator|.
name|getSessionInitiative
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getSessionInitiative
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
operator|(
name|order
condition|?
name|cmp
else|:
operator|-
name|cmp
operator|)
return|;
name|cmp
operator|=
name|c1
operator|.
name|getSession
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
operator|(
name|order
condition|?
name|cmp
else|:
operator|-
name|cmp
operator|)
return|;
return|return
operator|(
name|order
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
operator|*
name|c1
operator|.
name|getDate
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getDate
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
case|case
literal|2
case|:
return|return
operator|new
name|Comparator
argument_list|<
name|ChangeLogInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ChangeLogInterface
name|c1
parameter_list|,
name|ChangeLogInterface
name|c2
parameter_list|)
block|{
name|int
name|cmp
init|=
operator|(
name|c1
operator|.
name|getManager
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|c1
operator|.
name|getManager
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getManager
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|c2
operator|.
name|getManager
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
operator|(
name|order
condition|?
name|cmp
else|:
operator|-
name|cmp
operator|)
return|;
name|cmp
operator|=
name|c1
operator|.
name|getSessionDate
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getSessionDate
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
operator|(
name|order
condition|?
operator|-
name|cmp
else|:
name|cmp
operator|)
return|;
name|cmp
operator|=
name|c1
operator|.
name|getSessionInitiative
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getSessionInitiative
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
operator|(
name|order
condition|?
name|cmp
else|:
operator|-
name|cmp
operator|)
return|;
name|cmp
operator|=
name|c1
operator|.
name|getSession
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
operator|(
name|order
condition|?
name|cmp
else|:
operator|-
name|cmp
operator|)
return|;
return|return
operator|(
name|order
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
operator|*
name|c1
operator|.
name|getDate
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getDate
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
case|case
literal|3
case|:
return|return
operator|new
name|Comparator
argument_list|<
name|ChangeLogInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ChangeLogInterface
name|c1
parameter_list|,
name|ChangeLogInterface
name|c2
parameter_list|)
block|{
name|int
name|cmp
init|=
operator|new
name|HTML
argument_list|(
name|c1
operator|.
name|getObject
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|c1
operator|.
name|getObject
argument_list|()
argument_list|)
operator|.
name|getText
argument_list|()
operator|.
name|compareTo
argument_list|(
operator|new
name|HTML
argument_list|(
name|c2
operator|.
name|getObject
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|c2
operator|.
name|getObject
argument_list|()
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
operator|(
name|order
condition|?
name|cmp
else|:
operator|-
name|cmp
operator|)
return|;
name|cmp
operator|=
name|c1
operator|.
name|getSessionDate
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getSessionDate
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
operator|(
name|order
condition|?
operator|-
name|cmp
else|:
name|cmp
operator|)
return|;
name|cmp
operator|=
name|c1
operator|.
name|getSessionInitiative
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getSessionInitiative
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
operator|(
name|order
condition|?
name|cmp
else|:
operator|-
name|cmp
operator|)
return|;
name|cmp
operator|=
name|c1
operator|.
name|getSession
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
operator|(
name|order
condition|?
name|cmp
else|:
operator|-
name|cmp
operator|)
return|;
return|return
operator|(
name|order
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
operator|*
name|c1
operator|.
name|getDate
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getDate
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
default|default:
return|return
operator|new
name|Comparator
argument_list|<
name|ChangeLogInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ChangeLogInterface
name|c1
parameter_list|,
name|ChangeLogInterface
name|c2
parameter_list|)
block|{
return|return
operator|(
name|order
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
operator|*
name|c1
operator|.
name|getDate
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getDate
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
specifier|private
name|ClickHandler
name|clickHandler
parameter_list|(
specifier|final
name|int
name|column
parameter_list|)
block|{
return|return
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|UniTimeTableHeader
name|header
init|=
operator|(
name|UniTimeTableHeader
operator|)
name|event
operator|.
name|getSource
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|order
init|=
operator|(
name|header
operator|.
name|getOrder
argument_list|()
operator|==
literal|null
condition|?
literal|true
else|:
operator|!
name|header
operator|.
name|getOrder
argument_list|()
operator|)
decl_stmt|;
name|iChanges
operator|.
name|sort
argument_list|(
name|header
argument_list|,
name|comparator
argument_list|(
name|column
argument_list|,
name|order
argument_list|)
argument_list|)
expr_stmt|;
name|LastChangesCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setSort
argument_list|(
name|column
argument_list|,
name|order
argument_list|)
expr_stmt|;
name|header
operator|.
name|setOrder
argument_list|(
name|order
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
specifier|private
name|void
name|populate
parameter_list|(
name|GwtRpcResponseList
argument_list|<
name|ChangeLogInterface
argument_list|>
name|logs
parameter_list|)
block|{
name|List
argument_list|<
name|UniTimeTableHeader
argument_list|>
name|header
init|=
operator|new
name|ArrayList
argument_list|<
name|UniTimeTableHeader
argument_list|>
argument_list|()
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colDate
argument_list|()
argument_list|,
name|clickHandler
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colAcademicSession
argument_list|()
argument_list|,
name|clickHandler
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colManager
argument_list|()
argument_list|,
name|clickHandler
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colNote
argument_list|()
argument_list|,
name|clickHandler
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|iChanges
operator|.
name|addRow
argument_list|(
literal|null
argument_list|,
name|header
argument_list|)
expr_stmt|;
for|for
control|(
name|ChangeLogInterface
name|log
range|:
name|logs
control|)
block|{
name|List
argument_list|<
name|Widget
argument_list|>
name|line
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|sDateFormat
operator|.
name|format
argument_list|(
name|log
operator|.
name|getDate
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|log
operator|.
name|getSession
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|log
operator|.
name|getManager
argument_list|()
operator|==
literal|null
condition|?
literal|"<i>"
operator|+
name|MESSAGES
operator|.
name|notApplicable
argument_list|()
operator|+
literal|"</i>"
else|:
name|log
operator|.
name|getManager
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|log
operator|.
name|getObject
argument_list|()
operator|==
literal|null
operator|||
name|log
operator|.
name|getObject
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
literal|"-"
operator|.
name|equals
argument_list|(
name|log
operator|.
name|getObject
argument_list|()
argument_list|)
condition|?
literal|"<i>"
operator|+
name|MESSAGES
operator|.
name|emptyNote
argument_list|()
operator|+
literal|"</i>"
else|:
name|log
operator|.
name|getObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iChanges
operator|.
name|addRow
argument_list|(
name|log
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|iChanges
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVerticalAlign
argument_list|(
name|iChanges
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
argument_list|,
name|HasVerticalAlignment
operator|.
name|ALIGN_TOP
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LastChangesCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getSortColumn
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|iChanges
operator|.
name|sort
argument_list|(
operator|(
name|UniTimeTableHeader
operator|)
literal|null
argument_list|,
name|comparator
argument_list|(
name|LastChangesCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getSortColumn
argument_list|()
argument_list|,
name|LastChangesCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getSortOrder
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|get
argument_list|(
name|LastChangesCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getSortColumn
argument_list|()
argument_list|)
operator|.
name|setOrder
argument_list|(
name|LastChangesCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getSortOrder
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iChanges
operator|.
name|setColumnVisible
argument_list|(
literal|1
argument_list|,
name|iMultiSessionToggle
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|insert
parameter_list|(
specifier|final
name|RootPanel
name|panel
parameter_list|)
block|{
name|iLocationId
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|panel
operator|.
name|getElement
argument_list|()
operator|.
name|getInnerText
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LastChangesCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getShowLastChanges
argument_list|()
condition|)
block|{
name|refresh
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|clear
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
name|iHeader
operator|.
name|setCollapsible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|panel
operator|.
name|getElement
argument_list|()
operator|.
name|setInnerText
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|panel
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|LastChangesCookie
block|{
specifier|private
name|boolean
name|iShowDetails
init|=
literal|false
decl_stmt|;
specifier|private
name|int
name|iSortColumn
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|boolean
name|iSortOrder
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|iMultiSession
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
name|LastChangesCookie
name|sInstance
init|=
literal|null
decl_stmt|;
specifier|private
name|LastChangesCookie
parameter_list|()
block|{
try|try
block|{
name|String
name|cookie
init|=
name|Cookies
operator|.
name|getCookie
argument_list|(
literal|"UniTime:LastChanges"
argument_list|)
decl_stmt|;
if|if
condition|(
name|cookie
operator|!=
literal|null
operator|&&
name|cookie
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
index|[]
name|values
init|=
name|cookie
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|iShowDetails
operator|=
literal|"T"
operator|.
name|equals
argument_list|(
name|values
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|iSortColumn
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|values
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|iSortOrder
operator|=
literal|"T"
operator|.
name|equals
argument_list|(
name|values
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|iMultiSession
operator|=
literal|"T"
operator|.
name|equals
argument_list|(
name|values
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
specifier|private
name|void
name|save
parameter_list|()
block|{
name|String
name|cookie
init|=
operator|(
name|iShowDetails
condition|?
literal|"T"
else|:
literal|"F"
operator|)
operator|+
literal|":"
operator|+
name|iSortColumn
operator|+
literal|":"
operator|+
operator|(
name|iSortOrder
condition|?
literal|"T"
else|:
literal|"F"
operator|)
operator|+
literal|":"
operator|+
operator|(
name|iMultiSession
condition|?
literal|"T"
else|:
literal|"F"
operator|)
decl_stmt|;
name|Cookies
operator|.
name|setCookie
argument_list|(
literal|"UniTime:LastChanges"
argument_list|,
name|cookie
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|LastChangesCookie
name|getInstance
parameter_list|()
block|{
if|if
condition|(
name|sInstance
operator|==
literal|null
condition|)
name|sInstance
operator|=
operator|new
name|LastChangesCookie
argument_list|()
expr_stmt|;
return|return
name|sInstance
return|;
block|}
specifier|public
name|boolean
name|getShowLastChanges
parameter_list|()
block|{
return|return
name|iShowDetails
return|;
block|}
specifier|public
name|void
name|setShowLastChanges
parameter_list|(
name|boolean
name|details
parameter_list|)
block|{
name|iShowDetails
operator|=
name|details
expr_stmt|;
name|save
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|getSortColumn
parameter_list|()
block|{
return|return
name|iSortColumn
return|;
block|}
specifier|public
name|boolean
name|getSortOrder
parameter_list|()
block|{
return|return
name|iSortOrder
return|;
block|}
specifier|public
name|void
name|setSort
parameter_list|(
name|int
name|column
parameter_list|,
name|boolean
name|order
parameter_list|)
block|{
name|iSortColumn
operator|=
name|column
expr_stmt|;
name|iSortOrder
operator|=
name|order
expr_stmt|;
name|save
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|isMultiSession
parameter_list|()
block|{
return|return
name|iMultiSession
return|;
block|}
specifier|public
name|void
name|setMultiSession
parameter_list|(
name|boolean
name|multi
parameter_list|)
block|{
name|iMultiSession
operator|=
name|multi
expr_stmt|;
name|save
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

