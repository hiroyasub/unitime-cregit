begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|rooms
package|;
end_package

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|page
operator|.
name|UniTimeNotifications
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeHeaderPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|ScriptInjector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyCodes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyPressEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyPressHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|AbsolutePanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Button
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|TextBox
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|GoogleMap
extends|extends
name|MapWidget
block|{
specifier|private
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|iApiKey
init|=
literal|null
decl_stmt|;
specifier|public
name|GoogleMap
parameter_list|(
name|TextBox
name|x
parameter_list|,
name|TextBox
name|y
parameter_list|,
name|String
name|apiKey
parameter_list|)
block|{
name|super
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|setStyleName
argument_list|(
literal|"unitime-GoogleMap"
argument_list|)
expr_stmt|;
name|iApiKey
operator|=
name|apiKey
expr_stmt|;
name|iMapControl
operator|=
operator|new
name|AbsolutePanel
argument_list|()
expr_stmt|;
name|iMapControl
operator|.
name|setStyleName
argument_list|(
literal|"control"
argument_list|)
expr_stmt|;
specifier|final
name|TextBox
name|searchBox
init|=
operator|new
name|TextBox
argument_list|()
decl_stmt|;
name|searchBox
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TextBox"
argument_list|)
expr_stmt|;
name|searchBox
operator|.
name|addStyleName
argument_list|(
literal|"searchBox"
argument_list|)
expr_stmt|;
name|searchBox
operator|.
name|getElement
argument_list|()
operator|.
name|setId
argument_list|(
literal|"mapSearchBox"
argument_list|)
expr_stmt|;
name|searchBox
operator|.
name|setTabIndex
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|iMapControl
operator|.
name|add
argument_list|(
name|searchBox
argument_list|)
expr_stmt|;
name|Button
name|button
init|=
operator|new
name|Button
argument_list|(
name|MESSAGES
operator|.
name|buttonGeocode
argument_list|()
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|geocodeAddress
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|button
operator|.
name|setTabIndex
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|searchBox
operator|.
name|addKeyPressHandler
argument_list|(
operator|new
name|KeyPressHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyPress
parameter_list|(
name|KeyPressEvent
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|event
operator|.
name|getNativeEvent
argument_list|()
operator|.
name|getKeyCode
argument_list|()
condition|)
block|{
case|case
name|KeyCodes
operator|.
name|KEY_ENTER
case|:
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
name|geocodeAddress
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|button
operator|.
name|addStyleName
argument_list|(
literal|"geocode"
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|setWhiteSpace
argument_list|(
name|button
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
argument_list|,
literal|"nowrap"
argument_list|)
expr_stmt|;
name|Character
name|accessKey
init|=
name|UniTimeHeaderPanel
operator|.
name|guessAccessKey
argument_list|(
name|MESSAGES
operator|.
name|buttonGeocode
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|accessKey
operator|!=
literal|null
condition|)
name|button
operator|.
name|setAccessKey
argument_list|(
name|accessKey
argument_list|)
expr_stmt|;
name|iMapControl
operator|.
name|add
argument_list|(
name|button
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|iMapControl
argument_list|)
expr_stmt|;
name|addGoogleMap
argument_list|(
name|getElement
argument_list|()
argument_list|,
name|iMapControl
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|native
name|void
name|addGoogleMap
parameter_list|(
name|Element
name|canvas
parameter_list|,
name|Element
name|control
parameter_list|)
comment|/*-{ 		$wnd.geoceodeMarker = function geoceodeMarker() { 			var searchBox = $doc.getElementById('mapSearchBox'); 			if (!searchBox) return; 			$wnd.geocoder.geocode({'location': $wnd.marker.getPosition()}, function(results, status) { 				if (status == $wnd.google.maps.GeocoderStatus.OK) { 					if (results[0]) { 						$wnd.marker.setTitle(results[0].formatted_address); 						searchBox.value = results[0].formatted_address; 					} else { 						$wnd.marker.setTitle(null); 						searchBox.value = ""; 					} 				} else { 					$wnd.marker.setTitle(null); 					searchBox.value = ""; 				} 			}); 		} 		$wnd.that = this 	 		$wnd.setupGoogleMap = function setupGoogleMap() { 			var latlng = new $wnd.google.maps.LatLng(50, -58); 			var myOptions = { 				zoom: 2, 				center: latlng, 				mapTypeId: $wnd.google.maps.MapTypeId.ROADMAP 			}; 	 			$wnd.geocoder = new $wnd.google.maps.Geocoder(); 			$wnd.map = new $wnd.google.maps.Map(canvas, myOptions); 			$wnd.marker = new $wnd.google.maps.Marker({ 				position: latlng, 				map: $wnd.map, 				draggable: true, 				visible: false 			}); 	 			$wnd.map.controls[$wnd.google.maps.ControlPosition.BOTTOM_LEFT].push(control);		 	 			var t = null; 		 			$wnd.google.maps.event.addListener($wnd.marker, 'position_changed', function() { 				$doc.getElementById("coordX").value = '' + $wnd.marker.getPosition().lat().toFixed(6); 				$doc.getElementById("coordY").value = '' + $wnd.marker.getPosition().lng().toFixed(6); 				if (t != null) clearTimeout(t); 				t = setTimeout($wnd.geoceodeMarker, 500); 			}); 		 			$wnd.google.maps.event.addListener($wnd.map, 'rightclick', function(event) { 				if ($wnd.marker.getDraggable()) { 					$wnd.marker.setPosition(event.latLng); 					$wnd.marker.setVisible(true); 				} 			}); 		 			$wnd.that.@org.unitime.timetable.gwt.client.rooms.GoogleMap::setMarker()(); 		}; 	}-*/
function_decl|;
annotation|@
name|Override
specifier|public
specifier|native
name|void
name|setMarker
parameter_list|()
comment|/*-{ 		try { 			var x = $doc.getElementById("coordX").value; 			var y = $doc.getElementById("coordY").value; 			if (x&& y) { 				var pos = new $wnd.google.maps.LatLng(x, y); 				$wnd.marker.setPosition(pos); 				$wnd.marker.setVisible(true); 				if ($wnd.marker.getMap().getZoom()<= 10) $wnd.marker.getMap().setZoom(16); 				$wnd.marker.getMap().panTo(pos); 			} else { 				$wnd.marker.setVisible(false); 			} 			$wnd.marker.setDraggable(this.@org.unitime.timetable.gwt.client.rooms.MapWidget::isEnabled()()); 		} catch (error) {} 	}-*/
function_decl|;
specifier|protected
specifier|native
name|void
name|geocodeAddress
parameter_list|()
comment|/*-{ 		var address = $doc.getElementById("mapSearchBox").value; 		$wnd.geocoder.geocode({ 'address': address }, function(results, status) { 			if (status == $wnd.google.	maps.GeocoderStatus.OK) { 				if (results[0]) { 					$wnd.marker.setPosition(results[0].geometry.location); 					$wnd.marker.setTitle(results[0].formatted_address); 					$wnd.marker.setVisible(true); 					if ($wnd.map.getZoom()<= 10) $wnd.map.setZoom(16); 						$wnd.map.panTo(results[0].geometry.location); 				} else { 					$wnd.marker.setVisible(false); 				} 			} else { 				$wnd.marker.setVisible(false); 			} 		}); 	}-*/
function_decl|;
annotation|@
name|Override
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|ScriptInjector
operator|.
name|fromUrl
argument_list|(
literal|"https://maps.googleapis.com/maps/api/js?"
operator|+
operator|(
name|iApiKey
operator|!=
literal|null
operator|&&
operator|!
name|iApiKey
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"key="
operator|+
name|iApiKey
operator|+
literal|"&"
else|:
literal|""
operator|)
operator|+
literal|"sensor=false&callback=setupGoogleMap"
argument_list|)
operator|.
name|setWindow
argument_list|(
name|ScriptInjector
operator|.
name|TOP_WINDOW
argument_list|)
operator|.
name|setCallback
argument_list|(
operator|new
name|Callback
argument_list|<
name|Void
argument_list|,
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Void
name|result
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iMapControl
operator|=
literal|null
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|inject
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

