begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|rooms
package|;
end_package

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|GwtHint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|JavaScriptObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|PeriodPreferencesHint
block|{
specifier|private
specifier|static
name|PeriodPreferencesWidget
name|sSharing
decl_stmt|;
specifier|private
specifier|static
name|Long
name|sLastLocationId
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|sShowHint
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
name|GwtRpcServiceAsync
name|RPC
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtRpcService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|PeriodPreferencesWidget
name|content
parameter_list|(
name|RoomInterface
operator|.
name|PeriodPreferenceModel
name|model
parameter_list|)
block|{
if|if
condition|(
name|sSharing
operator|==
literal|null
condition|)
name|sSharing
operator|=
operator|new
name|PeriodPreferencesWidget
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|sSharing
operator|.
name|setModel
argument_list|(
name|model
argument_list|)
expr_stmt|;
return|return
name|sSharing
return|;
block|}
comment|/** Never use from GWT code */
specifier|public
specifier|static
name|void
name|_showPeriodPreferencesHint
parameter_list|(
name|JavaScriptObject
name|source
parameter_list|,
name|String
name|locationId
parameter_list|,
name|String
name|examTypeId
parameter_list|)
block|{
name|showHint
argument_list|(
operator|(
name|Element
operator|)
name|source
operator|.
name|cast
argument_list|()
argument_list|,
name|toLong
argument_list|(
name|locationId
argument_list|)
argument_list|,
name|toLong
argument_list|(
name|examTypeId
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|_showExamPeriodPreferencesHint
parameter_list|(
name|JavaScriptObject
name|source
parameter_list|,
name|String
name|examId
parameter_list|,
name|String
name|periodId
parameter_list|)
block|{
name|showHintForExam
argument_list|(
operator|(
name|Element
operator|)
name|source
operator|.
name|cast
argument_list|()
argument_list|,
name|toLong
argument_list|(
name|examId
argument_list|)
argument_list|,
name|toLong
argument_list|(
name|periodId
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|showHint
parameter_list|(
specifier|final
name|Element
name|relativeObject
parameter_list|,
specifier|final
name|Long
name|locationId
parameter_list|,
specifier|final
name|Long
name|examTypeId
parameter_list|)
block|{
name|sLastLocationId
operator|=
name|locationId
expr_stmt|;
name|sShowHint
operator|=
literal|true
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
name|RoomInterface
operator|.
name|PeriodPreferenceRequest
operator|.
name|load
argument_list|(
name|locationId
argument_list|,
name|examTypeId
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|RoomInterface
operator|.
name|PeriodPreferenceModel
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|RoomInterface
operator|.
name|PeriodPreferenceModel
name|result
parameter_list|)
block|{
if|if
condition|(
name|locationId
operator|.
name|equals
argument_list|(
name|sLastLocationId
argument_list|)
operator|&&
name|sShowHint
operator|&&
name|result
operator|!=
literal|null
condition|)
name|GwtHint
operator|.
name|showHint
argument_list|(
name|relativeObject
argument_list|,
name|content
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|showHintForExam
parameter_list|(
specifier|final
name|Element
name|relativeObject
parameter_list|,
specifier|final
name|Long
name|examId
parameter_list|,
specifier|final
name|Long
name|periodId
parameter_list|)
block|{
name|sLastLocationId
operator|=
name|examId
expr_stmt|;
name|sShowHint
operator|=
literal|true
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
name|RoomInterface
operator|.
name|PeriodPreferenceRequest
operator|.
name|loadForExam
argument_list|(
name|examId
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|RoomInterface
operator|.
name|PeriodPreferenceModel
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|RoomInterface
operator|.
name|PeriodPreferenceModel
name|result
parameter_list|)
block|{
if|if
condition|(
name|examId
operator|.
name|equals
argument_list|(
name|sLastLocationId
argument_list|)
operator|&&
name|sShowHint
operator|&&
name|result
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|periodId
operator|!=
literal|null
condition|)
name|result
operator|.
name|setAssignedPeriodId
argument_list|(
name|periodId
argument_list|)
expr_stmt|;
name|GwtHint
operator|.
name|showHint
argument_list|(
name|relativeObject
argument_list|,
name|content
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|hideHint
parameter_list|()
block|{
name|sShowHint
operator|=
literal|false
expr_stmt|;
name|GwtHint
operator|.
name|hideHint
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|native
name|void
name|createTriggers
parameter_list|()
comment|/*-{ 	$wnd.showGwtPeriodPreferencesHint = function(source, locationId, examTypeId) { 		@org.unitime.timetable.gwt.client.rooms.PeriodPreferencesHint::_showPeriodPreferencesHint(Lcom/google/gwt/core/client/JavaScriptObject;Ljava/lang/String;Ljava/lang/String;)(source, locationId, examTypeId); 	}; 	$wnd.showGwtExamPeriodPreferencesHint = function(source, examId, periodId) { 		@org.unitime.timetable.gwt.client.rooms.PeriodPreferencesHint::_showExamPeriodPreferencesHint(Lcom/google/gwt/core/client/JavaScriptObject;Ljava/lang/String;Ljava/lang/String;)(source, examId, periodId); 	}; 	$wnd.hideGwtPeriodPreferencesHint = function() { 		@org.unitime.timetable.gwt.client.rooms.PeriodPreferencesHint::hideHint()(); 	}; 	}-*/
function_decl|;
specifier|private
specifier|static
name|Long
name|toLong
parameter_list|(
name|String
name|value
parameter_list|)
block|{
try|try
block|{
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

