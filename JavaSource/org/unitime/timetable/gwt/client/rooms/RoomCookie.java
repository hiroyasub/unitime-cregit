begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|rooms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomsPageMode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Cookies
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|RoomCookie
block|{
specifier|private
specifier|static
name|RoomCookie
name|sInstance
init|=
literal|null
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|GwtConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|int
index|[]
name|iFlags
init|=
literal|null
decl_stmt|;
specifier|private
name|String
index|[]
name|iHash
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|iSortRoomsBy
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|iDeptMode
init|=
literal|1
decl_stmt|;
specifier|private
name|Boolean
name|iGridAsText
init|=
literal|null
decl_stmt|;
specifier|private
name|Boolean
name|iHorizontal
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iMode
init|=
literal|""
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|iFutures
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|RoomCookie
parameter_list|()
block|{
name|iFlags
operator|=
operator|new
name|int
index|[
name|RoomsPageMode
operator|.
name|values
argument_list|()
operator|.
name|length
index|]
expr_stmt|;
name|iHash
operator|=
operator|new
name|String
index|[
name|RoomsPageMode
operator|.
name|values
argument_list|()
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iFlags
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|iFlags
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
name|iHash
index|[
name|i
index|]
operator|=
name|RoomsPageMode
operator|.
name|values
argument_list|()
index|[
name|i
index|]
operator|.
name|getQuery
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|String
name|cookie
init|=
name|Cookies
operator|.
name|getCookie
argument_list|(
literal|"UniTime:Room"
argument_list|)
decl_stmt|;
if|if
condition|(
name|cookie
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|params
init|=
name|cookie
operator|.
name|split
argument_list|(
literal|"\\|"
argument_list|)
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|iSortRoomsBy
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|params
index|[
name|idx
operator|++
index|]
argument_list|)
expr_stmt|;
name|setOrientation
argument_list|(
name|params
index|[
name|idx
operator|++
index|]
argument_list|)
expr_stmt|;
name|iDeptMode
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|params
index|[
name|idx
operator|++
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iFlags
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|iFlags
index|[
name|i
index|]
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|params
index|[
name|idx
operator|++
index|]
argument_list|)
expr_stmt|;
name|iHash
index|[
name|i
index|]
operator|=
name|params
index|[
name|idx
operator|++
index|]
expr_stmt|;
block|}
while|while
condition|(
name|idx
operator|<
name|params
operator|.
name|length
condition|)
block|{
name|String
index|[]
name|x
init|=
name|params
index|[
name|idx
operator|++
index|]
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|iFutures
operator|.
name|put
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|x
index|[
literal|0
index|]
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
name|x
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
specifier|private
name|void
name|save
parameter_list|()
block|{
name|String
name|cookie
init|=
name|iSortRoomsBy
operator|+
literal|"|"
operator|+
name|getOrientation
argument_list|()
operator|+
literal|"|"
operator|+
name|iDeptMode
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iFlags
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|cookie
operator|+=
literal|"|"
operator|+
name|iFlags
index|[
name|i
index|]
operator|+
literal|"|"
operator|+
operator|(
name|iHash
index|[
name|i
index|]
operator|==
literal|null
condition|?
literal|""
else|:
name|iHash
index|[
name|i
index|]
operator|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|e
range|:
name|iFutures
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|cookie
operator|+=
literal|"|"
operator|+
name|e
operator|.
name|getKey
argument_list|()
operator|+
literal|":"
operator|+
name|e
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
name|Date
name|expires
init|=
operator|new
name|Date
argument_list|(
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
operator|+
literal|604800000l
argument_list|)
decl_stmt|;
comment|// expires in 7 days
name|Cookies
operator|.
name|setCookie
argument_list|(
literal|"UniTime:Room"
argument_list|,
name|cookie
argument_list|,
name|expires
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setOrientation
parameter_list|(
name|String
name|parameter
parameter_list|)
block|{
if|if
condition|(
name|parameter
operator|==
literal|null
operator|||
name|parameter
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iGridAsText
operator|=
literal|null
expr_stmt|;
name|iHorizontal
operator|=
literal|null
expr_stmt|;
name|iMode
operator|=
literal|""
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|parameter
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
condition|)
block|{
case|case
literal|'a'
case|:
name|iHorizontal
operator|=
literal|null
expr_stmt|;
name|iGridAsText
operator|=
literal|true
expr_stmt|;
break|break;
case|case
literal|'h'
case|:
name|iHorizontal
operator|=
literal|true
expr_stmt|;
name|iGridAsText
operator|=
literal|true
expr_stmt|;
break|break;
case|case
literal|'v'
case|:
name|iHorizontal
operator|=
literal|false
expr_stmt|;
name|iGridAsText
operator|=
literal|true
expr_stmt|;
break|break;
case|case
literal|'A'
case|:
name|iHorizontal
operator|=
literal|null
expr_stmt|;
name|iGridAsText
operator|=
literal|false
expr_stmt|;
break|break;
case|case
literal|'H'
case|:
name|iHorizontal
operator|=
literal|true
expr_stmt|;
name|iGridAsText
operator|=
literal|false
expr_stmt|;
break|break;
case|case
literal|'V'
case|:
name|iHorizontal
operator|=
literal|false
expr_stmt|;
name|iGridAsText
operator|=
literal|false
expr_stmt|;
break|break;
case|case
literal|'b'
case|:
name|iHorizontal
operator|=
literal|true
expr_stmt|;
name|iGridAsText
operator|=
literal|null
expr_stmt|;
break|break;
case|case
literal|'B'
case|:
name|iHorizontal
operator|=
literal|false
expr_stmt|;
name|iGridAsText
operator|=
literal|null
expr_stmt|;
break|break;
default|default:
name|iHorizontal
operator|=
literal|null
expr_stmt|;
name|iGridAsText
operator|=
literal|null
expr_stmt|;
block|}
name|iMode
operator|=
name|parameter
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|getOrientation
parameter_list|()
block|{
name|char
name|orientation
init|=
literal|'X'
decl_stmt|;
if|if
condition|(
name|iGridAsText
operator|==
literal|null
condition|)
block|{
name|orientation
operator|=
operator|(
name|iHorizontal
operator|==
literal|null
condition|?
literal|'X'
else|:
name|iHorizontal
operator|.
name|booleanValue
argument_list|()
condition|?
literal|'b'
else|:
literal|'B'
operator|)
expr_stmt|;
block|}
if|else if
condition|(
name|iGridAsText
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|orientation
operator|=
operator|(
name|iHorizontal
operator|==
literal|null
condition|?
literal|'a'
else|:
name|iHorizontal
operator|.
name|booleanValue
argument_list|()
condition|?
literal|'h'
else|:
literal|'v'
operator|)
expr_stmt|;
block|}
else|else
block|{
name|orientation
operator|=
operator|(
name|iHorizontal
operator|==
literal|null
condition|?
literal|'A'
else|:
name|iHorizontal
operator|.
name|booleanValue
argument_list|()
condition|?
literal|'H'
else|:
literal|'V'
operator|)
expr_stmt|;
block|}
return|return
name|orientation
operator|+
operator|(
name|iMode
operator|==
literal|null
condition|?
literal|""
else|:
name|iMode
operator|)
return|;
block|}
specifier|public
specifier|static
name|RoomCookie
name|getInstance
parameter_list|()
block|{
if|if
condition|(
name|sInstance
operator|==
literal|null
condition|)
name|sInstance
operator|=
operator|new
name|RoomCookie
argument_list|()
expr_stmt|;
return|return
name|sInstance
return|;
block|}
specifier|public
name|boolean
name|get
parameter_list|(
name|RoomsPageMode
name|mode
parameter_list|,
name|int
name|colIndex
parameter_list|)
block|{
name|int
name|flag
init|=
operator|(
literal|1
operator|<<
name|colIndex
operator|)
decl_stmt|;
return|return
operator|(
name|iFlags
index|[
name|mode
operator|.
name|ordinal
argument_list|()
index|]
operator|&
name|flag
operator|)
operator|!=
literal|0
return|;
block|}
specifier|public
name|void
name|set
parameter_list|(
name|RoomsPageMode
name|mode
parameter_list|,
name|int
name|colIndex
parameter_list|,
name|boolean
name|value
parameter_list|)
block|{
name|int
name|flag
init|=
operator|(
literal|1
operator|<<
name|colIndex
operator|)
decl_stmt|;
name|boolean
name|in
init|=
operator|(
operator|(
name|iFlags
index|[
name|mode
operator|.
name|ordinal
argument_list|()
index|]
operator|&
name|flag
operator|)
operator|!=
literal|0
operator|)
decl_stmt|;
if|if
condition|(
name|value
operator|&&
operator|!
name|in
condition|)
name|iFlags
index|[
name|mode
operator|.
name|ordinal
argument_list|()
index|]
operator|+=
name|flag
expr_stmt|;
if|if
condition|(
operator|!
name|value
operator|&&
name|in
condition|)
name|iFlags
index|[
name|mode
operator|.
name|ordinal
argument_list|()
index|]
operator|-=
name|flag
expr_stmt|;
name|save
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|getFlags
parameter_list|(
name|RoomsPageMode
name|mode
parameter_list|)
block|{
return|return
name|iFlags
index|[
name|mode
operator|.
name|ordinal
argument_list|()
index|]
return|;
block|}
specifier|public
name|void
name|setFlags
parameter_list|(
name|RoomsPageMode
name|mode
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
name|iFlags
index|[
name|mode
operator|.
name|ordinal
argument_list|()
index|]
operator|=
name|flags
expr_stmt|;
name|save
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasHash
parameter_list|(
name|RoomsPageMode
name|mode
parameter_list|)
block|{
return|return
name|iHash
index|[
name|mode
operator|.
name|ordinal
argument_list|()
index|]
operator|!=
literal|null
operator|&&
operator|!
name|iHash
index|[
name|mode
operator|.
name|ordinal
argument_list|()
index|]
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|String
name|getHash
parameter_list|(
name|RoomsPageMode
name|mode
parameter_list|)
block|{
return|return
name|iHash
index|[
name|mode
operator|.
name|ordinal
argument_list|()
index|]
return|;
block|}
specifier|public
name|void
name|setHash
parameter_list|(
name|RoomsPageMode
name|mode
parameter_list|,
name|String
name|hash
parameter_list|)
block|{
name|iHash
index|[
name|mode
operator|.
name|ordinal
argument_list|()
index|]
operator|=
name|hash
expr_stmt|;
name|save
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|getRoomsSortBy
parameter_list|()
block|{
return|return
name|iSortRoomsBy
return|;
block|}
specifier|public
name|void
name|setSortRoomsBy
parameter_list|(
name|int
name|sortRoomsBy
parameter_list|)
block|{
name|iSortRoomsBy
operator|=
name|sortRoomsBy
expr_stmt|;
name|save
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|areRoomsHorizontal
parameter_list|()
block|{
return|return
name|iHorizontal
operator|==
literal|null
condition|?
literal|false
else|:
name|iHorizontal
operator|.
name|booleanValue
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isGridAsText
parameter_list|()
block|{
return|return
name|iGridAsText
operator|==
literal|null
condition|?
literal|false
else|:
name|iGridAsText
operator|.
name|booleanValue
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|hasOrientation
parameter_list|()
block|{
return|return
name|iHorizontal
operator|!=
literal|null
operator|&&
name|iGridAsText
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setOrientation
parameter_list|(
name|boolean
name|gridAsText
parameter_list|,
name|boolean
name|horizontal
parameter_list|)
block|{
name|iGridAsText
operator|=
name|gridAsText
expr_stmt|;
name|iHorizontal
operator|=
name|horizontal
expr_stmt|;
name|save
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|getMode
parameter_list|()
block|{
return|return
name|iMode
return|;
block|}
specifier|public
name|boolean
name|hasMode
parameter_list|()
block|{
return|return
name|iMode
operator|!=
literal|null
operator|&&
operator|!
name|iMode
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|void
name|setMode
parameter_list|(
name|boolean
name|horizontal
parameter_list|,
name|String
name|mode
parameter_list|)
block|{
name|iMode
operator|=
name|mode
expr_stmt|;
name|iHorizontal
operator|=
name|horizontal
expr_stmt|;
name|save
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|getDeptMode
parameter_list|()
block|{
return|return
name|iDeptMode
return|;
block|}
specifier|public
name|void
name|setDeptMode
parameter_list|(
name|int
name|deptMode
parameter_list|)
block|{
name|iDeptMode
operator|=
name|deptMode
expr_stmt|;
name|save
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Integer
name|getFutureFlags
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
return|return
name|iFutures
operator|.
name|get
argument_list|(
name|sessionId
argument_list|)
return|;
block|}
specifier|public
name|void
name|setFutureFlags
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|Integer
name|flags
parameter_list|)
block|{
if|if
condition|(
name|flags
operator|==
literal|null
condition|)
name|iFutures
operator|.
name|remove
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
else|else
name|iFutures
operator|.
name|put
argument_list|(
name|sessionId
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|save
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

