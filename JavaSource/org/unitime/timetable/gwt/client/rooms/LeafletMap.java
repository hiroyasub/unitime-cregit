begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|rooms
package|;
end_package

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|page
operator|.
name|UniTimeNotifications
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeHeaderPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|GeocodeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|GeocodeResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|JavaScriptObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|ScriptInjector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|LinkElement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Position
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyCodes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyPressEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyPressHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|AbsolutePanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Button
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|TextBox
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|LeafletMap
extends|extends
name|MapWidget
block|{
specifier|private
specifier|static
specifier|final
name|GwtRpcServiceAsync
name|RPC
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtRpcService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|iTileUrl
decl_stmt|,
name|iTileAttribution
decl_stmt|;
specifier|private
name|AbsolutePanel
name|iMap
decl_stmt|;
specifier|private
name|TextBox
name|iMapSearchBox
decl_stmt|;
specifier|public
name|LeafletMap
parameter_list|(
name|TextBox
name|x
parameter_list|,
name|TextBox
name|y
parameter_list|,
specifier|final
name|String
name|tileUrl
parameter_list|,
specifier|final
name|String
name|tileAttribution
parameter_list|)
block|{
name|super
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|setStyleName
argument_list|(
literal|"unitime-LeafletMap"
argument_list|)
expr_stmt|;
name|iTileUrl
operator|=
name|tileUrl
expr_stmt|;
name|iTileAttribution
operator|=
name|tileAttribution
expr_stmt|;
name|iMap
operator|=
operator|new
name|AbsolutePanel
argument_list|()
expr_stmt|;
name|iMap
operator|.
name|getElement
argument_list|()
operator|.
name|setId
argument_list|(
literal|"map"
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|iMap
argument_list|)
expr_stmt|;
name|iMapControl
operator|=
operator|new
name|AbsolutePanel
argument_list|()
expr_stmt|;
name|iMapControl
operator|.
name|setStyleName
argument_list|(
literal|"control"
argument_list|)
expr_stmt|;
name|iMapControl
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setPosition
argument_list|(
name|Position
operator|.
name|ABSOLUTE
argument_list|)
expr_stmt|;
name|iMapSearchBox
operator|=
operator|new
name|TextBox
argument_list|()
expr_stmt|;
name|iMapSearchBox
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TextBox"
argument_list|)
expr_stmt|;
name|iMapSearchBox
operator|.
name|addStyleName
argument_list|(
literal|"searchBox"
argument_list|)
expr_stmt|;
name|iMapSearchBox
operator|.
name|setTabIndex
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|iMapControl
operator|.
name|add
argument_list|(
name|iMapSearchBox
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|iMapControl
argument_list|)
expr_stmt|;
name|Button
name|button
init|=
operator|new
name|Button
argument_list|(
name|MESSAGES
operator|.
name|buttonGeocode
argument_list|()
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|leafletGeocodeAddress
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|button
operator|.
name|setTabIndex
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|iMapSearchBox
operator|.
name|addKeyPressHandler
argument_list|(
operator|new
name|KeyPressHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyPress
parameter_list|(
name|KeyPressEvent
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|event
operator|.
name|getNativeEvent
argument_list|()
operator|.
name|getKeyCode
argument_list|()
condition|)
block|{
case|case
name|KeyCodes
operator|.
name|KEY_ENTER
case|:
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
name|leafletGeocodeAddress
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|button
operator|.
name|addStyleName
argument_list|(
literal|"geocode"
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|setWhiteSpace
argument_list|(
name|button
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
argument_list|,
literal|"nowrap"
argument_list|)
expr_stmt|;
name|Character
name|accessKey
init|=
name|UniTimeHeaderPanel
operator|.
name|guessAccessKey
argument_list|(
name|MESSAGES
operator|.
name|buttonGeocode
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|accessKey
operator|!=
literal|null
condition|)
name|button
operator|.
name|setAccessKey
argument_list|(
name|accessKey
argument_list|)
expr_stmt|;
name|iMapControl
operator|.
name|add
argument_list|(
name|button
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|loadCss
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"leaflet/leaflet.css"
argument_list|)
expr_stmt|;
name|ScriptInjector
operator|.
name|fromUrl
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"leaflet/leaflet.js"
argument_list|)
operator|.
name|setWindow
argument_list|(
name|ScriptInjector
operator|.
name|TOP_WINDOW
argument_list|)
operator|.
name|setCallback
argument_list|(
operator|new
name|Callback
argument_list|<
name|Void
argument_list|,
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Void
name|result
parameter_list|)
block|{
name|setupLeafletMap
argument_list|(
name|iTileUrl
argument_list|,
name|iTileAttribution
argument_list|)
expr_stmt|;
name|setLeafletMarker
argument_list|()
expr_stmt|;
name|leafletReverseGeocode
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iMapControl
operator|=
literal|null
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|inject
argument_list|()
expr_stmt|;
block|}
specifier|protected
specifier|native
name|void
name|setupLeafletMap
parameter_list|(
name|String
name|tileUrl
parameter_list|,
name|String
name|tileAttribution
parameter_list|)
comment|/*-{ 		$wnd.map = $wnd.L.map('map').setView([50, -58], 2); 		$wnd.L.tileLayer(tileUrl, { attribution: tileAttribution }).addTo($wnd.map); 		$wnd.marker = $wnd.L.marker($wnd.L.latLng(50, -58), { draggable: true }); 		$wnd.marker.setOpacity(0); 		$wnd.that = this; 		$wnd.mapIsEditable = true; 		$wnd.marker.on('dragend', function(e) { 			if ($wnd.mapIsEditable) { 				var pos = $wnd.marker.getLatLng(); 				$doc.getElementById("coordX").value = '' + pos.lat; 				$doc.getElementById("coordY").value = '' + pos.lng; 				$wnd.that.@org.unitime.timetable.gwt.client.rooms.LeafletMap::leafletReverseGeocode()(); 			}			 		}); 		$wnd.map.on('click', function(e) { 			if ($wnd.mapIsEditable) { 				var pos = e.latlng; 				$doc.getElementById("coordX").value = '' + pos.lat; 				$doc.getElementById("coordY").value = '' + pos.lng; 				$wnd.marker.setLatLng(pos); 				$wnd.marker.setOpacity(1); 				if ($wnd.map.getZoom()<= 10) $wnd.map.setZoom(16); 				$wnd.map.panTo(pos); 				$wnd.that.@org.unitime.timetable.gwt.client.rooms.LeafletMap::leafletReverseGeocode()(); 			} 		}); 		$wnd.marker.addTo($wnd.map); 	}-*/
function_decl|;
specifier|protected
specifier|native
name|void
name|setLeafletMarker
parameter_list|()
comment|/*-{ 		try { 			var x = $doc.getElementById("coordX").value; 			var y = $doc.getElementById("coordY").value; 			if (x&& y) { 				var pos = $wnd.L.latLng(x, y); 				$wnd.marker.setLatLng(pos); 				$wnd.marker.setOpacity(1); 				if ($wnd.map.getZoom()<= 10) $wnd.map.setZoom(16); 				$wnd.map.panTo(pos); 			} else { 				$wnd.marker.setOpacity(0); 			} 			if (this.@org.unitime.timetable.gwt.client.rooms.MapWidget::isEnabled()()) { 				$wnd.mapIsEditable = true; 				$wnd.marker.dragging.enable(); 			} else { 				$wnd.mapIsEditable = false; 				$wnd.marker.dragging.disable(); 			} 		} catch (error) {} 	}-*/
function_decl|;
specifier|protected
specifier|native
name|String
name|getLeafletViewBox
parameter_list|()
comment|/*-{ 		try { 			return $wnd.map.getBounds().toBBoxString(); 		} catch (error) { 			return null; 		} 	}-*/
function_decl|;
specifier|public
name|void
name|leafletGeocodeAddress
parameter_list|()
block|{
name|RPC
operator|.
name|execute
argument_list|(
operator|new
name|GeocodeRequest
argument_list|(
name|iMapSearchBox
operator|.
name|getText
argument_list|()
argument_list|,
name|getLeafletViewBox
argument_list|()
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|GeocodeResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iX
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|iY
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|setLeafletMarker
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|GeocodeResponse
name|result
parameter_list|)
block|{
name|iX
operator|.
name|setValue
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|result
operator|.
name|getLat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iY
operator|.
name|setValue
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|result
operator|.
name|getLon
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|setLeafletMarker
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|leafletReverseGeocode
parameter_list|()
block|{
if|if
condition|(
operator|!
name|iX
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|iY
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|RPC
operator|.
name|execute
argument_list|(
operator|new
name|GeocodeRequest
argument_list|(
name|Double
operator|.
name|valueOf
argument_list|(
name|iX
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
name|Double
operator|.
name|valueOf
argument_list|(
name|iY
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|GeocodeResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iMapSearchBox
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|GeocodeResponse
name|result
parameter_list|)
block|{
name|iMapSearchBox
operator|.
name|setText
argument_list|(
name|result
operator|.
name|hasQuery
argument_list|()
condition|?
name|result
operator|.
name|getQuery
argument_list|()
else|:
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|iMapSearchBox
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|iMapSearchBox
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|loadCss
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|LinkElement
name|link
init|=
name|Document
operator|.
name|get
argument_list|()
operator|.
name|createLinkElement
argument_list|()
decl_stmt|;
name|link
operator|.
name|setRel
argument_list|(
literal|"stylesheet"
argument_list|)
expr_stmt|;
name|link
operator|.
name|setHref
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|nativeAttachToHead
argument_list|(
name|link
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
specifier|native
name|void
name|nativeAttachToHead
parameter_list|(
name|JavaScriptObject
name|scriptElement
parameter_list|)
comment|/*-{ 		$doc.getElementsByTagName("head")[0].appendChild(scriptElement); 	}-*/
function_decl|;
annotation|@
name|Override
specifier|public
name|void
name|setMarker
parameter_list|()
block|{
name|setLeafletMarker
argument_list|()
expr_stmt|;
name|leafletReverseGeocode
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

