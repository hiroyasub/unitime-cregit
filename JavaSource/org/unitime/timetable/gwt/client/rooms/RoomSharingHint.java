begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.4 (University Timetabling Application)  * Copyright (C) 2012, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|rooms
package|;
end_package

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|JavaScriptObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|LocaleInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|PopupPanel
import|;
end_import

begin_class
specifier|public
class|class
name|RoomSharingHint
extends|extends
name|PopupPanel
block|{
specifier|private
specifier|static
name|RoomSharingHint
name|sInstance
decl_stmt|;
specifier|private
specifier|static
name|GwtRpcServiceAsync
name|RPC
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtRpcService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|RoomSharingWidget
name|iSharing
decl_stmt|;
specifier|private
name|Long
name|iLocationId
init|=
literal|null
decl_stmt|;
specifier|public
name|RoomSharingHint
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|setStyleName
argument_list|(
literal|"unitime-PopupHint"
argument_list|)
expr_stmt|;
name|iSharing
operator|=
operator|new
name|RoomSharingWidget
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setWidget
argument_list|(
name|iSharing
operator|.
name|getPanel
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setModel
parameter_list|(
name|RoomInterface
operator|.
name|RoomSharingModel
name|model
parameter_list|)
block|{
name|iSharing
operator|.
name|setModel
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setLocationId
parameter_list|(
name|Long
name|locationId
parameter_list|)
block|{
name|iLocationId
operator|=
name|locationId
expr_stmt|;
block|}
specifier|public
name|Long
name|getLoncationId
parameter_list|()
block|{
return|return
name|iLocationId
return|;
block|}
comment|/** Never use from GWT code */
specifier|public
specifier|static
name|void
name|_showRoomSharingHint
parameter_list|(
name|JavaScriptObject
name|source
parameter_list|,
name|String
name|locationId
parameter_list|)
block|{
name|showHint
argument_list|(
operator|(
name|Element
operator|)
name|source
operator|.
name|cast
argument_list|()
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|locationId
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/** Never use from GWT code */
specifier|public
specifier|static
name|void
name|_showEventAvailabilityHint
parameter_list|(
name|JavaScriptObject
name|source
parameter_list|,
name|String
name|locationId
parameter_list|)
block|{
name|showHint
argument_list|(
operator|(
name|Element
operator|)
name|source
operator|.
name|cast
argument_list|()
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|locationId
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|showHint
parameter_list|(
specifier|final
name|Element
name|relativeObject
parameter_list|,
specifier|final
name|long
name|locationId
parameter_list|,
name|boolean
name|eventAvailability
parameter_list|)
block|{
name|getInstance
argument_list|()
operator|.
name|setLocationId
argument_list|(
name|locationId
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
name|RoomInterface
operator|.
name|RoomSharingRequest
operator|.
name|load
argument_list|(
name|locationId
argument_list|,
name|eventAvailability
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|RoomInterface
operator|.
name|RoomSharingModel
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|RoomInterface
operator|.
name|RoomSharingModel
name|result
parameter_list|)
block|{
if|if
condition|(
name|locationId
operator|!=
name|getInstance
argument_list|()
operator|.
name|getLoncationId
argument_list|()
condition|)
return|return;
name|getInstance
argument_list|()
operator|.
name|iSharing
operator|.
name|setModel
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|getInstance
argument_list|()
operator|.
name|setPopupPositionAndShow
argument_list|(
operator|new
name|PositionCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|setPosition
parameter_list|(
name|int
name|offsetWidth
parameter_list|,
name|int
name|offsetHeight
parameter_list|)
block|{
name|int
name|textBoxOffsetWidth
init|=
name|relativeObject
operator|.
name|getOffsetWidth
argument_list|()
decl_stmt|;
name|int
name|offsetWidthDiff
init|=
name|offsetWidth
operator|-
name|textBoxOffsetWidth
decl_stmt|;
name|int
name|left
decl_stmt|;
if|if
condition|(
name|LocaleInfo
operator|.
name|getCurrentLocale
argument_list|()
operator|.
name|isRTL
argument_list|()
condition|)
block|{
name|int
name|textBoxAbsoluteLeft
init|=
name|relativeObject
operator|.
name|getAbsoluteLeft
argument_list|()
decl_stmt|;
name|left
operator|=
name|textBoxAbsoluteLeft
operator|-
name|offsetWidthDiff
expr_stmt|;
if|if
condition|(
name|offsetWidthDiff
operator|>
literal|0
condition|)
block|{
name|int
name|windowRight
init|=
name|Window
operator|.
name|getClientWidth
argument_list|()
operator|+
name|Window
operator|.
name|getScrollLeft
argument_list|()
decl_stmt|;
name|int
name|windowLeft
init|=
name|Window
operator|.
name|getScrollLeft
argument_list|()
decl_stmt|;
name|int
name|textBoxLeftValForRightEdge
init|=
name|textBoxAbsoluteLeft
operator|+
name|textBoxOffsetWidth
decl_stmt|;
name|int
name|distanceToWindowRight
init|=
name|windowRight
operator|-
name|textBoxLeftValForRightEdge
decl_stmt|;
name|int
name|distanceFromWindowLeft
init|=
name|textBoxLeftValForRightEdge
operator|-
name|windowLeft
decl_stmt|;
if|if
condition|(
name|distanceFromWindowLeft
operator|<
name|offsetWidth
operator|&&
name|distanceToWindowRight
operator|>=
name|offsetWidthDiff
condition|)
block|{
name|left
operator|=
name|textBoxAbsoluteLeft
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|left
operator|=
name|relativeObject
operator|.
name|getAbsoluteLeft
argument_list|()
expr_stmt|;
if|if
condition|(
name|offsetWidthDiff
operator|>
literal|0
condition|)
block|{
name|int
name|windowRight
init|=
name|Window
operator|.
name|getClientWidth
argument_list|()
operator|+
name|Window
operator|.
name|getScrollLeft
argument_list|()
decl_stmt|;
name|int
name|windowLeft
init|=
name|Window
operator|.
name|getScrollLeft
argument_list|()
decl_stmt|;
name|int
name|distanceToWindowRight
init|=
name|windowRight
operator|-
name|left
decl_stmt|;
name|int
name|distanceFromWindowLeft
init|=
name|left
operator|-
name|windowLeft
decl_stmt|;
if|if
condition|(
name|distanceToWindowRight
operator|<
name|offsetWidth
operator|&&
name|distanceFromWindowLeft
operator|>=
name|offsetWidthDiff
condition|)
block|{
name|left
operator|-=
name|offsetWidthDiff
expr_stmt|;
block|}
block|}
block|}
name|int
name|top
init|=
name|relativeObject
operator|.
name|getAbsoluteTop
argument_list|()
decl_stmt|;
name|int
name|windowTop
init|=
name|Window
operator|.
name|getScrollTop
argument_list|()
decl_stmt|;
name|int
name|windowBottom
init|=
name|Window
operator|.
name|getScrollTop
argument_list|()
operator|+
name|Window
operator|.
name|getClientHeight
argument_list|()
decl_stmt|;
name|int
name|distanceFromWindowTop
init|=
name|top
operator|-
name|windowTop
decl_stmt|;
name|int
name|distanceToWindowBottom
init|=
name|windowBottom
operator|-
operator|(
name|top
operator|+
name|relativeObject
operator|.
name|getOffsetHeight
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|distanceToWindowBottom
operator|<
name|offsetHeight
operator|&&
name|distanceFromWindowTop
operator|>=
name|offsetHeight
condition|)
block|{
name|top
operator|-=
name|offsetHeight
expr_stmt|;
block|}
else|else
block|{
name|top
operator|+=
name|relativeObject
operator|.
name|getOffsetHeight
argument_list|()
expr_stmt|;
block|}
name|getInstance
argument_list|()
operator|.
name|setPopupPosition
argument_list|(
name|left
argument_list|,
name|top
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|hideHint
parameter_list|()
block|{
name|getInstance
argument_list|()
operator|.
name|setLocationId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|RoomSharingHint
name|getInstance
parameter_list|()
block|{
if|if
condition|(
name|sInstance
operator|==
literal|null
condition|)
block|{
name|sInstance
operator|=
operator|new
name|RoomSharingHint
argument_list|()
expr_stmt|;
block|}
return|return
name|sInstance
return|;
block|}
specifier|public
specifier|static
specifier|native
name|void
name|createTriggers
parameter_list|()
comment|/*-{ 	$wnd.showGwtRoomAvailabilityHint = function(source, content) { 		@org.unitime.timetable.gwt.client.rooms.RoomSharingHint::_showRoomSharingHint(Lcom/google/gwt/core/client/JavaScriptObject;Ljava/lang/String;)(source, content); 	}; 	$wnd.showGwtRoomEventAvailabilityHint = function(source, content) { 		@org.unitime.timetable.gwt.client.rooms.RoomSharingHint::_showEventAvailabilityHint(Lcom/google/gwt/core/client/JavaScriptObject;Ljava/lang/String;)(source, content); 	}; 	$wnd.hideGwtRoomAvailabilityHint = function() { 		@org.unitime.timetable.gwt.client.rooms.RoomSharingHint::hideHint()(); 	}; 	$wnd.hideGwtRoomEventAvailabilityHint = function() { 		@org.unitime.timetable.gwt.client.rooms.RoomSharingHint::hideHint()(); 	}; }-*/
function_decl|;
block|}
end_class

end_unit

