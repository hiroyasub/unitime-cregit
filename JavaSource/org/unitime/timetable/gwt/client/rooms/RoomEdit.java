begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|rooms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|page
operator|.
name|UniTimeNotifications
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|page
operator|.
name|UniTimePageLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|NumberBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|P
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|SimpleForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeHeaderPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|BuildingInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|DepartmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|ExamTypeInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|FeatureInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|FeatureTypeInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|GroupInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|PeriodPreferenceModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomDetailInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomPropertiesInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomSharingModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomTypeInterface
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|ScriptInjector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyCodes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyPressEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyPressHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|AbsolutePanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Button
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|CheckBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ListBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|TextArea
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|TextBox
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|RoomEdit
extends|extends
name|Composite
block|{
specifier|private
specifier|static
specifier|final
name|GwtRpcServiceAsync
name|RPC
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtRpcService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|GwtConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|GwtResources
name|RESOURCES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtResources
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|SimpleForm
name|iForm
decl_stmt|;
specifier|private
name|UniTimeHeaderPanel
name|iHeader
decl_stmt|,
name|iFooter
decl_stmt|;
specifier|private
name|RoomPropertiesInterface
name|iProperties
init|=
literal|null
decl_stmt|;
specifier|private
name|RoomDetailInterface
name|iRoom
init|=
literal|null
decl_stmt|;
specifier|private
name|ListBox
name|iType
decl_stmt|;
specifier|private
name|ListBox
name|iBuilding
decl_stmt|;
specifier|private
name|int
name|iBuildingRow
decl_stmt|;
specifier|private
name|Label
name|iNameLabel
decl_stmt|;
specifier|private
name|UniTimeWidget
argument_list|<
name|TextBox
argument_list|>
name|iName
decl_stmt|;
specifier|private
name|TextBox
name|iDisplayName
decl_stmt|,
name|iExternalId
decl_stmt|;
specifier|private
name|NumberBox
name|iCapacity
decl_stmt|,
name|iExamCapacity
decl_stmt|;
specifier|private
name|ListBox
name|iControllingDepartment
decl_stmt|;
specifier|private
name|NumberBox
name|iX
decl_stmt|,
name|iY
decl_stmt|;
specifier|private
name|P
name|iCoordinatesFormat
decl_stmt|;
specifier|private
name|NumberBox
name|iArea
decl_stmt|;
specifier|private
name|P
name|iAreaFormat
decl_stmt|;
specifier|private
name|CheckBox
name|iDistanceCheck
decl_stmt|,
name|iRoomCheck
decl_stmt|;
specifier|private
name|AbsolutePanel
name|iGoogleMap
decl_stmt|;
specifier|private
name|boolean
name|iGoogleMapInitialized
init|=
literal|false
decl_stmt|;
specifier|private
name|ListBox
name|iEventDepartment
decl_stmt|;
specifier|private
name|ListBox
name|iEventStatus
decl_stmt|;
specifier|private
name|NumberBox
name|iBreakTime
decl_stmt|;
specifier|private
name|TextArea
name|iNote
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|CheckBox
argument_list|>
name|iExaminationRooms
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|CheckBox
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|CheckBox
argument_list|>
name|iGroups
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|CheckBox
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|CheckBox
argument_list|>
name|iFeatures
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|CheckBox
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|iGroupRow
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|iFeatureRow
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|UniTimeHeaderPanel
name|iRoomSharingHeader
decl_stmt|;
specifier|private
name|RoomSharingWidget
name|iRoomSharing
decl_stmt|;
specifier|private
name|UniTimeHeaderPanel
name|iPeriodPreferencesHeader
decl_stmt|;
specifier|private
name|int
name|iPeriodPreferencesHeaderRow
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|PeriodPreferencesWidget
argument_list|>
name|iPeriodPreferences
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|PeriodPreferencesWidget
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|iPeriodPreferencesRow
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|UniTimeHeaderPanel
name|iEventAvailabilityHeader
decl_stmt|;
specifier|private
name|RoomSharingWidget
name|iEventAvailability
decl_stmt|;
comment|// private TextArea iRoomSharingNote;
comment|// private int iRoomSharingNoteRow;
specifier|public
name|RoomEdit
parameter_list|(
name|RoomPropertiesInterface
name|properties
parameter_list|)
block|{
name|iProperties
operator|=
name|properties
expr_stmt|;
name|iHeader
operator|=
operator|new
name|UniTimeHeaderPanel
argument_list|()
expr_stmt|;
name|ClickHandler
name|clickCreateOrUpdate
init|=
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
block|}
block|}
decl_stmt|;
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"create"
argument_list|,
name|MESSAGES
operator|.
name|buttonCreateRoom
argument_list|()
argument_list|,
literal|100
argument_list|,
name|clickCreateOrUpdate
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"update"
argument_list|,
name|MESSAGES
operator|.
name|buttonUpdateRoom
argument_list|()
argument_list|,
literal|100
argument_list|,
name|clickCreateOrUpdate
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"delete"
argument_list|,
name|MESSAGES
operator|.
name|buttonDeleteRoom
argument_list|()
argument_list|,
literal|100
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
block|}
block|}
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"back"
argument_list|,
name|MESSAGES
operator|.
name|buttonBack
argument_list|()
argument_list|,
literal|75
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iForm
operator|=
operator|new
name|SimpleForm
argument_list|(
name|iProperties
operator|.
name|isGoogleMap
argument_list|()
condition|?
literal|3
else|:
literal|2
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addStyleName
argument_list|(
literal|"unitime-RoomEdit"
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addHeaderRow
argument_list|(
name|iHeader
argument_list|)
expr_stmt|;
name|iType
operator|=
operator|new
name|ListBox
argument_list|()
expr_stmt|;
name|iType
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TextBox"
argument_list|)
expr_stmt|;
name|int
name|firstRow
init|=
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propRoomType
argument_list|()
argument_list|,
name|iType
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|iType
operator|.
name|addItem
argument_list|(
name|MESSAGES
operator|.
name|itemSelect
argument_list|()
argument_list|,
literal|"-1"
argument_list|)
expr_stmt|;
for|for
control|(
name|RoomTypeInterface
name|type
range|:
name|iProperties
operator|.
name|getRoomTypes
argument_list|()
control|)
name|iType
operator|.
name|addItem
argument_list|(
name|type
operator|.
name|getLabel
argument_list|()
argument_list|,
name|type
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|iType
operator|.
name|setSelectedIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|iType
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|typeChanged
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iBuilding
operator|=
operator|new
name|ListBox
argument_list|()
expr_stmt|;
name|iBuilding
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TextBox"
argument_list|)
expr_stmt|;
name|iBuildingRow
operator|=
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propBuilding
argument_list|()
argument_list|,
name|iBuilding
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|iBuilding
operator|.
name|addItem
argument_list|(
name|MESSAGES
operator|.
name|itemSelect
argument_list|()
argument_list|,
literal|"-1"
argument_list|)
expr_stmt|;
for|for
control|(
name|BuildingInterface
name|building
range|:
name|iProperties
operator|.
name|getBuildings
argument_list|()
control|)
name|iBuilding
operator|.
name|addItem
argument_list|(
name|building
operator|.
name|getAbbreviation
argument_list|()
operator|+
literal|" - "
operator|+
name|building
operator|.
name|getName
argument_list|()
argument_list|,
name|building
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|iBuilding
operator|.
name|setSelectedIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|iBuilding
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|buildingChanged
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iBuildingRow
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iName
operator|=
operator|new
name|UniTimeWidget
argument_list|<
name|TextBox
argument_list|>
argument_list|(
operator|new
name|TextBox
argument_list|()
argument_list|)
expr_stmt|;
name|iName
operator|.
name|getWidget
argument_list|()
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TextBox"
argument_list|)
expr_stmt|;
name|iName
operator|.
name|getWidget
argument_list|()
operator|.
name|setMaxLength
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|iName
operator|.
name|getWidget
argument_list|()
operator|.
name|setWidth
argument_list|(
literal|"150px"
argument_list|)
expr_stmt|;
name|iName
operator|.
name|getWidget
argument_list|()
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|iName
operator|.
name|clearHint
argument_list|()
expr_stmt|;
name|iHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iNameLabel
operator|=
operator|new
name|Label
argument_list|(
name|MESSAGES
operator|.
name|propRoomName
argument_list|()
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|iNameLabel
argument_list|,
name|iName
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|iDisplayName
operator|=
operator|new
name|TextBox
argument_list|()
expr_stmt|;
name|iDisplayName
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TextBox"
argument_list|)
expr_stmt|;
name|iDisplayName
operator|.
name|setMaxLength
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|iDisplayName
operator|.
name|setWidth
argument_list|(
literal|"480px"
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propDisplayName
argument_list|()
argument_list|,
name|iDisplayName
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|iExternalId
operator|=
operator|new
name|TextBox
argument_list|()
expr_stmt|;
name|iExternalId
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TextBox"
argument_list|)
expr_stmt|;
name|iExternalId
operator|.
name|setMaxLength
argument_list|(
literal|40
argument_list|)
expr_stmt|;
name|iExternalId
operator|.
name|setWidth
argument_list|(
literal|"300px"
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propExternalId
argument_list|()
argument_list|,
name|iExternalId
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|iCapacity
operator|=
operator|new
name|NumberBox
argument_list|()
expr_stmt|;
name|iCapacity
operator|.
name|setDecimal
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iCapacity
operator|.
name|setNegative
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iCapacity
operator|.
name|setMaxLength
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|iCapacity
operator|.
name|setWidth
argument_list|(
literal|"80px"
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propCapacity
argument_list|()
argument_list|,
name|iCapacity
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|iControllingDepartment
operator|=
operator|new
name|ListBox
argument_list|()
expr_stmt|;
name|iControllingDepartment
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TextBox"
argument_list|)
expr_stmt|;
name|iControllingDepartment
operator|.
name|addItem
argument_list|(
name|MESSAGES
operator|.
name|itemNoControlDepartment
argument_list|()
argument_list|,
literal|"-1"
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propControllingDepartment
argument_list|()
argument_list|,
name|iControllingDepartment
argument_list|,
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|DepartmentInterface
name|department
range|:
name|iProperties
operator|.
name|getDepartments
argument_list|()
control|)
name|iControllingDepartment
operator|.
name|addItem
argument_list|(
name|department
operator|.
name|getExtAbbreviationOrCode
argument_list|()
operator|+
literal|" - "
operator|+
name|department
operator|.
name|getExtLabelWhenExist
argument_list|()
argument_list|,
name|department
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|iX
operator|=
operator|new
name|NumberBox
argument_list|()
expr_stmt|;
name|iX
operator|.
name|setMaxLength
argument_list|(
literal|12
argument_list|)
expr_stmt|;
name|iX
operator|.
name|setWidth
argument_list|(
literal|"80px"
argument_list|)
expr_stmt|;
name|iX
operator|.
name|setDecimal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iX
operator|.
name|setNegative
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iX
operator|.
name|addStyleName
argument_list|(
literal|"number"
argument_list|)
expr_stmt|;
name|iY
operator|=
operator|new
name|NumberBox
argument_list|()
expr_stmt|;
name|iY
operator|.
name|setMaxLength
argument_list|(
literal|12
argument_list|)
expr_stmt|;
name|iY
operator|.
name|setWidth
argument_list|(
literal|"80px"
argument_list|)
expr_stmt|;
name|iY
operator|.
name|setDecimal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iY
operator|.
name|setNegative
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iY
operator|.
name|addStyleName
argument_list|(
literal|"number"
argument_list|)
expr_stmt|;
name|iX
operator|.
name|getElement
argument_list|()
operator|.
name|setId
argument_list|(
literal|"coordX"
argument_list|)
expr_stmt|;
name|iY
operator|.
name|getElement
argument_list|()
operator|.
name|setId
argument_list|(
literal|"coordY"
argument_list|)
expr_stmt|;
name|P
name|p
init|=
operator|new
name|P
argument_list|(
literal|"coordinates"
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|iX
argument_list|)
expr_stmt|;
name|P
name|comma
init|=
operator|new
name|P
argument_list|(
literal|"comma"
argument_list|)
decl_stmt|;
name|comma
operator|.
name|setText
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|comma
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|iY
argument_list|)
expr_stmt|;
name|iCoordinatesFormat
operator|=
operator|new
name|P
argument_list|(
literal|"format"
argument_list|)
expr_stmt|;
name|iCoordinatesFormat
operator|.
name|setText
argument_list|(
name|iProperties
operator|.
name|getEllipsoid
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|iCoordinatesFormat
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propCoordinates
argument_list|()
argument_list|,
name|p
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|iProperties
operator|.
name|isGoogleMap
argument_list|()
condition|)
block|{
name|iX
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|String
argument_list|>
name|event
parameter_list|)
block|{
name|setMarker
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iY
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|String
argument_list|>
name|event
parameter_list|)
block|{
name|setMarker
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|iArea
operator|=
operator|new
name|NumberBox
argument_list|()
expr_stmt|;
name|iArea
operator|.
name|setDecimal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iArea
operator|.
name|setNegative
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iArea
operator|.
name|addStyleName
argument_list|(
literal|"number"
argument_list|)
expr_stmt|;
name|iArea
operator|.
name|setWidth
argument_list|(
literal|"80px"
argument_list|)
expr_stmt|;
name|iArea
operator|.
name|setMaxLength
argument_list|(
literal|12
argument_list|)
expr_stmt|;
name|P
name|q
init|=
operator|new
name|P
argument_list|(
literal|"area"
argument_list|)
decl_stmt|;
name|q
operator|.
name|add
argument_list|(
name|iArea
argument_list|)
expr_stmt|;
name|iAreaFormat
operator|=
operator|new
name|P
argument_list|(
literal|"format"
argument_list|)
expr_stmt|;
name|iAreaFormat
operator|.
name|setText
argument_list|(
name|CONSTANTS
operator|.
name|roomAreaUnitsLong
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|iAreaFormat
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propRoomArea
argument_list|()
argument_list|,
name|q
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|iDistanceCheck
operator|=
operator|new
name|CheckBox
argument_list|()
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propDistanceCheck
argument_list|()
argument_list|,
name|iDistanceCheck
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|iRoomCheck
operator|=
operator|new
name|CheckBox
argument_list|()
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propRoomCheck
argument_list|()
argument_list|,
name|iRoomCheck
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iProperties
operator|.
name|getExamTypes
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|P
name|exams
init|=
operator|new
name|P
argument_list|(
literal|"exams"
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|ExamTypeInterface
name|type
range|:
name|iProperties
operator|.
name|getExamTypes
argument_list|()
control|)
block|{
specifier|final
name|CheckBox
name|ch
init|=
operator|new
name|CheckBox
argument_list|(
name|type
operator|.
name|getLabel
argument_list|()
argument_list|)
decl_stmt|;
name|ch
operator|.
name|addStyleName
argument_list|(
literal|"exam"
argument_list|)
expr_stmt|;
name|iExaminationRooms
operator|.
name|put
argument_list|(
name|type
operator|.
name|getId
argument_list|()
argument_list|,
name|ch
argument_list|)
expr_stmt|;
name|exams
operator|.
name|add
argument_list|(
name|ch
argument_list|)
expr_stmt|;
name|ch
operator|.
name|setValue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ch
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|event
parameter_list|)
block|{
name|iForm
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iPeriodPreferencesRow
operator|.
name|get
argument_list|(
name|type
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|prefVisible
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ExamTypeInterface
name|t
range|:
name|iProperties
operator|.
name|getExamTypes
argument_list|()
control|)
block|{
if|if
condition|(
name|iExaminationRooms
operator|.
name|get
argument_list|(
name|t
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|prefVisible
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|iForm
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iPeriodPreferencesHeaderRow
argument_list|,
name|prefVisible
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propExamRooms
argument_list|()
argument_list|,
name|exams
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|iExamCapacity
operator|=
operator|new
name|NumberBox
argument_list|()
expr_stmt|;
name|iExamCapacity
operator|.
name|setDecimal
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iExamCapacity
operator|.
name|setNegative
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iExamCapacity
operator|.
name|setMaxLength
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|iExamCapacity
operator|.
name|setWidth
argument_list|(
literal|"80px"
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propExamCapacity
argument_list|()
argument_list|,
name|iExamCapacity
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|iEventDepartment
operator|=
operator|new
name|ListBox
argument_list|()
expr_stmt|;
name|iEventDepartment
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TextBox"
argument_list|)
expr_stmt|;
name|iEventDepartment
operator|.
name|addItem
argument_list|(
name|MESSAGES
operator|.
name|itemNoEventDepartment
argument_list|()
argument_list|,
literal|"-1"
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propEventDepartment
argument_list|()
argument_list|,
name|iEventDepartment
argument_list|,
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|DepartmentInterface
name|department
range|:
name|iProperties
operator|.
name|getDepartments
argument_list|()
control|)
if|if
condition|(
name|department
operator|.
name|isEvent
argument_list|()
condition|)
name|iEventDepartment
operator|.
name|addItem
argument_list|(
name|department
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|" - "
operator|+
name|department
operator|.
name|getLabel
argument_list|()
argument_list|,
name|department
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|iEventStatus
operator|=
operator|new
name|ListBox
argument_list|()
expr_stmt|;
name|iEventStatus
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TextBox"
argument_list|)
expr_stmt|;
name|iEventStatus
operator|.
name|addItem
argument_list|(
name|MESSAGES
operator|.
name|itemDefault
argument_list|()
argument_list|,
literal|"-1"
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propEventStatus
argument_list|()
argument_list|,
name|iEventStatus
argument_list|,
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CONSTANTS
operator|.
name|eventStatusName
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|iEventStatus
operator|.
name|addItem
argument_list|(
name|CONSTANTS
operator|.
name|eventStatusName
argument_list|()
index|[
name|i
index|]
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|iNote
operator|=
operator|new
name|TextArea
argument_list|()
expr_stmt|;
name|iNote
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TextArea"
argument_list|)
expr_stmt|;
name|iNote
operator|.
name|setVisibleLines
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|iNote
operator|.
name|setCharacterWidth
argument_list|(
literal|70
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propEventNote
argument_list|()
argument_list|,
name|iNote
argument_list|)
expr_stmt|;
name|iBreakTime
operator|=
operator|new
name|NumberBox
argument_list|()
expr_stmt|;
name|iBreakTime
operator|.
name|setDecimal
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iBreakTime
operator|.
name|setNegative
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iBreakTime
operator|.
name|addStyleName
argument_list|(
literal|"number"
argument_list|)
expr_stmt|;
name|iBreakTime
operator|.
name|setWidth
argument_list|(
literal|"80px"
argument_list|)
expr_stmt|;
name|iBreakTime
operator|.
name|setMaxLength
argument_list|(
literal|12
argument_list|)
expr_stmt|;
name|P
name|b
init|=
operator|new
name|P
argument_list|(
literal|"breaktime"
argument_list|)
decl_stmt|;
name|b
operator|.
name|add
argument_list|(
name|iBreakTime
argument_list|)
expr_stmt|;
name|P
name|f
init|=
operator|new
name|P
argument_list|(
literal|"note"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|useDefaultBreakTimeWhenEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propBreakTime
argument_list|()
argument_list|,
name|b
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|iProperties
operator|.
name|isGoogleMap
argument_list|()
condition|)
block|{
name|iGoogleMap
operator|=
operator|new
name|AbsolutePanel
argument_list|()
expr_stmt|;
name|iGoogleMap
operator|.
name|setStyleName
argument_list|(
literal|"map"
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|setWidget
argument_list|(
name|firstRow
argument_list|,
literal|2
argument_list|,
name|iGoogleMap
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setRowSpan
argument_list|(
name|firstRow
argument_list|,
literal|2
argument_list|,
name|iForm
operator|.
name|getRowCount
argument_list|()
operator|-
name|firstRow
operator|-
literal|1
argument_list|)
expr_stmt|;
name|AbsolutePanel
name|control
init|=
operator|new
name|AbsolutePanel
argument_list|()
decl_stmt|;
name|control
operator|.
name|setStyleName
argument_list|(
literal|"control"
argument_list|)
expr_stmt|;
specifier|final
name|TextBox
name|searchBox
init|=
operator|new
name|TextBox
argument_list|()
decl_stmt|;
name|searchBox
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TextBox"
argument_list|)
expr_stmt|;
name|searchBox
operator|.
name|addStyleName
argument_list|(
literal|"searchBox"
argument_list|)
expr_stmt|;
name|searchBox
operator|.
name|getElement
argument_list|()
operator|.
name|setId
argument_list|(
literal|"mapSearchBox"
argument_list|)
expr_stmt|;
name|searchBox
operator|.
name|setTabIndex
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|control
operator|.
name|add
argument_list|(
name|searchBox
argument_list|)
expr_stmt|;
name|Button
name|button
init|=
operator|new
name|Button
argument_list|(
name|MESSAGES
operator|.
name|buttonGeocode
argument_list|()
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|geocodeAddress
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|button
operator|.
name|setTabIndex
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|searchBox
operator|.
name|addKeyPressHandler
argument_list|(
operator|new
name|KeyPressHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyPress
parameter_list|(
name|KeyPressEvent
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|event
operator|.
name|getNativeEvent
argument_list|()
operator|.
name|getKeyCode
argument_list|()
condition|)
block|{
case|case
name|KeyCodes
operator|.
name|KEY_ENTER
case|:
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
name|geocodeAddress
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|button
operator|.
name|addStyleName
argument_list|(
literal|"geocode"
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|setWhiteSpace
argument_list|(
name|button
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
argument_list|,
literal|"nowrap"
argument_list|)
expr_stmt|;
name|Character
name|accessKey
init|=
name|UniTimeHeaderPanel
operator|.
name|guessAccessKey
argument_list|(
name|MESSAGES
operator|.
name|buttonGeocode
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|accessKey
operator|!=
literal|null
condition|)
name|button
operator|.
name|setAccessKey
argument_list|(
name|accessKey
argument_list|)
expr_stmt|;
name|control
operator|.
name|add
argument_list|(
name|button
argument_list|)
expr_stmt|;
name|iGoogleMap
operator|.
name|add
argument_list|(
name|control
argument_list|)
expr_stmt|;
name|addGoogleMap
argument_list|(
name|iGoogleMap
operator|.
name|getElement
argument_list|()
argument_list|,
name|control
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iForm
operator|.
name|addHeaderRow
argument_list|(
name|MESSAGES
operator|.
name|headerRoomGroups
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iProperties
operator|.
name|getGroups
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|P
name|groups
init|=
operator|new
name|P
argument_list|(
literal|"groups"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|P
argument_list|>
name|departmental
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|P
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|GroupInterface
name|group
range|:
name|iProperties
operator|.
name|getGroups
argument_list|()
control|)
block|{
name|CheckBox
name|ch
init|=
operator|new
name|CheckBox
argument_list|(
name|group
operator|.
name|getLabel
argument_list|()
argument_list|)
decl_stmt|;
name|ch
operator|.
name|addStyleName
argument_list|(
literal|"group"
argument_list|)
expr_stmt|;
name|iGroups
operator|.
name|put
argument_list|(
name|group
operator|.
name|getId
argument_list|()
argument_list|,
name|ch
argument_list|)
expr_stmt|;
if|if
condition|(
name|group
operator|.
name|getDepartment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|P
name|d
init|=
name|departmental
operator|.
name|get
argument_list|(
name|group
operator|.
name|getDepartment
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|==
literal|null
condition|)
block|{
name|d
operator|=
operator|new
name|P
argument_list|(
literal|"groups"
argument_list|)
expr_stmt|;
name|departmental
operator|.
name|put
argument_list|(
name|group
operator|.
name|getDepartment
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
name|d
operator|.
name|add
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|groups
operator|.
name|add
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|groups
operator|.
name|getWidgetCount
argument_list|()
operator|>
literal|0
condition|)
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propGlobalGroups
argument_list|()
argument_list|,
name|groups
argument_list|)
expr_stmt|;
for|for
control|(
name|DepartmentInterface
name|dept
range|:
name|iProperties
operator|.
name|getDepartments
argument_list|()
control|)
block|{
name|P
name|d
init|=
name|departmental
operator|.
name|get
argument_list|(
name|dept
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|!=
literal|null
condition|)
name|iGroupRow
operator|.
name|put
argument_list|(
name|dept
operator|.
name|getId
argument_list|()
argument_list|,
name|iForm
operator|.
name|addRow
argument_list|(
name|dept
operator|.
name|getExtLabelWhenExist
argument_list|()
operator|+
literal|":"
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|iForm
operator|.
name|addHeaderRow
argument_list|(
name|MESSAGES
operator|.
name|headerRoomFeatures
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iProperties
operator|.
name|getFeatures
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|P
name|features
init|=
operator|new
name|P
argument_list|(
literal|"features"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|P
argument_list|>
name|types
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|P
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FeatureInterface
name|feature
range|:
name|iProperties
operator|.
name|getFeatures
argument_list|()
control|)
block|{
name|CheckBox
name|ch
init|=
operator|new
name|CheckBox
argument_list|(
name|feature
operator|.
name|getTitle
argument_list|()
argument_list|)
decl_stmt|;
name|ch
operator|.
name|addStyleName
argument_list|(
literal|"feature"
argument_list|)
expr_stmt|;
name|iFeatures
operator|.
name|put
argument_list|(
name|feature
operator|.
name|getId
argument_list|()
argument_list|,
name|ch
argument_list|)
expr_stmt|;
if|if
condition|(
name|feature
operator|.
name|getType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|P
name|d
init|=
name|types
operator|.
name|get
argument_list|(
name|feature
operator|.
name|getType
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|==
literal|null
condition|)
block|{
name|d
operator|=
operator|new
name|P
argument_list|(
literal|"features"
argument_list|)
expr_stmt|;
name|types
operator|.
name|put
argument_list|(
name|feature
operator|.
name|getType
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
name|d
operator|.
name|add
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|features
operator|.
name|add
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|features
operator|.
name|getWidgetCount
argument_list|()
operator|>
literal|0
condition|)
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propFeatures
argument_list|()
argument_list|,
name|features
argument_list|)
expr_stmt|;
for|for
control|(
name|FeatureTypeInterface
name|type
range|:
name|iProperties
operator|.
name|getFeatureTypes
argument_list|()
control|)
block|{
name|P
name|d
init|=
name|types
operator|.
name|get
argument_list|(
name|type
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|!=
literal|null
condition|)
name|iForm
operator|.
name|addRow
argument_list|(
name|type
operator|.
name|getLabel
argument_list|()
operator|+
literal|":"
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
block|}
name|iRoomSharingHeader
operator|=
operator|new
name|UniTimeHeaderPanel
argument_list|(
name|MESSAGES
operator|.
name|headerRoomSharing
argument_list|()
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addHeaderRow
argument_list|(
name|iRoomSharingHeader
argument_list|)
expr_stmt|;
name|iRoomSharing
operator|=
operator|new
name|RoomSharingWidget
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|iRoomSharing
argument_list|)
expr_stmt|;
comment|/* 		iRoomSharingNote = new TextArea(); 		iRoomSharingNote.setStyleName("unitime-TextArea"); 		iRoomSharingNote.setVisibleLines(10); 		iRoomSharingNote.setCharacterWidth(50); 		iRoomSharingNote.addValueChangeHandler(new ValueChangeHandler<String>() { 			@Override 			public void onValueChange(ValueChangeEvent<String> event) { 				if (iRoomSharing.getModel() != null) 					iRoomSharing.getModel().setNote(event.getValue()); 			} 		}); 		iRoomSharingNoteRow = iForm.addRow(MESSAGES.propRoomSharingNote(), iRoomSharingNote); 		*/
name|iPeriodPreferencesHeader
operator|=
operator|new
name|UniTimeHeaderPanel
argument_list|(
name|MESSAGES
operator|.
name|headerExaminationPeriodPreferences
argument_list|()
argument_list|)
expr_stmt|;
name|iPeriodPreferencesHeaderRow
operator|=
name|iForm
operator|.
name|addHeaderRow
argument_list|(
name|iPeriodPreferencesHeader
argument_list|)
expr_stmt|;
for|for
control|(
name|ExamTypeInterface
name|type
range|:
name|iProperties
operator|.
name|getExamTypes
argument_list|()
control|)
block|{
name|PeriodPreferencesWidget
name|pref
init|=
operator|new
name|PeriodPreferencesWidget
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|iPeriodPreferences
operator|.
name|put
argument_list|(
name|type
operator|.
name|getId
argument_list|()
argument_list|,
name|pref
argument_list|)
expr_stmt|;
name|int
name|row
init|=
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propExaminationPreferences
argument_list|(
name|type
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|,
name|pref
argument_list|)
decl_stmt|;
name|iPeriodPreferencesRow
operator|.
name|put
argument_list|(
name|type
operator|.
name|getId
argument_list|()
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|row
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|iForm
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iPeriodPreferencesHeaderRow
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iEventAvailabilityHeader
operator|=
operator|new
name|UniTimeHeaderPanel
argument_list|(
name|MESSAGES
operator|.
name|headerEventAvailability
argument_list|()
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addHeaderRow
argument_list|(
name|iEventAvailabilityHeader
argument_list|)
expr_stmt|;
name|iEventAvailability
operator|=
operator|new
name|RoomSharingWidget
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|iEventAvailability
argument_list|)
expr_stmt|;
name|iFooter
operator|=
name|iHeader
operator|.
name|clonePanel
argument_list|()
expr_stmt|;
name|initWidget
argument_list|(
name|iForm
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setRoom
parameter_list|(
name|RoomDetailInterface
name|room
parameter_list|)
block|{
name|iRoom
operator|=
name|room
expr_stmt|;
if|if
condition|(
name|iRoom
operator|==
literal|null
condition|)
block|{
name|iRoom
operator|=
operator|new
name|RoomDetailInterface
argument_list|()
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"create"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"update"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"delete"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"create"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"update"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"delete"
argument_list|,
name|iRoom
operator|.
name|isCanDelete
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iRoom
operator|.
name|getRoomType
argument_list|()
operator|==
literal|null
condition|)
block|{
name|iType
operator|.
name|setSelectedIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iType
operator|.
name|setSelectedIndex
argument_list|(
literal|1
operator|+
name|iProperties
operator|.
name|getRoomTypes
argument_list|()
operator|.
name|indexOf
argument_list|(
name|iRoom
operator|.
name|getRoomType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|typeChanged
argument_list|()
expr_stmt|;
if|if
condition|(
name|iRoom
operator|.
name|getBuilding
argument_list|()
operator|==
literal|null
condition|)
block|{
name|iBuilding
operator|.
name|setSelectedIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iBuilding
operator|.
name|setSelectedIndex
argument_list|(
literal|1
operator|+
name|iProperties
operator|.
name|getBuildings
argument_list|()
operator|.
name|indexOf
argument_list|(
name|iRoom
operator|.
name|getBuilding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iName
operator|.
name|getWidget
argument_list|()
operator|.
name|setText
argument_list|(
name|iRoom
operator|.
name|getName
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|iRoom
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|iDisplayName
operator|.
name|setText
argument_list|(
name|iRoom
operator|.
name|getDisplayName
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|iRoom
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
name|iExternalId
operator|.
name|setText
argument_list|(
name|iRoom
operator|.
name|getExternalId
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|iRoom
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|iCapacity
operator|.
name|setValue
argument_list|(
name|iRoom
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iRoom
operator|.
name|getControlDepartment
argument_list|()
operator|==
literal|null
condition|)
block|{
name|iControllingDepartment
operator|.
name|setSelectedIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iControllingDepartment
operator|.
name|setSelectedIndex
argument_list|(
literal|1
operator|+
name|iProperties
operator|.
name|getDepartments
argument_list|()
operator|.
name|indexOf
argument_list|(
name|iRoom
operator|.
name|getControlDepartment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iX
operator|.
name|setValue
argument_list|(
name|iRoom
operator|.
name|getX
argument_list|()
argument_list|)
expr_stmt|;
name|iY
operator|.
name|setValue
argument_list|(
name|iRoom
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
name|iArea
operator|.
name|setValue
argument_list|(
name|iRoom
operator|.
name|getArea
argument_list|()
argument_list|)
expr_stmt|;
name|iDistanceCheck
operator|.
name|setValue
argument_list|(
operator|!
name|iRoom
operator|.
name|isIgnoreTooFar
argument_list|()
argument_list|)
expr_stmt|;
name|iRoomCheck
operator|.
name|setValue
argument_list|(
operator|!
name|iRoom
operator|.
name|isIgnoreRoomCheck
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|CheckBox
argument_list|>
name|e
range|:
name|iExaminationRooms
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|setValue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iPeriodPreferencesRow
operator|.
name|get
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|iForm
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iPeriodPreferencesHeaderRow
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|iRoom
operator|.
name|hasExamTypes
argument_list|()
condition|)
block|{
for|for
control|(
name|ExamTypeInterface
name|type
range|:
name|iRoom
operator|.
name|getExamTypes
argument_list|()
control|)
block|{
name|iExaminationRooms
operator|.
name|get
argument_list|(
name|type
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iPeriodPreferencesHeaderRow
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|iPeriodPreferencesHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
for|for
control|(
specifier|final
name|ExamTypeInterface
name|type
range|:
name|iProperties
operator|.
name|getExamTypes
argument_list|()
control|)
block|{
specifier|final
name|PeriodPreferencesWidget
name|pref
init|=
name|iPeriodPreferences
operator|.
name|get
argument_list|(
name|type
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|iRoom
operator|.
name|hasPeriodPreferenceModel
argument_list|(
name|type
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|pref
operator|.
name|setModel
argument_list|(
name|iRoom
operator|.
name|getPeriodPreferenceModel
argument_list|(
name|type
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iPeriodPreferencesRow
operator|.
name|get
argument_list|(
name|type
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|iExaminationRooms
operator|.
name|get
argument_list|(
name|type
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iPeriodPreferencesHeader
operator|.
name|showLoading
argument_list|()
expr_stmt|;
name|iForm
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iPeriodPreferencesRow
operator|.
name|get
argument_list|(
name|type
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
name|RoomInterface
operator|.
name|PeriodPreferenceRequest
operator|.
name|load
argument_list|(
name|iRoom
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|type
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|PeriodPreferenceModel
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iPeriodPreferencesHeader
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedToLoadPeriodPreferences
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|PeriodPreferenceModel
name|result
parameter_list|)
block|{
name|iPeriodPreferencesHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
name|pref
operator|.
name|setModel
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iPeriodPreferencesRow
operator|.
name|get
argument_list|(
name|type
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|iExaminationRooms
operator|.
name|get
argument_list|(
name|type
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|iExamCapacity
operator|.
name|setValue
argument_list|(
name|iRoom
operator|.
name|getExamCapacity
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iRoom
operator|.
name|getEventDepartment
argument_list|()
operator|==
literal|null
condition|)
block|{
name|iEventDepartment
operator|.
name|setSelectedIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iEventDepartment
operator|.
name|setSelectedIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|iEventDepartment
operator|.
name|getItemCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|iEventDepartment
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|iRoom
operator|.
name|getEventDepartment
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|iEventDepartment
operator|.
name|setSelectedIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
name|iEventStatus
operator|.
name|setSelectedIndex
argument_list|(
name|iRoom
operator|.
name|getEventStatus
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|iRoom
operator|.
name|getEventStatus
argument_list|()
argument_list|)
expr_stmt|;
name|iNote
operator|.
name|setText
argument_list|(
name|iRoom
operator|.
name|getEventNote
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|iRoom
operator|.
name|getEventNote
argument_list|()
argument_list|)
expr_stmt|;
name|iBreakTime
operator|.
name|setValue
argument_list|(
name|iRoom
operator|.
name|getBreakTime
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|CheckBox
argument_list|>
name|e
range|:
name|iGroups
operator|.
name|entrySet
argument_list|()
control|)
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|setValue
argument_list|(
name|iRoom
operator|.
name|hasGroup
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|CheckBox
argument_list|>
name|e
range|:
name|iFeatures
operator|.
name|entrySet
argument_list|()
control|)
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|setValue
argument_list|(
name|iRoom
operator|.
name|hasFeature
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iRoom
operator|.
name|hasRoomSharingModel
argument_list|()
condition|)
block|{
name|iRoomSharingHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
name|iRoomSharing
operator|.
name|setModel
argument_list|(
name|iRoom
operator|.
name|getRoomSharingModel
argument_list|()
argument_list|)
expr_stmt|;
name|iRoomSharing
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iRoomSharingHeader
operator|.
name|showLoading
argument_list|()
expr_stmt|;
name|iRoomSharing
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
name|RoomInterface
operator|.
name|RoomSharingRequest
operator|.
name|load
argument_list|(
name|iRoom
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|RoomSharingModel
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iRoomSharingHeader
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedToLoadRoomAvailability
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|RoomSharingModel
name|result
parameter_list|)
block|{
name|iRoomSharingHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
name|iRoomSharing
operator|.
name|setModel
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|iRoomSharing
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|/* 					iRoomSharingNote.setValue(result.hasNote() ? result.getNote() : ""); 					iForm.getRowFormatter().setVisible(iRoomSharingNoteRow, result.isNoteEditable()); 					*/
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iRoom
operator|.
name|hasEventAvailabilityModel
argument_list|()
condition|)
block|{
name|iEventAvailabilityHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
name|iEventAvailability
operator|.
name|setModel
argument_list|(
name|iRoom
operator|.
name|getEventAvailabilityModel
argument_list|()
argument_list|)
expr_stmt|;
name|iEventAvailability
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iEventAvailabilityHeader
operator|.
name|showLoading
argument_list|()
expr_stmt|;
name|iEventAvailability
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
name|RoomInterface
operator|.
name|RoomSharingRequest
operator|.
name|load
argument_list|(
name|iRoom
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|RoomSharingModel
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iEventAvailabilityHeader
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedToLoadRoomAvailability
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|RoomSharingModel
name|result
parameter_list|)
block|{
name|iEventAvailabilityHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
name|iEventAvailability
operator|.
name|setModel
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|iEventAvailability
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|RoomDetailInterface
name|getRoom
parameter_list|()
block|{
return|return
name|iRoom
return|;
block|}
specifier|protected
name|void
name|buildingChanged
parameter_list|()
block|{
name|BuildingInterface
name|building
init|=
name|iProperties
operator|.
name|getBuilding
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|iBuilding
operator|.
name|getValue
argument_list|(
name|iBuilding
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|building
operator|!=
literal|null
condition|)
block|{
name|iX
operator|.
name|setValue
argument_list|(
name|building
operator|.
name|getX
argument_list|()
argument_list|)
expr_stmt|;
name|iY
operator|.
name|setValue
argument_list|(
name|building
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iProperties
operator|.
name|isGoogleMap
argument_list|()
condition|)
name|setMarker
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|typeChanged
parameter_list|()
block|{
name|RoomTypeInterface
name|type
init|=
name|iProperties
operator|.
name|getRoomType
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|iType
operator|.
name|getValue
argument_list|(
name|iType
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|iForm
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iBuildingRow
argument_list|,
name|type
operator|!=
literal|null
operator|&&
name|type
operator|.
name|isRoom
argument_list|()
argument_list|)
expr_stmt|;
name|iNameLabel
operator|.
name|setText
argument_list|(
name|type
operator|!=
literal|null
operator|&&
name|type
operator|.
name|isRoom
argument_list|()
condition|?
name|MESSAGES
operator|.
name|propRoomNumber
argument_list|()
else|:
name|MESSAGES
operator|.
name|propRoomName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|iLastScrollTop
decl_stmt|,
name|iLastScrollLeft
decl_stmt|;
specifier|public
name|void
name|show
parameter_list|()
block|{
name|UniTimePageLabel
operator|.
name|getInstance
argument_list|()
operator|.
name|setPageName
argument_list|(
name|iRoom
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|?
name|MESSAGES
operator|.
name|pageAddRoom
argument_list|()
else|:
name|MESSAGES
operator|.
name|pageEditRoom
argument_list|()
argument_list|)
expr_stmt|;
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iLastScrollLeft
operator|=
name|Window
operator|.
name|getScrollLeft
argument_list|()
expr_stmt|;
name|iLastScrollTop
operator|=
name|Window
operator|.
name|getScrollTop
argument_list|()
expr_stmt|;
name|onShow
argument_list|()
expr_stmt|;
name|Window
operator|.
name|scrollTo
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|iGoogleMap
operator|!=
literal|null
operator|&&
operator|!
name|iGoogleMapInitialized
condition|)
block|{
name|iGoogleMapInitialized
operator|=
literal|true
expr_stmt|;
name|ScriptInjector
operator|.
name|fromUrl
argument_list|(
literal|"https://maps.google.com/maps/api/js?sensor=false&callback=setupGoogleMap"
argument_list|)
operator|.
name|setWindow
argument_list|(
name|ScriptInjector
operator|.
name|TOP_WINDOW
argument_list|)
operator|.
name|setCallback
argument_list|(
operator|new
name|Callback
argument_list|<
name|Void
argument_list|,
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Void
name|result
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|iGoogleMap
operator|=
literal|null
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|inject
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|hide
parameter_list|()
block|{
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|onHide
argument_list|()
expr_stmt|;
name|Window
operator|.
name|scrollTo
argument_list|(
name|iLastScrollLeft
argument_list|,
name|iLastScrollTop
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|onHide
parameter_list|()
block|{
block|}
specifier|protected
name|void
name|onShow
parameter_list|()
block|{
block|}
specifier|protected
specifier|native
name|void
name|addGoogleMap
parameter_list|(
name|Element
name|canvas
parameter_list|,
name|Element
name|control
parameter_list|)
comment|/*-{ 		$wnd.geoceodeMarker = function geoceodeMarker() { 			var searchBox = $doc.getElementById('mapSearchBox');  			$wnd.geocoder.geocode({'location': $wnd.marker.getPosition()}, function(results, status) { 				if (status == $wnd.google.maps.GeocoderStatus.OK) { 					if (results[0]) { 						$wnd.marker.setTitle(results[0].formatted_address); 						searchBox.value = results[0].formatted_address; 					} else { 						$wnd.marker.setTitle(null); 						searchBox.value = ""; 					} 				} else { 					$wnd.marker.setTitle(null); 					searchBox.value = ""; 				} 			}); 		} 		 		$wnd.setupGoogleMap = function setupGoogleMap() { 			var latlng = new $wnd.google.maps.LatLng(50, -58); 			var myOptions = { 				zoom: 2, 				center: latlng, 				mapTypeId: $wnd.google.maps.MapTypeId.ROADMAP 			}; 		 			$wnd.geocoder = new $wnd.google.maps.Geocoder(); 			$wnd.map = new $wnd.google.maps.Map(canvas, myOptions); 			$wnd.marker = new $wnd.google.maps.Marker({ 				position: latlng, 				map: $wnd.map, 				draggable: true, 				visible: false 			}); 		 			$wnd.map.controls[$wnd.google.maps.ControlPosition.BOTTOM_LEFT].push(control);		 		 			var t = null; 			 			$wnd.google.maps.event.addListener($wnd.marker, 'position_changed', function() { 				$doc.getElementById("coordX").value = '' + $wnd.marker.getPosition().lat().toFixed(6); 				$doc.getElementById("coordY").value = '' + $wnd.marker.getPosition().lng().toFixed(6); 				if (t != null) clearTimeout(t); 				t = setTimeout($wnd.geoceodeMarker, 500); 			}); 		 			$wnd.google.maps.event.addListener($wnd.map, 'rightclick', function(event) { 				$wnd.marker.setPosition(event.latLng); 				$wnd.marker.setVisible(true); 			}); 		}; 	}-*/
function_decl|;
specifier|protected
specifier|native
name|void
name|setMarker
parameter_list|()
comment|/*-{ 		var x = $doc.getElementById("coordX").value; 		var y = $doc.getElementById("coordY").value; 		if (x&& y) { 			var pos = new $wnd.google.maps.LatLng(x, y); 			$wnd.marker.setPosition(pos); 			$wnd.marker.setVisible(true); 			if ($wnd.marker.getMap().getZoom()<= 10) $wnd.marker.getMap().setZoom(16); 			$wnd.marker.getMap().panTo(pos); 		} else { 			$wnd.marker.setVisible(false); 		} 	}-*/
function_decl|;
specifier|protected
specifier|native
name|void
name|geocodeAddress
parameter_list|()
comment|/*-{ 		var address = $doc.getElementById("mapSearchBox").value; 		$wnd.geocoder.geocode({ 'address': address }, function(results, status) { 			if (status == $wnd.google.	maps.GeocoderStatus.OK) { 				if (results[0]) { 					$wnd.marker.setPosition(results[0].geometry.location); 					$wnd.marker.setTitle(results[0].formatted_address); 					$wnd.marker.setVisible(true); 					if ($wnd.map.getZoom()<= 10) $wnd.map.setZoom(16); 					$wnd.map.panTo(results[0].geometry.location); 				} else { 					$wnd.marker.setVisible(false); 				} 			} else { 				$wnd.marker.setVisible(false); 			} 		}); 	}-*/
function_decl|;
block|}
end_class

end_unit

