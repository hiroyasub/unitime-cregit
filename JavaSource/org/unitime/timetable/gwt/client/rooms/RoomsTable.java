begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|rooms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|page
operator|.
name|UniTimePageHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|P
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
operator|.
name|AriaOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
operator|.
name|HasColumnName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtAriaMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|DepartmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|ExamTypeInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|FeatureInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|FeatureTypeInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|GroupInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomDetailInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomPictureInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomPropertyInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomsPageMode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|aria
operator|.
name|client
operator|.
name|Roles
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Unit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseOutEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseOutHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseOverEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseOverHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DOM
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|TakesValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
operator|.
name|HorizontalAlignmentConstant
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|RoomsTable
extends|extends
name|UniTimeTable
argument_list|<
name|RoomDetailInterface
argument_list|>
block|{
specifier|protected
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|GwtAriaMessages
name|ARIA
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtAriaMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|GwtResources
name|RESOURCES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtResources
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|GwtConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|GwtRpcServiceAsync
name|RPC
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtRpcService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|int
name|iFlags
init|=
literal|0
decl_stmt|;
specifier|private
name|RoomsComparator
operator|.
name|Column
name|iSortBy
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iAsc
init|=
literal|true
decl_stmt|;
specifier|private
name|RoomsPageMode
name|iMode
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iDepartment
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Operation
argument_list|>
name|iSortOperations
init|=
operator|new
name|ArrayList
argument_list|<
name|Operation
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Operation
argument_list|>
name|iShowHideOperations
init|=
operator|new
name|ArrayList
argument_list|<
name|Operation
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Operation
argument_list|>
name|iDepartmentOperations
init|=
operator|new
name|ArrayList
argument_list|<
name|Operation
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Operation
argument_list|>
name|iOtherOperations
init|=
operator|new
name|ArrayList
argument_list|<
name|Operation
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|FeatureTypeInterface
argument_list|>
name|iFeatureTypes
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|iFirstFeatureTypeColumn
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|RoomsTable
parameter_list|(
name|RoomsPageMode
name|mode
parameter_list|)
block|{
name|setStyleName
argument_list|(
literal|"unitime-Rooms"
argument_list|)
expr_stmt|;
name|iMode
operator|=
name|mode
expr_stmt|;
name|List
argument_list|<
name|UniTimeTableHeader
argument_list|>
name|header
init|=
operator|new
name|ArrayList
argument_list|<
name|UniTimeTableHeader
argument_list|>
argument_list|()
decl_stmt|;
name|UniTimeTableHeader
name|hName
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colName
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hName
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hType
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colType
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hType
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hCapacity
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colCapacity
argument_list|()
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hCapacity
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hExamCapacity
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colExaminationCapacity
argument_list|()
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hExamCapacity
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hArea
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colArea
argument_list|()
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hArea
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hCoordinates
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colCoordinates
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hCoordinates
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hDistances
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colDistances
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hDistances
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hRoomCheck
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colRoomCheck
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hRoomCheck
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hPreference
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colPreference
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hPreference
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hMap
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colMap
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hMap
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hPictures
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colPictures
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hPictures
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hAvailability
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colAvailability
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hAvailability
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hDepartments
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colDepartments
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hDepartments
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hControl
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colControl
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hControl
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hExamTypes
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colExamTypes
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hExamTypes
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hPeriodPrefs
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colPeriodPreferences
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hPeriodPrefs
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hEventDepartment
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colEventDepartment
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hEventDepartment
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hEventStatus
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colEventStatus
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hEventStatus
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hEventAvailability
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colEventAvailability
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hEventAvailability
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hEventMessage
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colEventMessage
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hEventMessage
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hBreakTime
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colBreakTime
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hBreakTime
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hGroups
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colGroups
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hGroups
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hFeatures
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colFeatures
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hFeatures
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
literal|null
argument_list|,
name|header
argument_list|)
expr_stmt|;
name|addHideOperation
argument_list|(
name|hType
argument_list|,
name|RoomFlag
operator|.
name|SHOW_TYPE
argument_list|)
expr_stmt|;
name|addHideOperation
argument_list|(
name|hCapacity
argument_list|,
name|RoomFlag
operator|.
name|SHOW_CAPACITY
argument_list|)
expr_stmt|;
name|addHideOperation
argument_list|(
name|hExamCapacity
argument_list|,
name|RoomFlag
operator|.
name|SHOW_EXAM_CAPACITY
argument_list|)
expr_stmt|;
name|addHideOperation
argument_list|(
name|hArea
argument_list|,
name|RoomFlag
operator|.
name|SHOW_AREA
argument_list|)
expr_stmt|;
name|addHideOperation
argument_list|(
name|hCoordinates
argument_list|,
name|RoomFlag
operator|.
name|SHOW_COORDINATES
argument_list|)
expr_stmt|;
name|addHideOperation
argument_list|(
name|hDistances
argument_list|,
name|RoomFlag
operator|.
name|SHOW_IGNORE_DISTANCES
argument_list|)
expr_stmt|;
name|addHideOperation
argument_list|(
name|hRoomCheck
argument_list|,
name|RoomFlag
operator|.
name|SHOW_IGNORE_ROOM_CHECK
argument_list|)
expr_stmt|;
name|addHideOperation
argument_list|(
name|hPreference
argument_list|,
name|RoomFlag
operator|.
name|SHOW_PREFERENCE
argument_list|)
expr_stmt|;
name|addHideOperation
argument_list|(
name|hMap
argument_list|,
name|RoomFlag
operator|.
name|SHOW_MAP
argument_list|)
expr_stmt|;
name|addHideOperation
argument_list|(
name|hPictures
argument_list|,
name|RoomFlag
operator|.
name|SHOW_PICTURE
argument_list|)
expr_stmt|;
name|addHideOperation
argument_list|(
name|hAvailability
argument_list|,
name|RoomFlag
operator|.
name|SHOW_AVAILABILITY
argument_list|)
expr_stmt|;
name|addHideOperation
argument_list|(
name|hDepartments
argument_list|,
name|RoomFlag
operator|.
name|SHOW_DEPARTMENTS
argument_list|)
expr_stmt|;
name|addHideOperation
argument_list|(
name|hControl
argument_list|,
name|RoomFlag
operator|.
name|SHOW_CONTROLLING_DEPARTMENT
argument_list|)
expr_stmt|;
name|addHideOperation
argument_list|(
name|hExamTypes
argument_list|,
name|RoomFlag
operator|.
name|SHOW_EXAM_TYPES
argument_list|)
expr_stmt|;
name|addHideOperation
argument_list|(
name|hPeriodPrefs
argument_list|,
name|RoomFlag
operator|.
name|SHOW_PERIOD_PREFERENCES
argument_list|)
expr_stmt|;
name|addHideOperation
argument_list|(
name|hEventDepartment
argument_list|,
name|RoomFlag
operator|.
name|SHOW_EVENT_DEPARTMENT
argument_list|)
expr_stmt|;
name|addHideOperation
argument_list|(
name|hEventStatus
argument_list|,
name|RoomFlag
operator|.
name|SHOW_EVENT_STATUS
argument_list|)
expr_stmt|;
name|addHideOperation
argument_list|(
name|hEventAvailability
argument_list|,
name|RoomFlag
operator|.
name|SHOW_EVENT_AVAILABILITY
argument_list|)
expr_stmt|;
name|addHideOperation
argument_list|(
name|hEventMessage
argument_list|,
name|RoomFlag
operator|.
name|SHOW_EVENT_MESSAGE
argument_list|)
expr_stmt|;
name|addHideOperation
argument_list|(
name|hBreakTime
argument_list|,
name|RoomFlag
operator|.
name|SHOW_BREAK_TIME
argument_list|)
expr_stmt|;
name|addHideOperation
argument_list|(
name|hGroups
argument_list|,
name|RoomFlag
operator|.
name|SHOW_GROUPS
argument_list|)
expr_stmt|;
name|addHideOperation
argument_list|(
name|hFeatures
argument_list|,
name|RoomFlag
operator|.
name|SHOW_FEATURES
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|DeptMode
name|d
range|:
name|DeptMode
operator|.
name|values
argument_list|()
control|)
block|{
name|Operation
name|op
init|=
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|RoomCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setDeptMode
argument_list|(
name|d
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|1
init|;
name|r
operator|<
name|getRowCount
argument_list|()
condition|;
name|r
operator|++
control|)
block|{
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|getCellCount
argument_list|(
name|r
argument_list|)
condition|;
name|c
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|r
argument_list|,
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|HasRefresh
condition|)
operator|(
operator|(
name|HasRefresh
operator|)
name|w
operator|)
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|getRowCount
argument_list|()
operator|>
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
name|d
operator|.
name|ordinal
argument_list|()
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
if|if
condition|(
name|RoomCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getDeptMode
argument_list|()
operator|==
name|d
operator|.
name|ordinal
argument_list|()
condition|)
return|return
name|MESSAGES
operator|.
name|opUncheck
argument_list|(
name|d
operator|.
name|getName
argument_list|()
argument_list|)
return|;
else|else
return|return
name|MESSAGES
operator|.
name|opCheck
argument_list|(
name|d
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|iDepartmentOperations
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|hDepartments
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|hControl
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|hEventDepartment
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
name|addSortByOperation
argument_list|(
name|hName
argument_list|,
name|RoomsComparator
operator|.
name|Column
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|addSortByOperation
argument_list|(
name|hType
argument_list|,
name|RoomsComparator
operator|.
name|Column
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|addSortByOperation
argument_list|(
name|hCapacity
argument_list|,
name|RoomsComparator
operator|.
name|Column
operator|.
name|CAPACITY
argument_list|)
expr_stmt|;
name|addSortByOperation
argument_list|(
name|hExamCapacity
argument_list|,
name|RoomsComparator
operator|.
name|Column
operator|.
name|EXAM_CAPACITY
argument_list|)
expr_stmt|;
name|addSortByOperation
argument_list|(
name|hDistances
argument_list|,
name|RoomsComparator
operator|.
name|Column
operator|.
name|DISTANCE
argument_list|)
expr_stmt|;
name|addSortByOperation
argument_list|(
name|hRoomCheck
argument_list|,
name|RoomsComparator
operator|.
name|Column
operator|.
name|ROOM_CHECK
argument_list|)
expr_stmt|;
name|addSortByOperation
argument_list|(
name|hControl
argument_list|,
name|RoomsComparator
operator|.
name|Column
operator|.
name|CONTROL
argument_list|)
expr_stmt|;
name|addSortByOperation
argument_list|(
name|hEventDepartment
argument_list|,
name|RoomsComparator
operator|.
name|Column
operator|.
name|EVENT_DEPT
argument_list|)
expr_stmt|;
name|addSortByOperation
argument_list|(
name|hEventStatus
argument_list|,
name|RoomsComparator
operator|.
name|Column
operator|.
name|EVENT_STATUS
argument_list|)
expr_stmt|;
name|addSortByOperation
argument_list|(
name|hEventMessage
argument_list|,
name|RoomsComparator
operator|.
name|Column
operator|.
name|EVENT_MESSAGE
argument_list|)
expr_stmt|;
name|addSortByOperation
argument_list|(
name|hBreakTime
argument_list|,
name|RoomsComparator
operator|.
name|Column
operator|.
name|BREAK_TIME
argument_list|)
expr_stmt|;
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
specifier|final
name|RoomsTable
name|table
init|=
operator|new
name|RoomsTable
argument_list|(
name|iMode
argument_list|)
decl_stmt|;
name|table
operator|.
name|setDepartment
argument_list|(
name|iDepartment
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
name|table
operator|.
name|addRoom
argument_list|(
name|getData
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setWidth
argument_list|(
literal|1040
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
comment|// Move header row to thead
name|Element
name|headerRow
init|=
name|table
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Element
name|tableElement
init|=
name|table
operator|.
name|getElement
argument_list|()
decl_stmt|;
name|Element
name|thead
init|=
name|DOM
operator|.
name|createTHead
argument_list|()
decl_stmt|;
name|tableElement
operator|.
name|insertFirst
argument_list|(
name|thead
argument_list|)
expr_stmt|;
name|headerRow
operator|.
name|getParentElement
argument_list|()
operator|.
name|removeChild
argument_list|(
name|headerRow
argument_list|)
expr_stmt|;
name|thead
operator|.
name|appendChild
argument_list|(
name|headerRow
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|print
argument_list|(
operator|new
name|ToolBox
operator|.
name|Page
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|pageRooms
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
name|UniTimePageHeader
operator|.
name|getInstance
argument_list|()
operator|.
name|getMiddle
argument_list|()
operator|.
name|getText
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getSession
parameter_list|()
block|{
return|return
name|UniTimePageHeader
operator|.
name|getInstance
argument_list|()
operator|.
name|getRight
argument_list|()
operator|.
name|getText
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Element
name|getBody
parameter_list|()
block|{
return|return
name|table
operator|.
name|getElement
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|buttonPrint
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|getRowCount
argument_list|()
operator|>
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getCellCount
argument_list|(
literal|0
argument_list|)
condition|;
name|i
operator|++
control|)
name|getCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
literal|0
argument_list|,
name|i
argument_list|,
literal|"unitime-ClickableTableHeader"
argument_list|)
expr_stmt|;
name|resetVisibility
argument_list|()
expr_stmt|;
name|setSortBy
argument_list|(
name|RoomCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getRoomsSortBy
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFeatureTypes
parameter_list|(
name|List
argument_list|<
name|FeatureTypeInterface
argument_list|>
name|featureTypes
parameter_list|)
block|{
name|iFeatureTypes
operator|=
name|featureTypes
expr_stmt|;
name|iFirstFeatureTypeColumn
operator|=
name|getCellCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|SmartTableRow
argument_list|<
name|RoomDetailInterface
argument_list|>
name|smartRow
init|=
name|getSmartRow
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iFeatureTypes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|FeatureTypeInterface
name|type
init|=
name|iFeatureTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|UniTimeTableHeader
name|header
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|type
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|int
name|column
init|=
name|i
operator|+
name|iFirstFeatureTypeColumn
decl_stmt|;
name|SmartTableCell
name|cell
init|=
operator|new
name|SmartTableCell
argument_list|(
name|smartRow
argument_list|,
name|header
argument_list|)
decl_stmt|;
name|getFlexCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
literal|0
argument_list|,
name|column
argument_list|,
literal|"unitime-ClickableTableHeader"
argument_list|)
expr_stmt|;
name|header
operator|.
name|setColumn
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|setWidget
argument_list|(
literal|0
argument_list|,
name|column
argument_list|,
name|cell
argument_list|)
expr_stmt|;
name|Roles
operator|.
name|getColumnheaderRole
argument_list|()
operator|.
name|set
argument_list|(
name|getCellFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
literal|0
argument_list|,
name|column
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|flag
init|=
operator|(
literal|1
operator|<<
operator|(
name|RoomFlag
operator|.
name|values
argument_list|()
operator|.
name|length
operator|+
name|i
operator|)
operator|)
decl_stmt|;
specifier|final
name|int
name|ftIdx
init|=
name|i
decl_stmt|;
name|Operation
name|op
init|=
operator|new
name|AriaOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|boolean
name|visible
init|=
name|isColumnVisible
argument_list|(
name|column
argument_list|)
decl_stmt|;
name|setColumnVisible
argument_list|(
name|column
argument_list|,
operator|!
name|visible
argument_list|)
expr_stmt|;
name|RoomCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|set
argument_list|(
name|iMode
argument_list|,
name|ftIdx
argument_list|,
operator|!
name|visible
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
operator|(
operator|(
name|iFlags
operator|&
name|flag
operator|)
operator|!=
literal|0
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|isColumnVisible
argument_list|(
name|header
operator|.
name|getColumn
argument_list|()
argument_list|)
condition|?
name|MESSAGES
operator|.
name|opHide
argument_list|(
name|header
operator|.
name|getHTML
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|" "
argument_list|)
argument_list|)
else|:
name|MESSAGES
operator|.
name|opShow
argument_list|(
name|header
operator|.
name|getHTML
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|" "
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAriaLabel
parameter_list|()
block|{
return|return
name|isColumnVisible
argument_list|(
name|header
operator|.
name|getColumn
argument_list|()
argument_list|)
condition|?
name|ARIA
operator|.
name|opHide
argument_list|(
name|header
operator|.
name|getHTML
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|" "
argument_list|)
argument_list|)
else|:
name|ARIA
operator|.
name|opShow
argument_list|(
name|header
operator|.
name|getHTML
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|" "
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|iShowHideOperations
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colName
argument_list|()
argument_list|)
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colFeatures
argument_list|()
argument_list|)
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|header
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|column
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|Operation
argument_list|>
name|getSortOperations
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|Operation
argument_list|>
name|operations
init|=
operator|new
name|ArrayList
argument_list|<
name|Operation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Operation
name|operation
range|:
name|iSortOperations
control|)
if|if
condition|(
name|operation
operator|.
name|isApplicable
argument_list|()
condition|)
name|operations
operator|.
name|add
argument_list|(
name|operation
argument_list|)
expr_stmt|;
return|return
name|operations
return|;
block|}
specifier|public
name|List
argument_list|<
name|Operation
argument_list|>
name|getShowHideOperations
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|Operation
argument_list|>
name|operations
init|=
operator|new
name|ArrayList
argument_list|<
name|Operation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Operation
name|operation
range|:
name|iShowHideOperations
control|)
if|if
condition|(
name|operation
operator|.
name|isApplicable
argument_list|()
condition|)
name|operations
operator|.
name|add
argument_list|(
name|operation
argument_list|)
expr_stmt|;
return|return
name|operations
return|;
block|}
specifier|public
name|List
argument_list|<
name|Operation
argument_list|>
name|getDepartmentOperations
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|Operation
argument_list|>
name|operations
init|=
operator|new
name|ArrayList
argument_list|<
name|Operation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Operation
name|operation
range|:
name|iDepartmentOperations
control|)
if|if
condition|(
name|operation
operator|.
name|isApplicable
argument_list|()
condition|)
name|operations
operator|.
name|add
argument_list|(
name|operation
argument_list|)
expr_stmt|;
return|return
name|operations
return|;
block|}
specifier|public
name|List
argument_list|<
name|Operation
argument_list|>
name|getOtherOperations
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|Operation
argument_list|>
name|operations
init|=
operator|new
name|ArrayList
argument_list|<
name|Operation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Operation
name|operation
range|:
name|iOtherOperations
control|)
if|if
condition|(
name|operation
operator|.
name|isApplicable
argument_list|()
condition|)
name|operations
operator|.
name|add
argument_list|(
name|operation
argument_list|)
expr_stmt|;
return|return
name|operations
return|;
block|}
specifier|public
name|boolean
name|hasSortBy
parameter_list|()
block|{
return|return
name|iSortBy
operator|!=
literal|null
return|;
block|}
specifier|public
name|int
name|getSortBy
parameter_list|()
block|{
return|return
name|iSortBy
operator|==
literal|null
condition|?
literal|0
else|:
name|iAsc
condition|?
literal|1
operator|+
name|iSortBy
operator|.
name|ordinal
argument_list|()
else|:
operator|-
literal|1
operator|-
name|iSortBy
operator|.
name|ordinal
argument_list|()
return|;
block|}
specifier|public
name|void
name|setSortBy
parameter_list|(
name|int
name|sortBy
parameter_list|)
block|{
if|if
condition|(
name|sortBy
operator|==
literal|0
condition|)
block|{
name|iSortBy
operator|=
literal|null
expr_stmt|;
name|iAsc
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|sortBy
operator|>
literal|0
condition|)
block|{
name|iSortBy
operator|=
name|RoomsComparator
operator|.
name|Column
operator|.
name|values
argument_list|()
index|[
name|sortBy
operator|-
literal|1
index|]
expr_stmt|;
name|iAsc
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|iSortBy
operator|=
name|RoomsComparator
operator|.
name|Column
operator|.
name|values
argument_list|()
index|[
operator|-
literal|1
operator|-
name|sortBy
index|]
expr_stmt|;
name|iAsc
operator|=
literal|false
expr_stmt|;
block|}
name|sort
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|addOperation
parameter_list|(
name|Operation
name|op
parameter_list|)
block|{
name|iOtherOperations
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colName
argument_list|()
argument_list|)
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addSortByOperation
parameter_list|(
specifier|final
name|UniTimeTableHeader
name|header
parameter_list|,
specifier|final
name|RoomsComparator
operator|.
name|Column
name|sortBy
parameter_list|)
block|{
name|Operation
name|op
init|=
operator|new
name|SortOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
if|if
condition|(
name|header
operator|.
name|getOrder
argument_list|()
operator|!=
literal|null
condition|)
name|iAsc
operator|=
operator|!
name|header
operator|.
name|getOrder
argument_list|()
expr_stmt|;
else|else
name|iAsc
operator|=
literal|true
expr_stmt|;
name|iSortBy
operator|=
name|sortBy
expr_stmt|;
name|RoomCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setSortRoomsBy
argument_list|(
name|getSortBy
argument_list|()
argument_list|)
expr_stmt|;
name|sort
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|getRowCount
argument_list|()
operator|>
literal|1
operator|&&
name|header
operator|.
name|isVisible
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opSortBy
argument_list|(
name|getColumnName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getColumnName
parameter_list|()
block|{
return|return
name|header
operator|.
name|getHTML
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|" "
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|iSortOperations
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|header
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|sort
parameter_list|()
block|{
if|if
condition|(
name|iSortBy
operator|==
literal|null
condition|)
return|return;
name|UniTimeTableHeader
name|header
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|iSortBy
condition|)
block|{
case|case
name|NAME
case|:
name|header
operator|=
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|TYPE
case|:
name|header
operator|=
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colType
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|CAPACITY
case|:
name|header
operator|=
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colCapacity
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|EXAM_CAPACITY
case|:
name|header
operator|=
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colExaminationCapacity
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DISTANCE
case|:
name|header
operator|=
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colDistances
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|ROOM_CHECK
case|:
name|header
operator|=
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colRoomCheck
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|CONTROL
case|:
name|header
operator|=
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colControl
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|EVENT_DEPT
case|:
name|header
operator|=
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colEventDepartment
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|EVENT_STATUS
case|:
name|header
operator|=
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colEventStatus
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|EVENT_MESSAGE
case|:
name|header
operator|=
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colEventMessage
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|BREAK_TIME
case|:
name|header
operator|=
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colBreakTime
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
name|sort
argument_list|(
name|header
argument_list|,
operator|new
name|RoomsComparator
argument_list|(
name|iSortBy
argument_list|,
literal|true
argument_list|)
argument_list|,
name|iAsc
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Operation
name|addHideOperation
parameter_list|(
specifier|final
name|UniTimeTableHeader
name|header
parameter_list|,
specifier|final
name|RoomFlag
name|flag
parameter_list|,
specifier|final
name|Check
name|separator
parameter_list|)
block|{
name|Operation
name|op
init|=
operator|new
name|AriaOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|boolean
name|visible
init|=
name|isColumnVisible
argument_list|(
name|header
operator|.
name|getColumn
argument_list|()
argument_list|)
decl_stmt|;
name|setColumnVisible
argument_list|(
name|header
operator|.
name|getColumn
argument_list|()
argument_list|,
operator|!
name|visible
argument_list|)
expr_stmt|;
name|RoomCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|set
argument_list|(
name|iMode
argument_list|,
name|flag
argument_list|,
operator|!
name|visible
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
if|if
condition|(
operator|!
name|flag
operator|.
name|isShowWhenEmpty
argument_list|()
condition|)
return|return
name|flag
operator|.
name|in
argument_list|(
name|iFlags
argument_list|)
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
name|separator
operator|!=
literal|null
operator|&&
name|separator
operator|.
name|isChecked
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|isColumnVisible
argument_list|(
name|header
operator|.
name|getColumn
argument_list|()
argument_list|)
condition|?
name|MESSAGES
operator|.
name|opHide
argument_list|(
name|header
operator|.
name|getHTML
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|" "
argument_list|)
argument_list|)
else|:
name|MESSAGES
operator|.
name|opShow
argument_list|(
name|header
operator|.
name|getHTML
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|" "
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAriaLabel
parameter_list|()
block|{
return|return
name|isColumnVisible
argument_list|(
name|header
operator|.
name|getColumn
argument_list|()
argument_list|)
condition|?
name|ARIA
operator|.
name|opHide
argument_list|(
name|header
operator|.
name|getHTML
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|" "
argument_list|)
argument_list|)
else|:
name|ARIA
operator|.
name|opShow
argument_list|(
name|header
operator|.
name|getHTML
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|" "
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|iShowHideOperations
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colName
argument_list|()
argument_list|)
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|flag
condition|)
block|{
case|case
name|SHOW_EVENT_AVAILABILITY
case|:
case|case
name|SHOW_EVENT_DEPARTMENT
case|:
case|case
name|SHOW_EVENT_MESSAGE
case|:
case|case
name|SHOW_EVENT_STATUS
case|:
case|case
name|SHOW_BREAK_TIME
case|:
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colEventAvailability
argument_list|()
argument_list|)
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colEventDepartment
argument_list|()
argument_list|)
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colEventMessage
argument_list|()
argument_list|)
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colEventStatus
argument_list|()
argument_list|)
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colBreakTime
argument_list|()
argument_list|)
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_CAPACITY
case|:
case|case
name|SHOW_EXAM_CAPACITY
case|:
case|case
name|SHOW_AREA
case|:
case|case
name|SHOW_COORDINATES
case|:
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colExaminationCapacity
argument_list|()
argument_list|)
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colCapacity
argument_list|()
argument_list|)
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colArea
argument_list|()
argument_list|)
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colCoordinates
argument_list|()
argument_list|)
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_DEPARTMENTS
case|:
case|case
name|SHOW_CONTROLLING_DEPARTMENT
case|:
case|case
name|SHOW_AVAILABILITY
case|:
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colDepartments
argument_list|()
argument_list|)
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colControl
argument_list|()
argument_list|)
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colAvailability
argument_list|()
argument_list|)
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_IGNORE_DISTANCES
case|:
case|case
name|SHOW_IGNORE_ROOM_CHECK
case|:
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colRoomCheck
argument_list|()
argument_list|)
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colDistances
argument_list|()
argument_list|)
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_PERIOD_PREFERENCES
case|:
case|case
name|SHOW_EXAM_TYPES
case|:
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colExaminationCapacity
argument_list|()
argument_list|)
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colExamTypes
argument_list|()
argument_list|)
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colPeriodPreferences
argument_list|()
argument_list|)
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
break|break;
default|default:
name|header
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
return|return
name|op
return|;
block|}
specifier|protected
name|Operation
name|addHideOperation
parameter_list|(
specifier|final
name|UniTimeTableHeader
name|header
parameter_list|,
specifier|final
name|RoomFlag
name|flag
parameter_list|)
block|{
return|return
name|addHideOperation
argument_list|(
name|header
argument_list|,
name|flag
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|protected
name|Integer
name|getRow
parameter_list|(
name|Long
name|roomId
parameter_list|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|RoomDetailInterface
name|room
init|=
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|room
operator|!=
literal|null
operator|&&
name|roomId
operator|.
name|equals
argument_list|(
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
return|return
name|row
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setDepartment
parameter_list|(
name|String
name|department
parameter_list|)
block|{
name|iDepartment
operator|=
name|department
expr_stmt|;
block|}
specifier|public
name|int
name|addRoom
parameter_list|(
specifier|final
name|RoomDetailInterface
name|room
parameter_list|)
block|{
name|RoomCookie
name|cookie
init|=
name|RoomCookie
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Widget
argument_list|>
name|widgets
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Label
name|roomLabel
init|=
operator|new
name|Label
argument_list|(
name|room
operator|.
name|hasDisplayName
argument_list|()
condition|?
name|MESSAGES
operator|.
name|label
argument_list|(
name|room
operator|.
name|getLabel
argument_list|()
argument_list|,
name|room
operator|.
name|getDisplayName
argument_list|()
argument_list|)
else|:
name|room
operator|.
name|getLabel
argument_list|()
argument_list|)
decl_stmt|;
name|roomLabel
operator|.
name|addMouseOverHandler
argument_list|(
operator|new
name|MouseOverHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOver
parameter_list|(
name|MouseOverEvent
name|event
parameter_list|)
block|{
name|RoomHint
operator|.
name|showHint
argument_list|(
name|roomLabel
operator|.
name|getElement
argument_list|()
argument_list|,
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|room
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|room
operator|.
name|getProperty
argument_list|(
literal|"distance"
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|roomLabel
operator|.
name|addMouseOutHandler
argument_list|(
operator|new
name|MouseOutHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOut
parameter_list|(
name|MouseOutEvent
name|event
parameter_list|)
block|{
name|RoomHint
operator|.
name|hideHint
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|iDepartment
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DepartmentInterface
name|d
range|:
name|room
operator|.
name|getDepartments
argument_list|()
control|)
block|{
if|if
condition|(
name|iDepartment
operator|.
name|equals
argument_list|(
name|d
operator|.
name|getDeptCode
argument_list|()
argument_list|)
operator|&&
name|d
operator|.
name|getPreference
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|roomLabel
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|d
operator|.
name|getPreference
argument_list|()
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
name|room
operator|.
name|setPrefix
argument_list|(
name|d
operator|.
name|getPreference
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|widgets
operator|.
name|add
argument_list|(
name|roomLabel
argument_list|)
expr_stmt|;
name|widgets
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|room
operator|.
name|getRoomType
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|widgets
operator|.
name|add
argument_list|(
operator|new
name|IntegerCell
argument_list|(
name|room
operator|.
name|getCapacity
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|widgets
operator|.
name|add
argument_list|(
operator|new
name|IntegerCell
argument_list|(
name|room
operator|.
name|getExamCapacity
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|room
operator|.
name|getExamCapacity
argument_list|()
operator|!=
literal|null
condition|)
name|show
argument_list|(
name|RoomFlag
operator|.
name|SHOW_EXAM_CAPACITY
argument_list|)
expr_stmt|;
name|widgets
operator|.
name|add
argument_list|(
operator|new
name|RoomAreaCell
argument_list|(
name|room
operator|.
name|getArea
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|room
operator|.
name|getArea
argument_list|()
operator|!=
literal|null
condition|)
name|show
argument_list|(
name|RoomFlag
operator|.
name|SHOW_AREA
argument_list|)
expr_stmt|;
name|widgets
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|room
operator|.
name|hasCoordinates
argument_list|()
condition|?
name|MESSAGES
operator|.
name|coordinates
argument_list|(
name|room
operator|.
name|getX
argument_list|()
argument_list|,
name|room
operator|.
name|getY
argument_list|()
argument_list|)
else|:
literal|""
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|room
operator|.
name|hasCoordinates
argument_list|()
condition|)
name|show
argument_list|(
name|RoomFlag
operator|.
name|SHOW_COORDINATES
argument_list|)
expr_stmt|;
name|widgets
operator|.
name|add
argument_list|(
operator|new
name|Image
argument_list|(
operator|!
name|room
operator|.
name|isIgnoreTooFar
argument_list|()
condition|?
name|RESOURCES
operator|.
name|on
argument_list|()
else|:
name|RESOURCES
operator|.
name|off
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|widgets
operator|.
name|add
argument_list|(
operator|new
name|Image
argument_list|(
operator|!
name|room
operator|.
name|isIgnoreRoomCheck
argument_list|()
condition|?
name|RESOURCES
operator|.
name|on
argument_list|()
else|:
name|RESOURCES
operator|.
name|off
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|widgets
operator|.
name|add
argument_list|(
operator|new
name|PreferenceCell
argument_list|(
name|room
operator|.
name|getDepartments
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|room
operator|.
name|hasPreference
argument_list|(
name|iDepartment
argument_list|)
condition|)
name|show
argument_list|(
name|RoomFlag
operator|.
name|SHOW_PREFERENCE
argument_list|)
expr_stmt|;
name|widgets
operator|.
name|add
argument_list|(
operator|new
name|MapCell
argument_list|(
name|room
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|room
operator|.
name|hasMiniMapUrl
argument_list|()
condition|)
name|show
argument_list|(
name|RoomFlag
operator|.
name|SHOW_MAP
argument_list|)
expr_stmt|;
name|widgets
operator|.
name|add
argument_list|(
operator|new
name|PicturesCell
argument_list|(
name|room
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|room
operator|.
name|hasPictures
argument_list|()
condition|)
name|show
argument_list|(
name|RoomFlag
operator|.
name|SHOW_PICTURE
argument_list|)
expr_stmt|;
if|if
condition|(
name|room
operator|.
name|getAvailability
argument_list|()
operator|!=
literal|null
condition|)
block|{
specifier|final
name|HTML
name|availability
init|=
operator|new
name|HTML
argument_list|(
name|room
operator|.
name|getAvailability
argument_list|()
argument_list|)
decl_stmt|;
name|availability
operator|.
name|addMouseOverHandler
argument_list|(
operator|new
name|MouseOverHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOver
parameter_list|(
name|MouseOverEvent
name|event
parameter_list|)
block|{
name|RoomSharingHint
operator|.
name|showHint
argument_list|(
name|availability
operator|.
name|getElement
argument_list|()
argument_list|,
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|availability
operator|.
name|addMouseOutHandler
argument_list|(
operator|new
name|MouseOutHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOut
parameter_list|(
name|MouseOutEvent
name|event
parameter_list|)
block|{
name|RoomSharingHint
operator|.
name|hideHint
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|room
operator|.
name|getRoomSharingNote
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|room
operator|.
name|getRoomSharingNote
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|P
name|p
init|=
operator|new
name|P
argument_list|()
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|availability
argument_list|)
expr_stmt|;
name|P
name|note
init|=
operator|new
name|P
argument_list|(
literal|"note"
argument_list|)
decl_stmt|;
name|note
operator|.
name|setHTML
argument_list|(
name|room
operator|.
name|getRoomSharingNote
argument_list|()
argument_list|)
expr_stmt|;
name|note
operator|.
name|setTitle
argument_list|(
name|room
operator|.
name|getRoomSharingNote
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|note
argument_list|)
expr_stmt|;
name|widgets
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|widgets
operator|.
name|add
argument_list|(
name|availability
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|room
operator|.
name|isCanSeeAvailability
argument_list|()
condition|)
block|{
specifier|final
name|Image
name|availability
init|=
operator|new
name|Image
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"pattern?loc="
operator|+
name|room
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"&v="
operator|+
operator|(
name|cookie
operator|.
name|areRoomsHorizontal
argument_list|()
condition|?
literal|"0"
else|:
literal|"1"
operator|)
operator|+
operator|(
name|cookie
operator|.
name|hasMode
argument_list|()
condition|?
literal|"&s="
operator|+
name|cookie
operator|.
name|getMode
argument_list|()
else|:
literal|""
operator|)
argument_list|)
decl_stmt|;
name|availability
operator|.
name|addMouseOverHandler
argument_list|(
operator|new
name|MouseOverHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOver
parameter_list|(
name|MouseOverEvent
name|event
parameter_list|)
block|{
name|RoomSharingHint
operator|.
name|showHint
argument_list|(
name|availability
operator|.
name|getElement
argument_list|()
argument_list|,
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|availability
operator|.
name|addMouseOutHandler
argument_list|(
operator|new
name|MouseOutHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOut
parameter_list|(
name|MouseOutEvent
name|event
parameter_list|)
block|{
name|RoomSharingHint
operator|.
name|hideHint
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|room
operator|.
name|getRoomSharingNote
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|room
operator|.
name|getRoomSharingNote
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|P
name|p
init|=
operator|new
name|P
argument_list|()
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|availability
argument_list|)
expr_stmt|;
name|P
name|note
init|=
operator|new
name|P
argument_list|(
literal|"note"
argument_list|)
decl_stmt|;
name|note
operator|.
name|setHTML
argument_list|(
name|room
operator|.
name|getRoomSharingNote
argument_list|()
argument_list|)
expr_stmt|;
name|note
operator|.
name|setTitle
argument_list|(
name|room
operator|.
name|getRoomSharingNote
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|note
argument_list|)
expr_stmt|;
name|widgets
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|widgets
operator|.
name|add
argument_list|(
name|availability
argument_list|)
expr_stmt|;
block|}
block|}
name|widgets
operator|.
name|add
argument_list|(
operator|new
name|DepartmentCell
argument_list|(
name|room
operator|.
name|getDepartments
argument_list|()
argument_list|,
name|room
operator|.
name|getControlDepartment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|widgets
operator|.
name|add
argument_list|(
operator|new
name|DepartmentCell
argument_list|(
name|room
operator|.
name|getControlDepartment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|widgets
operator|.
name|add
argument_list|(
operator|new
name|ExamTypesCell
argument_list|(
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|room
operator|.
name|getExamTypes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|room
operator|.
name|getExamTypes
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|show
argument_list|(
name|RoomFlag
operator|.
name|SHOW_EXAM_TYPES
argument_list|)
expr_stmt|;
name|Widget
name|periodPrefs
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|room
operator|.
name|getPeriodPreference
argument_list|()
operator|!=
literal|null
condition|)
block|{
specifier|final
name|HTML
name|availability
init|=
operator|new
name|HTML
argument_list|(
name|room
operator|.
name|getPeriodPreference
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|ExamTypeInterface
name|t
range|:
name|room
operator|.
name|getExamTypes
argument_list|()
control|)
block|{
if|if
condition|(
name|t
operator|.
name|getReference
argument_list|()
operator|.
name|equals
argument_list|(
name|iDepartment
argument_list|)
condition|)
block|{
name|availability
operator|.
name|addMouseOverHandler
argument_list|(
operator|new
name|MouseOverHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOver
parameter_list|(
name|MouseOverEvent
name|event
parameter_list|)
block|{
name|PeriodPreferencesHint
operator|.
name|showHint
argument_list|(
name|availability
operator|.
name|getElement
argument_list|()
argument_list|,
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|t
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|availability
operator|.
name|addMouseOutHandler
argument_list|(
operator|new
name|MouseOutHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOut
parameter_list|(
name|MouseOutEvent
name|event
parameter_list|)
block|{
name|PeriodPreferencesHint
operator|.
name|hideHint
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|periodPrefs
operator|=
name|availability
expr_stmt|;
name|show
argument_list|(
name|RoomFlag
operator|.
name|SHOW_PERIOD_PREFERENCES
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
specifier|final
name|ExamTypeInterface
name|t
range|:
name|room
operator|.
name|getExamTypes
argument_list|()
control|)
block|{
if|if
condition|(
name|t
operator|.
name|getReference
argument_list|()
operator|.
name|equals
argument_list|(
name|iDepartment
argument_list|)
condition|)
block|{
specifier|final
name|Image
name|pattern
init|=
operator|new
name|Image
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"pattern?loc="
operator|+
name|room
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"&xt="
operator|+
name|t
operator|.
name|getId
argument_list|()
operator|+
literal|"&v="
operator|+
operator|(
name|cookie
operator|.
name|areRoomsHorizontal
argument_list|()
condition|?
literal|"0"
else|:
literal|"1"
operator|)
operator|+
operator|(
name|cookie
operator|.
name|hasMode
argument_list|()
condition|?
literal|"&s="
operator|+
name|cookie
operator|.
name|getMode
argument_list|()
else|:
literal|""
operator|)
argument_list|)
decl_stmt|;
name|show
argument_list|(
name|RoomFlag
operator|.
name|SHOW_PERIOD_PREFERENCES
argument_list|)
expr_stmt|;
name|pattern
operator|.
name|addMouseOverHandler
argument_list|(
operator|new
name|MouseOverHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOver
parameter_list|(
name|MouseOverEvent
name|event
parameter_list|)
block|{
name|PeriodPreferencesHint
operator|.
name|showHint
argument_list|(
name|pattern
operator|.
name|getElement
argument_list|()
argument_list|,
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|t
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|pattern
operator|.
name|addMouseOutHandler
argument_list|(
operator|new
name|MouseOutHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOut
parameter_list|(
name|MouseOutEvent
name|event
parameter_list|)
block|{
name|PeriodPreferencesHint
operator|.
name|hideHint
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|periodPrefs
operator|=
name|pattern
expr_stmt|;
break|break;
block|}
block|}
block|}
name|widgets
operator|.
name|add
argument_list|(
name|periodPrefs
operator|==
literal|null
condition|?
operator|new
name|Label
argument_list|(
literal|""
argument_list|)
else|:
name|periodPrefs
argument_list|)
expr_stmt|;
specifier|final
name|DepartmentCell
name|edc
init|=
operator|new
name|DepartmentCell
argument_list|(
name|room
operator|.
name|getEventDepartment
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|room
operator|.
name|getEventDepartment
argument_list|()
operator|!=
literal|null
operator|&&
name|room
operator|.
name|isCanSeeEventAvailability
argument_list|()
condition|)
block|{
name|edc
operator|.
name|addMouseOverHandler
argument_list|(
operator|new
name|MouseOverHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOver
parameter_list|(
name|MouseOverEvent
name|event
parameter_list|)
block|{
name|RoomSharingHint
operator|.
name|showHint
argument_list|(
name|edc
operator|.
name|getElement
argument_list|()
argument_list|,
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|edc
operator|.
name|addMouseOutHandler
argument_list|(
operator|new
name|MouseOutHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOut
parameter_list|(
name|MouseOutEvent
name|event
parameter_list|)
block|{
name|RoomSharingHint
operator|.
name|hideHint
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|show
argument_list|(
name|RoomFlag
operator|.
name|SHOW_EVENT_DEPARTMENT
argument_list|)
expr_stmt|;
block|}
name|widgets
operator|.
name|add
argument_list|(
name|edc
argument_list|)
expr_stmt|;
name|widgets
operator|.
name|add
argument_list|(
operator|new
name|StatusCell
argument_list|(
name|room
operator|.
name|getEventStatus
argument_list|()
argument_list|,
name|room
operator|.
name|getDefaultEventStatus
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|room
operator|.
name|getEventStatus
argument_list|()
operator|!=
literal|null
operator|||
name|room
operator|.
name|getDefaultEventStatus
argument_list|()
operator|!=
literal|null
condition|)
name|show
argument_list|(
name|RoomFlag
operator|.
name|SHOW_EVENT_STATUS
argument_list|)
expr_stmt|;
name|Widget
name|eventAvail
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|room
operator|.
name|getEventAvailability
argument_list|()
operator|!=
literal|null
condition|)
block|{
specifier|final
name|HTML
name|availability
init|=
operator|new
name|HTML
argument_list|(
name|room
operator|.
name|getEventAvailability
argument_list|()
argument_list|)
decl_stmt|;
name|availability
operator|.
name|addMouseOverHandler
argument_list|(
operator|new
name|MouseOverHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOver
parameter_list|(
name|MouseOverEvent
name|event
parameter_list|)
block|{
name|RoomSharingHint
operator|.
name|showHint
argument_list|(
name|availability
operator|.
name|getElement
argument_list|()
argument_list|,
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|availability
operator|.
name|addMouseOutHandler
argument_list|(
operator|new
name|MouseOutHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOut
parameter_list|(
name|MouseOutEvent
name|event
parameter_list|)
block|{
name|RoomSharingHint
operator|.
name|hideHint
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|eventAvail
operator|=
name|availability
expr_stmt|;
name|show
argument_list|(
name|RoomFlag
operator|.
name|SHOW_EVENT_AVAILABILITY
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|room
operator|.
name|isCanSeeEventAvailability
argument_list|()
condition|)
block|{
specifier|final
name|Image
name|availability
init|=
operator|new
name|Image
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"pattern?loc="
operator|+
name|room
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"&e=1&v="
operator|+
operator|(
name|cookie
operator|.
name|areRoomsHorizontal
argument_list|()
condition|?
literal|"0"
else|:
literal|"1"
operator|)
operator|+
operator|(
name|cookie
operator|.
name|hasMode
argument_list|()
condition|?
literal|"&s="
operator|+
name|cookie
operator|.
name|getMode
argument_list|()
else|:
literal|""
operator|)
argument_list|)
decl_stmt|;
name|availability
operator|.
name|addMouseOverHandler
argument_list|(
operator|new
name|MouseOverHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOver
parameter_list|(
name|MouseOverEvent
name|event
parameter_list|)
block|{
name|RoomSharingHint
operator|.
name|showHint
argument_list|(
name|availability
operator|.
name|getElement
argument_list|()
argument_list|,
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|availability
operator|.
name|addMouseOutHandler
argument_list|(
operator|new
name|MouseOutHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOut
parameter_list|(
name|MouseOutEvent
name|event
parameter_list|)
block|{
name|RoomSharingHint
operator|.
name|hideHint
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|eventAvail
operator|=
name|availability
expr_stmt|;
name|show
argument_list|(
name|RoomFlag
operator|.
name|SHOW_EVENT_AVAILABILITY
argument_list|)
expr_stmt|;
block|}
name|widgets
operator|.
name|add
argument_list|(
name|eventAvail
operator|==
literal|null
condition|?
operator|new
name|Label
argument_list|(
literal|""
argument_list|)
else|:
name|eventAvail
argument_list|)
expr_stmt|;
name|widgets
operator|.
name|add
argument_list|(
operator|new
name|NoteCell
argument_list|(
name|room
operator|.
name|getEventNote
argument_list|()
argument_list|,
name|room
operator|.
name|getDefaultEventNote
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|room
operator|.
name|hasEventNote
argument_list|()
operator|||
name|room
operator|.
name|hasDefaultEventNote
argument_list|()
condition|)
name|show
argument_list|(
name|RoomFlag
operator|.
name|SHOW_EVENT_MESSAGE
argument_list|)
expr_stmt|;
name|widgets
operator|.
name|add
argument_list|(
operator|new
name|BreakTimeCell
argument_list|(
name|room
operator|.
name|getBreakTime
argument_list|()
argument_list|,
name|room
operator|.
name|getDefaultBreakTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|room
operator|.
name|getBreakTime
argument_list|()
operator|!=
literal|null
condition|)
name|show
argument_list|(
name|RoomFlag
operator|.
name|SHOW_BREAK_TIME
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|GroupInterface
argument_list|>
name|groups
init|=
name|room
operator|.
name|getGroups
argument_list|()
decl_stmt|;
name|widgets
operator|.
name|add
argument_list|(
operator|new
name|GroupsCell
argument_list|(
name|groups
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|groups
operator|.
name|isEmpty
argument_list|()
condition|)
name|show
argument_list|(
name|RoomFlag
operator|.
name|SHOW_GROUPS
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FeatureInterface
argument_list|>
name|features
init|=
name|room
operator|.
name|getFeatures
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|widgets
operator|.
name|add
argument_list|(
operator|new
name|FeaturesCell
argument_list|(
name|features
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|features
operator|.
name|isEmpty
argument_list|()
condition|)
name|show
argument_list|(
name|RoomFlag
operator|.
name|SHOW_FEATURES
argument_list|)
expr_stmt|;
if|if
condition|(
name|iFeatureTypes
operator|!=
literal|null
condition|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iFeatureTypes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|FeatureTypeInterface
name|type
init|=
name|iFeatureTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FeatureInterface
argument_list|>
name|featuresOfType
init|=
name|room
operator|.
name|getFeatures
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|widgets
operator|.
name|add
argument_list|(
operator|new
name|FeaturesCell
argument_list|(
name|featuresOfType
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|featuresOfType
operator|.
name|isEmpty
argument_list|()
condition|)
name|show
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|int
name|row
init|=
name|addRow
argument_list|(
name|room
argument_list|,
name|widgets
argument_list|)
decl_stmt|;
name|getRowFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
literal|"row"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|getCellCount
argument_list|(
name|row
argument_list|)
condition|;
name|col
operator|++
control|)
name|getCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
literal|"cell"
argument_list|)
expr_stmt|;
return|return
name|row
return|;
block|}
specifier|protected
name|int
name|getColumn
parameter_list|(
name|RoomFlag
name|flag
parameter_list|)
block|{
switch|switch
condition|(
name|flag
condition|)
block|{
case|case
name|SHOW_AREA
case|:
return|return
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colArea
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
return|;
case|case
name|SHOW_AVAILABILITY
case|:
return|return
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colAvailability
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
return|;
case|case
name|SHOW_BREAK_TIME
case|:
return|return
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colBreakTime
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
return|;
case|case
name|SHOW_CAPACITY
case|:
return|return
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colCapacity
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
return|;
case|case
name|SHOW_CONTROLLING_DEPARTMENT
case|:
return|return
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colControl
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
return|;
case|case
name|SHOW_COORDINATES
case|:
return|return
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colCoordinates
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
return|;
case|case
name|SHOW_PREFERENCE
case|:
return|return
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colPreference
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
return|;
case|case
name|SHOW_DEPARTMENTS
case|:
return|return
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colDepartments
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
return|;
case|case
name|SHOW_EVENT_AVAILABILITY
case|:
return|return
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colEventAvailability
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
return|;
case|case
name|SHOW_EVENT_DEPARTMENT
case|:
return|return
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colEventDepartment
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
return|;
case|case
name|SHOW_EVENT_MESSAGE
case|:
return|return
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colEventMessage
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
return|;
case|case
name|SHOW_EVENT_STATUS
case|:
return|return
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colEventStatus
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
return|;
case|case
name|SHOW_EXAM_CAPACITY
case|:
return|return
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colExaminationCapacity
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
return|;
case|case
name|SHOW_EXAM_TYPES
case|:
return|return
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colExamTypes
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
return|;
case|case
name|SHOW_FEATURES
case|:
return|return
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colFeatures
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
return|;
case|case
name|SHOW_GROUPS
case|:
return|return
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colGroups
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
return|;
case|case
name|SHOW_IGNORE_DISTANCES
case|:
return|return
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colDistances
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
return|;
case|case
name|SHOW_IGNORE_ROOM_CHECK
case|:
return|return
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colRoomCheck
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
return|;
case|case
name|SHOW_PERIOD_PREFERENCES
case|:
return|return
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colPeriodPreferences
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
return|;
case|case
name|SHOW_MAP
case|:
return|return
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colMap
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
return|;
case|case
name|SHOW_PICTURE
case|:
return|return
name|getHeader
argument_list|(
name|MESSAGES
operator|.
name|colPictures
argument_list|()
argument_list|)
operator|.
name|getColumn
argument_list|()
return|;
default|default:
return|return
literal|0
return|;
block|}
block|}
specifier|protected
name|void
name|resetVisibility
parameter_list|()
block|{
name|RoomCookie
name|cookie
init|=
name|RoomCookie
operator|.
name|getInstance
argument_list|()
decl_stmt|;
for|for
control|(
name|RoomFlag
name|flag
range|:
name|RoomFlag
operator|.
name|values
argument_list|()
control|)
block|{
name|setColumnVisible
argument_list|(
name|getColumn
argument_list|(
name|flag
argument_list|)
argument_list|,
name|cookie
operator|.
name|get
argument_list|(
name|iMode
argument_list|,
name|flag
argument_list|)
operator|&&
name|flag
operator|.
name|isShowWhenEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iFeatureTypes
operator|!=
literal|null
condition|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iFeatureTypes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|setColumnVisible
argument_list|(
name|iFirstFeatureTypeColumn
operator|+
name|i
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|show
parameter_list|(
name|RoomFlag
name|f
parameter_list|)
block|{
name|int
name|col
init|=
name|getColumn
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
name|RoomCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|iMode
argument_list|,
name|f
argument_list|)
operator|&&
operator|!
name|isColumnVisible
argument_list|(
name|col
argument_list|)
condition|)
name|setColumnVisible
argument_list|(
name|col
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|isShowWhenEmpty
argument_list|()
condition|)
name|iFlags
operator|=
name|f
operator|.
name|set
argument_list|(
name|iFlags
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|show
parameter_list|(
name|int
name|ftIdx
parameter_list|)
block|{
name|int
name|flag
init|=
operator|(
literal|1
operator|<<
operator|(
name|RoomFlag
operator|.
name|values
argument_list|()
operator|.
name|length
operator|+
name|ftIdx
operator|)
operator|)
decl_stmt|;
if|if
condition|(
name|RoomCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|iMode
argument_list|,
name|ftIdx
argument_list|)
operator|&&
operator|!
name|isColumnVisible
argument_list|(
name|iFirstFeatureTypeColumn
operator|+
name|ftIdx
argument_list|)
condition|)
name|setColumnVisible
argument_list|(
name|iFirstFeatureTypeColumn
operator|+
name|ftIdx
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|iFlags
operator|&
name|flag
operator|)
operator|==
literal|0
condition|)
name|iFlags
operator|+=
name|flag
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearTable
parameter_list|(
name|int
name|headerRows
parameter_list|)
block|{
name|super
operator|.
name|clearTable
argument_list|(
name|headerRows
argument_list|)
expr_stmt|;
name|resetVisibility
argument_list|()
expr_stmt|;
name|iFlags
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|int
name|getFlags
parameter_list|()
block|{
return|return
name|iFlags
return|;
block|}
specifier|public
specifier|static
class|class
name|WaitingCell
extends|extends
name|Image
implements|implements
name|UniTimeTable
operator|.
name|HasColSpan
implements|,
name|UniTimeTable
operator|.
name|HasCellAlignment
block|{
specifier|private
name|int
name|iColSpan
decl_stmt|;
specifier|public
name|WaitingCell
parameter_list|(
name|int
name|colspan
parameter_list|)
block|{
name|super
argument_list|(
name|RESOURCES
operator|.
name|loading_small
argument_list|()
argument_list|)
expr_stmt|;
name|iColSpan
operator|=
name|colspan
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getColSpan
parameter_list|()
block|{
return|return
name|iColSpan
return|;
block|}
annotation|@
name|Override
specifier|public
name|HorizontalAlignmentConstant
name|getCellAlignment
parameter_list|()
block|{
return|return
name|HasHorizontalAlignment
operator|.
name|ALIGN_CENTER
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|IntegerCell
extends|extends
name|Label
implements|implements
name|UniTimeTable
operator|.
name|HasCellAlignment
implements|,
name|UniTimeTable
operator|.
name|HasColSpan
implements|,
name|TakesValue
argument_list|<
name|Integer
argument_list|>
block|{
specifier|public
name|IntegerCell
parameter_list|(
name|Integer
name|value
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|Integer
name|value
parameter_list|)
block|{
name|setText
argument_list|(
name|value
operator|==
literal|null
condition|?
literal|""
else|:
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|getValue
parameter_list|()
block|{
return|return
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|Integer
argument_list|(
name|getText
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|HorizontalAlignmentConstant
name|getCellAlignment
parameter_list|()
block|{
return|return
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getColSpan
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|RoomAreaCell
extends|extends
name|HTML
implements|implements
name|UniTimeTable
operator|.
name|HasCellAlignment
block|{
specifier|public
name|RoomAreaCell
parameter_list|(
name|Double
name|value
parameter_list|)
block|{
name|super
argument_list|(
name|value
operator|==
literal|null
condition|?
literal|""
else|:
name|MESSAGES
operator|.
name|roomArea
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|HorizontalAlignmentConstant
name|getCellAlignment
parameter_list|()
block|{
return|return
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|FeaturesCell
extends|extends
name|P
implements|implements
name|HasRefresh
block|{
name|Map
argument_list|<
name|FeatureInterface
argument_list|,
name|P
argument_list|>
name|iFeatures
init|=
operator|new
name|HashMap
argument_list|<
name|FeatureInterface
argument_list|,
name|P
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|FeaturesCell
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|FeatureInterface
argument_list|>
name|features
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|setStyleName
argument_list|(
literal|"features"
argument_list|)
expr_stmt|;
for|for
control|(
name|FeatureInterface
name|feature
range|:
name|features
control|)
block|{
name|P
name|p
init|=
operator|new
name|P
argument_list|(
literal|"feature"
argument_list|)
decl_stmt|;
name|p
operator|.
name|setText
argument_list|(
name|feature
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|feature
operator|.
name|getTitle
argument_list|()
operator|!=
literal|null
condition|)
name|p
operator|.
name|setTitle
argument_list|(
name|feature
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|feature
operator|.
name|getDepartment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|setText
argument_list|(
name|feature
operator|.
name|getLabel
argument_list|()
operator|+
literal|" ("
operator|+
name|RoomsTable
operator|.
name|toString
argument_list|(
name|feature
operator|.
name|getDepartment
argument_list|()
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|feature
operator|.
name|getDepartment
argument_list|()
operator|.
name|getColor
argument_list|()
operator|!=
literal|null
condition|)
name|p
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|feature
operator|.
name|getDepartment
argument_list|()
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iFeatures
operator|.
name|put
argument_list|(
name|feature
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|refresh
parameter_list|()
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|FeatureInterface
argument_list|,
name|P
argument_list|>
name|e
range|:
name|iFeatures
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|P
name|p
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|FeatureInterface
name|feature
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|feature
operator|.
name|getType
argument_list|()
operator|==
literal|null
operator|&&
name|feature
operator|.
name|getDepartment
argument_list|()
operator|!=
literal|null
condition|)
name|p
operator|.
name|setText
argument_list|(
name|feature
operator|.
name|getLabel
argument_list|()
operator|+
literal|" ("
operator|+
name|RoomsTable
operator|.
name|toString
argument_list|(
name|feature
operator|.
name|getDepartment
argument_list|()
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|GroupsCell
extends|extends
name|P
implements|implements
name|HasRefresh
block|{
name|Map
argument_list|<
name|GroupInterface
argument_list|,
name|P
argument_list|>
name|iGroups
init|=
operator|new
name|HashMap
argument_list|<
name|GroupInterface
argument_list|,
name|P
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|GroupsCell
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|GroupInterface
argument_list|>
name|groups
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|setStyleName
argument_list|(
literal|"groups"
argument_list|)
expr_stmt|;
for|for
control|(
name|GroupInterface
name|group
range|:
name|groups
control|)
block|{
name|P
name|p
init|=
operator|new
name|P
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
name|p
operator|.
name|setText
argument_list|(
name|group
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|group
operator|.
name|getTitle
argument_list|()
operator|!=
literal|null
condition|)
name|p
operator|.
name|setTitle
argument_list|(
name|group
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|group
operator|.
name|getDepartment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|setText
argument_list|(
name|group
operator|.
name|getLabel
argument_list|()
operator|+
literal|" ("
operator|+
name|RoomsTable
operator|.
name|toString
argument_list|(
name|group
operator|.
name|getDepartment
argument_list|()
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|group
operator|.
name|getDepartment
argument_list|()
operator|.
name|getColor
argument_list|()
operator|!=
literal|null
condition|)
name|p
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|group
operator|.
name|getDepartment
argument_list|()
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iGroups
operator|.
name|put
argument_list|(
name|group
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|refresh
parameter_list|()
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|GroupInterface
argument_list|,
name|P
argument_list|>
name|e
range|:
name|iGroups
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|P
name|p
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|GroupInterface
name|group
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|group
operator|.
name|getDepartment
argument_list|()
operator|!=
literal|null
condition|)
name|p
operator|.
name|setText
argument_list|(
name|group
operator|.
name|getLabel
argument_list|()
operator|+
literal|" ("
operator|+
name|RoomsTable
operator|.
name|toString
argument_list|(
name|group
operator|.
name|getDepartment
argument_list|()
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|NoteCell
extends|extends
name|P
block|{
specifier|public
name|NoteCell
parameter_list|(
name|String
name|note
parameter_list|,
name|String
name|defaultNote
parameter_list|)
block|{
name|super
argument_list|(
literal|"note"
argument_list|)
expr_stmt|;
if|if
condition|(
name|note
operator|!=
literal|null
condition|)
block|{
name|setHTML
argument_list|(
name|note
operator|.
name|replace
argument_list|(
literal|"\\n"
argument_list|,
literal|"<br>"
argument_list|)
argument_list|)
expr_stmt|;
name|setTitle
argument_list|(
name|note
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|defaultNote
operator|!=
literal|null
condition|)
block|{
name|addStyleName
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|setHTML
argument_list|(
name|defaultNote
operator|.
name|replace
argument_list|(
literal|"\\n"
argument_list|,
literal|"<br>"
argument_list|)
argument_list|)
expr_stmt|;
name|setTitle
argument_list|(
name|defaultNote
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|StatusCell
extends|extends
name|P
block|{
specifier|public
name|StatusCell
parameter_list|(
name|Integer
name|status
parameter_list|,
name|Integer
name|defaultStatus
parameter_list|)
block|{
name|super
argument_list|(
literal|"status"
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
condition|)
block|{
name|setHTML
argument_list|(
name|CONSTANTS
operator|.
name|eventStatusAbbv
argument_list|()
index|[
name|status
index|]
argument_list|)
expr_stmt|;
name|setTitle
argument_list|(
name|CONSTANTS
operator|.
name|eventStatusName
argument_list|()
index|[
name|status
index|]
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|defaultStatus
operator|!=
literal|null
condition|)
block|{
name|addStyleName
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|setText
argument_list|(
name|CONSTANTS
operator|.
name|eventStatusAbbv
argument_list|()
index|[
name|defaultStatus
index|]
argument_list|)
expr_stmt|;
name|setTitle
argument_list|(
name|CONSTANTS
operator|.
name|eventStatusName
argument_list|()
index|[
name|defaultStatus
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setHTML
argument_list|(
name|CONSTANTS
operator|.
name|eventStatusAbbv
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|setTitle
argument_list|(
name|CONSTANTS
operator|.
name|eventStatusName
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|BreakTimeCell
extends|extends
name|P
block|{
specifier|public
name|BreakTimeCell
parameter_list|(
name|Integer
name|breakTime
parameter_list|,
name|Integer
name|defaultBreakTime
parameter_list|)
block|{
name|super
argument_list|(
literal|"break"
argument_list|)
expr_stmt|;
if|if
condition|(
name|breakTime
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|breakTime
operator|!=
literal|0
condition|)
name|setText
argument_list|(
name|breakTime
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|defaultBreakTime
operator|!=
literal|null
condition|)
block|{
name|addStyleName
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
if|if
condition|(
name|defaultBreakTime
operator|!=
literal|0
condition|)
name|setText
argument_list|(
name|defaultBreakTime
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|DepartmentInterface
name|d
parameter_list|)
block|{
name|RoomCookie
name|cookie
init|=
name|RoomCookie
operator|.
name|getInstance
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|DeptMode
operator|.
name|values
argument_list|()
index|[
name|cookie
operator|.
name|getDeptMode
argument_list|()
index|]
condition|)
block|{
case|case
name|ABBV
case|:
return|return
name|d
operator|.
name|getExtAbbreviationWhenExist
argument_list|()
return|;
case|case
name|CODE
case|:
return|return
name|d
operator|.
name|getDeptCode
argument_list|()
return|;
case|case
name|ABBV_NAME
case|:
return|return
name|d
operator|.
name|getExtAbbreviationWhenExist
argument_list|()
operator|+
literal|" - "
operator|+
name|d
operator|.
name|getExtLabelWhenExist
argument_list|()
return|;
case|case
name|CODE_NAME
case|:
return|return
name|d
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|" - "
operator|+
name|d
operator|.
name|getLabel
argument_list|()
return|;
case|case
name|NAME
case|:
return|return
name|d
operator|.
name|getExtLabelWhenExist
argument_list|()
return|;
default|default:
return|return
name|d
operator|.
name|getExtAbbreviationWhenExist
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DepartmentCell
extends|extends
name|P
implements|implements
name|HasRefresh
block|{
name|Map
argument_list|<
name|DepartmentInterface
argument_list|,
name|P
argument_list|>
name|iP
init|=
operator|new
name|HashMap
argument_list|<
name|DepartmentInterface
argument_list|,
name|P
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|DepartmentCell
parameter_list|(
name|DepartmentInterface
modifier|...
name|departments
parameter_list|)
block|{
name|super
argument_list|(
literal|"departments"
argument_list|)
expr_stmt|;
for|for
control|(
name|DepartmentInterface
name|department
range|:
name|departments
control|)
block|{
if|if
condition|(
name|department
operator|==
literal|null
condition|)
continue|continue;
name|P
name|p
init|=
operator|new
name|P
argument_list|(
literal|"department"
argument_list|)
decl_stmt|;
name|p
operator|.
name|setText
argument_list|(
name|RoomsTable
operator|.
name|toString
argument_list|(
name|department
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|department
operator|.
name|getTitle
argument_list|()
operator|!=
literal|null
condition|)
name|p
operator|.
name|setTitle
argument_list|(
name|department
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|department
operator|.
name|getColor
argument_list|()
operator|!=
literal|null
condition|)
name|p
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|department
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|iP
operator|.
name|put
argument_list|(
name|department
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|DepartmentCell
parameter_list|(
name|List
argument_list|<
name|DepartmentInterface
argument_list|>
name|departments
parameter_list|,
name|DepartmentInterface
name|control
parameter_list|)
block|{
name|super
argument_list|(
literal|"departments"
argument_list|)
expr_stmt|;
for|for
control|(
name|DepartmentInterface
name|department
range|:
name|departments
control|)
block|{
name|P
name|p
init|=
operator|new
name|P
argument_list|(
literal|"department"
argument_list|)
decl_stmt|;
name|p
operator|.
name|setText
argument_list|(
name|RoomsTable
operator|.
name|toString
argument_list|(
name|department
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|department
operator|.
name|getTitle
argument_list|()
operator|!=
literal|null
condition|)
name|p
operator|.
name|setTitle
argument_list|(
name|department
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|department
operator|.
name|getColor
argument_list|()
operator|!=
literal|null
condition|)
name|p
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|department
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|department
operator|.
name|equals
argument_list|(
name|control
argument_list|)
condition|)
name|p
operator|.
name|addStyleName
argument_list|(
literal|"control"
argument_list|)
expr_stmt|;
name|iP
operator|.
name|put
argument_list|(
name|department
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|refresh
parameter_list|()
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|DepartmentInterface
argument_list|,
name|P
argument_list|>
name|e
range|:
name|iP
operator|.
name|entrySet
argument_list|()
control|)
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|setText
argument_list|(
name|RoomsTable
operator|.
name|toString
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|PreferenceCell
extends|extends
name|DepartmentCell
block|{
specifier|public
name|PreferenceCell
parameter_list|(
name|List
argument_list|<
name|DepartmentInterface
argument_list|>
name|departments
parameter_list|)
block|{
name|addStyleName
argument_list|(
literal|"departments"
argument_list|)
expr_stmt|;
for|for
control|(
name|DepartmentInterface
name|department
range|:
name|departments
control|)
block|{
if|if
condition|(
name|department
operator|.
name|getPreference
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|P
name|p
init|=
operator|new
name|P
argument_list|(
literal|"department"
argument_list|)
decl_stmt|;
name|p
operator|.
name|setText
argument_list|(
name|RoomsTable
operator|.
name|toString
argument_list|(
name|department
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setTitle
argument_list|(
name|department
operator|.
name|getPreference
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|department
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|department
operator|.
name|getPreference
argument_list|()
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
name|iP
operator|.
name|put
argument_list|(
name|department
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|ExamTypesCell
extends|extends
name|P
block|{
specifier|public
name|ExamTypesCell
parameter_list|(
specifier|final
name|Long
name|roomId
parameter_list|,
name|List
argument_list|<
name|ExamTypeInterface
argument_list|>
name|examTypes
parameter_list|)
block|{
name|super
argument_list|(
literal|"exam-types"
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|ExamTypeInterface
name|examType
range|:
name|examTypes
control|)
block|{
specifier|final
name|P
name|p
init|=
operator|new
name|P
argument_list|(
name|examType
operator|.
name|isFinal
argument_list|()
condition|?
literal|"final"
else|:
literal|"midterm"
argument_list|)
decl_stmt|;
name|p
operator|.
name|setText
argument_list|(
name|examType
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|setTitle
argument_list|(
name|examType
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|addMouseOverHandler
argument_list|(
operator|new
name|MouseOverHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOver
parameter_list|(
name|MouseOverEvent
name|event
parameter_list|)
block|{
name|PeriodPreferencesHint
operator|.
name|showHint
argument_list|(
name|p
operator|.
name|getElement
argument_list|()
argument_list|,
name|roomId
argument_list|,
name|examType
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|p
operator|.
name|addMouseOutHandler
argument_list|(
operator|new
name|MouseOutHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOut
parameter_list|(
name|MouseOutEvent
name|event
parameter_list|)
block|{
name|PeriodPreferencesHint
operator|.
name|hideHint
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|RoomCell
extends|extends
name|Label
block|{
specifier|public
name|RoomCell
parameter_list|(
name|RoomPropertyInterface
name|property
parameter_list|)
block|{
name|super
argument_list|(
name|property
operator|==
literal|null
condition|?
literal|""
else|:
name|property
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|property
operator|.
name|getTitle
argument_list|()
operator|!=
literal|null
condition|)
name|setTitle
argument_list|(
name|property
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|property
operator|.
name|getColor
argument_list|()
operator|!=
literal|null
condition|)
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|property
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|PictureCell
extends|extends
name|Image
block|{
specifier|public
name|PictureCell
parameter_list|(
name|RoomPictureInterface
name|picture
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|setStyleName
argument_list|(
literal|"picture"
argument_list|)
expr_stmt|;
name|setUrl
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"picture?id="
operator|+
name|picture
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|setAltText
argument_list|(
name|picture
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|PicturesCell
extends|extends
name|P
block|{
specifier|public
name|PicturesCell
parameter_list|(
name|RoomDetailInterface
name|room
parameter_list|)
block|{
name|super
argument_list|(
literal|"pictures"
argument_list|)
expr_stmt|;
if|if
condition|(
name|room
operator|.
name|hasPictures
argument_list|()
condition|)
block|{
for|for
control|(
name|RoomPictureInterface
name|picture
range|:
name|room
operator|.
name|getPictures
argument_list|()
control|)
name|add
argument_list|(
operator|new
name|PictureCell
argument_list|(
name|picture
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|MapCell
extends|extends
name|Image
block|{
specifier|public
name|MapCell
parameter_list|(
name|RoomDetailInterface
name|room
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
if|if
condition|(
name|room
operator|.
name|hasMiniMapUrl
argument_list|()
condition|)
block|{
name|setStyleName
argument_list|(
literal|"map"
argument_list|)
expr_stmt|;
name|setUrl
argument_list|(
name|room
operator|.
name|getMiniMapUrl
argument_list|()
argument_list|)
expr_stmt|;
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|titleRoomMap
argument_list|(
name|room
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
interface|interface
name|Check
block|{
specifier|public
name|boolean
name|isChecked
parameter_list|()
function_decl|;
block|}
specifier|public
specifier|static
enum|enum
name|DeptMode
block|{
name|CODE
argument_list|(
name|MESSAGES
operator|.
name|fieldCode
argument_list|()
argument_list|)
block|,
name|ABBV
argument_list|(
name|MESSAGES
operator|.
name|fieldAbbreviation
argument_list|()
argument_list|)
block|,
name|NAME
argument_list|(
name|MESSAGES
operator|.
name|fieldName
argument_list|()
argument_list|)
block|,
name|ABBV_NAME
argument_list|(
name|MESSAGES
operator|.
name|fieldAbbv
argument_list|()
operator|+
literal|" - "
operator|+
name|MESSAGES
operator|.
name|fieldName
argument_list|()
argument_list|)
block|,
name|CODE_NAME
argument_list|(
name|MESSAGES
operator|.
name|fieldCode
argument_list|()
operator|+
literal|" - "
operator|+
name|MESSAGES
operator|.
name|fieldName
argument_list|()
argument_list|)
block|;
specifier|private
name|String
name|iName
decl_stmt|;
name|DeptMode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|iName
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
block|}
specifier|public
specifier|static
interface|interface
name|SortOperation
extends|extends
name|Operation
extends|,
name|HasColumnName
block|{}
specifier|public
specifier|static
interface|interface
name|HasRefresh
block|{
specifier|public
name|void
name|refresh
parameter_list|()
function_decl|;
block|}
block|}
end_class

end_unit

