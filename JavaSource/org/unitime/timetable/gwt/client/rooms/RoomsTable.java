begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|rooms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|GwtHint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|aria
operator|.
name|AriaCheckBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|page
operator|.
name|UniTimePageHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|ImageLink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|P
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
operator|.
name|AriaOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
operator|.
name|HasColumnName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtAriaMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|AttachmentTypeInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|DepartmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|ExamTypeInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|FeatureInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|FeatureTypeInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|GroupInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomDetailInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomPictureInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomPropertiesInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomPropertyInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomsColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomsPageMode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Unit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseOutEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseOutHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseOverEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseOverHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DOM
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|TakesValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
operator|.
name|HorizontalAlignmentConstant
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|CheckBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|RoomsTable
extends|extends
name|UniTimeTable
argument_list|<
name|RoomDetailInterface
argument_list|>
block|{
specifier|protected
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|GwtAriaMessages
name|ARIA
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtAriaMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|GwtResources
name|RESOURCES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtResources
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|GwtConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|GwtRpcServiceAsync
name|RPC
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtRpcService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|int
name|iFlags
init|=
literal|0
decl_stmt|;
specifier|private
name|RoomsColumn
name|iSortBy
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iAsc
init|=
literal|true
decl_stmt|;
specifier|private
name|RoomsPageMode
name|iMode
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iDepartment
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Operation
argument_list|>
name|iSortOperations
init|=
operator|new
name|ArrayList
argument_list|<
name|Operation
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Operation
argument_list|>
name|iShowHideOperations
init|=
operator|new
name|ArrayList
argument_list|<
name|Operation
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Operation
argument_list|>
name|iDepartmentOperations
init|=
operator|new
name|ArrayList
argument_list|<
name|Operation
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Operation
argument_list|>
name|iOtherOperations
init|=
operator|new
name|ArrayList
argument_list|<
name|Operation
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|RoomPropertiesInterface
name|iProperties
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iSelectable
decl_stmt|;
specifier|public
name|RoomsTable
parameter_list|(
name|RoomsPageMode
name|mode
parameter_list|,
name|boolean
name|selectable
parameter_list|)
block|{
name|setStyleName
argument_list|(
literal|"unitime-Rooms"
argument_list|)
expr_stmt|;
name|iMode
operator|=
name|mode
expr_stmt|;
name|iSelectable
operator|=
name|selectable
expr_stmt|;
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
specifier|final
name|RoomsTable
name|table
init|=
operator|new
name|RoomsTable
argument_list|(
name|iMode
argument_list|)
decl_stmt|;
name|table
operator|.
name|setProperties
argument_list|(
name|iProperties
argument_list|)
expr_stmt|;
name|table
operator|.
name|setDepartment
argument_list|(
name|iDepartment
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
name|table
operator|.
name|addRoom
argument_list|(
name|getData
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setWidth
argument_list|(
literal|1040
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
comment|// Move header row to thead
name|Element
name|headerRow
init|=
name|table
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Element
name|tableElement
init|=
name|table
operator|.
name|getElement
argument_list|()
decl_stmt|;
name|Element
name|thead
init|=
name|DOM
operator|.
name|createTHead
argument_list|()
decl_stmt|;
name|tableElement
operator|.
name|insertFirst
argument_list|(
name|thead
argument_list|)
expr_stmt|;
name|headerRow
operator|.
name|getParentElement
argument_list|()
operator|.
name|removeChild
argument_list|(
name|headerRow
argument_list|)
expr_stmt|;
name|thead
operator|.
name|appendChild
argument_list|(
name|headerRow
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|print
argument_list|(
operator|new
name|ToolBox
operator|.
name|Page
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|pageRooms
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
name|UniTimePageHeader
operator|.
name|getInstance
argument_list|()
operator|.
name|getMiddle
argument_list|()
operator|.
name|getText
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getSession
parameter_list|()
block|{
return|return
name|UniTimePageHeader
operator|.
name|getInstance
argument_list|()
operator|.
name|getRight
argument_list|()
operator|.
name|getText
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Element
name|getBody
parameter_list|()
block|{
return|return
name|table
operator|.
name|getElement
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|buttonPrint
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|getRowCount
argument_list|()
operator|>
literal|1
operator|&&
operator|!
name|iSelectable
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RoomsTable
parameter_list|(
name|RoomsPageMode
name|mode
parameter_list|)
block|{
name|this
argument_list|(
name|mode
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RoomsTable
parameter_list|(
name|RoomsPageMode
name|mode
parameter_list|,
name|RoomPropertiesInterface
name|properties
parameter_list|,
name|boolean
name|selectable
parameter_list|)
block|{
name|this
argument_list|(
name|mode
argument_list|,
name|selectable
argument_list|)
expr_stmt|;
name|setProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setProperties
parameter_list|(
name|RoomPropertiesInterface
name|properties
parameter_list|)
block|{
name|iProperties
operator|=
name|properties
expr_stmt|;
name|super
operator|.
name|clearTable
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|UniTimeTableHeader
argument_list|>
name|header
init|=
operator|new
name|ArrayList
argument_list|<
name|UniTimeTableHeader
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RoomsColumn
name|column
range|:
name|RoomsColumn
operator|.
name|values
argument_list|()
control|)
block|{
name|int
name|nrCells
init|=
name|getNbrCells
argument_list|(
name|column
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|nrCells
condition|;
name|idx
operator|++
control|)
block|{
name|UniTimeTableHeader
name|h
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|getColumnName
argument_list|(
name|column
argument_list|,
name|idx
argument_list|)
argument_list|,
name|getColumnAlignment
argument_list|(
name|column
argument_list|,
name|idx
argument_list|)
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iSelectable
condition|)
block|{
name|header
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|CheckBox
name|ch
init|=
operator|(
name|CheckBox
operator|)
name|w
decl_stmt|;
name|ch
operator|.
name|setValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|setSelected
argument_list|(
name|row
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|CheckBox
name|ch
init|=
operator|(
name|CheckBox
operator|)
name|w
decl_stmt|;
if|if
condition|(
operator|!
name|ch
operator|.
name|getValue
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opSelectAll
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|header
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|CheckBox
name|ch
init|=
operator|(
name|CheckBox
operator|)
name|w
decl_stmt|;
name|ch
operator|.
name|setValue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|setSelected
argument_list|(
name|row
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|CheckBox
name|ch
init|=
operator|(
name|CheckBox
operator|)
name|w
decl_stmt|;
if|if
condition|(
name|ch
operator|.
name|getValue
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opClearSelection
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|RoomCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getFlags
argument_list|(
name|iMode
argument_list|)
operator|==
literal|0
condition|)
block|{
name|int
name|flags
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RoomsColumn
name|column
range|:
name|RoomsColumn
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|iMode
operator|.
name|hasColumn
argument_list|(
name|column
argument_list|)
condition|)
block|{
name|int
name|nrCells
init|=
name|getNbrCells
argument_list|(
name|column
argument_list|)
decl_stmt|;
name|int
name|cellIdx
init|=
name|getCellIndex
argument_list|(
name|column
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|nrCells
condition|;
name|idx
operator|++
control|)
block|{
name|flags
operator|+=
operator|(
literal|1
operator|<<
operator|(
name|cellIdx
operator|+
name|idx
operator|)
operator|)
expr_stmt|;
block|}
block|}
block|}
name|RoomCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setFlags
argument_list|(
name|iMode
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
name|addRow
argument_list|(
literal|null
argument_list|,
name|header
argument_list|)
expr_stmt|;
name|iShowHideOperations
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
specifier|final
name|RoomsColumn
name|column
range|:
name|RoomsColumn
operator|.
name|values
argument_list|()
control|)
block|{
name|int
name|nrCells
init|=
name|getNbrCells
argument_list|(
name|column
argument_list|)
decl_stmt|;
name|int
name|cellIdx
init|=
name|getCellIndex
argument_list|(
name|column
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|nrCells
condition|;
name|idx
operator|++
control|)
block|{
specifier|final
name|int
name|colIdx
init|=
name|cellIdx
operator|+
name|idx
decl_stmt|;
specifier|final
name|String
name|cName
init|=
name|getColumnName
argument_list|(
name|column
argument_list|,
name|idx
argument_list|)
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|" "
argument_list|)
decl_stmt|;
name|UniTimeTableHeader
name|h
init|=
name|header
operator|.
name|get
argument_list|(
name|colIdx
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasShowHideOperation
argument_list|(
name|column
argument_list|)
condition|)
block|{
name|Operation
name|op
init|=
operator|new
name|AriaOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|boolean
name|visible
init|=
name|isColumnVisible
argument_list|(
name|colIdx
argument_list|)
decl_stmt|;
name|setColumnVisible
argument_list|(
name|colIdx
argument_list|,
operator|!
name|visible
argument_list|)
expr_stmt|;
name|RoomCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|set
argument_list|(
name|iMode
argument_list|,
name|colIdx
argument_list|,
operator|!
name|visible
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
operator|(
name|iFlags
operator|&
operator|(
literal|1
operator|<<
name|colIdx
operator|)
operator|)
operator|!=
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
if|if
condition|(
name|iSelectable
operator|&&
name|column
operator|==
name|RoomsColumn
operator|.
name|EXTERNAL_ID
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|isColumnVisible
argument_list|(
name|colIdx
argument_list|)
condition|?
name|MESSAGES
operator|.
name|opHide
argument_list|(
name|cName
argument_list|)
else|:
name|MESSAGES
operator|.
name|opShow
argument_list|(
name|cName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAriaLabel
parameter_list|()
block|{
return|return
name|isColumnVisible
argument_list|(
name|colIdx
argument_list|)
condition|?
name|ARIA
operator|.
name|opHide
argument_list|(
name|cName
argument_list|)
else|:
name|ARIA
operator|.
name|opShow
argument_list|(
name|cName
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|iShowHideOperations
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
if|if
condition|(
name|colIdx
operator|>
literal|0
condition|)
name|header
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|RoomsColumn
name|g
init|=
name|getShowHideGroup
argument_list|(
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
name|g
operator|==
literal|null
condition|)
block|{
name|h
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|RoomsColumn
name|c
range|:
name|RoomsColumn
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|g
operator|.
name|equals
argument_list|(
name|getShowHideGroup
argument_list|(
name|c
argument_list|)
argument_list|)
condition|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getNbrCells
argument_list|(
name|c
argument_list|)
condition|;
name|i
operator|++
control|)
name|header
operator|.
name|get
argument_list|(
name|getCellIndex
argument_list|(
name|c
argument_list|)
operator|+
name|i
argument_list|)
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|iDepartmentOperations
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
specifier|final
name|DeptMode
name|d
range|:
name|DeptMode
operator|.
name|values
argument_list|()
control|)
block|{
name|Operation
name|op
init|=
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|RoomCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setDeptMode
argument_list|(
name|d
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|refreshTable
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|getRowCount
argument_list|()
operator|>
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
name|d
operator|.
name|ordinal
argument_list|()
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
if|if
condition|(
name|RoomCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getDeptMode
argument_list|()
operator|==
name|d
operator|.
name|ordinal
argument_list|()
condition|)
return|return
name|MESSAGES
operator|.
name|opUncheck
argument_list|(
name|d
operator|.
name|getName
argument_list|()
argument_list|)
return|;
else|else
return|return
name|MESSAGES
operator|.
name|opCheck
argument_list|(
name|d
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|iDepartmentOperations
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
for|for
control|(
name|RoomsColumn
name|c
range|:
name|RoomsColumn
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|hasDepartmentOperation
argument_list|(
name|c
argument_list|)
condition|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getNbrCells
argument_list|(
name|c
argument_list|)
condition|;
name|i
operator|++
control|)
name|header
operator|.
name|get
argument_list|(
name|getCellIndex
argument_list|(
name|c
argument_list|)
operator|+
name|i
argument_list|)
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
block|}
name|iSortOperations
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
specifier|final
name|RoomsColumn
name|column
range|:
name|RoomsColumn
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|RoomsComparator
operator|.
name|isApplicable
argument_list|(
name|column
argument_list|)
condition|)
block|{
specifier|final
name|UniTimeTableHeader
name|h
init|=
name|header
operator|.
name|get
argument_list|(
name|getCellIndex
argument_list|(
name|column
argument_list|)
argument_list|)
decl_stmt|;
name|Operation
name|op
init|=
operator|new
name|SortOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
if|if
condition|(
name|column
operator|==
name|iSortBy
condition|)
block|{
name|iAsc
operator|=
operator|!
name|iAsc
expr_stmt|;
block|}
else|else
block|{
name|iSortBy
operator|=
name|column
expr_stmt|;
name|iAsc
operator|=
literal|true
expr_stmt|;
block|}
name|RoomCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setSortRoomsBy
argument_list|(
name|getSortBy
argument_list|()
argument_list|)
expr_stmt|;
name|sort
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|getRowCount
argument_list|()
operator|>
literal|1
operator|&&
name|h
operator|.
name|isVisible
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opSortBy
argument_list|(
name|getColumnName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getColumnName
parameter_list|()
block|{
return|return
name|h
operator|.
name|getHTML
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|" "
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|iSortOperations
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|h
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Operation
name|op
range|:
name|getOtherOperations
argument_list|()
control|)
name|header
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getCellCount
argument_list|(
literal|0
argument_list|)
condition|;
name|i
operator|++
control|)
name|getCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
literal|0
argument_list|,
name|i
argument_list|,
literal|"unitime-ClickableTableHeader"
argument_list|)
expr_stmt|;
name|resetVisibility
argument_list|()
expr_stmt|;
name|setSortBy
argument_list|(
name|RoomCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getRoomsSortBy
argument_list|()
argument_list|)
expr_stmt|;
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSelectable
condition|)
block|{
name|setAllowSelection
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|addMouseClickListener
argument_list|(
operator|new
name|MouseClickListener
argument_list|<
name|RoomDetailInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseClick
parameter_list|(
name|TableEvent
argument_list|<
name|RoomDetailInterface
argument_list|>
name|event
parameter_list|)
block|{
name|selectRoom
argument_list|(
name|event
operator|.
name|getRow
argument_list|()
argument_list|,
name|isSelected
argument_list|(
name|event
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getColumnName
parameter_list|(
name|RoomsColumn
name|column
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
switch|switch
condition|(
name|column
condition|)
block|{
case|case
name|NAME
case|:
return|return
name|MESSAGES
operator|.
name|colName
argument_list|()
return|;
case|case
name|TYPE
case|:
return|return
name|MESSAGES
operator|.
name|colType
argument_list|()
return|;
case|case
name|EXTERNAL_ID
case|:
return|return
name|MESSAGES
operator|.
name|colExternalId
argument_list|()
return|;
case|case
name|CAPACITY
case|:
return|return
name|MESSAGES
operator|.
name|colCapacity
argument_list|()
return|;
case|case
name|EXAM_CAPACITY
case|:
return|return
name|MESSAGES
operator|.
name|colExaminationCapacity
argument_list|()
return|;
case|case
name|AREA
case|:
return|return
name|MESSAGES
operator|.
name|colArea
argument_list|(
name|iProperties
operator|!=
literal|null
operator|&&
name|iProperties
operator|.
name|isRoomAreaInMetricUnits
argument_list|()
condition|?
name|CONSTANTS
operator|.
name|roomAreaMetricUnitsShort
argument_list|()
else|:
name|CONSTANTS
operator|.
name|roomAreaUnitsShort
argument_list|()
argument_list|)
return|;
case|case
name|COORDINATES
case|:
return|return
name|MESSAGES
operator|.
name|colCoordinates
argument_list|()
return|;
case|case
name|DISTANCE_CHECK
case|:
return|return
name|MESSAGES
operator|.
name|colDistances
argument_list|()
return|;
case|case
name|ROOM_CHECK
case|:
return|return
name|MESSAGES
operator|.
name|colRoomCheck
argument_list|()
return|;
case|case
name|MAP
case|:
return|return
name|MESSAGES
operator|.
name|colMap
argument_list|()
return|;
case|case
name|PICTURES
case|:
if|if
condition|(
name|idx
operator|==
literal|0
condition|)
return|return
name|MESSAGES
operator|.
name|colPictures
argument_list|()
return|;
else|else
return|return
name|iProperties
operator|.
name|getTableTypes
argument_list|()
operator|.
name|get
argument_list|(
name|idx
operator|-
literal|1
argument_list|)
operator|.
name|getAbbreviation
argument_list|()
return|;
case|case
name|PREFERENCE
case|:
return|return
name|MESSAGES
operator|.
name|colPreference
argument_list|()
return|;
case|case
name|AVAILABILITY
case|:
return|return
name|MESSAGES
operator|.
name|colAvailability
argument_list|()
return|;
case|case
name|DEPARTMENTS
case|:
return|return
name|MESSAGES
operator|.
name|colDepartments
argument_list|()
return|;
case|case
name|CONTROL_DEPT
case|:
return|return
name|MESSAGES
operator|.
name|colControl
argument_list|()
return|;
case|case
name|EXAM_TYPES
case|:
return|return
name|MESSAGES
operator|.
name|colExamTypes
argument_list|()
return|;
case|case
name|PERIOD_PREF
case|:
return|return
name|MESSAGES
operator|.
name|colPeriodPreferences
argument_list|()
return|;
case|case
name|EVENT_DEPARTMENT
case|:
return|return
name|MESSAGES
operator|.
name|colEventDepartment
argument_list|()
return|;
case|case
name|EVENT_STATUS
case|:
return|return
name|MESSAGES
operator|.
name|colEventStatus
argument_list|()
return|;
case|case
name|EVENT_AVAILABILITY
case|:
return|return
name|MESSAGES
operator|.
name|colEventAvailability
argument_list|()
return|;
case|case
name|EVENT_MESSAGE
case|:
return|return
name|MESSAGES
operator|.
name|colEventMessage
argument_list|()
return|;
case|case
name|BREAK_TIME
case|:
return|return
name|MESSAGES
operator|.
name|colBreakTime
argument_list|()
return|;
case|case
name|GROUPS
case|:
return|return
name|MESSAGES
operator|.
name|colGroups
argument_list|()
return|;
case|case
name|FEATURES
case|:
if|if
condition|(
name|idx
operator|==
literal|0
condition|)
return|return
name|MESSAGES
operator|.
name|colFeatures
argument_list|()
return|;
else|else
return|return
name|getFeatureType
argument_list|(
name|idx
operator|-
literal|1
argument_list|)
operator|.
name|getAbbreviation
argument_list|()
return|;
default|default:
return|return
name|column
operator|.
name|name
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|refreshTable
parameter_list|()
block|{
for|for
control|(
name|int
name|r
init|=
literal|1
init|;
name|r
operator|<
name|getRowCount
argument_list|()
condition|;
name|r
operator|++
control|)
block|{
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|getCellCount
argument_list|(
name|r
argument_list|)
condition|;
name|c
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|r
argument_list|,
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|HasRefresh
condition|)
operator|(
operator|(
name|HasRefresh
operator|)
name|w
operator|)
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|HorizontalAlignmentConstant
name|getColumnAlignment
parameter_list|(
name|RoomsColumn
name|column
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
switch|switch
condition|(
name|column
condition|)
block|{
case|case
name|CAPACITY
case|:
case|case
name|EXAM_CAPACITY
case|:
case|case
name|AREA
case|:
return|return
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
return|;
default|default:
return|return
name|HasHorizontalAlignment
operator|.
name|ALIGN_LEFT
return|;
block|}
block|}
specifier|protected
name|boolean
name|hasShowHideOperation
parameter_list|(
name|RoomsColumn
name|column
parameter_list|)
block|{
switch|switch
condition|(
name|column
condition|)
block|{
case|case
name|NAME
case|:
return|return
literal|false
return|;
default|default:
return|return
literal|true
return|;
block|}
block|}
specifier|protected
name|int
name|getFlagOffset
parameter_list|(
name|RoomsColumn
name|column
parameter_list|)
block|{
switch|switch
condition|(
name|column
condition|)
block|{
case|case
name|PICTURES
case|:
return|return
name|countFeatureTypes
argument_list|()
return|;
default|default:
return|return
literal|0
return|;
block|}
block|}
specifier|protected
name|boolean
name|hasDepartmentOperation
parameter_list|(
name|RoomsColumn
name|column
parameter_list|)
block|{
switch|switch
condition|(
name|column
condition|)
block|{
case|case
name|DEPARTMENTS
case|:
case|case
name|CONTROL_DEPT
case|:
case|case
name|EVENT_DEPARTMENT
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
specifier|protected
name|RoomsColumn
name|getShowHideGroup
parameter_list|(
name|RoomsColumn
name|column
parameter_list|)
block|{
switch|switch
condition|(
name|column
condition|)
block|{
case|case
name|EXTERNAL_ID
case|:
case|case
name|TYPE
case|:
return|return
name|RoomsColumn
operator|.
name|EXTERNAL_ID
return|;
case|case
name|CAPACITY
case|:
case|case
name|EXAM_CAPACITY
case|:
case|case
name|AREA
case|:
case|case
name|COORDINATES
case|:
case|case
name|DISTANCE_CHECK
case|:
case|case
name|ROOM_CHECK
case|:
return|return
name|RoomsColumn
operator|.
name|CAPACITY
return|;
case|case
name|PREFERENCE
case|:
case|case
name|AVAILABILITY
case|:
case|case
name|DEPARTMENTS
case|:
case|case
name|CONTROL_DEPT
case|:
return|return
name|RoomsColumn
operator|.
name|PREFERENCE
return|;
case|case
name|EVENT_DEPARTMENT
case|:
case|case
name|EVENT_AVAILABILITY
case|:
case|case
name|EVENT_STATUS
case|:
case|case
name|EVENT_MESSAGE
case|:
case|case
name|BREAK_TIME
case|:
return|return
name|RoomsColumn
operator|.
name|EVENT_DEPARTMENT
return|;
case|case
name|EXAM_TYPES
case|:
case|case
name|PERIOD_PREF
case|:
return|return
name|RoomsColumn
operator|.
name|EXAM_TYPES
return|;
case|case
name|PICTURES
case|:
return|return
name|RoomsColumn
operator|.
name|PICTURES
return|;
case|case
name|FEATURES
case|:
return|return
name|RoomsColumn
operator|.
name|FEATURES
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
specifier|protected
name|boolean
name|hasFeatureTypes
parameter_list|()
block|{
return|return
name|iProperties
operator|!=
literal|null
operator|&&
name|iProperties
operator|.
name|getFeatureTypes
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|iProperties
operator|.
name|getFeatureTypes
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|protected
name|int
name|countFeatureTypes
parameter_list|()
block|{
return|return
name|iProperties
operator|==
literal|null
condition|?
literal|0
else|:
name|iProperties
operator|.
name|getFeatureTypes
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
specifier|protected
name|FeatureTypeInterface
name|getFeatureType
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|iProperties
operator|.
name|getFeatureTypes
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|Operation
argument_list|>
name|getSortOperations
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|Operation
argument_list|>
name|operations
init|=
operator|new
name|ArrayList
argument_list|<
name|Operation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Operation
name|operation
range|:
name|iSortOperations
control|)
if|if
condition|(
name|operation
operator|.
name|isApplicable
argument_list|()
condition|)
name|operations
operator|.
name|add
argument_list|(
name|operation
argument_list|)
expr_stmt|;
return|return
name|operations
return|;
block|}
specifier|public
name|List
argument_list|<
name|Operation
argument_list|>
name|getShowHideOperations
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|Operation
argument_list|>
name|operations
init|=
operator|new
name|ArrayList
argument_list|<
name|Operation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Operation
name|operation
range|:
name|iShowHideOperations
control|)
if|if
condition|(
name|operation
operator|.
name|isApplicable
argument_list|()
condition|)
name|operations
operator|.
name|add
argument_list|(
name|operation
argument_list|)
expr_stmt|;
return|return
name|operations
return|;
block|}
specifier|public
name|boolean
name|hasDepartmentOperations
parameter_list|()
block|{
return|return
name|isVisible
argument_list|(
name|RoomsColumn
operator|.
name|EVENT_DEPARTMENT
argument_list|)
operator|||
name|isVisible
argument_list|(
name|RoomsColumn
operator|.
name|DEPARTMENTS
argument_list|)
operator|||
name|isVisible
argument_list|(
name|RoomsColumn
operator|.
name|CONTROL_DEPT
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|hasOrientationOperations
parameter_list|()
block|{
return|return
name|isVisible
argument_list|(
name|RoomsColumn
operator|.
name|AVAILABILITY
argument_list|)
operator|||
name|isVisible
argument_list|(
name|RoomsColumn
operator|.
name|PERIOD_PREF
argument_list|)
operator|||
name|isVisible
argument_list|(
name|RoomsColumn
operator|.
name|EVENT_AVAILABILITY
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|Operation
argument_list|>
name|getDepartmentOperations
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|Operation
argument_list|>
name|operations
init|=
operator|new
name|ArrayList
argument_list|<
name|Operation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Operation
name|operation
range|:
name|iDepartmentOperations
control|)
if|if
condition|(
name|operation
operator|.
name|isApplicable
argument_list|()
condition|)
name|operations
operator|.
name|add
argument_list|(
name|operation
argument_list|)
expr_stmt|;
return|return
name|operations
return|;
block|}
specifier|public
name|List
argument_list|<
name|Operation
argument_list|>
name|getOtherOperations
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|Operation
argument_list|>
name|operations
init|=
operator|new
name|ArrayList
argument_list|<
name|Operation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Operation
name|operation
range|:
name|iOtherOperations
control|)
if|if
condition|(
name|operation
operator|.
name|isApplicable
argument_list|()
condition|)
name|operations
operator|.
name|add
argument_list|(
name|operation
argument_list|)
expr_stmt|;
return|return
name|operations
return|;
block|}
specifier|public
name|boolean
name|hasSortBy
parameter_list|()
block|{
return|return
name|iSortBy
operator|!=
literal|null
return|;
block|}
specifier|public
name|int
name|getSortBy
parameter_list|()
block|{
return|return
name|iSortBy
operator|==
literal|null
condition|?
literal|0
else|:
name|iAsc
condition|?
literal|1
operator|+
name|iSortBy
operator|.
name|ordinal
argument_list|()
else|:
operator|-
literal|1
operator|-
name|iSortBy
operator|.
name|ordinal
argument_list|()
return|;
block|}
specifier|public
name|void
name|setSortBy
parameter_list|(
name|int
name|sortBy
parameter_list|)
block|{
if|if
condition|(
name|sortBy
operator|==
literal|0
condition|)
block|{
name|iSortBy
operator|=
literal|null
expr_stmt|;
name|iAsc
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|sortBy
operator|>
literal|0
condition|)
block|{
name|iSortBy
operator|=
name|RoomsColumn
operator|.
name|values
argument_list|()
index|[
name|sortBy
operator|-
literal|1
index|]
expr_stmt|;
name|iAsc
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|iSortBy
operator|=
name|RoomsColumn
operator|.
name|values
argument_list|()
index|[
operator|-
literal|1
operator|-
name|sortBy
index|]
expr_stmt|;
name|iAsc
operator|=
literal|false
expr_stmt|;
block|}
name|sort
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|addOperation
parameter_list|(
name|Operation
name|op
parameter_list|)
block|{
name|iOtherOperations
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|sort
parameter_list|()
block|{
if|if
condition|(
name|iSortBy
operator|==
literal|null
condition|)
return|return;
name|Comparator
argument_list|<
name|RoomDetailInterface
argument_list|>
name|rc
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|iSelectable
operator|&&
name|iSortBy
operator|==
name|RoomsColumn
operator|.
name|NAME
condition|)
block|{
name|rc
operator|=
operator|new
name|Comparator
argument_list|<
name|RoomDetailInterface
argument_list|>
argument_list|()
block|{
specifier|private
name|Comparator
argument_list|<
name|RoomDetailInterface
argument_list|>
name|iRC
init|=
operator|new
name|RoomsComparator
argument_list|(
name|iSortBy
argument_list|,
literal|true
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|RoomDetailInterface
name|r1
parameter_list|,
name|RoomDetailInterface
name|r2
parameter_list|)
block|{
name|boolean
name|s1
init|=
name|isRoomSelected
argument_list|(
name|r1
argument_list|)
decl_stmt|,
name|s2
init|=
name|isRoomSelected
argument_list|(
name|r2
argument_list|)
decl_stmt|;
if|if
condition|(
name|s1
operator|!=
name|s2
condition|)
return|return
name|s1
condition|?
operator|-
literal|1
else|:
literal|1
return|;
return|return
name|iRC
operator|.
name|compare
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|)
return|;
block|}
block|}
expr_stmt|;
block|}
else|else
block|{
name|rc
operator|=
operator|new
name|RoomsComparator
argument_list|(
name|iSortBy
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|UniTimeTableHeader
name|header
init|=
name|getHeader
argument_list|(
name|getCellIndex
argument_list|(
name|iSortBy
argument_list|)
argument_list|)
decl_stmt|;
name|sort
argument_list|(
name|header
argument_list|,
name|rc
argument_list|,
name|iAsc
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setDepartment
parameter_list|(
name|String
name|department
parameter_list|)
block|{
name|iDepartment
operator|=
name|department
expr_stmt|;
block|}
specifier|protected
name|int
name|getNbrCells
parameter_list|(
name|RoomsColumn
name|column
parameter_list|)
block|{
switch|switch
condition|(
name|column
condition|)
block|{
case|case
name|PICTURES
case|:
name|List
argument_list|<
name|AttachmentTypeInterface
argument_list|>
name|types
init|=
name|iProperties
operator|.
name|getTableTypes
argument_list|()
decl_stmt|;
return|return
literal|1
operator|+
operator|(
name|types
operator|==
literal|null
condition|?
literal|0
else|:
name|types
operator|.
name|size
argument_list|()
operator|)
return|;
case|case
name|FEATURES
case|:
return|return
literal|1
operator|+
name|iProperties
operator|.
name|getFeatureTypes
argument_list|()
operator|.
name|size
argument_list|()
return|;
default|default:
return|return
literal|1
return|;
block|}
block|}
specifier|protected
name|int
name|getCellIndex
parameter_list|(
name|RoomsColumn
name|column
parameter_list|)
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RoomsColumn
name|c
range|:
name|RoomsColumn
operator|.
name|values
argument_list|()
control|)
if|if
condition|(
name|c
operator|.
name|ordinal
argument_list|()
operator|<
name|column
operator|.
name|ordinal
argument_list|()
condition|)
name|ret
operator|+=
name|getNbrCells
argument_list|(
name|c
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|protected
name|Widget
name|getCell
parameter_list|(
specifier|final
name|RoomDetailInterface
name|room
parameter_list|,
specifier|final
name|RoomsColumn
name|column
parameter_list|,
specifier|final
name|int
name|idx
parameter_list|)
block|{
if|if
condition|(
name|iProperties
operator|==
literal|null
operator|||
operator|!
name|iProperties
operator|.
name|isCanSeeCourses
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|column
condition|)
block|{
case|case
name|ROOM_CHECK
case|:
if|if
condition|(
name|iProperties
operator|!=
literal|null
operator|&&
name|iProperties
operator|.
name|isCanSeeEvents
argument_list|()
condition|)
break|break;
case|case
name|DISTANCE_CHECK
case|:
case|case
name|PREFERENCE
case|:
case|case
name|AVAILABILITY
case|:
case|case
name|DEPARTMENTS
case|:
case|case
name|CONTROL_DEPT
case|:
return|return
literal|null
return|;
block|}
block|}
if|if
condition|(
name|iProperties
operator|==
literal|null
operator|||
operator|!
name|iProperties
operator|.
name|isCanSeeExams
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|column
condition|)
block|{
case|case
name|EXAM_CAPACITY
case|:
case|case
name|EXAM_TYPES
case|:
case|case
name|PERIOD_PREF
case|:
return|return
literal|null
return|;
block|}
block|}
if|if
condition|(
name|iProperties
operator|==
literal|null
operator|||
operator|!
name|iProperties
operator|.
name|isCanSeeEvents
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|column
condition|)
block|{
case|case
name|EVENT_DEPARTMENT
case|:
case|case
name|EVENT_MESSAGE
case|:
case|case
name|EVENT_AVAILABILITY
case|:
case|case
name|EVENT_STATUS
case|:
case|case
name|BREAK_TIME
case|:
return|return
literal|null
return|;
block|}
block|}
switch|switch
condition|(
name|column
condition|)
block|{
case|case
name|NAME
case|:
if|if
condition|(
name|iSelectable
condition|)
block|{
return|return
operator|new
name|SelectableRoomNameCell
argument_list|(
name|room
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|RoomNameCell
argument_list|(
name|room
argument_list|)
return|;
block|}
case|case
name|EXTERNAL_ID
case|:
if|if
condition|(
operator|!
name|room
operator|.
name|hasExternalId
argument_list|()
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|Label
argument_list|(
name|room
operator|.
name|getExternalId
argument_list|()
argument_list|)
return|;
case|case
name|TYPE
case|:
return|return
operator|new
name|Label
argument_list|(
name|room
operator|.
name|getRoomType
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
return|;
case|case
name|CAPACITY
case|:
if|if
condition|(
name|room
operator|.
name|getCapacity
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|IntegerCell
argument_list|(
name|room
operator|.
name|getCapacity
argument_list|()
argument_list|)
return|;
case|case
name|EXAM_CAPACITY
case|:
if|if
condition|(
name|room
operator|.
name|getExamCapacity
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|IntegerCell
argument_list|(
name|room
operator|.
name|getExamCapacity
argument_list|()
argument_list|)
return|;
case|case
name|AREA
case|:
if|if
condition|(
name|room
operator|.
name|getArea
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|RoomAreaCell
argument_list|(
name|room
operator|.
name|getArea
argument_list|()
argument_list|)
return|;
case|case
name|COORDINATES
case|:
if|if
condition|(
operator|!
name|room
operator|.
name|hasCoordinates
argument_list|()
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|Label
argument_list|(
name|MESSAGES
operator|.
name|coordinates
argument_list|(
name|room
operator|.
name|getX
argument_list|()
argument_list|,
name|room
operator|.
name|getY
argument_list|()
argument_list|)
argument_list|)
return|;
case|case
name|DISTANCE_CHECK
case|:
name|Image
name|dc
init|=
operator|new
name|Image
argument_list|(
operator|!
name|room
operator|.
name|isIgnoreTooFar
argument_list|()
condition|?
name|RESOURCES
operator|.
name|on
argument_list|()
else|:
name|RESOURCES
operator|.
name|off
argument_list|()
argument_list|)
decl_stmt|;
name|dc
operator|.
name|setTitle
argument_list|(
operator|!
name|room
operator|.
name|isIgnoreTooFar
argument_list|()
condition|?
name|MESSAGES
operator|.
name|infoDistanceCheckOn
argument_list|()
else|:
name|MESSAGES
operator|.
name|infoDistanceCheckOff
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|dc
return|;
case|case
name|ROOM_CHECK
case|:
name|Image
name|rc
init|=
operator|new
name|Image
argument_list|(
operator|!
name|room
operator|.
name|isIgnoreRoomCheck
argument_list|()
condition|?
name|RESOURCES
operator|.
name|on
argument_list|()
else|:
name|RESOURCES
operator|.
name|off
argument_list|()
argument_list|)
decl_stmt|;
name|rc
operator|.
name|setTitle
argument_list|(
operator|!
name|room
operator|.
name|isIgnoreRoomCheck
argument_list|()
condition|?
name|MESSAGES
operator|.
name|infoRoomCheckOn
argument_list|()
else|:
name|MESSAGES
operator|.
name|infoRoomCheckOff
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
case|case
name|PREFERENCE
case|:
if|if
condition|(
name|iDepartment
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DepartmentInterface
name|department
range|:
name|room
operator|.
name|getDepartments
argument_list|()
control|)
block|{
if|if
condition|(
name|iDepartment
operator|.
name|equals
argument_list|(
name|department
operator|.
name|getDeptCode
argument_list|()
argument_list|)
operator|&&
name|department
operator|.
name|getPreference
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|PreferenceCell
argument_list|(
name|department
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
else|else
block|{
name|boolean
name|hasPreferences
init|=
literal|false
decl_stmt|;
for|for
control|(
name|DepartmentInterface
name|department
range|:
name|room
operator|.
name|getDepartments
argument_list|()
control|)
if|if
condition|(
name|department
operator|.
name|getPreference
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|hasPreferences
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|hasPreferences
condition|)
return|return
operator|new
name|PreferenceCell
argument_list|(
name|room
operator|.
name|getDepartments
argument_list|()
argument_list|)
return|;
else|else
return|return
literal|null
return|;
block|}
case|case
name|MAP
case|:
if|if
condition|(
operator|!
name|room
operator|.
name|hasMiniMapUrl
argument_list|()
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|MapCell
argument_list|(
name|room
argument_list|)
return|;
case|case
name|PICTURES
case|:
if|if
condition|(
name|idx
operator|==
literal|0
condition|)
block|{
return|return
operator|(
name|room
operator|.
name|hasPictures
argument_list|(
literal|null
argument_list|)
condition|?
operator|new
name|PicturesCell
argument_list|(
name|room
argument_list|,
literal|null
argument_list|)
else|:
literal|null
operator|)
return|;
block|}
else|else
block|{
name|AttachmentTypeInterface
name|type
init|=
name|iProperties
operator|.
name|getTableTypes
argument_list|()
operator|.
name|get
argument_list|(
name|idx
operator|-
literal|1
argument_list|)
decl_stmt|;
return|return
operator|(
name|room
operator|.
name|hasPictures
argument_list|(
name|type
argument_list|)
condition|?
operator|new
name|PicturesCell
argument_list|(
name|room
argument_list|,
name|type
argument_list|)
else|:
literal|null
operator|)
return|;
block|}
case|case
name|AVAILABILITY
case|:
if|if
condition|(
name|room
operator|.
name|getAvailability
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|AvailabilityCell
argument_list|(
name|room
argument_list|,
literal|false
argument_list|)
return|;
case|case
name|DEPARTMENTS
case|:
return|return
operator|new
name|DepartmentCell
argument_list|(
literal|true
argument_list|,
name|room
operator|.
name|getDepartments
argument_list|()
argument_list|,
name|room
operator|.
name|getControlDepartment
argument_list|()
argument_list|,
name|isAllDepartments
argument_list|(
name|room
argument_list|)
argument_list|)
return|;
case|case
name|CONTROL_DEPT
case|:
return|return
operator|new
name|DepartmentCell
argument_list|(
literal|true
argument_list|,
name|room
operator|.
name|getControlDepartment
argument_list|()
argument_list|)
return|;
case|case
name|EXAM_TYPES
case|:
return|return
operator|new
name|ExamTypesCell
argument_list|(
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|room
operator|.
name|getExamTypes
argument_list|()
argument_list|)
return|;
case|case
name|PERIOD_PREF
case|:
if|if
condition|(
name|room
operator|.
name|getPeriodPreference
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|iDepartment
operator|!=
literal|null
operator|&&
name|room
operator|.
name|hasExamTypes
argument_list|()
condition|)
for|for
control|(
name|ExamTypeInterface
name|type
range|:
name|room
operator|.
name|getExamTypes
argument_list|()
control|)
if|if
condition|(
name|iDepartment
operator|.
name|equals
argument_list|(
name|type
operator|.
name|getReference
argument_list|()
argument_list|)
condition|)
return|return
operator|new
name|PeriodPreferenceCell
argument_list|(
name|room
argument_list|,
name|type
argument_list|)
return|;
return|return
literal|null
return|;
case|case
name|EVENT_DEPARTMENT
case|:
if|if
condition|(
name|room
operator|.
name|getEventDepartment
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
specifier|final
name|DepartmentCell
name|edc
init|=
operator|new
name|DepartmentCell
argument_list|(
literal|false
argument_list|,
name|room
operator|.
name|getEventDepartment
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|room
operator|.
name|isCanSeeEventAvailability
argument_list|()
condition|)
block|{
name|edc
operator|.
name|addMouseOverHandler
argument_list|(
operator|new
name|MouseOverHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOver
parameter_list|(
name|MouseOverEvent
name|event
parameter_list|)
block|{
name|RoomSharingHint
operator|.
name|showHint
argument_list|(
name|edc
operator|.
name|getElement
argument_list|()
argument_list|,
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|edc
operator|.
name|addMouseOutHandler
argument_list|(
operator|new
name|MouseOutHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOut
parameter_list|(
name|MouseOutEvent
name|event
parameter_list|)
block|{
name|RoomSharingHint
operator|.
name|hideHint
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|edc
return|;
case|case
name|EVENT_STATUS
case|:
if|if
condition|(
name|room
operator|.
name|getEventStatus
argument_list|()
operator|!=
literal|null
operator|||
name|room
operator|.
name|getDefaultEventStatus
argument_list|()
operator|!=
literal|null
condition|)
return|return
operator|new
name|StatusCell
argument_list|(
name|room
operator|.
name|getEventStatus
argument_list|()
argument_list|,
name|room
operator|.
name|getDefaultEventStatus
argument_list|()
argument_list|)
return|;
else|else
return|return
literal|null
return|;
case|case
name|EVENT_AVAILABILITY
case|:
if|if
condition|(
name|room
operator|.
name|getEventAvailability
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|AvailabilityCell
argument_list|(
name|room
argument_list|,
literal|true
argument_list|)
return|;
case|case
name|EVENT_MESSAGE
case|:
if|if
condition|(
name|room
operator|.
name|hasEventNote
argument_list|()
operator|||
name|room
operator|.
name|hasDefaultEventNote
argument_list|()
condition|)
return|return
operator|new
name|NoteCell
argument_list|(
name|room
operator|.
name|getEventNote
argument_list|()
argument_list|,
name|room
operator|.
name|getDefaultEventNote
argument_list|()
argument_list|)
return|;
else|else
return|return
literal|null
return|;
case|case
name|BREAK_TIME
case|:
if|if
condition|(
name|room
operator|.
name|getBreakTime
argument_list|()
operator|!=
literal|null
operator|||
name|room
operator|.
name|getDefaultBreakTime
argument_list|()
operator|!=
literal|null
condition|)
return|return
operator|new
name|BreakTimeCell
argument_list|(
name|room
operator|.
name|getBreakTime
argument_list|()
argument_list|,
name|room
operator|.
name|getDefaultBreakTime
argument_list|()
argument_list|)
return|;
else|else
return|return
literal|null
return|;
case|case
name|GROUPS
case|:
if|if
condition|(
name|room
operator|.
name|getGroups
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|GroupsCell
argument_list|(
name|room
operator|.
name|getGroups
argument_list|()
argument_list|)
return|;
case|case
name|FEATURES
case|:
if|if
condition|(
name|idx
operator|==
literal|0
condition|)
block|{
name|List
argument_list|<
name|FeatureInterface
argument_list|>
name|features
init|=
name|room
operator|.
name|getFeatures
argument_list|(
operator|(
name|Long
operator|)
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|features
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|FeaturesCell
argument_list|(
name|features
argument_list|)
return|;
block|}
else|else
block|{
name|FeatureTypeInterface
name|type
init|=
name|getFeatureType
argument_list|(
name|idx
operator|-
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FeatureInterface
argument_list|>
name|featuresOfType
init|=
name|room
operator|.
name|getFeatures
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|featuresOfType
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|FeaturesCell
argument_list|(
name|featuresOfType
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|int
name|addRoom
parameter_list|(
specifier|final
name|RoomDetailInterface
name|room
parameter_list|)
block|{
name|List
argument_list|<
name|Widget
argument_list|>
name|widgets
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RoomsColumn
name|column
range|:
name|RoomsColumn
operator|.
name|values
argument_list|()
control|)
block|{
name|int
name|nbrCells
init|=
name|getNbrCells
argument_list|(
name|column
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|nbrCells
condition|;
name|idx
operator|++
control|)
block|{
name|Widget
name|cell
init|=
name|getCell
argument_list|(
name|room
argument_list|,
name|column
argument_list|,
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|cell
operator|==
literal|null
condition|)
block|{
name|cell
operator|=
operator|new
name|P
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|hasShowHideOperation
argument_list|(
name|column
argument_list|)
condition|)
block|{
name|show
argument_list|(
name|column
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
name|widgets
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|row
init|=
name|addRow
argument_list|(
name|room
argument_list|,
name|widgets
argument_list|)
decl_stmt|;
name|getRowFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
literal|"row"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|getCellCount
argument_list|(
name|row
argument_list|)
condition|;
name|col
operator|++
control|)
name|getCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
literal|"cell"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isVisible
argument_list|()
condition|)
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|row
return|;
block|}
specifier|protected
name|void
name|resetVisibility
parameter_list|()
block|{
for|for
control|(
name|RoomsColumn
name|column
range|:
name|RoomsColumn
operator|.
name|values
argument_list|()
control|)
block|{
name|int
name|nrCells
init|=
name|getNbrCells
argument_list|(
name|column
argument_list|)
decl_stmt|;
name|int
name|cellIdx
init|=
name|getCellIndex
argument_list|(
name|column
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|nrCells
condition|;
name|idx
operator|++
control|)
block|{
specifier|final
name|int
name|colIdx
init|=
name|cellIdx
operator|+
name|idx
decl_stmt|;
name|setColumnVisible
argument_list|(
name|colIdx
argument_list|,
operator|!
name|hasShowHideOperation
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|show
parameter_list|(
name|RoomsColumn
name|column
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
name|int
name|colIdx
init|=
name|getCellIndex
argument_list|(
name|column
argument_list|)
operator|+
name|idx
decl_stmt|;
if|if
condition|(
name|RoomCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|iMode
argument_list|,
name|colIdx
argument_list|)
operator|&&
operator|!
name|isColumnVisible
argument_list|(
name|colIdx
argument_list|)
condition|)
name|setColumnVisible
argument_list|(
name|colIdx
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|int
name|flag
init|=
operator|(
literal|1
operator|<<
name|colIdx
operator|)
decl_stmt|;
if|if
condition|(
operator|(
name|iFlags
operator|&
name|flag
operator|)
operator|==
literal|0
condition|)
name|iFlags
operator|+=
name|flag
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearTable
parameter_list|(
name|int
name|headerRows
parameter_list|)
block|{
name|super
operator|.
name|clearTable
argument_list|(
name|headerRows
argument_list|)
expr_stmt|;
name|resetVisibility
argument_list|()
expr_stmt|;
name|iFlags
operator|=
literal|0
expr_stmt|;
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getFlags
parameter_list|()
block|{
return|return
name|iFlags
return|;
block|}
specifier|public
name|boolean
name|isVisible
parameter_list|(
name|RoomsColumn
name|column
parameter_list|)
block|{
return|return
name|isColumnVisible
argument_list|(
name|getCellIndex
argument_list|(
name|column
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
class|class
name|IntegerCell
extends|extends
name|Label
implements|implements
name|UniTimeTable
operator|.
name|HasCellAlignment
implements|,
name|UniTimeTable
operator|.
name|HasColSpan
implements|,
name|TakesValue
argument_list|<
name|Integer
argument_list|>
block|{
specifier|public
name|IntegerCell
parameter_list|(
name|Integer
name|value
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|Integer
name|value
parameter_list|)
block|{
name|setText
argument_list|(
name|value
operator|==
literal|null
condition|?
literal|""
else|:
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|getValue
parameter_list|()
block|{
return|return
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|Integer
argument_list|(
name|getText
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|HorizontalAlignmentConstant
name|getCellAlignment
parameter_list|()
block|{
return|return
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getColSpan
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
block|}
class|class
name|RoomNameCell
extends|extends
name|Label
block|{
name|RoomNameCell
parameter_list|(
specifier|final
name|RoomDetailInterface
name|room
parameter_list|)
block|{
name|super
argument_list|(
name|room
operator|.
name|hasDisplayName
argument_list|()
condition|?
name|MESSAGES
operator|.
name|label
argument_list|(
name|room
operator|.
name|getLabel
argument_list|()
argument_list|,
name|room
operator|.
name|getDisplayName
argument_list|()
argument_list|)
else|:
name|room
operator|.
name|getLabel
argument_list|()
argument_list|,
name|room
operator|.
name|hasDisplayName
argument_list|()
argument_list|)
expr_stmt|;
name|addMouseOverHandler
argument_list|(
operator|new
name|MouseOverHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOver
parameter_list|(
name|MouseOverEvent
name|event
parameter_list|)
block|{
name|RoomHint
operator|.
name|showHint
argument_list|(
name|RoomNameCell
operator|.
name|this
operator|.
name|getElement
argument_list|()
argument_list|,
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|room
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|room
operator|.
name|getProperty
argument_list|(
literal|"distance"
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addMouseOutHandler
argument_list|(
operator|new
name|MouseOutHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOut
parameter_list|(
name|MouseOutEvent
name|event
parameter_list|)
block|{
name|RoomHint
operator|.
name|hideHint
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|iDepartment
operator|!=
literal|null
operator|&&
name|iProperties
operator|!=
literal|null
operator|&&
name|iProperties
operator|.
name|isCanSeeCourses
argument_list|()
condition|)
block|{
for|for
control|(
name|DepartmentInterface
name|d
range|:
name|room
operator|.
name|getDepartments
argument_list|()
control|)
block|{
if|if
condition|(
name|iDepartment
operator|.
name|equals
argument_list|(
name|d
operator|.
name|getDeptCode
argument_list|()
argument_list|)
operator|&&
name|d
operator|.
name|getPreference
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|d
operator|.
name|getPreference
argument_list|()
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
name|room
operator|.
name|setPrefix
argument_list|(
name|d
operator|.
name|getPreference
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
class|class
name|SelectableRoomNameCell
extends|extends
name|AriaCheckBox
block|{
name|SelectableRoomNameCell
parameter_list|(
specifier|final
name|RoomDetailInterface
name|room
parameter_list|)
block|{
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|event
parameter_list|)
block|{
name|setSelected
argument_list|(
name|getRow
argument_list|(
name|room
argument_list|)
argument_list|,
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|setText
argument_list|(
name|room
operator|.
name|hasDisplayName
argument_list|()
condition|?
name|MESSAGES
operator|.
name|label
argument_list|(
name|room
operator|.
name|getLabel
argument_list|()
argument_list|,
name|room
operator|.
name|getDisplayName
argument_list|()
argument_list|)
else|:
name|room
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|setWordWrap
argument_list|(
name|room
operator|.
name|hasDisplayName
argument_list|()
argument_list|)
expr_stmt|;
name|addMouseOverHandler
argument_list|(
operator|new
name|MouseOverHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOver
parameter_list|(
name|MouseOverEvent
name|event
parameter_list|)
block|{
name|RoomHint
operator|.
name|showHint
argument_list|(
name|SelectableRoomNameCell
operator|.
name|this
operator|.
name|getElement
argument_list|()
argument_list|,
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|room
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|room
operator|.
name|getProperty
argument_list|(
literal|"distance"
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addMouseOutHandler
argument_list|(
operator|new
name|MouseOutHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOut
parameter_list|(
name|MouseOutEvent
name|event
parameter_list|)
block|{
name|RoomHint
operator|.
name|hideHint
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|iDepartment
operator|!=
literal|null
operator|&&
name|iProperties
operator|!=
literal|null
operator|&&
name|iProperties
operator|.
name|isCanSeeCourses
argument_list|()
condition|)
block|{
for|for
control|(
name|DepartmentInterface
name|d
range|:
name|room
operator|.
name|getDepartments
argument_list|()
control|)
block|{
if|if
condition|(
name|iDepartment
operator|.
name|equals
argument_list|(
name|d
operator|.
name|getDeptCode
argument_list|()
argument_list|)
operator|&&
name|d
operator|.
name|getPreference
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|d
operator|.
name|getPreference
argument_list|()
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
name|room
operator|.
name|setPrefix
argument_list|(
name|d
operator|.
name|getPreference
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|RoomAreaCell
extends|extends
name|HTML
implements|implements
name|UniTimeTable
operator|.
name|HasCellAlignment
block|{
specifier|public
name|RoomAreaCell
parameter_list|(
name|Double
name|value
parameter_list|)
block|{
name|super
argument_list|(
name|value
operator|==
literal|null
condition|?
literal|""
else|:
name|MESSAGES
operator|.
name|roomArea
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|HorizontalAlignmentConstant
name|getCellAlignment
parameter_list|()
block|{
return|return
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|FeaturesCell
extends|extends
name|P
implements|implements
name|HasRefresh
block|{
name|Map
argument_list|<
name|FeatureInterface
argument_list|,
name|P
argument_list|>
name|iFeatures
init|=
operator|new
name|HashMap
argument_list|<
name|FeatureInterface
argument_list|,
name|P
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|FeaturesCell
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|FeatureInterface
argument_list|>
name|features
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|setStyleName
argument_list|(
literal|"features"
argument_list|)
expr_stmt|;
for|for
control|(
name|FeatureInterface
name|feature
range|:
name|features
control|)
block|{
name|P
name|p
init|=
operator|new
name|P
argument_list|(
literal|"feature"
argument_list|)
decl_stmt|;
name|p
operator|.
name|setText
argument_list|(
name|feature
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|feature
operator|.
name|getTitle
argument_list|()
operator|!=
literal|null
condition|)
name|p
operator|.
name|setTitle
argument_list|(
name|feature
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|feature
operator|.
name|getDepartment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|setText
argument_list|(
name|feature
operator|.
name|getLabel
argument_list|()
operator|+
literal|" ("
operator|+
name|RoomsTable
operator|.
name|toString
argument_list|(
name|feature
operator|.
name|getDepartment
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|feature
operator|.
name|getDepartment
argument_list|()
operator|.
name|getColor
argument_list|()
operator|!=
literal|null
condition|)
name|p
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|feature
operator|.
name|getDepartment
argument_list|()
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iFeatures
operator|.
name|put
argument_list|(
name|feature
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|refresh
parameter_list|()
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|FeatureInterface
argument_list|,
name|P
argument_list|>
name|e
range|:
name|iFeatures
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|P
name|p
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|FeatureInterface
name|feature
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|feature
operator|.
name|getDepartment
argument_list|()
operator|!=
literal|null
condition|)
name|p
operator|.
name|setText
argument_list|(
name|feature
operator|.
name|getLabel
argument_list|()
operator|+
literal|" ("
operator|+
name|RoomsTable
operator|.
name|toString
argument_list|(
name|feature
operator|.
name|getDepartment
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|GroupsCell
extends|extends
name|P
implements|implements
name|HasRefresh
block|{
name|Map
argument_list|<
name|GroupInterface
argument_list|,
name|P
argument_list|>
name|iGroups
init|=
operator|new
name|HashMap
argument_list|<
name|GroupInterface
argument_list|,
name|P
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|GroupsCell
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|GroupInterface
argument_list|>
name|groups
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|setStyleName
argument_list|(
literal|"groups"
argument_list|)
expr_stmt|;
for|for
control|(
name|GroupInterface
name|group
range|:
name|groups
control|)
block|{
name|P
name|p
init|=
operator|new
name|P
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
name|p
operator|.
name|setText
argument_list|(
name|group
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|group
operator|.
name|getTitle
argument_list|()
operator|!=
literal|null
condition|)
name|p
operator|.
name|setTitle
argument_list|(
name|group
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|group
operator|.
name|getDepartment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|setText
argument_list|(
name|group
operator|.
name|getLabel
argument_list|()
operator|+
literal|" ("
operator|+
name|RoomsTable
operator|.
name|toString
argument_list|(
name|group
operator|.
name|getDepartment
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|group
operator|.
name|getDepartment
argument_list|()
operator|.
name|getColor
argument_list|()
operator|!=
literal|null
condition|)
name|p
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|group
operator|.
name|getDepartment
argument_list|()
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iGroups
operator|.
name|put
argument_list|(
name|group
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|refresh
parameter_list|()
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|GroupInterface
argument_list|,
name|P
argument_list|>
name|e
range|:
name|iGroups
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|P
name|p
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|GroupInterface
name|group
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|group
operator|.
name|getDepartment
argument_list|()
operator|!=
literal|null
condition|)
name|p
operator|.
name|setText
argument_list|(
name|group
operator|.
name|getLabel
argument_list|()
operator|+
literal|" ("
operator|+
name|RoomsTable
operator|.
name|toString
argument_list|(
name|group
operator|.
name|getDepartment
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|NoteCell
extends|extends
name|P
block|{
specifier|public
name|NoteCell
parameter_list|(
name|String
name|note
parameter_list|,
name|String
name|defaultNote
parameter_list|)
block|{
name|super
argument_list|(
literal|"note"
argument_list|)
expr_stmt|;
if|if
condition|(
name|note
operator|!=
literal|null
condition|)
block|{
name|setHTML
argument_list|(
name|note
operator|.
name|replace
argument_list|(
literal|"\\n"
argument_list|,
literal|"<br>"
argument_list|)
argument_list|)
expr_stmt|;
name|setTitle
argument_list|(
name|note
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|defaultNote
operator|!=
literal|null
condition|)
block|{
name|addStyleName
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|setHTML
argument_list|(
name|defaultNote
operator|.
name|replace
argument_list|(
literal|"\\n"
argument_list|,
literal|"<br>"
argument_list|)
argument_list|)
expr_stmt|;
name|setTitle
argument_list|(
name|defaultNote
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|StatusCell
extends|extends
name|P
block|{
specifier|public
name|StatusCell
parameter_list|(
name|Integer
name|status
parameter_list|,
name|Integer
name|defaultStatus
parameter_list|)
block|{
name|super
argument_list|(
literal|"status"
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
condition|)
block|{
name|setHTML
argument_list|(
name|CONSTANTS
operator|.
name|eventStatusAbbv
argument_list|()
index|[
name|status
index|]
argument_list|)
expr_stmt|;
name|setTitle
argument_list|(
name|CONSTANTS
operator|.
name|eventStatusName
argument_list|()
index|[
name|status
index|]
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|defaultStatus
operator|!=
literal|null
condition|)
block|{
name|addStyleName
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|setText
argument_list|(
name|CONSTANTS
operator|.
name|eventStatusAbbv
argument_list|()
index|[
name|defaultStatus
index|]
argument_list|)
expr_stmt|;
name|setTitle
argument_list|(
name|CONSTANTS
operator|.
name|eventStatusName
argument_list|()
index|[
name|defaultStatus
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setHTML
argument_list|(
name|CONSTANTS
operator|.
name|eventStatusAbbv
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|setTitle
argument_list|(
name|CONSTANTS
operator|.
name|eventStatusName
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|BreakTimeCell
extends|extends
name|P
block|{
specifier|public
name|BreakTimeCell
parameter_list|(
name|Integer
name|breakTime
parameter_list|,
name|Integer
name|defaultBreakTime
parameter_list|)
block|{
name|super
argument_list|(
literal|"break"
argument_list|)
expr_stmt|;
if|if
condition|(
name|breakTime
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|breakTime
operator|!=
literal|0
condition|)
name|setText
argument_list|(
name|breakTime
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|defaultBreakTime
operator|!=
literal|null
condition|)
block|{
name|addStyleName
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
if|if
condition|(
name|defaultBreakTime
operator|!=
literal|0
condition|)
name|setText
argument_list|(
name|defaultBreakTime
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|DepartmentInterface
name|d
parameter_list|,
name|boolean
name|ext
parameter_list|)
block|{
name|RoomCookie
name|cookie
init|=
name|RoomCookie
operator|.
name|getInstance
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|DeptMode
operator|.
name|values
argument_list|()
index|[
name|cookie
operator|.
name|getDeptMode
argument_list|()
index|]
condition|)
block|{
case|case
name|ABBV
case|:
return|return
name|ext
condition|?
name|d
operator|.
name|getExtAbbreviationWhenExist
argument_list|()
else|:
name|d
operator|.
name|getAbbreviationOrCode
argument_list|()
return|;
case|case
name|CODE
case|:
return|return
name|d
operator|.
name|getDeptCode
argument_list|()
return|;
case|case
name|ABBV_NAME
case|:
return|return
name|ext
condition|?
name|d
operator|.
name|getExtAbbreviationWhenExist
argument_list|()
operator|+
literal|" - "
operator|+
name|d
operator|.
name|getExtLabelWhenExist
argument_list|()
else|:
name|d
operator|.
name|getAbbreviationOrCode
argument_list|()
operator|+
literal|" - "
operator|+
name|d
operator|.
name|getLabel
argument_list|()
return|;
case|case
name|CODE_NAME
case|:
return|return
name|ext
condition|?
name|d
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|" - "
operator|+
name|d
operator|.
name|getExtLabelWhenExist
argument_list|()
else|:
name|d
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|" - "
operator|+
name|d
operator|.
name|getLabel
argument_list|()
return|;
case|case
name|NAME
case|:
return|return
name|ext
condition|?
name|d
operator|.
name|getExtLabelWhenExist
argument_list|()
else|:
name|d
operator|.
name|getLabel
argument_list|()
return|;
default|default:
return|return
name|d
operator|.
name|getDeptCode
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DepartmentCell
extends|extends
name|P
implements|implements
name|HasRefresh
block|{
name|boolean
name|iExt
decl_stmt|;
name|Map
argument_list|<
name|DepartmentInterface
argument_list|,
name|P
argument_list|>
name|iP
init|=
operator|new
name|HashMap
argument_list|<
name|DepartmentInterface
argument_list|,
name|P
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|DepartmentCell
parameter_list|(
name|boolean
name|ext
parameter_list|,
name|DepartmentInterface
modifier|...
name|departments
parameter_list|)
block|{
name|super
argument_list|(
literal|"departments"
argument_list|)
expr_stmt|;
name|iExt
operator|=
name|ext
expr_stmt|;
for|for
control|(
name|DepartmentInterface
name|department
range|:
name|departments
control|)
block|{
if|if
condition|(
name|department
operator|==
literal|null
condition|)
continue|continue;
name|P
name|p
init|=
operator|new
name|P
argument_list|(
literal|"department"
argument_list|)
decl_stmt|;
name|p
operator|.
name|setText
argument_list|(
name|RoomsTable
operator|.
name|toString
argument_list|(
name|department
argument_list|,
name|iExt
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|department
operator|.
name|getTitle
argument_list|()
operator|!=
literal|null
condition|)
name|p
operator|.
name|setTitle
argument_list|(
name|department
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|department
operator|.
name|getColor
argument_list|()
operator|!=
literal|null
condition|)
name|p
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|department
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|iP
operator|.
name|put
argument_list|(
name|department
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|DepartmentCell
parameter_list|(
name|boolean
name|ext
parameter_list|,
name|List
argument_list|<
name|DepartmentInterface
argument_list|>
name|departments
parameter_list|,
name|DepartmentInterface
name|control
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
name|super
argument_list|(
literal|"departments"
argument_list|)
expr_stmt|;
name|iExt
operator|=
name|ext
expr_stmt|;
if|if
condition|(
name|all
condition|)
block|{
name|P
name|p
init|=
operator|new
name|P
argument_list|(
literal|"department"
argument_list|,
literal|"all"
argument_list|)
decl_stmt|;
name|p
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|departmentsAllLabel
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|departmentsAllTitle
argument_list|()
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|DepartmentInterface
name|department
range|:
name|departments
control|)
block|{
name|P
name|p
init|=
operator|new
name|P
argument_list|(
literal|"department"
argument_list|)
decl_stmt|;
name|p
operator|.
name|setText
argument_list|(
name|RoomsTable
operator|.
name|toString
argument_list|(
name|department
argument_list|,
name|iExt
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|department
operator|.
name|getTitle
argument_list|()
operator|!=
literal|null
condition|)
name|p
operator|.
name|setTitle
argument_list|(
name|department
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|department
operator|.
name|getColor
argument_list|()
operator|!=
literal|null
condition|)
name|p
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|department
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|department
operator|.
name|equals
argument_list|(
name|control
argument_list|)
condition|)
name|p
operator|.
name|addStyleName
argument_list|(
literal|"control"
argument_list|)
expr_stmt|;
name|iP
operator|.
name|put
argument_list|(
name|department
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|refresh
parameter_list|()
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|DepartmentInterface
argument_list|,
name|P
argument_list|>
name|e
range|:
name|iP
operator|.
name|entrySet
argument_list|()
control|)
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|setText
argument_list|(
name|RoomsTable
operator|.
name|toString
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|iExt
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|PreferenceCell
extends|extends
name|DepartmentCell
block|{
specifier|public
name|PreferenceCell
parameter_list|(
name|List
argument_list|<
name|DepartmentInterface
argument_list|>
name|departments
parameter_list|)
block|{
name|super
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|boolean
name|abbv
init|=
name|RoomCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getDeptMode
argument_list|()
operator|<=
literal|1
decl_stmt|;
for|for
control|(
name|DepartmentInterface
name|department
range|:
name|departments
control|)
block|{
if|if
condition|(
name|department
operator|.
name|getPreference
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|P
name|p
init|=
operator|new
name|P
argument_list|(
literal|"department"
argument_list|)
decl_stmt|;
if|if
condition|(
name|abbv
condition|)
block|{
name|String
name|prefAbbv
init|=
name|department
operator|.
name|getPreference
argument_list|()
operator|.
name|getAbbv
argument_list|()
decl_stmt|;
name|p
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|roomPreferenceShort
argument_list|(
name|RoomsTable
operator|.
name|toString
argument_list|(
name|department
argument_list|,
name|iExt
argument_list|)
argument_list|,
name|prefAbbv
operator|==
literal|null
condition|?
name|department
operator|.
name|getPreference
argument_list|()
operator|.
name|getName
argument_list|()
else|:
name|prefAbbv
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|roomPreference
argument_list|(
name|RoomsTable
operator|.
name|toString
argument_list|(
name|department
argument_list|,
name|iExt
argument_list|)
argument_list|,
name|department
operator|.
name|getPreference
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|p
operator|.
name|setTitle
argument_list|(
name|department
operator|.
name|getPreference
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|department
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|department
operator|.
name|getPreference
argument_list|()
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
name|iP
operator|.
name|put
argument_list|(
name|department
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|PreferenceCell
parameter_list|(
name|DepartmentInterface
name|department
parameter_list|)
block|{
name|super
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setText
argument_list|(
name|department
operator|.
name|getPreference
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|setTitle
argument_list|(
name|department
operator|.
name|getPreference
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|department
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|department
operator|.
name|getPreference
argument_list|()
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|refresh
parameter_list|()
block|{
name|boolean
name|abbv
init|=
name|RoomCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getDeptMode
argument_list|()
operator|<=
literal|1
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|DepartmentInterface
argument_list|,
name|P
argument_list|>
name|e
range|:
name|iP
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|DepartmentInterface
name|department
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|abbv
condition|)
block|{
name|String
name|prefAbbv
init|=
name|department
operator|.
name|getPreference
argument_list|()
operator|.
name|getAbbv
argument_list|()
decl_stmt|;
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|roomPreferenceShort
argument_list|(
name|RoomsTable
operator|.
name|toString
argument_list|(
name|department
argument_list|,
name|iExt
argument_list|)
argument_list|,
name|prefAbbv
operator|==
literal|null
condition|?
name|department
operator|.
name|getPreference
argument_list|()
operator|.
name|getName
argument_list|()
else|:
name|prefAbbv
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|roomPreference
argument_list|(
name|RoomsTable
operator|.
name|toString
argument_list|(
name|department
argument_list|,
name|iExt
argument_list|)
argument_list|,
name|department
operator|.
name|getPreference
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|ExamTypesCell
extends|extends
name|P
block|{
specifier|public
name|ExamTypesCell
parameter_list|(
specifier|final
name|Long
name|roomId
parameter_list|,
name|List
argument_list|<
name|ExamTypeInterface
argument_list|>
name|examTypes
parameter_list|)
block|{
name|super
argument_list|(
literal|"exam-types"
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|ExamTypeInterface
name|examType
range|:
name|examTypes
control|)
block|{
specifier|final
name|P
name|p
init|=
operator|new
name|P
argument_list|(
name|examType
operator|.
name|isFinal
argument_list|()
condition|?
literal|"final"
else|:
literal|"midterm"
argument_list|)
decl_stmt|;
name|p
operator|.
name|setText
argument_list|(
name|examType
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|addMouseOverHandler
argument_list|(
operator|new
name|MouseOverHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOver
parameter_list|(
name|MouseOverEvent
name|event
parameter_list|)
block|{
name|PeriodPreferencesHint
operator|.
name|showHint
argument_list|(
name|p
operator|.
name|getElement
argument_list|()
argument_list|,
name|roomId
argument_list|,
name|examType
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|p
operator|.
name|addMouseOutHandler
argument_list|(
operator|new
name|MouseOutHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOut
parameter_list|(
name|MouseOutEvent
name|event
parameter_list|)
block|{
name|PeriodPreferencesHint
operator|.
name|hideHint
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|RoomCell
extends|extends
name|Label
block|{
specifier|public
name|RoomCell
parameter_list|(
name|RoomPropertyInterface
name|property
parameter_list|)
block|{
name|super
argument_list|(
name|property
operator|==
literal|null
condition|?
literal|""
else|:
name|property
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|property
operator|.
name|getTitle
argument_list|()
operator|!=
literal|null
condition|)
name|setTitle
argument_list|(
name|property
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|property
operator|.
name|getColor
argument_list|()
operator|!=
literal|null
condition|)
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|property
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|PictureCell
extends|extends
name|Image
block|{
specifier|private
name|RoomPictureInterface
name|iPicture
decl_stmt|;
specifier|private
name|P
name|iPopupWidget
init|=
literal|null
decl_stmt|;
specifier|public
name|PictureCell
parameter_list|(
name|RoomPictureInterface
name|picture
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|iPicture
operator|=
name|picture
expr_stmt|;
name|setStyleName
argument_list|(
literal|"picture"
argument_list|)
expr_stmt|;
name|setUrl
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"picture?id="
operator|+
name|picture
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|setAltText
argument_list|(
name|picture
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|picture
operator|.
name|getPictureType
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" ("
operator|+
name|picture
operator|.
name|getPictureType
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
operator|+
literal|")"
operator|)
argument_list|)
expr_stmt|;
name|addMouseOverHandler
argument_list|(
operator|new
name|MouseOverHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOver
parameter_list|(
name|MouseOverEvent
name|event
parameter_list|)
block|{
name|GwtHint
operator|.
name|showHint
argument_list|(
name|getElement
argument_list|()
argument_list|,
name|getPopupWidget
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addMouseOutHandler
argument_list|(
operator|new
name|MouseOutHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOut
parameter_list|(
name|MouseOutEvent
name|event
parameter_list|)
block|{
name|GwtHint
operator|.
name|hideHint
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|P
name|getPopupWidget
parameter_list|()
block|{
if|if
condition|(
name|iPopupWidget
operator|==
literal|null
condition|)
block|{
name|iPopupWidget
operator|=
operator|new
name|P
argument_list|(
literal|"unitime-RoomPictureHint"
argument_list|)
expr_stmt|;
name|Image
name|image
init|=
operator|new
name|Image
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"picture?id="
operator|+
name|iPicture
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|image
operator|.
name|setStyleName
argument_list|(
literal|"picture"
argument_list|)
expr_stmt|;
name|iPopupWidget
operator|.
name|add
argument_list|(
name|image
argument_list|)
expr_stmt|;
name|P
name|caption
init|=
operator|new
name|P
argument_list|(
literal|"caption"
argument_list|)
decl_stmt|;
name|caption
operator|.
name|setText
argument_list|(
name|iPicture
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|iPicture
operator|.
name|getPictureType
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" ("
operator|+
name|iPicture
operator|.
name|getPictureType
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
operator|+
literal|")"
operator|)
argument_list|)
expr_stmt|;
name|iPopupWidget
operator|.
name|add
argument_list|(
name|caption
argument_list|)
expr_stmt|;
block|}
return|return
name|iPopupWidget
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|LinkCell
extends|extends
name|ImageLink
block|{
name|LinkCell
parameter_list|(
name|RoomPictureInterface
name|picture
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|download
argument_list|()
argument_list|)
argument_list|,
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"picture?id="
operator|+
name|picture
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|setStyleName
argument_list|(
literal|"link"
argument_list|)
expr_stmt|;
name|setTitle
argument_list|(
name|picture
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|picture
operator|.
name|getPictureType
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" ("
operator|+
name|picture
operator|.
name|getPictureType
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|")"
operator|)
argument_list|)
expr_stmt|;
name|setText
argument_list|(
name|picture
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|picture
operator|.
name|getPictureType
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" ("
operator|+
name|picture
operator|.
name|getPictureType
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
operator|+
literal|")"
operator|)
argument_list|)
expr_stmt|;
name|setTarget
argument_list|(
literal|"_blank"
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONCLICK
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onBrowserEvent
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getTypeInt
argument_list|()
operator|==
name|Event
operator|.
name|ONCLICK
condition|)
block|{
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|onBrowserEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|PicturesCell
extends|extends
name|P
block|{
specifier|public
name|PicturesCell
parameter_list|(
name|RoomDetailInterface
name|room
parameter_list|)
block|{
name|super
argument_list|(
literal|"pictures"
argument_list|)
expr_stmt|;
if|if
condition|(
name|room
operator|.
name|hasTablePictures
argument_list|()
condition|)
block|{
for|for
control|(
name|RoomPictureInterface
name|picture
range|:
name|room
operator|.
name|getTablePictures
argument_list|()
control|)
name|add
argument_list|(
name|picture
operator|.
name|getPictureType
argument_list|()
operator|==
literal|null
operator|||
name|picture
operator|.
name|getPictureType
argument_list|()
operator|.
name|isImage
argument_list|()
condition|?
operator|new
name|PictureCell
argument_list|(
name|picture
argument_list|)
else|:
operator|new
name|LinkCell
argument_list|(
name|picture
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|PicturesCell
parameter_list|(
name|RoomDetailInterface
name|room
parameter_list|,
name|AttachmentTypeInterface
name|type
parameter_list|)
block|{
name|super
argument_list|(
literal|"pictures"
argument_list|)
expr_stmt|;
if|if
condition|(
name|room
operator|.
name|hasPictures
argument_list|(
name|type
argument_list|)
condition|)
block|{
for|for
control|(
name|RoomPictureInterface
name|picture
range|:
name|room
operator|.
name|getPictures
argument_list|(
name|type
argument_list|)
control|)
name|add
argument_list|(
name|picture
operator|.
name|getPictureType
argument_list|()
operator|==
literal|null
operator|||
name|picture
operator|.
name|getPictureType
argument_list|()
operator|.
name|isImage
argument_list|()
condition|?
operator|new
name|PictureCell
argument_list|(
name|picture
argument_list|)
else|:
operator|new
name|LinkCell
argument_list|(
name|picture
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|MapCell
extends|extends
name|Image
block|{
specifier|public
name|MapCell
parameter_list|(
name|RoomDetailInterface
name|room
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
if|if
condition|(
name|room
operator|.
name|hasMiniMapUrl
argument_list|()
condition|)
block|{
name|setStyleName
argument_list|(
literal|"map"
argument_list|)
expr_stmt|;
name|setUrl
argument_list|(
name|room
operator|.
name|getMiniMapUrl
argument_list|()
argument_list|)
expr_stmt|;
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|titleRoomMap
argument_list|(
name|room
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|AvailabilityCell
extends|extends
name|P
implements|implements
name|HasRefresh
block|{
specifier|private
name|boolean
name|iEvents
decl_stmt|;
specifier|private
name|RoomDetailInterface
name|iRoom
decl_stmt|;
specifier|public
name|AvailabilityCell
parameter_list|(
name|RoomDetailInterface
name|room
parameter_list|,
name|boolean
name|events
parameter_list|)
block|{
name|super
argument_list|(
literal|"availability"
argument_list|)
expr_stmt|;
name|iRoom
operator|=
name|room
expr_stmt|;
name|iEvents
operator|=
name|events
expr_stmt|;
name|addMouseOverHandler
argument_list|(
operator|new
name|MouseOverHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOver
parameter_list|(
name|MouseOverEvent
name|event
parameter_list|)
block|{
name|RoomSharingHint
operator|.
name|showHint
argument_list|(
name|getElement
argument_list|()
argument_list|,
name|iRoom
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|iEvents
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addMouseOutHandler
argument_list|(
operator|new
name|MouseOutHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOut
parameter_list|(
name|MouseOutEvent
name|event
parameter_list|)
block|{
name|RoomSharingHint
operator|.
name|hideHint
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|refresh
parameter_list|()
block|{
name|clear
argument_list|()
expr_stmt|;
name|setHTML
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|RoomCookie
name|cookie
init|=
name|RoomCookie
operator|.
name|getInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|iEvents
condition|)
block|{
if|if
condition|(
name|cookie
operator|.
name|isGridAsText
argument_list|()
condition|)
block|{
if|if
condition|(
name|iRoom
operator|.
name|getEventAvailability
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|P
name|p
init|=
operator|new
name|P
argument_list|(
literal|"text"
argument_list|)
decl_stmt|;
name|p
operator|.
name|setHTML
argument_list|(
name|iRoom
operator|.
name|getEventAvailability
argument_list|()
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Image
name|availability
init|=
operator|new
name|Image
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"pattern?loc="
operator|+
name|iRoom
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"&e=1&v="
operator|+
operator|(
name|cookie
operator|.
name|areRoomsHorizontal
argument_list|()
condition|?
literal|"0"
else|:
literal|"1"
operator|)
operator|+
operator|(
name|cookie
operator|.
name|hasMode
argument_list|()
condition|?
literal|"&s="
operator|+
name|cookie
operator|.
name|getMode
argument_list|()
else|:
literal|""
operator|)
argument_list|)
decl_stmt|;
name|availability
operator|.
name|setStyleName
argument_list|(
literal|"grid"
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|availability
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|cookie
operator|.
name|isGridAsText
argument_list|()
condition|)
block|{
if|if
condition|(
name|iRoom
operator|.
name|getAvailability
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|iRoom
operator|.
name|getAvailability
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|P
name|p
init|=
operator|new
name|P
argument_list|(
literal|"text"
argument_list|)
decl_stmt|;
name|p
operator|.
name|setHTML
argument_list|(
name|iRoom
operator|.
name|getAvailability
argument_list|()
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Image
name|availability
init|=
operator|new
name|Image
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"pattern?loc="
operator|+
name|iRoom
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"&v="
operator|+
operator|(
name|cookie
operator|.
name|areRoomsHorizontal
argument_list|()
condition|?
literal|"0"
else|:
literal|"1"
operator|)
operator|+
operator|(
name|cookie
operator|.
name|hasMode
argument_list|()
condition|?
literal|"&s="
operator|+
name|cookie
operator|.
name|getMode
argument_list|()
else|:
literal|""
operator|)
argument_list|)
decl_stmt|;
name|availability
operator|.
name|setStyleName
argument_list|(
literal|"grid"
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|availability
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iRoom
operator|.
name|getRoomSharingNote
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|iRoom
operator|.
name|getRoomSharingNote
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|P
name|p
init|=
operator|new
name|P
argument_list|(
literal|"note"
argument_list|)
decl_stmt|;
name|p
operator|.
name|setHTML
argument_list|(
name|iRoom
operator|.
name|getRoomSharingNote
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|setTitle
argument_list|(
name|iRoom
operator|.
name|getRoomSharingNote
argument_list|()
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|PeriodPreferenceCell
extends|extends
name|P
implements|implements
name|HasRefresh
block|{
specifier|private
name|RoomDetailInterface
name|iRoom
decl_stmt|;
specifier|private
name|ExamTypeInterface
name|iType
decl_stmt|;
specifier|public
name|PeriodPreferenceCell
parameter_list|(
name|RoomDetailInterface
name|room
parameter_list|,
name|ExamTypeInterface
name|type
parameter_list|)
block|{
name|super
argument_list|(
literal|"periodpref"
argument_list|)
expr_stmt|;
name|iRoom
operator|=
name|room
expr_stmt|;
name|iType
operator|=
name|type
expr_stmt|;
name|addMouseOverHandler
argument_list|(
operator|new
name|MouseOverHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOver
parameter_list|(
name|MouseOverEvent
name|event
parameter_list|)
block|{
name|PeriodPreferencesHint
operator|.
name|showHint
argument_list|(
name|getElement
argument_list|()
argument_list|,
name|iRoom
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|iType
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addMouseOutHandler
argument_list|(
operator|new
name|MouseOutHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOut
parameter_list|(
name|MouseOutEvent
name|event
parameter_list|)
block|{
name|RoomSharingHint
operator|.
name|hideHint
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|refresh
parameter_list|()
block|{
name|clear
argument_list|()
expr_stmt|;
name|setHTML
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|RoomCookie
name|cookie
init|=
name|RoomCookie
operator|.
name|getInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|cookie
operator|.
name|isGridAsText
argument_list|()
operator|||
operator|!
name|iType
operator|.
name|isFinal
argument_list|()
condition|)
block|{
if|if
condition|(
name|iRoom
operator|.
name|getPeriodPreference
argument_list|()
operator|!=
literal|null
condition|)
name|setHTML
argument_list|(
name|iRoom
operator|.
name|getPeriodPreference
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|add
argument_list|(
operator|new
name|Image
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"pattern?loc="
operator|+
name|iRoom
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"&xt="
operator|+
name|iType
operator|.
name|getId
argument_list|()
operator|+
literal|"&v="
operator|+
operator|(
name|cookie
operator|.
name|areRoomsHorizontal
argument_list|()
condition|?
literal|"0"
else|:
literal|"1"
operator|)
operator|+
operator|(
name|cookie
operator|.
name|hasMode
argument_list|()
condition|?
literal|"&s="
operator|+
name|cookie
operator|.
name|getMode
argument_list|()
else|:
literal|""
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
interface|interface
name|Check
block|{
specifier|public
name|boolean
name|isChecked
parameter_list|()
function_decl|;
block|}
specifier|public
specifier|static
enum|enum
name|DeptMode
block|{
name|CODE
argument_list|(
name|MESSAGES
operator|.
name|fieldCode
argument_list|()
argument_list|)
block|,
name|ABBV
argument_list|(
name|MESSAGES
operator|.
name|fieldAbbreviation
argument_list|()
argument_list|)
block|,
name|NAME
argument_list|(
name|MESSAGES
operator|.
name|fieldName
argument_list|()
argument_list|)
block|,
name|ABBV_NAME
argument_list|(
name|MESSAGES
operator|.
name|fieldAbbv
argument_list|()
operator|+
literal|" - "
operator|+
name|MESSAGES
operator|.
name|fieldName
argument_list|()
argument_list|)
block|,
name|CODE_NAME
argument_list|(
name|MESSAGES
operator|.
name|fieldCode
argument_list|()
operator|+
literal|" - "
operator|+
name|MESSAGES
operator|.
name|fieldName
argument_list|()
argument_list|)
block|;
specifier|private
name|String
name|iName
decl_stmt|;
name|DeptMode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|iName
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
block|}
specifier|public
specifier|static
interface|interface
name|SortOperation
extends|extends
name|Operation
extends|,
name|HasColumnName
block|{}
specifier|public
specifier|static
interface|interface
name|HasRefresh
block|{
specifier|public
name|void
name|refresh
parameter_list|()
function_decl|;
block|}
specifier|public
name|RoomDetailInterface
name|getRoom
parameter_list|(
name|Long
name|roomId
parameter_list|)
block|{
if|if
condition|(
name|roomId
operator|==
literal|null
condition|)
return|return
literal|null
return|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|roomId
operator|.
name|equals
argument_list|(
name|getData
argument_list|(
name|i
argument_list|)
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
return|return
name|getData
argument_list|(
name|i
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|scrollTo
parameter_list|(
name|Long
name|roomId
parameter_list|)
block|{
if|if
condition|(
name|roomId
operator|==
literal|null
condition|)
return|return;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|roomId
operator|.
name|equals
argument_list|(
name|getData
argument_list|(
name|i
argument_list|)
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|ToolBox
operator|.
name|scrollToElement
argument_list|(
name|getRowFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|RoomDetailInterface
name|getPrevious
parameter_list|(
name|Long
name|roomId
parameter_list|)
block|{
if|if
condition|(
name|roomId
operator|==
literal|null
condition|)
return|return
literal|null
return|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|roomId
operator|.
name|equals
argument_list|(
name|getData
argument_list|(
name|i
argument_list|)
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
return|return
name|getData
argument_list|(
name|i
operator|-
literal|1
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|RoomDetailInterface
name|getNext
parameter_list|(
name|Long
name|roomId
parameter_list|)
block|{
if|if
condition|(
name|roomId
operator|==
literal|null
condition|)
return|return
literal|null
return|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|getRowCount
argument_list|()
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|roomId
operator|.
name|equals
argument_list|(
name|getData
argument_list|(
name|i
argument_list|)
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
return|return
name|getData
argument_list|(
name|i
operator|+
literal|1
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Boolean
name|isRoomSelected
parameter_list|(
name|int
name|row
parameter_list|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
return|return
operator|(
operator|(
name|CheckBox
operator|)
name|w
operator|)
operator|.
name|getValue
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|boolean
name|isRoomSelected
parameter_list|(
name|RoomDetailInterface
name|room
parameter_list|)
block|{
if|if
condition|(
operator|!
name|iSelectable
condition|)
return|return
literal|false
return|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
if|if
condition|(
name|getData
argument_list|(
name|row
argument_list|)
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
return|return
name|isRoomSelected
argument_list|(
name|row
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|int
name|getRow
parameter_list|(
name|RoomDetailInterface
name|room
parameter_list|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
if|if
condition|(
name|getData
argument_list|(
name|row
argument_list|)
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
return|return
name|row
return|;
return|return
operator|-
literal|1
return|;
block|}
specifier|public
name|void
name|selectRoom
parameter_list|(
name|RoomDetailInterface
name|room
parameter_list|,
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|iSelectable
condition|)
return|return;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
if|if
condition|(
name|getData
argument_list|(
name|row
argument_list|)
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|selectRoom
argument_list|(
name|row
argument_list|,
name|value
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
specifier|public
name|void
name|selectRoom
parameter_list|(
name|int
name|row
parameter_list|,
name|boolean
name|value
parameter_list|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
operator|(
operator|(
name|CheckBox
operator|)
name|w
operator|)
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|CheckBox
name|getRoomSelection
parameter_list|(
name|int
name|row
parameter_list|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
return|return
operator|(
name|CheckBox
operator|)
name|w
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|boolean
name|isAllDepartments
parameter_list|(
name|RoomDetailInterface
name|room
parameter_list|)
block|{
return|return
name|room
operator|.
name|getDepartments
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|3
operator|&&
name|iProperties
operator|.
name|getNrDepartments
argument_list|()
operator|==
name|room
operator|.
name|getDepartments
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
block|}
end_class

end_unit

