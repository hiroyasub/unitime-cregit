begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|rooms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|page
operator|.
name|UniTimeNotifications
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|P
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|PeriodInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|PeriodPreferenceModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|PreferenceInterface
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseDownEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseDownHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|shared
operator|.
name|HandlerRegistration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|DateTimeFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|AbsolutePanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|RootPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|datepicker
operator|.
name|client
operator|.
name|CalendarUtil
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|PeriodPreferencesWidget
extends|extends
name|Composite
implements|implements
name|HasValue
argument_list|<
name|PeriodPreferenceModel
argument_list|>
block|{
specifier|private
specifier|static
name|GwtRpcServiceAsync
name|RPC
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtRpcService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|GwtConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|AbsolutePanel
name|iPanel
decl_stmt|;
specifier|private
name|PreferenceInterface
name|iPreference
init|=
literal|null
decl_stmt|;
specifier|private
name|P
name|iSelectedIcon
init|=
literal|null
decl_stmt|,
name|iSelectedTitle
init|=
literal|null
decl_stmt|;
specifier|private
name|PeriodPreferenceModel
name|iModel
decl_stmt|;
specifier|protected
name|boolean
name|iEditable
init|=
literal|true
decl_stmt|;
specifier|public
name|PeriodPreferencesWidget
parameter_list|(
name|boolean
name|editable
parameter_list|)
block|{
name|iEditable
operator|=
name|editable
expr_stmt|;
name|iPanel
operator|=
operator|new
name|AbsolutePanel
argument_list|()
expr_stmt|;
name|initWidget
argument_list|(
name|iPanel
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AbsolutePanel
name|getPanel
parameter_list|()
block|{
return|return
name|iPanel
return|;
block|}
specifier|public
name|boolean
name|isEditable
parameter_list|()
block|{
return|return
name|iEditable
operator|&&
name|iModel
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setEditable
parameter_list|(
name|boolean
name|editable
parameter_list|)
block|{
name|iEditable
operator|=
name|editable
expr_stmt|;
block|}
specifier|public
name|boolean
name|isEditable
parameter_list|(
name|PreferenceInterface
name|preference
parameter_list|)
block|{
return|return
name|isEditable
argument_list|()
operator|&&
name|preference
operator|.
name|isEditable
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isEditable
parameter_list|(
name|int
name|day
parameter_list|,
name|int
name|slot
parameter_list|)
block|{
return|return
name|isEditable
argument_list|()
operator|&&
name|iModel
operator|.
name|getPeriod
argument_list|(
name|day
argument_list|,
name|slot
argument_list|)
operator|!=
literal|null
return|;
block|}
specifier|public
name|PeriodPreferenceModel
name|getModel
parameter_list|()
block|{
return|return
name|iModel
return|;
block|}
specifier|public
name|void
name|setModel
parameter_list|(
name|PeriodPreferenceModel
name|model
parameter_list|)
block|{
name|iModel
operator|=
name|model
expr_stmt|;
name|iPreference
operator|=
name|iModel
operator|.
name|getDefaultPreference
argument_list|()
expr_stmt|;
if|if
condition|(
name|iPreference
operator|==
literal|null
condition|)
name|iPreference
operator|=
name|iModel
operator|.
name|getPreferences
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|render
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|insert
parameter_list|(
specifier|final
name|RootPanel
name|panel
parameter_list|,
name|Long
name|eventAvailability
parameter_list|)
block|{
name|String
index|[]
name|ids
init|=
name|panel
operator|.
name|getElement
argument_list|()
operator|.
name|getInnerHTML
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|Long
name|locationId
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|ids
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Long
name|examTypeId
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|ids
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
name|RoomInterface
operator|.
name|PeriodPreferenceRequest
operator|.
name|load
argument_list|(
name|locationId
argument_list|,
name|examTypeId
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|PeriodPreferenceModel
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|failedToLoadPeriodPreferences
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|PeriodPreferenceModel
name|result
parameter_list|)
block|{
name|panel
operator|.
name|getElement
argument_list|()
operator|.
name|setInnerText
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|setModel
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|PeriodPreferencesWidget
operator|.
name|this
argument_list|)
expr_stmt|;
name|panel
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
name|slot2short
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
name|int
name|h
init|=
name|slot
operator|/
literal|12
decl_stmt|;
name|int
name|m
init|=
literal|5
operator|*
operator|(
name|slot
operator|%
literal|12
operator|)
decl_stmt|;
if|if
condition|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
condition|)
return|return
operator|(
name|h
operator|>
literal|12
condition|?
name|h
operator|-
literal|12
else|:
name|h
operator|)
operator|+
literal|":"
operator|+
operator|(
name|m
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|m
operator|+
operator|(
name|h
operator|==
literal|24
condition|?
literal|"a"
else|:
name|h
operator|>=
literal|12
condition|?
literal|"p"
else|:
literal|"a"
operator|)
return|;
else|else
return|return
name|h
operator|+
literal|":"
operator|+
operator|(
name|m
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|m
return|;
block|}
specifier|private
class|class
name|Cell
extends|extends
name|P
block|{
specifier|private
name|int
name|iDay
decl_stmt|,
name|iSlot
decl_stmt|;
specifier|private
name|Date
name|iDate
decl_stmt|;
specifier|private
name|PeriodInterface
name|iPeriod
decl_stmt|;
name|Cell
parameter_list|(
name|int
name|day
parameter_list|,
name|int
name|slot
parameter_list|,
name|Date
name|date
parameter_list|,
name|PeriodInterface
name|period
parameter_list|)
block|{
name|super
argument_list|(
literal|"cell"
argument_list|,
literal|"item"
argument_list|,
name|isEditable
argument_list|()
operator|&&
name|period
operator|!=
literal|null
condition|?
literal|"clickable"
else|:
literal|null
argument_list|,
name|period
operator|==
literal|null
condition|?
literal|"disabled"
else|:
literal|null
argument_list|)
expr_stmt|;
name|iDay
operator|=
name|day
expr_stmt|;
name|iSlot
operator|=
name|slot
expr_stmt|;
name|iDate
operator|=
name|date
expr_stmt|;
name|iPeriod
operator|=
name|period
expr_stmt|;
if|if
condition|(
name|period
operator|!=
literal|null
condition|)
block|{
name|PreferenceInterface
name|preference
init|=
name|iModel
operator|.
name|getPreference
argument_list|(
name|day
argument_list|,
name|slot
argument_list|)
decl_stmt|;
if|if
condition|(
name|preference
operator|==
literal|null
condition|)
block|{
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|clearBackgroundColor
argument_list|()
expr_stmt|;
name|setHTML
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|setTitle
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setBackgroundColor
argument_list|(
name|preference
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
name|setTitle
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|examPeriodDateFormat
argument_list|()
argument_list|)
operator|.
name|format
argument_list|(
name|date
argument_list|)
operator|+
literal|" "
operator|+
name|slot2short
argument_list|(
name|slot
argument_list|)
operator|+
operator|(
name|period
operator|==
literal|null
condition|?
literal|""
else|:
literal|" - "
operator|+
name|slot2short
argument_list|(
name|slot
operator|+
name|period
operator|.
name|getLength
argument_list|()
argument_list|)
operator|)
operator|+
literal|": "
operator|+
name|preference
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isEditable
argument_list|()
condition|)
name|addMouseDownHandler
argument_list|(
operator|new
name|MouseDownHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseDown
parameter_list|(
name|MouseDownEvent
name|event
parameter_list|)
block|{
name|setOption
argument_list|(
name|iPreference
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setOption
parameter_list|(
name|PreferenceInterface
name|preference
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isEditable
argument_list|()
operator|||
name|iPeriod
operator|==
literal|null
condition|)
return|return;
name|iModel
operator|.
name|setPreference
argument_list|(
name|iDay
argument_list|,
name|iSlot
argument_list|,
name|preference
argument_list|)
expr_stmt|;
if|if
condition|(
name|preference
operator|==
literal|null
condition|)
block|{
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|clearBackgroundColor
argument_list|()
expr_stmt|;
name|setHTML
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|setTitle
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setBackgroundColor
argument_list|(
name|preference
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
name|setTitle
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|examPeriodDateFormat
argument_list|()
argument_list|)
operator|.
name|format
argument_list|(
name|iDate
argument_list|)
operator|+
literal|" "
operator|+
name|slot2short
argument_list|(
name|iSlot
argument_list|)
operator|+
literal|" - "
operator|+
name|slot2short
argument_list|(
name|iSlot
operator|+
name|iPeriod
operator|.
name|getLength
argument_list|()
argument_list|)
operator|+
literal|": "
operator|+
name|preference
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|PeriodPreferencesWidget
operator|.
name|this
argument_list|,
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|D
extends|extends
name|P
block|{
specifier|private
name|int
name|iDay
decl_stmt|,
name|iSlot
decl_stmt|;
specifier|private
name|Date
name|iDate
decl_stmt|;
specifier|private
name|PeriodInterface
name|iPeriod
decl_stmt|;
specifier|private
name|D
parameter_list|(
name|int
name|day
parameter_list|,
name|int
name|slot
parameter_list|,
name|Date
name|date
parameter_list|,
name|PeriodInterface
name|period
parameter_list|)
block|{
name|super
argument_list|(
literal|"cell"
argument_list|,
literal|"day"
argument_list|,
name|isEditable
argument_list|()
operator|&&
name|period
operator|!=
literal|null
condition|?
literal|"clickable"
else|:
literal|null
argument_list|,
name|period
operator|==
literal|null
condition|?
literal|"unavailable"
else|:
literal|null
argument_list|)
expr_stmt|;
name|iDay
operator|=
name|day
expr_stmt|;
name|iSlot
operator|=
name|slot
expr_stmt|;
name|iDate
operator|=
name|date
expr_stmt|;
name|iPeriod
operator|=
name|period
expr_stmt|;
name|setText
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"d"
argument_list|)
operator|.
name|format
argument_list|(
name|date
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|period
operator|!=
literal|null
condition|)
block|{
name|PreferenceInterface
name|preference
init|=
name|iModel
operator|.
name|getPreference
argument_list|(
name|day
argument_list|,
name|slot
argument_list|)
decl_stmt|;
if|if
condition|(
name|preference
operator|==
literal|null
condition|)
block|{
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|clearBackgroundColor
argument_list|()
expr_stmt|;
name|setTitle
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setBackgroundColor
argument_list|(
name|preference
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
name|setTitle
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|examPeriodDateFormat
argument_list|()
argument_list|)
operator|.
name|format
argument_list|(
name|date
argument_list|)
operator|+
literal|" "
operator|+
name|slot2short
argument_list|(
name|slot
argument_list|)
operator|+
operator|(
name|period
operator|==
literal|null
condition|?
literal|""
else|:
literal|" - "
operator|+
name|slot2short
argument_list|(
name|slot
operator|+
name|period
operator|.
name|getLength
argument_list|()
argument_list|)
operator|)
operator|+
literal|": "
operator|+
name|preference
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isEditable
argument_list|()
condition|)
name|addMouseDownHandler
argument_list|(
operator|new
name|MouseDownHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseDown
parameter_list|(
name|MouseDownEvent
name|event
parameter_list|)
block|{
name|setOption
argument_list|(
name|iPreference
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setOption
parameter_list|(
name|PreferenceInterface
name|preference
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isEditable
argument_list|()
operator|||
name|iPeriod
operator|==
literal|null
condition|)
return|return;
name|iModel
operator|.
name|setPreference
argument_list|(
name|iDay
argument_list|,
name|iSlot
argument_list|,
name|preference
argument_list|)
expr_stmt|;
if|if
condition|(
name|preference
operator|==
literal|null
condition|)
block|{
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|clearBackgroundColor
argument_list|()
expr_stmt|;
name|setTitle
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setBackgroundColor
argument_list|(
name|preference
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
name|setTitle
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|examPeriodDateFormat
argument_list|()
argument_list|)
operator|.
name|format
argument_list|(
name|iDate
argument_list|)
operator|+
literal|" "
operator|+
name|slot2short
argument_list|(
name|iSlot
argument_list|)
operator|+
literal|" - "
operator|+
name|slot2short
argument_list|(
name|iSlot
operator|+
name|iPeriod
operator|.
name|getLength
argument_list|()
argument_list|)
operator|+
literal|": "
operator|+
name|preference
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|PeriodPreferencesWidget
operator|.
name|this
argument_list|,
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|static
name|int
name|firstDayOfWeek
parameter_list|(
name|int
name|year
parameter_list|,
name|int
name|month
parameter_list|)
block|{
return|return
operator|(
literal|6
operator|+
operator|new
name|Date
argument_list|(
name|year
operator|-
literal|1900
argument_list|,
name|month
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|getDay
argument_list|()
operator|)
operator|%
literal|7
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|static
name|int
name|daysInMonth
parameter_list|(
name|int
name|year
parameter_list|,
name|int
name|month
parameter_list|)
block|{
return|return
operator|new
name|Date
argument_list|(
name|year
operator|+
operator|(
name|month
operator|==
literal|12
condition|?
literal|1
else|:
literal|0
operator|)
operator|-
literal|1900
argument_list|,
operator|(
name|month
operator|==
literal|12
condition|?
literal|1
else|:
name|month
operator|+
literal|1
operator|)
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
operator|.
name|getDate
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|static
name|int
name|weekNumber
parameter_list|(
name|int
name|year
parameter_list|,
name|int
name|month
parameter_list|)
block|{
name|Date
name|d
init|=
operator|new
name|Date
argument_list|(
name|year
operator|-
literal|1900
argument_list|,
name|month
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
while|while
condition|(
name|d
operator|.
name|getDay
argument_list|()
operator|!=
name|CalendarUtil
operator|.
name|getStartingDayOfWeek
argument_list|()
condition|)
name|d
operator|.
name|setDate
argument_list|(
name|d
operator|.
name|getDate
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|int
name|y
init|=
name|d
operator|.
name|getYear
argument_list|()
decl_stmt|;
name|int
name|week
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|d
operator|.
name|getYear
argument_list|()
operator|==
name|y
condition|)
block|{
name|d
operator|.
name|setDate
argument_list|(
name|d
operator|.
name|getDate
argument_list|()
operator|-
literal|7
argument_list|)
expr_stmt|;
name|week
operator|+=
literal|1
expr_stmt|;
block|}
return|return
name|week
return|;
block|}
specifier|static
name|int
name|startingDayOfWeek
parameter_list|()
block|{
return|return
operator|(
literal|6
operator|+
name|CalendarUtil
operator|.
name|getStartingDayOfWeek
argument_list|()
operator|)
operator|%
literal|7
return|;
block|}
specifier|private
class|class
name|SingleMonth
extends|extends
name|AbsolutePanel
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
name|SingleMonth
parameter_list|(
name|String
name|title
parameter_list|,
name|Date
name|date
parameter_list|,
name|int
name|slot
parameter_list|)
block|{
name|date
operator|.
name|setDate
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|int
name|year
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"yyyy"
argument_list|)
operator|.
name|format
argument_list|(
name|date
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|month
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"MM"
argument_list|)
operator|.
name|format
argument_list|(
name|date
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|firstDayOfWeek
init|=
operator|(
literal|6
operator|+
name|date
operator|.
name|getDay
argument_list|()
operator|)
operator|%
literal|7
decl_stmt|;
name|int
name|nrDays
init|=
name|daysInMonth
argument_list|(
name|year
argument_list|,
name|month
argument_list|)
decl_stmt|;
name|int
name|firstWeekNumber
init|=
name|weekNumber
argument_list|(
name|year
argument_list|,
name|month
argument_list|)
decl_stmt|;
name|addStyleName
argument_list|(
literal|"month"
argument_list|)
expr_stmt|;
if|if
condition|(
name|title
operator|!=
literal|null
condition|)
block|{
name|P
name|p
init|=
operator|new
name|P
argument_list|(
literal|"title"
argument_list|)
decl_stmt|;
name|p
operator|.
name|setText
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|P
name|box
init|=
operator|new
name|P
argument_list|(
literal|"box"
argument_list|)
decl_stmt|;
name|add
argument_list|(
name|box
argument_list|)
expr_stmt|;
name|P
name|header
init|=
operator|new
name|P
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
name|box
operator|.
name|add
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|P
name|corner
init|=
operator|new
name|P
argument_list|(
literal|"cell"
argument_list|,
literal|"corner"
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|corner
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|7
condition|;
name|i
operator|++
control|)
block|{
name|P
name|h
init|=
operator|new
name|P
argument_list|(
literal|"cell"
argument_list|,
literal|"dow"
argument_list|)
decl_stmt|;
name|h
operator|.
name|setText
argument_list|(
name|CONSTANTS
operator|.
name|days
argument_list|()
index|[
operator|(
name|i
operator|+
name|startingDayOfWeek
argument_list|()
operator|)
operator|%
literal|7
index|]
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
name|int
name|weekNumber
init|=
name|firstWeekNumber
decl_stmt|;
name|P
name|line
init|=
operator|new
name|P
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
name|box
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|P
name|week
init|=
operator|new
name|P
argument_list|(
literal|"cell"
argument_list|,
literal|"week"
argument_list|)
decl_stmt|;
name|week
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|weekNumber
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|week
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|int
name|blanks
init|=
operator|(
name|firstDayOfWeek
operator|+
literal|7
operator|-
name|startingDayOfWeek
argument_list|()
operator|)
operator|%
literal|7
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blanks
condition|;
name|i
operator|++
control|)
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
literal|"cell"
argument_list|,
operator|(
name|i
operator|+
literal|1
operator|==
name|blanks
condition|?
literal|"last-blank"
else|:
literal|"blank"
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|nrDays
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|1
operator|&&
name|idx
operator|%
literal|7
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|idx
operator|==
literal|7
operator|&&
name|month
operator|==
literal|1
operator|&&
name|weekNumber
operator|>
literal|50
condition|)
name|weekNumber
operator|=
literal|1
expr_stmt|;
name|line
operator|=
operator|new
name|P
argument_list|(
literal|"row"
argument_list|)
expr_stmt|;
name|box
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|week
operator|=
operator|new
name|P
argument_list|(
literal|"cell"
argument_list|,
literal|"week"
argument_list|)
expr_stmt|;
name|week
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|weekNumber
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|week
argument_list|)
expr_stmt|;
block|}
name|int
name|day
init|=
name|CalendarUtil
operator|.
name|getDaysBetween
argument_list|(
name|iModel
operator|.
name|getFirstDate
argument_list|()
argument_list|,
name|date
argument_list|)
decl_stmt|;
name|PeriodInterface
name|period
init|=
name|iModel
operator|.
name|getPeriod
argument_list|(
name|day
argument_list|,
name|slot
argument_list|)
decl_stmt|;
name|D
name|d
init|=
operator|new
name|D
argument_list|(
name|day
argument_list|,
name|slot
argument_list|,
name|date
argument_list|,
name|period
argument_list|)
decl_stmt|;
name|line
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
name|date
operator|=
name|CalendarUtil
operator|.
name|copyDate
argument_list|(
name|date
argument_list|)
expr_stmt|;
name|CalendarUtil
operator|.
name|addDaysToDate
argument_list|(
name|date
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|static
name|Date
name|getDate
parameter_list|(
name|Date
name|firstDate
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|Date
name|d
init|=
operator|new
name|Date
argument_list|(
name|firstDate
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|offset
operator|!=
literal|0
condition|)
name|CalendarUtil
operator|.
name|addDaysToDate
argument_list|(
name|d
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|d
return|;
block|}
specifier|protected
name|void
name|render
parameter_list|()
block|{
name|iPanel
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|iModel
operator|.
name|getExamType
argument_list|()
operator|.
name|isFinal
argument_list|()
operator|||
operator|!
name|CONSTANTS
operator|.
name|displayMidtermPeriodPreferencesAsCalendar
argument_list|()
condition|)
block|{
name|iPanel
operator|.
name|setStyleName
argument_list|(
literal|"unitime-RoomSharingWidget"
argument_list|)
expr_stmt|;
name|DateTimeFormat
name|f1
init|=
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|examPeriodPreferenceDateFormat
argument_list|()
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|DateTimeFormat
name|f2
init|=
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|examPeriodPreferenceDateFormat
argument_list|()
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|DateTimeFormat
name|fm
init|=
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"MMMM yyyy"
argument_list|)
decl_stmt|;
name|boolean
name|splitByMonths
init|=
name|iModel
operator|.
name|getDays
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|15
decl_stmt|;
name|P
name|container
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|splitByMonths
condition|)
block|{
name|container
operator|=
operator|new
name|P
argument_list|(
literal|"container"
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|add
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|months
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|TreeSet
argument_list|<
name|Integer
argument_list|>
name|days
init|=
name|iModel
operator|.
name|getDays
argument_list|()
decl_stmt|;
name|String
name|month
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|splitByMonths
condition|)
block|{
name|days
operator|=
operator|new
name|TreeSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|day
range|:
name|iModel
operator|.
name|getDays
argument_list|()
control|)
block|{
name|Date
name|date
init|=
name|getDate
argument_list|(
name|iModel
operator|.
name|getFirstDate
argument_list|()
argument_list|,
name|day
argument_list|)
decl_stmt|;
name|String
name|m
init|=
name|fm
operator|.
name|format
argument_list|(
name|date
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|equals
argument_list|(
name|month
argument_list|)
condition|)
block|{
name|days
operator|.
name|add
argument_list|(
name|day
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|month
operator|==
literal|null
operator|&&
name|months
operator|.
name|add
argument_list|(
name|m
argument_list|)
condition|)
block|{
name|month
operator|=
name|m
expr_stmt|;
name|days
operator|.
name|add
argument_list|(
name|day
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|month
operator|==
literal|null
condition|)
break|break;
block|}
name|P
name|table
init|=
operator|new
name|P
argument_list|(
name|splitByMonths
condition|?
literal|"intable"
else|:
literal|"table"
argument_list|)
decl_stmt|;
if|if
condition|(
name|splitByMonths
condition|)
block|{
name|container
operator|.
name|add
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|P
name|title
init|=
operator|new
name|P
argument_list|(
literal|"title"
argument_list|)
decl_stmt|;
name|title
operator|.
name|setText
argument_list|(
name|month
argument_list|)
expr_stmt|;
name|table
operator|.
name|add
argument_list|(
name|title
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iPanel
operator|.
name|add
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
name|P
name|box
init|=
operator|new
name|P
argument_list|(
literal|"box"
argument_list|)
decl_stmt|;
name|table
operator|.
name|add
argument_list|(
name|box
argument_list|)
expr_stmt|;
name|P
name|header
init|=
operator|new
name|P
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
name|box
operator|.
name|add
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|P
name|corner
init|=
operator|new
name|P
argument_list|(
literal|"cell"
argument_list|,
literal|"corner"
argument_list|,
name|isEditable
argument_list|()
condition|?
literal|"clickable"
else|:
literal|null
argument_list|)
decl_stmt|;
name|corner
operator|.
name|setHTML
argument_list|(
name|MESSAGES
operator|.
name|roomSharingCorner
argument_list|()
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|corner
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|thisDay
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|day
range|:
name|days
control|)
block|{
name|P
name|p
init|=
operator|new
name|P
argument_list|(
literal|"cell"
argument_list|,
literal|"time"
argument_list|,
name|isEditable
argument_list|()
condition|?
literal|"clickable"
else|:
literal|null
argument_list|)
decl_stmt|;
name|Date
name|date
init|=
name|getDate
argument_list|(
name|iModel
operator|.
name|getFirstDate
argument_list|()
argument_list|,
name|day
argument_list|)
decl_stmt|;
name|p
operator|.
name|setHTML
argument_list|(
name|f1
operator|.
name|format
argument_list|(
name|date
argument_list|)
operator|+
literal|"<br>"
operator|+
name|f2
operator|.
name|format
argument_list|(
name|date
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Cell
argument_list|>
name|t
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|thisDay
operator|.
name|put
argument_list|(
name|day
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
name|isEditable
argument_list|()
condition|)
name|p
operator|.
name|addMouseDownHandler
argument_list|(
operator|new
name|MouseDownHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseDown
parameter_list|(
name|MouseDownEvent
name|event
parameter_list|)
block|{
for|for
control|(
name|Cell
name|d
range|:
name|t
control|)
name|d
operator|.
name|setOption
argument_list|(
name|iPreference
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|Cell
argument_list|>
name|thisPage
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|slot
range|:
name|iModel
operator|.
name|getSlots
argument_list|()
control|)
block|{
name|P
name|line
init|=
operator|new
name|P
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
name|box
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|P
name|d
init|=
operator|new
name|P
argument_list|(
literal|"cell"
argument_list|,
literal|"day"
argument_list|,
name|isEditable
argument_list|()
condition|?
literal|"clickable"
else|:
literal|null
argument_list|)
decl_stmt|;
name|d
operator|.
name|setHTML
argument_list|(
name|MESSAGES
operator|.
name|roomSharingTimeHeader
argument_list|(
name|slot2short
argument_list|(
name|slot
argument_list|)
argument_list|,
name|slot2short
argument_list|(
name|slot
operator|+
name|iModel
operator|.
name|getLength
argument_list|(
name|slot
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Cell
argument_list|>
name|thisSlot
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|day
range|:
name|days
control|)
block|{
name|Date
name|date
init|=
name|getDate
argument_list|(
name|iModel
operator|.
name|getFirstDate
argument_list|()
argument_list|,
name|day
argument_list|)
decl_stmt|;
name|Cell
name|p
init|=
operator|new
name|Cell
argument_list|(
name|day
argument_list|,
name|slot
argument_list|,
name|date
argument_list|,
name|iModel
operator|.
name|getPeriod
argument_list|(
name|day
argument_list|,
name|slot
argument_list|)
argument_list|)
decl_stmt|;
name|line
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|thisSlot
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|thisPage
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|thisDay
operator|.
name|get
argument_list|(
name|day
argument_list|)
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isEditable
argument_list|()
condition|)
name|d
operator|.
name|addMouseDownHandler
argument_list|(
operator|new
name|MouseDownHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseDown
parameter_list|(
name|MouseDownEvent
name|event
parameter_list|)
block|{
for|for
control|(
name|Cell
name|d
range|:
name|thisSlot
control|)
name|d
operator|.
name|setOption
argument_list|(
name|iPreference
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isEditable
argument_list|()
condition|)
name|corner
operator|.
name|addMouseDownHandler
argument_list|(
operator|new
name|MouseDownHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseDown
parameter_list|(
name|MouseDownEvent
name|event
parameter_list|)
block|{
for|for
control|(
name|Cell
name|d
range|:
name|thisPage
control|)
name|d
operator|.
name|setOption
argument_list|(
name|iPreference
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|splitByMonths
condition|)
break|break;
block|}
block|}
else|else
block|{
name|iPanel
operator|.
name|setStyleName
argument_list|(
literal|"unitime-DateSelector"
argument_list|)
expr_stmt|;
name|DateTimeFormat
name|format
init|=
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"MMMM yyyy"
argument_list|)
decl_stmt|;
name|P
name|table
init|=
operator|new
name|P
argument_list|()
decl_stmt|;
name|table
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"display"
argument_list|,
literal|"inline-table"
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|add
argument_list|(
name|table
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|slot
range|:
name|iModel
operator|.
name|getSlots
argument_list|()
control|)
block|{
name|String
name|last
init|=
literal|null
decl_stmt|;
name|P
name|row
init|=
operator|new
name|P
argument_list|()
decl_stmt|;
name|row
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"display"
argument_list|,
literal|"table-row"
argument_list|)
expr_stmt|;
name|table
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|SingleMonth
name|m
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|day
range|:
name|iModel
operator|.
name|getDays
argument_list|()
control|)
block|{
name|Date
name|d
init|=
name|getDate
argument_list|(
name|iModel
operator|.
name|getFirstDate
argument_list|()
argument_list|,
name|day
argument_list|)
decl_stmt|;
if|if
condition|(
name|format
operator|.
name|format
argument_list|(
name|d
argument_list|)
operator|.
name|equals
argument_list|(
name|last
argument_list|)
condition|)
continue|continue;
name|last
operator|=
name|format
operator|.
name|format
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|m
operator|=
operator|new
name|SingleMonth
argument_list|(
name|format
operator|.
name|format
argument_list|(
name|d
argument_list|)
operator|+
literal|" ("
operator|+
name|slot2short
argument_list|(
name|slot
argument_list|)
operator|+
literal|" - "
operator|+
name|slot2short
argument_list|(
name|slot
operator|+
name|iModel
operator|.
name|getLength
argument_list|(
name|slot
argument_list|)
argument_list|)
operator|+
literal|")"
argument_list|,
name|d
argument_list|,
name|slot
argument_list|)
expr_stmt|;
name|m
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"display"
argument_list|,
literal|"table-cell"
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|P
name|legend
init|=
operator|new
name|P
argument_list|(
literal|"legend"
argument_list|)
decl_stmt|;
name|iPanel
operator|.
name|add
argument_list|(
name|legend
argument_list|)
expr_stmt|;
name|P
name|box
init|=
operator|new
name|P
argument_list|(
literal|"box"
argument_list|)
decl_stmt|;
name|legend
operator|.
name|add
argument_list|(
name|box
argument_list|)
expr_stmt|;
name|iSelectedIcon
operator|=
literal|null
expr_stmt|;
name|iSelectedTitle
operator|=
literal|null
expr_stmt|;
for|for
control|(
specifier|final
name|PreferenceInterface
name|option
range|:
name|iModel
operator|.
name|getPreferences
argument_list|()
control|)
block|{
specifier|final
name|P
name|line
init|=
operator|new
name|P
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
specifier|final
name|P
name|icon
init|=
operator|new
name|P
argument_list|(
literal|"cell"
argument_list|,
name|isEditable
argument_list|(
name|option
argument_list|)
condition|?
literal|"clickable"
else|:
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|box
operator|.
name|getWidgetCount
argument_list|()
operator|==
literal|0
condition|)
name|icon
operator|.
name|addStyleName
argument_list|(
literal|"first"
argument_list|)
expr_stmt|;
name|icon
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setBackgroundColor
argument_list|(
name|option
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|icon
argument_list|)
expr_stmt|;
specifier|final
name|P
name|title
init|=
operator|new
name|P
argument_list|(
literal|"title"
argument_list|,
name|isEditable
argument_list|(
name|option
argument_list|)
condition|?
literal|"editable-title"
else|:
literal|null
argument_list|)
decl_stmt|;
name|title
operator|.
name|setHTML
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|title
argument_list|)
expr_stmt|;
if|if
condition|(
name|isEditable
argument_list|(
name|option
argument_list|)
operator|&&
name|option
operator|.
name|equals
argument_list|(
name|iPreference
argument_list|)
condition|)
block|{
name|icon
operator|.
name|addStyleName
argument_list|(
literal|"selected"
argument_list|)
expr_stmt|;
name|title
operator|.
name|addStyleName
argument_list|(
literal|"selected-title"
argument_list|)
expr_stmt|;
name|iSelectedIcon
operator|=
name|icon
expr_stmt|;
name|iSelectedTitle
operator|=
name|title
expr_stmt|;
block|}
if|if
condition|(
name|isEditable
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|MouseDownHandler
name|md
init|=
operator|new
name|MouseDownHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseDown
parameter_list|(
name|MouseDownEvent
name|event
parameter_list|)
block|{
name|iPreference
operator|=
name|option
expr_stmt|;
if|if
condition|(
name|iSelectedIcon
operator|!=
literal|null
condition|)
name|iSelectedIcon
operator|.
name|removeStyleName
argument_list|(
literal|"selected"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSelectedTitle
operator|!=
literal|null
condition|)
name|iSelectedTitle
operator|.
name|removeStyleName
argument_list|(
literal|"selected-title"
argument_list|)
expr_stmt|;
name|icon
operator|.
name|addStyleName
argument_list|(
literal|"selected"
argument_list|)
expr_stmt|;
name|title
operator|.
name|addStyleName
argument_list|(
literal|"selected-title"
argument_list|)
expr_stmt|;
name|iSelectedIcon
operator|=
name|icon
expr_stmt|;
name|iSelectedTitle
operator|=
name|title
expr_stmt|;
block|}
block|}
decl_stmt|;
name|icon
operator|.
name|addMouseDownHandler
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|title
operator|.
name|addMouseDownHandler
argument_list|(
name|md
argument_list|)
expr_stmt|;
block|}
name|box
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|HandlerRegistration
name|addValueChangeHandler
parameter_list|(
name|ValueChangeHandler
argument_list|<
name|PeriodPreferenceModel
argument_list|>
name|handler
parameter_list|)
block|{
return|return
name|addHandler
argument_list|(
name|handler
argument_list|,
name|ValueChangeEvent
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PeriodPreferenceModel
name|getValue
parameter_list|()
block|{
return|return
name|getModel
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|PeriodPreferenceModel
name|value
parameter_list|)
block|{
name|setValue
argument_list|(
name|value
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|PeriodPreferenceModel
name|value
parameter_list|,
name|boolean
name|fireEvents
parameter_list|)
block|{
name|setModel
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|fireEvents
condition|)
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|this
argument_list|,
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

