begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.4 (University Timetabling Application)  * Copyright (C) 2012, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|rooms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|page
operator|.
name|UniTimeNotifications
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|P
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeDialogBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeHeaderPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomSharingDisplayMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomSharingModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomSharingOption
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Overflow
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Unit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseDownEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseDownHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|CloseEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|CloseHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|shared
operator|.
name|HandlerRegistration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Cookies
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|AbsolutePanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Button
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|CheckBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasVerticalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HorizontalPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ListBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|PopupPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|RootPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ScrollPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|TextArea
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|VerticalPanel
import|;
end_import

begin_class
specifier|public
class|class
name|RoomSharingWidget
extends|extends
name|Composite
implements|implements
name|HasValue
argument_list|<
name|RoomSharingModel
argument_list|>
block|{
specifier|private
specifier|static
name|GwtRpcServiceAsync
name|RPC
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtRpcService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|GwtConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|GwtResources
name|RESOURCES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtResources
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|AbsolutePanel
name|iPanel
decl_stmt|;
specifier|private
name|ListBox
name|iModeSelection
decl_stmt|;
specifier|private
name|RoomSharingDisplayMode
name|iMode
init|=
literal|null
decl_stmt|;
specifier|private
name|CheckBox
name|iHorizontal
decl_stmt|;
specifier|private
name|RoomSharingOption
name|iOption
init|=
literal|null
decl_stmt|;
specifier|private
name|P
name|iSelectedIcon
init|=
literal|null
decl_stmt|,
name|iSelectedTitle
init|=
literal|null
decl_stmt|;
specifier|private
name|RoomSharingModel
name|iModel
decl_stmt|;
specifier|protected
name|boolean
name|iEditable
init|=
literal|true
decl_stmt|;
specifier|private
name|TextArea
name|iNote
init|=
literal|null
decl_stmt|;
specifier|public
name|RoomSharingWidget
parameter_list|(
name|boolean
name|editable
parameter_list|)
block|{
name|iEditable
operator|=
name|editable
expr_stmt|;
name|VerticalPanel
name|container
init|=
operator|new
name|VerticalPanel
argument_list|()
decl_stmt|;
name|HorizontalPanel
name|hp
init|=
operator|new
name|HorizontalPanel
argument_list|()
decl_stmt|;
name|iModeSelection
operator|=
operator|new
name|ListBox
argument_list|()
expr_stmt|;
name|hp
operator|.
name|add
argument_list|(
name|iModeSelection
argument_list|)
expr_stmt|;
name|hp
operator|.
name|setCellHorizontalAlignment
argument_list|(
name|iModeSelection
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|iHorizontal
operator|=
operator|new
name|CheckBox
argument_list|(
name|MESSAGES
operator|.
name|roomSharingHorizontal
argument_list|()
argument_list|)
expr_stmt|;
name|hp
operator|.
name|add
argument_list|(
name|iHorizontal
argument_list|)
expr_stmt|;
name|hp
operator|.
name|setCellHorizontalAlignment
argument_list|(
name|iHorizontal
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
name|hp
operator|.
name|setCellVerticalAlignment
argument_list|(
name|iHorizontal
argument_list|,
name|HasVerticalAlignment
operator|.
name|ALIGN_MIDDLE
argument_list|)
expr_stmt|;
name|hp
operator|.
name|setWidth
argument_list|(
literal|"100%"
argument_list|)
expr_stmt|;
name|container
operator|.
name|add
argument_list|(
name|hp
argument_list|)
expr_stmt|;
name|iModeSelection
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|setMode
argument_list|(
name|iModel
operator|.
name|getModes
argument_list|()
operator|.
name|get
argument_list|(
name|iModeSelection
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
argument_list|,
name|iHorizontal
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iHorizontal
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|event
parameter_list|)
block|{
name|setMode
argument_list|(
name|iModel
operator|.
name|getModes
argument_list|()
operator|.
name|get
argument_list|(
name|iModeSelection
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
argument_list|,
name|iHorizontal
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iPanel
operator|=
operator|new
name|AbsolutePanel
argument_list|()
expr_stmt|;
name|iPanel
operator|.
name|setStyleName
argument_list|(
literal|"unitime-RoomSharingWidget"
argument_list|)
expr_stmt|;
name|container
operator|.
name|add
argument_list|(
name|iPanel
argument_list|)
expr_stmt|;
if|if
condition|(
name|iEditable
condition|)
block|{
name|iNote
operator|=
operator|new
name|TextArea
argument_list|()
expr_stmt|;
name|iNote
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TextArea"
argument_list|)
expr_stmt|;
name|iNote
operator|.
name|setVisibleLines
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|iNote
operator|.
name|setCharacterWidth
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|iNote
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|String
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|iModel
operator|!=
literal|null
condition|)
name|iModel
operator|.
name|setNote
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|initWidget
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AbsolutePanel
name|getPanel
parameter_list|()
block|{
return|return
name|iPanel
return|;
block|}
specifier|public
name|boolean
name|isEditable
parameter_list|()
block|{
return|return
name|iEditable
operator|&&
name|iModel
operator|!=
literal|null
operator|&&
name|iModel
operator|.
name|isEditable
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isEditable
parameter_list|(
name|RoomSharingOption
name|option
parameter_list|)
block|{
return|return
name|isEditable
argument_list|()
operator|&&
name|option
operator|.
name|isEditable
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isEditable
parameter_list|(
name|int
name|day
parameter_list|,
name|int
name|slot
parameter_list|)
block|{
return|return
name|isEditable
argument_list|()
operator|&&
name|iModel
operator|.
name|isEditable
argument_list|(
name|day
argument_list|,
name|slot
argument_list|,
name|iMode
operator|.
name|getStep
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|RoomSharingModel
name|getModel
parameter_list|()
block|{
return|return
name|iModel
return|;
block|}
specifier|public
name|void
name|setModel
parameter_list|(
name|RoomSharingModel
name|model
parameter_list|)
block|{
name|iModel
operator|=
name|model
expr_stmt|;
if|if
condition|(
name|iEditable
operator|&&
name|iModel
operator|.
name|isNoteEditable
argument_list|()
condition|)
name|iNote
operator|.
name|setValue
argument_list|(
name|iModel
operator|.
name|hasNote
argument_list|()
condition|?
name|iModel
operator|.
name|getNote
argument_list|()
else|:
literal|""
argument_list|)
expr_stmt|;
name|iModeSelection
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|RoomSharingDisplayMode
name|mode
range|:
name|iModel
operator|.
name|getModes
argument_list|()
control|)
name|iModeSelection
operator|.
name|addItem
argument_list|(
name|mode
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|iModeSelection
operator|.
name|setSelectedIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|String
name|cookie
init|=
name|Cookies
operator|.
name|getCookie
argument_list|(
literal|"UniTime:RoomSharing"
argument_list|)
decl_stmt|;
if|if
condition|(
name|cookie
operator|!=
literal|null
condition|)
block|{
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iModel
operator|.
name|getModes
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|cookie
operator|.
name|startsWith
argument_list|(
name|iModel
operator|.
name|getModes
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|iModeSelection
operator|.
name|setSelectedIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
block|}
name|iHorizontal
operator|.
name|setValue
argument_list|(
name|cookie
operator|.
name|endsWith
argument_list|(
literal|"|1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
else|else
block|{
name|iHorizontal
operator|.
name|setValue
argument_list|(
name|model
operator|.
name|isDefaultHorizontal
argument_list|()
argument_list|)
expr_stmt|;
name|iModeSelection
operator|.
name|setSelectedIndex
argument_list|(
name|iModel
operator|.
name|getDefaultMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iOption
operator|=
name|iModel
operator|.
name|getDefaultOption
argument_list|()
expr_stmt|;
if|if
condition|(
name|iOption
operator|==
literal|null
condition|)
name|iOption
operator|=
name|iModel
operator|.
name|getOptions
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setMode
argument_list|(
name|iModel
operator|.
name|getModes
argument_list|()
operator|.
name|get
argument_list|(
name|iModeSelection
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
argument_list|,
name|iHorizontal
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|insert
parameter_list|(
specifier|final
name|RootPanel
name|panel
parameter_list|,
name|boolean
name|eventAvailability
parameter_list|)
block|{
name|Long
name|locationId
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|panel
operator|.
name|getElement
argument_list|()
operator|.
name|getInnerHTML
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
name|RoomInterface
operator|.
name|RoomSharingRequest
operator|.
name|load
argument_list|(
name|locationId
argument_list|,
name|eventAvailability
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|RoomSharingModel
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|failedToLoadRoomAvailability
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|RoomSharingModel
name|result
parameter_list|)
block|{
name|panel
operator|.
name|getElement
argument_list|()
operator|.
name|setInnerText
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|setModel
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|RoomSharingWidget
operator|.
name|this
argument_list|)
expr_stmt|;
name|panel
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
name|slot2short
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
name|int
name|h
init|=
name|slot
operator|/
literal|12
decl_stmt|;
name|int
name|m
init|=
literal|5
operator|*
operator|(
name|slot
operator|%
literal|12
operator|)
decl_stmt|;
if|if
condition|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
condition|)
return|return
operator|(
name|h
operator|>
literal|12
condition|?
name|h
operator|-
literal|12
else|:
name|h
operator|)
operator|+
literal|":"
operator|+
operator|(
name|m
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|m
operator|+
operator|(
name|h
operator|==
literal|24
condition|?
literal|"a"
else|:
name|h
operator|>=
literal|12
condition|?
literal|"p"
else|:
literal|"a"
operator|)
return|;
else|else
return|return
name|h
operator|+
literal|":"
operator|+
operator|(
name|m
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|m
return|;
block|}
specifier|private
class|class
name|Cell
extends|extends
name|P
block|{
specifier|private
name|int
name|iDay
decl_stmt|,
name|iSlot
decl_stmt|;
name|Cell
parameter_list|(
name|int
name|day
parameter_list|,
name|int
name|slot
parameter_list|)
block|{
name|super
argument_list|(
literal|"cell"
argument_list|,
literal|"item"
argument_list|,
name|isEditable
argument_list|(
name|day
argument_list|,
name|slot
argument_list|)
condition|?
literal|"clickable"
else|:
literal|null
argument_list|)
expr_stmt|;
name|iDay
operator|=
name|day
expr_stmt|;
name|iSlot
operator|=
name|slot
expr_stmt|;
name|RoomSharingOption
name|option
init|=
name|iModel
operator|.
name|getOption
argument_list|(
name|day
argument_list|,
name|slot
argument_list|)
decl_stmt|;
if|if
condition|(
name|option
operator|==
literal|null
condition|)
block|{
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|clearBackgroundColor
argument_list|()
expr_stmt|;
name|setHTML
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|setTitle
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setBackgroundColor
argument_list|(
name|option
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
name|setHTML
argument_list|(
name|option
operator|.
name|getCode
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|option
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|setTitle
argument_list|(
name|CONSTANTS
operator|.
name|longDays
argument_list|()
index|[
name|day
index|]
operator|+
literal|" "
operator|+
name|slot2short
argument_list|(
name|slot
argument_list|)
operator|+
literal|" - "
operator|+
name|slot2short
argument_list|(
name|slot
operator|+
name|iMode
operator|.
name|getStep
argument_list|()
argument_list|)
operator|+
literal|": "
operator|+
name|option
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isEditable
argument_list|(
name|day
argument_list|,
name|slot
argument_list|)
condition|)
name|addMouseDownHandler
argument_list|(
operator|new
name|MouseDownHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseDown
parameter_list|(
name|MouseDownEvent
name|event
parameter_list|)
block|{
name|setOption
argument_list|(
name|iOption
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setOption
parameter_list|(
name|RoomSharingOption
name|option
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isEditable
argument_list|(
name|iDay
argument_list|,
name|iSlot
argument_list|)
condition|)
return|return;
name|iModel
operator|.
name|setOption
argument_list|(
name|iDay
argument_list|,
name|iSlot
argument_list|,
name|iMode
operator|.
name|getStep
argument_list|()
argument_list|,
name|option
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|==
literal|null
condition|)
block|{
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|clearBackgroundColor
argument_list|()
expr_stmt|;
name|setHTML
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|setTitle
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setBackgroundColor
argument_list|(
name|option
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
name|setHTML
argument_list|(
name|option
operator|.
name|getCode
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|option
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|setTitle
argument_list|(
name|CONSTANTS
operator|.
name|longDays
argument_list|()
index|[
name|iDay
index|]
operator|+
literal|" "
operator|+
name|slot2short
argument_list|(
name|iSlot
argument_list|)
operator|+
literal|" - "
operator|+
name|slot2short
argument_list|(
name|iSlot
operator|+
name|iMode
operator|.
name|getStep
argument_list|()
argument_list|)
operator|+
literal|": "
operator|+
name|option
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|RoomSharingWidget
operator|.
name|this
argument_list|,
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setMode
parameter_list|(
specifier|final
name|RoomSharingDisplayMode
name|mode
parameter_list|,
specifier|final
name|boolean
name|horizontal
parameter_list|)
block|{
name|iMode
operator|=
name|mode
expr_stmt|;
name|Cookies
operator|.
name|setCookie
argument_list|(
literal|"UniTime:RoomSharing"
argument_list|,
name|mode
operator|.
name|toString
argument_list|()
operator|+
literal|"|"
operator|+
operator|(
name|horizontal
condition|?
literal|"1"
else|:
literal|"0"
operator|)
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|horizontal
condition|)
block|{
for|for
control|(
name|int
name|page
init|=
literal|0
init|;
name|iMode
operator|.
name|getFirstSlot
argument_list|()
operator|+
literal|24
operator|*
name|page
operator|*
name|iMode
operator|.
name|getStep
argument_list|()
operator|<
name|iMode
operator|.
name|getLastSlot
argument_list|()
condition|;
name|page
operator|++
control|)
block|{
name|P
name|table
init|=
operator|new
name|P
argument_list|(
literal|"table"
argument_list|)
decl_stmt|;
name|iPanel
operator|.
name|add
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|P
name|box
init|=
operator|new
name|P
argument_list|(
literal|"box"
argument_list|)
decl_stmt|;
name|table
operator|.
name|add
argument_list|(
name|box
argument_list|)
expr_stmt|;
name|P
name|header
init|=
operator|new
name|P
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
name|box
operator|.
name|add
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|P
name|corner
init|=
operator|new
name|P
argument_list|(
literal|"cell"
argument_list|,
literal|"corner"
argument_list|,
name|isEditable
argument_list|()
condition|?
literal|"clickable"
else|:
literal|null
argument_list|)
decl_stmt|;
name|corner
operator|.
name|setHTML
argument_list|(
name|MESSAGES
operator|.
name|roomSharingCorner
argument_list|()
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|corner
argument_list|)
expr_stmt|;
name|int
name|first
init|=
name|iMode
operator|.
name|getFirstSlot
argument_list|()
operator|+
literal|24
operator|*
name|page
operator|*
name|iMode
operator|.
name|getStep
argument_list|()
decl_stmt|;
name|int
name|last
init|=
name|Math
operator|.
name|min
argument_list|(
name|first
operator|+
literal|24
operator|*
name|iMode
operator|.
name|getStep
argument_list|()
operator|*
operator|(
name|page
operator|+
literal|1
operator|)
argument_list|,
name|iMode
operator|.
name|getLastSlot
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|thisTime
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|slot
init|=
name|first
init|;
name|slot
operator|<
name|last
condition|;
name|slot
operator|+=
name|iMode
operator|.
name|getStep
argument_list|()
control|)
block|{
name|P
name|p
init|=
operator|new
name|P
argument_list|(
literal|"cell"
argument_list|,
literal|"time"
argument_list|,
name|isEditable
argument_list|()
condition|?
literal|"clickable"
else|:
literal|null
argument_list|)
decl_stmt|;
name|p
operator|.
name|setHTML
argument_list|(
name|MESSAGES
operator|.
name|roomSharingTimeHeader
argument_list|(
name|slot2short
argument_list|(
name|slot
argument_list|)
argument_list|,
name|slot2short
argument_list|(
name|slot
operator|+
name|iMode
operator|.
name|getStep
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Cell
argument_list|>
name|t
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|thisTime
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
name|isEditable
argument_list|()
condition|)
name|p
operator|.
name|addMouseDownHandler
argument_list|(
operator|new
name|MouseDownHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseDown
parameter_list|(
name|MouseDownEvent
name|event
parameter_list|)
block|{
for|for
control|(
name|Cell
name|d
range|:
name|t
control|)
name|d
operator|.
name|setOption
argument_list|(
name|iOption
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|Cell
argument_list|>
name|thisPage
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|day
init|=
name|iMode
operator|.
name|getFirstDay
argument_list|()
init|;
name|day
operator|<=
name|iMode
operator|.
name|getLastDay
argument_list|()
condition|;
name|day
operator|++
control|)
block|{
name|P
name|line
init|=
operator|new
name|P
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
name|box
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|P
name|d
init|=
operator|new
name|P
argument_list|(
literal|"cell"
argument_list|,
literal|"day"
argument_list|,
name|isEditable
argument_list|()
condition|?
literal|"clickable"
else|:
literal|null
argument_list|)
decl_stmt|;
name|d
operator|.
name|setHTML
argument_list|(
name|CONSTANTS
operator|.
name|days
argument_list|()
index|[
name|day
operator|%
literal|7
index|]
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Cell
argument_list|>
name|thisDay
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|slot
init|=
name|first
init|;
name|slot
operator|<
name|last
condition|;
name|slot
operator|+=
name|iMode
operator|.
name|getStep
argument_list|()
control|)
block|{
name|Cell
name|p
init|=
operator|new
name|Cell
argument_list|(
name|day
argument_list|,
name|slot
argument_list|)
decl_stmt|;
name|line
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|thisDay
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|thisPage
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|thisTime
operator|.
name|get
argument_list|(
operator|(
name|slot
operator|-
name|first
operator|)
operator|/
name|iMode
operator|.
name|getStep
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isEditable
argument_list|()
condition|)
name|d
operator|.
name|addMouseDownHandler
argument_list|(
operator|new
name|MouseDownHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseDown
parameter_list|(
name|MouseDownEvent
name|event
parameter_list|)
block|{
for|for
control|(
name|Cell
name|d
range|:
name|thisDay
control|)
name|d
operator|.
name|setOption
argument_list|(
name|iOption
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isEditable
argument_list|()
condition|)
name|corner
operator|.
name|addMouseDownHandler
argument_list|(
operator|new
name|MouseDownHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseDown
parameter_list|(
name|MouseDownEvent
name|event
parameter_list|)
block|{
for|for
control|(
name|Cell
name|d
range|:
name|thisPage
control|)
name|d
operator|.
name|setOption
argument_list|(
name|iOption
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|P
name|table
init|=
operator|new
name|P
argument_list|(
literal|"table"
argument_list|)
decl_stmt|;
name|iPanel
operator|.
name|add
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|P
name|box
init|=
operator|new
name|P
argument_list|(
literal|"box"
argument_list|)
decl_stmt|;
name|table
operator|.
name|add
argument_list|(
name|box
argument_list|)
expr_stmt|;
name|P
name|header
init|=
operator|new
name|P
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
name|box
operator|.
name|add
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|P
name|corner
init|=
operator|new
name|P
argument_list|(
literal|"cell"
argument_list|,
literal|"corner"
argument_list|,
name|isEditable
argument_list|()
condition|?
literal|"clickable"
else|:
literal|null
argument_list|)
decl_stmt|;
name|corner
operator|.
name|setHTML
argument_list|(
name|MESSAGES
operator|.
name|roomSharingCorner
argument_list|()
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|corner
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|thisDay
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|day
init|=
name|iMode
operator|.
name|getFirstDay
argument_list|()
init|;
name|day
operator|<=
name|iMode
operator|.
name|getLastDay
argument_list|()
condition|;
name|day
operator|++
control|)
block|{
name|P
name|p
init|=
operator|new
name|P
argument_list|(
literal|"cell"
argument_list|,
literal|"time"
argument_list|,
name|isEditable
argument_list|()
condition|?
literal|"clickable"
else|:
literal|null
argument_list|)
decl_stmt|;
name|p
operator|.
name|setHTML
argument_list|(
name|CONSTANTS
operator|.
name|days
argument_list|()
index|[
name|day
operator|%
literal|7
index|]
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Cell
argument_list|>
name|t
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|thisDay
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
name|isEditable
argument_list|()
condition|)
name|p
operator|.
name|addMouseDownHandler
argument_list|(
operator|new
name|MouseDownHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseDown
parameter_list|(
name|MouseDownEvent
name|event
parameter_list|)
block|{
for|for
control|(
name|Cell
name|d
range|:
name|t
control|)
name|d
operator|.
name|setOption
argument_list|(
name|iOption
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|Cell
argument_list|>
name|thisPage
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|slot
init|=
name|iMode
operator|.
name|getFirstSlot
argument_list|()
init|;
name|slot
operator|<
name|iMode
operator|.
name|getLastSlot
argument_list|()
condition|;
name|slot
operator|+=
name|iMode
operator|.
name|getStep
argument_list|()
control|)
block|{
name|P
name|line
init|=
operator|new
name|P
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
name|box
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|P
name|d
init|=
operator|new
name|P
argument_list|(
literal|"cell"
argument_list|,
literal|"day"
argument_list|,
name|isEditable
argument_list|()
condition|?
literal|"clickable"
else|:
literal|null
argument_list|)
decl_stmt|;
name|d
operator|.
name|setHTML
argument_list|(
name|MESSAGES
operator|.
name|roomSharingTimeHeader
argument_list|(
name|slot2short
argument_list|(
name|slot
argument_list|)
argument_list|,
name|slot2short
argument_list|(
name|slot
operator|+
name|iMode
operator|.
name|getStep
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Cell
argument_list|>
name|thisSlot
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|day
init|=
name|iMode
operator|.
name|getFirstDay
argument_list|()
init|;
name|day
operator|<=
name|iMode
operator|.
name|getLastDay
argument_list|()
condition|;
name|day
operator|++
control|)
block|{
name|Cell
name|p
init|=
operator|new
name|Cell
argument_list|(
name|day
argument_list|,
name|slot
argument_list|)
decl_stmt|;
name|line
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|thisSlot
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|thisPage
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|thisDay
operator|.
name|get
argument_list|(
name|day
operator|-
name|iMode
operator|.
name|getFirstDay
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isEditable
argument_list|()
condition|)
name|d
operator|.
name|addMouseDownHandler
argument_list|(
operator|new
name|MouseDownHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseDown
parameter_list|(
name|MouseDownEvent
name|event
parameter_list|)
block|{
for|for
control|(
name|Cell
name|d
range|:
name|thisSlot
control|)
name|d
operator|.
name|setOption
argument_list|(
name|iOption
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isEditable
argument_list|()
condition|)
name|corner
operator|.
name|addMouseDownHandler
argument_list|(
operator|new
name|MouseDownHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseDown
parameter_list|(
name|MouseDownEvent
name|event
parameter_list|)
block|{
for|for
control|(
name|Cell
name|d
range|:
name|thisPage
control|)
name|d
operator|.
name|setOption
argument_list|(
name|iOption
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|P
name|legend
init|=
operator|new
name|P
argument_list|(
literal|"legend"
argument_list|)
decl_stmt|;
name|iPanel
operator|.
name|add
argument_list|(
name|legend
argument_list|)
expr_stmt|;
specifier|final
name|P
name|box
init|=
operator|new
name|P
argument_list|(
literal|"box"
argument_list|)
decl_stmt|;
name|legend
operator|.
name|add
argument_list|(
name|box
argument_list|)
expr_stmt|;
name|iSelectedIcon
operator|=
literal|null
expr_stmt|;
name|iSelectedTitle
operator|=
literal|null
expr_stmt|;
for|for
control|(
specifier|final
name|RoomSharingOption
name|option
range|:
name|iModel
operator|.
name|getOptions
argument_list|()
control|)
block|{
specifier|final
name|P
name|line
init|=
operator|new
name|P
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
specifier|final
name|P
name|icon
init|=
operator|new
name|P
argument_list|(
literal|"cell"
argument_list|,
name|isEditable
argument_list|(
name|option
argument_list|)
condition|?
literal|"clickable"
else|:
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|box
operator|.
name|getWidgetCount
argument_list|()
operator|==
literal|0
condition|)
name|icon
operator|.
name|addStyleName
argument_list|(
literal|"first"
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|.
name|getCode
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|option
operator|.
name|getCode
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|icon
operator|.
name|setHTML
argument_list|(
name|option
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|icon
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setBackgroundColor
argument_list|(
name|option
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|icon
argument_list|)
expr_stmt|;
specifier|final
name|P
name|title
init|=
operator|new
name|P
argument_list|(
literal|"title"
argument_list|,
name|isEditable
argument_list|(
name|option
argument_list|)
condition|?
literal|"editable-title"
else|:
literal|null
argument_list|)
decl_stmt|;
name|title
operator|.
name|setHTML
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|title
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|.
name|getId
argument_list|()
operator|>=
literal|0
operator|&&
name|isEditable
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|Image
name|remove
init|=
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|delete
argument_list|()
argument_list|)
decl_stmt|;
name|remove
operator|.
name|addStyleName
argument_list|(
literal|"remove"
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|remove
argument_list|)
expr_stmt|;
name|remove
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|option
operator|.
name|equals
argument_list|(
name|iOption
argument_list|)
condition|)
name|iOption
operator|=
name|iModel
operator|.
name|getDefaultOption
argument_list|()
expr_stmt|;
name|box
operator|.
name|remove
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|iModel
operator|.
name|getOptions
argument_list|()
operator|.
name|remove
argument_list|(
name|option
argument_list|)
expr_stmt|;
name|setMode
argument_list|(
name|mode
argument_list|,
name|horizontal
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isEditable
argument_list|(
name|option
argument_list|)
operator|&&
name|option
operator|.
name|equals
argument_list|(
name|iOption
argument_list|)
condition|)
block|{
name|icon
operator|.
name|addStyleName
argument_list|(
literal|"selected"
argument_list|)
expr_stmt|;
name|title
operator|.
name|addStyleName
argument_list|(
literal|"selected-title"
argument_list|)
expr_stmt|;
name|iSelectedIcon
operator|=
name|icon
expr_stmt|;
name|iSelectedTitle
operator|=
name|title
expr_stmt|;
block|}
if|if
condition|(
name|isEditable
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|MouseDownHandler
name|md
init|=
operator|new
name|MouseDownHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseDown
parameter_list|(
name|MouseDownEvent
name|event
parameter_list|)
block|{
name|iOption
operator|=
name|option
expr_stmt|;
if|if
condition|(
name|iSelectedIcon
operator|!=
literal|null
condition|)
name|iSelectedIcon
operator|.
name|removeStyleName
argument_list|(
literal|"selected"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSelectedTitle
operator|!=
literal|null
condition|)
name|iSelectedTitle
operator|.
name|removeStyleName
argument_list|(
literal|"selected-title"
argument_list|)
expr_stmt|;
name|icon
operator|.
name|addStyleName
argument_list|(
literal|"selected"
argument_list|)
expr_stmt|;
name|title
operator|.
name|addStyleName
argument_list|(
literal|"selected-title"
argument_list|)
expr_stmt|;
name|iSelectedIcon
operator|=
name|icon
expr_stmt|;
name|iSelectedTitle
operator|=
name|title
expr_stmt|;
block|}
block|}
decl_stmt|;
name|icon
operator|.
name|addMouseDownHandler
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|title
operator|.
name|addMouseDownHandler
argument_list|(
name|md
argument_list|)
expr_stmt|;
block|}
name|box
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iEditable
operator|&&
name|iModel
operator|.
name|isNoteEditable
argument_list|()
condition|)
block|{
name|P
name|note
init|=
operator|new
name|P
argument_list|(
literal|"note"
argument_list|)
decl_stmt|;
name|legend
operator|.
name|add
argument_list|(
name|note
argument_list|)
expr_stmt|;
name|P
name|label
init|=
operator|new
name|P
argument_list|(
literal|"label"
argument_list|)
decl_stmt|;
name|label
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|propRoomAvailabilityNote
argument_list|()
argument_list|)
expr_stmt|;
name|note
operator|.
name|add
argument_list|(
name|label
argument_list|)
expr_stmt|;
name|P
name|value
init|=
operator|new
name|P
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|value
operator|.
name|add
argument_list|(
name|iNote
argument_list|)
expr_stmt|;
name|note
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|iModel
operator|.
name|hasNote
argument_list|()
condition|)
block|{
name|P
name|note
init|=
operator|new
name|P
argument_list|(
literal|"note"
argument_list|)
decl_stmt|;
name|legend
operator|.
name|add
argument_list|(
name|note
argument_list|)
expr_stmt|;
name|P
name|label
init|=
operator|new
name|P
argument_list|(
literal|"label"
argument_list|)
decl_stmt|;
name|label
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|propRoomAvailabilityNote
argument_list|()
argument_list|)
expr_stmt|;
name|note
operator|.
name|add
argument_list|(
name|label
argument_list|)
expr_stmt|;
name|P
name|value
init|=
operator|new
name|P
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|value
operator|.
name|setHTML
argument_list|(
name|iModel
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|note
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|RoomSharingOption
argument_list|>
name|other
init|=
name|iModel
operator|.
name|getAdditionalOptions
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RoomSharingOption
argument_list|>
name|removable
init|=
name|iModel
operator|.
name|getRemovableOptions
argument_list|()
decl_stmt|;
if|if
condition|(
name|isEditable
argument_list|()
operator|&&
operator|(
operator|!
name|other
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|removable
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|other
operator|.
name|isEmpty
argument_list|()
operator|&&
name|other
operator|.
name|size
argument_list|()
operator|<=
literal|20
condition|)
block|{
name|P
name|separator
init|=
operator|new
name|P
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
name|separator
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
literal|"blank"
argument_list|)
argument_list|)
expr_stmt|;
name|P
name|message
init|=
operator|new
name|P
argument_list|(
literal|"other"
argument_list|)
decl_stmt|;
name|message
operator|.
name|setHTML
argument_list|(
name|MESSAGES
operator|.
name|separatorAddDepartment
argument_list|()
argument_list|)
expr_stmt|;
name|separator
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|box
operator|.
name|add
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
specifier|final
name|RoomSharingOption
name|option
range|:
name|other
control|)
block|{
specifier|final
name|P
name|line
init|=
operator|new
name|P
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
specifier|final
name|P
name|icon
init|=
operator|new
name|P
argument_list|(
literal|"cell"
argument_list|,
literal|"clickable"
argument_list|)
decl_stmt|;
if|if
condition|(
name|option
operator|.
name|getCode
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|option
operator|.
name|getCode
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|icon
operator|.
name|setHTML
argument_list|(
name|option
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|first
condition|)
name|icon
operator|.
name|addStyleName
argument_list|(
literal|"first"
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|icon
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setBackgroundColor
argument_list|(
name|option
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|icon
argument_list|)
expr_stmt|;
specifier|final
name|P
name|title
init|=
operator|new
name|P
argument_list|(
literal|"title"
argument_list|,
literal|"editable-title"
argument_list|)
decl_stmt|;
name|title
operator|.
name|setHTML
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|Image
name|add
init|=
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|add
argument_list|()
argument_list|)
decl_stmt|;
name|add
operator|.
name|addStyleName
argument_list|(
literal|"remove"
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|add
argument_list|)
expr_stmt|;
name|add
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|iModel
operator|.
name|getOptions
argument_list|()
operator|.
name|add
argument_list|(
name|option
argument_list|)
expr_stmt|;
name|iOption
operator|=
name|option
expr_stmt|;
name|setMode
argument_list|(
name|mode
argument_list|,
name|horizontal
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|MouseDownHandler
name|md
init|=
operator|new
name|MouseDownHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseDown
parameter_list|(
name|MouseDownEvent
name|event
parameter_list|)
block|{
name|iModel
operator|.
name|getOptions
argument_list|()
operator|.
name|add
argument_list|(
name|option
argument_list|)
expr_stmt|;
name|iOption
operator|=
name|option
expr_stmt|;
name|setMode
argument_list|(
name|mode
argument_list|,
name|horizontal
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|icon
operator|.
name|addMouseDownHandler
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|title
operator|.
name|addMouseDownHandler
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|box
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|other
operator|.
name|size
argument_list|()
operator|>=
literal|20
operator|||
name|removable
operator|.
name|size
argument_list|()
operator|>=
literal|10
condition|)
block|{
specifier|final
name|P
name|line
init|=
operator|new
name|P
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
literal|"blank"
argument_list|)
argument_list|)
expr_stmt|;
name|P
name|p
init|=
operator|new
name|P
argument_list|(
literal|"button"
argument_list|)
decl_stmt|;
if|if
condition|(
name|other
operator|.
name|size
argument_list|()
operator|>=
literal|20
condition|)
block|{
name|Button
name|button
init|=
operator|new
name|Button
argument_list|(
name|MESSAGES
operator|.
name|buttonAddDepartment
argument_list|()
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
specifier|final
name|UniTimeDialogBox
name|dialog
init|=
operator|new
name|UniTimeDialogBox
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|dialog
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|dialogAddDepartment
argument_list|()
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setAnimationEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|addCloseHandler
argument_list|(
operator|new
name|CloseHandler
argument_list|<
name|PopupPanel
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClose
parameter_list|(
name|CloseEvent
argument_list|<
name|PopupPanel
argument_list|>
name|event
parameter_list|)
block|{
name|RootPanel
operator|.
name|getBodyElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setOverflow
argument_list|(
name|Overflow
operator|.
name|AUTO
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|P
name|legend
init|=
operator|new
name|P
argument_list|(
literal|"legend"
argument_list|)
decl_stmt|;
name|P
name|box
init|=
operator|new
name|P
argument_list|(
literal|"box"
argument_list|)
decl_stmt|;
name|legend
operator|.
name|add
argument_list|(
name|box
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|RoomSharingOption
name|option
range|:
name|other
control|)
block|{
specifier|final
name|P
name|line
init|=
operator|new
name|P
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
specifier|final
name|P
name|icon
init|=
operator|new
name|P
argument_list|(
literal|"cell"
argument_list|,
literal|"clickable"
argument_list|)
decl_stmt|;
if|if
condition|(
name|option
operator|.
name|getCode
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|option
operator|.
name|getCode
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|icon
operator|.
name|setHTML
argument_list|(
name|option
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|box
operator|.
name|getWidgetCount
argument_list|()
operator|==
literal|0
condition|)
name|icon
operator|.
name|addStyleName
argument_list|(
literal|"first"
argument_list|)
expr_stmt|;
name|icon
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setBackgroundColor
argument_list|(
name|option
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|icon
argument_list|)
expr_stmt|;
specifier|final
name|P
name|title
init|=
operator|new
name|P
argument_list|(
literal|"title"
argument_list|,
literal|"editable-title"
argument_list|)
decl_stmt|;
name|title
operator|.
name|setHTML
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|MouseDownHandler
name|md
init|=
operator|new
name|MouseDownHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseDown
parameter_list|(
name|MouseDownEvent
name|event
parameter_list|)
block|{
name|iModel
operator|.
name|getOptions
argument_list|()
operator|.
name|add
argument_list|(
name|option
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|hide
argument_list|()
expr_stmt|;
name|iOption
operator|=
name|option
expr_stmt|;
name|setMode
argument_list|(
name|mode
argument_list|,
name|horizontal
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|icon
operator|.
name|addMouseDownHandler
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|title
operator|.
name|addMouseDownHandler
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|box
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
specifier|final
name|P
name|line
init|=
operator|new
name|P
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|(
literal|"blank"
argument_list|)
argument_list|)
expr_stmt|;
name|Button
name|button
init|=
operator|new
name|Button
argument_list|(
name|MESSAGES
operator|.
name|buttonAddAllDepartments
argument_list|()
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|iModel
operator|.
name|getOptions
argument_list|()
operator|.
name|addAll
argument_list|(
name|other
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|hide
argument_list|()
expr_stmt|;
name|setMode
argument_list|(
name|mode
argument_list|,
name|horizontal
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|P
name|p
init|=
operator|new
name|P
argument_list|(
literal|"button"
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|button
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|box
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|ScrollPanel
name|w
init|=
operator|new
name|ScrollPanel
argument_list|()
decl_stmt|;
name|w
operator|.
name|addStyleName
argument_list|(
literal|"scroll"
argument_list|)
expr_stmt|;
name|w
operator|.
name|addStyleName
argument_list|(
literal|"unitime-RoomSharingWidget"
argument_list|)
expr_stmt|;
name|w
operator|.
name|add
argument_list|(
name|legend
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|size
argument_list|()
operator|>=
literal|12
condition|)
name|w
operator|.
name|setHeight
argument_list|(
literal|"300px"
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setWidget
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|RootPanel
operator|.
name|getBodyElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setOverflow
argument_list|(
name|Overflow
operator|.
name|HIDDEN
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|center
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Character
name|ch
init|=
name|UniTimeHeaderPanel
operator|.
name|guessAccessKey
argument_list|(
name|MESSAGES
operator|.
name|buttonAddDepartment
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|!=
literal|null
condition|)
name|button
operator|.
name|setAccessKey
argument_list|(
name|ch
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|button
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|removable
operator|.
name|size
argument_list|()
operator|>=
literal|10
condition|)
block|{
name|Button
name|button
init|=
operator|new
name|Button
argument_list|(
name|MESSAGES
operator|.
name|buttonRemoveAll
argument_list|()
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|iModel
operator|.
name|getOptions
argument_list|()
operator|.
name|removeAll
argument_list|(
name|removable
argument_list|)
expr_stmt|;
if|if
condition|(
name|removable
operator|.
name|contains
argument_list|(
name|iOption
argument_list|)
condition|)
name|iOption
operator|=
name|iModel
operator|.
name|getDefaultOption
argument_list|()
expr_stmt|;
name|setMode
argument_list|(
name|mode
argument_list|,
name|horizontal
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Character
name|ch
init|=
name|UniTimeHeaderPanel
operator|.
name|guessAccessKey
argument_list|(
name|MESSAGES
operator|.
name|buttonRemoveAll
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|!=
literal|null
condition|)
name|button
operator|.
name|setAccessKey
argument_list|(
name|ch
argument_list|)
expr_stmt|;
name|button
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setMarginLeft
argument_list|(
literal|4
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|button
argument_list|)
expr_stmt|;
block|}
name|line
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|box
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|HandlerRegistration
name|addValueChangeHandler
parameter_list|(
name|ValueChangeHandler
argument_list|<
name|RoomSharingModel
argument_list|>
name|handler
parameter_list|)
block|{
return|return
name|addHandler
argument_list|(
name|handler
argument_list|,
name|ValueChangeEvent
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RoomSharingModel
name|getValue
parameter_list|()
block|{
return|return
name|getModel
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|RoomSharingModel
name|value
parameter_list|)
block|{
name|setValue
argument_list|(
name|value
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|RoomSharingModel
name|value
parameter_list|,
name|boolean
name|fireEvents
parameter_list|)
block|{
name|setModel
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|fireEvents
condition|)
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|this
argument_list|,
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

