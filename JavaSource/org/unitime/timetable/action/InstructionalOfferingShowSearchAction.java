begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|HibernateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|Web
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|InstructionalOfferingListForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SubjectAreaDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|BackTracker
import|;
end_import

begin_comment
comment|/**  * @author Stephanie Schluttenhofer  */
end_comment

begin_class
specifier|public
class|class
name|InstructionalOfferingShowSearchAction
extends|extends
name|Action
block|{
comment|/**  	 * Method execute 	 * @param mapping 	 * @param form 	 * @param request 	 * @param response 	 * @return ActionForward 	 * @throws HibernateException 	 */
specifier|public
name|ActionForward
name|execute
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
name|HttpSession
name|httpSession
init|=
name|request
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Web
operator|.
name|isLoggedIn
argument_list|(
name|httpSession
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Access Denied."
argument_list|)
throw|;
block|}
name|BackTracker
operator|.
name|markForBack
argument_list|(
name|request
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//clear back list
name|httpSession
operator|.
name|setAttribute
argument_list|(
literal|"callingPage"
argument_list|,
literal|"instructionalOfferingShowSearch"
argument_list|)
expr_stmt|;
name|InstructionalOfferingListForm
name|frm
init|=
operator|(
name|InstructionalOfferingListForm
operator|)
name|form
decl_stmt|;
comment|// Check if subject area / course number saved to session
name|Object
name|sa
init|=
name|httpSession
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|SUBJ_AREA_ID_ATTR_NAME
argument_list|)
decl_stmt|;
name|Object
name|cn
init|=
name|httpSession
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|CRS_NBR_ATTR_NAME
argument_list|)
decl_stmt|;
name|String
name|subjectAreaId
init|=
literal|""
decl_stmt|;
name|String
name|courseNbr
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|Constants
operator|.
name|ALL_OPTION_VALUE
operator|.
name|equals
argument_list|(
name|sa
argument_list|)
condition|)
name|sa
operator|=
literal|null
expr_stmt|;
if|if
condition|(
operator|(
name|sa
operator|==
literal|null
operator|||
name|sa
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
operator|&&
operator|(
name|cn
operator|==
literal|null
operator|||
name|cn
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
comment|// use session variables from class search
name|sa
operator|=
name|httpSession
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|CRS_LST_SUBJ_AREA_IDS_ATTR_NAME
argument_list|)
expr_stmt|;
name|cn
operator|=
name|httpSession
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|CRS_LST_CRS_NBR_ATTR_NAME
argument_list|)
expr_stmt|;
comment|// Use first subject area
if|if
condition|(
name|sa
operator|!=
literal|null
condition|)
block|{
name|String
name|saStr
init|=
name|sa
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|saStr
operator|.
name|indexOf
argument_list|(
literal|","
argument_list|)
operator|>
literal|0
condition|)
block|{
name|sa
operator|=
name|saStr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|saStr
operator|.
name|indexOf
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|InstructionalOfferingSearchAction
operator|.
name|setupInstrOffrListSpecificFormFilters
argument_list|(
name|httpSession
argument_list|,
name|frm
argument_list|)
expr_stmt|;
comment|/* 	    if (request.getParameter("subjectAreaId") != null){ 	    	frm.setDivSec(request.getParameter("divSec")==null?Boolean.FALSE:new Boolean(request.getParameter("divSec"))); 	    	frm.setDemand(request.getParameter("demand")==null?Boolean.FALSE:new Boolean(request.getParameter("demand"))); 	    	frm.setProjectedDemand(request.getParameter("projectedDemand")==null?Boolean.FALSE:new Boolean(request.getParameter("projectedDemand"))); 	    	frm.setMinPerWk(request.getParameter("minPerWk")==null?Boolean.FALSE:new Boolean(request.getParameter("minPerWk"))); 	    	frm.setLimit(request.getParameter("limit")==null?Boolean.FALSE:new Boolean(request.getParameter("limit"))); 	    	frm.setRoomLimit(request.getParameter("roomLimit")==null?Boolean.FALSE:new Boolean(request.getParameter("roomLimit"))); 	    	frm.setManager(request.getParameter("manager")==null?Boolean.FALSE:new Boolean(request.getParameter("manager"))); 	    	frm.setDatePattern(request.getParameter("datePattern")==null?Boolean.FALSE:new Boolean(request.getParameter("datePattern"))); 	    	frm.setTimePattern(request.getParameter("timePattern")==null?Boolean.FALSE:new Boolean(request.getParameter("timePattern"))); 	    	frm.setPreferences(request.getParameter("preferences")==null?Boolean.FALSE:new Boolean(request.getParameter("preferences"))); 	    	frm.setInstructor(request.getParameter("instructor")==null?Boolean.FALSE:new Boolean(request.getParameter("instructor"))); 	    	frm.setTimetable(request.getParameter("timetable")==null?Boolean.FALSE:new Boolean(request.getParameter("timetable"))); 	    	frm.setCredit(request.getParameter("credit")==null?Boolean.FALSE:new Boolean(request.getParameter("credit"))); 	    	frm.setSchedulePrintNote(request.getParameter("schedulePrintNote")==null?Boolean.FALSE:new Boolean(request.getParameter("schedulePrintNote"))); 	    } 	    */
comment|// Subject Area is saved to the session - Perform automatic search
if|if
condition|(
name|sa
operator|!=
literal|null
condition|)
block|{
name|subjectAreaId
operator|=
name|sa
operator|.
name|toString
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|cn
operator|!=
literal|null
operator|&&
name|cn
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|courseNbr
operator|=
name|cn
operator|.
name|toString
argument_list|()
expr_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Subject Area: "
operator|+
name|subjectAreaId
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Course Number: "
operator|+
name|courseNbr
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setSubjectAreaId
argument_list|(
name|subjectAreaId
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setCourseNbr
argument_list|(
name|courseNbr
argument_list|)
expr_stmt|;
if|if
condition|(
name|doSearch
argument_list|(
name|request
argument_list|,
name|frm
argument_list|)
condition|)
block|{
name|BackTracker
operator|.
name|markForBack
argument_list|(
name|request
argument_list|,
literal|"instructionalOfferingSearch.do?doit=Search&loadInstrFilter=1&subjectAreaId="
operator|+
name|frm
operator|.
name|getSubjectAreaId
argument_list|()
operator|+
literal|"&courseNbr="
operator|+
name|frm
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
literal|"Instructional Offerings ("
operator|+
operator|(
name|frm
operator|.
name|getSubjectAreaAbbv
argument_list|()
operator|==
literal|null
condition|?
operator|(
operator|(
operator|new
name|SubjectAreaDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|frm
operator|.
name|getSubjectAreaId
argument_list|()
argument_list|)
argument_list|)
operator|)
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
else|:
name|frm
operator|.
name|getSubjectAreaAbbv
argument_list|()
operator|)
operator|+
operator|(
name|frm
operator|.
name|getCourseNbr
argument_list|()
operator|==
literal|null
operator|||
name|frm
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|""
else|:
literal|" "
operator|+
name|frm
operator|.
name|getCourseNbr
argument_list|()
operator|)
operator|+
literal|")"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showInstructionalOfferingList"
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
literal|"Subject Area Id session attribute is corrupted. Resetting ... "
argument_list|)
expr_stmt|;
name|httpSession
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|SUBJ_AREA_ID_ATTR_NAME
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|httpSession
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|CRS_NBR_ATTR_NAME
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|// No session attribute found - Load subject areas
else|else
block|{
name|frm
operator|.
name|setCollections
argument_list|(
name|request
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Check if only 1 subject area exists
name|Set
name|s
init|=
operator|(
name|Set
operator|)
name|frm
operator|.
name|getSubjectAreas
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Debug
operator|.
name|debug
argument_list|(
literal|"Exactly 1 subject area found ... "
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setSubjectAreaId
argument_list|(
operator|(
operator|(
name|SubjectArea
operator|)
name|s
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|doSearch
argument_list|(
name|request
argument_list|,
name|frm
argument_list|)
condition|)
block|{
name|BackTracker
operator|.
name|markForBack
argument_list|(
name|request
argument_list|,
literal|"instructionalOfferingSearch.do?doit=Search&loadInstrFilter=1&subjectAreaId="
operator|+
name|frm
operator|.
name|getSubjectAreaId
argument_list|()
operator|+
literal|"&courseNbr="
operator|+
name|frm
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
literal|"Instructional Offerings ("
operator|+
operator|(
name|frm
operator|.
name|getSubjectAreaAbbv
argument_list|()
operator|==
literal|null
condition|?
operator|(
operator|(
operator|new
name|SubjectAreaDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|frm
operator|.
name|getSubjectAreaId
argument_list|()
argument_list|)
argument_list|)
operator|)
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
else|:
name|frm
operator|.
name|getSubjectAreaAbbv
argument_list|()
operator|)
operator|+
operator|(
name|frm
operator|.
name|getCourseNbr
argument_list|()
operator|==
literal|null
operator|||
name|frm
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|""
else|:
literal|" "
operator|+
name|frm
operator|.
name|getCourseNbr
argument_list|()
operator|)
operator|+
literal|")"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showInstructionalOfferingList"
argument_list|)
return|;
block|}
block|}
block|}
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showInstructionalOfferingSearch"
argument_list|)
return|;
block|}
comment|/** 	 * Perform search based on form values of subject area and course number 	 * If search produces results - generate html and store the html as a request attribute 	 * @param request 	 * @param frm 	 * @return true if search returned results, false otherwise 	 * @throws Exception 	 */
specifier|private
name|boolean
name|doSearch
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|InstructionalOfferingListForm
name|frm
parameter_list|)
throws|throws
name|Exception
block|{
name|frm
operator|.
name|setCollections
argument_list|(
name|request
argument_list|,
name|InstructionalOfferingSearchAction
operator|.
name|getInstructionalOfferings
argument_list|(
name|request
argument_list|,
name|frm
argument_list|)
argument_list|)
expr_stmt|;
name|Collection
name|instrOfferings
init|=
name|frm
operator|.
name|getInstructionalOfferings
argument_list|()
decl_stmt|;
comment|// Search return results - Generate html
if|if
condition|(
operator|!
name|instrOfferings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

