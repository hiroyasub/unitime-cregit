begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|WebTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|SessionAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|UserProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|UnassignedForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Solution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SolutionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SubjectAreaDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|SolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|service
operator|.
name|SolverService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|SolutionUnassignedClassesModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|UnassignedClassRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|UnassignedClassesModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|PdfWebTable
import|;
end_import

begin_comment
comment|/**   * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"/unassigned"
argument_list|)
specifier|public
class|class
name|UnassignedAction
extends|extends
name|Action
block|{
annotation|@
name|Autowired
name|SessionContext
name|sessionContext
decl_stmt|;
annotation|@
name|Autowired
name|SolverService
argument_list|<
name|SolverProxy
argument_list|>
name|courseTimetablingSolverService
decl_stmt|;
specifier|public
name|ActionForward
name|execute
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
name|UnassignedForm
name|myForm
init|=
operator|(
name|UnassignedForm
operator|)
name|form
decl_stmt|;
comment|// Check Access
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|NotAssignedClasses
argument_list|)
expr_stmt|;
comment|// Read operation to be performed
name|String
name|op
init|=
operator|(
name|myForm
operator|.
name|getOp
argument_list|()
operator|!=
literal|null
condition|?
name|myForm
operator|.
name|getOp
argument_list|()
else|:
name|request
operator|.
name|getParameter
argument_list|(
literal|"op"
argument_list|)
operator|)
decl_stmt|;
try|try
block|{
name|myForm
operator|.
name|setSubjectAreas
argument_list|(
name|SubjectArea
operator|.
name|getUserSubjectAreas
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
literal|"Apply"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
literal|"Export PDF"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
if|if
condition|(
name|myForm
operator|.
name|getSubjectArea
argument_list|()
operator|==
literal|null
condition|)
name|sessionContext
operator|.
name|removeAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OfferingsSubjectArea
argument_list|)
expr_stmt|;
if|else if
condition|(
name|myForm
operator|.
name|getSubjectArea
argument_list|()
operator|<
literal|0
condition|)
name|sessionContext
operator|.
name|setAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OfferingsSubjectArea
argument_list|,
name|Constants
operator|.
name|ALL_OPTION_VALUE
argument_list|)
expr_stmt|;
else|else
name|sessionContext
operator|.
name|setAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OfferingsSubjectArea
argument_list|,
name|myForm
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|Object
name|sa
init|=
name|sessionContext
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OfferingsSubjectArea
argument_list|)
decl_stmt|;
if|if
condition|(
name|Constants
operator|.
name|ALL_OPTION_VALUE
operator|.
name|equals
argument_list|(
name|sa
argument_list|)
condition|)
name|myForm
operator|.
name|setSubjectArea
argument_list|(
operator|-
literal|1l
argument_list|)
expr_stmt|;
if|else if
condition|(
name|sa
operator|!=
literal|null
condition|)
name|myForm
operator|.
name|setSubjectArea
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|sa
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
if|if
condition|(
name|myForm
operator|.
name|getSubjectArea
argument_list|()
operator|==
literal|null
operator|&&
name|myForm
operator|.
name|getSubjectAreas
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|myForm
operator|.
name|setSubjectArea
argument_list|(
operator|(
operator|(
name|SubjectArea
operator|)
name|myForm
operator|.
name|getSubjectAreas
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"Export PDF"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|File
name|f
init|=
name|exportPdf
argument_list|(
name|request
argument_list|,
name|myForm
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|!=
literal|null
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|REQUEST_OPEN_URL
argument_list|,
literal|"temp/"
operator|+
name|f
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|//response.sendRedirect("temp/"+f.getName());
block|}
name|getUnassigned
argument_list|(
name|request
argument_list|,
name|myForm
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showUnassigned"
argument_list|)
return|;
block|}
specifier|private
name|void
name|getUnassigned
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|Long
name|subjectArea
parameter_list|)
throws|throws
name|Exception
block|{
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|WebTable
operator|.
name|setOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"unassigned.ord"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"ord"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|UnassignedClassesModel
name|model
init|=
literal|null
decl_stmt|;
name|boolean
name|noSubject
init|=
literal|false
decl_stmt|;
name|String
name|prefix
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|subjectArea
operator|!=
literal|null
operator|&&
name|subjectArea
operator|!=
literal|0
condition|)
block|{
name|prefix
operator|=
operator|(
name|subjectArea
operator|<
literal|0
condition|?
literal|null
else|:
operator|new
name|SubjectAreaDAO
argument_list|()
operator|.
name|get
argument_list|(
name|subjectArea
argument_list|)
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|" "
operator|)
expr_stmt|;
name|SolverProxy
name|solver
init|=
name|courseTimetablingSolverService
operator|.
name|getSolver
argument_list|()
decl_stmt|;
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
block|{
name|model
operator|=
name|solver
operator|.
name|getUnassignedClassesModel
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SolutionDAO
name|dao
init|=
operator|new
name|SolutionDAO
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|dao
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|String
name|solutionIdsStr
init|=
operator|(
name|String
operator|)
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|getAttribute
argument_list|(
literal|"Solver.selectedSolutionId"
argument_list|)
decl_stmt|;
if|if
condition|(
name|solutionIdsStr
operator|!=
literal|null
condition|)
block|{
name|Set
name|solutions
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|solutionIdsStr
argument_list|,
literal|","
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|Long
name|solutionId
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|s
operator|.
name|nextToken
argument_list|()
argument_list|)
decl_stmt|;
name|Solution
name|solution
init|=
name|dao
operator|.
name|get
argument_list|(
name|solutionId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|solution
operator|!=
literal|null
condition|)
name|solutions
operator|.
name|add
argument_list|(
name|solution
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|solutions
operator|.
name|isEmpty
argument_list|()
condition|)
name|model
operator|=
operator|new
name|SolutionUnassignedClassesModel
argument_list|(
name|solutions
argument_list|,
name|hibSession
argument_list|,
name|UserProperty
operator|.
name|NameFormat
operator|.
name|get
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|noSubject
operator|=
literal|true
expr_stmt|;
block|}
name|WebTable
name|webTable
init|=
operator|new
name|WebTable
argument_list|(
literal|4
argument_list|,
operator|(
name|prefix
operator|==
literal|null
condition|?
literal|""
else|:
name|prefix
operator|)
operator|+
literal|"Not-assigned Classes"
argument_list|,
literal|"unassigned.do?ord=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Class"
block|,
literal|"Instructor"
block|,
literal|"Students"
block|,
literal|"Initial Assignment"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|noSubject
condition|)
block|{
name|webTable
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"<i>No subject area is selected.</i>"
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|model
operator|==
literal|null
condition|)
block|{
name|webTable
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"<i>Neither a solver is started nor solution is selected.</i>"
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|model
operator|.
name|getNrRows
argument_list|()
operator|==
literal|0
condition|)
block|{
name|webTable
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"<i>All variables are assigned.</i>"
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|model
operator|.
name|getNrRows
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|UnassignedClassRow
name|row
init|=
name|model
operator|.
name|getRow
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|onClick
init|=
name|row
operator|.
name|getOnClick
argument_list|()
decl_stmt|;
name|webTable
operator|.
name|addLine
argument_list|(
operator|(
name|onClick
operator|==
literal|null
condition|?
literal|""
else|:
literal|"onclick=\""
operator|+
name|row
operator|.
name|getOnClick
argument_list|()
operator|+
literal|"\""
operator|)
argument_list|,
operator|new
name|String
index|[]
block|{
name|row
operator|.
name|getName
argument_list|()
block|,
name|row
operator|.
name|getInstructor
argument_list|()
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|row
operator|.
name|getNrStudents
argument_list|()
argument_list|)
block|,
name|row
operator|.
name|getInitial
argument_list|()
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|row
block|,
name|row
operator|.
name|getInstructor
argument_list|()
block|,
operator|new
name|Integer
argument_list|(
name|row
operator|.
name|getNrStudents
argument_list|()
argument_list|)
block|,
name|row
operator|.
name|getInitial
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|request
operator|.
name|setAttribute
argument_list|(
literal|"Unassigned.table"
argument_list|,
name|webTable
operator|.
name|printTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"unassigned.ord"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|private
name|File
name|exportPdf
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|Long
name|subjectArea
parameter_list|)
throws|throws
name|Exception
block|{
name|UnassignedClassesModel
name|model
init|=
literal|null
decl_stmt|;
name|boolean
name|noSubject
init|=
literal|false
decl_stmt|;
name|String
name|prefix
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|subjectArea
operator|!=
literal|null
operator|&&
name|subjectArea
operator|!=
literal|0
condition|)
block|{
name|prefix
operator|=
operator|(
name|subjectArea
operator|<
literal|0
condition|?
literal|null
else|:
operator|new
name|SubjectAreaDAO
argument_list|()
operator|.
name|get
argument_list|(
name|subjectArea
argument_list|)
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|" "
operator|)
expr_stmt|;
name|SolverProxy
name|solver
init|=
name|courseTimetablingSolverService
operator|.
name|getSolver
argument_list|()
decl_stmt|;
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
block|{
name|model
operator|=
name|solver
operator|.
name|getUnassignedClassesModel
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SolutionDAO
name|dao
init|=
operator|new
name|SolutionDAO
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|dao
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|String
name|solutionIdsStr
init|=
operator|(
name|String
operator|)
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|getAttribute
argument_list|(
literal|"Solver.selectedSolutionId"
argument_list|)
decl_stmt|;
if|if
condition|(
name|solutionIdsStr
operator|!=
literal|null
condition|)
block|{
name|Set
name|solutions
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|solutionIdsStr
argument_list|,
literal|","
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|Long
name|solutionId
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|s
operator|.
name|nextToken
argument_list|()
argument_list|)
decl_stmt|;
name|Solution
name|solution
init|=
name|dao
operator|.
name|get
argument_list|(
name|solutionId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|solution
operator|!=
literal|null
condition|)
name|solutions
operator|.
name|add
argument_list|(
name|solution
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|solutions
operator|.
name|isEmpty
argument_list|()
condition|)
name|model
operator|=
operator|new
name|SolutionUnassignedClassesModel
argument_list|(
name|solutions
argument_list|,
name|hibSession
argument_list|,
name|UserProperty
operator|.
name|NameFormat
operator|.
name|get
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|noSubject
operator|=
literal|true
expr_stmt|;
block|}
name|PdfWebTable
name|webTable
init|=
operator|new
name|PdfWebTable
argument_list|(
literal|4
argument_list|,
operator|(
name|prefix
operator|==
literal|null
condition|?
literal|""
else|:
name|prefix
operator|)
operator|+
literal|"Not-assigned Classes"
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Class"
block|,
literal|"Instructor"
block|,
literal|"Students"
block|,
literal|"Initial Assignment"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|noSubject
condition|)
block|{
name|webTable
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"@@ITALIC No subject area is selected."
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|model
operator|==
literal|null
condition|)
block|{
name|webTable
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"@@ITALIC Neither a solver is started nor solution is selected."
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|model
operator|.
name|getNrRows
argument_list|()
operator|==
literal|0
condition|)
block|{
name|webTable
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"@@ITALIC All variables are assigned."
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|model
operator|.
name|getNrRows
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|UnassignedClassRow
name|row
init|=
name|model
operator|.
name|getRow
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|webTable
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|row
operator|.
name|getName
argument_list|()
block|,
name|row
operator|.
name|getInstructor
argument_list|()
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|row
operator|.
name|getNrStudents
argument_list|()
argument_list|)
block|,
name|row
operator|.
name|getInitial
argument_list|()
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|row
block|,
name|row
operator|.
name|getInstructor
argument_list|()
block|,
operator|new
name|Integer
argument_list|(
name|row
operator|.
name|getNrStudents
argument_list|()
argument_list|)
block|,
name|row
operator|.
name|getInitial
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|File
name|file
init|=
name|ApplicationProperties
operator|.
name|getTempFile
argument_list|(
literal|"unassigned"
argument_list|,
literal|"pdf"
argument_list|)
decl_stmt|;
name|webTable
operator|.
name|exportPdf
argument_list|(
name|file
argument_list|,
name|WebTable
operator|.
name|getOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"unassigned.ord"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|file
return|;
block|}
block|}
end_class

end_unit

