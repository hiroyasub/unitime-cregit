begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 - 3.5 (University Timetabling Application)  * Copyright (C) 2008 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionRedirect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|util
operator|.
name|MessageResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|messages
operator|.
name|CourseMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|SessionAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|UserProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|InstructionalOfferingDetailForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalInstructionalOfferingDeleteAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalInstructionalOfferingNotOfferedAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalInstructionalOfferingOfferedAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalLinkLookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentAccomodation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|CourseOfferingComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|InstrOfferingConfigComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstructionalOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|BackTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|DistributionPrefsTableBuilder
import|;
end_import

begin_comment
comment|/**   * MyEclipse Struts  * Creation date: 03-20-2006  *   * XDoclet definition:  * @struts:action path="/instructionalOfferingConfigDetail" name="instructionalOfferingConfigDetailForm" input="/user/instructionalOfferingConfigDetail.jsp" scope="request"  *  * @author Tomas Muller, Zuzana Mullerova, Stephanie Schluttenhofer  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"/instructionalOfferingDetail"
argument_list|)
specifier|public
class|class
name|InstructionalOfferingDetailAction
extends|extends
name|Action
block|{
specifier|protected
specifier|final
specifier|static
name|CourseMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|CourseMessages
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Autowired
name|SessionContext
name|sessionContext
decl_stmt|;
comment|// --------------------------------------------------------- Instance Variables
comment|// --------------------------------------------------------- Methods
comment|/**       * Method execute      * @param mapping      * @param form      * @param request      * @param response      * @return ActionForward      */
specifier|public
name|ActionForward
name|execute
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
name|MessageResources
name|rsc
init|=
name|getResources
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|InstructionalOfferingDetailForm
name|frm
init|=
operator|(
name|InstructionalOfferingDetailForm
operator|)
name|form
decl_stmt|;
comment|// Read Parameters
name|String
name|op
init|=
operator|(
name|request
operator|.
name|getAttribute
argument_list|(
literal|"op"
argument_list|)
operator|!=
literal|null
condition|?
name|request
operator|.
name|getAttribute
argument_list|(
literal|"op"
argument_list|)
operator|.
name|toString
argument_list|()
else|:
name|request
operator|.
name|getParameter
argument_list|(
literal|"op"
argument_list|)
operator|!=
literal|null
condition|?
name|request
operator|.
name|getParameter
argument_list|(
literal|"op"
argument_list|)
else|:
name|frm
operator|.
name|getOp
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|frm
operator|.
name|getOp
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|frm
operator|.
name|getOp
argument_list|()
else|:
name|request
operator|.
name|getParameter
argument_list|(
literal|"hdnOp"
argument_list|)
operator|)
decl_stmt|;
comment|// Check operation
if|if
condition|(
name|op
operator|==
literal|null
operator|||
name|op
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
name|MSG
operator|.
name|exceptionOperationNotInterpreted
argument_list|()
operator|+
name|op
argument_list|)
throw|;
if|if
condition|(
literal|"n"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"confirm"
argument_list|)
argument_list|)
condition|)
name|op
operator|=
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"op.view"
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Op: "
operator|+
name|op
argument_list|)
expr_stmt|;
comment|// Delete insructional offering
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionDeleteIO
argument_list|()
argument_list|)
operator|&&
name|request
operator|.
name|getAttribute
argument_list|(
literal|"cfgDelete"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|frm
operator|.
name|getInstrOfferingId
argument_list|()
argument_list|,
literal|"InstructionalOffering"
argument_list|,
name|Right
operator|.
name|OfferingDelete
argument_list|)
expr_stmt|;
name|doDelete
argument_list|(
name|request
argument_list|,
name|frm
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|removeAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OfferingsCourseNumber
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showInstructionalOfferings"
argument_list|)
return|;
block|}
comment|// Display detail - default
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"op.view"
argument_list|)
argument_list|)
comment|// || op.equals(rsc.getMessage("button.createClasses"))
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionUpdateConfiguration
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionSaveConfiguration
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionDeleteConfiguration
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionUnassignAllInstructorsFromConfig
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|instrOfferingId
init|=
operator|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"io"
argument_list|)
operator|==
literal|null
operator|)
condition|?
operator|(
name|request
operator|.
name|getAttribute
argument_list|(
literal|"io"
argument_list|)
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|request
operator|.
name|getAttribute
argument_list|(
literal|"io"
argument_list|)
operator|.
name|toString
argument_list|()
else|:
name|request
operator|.
name|getParameter
argument_list|(
literal|"io"
argument_list|)
decl_stmt|;
if|if
condition|(
name|instrOfferingId
operator|==
literal|null
operator|&&
name|frm
operator|.
name|getInstrOfferingId
argument_list|()
operator|!=
literal|null
condition|)
name|instrOfferingId
operator|=
name|frm
operator|.
name|getInstrOfferingId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|instrOfferingId
operator|==
literal|null
operator|||
name|instrOfferingId
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
name|MSG
operator|.
name|exceptionIODataNotCorrect
argument_list|()
operator|+
name|instrOfferingId
argument_list|)
throw|;
else|else
block|{
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|instrOfferingId
argument_list|,
literal|"InstructionalOffering"
argument_list|,
name|Right
operator|.
name|InstructionalOfferingDetail
argument_list|)
expr_stmt|;
name|doLoad
argument_list|(
name|request
argument_list|,
name|frm
argument_list|,
name|instrOfferingId
argument_list|)
expr_stmt|;
block|}
name|BackTracker
operator|.
name|markForBack
argument_list|(
name|request
argument_list|,
literal|"instructionalOfferingDetail.do?io="
operator|+
name|frm
operator|.
name|getInstrOfferingId
argument_list|()
argument_list|,
name|MSG
operator|.
name|backInstructionalOffering
argument_list|(
name|frm
operator|.
name|getInstrOfferingNameNoTitle
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showConfigDetail"
argument_list|)
return|;
block|}
comment|// Add Configuration
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionAddConfiguration
argument_list|()
argument_list|)
condition|)
block|{
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|frm
operator|.
name|getInstrOfferingId
argument_list|()
argument_list|,
literal|"InstructionalOffering"
argument_list|,
name|Right
operator|.
name|InstrOfferingConfigAdd
argument_list|)
expr_stmt|;
comment|// Redirect to config edit
name|InstructionalOfferingDAO
name|idao
init|=
operator|new
name|InstructionalOfferingDAO
argument_list|()
decl_stmt|;
name|InstructionalOffering
name|io
init|=
name|idao
operator|.
name|get
argument_list|(
name|frm
operator|.
name|getInstrOfferingId
argument_list|()
argument_list|)
decl_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"uid"
argument_list|,
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"modifyConfig"
argument_list|)
return|;
block|}
comment|// Make Offering 'Offered'
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionMakeOffered
argument_list|()
argument_list|)
condition|)
block|{
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|frm
operator|.
name|getInstrOfferingId
argument_list|()
argument_list|,
literal|"InstructionalOffering"
argument_list|,
name|Right
operator|.
name|OfferingMakeOffered
argument_list|)
expr_stmt|;
name|doMakeOffered
argument_list|(
name|request
argument_list|,
name|frm
argument_list|)
expr_stmt|;
comment|// Redirect to config edit
name|InstructionalOfferingDAO
name|idao
init|=
operator|new
name|InstructionalOfferingDAO
argument_list|()
decl_stmt|;
name|InstructionalOffering
name|io
init|=
name|idao
operator|.
name|get
argument_list|(
name|frm
operator|.
name|getInstrOfferingId
argument_list|()
argument_list|)
decl_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"uid"
argument_list|,
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"modifyConfig"
argument_list|)
return|;
block|}
comment|// Make Offering 'Not Offered'
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionMakeNotOffered
argument_list|()
argument_list|)
condition|)
block|{
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|frm
operator|.
name|getInstrOfferingId
argument_list|()
argument_list|,
literal|"InstructionalOffering"
argument_list|,
name|Right
operator|.
name|OfferingMakeNotOffered
argument_list|)
expr_stmt|;
name|doMakeNotOffered
argument_list|(
name|request
argument_list|,
name|frm
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"false"
operator|.
name|equals
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.offering.makeNotOfferedStaysOnDetail"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
condition|)
block|{
name|ActionRedirect
name|redirect
init|=
operator|new
name|ActionRedirect
argument_list|(
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showInstructionalOfferings"
argument_list|)
argument_list|)
decl_stmt|;
name|redirect
operator|.
name|setAnchor
argument_list|(
literal|"A"
operator|+
name|frm
operator|.
name|getInstrOfferingId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|redirect
return|;
block|}
else|else
block|{
name|response
operator|.
name|sendRedirect
argument_list|(
name|response
operator|.
name|encodeURL
argument_list|(
literal|"instructionalOfferingDetail.do?io="
operator|+
name|frm
operator|.
name|getInstrOfferingId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|// Change controlling course, add other offerings
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionCrossLists
argument_list|()
argument_list|)
condition|)
block|{
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|frm
operator|.
name|getInstrOfferingId
argument_list|()
argument_list|,
literal|"InstructionalOffering"
argument_list|,
name|Right
operator|.
name|InstructionalOfferingCrossLists
argument_list|)
expr_stmt|;
name|InstructionalOfferingDAO
name|idao
init|=
operator|new
name|InstructionalOfferingDAO
argument_list|()
decl_stmt|;
name|InstructionalOffering
name|io
init|=
name|idao
operator|.
name|get
argument_list|(
name|frm
operator|.
name|getInstrOfferingId
argument_list|()
argument_list|)
decl_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"uid"
argument_list|,
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"modifyCrossLists"
argument_list|)
return|;
block|}
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionNextIO
argument_list|()
argument_list|)
condition|)
block|{
name|response
operator|.
name|sendRedirect
argument_list|(
name|response
operator|.
name|encodeURL
argument_list|(
literal|"instructionalOfferingDetail.do?io="
operator|+
name|frm
operator|.
name|getNextId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionPreviousIO
argument_list|()
argument_list|)
condition|)
block|{
name|response
operator|.
name|sendRedirect
argument_list|(
name|response
operator|.
name|encodeURL
argument_list|(
literal|"instructionalOfferingDetail.do?io="
operator|+
name|frm
operator|.
name|getPreviousId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionLockIO
argument_list|()
argument_list|)
condition|)
block|{
name|InstructionalOfferingDAO
name|idao
init|=
operator|new
name|InstructionalOfferingDAO
argument_list|()
decl_stmt|;
name|InstructionalOffering
name|io
init|=
name|idao
operator|.
name|get
argument_list|(
name|frm
operator|.
name|getInstrOfferingId
argument_list|()
argument_list|)
decl_stmt|;
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|io
argument_list|,
name|Right
operator|.
name|OfferingCanLock
argument_list|)
expr_stmt|;
name|io
operator|.
name|getSession
argument_list|()
operator|.
name|lockOffering
argument_list|(
name|io
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|sendRedirect
argument_list|(
name|response
operator|.
name|encodeURL
argument_list|(
literal|"instructionalOfferingDetail.do?io="
operator|+
name|io
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionUnlockIO
argument_list|()
argument_list|)
condition|)
block|{
name|InstructionalOfferingDAO
name|idao
init|=
operator|new
name|InstructionalOfferingDAO
argument_list|()
decl_stmt|;
name|InstructionalOffering
name|io
init|=
name|idao
operator|.
name|get
argument_list|(
name|frm
operator|.
name|getInstrOfferingId
argument_list|()
argument_list|)
decl_stmt|;
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|io
argument_list|,
name|Right
operator|.
name|OfferingCanUnlock
argument_list|)
expr_stmt|;
name|io
operator|.
name|getSession
argument_list|()
operator|.
name|unlockOffering
argument_list|(
name|io
argument_list|,
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|sendRedirect
argument_list|(
name|response
operator|.
name|encodeURL
argument_list|(
literal|"instructionalOfferingDetail.do?io="
operator|+
name|io
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|frm
operator|.
name|getInstrOfferingId
argument_list|()
argument_list|,
literal|"InstructionalOffering"
argument_list|,
name|Right
operator|.
name|InstructionalOfferingDetail
argument_list|)
expr_stmt|;
name|BackTracker
operator|.
name|markForBack
argument_list|(
name|request
argument_list|,
literal|"instructionalOfferingDetail.do?io="
operator|+
name|frm
operator|.
name|getInstrOfferingId
argument_list|()
argument_list|,
name|MSG
operator|.
name|backInstructionalOffering
argument_list|(
name|frm
operator|.
name|getInstrOfferingName
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Go back to instructional offerings
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showInstructionalOfferings"
argument_list|)
return|;
block|}
comment|/**      * Delete Instructional Offering 	 * @param request 	 * @param frm 	 */
specifier|private
name|void
name|doDelete
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|InstructionalOfferingDetailForm
name|frm
parameter_list|)
throws|throws
name|Exception
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
literal|null
decl_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|InstructionalOfferingDAO
name|idao
init|=
operator|new
name|InstructionalOfferingDAO
argument_list|()
decl_stmt|;
name|InstructionalOffering
name|io
init|=
name|idao
operator|.
name|get
argument_list|(
name|frm
operator|.
name|getInstrOfferingId
argument_list|()
argument_list|)
decl_stmt|;
name|hibSession
operator|=
name|idao
operator|.
name|getSession
argument_list|()
expr_stmt|;
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|io
operator|.
name|deleteAllDistributionPreferences
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
name|Event
operator|.
name|deleteFromEvents
argument_list|(
name|hibSession
argument_list|,
name|io
argument_list|)
expr_stmt|;
name|Exam
operator|.
name|deleteFromExams
argument_list|(
name|hibSession
argument_list|,
name|io
argument_list|)
expr_stmt|;
name|String
name|className
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.external.instr_offr.delete_action.class"
argument_list|)
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
operator|&&
name|className
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ExternalInstructionalOfferingDeleteAction
name|deleteAction
init|=
operator|(
name|ExternalInstructionalOfferingDeleteAction
operator|)
operator|(
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|newInstance
argument_list|()
operator|)
decl_stmt|;
name|deleteAction
operator|.
name|performExternalInstructionalOfferingDeleteAction
argument_list|(
name|io
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|sessionContext
argument_list|,
name|io
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|OFFERING_DETAIL
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|DELETE
argument_list|,
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|CourseOffering
name|co
range|:
name|io
operator|.
name|getCourseOfferings
argument_list|()
control|)
block|{
name|co
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|remove
argument_list|(
name|co
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|co
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|delete
argument_list|(
name|io
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|e
operator|)
throw|;
block|}
block|}
comment|/**      * Loads the form initially      * @param request      * @param frm      * @param instrOfferingIdStr      */
specifier|private
name|void
name|doLoad
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|InstructionalOfferingDetailForm
name|frm
parameter_list|,
name|String
name|instrOfferingIdStr
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Load Instr Offering
name|Long
name|instrOfferingId
init|=
operator|new
name|Long
argument_list|(
name|instrOfferingIdStr
argument_list|)
decl_stmt|;
name|InstructionalOfferingDAO
name|idao
init|=
operator|new
name|InstructionalOfferingDAO
argument_list|()
decl_stmt|;
name|InstructionalOffering
name|io
init|=
name|idao
operator|.
name|get
argument_list|(
name|instrOfferingId
argument_list|)
decl_stmt|;
name|Long
name|subjectAreaId
init|=
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
decl_stmt|;
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|io
argument_list|,
name|Right
operator|.
name|InstructionalOfferingDetail
argument_list|)
expr_stmt|;
comment|// Set Session Variables
name|InstructionalOfferingSearchAction
operator|.
name|setLastInstructionalOffering
argument_list|(
name|sessionContext
argument_list|,
name|io
argument_list|)
expr_stmt|;
comment|// Sort Offerings
name|ArrayList
name|offerings
init|=
operator|new
name|ArrayList
argument_list|(
name|io
operator|.
name|getCourseOfferings
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|offerings
argument_list|,
operator|new
name|CourseOfferingComparator
argument_list|(
name|CourseOfferingComparator
operator|.
name|COMPARE_BY_CTRL_CRS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Load Form
name|frm
operator|.
name|setInstrOfferingId
argument_list|(
name|instrOfferingId
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setSubjectAreaId
argument_list|(
name|subjectAreaId
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setInstrOfferingName
argument_list|(
name|io
operator|.
name|getCourseNameWithTitle
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setSubjectAreaAbbr
argument_list|(
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setCourseNbr
argument_list|(
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setInstrOfferingNameNoTitle
argument_list|(
name|io
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setCtrlCrsOfferingId
argument_list|(
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setDemand
argument_list|(
name|io
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setEnrollment
argument_list|(
name|io
operator|.
name|getEnrollment
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setProjectedDemand
argument_list|(
name|io
operator|.
name|getProjectedDemand
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setLimit
argument_list|(
name|io
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setUnlimited
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setAccommodation
argument_list|(
name|StudentAccomodation
operator|.
name|toHtml
argument_list|(
name|StudentAccomodation
operator|.
name|getAccommodations
argument_list|(
name|io
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setByReservationOnly
argument_list|(
name|io
operator|.
name|isByReservationOnly
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setWkEnroll
argument_list|(
name|io
operator|.
name|getLastWeekToEnroll
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|io
operator|.
name|getLastWeekToEnroll
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setWkChange
argument_list|(
name|io
operator|.
name|getLastWeekToChange
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|io
operator|.
name|getLastWeekToChange
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setWkDrop
argument_list|(
name|io
operator|.
name|getLastWeekToDrop
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|io
operator|.
name|getLastWeekToDrop
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setWeekStartDayOfWeek
argument_list|(
name|Localization
operator|.
name|getDateFormat
argument_list|(
literal|"EEEE"
argument_list|)
operator|.
name|format
argument_list|(
name|io
operator|.
name|getSession
argument_list|()
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|coordinators
init|=
literal|""
decl_stmt|;
name|String
name|instructorNameFormat
init|=
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
name|UserProperty
operator|.
name|NameFormat
argument_list|)
decl_stmt|;
for|for
control|(
name|DepartmentalInstructor
name|instructor
range|:
operator|new
name|TreeSet
argument_list|<
name|DepartmentalInstructor
argument_list|>
argument_list|(
name|io
operator|.
name|getCoordinators
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|coordinators
operator|.
name|isEmpty
argument_list|()
condition|)
name|coordinators
operator|+=
literal|"<br>"
expr_stmt|;
name|coordinators
operator|+=
literal|"<a href='instructorDetail.do?instructorId="
operator|+
name|instructor
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"' class='noFancyLinks'>"
operator|+
name|instructor
operator|.
name|getName
argument_list|(
name|instructorNameFormat
argument_list|)
operator|+
literal|"</a>"
expr_stmt|;
block|}
name|frm
operator|.
name|setCoordinators
argument_list|(
name|coordinators
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
if|if
condition|(
operator|(
operator|(
name|InstrOfferingConfig
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|isUnlimitedEnrollment
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|frm
operator|.
name|setUnlimited
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
break|break;
block|}
name|frm
operator|.
name|setNotOffered
argument_list|(
name|io
operator|.
name|isNotOffered
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setCourseOfferings
argument_list|(
name|offerings
argument_list|)
expr_stmt|;
comment|// Check limits on courses if cross-listed
if|if
condition|(
name|io
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|&&
operator|!
name|frm
operator|.
name|getUnlimited
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|int
name|lim
init|=
literal|0
decl_stmt|;
name|boolean
name|reservationSet
init|=
literal|false
decl_stmt|;
for|for
control|(
name|CourseOffering
name|course
range|:
name|io
operator|.
name|getCourseOfferings
argument_list|()
control|)
block|{
if|if
condition|(
name|course
operator|.
name|getReservation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|lim
operator|+=
name|course
operator|.
name|getReservation
argument_list|()
expr_stmt|;
name|reservationSet
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|reservationSet
operator|&&
name|io
operator|.
name|getLimit
argument_list|()
operator|!=
literal|null
operator|&&
name|lim
operator|<
name|io
operator|.
name|getLimit
argument_list|()
operator|.
name|intValue
argument_list|()
condition|)
block|{
name|request
operator|.
name|setAttribute
argument_list|(
literal|"limitsDoNotMatch"
argument_list|,
literal|""
operator|+
name|lim
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Check configuration limits
name|TreeSet
argument_list|<
name|InstrOfferingConfig
argument_list|>
name|configsWithTooHighLimit
init|=
operator|new
name|TreeSet
argument_list|<
name|InstrOfferingConfig
argument_list|>
argument_list|(
operator|new
name|InstrOfferingConfigComparator
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|InstrOfferingConfig
name|config
range|:
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
control|)
block|{
if|if
condition|(
name|config
operator|.
name|isUnlimitedEnrollment
argument_list|()
condition|)
continue|continue;
name|Integer
name|subpartLimit
init|=
literal|null
decl_stmt|;
for|for
control|(
name|SchedulingSubpart
name|subpart
range|:
name|config
operator|.
name|getSchedulingSubparts
argument_list|()
control|)
block|{
name|int
name|limit
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Class_
name|clazz
range|:
name|subpart
operator|.
name|getClasses
argument_list|()
control|)
block|{
name|limit
operator|+=
name|clazz
operator|.
name|getExpectedCapacity
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|subpartLimit
operator|==
literal|null
operator|||
name|subpartLimit
operator|>
name|limit
condition|)
name|subpartLimit
operator|=
name|limit
expr_stmt|;
block|}
if|if
condition|(
name|subpartLimit
operator|!=
literal|null
operator|&&
name|subpartLimit
operator|<
name|config
operator|.
name|getLimit
argument_list|()
condition|)
name|configsWithTooHighLimit
operator|.
name|add
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|configsWithTooHighLimit
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|configsWithTooHighLimit
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
literal|"configsWithTooHighLimit"
argument_list|,
name|MSG
operator|.
name|errorConfigWithTooHighLimit
argument_list|(
name|configsWithTooHighLimit
operator|.
name|first
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
block|{
name|String
name|names
init|=
literal|""
decl_stmt|;
for|for
control|(
name|InstrOfferingConfig
name|config
range|:
name|configsWithTooHighLimit
control|)
block|{
if|if
condition|(
operator|!
name|names
operator|.
name|isEmpty
argument_list|()
condition|)
name|names
operator|+=
literal|", "
expr_stmt|;
name|names
operator|+=
name|config
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|request
operator|.
name|setAttribute
argument_list|(
literal|"configsWithTooHighLimit"
argument_list|,
name|MSG
operator|.
name|errorConfigsWithTooHighLimit
argument_list|(
name|names
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Catalog Link
name|String
name|linkLookupClass
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.catalogLink.lookup.class"
argument_list|)
decl_stmt|;
if|if
condition|(
name|linkLookupClass
operator|!=
literal|null
operator|&&
name|linkLookupClass
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ExternalLinkLookup
name|lookup
init|=
operator|(
name|ExternalLinkLookup
operator|)
operator|(
name|Class
operator|.
name|forName
argument_list|(
name|linkLookupClass
argument_list|)
operator|.
name|newInstance
argument_list|()
operator|)
decl_stmt|;
name|Map
name|results
init|=
name|lookup
operator|.
name|getLink
argument_list|(
name|io
argument_list|)
decl_stmt|;
if|if
condition|(
name|results
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
name|lookup
operator|.
name|getErrorMessage
argument_list|()
argument_list|)
throw|;
name|frm
operator|.
name|setCatalogLinkLabel
argument_list|(
operator|(
name|String
operator|)
name|results
operator|.
name|get
argument_list|(
name|ExternalLinkLookup
operator|.
name|LINK_LABEL
argument_list|)
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setCatalogLinkLocation
argument_list|(
operator|(
name|String
operator|)
name|results
operator|.
name|get
argument_list|(
name|ExternalLinkLookup
operator|.
name|LINK_LOCATION
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|InstructionalOffering
name|next
init|=
name|io
operator|.
name|getNextInstructionalOffering
argument_list|(
name|sessionContext
argument_list|)
decl_stmt|;
name|frm
operator|.
name|setNextId
argument_list|(
name|next
operator|==
literal|null
condition|?
literal|null
else|:
name|next
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|InstructionalOffering
name|previous
init|=
name|io
operator|.
name|getPreviousInstructionalOffering
argument_list|(
name|sessionContext
argument_list|)
decl_stmt|;
name|frm
operator|.
name|setPreviousId
argument_list|(
name|previous
operator|==
literal|null
condition|?
literal|null
else|:
name|previous
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|DistributionPrefsTableBuilder
name|tbl
init|=
operator|new
name|DistributionPrefsTableBuilder
argument_list|()
decl_stmt|;
name|String
name|html
init|=
name|tbl
operator|.
name|getDistPrefsTableForInstructionalOffering
argument_list|(
name|request
argument_list|,
name|sessionContext
argument_list|,
name|io
argument_list|)
decl_stmt|;
if|if
condition|(
name|html
operator|!=
literal|null
operator|&&
name|html
operator|.
name|indexOf
argument_list|(
name|MSG
operator|.
name|noPreferencesFound
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
name|DistributionPref
operator|.
name|DIST_PREF_REQUEST_ATTR
argument_list|,
name|html
argument_list|)
expr_stmt|;
block|}
comment|/**      * Make an offering 'Not Offered'      * @param request      * @param frm      */
specifier|private
name|void
name|doMakeNotOffered
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|InstructionalOfferingDetailForm
name|frm
parameter_list|)
throws|throws
name|Exception
block|{
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|frm
operator|.
name|getInstrOfferingId
argument_list|()
argument_list|,
literal|"InstructionalOffering"
argument_list|,
name|Right
operator|.
name|OfferingMakeNotOffered
argument_list|)
expr_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
literal|null
decl_stmt|;
try|try
block|{
name|InstructionalOfferingDAO
name|idao
init|=
operator|new
name|InstructionalOfferingDAO
argument_list|()
decl_stmt|;
name|hibSession
operator|=
name|idao
operator|.
name|getSession
argument_list|()
expr_stmt|;
name|InstructionalOffering
name|io
init|=
name|idao
operator|.
name|get
argument_list|(
name|frm
operator|.
name|getInstrOfferingId
argument_list|()
argument_list|)
decl_stmt|;
name|io
operator|.
name|deleteAllDistributionPreferences
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
comment|// Delete all classes only - config stays
name|io
operator|.
name|deleteAllClasses
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|io
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOffering
name|co
init|=
operator|(
name|CourseOffering
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Event
operator|.
name|deleteFromEvents
argument_list|(
name|hibSession
argument_list|,
name|co
argument_list|)
expr_stmt|;
name|Exam
operator|.
name|deleteFromExams
argument_list|(
name|hibSession
argument_list|,
name|co
argument_list|)
expr_stmt|;
block|}
name|Event
operator|.
name|deleteFromEvents
argument_list|(
name|hibSession
argument_list|,
name|io
argument_list|)
expr_stmt|;
name|Exam
operator|.
name|deleteFromExams
argument_list|(
name|hibSession
argument_list|,
name|io
argument_list|)
expr_stmt|;
comment|// Set flag to not offered
name|io
operator|.
name|setNotOffered
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|idao
operator|.
name|saveOrUpdate
argument_list|(
name|io
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|sessionContext
argument_list|,
name|io
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|MAKE_NOT_OFFERED
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|UPDATE
argument_list|,
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Unlock the offering, if needed
if|if
condition|(
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|io
argument_list|,
name|Right
operator|.
name|OfferingCanUnlock
argument_list|)
condition|)
name|io
operator|.
name|getSession
argument_list|()
operator|.
name|unlockOffering
argument_list|(
name|io
argument_list|,
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|clear
argument_list|()
expr_stmt|;
name|String
name|className
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.external.instr_offr.not_offered_action.class"
argument_list|)
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
operator|&&
name|className
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ExternalInstructionalOfferingNotOfferedAction
name|notOfferedAction
init|=
operator|(
name|ExternalInstructionalOfferingNotOfferedAction
operator|)
operator|(
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|newInstance
argument_list|()
operator|)
decl_stmt|;
name|notOfferedAction
operator|.
name|performExternalInstructionalOfferingNotOfferedAction
argument_list|(
name|io
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
comment|// Update Form
name|frm
operator|.
name|setNotOffered
argument_list|(
name|io
operator|.
name|isNotOffered
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|e
operator|)
throw|;
block|}
block|}
comment|/**      * Make an offering 'Not Offered'      * @param request      * @param frm      */
specifier|private
name|void
name|doMakeOffered
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|InstructionalOfferingDetailForm
name|frm
parameter_list|)
throws|throws
name|Exception
block|{
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|frm
operator|.
name|getInstrOfferingId
argument_list|()
argument_list|,
literal|"InstructionalOffering"
argument_list|,
name|Right
operator|.
name|OfferingMakeOffered
argument_list|)
expr_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
literal|null
decl_stmt|;
try|try
block|{
name|InstructionalOfferingDAO
name|idao
init|=
operator|new
name|InstructionalOfferingDAO
argument_list|()
decl_stmt|;
name|hibSession
operator|=
name|idao
operator|.
name|getSession
argument_list|()
expr_stmt|;
name|InstructionalOffering
name|io
init|=
name|idao
operator|.
name|get
argument_list|(
name|frm
operator|.
name|getInstrOfferingId
argument_list|()
argument_list|)
decl_stmt|;
comment|// Set flag to offered
name|io
operator|.
name|setNotOffered
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|idao
operator|.
name|saveOrUpdate
argument_list|(
name|io
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|sessionContext
argument_list|,
name|io
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|MAKE_OFFERED
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|UPDATE
argument_list|,
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Lock the offering, if needed
if|if
condition|(
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|io
argument_list|,
name|Right
operator|.
name|OfferingCanLock
argument_list|)
condition|)
name|io
operator|.
name|getSession
argument_list|()
operator|.
name|lockOffering
argument_list|(
name|io
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|clear
argument_list|()
expr_stmt|;
name|String
name|className
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.external.instr_offr.offered_action.class"
argument_list|)
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
operator|&&
name|className
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ExternalInstructionalOfferingOfferedAction
name|offeredAction
init|=
operator|(
name|ExternalInstructionalOfferingOfferedAction
operator|)
operator|(
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|newInstance
argument_list|()
operator|)
decl_stmt|;
name|offeredAction
operator|.
name|performExternalInstructionalOfferingOfferedAction
argument_list|(
name|io
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
comment|// Update Form
name|frm
operator|.
name|setNotOffered
argument_list|(
name|io
operator|.
name|isNotOffered
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|e
operator|)
throw|;
block|}
block|}
block|}
end_class

end_unit

