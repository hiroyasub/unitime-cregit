begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.1 (University Timetabling Application)  * Copyright (C) 2008, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|util
operator|.
name|MessageResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|Web
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|InstructionalOfferingDetailForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalInstrOffrConfigChangeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalInstructionalOfferingDeleteAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalInstructionalOfferingNotOfferedAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalInstructionalOfferingOfferedAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalLinkLookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOfferingReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Reservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|CourseOfferingComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstructionalOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|BackTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|DistributionPrefsTableBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|ReservationsTableBuilder
import|;
end_import

begin_comment
comment|/**   * MyEclipse Struts  * Creation date: 03-20-2006  *   * XDoclet definition:  * @struts:action path="/instructionalOfferingConfigDetail" name="instructionalOfferingConfigDetailForm" input="/user/instructionalOfferingConfigDetail.jsp" scope="request"  */
end_comment

begin_class
specifier|public
class|class
name|InstructionalOfferingDetailAction
extends|extends
name|Action
block|{
comment|// --------------------------------------------------------- Instance Variables
comment|// --------------------------------------------------------- Methods
comment|/**       * Method execute      * @param mapping      * @param form      * @param request      * @param response      * @return ActionForward      */
specifier|public
name|ActionForward
name|execute
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|Web
operator|.
name|isLoggedIn
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Access Denied."
argument_list|)
throw|;
block|}
name|HttpSession
name|httpSession
init|=
name|request
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|MessageResources
name|rsc
init|=
name|getResources
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|ActionMessages
name|errors
init|=
operator|new
name|ActionMessages
argument_list|()
decl_stmt|;
name|InstructionalOfferingDetailForm
name|frm
init|=
operator|(
name|InstructionalOfferingDetailForm
operator|)
name|form
decl_stmt|;
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|httpSession
argument_list|)
decl_stmt|;
comment|// Read Parameters
name|String
name|op
init|=
operator|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"op"
argument_list|)
operator|==
literal|null
operator|)
condition|?
operator|(
name|frm
operator|.
name|getOp
argument_list|()
operator|==
literal|null
operator|||
name|frm
operator|.
name|getOp
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
condition|?
operator|(
name|request
operator|.
name|getAttribute
argument_list|(
literal|"op"
argument_list|)
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|request
operator|.
name|getAttribute
argument_list|(
literal|"op"
argument_list|)
operator|.
name|toString
argument_list|()
else|:
name|frm
operator|.
name|getOp
argument_list|()
else|:
name|request
operator|.
name|getParameter
argument_list|(
literal|"op"
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|==
literal|null
condition|)
name|op
operator|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"hdnOp"
argument_list|)
expr_stmt|;
comment|// Check operation
if|if
condition|(
name|op
operator|==
literal|null
operator|||
name|op
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Operation could not be interpreted: "
operator|+
name|op
argument_list|)
throw|;
if|if
condition|(
literal|"n"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"confirm"
argument_list|)
argument_list|)
condition|)
name|op
operator|=
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"op.view"
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Op: "
operator|+
name|op
argument_list|)
expr_stmt|;
comment|// Delete insructional offering
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.deleteIo"
argument_list|)
argument_list|)
operator|&&
name|request
operator|.
name|getAttribute
argument_list|(
literal|"cfgDelete"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|doDelete
argument_list|(
name|request
argument_list|,
name|frm
argument_list|)
expr_stmt|;
if|if
condition|(
name|httpSession
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|CRS_NBR_ATTR_NAME
argument_list|)
operator|!=
literal|null
condition|)
name|httpSession
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|CRS_NBR_ATTR_NAME
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showInstructionalOfferings"
argument_list|)
return|;
block|}
comment|// Display detail - default
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"op.view"
argument_list|)
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.createClasses"
argument_list|)
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.updateConfig"
argument_list|)
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.saveConfig"
argument_list|)
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.deleteConfig"
argument_list|)
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.unassignAll"
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|instrOfferingId
init|=
operator|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"io"
argument_list|)
operator|==
literal|null
operator|)
condition|?
operator|(
name|request
operator|.
name|getAttribute
argument_list|(
literal|"io"
argument_list|)
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|request
operator|.
name|getAttribute
argument_list|(
literal|"io"
argument_list|)
operator|.
name|toString
argument_list|()
else|:
name|request
operator|.
name|getParameter
argument_list|(
literal|"io"
argument_list|)
decl_stmt|;
if|if
condition|(
name|instrOfferingId
operator|==
literal|null
operator|&&
name|frm
operator|.
name|getInstrOfferingId
argument_list|()
operator|!=
literal|null
condition|)
name|instrOfferingId
operator|=
name|frm
operator|.
name|getInstrOfferingId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|instrOfferingId
operator|==
literal|null
operator|||
name|instrOfferingId
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Instructional Offering data was not correct: "
operator|+
name|instrOfferingId
argument_list|)
throw|;
else|else
block|{
name|doLoad
argument_list|(
name|request
argument_list|,
name|frm
argument_list|,
name|instrOfferingId
argument_list|)
expr_stmt|;
block|}
name|BackTracker
operator|.
name|markForBack
argument_list|(
name|request
argument_list|,
literal|"instructionalOfferingDetail.do?io="
operator|+
name|frm
operator|.
name|getInstrOfferingId
argument_list|()
argument_list|,
literal|"Instructional Offering ("
operator|+
name|frm
operator|.
name|getInstrOfferingNameNoTitle
argument_list|()
operator|+
literal|")"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showConfigDetail"
argument_list|)
return|;
block|}
comment|// Add Configuration
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.addConfig"
argument_list|)
argument_list|)
condition|)
block|{
comment|// Redirect to config edit
name|InstructionalOfferingDAO
name|idao
init|=
operator|new
name|InstructionalOfferingDAO
argument_list|()
decl_stmt|;
name|InstructionalOffering
name|io
init|=
name|idao
operator|.
name|get
argument_list|(
name|frm
operator|.
name|getInstrOfferingId
argument_list|()
argument_list|)
decl_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"uid"
argument_list|,
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"modifyConfig"
argument_list|)
return|;
block|}
comment|// Make Offering 'Offered'
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.makeOffered"
argument_list|)
argument_list|)
condition|)
block|{
name|doMakeOffered
argument_list|(
name|request
argument_list|,
name|frm
argument_list|)
expr_stmt|;
comment|// Redirect to config edit
name|InstructionalOfferingDAO
name|idao
init|=
operator|new
name|InstructionalOfferingDAO
argument_list|()
decl_stmt|;
name|InstructionalOffering
name|io
init|=
name|idao
operator|.
name|get
argument_list|(
name|frm
operator|.
name|getInstrOfferingId
argument_list|()
argument_list|)
decl_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"uid"
argument_list|,
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"modifyConfig"
argument_list|)
return|;
block|}
comment|// Make Offering 'Not Offered'
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.makeNotOffered"
argument_list|)
argument_list|)
condition|)
block|{
name|doMakeNotOffered
argument_list|(
name|request
argument_list|,
name|frm
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showInstructionalOfferings"
argument_list|)
return|;
block|}
comment|// Change controlling course, add other offerings
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.crossLists"
argument_list|)
argument_list|)
condition|)
block|{
name|InstructionalOfferingDAO
name|idao
init|=
operator|new
name|InstructionalOfferingDAO
argument_list|()
decl_stmt|;
name|InstructionalOffering
name|io
init|=
name|idao
operator|.
name|get
argument_list|(
name|frm
operator|.
name|getInstrOfferingId
argument_list|()
argument_list|)
decl_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"uid"
argument_list|,
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"modifyCrossLists"
argument_list|)
return|;
block|}
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.nextInstructionalOffering"
argument_list|)
argument_list|)
condition|)
block|{
name|response
operator|.
name|sendRedirect
argument_list|(
name|response
operator|.
name|encodeURL
argument_list|(
literal|"instructionalOfferingDetail.do?io="
operator|+
name|frm
operator|.
name|getNextId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.previousInstructionalOffering"
argument_list|)
argument_list|)
condition|)
block|{
name|response
operator|.
name|sendRedirect
argument_list|(
name|response
operator|.
name|encodeURL
argument_list|(
literal|"instructionalOfferingDetail.do?io="
operator|+
name|frm
operator|.
name|getPreviousId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|BackTracker
operator|.
name|markForBack
argument_list|(
name|request
argument_list|,
literal|"instructionalOfferingDetail.do?io="
operator|+
name|frm
operator|.
name|getInstrOfferingId
argument_list|()
argument_list|,
literal|"Instructional Offering ("
operator|+
name|frm
operator|.
name|getInstrOfferingName
argument_list|()
operator|+
literal|")"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Add Reservation
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.addReservation"
argument_list|)
argument_list|)
condition|)
block|{
comment|//TODO Reservations Bypass - to be removed later
name|InstructionalOfferingDAO
name|idao
init|=
operator|new
name|InstructionalOfferingDAO
argument_list|()
decl_stmt|;
name|InstructionalOffering
name|io
init|=
name|idao
operator|.
name|get
argument_list|(
name|frm
operator|.
name|getInstrOfferingId
argument_list|()
argument_list|)
decl_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"ownerId"
argument_list|,
name|frm
operator|.
name|getInstrOfferingId
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"ownerName"
argument_list|,
name|io
operator|.
name|getCourseNameWithTitle
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"ownerType"
argument_list|,
name|Constants
operator|.
name|RESV_OWNER_IO
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"ownerTypeLabel"
argument_list|,
name|Constants
operator|.
name|RESV_OWNER_IO_LBL
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"displayCourseReservation"
argument_list|)
return|;
comment|// End Bypass
comment|//TODO Reservations - functionality to be made visible later
comment|/* 		    request.setAttribute("ownerId", frm.getInstrOfferingId().toString()); 		    request.setAttribute("ownerClassId", Constants.RESV_OWNER_IO); 		    return mapping.findForward("addReservation"); 		    */
block|}
comment|// Go back to instructional offerings
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showInstructionalOfferings"
argument_list|)
return|;
block|}
comment|/**      * Delete Instructional Offering 	 * @param request 	 * @param frm 	 */
specifier|private
name|void
name|doDelete
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|InstructionalOfferingDetailForm
name|frm
parameter_list|)
throws|throws
name|Exception
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
literal|null
decl_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|InstructionalOfferingDAO
name|idao
init|=
operator|new
name|InstructionalOfferingDAO
argument_list|()
decl_stmt|;
name|InstructionalOffering
name|io
init|=
name|idao
operator|.
name|get
argument_list|(
name|frm
operator|.
name|getInstrOfferingId
argument_list|()
argument_list|)
decl_stmt|;
name|hibSession
operator|=
name|idao
operator|.
name|getSession
argument_list|()
expr_stmt|;
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|io
operator|.
name|deleteAllDistributionPreferences
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
name|io
operator|.
name|deleteAllReservations
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
name|Event
operator|.
name|deleteFromEvents
argument_list|(
name|hibSession
argument_list|,
name|io
argument_list|)
expr_stmt|;
name|Exam
operator|.
name|deleteFromExams
argument_list|(
name|hibSession
argument_list|,
name|io
argument_list|)
expr_stmt|;
name|String
name|className
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.external.instr_offr.delete_action.class"
argument_list|)
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
operator|&&
name|className
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ExternalInstructionalOfferingDeleteAction
name|deleteAction
init|=
operator|(
name|ExternalInstructionalOfferingDeleteAction
operator|)
operator|(
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|newInstance
argument_list|()
operator|)
decl_stmt|;
name|deleteAction
operator|.
name|performExternalInstructionalOfferingDeleteAction
argument_list|(
name|io
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|delete
argument_list|(
name|io
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|e
operator|)
throw|;
block|}
block|}
comment|/**      * Loads the form initially      * @param request      * @param frm      * @param instrOfferingIdStr      */
specifier|private
name|void
name|doLoad
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|InstructionalOfferingDetailForm
name|frm
parameter_list|,
name|String
name|instrOfferingIdStr
parameter_list|)
throws|throws
name|Exception
block|{
name|HttpSession
name|httpSession
init|=
name|request
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|httpSession
argument_list|)
decl_stmt|;
comment|// Load Instr Offering
name|Long
name|instrOfferingId
init|=
operator|new
name|Long
argument_list|(
name|instrOfferingIdStr
argument_list|)
decl_stmt|;
name|InstructionalOfferingDAO
name|idao
init|=
operator|new
name|InstructionalOfferingDAO
argument_list|()
decl_stmt|;
name|InstructionalOffering
name|io
init|=
name|idao
operator|.
name|get
argument_list|(
name|instrOfferingId
argument_list|)
decl_stmt|;
name|Long
name|subjectAreaId
init|=
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
decl_stmt|;
comment|// Set Session Variables
name|httpSession
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|SUBJ_AREA_ID_ATTR_NAME
argument_list|,
name|subjectAreaId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|httpSession
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|CRS_NBR_ATTR_NAME
argument_list|)
operator|!=
literal|null
operator|&&
name|httpSession
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|CRS_NBR_ATTR_NAME
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|httpSession
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|CRS_NBR_ATTR_NAME
argument_list|,
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
comment|// Get Configuration
name|TreeSet
name|ts
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
name|ts
operator|.
name|add
argument_list|(
name|io
argument_list|)
expr_stmt|;
comment|// Sort Offerings
name|ArrayList
name|offerings
init|=
operator|new
name|ArrayList
argument_list|(
name|io
operator|.
name|getCourseOfferings
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|offerings
argument_list|,
operator|new
name|CourseOfferingComparator
argument_list|(
name|CourseOfferingComparator
operator|.
name|COMPARE_BY_CTRL_CRS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Load Form
name|frm
operator|.
name|setInstrOfferingId
argument_list|(
name|instrOfferingId
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setSubjectAreaId
argument_list|(
name|subjectAreaId
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setInstrOfferingName
argument_list|(
name|io
operator|.
name|getCourseNameWithTitle
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setSubjectAreaAbbr
argument_list|(
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setCourseNbr
argument_list|(
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setInstrOfferingNameNoTitle
argument_list|(
name|io
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setCtrlCrsOfferingId
argument_list|(
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setDemand
argument_list|(
name|io
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setEnrollment
argument_list|(
name|io
operator|.
name|getEnrollment
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setProjectedDemand
argument_list|(
name|io
operator|.
name|getProjectedDemand
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setLimit
argument_list|(
name|io
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setUnlimited
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setDesignatorRequired
argument_list|(
name|io
operator|.
name|isDesignatorRequired
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setCreditText
argument_list|(
operator|(
name|io
operator|.
name|getCredit
argument_list|()
operator|!=
literal|null
operator|)
condition|?
name|io
operator|.
name|getCredit
argument_list|()
operator|.
name|creditText
argument_list|()
else|:
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|io
operator|.
name|getConsentType
argument_list|()
operator|==
literal|null
condition|)
name|frm
operator|.
name|setConsentType
argument_list|(
literal|"None Required"
argument_list|)
expr_stmt|;
else|else
name|frm
operator|.
name|setConsentType
argument_list|(
name|io
operator|.
name|getConsentType
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
if|if
condition|(
operator|(
operator|(
name|InstrOfferingConfig
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|isUnlimitedEnrollment
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|frm
operator|.
name|setUnlimited
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
break|break;
block|}
name|frm
operator|.
name|setNotOffered
argument_list|(
name|io
operator|.
name|isNotOffered
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setCourseOfferings
argument_list|(
name|offerings
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setIsEditable
argument_list|(
operator|new
name|Boolean
argument_list|(
name|io
operator|.
name|isEditableBy
argument_list|(
name|user
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setIsFullyEditable
argument_list|(
operator|new
name|Boolean
argument_list|(
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|isFullyEditableBy
argument_list|(
name|user
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setIsManager
argument_list|(
operator|new
name|Boolean
argument_list|(
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|isEditableBy
argument_list|(
name|user
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check limits on courses if cross-listed
if|if
condition|(
name|io
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|&&
operator|!
name|frm
operator|.
name|getUnlimited
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|Set
name|resvs
init|=
name|io
operator|.
name|getCourseReservations
argument_list|()
decl_stmt|;
name|int
name|lim
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|resvs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOfferingReservation
name|cor
init|=
operator|(
name|CourseOfferingReservation
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|lim
operator|+=
name|cor
operator|.
name|getReserved
argument_list|()
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|io
operator|.
name|getLimit
argument_list|()
operator|!=
literal|null
operator|&&
name|lim
operator|!=
name|io
operator|.
name|getLimit
argument_list|()
operator|.
name|intValue
argument_list|()
condition|)
block|{
name|request
operator|.
name|setAttribute
argument_list|(
literal|"limitsDoNotMatch"
argument_list|,
literal|""
operator|+
name|lim
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Catalog Link
name|String
name|linkLookupClass
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.catalogLink.lookup.class"
argument_list|)
decl_stmt|;
if|if
condition|(
name|linkLookupClass
operator|!=
literal|null
operator|&&
name|linkLookupClass
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ExternalLinkLookup
name|lookup
init|=
operator|(
name|ExternalLinkLookup
operator|)
operator|(
name|Class
operator|.
name|forName
argument_list|(
name|linkLookupClass
argument_list|)
operator|.
name|newInstance
argument_list|()
operator|)
decl_stmt|;
name|Map
name|results
init|=
name|lookup
operator|.
name|getLink
argument_list|(
name|io
argument_list|)
decl_stmt|;
if|if
condition|(
name|results
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
name|lookup
operator|.
name|getErrorMessage
argument_list|()
argument_list|)
throw|;
name|frm
operator|.
name|setCatalogLinkLabel
argument_list|(
operator|(
name|String
operator|)
name|results
operator|.
name|get
argument_list|(
name|ExternalLinkLookup
operator|.
name|LINK_LABEL
argument_list|)
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setCatalogLinkLocation
argument_list|(
operator|(
name|String
operator|)
name|results
operator|.
name|get
argument_list|(
name|ExternalLinkLookup
operator|.
name|LINK_LOCATION
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|InstructionalOffering
name|next
init|=
name|io
operator|.
name|getNextInstructionalOffering
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|frm
operator|.
name|setNextId
argument_list|(
name|next
operator|==
literal|null
condition|?
literal|null
else|:
name|next
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|InstructionalOffering
name|previous
init|=
name|io
operator|.
name|getPreviousInstructionalOffering
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|frm
operator|.
name|setPreviousId
argument_list|(
name|previous
operator|==
literal|null
condition|?
literal|null
else|:
name|previous
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|DistributionPrefsTableBuilder
name|tbl
init|=
operator|new
name|DistributionPrefsTableBuilder
argument_list|()
decl_stmt|;
name|String
name|html
init|=
name|tbl
operator|.
name|getDistPrefsTableForInstructionalOffering
argument_list|(
name|request
argument_list|,
name|io
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|html
operator|!=
literal|null
operator|&&
name|html
operator|.
name|indexOf
argument_list|(
literal|"No preferences found"
argument_list|)
operator|<
literal|0
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
name|DistributionPref
operator|.
name|DIST_PREF_REQUEST_ATTR
argument_list|,
name|html
argument_list|)
expr_stmt|;
name|ReservationsTableBuilder
name|resvTbl
init|=
operator|new
name|ReservationsTableBuilder
argument_list|()
decl_stmt|;
name|String
name|resvHtml
init|=
name|resvTbl
operator|.
name|htmlTableForInstructionalOffering
argument_list|(
name|user
argument_list|,
name|io
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|resvHtml
operator|!=
literal|null
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
name|Reservation
operator|.
name|RESV_REQUEST_ATTR
argument_list|,
name|resvHtml
argument_list|)
expr_stmt|;
block|}
comment|/**      * Make an offering 'Not Offered'      * @param request      * @param frm      */
specifier|private
name|void
name|doMakeNotOffered
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|InstructionalOfferingDetailForm
name|frm
parameter_list|)
throws|throws
name|Exception
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
literal|null
decl_stmt|;
try|try
block|{
name|InstructionalOfferingDAO
name|idao
init|=
operator|new
name|InstructionalOfferingDAO
argument_list|()
decl_stmt|;
name|hibSession
operator|=
name|idao
operator|.
name|getSession
argument_list|()
expr_stmt|;
name|InstructionalOffering
name|io
init|=
name|idao
operator|.
name|get
argument_list|(
name|frm
operator|.
name|getInstrOfferingId
argument_list|()
argument_list|)
decl_stmt|;
name|io
operator|.
name|deleteAllDistributionPreferences
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
comment|// Delete all classes only - config stays
name|io
operator|.
name|deleteAllClasses
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|io
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOffering
name|co
init|=
operator|(
name|CourseOffering
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Event
operator|.
name|deleteFromEvents
argument_list|(
name|hibSession
argument_list|,
name|co
argument_list|)
expr_stmt|;
name|Exam
operator|.
name|deleteFromExams
argument_list|(
name|hibSession
argument_list|,
name|co
argument_list|)
expr_stmt|;
block|}
name|Event
operator|.
name|deleteFromEvents
argument_list|(
name|hibSession
argument_list|,
name|io
argument_list|)
expr_stmt|;
name|Exam
operator|.
name|deleteFromExams
argument_list|(
name|hibSession
argument_list|,
name|io
argument_list|)
expr_stmt|;
comment|// Set flag to not offered
name|io
operator|.
name|setNotOffered
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|idao
operator|.
name|saveOrUpdate
argument_list|(
name|io
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|request
argument_list|,
name|io
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|MAKE_NOT_OFFERED
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|UPDATE
argument_list|,
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|clear
argument_list|()
expr_stmt|;
name|String
name|className
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.external.instr_offr.not_offered_action.class"
argument_list|)
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
operator|&&
name|className
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ExternalInstructionalOfferingNotOfferedAction
name|notOfferedAction
init|=
operator|(
name|ExternalInstructionalOfferingNotOfferedAction
operator|)
operator|(
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|newInstance
argument_list|()
operator|)
decl_stmt|;
name|notOfferedAction
operator|.
name|performExternalInstructionalOfferingNotOfferedAction
argument_list|(
name|io
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
comment|// Update Form
name|frm
operator|.
name|setNotOffered
argument_list|(
name|io
operator|.
name|isNotOffered
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|e
operator|)
throw|;
block|}
block|}
comment|/**      * Make an offering 'Not Offered'      * @param request      * @param frm      */
specifier|private
name|void
name|doMakeOffered
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|InstructionalOfferingDetailForm
name|frm
parameter_list|)
throws|throws
name|Exception
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
literal|null
decl_stmt|;
try|try
block|{
name|InstructionalOfferingDAO
name|idao
init|=
operator|new
name|InstructionalOfferingDAO
argument_list|()
decl_stmt|;
name|hibSession
operator|=
name|idao
operator|.
name|getSession
argument_list|()
expr_stmt|;
name|InstructionalOffering
name|io
init|=
name|idao
operator|.
name|get
argument_list|(
name|frm
operator|.
name|getInstrOfferingId
argument_list|()
argument_list|)
decl_stmt|;
comment|// Set flag to offered
name|io
operator|.
name|setNotOffered
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|idao
operator|.
name|saveOrUpdate
argument_list|(
name|io
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|request
argument_list|,
name|io
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|MAKE_OFFERED
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|UPDATE
argument_list|,
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|clear
argument_list|()
expr_stmt|;
name|String
name|className
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.external.instr_offr.offered_action.class"
argument_list|)
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
operator|&&
name|className
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ExternalInstructionalOfferingOfferedAction
name|offeredAction
init|=
operator|(
name|ExternalInstructionalOfferingOfferedAction
operator|)
operator|(
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|newInstance
argument_list|()
operator|)
decl_stmt|;
name|offeredAction
operator|.
name|performExternalInstructionalOfferingOfferedAction
argument_list|(
name|io
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
comment|// Update Form
name|frm
operator|.
name|setNotOffered
argument_list|(
name|io
operator|.
name|isNotOffered
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|e
operator|)
throw|;
block|}
block|}
block|}
end_class

end_unit

