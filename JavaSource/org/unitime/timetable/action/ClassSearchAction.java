begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Placement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|RoomLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|HibernateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|LocalizedLookupDispatchAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|messages
operator|.
name|CourseMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|messages
operator|.
name|Messages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|SessionAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|ClassListForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|ClassListFormInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ItypeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentClassEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|ClassCourseComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstructionalOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SubjectAreaDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ClassAssignmentProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|WebSolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|ExportUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|BackTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|pdf
operator|.
name|PdfClassListTableBuilder
import|;
end_import

begin_comment
comment|/**  * @author Stephanie Schluttenhofer, Tomas Muller, Zuzana Mullerova  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"/classSearch"
argument_list|)
specifier|public
class|class
name|ClassSearchAction
extends|extends
name|LocalizedLookupDispatchAction
block|{
specifier|protected
specifier|final
specifier|static
name|CourseMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|CourseMessages
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Autowired
name|SessionContext
name|sessionContext
decl_stmt|;
comment|/**  	 * Method execute 	 * @param mapping 	 * @param form 	 * @param request 	 * @param response 	 * @return ActionForward 	 * @throws HibernateException 	 */
specifier|public
name|ActionForward
name|searchClasses
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|performAction
argument_list|(
name|mapping
argument_list|,
name|form
argument_list|,
name|request
argument_list|,
name|response
argument_list|,
literal|"searchClasses"
argument_list|)
return|;
block|}
specifier|public
name|ActionForward
name|exportPdf
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|performAction
argument_list|(
name|mapping
argument_list|,
name|form
argument_list|,
name|request
argument_list|,
name|response
argument_list|,
literal|"exportPdf"
argument_list|)
return|;
block|}
specifier|public
name|ActionForward
name|performAction
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|String
name|action
parameter_list|)
throws|throws
name|Exception
block|{
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|Classes
argument_list|)
expr_stmt|;
name|ClassListForm
name|classListForm
init|=
operator|(
name|ClassListForm
operator|)
name|form
decl_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|Department
operator|.
name|EXTERNAL_DEPT_ATTR_NAME
argument_list|,
name|Department
operator|.
name|findAllExternal
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"1"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"loadFilter"
argument_list|)
argument_list|)
condition|)
block|{
name|setupGeneralFormFilters
argument_list|(
name|sessionContext
argument_list|,
name|classListForm
argument_list|)
expr_stmt|;
name|setupClassListSpecificFormFilters
argument_list|(
name|sessionContext
argument_list|,
name|classListForm
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"ClassList.divSec"
argument_list|,
name|classListForm
operator|.
name|getDivSec
argument_list|()
condition|?
literal|"1"
else|:
literal|"0"
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"ClassList.demand"
argument_list|,
name|classListForm
operator|.
name|getDemand
argument_list|()
condition|?
literal|"1"
else|:
literal|"0"
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"ClassList.demandIsVisible"
argument_list|,
name|classListForm
operator|.
name|getDemandIsVisible
argument_list|()
condition|?
literal|"1"
else|:
literal|"0"
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"ClassList.limit"
argument_list|,
name|classListForm
operator|.
name|getLimit
argument_list|()
condition|?
literal|"1"
else|:
literal|"0"
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"ClassList.roomLimit"
argument_list|,
name|classListForm
operator|.
name|getRoomLimit
argument_list|()
condition|?
literal|"1"
else|:
literal|"0"
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"ClassList.manager"
argument_list|,
name|classListForm
operator|.
name|getManager
argument_list|()
condition|?
literal|"1"
else|:
literal|"0"
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"ClassList.datePattern"
argument_list|,
name|classListForm
operator|.
name|getDatePattern
argument_list|()
condition|?
literal|"1"
else|:
literal|"0"
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"ClassList.timePattern"
argument_list|,
name|classListForm
operator|.
name|getTimePattern
argument_list|()
condition|?
literal|"1"
else|:
literal|"0"
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"ClassList.instructor"
argument_list|,
name|classListForm
operator|.
name|getInstructor
argument_list|()
condition|?
literal|"1"
else|:
literal|"0"
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"ClassList.preferences"
argument_list|,
name|classListForm
operator|.
name|getPreferences
argument_list|()
condition|?
literal|"1"
else|:
literal|"0"
argument_list|)
expr_stmt|;
if|if
condition|(
name|classListForm
operator|.
name|getTimetable
argument_list|()
operator|!=
literal|null
condition|)
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"ClassList.timetable"
argument_list|,
name|classListForm
operator|.
name|getTimetable
argument_list|()
condition|?
literal|"1"
else|:
literal|"0"
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"ClassList.schedulePrintNote"
argument_list|,
name|classListForm
operator|.
name|getSchedulePrintNote
argument_list|()
condition|?
literal|"1"
else|:
literal|"0"
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"ClassList.note"
argument_list|,
name|classListForm
operator|.
name|getNote
argument_list|()
condition|?
literal|"1"
else|:
literal|"0"
argument_list|)
expr_stmt|;
if|if
condition|(
name|classListForm
operator|.
name|getExams
argument_list|()
operator|!=
literal|null
condition|)
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"ClassList.exams"
argument_list|,
name|classListForm
operator|.
name|getExams
argument_list|()
condition|?
literal|"1"
else|:
literal|"0"
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"ClassList.sortBy"
argument_list|,
name|classListForm
operator|.
name|getSortBy
argument_list|()
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"ClassList.filterAssignedRoom"
argument_list|,
name|classListForm
operator|.
name|getFilterAssignedRoom
argument_list|()
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"ClassList.filterInstructor"
argument_list|,
name|classListForm
operator|.
name|getFilterInstructor
argument_list|()
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"ClassList.filterManager"
argument_list|,
name|classListForm
operator|.
name|getFilterManager
argument_list|()
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"ClassList.filterIType"
argument_list|,
name|classListForm
operator|.
name|getFilterIType
argument_list|()
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"ClassList.filterDayCode"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|classListForm
operator|.
name|getFilterDayCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"ClassList.filterStartSlot"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|classListForm
operator|.
name|getFilterStartSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"ClassList.filterLength"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|classListForm
operator|.
name|getFilterLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"ClassList.sortByKeepSubparts"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|classListForm
operator|.
name|getSortByKeepSubparts
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"ClassList.showCrossListedClasses"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|classListForm
operator|.
name|getShowCrossListedClasses
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|Examinations
argument_list|)
condition|)
name|classListForm
operator|.
name|setExams
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|classListForm
operator|.
name|setSubjectAreas
argument_list|(
name|SubjectArea
operator|.
name|getUserSubjectAreas
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|classListForm
operator|.
name|setClasses
argument_list|(
name|getClasses
argument_list|(
name|classListForm
argument_list|,
name|WebSolver
operator|.
name|getClassAssignmentProxy
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Collection
name|classes
init|=
name|classListForm
operator|.
name|getClasses
argument_list|()
decl_stmt|;
if|if
condition|(
name|classes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ActionMessages
name|errors
init|=
operator|new
name|ActionMessages
argument_list|()
decl_stmt|;
name|errors
operator|.
name|add
argument_list|(
literal|"searchResult"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
name|MSG
operator|.
name|errorNoRecords
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showClassSearch"
argument_list|)
return|;
block|}
else|else
block|{
name|StringBuffer
name|ids
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|StringBuffer
name|names
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|StringBuffer
name|subjIds
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|classListForm
operator|.
name|getSubjectAreaIds
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|names
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|subjIds
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|ids
operator|.
name|append
argument_list|(
literal|"&subjectAreaIds="
operator|+
name|classListForm
operator|.
name|getSubjectAreaIds
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|subjIds
operator|.
name|append
argument_list|(
name|classListForm
operator|.
name|getSubjectAreaIds
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|names
operator|.
name|append
argument_list|(
operator|(
operator|(
operator|new
name|SubjectAreaDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|classListForm
operator|.
name|getSubjectAreaIds
argument_list|()
index|[
name|i
index|]
argument_list|)
argument_list|)
operator|)
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sessionContext
operator|.
name|setAttribute
argument_list|(
name|SessionAttribute
operator|.
name|ClassesSubjectAreas
argument_list|,
name|subjIds
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|setAttribute
argument_list|(
name|SessionAttribute
operator|.
name|ClassesCourseNumber
argument_list|,
name|classListForm
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"exportPdf"
operator|.
name|equals
argument_list|(
name|action
argument_list|)
condition|)
block|{
name|OutputStream
name|out
init|=
name|ExportUtils
operator|.
name|getPdfOutputStream
argument_list|(
name|response
argument_list|,
literal|"classes"
argument_list|)
decl_stmt|;
operator|new
name|PdfClassListTableBuilder
argument_list|()
operator|.
name|pdfTableForClasses
argument_list|(
name|out
argument_list|,
name|WebSolver
operator|.
name|getClassAssignmentProxy
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
argument_list|,
name|WebSolver
operator|.
name|getExamSolver
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
argument_list|,
name|classListForm
argument_list|,
name|sessionContext
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
name|BackTracker
operator|.
name|markForBack
argument_list|(
name|request
argument_list|,
literal|"classSearch.do?doit=Search&loadFilter=1"
operator|+
name|ids
operator|+
literal|"&courseNbr="
operator|+
name|classListForm
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|MSG
operator|.
name|backClasses
argument_list|(
name|names
operator|+
operator|(
name|classListForm
operator|.
name|getCourseNbr
argument_list|()
operator|==
literal|null
operator|||
name|classListForm
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|""
else|:
literal|" "
operator|+
name|classListForm
operator|.
name|getCourseNbr
argument_list|()
operator|)
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showClassList"
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|void
name|setupGeneralFormFilters
parameter_list|(
name|SessionContext
name|sessionContext
parameter_list|,
name|ClassListFormInterface
name|form
parameter_list|)
block|{
name|form
operator|.
name|setSortBy
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"ClassList.sortBy"
argument_list|,
name|ClassCourseComparator
operator|.
name|getName
argument_list|(
name|ClassCourseComparator
operator|.
name|SortBy
operator|.
name|NAME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setFilterAssignedRoom
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"ClassList.filterAssignedRoom"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setFilterManager
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"ClassList.filterManager"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setFilterIType
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"ClassList.filterIType"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setFilterDayCode
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"ClassList.filterDayCode"
argument_list|,
literal|"-1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setFilterStartSlot
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"ClassList.filterStartSlot"
argument_list|,
literal|"-1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setFilterLength
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"ClassList.filterLength"
argument_list|,
literal|"-1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setSortByKeepSubparts
argument_list|(
literal|"1"
operator|.
name|equals
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"ClassList.sortByKeepSubparts"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setShowCrossListedClasses
argument_list|(
literal|"1"
operator|.
name|equals
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"ClassList.showCrossListedClasses"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|setupClassListSpecificFormFilters
parameter_list|(
name|SessionContext
name|sessionContext
parameter_list|,
name|ClassListForm
name|form
parameter_list|)
block|{
name|form
operator|.
name|setDivSec
argument_list|(
literal|"1"
operator|.
name|equals
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"ClassList.divSec"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setLimit
argument_list|(
literal|"1"
operator|.
name|equals
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"ClassList.limit"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setRoomLimit
argument_list|(
literal|"1"
operator|.
name|equals
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"ClassList.roomLimit"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setManager
argument_list|(
literal|"1"
operator|.
name|equals
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"ClassList.manager"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setDatePattern
argument_list|(
literal|"1"
operator|.
name|equals
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"ClassList.datePattern"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setTimePattern
argument_list|(
literal|"1"
operator|.
name|equals
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"ClassList.timePattern"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setInstructor
argument_list|(
literal|"1"
operator|.
name|equals
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"ClassList.instructor"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setPreferences
argument_list|(
literal|"1"
operator|.
name|equals
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"ClassList.preferences"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setTimetable
argument_list|(
literal|"1"
operator|.
name|equals
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"ClassList.timetable"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setFilterInstructor
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"ClassList.filterInstructor"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setSchedulePrintNote
argument_list|(
literal|"1"
operator|.
name|equals
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"ClassList.schedulePrintNote"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setNote
argument_list|(
literal|"1"
operator|.
name|equals
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"ClassList.note"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setExams
argument_list|(
literal|"1"
operator|.
name|equals
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"ClassList.exams"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|StudentClassEnrollment
operator|.
name|sessionHasEnrollments
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
condition|)
block|{
name|form
operator|.
name|setDemandIsVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|form
operator|.
name|setDemand
argument_list|(
literal|"1"
operator|.
name|equals
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"ClassList.demand"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|form
operator|.
name|setDemandIsVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|form
operator|.
name|setDemand
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|Set
name|getClasses
parameter_list|(
name|ClassListFormInterface
name|form
parameter_list|,
name|ClassAssignmentProxy
name|classAssignmentProxy
parameter_list|)
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
operator|(
operator|new
name|InstructionalOfferingDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|boolean
name|doFilterManager
init|=
name|form
operator|.
name|getFilterManager
argument_list|()
operator|!=
literal|null
operator|&&
name|form
operator|.
name|getFilterManager
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
decl_stmt|;
name|Long
name|filterManager
init|=
operator|(
name|doFilterManager
condition|?
name|Long
operator|.
name|valueOf
argument_list|(
name|form
operator|.
name|getFilterManager
argument_list|()
argument_list|)
else|:
literal|null
operator|)
decl_stmt|;
name|boolean
name|fetchStructure
init|=
literal|true
decl_stmt|;
name|boolean
name|fetchCredits
init|=
literal|false
decl_stmt|;
comment|//form.getCredit().booleanValue();
name|boolean
name|fetchInstructors
init|=
literal|false
decl_stmt|;
comment|//form.getInstructor().booleanValue();
name|boolean
name|fetchPreferences
init|=
literal|false
decl_stmt|;
comment|//form.getPreferences().booleanValue() || form.getTimePattern().booleanValue();
name|boolean
name|fetchAssignments
init|=
literal|false
decl_stmt|;
comment|//(form.getTimetable()!=null&& form.getTimetable().booleanValue());
name|String
index|[]
name|subjectIds
init|=
name|form
operator|.
name|getSubjectAreaIds
argument_list|()
decl_stmt|;
if|if
condition|(
name|subjectIds
operator|!=
literal|null
operator|&&
name|subjectIds
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|StringBuffer
name|query
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"select c, co from Class_ as c "
argument_list|)
expr_stmt|;
if|if
condition|(
name|fetchStructure
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|"left join fetch c.childClasses as cc "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"left join fetch c.schedulingSubpart as ss "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"left join fetch ss.childSubparts as css "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"left join fetch ss.instrOfferingConfig as ioc "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"left join fetch ioc.instructionalOffering as io "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"left join fetch io.courseOfferings as cox "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fetchCredits
condition|)
name|query
operator|.
name|append
argument_list|(
literal|"left join fetch ss.creditConfigs as ssc "
argument_list|)
expr_stmt|;
if|if
condition|(
name|fetchPreferences
operator|||
name|fetchInstructors
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|"left join fetch c.classInstructors as ci "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"left join fetch ci.instructor as di "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fetchAssignments
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|"left join fetch c.assignments as ca "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"left join fetch ca.rooms as car "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fetchPreferences
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|"left join fetch c.preferences as cp "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"left join fetch ss.preferences as ssp "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"left join fetch di.preferences as dip "
argument_list|)
expr_stmt|;
block|}
name|query
operator|.
name|append
argument_list|(
literal|"inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings as co "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|" where co.subjectArea.uniqueId in ( "
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subjectIds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|query
operator|.
name|append
argument_list|(
name|subjectIds
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|query
operator|.
name|append
argument_list|(
literal|") "
argument_list|)
expr_stmt|;
if|if
condition|(
name|form
operator|.
name|getCourseNbr
argument_list|()
operator|!=
literal|null
operator|&&
name|form
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|courseNbr
init|=
name|form
operator|.
name|getCourseNbr
argument_list|()
decl_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|" and co.courseNbr "
argument_list|)
expr_stmt|;
if|if
condition|(
name|courseNbr
operator|.
name|indexOf
argument_list|(
literal|'*'
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|" like '"
argument_list|)
expr_stmt|;
name|courseNbr
operator|=
name|courseNbr
operator|.
name|replace
argument_list|(
literal|'*'
argument_list|,
literal|'%'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|.
name|append
argument_list|(
literal|" = '"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ApplicationProperty
operator|.
name|CourseOfferingNumberUpperCase
operator|.
name|isTrue
argument_list|()
condition|)
name|courseNbr
operator|=
name|courseNbr
operator|.
name|toUpperCase
argument_list|()
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
name|courseNbr
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"'  "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|doFilterManager
condition|)
block|{
if|if
condition|(
name|filterManager
operator|.
name|longValue
argument_list|()
operator|<
literal|0
condition|)
block|{
comment|//all departmental
name|query
operator|.
name|append
argument_list|(
literal|" and (c.managingDept is null or c.managingDept in co.subjectArea.department)"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|.
name|append
argument_list|(
literal|" and c.managingDept = "
operator|+
name|filterManager
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|form
operator|.
name|getShowCrossListedClasses
argument_list|()
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|" and co.isControl = true "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|form
operator|.
name|getIncludeCancelledClasses
argument_list|()
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|" and c.cancelled = false"
argument_list|)
expr_stmt|;
block|}
name|Query
name|q
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|q
operator|.
name|setFetchSize
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|TreeSet
name|ts
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|ClassCourseComparator
argument_list|(
name|form
operator|.
name|getSortBy
argument_list|()
argument_list|,
name|classAssignmentProxy
argument_list|,
name|form
operator|.
name|getSortByKeepSubparts
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|sTime
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|boolean
name|doFilterInstructor
init|=
name|form
operator|.
name|getFilterInstructor
argument_list|()
operator|!=
literal|null
operator|&&
name|form
operator|.
name|getFilterInstructor
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
decl_stmt|;
name|String
name|filterInstructor
init|=
operator|(
name|doFilterInstructor
condition|?
name|form
operator|.
name|getFilterInstructor
argument_list|()
operator|.
name|toUpperCase
argument_list|()
else|:
literal|null
operator|)
decl_stmt|;
name|boolean
name|doFilterAssignedRoom
init|=
name|form
operator|.
name|getFilterAssignedRoom
argument_list|()
operator|!=
literal|null
operator|&&
name|form
operator|.
name|getFilterAssignedRoom
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
decl_stmt|;
name|String
name|filterAssignedRoom
init|=
operator|(
name|doFilterAssignedRoom
condition|?
name|form
operator|.
name|getFilterAssignedRoom
argument_list|()
operator|.
name|toUpperCase
argument_list|()
else|:
literal|null
operator|)
decl_stmt|;
name|boolean
name|doFilterIType
init|=
name|form
operator|.
name|getFilterIType
argument_list|()
operator|!=
literal|null
operator|&&
name|form
operator|.
name|getFilterIType
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
decl_stmt|;
name|Integer
name|filterIType
init|=
operator|(
name|doFilterIType
condition|?
name|Integer
operator|.
name|valueOf
argument_list|(
name|form
operator|.
name|getFilterIType
argument_list|()
argument_list|)
else|:
literal|null
operator|)
decl_stmt|;
name|boolean
name|doFilterAssignedTime
init|=
operator|(
operator|(
name|form
operator|.
name|getFilterDayCode
argument_list|()
operator|>=
literal|0
operator|&&
name|form
operator|.
name|getFilterStartSlot
argument_list|()
operator|>=
literal|0
operator|&&
name|form
operator|.
name|getFilterLength
argument_list|()
operator|>=
literal|0
operator|)
operator|||
operator|(
name|form
operator|.
name|getFilterDayCode
argument_list|()
operator|>
literal|0
operator|&&
name|form
operator|.
name|getFilterStartSlot
argument_list|()
operator|<
literal|0
operator|&&
name|form
operator|.
name|getFilterLength
argument_list|()
operator|<=
literal|0
operator|)
operator|)
decl_stmt|;
name|TimeLocation
name|filterAssignedTime
init|=
operator|(
name|doFilterAssignedTime
condition|?
operator|new
name|TimeLocation
argument_list|(
operator|(
name|form
operator|.
name|getFilterDayCode
argument_list|()
operator|==
literal|0
condition|?
literal|255
else|:
name|form
operator|.
name|getFilterDayCode
argument_list|()
operator|)
argument_list|,
operator|(
name|form
operator|.
name|getFilterStartSlot
argument_list|()
operator|<
literal|0
condition|?
literal|0
else|:
name|form
operator|.
name|getFilterStartSlot
argument_list|()
operator|)
argument_list|,
operator|(
name|form
operator|.
name|getFilterStartSlot
argument_list|()
operator|<
literal|0
condition|?
name|Constants
operator|.
name|SLOTS_PER_DAY
else|:
name|Math
operator|.
name|max
argument_list|(
literal|5
argument_list|,
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|form
operator|.
name|getFilterLength
argument_list|()
operator|-
literal|1
argument_list|)
operator|/
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
else|:
literal|null
operator|)
decl_stmt|;
comment|// days, start time& length selected -> create appropriate time location
comment|// days, start time selected -> create appropriate time location with 1 slot length
comment|// start time& length selected -> create time location all days with given start time and length
comment|// only start time selected -> create time location all days with given start time and 1 slot length
comment|// only days selected -> create time location of given days all day long (all location assigned in the given days overlap)
name|Debug
operator|.
name|debug
argument_list|(
literal|" --- Filter classes ---"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|q
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|doFilterInstructor
condition|)
block|{
name|boolean
name|filterLine
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|c
operator|.
name|getClassInstructors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|ci
init|=
operator|(
name|ClassInstructor
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|StringTokenizer
name|stk
init|=
operator|new
name|StringTokenizer
argument_list|(
name|filterInstructor
argument_list|,
literal|" ,"
argument_list|)
decl_stmt|;
name|boolean
name|containsInstructor
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|stk
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|token
init|=
name|stk
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|boolean
name|containsToken
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getFirstName
argument_list|()
operator|!=
literal|null
operator|&&
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getFirstName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
operator|.
name|indexOf
argument_list|(
name|token
argument_list|)
operator|>=
literal|0
condition|)
name|containsToken
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|containsToken
operator|&&
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getMiddleName
argument_list|()
operator|!=
literal|null
operator|&&
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getMiddleName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
operator|.
name|indexOf
argument_list|(
name|token
argument_list|)
operator|>=
literal|0
condition|)
name|containsToken
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|containsToken
operator|&&
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getLastName
argument_list|()
operator|!=
literal|null
operator|&&
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getLastName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
operator|.
name|indexOf
argument_list|(
name|token
argument_list|)
operator|>=
literal|0
condition|)
name|containsToken
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|containsToken
condition|)
block|{
name|containsInstructor
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|containsInstructor
condition|)
block|{
name|filterLine
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|filterLine
condition|)
block|{
continue|continue;
block|}
block|}
if|if
condition|(
name|doFilterIType
condition|)
block|{
name|ItypeDesc
name|itype
init|=
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
decl_stmt|;
name|boolean
name|match
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|match
operator|&&
name|itype
operator|!=
literal|null
condition|)
block|{
name|match
operator|=
name|itype
operator|.
name|getItype
argument_list|()
operator|.
name|equals
argument_list|(
name|filterIType
argument_list|)
expr_stmt|;
name|itype
operator|=
name|itype
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|match
condition|)
block|{
continue|continue;
block|}
block|}
if|if
condition|(
name|doFilterAssignedTime
condition|)
block|{
try|try
block|{
name|Assignment
name|a
init|=
name|classAssignmentProxy
operator|.
name|getAssignment
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|Placement
name|p
init|=
name|a
operator|.
name|getPlacement
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|TimeLocation
name|t
init|=
name|p
operator|.
name|getTimeLocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|boolean
name|overlap
init|=
name|t
operator|.
name|shareDays
argument_list|(
name|filterAssignedTime
argument_list|)
operator|&&
name|t
operator|.
name|shareHours
argument_list|(
name|filterAssignedTime
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|overlap
condition|)
block|{
continue|continue;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
continue|continue;
block|}
block|}
if|if
condition|(
name|doFilterAssignedRoom
condition|)
block|{
try|try
block|{
name|Assignment
name|a
init|=
name|classAssignmentProxy
operator|.
name|getAssignment
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|Placement
name|p
init|=
name|a
operator|.
name|getPlacement
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
operator|||
name|p
operator|.
name|getNrRooms
argument_list|()
operator|<=
literal|0
condition|)
block|{
continue|continue;
block|}
name|boolean
name|filterLine
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|isMultiRoom
argument_list|()
condition|)
block|{
for|for
control|(
name|RoomLocation
name|r
range|:
name|p
operator|.
name|getRoomLocations
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
operator|.
name|indexOf
argument_list|(
name|filterAssignedRoom
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|filterLine
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|p
operator|.
name|getRoomLocation
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
operator|.
name|indexOf
argument_list|(
name|filterAssignedRoom
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|filterLine
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|filterLine
condition|)
block|{
continue|continue;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
continue|continue;
block|}
block|}
name|ts
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
name|long
name|eTime
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"fetch time = "
operator|+
operator|(
name|eTime
operator|-
name|sTime
operator|)
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"rows = "
operator|+
name|ts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|ts
operator|)
return|;
block|}
else|else
block|{
return|return
operator|(
operator|new
name|TreeSet
argument_list|()
operator|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|Messages
name|getMessages
parameter_list|()
block|{
return|return
name|MSG
return|;
block|}
block|}
end_class

end_unit

