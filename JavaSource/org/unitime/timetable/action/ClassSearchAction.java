begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.1 (University Timetabling Application)  * Copyright (C) 2008, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Placement
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|RoomLocation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|actions
operator|.
name|LookupDispatchAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Hibernate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|HibernateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|Web
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|ClassListForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|ClassListFormInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ItypeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Solution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|UserData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|ClassComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstructionalOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SubjectAreaDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|TimetableManagerDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ClassAssignmentProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|WebSolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|LookupTables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|BackTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|pdf
operator|.
name|PdfClassListTableBuilder
import|;
end_import

begin_comment
comment|/**  * @author Stephanie Schluttenhofer  */
end_comment

begin_class
specifier|public
class|class
name|ClassSearchAction
extends|extends
name|LookupDispatchAction
block|{
specifier|protected
name|Map
name|getKeyMethodMap
parameter_list|()
block|{
name|Map
name|map
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"button.searchClasses"
argument_list|,
literal|"searchClasses"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"button.exportPDF"
argument_list|,
literal|"exportPdf"
argument_list|)
expr_stmt|;
comment|//	      map.put("button.cancel", "searchClasses");
return|return
name|map
return|;
block|}
comment|/**  	 * Method execute 	 * @param mapping 	 * @param form 	 * @param request 	 * @param response 	 * @return ActionForward 	 * @throws HibernateException 	 */
specifier|public
name|ActionForward
name|searchClasses
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|performAction
argument_list|(
name|mapping
argument_list|,
name|form
argument_list|,
name|request
argument_list|,
name|response
argument_list|,
literal|"searchClasses"
argument_list|)
return|;
block|}
specifier|public
name|ActionForward
name|exportPdf
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|performAction
argument_list|(
name|mapping
argument_list|,
name|form
argument_list|,
name|request
argument_list|,
name|response
argument_list|,
literal|"exportPdf"
argument_list|)
return|;
block|}
specifier|public
name|ActionForward
name|performAction
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|String
name|action
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|Web
operator|.
name|isLoggedIn
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Access Denied."
argument_list|)
throw|;
block|}
name|HttpSession
name|httpSession
init|=
name|request
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|ClassListForm
name|classListForm
init|=
operator|(
name|ClassListForm
operator|)
name|form
decl_stmt|;
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|LookupTables
operator|.
name|setupExternalDepts
argument_list|(
name|request
argument_list|,
operator|(
name|Long
operator|)
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|SESSION_ID_ATTR_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|setupBasicFormData
argument_list|(
name|classListForm
argument_list|,
name|user
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"1"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"loadFilter"
argument_list|)
argument_list|)
condition|)
block|{
name|setupGeneralFormFilters
argument_list|(
name|httpSession
argument_list|,
name|classListForm
argument_list|)
expr_stmt|;
name|setupClassListSpecificFormFilters
argument_list|(
name|httpSession
argument_list|,
name|classListForm
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|UserData
operator|.
name|setPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"ClassList.divSec"
argument_list|,
name|classListForm
operator|.
name|getDivSec
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"ClassList.limit"
argument_list|,
name|classListForm
operator|.
name|getLimit
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"ClassList.roomLimit"
argument_list|,
name|classListForm
operator|.
name|getRoomLimit
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"ClassList.manager"
argument_list|,
name|classListForm
operator|.
name|getManager
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"ClassList.datePattern"
argument_list|,
name|classListForm
operator|.
name|getDatePattern
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"ClassList.timePattern"
argument_list|,
name|classListForm
operator|.
name|getTimePattern
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"ClassList.instructor"
argument_list|,
name|classListForm
operator|.
name|getInstructor
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"ClassList.preferences"
argument_list|,
name|classListForm
operator|.
name|getPreferences
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"ClassList.timetable"
argument_list|,
operator|(
name|classListForm
operator|.
name|getTimetable
argument_list|()
operator|==
literal|null
condition|?
literal|false
else|:
name|classListForm
operator|.
name|getTimetable
argument_list|()
operator|.
name|booleanValue
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"ClassList.schedulePrintNote"
argument_list|,
name|classListForm
operator|.
name|getSchedulePrintNote
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"ClassList.note"
argument_list|,
name|classListForm
operator|.
name|getNote
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|classListForm
operator|.
name|getCanSeeExams
argument_list|()
condition|)
name|UserData
operator|.
name|setPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"ClassList.exams"
argument_list|,
name|classListForm
operator|.
name|getExams
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setProperty
argument_list|(
name|httpSession
argument_list|,
literal|"ClassList.sortBy"
argument_list|,
name|classListForm
operator|.
name|getSortBy
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setProperty
argument_list|(
name|httpSession
argument_list|,
literal|"ClassList.filterAssignedRoom"
argument_list|,
name|classListForm
operator|.
name|getFilterAssignedRoom
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setProperty
argument_list|(
name|httpSession
argument_list|,
literal|"ClassList.filterInstructor"
argument_list|,
name|classListForm
operator|.
name|getFilterInstructor
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setProperty
argument_list|(
name|httpSession
argument_list|,
literal|"ClassList.filterManager"
argument_list|,
name|classListForm
operator|.
name|getFilterManager
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setProperty
argument_list|(
name|httpSession
argument_list|,
literal|"ClassList.filterIType"
argument_list|,
name|classListForm
operator|.
name|getFilterIType
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setPropertyInt
argument_list|(
name|httpSession
argument_list|,
literal|"ClassList.filterDayCode"
argument_list|,
name|classListForm
operator|.
name|getFilterDayCode
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setPropertyInt
argument_list|(
name|httpSession
argument_list|,
literal|"ClassList.filterStartSlot"
argument_list|,
name|classListForm
operator|.
name|getFilterStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setPropertyInt
argument_list|(
name|httpSession
argument_list|,
literal|"ClassList.filterLength"
argument_list|,
name|classListForm
operator|.
name|getFilterLength
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"ClassList.sortByKeepSubparts"
argument_list|,
name|classListForm
operator|.
name|getSortByKeepSubparts
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|managerId
init|=
operator|(
name|String
operator|)
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|TMTBL_MGR_ID_ATTR_NAME
argument_list|)
decl_stmt|;
name|TimetableManager
name|manager
init|=
operator|(
operator|new
name|TimetableManagerDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|managerId
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|manager
operator|==
literal|null
operator|||
operator|!
name|manager
operator|.
name|canSeeTimetable
argument_list|(
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
argument_list|,
name|user
argument_list|)
condition|)
name|classListForm
operator|.
name|setTimetable
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|classListForm
operator|.
name|setCollections
argument_list|(
name|request
argument_list|,
name|getClasses
argument_list|(
name|classListForm
argument_list|,
name|WebSolver
operator|.
name|getClassAssignmentProxy
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Collection
name|classes
init|=
name|classListForm
operator|.
name|getClasses
argument_list|()
decl_stmt|;
if|if
condition|(
name|classes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ActionMessages
name|errors
init|=
operator|new
name|ActionMessages
argument_list|()
decl_stmt|;
name|errors
operator|.
name|add
argument_list|(
literal|"searchResult"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"No records matching the search criteria were found."
argument_list|)
argument_list|)
expr_stmt|;
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showClassSearch"
argument_list|)
return|;
block|}
else|else
block|{
name|StringBuffer
name|ids
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|StringBuffer
name|names
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|StringBuffer
name|subjIds
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|classListForm
operator|.
name|getSubjectAreaIds
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|names
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|subjIds
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|ids
operator|.
name|append
argument_list|(
literal|"&subjectAreaIds="
operator|+
name|classListForm
operator|.
name|getSubjectAreaIds
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|subjIds
operator|.
name|append
argument_list|(
name|classListForm
operator|.
name|getSubjectAreaIds
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|names
operator|.
name|append
argument_list|(
operator|(
operator|(
operator|new
name|SubjectAreaDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|classListForm
operator|.
name|getSubjectAreaIds
argument_list|()
index|[
name|i
index|]
argument_list|)
argument_list|)
operator|)
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|httpSession
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|CRS_LST_SUBJ_AREA_IDS_ATTR_NAME
argument_list|,
name|subjIds
argument_list|)
expr_stmt|;
name|httpSession
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|CRS_LST_CRS_NBR_ATTR_NAME
argument_list|,
name|classListForm
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
comment|//request.setAttribute("hash", "Search");
if|if
condition|(
literal|"exportPdf"
operator|.
name|equals
argument_list|(
name|action
argument_list|)
condition|)
block|{
name|File
name|pdfFile
init|=
operator|(
operator|new
name|PdfClassListTableBuilder
argument_list|()
operator|)
operator|.
name|pdfTableForClasses
argument_list|(
name|WebSolver
operator|.
name|getClassAssignmentProxy
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
argument_list|,
name|WebSolver
operator|.
name|getExamSolver
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
argument_list|,
name|classListForm
argument_list|,
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|pdfFile
operator|!=
literal|null
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|REQUEST_OPEN_URL
argument_list|,
literal|"temp/"
operator|+
name|pdfFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|//response.sendRedirect("temp/"+pdfFile.getName());
block|}
name|BackTracker
operator|.
name|markForBack
argument_list|(
name|request
argument_list|,
literal|"classSearch.do?doit=Search&loadFilter=1"
operator|+
name|ids
operator|+
literal|"&courseNbr="
operator|+
name|classListForm
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
literal|"Classes ("
operator|+
name|names
operator|+
operator|(
name|classListForm
operator|.
name|getCourseNbr
argument_list|()
operator|==
literal|null
operator|||
name|classListForm
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|""
else|:
literal|" "
operator|+
name|classListForm
operator|.
name|getCourseNbr
argument_list|()
operator|)
operator|+
literal|")"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showClassList"
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|void
name|setupBasicFormData
parameter_list|(
name|ClassListFormInterface
name|form
parameter_list|,
name|User
name|user
parameter_list|)
throws|throws
name|Exception
block|{
name|form
operator|.
name|setUserIsAdmin
argument_list|(
name|user
operator|.
name|isAdmin
argument_list|()
argument_list|)
expr_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|user
operator|.
name|isAdmin
argument_list|()
condition|)
block|{
name|TimetableManager
name|tm
init|=
name|TimetableManager
operator|.
name|getManager
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Department
name|dept
init|=
literal|null
decl_stmt|;
name|Set
name|depts
init|=
name|tm
operator|.
name|departmentsForSession
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tm
operator|!=
literal|null
operator|&&
name|depts
operator|!=
literal|null
operator|&&
name|depts
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
index|[]
name|l
init|=
operator|new
name|String
index|[
name|depts
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|depts
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|dept
operator|=
operator|(
name|Department
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|l
index|[
name|i
index|]
operator|=
name|dept
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|form
operator|.
name|setUserDeptIds
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|setupGeneralFormFilters
parameter_list|(
name|HttpSession
name|httpSession
parameter_list|,
name|ClassListFormInterface
name|form
parameter_list|)
block|{
name|form
operator|.
name|setSortBy
argument_list|(
name|UserData
operator|.
name|getProperty
argument_list|(
name|httpSession
argument_list|,
literal|"ClassList.sortBy"
argument_list|,
name|ClassListForm
operator|.
name|sSortByName
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setFilterAssignedRoom
argument_list|(
name|UserData
operator|.
name|getProperty
argument_list|(
name|httpSession
argument_list|,
literal|"ClassList.filterAssignedRoom"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setFilterManager
argument_list|(
name|UserData
operator|.
name|getProperty
argument_list|(
name|httpSession
argument_list|,
literal|"ClassList.filterManager"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setFilterIType
argument_list|(
name|UserData
operator|.
name|getProperty
argument_list|(
name|httpSession
argument_list|,
literal|"ClassList.filterIType"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setFilterDayCode
argument_list|(
name|UserData
operator|.
name|getPropertyInt
argument_list|(
name|httpSession
argument_list|,
literal|"ClassList.filterDayCode"
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setFilterStartSlot
argument_list|(
name|UserData
operator|.
name|getPropertyInt
argument_list|(
name|httpSession
argument_list|,
literal|"ClassList.filterStartSlot"
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setFilterLength
argument_list|(
name|UserData
operator|.
name|getPropertyInt
argument_list|(
name|httpSession
argument_list|,
literal|"ClassList.filterLength"
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setSortByKeepSubparts
argument_list|(
name|UserData
operator|.
name|getPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"ClassList.sortByKeepSubparts"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|setupClassListSpecificFormFilters
parameter_list|(
name|HttpSession
name|httpSession
parameter_list|,
name|ClassListForm
name|form
parameter_list|)
block|{
name|form
operator|.
name|setDivSec
argument_list|(
operator|new
name|Boolean
argument_list|(
name|UserData
operator|.
name|getPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"ClassList.divSec"
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setLimit
argument_list|(
operator|new
name|Boolean
argument_list|(
name|UserData
operator|.
name|getPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"ClassList.limit"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setRoomLimit
argument_list|(
operator|new
name|Boolean
argument_list|(
name|UserData
operator|.
name|getPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"ClassList.roomLimit"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setManager
argument_list|(
operator|new
name|Boolean
argument_list|(
name|UserData
operator|.
name|getPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"ClassList.manager"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setDatePattern
argument_list|(
operator|new
name|Boolean
argument_list|(
name|UserData
operator|.
name|getPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"ClassList.datePattern"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setTimePattern
argument_list|(
operator|new
name|Boolean
argument_list|(
name|UserData
operator|.
name|getPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"ClassList.timePattern"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setInstructor
argument_list|(
operator|new
name|Boolean
argument_list|(
name|UserData
operator|.
name|getPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"ClassList.instructor"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setPreferences
argument_list|(
operator|new
name|Boolean
argument_list|(
name|UserData
operator|.
name|getPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"ClassList.preferences"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setTimetable
argument_list|(
operator|new
name|Boolean
argument_list|(
name|UserData
operator|.
name|getPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"ClassList.timetable"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setFilterInstructor
argument_list|(
name|UserData
operator|.
name|getProperty
argument_list|(
name|httpSession
argument_list|,
literal|"ClassList.filterInstructor"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setSchedulePrintNote
argument_list|(
operator|new
name|Boolean
argument_list|(
name|UserData
operator|.
name|getPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"ClassList.schedulePrintNote"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setNote
argument_list|(
operator|new
name|Boolean
argument_list|(
name|UserData
operator|.
name|getPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"ClassList.note"
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|httpSession
argument_list|)
decl_stmt|;
name|TimetableManager
name|manager
init|=
name|TimetableManager
operator|.
name|getManager
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|manager
operator|.
name|canSeeExams
argument_list|(
name|session
argument_list|,
name|user
argument_list|)
condition|)
block|{
name|form
operator|.
name|setCanSeeExams
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|form
operator|.
name|setExams
argument_list|(
operator|new
name|Boolean
argument_list|(
name|UserData
operator|.
name|getPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"ClassList.exams"
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|form
operator|.
name|setCanSeeExams
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
specifier|public
specifier|static
name|Set
name|getClasses
parameter_list|(
name|ClassListFormInterface
name|form
parameter_list|,
name|ClassAssignmentProxy
name|classAssignmentProxy
parameter_list|)
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
operator|(
operator|new
name|InstructionalOfferingDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|boolean
name|doFilterManager
init|=
name|form
operator|.
name|getFilterManager
argument_list|()
operator|!=
literal|null
operator|&&
name|form
operator|.
name|getFilterManager
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
decl_stmt|;
name|Long
name|filterManager
init|=
operator|(
name|doFilterManager
condition|?
name|Long
operator|.
name|valueOf
argument_list|(
name|form
operator|.
name|getFilterManager
argument_list|()
argument_list|)
else|:
literal|null
operator|)
decl_stmt|;
name|boolean
name|fetchStructure
init|=
literal|true
decl_stmt|;
name|boolean
name|fetchCredits
init|=
literal|false
decl_stmt|;
comment|//form.getCredit().booleanValue();
name|boolean
name|fetchInstructors
init|=
literal|false
decl_stmt|;
comment|//form.getInstructor().booleanValue();
name|boolean
name|fetchPreferences
init|=
literal|false
decl_stmt|;
comment|//form.getPreferences().booleanValue() || form.getTimePattern().booleanValue();
name|boolean
name|fetchAssignments
init|=
literal|false
decl_stmt|;
comment|//(form.getTimetable()!=null&& form.getTimetable().booleanValue());
name|String
index|[]
name|subjectIds
init|=
name|form
operator|.
name|getSubjectAreaIds
argument_list|()
decl_stmt|;
if|if
condition|(
name|subjectIds
operator|!=
literal|null
operator|&&
name|subjectIds
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|StringBuffer
name|query
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"select c from Class_ as c "
argument_list|)
expr_stmt|;
if|if
condition|(
name|fetchStructure
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|"left join fetch c.childClasses as cc "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"left join fetch c.schedulingSubpart as ss "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"left join fetch ss.childSubparts as css "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"left join fetch ss.instrOfferingConfig as ioc "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"left join fetch ioc.instructionalOffering as io "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"left join fetch io.courseOfferings as cox "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fetchCredits
condition|)
name|query
operator|.
name|append
argument_list|(
literal|"left join fetch ss.creditConfigs as ssc "
argument_list|)
expr_stmt|;
if|if
condition|(
name|fetchPreferences
operator|||
name|fetchInstructors
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|"left join fetch c.classInstructors as ci "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"left join fetch ci.instructor as di "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fetchAssignments
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|"left join fetch c.assignments as ca "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"left join fetch ca.rooms as car "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fetchPreferences
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|"left join fetch c.preferences as cp "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"left join fetch ss.preferences as ssp "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"left join fetch di.preferences as dip "
argument_list|)
expr_stmt|;
block|}
name|query
operator|.
name|append
argument_list|(
literal|"inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings as co "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|" where c.schedulingSubpart in ( select ss2 from SchedulingSubpart as ss2 inner join ss2.instrOfferingConfig.instructionalOffering.courseOfferings as co2 "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|" where co2.uniqueCourseNbr.subjectArea.uniqueId in ( "
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subjectIds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|query
operator|.
name|append
argument_list|(
name|subjectIds
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|query
operator|.
name|append
argument_list|(
literal|") "
argument_list|)
expr_stmt|;
if|if
condition|(
name|form
operator|.
name|getCourseNbr
argument_list|()
operator|!=
literal|null
operator|&&
name|form
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|courseNbr
init|=
name|form
operator|.
name|getCourseNbr
argument_list|()
decl_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|" and co2.uniqueCourseNbr.courseNbr "
argument_list|)
expr_stmt|;
if|if
condition|(
name|courseNbr
operator|.
name|indexOf
argument_list|(
literal|'*'
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|" like '"
argument_list|)
expr_stmt|;
name|courseNbr
operator|=
name|courseNbr
operator|.
name|replace
argument_list|(
literal|'*'
argument_list|,
literal|'%'
argument_list|)
operator|.
name|toUpperCase
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|query
operator|.
name|append
argument_list|(
literal|" = '"
argument_list|)
expr_stmt|;
block|}
name|query
operator|.
name|append
argument_list|(
name|courseNbr
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"'  "
argument_list|)
expr_stmt|;
block|}
name|query
operator|.
name|append
argument_list|(
literal|" and co2.isControl = true ) "
argument_list|)
expr_stmt|;
if|if
condition|(
name|doFilterManager
condition|)
block|{
if|if
condition|(
name|filterManager
operator|.
name|longValue
argument_list|()
operator|<
literal|0
condition|)
block|{
comment|//all departmental
name|query
operator|.
name|append
argument_list|(
literal|" and (c.managingDept is null or c.managingDept in co.subjectArea.department)"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|.
name|append
argument_list|(
literal|" and c.managingDept = "
operator|+
name|filterManager
argument_list|)
expr_stmt|;
block|}
block|}
comment|//NOTE: former implementation -- only classes that are editable were displayed on the classes page
comment|/*   			String[] deptIds = form.getUserDeptIds(); 			if (!form.isUserIsAdmin()&& !form.isReturnAllControlClassesForSubjects()&& deptIds != null){ 				query.append(" and ((c.managingDept is not null and c.managingDept.uniqueId in ("); 				first = true; 				for(int i = 0; i< deptIds.length; i++){ 					if (!first){ 						query.append(", "); 					} else { 						first = false; 					} 					query.append(deptIds[i]); 				} 				query.append(")) or (c.managingDept is null and co2.subjectArea.department.uniqueId in (" ); 				first = true; 				for(int i = 0; i< deptIds.length; i++){ 					if (!first){ 						query.append(", "); 					} else { 						first = false; 					} 					query.append(deptIds[i]); 				} 				query.append("))"); 				if (form.isSessionInLLREditStatus()){ 					query.append(" or (c.managingDept is not null and co2.subjectArea.department.uniqueId in (" ); 					first = true; 					for(int i = 0; i< deptIds.length; i++){ 						if (!first){ 							query.append(", "); 						} else { 							first = false; 						} 						query.append(deptIds[i]); 					} 					query.append("))"); 				} 				query.append(")"); 			} 			*/
name|query
operator|.
name|append
argument_list|(
literal|" and co.isControl = true ) "
argument_list|)
expr_stmt|;
name|Query
name|q
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|q
operator|.
name|setFetchSize
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|TreeSet
name|ts
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|ClassComparator
argument_list|(
name|form
operator|.
name|getSortBy
argument_list|()
argument_list|,
name|classAssignmentProxy
argument_list|,
name|form
operator|.
name|getSortByKeepSubparts
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|sTime
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|boolean
name|doFilterInstructor
init|=
name|form
operator|.
name|getFilterInstructor
argument_list|()
operator|!=
literal|null
operator|&&
name|form
operator|.
name|getFilterInstructor
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
decl_stmt|;
name|String
name|filterInstructor
init|=
operator|(
name|doFilterInstructor
condition|?
name|form
operator|.
name|getFilterInstructor
argument_list|()
operator|.
name|toUpperCase
argument_list|()
else|:
literal|null
operator|)
decl_stmt|;
name|boolean
name|doFilterAssignedRoom
init|=
name|form
operator|.
name|getFilterAssignedRoom
argument_list|()
operator|!=
literal|null
operator|&&
name|form
operator|.
name|getFilterAssignedRoom
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
decl_stmt|;
name|String
name|filterAssignedRoom
init|=
operator|(
name|doFilterAssignedRoom
condition|?
name|form
operator|.
name|getFilterAssignedRoom
argument_list|()
operator|.
name|toUpperCase
argument_list|()
else|:
literal|null
operator|)
decl_stmt|;
name|boolean
name|doFilterIType
init|=
name|form
operator|.
name|getFilterIType
argument_list|()
operator|!=
literal|null
operator|&&
name|form
operator|.
name|getFilterIType
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
decl_stmt|;
name|Integer
name|filterIType
init|=
operator|(
name|doFilterIType
condition|?
name|Integer
operator|.
name|valueOf
argument_list|(
name|form
operator|.
name|getFilterIType
argument_list|()
argument_list|)
else|:
literal|null
operator|)
decl_stmt|;
name|boolean
name|doFilterAssignedTime
init|=
operator|(
operator|(
name|form
operator|.
name|getFilterDayCode
argument_list|()
operator|>=
literal|0
operator|&&
name|form
operator|.
name|getFilterStartSlot
argument_list|()
operator|>=
literal|0
operator|&&
name|form
operator|.
name|getFilterLength
argument_list|()
operator|>=
literal|0
operator|)
operator|||
operator|(
name|form
operator|.
name|getFilterDayCode
argument_list|()
operator|>
literal|0
operator|&&
name|form
operator|.
name|getFilterStartSlot
argument_list|()
operator|<
literal|0
operator|&&
name|form
operator|.
name|getFilterLength
argument_list|()
operator|<=
literal|0
operator|)
operator|)
decl_stmt|;
name|TimeLocation
name|filterAssignedTime
init|=
operator|(
name|doFilterAssignedTime
condition|?
operator|new
name|TimeLocation
argument_list|(
operator|(
name|form
operator|.
name|getFilterDayCode
argument_list|()
operator|==
literal|0
condition|?
literal|255
else|:
name|form
operator|.
name|getFilterDayCode
argument_list|()
operator|)
argument_list|,
operator|(
name|form
operator|.
name|getFilterStartSlot
argument_list|()
operator|<
literal|0
condition|?
literal|0
else|:
name|form
operator|.
name|getFilterStartSlot
argument_list|()
operator|)
argument_list|,
operator|(
name|form
operator|.
name|getFilterStartSlot
argument_list|()
operator|<
literal|0
condition|?
name|Constants
operator|.
name|SLOTS_PER_DAY
else|:
name|Math
operator|.
name|max
argument_list|(
literal|5
argument_list|,
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|form
operator|.
name|getFilterLength
argument_list|()
operator|-
literal|1
argument_list|)
operator|/
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
else|:
literal|null
operator|)
decl_stmt|;
comment|// days, start time& length selected -> create appropriate time location
comment|// days, start time selected -> create appropriate time location with 1 slot length
comment|// start time& length selected -> create time location all days with given start time and length
comment|// only start time selected -> create time location all days with given start time and 1 slot length
comment|// only days selected -> create time location of given days all day long (all location assigned in the given days overlap)
name|List
name|allClasses
init|=
name|q
operator|.
name|list
argument_list|()
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|" --- Load structure ---"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|allClasses
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Hibernate
operator|.
name|initialize
argument_list|(
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|allClasses
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Hibernate
operator|.
name|initialize
argument_list|(
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getSchedulingSubparts
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|allClasses
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Hibernate
operator|.
name|initialize
argument_list|(
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getClasses
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Debug
operator|.
name|debug
argument_list|(
literal|" --- Filter classes ---"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|q
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|doFilterInstructor
condition|)
block|{
name|boolean
name|filterLine
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|c
operator|.
name|getClassInstructors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|ci
init|=
operator|(
name|ClassInstructor
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|StringTokenizer
name|stk
init|=
operator|new
name|StringTokenizer
argument_list|(
name|filterInstructor
argument_list|,
literal|" ,"
argument_list|)
decl_stmt|;
name|boolean
name|containsInstructor
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|stk
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|token
init|=
name|stk
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|boolean
name|containsToken
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getFirstName
argument_list|()
operator|!=
literal|null
operator|&&
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getFirstName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
operator|.
name|indexOf
argument_list|(
name|token
argument_list|)
operator|>=
literal|0
condition|)
name|containsToken
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|containsToken
operator|&&
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getMiddleName
argument_list|()
operator|!=
literal|null
operator|&&
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getMiddleName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
operator|.
name|indexOf
argument_list|(
name|token
argument_list|)
operator|>=
literal|0
condition|)
name|containsToken
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|containsToken
operator|&&
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getLastName
argument_list|()
operator|!=
literal|null
operator|&&
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getLastName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
operator|.
name|indexOf
argument_list|(
name|token
argument_list|)
operator|>=
literal|0
condition|)
name|containsToken
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|containsToken
condition|)
block|{
name|containsInstructor
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|containsInstructor
condition|)
block|{
name|filterLine
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|filterLine
condition|)
block|{
name|hibSession
operator|.
name|evict
argument_list|(
name|c
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
comment|/* 				if (doFilterManager) { 					if (filterManager.longValue()<0) { 						if (c.getManagingDept()==null || c.getManagingDept().isExternalManager().booleanValue()) 							continue; 					} else if (c.getManagingDept()==null || !c.getManagingDept().getUniqueId().equals(filterManager)) 						continue; 				} 				*/
if|if
condition|(
name|doFilterIType
condition|)
block|{
name|ItypeDesc
name|itype
init|=
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
decl_stmt|;
name|boolean
name|match
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|match
operator|&&
name|itype
operator|!=
literal|null
condition|)
block|{
name|match
operator|=
name|itype
operator|.
name|getItype
argument_list|()
operator|.
name|equals
argument_list|(
name|filterIType
argument_list|)
expr_stmt|;
name|itype
operator|=
name|itype
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|match
condition|)
block|{
name|hibSession
operator|.
name|evict
argument_list|(
name|c
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
if|if
condition|(
name|doFilterAssignedTime
condition|)
block|{
try|try
block|{
name|Assignment
name|a
init|=
name|classAssignmentProxy
operator|.
name|getAssignment
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
name|hibSession
operator|.
name|evict
argument_list|(
name|c
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|Placement
name|p
init|=
name|a
operator|.
name|getPlacement
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
name|hibSession
operator|.
name|evict
argument_list|(
name|c
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|TimeLocation
name|t
init|=
name|p
operator|.
name|getTimeLocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
name|hibSession
operator|.
name|evict
argument_list|(
name|c
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|boolean
name|overlap
init|=
name|t
operator|.
name|shareDays
argument_list|(
name|filterAssignedTime
argument_list|)
operator|&&
name|t
operator|.
name|shareHours
argument_list|(
name|filterAssignedTime
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|overlap
condition|)
block|{
name|hibSession
operator|.
name|evict
argument_list|(
name|c
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|hibSession
operator|.
name|evict
argument_list|(
name|c
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
if|if
condition|(
name|doFilterAssignedRoom
condition|)
block|{
try|try
block|{
name|Assignment
name|a
init|=
name|classAssignmentProxy
operator|.
name|getAssignment
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
name|hibSession
operator|.
name|evict
argument_list|(
name|c
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|Placement
name|p
init|=
name|a
operator|.
name|getPlacement
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
operator|||
name|p
operator|.
name|getNrRooms
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|hibSession
operator|.
name|evict
argument_list|(
name|c
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|boolean
name|filterLine
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|isMultiRoom
argument_list|()
condition|)
block|{
for|for
control|(
name|Enumeration
name|e
init|=
name|p
operator|.
name|getRoomLocations
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|RoomLocation
name|r
init|=
operator|(
name|RoomLocation
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|getName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
operator|.
name|indexOf
argument_list|(
name|filterAssignedRoom
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|filterLine
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|p
operator|.
name|getRoomLocation
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
operator|.
name|indexOf
argument_list|(
name|filterAssignedRoom
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|filterLine
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|filterLine
condition|)
block|{
name|hibSession
operator|.
name|evict
argument_list|(
name|c
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
continue|continue;
block|}
block|}
name|ts
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|form
operator|.
name|getInstructor
argument_list|()
operator|.
name|booleanValue
argument_list|()
operator|||
name|form
operator|.
name|getPreferences
argument_list|()
operator|.
name|booleanValue
argument_list|()
operator|||
name|form
operator|.
name|getTimePattern
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|Debug
operator|.
name|debug
argument_list|(
literal|"---- Load Instructors ---- "
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|ts
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Hibernate
operator|.
name|initialize
argument_list|(
name|c
operator|.
name|getClassInstructors
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|ts
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|c
operator|.
name|getClassInstructors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|ci
init|=
operator|(
name|ClassInstructor
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|Hibernate
operator|.
name|initialize
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|form
operator|.
name|getPreferences
argument_list|()
operator|.
name|booleanValue
argument_list|()
operator|||
name|form
operator|.
name|getTimePattern
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|Debug
operator|.
name|debug
argument_list|(
literal|"---- Load Preferences ---- "
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|ts
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Hibernate
operator|.
name|initialize
argument_list|(
name|c
operator|.
name|getPreferences
argument_list|()
argument_list|)
expr_stmt|;
name|Hibernate
operator|.
name|initialize
argument_list|(
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getPreferences
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|c
operator|.
name|getClassInstructors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|ci
init|=
operator|(
name|ClassInstructor
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|Hibernate
operator|.
name|initialize
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getPreferences
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|c
operator|.
name|getControllingDept
argument_list|()
operator|.
name|getPreferences
argument_list|()
expr_stmt|;
name|c
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getPreferences
argument_list|()
expr_stmt|;
name|Hibernate
operator|.
name|initialize
argument_list|(
name|c
operator|.
name|getDistributionObjects
argument_list|()
argument_list|)
expr_stmt|;
name|Hibernate
operator|.
name|initialize
argument_list|(
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getDistributionObjects
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|form
operator|.
name|getTimetable
argument_list|()
operator|!=
literal|null
operator|&&
name|form
operator|.
name|getTimetable
argument_list|()
operator|.
name|booleanValue
argument_list|()
operator|&&
name|classAssignmentProxy
operator|!=
literal|null
operator|&&
name|classAssignmentProxy
operator|instanceof
name|Solution
condition|)
block|{
name|Debug
operator|.
name|debug
argument_list|(
literal|"--- Load Assignments --- "
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|ts
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|Assignment
name|a
init|=
name|classAssignmentProxy
operator|.
name|getAssignment
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
condition|)
name|Hibernate
operator|.
name|initialize
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
block|}
name|long
name|eTime
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"fetch time = "
operator|+
operator|(
name|eTime
operator|-
name|sTime
operator|)
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"rows = "
operator|+
name|ts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|ts
operator|)
return|;
block|}
else|else
block|{
return|return
operator|(
operator|new
name|TreeSet
argument_list|()
operator|)
return|;
block|}
block|}
block|}
end_class

end_unit

