begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 - 3.5 (University Timetabling Application)  * Copyright (C) 2008 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|WebTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|messages
operator|.
name|CourseMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|SuggestionsForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|SolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|TimetableSolver
operator|.
name|AssignmentRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|TimetableSolver
operator|.
name|RecordedAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|interactive
operator|.
name|ClassAssignmentDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|interactive
operator|.
name|Hint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|interactive
operator|.
name|Suggestion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|interactive
operator|.
name|SuggestionsModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|service
operator|.
name|SolverService
import|;
end_import

begin_comment
comment|/**   * @author Tomas Muller, Zuzana Mullerova  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"/suggestions"
argument_list|)
specifier|public
class|class
name|SuggestionsAction
extends|extends
name|Action
block|{
specifier|protected
specifier|final
specifier|static
name|CourseMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|CourseMessages
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Autowired
name|SessionContext
name|sessionContext
decl_stmt|;
annotation|@
name|Autowired
name|SolverService
argument_list|<
name|SolverProxy
argument_list|>
name|courseTimetablingSolverService
decl_stmt|;
specifier|public
name|ActionForward
name|execute
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
name|SuggestionsForm
name|myForm
init|=
operator|(
name|SuggestionsForm
operator|)
name|form
decl_stmt|;
try|try
block|{
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|Suggestions
argument_list|)
expr_stmt|;
name|SuggestionsModel
name|model
init|=
operator|(
name|SuggestionsModel
operator|)
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|getAttribute
argument_list|(
literal|"Suggestions.model"
argument_list|)
decl_stmt|;
if|if
condition|(
name|model
operator|==
literal|null
condition|)
block|{
name|model
operator|=
operator|new
name|SuggestionsModel
argument_list|()
expr_stmt|;
name|model
operator|.
name|load
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|setAttribute
argument_list|(
literal|"Suggestions.model"
argument_list|,
name|model
argument_list|)
expr_stmt|;
block|}
name|SolverProxy
name|solver
init|=
name|courseTimetablingSolverService
operator|.
name|getSolver
argument_list|()
decl_stmt|;
comment|// Read operation to be performed
name|String
name|op
init|=
operator|(
name|myForm
operator|.
name|getOp
argument_list|()
operator|!=
literal|null
condition|?
name|myForm
operator|.
name|getOp
argument_list|()
else|:
name|request
operator|.
name|getParameter
argument_list|(
literal|"op"
argument_list|)
operator|)
decl_stmt|;
comment|/*         if (op==null)         	throw new Exception("No operation selected.");         */
if|if
condition|(
literal|"Reset"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
literal|"Select"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|String
name|id
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"No class selected."
argument_list|)
throw|;
name|Long
name|classId
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"Reset"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
name|model
operator|.
name|reset
argument_list|(
name|solver
argument_list|)
expr_stmt|;
name|model
operator|.
name|setClassId
argument_list|(
name|classId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"Apply"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|myForm
operator|.
name|save
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|model
operator|.
name|save
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"Search Deeper"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|model
operator|.
name|incDepth
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|"Search Longer"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|model
operator|.
name|doubleTimeout
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|"Remove"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|String
name|id
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"No class selected."
argument_list|)
throw|;
name|model
operator|.
name|remHint
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"Try"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"reset"
argument_list|)
operator|!=
literal|null
condition|)
name|model
operator|.
name|reset
argument_list|(
name|solver
argument_list|)
expr_stmt|;
name|String
name|id
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|Vector
name|roomIds
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
literal|true
condition|;
name|idx
operator|++
control|)
block|{
name|String
name|room
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"room"
operator|+
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|room
operator|!=
literal|null
condition|)
name|roomIds
operator|.
name|addElement
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|room
argument_list|)
argument_list|)
expr_stmt|;
else|else
break|break;
block|}
name|String
name|days
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"days"
argument_list|)
decl_stmt|;
name|String
name|slot
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"slot"
argument_list|)
decl_stmt|;
name|String
name|pattern
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"pattern"
argument_list|)
decl_stmt|;
name|String
name|dates
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"dates"
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"No class selected."
argument_list|)
throw|;
name|model
operator|.
name|setClassId
argument_list|(
operator|new
name|Long
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|days
operator|==
literal|null
operator|||
name|slot
operator|==
literal|null
operator|||
name|pattern
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"No time selected."
argument_list|)
throw|;
if|if
condition|(
name|dates
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"No dates selected."
argument_list|)
throw|;
if|if
condition|(
name|solver
operator|==
literal|null
operator|||
name|solver
operator|.
name|getInfo
argument_list|(
operator|new
name|Hint
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|days
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|slot
argument_list|)
argument_list|,
name|roomIds
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|pattern
argument_list|)
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|dates
argument_list|)
argument_list|)
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|model
operator|.
name|addHint
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|days
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|slot
argument_list|)
argument_list|,
name|roomIds
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|pattern
argument_list|)
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|dates
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|message
init|=
name|solver
operator|.
name|getNotValidReason
argument_list|(
operator|new
name|Hint
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|days
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|slot
argument_list|)
argument_list|,
name|roomIds
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|pattern
argument_list|)
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|dates
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"Suggestions.currentAssignmentMessage"
argument_list|,
literal|"<script language='JavaScript'>alert('"
operator|+
operator|(
name|message
operator|==
literal|null
condition|?
literal|"Selected placement is not valid (room or instructor not avaiable)."
else|:
name|message
operator|)
operator|+
literal|"');</script>"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|"Assign"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
if|if
condition|(
name|model
operator|.
name|getSelectedSuggestion
argument_list|()
operator|!=
literal|null
condition|)
name|model
operator|.
name|getSelectedSuggestion
argument_list|()
operator|.
name|assign
argument_list|(
name|solver
argument_list|)
expr_stmt|;
if|else if
condition|(
name|model
operator|.
name|getCurrentSuggestion
argument_list|()
operator|!=
literal|null
condition|)
name|model
operator|.
name|getCurrentSuggestion
argument_list|()
operator|.
name|assign
argument_list|(
name|solver
argument_list|)
expr_stmt|;
else|else
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Nothing to assign."
argument_list|)
throw|;
name|model
operator|.
name|reset
argument_list|(
name|solver
argument_list|)
expr_stmt|;
name|myForm
operator|.
name|setOp
argument_list|(
literal|"close"
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showSuggestions"
argument_list|)
return|;
block|}
if|if
condition|(
literal|"Unassign"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
block|{
name|Hint
name|unassignment
init|=
operator|new
name|Hint
argument_list|(
name|model
operator|.
name|getClassId
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Hint
argument_list|>
name|assignments
init|=
operator|new
name|ArrayList
argument_list|<
name|Hint
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assignments
operator|.
name|add
argument_list|(
name|unassignment
argument_list|)
expr_stmt|;
name|solver
operator|.
name|assign
argument_list|(
name|assignments
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Solver not loaded."
argument_list|)
throw|;
block|}
name|model
operator|.
name|reset
argument_list|(
name|solver
argument_list|)
expr_stmt|;
name|myForm
operator|.
name|setOp
argument_list|(
literal|"close"
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showSuggestions"
argument_list|)
return|;
block|}
if|if
condition|(
literal|"Suggestion"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|String
name|id
init|=
operator|(
name|String
operator|)
name|request
operator|.
name|getParameter
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"No suggestion selected."
argument_list|)
throw|;
name|model
operator|.
name|selectSuggestion
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"Placement"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|String
name|id
init|=
operator|(
name|String
operator|)
name|request
operator|.
name|getParameter
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"No placement selected."
argument_list|)
throw|;
name|model
operator|.
name|selectPlacement
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"ShowHistory"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|model
operator|.
name|reset
argument_list|(
name|solver
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"hist"
argument_list|)
argument_list|)
decl_stmt|;
name|AssignmentRecord
name|record
init|=
operator|(
name|AssignmentRecord
operator|)
name|solver
operator|.
name|getAssignmentRecords
argument_list|()
operator|.
name|elementAt
argument_list|(
name|idx
argument_list|)
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|record
operator|.
name|getAssignments
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|RecordedAssignment
name|assignment
init|=
operator|(
name|RecordedAssignment
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|myForm
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|)
name|myForm
operator|.
name|setId
argument_list|(
name|assignment
operator|.
name|getAfter
argument_list|()
operator|==
literal|null
condition|?
name|assignment
operator|.
name|getBefore
argument_list|()
operator|.
name|getClassId
argument_list|()
else|:
name|assignment
operator|.
name|getAfter
argument_list|()
operator|.
name|getClassId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|assignment
operator|.
name|getBefore
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|model
operator|.
name|addHint
argument_list|(
name|assignment
operator|.
name|getBefore
argument_list|()
operator|.
name|getClassId
argument_list|()
argument_list|,
name|assignment
operator|.
name|getBefore
argument_list|()
operator|.
name|getDays
argument_list|()
argument_list|,
name|assignment
operator|.
name|getBefore
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|assignment
operator|.
name|getBefore
argument_list|()
operator|.
name|getRoomIds
argument_list|()
argument_list|,
name|assignment
operator|.
name|getBefore
argument_list|()
operator|.
name|getPatternId
argument_list|()
argument_list|,
name|assignment
operator|.
name|getBefore
argument_list|()
operator|.
name|getDatePatternId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|myForm
operator|.
name|load
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|ClassAssignmentDetails
name|ca
init|=
name|ClassAssignmentDetails
operator|.
name|createClassAssignmentDetails
argument_list|(
name|sessionContext
argument_list|,
name|solver
argument_list|,
name|myForm
operator|.
name|getId
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Hint
name|newAssignment
init|=
operator|(
name|ca
operator|==
literal|null
condition|?
literal|null
else|:
name|ca
operator|.
name|getHint
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|model
operator|.
name|compute
argument_list|(
name|solver
argument_list|)
condition|)
block|{
name|myForm
operator|.
name|load
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|myForm
operator|.
name|setCanUnassign
argument_list|(
name|ca
operator|.
name|getAssignedTime
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|Hashtable
name|confInfo
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
if|if
condition|(
name|model
operator|.
name|getSelectedSuggestion
argument_list|()
operator|!=
literal|null
condition|)
name|confInfo
operator|.
name|putAll
argument_list|(
name|model
operator|.
name|getSelectedSuggestion
argument_list|()
operator|.
name|conflictInfo
argument_list|(
name|solver
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|model
operator|.
name|getCurrentSuggestion
argument_list|()
operator|!=
literal|null
condition|)
name|confInfo
operator|.
name|putAll
argument_list|(
name|model
operator|.
name|getCurrentSuggestion
argument_list|()
operator|.
name|conflictInfo
argument_list|(
name|solver
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|selectedAssignments
init|=
name|getHintTable
argument_list|(
name|model
operator|.
name|getSimpleMode
argument_list|()
argument_list|,
name|request
argument_list|,
name|sessionContext
argument_list|,
name|solver
argument_list|,
literal|"Selected Assignments"
argument_list|,
name|model
operator|.
name|getHints
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|model
operator|.
name|getHints
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|confInfo
operator|.
name|putAll
argument_list|(
name|solver
operator|.
name|conflictInfo
argument_list|(
name|model
operator|.
name|getHints
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|model
operator|.
name|getHints
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Hint
name|h
init|=
operator|(
name|Hint
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|ca
operator|!=
literal|null
operator|&&
name|ca
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
operator|.
name|equals
argument_list|(
name|h
operator|.
name|getClassId
argument_list|()
argument_list|)
condition|)
name|newAssignment
operator|=
name|h
expr_stmt|;
block|}
block|}
if|if
condition|(
name|selectedAssignments
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|setAttribute
argument_list|(
literal|"Suggestions.selectedAssignments"
argument_list|,
name|selectedAssignments
argument_list|)
expr_stmt|;
name|myForm
operator|.
name|setCanUnassign
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|model
operator|.
name|getSelectedSuggestion
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Vector
name|ass
init|=
operator|new
name|Vector
argument_list|(
name|model
operator|.
name|getSelectedSuggestion
argument_list|()
operator|.
name|getDifferentAssignments
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|ass
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Hint
name|h
init|=
operator|(
name|Hint
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ca
operator|!=
literal|null
operator|&&
name|ca
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
operator|.
name|equals
argument_list|(
name|h
operator|.
name|getClassId
argument_list|()
argument_list|)
condition|)
name|newAssignment
operator|=
name|h
expr_stmt|;
name|boolean
name|contains
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|model
operator|.
name|getHints
argument_list|()
operator|.
name|elements
argument_list|()
init|;
operator|!
name|contains
operator|&&
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Hint
name|x
init|=
operator|(
name|Hint
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|equals
argument_list|(
name|h
argument_list|)
condition|)
name|contains
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|contains
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|String
name|selectedSuggestion
init|=
operator|(
name|model
operator|.
name|getSelectedSuggestion
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|getHintTable
argument_list|(
name|model
operator|.
name|getSimpleMode
argument_list|()
argument_list|,
name|request
argument_list|,
name|sessionContext
argument_list|,
name|solver
argument_list|,
literal|"Selected Suggestion"
argument_list|,
name|ass
argument_list|,
name|confInfo
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|selectedSuggestion
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|setAttribute
argument_list|(
literal|"Suggestions.selectedSuggestion"
argument_list|,
name|selectedSuggestion
argument_list|)
expr_stmt|;
name|myForm
operator|.
name|setCanUnassign
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|Suggestion
name|s
init|=
operator|(
name|model
operator|.
name|getSelectedSuggestion
argument_list|()
operator|!=
literal|null
condition|?
name|model
operator|.
name|getSelectedSuggestion
argument_list|()
else|:
name|model
operator|.
name|getCurrentSuggestion
argument_list|()
operator|)
decl_stmt|;
name|Set
name|conf
init|=
operator|(
name|s
operator|==
literal|null
condition|?
literal|null
else|:
name|s
operator|.
name|getUnresolvedConflicts
argument_list|()
operator|)
decl_stmt|;
name|String
name|conflictAssignments
init|=
name|getHintTable
argument_list|(
name|model
operator|.
name|getSimpleMode
argument_list|()
argument_list|,
name|request
argument_list|,
name|sessionContext
argument_list|,
name|solver
argument_list|,
literal|"Conflicting Assignments"
argument_list|,
name|conf
argument_list|,
name|confInfo
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|conf
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Hint
name|h
init|=
operator|(
name|Hint
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ca
operator|!=
literal|null
operator|&&
name|ca
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
operator|.
name|equals
argument_list|(
name|h
operator|.
name|getClassId
argument_list|()
argument_list|)
condition|)
name|newAssignment
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|conflictAssignments
operator|!=
literal|null
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
literal|"Suggestions.conflictAssignments"
argument_list|,
name|conflictAssignments
argument_list|)
expr_stmt|;
name|String
name|selectedInfo
init|=
name|getInfoTable
argument_list|(
name|model
operator|.
name|getSimpleMode
argument_list|()
argument_list|,
name|request
argument_list|,
name|model
operator|.
name|getEmptySuggestion
argument_list|()
argument_list|,
operator|(
name|model
operator|.
name|getSelectedSuggestion
argument_list|()
operator|!=
literal|null
condition|?
name|model
operator|.
name|getSelectedSuggestion
argument_list|()
else|:
name|model
operator|.
name|getCurrentSuggestion
argument_list|()
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|selectedInfo
operator|!=
literal|null
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
literal|"Suggestions.selectedInfo"
argument_list|,
name|selectedInfo
argument_list|)
expr_stmt|;
name|String
name|suggestions
init|=
name|getSuggestionsTable
argument_list|(
name|model
operator|.
name|getSimpleMode
argument_list|()
argument_list|,
name|request
argument_list|,
name|sessionContext
argument_list|,
name|solver
argument_list|,
literal|"Suggestions"
argument_list|,
literal|"Suggestion"
argument_list|,
name|model
argument_list|,
name|model
operator|.
name|getSuggestions
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|suggestions
operator|!=
literal|null
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
literal|"Suggestions.suggestions"
argument_list|,
name|suggestions
argument_list|)
expr_stmt|;
name|String
name|message
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|model
operator|.
name|getTimeoutReached
argument_list|()
condition|)
block|{
name|message
operator|=
literal|"("
operator|+
operator|(
name|model
operator|.
name|getTimeout
argument_list|()
operator|/
literal|1000l
operator|)
operator|+
literal|"s timeout reached, "
operator|+
name|model
operator|.
name|getNrCombinationsConsidered
argument_list|()
operator|+
literal|" possibilities up to "
operator|+
name|model
operator|.
name|getDepth
argument_list|()
operator|+
literal|" changes were considered, "
expr_stmt|;
block|}
else|else
block|{
name|message
operator|=
literal|"(all "
operator|+
name|model
operator|.
name|getNrCombinationsConsidered
argument_list|()
operator|+
literal|" possibilities up to "
operator|+
name|model
operator|.
name|getDepth
argument_list|()
operator|+
literal|" changes were considered, "
expr_stmt|;
block|}
if|if
condition|(
name|model
operator|.
name|getSuggestions
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|message
operator|+=
literal|"no suggestion found)"
expr_stmt|;
block|}
if|else if
condition|(
name|model
operator|.
name|getNrSolutions
argument_list|()
operator|>
name|model
operator|.
name|getSuggestions
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
name|message
operator|+=
literal|"top "
operator|+
name|model
operator|.
name|getSuggestions
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" of "
operator|+
name|model
operator|.
name|getNrSolutions
argument_list|()
operator|+
literal|" suggestions displayed)"
expr_stmt|;
block|}
else|else
block|{
name|message
operator|+=
name|model
operator|.
name|getSuggestions
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" suggestions displayed)"
expr_stmt|;
block|}
if|if
condition|(
name|model
operator|.
name|getNrCombinationsConsidered
argument_list|()
operator|==
literal|0
condition|)
name|request
operator|.
name|removeAttribute
argument_list|(
literal|"Suggestions.suggestions"
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"Suggestions.suggestionsMessage"
argument_list|,
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|model
operator|.
name|getTryAssignments
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|placements
init|=
name|getSuggestionsTable
argument_list|(
name|model
operator|.
name|getSimpleMode
argument_list|()
argument_list|,
name|request
argument_list|,
name|sessionContext
argument_list|,
name|solver
argument_list|,
literal|"Placements"
argument_list|,
literal|"Placement"
argument_list|,
name|model
argument_list|,
name|model
operator|.
name|getTryAssignments
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|placements
operator|!=
literal|null
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
literal|"Suggestions.placements"
argument_list|,
name|placements
argument_list|)
expr_stmt|;
if|if
condition|(
name|model
operator|.
name|getNrTries
argument_list|()
operator|>
name|model
operator|.
name|getTryAssignments
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
name|message
operator|=
literal|"(top "
operator|+
name|model
operator|.
name|getTryAssignments
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" of "
operator|+
name|model
operator|.
name|getNrTries
argument_list|()
operator|+
literal|" placements displayed)"
expr_stmt|;
block|}
else|else
block|{
name|message
operator|=
literal|"(all "
operator|+
name|model
operator|.
name|getTryAssignments
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" placements displayed)"
expr_stmt|;
block|}
name|request
operator|.
name|setAttribute
argument_list|(
literal|"Suggestions.placementsMessage"
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|model
operator|.
name|getNrTries
argument_list|()
operator|==
literal|0
condition|)
name|request
operator|.
name|removeAttribute
argument_list|(
literal|"Suggestions.placements"
argument_list|)
expr_stmt|;
if|if
condition|(
name|model
operator|.
name|getConfTable
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|model
operator|.
name|getConfTable
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|request
operator|.
name|setAttribute
argument_list|(
literal|"Suggestions.confTable"
argument_list|,
name|getConfTable
argument_list|(
name|model
operator|.
name|getSimpleMode
argument_list|()
argument_list|,
name|request
argument_list|,
name|sessionContext
argument_list|,
name|solver
argument_list|,
name|model
argument_list|,
name|model
operator|.
name|getConfTable
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ca
operator|!=
literal|null
condition|)
block|{
name|String
name|assignment
init|=
name|getAssignmentTable
argument_list|(
name|sessionContext
argument_list|,
name|solver
argument_list|,
name|ca
argument_list|,
literal|true
argument_list|,
name|newAssignment
argument_list|)
decl_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"Suggestions.assignment"
argument_list|,
literal|"<a href='classDetail.do?cid="
operator|+
name|ca
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
operator|+
literal|"' target='_blank' class='l8' "
operator|+
literal|"title='Open Class Detail for "
operator|+
name|ca
operator|.
name|getClassName
argument_list|()
operator|+
literal|" in a new window.'>"
operator|+
name|ca
operator|.
name|getClassName
argument_list|()
operator|+
literal|"</a>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|assignment
operator|!=
literal|null
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
literal|"Suggestions.assignmentInfo"
argument_list|,
name|assignment
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myForm
operator|.
name|getId
argument_list|()
operator|!=
literal|null
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
literal|"Suggestions.id"
argument_list|,
name|myForm
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showSuggestions"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|String
name|getHintTable
parameter_list|(
name|boolean
name|simple
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|SolverProxy
name|solver
parameter_list|,
name|String
name|name
parameter_list|,
name|Collection
name|hints
parameter_list|,
name|Hashtable
name|confInfo
parameter_list|)
block|{
if|if
condition|(
name|hints
operator|==
literal|null
operator|||
name|hints
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
name|boolean
name|hasConfInfo
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|confInfo
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|hints
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Hint
name|hint
init|=
operator|(
name|Hint
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|confInfo
operator|.
name|get
argument_list|(
name|hint
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|hasConfInfo
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
name|boolean
name|remove
init|=
literal|"Selected Assignments"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|WebTable
operator|.
name|setOrder
argument_list|(
name|context
argument_list|,
literal|"suggestions.hints.ord"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"hord"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|WebTable
name|webTable
init|=
operator|(
name|hasConfInfo
condition|?
operator|(
name|simple
condition|?
operator|new
name|WebTable
argument_list|(
literal|6
argument_list|,
name|name
argument_list|,
literal|"suggestions.do?hord=%%&noCacheTS="
operator|+
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Class"
block|,
literal|"Date"
block|,
literal|"Time"
block|,
literal|"Room"
block|,
literal|"Students"
block|,
literal|"Constraint"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
literal|null
argument_list|)
else|:
operator|new
name|WebTable
argument_list|(
literal|15
argument_list|,
name|name
argument_list|,
literal|"suggestions.do?hord=%%&noCacheTS="
operator|+
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Class"
block|,
literal|"Date"
block|,
literal|"Time"
block|,
literal|"Room"
block|,
literal|"Std"
block|,
literal|"Tm"
block|,
literal|"Rm"
block|,
literal|"Dist"
block|,
literal|"Ins"
block|,
literal|"Usl"
block|,
literal|"Big"
block|,
literal|"Dept"
block|,
literal|"Subp"
block|,
literal|"Pert"
block|,
literal|"Constraint"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"left"
block|}
argument_list|,
literal|null
argument_list|)
operator|)
else|:
operator|(
name|simple
condition|?
operator|new
name|WebTable
argument_list|(
literal|6
argument_list|,
name|name
argument_list|,
literal|"suggestions.do?hord=%%&noCacheTS="
operator|+
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Class"
block|,
literal|"Date"
block|,
literal|"Time"
block|,
literal|"Room"
block|,
literal|"Students"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
literal|null
argument_list|)
else|:
operator|new
name|WebTable
argument_list|(
literal|15
argument_list|,
name|name
argument_list|,
literal|"suggestions.do?hord=%%&noCacheTS="
operator|+
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Class"
block|,
literal|"Date"
block|,
literal|"Time"
block|,
literal|"Room"
block|,
literal|"Std"
block|,
literal|"Tm"
block|,
literal|"Rm"
block|,
literal|"Dist"
block|,
literal|"Ins"
block|,
literal|"Usl"
block|,
literal|"Big"
block|,
literal|"Dept"
block|,
literal|"Subp"
block|,
literal|"Pert"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|}
argument_list|,
literal|null
argument_list|)
operator|)
operator|)
decl_stmt|;
name|webTable
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap"
argument_list|)
expr_stmt|;
try|try
block|{
name|int
name|lines
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|hints
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Hint
name|hint
init|=
operator|(
name|Hint
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|lines
operator|++
expr_stmt|;
name|String
name|conf
init|=
operator|(
name|confInfo
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|String
operator|)
name|confInfo
operator|.
name|get
argument_list|(
name|hint
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
name|conf
operator|=
literal|""
expr_stmt|;
name|ClassAssignmentDetails
name|ca
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|"Conflicting Assignments"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
name|ca
operator|=
name|hint
operator|.
name|getDetailsUnassign
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
literal|false
argument_list|)
expr_stmt|;
else|else
name|ca
operator|=
name|hint
operator|.
name|getDetails
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|String
name|remLink
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|remove
condition|)
name|remLink
operator|=
literal|"<a href='suggestions.do?id="
operator|+
name|ca
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
operator|+
literal|"&op=Remove&noCacheTS="
operator|+
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
operator|+
literal|"'><img src='images/action_delete.png' border='0'></a>&nbsp;"
expr_stmt|;
name|String
name|line
index|[]
init|=
operator|new
name|String
index|[
name|hasConfInfo
condition|?
operator|(
name|simple
condition|?
literal|6
else|:
literal|15
operator|)
else|:
operator|(
name|simple
condition|?
literal|5
else|:
literal|14
operator|)
index|]
decl_stmt|;
name|Comparable
name|cmp
index|[]
init|=
operator|new
name|Comparable
index|[
name|hasConfInfo
condition|?
operator|(
name|simple
condition|?
literal|6
else|:
literal|15
operator|)
else|:
operator|(
name|simple
condition|?
literal|5
else|:
literal|14
operator|)
index|]
decl_stmt|;
name|int
name|i1
init|=
literal|0
decl_stmt|,
name|i2
init|=
literal|0
decl_stmt|;
name|line
index|[
name|i1
operator|++
index|]
operator|=
operator|(
name|remLink
operator|==
literal|null
condition|?
literal|""
else|:
name|remLink
operator|)
operator|+
name|ca
operator|.
name|getClassHtml
argument_list|()
expr_stmt|;
name|line
index|[
name|i1
operator|++
index|]
operator|=
name|ca
operator|.
name|getDaysHtml
argument_list|()
expr_stmt|;
name|line
index|[
name|i1
operator|++
index|]
operator|=
name|ca
operator|.
name|getTimeHtml
argument_list|()
expr_stmt|;
name|line
index|[
name|i1
operator|++
index|]
operator|=
name|ca
operator|.
name|getRoomHtml
argument_list|()
expr_stmt|;
name|line
index|[
name|i1
operator|++
index|]
operator|=
name|ca
operator|.
name|getNrStudentConflicts
argument_list|()
expr_stmt|;
name|cmp
index|[
name|i2
operator|++
index|]
operator|=
name|ca
expr_stmt|;
name|cmp
index|[
name|i2
operator|++
index|]
operator|=
name|ca
operator|.
name|getDaysName
argument_list|()
expr_stmt|;
name|cmp
index|[
name|i2
operator|++
index|]
operator|=
name|ca
operator|.
name|getTimeName
argument_list|()
expr_stmt|;
name|cmp
index|[
name|i2
operator|++
index|]
operator|=
name|ca
operator|.
name|getRoomName
argument_list|()
expr_stmt|;
name|cmp
index|[
name|i2
operator|++
index|]
operator|=
name|ca
operator|.
name|getNrStudentConflictsCmp
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|simple
condition|)
block|{
name|line
index|[
name|i1
operator|++
index|]
operator|=
name|ca
operator|.
name|getTimePreference
argument_list|()
expr_stmt|;
name|line
index|[
name|i1
operator|++
index|]
operator|=
name|ca
operator|.
name|getRoomPreference
argument_list|()
expr_stmt|;
name|line
index|[
name|i1
operator|++
index|]
operator|=
name|ca
operator|.
name|getGroupConstraintPref
argument_list|()
expr_stmt|;
name|line
index|[
name|i1
operator|++
index|]
operator|=
name|ca
operator|.
name|getBtbInstructorPreference
argument_list|()
expr_stmt|;
name|line
index|[
name|i1
operator|++
index|]
operator|=
name|ca
operator|.
name|getUselessHalfHours
argument_list|()
expr_stmt|;
name|line
index|[
name|i1
operator|++
index|]
operator|=
name|ca
operator|.
name|getIsTooBig
argument_list|()
expr_stmt|;
name|line
index|[
name|i1
operator|++
index|]
operator|=
name|ca
operator|.
name|getDeptBalancPenalty
argument_list|()
expr_stmt|;
name|line
index|[
name|i1
operator|++
index|]
operator|=
name|ca
operator|.
name|getSpreadPenalty
argument_list|()
expr_stmt|;
name|line
index|[
name|i1
operator|++
index|]
operator|=
name|ca
operator|.
name|getPertPenalty
argument_list|()
expr_stmt|;
name|cmp
index|[
name|i2
operator|++
index|]
operator|=
name|ca
operator|.
name|getTimePreferenceCmp
argument_list|()
expr_stmt|;
name|cmp
index|[
name|i2
operator|++
index|]
operator|=
name|ca
operator|.
name|getRoomPreferenceCmp
argument_list|()
expr_stmt|;
name|cmp
index|[
name|i2
operator|++
index|]
operator|=
name|ca
operator|.
name|getGroupConstraintPrefCmp
argument_list|()
expr_stmt|;
name|cmp
index|[
name|i2
operator|++
index|]
operator|=
name|ca
operator|.
name|getBtbInstructorPreferenceCmp
argument_list|()
expr_stmt|;
name|cmp
index|[
name|i2
operator|++
index|]
operator|=
name|ca
operator|.
name|getUselessHalfHoursCmp
argument_list|()
expr_stmt|;
name|cmp
index|[
name|i2
operator|++
index|]
operator|=
name|ca
operator|.
name|getIsTooBigCmp
argument_list|()
expr_stmt|;
name|cmp
index|[
name|i2
operator|++
index|]
operator|=
name|ca
operator|.
name|getSpreadPenaltyCmp
argument_list|()
expr_stmt|;
name|cmp
index|[
name|i2
operator|++
index|]
operator|=
name|ca
operator|.
name|getDeptBalancPenaltyCmp
argument_list|()
expr_stmt|;
name|cmp
index|[
name|i2
operator|++
index|]
operator|=
name|ca
operator|.
name|getPertPenaltyCmp
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|hasConfInfo
condition|)
block|{
name|line
index|[
name|i1
operator|++
index|]
operator|=
name|conf
expr_stmt|;
name|cmp
index|[
name|i2
operator|++
index|]
operator|=
name|conf
expr_stmt|;
block|}
name|webTable
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
name|line
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lines
operator|==
literal|0
condition|)
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|webTable
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"<font color='red'>ERROR:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"</font>"
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|webTable
operator|.
name|printTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|context
argument_list|,
literal|"suggestions.hints.ord"
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|String
name|getInfoTable
parameter_list|(
name|boolean
name|simple
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|Suggestion
name|oldSuggestion
parameter_list|,
name|Suggestion
name|newSuggestion
parameter_list|)
block|{
if|if
condition|(
name|oldSuggestion
operator|==
literal|null
operator|||
name|newSuggestion
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<TR><TD width='5%' nowrap>Not-assigned classes:</TD><TD width='2%' nowrap>"
operator|+
name|ClassAssignmentDetails
operator|.
name|dispNumber
argument_list|(
name|newSuggestion
operator|.
name|getUnassignedVariables
argument_list|()
argument_list|,
name|oldSuggestion
operator|.
name|getUnassignedVariables
argument_list|()
argument_list|)
operator|+
literal|"</TD></TR>"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|simple
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<TR><TD>Student conflicts:</TD><TD nowrap>"
operator|+
name|ClassAssignmentDetails
operator|.
name|dispNumber
argument_list|(
name|newSuggestion
operator|.
name|getViolatedStudentConflicts
argument_list|()
argument_list|,
name|oldSuggestion
operator|.
name|getViolatedStudentConflicts
argument_list|()
argument_list|)
operator|+
literal|"</TD></TR>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|newSuggestion
operator|.
name|getCommitedStudentConflicts
argument_list|()
operator|!=
literal|0
operator|||
name|oldSuggestion
operator|.
name|getCommitedStudentConflicts
argument_list|()
operator|!=
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"<TR><TD>Commited student conflicts:</TD><TD nowrap>"
operator|+
name|ClassAssignmentDetails
operator|.
name|dispNumber
argument_list|(
name|newSuggestion
operator|.
name|getCommitedStudentConflicts
argument_list|()
argument_list|,
name|oldSuggestion
operator|.
name|getCommitedStudentConflicts
argument_list|()
argument_list|)
operator|+
literal|"</TD></TR>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<TR><TD>Distance student conflicts:</TD><TD nowrap>"
operator|+
name|ClassAssignmentDetails
operator|.
name|dispNumber
argument_list|(
name|newSuggestion
operator|.
name|getDistanceStudentConflicts
argument_list|()
argument_list|,
name|oldSuggestion
operator|.
name|getDistanceStudentConflicts
argument_list|()
argument_list|)
operator|+
literal|"</TD></TR>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<TR><TD>Hard student conflicts:</TD><TD nowrap>"
operator|+
name|ClassAssignmentDetails
operator|.
name|dispNumber
argument_list|(
name|newSuggestion
operator|.
name|getHardStudentConflicts
argument_list|()
argument_list|,
name|oldSuggestion
operator|.
name|getHardStudentConflicts
argument_list|()
argument_list|)
operator|+
literal|"</TD></TR>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<TR><TD>Time preferences:</TD><TD nowrap>"
operator|+
name|ClassAssignmentDetails
operator|.
name|dispNumber
argument_list|(
name|newSuggestion
operator|.
name|getGlobalTimePreference
argument_list|()
argument_list|,
name|oldSuggestion
operator|.
name|getGlobalTimePreference
argument_list|()
argument_list|)
operator|+
literal|"</TD></TR>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<TR><TD>Room preferences:</TD><TD nowrap>"
operator|+
name|ClassAssignmentDetails
operator|.
name|dispNumber
argument_list|(
name|newSuggestion
operator|.
name|getGlobalRoomPreference
argument_list|()
argument_list|,
name|oldSuggestion
operator|.
name|getGlobalRoomPreference
argument_list|()
argument_list|)
operator|+
literal|"</TD></TR>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<TR><TD>Distribution preferences:</TD><TD nowrap>"
operator|+
name|ClassAssignmentDetails
operator|.
name|dispNumber
argument_list|(
name|newSuggestion
operator|.
name|getGlobalGroupConstraintPreference
argument_list|()
argument_list|,
name|oldSuggestion
operator|.
name|getGlobalGroupConstraintPreference
argument_list|()
argument_list|)
operator|+
literal|"</TD></TR>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<TR><TD nowrap>Back-to-back instructor preferences:</TD><TD nowrap>"
operator|+
name|ClassAssignmentDetails
operator|.
name|dispNumber
argument_list|(
name|newSuggestion
operator|.
name|getInstructorDistancePreference
argument_list|()
argument_list|,
name|oldSuggestion
operator|.
name|getInstructorDistancePreference
argument_list|()
argument_list|)
operator|+
literal|"</TD></TR>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<TR><TD>Too big rooms:</TD><TD nowrap>"
operator|+
name|ClassAssignmentDetails
operator|.
name|dispNumber
argument_list|(
name|newSuggestion
operator|.
name|getTooBigRooms
argument_list|()
argument_list|,
name|oldSuggestion
operator|.
name|getTooBigRooms
argument_list|()
argument_list|)
operator|+
literal|"</TD></TR>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<TR><TD>Useless half-hours:</TD><TD nowrap>"
operator|+
name|ClassAssignmentDetails
operator|.
name|dispNumber
argument_list|(
name|newSuggestion
operator|.
name|getUselessSlots
argument_list|()
argument_list|,
name|oldSuggestion
operator|.
name|getUselessSlots
argument_list|()
argument_list|)
operator|+
literal|"</TD></TR>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<TR><TD>Department balancing penalty:</TD><TD nowrap>"
operator|+
name|ClassAssignmentDetails
operator|.
name|dispNumber
argument_list|(
name|newSuggestion
operator|.
name|getDepartmentSpreadPenalty
argument_list|()
argument_list|,
name|oldSuggestion
operator|.
name|getDepartmentSpreadPenalty
argument_list|()
argument_list|)
operator|+
literal|"</TD></TR>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<TR><TD>Same subpart balancing penalty:</TD><TD nowrap>"
operator|+
name|ClassAssignmentDetails
operator|.
name|dispNumber
argument_list|(
name|newSuggestion
operator|.
name|getSpreadPenalty
argument_list|()
argument_list|,
name|oldSuggestion
operator|.
name|getSpreadPenalty
argument_list|()
argument_list|)
operator|+
literal|"</TD></TR>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<TR><TD>Perturbation penalty:</TD><TD nowrap>"
operator|+
name|ClassAssignmentDetails
operator|.
name|dispNumber
argument_list|(
name|newSuggestion
operator|.
name|getPerturbationPenalty
argument_list|()
argument_list|,
name|oldSuggestion
operator|.
name|getPerturbationPenalty
argument_list|()
argument_list|)
operator|+
literal|"</TD></TR>"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"<TR><TD nowrap>Overall solution value:</TD><TD nowrap>"
operator|+
name|ClassAssignmentDetails
operator|.
name|dispNumber
argument_list|(
name|newSuggestion
operator|.
name|getValue
argument_list|()
argument_list|,
name|oldSuggestion
operator|.
name|getValue
argument_list|()
argument_list|)
operator|+
literal|"</TD></TR>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|newSuggestion
operator|.
name|hasStudentConflictInfo
argument_list|()
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"<TR><TD nowrap>Student conflicts:</TD><TD colspan='2' nowrap>"
operator|+
name|newSuggestion
operator|.
name|getStudentConflictInfosAsHtml
argument_list|(
name|sessionContext
argument_list|,
name|courseTimetablingSolverService
operator|.
name|getSolver
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
operator|+
literal|"</TD></TR>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|newSuggestion
operator|.
name|hasDistributionConstraintInfo
argument_list|()
operator|||
name|newSuggestion
operator|.
name|hasBtbInstructorInfo
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<TR><TD nowrap>Violated constraints:</TD><TD colspan='2' nowrap>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|newSuggestion
operator|.
name|hasDistributionConstraintInfo
argument_list|()
condition|)
name|sb
operator|.
name|append
argument_list|(
name|newSuggestion
operator|.
name|getDistributionConstraintInfoAsHtml
argument_list|(
name|sessionContext
argument_list|,
name|courseTimetablingSolverService
operator|.
name|getSolver
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|newSuggestion
operator|.
name|hasDistributionConstraintInfo
argument_list|()
operator|&&
name|newSuggestion
operator|.
name|hasBtbInstructorInfo
argument_list|()
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"<BR>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|newSuggestion
operator|.
name|hasBtbInstructorInfo
argument_list|()
condition|)
name|sb
operator|.
name|append
argument_list|(
name|newSuggestion
operator|.
name|getBtbInstructorInfosAsHtml
argument_list|(
name|sessionContext
argument_list|,
name|courseTimetablingSolverService
operator|.
name|getSolver
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</TD></TR>"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|getSuggestionsTable
parameter_list|(
name|boolean
name|simple
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|SolverProxy
name|solver
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|op
parameter_list|,
name|SuggestionsModel
name|model
parameter_list|,
name|Collection
name|suggestions
parameter_list|)
block|{
comment|//if (suggestions.isEmpty()) return null;
name|WebTable
operator|.
name|setOrder
argument_list|(
name|context
argument_list|,
literal|"suggestions.suggestions."
operator|+
name|op
operator|+
literal|".ord"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
name|op
operator|+
literal|"_ord"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|WebTable
name|webTable
init|=
operator|(
name|simple
condition|?
operator|new
name|WebTable
argument_list|(
literal|6
argument_list|,
name|name
argument_list|,
literal|"suggestions.do?"
operator|+
name|op
operator|+
literal|"_ord=%%&noCacheTS="
operator|+
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Score"
block|,
literal|"Class"
block|,
literal|"Date"
block|,
literal|"Time"
block|,
literal|"Room"
block|,
literal|"Students"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
literal|null
argument_list|)
else|:
operator|new
name|WebTable
argument_list|(
literal|16
argument_list|,
name|name
argument_list|,
literal|"suggestions.do?"
operator|+
name|op
operator|+
literal|"_ord=%%&noCacheTS="
operator|+
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Score"
block|,
literal|"Class"
block|,
literal|"Date"
block|,
literal|"Time"
block|,
literal|"Room"
block|,
literal|"Conf"
block|,
literal|"Std"
block|,
literal|"Tm"
block|,
literal|"Rm"
block|,
literal|"Dist"
block|,
literal|"Ins"
block|,
literal|"Usl"
block|,
literal|"Big"
block|,
literal|"Dept"
block|,
literal|"Subp"
block|,
literal|"Pert"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|}
argument_list|,
literal|null
argument_list|)
operator|)
decl_stmt|;
name|webTable
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap"
argument_list|)
expr_stmt|;
try|try
block|{
name|Suggestion
name|empty
init|=
name|model
operator|.
name|getEmptySuggestion
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|suggestions
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|Suggestion
name|s
init|=
operator|(
name|Suggestion
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|StringBuffer
name|classes
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"<table colspan='0' rowspan='0' border='0'>"
argument_list|)
decl_stmt|;
name|StringBuffer
name|classesSort
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|StringBuffer
name|rooms
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"<table colspan='0' rowspan='0' border='0'>"
argument_list|)
decl_stmt|;
name|StringBuffer
name|times
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"<table colspan='0' rowspan='0' border='0'>"
argument_list|)
decl_stmt|;
name|StringBuffer
name|roomsSort
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|StringBuffer
name|timesSort
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|StringBuffer
name|dates
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"<table colspan='0' rowspan='0' border='0'>"
argument_list|)
decl_stmt|;
name|StringBuffer
name|datesSort
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|s
operator|.
name|getDifferentAssignments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Hint
name|hint
init|=
operator|(
name|Hint
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|model
operator|.
name|getHints
argument_list|()
operator|.
name|contains
argument_list|(
name|hint
argument_list|)
condition|)
block|{
comment|//do not list stuff from hint
if|if
condition|(
operator|!
literal|"Placement"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
operator|!
name|model
operator|.
name|getClassId
argument_list|()
operator|.
name|equals
argument_list|(
name|hint
operator|.
name|getClassId
argument_list|()
argument_list|)
condition|)
continue|continue;
block|}
name|ClassAssignmentDetails
name|ca
init|=
name|hint
operator|.
name|getDetails
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|classesSort
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|classesSort
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|datesSort
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|roomsSort
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|timesSort
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
block|}
name|classes
operator|.
name|append
argument_list|(
literal|"<tr valign='top' height='25'><td nowrap>"
argument_list|)
expr_stmt|;
name|rooms
operator|.
name|append
argument_list|(
literal|"<tr valign='top' height='25'><td nowrap>"
argument_list|)
expr_stmt|;
name|times
operator|.
name|append
argument_list|(
literal|"<tr valign='top' height='25'><td nowrap>"
argument_list|)
expr_stmt|;
name|dates
operator|.
name|append
argument_list|(
literal|"<tr valign='top' height='25'><td nowrap>"
argument_list|)
expr_stmt|;
name|classes
operator|.
name|append
argument_list|(
name|ca
operator|.
name|getClassHtml
argument_list|()
argument_list|)
expr_stmt|;
name|classesSort
operator|.
name|append
argument_list|(
name|ca
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
name|times
operator|.
name|append
argument_list|(
name|ca
operator|.
name|getTimeHtml
argument_list|()
argument_list|)
expr_stmt|;
name|rooms
operator|.
name|append
argument_list|(
name|ca
operator|.
name|getRoomHtml
argument_list|()
argument_list|)
expr_stmt|;
name|dates
operator|.
name|append
argument_list|(
name|ca
operator|.
name|getDaysHtml
argument_list|()
argument_list|)
expr_stmt|;
name|timesSort
operator|.
name|append
argument_list|(
name|ca
operator|.
name|getTimeNoHtml
argument_list|()
argument_list|)
expr_stmt|;
name|roomsSort
operator|.
name|append
argument_list|(
name|ca
operator|.
name|getRoomNoHtml
argument_list|()
argument_list|)
expr_stmt|;
name|datesSort
operator|.
name|append
argument_list|(
name|ca
operator|.
name|getDaysName
argument_list|()
argument_list|)
expr_stmt|;
name|classes
operator|.
name|append
argument_list|(
literal|"</td></tr>"
argument_list|)
expr_stmt|;
name|rooms
operator|.
name|append
argument_list|(
literal|"</td></tr>"
argument_list|)
expr_stmt|;
name|times
operator|.
name|append
argument_list|(
literal|"</td></tr>"
argument_list|)
expr_stmt|;
name|dates
operator|.
name|append
argument_list|(
literal|"</td></tr>"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|j
init|=
name|s
operator|.
name|getUnresolvedConflicts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Hint
name|hint
init|=
operator|(
name|Hint
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|model
operator|.
name|getHints
argument_list|()
operator|.
name|contains
argument_list|(
name|hint
argument_list|)
condition|)
continue|continue;
comment|//do not list stuff from hint
name|ClassAssignmentDetails
name|ca
init|=
name|hint
operator|.
name|getDetailsUnassign
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|classesSort
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|classesSort
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|datesSort
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|roomsSort
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|timesSort
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
block|}
name|classes
operator|.
name|append
argument_list|(
literal|"<tr valign='top' height='25'><td nowrap>"
argument_list|)
expr_stmt|;
name|classesSort
operator|.
name|append
argument_list|(
name|ca
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
name|rooms
operator|.
name|append
argument_list|(
literal|"<tr valign='top' height='25'><td nowrap>"
argument_list|)
expr_stmt|;
name|times
operator|.
name|append
argument_list|(
literal|"<tr valign='top' height='25'><td nowrap>"
argument_list|)
expr_stmt|;
name|dates
operator|.
name|append
argument_list|(
literal|"<tr valign='top' height='25'><td nowrap>"
argument_list|)
expr_stmt|;
name|classes
operator|.
name|append
argument_list|(
name|ca
operator|.
name|getClassHtml
argument_list|()
argument_list|)
expr_stmt|;
name|times
operator|.
name|append
argument_list|(
name|ca
operator|.
name|getTimeHtml
argument_list|()
argument_list|)
expr_stmt|;
name|rooms
operator|.
name|append
argument_list|(
name|ca
operator|.
name|getRoomHtml
argument_list|()
argument_list|)
expr_stmt|;
name|dates
operator|.
name|append
argument_list|(
name|ca
operator|.
name|getDaysHtml
argument_list|()
argument_list|)
expr_stmt|;
name|timesSort
operator|.
name|append
argument_list|(
name|ca
operator|.
name|getTimeNoHtml
argument_list|()
argument_list|)
expr_stmt|;
name|roomsSort
operator|.
name|append
argument_list|(
name|ca
operator|.
name|getRoomNoHtml
argument_list|()
argument_list|)
expr_stmt|;
name|datesSort
operator|.
name|append
argument_list|(
name|ca
operator|.
name|getDaysName
argument_list|()
argument_list|)
expr_stmt|;
name|classes
operator|.
name|append
argument_list|(
literal|"</td></tr>"
argument_list|)
expr_stmt|;
name|rooms
operator|.
name|append
argument_list|(
literal|"</td></tr>"
argument_list|)
expr_stmt|;
name|times
operator|.
name|append
argument_list|(
literal|"</td></tr>"
argument_list|)
expr_stmt|;
name|dates
operator|.
name|append
argument_list|(
literal|"</td></tr>"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|classesSort
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
continue|continue;
name|classes
operator|.
name|append
argument_list|(
literal|"</table>"
argument_list|)
expr_stmt|;
name|rooms
operator|.
name|append
argument_list|(
literal|"</table>"
argument_list|)
expr_stmt|;
name|times
operator|.
name|append
argument_list|(
literal|"</table>"
argument_list|)
expr_stmt|;
name|dates
operator|.
name|append
argument_list|(
literal|"</table>"
argument_list|)
expr_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|getCommitedStudentConflicts
argument_list|()
operator|-
name|empty
operator|.
name|getCommitedStudentConflicts
argument_list|()
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
expr_stmt|;
else|else
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|ClassAssignmentDetails
operator|.
name|dispNumber
argument_list|(
literal|"c"
argument_list|,
name|s
operator|.
name|getCommitedStudentConflicts
argument_list|()
operator|-
name|empty
operator|.
name|getCommitedStudentConflicts
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|s
operator|.
name|getDistanceStudentConflicts
argument_list|()
operator|-
name|empty
operator|.
name|getDistanceStudentConflicts
argument_list|()
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
expr_stmt|;
else|else
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|ClassAssignmentDetails
operator|.
name|dispNumber
argument_list|(
literal|"d"
argument_list|,
name|s
operator|.
name|getDistanceStudentConflicts
argument_list|()
operator|-
name|empty
operator|.
name|getDistanceStudentConflicts
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|s
operator|.
name|getHardStudentConflicts
argument_list|()
operator|-
name|empty
operator|.
name|getHardStudentConflicts
argument_list|()
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
expr_stmt|;
else|else
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|ClassAssignmentDetails
operator|.
name|dispNumber
argument_list|(
literal|"h"
argument_list|,
name|s
operator|.
name|getHardStudentConflicts
argument_list|()
operator|-
name|empty
operator|.
name|getHardStudentConflicts
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|simple
condition|)
name|webTable
operator|.
name|addLine
argument_list|(
literal|"onClick=\"document.location='suggestions.do?id="
operator|+
name|idx
operator|+
literal|"&op="
operator|+
name|op
operator|+
literal|"&noCacheTS="
operator|+
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
operator|+
literal|"';\""
argument_list|,
operator|new
name|String
index|[]
block|{
name|ClassAssignmentDetails
operator|.
name|dispNumber
argument_list|(
name|s
operator|.
name|getValue
argument_list|()
operator|-
name|empty
operator|.
name|getValue
argument_list|()
argument_list|)
block|,
name|classes
operator|.
name|toString
argument_list|()
block|,
name|dates
operator|.
name|toString
argument_list|()
block|,
name|times
operator|.
name|toString
argument_list|()
block|,
name|rooms
operator|.
name|toString
argument_list|()
block|,
name|ClassAssignmentDetails
operator|.
name|dispNumber
argument_list|(
name|s
operator|.
name|getViolatedStudentConflicts
argument_list|()
operator|-
name|empty
operator|.
name|getViolatedStudentConflicts
argument_list|()
argument_list|)
operator|+
name|sb
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|Double
argument_list|(
name|s
operator|.
name|getValue
argument_list|()
operator|-
name|empty
operator|.
name|getValue
argument_list|()
argument_list|)
block|,
name|classesSort
operator|.
name|toString
argument_list|()
block|,
name|datesSort
operator|.
name|toString
argument_list|()
block|,
name|timesSort
operator|.
name|toString
argument_list|()
block|,
name|roomsSort
operator|.
name|toString
argument_list|()
block|,
operator|new
name|Long
argument_list|(
name|s
operator|.
name|getViolatedStudentConflicts
argument_list|()
operator|-
name|empty
operator|.
name|getViolatedStudentConflicts
argument_list|()
argument_list|)
block|}
argument_list|)
expr_stmt|;
else|else
name|webTable
operator|.
name|addLine
argument_list|(
literal|"onClick=\"document.location='suggestions.do?id="
operator|+
name|idx
operator|+
literal|"&op="
operator|+
name|op
operator|+
literal|"&noCacheTS="
operator|+
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
operator|+
literal|"';\""
argument_list|,
operator|new
name|String
index|[]
block|{
name|ClassAssignmentDetails
operator|.
name|dispNumber
argument_list|(
name|s
operator|.
name|getValue
argument_list|()
operator|-
name|empty
operator|.
name|getValue
argument_list|()
argument_list|)
block|,
name|classes
operator|.
name|toString
argument_list|()
block|,
name|dates
operator|.
name|toString
argument_list|()
block|,
name|times
operator|.
name|toString
argument_list|()
block|,
name|rooms
operator|.
name|toString
argument_list|()
block|,
name|ClassAssignmentDetails
operator|.
name|dispNumber
argument_list|(
name|s
operator|.
name|getUnassignedVariables
argument_list|()
operator|-
name|empty
operator|.
name|getUnassignedVariables
argument_list|()
argument_list|)
block|,
name|ClassAssignmentDetails
operator|.
name|dispNumber
argument_list|(
name|s
operator|.
name|getViolatedStudentConflicts
argument_list|()
operator|-
name|empty
operator|.
name|getViolatedStudentConflicts
argument_list|()
argument_list|)
operator|+
name|sb
block|,
name|ClassAssignmentDetails
operator|.
name|dispNumber
argument_list|(
name|s
operator|.
name|getGlobalTimePreference
argument_list|()
operator|-
name|empty
operator|.
name|getGlobalTimePreference
argument_list|()
argument_list|)
block|,
name|ClassAssignmentDetails
operator|.
name|dispNumber
argument_list|(
name|s
operator|.
name|getGlobalRoomPreference
argument_list|()
operator|-
name|empty
operator|.
name|getGlobalRoomPreference
argument_list|()
argument_list|)
block|,
name|ClassAssignmentDetails
operator|.
name|dispNumber
argument_list|(
name|s
operator|.
name|getGlobalGroupConstraintPreference
argument_list|()
operator|-
name|empty
operator|.
name|getGlobalGroupConstraintPreference
argument_list|()
argument_list|)
block|,
name|ClassAssignmentDetails
operator|.
name|dispNumber
argument_list|(
name|s
operator|.
name|getInstructorDistancePreference
argument_list|()
operator|-
name|empty
operator|.
name|getInstructorDistancePreference
argument_list|()
argument_list|)
block|,
name|ClassAssignmentDetails
operator|.
name|dispNumber
argument_list|(
name|s
operator|.
name|getUselessSlots
argument_list|()
operator|-
name|empty
operator|.
name|getUselessSlots
argument_list|()
argument_list|)
block|,
name|ClassAssignmentDetails
operator|.
name|dispNumber
argument_list|(
name|s
operator|.
name|getTooBigRooms
argument_list|()
operator|-
name|empty
operator|.
name|getTooBigRooms
argument_list|()
argument_list|)
block|,
name|ClassAssignmentDetails
operator|.
name|dispNumber
argument_list|(
name|s
operator|.
name|getDepartmentSpreadPenalty
argument_list|()
operator|-
name|empty
operator|.
name|getDepartmentSpreadPenalty
argument_list|()
argument_list|)
block|,
name|ClassAssignmentDetails
operator|.
name|dispNumber
argument_list|(
name|s
operator|.
name|getSpreadPenalty
argument_list|()
operator|-
name|empty
operator|.
name|getSpreadPenalty
argument_list|()
argument_list|)
block|,
name|ClassAssignmentDetails
operator|.
name|dispNumber
argument_list|(
name|s
operator|.
name|getPerturbationPenalty
argument_list|()
operator|-
name|empty
operator|.
name|getPerturbationPenalty
argument_list|()
argument_list|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|Double
argument_list|(
name|s
operator|.
name|getValue
argument_list|()
operator|-
name|empty
operator|.
name|getValue
argument_list|()
argument_list|)
block|,
name|classes
operator|.
name|toString
argument_list|()
block|,
name|datesSort
operator|.
name|toString
argument_list|()
block|,
name|timesSort
operator|.
name|toString
argument_list|()
block|,
name|roomsSort
operator|.
name|toString
argument_list|()
block|,
operator|new
name|Integer
argument_list|(
name|s
operator|.
name|getUnassignedVariables
argument_list|()
operator|-
name|empty
operator|.
name|getUnassignedVariables
argument_list|()
argument_list|)
block|,
operator|new
name|Long
argument_list|(
name|s
operator|.
name|getViolatedStudentConflicts
argument_list|()
operator|-
name|empty
operator|.
name|getViolatedStudentConflicts
argument_list|()
argument_list|)
block|,
operator|new
name|Double
argument_list|(
name|s
operator|.
name|getGlobalTimePreference
argument_list|()
operator|-
name|empty
operator|.
name|getGlobalTimePreference
argument_list|()
argument_list|)
block|,
operator|new
name|Long
argument_list|(
name|s
operator|.
name|getGlobalRoomPreference
argument_list|()
operator|-
name|empty
operator|.
name|getGlobalRoomPreference
argument_list|()
argument_list|)
block|,
operator|new
name|Long
argument_list|(
name|s
operator|.
name|getGlobalGroupConstraintPreference
argument_list|()
operator|-
name|empty
operator|.
name|getGlobalGroupConstraintPreference
argument_list|()
argument_list|)
block|,
operator|new
name|Long
argument_list|(
name|s
operator|.
name|getInstructorDistancePreference
argument_list|()
operator|-
name|empty
operator|.
name|getInstructorDistancePreference
argument_list|()
argument_list|)
block|,
operator|new
name|Long
argument_list|(
name|s
operator|.
name|getUselessSlots
argument_list|()
operator|-
name|empty
operator|.
name|getUselessSlots
argument_list|()
argument_list|)
block|,
operator|new
name|Long
argument_list|(
name|s
operator|.
name|getTooBigRooms
argument_list|()
operator|-
name|empty
operator|.
name|getTooBigRooms
argument_list|()
argument_list|)
block|,
operator|new
name|Double
argument_list|(
name|s
operator|.
name|getDepartmentSpreadPenalty
argument_list|()
operator|-
name|empty
operator|.
name|getDepartmentSpreadPenalty
argument_list|()
argument_list|)
block|,
operator|new
name|Double
argument_list|(
name|s
operator|.
name|getSpreadPenalty
argument_list|()
operator|-
name|empty
operator|.
name|getSpreadPenalty
argument_list|()
argument_list|)
block|,
operator|new
name|Double
argument_list|(
name|s
operator|.
name|getPerturbationPenalty
argument_list|()
operator|-
name|empty
operator|.
name|getPerturbationPenalty
argument_list|()
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|webTable
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"<font color='red'>ERROR:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"</font>"
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|webTable
operator|.
name|printTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|context
argument_list|,
literal|"suggestions.suggestions."
operator|+
name|op
operator|+
literal|".ord"
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getAssignmentTable
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|SolverProxy
name|solver
parameter_list|,
name|ClassAssignmentDetails
name|ca
parameter_list|,
name|boolean
name|dispLinks
parameter_list|)
block|{
return|return
name|getAssignmentTable
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
name|ca
argument_list|,
name|dispLinks
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getAssignmentTable
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|SolverProxy
name|solver
parameter_list|,
name|ClassAssignmentDetails
name|ca
parameter_list|,
name|boolean
name|dispLinks
parameter_list|,
name|Hint
name|selection
parameter_list|)
block|{
return|return
name|getAssignmentTable
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
name|ca
argument_list|,
name|dispLinks
argument_list|,
name|selection
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getAssignmentTable
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|SolverProxy
name|solver
parameter_list|,
name|ClassAssignmentDetails
name|ca
parameter_list|,
name|boolean
name|dispLinks
parameter_list|,
name|Hint
name|selection
parameter_list|,
name|boolean
name|dispDate
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|ca
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<TR><TD colspan='2'><I>"
operator|+
name|MSG
operator|.
name|messageNotAssigned
argument_list|()
operator|+
literal|"</I></TD></TR>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|dispDate
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"<TR><TD>"
operator|+
name|MSG
operator|.
name|propertyDate
argument_list|()
operator|+
literal|"</TD><TD>"
operator|+
name|ca
operator|.
name|getAssignedTime
argument_list|()
operator|.
name|getDatePatternHtml
argument_list|()
operator|+
literal|"</TD></TR>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<TR><TD>"
operator|+
name|MSG
operator|.
name|propertyTime
argument_list|()
operator|+
literal|"</TD><TD>"
operator|+
name|ca
operator|.
name|getAssignedTime
argument_list|()
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
operator|+
literal|"</TD></TR>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|ca
operator|.
name|getAssignedRoom
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<TR><TD>"
operator|+
name|MSG
operator|.
name|propertyRoom
argument_list|()
operator|+
literal|"</TD><TD>"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ca
operator|.
name|getAssignedRoom
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|ca
operator|.
name|getAssignedRoom
argument_list|()
index|[
name|i
index|]
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"</TD></TR>"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ca
operator|.
name|getInstructor
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<TR><TD>"
operator|+
name|MSG
operator|.
name|propertyInstructor
argument_list|()
operator|+
literal|"</TD><TD>"
operator|+
name|ca
operator|.
name|getInstructorHtml
argument_list|()
operator|+
literal|"</TD></TR>"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ca
operator|.
name|getBtbInstructors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<TR><TD></TD><TD>"
argument_list|)
expr_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|ca
operator|.
name|getBtbInstructors
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ClassAssignmentDetails
operator|.
name|BtbInstructorInfo
name|btb
init|=
operator|(
name|ClassAssignmentDetails
operator|.
name|BtbInstructorInfo
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|btb
operator|.
name|toHtml
argument_list|(
name|context
argument_list|,
name|solver
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"<br>"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"</TD></TR>"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ca
operator|.
name|getInitialTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<TR><TD nowrap>"
operator|+
name|MSG
operator|.
name|propertyInitialAssignment
argument_list|()
operator|+
literal|"</TD><TD>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|ca
operator|.
name|isInitial
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<I>"
operator|+
name|MSG
operator|.
name|messageThisOne
argument_list|()
operator|+
literal|"</I>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|ca
operator|.
name|getInitialTime
argument_list|()
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ca
operator|.
name|getInitialRoom
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|ca
operator|.
name|getInitialRoom
argument_list|()
index|[
name|i
index|]
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"</TD></TR>"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"</TD></TR>"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ca
operator|.
name|getStudentConflicts
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<TR><TD nowrap>"
operator|+
name|MSG
operator|.
name|propertyStudentConflicts
argument_list|()
operator|+
literal|"</TD><TD>"
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|ca
operator|.
name|getStudentConflicts
argument_list|()
argument_list|,
operator|new
name|ClassAssignmentDetails
operator|.
name|StudentConflictInfoComparator
argument_list|(
name|context
argument_list|,
name|solver
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|ca
operator|.
name|getStudentConflicts
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ClassAssignmentDetails
operator|.
name|StudentConflictInfo
name|std
init|=
operator|(
name|ClassAssignmentDetails
operator|.
name|StudentConflictInfo
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|std
operator|.
name|toHtml
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
name|dispLinks
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"<BR>"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"</TD></TR>"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ca
operator|.
name|hasViolatedGroupConstraint
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<TR><TD>"
operator|+
name|MSG
operator|.
name|propertyViolatedConstraints
argument_list|()
operator|+
literal|"</TD><TD>"
argument_list|)
expr_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|ca
operator|.
name|getGroupConstraints
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ClassAssignmentDetails
operator|.
name|DistributionInfo
name|gc
init|=
operator|(
name|ClassAssignmentDetails
operator|.
name|DistributionInfo
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|gc
operator|.
name|getInfo
argument_list|()
operator|.
name|isSatisfied
argument_list|()
condition|)
continue|continue;
name|sb
operator|.
name|append
argument_list|(
name|gc
operator|.
name|toHtml
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
name|dispLinks
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"<BR>"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"</TD></TR>"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dispLinks
condition|)
block|{
if|if
condition|(
operator|!
name|ca
operator|.
name|getRooms
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<TR><TD nowrap>"
operator|+
name|MSG
operator|.
name|propertyRoomLocations
argument_list|()
operator|+
literal|"</TD><TD>"
operator|+
name|ca
operator|.
name|getRooms
argument_list|()
operator|.
name|toHtml
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|selection
argument_list|)
operator|+
literal|"</TD></TR>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<input type='hidden' name='nrRooms' value='0'/>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<input type='hidden' name='roomState' value='0'/>"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ca
operator|.
name|getTimes
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<TR><TD nowrap>"
operator|+
name|MSG
operator|.
name|propertyTimeLocations
argument_list|()
operator|+
literal|"</TD><TD>"
operator|+
name|ca
operator|.
name|getTimes
argument_list|()
operator|.
name|toHtml
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|selection
argument_list|)
operator|+
literal|"</TD></TR>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<TR"
operator|+
operator|(
name|ca
operator|.
name|getTimes
argument_list|()
operator|.
name|getNrDates
argument_list|()
operator|<=
literal|1
condition|?
literal|" style='display:none;'"
else|:
literal|""
operator|)
operator|+
literal|"><TD nowrap>"
operator|+
name|MSG
operator|.
name|propertyDatePatterns
argument_list|()
operator|+
literal|"</TD><TD>"
operator|+
name|ca
operator|.
name|getTimes
argument_list|()
operator|.
name|toDatesHtml
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|selection
argument_list|)
operator|+
literal|"</TD></TR>"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|dispLinks
operator|&&
name|ca
operator|.
name|getClazz
argument_list|()
operator|!=
literal|null
operator|&&
name|ca
operator|.
name|getClazz
argument_list|()
operator|.
name|getRoomCapacity
argument_list|()
operator|>=
literal|0
operator|&&
name|ca
operator|.
name|getClazz
argument_list|()
operator|.
name|getRoomCapacity
argument_list|()
operator|<
name|Integer
operator|.
name|MAX_VALUE
operator|&&
name|ca
operator|.
name|getClazz
argument_list|()
operator|.
name|nrRooms
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<TR><TD>"
operator|+
name|MSG
operator|.
name|propertyMinimumRoomSize
argument_list|()
operator|+
literal|"</TD><TD>"
operator|+
name|ca
operator|.
name|getClazz
argument_list|()
operator|.
name|getRoomCapacity
argument_list|()
operator|+
literal|"</TD></TR>"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dispLinks
operator|&&
name|ca
operator|.
name|getClazz
argument_list|()
operator|!=
literal|null
operator|&&
name|ca
operator|.
name|getClazz
argument_list|()
operator|.
name|getNote
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<TR><TD>"
operator|+
name|MSG
operator|.
name|propertyNote
argument_list|()
operator|+
literal|"</TD><TD>"
operator|+
name|ca
operator|.
name|getClazz
argument_list|()
operator|.
name|getNote
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\n"
argument_list|,
literal|"<BR>"
argument_list|)
operator|+
literal|"</TD></TR>"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|getConfTable
parameter_list|(
name|boolean
name|simple
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|SolverProxy
name|solver
parameter_list|,
name|SuggestionsModel
name|model
parameter_list|,
name|Collection
name|suggestions
parameter_list|)
block|{
name|WebTable
operator|.
name|setOrder
argument_list|(
name|context
argument_list|,
literal|"suggestions.suggestions.conf.ord"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"conf_ord"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|boolean
name|hasViolDistConst
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|suggestions
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Suggestion
name|s
init|=
operator|(
name|Suggestion
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|getGlobalGroupConstraintPreference
argument_list|()
operator|>
literal|0
condition|)
block|{
name|hasViolDistConst
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|WebTable
name|webTable
init|=
operator|(
name|hasViolDistConst
condition|?
operator|new
name|WebTable
argument_list|(
literal|5
argument_list|,
literal|"Conflict Table"
argument_list|,
literal|"suggestions.do?conf_ord=%%&noCacheTS="
operator|+
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Time"
block|,
literal|null
block|,
literal|"Student Conflicts"
block|,
literal|null
block|,
literal|"Violated Distr. Constr."
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"right"
block|,
literal|"left"
block|,
literal|"right"
block|,
literal|"left"
block|}
argument_list|,
literal|null
argument_list|)
else|:
operator|new
name|WebTable
argument_list|(
literal|3
argument_list|,
literal|"Conflict Table"
argument_list|,
literal|"suggestions.do?conf_ord=%%&noCacheTS="
operator|+
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Time"
block|,
literal|null
block|,
literal|"Student Conflicts"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"right"
block|,
literal|"left"
block|}
argument_list|,
literal|null
argument_list|)
operator|)
decl_stmt|;
name|webTable
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap"
argument_list|)
expr_stmt|;
name|int
name|nrLines
init|=
literal|0
decl_stmt|;
try|try
block|{
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|suggestions
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|Suggestion
name|s
init|=
operator|(
name|Suggestion
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|getDifferentAssignments
argument_list|()
operator|==
literal|null
operator|||
name|s
operator|.
name|getDifferentAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|Hint
name|h
init|=
operator|(
name|Hint
operator|)
name|s
operator|.
name|getDifferentAssignments
argument_list|()
operator|.
name|firstElement
argument_list|()
decl_stmt|;
name|ClassAssignmentDetails
name|ca
init|=
name|h
operator|.
name|getDetails
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|getCommitedStudentConflicts
argument_list|()
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
expr_stmt|;
else|else
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"c"
operator|+
name|s
operator|.
name|getCommitedStudentConflicts
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|s
operator|.
name|getDistanceStudentConflicts
argument_list|()
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
expr_stmt|;
else|else
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"d"
operator|+
name|s
operator|.
name|getDistanceStudentConflicts
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|s
operator|.
name|getHardStudentConflicts
argument_list|()
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
expr_stmt|;
else|else
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"h"
operator|+
name|s
operator|.
name|getHardStudentConflicts
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
name|nrLines
operator|++
expr_stmt|;
if|if
condition|(
name|hasViolDistConst
condition|)
block|{
name|webTable
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
comment|//"onClick=\"selectTime(event, '"+ca.getAssignedTime().getDays()+"', '"+ca.getAssignedTime().getStartSlot()+"', '"+ca.getAssignedTime().getPatternId()+"');\"",
operator|new
name|String
index|[]
block|{
name|ca
operator|.
name|getAssignedTime
argument_list|()
operator|.
name|toHtml
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
block|,
operator|(
name|s
operator|.
name|getViolatedStudentConflicts
argument_list|()
operator|>
literal|0
condition|?
literal|"<font color='red'>"
else|:
literal|""
operator|)
operator|+
name|s
operator|.
name|getViolatedStudentConflicts
argument_list|()
operator|+
name|sb
operator|.
name|toString
argument_list|()
operator|+
operator|(
name|s
operator|.
name|getViolatedStudentConflicts
argument_list|()
operator|>
literal|0
condition|?
literal|"</font>"
else|:
literal|""
operator|)
block|,
name|s
operator|.
name|getStudentConflictInfosAsHtml
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
literal|true
argument_list|,
operator|(
name|idx
operator|+
literal|1
operator|)
argument_list|,
literal|0
argument_list|)
block|,
literal|""
operator|+
name|s
operator|.
name|getGlobalGroupConstraintPreference
argument_list|()
block|,
name|s
operator|.
name|getDistributionConstraintInfoAsHtml
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
literal|true
argument_list|,
operator|(
name|idx
operator|+
literal|1
operator|)
argument_list|,
literal|0
argument_list|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|Integer
argument_list|(
operator|-
name|ca
operator|.
name|getAssignedTime
argument_list|()
operator|.
name|getDays
argument_list|()
operator|*
literal|1000
operator|+
name|ca
operator|.
name|getAssignedTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
block|,
operator|new
name|Long
argument_list|(
name|s
operator|.
name|getViolatedStudentConflicts
argument_list|()
argument_list|)
block|,
operator|new
name|Long
argument_list|(
name|s
operator|.
name|getViolatedStudentConflicts
argument_list|()
argument_list|)
block|,
operator|new
name|Long
argument_list|(
name|s
operator|.
name|getGlobalGroupConstraintPreference
argument_list|()
argument_list|)
block|,
operator|new
name|Long
argument_list|(
name|s
operator|.
name|getGlobalGroupConstraintPreference
argument_list|()
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|webTable
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
comment|//"onClick=\"selectTime(event, '"+ca.getAssignedTime().getDays()+"', '"+ca.getAssignedTime().getStartSlot()+"', '"+ca.getAssignedTime().getPatternId()+"');\"",
operator|new
name|String
index|[]
block|{
name|ca
operator|.
name|getAssignedTime
argument_list|()
operator|.
name|toHtml
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
block|,
operator|(
name|s
operator|.
name|getViolatedStudentConflicts
argument_list|()
operator|>
literal|0
condition|?
literal|"<font color='red'>"
else|:
literal|""
operator|)
operator|+
name|s
operator|.
name|getViolatedStudentConflicts
argument_list|()
operator|+
name|sb
operator|.
name|toString
argument_list|()
operator|+
operator|(
name|s
operator|.
name|getViolatedStudentConflicts
argument_list|()
operator|>
literal|0
condition|?
literal|"</font>"
else|:
literal|""
operator|)
block|,
name|s
operator|.
name|getStudentConflictInfosAsHtml
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
literal|true
argument_list|,
operator|(
name|idx
operator|+
literal|1
operator|)
argument_list|,
literal|0
argument_list|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|Integer
argument_list|(
operator|-
name|ca
operator|.
name|getAssignedTime
argument_list|()
operator|.
name|getDays
argument_list|()
operator|*
literal|1000
operator|+
name|ca
operator|.
name|getAssignedTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
block|,
operator|new
name|Long
argument_list|(
name|s
operator|.
name|getViolatedStudentConflicts
argument_list|()
argument_list|)
block|,
operator|new
name|Long
argument_list|(
name|s
operator|.
name|getViolatedStudentConflicts
argument_list|()
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|webTable
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"<font color='red'>ERROR:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"</font>"
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nrLines
operator|==
literal|0
condition|)
return|return
literal|null
return|;
return|return
name|webTable
operator|.
name|printTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|context
argument_list|,
literal|"suggestions.suggestions.conf.ord"
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

