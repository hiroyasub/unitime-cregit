begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.0 (University Course Timetabling& Student Sectioning Application)  * Copyright (C) 2007, UniTime.org, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|actions
operator|.
name|LookupDispatchAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|HibernateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|Web
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|InstructionalOfferingListForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|InstructionalOfferingComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstructionalOfferingDAO
import|;
end_import

begin_comment
comment|/**  * @author Stephanie Schluttenhofer  */
end_comment

begin_class
specifier|public
class|class
name|InstructionalOfferingChangeAction
extends|extends
name|LookupDispatchAction
block|{
specifier|protected
name|Map
name|getKeyMethodMap
parameter_list|()
block|{
name|Map
name|map
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"button.saveNotOfferedChanges"
argument_list|,
literal|"saveNotOfferedChanges"
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
comment|/**  	 * Method execute 	 * @param mapping 	 * @param form 	 * @param request 	 * @param response 	 * @return ActionForward 	 * @throws HibernateException 	 */
specifier|public
name|ActionForward
name|saveNotOfferedChanges
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
name|HttpSession
name|webSession
init|=
name|request
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Web
operator|.
name|isLoggedIn
argument_list|(
name|webSession
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Access Denied."
argument_list|)
throw|;
block|}
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|webSession
argument_list|)
decl_stmt|;
name|InstructionalOfferingListForm
name|instructionalOfferingListForm
init|=
operator|(
name|InstructionalOfferingListForm
operator|)
name|form
decl_stmt|;
name|instructionalOfferingListForm
operator|.
name|setSubjectAreas
argument_list|(
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
operator|.
name|getSubjectAreas
argument_list|()
argument_list|)
expr_stmt|;
name|instructionalOfferingListForm
operator|.
name|setInstructionalOfferings
argument_list|(
name|this
operator|.
name|getInstructionalOfferings
argument_list|(
name|instructionalOfferingListForm
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|instructionalOfferingListForm
operator|.
name|getInstructionalOfferings
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showInstructionalOfferingSearch"
argument_list|)
return|;
block|}
else|else
block|{
name|Iterator
name|it
init|=
name|instructionalOfferingListForm
operator|.
name|getInstructionalOfferings
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|InstructionalOffering
name|io
init|=
literal|null
decl_stmt|;
name|InstructionalOfferingDAO
name|dao
init|=
operator|new
name|InstructionalOfferingDAO
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|io
operator|=
operator|(
name|InstructionalOffering
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|dao
operator|.
name|save
argument_list|(
name|io
argument_list|)
expr_stmt|;
block|}
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showInstructionalOfferingList"
argument_list|)
return|;
block|}
block|}
specifier|private
name|Set
name|getInstructionalOfferings
parameter_list|(
name|InstructionalOfferingListForm
name|form
parameter_list|)
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
operator|(
operator|new
name|InstructionalOfferingDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|StringBuffer
name|query
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"select io from InstructionalOffering as io , CourseOffering co2 "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|" where co2.uniqueCourseNbr.subjectArea.uniqueId = :subjectAreaId "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|" and io.uniqueId = co2.instructionalOffering.uniqueId "
argument_list|)
expr_stmt|;
if|if
condition|(
name|form
operator|.
name|getCourseNbr
argument_list|()
operator|!=
literal|null
operator|&&
name|form
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|" and co2.uniqueCourseNbr.courseNbr = '"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
name|form
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"'  "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|form
operator|.
name|getShowNotOffered
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|form
operator|.
name|getShowNotOffered
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|" and io.notOffered != true "
argument_list|)
expr_stmt|;
block|}
name|Query
name|q
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|q
operator|.
name|setInteger
argument_list|(
literal|"subjectAreaId"
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|form
operator|.
name|getSubjectAreaId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|TreeSet
name|ts
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|InstructionalOfferingComparator
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|form
operator|.
name|getSubjectAreaId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|sTime
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|ts
operator|.
name|addAll
argument_list|(
name|q
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|eTime
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"fetch time = "
operator|+
operator|(
name|eTime
operator|-
name|sTime
operator|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|ts
operator|)
return|;
block|}
block|}
end_class

end_unit

