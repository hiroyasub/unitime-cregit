begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionRedirect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|util
operator|.
name|MessageResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|messages
operator|.
name|CourseMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|SessionAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|InstructionalOfferingConfigEditForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalInstrOffrConfigChangeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalLinkLookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|BuildingPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassDurationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentStatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ItypeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Preference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeaturePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomGroupPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SimpleItypeConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|ClassComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|SicComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ClassDurationTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstrOfferingConfigDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstructionalMethodDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstructionalOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ItypeDescDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|permissions
operator|.
name|Permission
operator|.
name|PermissionDepartment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|LookupTables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|duration
operator|.
name|DurationModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|SchedulingSubpartTableBuilder
import|;
end_import

begin_comment
comment|/**  * MyEclipse Struts  * Creation date: 05-19-2005  *  * XDoclet definition:  * @struts:action path="/instructionalOfferingConfigEdit" name="InstructionalOfferingConfigEditForm" input="/instructionalOfferingConfigEdit.jsp" scope="request"  *  * @author Tomas Muller, Stephanie Schluttenhofer, Zuzana Mullerova  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"/instructionalOfferingConfigEdit"
argument_list|)
specifier|public
class|class
name|InstructionalOfferingConfigEditAction
extends|extends
name|Action
block|{
specifier|protected
specifier|final
specifier|static
name|CourseMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|CourseMessages
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Autowired
name|SessionContext
name|sessionContext
decl_stmt|;
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
comment|// --------------------------------------------------------- Instance Variables
comment|// --------------------------------------------------------- Methods
comment|/**      * Method execute      * @param mapping      * @param form      * @param request      * @param response      * @return ActionForward      */
specifier|public
name|ActionForward
name|execute
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
name|MessageResources
name|rsc
init|=
name|getResources
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|InstructionalOfferingConfigEditForm
name|frm
init|=
operator|(
name|InstructionalOfferingConfigEditForm
operator|)
name|form
decl_stmt|;
name|Department
name|contrDept
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|frm
operator|.
name|getConfigId
argument_list|()
operator|==
literal|null
operator|||
name|frm
operator|.
name|getConfigId
argument_list|()
operator|==
literal|0
condition|)
block|{
name|InstructionalOffering
name|offering
init|=
name|InstructionalOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|frm
operator|.
name|getInstrOfferingId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|offering
argument_list|,
name|Right
operator|.
name|InstrOfferingConfigAdd
argument_list|)
expr_stmt|;
name|contrDept
operator|=
name|offering
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getDepartment
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|frm
operator|.
name|getConfigId
argument_list|()
operator|!=
literal|null
operator|&&
name|frm
operator|.
name|getConfigId
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|InstrOfferingConfig
name|config
init|=
name|InstrOfferingConfigDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|frm
operator|.
name|getConfigId
argument_list|()
argument_list|)
decl_stmt|;
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|config
argument_list|,
name|Right
operator|.
name|InstrOfferingConfigEdit
argument_list|)
expr_stmt|;
name|contrDept
operator|=
name|config
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getDepartment
argument_list|()
expr_stmt|;
block|}
name|String
name|html
init|=
literal|""
decl_stmt|;
name|String
name|op
init|=
operator|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"op"
argument_list|)
operator|==
literal|null
operator|)
condition|?
operator|(
name|frm
operator|.
name|getOp
argument_list|()
operator|==
literal|null
operator|||
name|frm
operator|.
name|getOp
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
condition|?
operator|(
name|request
operator|.
name|getAttribute
argument_list|(
literal|"op"
argument_list|)
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|request
operator|.
name|getAttribute
argument_list|(
literal|"op"
argument_list|)
operator|.
name|toString
argument_list|()
else|:
name|frm
operator|.
name|getOp
argument_list|()
else|:
name|request
operator|.
name|getParameter
argument_list|(
literal|"op"
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|==
literal|null
condition|)
name|op
operator|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"hdnOp"
argument_list|)
expr_stmt|;
if|if
condition|(
name|op
operator|==
literal|null
operator|||
name|op
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
name|MSG
operator|.
name|errorOperationNotInterpreted
argument_list|()
operator|+
name|op
argument_list|)
throw|;
comment|// Set up itypes and subparts
name|frm
operator|.
name|setOp
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|LookupTables
operator|.
name|setupItypes
argument_list|(
name|request
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LookupTables
operator|.
name|setupExternalDepts
argument_list|(
name|request
argument_list|,
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
name|TreeSet
name|ts
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
operator|(
operator|(
name|TreeSet
operator|)
name|request
operator|.
name|getAttribute
argument_list|(
name|Department
operator|.
name|EXTERNAL_DEPT_ATTR_NAME
argument_list|)
operator|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|d
init|=
operator|(
name|Department
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|d
argument_list|,
name|Right
operator|.
name|InstrOfferingConfigEditDepartment
argument_list|)
operator|&&
name|permissionDepartment
operator|.
name|check
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|,
name|contrDept
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|OwnerEdit
argument_list|,
name|d
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ManagerEdit
argument_list|)
condition|)
name|ts
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|setAttribute
argument_list|(
operator|(
name|Department
operator|.
name|EXTERNAL_DEPT_ATTR_NAME
operator|)
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|SimpleItypeConfig
operator|.
name|CONFIGS_ATTR_NAME
argument_list|,
name|html
argument_list|)
expr_stmt|;
comment|// Clear previous error markers
name|search
argument_list|(
literal|"-1111"
argument_list|,
operator|new
name|Vector
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// First access to screen
if|if
condition|(
name|op
operator|.
name|equalsIgnoreCase
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"op.edit"
argument_list|)
argument_list|)
comment|//	|| op.equalsIgnoreCase(rsc.getMessage("button.duplicateConfig")) --- probably never used
operator|||
name|op
operator|.
name|equalsIgnoreCase
argument_list|(
name|MSG
operator|.
name|actionEditConfiguration
argument_list|()
argument_list|)
condition|)
block|{
name|Long
name|configId
init|=
literal|null
decl_stmt|;
try|try
block|{
name|configId
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"configId"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|MSG
operator|.
name|errorConfigIDNotValid
argument_list|()
operator|+
name|request
operator|.
name|getParameter
argument_list|(
literal|"configId"
argument_list|)
argument_list|)
throw|;
block|}
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|configId
argument_list|,
literal|"InstrOfferingConfig"
argument_list|,
name|Right
operator|.
name|InstrOfferingConfigEdit
argument_list|)
expr_stmt|;
name|loadDetailFromConfig
argument_list|(
name|frm
argument_list|,
name|configId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// load existing config from database
name|Vector
name|sp
init|=
name|loadOriginalConfig
argument_list|(
name|frm
operator|.
name|getConfigId
argument_list|()
argument_list|,
name|frm
argument_list|)
decl_stmt|;
name|boolean
name|createAsNew
init|=
literal|false
decl_stmt|;
comment|//            if(op.equalsIgnoreCase(rsc.getMessage("button.duplicateConfig")))
comment|//                createAsNew = true;
if|if
condition|(
name|sp
operator|!=
literal|null
operator|&&
name|sp
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sessionContext
operator|.
name|setAttribute
argument_list|(
name|SessionAttribute
operator|.
name|InstructionalOfferingConfigList
argument_list|,
name|sp
argument_list|)
expr_stmt|;
name|html
operator|=
name|SchedulingSubpartTableBuilder
operator|.
name|buildSubpartsTable
argument_list|(
name|request
argument_list|,
name|sessionContext
argument_list|,
name|frm
operator|.
name|getLimit
argument_list|()
argument_list|,
name|configId
operator|.
name|toString
argument_list|()
argument_list|,
name|createAsNew
argument_list|,
name|frm
operator|.
name|getUnlimited
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|,
name|frm
operator|.
name|getDurationTypeText
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|SimpleItypeConfig
operator|.
name|CONFIGS_ATTR_NAME
argument_list|,
name|html
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sessionContext
operator|.
name|setAttribute
argument_list|(
name|SessionAttribute
operator|.
name|InstructionalOfferingConfigList
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|SimpleItypeConfig
operator|.
name|CONFIGS_ATTR_NAME
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// For duplication set configID to 0
comment|//            if(op.equalsIgnoreCase(rsc.getMessage("button.duplicateConfig"))) {
comment|//                frm.setConfigId(Long.valueOf(0));
comment|//                frm.setName(InstrOfferingConfig.getGeneratedName(
comment|//                        ( new InstrOfferingConfigDAO().get(configId)).getInstructionalOffering() ));
comment|//            }
block|}
comment|// Add a new configuration
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionAddConfiguration
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|courseOfferingId
init|=
operator|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"uid"
argument_list|)
operator|==
literal|null
operator|)
condition|?
operator|(
name|request
operator|.
name|getAttribute
argument_list|(
literal|"uid"
argument_list|)
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|request
operator|.
name|getAttribute
argument_list|(
literal|"uid"
argument_list|)
operator|.
name|toString
argument_list|()
else|:
name|request
operator|.
name|getParameter
argument_list|(
literal|"uid"
argument_list|)
decl_stmt|;
if|if
condition|(
name|courseOfferingId
operator|==
literal|null
operator|||
name|courseOfferingId
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
name|MSG
operator|.
name|exceptionCourseOfferingIdNeeded
argument_list|()
argument_list|)
throw|;
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|frm
operator|.
name|getInstrOfferingId
argument_list|()
argument_list|,
literal|"InstructionalOffering"
argument_list|,
name|Right
operator|.
name|InstrOfferingConfigAdd
argument_list|)
expr_stmt|;
name|loadDetailFromCourseOffering
argument_list|(
name|frm
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|courseOfferingId
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|setAttribute
argument_list|(
name|SessionAttribute
operator|.
name|InstructionalOfferingConfigList
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|SimpleItypeConfig
operator|.
name|CONFIGS_ATTR_NAME
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
comment|// Redirect after making course offered
if|if
condition|(
name|op
operator|.
name|equalsIgnoreCase
argument_list|(
name|MSG
operator|.
name|actionMakeOffered
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|courseOfferingId
init|=
operator|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"uid"
argument_list|)
operator|==
literal|null
operator|)
condition|?
operator|(
name|request
operator|.
name|getAttribute
argument_list|(
literal|"uid"
argument_list|)
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|request
operator|.
name|getAttribute
argument_list|(
literal|"uid"
argument_list|)
operator|.
name|toString
argument_list|()
else|:
name|request
operator|.
name|getParameter
argument_list|(
literal|"uid"
argument_list|)
decl_stmt|;
if|if
condition|(
name|courseOfferingId
operator|==
literal|null
operator|||
name|courseOfferingId
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
name|MSG
operator|.
name|exceptionCourseOfferingIdNeeded
argument_list|()
argument_list|)
throw|;
comment|// Get first available config
name|loadDetailFromCourseOffering
argument_list|(
name|frm
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|courseOfferingId
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|setAttribute
argument_list|(
name|SessionAttribute
operator|.
name|InstructionalOfferingConfigList
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|SimpleItypeConfig
operator|.
name|CONFIGS_ATTR_NAME
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|// load existing config from database
if|if
condition|(
name|frm
operator|.
name|getConfigId
argument_list|()
operator|!=
literal|null
operator|&&
name|frm
operator|.
name|getConfigId
argument_list|()
operator|.
name|intValue
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Vector
name|sp
init|=
name|loadOriginalConfig
argument_list|(
name|frm
operator|.
name|getConfigId
argument_list|()
argument_list|,
name|frm
argument_list|)
decl_stmt|;
if|if
condition|(
name|sp
operator|!=
literal|null
operator|&&
name|sp
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sessionContext
operator|.
name|setAttribute
argument_list|(
name|SessionAttribute
operator|.
name|InstructionalOfferingConfigList
argument_list|,
name|sp
argument_list|)
expr_stmt|;
name|html
operator|=
name|SchedulingSubpartTableBuilder
operator|.
name|buildSubpartsTable
argument_list|(
name|request
argument_list|,
name|sessionContext
argument_list|,
name|frm
operator|.
name|getLimit
argument_list|()
argument_list|,
name|courseOfferingId
argument_list|,
literal|false
argument_list|,
name|frm
operator|.
name|getUnlimited
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|,
name|frm
operator|.
name|getDurationTypeText
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|SimpleItypeConfig
operator|.
name|CONFIGS_ATTR_NAME
argument_list|,
name|html
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sessionContext
operator|.
name|setAttribute
argument_list|(
name|SessionAttribute
operator|.
name|InstructionalOfferingConfigList
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|SimpleItypeConfig
operator|.
name|CONFIGS_ATTR_NAME
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Add Instructional Type
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionAddInstructionalTypeToConfig
argument_list|()
argument_list|)
condition|)
block|{
name|ActionMessages
name|errors
init|=
name|frm
operator|.
name|validate
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|errors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|html
operator|=
name|SchedulingSubpartTableBuilder
operator|.
name|buildSubpartsTable
argument_list|(
name|request
argument_list|,
name|sessionContext
argument_list|,
name|frm
operator|.
name|getLimit
argument_list|()
argument_list|,
name|frm
operator|.
name|getCourseOfferingId
argument_list|()
argument_list|,
literal|false
argument_list|,
name|frm
operator|.
name|getUnlimited
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|,
name|frm
operator|.
name|getDurationTypeText
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|SimpleItypeConfig
operator|.
name|CONFIGS_ATTR_NAME
argument_list|,
name|html
argument_list|)
expr_stmt|;
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"displayForm"
argument_list|)
return|;
block|}
name|addInstructionalType
argument_list|(
name|frm
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setItype
argument_list|(
name|Constants
operator|.
name|BLANK_OPTION_VALUE
argument_list|)
expr_stmt|;
name|html
operator|=
name|SchedulingSubpartTableBuilder
operator|.
name|buildSubpartsTable
argument_list|(
name|request
argument_list|,
name|sessionContext
argument_list|,
name|frm
operator|.
name|getLimit
argument_list|()
argument_list|,
name|frm
operator|.
name|getCourseOfferingId
argument_list|()
argument_list|,
literal|false
argument_list|,
name|frm
operator|.
name|getUnlimited
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|,
name|frm
operator|.
name|getDurationTypeText
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|SimpleItypeConfig
operator|.
name|CONFIGS_ATTR_NAME
argument_list|,
name|html
argument_list|)
expr_stmt|;
block|}
comment|// Move / Order / Delete Itypes
if|if
condition|(
name|op
operator|.
name|indexOf
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"op.shift"
argument_list|)
argument_list|)
operator|>=
literal|0
operator|||
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"op.delete"
argument_list|)
argument_list|)
condition|)
block|{
name|int
name|limit
init|=
literal|0
decl_stmt|;
try|try
block|{
name|limit
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"limit"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|limit
operator|=
literal|0
expr_stmt|;
block|}
name|frm
operator|.
name|setLimit
argument_list|(
name|limit
argument_list|)
expr_stmt|;
name|processShiftOrDelete
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"id"
argument_list|)
argument_list|,
name|op
argument_list|)
expr_stmt|;
name|html
operator|=
name|SchedulingSubpartTableBuilder
operator|.
name|buildSubpartsTable
argument_list|(
name|request
argument_list|,
name|sessionContext
argument_list|,
name|frm
operator|.
name|getLimit
argument_list|()
argument_list|,
name|frm
operator|.
name|getCourseOfferingId
argument_list|()
argument_list|,
literal|false
argument_list|,
name|frm
operator|.
name|getUnlimited
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|,
name|frm
operator|.
name|getDurationTypeText
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|SimpleItypeConfig
operator|.
name|CONFIGS_ATTR_NAME
argument_list|,
name|html
argument_list|)
expr_stmt|;
block|}
comment|// Multiple Limits
if|if
condition|(
name|op
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"multipleLimits"
argument_list|)
condition|)
block|{
name|html
operator|=
name|SchedulingSubpartTableBuilder
operator|.
name|buildSubpartsTable
argument_list|(
name|request
argument_list|,
name|sessionContext
argument_list|,
name|frm
operator|.
name|getLimit
argument_list|()
argument_list|,
name|frm
operator|.
name|getCourseOfferingId
argument_list|()
argument_list|,
literal|false
argument_list|,
name|frm
operator|.
name|getUnlimited
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|,
name|frm
operator|.
name|getDurationTypeText
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|SimpleItypeConfig
operator|.
name|CONFIGS_ATTR_NAME
argument_list|,
name|html
argument_list|)
expr_stmt|;
block|}
comment|// User commits changes
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionSaveConfiguration
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionUpdateConfiguration
argument_list|()
argument_list|)
condition|)
block|{
name|html
operator|=
name|SchedulingSubpartTableBuilder
operator|.
name|buildSubpartsTable
argument_list|(
name|request
argument_list|,
name|sessionContext
argument_list|,
name|frm
operator|.
name|getLimit
argument_list|()
argument_list|,
name|frm
operator|.
name|getCourseOfferingId
argument_list|()
argument_list|,
literal|false
argument_list|,
name|frm
operator|.
name|getUnlimited
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|,
name|frm
operator|.
name|getDurationTypeText
argument_list|()
argument_list|)
expr_stmt|;
name|ActionMessages
name|errors
init|=
name|frm
operator|.
name|validate
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|errors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|html
operator|=
name|SchedulingSubpartTableBuilder
operator|.
name|buildSubpartsTable
argument_list|(
name|request
argument_list|,
name|sessionContext
argument_list|,
name|frm
operator|.
name|getLimit
argument_list|()
argument_list|,
name|frm
operator|.
name|getCourseOfferingId
argument_list|()
argument_list|,
literal|false
argument_list|,
name|frm
operator|.
name|getUnlimited
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|,
name|frm
operator|.
name|getDurationTypeText
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|SimpleItypeConfig
operator|.
name|CONFIGS_ATTR_NAME
argument_list|,
name|html
argument_list|)
expr_stmt|;
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"displayForm"
argument_list|)
return|;
block|}
try|try
block|{
name|updateConfig
argument_list|(
name|request
argument_list|,
name|frm
argument_list|)
expr_stmt|;
name|html
operator|=
name|SchedulingSubpartTableBuilder
operator|.
name|buildSubpartsTable
argument_list|(
name|request
argument_list|,
name|sessionContext
argument_list|,
name|frm
operator|.
name|getLimit
argument_list|()
argument_list|,
name|frm
operator|.
name|getCourseOfferingId
argument_list|()
argument_list|,
literal|false
argument_list|,
name|frm
operator|.
name|getUnlimited
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|,
name|frm
operator|.
name|getDurationTypeText
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|SimpleItypeConfig
operator|.
name|CONFIGS_ATTR_NAME
argument_list|,
name|html
argument_list|)
expr_stmt|;
comment|// Redirect to instr offering detail on success
name|ActionRedirect
name|redirect
init|=
operator|new
name|ActionRedirect
argument_list|(
name|mapping
operator|.
name|findForward
argument_list|(
literal|"instructionalOfferingDetail"
argument_list|)
argument_list|)
decl_stmt|;
name|redirect
operator|.
name|addParameter
argument_list|(
literal|"io"
argument_list|,
name|frm
operator|.
name|getInstrOfferingId
argument_list|()
argument_list|)
expr_stmt|;
name|redirect
operator|.
name|addParameter
argument_list|(
literal|"op"
argument_list|,
literal|"view"
argument_list|)
expr_stmt|;
return|return
name|redirect
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|html
operator|=
name|SchedulingSubpartTableBuilder
operator|.
name|buildSubpartsTable
argument_list|(
name|request
argument_list|,
name|sessionContext
argument_list|,
name|frm
operator|.
name|getLimit
argument_list|()
argument_list|,
name|frm
operator|.
name|getCourseOfferingId
argument_list|()
argument_list|,
literal|false
argument_list|,
name|frm
operator|.
name|getUnlimited
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|,
name|frm
operator|.
name|getDurationTypeText
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|SimpleItypeConfig
operator|.
name|CONFIGS_ATTR_NAME
argument_list|,
name|html
argument_list|)
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
literal|"subparts"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Configuration could not be updated. If possible, split your configuration change into 2 or more separate operations. "
operator|+
operator|(
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"org.hibernate."
argument_list|)
condition|?
literal|""
else|:
literal|"Exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"displayForm"
argument_list|)
return|;
block|}
block|}
comment|// Delete configuration
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionDeleteConfiguration
argument_list|()
argument_list|)
condition|)
block|{
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|frm
operator|.
name|getConfigId
argument_list|()
argument_list|,
literal|"InstrOfferingConfig"
argument_list|,
name|Right
operator|.
name|InstrOfferingConfigDelete
argument_list|)
expr_stmt|;
name|deleteConfig
argument_list|(
name|request
argument_list|,
name|frm
argument_list|)
expr_stmt|;
comment|// Redirect to instr offering detail on success
name|ActionRedirect
name|redirect
init|=
operator|new
name|ActionRedirect
argument_list|(
name|mapping
operator|.
name|findForward
argument_list|(
literal|"instructionalOfferingDetail"
argument_list|)
argument_list|)
decl_stmt|;
name|redirect
operator|.
name|addParameter
argument_list|(
literal|"io"
argument_list|,
name|frm
operator|.
name|getInstrOfferingId
argument_list|()
argument_list|)
expr_stmt|;
name|redirect
operator|.
name|addParameter
argument_list|(
literal|"op"
argument_list|,
literal|"view"
argument_list|)
expr_stmt|;
name|redirect
operator|.
name|addParameter
argument_list|(
literal|"cfgDelete"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
return|return
name|redirect
return|;
block|}
comment|// User clicks Unlimited Enrollment
if|if
condition|(
name|op
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"unlimitedEnrollment"
argument_list|)
condition|)
block|{
name|html
operator|=
name|SchedulingSubpartTableBuilder
operator|.
name|buildSubpartsTable
argument_list|(
name|request
argument_list|,
name|sessionContext
argument_list|,
name|frm
operator|.
name|getLimit
argument_list|()
argument_list|,
name|frm
operator|.
name|getCourseOfferingId
argument_list|()
argument_list|,
literal|false
argument_list|,
name|frm
operator|.
name|getUnlimited
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|,
name|frm
operator|.
name|getDurationTypeText
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|SimpleItypeConfig
operator|.
name|CONFIGS_ATTR_NAME
argument_list|,
name|html
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"displayForm"
argument_list|)
return|;
block|}
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"displayForm"
argument_list|)
return|;
block|}
specifier|private
name|void
name|loadDetailFromConfig
parameter_list|(
name|InstructionalOfferingConfigEditForm
name|frm
parameter_list|,
name|Long
name|configId
parameter_list|,
name|boolean
name|init
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Check uniqueid
if|if
condition|(
name|configId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Config Id need for operation. "
argument_list|)
throw|;
name|InstrOfferingConfigDAO
name|iocDao
init|=
operator|new
name|InstrOfferingConfigDAO
argument_list|()
decl_stmt|;
name|InstrOfferingConfig
name|ioc
init|=
name|iocDao
operator|.
name|get
argument_list|(
name|configId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ioc
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Congifuration not found for id: "
operator|+
name|configId
argument_list|)
throw|;
name|frm
operator|.
name|setConfigId
argument_list|(
name|configId
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setName
argument_list|(
name|ioc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setUnlimited
argument_list|(
name|ioc
operator|.
name|isUnlimitedEnrollment
argument_list|()
argument_list|)
expr_stmt|;
name|Long
name|courseOfferingId
init|=
name|ioc
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
decl_stmt|;
name|loadDetailFromCourseOffering
argument_list|(
name|frm
argument_list|,
name|courseOfferingId
argument_list|,
name|init
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setDurationType
argument_list|(
name|ioc
operator|.
name|getClassDurationType
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1l
else|:
name|ioc
operator|.
name|getClassDurationType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SchedulingSubpart
name|subpart
range|:
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
control|)
if|if
condition|(
operator|!
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|subpart
argument_list|,
name|Right
operator|.
name|InstrOfferingConfigEditSubpart
argument_list|)
condition|)
block|{
name|frm
operator|.
name|setDurationTypeEditable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|frm
operator|.
name|getDurationTypes
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
block|{
name|ClassDurationType
name|dtype
init|=
name|ioc
operator|.
name|getEffectiveDurationType
argument_list|()
decl_stmt|;
if|if
condition|(
name|dtype
operator|!=
literal|null
operator|&&
name|dtype
operator|.
name|isVisible
argument_list|()
condition|)
name|frm
operator|.
name|setDurationTypeEditable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|frm
operator|.
name|setInstructionalMethod
argument_list|(
name|ioc
operator|.
name|getInstructionalMethod
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1l
else|:
name|ioc
operator|.
name|getInstructionalMethod
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setInstructionalMethodEditable
argument_list|(
name|ApplicationProperty
operator|.
name|WaitListCanChangeInstructionalMethod
operator|.
name|isTrue
argument_list|()
operator|||
operator|!
name|ioc
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|effectiveWaitList
argument_list|()
operator|||
name|ioc
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**      * Loads course offering details into the form      * @param courseOfferingId Course Offering Uid      * @param frm Form      * @throws Exception      */
specifier|private
name|void
name|loadDetailFromCourseOffering
parameter_list|(
name|InstructionalOfferingConfigEditForm
name|frm
parameter_list|,
name|Long
name|courseOfferingId
parameter_list|,
name|boolean
name|init
parameter_list|,
name|boolean
name|loadDefaultConfig
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Check uniqueid
if|if
condition|(
name|courseOfferingId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Course Offering Id need for operation. "
argument_list|)
throw|;
comment|// Load Course Offering
name|CourseOfferingDAO
name|coDao
init|=
operator|new
name|CourseOfferingDAO
argument_list|()
decl_stmt|;
name|CourseOffering
name|co
init|=
name|coDao
operator|.
name|get
argument_list|(
name|courseOfferingId
argument_list|)
decl_stmt|;
if|if
condition|(
name|co
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Course Offering not found for id: "
operator|+
name|courseOfferingId
argument_list|)
throw|;
name|InstructionalOffering
name|io
init|=
name|co
operator|.
name|getInstructionalOffering
argument_list|()
decl_stmt|;
comment|// Set values
name|frm
operator|.
name|setCourseOfferingId
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setSubjectArea
argument_list|(
name|co
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setCourseNumber
argument_list|(
name|co
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setInstrOfferingName
argument_list|(
name|co
operator|.
name|getCourseNameWithTitle
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setInstrOfferingId
argument_list|(
name|io
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setNotOffered
argument_list|(
name|io
operator|.
name|isNotOffered
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setDurationType
argument_list|(
name|io
operator|.
name|getSession
argument_list|()
operator|.
name|getDefaultClassDurationType
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|io
operator|.
name|getSession
argument_list|()
operator|.
name|getDefaultClassDurationType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setDurationTypeDefault
argument_list|(
name|io
operator|.
name|getSession
argument_list|()
operator|.
name|getDefaultClassDurationType
argument_list|()
operator|==
literal|null
condition|?
name|MSG
operator|.
name|systemDefaultDurationType
argument_list|()
else|:
name|MSG
operator|.
name|sessionDefault
argument_list|(
name|io
operator|.
name|getSession
argument_list|()
operator|.
name|getDefaultClassDurationType
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setDurationTypeEditable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setInstructionalMethod
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setInstructionalMethodDefault
argument_list|(
name|io
operator|.
name|getSession
argument_list|()
operator|.
name|getDefaultInstructionalMethod
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|io
operator|.
name|getSession
argument_list|()
operator|.
name|getDefaultInstructionalMethod
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setInstructionalMethodEditable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Set
name|configs
init|=
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
decl_stmt|;
name|frm
operator|.
name|setConfigCount
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|configs
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Catalog Link
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
name|String
name|linkLookupClass
init|=
name|ApplicationProperty
operator|.
name|CourseCatalogLinkProvider
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|linkLookupClass
operator|!=
literal|null
operator|&&
name|linkLookupClass
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ExternalLinkLookup
name|lookup
init|=
operator|(
name|ExternalLinkLookup
operator|)
operator|(
name|Class
operator|.
name|forName
argument_list|(
name|linkLookupClass
argument_list|)
operator|.
name|getDeclaredConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
operator|)
decl_stmt|;
name|Map
name|results
init|=
name|lookup
operator|.
name|getLink
argument_list|(
name|io
argument_list|)
decl_stmt|;
if|if
condition|(
name|results
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
name|lookup
operator|.
name|getErrorMessage
argument_list|()
argument_list|)
throw|;
name|frm
operator|.
name|setCatalogLinkLabel
argument_list|(
operator|(
name|String
operator|)
name|results
operator|.
name|get
argument_list|(
name|ExternalLinkLookup
operator|.
name|LINK_LABEL
argument_list|)
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setCatalogLinkLocation
argument_list|(
operator|(
name|String
operator|)
name|results
operator|.
name|get
argument_list|(
name|ExternalLinkLookup
operator|.
name|LINK_LOCATION
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|loadDefaultConfig
condition|)
block|{
if|if
condition|(
name|configs
operator|==
literal|null
operator|||
name|configs
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|frm
operator|.
name|setConfigId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setName
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|InstrOfferingConfig
name|ioc
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|configs
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|frm
operator|.
name|setConfigId
argument_list|(
name|ioc
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|init
condition|)
block|{
name|frm
operator|.
name|setName
argument_list|(
name|ioc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setUnlimited
argument_list|(
name|ioc
operator|.
name|isUnlimitedEnrollment
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|frm
operator|.
name|getName
argument_list|()
operator|==
literal|null
operator|||
name|frm
operator|.
name|getName
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|frm
operator|.
name|setName
argument_list|(
name|InstrOfferingConfig
operator|.
name|getGeneratedName
argument_list|(
name|io
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Loads original config from database      * @param user User object      * @param courseOfferingId Course Offering Uid      * @param frm Form      */
specifier|private
name|Vector
name|loadOriginalConfig
parameter_list|(
name|Long
name|configId
parameter_list|,
name|InstructionalOfferingConfigEditForm
name|frm
parameter_list|)
throws|throws
name|Exception
block|{
name|InstrOfferingConfigDAO
name|cfgDao
init|=
operator|new
name|InstrOfferingConfigDAO
argument_list|()
decl_stmt|;
name|InstrOfferingConfig
name|config
init|=
name|cfgDao
operator|.
name|get
argument_list|(
name|configId
argument_list|)
decl_stmt|;
name|frm
operator|.
name|setLimit
argument_list|(
name|config
operator|.
name|getLimit
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|Vector
name|sp
init|=
name|toSimpleItypeConfig
argument_list|(
name|config
argument_list|)
decl_stmt|;
if|if
condition|(
name|sp
operator|!=
literal|null
operator|&&
name|sp
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
name|Collections
operator|.
name|sort
argument_list|(
name|sp
argument_list|,
operator|new
name|SicComparator
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sp
return|;
block|}
comment|/**      * Add a new Inst. Type to the user defined config      * @param httpSession Http Session object      * @param frm Form object      * @throws Exception      */
specifier|private
name|void
name|addInstructionalType
parameter_list|(
name|InstructionalOfferingConfigEditForm
name|frm
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Create object
name|ItypeDescDAO
name|itypeDao
init|=
operator|new
name|ItypeDescDAO
argument_list|()
decl_stmt|;
name|ItypeDesc
name|itype
init|=
name|itypeDao
operator|.
name|get
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|frm
operator|.
name|getItype
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|itype
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Instructional Type not found"
argument_list|)
throw|;
comment|// Retrieve object containing user defined config from session
name|Vector
name|sp
init|=
operator|(
name|Vector
operator|)
name|sessionContext
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|InstructionalOfferingConfigList
argument_list|)
decl_stmt|;
if|if
condition|(
name|sp
operator|==
literal|null
condition|)
name|sp
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
comment|// Create new object
name|SimpleItypeConfig
name|sic
init|=
operator|new
name|SimpleItypeConfig
argument_list|(
name|itype
argument_list|)
decl_stmt|;
name|sic
operator|.
name|setSubpartId
argument_list|(
operator|-
literal|1L
argument_list|)
expr_stmt|;
comment|//sic.setLimitPerClass(frm.getLimit());
comment|//sic.setRoomCapacity(frm.getLimit());
name|sp
operator|.
name|addElement
argument_list|(
name|sic
argument_list|)
expr_stmt|;
comment|//Collections.sort(sp, new SicComparator());
comment|// Store back in session
name|sessionContext
operator|.
name|setAttribute
argument_list|(
name|SessionAttribute
operator|.
name|InstructionalOfferingConfigList
argument_list|,
name|sp
argument_list|)
expr_stmt|;
block|}
comment|/**      * Processes arrow click and config element delete operations      * @param httpSession Http Session object      * @param id Id of the config element whose shift / delete arrow was clicked      * @param op Operation to be performed      * @throws Exception      */
specifier|private
name|void
name|processShiftOrDelete
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|op
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Read user defined config
name|Vector
name|sp
init|=
operator|(
name|Vector
operator|)
name|sessionContext
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|InstructionalOfferingConfigList
argument_list|)
decl_stmt|;
comment|// No subparts
if|if
condition|(
name|sp
operator|==
literal|null
operator|||
name|sp
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Could not retrieve user defined configs"
argument_list|)
throw|;
comment|// Locate config element
name|Vector
name|indx
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|SimpleItypeConfig
name|result
init|=
name|search
argument_list|(
name|id
argument_list|,
name|indx
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Could not retrieve config element: "
operator|+
name|id
argument_list|)
throw|;
name|int
name|index
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|indx
operator|.
name|elementAt
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// Process ops
if|if
condition|(
name|op
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"shiftUp"
argument_list|)
condition|)
block|{
comment|// Get parent
name|SimpleItypeConfig
name|parent
init|=
name|result
operator|.
name|getParent
argument_list|()
decl_stmt|;
comment|// Element is at the top most level
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
comment|// Switch elements with one above
name|int
name|indx1
init|=
name|index
decl_stmt|;
name|int
name|indx2
init|=
name|indx1
operator|-
literal|1
decl_stmt|;
name|Object
name|tmp
init|=
name|sp
operator|.
name|elementAt
argument_list|(
name|indx1
argument_list|)
decl_stmt|;
name|sp
operator|.
name|insertElementAt
argument_list|(
name|tmp
argument_list|,
name|indx2
argument_list|)
expr_stmt|;
name|sp
operator|.
name|removeElementAt
argument_list|(
name|indx1
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Element is a subpart of another element
else|else
block|{
comment|// Locate the element index in the subparts
name|Vector
name|v
init|=
name|parent
operator|.
name|getSubparts
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|v
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SimpleItypeConfig
name|subp
init|=
operator|(
name|SimpleItypeConfig
operator|)
name|v
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// Switch elements with one above
if|if
condition|(
name|subp
operator|.
name|getId
argument_list|()
operator|==
name|Long
operator|.
name|parseLong
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|Object
name|tmp
init|=
name|v
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|v
operator|.
name|insertElementAt
argument_list|(
name|tmp
argument_list|,
name|i
operator|-
literal|1
argument_list|)
expr_stmt|;
name|v
operator|.
name|removeElementAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
name|op
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"shiftDown"
argument_list|)
condition|)
block|{
comment|// Get parent
name|SimpleItypeConfig
name|parent
init|=
name|result
operator|.
name|getParent
argument_list|()
decl_stmt|;
comment|// Element is at the top most level
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
comment|// Switch elements with one below
name|int
name|indx1
init|=
name|index
operator|+
literal|1
decl_stmt|;
name|int
name|indx2
init|=
name|index
decl_stmt|;
name|Object
name|tmp
init|=
name|sp
operator|.
name|elementAt
argument_list|(
name|indx1
argument_list|)
decl_stmt|;
name|sp
operator|.
name|insertElementAt
argument_list|(
name|tmp
argument_list|,
name|indx2
argument_list|)
expr_stmt|;
name|sp
operator|.
name|removeElementAt
argument_list|(
name|indx1
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Element is a subpart of another element
else|else
block|{
comment|// Locate the element index in the subparts
name|Vector
name|v
init|=
name|parent
operator|.
name|getSubparts
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|v
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SimpleItypeConfig
name|subp
init|=
operator|(
name|SimpleItypeConfig
operator|)
name|v
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// Switch elements with one below
if|if
condition|(
name|subp
operator|.
name|getId
argument_list|()
operator|==
name|Long
operator|.
name|parseLong
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|Object
name|tmp
init|=
name|v
operator|.
name|elementAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
name|v
operator|.
name|insertElementAt
argument_list|(
name|tmp
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|v
operator|.
name|removeElementAt
argument_list|(
name|i
operator|+
literal|2
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
name|op
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"shiftLeft"
argument_list|)
condition|)
block|{
comment|// Get parent
name|SimpleItypeConfig
name|parent
init|=
name|result
operator|.
name|getParent
argument_list|()
decl_stmt|;
comment|// Remove element from parent subpart
name|Vector
name|v
init|=
name|parent
operator|.
name|getSubparts
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|v
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SimpleItypeConfig
name|subp
init|=
operator|(
name|SimpleItypeConfig
operator|)
name|v
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|subp
operator|.
name|getId
argument_list|()
operator|==
name|Long
operator|.
name|parseLong
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|v
operator|.
name|removeElementAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|// Get grandparent and set it as parent of element
name|SimpleItypeConfig
name|grandParent
init|=
name|parent
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|result
operator|.
name|setParent
argument_list|(
name|grandParent
argument_list|)
expr_stmt|;
comment|// Parent is at the top most level
if|if
condition|(
name|grandParent
operator|==
literal|null
condition|)
block|{
name|sp
operator|.
name|insertElementAt
argument_list|(
name|result
argument_list|,
name|index
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Grandparent exists
else|else
block|{
comment|// Locate parent in grandparent subparts
name|Vector
name|v1
init|=
name|grandParent
operator|.
name|getSubparts
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|v1
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SimpleItypeConfig
name|subp
init|=
operator|(
name|SimpleItypeConfig
operator|)
name|v1
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// Add element just after parent subpart
if|if
condition|(
name|subp
operator|.
name|getId
argument_list|()
operator|==
name|parent
operator|.
name|getId
argument_list|()
condition|)
block|{
name|v1
operator|.
name|insertElementAt
argument_list|(
name|result
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
name|op
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"shiftRight"
argument_list|)
condition|)
block|{
comment|// Get parent
name|SimpleItypeConfig
name|parent
init|=
name|result
operator|.
name|getParent
argument_list|()
decl_stmt|;
comment|// Element is at the top most level
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
comment|// Switch elements with one below
name|SimpleItypeConfig
name|curr
init|=
operator|(
name|SimpleItypeConfig
operator|)
name|sp
operator|.
name|elementAt
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|SimpleItypeConfig
name|prev
init|=
operator|(
name|SimpleItypeConfig
operator|)
name|sp
operator|.
name|elementAt
argument_list|(
name|index
operator|-
literal|1
argument_list|)
decl_stmt|;
name|prev
operator|.
name|addSubpart
argument_list|(
name|curr
argument_list|)
expr_stmt|;
name|sp
operator|.
name|removeElementAt
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
comment|// Element is a subpart of another element
else|else
block|{
comment|// Locate the element index in the subparts
name|Vector
name|v
init|=
name|parent
operator|.
name|getSubparts
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|v
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SimpleItypeConfig
name|subp
init|=
operator|(
name|SimpleItypeConfig
operator|)
name|v
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// Add the element to the subpart of the element above
if|if
condition|(
name|subp
operator|.
name|getId
argument_list|()
operator|==
name|Long
operator|.
name|parseLong
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|SimpleItypeConfig
name|curr
init|=
operator|(
name|SimpleItypeConfig
operator|)
name|v
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|SimpleItypeConfig
name|prev
init|=
operator|(
name|SimpleItypeConfig
operator|)
name|v
operator|.
name|elementAt
argument_list|(
name|i
operator|-
literal|1
argument_list|)
decl_stmt|;
name|prev
operator|.
name|addSubpart
argument_list|(
name|curr
argument_list|)
expr_stmt|;
name|v
operator|.
name|removeElementAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
name|op
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"delete"
argument_list|)
condition|)
block|{
comment|// Get parent
name|SimpleItypeConfig
name|parent
init|=
name|result
operator|.
name|getParent
argument_list|()
decl_stmt|;
comment|// Element is at the top most level
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
name|sp
operator|.
name|removeElementAt
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
comment|// Element is a subpart of another element
else|else
block|{
comment|// Locate the element index in the subparts
name|Vector
name|v
init|=
name|parent
operator|.
name|getSubparts
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|v
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SimpleItypeConfig
name|subp
init|=
operator|(
name|SimpleItypeConfig
operator|)
name|v
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|subp
operator|.
name|getId
argument_list|()
operator|==
name|Long
operator|.
name|parseLong
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|v
operator|.
name|removeElementAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
name|sessionContext
operator|.
name|setAttribute
argument_list|(
name|SessionAttribute
operator|.
name|InstructionalOfferingConfigList
argument_list|,
name|sp
argument_list|)
expr_stmt|;
block|}
comment|/**      * Search user-defined configs for SimpleItypeConfig with the given id      * @param httpSession Session object containing user-defined configs      * @param id Id of the target config      * @param indx Stores the row number of the config element that has the match      * @return null if not found, SimpleItypeConfig object if found      */
specifier|private
name|SimpleItypeConfig
name|search
parameter_list|(
name|String
name|id
parameter_list|,
name|Vector
name|indx
parameter_list|,
name|boolean
name|clearErrorFlags
parameter_list|)
block|{
comment|// Read user defined config
name|Vector
name|sp
init|=
operator|(
name|Vector
operator|)
name|sessionContext
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|InstructionalOfferingConfigList
argument_list|)
decl_stmt|;
comment|// No subparts
if|if
condition|(
name|sp
operator|==
literal|null
operator|||
name|sp
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|null
return|;
name|SimpleItypeConfig
name|result
init|=
literal|null
decl_stmt|;
comment|// Loop through itypes
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sp
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SimpleItypeConfig
name|sic
init|=
operator|(
name|SimpleItypeConfig
operator|)
name|sp
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|indx
operator|.
name|clear
argument_list|()
expr_stmt|;
name|indx
operator|.
name|addElement
argument_list|(
literal|""
operator|+
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|clearErrorFlags
condition|)
name|sic
operator|.
name|setHasError
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Recursively process each itype config
name|result
operator|=
name|searchR
argument_list|(
name|sic
argument_list|,
name|id
argument_list|,
name|clearErrorFlags
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
break|break;
block|}
if|if
condition|(
name|clearErrorFlags
condition|)
name|sessionContext
operator|.
name|setAttribute
argument_list|(
name|SessionAttribute
operator|.
name|InstructionalOfferingConfigList
argument_list|,
name|sp
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**      * Recursive function to perform search      * @param sic Parent Config object      * @param id Target Id      * @return null if not found, SimpleItypeConfig object if found      */
specifier|private
name|SimpleItypeConfig
name|searchR
parameter_list|(
name|SimpleItypeConfig
name|sic
parameter_list|,
name|String
name|id
parameter_list|,
name|boolean
name|clearErrorFlags
parameter_list|)
block|{
if|if
condition|(
name|sic
operator|.
name|getId
argument_list|()
operator|==
name|Long
operator|.
name|parseLong
argument_list|(
name|id
argument_list|)
condition|)
return|return
name|sic
return|;
name|Vector
name|v
init|=
name|sic
operator|.
name|getSubparts
argument_list|()
decl_stmt|;
name|SimpleItypeConfig
name|result
init|=
literal|null
decl_stmt|;
comment|// Loop through children sub-parts
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|v
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SimpleItypeConfig
name|sic1
init|=
operator|(
name|SimpleItypeConfig
operator|)
name|v
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|clearErrorFlags
condition|)
name|sic1
operator|.
name|setHasError
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|result
operator|=
name|searchR
argument_list|(
name|sic1
argument_list|,
name|id
argument_list|,
name|clearErrorFlags
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
break|break;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Deletes configuration      * and associated prefs      * @param request      * @param frm      * @throws Exception      */
specifier|private
name|void
name|deleteConfig
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|InstructionalOfferingConfigEditForm
name|frm
parameter_list|)
throws|throws
name|Exception
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
literal|null
decl_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|InstrOfferingConfigDAO
name|iocDao
init|=
operator|new
name|InstrOfferingConfigDAO
argument_list|()
decl_stmt|;
name|hibSession
operator|=
name|iocDao
operator|.
name|getSession
argument_list|()
expr_stmt|;
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Long
name|configId
init|=
name|frm
operator|.
name|getConfigId
argument_list|()
decl_stmt|;
name|InstrOfferingConfig
name|ioc
init|=
name|iocDao
operator|.
name|get
argument_list|(
name|configId
argument_list|)
decl_stmt|;
name|InstructionalOffering
name|io
init|=
name|ioc
operator|.
name|getInstructionalOffering
argument_list|()
decl_stmt|;
name|deleteSubpart
argument_list|(
name|request
argument_list|,
name|hibSession
argument_list|,
name|ioc
argument_list|,
operator|new
name|HashMap
argument_list|()
argument_list|)
expr_stmt|;
name|io
operator|.
name|removeConfiguration
argument_list|(
name|ioc
argument_list|)
expr_stmt|;
name|io
operator|.
name|computeLabels
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ioc
operator|.
name|isUnlimitedEnrollment
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
name|io
operator|.
name|setLimit
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|io
operator|.
name|getLimit
argument_list|()
operator|.
name|intValue
argument_list|()
operator|-
name|ioc
operator|.
name|getLimit
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|sessionContext
argument_list|,
name|io
argument_list|,
name|io
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" ["
operator|+
name|ioc
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|INSTR_CFG_EDIT
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|DELETE
argument_list|,
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Event
operator|.
name|deleteFromEvents
argument_list|(
name|hibSession
argument_list|,
name|ioc
argument_list|)
expr_stmt|;
name|Exam
operator|.
name|deleteFromExams
argument_list|(
name|hibSession
argument_list|,
name|ioc
argument_list|)
expr_stmt|;
comment|// The following line was calling delete ioc for the second time (which is a problem for MySQL as
comment|// it returns zero number of deleted lines even when called in the same transaction).
comment|//hibSession.delete(ioc);
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|io
argument_list|)
expr_stmt|;
name|String
name|className
init|=
name|ApplicationProperty
operator|.
name|ExternalActionInstrOffrConfigChange
operator|.
name|value
argument_list|()
decl_stmt|;
name|ExternalInstrOffrConfigChangeAction
name|configChangeAction
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
operator|&&
name|className
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|configChangeAction
operator|=
operator|(
name|ExternalInstrOffrConfigChangeAction
operator|)
operator|(
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|getDeclaredConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
operator|)
expr_stmt|;
if|if
condition|(
operator|!
name|configChangeAction
operator|.
name|validateConfigChangeCanOccur
argument_list|(
name|io
argument_list|,
name|hibSession
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Configuration change violates rules for Add On, rolling back the change."
argument_list|)
throw|;
block|}
block|}
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|refresh
argument_list|(
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|configChangeAction
operator|!=
literal|null
condition|)
block|{
name|configChangeAction
operator|.
name|performExternalInstrOffrConfigChangeAction
argument_list|(
name|io
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
block|}
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|e
operator|)
throw|;
block|}
block|}
comment|/**      * Update configuration without destroying existing subparts/classes      * and associated prefs      * @param request      * @param frm      * @throws Exception      */
specifier|private
name|void
name|updateConfig
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|InstructionalOfferingConfigEditForm
name|frm
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Read user defined config
name|Vector
name|sp
init|=
operator|(
name|Vector
operator|)
name|sessionContext
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|InstructionalOfferingConfigList
argument_list|)
decl_stmt|;
comment|// No subparts
if|if
condition|(
name|sp
operator|==
literal|null
operator|||
name|sp
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return;
name|RoomGroup
name|rg
init|=
name|RoomGroup
operator|.
name|getGlobalDefaultRoomGroup
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
decl_stmt|;
name|InstrOfferingConfig
name|ioc
init|=
literal|null
decl_stmt|;
name|InstructionalOffering
name|io
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
literal|null
decl_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|InstructionalOfferingDAO
name|ioDao
init|=
operator|new
name|InstructionalOfferingDAO
argument_list|()
decl_stmt|;
name|InstrOfferingConfigDAO
name|iocDao
init|=
operator|new
name|InstrOfferingConfigDAO
argument_list|()
decl_stmt|;
name|hibSession
operator|=
name|iocDao
operator|.
name|getSession
argument_list|()
expr_stmt|;
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|io
operator|=
name|ioDao
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|frm
operator|.
name|getInstrOfferingId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Long
name|configId
init|=
name|frm
operator|.
name|getConfigId
argument_list|()
decl_stmt|;
name|Boolean
name|unlimitedEnroll
init|=
operator|(
name|frm
operator|.
name|getUnlimited
argument_list|()
operator|==
literal|null
operator|)
condition|?
name|Boolean
operator|.
name|valueOf
argument_list|(
literal|false
argument_list|)
else|:
name|frm
operator|.
name|getUnlimited
argument_list|()
decl_stmt|;
name|int
name|limit
init|=
operator|(
name|unlimitedEnroll
operator|.
name|booleanValue
argument_list|()
operator|)
condition|?
literal|0
else|:
name|frm
operator|.
name|getLimit
argument_list|()
decl_stmt|;
name|ClassDurationType
name|dtype
init|=
operator|(
name|frm
operator|.
name|getDurationType
argument_list|()
operator|==
literal|null
operator|||
name|frm
operator|.
name|getDurationType
argument_list|()
operator|<
literal|0
condition|?
literal|null
else|:
name|ClassDurationTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|frm
operator|.
name|getDurationType
argument_list|()
argument_list|,
name|hibSession
argument_list|)
operator|)
decl_stmt|;
name|InstructionalMethod
name|imeth
init|=
operator|(
name|frm
operator|.
name|getInstructionalMethod
argument_list|()
operator|==
literal|null
operator|||
name|frm
operator|.
name|getInstructionalMethod
argument_list|()
operator|<
literal|0
condition|?
literal|null
else|:
name|InstructionalMethodDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|frm
operator|.
name|getInstructionalMethod
argument_list|()
argument_list|,
name|hibSession
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|configId
operator|==
literal|null
operator|||
name|configId
operator|.
name|intValue
argument_list|()
operator|==
literal|0
condition|)
block|{
name|ioc
operator|=
operator|new
name|InstrOfferingConfig
argument_list|()
expr_stmt|;
name|ioc
operator|.
name|setLimit
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|limit
argument_list|)
argument_list|)
expr_stmt|;
name|ioc
operator|.
name|setName
argument_list|(
name|frm
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ioc
operator|.
name|setUnlimitedEnrollment
argument_list|(
name|unlimitedEnroll
argument_list|)
expr_stmt|;
name|ioc
operator|.
name|setInstructionalOffering
argument_list|(
name|io
argument_list|)
expr_stmt|;
name|ioc
operator|.
name|setClassDurationType
argument_list|(
name|dtype
argument_list|)
expr_stmt|;
name|ioc
operator|.
name|setInstructionalMethod
argument_list|(
name|imeth
argument_list|)
expr_stmt|;
name|io
operator|.
name|addToinstrOfferingConfigs
argument_list|(
name|ioc
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|ioc
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|io
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ioc
operator|=
name|iocDao
operator|.
name|get
argument_list|(
name|configId
argument_list|)
expr_stmt|;
name|ioc
operator|.
name|setLimit
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|limit
argument_list|)
argument_list|)
expr_stmt|;
name|ioc
operator|.
name|setName
argument_list|(
name|frm
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ioc
operator|.
name|setUnlimitedEnrollment
argument_list|(
name|unlimitedEnroll
argument_list|)
expr_stmt|;
name|ioc
operator|.
name|setClassDurationType
argument_list|(
name|dtype
argument_list|)
expr_stmt|;
name|ioc
operator|.
name|setInstructionalMethod
argument_list|(
name|imeth
argument_list|)
expr_stmt|;
block|}
name|HashMap
name|notDeletedSubparts
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|// Update subparts in the modified config
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sp
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SimpleItypeConfig
name|sic
init|=
operator|(
name|SimpleItypeConfig
operator|)
name|sp
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|createOrUpdateSubpart
argument_list|(
name|request
argument_list|,
name|hibSession
argument_list|,
name|sic
argument_list|,
name|ioc
argument_list|,
literal|null
argument_list|,
name|rg
argument_list|,
name|notDeletedSubparts
argument_list|)
expr_stmt|;
name|createOrUpdateClasses
argument_list|(
name|request
argument_list|,
name|hibSession
argument_list|,
name|sic
argument_list|,
name|ioc
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// Update Parents
name|Set
name|s
init|=
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|s
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|subp
init|=
operator|(
name|SchedulingSubpart
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|subp
operator|.
name|getParentSubpart
argument_list|()
operator|==
literal|null
condition|)
block|{
name|Debug
operator|.
name|debug
argument_list|(
literal|"Setting parents for "
operator|+
name|subp
operator|.
name|getItypeDesc
argument_list|()
argument_list|)
expr_stmt|;
name|updateParentClasses
argument_list|(
name|subp
argument_list|,
literal|null
argument_list|,
name|hibSession
argument_list|,
name|notDeletedSubparts
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Remove any subparts that do not exist in the modified config
name|deleteSubpart
argument_list|(
name|request
argument_list|,
name|hibSession
argument_list|,
name|ioc
argument_list|,
name|notDeletedSubparts
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|ioc
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|io
argument_list|)
expr_stmt|;
name|String
name|className
init|=
name|ApplicationProperty
operator|.
name|ExternalActionInstrOffrConfigChange
operator|.
name|value
argument_list|()
decl_stmt|;
name|ExternalInstrOffrConfigChangeAction
name|configChangeAction
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
operator|&&
name|className
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|configChangeAction
operator|=
operator|(
name|ExternalInstrOffrConfigChangeAction
operator|)
operator|(
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|getDeclaredConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
operator|)
expr_stmt|;
if|if
condition|(
operator|!
name|configChangeAction
operator|.
name|validateConfigChangeCanOccur
argument_list|(
name|io
argument_list|,
name|hibSession
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Configuration change violates rules for Add On, rolling back the change."
argument_list|)
throw|;
block|}
block|}
name|io
operator|.
name|computeLabels
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|sessionContext
argument_list|,
name|ioc
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|INSTR_CFG_EDIT
argument_list|,
operator|(
name|configId
operator|==
literal|null
operator|||
name|configId
operator|.
name|intValue
argument_list|()
operator|==
literal|0
condition|?
name|ChangeLog
operator|.
name|Operation
operator|.
name|CREATE
else|:
name|ChangeLog
operator|.
name|Operation
operator|.
name|UPDATE
operator|)
argument_list|,
name|ioc
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|refresh
argument_list|(
name|ioc
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|refresh
argument_list|(
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|configChangeAction
operator|!=
literal|null
condition|)
block|{
name|configChangeAction
operator|.
name|performExternalInstrOffrConfigChangeAction
argument_list|(
name|io
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
block|}
try|try
block|{
if|if
condition|(
name|ioc
operator|!=
literal|null
condition|)
name|hibSession
operator|.
name|refresh
argument_list|(
name|ioc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e2
parameter_list|)
block|{
block|}
try|try
block|{
if|if
condition|(
name|io
operator|!=
literal|null
condition|)
name|hibSession
operator|.
name|refresh
argument_list|(
name|io
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e3
parameter_list|)
block|{
block|}
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|e
operator|)
throw|;
block|}
block|}
specifier|private
name|void
name|updateParentClasses
parameter_list|(
name|SchedulingSubpart
name|subpart
parameter_list|,
name|SchedulingSubpart
name|parent
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|HashMap
name|notDeletedSubparts
parameter_list|)
block|{
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
name|Debug
operator|.
name|debug
argument_list|(
literal|"Parent is null. Setting all classes to have no parent"
argument_list|)
expr_stmt|;
name|Set
name|classes
init|=
name|subpart
operator|.
name|getClasses
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|classes
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|c
operator|.
name|setParentClass
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Set
name|classes
init|=
name|subpart
operator|.
name|getClasses
argument_list|()
decl_stmt|;
name|ArrayList
name|classesList
init|=
operator|new
name|ArrayList
argument_list|(
name|classes
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|classesList
argument_list|,
operator|new
name|ClassComparator
argument_list|(
name|ClassComparator
operator|.
name|COMPARE_BY_ID
argument_list|)
argument_list|)
expr_stmt|;
name|Set
name|parentClasses
init|=
name|parent
operator|.
name|getClasses
argument_list|()
decl_stmt|;
name|int
name|parentNumClasses
init|=
name|parentClasses
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentNumClasses
operator|>
literal|0
condition|)
block|{
name|Iterator
name|cci
init|=
name|classesList
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|classPerParent
init|=
name|classesList
operator|.
name|size
argument_list|()
operator|/
name|parentNumClasses
decl_stmt|;
name|int
name|classPerParentRem
init|=
name|classesList
operator|.
name|size
argument_list|()
operator|%
name|parentNumClasses
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Setting "
operator|+
name|classPerParent
operator|+
literal|" class(es) per parent"
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Odd number of classes found - "
operator|+
name|classPerParentRem
operator|+
literal|" classes ... "
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|parentClasses
operator|.
name|iterator
argument_list|()
init|;
operator|(
name|i
operator|.
name|hasNext
argument_list|()
operator|&&
name|classPerParent
operator|!=
literal|0
operator|)
condition|;
control|)
block|{
name|Class_
name|parentClass
init|=
operator|(
name|Class_
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|classPerParent
condition|;
name|j
operator|++
control|)
block|{
name|Class_
name|childClass
init|=
operator|(
name|Class_
operator|)
name|cci
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|notDeletedSubparts
operator|.
name|get
argument_list|(
name|childClass
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|Debug
operator|.
name|debug
argument_list|(
literal|"Setting class "
operator|+
name|childClass
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" to parent "
operator|+
name|parentClass
operator|.
name|getClassLabel
argument_list|()
argument_list|)
expr_stmt|;
name|childClass
operator|.
name|setParentClass
argument_list|(
name|parentClass
argument_list|)
expr_stmt|;
name|parentClass
operator|.
name|addTochildClasses
argument_list|(
name|childClass
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|parentClass
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|childClass
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|childClass
argument_list|,
name|Right
operator|.
name|ClassDelete
argument_list|)
condition|)
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Class "
operator|+
name|childClass
operator|.
name|getClassLabel
argument_list|(
name|hibSession
argument_list|)
operator|+
literal|" cannot be deleted."
argument_list|)
throw|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Deleting class "
operator|+
name|childClass
operator|.
name|getClassLabel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|childClass
operator|.
name|getParentClass
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Class_
name|pc
init|=
name|childClass
operator|.
name|getParentClass
argument_list|()
decl_stmt|;
name|pc
operator|.
name|getChildClasses
argument_list|()
operator|.
name|remove
argument_list|(
name|childClass
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|pc
argument_list|)
expr_stmt|;
name|childClass
operator|.
name|setParentClass
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|childClass
argument_list|)
expr_stmt|;
block|}
name|classes
operator|.
name|remove
argument_list|(
name|childClass
argument_list|)
expr_stmt|;
name|childClass
operator|.
name|deleteAllDependentObjects
argument_list|(
name|hibSession
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|childClass
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|subpart
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|classPerParentRem
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|cci
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|childClass
operator|=
operator|(
name|Class_
operator|)
name|cci
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|notDeletedSubparts
operator|.
name|get
argument_list|(
name|childClass
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|Debug
operator|.
name|debug
argument_list|(
literal|"Setting ODD class "
operator|+
name|childClass
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" to parent "
operator|+
name|parentClass
operator|.
name|getClassLabel
argument_list|()
argument_list|)
expr_stmt|;
name|childClass
operator|.
name|setParentClass
argument_list|(
name|parentClass
argument_list|)
expr_stmt|;
name|parentClass
operator|.
name|addTochildClasses
argument_list|(
name|childClass
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|parentClass
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|childClass
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|childClass
argument_list|,
name|Right
operator|.
name|ClassDelete
argument_list|)
condition|)
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Class "
operator|+
name|childClass
operator|.
name|getClassLabel
argument_list|(
name|hibSession
argument_list|)
operator|+
literal|" cannot be deleted."
argument_list|)
throw|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Deleting ODD class "
operator|+
name|childClass
operator|.
name|getClassLabel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|childClass
operator|.
name|getParentClass
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Class_
name|pc
init|=
name|childClass
operator|.
name|getParentClass
argument_list|()
decl_stmt|;
name|pc
operator|.
name|getChildClasses
argument_list|()
operator|.
name|remove
argument_list|(
name|childClass
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|pc
argument_list|)
expr_stmt|;
name|childClass
operator|.
name|setParentClass
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|childClass
argument_list|)
expr_stmt|;
block|}
name|classes
operator|.
name|remove
argument_list|(
name|childClass
argument_list|)
expr_stmt|;
name|childClass
operator|.
name|deleteAllDependentObjects
argument_list|(
name|hibSession
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|childClass
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|childClass
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
operator|--
name|classPerParentRem
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|classPerParentRem
operator|!=
literal|0
condition|)
block|{
name|Iterator
name|cci2
init|=
name|classesList
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|parentClasses
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|parentClass
init|=
operator|(
name|Class_
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|cci2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Class_
name|childClass
init|=
operator|(
name|Class_
operator|)
name|cci2
operator|.
name|next
argument_list|()
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Setting ODD class "
operator|+
name|childClass
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" to parent "
operator|+
name|parentClass
operator|.
name|getClassLabel
argument_list|()
argument_list|)
expr_stmt|;
name|childClass
operator|.
name|setParentClass
argument_list|(
name|parentClass
argument_list|)
expr_stmt|;
name|parentClass
operator|.
name|addTochildClasses
argument_list|(
name|childClass
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|parentClass
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|childClass
argument_list|)
expr_stmt|;
block|}
operator|--
name|classPerParentRem
expr_stmt|;
if|if
condition|(
name|classPerParentRem
operator|==
literal|0
condition|)
break|break;
block|}
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Traverse through children
name|Set
name|childSubparts
init|=
name|subpart
operator|.
name|getChildSubparts
argument_list|()
decl_stmt|;
if|if
condition|(
name|childSubparts
operator|==
literal|null
operator|||
name|childSubparts
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return;
for|for
control|(
name|Iterator
name|i
init|=
name|childSubparts
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|cs
init|=
operator|(
name|SchedulingSubpart
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|updateParentClasses
argument_list|(
name|cs
argument_list|,
name|subpart
argument_list|,
name|hibSession
argument_list|,
name|notDeletedSubparts
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Deletes all the subparts that do not exist in the modified config      * @param request      * @param hibSession      * @param ioc      * @param notDeletedSubparts      * @throws Exception      */
specifier|private
name|void
name|deleteSubpart
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|InstrOfferingConfig
name|ioc
parameter_list|,
name|HashMap
name|notDeletedSubparts
parameter_list|)
throws|throws
name|Exception
block|{
name|Set
name|s
init|=
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
decl_stmt|;
name|HashMap
name|deletedSubparts
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|s
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|tmpSubpart
init|=
operator|(
name|SchedulingSubpart
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|notDeletedSubparts
operator|.
name|get
argument_list|(
name|tmpSubpart
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|Debug
operator|.
name|debug
argument_list|(
literal|"Deleting subpart ... "
operator|+
name|tmpSubpart
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|", "
operator|+
name|tmpSubpart
operator|.
name|getItypeDesc
argument_list|()
argument_list|)
expr_stmt|;
comment|// Delete classes
name|Set
name|classes
init|=
name|tmpSubpart
operator|.
name|getClasses
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|classes
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|deleteChildClasses
argument_list|(
name|c
argument_list|,
name|hibSession
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Class_
name|pc
init|=
name|c
operator|.
name|getParentClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|pc
operator|!=
literal|null
condition|)
block|{
name|pc
operator|.
name|getChildClasses
argument_list|()
operator|.
name|remove
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|notDeletedSubparts
operator|.
name|get
argument_list|(
name|pc
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|pc
argument_list|)
expr_stmt|;
block|}
name|j
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
comment|// Delete from parent
name|SchedulingSubpart
name|parentSubpart
init|=
name|tmpSubpart
operator|.
name|getParentSubpart
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentSubpart
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|parentSubpart
operator|.
name|getChildSubparts
argument_list|()
operator|!=
literal|null
condition|)
name|parentSubpart
operator|.
name|getChildSubparts
argument_list|()
operator|.
name|remove
argument_list|(
name|tmpSubpart
argument_list|)
expr_stmt|;
name|tmpSubpart
operator|.
name|setParentSubpart
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|deletedSubparts
operator|.
name|get
argument_list|(
name|parentSubpart
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|parentSubpart
argument_list|)
expr_stmt|;
block|}
comment|// Remove references from child subparts
name|Set
name|childSubparts
init|=
name|tmpSubpart
operator|.
name|getChildSubparts
argument_list|()
decl_stmt|;
if|if
condition|(
name|childSubparts
operator|!=
literal|null
condition|)
name|Debug
operator|.
name|debug
argument_list|(
literal|"Child subparts exist ... "
operator|+
name|childSubparts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|tmpSubpart
operator|.
name|setChildSubparts
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|deletedSubparts
operator|.
name|put
argument_list|(
name|tmpSubpart
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|tmpSubpart
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|tmpSubpart
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|ioc
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
comment|/**      * Recursively process the updated config subparts      * @param request      * @param hibSession      * @param sic      * @param ioc      * @param parent      * @param mgr      * @param notDeletedSubparts Holds all the subpart ids encountered while recursing      * @throws Exception      */
specifier|private
name|void
name|createOrUpdateSubpart
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|SimpleItypeConfig
name|sic
parameter_list|,
name|InstrOfferingConfig
name|ioc
parameter_list|,
name|SchedulingSubpart
name|parent
parameter_list|,
name|RoomGroup
name|rg
parameter_list|,
name|HashMap
name|notDeletedSubparts
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Set attributes
name|String
name|subpartId
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"subpartId"
operator|+
name|sic
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|minLimitPerClass
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"mnlpc"
operator|+
name|sic
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|maxLimitPerClass
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"mxlpc"
operator|+
name|sic
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|minPerWk
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"mpw"
operator|+
name|sic
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|numClasses
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"nc"
operator|+
name|sic
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|numRooms
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"nr"
operator|+
name|sic
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|roomRatio
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"rr"
operator|+
name|sic
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|managingDept
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"md"
operator|+
name|sic
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|disabled
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"disabled"
operator|+
name|sic
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|subpartId
operator|!=
literal|null
condition|)
name|sic
operator|.
name|setSubpartId
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|subpartId
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|minLimitPerClass
operator|!=
literal|null
condition|)
name|sic
operator|.
name|setMinLimitPerClass
argument_list|(
name|Constants
operator|.
name|getPositiveInteger
argument_list|(
name|minLimitPerClass
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxLimitPerClass
operator|!=
literal|null
condition|)
name|sic
operator|.
name|setMaxLimitPerClass
argument_list|(
name|Constants
operator|.
name|getPositiveInteger
argument_list|(
name|maxLimitPerClass
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|minPerWk
operator|!=
literal|null
condition|)
name|sic
operator|.
name|setMinPerWeek
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|minPerWk
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|numClasses
operator|!=
literal|null
condition|)
name|sic
operator|.
name|setNumClasses
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|numClasses
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|numRooms
operator|!=
literal|null
condition|)
name|sic
operator|.
name|setNumRooms
argument_list|(
name|Constants
operator|.
name|getPositiveInteger
argument_list|(
name|numRooms
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|roomRatio
operator|!=
literal|null
condition|)
name|sic
operator|.
name|setRoomRatio
argument_list|(
name|Constants
operator|.
name|getPositiveFloat
argument_list|(
name|roomRatio
argument_list|,
literal|0.0f
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|managingDept
operator|!=
literal|null
condition|)
name|sic
operator|.
name|setManagingDeptId
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|managingDept
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|disabled
operator|!=
literal|null
condition|)
name|sic
operator|.
name|setDisabled
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"disabled"
operator|+
name|sic
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// Read attributes
name|long
name|sid
init|=
name|sic
operator|.
name|getSubpartId
argument_list|()
decl_stmt|;
name|int
name|mnlpc
init|=
name|sic
operator|.
name|getMinLimitPerClass
argument_list|()
decl_stmt|;
name|int
name|mxlpc
init|=
name|sic
operator|.
name|getMaxLimitPerClass
argument_list|()
decl_stmt|;
name|int
name|mpw
init|=
name|sic
operator|.
name|getMinPerWeek
argument_list|()
decl_stmt|;
name|int
name|nr
init|=
name|sic
operator|.
name|getNumRooms
argument_list|()
decl_stmt|;
name|float
name|rr
init|=
name|sic
operator|.
name|getRoomRatio
argument_list|()
decl_stmt|;
name|long
name|md
init|=
name|sic
operator|.
name|getManagingDeptId
argument_list|()
decl_stmt|;
name|boolean
name|db
init|=
name|sic
operator|.
name|isDisabled
argument_list|()
decl_stmt|;
if|if
condition|(
name|ioc
operator|.
name|isUnlimitedEnrollment
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|mnlpc
operator|=
literal|0
expr_stmt|;
name|mxlpc
operator|=
literal|0
expr_stmt|;
name|nr
operator|=
literal|0
expr_stmt|;
name|rr
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"varLimits"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|mnlpc
operator|=
name|mxlpc
expr_stmt|;
block|}
name|SchedulingSubpart
name|subpart
init|=
literal|null
decl_stmt|;
comment|// Subpart does not exist
if|if
condition|(
name|sid
operator|<
literal|0
condition|)
block|{
name|Debug
operator|.
name|debug
argument_list|(
literal|"Subpart does not exist ... Creating subpart - "
operator|+
name|sic
operator|.
name|getItype
argument_list|()
operator|.
name|getDesc
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create subpart
name|subpart
operator|=
operator|new
name|SchedulingSubpart
argument_list|()
expr_stmt|;
name|subpart
operator|.
name|setInstrOfferingConfig
argument_list|(
name|ioc
argument_list|)
expr_stmt|;
name|subpart
operator|.
name|setItype
argument_list|(
name|sic
operator|.
name|getItype
argument_list|()
argument_list|)
expr_stmt|;
name|subpart
operator|.
name|setMinutesPerWk
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|mpw
argument_list|)
argument_list|)
expr_stmt|;
name|subpart
operator|.
name|setParentSubpart
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|subpart
operator|.
name|setAutoSpreadInTime
argument_list|(
name|ApplicationProperty
operator|.
name|SchedulingSubpartAutoSpreadInTimeDefault
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
name|subpart
operator|.
name|setStudentAllowOverlap
argument_list|(
name|ApplicationProperty
operator|.
name|SchedulingSubpartStudentOverlapsDefault
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
name|ioc
operator|.
name|addToschedulingSubparts
argument_list|(
name|subpart
argument_list|)
expr_stmt|;
if|if
condition|(
name|md
operator|<
literal|0
operator|&&
operator|!
name|ioc
operator|.
name|isUnlimitedEnrollment
argument_list|()
operator|.
name|booleanValue
argument_list|()
operator|&&
name|rg
operator|!=
literal|null
condition|)
block|{
comment|// Add default room group pref of classroom
name|HashSet
name|prefs
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|RoomGroupPref
name|rgp
init|=
operator|new
name|RoomGroupPref
argument_list|()
decl_stmt|;
name|rgp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|PreferenceLevel
operator|.
name|PREF_LEVEL_REQUIRED
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rgp
operator|.
name|setRoomGroup
argument_list|(
name|rg
argument_list|)
expr_stmt|;
name|rgp
operator|.
name|setOwner
argument_list|(
name|subpart
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|add
argument_list|(
name|rgp
argument_list|)
expr_stmt|;
name|subpart
operator|.
name|setPreferences
argument_list|(
name|prefs
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|subpart
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|refresh
argument_list|(
name|subpart
argument_list|)
expr_stmt|;
name|sid
operator|=
name|subpart
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
expr_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"New subpart uniqueid: "
operator|+
name|sid
argument_list|)
expr_stmt|;
name|sic
operator|.
name|setSubpartId
argument_list|(
name|sid
argument_list|)
expr_stmt|;
name|notDeletedSubparts
operator|.
name|put
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|sid
argument_list|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
comment|// End If: Subpart does not exist
comment|// Subpart exists
else|else
block|{
name|Debug
operator|.
name|debug
argument_list|(
literal|"Subpart exists ... Updating"
argument_list|)
expr_stmt|;
name|notDeletedSubparts
operator|.
name|put
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|sid
argument_list|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|Set
name|s
init|=
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|s
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|tmpSubpart
init|=
operator|(
name|SchedulingSubpart
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|tmpSubpart
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
operator|==
name|sid
condition|)
block|{
name|subpart
operator|=
name|tmpSubpart
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|subpart
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Scheduling Subpart "
operator|+
name|sid
operator|+
literal|" was not found."
argument_list|)
throw|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Creating / Updating subpart - "
operator|+
name|subpart
operator|.
name|getItypeDesc
argument_list|()
argument_list|)
expr_stmt|;
name|Set
name|classes
init|=
name|subpart
operator|.
name|getClasses
argument_list|()
decl_stmt|;
comment|// Update only if user has permissions and does not have mixed managed classes
comment|//if (subpart.isEditableBy(Web.getUser(request.getSession()))&& !subpart.hasMixedManagedClasses()) {
if|if
condition|(
operator|!
name|db
condition|)
block|{
comment|// If minutes per week has changed then delete time pattern and time prefs
if|if
condition|(
name|subpart
operator|.
name|getMinutesPerWk
argument_list|()
operator|.
name|intValue
argument_list|()
operator|!=
name|mpw
condition|)
block|{
name|Debug
operator|.
name|debug
argument_list|(
literal|"Minutes per week changed ... Deleting time prefs on subpart and classes"
argument_list|)
expr_stmt|;
name|subpart
operator|.
name|setMinutesPerWk
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|mpw
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ApplicationProperty
operator|.
name|ConfigEditDeleteTimePrefs
operator|.
name|isTrue
argument_list|()
condition|)
block|{
name|DurationModel
name|model
init|=
name|subpart
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getDurationModel
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|subpart
operator|.
name|getPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|pref
init|=
operator|(
name|Preference
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|pref
operator|instanceof
name|TimePref
operator|&&
operator|!
name|model
operator|.
name|isValidCombination
argument_list|(
name|mpw
argument_list|,
name|subpart
operator|.
name|effectiveDatePattern
argument_list|()
argument_list|,
operator|(
operator|(
name|TimePref
operator|)
name|pref
operator|)
operator|.
name|getTimePattern
argument_list|()
argument_list|)
condition|)
block|{
name|pref
operator|.
name|setOwner
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|pref
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|classes
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Set
name|cPrefs
init|=
name|c
operator|.
name|getPreferences
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|cPrefs
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|pref
init|=
operator|(
name|Preference
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|pref
operator|instanceof
name|TimePref
operator|&&
operator|!
name|model
operator|.
name|isValidCombination
argument_list|(
name|mpw
argument_list|,
name|c
operator|.
name|effectiveDatePattern
argument_list|()
argument_list|,
operator|(
operator|(
name|TimePref
operator|)
name|pref
operator|)
operator|.
name|getTimePattern
argument_list|()
argument_list|)
condition|)
block|{
name|pref
operator|.
name|setOwner
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|pref
argument_list|)
expr_stmt|;
name|j
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Manager changed
name|boolean
name|managerChanged
init|=
literal|false
decl_stmt|;
name|long
name|mdId
init|=
name|md
decl_stmt|;
if|if
condition|(
name|md
operator|<
literal|0
condition|)
block|{
name|mdId
operator|=
name|subpart
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|subpart
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
operator|!=
name|mdId
condition|)
block|{
name|Debug
operator|.
name|debug
argument_list|(
literal|"Subpart Managing department changed ..."
argument_list|)
expr_stmt|;
name|managerChanged
operator|=
literal|true
expr_stmt|;
comment|// Remove from distribution prefs
name|subpart
operator|.
name|deleteAllDistributionPreferences
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
comment|// Clear all prefs - except time& distribution
name|Set
name|prefs
init|=
name|subpart
operator|.
name|getPreferences
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|prefI
init|=
name|prefs
operator|.
name|iterator
argument_list|()
init|;
name|prefI
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|a
init|=
name|prefI
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|a
operator|instanceof
name|RoomPref
operator|||
name|a
operator|instanceof
name|BuildingPref
operator|||
name|a
operator|instanceof
name|RoomGroupPref
operator|||
name|a
operator|instanceof
name|RoomFeaturePref
condition|)
block|{
name|prefI
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
comment|//Weaken time preferences if the new manager is external
if|if
condition|(
name|a
operator|instanceof
name|TimePref
condition|)
block|{
name|Department
name|mgDept
init|=
operator|new
name|DepartmentDAO
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|mdId
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|mgDept
operator|.
name|isExternalManager
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
comment|//weaken only when both controling and managing departments do not allow required time
if|if
condition|(
name|subpart
operator|.
name|getControllingDept
argument_list|()
operator|.
name|isAllowReqTime
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|subpart
operator|.
name|getControllingDept
argument_list|()
operator|.
name|isAllowReqTime
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
if|if
condition|(
name|mgDept
operator|.
name|isAllowReqTime
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|mgDept
operator|.
name|isAllowReqTime
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
operator|(
operator|(
name|TimePref
operator|)
name|a
operator|)
operator|.
name|weakenHardPreferences
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/*                             // Set all time prefs to neutral in order to preserve time pattern                     		TimePref tp = new TimePref();                     		tp.setTimePattern(((TimePref) a).getTimePattern());                     		String prefStr = tp.getTimePatternModel().getPreferences();                     		((TimePref) a).setPreference(tp.getPreference());                             */
block|}
block|}
comment|// Check if changed to Department and is not unlimited enroll
if|if
condition|(
name|md
operator|<
literal|0
operator|&&
operator|!
name|ioc
operator|.
name|isUnlimitedEnrollment
argument_list|()
operator|.
name|booleanValue
argument_list|()
operator|&&
name|rg
operator|!=
literal|null
condition|)
block|{
comment|// Add default room group pref of classroom
name|RoomGroupPref
name|rgp
init|=
operator|new
name|RoomGroupPref
argument_list|()
decl_stmt|;
name|rgp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|PreferenceLevel
operator|.
name|PREF_LEVEL_REQUIRED
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rgp
operator|.
name|setRoomGroup
argument_list|(
name|rg
argument_list|)
expr_stmt|;
name|rgp
operator|.
name|setOwner
argument_list|(
name|subpart
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|add
argument_list|(
name|rgp
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Update expected capacity and room capacity
for|for
control|(
name|Iterator
name|i
init|=
name|classes
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Debug
operator|.
name|debug
argument_list|(
literal|"Updating expected capacity and room capacity on class ..."
argument_list|)
expr_stmt|;
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|c
operator|.
name|setExpectedCapacity
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|mnlpc
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|setMaxExpectedCapacity
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|mxlpc
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|setRoomRatio
argument_list|(
name|Float
operator|.
name|valueOf
argument_list|(
name|rr
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|setNbrRooms
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|nr
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getDisplayInstructor
argument_list|()
operator|==
literal|null
condition|)
block|{
name|c
operator|.
name|setDisplayInstructor
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|.
name|getEnabledForStudentScheduling
argument_list|()
operator|==
literal|null
condition|)
block|{
name|c
operator|.
name|setEnabledForStudentScheduling
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|managerChanged
condition|)
block|{
if|if
condition|(
name|c
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
operator|!=
name|mdId
condition|)
block|{
name|Debug
operator|.
name|debug
argument_list|(
literal|"Class Managing department changed ..."
argument_list|)
expr_stmt|;
comment|// Update Managing Department
name|c
operator|.
name|setManagingDept
argument_list|(
operator|new
name|DepartmentDAO
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|mdId
argument_list|)
argument_list|)
argument_list|,
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
comment|// Remove from distribution prefs
name|c
operator|.
name|deleteAllDistributionPreferences
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
comment|// Clear all prefs - except time& distribution
name|Set
name|prefs
init|=
name|c
operator|.
name|getPreferences
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|prefI
init|=
name|prefs
operator|.
name|iterator
argument_list|()
init|;
name|prefI
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|a
init|=
name|prefI
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|a
operator|instanceof
name|RoomPref
operator|||
name|a
operator|instanceof
name|BuildingPref
operator|||
name|a
operator|instanceof
name|RoomGroupPref
operator|||
name|a
operator|instanceof
name|RoomFeaturePref
condition|)
block|{
name|prefI
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
comment|// Weaken time preferences if the new manager is external, remove exact times
if|if
condition|(
name|a
operator|instanceof
name|TimePref
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|TimePref
operator|)
name|a
operator|)
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getType
argument_list|()
operator|.
name|intValue
argument_list|()
operator|==
name|TimePattern
operator|.
name|sTypeExactTime
condition|)
block|{
name|prefI
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|c
operator|.
name|getManagingDept
argument_list|()
operator|.
name|isExternalManager
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
comment|//weaken only when both controling and managing departments do not allow required time
if|if
condition|(
name|c
operator|.
name|getControllingDept
argument_list|()
operator|.
name|isAllowReqTime
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|c
operator|.
name|getControllingDept
argument_list|()
operator|.
name|isAllowReqTime
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
if|if
condition|(
name|c
operator|.
name|getManagingDept
argument_list|()
operator|.
name|isAllowReqTime
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|c
operator|.
name|getManagingDept
argument_list|()
operator|.
name|isAllowReqTime
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
operator|(
operator|(
name|TimePref
operator|)
name|a
operator|)
operator|.
name|weakenHardPreferences
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/*                                         // Set all time prefs to neutral in order to preserve time pattern 			                    		TimePref tp = new TimePref(); 			                    		tp.setTimePattern(((TimePref) a).getTimePattern()); 			                    		String prefStr = tp.getTimePatternModel().getPreferences(); 			                    		((TimePref) a).setPreference(prefStr);                                         */
block|}
block|}
block|}
block|}
else|else
block|{
name|Debug
operator|.
name|debug
argument_list|(
literal|"Class Managing department same as subpart ... ignoring"
argument_list|)
expr_stmt|;
block|}
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
comment|// End: Update only if user has permissions and does not have mixed managed classes
comment|// Update Parent
if|if
condition|(
operator|(
name|parent
operator|!=
literal|null
operator|&&
name|subpart
operator|.
name|getParentSubpart
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|subpart
operator|.
name|getParentSubpart
argument_list|()
operator|.
name|equals
argument_list|(
name|parent
argument_list|)
operator|)
operator|||
operator|(
name|parent
operator|==
literal|null
operator|&&
name|subpart
operator|.
name|getParentSubpart
argument_list|()
operator|!=
literal|null
operator|)
operator|||
operator|(
name|parent
operator|!=
literal|null
operator|&&
name|subpart
operator|.
name|getParentSubpart
argument_list|()
operator|==
literal|null
operator|)
condition|)
block|{
name|Debug
operator|.
name|debug
argument_list|(
literal|"Updating parent subparts and classes ..."
argument_list|)
expr_stmt|;
name|subpart
operator|.
name|setParentSubpart
argument_list|(
name|parent
argument_list|)
expr_stmt|;
comment|// Update parent for classes
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
name|Debug
operator|.
name|debug
argument_list|(
literal|"No parent subparts ... making top level class"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|cci
init|=
name|subpart
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|cci
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|childClass
init|=
operator|(
name|Class_
operator|)
name|cci
operator|.
name|next
argument_list|()
decl_stmt|;
name|childClass
operator|.
name|setParentClass
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|childClass
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Debug
operator|.
name|debug
argument_list|(
literal|"Parent subpart exists ... setting parent class"
argument_list|)
expr_stmt|;
name|ArrayList
name|classesList
init|=
operator|new
name|ArrayList
argument_list|(
name|classes
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|classesList
argument_list|,
operator|new
name|ClassComparator
argument_list|(
name|ClassComparator
operator|.
name|COMPARE_BY_ID
argument_list|)
argument_list|)
expr_stmt|;
name|Set
name|parentClasses
init|=
name|parent
operator|.
name|getClasses
argument_list|()
decl_stmt|;
name|int
name|parentNumClasses
init|=
name|parentClasses
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentNumClasses
operator|>
literal|0
condition|)
block|{
name|Iterator
name|cci
init|=
name|classesList
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|classPerParent
init|=
name|classesList
operator|.
name|size
argument_list|()
operator|/
name|parentNumClasses
decl_stmt|;
name|int
name|classPerParentRem
init|=
name|classesList
operator|.
name|size
argument_list|()
operator|%
name|parentNumClasses
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Setting "
operator|+
name|classPerParent
operator|+
literal|" class(es) per parent"
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Odd number of classes found - "
operator|+
name|classPerParentRem
operator|+
literal|" classes ... "
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|parentClasses
operator|.
name|iterator
argument_list|()
init|;
operator|(
name|i
operator|.
name|hasNext
argument_list|()
operator|&&
name|classPerParent
operator|!=
literal|0
operator|)
condition|;
control|)
block|{
name|Class_
name|parentClass
init|=
operator|(
name|Class_
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|classPerParent
condition|;
name|j
operator|++
control|)
block|{
name|Class_
name|childClass
init|=
operator|(
name|Class_
operator|)
name|cci
operator|.
name|next
argument_list|()
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Setting class "
operator|+
name|childClass
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" to parent "
operator|+
name|parentClass
operator|.
name|getClassLabel
argument_list|()
argument_list|)
expr_stmt|;
name|childClass
operator|.
name|setParentClass
argument_list|(
name|parentClass
argument_list|)
expr_stmt|;
name|parentClass
operator|.
name|addTochildClasses
argument_list|(
name|childClass
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|parentClass
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|childClass
argument_list|)
expr_stmt|;
if|if
condition|(
name|classPerParentRem
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|cci
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|childClass
operator|=
operator|(
name|Class_
operator|)
name|cci
operator|.
name|next
argument_list|()
expr_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Setting ODD class "
operator|+
name|childClass
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" to parent "
operator|+
name|parentClass
operator|.
name|getClassLabel
argument_list|()
argument_list|)
expr_stmt|;
name|childClass
operator|.
name|setParentClass
argument_list|(
name|parentClass
argument_list|)
expr_stmt|;
name|parentClass
operator|.
name|addTochildClasses
argument_list|(
name|childClass
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|parentClass
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|childClass
argument_list|)
expr_stmt|;
block|}
operator|--
name|classPerParentRem
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|classPerParentRem
operator|!=
literal|0
condition|)
block|{
name|Iterator
name|cci2
init|=
name|classesList
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|parentClasses
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|parentClass
init|=
operator|(
name|Class_
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|cci2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Class_
name|childClass
init|=
operator|(
name|Class_
operator|)
name|cci2
operator|.
name|next
argument_list|()
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Setting ODD class "
operator|+
name|childClass
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" to parent "
operator|+
name|parentClass
operator|.
name|getClassLabel
argument_list|()
argument_list|)
expr_stmt|;
name|childClass
operator|.
name|setParentClass
argument_list|(
name|parentClass
argument_list|)
expr_stmt|;
name|parentClass
operator|.
name|addTochildClasses
argument_list|(
name|childClass
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|parentClass
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|childClass
argument_list|)
expr_stmt|;
block|}
operator|--
name|classPerParentRem
expr_stmt|;
if|if
condition|(
name|classPerParentRem
operator|==
literal|0
condition|)
break|break;
block|}
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// End If: Update Parent
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|subpart
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|refresh
argument_list|(
name|subpart
argument_list|)
expr_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
name|hibSession
operator|.
name|refresh
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
comment|// End If: Subpart Exists
comment|// Loop through children sub-parts
name|Vector
name|v
init|=
name|sic
operator|.
name|getSubparts
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|v
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SimpleItypeConfig
name|sic1
init|=
operator|(
name|SimpleItypeConfig
operator|)
name|v
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|createOrUpdateSubpart
argument_list|(
name|request
argument_list|,
name|hibSession
argument_list|,
name|sic1
argument_list|,
name|ioc
argument_list|,
name|subpart
argument_list|,
name|rg
argument_list|,
name|notDeletedSubparts
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|ioc
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
comment|/**      * Create or Update Classes      * @param sic      * @param subpart      * @param mgr      * @param ncfs      * @param lfs      */
specifier|private
name|void
name|createOrUpdateClasses
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|SimpleItypeConfig
name|sic
parameter_list|,
name|InstrOfferingConfig
name|ioc
parameter_list|,
name|SchedulingSubpart
name|parent
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Read attributes
name|long
name|sid
init|=
name|sic
operator|.
name|getSubpartId
argument_list|()
decl_stmt|;
name|int
name|mnlpc
init|=
name|sic
operator|.
name|getMinLimitPerClass
argument_list|()
decl_stmt|;
name|int
name|mxlpc
init|=
name|sic
operator|.
name|getMaxLimitPerClass
argument_list|()
decl_stmt|;
name|int
name|nc
init|=
name|sic
operator|.
name|getNumClasses
argument_list|()
decl_stmt|;
name|int
name|nr
init|=
name|sic
operator|.
name|getNumRooms
argument_list|()
decl_stmt|;
name|float
name|rr
init|=
name|sic
operator|.
name|getRoomRatio
argument_list|()
decl_stmt|;
name|long
name|md
init|=
name|sic
operator|.
name|getManagingDeptId
argument_list|()
decl_stmt|;
name|boolean
name|db
init|=
name|sic
operator|.
name|isDisabled
argument_list|()
decl_stmt|;
if|if
condition|(
name|ioc
operator|.
name|isUnlimitedEnrollment
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|mnlpc
operator|=
literal|0
expr_stmt|;
name|mxlpc
operator|=
literal|0
expr_stmt|;
name|nr
operator|=
literal|0
expr_stmt|;
name|rr
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"varLimits"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|mnlpc
operator|=
name|mxlpc
expr_stmt|;
block|}
name|Comparator
argument_list|<
name|Class_
argument_list|>
name|classComparator
init|=
operator|new
name|Comparator
argument_list|<
name|Class_
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Class_
name|c1
parameter_list|,
name|Class_
name|c2
parameter_list|)
block|{
if|if
condition|(
name|c1
operator|.
name|isCancelled
argument_list|()
operator|&&
operator|!
name|c2
operator|.
name|isCancelled
argument_list|()
condition|)
return|return
literal|1
return|;
if|if
condition|(
operator|!
name|c1
operator|.
name|isCancelled
argument_list|()
operator|&&
name|c2
operator|.
name|isCancelled
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|c1
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|0
operator|&&
name|c2
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|0
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|c1
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|0
operator|&&
name|c2
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|0
condition|)
return|return
operator|-
literal|1
return|;
return|return
name|c1
operator|.
name|getUniqueId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|SchedulingSubpart
name|subpart
init|=
literal|null
decl_stmt|;
comment|// Subpart does not exist
if|if
condition|(
name|sid
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Subpart does not exist ... Cannot create classes "
argument_list|)
throw|;
block|}
name|Set
name|s
init|=
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|s
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|tmpSubpart
init|=
operator|(
name|SchedulingSubpart
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|tmpSubpart
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
operator|==
name|sid
condition|)
block|{
name|subpart
operator|=
name|tmpSubpart
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|subpart
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Scheduling Subpart "
operator|+
name|sid
operator|+
literal|" was not found."
argument_list|)
throw|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Creating / Updating classes for subpart - "
operator|+
name|subpart
operator|.
name|getItypeDesc
argument_list|()
argument_list|)
expr_stmt|;
name|Set
name|classes
init|=
name|subpart
operator|.
name|getClasses
argument_list|()
decl_stmt|;
name|int
name|numCls
init|=
name|classes
operator|.
name|size
argument_list|()
decl_stmt|;
name|boolean
name|readOnly
init|=
literal|false
decl_stmt|;
comment|//if (!subpart.isEditableBy(Web.getUser(request.getSession())) || subpart.hasMixedManagedClasses()) {
if|if
condition|(
name|db
condition|)
block|{
name|Debug
operator|.
name|debug
argument_list|(
literal|"Subpart is readonly ... cannot change classes"
argument_list|)
expr_stmt|;
name|readOnly
operator|=
literal|true
expr_stmt|;
block|}
comment|// Get Number of Parent Classes
name|HashMap
name|cpClasses
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|classes
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getParentClass
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Integer
name|classCount
init|=
operator|(
name|Integer
operator|)
name|cpClasses
operator|.
name|get
argument_list|(
name|c
operator|.
name|getParentClass
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|classCount
operator|==
literal|null
condition|)
name|cpClasses
operator|.
name|put
argument_list|(
name|c
operator|.
name|getParentClass
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|cpClasses
operator|.
name|put
argument_list|(
name|c
operator|.
name|getParentClass
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|classCount
operator|.
name|intValue
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|cpNumClasses
init|=
name|cpClasses
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|peerNumClasses
init|=
name|parent
operator|.
name|getClasses
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// Adjust child per parent
if|if
condition|(
name|cpNumClasses
operator|!=
name|peerNumClasses
condition|)
block|{
if|if
condition|(
name|readOnly
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Subpart "
operator|+
name|subpart
operator|.
name|toString
argument_list|()
operator|+
literal|" has read-only permissions - Number of classes cannot be changed. "
argument_list|)
throw|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Parents per child ( "
operator|+
name|cpNumClasses
operator|+
literal|" ) do not match up to - "
operator|+
name|peerNumClasses
argument_list|)
expr_stmt|;
name|int
name|classesPerParent
init|=
name|numCls
operator|/
name|peerNumClasses
decl_stmt|;
if|if
condition|(
name|numCls
operator|>
name|classesPerParent
operator|&&
name|cpClasses
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|diff
init|=
operator|(
name|numCls
operator|-
name|classesPerParent
operator|)
operator|/
name|cpClasses
operator|.
name|size
argument_list|()
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Deleting "
operator|+
name|diff
operator|+
literal|" classes per current parent"
argument_list|)
expr_stmt|;
comment|// Delete extra classes
name|Set
name|parentClassKeys
init|=
name|cpClasses
operator|.
name|keySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|ci
init|=
name|parentClassKeys
operator|.
name|iterator
argument_list|()
init|;
name|ci
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Long
name|parentClassId
init|=
operator|(
name|Long
operator|)
name|ci
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|parentClassCount
init|=
operator|(
operator|(
name|Integer
operator|)
name|cpClasses
operator|.
name|get
argument_list|(
name|parentClassId
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|int
name|deleteCount
init|=
name|parentClassCount
operator|-
name|classesPerParent
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Deleting "
operator|+
name|deleteCount
operator|+
literal|" classes for parent class: "
operator|+
name|parentClassId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Class_
argument_list|>
name|adepts
init|=
operator|new
name|ArrayList
argument_list|<
name|Class_
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|classes
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c1
init|=
operator|(
name|Class_
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|c1
operator|.
name|getParentClass
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|parentClassId
argument_list|)
condition|)
name|adepts
operator|.
name|add
argument_list|(
name|c1
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|adepts
argument_list|,
name|classComparator
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|ct
init|=
operator|(
name|adepts
operator|.
name|size
argument_list|()
operator|-
name|deleteCount
operator|)
init|;
name|ct
operator|<
name|adepts
operator|.
name|size
argument_list|()
condition|;
name|ct
operator|++
control|)
block|{
name|Class_
name|c
init|=
name|adepts
operator|.
name|get
argument_list|(
name|ct
argument_list|)
decl_stmt|;
if|if
condition|(
name|deleteChildClasses
argument_list|(
name|c
argument_list|,
name|hibSession
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|Class_
name|pc
init|=
name|c
operator|.
name|getParentClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|pc
operator|!=
literal|null
condition|)
block|{
name|pc
operator|.
name|getChildClasses
argument_list|()
operator|.
name|remove
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|pc
argument_list|)
expr_stmt|;
block|}
name|classes
operator|.
name|remove
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|subpart
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|diff
init|=
name|classesPerParent
operator|-
name|numCls
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Adding  "
operator|+
name|diff
operator|+
literal|" classes"
argument_list|)
expr_stmt|;
comment|// Do nothing - Will be taken care of in the code below
block|}
block|}
block|}
comment|// No. of classes changed
name|numCls
operator|=
name|classes
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|numCls
operator|!=
name|nc
condition|)
block|{
if|if
condition|(
name|readOnly
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Subpart "
operator|+
name|subpart
operator|.
name|toString
argument_list|()
operator|+
literal|" has read-only permissions - Number of classes cannot be changed. "
argument_list|)
throw|;
comment|// Increased - create new classes
if|if
condition|(
name|nc
operator|>
name|numCls
condition|)
block|{
name|Debug
operator|.
name|debug
argument_list|(
literal|"No. of classes increased ... Adding "
operator|+
operator|(
name|nc
operator|-
name|numCls
operator|)
operator|+
literal|" classes"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|ct
init|=
literal|0
init|;
name|ct
operator|<
operator|(
name|nc
operator|-
name|numCls
operator|)
condition|;
name|ct
operator|++
control|)
block|{
name|Class_
name|c
init|=
operator|new
name|Class_
argument_list|()
decl_stmt|;
name|c
operator|.
name|setSchedulingSubpart
argument_list|(
name|subpart
argument_list|)
expr_stmt|;
name|c
operator|.
name|setExpectedCapacity
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|mnlpc
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|setMaxExpectedCapacity
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|mxlpc
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|setRoomRatio
argument_list|(
name|Float
operator|.
name|valueOf
argument_list|(
name|rr
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|setNbrRooms
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|nr
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|setDisplayInstructor
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|setEnabledForStudentScheduling
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|setPreferences
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|md
operator|>
literal|0
condition|)
name|c
operator|.
name|setManagingDept
argument_list|(
operator|new
name|DepartmentDAO
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|md
argument_list|)
argument_list|)
argument_list|,
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
name|c
operator|.
name|setCancelled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|subpart
operator|.
name|addToclasses
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|subpart
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|setParentClass
argument_list|(
name|hibSession
argument_list|,
name|subpart
argument_list|,
name|parent
argument_list|,
name|nc
argument_list|)
expr_stmt|;
block|}
comment|// Decreased - delete last class created
else|else
block|{
name|Debug
operator|.
name|debug
argument_list|(
literal|"No. of classes decreased ... Deleting "
operator|+
operator|(
name|numCls
operator|-
name|nc
operator|)
operator|+
literal|" classes"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Class_
argument_list|>
name|adepts
init|=
operator|new
name|ArrayList
argument_list|<
name|Class_
argument_list|>
argument_list|(
name|classes
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|adepts
argument_list|,
name|classComparator
argument_list|)
expr_stmt|;
comment|// Delete last class(es) if no parent or just one class to be deleted
if|if
condition|(
name|parent
operator|==
literal|null
operator|||
operator|(
name|numCls
operator|-
name|nc
operator|)
operator|==
literal|1
condition|)
block|{
for|for
control|(
name|int
name|ct
init|=
name|nc
init|;
name|ct
operator|<
name|numCls
condition|;
name|ct
operator|++
control|)
block|{
name|Class_
name|c
init|=
name|adepts
operator|.
name|get
argument_list|(
name|ct
argument_list|)
decl_stmt|;
if|if
condition|(
name|deleteChildClasses
argument_list|(
name|c
argument_list|,
name|hibSession
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|Class_
name|pc
init|=
name|c
operator|.
name|getParentClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|pc
operator|!=
literal|null
condition|)
block|{
name|pc
operator|.
name|getChildClasses
argument_list|()
operator|.
name|remove
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|pc
argument_list|)
expr_stmt|;
block|}
name|classes
operator|.
name|remove
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Delete per parent
else|else
block|{
name|cpClasses
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|classes
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getParentClass
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Integer
name|classCount
init|=
operator|(
name|Integer
operator|)
name|cpClasses
operator|.
name|get
argument_list|(
name|c
operator|.
name|getParentClass
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|classCount
operator|==
literal|null
condition|)
name|cpClasses
operator|.
name|put
argument_list|(
name|c
operator|.
name|getParentClass
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|cpClasses
operator|.
name|put
argument_list|(
name|c
operator|.
name|getParentClass
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|classCount
operator|.
name|intValue
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|diff
init|=
operator|(
name|numCls
operator|-
name|nc
operator|)
operator|/
name|cpClasses
operator|.
name|size
argument_list|()
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Deleting "
operator|+
name|diff
operator|+
literal|" classes per current parent"
argument_list|)
expr_stmt|;
comment|// Delete extra classes
name|Set
name|parentClassKeys
init|=
name|cpClasses
operator|.
name|keySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|ci
init|=
name|parentClassKeys
operator|.
name|iterator
argument_list|()
init|;
name|ci
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Long
name|parentClassId
init|=
operator|(
name|Long
operator|)
name|ci
operator|.
name|next
argument_list|()
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Deleting "
operator|+
name|diff
operator|+
literal|" classes for parent class: "
operator|+
name|parentClassId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|adepts
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|classes
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c1
init|=
operator|(
name|Class_
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|c1
operator|.
name|getParentClass
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|parentClassId
argument_list|)
condition|)
name|adepts
operator|.
name|add
argument_list|(
name|c1
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|adepts
argument_list|,
name|classComparator
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|ct
init|=
operator|(
name|adepts
operator|.
name|size
argument_list|()
operator|-
name|diff
operator|)
init|;
name|ct
operator|<
name|adepts
operator|.
name|size
argument_list|()
condition|;
name|ct
operator|++
control|)
block|{
name|Class_
name|c
init|=
name|adepts
operator|.
name|get
argument_list|(
name|ct
argument_list|)
decl_stmt|;
if|if
condition|(
name|deleteChildClasses
argument_list|(
name|c
argument_list|,
name|hibSession
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|Class_
name|pc
init|=
name|c
operator|.
name|getParentClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|pc
operator|!=
literal|null
condition|)
block|{
name|pc
operator|.
name|getChildClasses
argument_list|()
operator|.
name|remove
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|pc
argument_list|)
expr_stmt|;
block|}
name|classes
operator|.
name|remove
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|subpart
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|subpart
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Loop through children sub-parts
name|Vector
name|v
init|=
name|sic
operator|.
name|getSubparts
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|v
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SimpleItypeConfig
name|sic1
init|=
operator|(
name|SimpleItypeConfig
operator|)
name|v
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|createOrUpdateClasses
argument_list|(
name|request
argument_list|,
name|hibSession
argument_list|,
name|sic1
argument_list|,
name|ioc
argument_list|,
name|subpart
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|deleteChildClasses
parameter_list|(
name|Class_
name|c
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|int
name|recurseLevel
parameter_list|,
name|boolean
name|canCancel
parameter_list|)
block|{
name|Debug
operator|.
name|debug
argument_list|(
literal|"Deleting class ("
operator|+
name|recurseLevel
operator|+
literal|") ... "
operator|+
name|c
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" - "
operator|+
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Class_
argument_list|>
name|i
init|=
name|c
operator|.
name|getChildClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|cc
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|SchedulingSubpart
name|ps
init|=
name|cc
operator|.
name|getSchedulingSubpart
argument_list|()
decl_stmt|;
if|if
condition|(
name|deleteChildClasses
argument_list|(
name|cc
argument_list|,
name|hibSession
argument_list|,
name|recurseLevel
operator|+
literal|1
argument_list|,
name|canCancel
argument_list|)
condition|)
block|{
name|ps
operator|.
name|getClasses
argument_list|()
operator|.
name|remove
argument_list|(
name|cc
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|ps
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|c
argument_list|,
name|Right
operator|.
name|ClassDelete
argument_list|)
condition|)
block|{
name|c
operator|.
name|deleteAllDependentObjects
argument_list|(
name|hibSession
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|c
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|canCancel
operator|&&
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|c
argument_list|,
name|Right
operator|.
name|ClassCancel
argument_list|)
condition|)
block|{
name|c
operator|.
name|setCancelled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|c
operator|.
name|cancelEvent
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|,
name|hibSession
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|c
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Class "
operator|+
name|c
operator|.
name|getClassLabel
argument_list|(
name|hibSession
argument_list|)
operator|+
literal|" cannot be deleted or cancelled."
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setParentClass
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|SchedulingSubpart
name|subpart
parameter_list|,
name|SchedulingSubpart
name|parent
parameter_list|,
name|int
name|subpartNumClasses
parameter_list|)
block|{
comment|// Set Parent Class
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|Set
name|parentClasses
init|=
name|parent
operator|.
name|getClasses
argument_list|()
decl_stmt|;
name|int
name|parentNumClasses
init|=
name|parentClasses
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|classesPerParent
init|=
name|subpartNumClasses
operator|/
name|parentNumClasses
decl_stmt|;
name|HashMap
name|cpClasses
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|parent
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|childClassCount
init|=
literal|0
decl_stmt|;
name|Set
name|ccl
init|=
name|c
operator|.
name|getChildClasses
argument_list|()
decl_stmt|;
if|if
condition|(
name|ccl
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|ci
init|=
name|ccl
operator|.
name|iterator
argument_list|()
init|;
name|ci
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|cc
init|=
operator|(
name|Class_
operator|)
name|ci
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|cc
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|equals
argument_list|(
name|subpart
argument_list|)
condition|)
operator|++
name|childClassCount
expr_stmt|;
block|}
block|}
name|cpClasses
operator|.
name|put
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|childClassCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ArrayList
name|parentClassKeys
init|=
operator|new
name|ArrayList
argument_list|(
name|cpClasses
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|parentClassKeys
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|ci
init|=
name|parentClassKeys
operator|.
name|iterator
argument_list|()
init|;
name|ci
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Long
name|parentClassId
init|=
operator|(
name|Long
operator|)
name|ci
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|parentClassCount
init|=
operator|(
operator|(
name|Integer
operator|)
name|cpClasses
operator|.
name|get
argument_list|(
name|parentClassId
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|classesPerParent
operator|>
name|parentClassCount
condition|)
block|{
name|int
name|addCount
init|=
name|classesPerParent
operator|-
name|parentClassCount
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Adding "
operator|+
name|addCount
operator|+
literal|" classes for parent class: "
operator|+
name|parentClassId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ArrayList
name|ccList
init|=
operator|new
name|ArrayList
argument_list|(
name|subpart
operator|.
name|getClasses
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|ccList
argument_list|,
operator|new
name|ClassComparator
argument_list|(
name|ClassComparator
operator|.
name|COMPARE_BY_ID
argument_list|)
argument_list|)
expr_stmt|;
name|Iterator
name|cci
init|=
name|ccList
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|parentClasses
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|parentClass
init|=
operator|(
name|Class_
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentClass
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|parentClassId
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|addCount
condition|;
name|j
operator|++
control|)
block|{
name|Class_
name|childClass
init|=
literal|null
decl_stmt|;
do|do
block|{
name|childClass
operator|=
operator|(
name|Class_
operator|)
name|cci
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|childClass
operator|.
name|getParentClass
argument_list|()
operator|!=
literal|null
condition|)
do|;
name|childClass
operator|.
name|setParentClass
argument_list|(
name|parentClass
argument_list|)
expr_stmt|;
name|parentClass
operator|.
name|addTochildClasses
argument_list|(
name|childClass
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|parentClass
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|childClass
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Vector
name|toSimpleItypeConfig
parameter_list|(
name|InstrOfferingConfig
name|config
parameter_list|)
throws|throws
name|Exception
block|{
name|Vector
name|sp
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|Set
name|subparts
init|=
name|config
operator|.
name|getSchedulingSubparts
argument_list|()
decl_stmt|;
name|Iterator
name|iterSp
init|=
name|subparts
operator|.
name|iterator
argument_list|()
decl_stmt|;
comment|// Loop through subparts
while|while
condition|(
name|iterSp
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|SchedulingSubpart
name|subpart
init|=
operator|(
name|SchedulingSubpart
operator|)
name|iterSp
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Select top most subparts only
if|if
condition|(
name|subpart
operator|.
name|getParentSubpart
argument_list|()
operator|!=
literal|null
condition|)
continue|continue;
comment|// Process each subpart
name|SimpleItypeConfig
name|sic
init|=
name|toSimpleItypeConfig
argument_list|(
name|config
argument_list|,
name|subpart
argument_list|)
decl_stmt|;
name|sp
operator|.
name|addElement
argument_list|(
name|sic
argument_list|)
expr_stmt|;
block|}
return|return
name|sp
return|;
block|}
comment|/**      * Read persistent class InstrOfferingConfig and convert it to a       * representation that can be displayed      * @param config InstrOfferingConfig object      * @param subpart Scheduling subpart      * @return SimpleItypeConfig object representing the subpart      * @throws Exception      */
specifier|private
name|SimpleItypeConfig
name|toSimpleItypeConfig
parameter_list|(
name|InstrOfferingConfig
name|config
parameter_list|,
name|SchedulingSubpart
name|subpart
parameter_list|)
throws|throws
name|Exception
block|{
name|ItypeDesc
name|itype
init|=
name|subpart
operator|.
name|getItype
argument_list|()
decl_stmt|;
name|SimpleItypeConfig
name|sic
init|=
operator|new
name|SimpleItypeConfig
argument_list|(
name|itype
argument_list|)
decl_stmt|;
name|boolean
name|isDisabled
init|=
name|setSicProps
argument_list|(
name|config
argument_list|,
name|subpart
argument_list|,
name|sic
argument_list|)
decl_stmt|;
name|Set
name|s
init|=
name|subpart
operator|.
name|getChildSubparts
argument_list|()
decl_stmt|;
name|Iterator
name|iter
init|=
name|s
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|SchedulingSubpart
name|child
init|=
operator|(
name|SchedulingSubpart
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|SimpleItypeConfig
name|childSic
init|=
name|toSimpleItypeConfig
argument_list|(
name|config
argument_list|,
name|child
argument_list|)
decl_stmt|;
name|boolean
name|isDisabledChild
init|=
name|setSicProps
argument_list|(
name|config
argument_list|,
name|child
argument_list|,
name|childSic
argument_list|)
decl_stmt|;
name|sic
operator|.
name|addSubpart
argument_list|(
name|childSic
argument_list|)
expr_stmt|;
if|if
condition|(
name|isDisabledChild
condition|)
name|isDisabled
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isDisabled
condition|)
name|sic
operator|.
name|setDisabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|sic
return|;
block|}
comment|/**      * Sets the class limit, min per wk and num classes properties       * @param config InstrOfferingConfig object      * @param subpart Scheduling subpart      * @return SimpleItypeConfig object representing the subpart      */
specifier|private
name|boolean
name|setSicProps
parameter_list|(
name|InstrOfferingConfig
name|config
parameter_list|,
name|SchedulingSubpart
name|subpart
parameter_list|,
name|SimpleItypeConfig
name|sic
parameter_list|)
block|{
name|int
name|mnlpc
init|=
name|subpart
operator|.
name|getMinClassLimit
argument_list|()
decl_stmt|;
name|int
name|mxlpc
init|=
name|subpart
operator|.
name|getMaxClassLimit
argument_list|()
decl_stmt|;
name|int
name|mpw
init|=
name|subpart
operator|.
name|getMinutesPerWk
argument_list|()
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|int
name|numClasses
init|=
name|subpart
operator|.
name|getNumClasses
argument_list|()
decl_stmt|;
name|int
name|numRooms
init|=
name|subpart
operator|.
name|getMaxRooms
argument_list|()
decl_stmt|;
name|float
name|rc
init|=
name|subpart
operator|.
name|getMaxRoomRatio
argument_list|()
decl_stmt|;
name|long
name|md
init|=
name|subpart
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|boolean
name|mixedManaged
init|=
name|subpart
operator|.
name|hasMixedManagedClasses
argument_list|()
decl_stmt|;
if|if
condition|(
name|mnlpc
operator|<
literal|0
condition|)
name|mnlpc
operator|=
name|config
operator|.
name|getLimit
argument_list|()
operator|.
name|intValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|mxlpc
operator|<
literal|0
condition|)
name|mxlpc
operator|=
name|mnlpc
expr_stmt|;
if|if
condition|(
name|numClasses
operator|<
literal|0
condition|)
name|numClasses
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|mixedManaged
condition|)
name|md
operator|=
name|Constants
operator|.
name|MANAGED_BY_MULTIPLE_DEPTS
expr_stmt|;
name|sic
operator|.
name|setMinLimitPerClass
argument_list|(
name|mnlpc
argument_list|)
expr_stmt|;
name|sic
operator|.
name|setMaxLimitPerClass
argument_list|(
name|mxlpc
argument_list|)
expr_stmt|;
name|sic
operator|.
name|setMinPerWeek
argument_list|(
name|mpw
argument_list|)
expr_stmt|;
name|sic
operator|.
name|setNumClasses
argument_list|(
name|numClasses
argument_list|)
expr_stmt|;
name|sic
operator|.
name|setNumRooms
argument_list|(
name|numRooms
argument_list|)
expr_stmt|;
name|sic
operator|.
name|setRoomRatio
argument_list|(
name|rc
argument_list|)
expr_stmt|;
name|sic
operator|.
name|setSubpartId
argument_list|(
name|subpart
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|sic
operator|.
name|setManagingDeptId
argument_list|(
name|md
argument_list|)
expr_stmt|;
comment|// Check Permissions on subpart
if|if
condition|(
operator|!
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|subpart
argument_list|,
name|Right
operator|.
name|InstrOfferingConfigEditSubpart
argument_list|)
operator|||
name|mixedManaged
condition|)
block|{
name|sic
operator|.
name|setDisabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sic
operator|.
name|setNotOwned
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
for|for
control|(
name|Class_
name|c
range|:
name|subpart
operator|.
name|getClasses
argument_list|()
control|)
if|if
condition|(
operator|!
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|c
argument_list|,
name|Right
operator|.
name|ClassDelete
argument_list|)
condition|)
block|{
name|sic
operator|.
name|setNotOwned
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

