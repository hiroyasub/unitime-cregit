begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|authentication
operator|.
name|AuthenticationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|authentication
operator|.
name|UsernamePasswordAuthenticationToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|core
operator|.
name|Authentication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|core
operator|.
name|context
operator|.
name|SecurityContextHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|MultiComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|WebTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|messages
operator|.
name|CourseMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|ExamsForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserAuthority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamInfo
operator|.
name|ExamSectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|LoginManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|LookupTables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|PdfWebTable
import|;
end_import

begin_comment
comment|/**   * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"/exams"
argument_list|)
specifier|public
class|class
name|ExamsAction
extends|extends
name|Action
block|{
specifier|protected
specifier|final
specifier|static
name|CourseMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|CourseMessages
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Autowired
name|AuthenticationManager
name|authenticationManager
decl_stmt|;
annotation|@
name|Autowired
name|SessionContext
name|sessionContext
decl_stmt|;
specifier|public
name|ActionForward
name|execute
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
name|ExamsForm
name|myForm
init|=
operator|(
name|ExamsForm
operator|)
name|form
decl_stmt|;
name|String
name|op
init|=
operator|(
name|myForm
operator|.
name|getOp
argument_list|()
operator|!=
literal|null
condition|?
name|myForm
operator|.
name|getOp
argument_list|()
else|:
name|request
operator|.
name|getParameter
argument_list|(
literal|"op"
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"select"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|myForm
operator|.
name|load
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"subject"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|myForm
operator|.
name|setSubjectArea
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|myForm
operator|.
name|canDisplayAllSubjectsAtOnce
argument_list|()
condition|)
block|{
name|myForm
operator|.
name|setSubjectArea
argument_list|(
name|Constants
operator|.
name|ALL_OPTION_VALUE
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"year"
argument_list|)
operator|!=
literal|null
operator|&&
name|request
operator|.
name|getParameter
argument_list|(
literal|"term"
argument_list|)
operator|!=
literal|null
operator|&&
name|request
operator|.
name|getParameter
argument_list|(
literal|"campus"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|Session
name|session
init|=
name|Session
operator|.
name|getSessionUsingInitiativeYearTerm
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"campus"
argument_list|)
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"year"
argument_list|)
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"term"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
name|myForm
operator|.
name|setSession
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"type"
argument_list|)
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|myForm
operator|.
name|setExamType
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"type"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|ExamType
name|type
init|=
name|ExamType
operator|.
name|findByReference
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"type"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
name|myForm
operator|.
name|setExamType
argument_list|(
name|type
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|myForm
operator|.
name|setExamType
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|op
operator|=
literal|"Apply"
expr_stmt|;
block|}
if|if
condition|(
literal|"Apply"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|myForm
operator|.
name|save
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|myForm
operator|.
name|getUsername
argument_list|()
operator|!=
literal|null
operator|&&
name|myForm
operator|.
name|getUsername
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|myForm
operator|.
name|getPassword
argument_list|()
operator|!=
literal|null
operator|&&
name|myForm
operator|.
name|getPassword
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|Authentication
name|authRequest
init|=
operator|new
name|UsernamePasswordAuthenticationToken
argument_list|(
name|myForm
operator|.
name|getUsername
argument_list|()
argument_list|,
name|myForm
operator|.
name|getPassword
argument_list|()
argument_list|)
decl_stmt|;
name|Authentication
name|authResult
init|=
name|authenticationManager
operator|.
name|authenticate
argument_list|(
name|authRequest
argument_list|)
decl_stmt|;
name|SecurityContextHolder
operator|.
name|getContext
argument_list|()
operator|.
name|setAuthentication
argument_list|(
name|authResult
argument_list|)
expr_stmt|;
name|UserContext
name|user
init|=
operator|(
name|UserContext
operator|)
name|authResult
operator|.
name|getPrincipal
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|PersonalSchedule
argument_list|)
condition|)
for|for
control|(
name|UserAuthority
name|auth
range|:
name|user
operator|.
name|getAuthorities
argument_list|()
control|)
block|{
if|if
condition|(
name|auth
operator|.
name|getAcademicSession
argument_list|()
operator|!=
literal|null
operator|&&
name|auth
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getQualifierId
argument_list|()
operator|.
name|equals
argument_list|(
name|myForm
operator|.
name|getSession
argument_list|()
argument_list|)
operator|&&
name|auth
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|PersonalSchedule
argument_list|)
condition|)
block|{
name|user
operator|.
name|setCurrentAuthority
argument_list|(
name|auth
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|setAttribute
argument_list|(
literal|"loginPage"
argument_list|,
literal|"exams"
argument_list|)
expr_stmt|;
name|LoginManager
operator|.
name|loginSuceeded
argument_list|(
name|authResult
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|==
literal|null
condition|)
block|{
name|response
operator|.
name|sendRedirect
argument_list|(
literal|"selectPrimaryRole.do"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"personal"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|myForm
operator|.
name|setMessage
argument_list|(
literal|"Authentication failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|LoginManager
operator|.
name|addFailedLoginAttempt
argument_list|(
name|myForm
operator|.
name|getUsername
argument_list|()
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|myForm
operator|.
name|load
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
name|WebTable
operator|.
name|setOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"exams.order"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"ord"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|myForm
operator|.
name|getSession
argument_list|()
operator|!=
literal|null
operator|&&
name|myForm
operator|.
name|getSubjectArea
argument_list|()
operator|!=
literal|null
operator|&&
name|myForm
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|myForm
operator|.
name|getExamType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
name|session
init|=
operator|new
name|SessionDAO
argument_list|()
operator|.
name|get
argument_list|(
name|myForm
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|myForm
operator|.
name|isFinals
argument_list|()
operator|&&
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|canNoRoleReportExamFinal
argument_list|()
operator|)
operator|||
operator|(
operator|!
name|myForm
operator|.
name|isFinals
argument_list|()
operator|&&
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|canNoRoleReportExamMidterm
argument_list|()
operator|)
condition|)
block|{
name|List
name|exams
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|"--ALL--"
operator|.
name|equals
argument_list|(
name|myForm
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
condition|)
name|exams
operator|=
name|Exam
operator|.
name|findAll
argument_list|(
name|myForm
operator|.
name|getSession
argument_list|()
argument_list|,
name|myForm
operator|.
name|getExamType
argument_list|()
argument_list|)
expr_stmt|;
else|else
block|{
name|SubjectArea
name|sa
init|=
name|SubjectArea
operator|.
name|findByAbbv
argument_list|(
name|myForm
operator|.
name|getSession
argument_list|()
argument_list|,
name|myForm
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sa
operator|!=
literal|null
condition|)
name|exams
operator|=
name|Exam
operator|.
name|findExamsOfSubjectAreaIncludeCrossLists
argument_list|(
name|sa
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|myForm
operator|.
name|getExamType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|exams
operator|!=
literal|null
operator|&&
operator|!
name|exams
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Vector
argument_list|<
name|ExamAssignment
argument_list|>
name|assignments
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exams
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
operator|!=
literal|null
condition|)
name|assignments
operator|.
name|add
argument_list|(
operator|new
name|ExamAssignment
argument_list|(
name|exam
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|assignments
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|PdfWebTable
name|table
init|=
name|getTable
argument_list|(
literal|true
argument_list|,
name|myForm
argument_list|,
name|assignments
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
name|myForm
operator|.
name|setTable
argument_list|(
name|table
operator|.
name|printTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"exams.order"
argument_list|)
argument_list|)
argument_list|,
name|table
operator|.
name|getNrColumns
argument_list|()
argument_list|,
name|table
operator|.
name|getLines
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|String
name|msg
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exams.message"
argument_list|)
decl_stmt|;
if|if
condition|(
name|msg
operator|!=
literal|null
operator|&&
name|msg
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|REQUEST_MSSG
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|LookupTables
operator|.
name|setupExamTypes
argument_list|(
name|request
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"show"
argument_list|)
return|;
block|}
specifier|private
name|PdfWebTable
name|getTable
parameter_list|(
name|boolean
name|html
parameter_list|,
name|ExamsForm
name|form
parameter_list|,
name|Vector
argument_list|<
name|ExamAssignment
argument_list|>
name|exams
parameter_list|)
block|{
name|PdfWebTable
name|table
init|=
operator|new
name|PdfWebTable
argument_list|(
literal|7
argument_list|,
name|form
operator|.
name|getSessionLabel
argument_list|()
operator|+
literal|" "
operator|+
name|form
operator|.
name|getExamTypeLabel
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|" "
operator|+
name|MSG
operator|.
name|examinations
argument_list|()
operator|+
operator|(
literal|"--ALL--"
operator|.
name|equals
argument_list|(
name|form
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
condition|?
literal|""
else|:
literal|" ("
operator|+
name|form
operator|.
name|getSubjectArea
argument_list|()
operator|+
literal|")"
operator|)
argument_list|,
literal|"exams.do?ord=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
name|MSG
operator|.
name|columnExamSubject
argument_list|()
block|,
name|MSG
operator|.
name|columnExamCourse
argument_list|()
block|,
operator|(
literal|"true"
operator|.
name|equals
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exam.report.external"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
condition|?
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exam.report.external.name"
argument_list|,
name|MSG
operator|.
name|columnExamExternalId
argument_list|()
argument_list|)
else|:
name|MSG
operator|.
name|columnExamInstructionalType
argument_list|()
operator|)
block|,
name|MSG
operator|.
name|columnExamSection
argument_list|()
block|,
name|MSG
operator|.
name|columnExamDate
argument_list|()
block|,
name|MSG
operator|.
name|columnExamTime
argument_list|()
block|,
name|MSG
operator|.
name|columnExamRoom
argument_list|()
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
decl_stmt|;
name|table
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap"
argument_list|)
expr_stmt|;
name|String
name|noRoom
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exam.report.noroom"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
for|for
control|(
name|ExamAssignment
name|exam
range|:
name|exams
control|)
block|{
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|exam
operator|.
name|getSectionsIncludeCrosslistedDummies
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
literal|"--ALL--"
operator|.
name|equals
argument_list|(
name|form
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
operator|&&
operator|!
name|section
operator|.
name|getSubject
argument_list|()
operator|.
name|equals
argument_list|(
name|form
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
condition|)
continue|continue;
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
name|section
operator|.
name|getSubject
argument_list|()
block|,
name|section
operator|.
name|getCourseNbr
argument_list|()
block|,
name|section
operator|.
name|getItype
argument_list|()
block|,
name|section
operator|.
name|getSection
argument_list|()
block|,
name|exam
operator|.
name|getDate
argument_list|(
literal|false
argument_list|)
block|,
name|exam
operator|.
name|getTime
argument_list|(
literal|false
argument_list|)
block|,
operator|(
name|exam
operator|.
name|getNrRooms
argument_list|()
operator|==
literal|0
condition|?
name|noRoom
else|:
name|html
condition|?
name|exam
operator|.
name|getRoomsNameWithHint
argument_list|(
literal|false
argument_list|,
literal|", "
argument_list|)
else|:
name|exam
operator|.
name|getRoomsName
argument_list|(
literal|", "
argument_list|)
operator|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
name|section
operator|.
name|getSubject
argument_list|()
argument_list|,
name|section
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|section
operator|.
name|getItype
argument_list|()
argument_list|,
name|section
operator|.
name|getSection
argument_list|()
argument_list|,
name|exam
operator|.
name|getPeriodOrd
argument_list|()
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|section
operator|.
name|getSubject
argument_list|()
argument_list|,
name|section
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|section
operator|.
name|getItype
argument_list|()
argument_list|,
name|section
operator|.
name|getSection
argument_list|()
argument_list|,
name|exam
operator|.
name|getPeriodOrd
argument_list|()
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|section
operator|.
name|getSubject
argument_list|()
argument_list|,
name|section
operator|.
name|getItype
argument_list|()
argument_list|,
name|section
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|section
operator|.
name|getSection
argument_list|()
argument_list|,
name|exam
operator|.
name|getPeriodOrd
argument_list|()
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|section
operator|.
name|getSubject
argument_list|()
argument_list|,
name|section
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|section
operator|.
name|getSection
argument_list|()
argument_list|,
name|section
operator|.
name|getItype
argument_list|()
argument_list|,
name|exam
operator|.
name|getPeriodOrd
argument_list|()
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriodOrd
argument_list|()
argument_list|,
name|section
operator|.
name|getSubject
argument_list|()
argument_list|,
name|section
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|section
operator|.
name|getSection
argument_list|()
argument_list|,
name|section
operator|.
name|getItype
argument_list|()
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|section
operator|.
name|getSubject
argument_list|()
argument_list|,
name|section
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|section
operator|.
name|getSection
argument_list|()
argument_list|,
name|section
operator|.
name|getItype
argument_list|()
argument_list|,
name|exam
operator|.
name|getPeriodOrd
argument_list|()
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getRoomsName
argument_list|(
literal|":"
argument_list|)
argument_list|,
name|section
operator|.
name|getSubject
argument_list|()
argument_list|,
name|section
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|section
operator|.
name|getItype
argument_list|()
argument_list|,
name|section
operator|.
name|getSection
argument_list|()
argument_list|,
name|exam
operator|.
name|getPeriodOrd
argument_list|()
argument_list|)
block|,                             }
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|table
return|;
block|}
block|}
end_class

end_unit

