begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|messages
operator|.
name|CourseMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|UserProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|ExamEditForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|InstructionalOfferingListForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|PreferencesForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Building
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|BuildingPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePatternPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|MidtermPeriodPreferenceModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PeriodPreferenceModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Preference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeaturePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomGroupPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|BuildingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DatePatternDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DistributionTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|LocationDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|RoomFeatureDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|RoomGroupDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SchedulingSubpartDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|TimePatternDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ClassAssignmentProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|SolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|WebSolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ExamSolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|interactive
operator|.
name|ClassAssignmentDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|service
operator|.
name|AssignmentService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|service
operator|.
name|SolverService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|LookupTables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|RequiredTimeTable
import|;
end_import

begin_comment
comment|/**  * Superclass for implementing Preferences  * @author Heston Fernandes  */
end_comment

begin_class
specifier|public
class|class
name|PreferencesAction
extends|extends
name|Action
block|{
specifier|protected
specifier|final
specifier|static
name|CourseMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|CourseMessages
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Autowired
name|SessionContext
name|sessionContext
decl_stmt|;
annotation|@
name|Autowired
name|SolverService
argument_list|<
name|SolverProxy
argument_list|>
name|courseTimetablingSolverService
decl_stmt|;
annotation|@
name|Autowired
name|AssignmentService
argument_list|<
name|ClassAssignmentProxy
argument_list|>
name|classAssignmentService
decl_stmt|;
comment|// --------------------------------------------------------- Class Constants
comment|/** Request attribute name for time pattern grid **/
specifier|public
specifier|static
specifier|final
name|String
name|TIME_PATTERN_GRID_ATTR
init|=
literal|"timePatternGrid"
decl_stmt|;
comment|/** Request attribute name for anchor in form **/
specifier|public
specifier|static
specifier|final
name|String
name|HASH_ATTR
init|=
literal|"hash"
decl_stmt|;
comment|/** Anchor names **/
specifier|public
specifier|final
name|String
name|HASH_TIME_PREF
init|=
literal|"TimePref"
decl_stmt|;
specifier|public
specifier|final
name|String
name|HASH_RM_GROUP
init|=
literal|"RoomGroupPref"
decl_stmt|;
specifier|public
specifier|final
name|String
name|HASH_RM_PREF
init|=
literal|"RoomPref"
decl_stmt|;
specifier|public
specifier|final
name|String
name|HASH_RM_FEAT_PREF
init|=
literal|"RoomFeatPref"
decl_stmt|;
specifier|public
specifier|final
name|String
name|HASH_BLDG_PREF
init|=
literal|"BldgPref"
decl_stmt|;
specifier|public
specifier|final
name|String
name|HASH_DIST_PREF
init|=
literal|"DistPref"
decl_stmt|;
specifier|public
specifier|final
name|String
name|HASH_PERIOD_PREF
init|=
literal|"PeriodPref"
decl_stmt|;
specifier|public
specifier|final
name|String
name|HASH_DATE_PATTERN_PREF
init|=
literal|"DatePatternPref"
decl_stmt|;
comment|// --------------------------------------------------------- Methods
comment|/**       * Method execute      * @param mapping      * @param form      * @param request      * @param response      * @return ActionForward      */
specifier|public
name|ActionForward
name|execute
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Load Combo Box Lists
name|LookupTables
operator|.
name|setupItypes
argument_list|(
name|request
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Itypes
name|LookupTables
operator|.
name|setupPrefLevels
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|// Preference Levels
name|LookupTables
operator|.
name|setupInstructorDistribTypes
argument_list|(
name|request
argument_list|,
name|sessionContext
argument_list|)
expr_stmt|;
comment|// Distribution Types
return|return
name|mapping
operator|.
name|findForward
argument_list|(
name|mapping
operator|.
name|getInput
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Process actions performed on Preferences in UI      * @param request      * @param frm      * @param errors      */
specifier|protected
name|void
name|processPrefAction
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|PreferencesForm
name|frm
parameter_list|,
name|ActionMessages
name|errors
parameter_list|)
block|{
name|String
name|op
init|=
name|frm
operator|.
name|getOp
argument_list|()
decl_stmt|;
if|if
condition|(
name|op
operator|==
literal|null
condition|)
return|return;
comment|// Add Room Group row
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionAddRoomGroupPreference
argument_list|()
argument_list|)
condition|)
name|addRoomGroup
argument_list|(
name|request
argument_list|,
name|frm
argument_list|,
name|errors
argument_list|)
expr_stmt|;
comment|// Add Room Preference row
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionAddRoomPreference
argument_list|()
argument_list|)
condition|)
name|addRoomPref
argument_list|(
name|request
argument_list|,
name|frm
argument_list|,
name|errors
argument_list|)
expr_stmt|;
comment|// Add Building Preference row
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionAddBuildingPreference
argument_list|()
argument_list|)
condition|)
name|addBldgPref
argument_list|(
name|request
argument_list|,
name|frm
argument_list|,
name|errors
argument_list|)
expr_stmt|;
comment|// Add Distribution Preference row
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionAddDistributionPreference
argument_list|()
argument_list|)
condition|)
name|addDistPref
argument_list|(
name|request
argument_list|,
name|frm
argument_list|,
name|errors
argument_list|)
expr_stmt|;
comment|// Add Room Feature Preference row
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionAddRoomFeaturePreference
argument_list|()
argument_list|)
condition|)
name|addRoomFeatPref
argument_list|(
name|request
argument_list|,
name|frm
argument_list|,
name|errors
argument_list|)
expr_stmt|;
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionAddTimePreference
argument_list|()
argument_list|)
condition|)
name|addTimePattern
argument_list|(
name|request
argument_list|,
name|frm
argument_list|,
name|errors
argument_list|)
expr_stmt|;
comment|// Delete single preference
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionRemoveBuildingPreference
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionRemoveDistributionPreference
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionRemoveRoomFeaturePreference
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionRemoveRoomGroupPreference
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionRemoveRoomPreference
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionRemoveTimePattern
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionRemoveInstructor
argument_list|()
argument_list|)
condition|)
name|doDelete
argument_list|(
name|request
argument_list|,
name|frm
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addRoomGroup
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|PreferencesForm
name|frm
parameter_list|,
name|ActionMessages
name|errors
parameter_list|)
block|{
name|List
name|lst
init|=
name|frm
operator|.
name|getRoomGroups
argument_list|()
decl_stmt|;
if|if
condition|(
name|frm
operator|.
name|checkPrefs
argument_list|(
name|lst
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|PREF_ROWS_ADDED
condition|;
name|i
operator|++
control|)
block|{
name|frm
operator|.
name|addToRoomGroups
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|,
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|setAttribute
argument_list|(
name|HASH_ATTR
argument_list|,
name|HASH_RM_GROUP
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"roomGroup"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
name|MSG
operator|.
name|errorInvalidRoomGroup
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Add a building preference to the list (UI)      * @param request      * @param frm      * @param errors      */
specifier|protected
name|void
name|addBldgPref
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|PreferencesForm
name|frm
parameter_list|,
name|ActionMessages
name|errors
parameter_list|)
block|{
name|List
name|lst
init|=
name|frm
operator|.
name|getBldgPrefs
argument_list|()
decl_stmt|;
if|if
condition|(
name|frm
operator|.
name|checkPrefs
argument_list|(
name|lst
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|PREF_ROWS_ADDED
condition|;
name|i
operator|++
control|)
block|{
name|frm
operator|.
name|addToBldgPrefs
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|,
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|setAttribute
argument_list|(
name|HASH_ATTR
argument_list|,
name|HASH_BLDG_PREF
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"bldgPrefs"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
name|MSG
operator|.
name|errorInvalidBuildingPreference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|addDistPref
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|PreferencesForm
name|frm
parameter_list|,
name|ActionMessages
name|errors
parameter_list|)
block|{
name|List
name|lst
init|=
name|frm
operator|.
name|getDistPrefs
argument_list|()
decl_stmt|;
if|if
condition|(
name|frm
operator|.
name|checkPrefs
argument_list|(
name|lst
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|PREF_ROWS_ADDED
condition|;
name|i
operator|++
control|)
block|{
name|frm
operator|.
name|addToDistPrefs
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|,
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|setAttribute
argument_list|(
name|HASH_ATTR
argument_list|,
name|HASH_DIST_PREF
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"distPrefs"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
name|MSG
operator|.
name|errorInvalidDistributionPreference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Add a room feature preference to the list (UI)      * @param request      * @param frm      * @param errors      */
specifier|protected
name|void
name|addRoomFeatPref
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|PreferencesForm
name|frm
parameter_list|,
name|ActionMessages
name|errors
parameter_list|)
block|{
name|List
name|lst
init|=
name|frm
operator|.
name|getRoomFeaturePrefs
argument_list|()
decl_stmt|;
if|if
condition|(
name|frm
operator|.
name|checkPrefs
argument_list|(
name|lst
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|PREF_ROWS_ADDED
condition|;
name|i
operator|++
control|)
block|{
name|frm
operator|.
name|addToRoomFeatPrefs
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|,
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|setAttribute
argument_list|(
name|HASH_ATTR
argument_list|,
name|HASH_RM_FEAT_PREF
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"roomFeaturePrefs"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
name|MSG
operator|.
name|errorInvalidRoomFeaturePreference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|addTimePattern
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|PreferencesForm
name|frm
parameter_list|,
name|ActionMessages
name|errors
parameter_list|)
block|{
if|if
condition|(
literal|"-"
operator|.
name|equals
argument_list|(
name|frm
operator|.
name|getTimePattern
argument_list|()
argument_list|)
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"timePrefs"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
name|MSG
operator|.
name|errorTimePatternNotSelected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|frm
operator|.
name|getTimePatterns
argument_list|()
operator|==
literal|null
condition|)
name|frm
operator|.
name|setTimePatterns
argument_list|(
operator|new
name|Vector
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|getTimePatterns
argument_list|()
operator|.
name|add
argument_list|(
name|frm
operator|.
name|getTimePattern
argument_list|()
argument_list|)
expr_stmt|;
name|TimePattern
name|tp
init|=
operator|(
operator|new
name|TimePatternDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|frm
operator|.
name|getTimePattern
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tp
operator|.
name|getTimePatternModel
argument_list|()
operator|.
name|isExactTime
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|frm
operator|.
name|getTimePatterns
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|patternId
init|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|TimePattern
name|tpx
init|=
operator|(
operator|new
name|TimePatternDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|patternId
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tpx
operator|.
name|getTimePatternModel
argument_list|()
operator|.
name|isExactTime
argument_list|()
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|frm
operator|.
name|getTimePatterns
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|patternId
init|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|TimePattern
name|tpx
init|=
operator|(
operator|new
name|TimePatternDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|patternId
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tpx
operator|.
name|getTimePatternModel
argument_list|()
operator|.
name|isExactTime
argument_list|()
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|request
operator|.
name|setAttribute
argument_list|(
name|HASH_ATTR
argument_list|,
name|HASH_TIME_PREF
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Add a room preference to the list (UI)      * @param request      * @param frm      * @param errors      */
specifier|protected
name|void
name|addRoomPref
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|PreferencesForm
name|frm
parameter_list|,
name|ActionMessages
name|errors
parameter_list|)
block|{
name|List
name|lst
init|=
name|frm
operator|.
name|getRoomPrefs
argument_list|()
decl_stmt|;
if|if
condition|(
name|frm
operator|.
name|checkPrefs
argument_list|(
name|lst
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|PREF_ROWS_ADDED
condition|;
name|i
operator|++
control|)
block|{
name|frm
operator|.
name|addToRoomPrefs
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|,
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|setAttribute
argument_list|(
name|HASH_ATTR
argument_list|,
name|HASH_RM_PREF
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"roomPrefs"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
name|MSG
operator|.
name|errorInvalidRoomPreference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Redirects to search results screen      * @param request      * @param subpartId      */
specifier|protected
name|void
name|doCancel
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|String
name|subpartId
parameter_list|)
block|{
name|SchedulingSubpartDAO
name|sdao
init|=
operator|new
name|SchedulingSubpartDAO
argument_list|()
decl_stmt|;
name|SchedulingSubpart
name|ss
init|=
name|sdao
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|subpartId
argument_list|)
argument_list|)
decl_stmt|;
name|InstructionalOffering
name|io
init|=
name|ss
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
decl_stmt|;
name|CourseOffering
name|co
init|=
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
decl_stmt|;
name|InstructionalOfferingListForm
name|frm2
init|=
operator|new
name|InstructionalOfferingListForm
argument_list|()
decl_stmt|;
name|frm2
operator|.
name|setSubjectAreaId
argument_list|(
name|co
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|frm2
operator|.
name|setSubjectAreaAbbv
argument_list|(
name|co
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|frm2
operator|.
name|setCourseNbr
argument_list|(
name|co
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|frm2
operator|.
name|setCtrlInstrOfferingId
argument_list|(
name|io
operator|.
name|getCtrlCourseId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|frm2
operator|.
name|setIsControl
argument_list|(
name|co
operator|.
name|isIsControl
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"subjectAreaId"
argument_list|,
name|frm2
operator|.
name|getSubjectAreaId
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"instructionalOfferingListForm"
argument_list|,
name|frm2
argument_list|)
expr_stmt|;
block|}
comment|/**      * Deletes a preference from the list (UI)      * @param request      * @param frm      */
specifier|protected
name|void
name|doDelete
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|PreferencesForm
name|frm
parameter_list|)
block|{
name|String
name|deleteType
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"deleteType"
argument_list|)
decl_stmt|;
name|int
name|deleteId
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|deleteId
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"deleteId"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|deleteId
operator|=
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|deleteType
operator|!=
literal|null
operator|&&
name|deleteId
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|deleteType
operator|.
name|equals
argument_list|(
literal|"roomPref"
argument_list|)
condition|)
block|{
name|List
name|lst
init|=
name|frm
operator|.
name|getRoomPrefs
argument_list|()
decl_stmt|;
name|List
name|lstL
init|=
name|frm
operator|.
name|getRoomPrefLevels
argument_list|()
decl_stmt|;
name|lst
operator|.
name|remove
argument_list|(
name|deleteId
argument_list|)
expr_stmt|;
name|lstL
operator|.
name|remove
argument_list|(
name|deleteId
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setRoomPrefs
argument_list|(
name|lst
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setRoomPrefLevels
argument_list|(
name|lstL
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|HASH_ATTR
argument_list|,
name|HASH_RM_PREF
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deleteType
operator|.
name|equals
argument_list|(
literal|"rgPref"
argument_list|)
condition|)
block|{
name|List
name|lst
init|=
name|frm
operator|.
name|getRoomGroups
argument_list|()
decl_stmt|;
name|List
name|lstL
init|=
name|frm
operator|.
name|getRoomGroupLevels
argument_list|()
decl_stmt|;
name|lst
operator|.
name|remove
argument_list|(
name|deleteId
argument_list|)
expr_stmt|;
name|lstL
operator|.
name|remove
argument_list|(
name|deleteId
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setRoomGroups
argument_list|(
name|lst
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setRoomGroupLevels
argument_list|(
name|lstL
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|HASH_ATTR
argument_list|,
name|HASH_RM_GROUP
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deleteType
operator|.
name|equals
argument_list|(
literal|"bldgPref"
argument_list|)
condition|)
block|{
name|List
name|lst
init|=
name|frm
operator|.
name|getBldgPrefs
argument_list|()
decl_stmt|;
name|List
name|lstL
init|=
name|frm
operator|.
name|getBldgPrefLevels
argument_list|()
decl_stmt|;
name|lst
operator|.
name|remove
argument_list|(
name|deleteId
argument_list|)
expr_stmt|;
name|lstL
operator|.
name|remove
argument_list|(
name|deleteId
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setBldgPrefs
argument_list|(
name|lst
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setBldgPrefLevels
argument_list|(
name|lstL
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|HASH_ATTR
argument_list|,
name|HASH_BLDG_PREF
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deleteType
operator|.
name|equals
argument_list|(
literal|"distPref"
argument_list|)
condition|)
block|{
name|List
name|lst
init|=
name|frm
operator|.
name|getDistPrefs
argument_list|()
decl_stmt|;
name|List
name|lstL
init|=
name|frm
operator|.
name|getDistPrefLevels
argument_list|()
decl_stmt|;
name|lst
operator|.
name|remove
argument_list|(
name|deleteId
argument_list|)
expr_stmt|;
name|lstL
operator|.
name|remove
argument_list|(
name|deleteId
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setDistPrefs
argument_list|(
name|lst
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setDistPrefLevels
argument_list|(
name|lstL
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|HASH_ATTR
argument_list|,
name|HASH_DIST_PREF
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deleteType
operator|.
name|equals
argument_list|(
literal|"roomFeaturePref"
argument_list|)
condition|)
block|{
name|List
name|lst
init|=
name|frm
operator|.
name|getRoomFeaturePrefs
argument_list|()
decl_stmt|;
name|List
name|lstL
init|=
name|frm
operator|.
name|getRoomFeaturePrefLevels
argument_list|()
decl_stmt|;
name|lst
operator|.
name|remove
argument_list|(
name|deleteId
argument_list|)
expr_stmt|;
name|lstL
operator|.
name|remove
argument_list|(
name|deleteId
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setRoomFeaturePrefs
argument_list|(
name|lst
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setRoomFeaturePrefLevels
argument_list|(
name|lstL
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|HASH_ATTR
argument_list|,
name|HASH_RM_FEAT_PREF
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deleteType
operator|.
name|equals
argument_list|(
literal|"timePattern"
argument_list|)
condition|)
block|{
name|List
name|tps
init|=
name|frm
operator|.
name|getTimePatterns
argument_list|()
decl_stmt|;
name|tps
operator|.
name|remove
argument_list|(
name|deleteId
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setTimePatterns
argument_list|(
name|tps
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|HASH_ATTR
argument_list|,
name|HASH_TIME_PREF
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deleteType
operator|.
name|equals
argument_list|(
literal|"dpPref"
argument_list|)
condition|)
block|{
name|List
name|lst
init|=
name|frm
operator|.
name|getDatePatternPrefs
argument_list|()
decl_stmt|;
name|List
name|lstL
init|=
name|frm
operator|.
name|getDatePatternPrefLevels
argument_list|()
decl_stmt|;
name|lst
operator|.
name|remove
argument_list|(
name|deleteId
argument_list|)
expr_stmt|;
name|lstL
operator|.
name|remove
argument_list|(
name|deleteId
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setDatePatternPrefs
argument_list|(
name|lst
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setDatePatternPrefLevels
argument_list|(
name|lstL
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|HASH_ATTR
argument_list|,
name|HASH_RM_GROUP
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Updates the scheduling subpart      * @param request       * @param frm      * @param pg PreferenceGroup object      * @param s Preferences Set      * @param t Time Patterns Set      */
specifier|protected
name|void
name|doUpdate
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|PreferencesForm
name|frm
parameter_list|,
name|PreferenceGroup
name|pg
parameter_list|,
name|Set
name|s
parameter_list|,
name|boolean
name|timeVertical
parameter_list|)
throws|throws
name|Exception
block|{
name|pg
operator|.
name|setPreferences
argument_list|(
name|s
argument_list|)
expr_stmt|;
comment|// Time Prefs
name|Set
name|parentTimePrefs
init|=
name|pg
operator|.
name|effectivePreferences
argument_list|(
name|TimePref
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
name|lst
init|=
name|frm
operator|.
name|getTimePatterns
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lst
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
operator|(
name|String
operator|)
name|lst
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|addToTimePref
argument_list|(
name|request
argument_list|,
name|pg
argument_list|,
name|id
argument_list|,
name|s
argument_list|,
name|i
argument_list|,
name|timeVertical
argument_list|,
name|parentTimePrefs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parentTimePrefs
operator|!=
literal|null
operator|&&
operator|!
name|parentTimePrefs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|parentTimePrefs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePref
name|tp
init|=
operator|(
name|TimePref
operator|)
operator|(
operator|(
name|TimePref
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|clone
argument_list|()
decl_stmt|;
name|tp
operator|.
name|setOwner
argument_list|(
name|pg
argument_list|)
expr_stmt|;
name|tp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|add
argument_list|(
name|tp
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Room Prefs
name|lst
operator|=
name|frm
operator|.
name|getRoomPrefs
argument_list|()
expr_stmt|;
name|List
name|lstL
init|=
name|frm
operator|.
name|getRoomPrefLevels
argument_list|()
decl_stmt|;
name|Set
name|parentRoomPrefs
init|=
name|pg
operator|.
name|effectivePreferences
argument_list|(
name|RoomPref
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lst
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
operator|(
name|String
operator|)
name|lst
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
operator|||
name|id
operator|.
name|equals
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
condition|)
continue|continue;
name|String
name|pref
init|=
operator|(
name|String
operator|)
name|lstL
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Room: "
operator|+
name|id
operator|+
literal|": "
operator|+
name|pref
argument_list|)
expr_stmt|;
name|LocationDAO
name|rdao
init|=
operator|new
name|LocationDAO
argument_list|()
decl_stmt|;
name|Location
name|room
init|=
name|rdao
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|RoomPref
name|rp
init|=
operator|new
name|RoomPref
argument_list|()
decl_stmt|;
name|rp
operator|.
name|setOwner
argument_list|(
name|pg
argument_list|)
expr_stmt|;
name|rp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|pref
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rp
operator|.
name|setRoom
argument_list|(
name|room
argument_list|)
expr_stmt|;
name|RoomPref
name|sameParentRp
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|parentRoomPrefs
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomPref
name|p
init|=
operator|(
name|RoomPref
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|isSame
argument_list|(
name|rp
argument_list|)
condition|)
block|{
if|if
condition|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|equals
argument_list|(
name|rp
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
condition|)
name|sameParentRp
operator|=
name|rp
expr_stmt|;
name|j
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|sameParentRp
operator|==
literal|null
condition|)
name|s
operator|.
name|add
argument_list|(
name|rp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parentRoomPrefs
operator|!=
literal|null
operator|&&
operator|!
name|parentRoomPrefs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|parentRoomPrefs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomPref
name|rp
init|=
operator|(
name|RoomPref
operator|)
operator|(
operator|(
name|RoomPref
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|clone
argument_list|()
decl_stmt|;
name|rp
operator|.
name|setOwner
argument_list|(
name|pg
argument_list|)
expr_stmt|;
name|rp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|add
argument_list|(
name|rp
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Bldg Prefs
name|lst
operator|=
name|frm
operator|.
name|getBldgPrefs
argument_list|()
expr_stmt|;
name|lstL
operator|=
name|frm
operator|.
name|getBldgPrefLevels
argument_list|()
expr_stmt|;
name|Set
name|parentBuildingPrefs
init|=
name|pg
operator|.
name|effectivePreferences
argument_list|(
name|BuildingPref
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lst
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
operator|(
name|String
operator|)
name|lst
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
operator|||
name|id
operator|.
name|equals
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
condition|)
continue|continue;
name|String
name|pref
init|=
operator|(
name|String
operator|)
name|lstL
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Bldg: "
operator|+
name|id
operator|+
literal|": "
operator|+
name|pref
argument_list|)
expr_stmt|;
name|BuildingDAO
name|bdao
init|=
operator|new
name|BuildingDAO
argument_list|()
decl_stmt|;
name|Building
name|bldg
init|=
name|bdao
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|BuildingPref
name|bp
init|=
operator|new
name|BuildingPref
argument_list|()
decl_stmt|;
name|bp
operator|.
name|setOwner
argument_list|(
name|pg
argument_list|)
expr_stmt|;
name|bp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|pref
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|bp
operator|.
name|setBuilding
argument_list|(
name|bldg
argument_list|)
expr_stmt|;
name|BuildingPref
name|sameParentBp
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|parentBuildingPrefs
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BuildingPref
name|p
init|=
operator|(
name|BuildingPref
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|isSame
argument_list|(
name|bp
argument_list|)
condition|)
block|{
if|if
condition|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|equals
argument_list|(
name|bp
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
condition|)
name|sameParentBp
operator|=
name|bp
expr_stmt|;
name|j
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|sameParentBp
operator|==
literal|null
condition|)
name|s
operator|.
name|add
argument_list|(
name|bp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parentBuildingPrefs
operator|!=
literal|null
operator|&&
operator|!
name|parentBuildingPrefs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|parentBuildingPrefs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BuildingPref
name|bp
init|=
operator|(
name|BuildingPref
operator|)
operator|(
operator|(
name|BuildingPref
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|clone
argument_list|()
decl_stmt|;
name|bp
operator|.
name|setOwner
argument_list|(
name|pg
argument_list|)
expr_stmt|;
name|bp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|add
argument_list|(
name|bp
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Dist Prefs
name|lst
operator|=
name|frm
operator|.
name|getDistPrefs
argument_list|()
expr_stmt|;
name|lstL
operator|=
name|frm
operator|.
name|getDistPrefLevels
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lst
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
operator|(
name|String
operator|)
name|lst
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
operator|||
name|id
operator|.
name|equals
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
condition|)
continue|continue;
name|String
name|pref
init|=
operator|(
name|String
operator|)
name|lstL
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Dist: "
operator|+
name|id
operator|+
literal|": "
operator|+
name|pref
argument_list|)
expr_stmt|;
name|DistributionTypeDAO
name|ddao
init|=
operator|new
name|DistributionTypeDAO
argument_list|()
decl_stmt|;
name|DistributionType
name|dist
init|=
name|ddao
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|DistributionPref
name|dp
init|=
operator|new
name|DistributionPref
argument_list|()
decl_stmt|;
name|dp
operator|.
name|setOwner
argument_list|(
name|pg
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|pref
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setDistributionType
argument_list|(
name|dist
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setGrouping
argument_list|(
operator|new
name|Integer
argument_list|(
name|DistributionPref
operator|.
name|sGroupingNone
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|add
argument_list|(
name|dp
argument_list|)
expr_stmt|;
block|}
comment|// Period Prefs
comment|/*         lst = frm.getPeriodPrefs();         lstL = frm.getPeriodPrefLevels();                  for(int i=0; i<lst.size(); i++) {             String id = (String)lst.get(i);             if (id==null || id.equals(Preference.BLANK_PREF_VALUE))                 continue;                          String pref = (String) lstL.get(i);             Debug.debug("Period: " + id + ": " + pref);              ExamPeriodDAO pdao = new ExamPeriodDAO();             ExamPeriod period = pdao.get(new Long(id));                          ExamPeriodPref xp = new ExamPeriodPref();             xp.setOwner(pg);             xp.setPrefLevel(PreferenceLevel.getPreferenceLevel(Integer.parseInt(pref)));             xp.setExamPeriod(period);              s.add(xp);         }*/
if|if
condition|(
name|pg
operator|instanceof
name|Exam
condition|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|pg
decl_stmt|;
name|ExamSolverProxy
name|solver
init|=
name|WebSolver
operator|.
name|getExamSolver
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|ExamAssignment
name|assignment
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|solver
operator|!=
literal|null
operator|&&
name|exam
operator|!=
literal|null
operator|&&
name|exam
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|assignment
operator|=
name|solver
operator|.
name|getAssignment
argument_list|(
name|exam
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
operator|!=
literal|null
condition|)
name|assignment
operator|=
operator|new
name|ExamAssignment
argument_list|(
name|exam
argument_list|)
expr_stmt|;
if|if
condition|(
name|Exam
operator|.
name|sExamTypeMidterm
operator|==
name|exam
operator|.
name|getExamType
argument_list|()
condition|)
block|{
name|MidtermPeriodPreferenceModel
name|epx
init|=
operator|new
name|MidtermPeriodPreferenceModel
argument_list|(
name|exam
operator|.
name|getSession
argument_list|()
argument_list|,
name|assignment
argument_list|)
decl_stmt|;
name|epx
operator|.
name|load
argument_list|(
name|exam
argument_list|)
expr_stmt|;
name|epx
operator|.
name|load
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|epx
operator|.
name|save
argument_list|(
name|s
argument_list|,
name|exam
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PeriodPreferenceModel
name|px
init|=
operator|new
name|PeriodPreferenceModel
argument_list|(
name|exam
operator|.
name|getSession
argument_list|()
argument_list|,
name|assignment
argument_list|,
name|exam
operator|.
name|getExamType
argument_list|()
argument_list|)
decl_stmt|;
name|px
operator|.
name|load
argument_list|(
name|exam
argument_list|)
expr_stmt|;
name|RequiredTimeTable
name|rtt
init|=
operator|new
name|RequiredTimeTable
argument_list|(
name|px
argument_list|)
decl_stmt|;
name|rtt
operator|.
name|setName
argument_list|(
literal|"PeriodPref"
argument_list|)
expr_stmt|;
name|rtt
operator|.
name|update
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|px
operator|.
name|save
argument_list|(
name|s
argument_list|,
name|exam
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Room Feature Prefs
name|lst
operator|=
name|frm
operator|.
name|getRoomFeaturePrefs
argument_list|()
expr_stmt|;
name|lstL
operator|=
name|frm
operator|.
name|getRoomFeaturePrefLevels
argument_list|()
expr_stmt|;
name|Set
name|parentRoomFeaturePrefs
init|=
name|pg
operator|.
name|effectivePreferences
argument_list|(
name|RoomFeaturePref
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lst
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
operator|(
name|String
operator|)
name|lst
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
operator|||
name|id
operator|.
name|equals
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
condition|)
continue|continue;
name|String
name|pref
init|=
operator|(
name|String
operator|)
name|lstL
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Room Feat: "
operator|+
name|id
operator|+
literal|": "
operator|+
name|pref
argument_list|)
expr_stmt|;
name|RoomFeatureDAO
name|rfdao
init|=
operator|new
name|RoomFeatureDAO
argument_list|()
decl_stmt|;
name|RoomFeature
name|rf
init|=
name|rfdao
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|RoomFeaturePref
name|rfp
init|=
operator|new
name|RoomFeaturePref
argument_list|()
decl_stmt|;
name|rfp
operator|.
name|setOwner
argument_list|(
name|pg
argument_list|)
expr_stmt|;
name|rfp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|pref
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rfp
operator|.
name|setRoomFeature
argument_list|(
name|rf
argument_list|)
expr_stmt|;
name|RoomFeaturePref
name|sameParentRfp
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|parentRoomFeaturePrefs
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomFeaturePref
name|p
init|=
operator|(
name|RoomFeaturePref
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|isSame
argument_list|(
name|rfp
argument_list|)
condition|)
block|{
if|if
condition|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|equals
argument_list|(
name|rfp
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
condition|)
name|sameParentRfp
operator|=
name|rfp
expr_stmt|;
name|j
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|sameParentRfp
operator|==
literal|null
condition|)
name|s
operator|.
name|add
argument_list|(
name|rfp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parentRoomFeaturePrefs
operator|!=
literal|null
operator|&&
operator|!
name|parentRoomFeaturePrefs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|parentRoomFeaturePrefs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomFeaturePref
name|rp
init|=
operator|(
name|RoomFeaturePref
operator|)
operator|(
operator|(
name|RoomFeaturePref
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|clone
argument_list|()
decl_stmt|;
name|rp
operator|.
name|setOwner
argument_list|(
name|pg
argument_list|)
expr_stmt|;
name|rp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|add
argument_list|(
name|rp
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Room Group Prefs
name|lst
operator|=
name|frm
operator|.
name|getRoomGroups
argument_list|()
expr_stmt|;
name|lstL
operator|=
name|frm
operator|.
name|getRoomGroupLevels
argument_list|()
expr_stmt|;
name|Set
name|parentRoomGroupPrefs
init|=
name|pg
operator|.
name|effectivePreferences
argument_list|(
name|RoomGroupPref
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lst
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
operator|(
name|String
operator|)
name|lst
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
operator|||
name|id
operator|.
name|equals
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
condition|)
continue|continue;
name|String
name|pref
init|=
operator|(
name|String
operator|)
name|lstL
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Roomgr: "
operator|+
name|id
operator|+
literal|": "
operator|+
name|pref
argument_list|)
expr_stmt|;
name|RoomGroupDAO
name|gdao
init|=
operator|new
name|RoomGroupDAO
argument_list|()
decl_stmt|;
name|RoomGroup
name|gr
init|=
name|gdao
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|RoomGroupPref
name|gp
init|=
operator|new
name|RoomGroupPref
argument_list|()
decl_stmt|;
name|gp
operator|.
name|setOwner
argument_list|(
name|pg
argument_list|)
expr_stmt|;
name|gp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|pref
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|gp
operator|.
name|setRoomGroup
argument_list|(
name|gr
argument_list|)
expr_stmt|;
name|RoomGroupPref
name|sameParentGp
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|parentRoomGroupPrefs
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomGroupPref
name|p
init|=
operator|(
name|RoomGroupPref
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|isSame
argument_list|(
name|gp
argument_list|)
condition|)
block|{
if|if
condition|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|equals
argument_list|(
name|gp
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
condition|)
name|sameParentGp
operator|=
name|gp
expr_stmt|;
name|j
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|sameParentGp
operator|==
literal|null
condition|)
name|s
operator|.
name|add
argument_list|(
name|gp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parentRoomGroupPrefs
operator|!=
literal|null
operator|&&
operator|!
name|parentRoomGroupPrefs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|parentRoomGroupPrefs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomGroupPref
name|gp
init|=
operator|(
name|RoomGroupPref
operator|)
operator|(
operator|(
name|RoomGroupPref
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|clone
argument_list|()
decl_stmt|;
name|gp
operator|.
name|setOwner
argument_list|(
name|pg
argument_list|)
expr_stmt|;
name|gp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|add
argument_list|(
name|gp
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Date pattern Prefs
name|lst
operator|=
name|frm
operator|.
name|getDatePatternPrefs
argument_list|()
expr_stmt|;
name|lstL
operator|=
name|frm
operator|.
name|getDatePatternPrefLevels
argument_list|()
expr_stmt|;
name|Set
name|parentDatePatternPrefs
init|=
name|pg
operator|.
name|effectivePreferences
argument_list|(
name|DatePatternPref
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lst
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
operator|(
name|String
operator|)
name|lst
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
operator|||
name|id
operator|.
name|equals
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
operator|||
name|lstL
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|PREF_LEVEL_NEUTRAL
argument_list|)
condition|)
continue|continue;
name|String
name|pref
init|=
operator|(
name|String
operator|)
name|lstL
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Datepattern: "
operator|+
name|id
operator|+
literal|": "
operator|+
name|pref
argument_list|)
expr_stmt|;
name|DatePatternDAO
name|dpdao
init|=
operator|new
name|DatePatternDAO
argument_list|()
decl_stmt|;
name|DatePattern
name|dp
init|=
name|dpdao
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|DatePatternPref
name|dpp
init|=
operator|new
name|DatePatternPref
argument_list|()
decl_stmt|;
name|dpp
operator|.
name|setOwner
argument_list|(
name|pg
argument_list|)
expr_stmt|;
name|dpp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|pref
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|dpp
operator|.
name|setDatePattern
argument_list|(
name|dp
argument_list|)
expr_stmt|;
name|DatePatternPref
name|sameParentDp
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|parentDatePatternPrefs
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DatePatternPref
name|p
init|=
operator|(
name|DatePatternPref
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|isSame
argument_list|(
name|dpp
argument_list|)
condition|)
block|{
if|if
condition|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|equals
argument_list|(
name|dpp
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
condition|)
name|sameParentDp
operator|=
name|dpp
expr_stmt|;
name|j
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|sameParentDp
operator|==
literal|null
condition|)
name|s
operator|.
name|add
argument_list|(
name|dpp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parentDatePatternPrefs
operator|!=
literal|null
operator|&&
operator|!
name|parentDatePatternPrefs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|parentDatePatternPrefs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DatePatternPref
name|gp
init|=
operator|(
name|DatePatternPref
operator|)
operator|(
operator|(
name|DatePatternPref
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|clone
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|pg
operator|.
name|effectiveDatePattern
argument_list|()
operator|.
name|findChildren
argument_list|()
operator|.
name|contains
argument_list|(
name|gp
operator|.
name|getDatePattern
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|gp
operator|.
name|setOwner
argument_list|(
name|pg
argument_list|)
expr_stmt|;
name|gp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|add
argument_list|(
name|gp
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Set values in subpart
name|pg
operator|.
name|setPreferences
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add Time Preferences to the set of Preferences      * @param request      * @param owner Owner of type PreferenceGroup      * @param tpat Time Pattern Id      * @param tag Tag to indicate processing of Alt time pattern      * @param prefs      * @param patterns      * @throws Exception      */
specifier|protected
name|void
name|addToTimePref
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|PreferenceGroup
name|owner
parameter_list|,
name|String
name|tpat
parameter_list|,
name|Set
name|prefs
parameter_list|,
name|int
name|idx
parameter_list|,
name|boolean
name|timeVertical
parameter_list|,
name|Set
name|parentTimePrefs
parameter_list|)
throws|throws
name|Exception
block|{
name|TimePatternDAO
name|timePatternDao
init|=
operator|new
name|TimePatternDAO
argument_list|()
decl_stmt|;
name|TimePattern
name|timePattern
init|=
operator|(
name|tpat
operator|.
name|equals
argument_list|(
literal|"-1"
argument_list|)
condition|?
literal|null
else|:
name|timePatternDao
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|tpat
argument_list|)
argument_list|)
operator|)
decl_stmt|;
comment|// Generate grid prefs
name|boolean
name|canUseHardTimePrefs
init|=
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|owner
argument_list|,
name|Right
operator|.
name|CanUseHardTimePrefs
argument_list|)
decl_stmt|;
name|RequiredTimeTable
name|rtt
init|=
operator|(
name|timePattern
operator|==
literal|null
condition|?
name|TimePattern
operator|.
name|getDefaultRequiredTimeTable
argument_list|()
else|:
name|timePattern
operator|.
name|getRequiredTimeTable
argument_list|(
name|canUseHardTimePrefs
argument_list|)
operator|)
decl_stmt|;
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|setDefaultSelection
argument_list|(
name|RequiredTimeTable
operator|.
name|getTimeGridSize
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rtt
operator|.
name|setName
argument_list|(
literal|"p"
operator|+
name|idx
argument_list|)
expr_stmt|;
name|rtt
operator|.
name|update
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|TimePref
name|tp
init|=
operator|new
name|TimePref
argument_list|()
decl_stmt|;
name|tp
operator|.
name|setOwner
argument_list|(
name|owner
argument_list|)
expr_stmt|;
name|tp
operator|.
name|setPreference
argument_list|(
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|getPreferences
argument_list|()
argument_list|)
expr_stmt|;
name|tp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
argument_list|)
expr_stmt|;
name|tp
operator|.
name|setTimePattern
argument_list|(
name|timePattern
argument_list|)
expr_stmt|;
name|TimePref
name|sameParentTimePref
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|parentTimePrefs
operator|!=
literal|null
operator|&&
operator|!
name|parentTimePrefs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|parentTimePrefs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePref
name|parentTimePref
init|=
operator|(
name|TimePref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentTimePref
operator|.
name|isSame
argument_list|(
name|tp
argument_list|)
condition|)
block|{
if|if
condition|(
name|parentTimePref
operator|.
name|getPreference
argument_list|()
operator|.
name|equals
argument_list|(
name|tp
operator|.
name|getPreference
argument_list|()
argument_list|)
operator|&&
name|parentTimePref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|equals
argument_list|(
name|tp
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
condition|)
name|sameParentTimePref
operator|=
name|parentTimePref
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|sameParentTimePref
operator|==
literal|null
condition|)
name|prefs
operator|.
name|add
argument_list|(
name|tp
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|generateExamPeriodGrid
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|PreferencesForm
name|frm
parameter_list|,
name|Exam
name|exam
parameter_list|,
name|String
name|op
parameter_list|,
name|boolean
name|timeVertical
parameter_list|,
name|boolean
name|editable
parameter_list|)
throws|throws
name|Exception
block|{
name|ExamSolverProxy
name|solver
init|=
name|WebSolver
operator|.
name|getExamSolver
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|ExamAssignment
name|assignment
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|solver
operator|!=
literal|null
operator|&&
name|exam
operator|!=
literal|null
condition|)
name|assignment
operator|=
name|solver
operator|.
name|getAssignment
argument_list|(
name|exam
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|exam
operator|!=
literal|null
operator|&&
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
operator|!=
literal|null
condition|)
name|assignment
operator|=
operator|new
name|ExamAssignment
argument_list|(
name|exam
argument_list|)
expr_stmt|;
if|if
condition|(
name|Exam
operator|.
name|sExamTypeMidterm
operator|==
operator|(
operator|(
name|ExamEditForm
operator|)
name|frm
operator|)
operator|.
name|getExamType
argument_list|()
condition|)
block|{
name|MidtermPeriodPreferenceModel
name|epx
init|=
operator|new
name|MidtermPeriodPreferenceModel
argument_list|(
name|exam
operator|==
literal|null
condition|?
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
else|:
name|exam
operator|.
name|getSession
argument_list|()
argument_list|,
name|assignment
argument_list|)
decl_stmt|;
if|if
condition|(
name|exam
operator|!=
literal|null
condition|)
name|epx
operator|.
name|load
argument_list|(
name|exam
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setHasNotAvailable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|op
operator|.
name|equals
argument_list|(
literal|"init"
argument_list|)
condition|)
name|epx
operator|.
name|load
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"ExamPeriodGrid"
argument_list|,
name|epx
operator|.
name|print
argument_list|(
name|editable
argument_list|,
operator|(
name|editable
condition|?
literal|0
else|:
name|exam
operator|.
name|getLength
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PeriodPreferenceModel
name|px
init|=
operator|new
name|PeriodPreferenceModel
argument_list|(
name|exam
operator|==
literal|null
condition|?
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
else|:
name|exam
operator|.
name|getSession
argument_list|()
argument_list|,
name|assignment
argument_list|,
operator|(
operator|(
name|ExamEditForm
operator|)
name|frm
operator|)
operator|.
name|getExamType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|exam
operator|!=
literal|null
condition|)
name|px
operator|.
name|load
argument_list|(
name|exam
argument_list|)
expr_stmt|;
name|px
operator|.
name|setAllowHard
argument_list|(
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|exam
argument_list|,
name|Right
operator|.
name|CanUseHardTimePrefs
argument_list|)
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setHasNotAvailable
argument_list|(
name|px
operator|.
name|hasNotAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|RequiredTimeTable
name|rtt
init|=
operator|new
name|RequiredTimeTable
argument_list|(
name|px
argument_list|)
decl_stmt|;
name|rtt
operator|.
name|setName
argument_list|(
literal|"PeriodPref"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|op
operator|.
name|equals
argument_list|(
literal|"init"
argument_list|)
condition|)
name|rtt
operator|.
name|update
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"ExamPeriodGrid"
argument_list|,
name|rtt
operator|.
name|print
argument_list|(
name|editable
argument_list|,
name|timeVertical
argument_list|,
name|editable
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Generate html for displaying time pattern grid      * @param request      * @param frm      * @param pg       * @param op      * @throws Exception      */
specifier|protected
name|void
name|generateTimePatternGrids
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|PreferencesForm
name|frm
parameter_list|,
name|PreferenceGroup
name|pg
parameter_list|,
name|Set
name|tpat
parameter_list|,
name|String
name|op
parameter_list|,
name|boolean
name|timeVertical
parameter_list|,
name|boolean
name|editable
parameter_list|,
name|Vector
name|leadInstructors
parameter_list|)
throws|throws
name|Exception
block|{
name|Vector
name|timePrefs
init|=
literal|null
decl_stmt|;
name|List
name|tps
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
literal|"init"
argument_list|)
condition|)
block|{
name|Set
name|tp
init|=
name|pg
operator|.
name|effectivePreferences
argument_list|(
name|TimePref
operator|.
name|class
argument_list|,
name|leadInstructors
argument_list|)
decl_stmt|;
if|if
condition|(
name|tp
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|timePrefs
operator|=
operator|new
name|Vector
argument_list|(
name|tp
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|timePrefs
argument_list|)
expr_stmt|;
name|tps
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|timePrefs
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|TimePref
name|timePref
init|=
operator|(
name|TimePref
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|tps
operator|.
name|add
argument_list|(
name|timePref
operator|.
name|getTimePattern
argument_list|()
operator|==
literal|null
condition|?
literal|"-1"
else|:
name|timePref
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|tpat
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Vector
name|x
init|=
operator|new
name|Vector
argument_list|(
name|tpat
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|tps
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|x
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|TimePattern
name|pat
init|=
operator|(
name|TimePattern
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|tps
operator|.
name|add
argument_list|(
name|pat
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|frm
operator|.
name|setTimePatterns
argument_list|(
name|tps
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tps
operator|=
name|frm
operator|.
name|getTimePatterns
argument_list|()
expr_stmt|;
block|}
name|Assignment
name|assignment
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|pg
operator|instanceof
name|Class_
condition|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|pg
decl_stmt|;
if|if
condition|(
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|clazz
operator|.
name|getManagingDept
argument_list|()
argument_list|,
name|Right
operator|.
name|ClassAssignments
argument_list|)
condition|)
block|{
name|ClassAssignmentDetails
name|ca
init|=
name|ClassAssignmentDetails
operator|.
name|createClassAssignmentDetails
argument_list|(
name|sessionContext
argument_list|,
name|courseTimetablingSolverService
operator|.
name|getSolver
argument_list|()
argument_list|,
name|pg
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|ca
operator|!=
literal|null
condition|)
block|{
name|String
name|assignmentTable
init|=
name|SuggestionsAction
operator|.
name|getAssignmentTable
argument_list|(
name|sessionContext
argument_list|,
name|courseTimetablingSolverService
operator|.
name|getSolver
argument_list|()
argument_list|,
name|ca
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|assignmentTable
operator|!=
literal|null
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
literal|"Suggestions.assignmentInfo"
argument_list|,
name|assignmentTable
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ClassAssignmentProxy
name|cap
init|=
name|classAssignmentService
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|cap
operator|!=
literal|null
condition|)
block|{
name|assignment
operator|=
name|cap
operator|.
name|getAssignment
argument_list|(
operator|(
name|Class_
operator|)
name|pg
argument_list|)
expr_stmt|;
if|if
condition|(
name|assignment
operator|!=
literal|null
operator|&&
name|assignment
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ca
operator|=
name|ClassAssignmentDetails
operator|.
name|createClassAssignmentDetailsFromAssignment
argument_list|(
name|sessionContext
argument_list|,
name|assignment
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|ca
operator|!=
literal|null
condition|)
block|{
name|String
name|assignmentTable
init|=
name|SuggestionsAction
operator|.
name|getAssignmentTable
argument_list|(
name|sessionContext
argument_list|,
name|courseTimetablingSolverService
operator|.
name|getSolver
argument_list|()
argument_list|,
name|ca
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|assignmentTable
operator|!=
literal|null
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
literal|"Suggestions.assignmentInfo"
argument_list|,
name|assignmentTable
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
comment|// Time Pattern not selected
if|if
condition|(
name|tps
operator|==
literal|null
operator|||
name|tps
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|request
operator|.
name|setAttribute
argument_list|(
name|TIME_PATTERN_GRID_ATTR
argument_list|,
name|MSG
operator|.
name|errorTimePatternNotSelected
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Time Pattern value set
else|else
block|{
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|int
name|deletedTimePatternIdx
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
literal|"timePattern"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"deleteType"
argument_list|)
argument_list|)
condition|)
block|{
try|try
block|{
name|deletedTimePatternIdx
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"deleteId"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|tps
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|String
name|tp
init|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Load TimePattern Object
name|TimePatternDAO
name|timePatternDao
init|=
operator|new
name|TimePatternDAO
argument_list|()
decl_stmt|;
name|TimePattern
name|timePattern
init|=
operator|(
name|tp
operator|.
name|equals
argument_list|(
literal|"-1"
argument_list|)
condition|?
literal|null
else|:
name|timePatternDao
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|tp
argument_list|)
argument_list|)
operator|)
decl_stmt|;
comment|// 	Display time grid
name|RequiredTimeTable
name|rtt
init|=
operator|(
name|timePattern
operator|==
literal|null
condition|?
name|TimePattern
operator|.
name|getDefaultRequiredTimeTable
argument_list|()
else|:
name|timePattern
operator|.
name|getRequiredTimeTable
argument_list|(
name|assignment
operator|==
literal|null
condition|?
literal|null
else|:
name|assignment
operator|.
name|getTimeLocation
argument_list|()
argument_list|,
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|pg
argument_list|,
name|Right
operator|.
name|CanUseHardTimePrefs
argument_list|)
argument_list|)
operator|)
decl_stmt|;
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|setDefaultSelection
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
name|UserProperty
operator|.
name|GridSize
argument_list|)
argument_list|)
expr_stmt|;
name|rtt
operator|.
name|setName
argument_list|(
literal|"p"
operator|+
name|idx
argument_list|)
expr_stmt|;
comment|// 	Reload all preferences selected
name|String
name|reloadCause
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"reloadCause"
argument_list|)
decl_stmt|;
if|if
condition|(
name|reloadCause
operator|!=
literal|null
operator|&&
name|reloadCause
operator|.
name|equals
argument_list|(
literal|"timePattern"
argument_list|)
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
name|HASH_ATTR
argument_list|,
name|HASH_TIME_PREF
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|reloadCause
operator|==
literal|null
operator|||
operator|!
name|reloadCause
operator|.
name|equals
argument_list|(
literal|"timePattern"
argument_list|)
operator|)
operator|&&
operator|!
name|op
operator|.
name|equals
argument_list|(
literal|"init"
argument_list|)
condition|)
block|{
if|if
condition|(
name|deletedTimePatternIdx
operator|>=
literal|0
operator|&&
name|idx
operator|>=
name|deletedTimePatternIdx
condition|)
block|{
name|rtt
operator|.
name|setName
argument_list|(
literal|"p"
operator|+
operator|(
name|idx
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
name|rtt
operator|.
name|update
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|rtt
operator|.
name|setName
argument_list|(
literal|"p"
operator|+
name|idx
argument_list|)
expr_stmt|;
block|}
else|else
name|rtt
operator|.
name|update
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
comment|// Load existing time preferences
if|if
condition|(
name|timePrefs
operator|!=
literal|null
operator|&&
name|timePrefs
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|op
operator|.
name|equals
argument_list|(
literal|"init"
argument_list|)
condition|)
block|{
comment|//rtt.getModel().setDefaults(user);
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|setPreferences
argument_list|(
operator|(
operator|(
name|TimePref
operator|)
name|timePrefs
operator|.
name|elementAt
argument_list|(
name|idx
argument_list|)
operator|)
operator|.
name|getPreference
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|setAttribute
argument_list|(
name|TIME_PATTERN_GRID_ATTR
operator|+
literal|"_"
operator|+
name|idx
argument_list|,
name|rtt
operator|.
name|print
argument_list|(
name|editable
argument_list|,
name|timeVertical
argument_list|,
name|editable
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Initialize Building, Room, Room Feature and Distribution Preferences      * @param frm      * @param ss      */
specifier|protected
name|void
name|initPrefs
parameter_list|(
name|PreferencesForm
name|frm
parameter_list|,
name|PreferenceGroup
name|pg
parameter_list|,
name|Vector
name|leadInstructors
parameter_list|,
name|boolean
name|addBlankRows
parameter_list|)
block|{
if|if
condition|(
name|pg
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|addBlankRows
condition|)
name|frm
operator|.
name|addBlankPrefRows
argument_list|()
expr_stmt|;
return|return;
block|}
comment|// Room Prefs
name|frm
operator|.
name|getRoomPrefs
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|frm
operator|.
name|getRoomPrefLevels
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Set
name|roomPrefs
init|=
name|pg
operator|.
name|effectivePreferences
argument_list|(
name|RoomPref
operator|.
name|class
argument_list|,
name|leadInstructors
argument_list|)
decl_stmt|;
name|Iterator
name|iter
init|=
name|roomPrefs
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|RoomPref
name|rp
init|=
operator|(
name|RoomPref
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Adding room pref ... "
operator|+
name|rp
operator|.
name|getRoom
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|addToRoomPrefs
argument_list|(
name|rp
operator|.
name|getRoom
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|rp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Room Feature Prefs
name|frm
operator|.
name|getRoomFeaturePrefs
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|frm
operator|.
name|getRoomFeaturePrefLevels
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Set
name|roomFeatPrefs
init|=
name|pg
operator|.
name|effectivePreferences
argument_list|(
name|RoomFeaturePref
operator|.
name|class
argument_list|,
name|leadInstructors
argument_list|)
decl_stmt|;
name|iter
operator|=
name|roomFeatPrefs
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|RoomFeaturePref
name|rfp
init|=
operator|(
name|RoomFeaturePref
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Adding room feature pref ... "
operator|+
name|rfp
operator|.
name|getRoomFeature
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|addToRoomFeatPrefs
argument_list|(
name|rfp
operator|.
name|getRoomFeature
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|rfp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Building Prefs
name|frm
operator|.
name|getBldgPrefs
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|frm
operator|.
name|getBldgPrefLevels
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Set
name|bldgPrefs
init|=
name|pg
operator|.
name|effectivePreferences
argument_list|(
name|BuildingPref
operator|.
name|class
argument_list|,
name|leadInstructors
argument_list|)
decl_stmt|;
name|iter
operator|=
name|bldgPrefs
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|BuildingPref
name|bp
init|=
operator|(
name|BuildingPref
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Adding building pref ... "
operator|+
name|bp
operator|.
name|getBuilding
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|addToBldgPrefs
argument_list|(
name|bp
operator|.
name|getBuilding
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|bp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Distribution Prefs
name|frm
operator|.
name|getDistPrefs
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|frm
operator|.
name|getDistPrefLevels
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Set
name|distPrefs
init|=
name|pg
operator|.
name|effectivePreferences
argument_list|(
name|DistributionPref
operator|.
name|class
argument_list|,
name|leadInstructors
argument_list|)
decl_stmt|;
name|iter
operator|=
name|distPrefs
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DistributionPref
name|dp
init|=
operator|(
name|DistributionPref
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Adding distribution pref ... "
operator|+
name|dp
operator|.
name|getDistributionType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|addToDistPrefs
argument_list|(
name|dp
operator|.
name|getDistributionType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|dp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Period Prefs
comment|/*         frm.getPeriodPrefs().clear();         frm.getPeriodPrefLevels().clear();         Set periodPrefs = pg.effectivePreferences(ExamPeriodPref.class, leadInstructors);         iter = periodPrefs.iterator();         while (iter.hasNext()){             ExamPeriodPref xp = (ExamPeriodPref) iter.next();             Debug.debug("Adding period pref ... " + xp.getExamPeriod().getUniqueId().toString());             frm.addToPeriodPrefs(                     xp.getExamPeriod().getUniqueId().toString(),                      xp.getPrefLevel().getUniqueId().toString() );         }         */
comment|// Room group Prefs
name|frm
operator|.
name|getRoomGroups
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|frm
operator|.
name|getRoomGroupLevels
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Set
name|rgPrefs
init|=
name|pg
operator|.
name|effectivePreferences
argument_list|(
name|RoomGroupPref
operator|.
name|class
argument_list|,
name|leadInstructors
argument_list|)
decl_stmt|;
name|iter
operator|=
name|rgPrefs
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|RoomGroupPref
name|bp
init|=
operator|(
name|RoomGroupPref
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Adding room group pref ... "
operator|+
name|bp
operator|.
name|getRoomGroup
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|addToRoomGroups
argument_list|(
name|bp
operator|.
name|getRoomGroup
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|bp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Date Pattern Prefs
name|Set
name|datePatternPrefs
init|=
name|pg
operator|.
name|effectivePreferences
argument_list|(
name|DatePatternPref
operator|.
name|class
argument_list|)
decl_stmt|;
name|frm
operator|.
name|getDatePatternPrefs
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|frm
operator|.
name|getDatePatternPrefLevels
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iter
operator|=
name|datePatternPrefs
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DatePatternPref
name|dp
init|=
operator|(
name|DatePatternPref
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|dp
operator|.
name|appliesTo
argument_list|(
name|pg
argument_list|)
condition|)
continue|continue;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Adding date pattern pref ... "
operator|+
name|dp
operator|.
name|getDatePattern
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|addToDatePatternPrefs
argument_list|(
name|dp
operator|.
name|getDatePattern
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|dp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|addBlankRows
condition|)
name|frm
operator|.
name|addBlankPrefRows
argument_list|()
expr_stmt|;
block|}
comment|/**      * Clear Preference Lists      * @param request      * @param frm      */
specifier|protected
name|void
name|clearPrefs
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|PreferencesForm
name|frm
parameter_list|)
block|{
name|frm
operator|.
name|clearPrefs
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

