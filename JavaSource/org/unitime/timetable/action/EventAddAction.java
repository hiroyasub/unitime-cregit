begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|Web
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|EventAddForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|DateUtils
import|;
end_import

begin_class
specifier|public
class|class
name|EventAddAction
extends|extends
name|Action
block|{
comment|/**  	 * Method execute 	 * @param mapping 	 * @param form 	 * @param request 	 * @param response 	 * @return ActionForward 	 */
specifier|public
name|ActionForward
name|execute
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
name|EventAddForm
name|myForm
init|=
operator|(
name|EventAddForm
operator|)
name|form
decl_stmt|;
name|String
name|op
init|=
name|myForm
operator|.
name|getOp
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"op2"
argument_list|)
operator|!=
literal|null
operator|&&
name|request
operator|.
name|getParameter
argument_list|(
literal|"op2"
argument_list|)
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|op
operator|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"op2"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|">>> "
operator|+
name|op
operator|+
literal|"<<<"
argument_list|)
expr_stmt|;
name|HttpSession
name|webSession
init|=
name|request
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|webSession
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Web
operator|.
name|isLoggedIn
argument_list|(
name|webSession
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Access Denied."
argument_list|)
throw|;
block|}
comment|// CALENDAR TO PICK EVENTS //
comment|// get months for the calendar to pick dates from //
name|Session
name|s
init|=
name|Session
operator|.
name|getSessionById
argument_list|(
name|myForm
operator|.
name|getSessionId
argument_list|()
argument_list|)
decl_stmt|;
name|Calendar
name|first
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|first
operator|.
name|setTime
argument_list|(
name|s
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|Calendar
name|last
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|last
operator|.
name|setTime
argument_list|(
name|s
operator|.
name|getSessionEndDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|year
init|=
name|first
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
decl_stmt|;
name|int
name|startMonth
init|=
name|first
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
decl_stmt|;
name|int
name|endMonth
init|=
name|last
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
decl_stmt|;
if|if
condition|(
name|last
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
operator|!=
name|year
condition|)
name|endMonth
operator|+=
literal|12
expr_stmt|;
comment|/*        // set which dates have meetings //         for (Meeting meeting: meetings) {             Calendar c = Calendar.getInstance();             c.setTime(meeting.getMeetingDate());             int m = c.get(Calendar.MONTH);             int d = c.get(Calendar.DAY_OF_MONTH);             if (c.get(Calendar.YEAR)!=year) m+=12;             myForm.addMeetingDate(m+":"+d);         } */
comment|// set up calendar //
name|String
name|pattern
init|=
literal|"["
decl_stmt|,
name|border
init|=
literal|"["
decl_stmt|;
comment|//myForm.clearMeetingDates();
for|for
control|(
name|int
name|m
init|=
name|startMonth
init|;
name|m
operator|<=
name|endMonth
condition|;
name|m
operator|++
control|)
block|{
if|if
condition|(
name|m
operator|!=
name|startMonth
condition|)
block|{
name|pattern
operator|+=
literal|","
expr_stmt|;
name|border
operator|+=
literal|","
expr_stmt|;
block|}
name|pattern
operator|+=
literal|"["
expr_stmt|;
name|border
operator|+=
literal|"["
expr_stmt|;
name|int
name|daysOfMonth
init|=
name|DateUtils
operator|.
name|getNrDaysOfMonth
argument_list|(
name|m
argument_list|,
name|year
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|1
init|;
name|d
operator|<=
name|daysOfMonth
condition|;
name|d
operator|++
control|)
block|{
if|if
condition|(
name|d
operator|>
literal|1
condition|)
block|{
name|pattern
operator|+=
literal|","
expr_stmt|;
name|border
operator|+=
literal|","
expr_stmt|;
block|}
comment|//pattern+=(myForm.hasMeetingDate(year, m, d)?"'1'":"'0'");
name|pattern
operator|+=
operator|(
name|myForm
operator|.
name|getMeetingDates
argument_list|()
operator|.
name|contains
argument_list|(
name|m
operator|+
literal|":"
operator|+
name|d
argument_list|)
condition|?
literal|"'1'"
else|:
literal|"'0'"
operator|)
expr_stmt|;
comment|//                                                border += (Math.random()<0.1?"'rgb(100,20,180) 2px solid'":Math.random()<0.1?"'red 2px solid'":"null");
if|if
condition|(
literal|"1"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"cal_val_"
operator|+
operator|(
operator|(
literal|12
operator|+
name|m
operator|)
operator|%
literal|12
operator|)
operator|+
literal|"_"
operator|+
name|d
argument_list|)
argument_list|)
condition|)
block|{
comment|//ma meeting
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|c
operator|.
name|setTimeInMillis
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|,
name|year
operator|+
operator|(
name|m
operator|>=
literal|12
condition|?
literal|1
else|:
name|m
operator|<
literal|0
condition|?
operator|-
literal|1
else|:
literal|0
operator|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|,
operator|(
operator|(
literal|12
operator|+
name|m
operator|)
operator|%
literal|12
operator|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|DATE
argument_list|,
name|d
argument_list|)
expr_stmt|;
comment|//myForm.addMeetingDate(c.getTime());
block|}
name|border
operator|+=
name|s
operator|.
name|getBorder
argument_list|(
name|d
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
name|pattern
operator|+=
literal|"]"
expr_stmt|;
name|border
operator|+=
literal|"]"
expr_stmt|;
block|}
name|pattern
operator|+=
literal|"]"
expr_stmt|;
name|border
operator|+=
literal|"]"
expr_stmt|;
comment|// show the calendar //
name|String
name|dates
init|=
literal|"<script language='JavaScript' type='text/javascript' src='scripts/datepatt.js'></script>"
decl_stmt|;
name|dates
operator|+=
literal|"<script language='JavaScript'>"
expr_stmt|;
name|dates
operator|+=
literal|"calGenerate("
operator|+
name|year
operator|+
literal|","
operator|+
name|startMonth
operator|+
literal|","
operator|+
name|endMonth
operator|+
literal|","
operator|+
name|pattern
operator|+
literal|","
operator|+
literal|"['1','0'],"
operator|+
literal|"['Selected','Not Selected'],"
operator|+
literal|"['rgb(240,240,50)','rgb(240,240,240)'],"
operator|+
literal|"'1',"
operator|+
name|border
operator|+
literal|",true,true);"
expr_stmt|;
name|dates
operator|+=
literal|"</script>"
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"dates"
argument_list|,
name|dates
argument_list|)
expr_stmt|;
comment|// END OF CALENDAR TO PICK EVENTS //
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"show"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

