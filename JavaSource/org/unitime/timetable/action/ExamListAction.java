begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts2
operator|.
name|convention
operator|.
name|annotation
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts2
operator|.
name|convention
operator|.
name|annotation
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts2
operator|.
name|tiles
operator|.
name|annotation
operator|.
name|TilesDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts2
operator|.
name|tiles
operator|.
name|annotation
operator|.
name|TilesPutAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|WebTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|messages
operator|.
name|ConstantsMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|messages
operator|.
name|ExaminationMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|SessionAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|UserProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|ExamListForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|BuildingPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentStatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|MidtermPeriodPreferenceModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriodPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PeriodPreferenceModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Preference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeaturePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomGroupPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExamTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SubjectAreaDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ExamAssignmentProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamRoomInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|ExportUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|IdValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|LookupTables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|BackTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|Navigation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|PdfWebTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|RequiredTimeTable
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"/examList"
argument_list|)
annotation|@
name|Action
argument_list|(
name|value
operator|=
literal|"examList"
argument_list|,
name|results
operator|=
block|{
annotation|@
name|Result
argument_list|(
name|name
operator|=
literal|"list"
argument_list|,
name|type
operator|=
literal|"tiles"
argument_list|,
name|location
operator|=
literal|"examList.tiles"
argument_list|)
block|,
annotation|@
name|Result
argument_list|(
name|name
operator|=
literal|"addExam"
argument_list|,
name|type
operator|=
literal|"redirect"
argument_list|,
name|location
operator|=
literal|"/examEdit.action"
argument_list|)
block|}
argument_list|)
annotation|@
name|TilesDefinition
argument_list|(
name|name
operator|=
literal|"examList.tiles"
argument_list|,
name|extend
operator|=
literal|"baseLayout"
argument_list|,
name|putAttributes
operator|=
block|{
annotation|@
name|TilesPutAttribute
argument_list|(
name|name
operator|=
literal|"title"
argument_list|,
name|value
operator|=
literal|"Examinations"
argument_list|)
block|,
annotation|@
name|TilesPutAttribute
argument_list|(
name|name
operator|=
literal|"body"
argument_list|,
name|value
operator|=
literal|"/user/examList.jsp"
argument_list|)
block|,
annotation|@
name|TilesPutAttribute
argument_list|(
name|name
operator|=
literal|"showNavigation"
argument_list|,
name|value
operator|=
literal|"true"
argument_list|)
block|,
annotation|@
name|TilesPutAttribute
argument_list|(
name|name
operator|=
literal|"showSolverWarnings"
argument_list|,
name|value
operator|=
literal|"exams"
argument_list|)
block|}
argument_list|)
specifier|public
class|class
name|ExamListAction
extends|extends
name|UniTimeAction
argument_list|<
name|ExamListForm
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1752223672961857285L
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|ConstantsMessages
name|CONST
init|=
name|Localization
operator|.
name|create
argument_list|(
name|ConstantsMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|ExaminationMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|ExaminationMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|ord
decl_stmt|;
specifier|public
name|String
name|getOrd
parameter_list|()
block|{
return|return
name|ord
return|;
block|}
specifier|public
name|void
name|setOrd
parameter_list|(
name|String
name|ord
parameter_list|)
block|{
name|this
operator|.
name|ord
operator|=
name|ord
expr_stmt|;
block|}
specifier|public
name|String
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|Examinations
argument_list|)
expr_stmt|;
if|if
condition|(
name|getForm
argument_list|()
operator|==
literal|null
condition|)
name|setForm
argument_list|(
operator|new
name|ExamListForm
argument_list|()
argument_list|)
expr_stmt|;
comment|// Read operation to be performed
name|String
name|op
init|=
operator|(
name|getForm
argument_list|()
operator|.
name|getOp
argument_list|()
operator|!=
literal|null
condition|?
name|getForm
argument_list|()
operator|.
name|getOp
argument_list|( )
else|:
name|request
operator|.
name|getParameter
argument_list|(
literal|"op"
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|op
operator|==
literal|null
operator|&&
name|sessionContext
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OfferingsSubjectArea
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|subject
init|=
operator|(
name|String
operator|)
name|sessionContext
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OfferingsSubjectArea
argument_list|)
decl_stmt|;
if|if
condition|(
name|subject
operator|.
name|indexOf
argument_list|(
literal|','
argument_list|)
operator|>=
literal|0
condition|)
name|subject
operator|=
name|subject
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|subject
operator|.
name|indexOf
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"All"
operator|.
name|equalsIgnoreCase
argument_list|(
name|subject
argument_list|)
condition|)
name|getForm
argument_list|()
operator|.
name|setSubjectAreaId
argument_list|(
operator|-
literal|1l
argument_list|)
expr_stmt|;
else|else
name|getForm
argument_list|()
operator|.
name|setSubjectAreaId
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|subject
argument_list|)
argument_list|)
expr_stmt|;
name|getForm
argument_list|()
operator|.
name|setCourseNbr
argument_list|(
operator|(
name|String
operator|)
name|sessionContext
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OfferingsCourseNumber
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|op
operator|==
literal|null
operator|&&
name|sessionContext
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|ExamType
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|getForm
argument_list|()
operator|.
name|setExamType
argument_list|(
operator|(
name|Long
operator|)
name|sessionContext
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|ExamType
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getForm
argument_list|()
operator|.
name|getExamType
argument_list|()
operator|==
literal|null
condition|)
block|{
name|List
argument_list|<
name|ExamType
argument_list|>
name|types
init|=
name|ExamType
operator|.
name|findAllUsedApplicable
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ExamView
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ExamTimetable
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|types
operator|.
name|isEmpty
argument_list|()
condition|)
name|getForm
argument_list|()
operator|.
name|setExamType
argument_list|(
name|types
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|WebTable
operator|.
name|setOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"ExamList.ord"
argument_list|,
name|getOrd
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"Search"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
literal|"Export PDF"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
literal|"Export CSV"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
name|MSG
operator|.
name|buttonSearch
argument_list|()
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
name|MSG
operator|.
name|buttonExportPDF
argument_list|()
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
name|MSG
operator|.
name|buttonExportCSV
argument_list|()
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
if|if
condition|(
name|getForm
argument_list|()
operator|.
name|getSubjectAreaId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sessionContext
operator|.
name|setAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OfferingsSubjectArea
argument_list|,
name|getForm
argument_list|()
operator|.
name|getSubjectAreaId
argument_list|()
operator|<
literal|0
condition|?
literal|"All"
else|:
name|getForm
argument_list|()
operator|.
name|getSubjectAreaId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|setAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OfferingsCourseNumber
argument_list|,
name|getForm
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|setAttribute
argument_list|(
name|SessionAttribute
operator|.
name|ExamType
argument_list|,
name|getForm
argument_list|()
operator|.
name|getExamType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"Export PDF"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
name|MSG
operator|.
name|buttonExportPDF
argument_list|()
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|ExportUtils
operator|.
name|exportPDF
argument_list|(
name|getExamTable
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|,
name|WebTable
operator|.
name|getOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"ExamList.ord"
argument_list|)
argument_list|,
name|response
argument_list|,
literal|"exams"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
literal|"Export CSV"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
name|MSG
operator|.
name|buttonExportCSV
argument_list|()
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|ExportUtils
operator|.
name|exportCSV
argument_list|(
name|getExamTable
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|,
name|WebTable
operator|.
name|getOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"ExamList.ord"
argument_list|)
argument_list|,
name|response
argument_list|,
literal|"exams"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
if|if
condition|(
literal|"Add Examination"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
name|MSG
operator|.
name|buttonAddExamination
argument_list|()
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
return|return
literal|"addExam"
return|;
block|}
name|List
argument_list|<
name|IdValue
argument_list|>
name|subjects
init|=
operator|new
name|ArrayList
argument_list|<
name|IdValue
argument_list|>
argument_list|()
decl_stmt|;
name|subjects
operator|.
name|add
argument_list|(
operator|new
name|IdValue
argument_list|(
literal|null
argument_list|,
name|CONST
operator|.
name|select
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|DepartmentIndependent
argument_list|)
condition|)
block|{
name|subjects
operator|.
name|add
argument_list|(
operator|new
name|IdValue
argument_list|(
operator|-
literal|1l
argument_list|,
name|CONST
operator|.
name|all
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|TreeSet
argument_list|<
name|SubjectArea
argument_list|>
name|userSubjectAreas
init|=
name|SubjectArea
operator|.
name|getUserSubjectAreas
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|SubjectArea
name|sa
range|:
name|userSubjectAreas
control|)
name|subjects
operator|.
name|add
argument_list|(
operator|new
name|IdValue
argument_list|(
name|sa
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|sa
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|getForm
argument_list|()
operator|.
name|setSubjectAreas
argument_list|(
name|subjects
argument_list|)
expr_stmt|;
if|if
condition|(
name|userSubjectAreas
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|getForm
argument_list|()
operator|.
name|setSubjectAreaId
argument_list|(
name|userSubjectAreas
operator|.
name|first
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getForm
argument_list|()
operator|.
name|getSubjectAreaId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|PdfWebTable
name|table
init|=
name|getExamTable
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|setAttribute
argument_list|(
literal|"table"
argument_list|,
name|table
operator|.
name|printTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"ExamList.ord"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Vector
name|ids
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|table
operator|.
name|getLines
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|WebTable
operator|.
name|WebTableLine
name|line
init|=
operator|(
name|WebTable
operator|.
name|WebTableLine
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|ids
operator|.
name|add
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|line
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Navigation
operator|.
name|set
argument_list|(
name|sessionContext
argument_list|,
name|Navigation
operator|.
name|sInstructionalOfferingLevel
argument_list|,
name|ids
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addActionError
argument_list|(
name|MSG
operator|.
name|errorNoMatchingExam
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|subjectAreaName
init|=
literal|""
decl_stmt|;
try|try
block|{
name|subjectAreaName
operator|=
operator|new
name|SubjectAreaDAO
argument_list|()
operator|.
name|get
argument_list|(
name|getForm
argument_list|()
operator|.
name|getSubjectAreaId
argument_list|()
argument_list|)
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"backId"
argument_list|)
operator|!=
literal|null
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
literal|"hash"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"backId"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|getForm
argument_list|()
operator|.
name|getExamType
argument_list|()
operator|!=
literal|null
operator|&&
name|getForm
argument_list|()
operator|.
name|getSubjectAreaId
argument_list|()
operator|!=
literal|null
operator|&&
name|getForm
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
operator|!=
literal|null
condition|)
name|BackTracker
operator|.
name|markForBack
argument_list|(
name|request
argument_list|,
literal|"examList.action?form.op="
operator|+
name|MSG
operator|.
name|buttonSearch
argument_list|()
operator|+
literal|"&form.examType="
operator|+
name|getForm
argument_list|()
operator|.
name|getExamType
argument_list|()
operator|+
literal|"&form.subjectAreaId="
operator|+
name|getForm
argument_list|()
operator|.
name|getSubjectAreaId
argument_list|()
operator|+
literal|"&form.courseNbr="
operator|+
name|URLEncoder
operator|.
name|encode
argument_list|(
name|getForm
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
literal|"utf-8"
argument_list|)
argument_list|,
name|MSG
operator|.
name|backExams
argument_list|(
name|ExamTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|getForm
argument_list|()
operator|.
name|getExamType
argument_list|()
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|,
name|getForm
argument_list|()
operator|.
name|getSubjectAreaId
argument_list|()
operator|<
literal|0l
condition|?
name|CONST
operator|.
name|all
argument_list|()
else|:
name|subjectAreaName
operator|+
operator|(
name|getForm
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
operator|==
literal|null
operator|||
name|getForm
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|""
else|:
literal|" "
operator|+
name|getForm
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
operator|)
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LookupTables
operator|.
name|setupExamTypes
argument_list|(
name|request
argument_list|,
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ExamView
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ExamTimetable
argument_list|)
expr_stmt|;
return|return
literal|"list"
return|;
block|}
specifier|public
name|PdfWebTable
name|getExamTable
parameter_list|(
name|boolean
name|html
parameter_list|,
name|boolean
name|color
parameter_list|)
block|{
name|ExamAssignmentProxy
name|examAssignment
init|=
name|getExaminationSolverService
argument_list|()
operator|.
name|getSolver
argument_list|()
decl_stmt|;
name|Collection
name|exams
init|=
operator|(
name|getForm
argument_list|()
operator|.
name|getSubjectAreaId
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|getForm
argument_list|()
operator|.
name|getSubjectAreaId
argument_list|()
operator|<
literal|0
condition|?
name|Exam
operator|.
name|findAll
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|,
name|getForm
argument_list|()
operator|.
name|getExamType
argument_list|()
argument_list|)
else|:
name|Exam
operator|.
name|findExamsOfCourse
argument_list|(
name|getForm
argument_list|()
operator|.
name|getSubjectAreaId
argument_list|()
argument_list|,
name|getForm
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|getForm
argument_list|()
operator|.
name|getExamType
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|exams
operator|==
literal|null
operator|||
name|exams
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|examAssignment
operator|!=
literal|null
operator|&&
operator|!
name|examAssignment
operator|.
name|getExamTypeId
argument_list|()
operator|.
name|equals
argument_list|(
name|getForm
argument_list|()
operator|.
name|getExamType
argument_list|()
argument_list|)
condition|)
name|examAssignment
operator|=
literal|null
expr_stmt|;
name|String
name|nl
init|=
operator|(
name|html
condition|?
literal|"<br>"
else|:
literal|"\n"
operator|)
decl_stmt|;
name|boolean
name|timeVertical
init|=
name|RequiredTimeTable
operator|.
name|getTimeGridVertical
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|timeText
init|=
name|RequiredTimeTable
operator|.
name|getTimeGridAsText
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|instructorNameFormat
init|=
name|UserProperty
operator|.
name|NameFormat
operator|.
name|get
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
name|ExamType
name|type
init|=
name|ExamTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|getForm
argument_list|()
operator|.
name|getExamType
argument_list|()
argument_list|)
decl_stmt|;
name|PdfWebTable
name|table
init|=
operator|new
name|PdfWebTable
argument_list|(
literal|11
argument_list|,
name|MSG
operator|.
name|tableExaminations
argument_list|(
name|type
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|,
literal|"examList.action?ord=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
name|MSG
operator|.
name|colExamOwner
argument_list|()
operator|.
name|replace
argument_list|(
literal|"|"
argument_list|,
name|nl
argument_list|)
block|,
name|MSG
operator|.
name|colExamLength
argument_list|()
operator|.
name|replace
argument_list|(
literal|"|"
argument_list|,
name|nl
argument_list|)
block|,
name|MSG
operator|.
name|colExamSeatingType
argument_list|()
operator|.
name|replace
argument_list|(
literal|"|"
argument_list|,
name|nl
argument_list|)
block|,
name|MSG
operator|.
name|colExamSize
argument_list|()
operator|.
name|replace
argument_list|(
literal|"|"
argument_list|,
name|nl
argument_list|)
block|,
name|MSG
operator|.
name|colExamMaxRooms
argument_list|()
operator|.
name|replace
argument_list|(
literal|"|"
argument_list|,
name|nl
argument_list|)
block|,
name|MSG
operator|.
name|colExamInstructor
argument_list|()
operator|.
name|replace
argument_list|(
literal|"|"
argument_list|,
name|nl
argument_list|)
block|,
name|MSG
operator|.
name|colExamPeriodPrefs
argument_list|()
operator|.
name|replace
argument_list|(
literal|"|"
argument_list|,
name|nl
argument_list|)
block|,
name|MSG
operator|.
name|colExamRoomPrefs
argument_list|()
operator|.
name|replace
argument_list|(
literal|"|"
argument_list|,
name|nl
argument_list|)
block|,
name|MSG
operator|.
name|colExamDistributionPrefs
argument_list|()
operator|.
name|replace
argument_list|(
literal|"|"
argument_list|,
name|nl
argument_list|)
block|,
name|MSG
operator|.
name|colExamAssignedPeriod
argument_list|()
operator|.
name|replace
argument_list|(
literal|"|"
argument_list|,
name|nl
argument_list|)
block|,
name|MSG
operator|.
name|colExamAssignedRoom
argument_list|()
operator|.
name|replace
argument_list|(
literal|"|"
argument_list|,
name|nl
argument_list|)
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"right"
block|,
literal|"center"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exams
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|objects
init|=
literal|""
decl_stmt|,
name|perPref
init|=
literal|""
decl_stmt|,
name|roomPref
init|=
literal|""
decl_stmt|,
name|distPref
init|=
literal|""
decl_stmt|,
name|per
init|=
literal|""
decl_stmt|,
name|rooms
init|=
literal|""
decl_stmt|;
name|Comparable
name|perCmp
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
operator|new
name|TreeSet
argument_list|(
name|exam
operator|.
name|getOwners
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamOwner
name|owner
init|=
operator|(
name|ExamOwner
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|objects
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|objects
operator|+=
name|nl
expr_stmt|;
name|objects
operator|+=
name|owner
operator|.
name|getLabel
argument_list|()
expr_stmt|;
block|}
name|ExamAssignment
name|ea
init|=
operator|(
name|examAssignment
operator|!=
literal|null
condition|?
name|examAssignment
operator|.
name|getAssignment
argument_list|(
name|exam
operator|.
name|getUniqueId
argument_list|()
argument_list|)
else|:
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
operator|!=
literal|null
condition|?
operator|new
name|ExamAssignment
argument_list|(
name|exam
argument_list|)
else|:
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|ea
operator|!=
literal|null
condition|)
block|{
name|per
operator|=
operator|(
name|html
condition|?
name|ea
operator|.
name|getPeriodAbbreviationWithPref
argument_list|()
else|:
operator|(
name|ea
operator|.
name|getPeriodPref
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|color
condition|?
literal|""
else|:
literal|"@@COLOR "
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|ea
operator|.
name|getPeriodPref
argument_list|()
argument_list|)
operator|+
literal|" "
operator|)
operator|+
name|ea
operator|.
name|getPeriodAbbreviation
argument_list|()
operator|)
expr_stmt|;
name|perCmp
operator|=
name|ea
operator|.
name|getPeriodOrd
argument_list|()
expr_stmt|;
name|rooms
operator|=
literal|""
expr_stmt|;
for|for
control|(
name|ExamRoomInfo
name|room
range|:
name|ea
operator|.
name|getRooms
argument_list|()
control|)
block|{
if|if
condition|(
name|rooms
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|rooms
operator|+=
name|nl
expr_stmt|;
name|rooms
operator|+=
operator|(
name|html
condition|?
name|room
operator|.
name|toString
argument_list|()
else|:
operator|(
name|color
condition|?
literal|"@@COLOR "
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|PreferenceLevel
operator|.
name|int2prolog
argument_list|(
name|room
operator|.
name|getPreference
argument_list|()
argument_list|)
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|room
operator|.
name|getName
argument_list|()
operator|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|html
condition|)
block|{
name|roomPref
operator|+=
name|exam
operator|.
name|getEffectivePrefHtmlForPrefType
argument_list|(
name|RoomPref
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|roomPref
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
operator|!
name|roomPref
operator|.
name|endsWith
argument_list|(
name|nl
argument_list|)
condition|)
name|roomPref
operator|+=
name|nl
expr_stmt|;
name|roomPref
operator|+=
name|exam
operator|.
name|getEffectivePrefHtmlForPrefType
argument_list|(
name|BuildingPref
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|roomPref
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
operator|!
name|roomPref
operator|.
name|endsWith
argument_list|(
name|nl
argument_list|)
condition|)
name|roomPref
operator|+=
name|nl
expr_stmt|;
name|roomPref
operator|+=
name|exam
operator|.
name|getEffectivePrefHtmlForPrefType
argument_list|(
name|RoomFeaturePref
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|roomPref
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
operator|!
name|roomPref
operator|.
name|endsWith
argument_list|(
name|nl
argument_list|)
condition|)
name|roomPref
operator|+=
name|nl
expr_stmt|;
name|roomPref
operator|+=
name|exam
operator|.
name|getEffectivePrefHtmlForPrefType
argument_list|(
name|RoomGroupPref
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|roomPref
operator|.
name|endsWith
argument_list|(
name|nl
argument_list|)
condition|)
name|roomPref
operator|=
name|roomPref
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|roomPref
operator|.
name|length
argument_list|()
operator|-
name|nl
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ApplicationProperty
operator|.
name|LegacyPeriodPreferences
operator|.
name|isTrue
argument_list|()
condition|)
block|{
if|if
condition|(
name|timeText
operator|||
name|ExamType
operator|.
name|sExamTypeMidterm
operator|==
name|exam
operator|.
name|getExamType
argument_list|()
operator|.
name|getType
argument_list|()
condition|)
block|{
if|if
condition|(
name|ExamType
operator|.
name|sExamTypeMidterm
operator|==
name|exam
operator|.
name|getExamType
argument_list|()
operator|.
name|getType
argument_list|()
condition|)
block|{
name|MidtermPeriodPreferenceModel
name|epx
init|=
operator|new
name|MidtermPeriodPreferenceModel
argument_list|(
name|exam
operator|.
name|getSession
argument_list|()
argument_list|,
name|exam
operator|.
name|getExamType
argument_list|()
argument_list|)
decl_stmt|;
name|epx
operator|.
name|load
argument_list|(
name|exam
argument_list|)
expr_stmt|;
name|perPref
operator|+=
name|epx
operator|.
name|toString
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|perPref
operator|+=
name|exam
operator|.
name|getEffectivePrefHtmlForPrefType
argument_list|(
name|ExamPeriodPref
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|PeriodPreferenceModel
name|px
init|=
operator|new
name|PeriodPreferenceModel
argument_list|(
name|exam
operator|.
name|getSession
argument_list|()
argument_list|,
name|ea
argument_list|,
name|exam
operator|.
name|getExamType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|RequiredTimeTable
name|rtt
init|=
operator|new
name|RequiredTimeTable
argument_list|(
name|px
argument_list|)
decl_stmt|;
name|px
operator|.
name|load
argument_list|(
name|exam
argument_list|)
expr_stmt|;
name|String
name|hint
init|=
name|rtt
operator|.
name|print
argument_list|(
literal|false
argument_list|,
name|timeVertical
argument_list|)
operator|.
name|replace
argument_list|(
literal|");\n</script>"
argument_list|,
literal|""
argument_list|)
operator|.
name|replace
argument_list|(
literal|"<script language=\"javascript\">\ndocument.write("
argument_list|,
literal|""
argument_list|)
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|" "
argument_list|)
decl_stmt|;
name|perPref
operator|=
literal|"<img border='0' src='"
operator|+
literal|"pattern?v="
operator|+
operator|(
name|timeVertical
condition|?
literal|1
else|:
literal|0
operator|)
operator|+
literal|"&x="
operator|+
name|exam
operator|.
name|getUniqueId
argument_list|()
operator|+
operator|(
name|ea
operator|==
literal|null
condition|?
literal|""
else|:
literal|"&ap="
operator|+
name|ea
operator|.
name|getPeriodId
argument_list|()
operator|)
operator|+
literal|"' onmouseover=\"showGwtHint(this, "
operator|+
name|hint
operator|+
literal|");\" onmouseout=\"hideGwtHint();\">"
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|timeText
operator|||
name|ExamType
operator|.
name|sExamTypeMidterm
operator|==
name|exam
operator|.
name|getExamType
argument_list|()
operator|.
name|getType
argument_list|()
condition|)
block|{
if|if
condition|(
name|ExamType
operator|.
name|sExamTypeMidterm
operator|==
name|exam
operator|.
name|getExamType
argument_list|()
operator|.
name|getType
argument_list|()
condition|)
block|{
name|MidtermPeriodPreferenceModel
name|epx
init|=
operator|new
name|MidtermPeriodPreferenceModel
argument_list|(
name|exam
operator|.
name|getSession
argument_list|()
argument_list|,
name|exam
operator|.
name|getExamType
argument_list|()
argument_list|)
decl_stmt|;
name|epx
operator|.
name|load
argument_list|(
name|exam
argument_list|)
expr_stmt|;
name|perPref
operator|+=
literal|"<span onmouseover=\"showGwtExamPeriodPreferencesHint(this, '"
operator|+
name|exam
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"', null);\" onmouseout=\"hideGwtPeriodPreferencesHint();\">"
operator|+
name|epx
operator|.
name|toString
argument_list|(
literal|true
argument_list|)
operator|+
literal|"</span>"
expr_stmt|;
block|}
else|else
block|{
name|perPref
operator|+=
literal|"<span onmouseover=\"showGwtExamPeriodPreferencesHint(this, '"
operator|+
name|exam
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"', null);\" onmouseout=\"hideGwtPeriodPreferencesHint();\">"
operator|+
name|exam
operator|.
name|getEffectivePrefHtmlForPrefType
argument_list|(
name|ExamPeriodPref
operator|.
name|class
argument_list|)
operator|+
literal|"</span>"
expr_stmt|;
block|}
block|}
else|else
block|{
name|perPref
operator|=
literal|"<img border='0' src='pattern?v="
operator|+
operator|(
name|timeVertical
condition|?
literal|1
else|:
literal|0
operator|)
operator|+
literal|"&x="
operator|+
name|exam
operator|.
name|getUniqueId
argument_list|()
operator|+
operator|(
name|ea
operator|==
literal|null
condition|?
literal|""
else|:
literal|"&ap="
operator|+
name|ea
operator|.
name|getPeriodId
argument_list|()
operator|)
operator|+
literal|"' onmouseover=\"showGwtExamPeriodPreferencesHint(this, '"
operator|+
name|exam
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"', null);\" onmouseout=\"hideGwtPeriodPreferencesHint();\">"
expr_stmt|;
block|}
block|}
name|distPref
operator|+=
name|exam
operator|.
name|getEffectivePrefHtmlForPrefType
argument_list|(
name|DistributionPref
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Iterator
name|j
init|=
name|exam
operator|.
name|effectivePreferences
argument_list|(
name|RoomPref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|pref
init|=
operator|(
name|Preference
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|roomPref
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|roomPref
operator|+=
name|nl
expr_stmt|;
name|roomPref
operator|+=
operator|(
name|color
condition|?
literal|"@@COLOR "
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
name|pref
operator|.
name|preferenceText
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|j
init|=
name|exam
operator|.
name|effectivePreferences
argument_list|(
name|BuildingPref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|pref
init|=
operator|(
name|Preference
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|roomPref
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|roomPref
operator|+=
name|nl
expr_stmt|;
name|roomPref
operator|+=
operator|(
name|color
condition|?
literal|"@@COLOR "
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
name|pref
operator|.
name|preferenceText
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|j
init|=
name|exam
operator|.
name|effectivePreferences
argument_list|(
name|RoomFeaturePref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|pref
init|=
operator|(
name|Preference
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|roomPref
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|roomPref
operator|+=
name|nl
expr_stmt|;
name|roomPref
operator|+=
operator|(
name|color
condition|?
literal|"@@COLOR "
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
name|pref
operator|.
name|preferenceText
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|j
init|=
name|exam
operator|.
name|effectivePreferences
argument_list|(
name|RoomGroupPref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|pref
init|=
operator|(
name|Preference
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|roomPref
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|roomPref
operator|+=
name|nl
expr_stmt|;
name|roomPref
operator|+=
operator|(
name|color
condition|?
literal|"@@COLOR "
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
name|pref
operator|.
name|preferenceText
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ExamType
operator|.
name|sExamTypeMidterm
operator|==
name|exam
operator|.
name|getExamType
argument_list|()
operator|.
name|getType
argument_list|()
condition|)
block|{
name|MidtermPeriodPreferenceModel
name|epx
init|=
operator|new
name|MidtermPeriodPreferenceModel
argument_list|(
name|exam
operator|.
name|getSession
argument_list|()
argument_list|,
name|exam
operator|.
name|getExamType
argument_list|()
argument_list|)
decl_stmt|;
name|epx
operator|.
name|load
argument_list|(
name|exam
argument_list|)
expr_stmt|;
name|perPref
operator|+=
name|epx
operator|.
name|toString
argument_list|(
literal|false
argument_list|,
name|color
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|timeText
operator|||
operator|!
name|color
condition|)
block|{
for|for
control|(
name|Iterator
name|j
init|=
name|exam
operator|.
name|effectivePreferences
argument_list|(
name|ExamPeriodPref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|pref
init|=
operator|(
name|Preference
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|perPref
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|perPref
operator|+=
name|nl
expr_stmt|;
name|perPref
operator|+=
operator|(
name|color
condition|?
literal|"@@COLOR "
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
name|pref
operator|.
name|preferenceText
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|PeriodPreferenceModel
name|px
init|=
operator|new
name|PeriodPreferenceModel
argument_list|(
name|exam
operator|.
name|getSession
argument_list|()
argument_list|,
name|ea
argument_list|,
name|exam
operator|.
name|getExamType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|px
operator|.
name|load
argument_list|(
name|exam
argument_list|)
expr_stmt|;
name|RequiredTimeTable
name|rtt
init|=
operator|new
name|RequiredTimeTable
argument_list|(
name|px
argument_list|)
decl_stmt|;
name|Image
name|image
init|=
name|rtt
operator|.
name|createBufferedImage
argument_list|(
name|timeVertical
argument_list|)
decl_stmt|;
if|if
condition|(
name|image
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|addImage
argument_list|(
name|exam
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|image
argument_list|)
expr_stmt|;
name|perPref
operator|+=
literal|"@@IMAGE "
operator|+
name|exam
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" "
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Iterator
name|j
init|=
name|exam
operator|.
name|effectivePreferences
argument_list|(
name|ExamPeriodPref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|pref
init|=
operator|(
name|Preference
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|perPref
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|perPref
operator|+=
name|nl
expr_stmt|;
name|perPref
operator|+=
operator|(
name|color
condition|?
literal|"@@COLOR "
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
name|pref
operator|.
name|preferenceText
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|Iterator
name|j
init|=
name|exam
operator|.
name|effectivePreferences
argument_list|(
name|DistributionPref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionPref
name|pref
init|=
operator|(
name|DistributionPref
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|distPref
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|distPref
operator|+=
name|nl
expr_stmt|;
name|distPref
operator|+=
operator|(
name|color
condition|?
literal|"@@COLOR "
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
name|pref
operator|.
name|preferenceText
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|" ("
argument_list|,
literal|", "
argument_list|,
literal|")"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"&lt;"
argument_list|,
literal|"<"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"&gt;"
argument_list|,
literal|">"
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|nrStudents
init|=
name|exam
operator|.
name|getSize
argument_list|()
decl_stmt|;
name|String
name|instructors
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
operator|new
name|TreeSet
argument_list|(
name|exam
operator|.
name|getInstructors
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentalInstructor
name|instructor
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|instructors
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|instructors
operator|+=
name|nl
expr_stmt|;
name|instructors
operator|+=
name|instructor
operator|.
name|getName
argument_list|(
name|instructorNameFormat
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|addLine
argument_list|(
literal|"onClick=\"document.location='examDetail.action?examId="
operator|+
name|exam
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"';\""
argument_list|,
operator|new
name|String
index|[]
block|{
operator|(
name|html
condition|?
literal|"<a name='"
operator|+
name|exam
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"'>"
else|:
literal|""
operator|)
operator|+
name|objects
operator|+
operator|(
name|html
condition|?
literal|"</a>"
else|:
literal|""
operator|)
block|,
name|exam
operator|.
name|getLength
argument_list|()
operator|.
name|toString
argument_list|()
block|,
operator|(
name|Exam
operator|.
name|sSeatingTypeNormal
operator|==
name|exam
operator|.
name|getSeatingType
argument_list|()
condition|?
literal|"Normal"
else|:
literal|"Exam"
operator|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|nrStudents
argument_list|)
block|,
name|exam
operator|.
name|getMaxNbrRooms
argument_list|()
operator|.
name|toString
argument_list|()
block|,
name|instructors
block|,
name|perPref
block|,
name|roomPref
block|,
name|distPref
block|,
name|per
block|,
name|rooms
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|exam
operator|.
name|firstOwner
argument_list|()
block|,
name|exam
operator|.
name|getLength
argument_list|()
block|,
name|exam
operator|.
name|getSeatingType
argument_list|()
block|,
name|nrStudents
block|,
name|exam
operator|.
name|getMaxNbrRooms
argument_list|()
block|,
name|instructors
block|,
name|perPref
block|,
name|roomPref
block|,
name|distPref
block|,
name|perCmp
block|,
name|rooms
block|}
argument_list|,
name|exam
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|table
return|;
block|}
block|}
end_class

end_unit

