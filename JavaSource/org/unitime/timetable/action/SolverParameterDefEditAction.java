begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.0 (University Course Timetabling& Student Sectioning Application)  * Copyright (C) 2007, UniTime.org, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|actions
operator|.
name|LookupDispatchAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|HibernateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|SolverParameterDefEditForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverParameterDef
import|;
end_import

begin_comment
comment|/**   * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|SolverParameterDefEditAction
extends|extends
name|LookupDispatchAction
block|{
comment|// --------------------------------------------------------- Instance Variables
comment|// --------------------------------------------------------- Methods
comment|/** 	 *  	 */
specifier|protected
name|Map
name|getKeyMethodMap
parameter_list|()
block|{
name|Map
name|map
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"editSolverParameterDef"
argument_list|,
literal|"edit"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"button.addSolverParameterDef"
argument_list|,
literal|"add"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"button.saveSolverParameterDef"
argument_list|,
literal|"save"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"button.deleteSolverParameterDef"
argument_list|,
literal|"delete"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"button.cancelSolverParameterDef"
argument_list|,
literal|"cancel"
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
comment|/** 	 *  	 * @param mapping 	 * @param form 	 * @param request 	 * @param response 	 * @return 	 * @throws HibernateException 	 */
specifier|public
name|ActionForward
name|edit
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|HibernateException
block|{
name|SolverParameterDefEditForm
name|solverParameterDefEditForm
init|=
operator|(
name|SolverParameterDefEditForm
operator|)
name|form
decl_stmt|;
name|Long
name|id
init|=
operator|new
name|Long
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"uniqueId"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|solverParameterDefEditForm
operator|.
name|setSolverParameterDef
argument_list|(
name|SolverParameterDef
operator|.
name|getSolverParameterDefById
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showEdit"
argument_list|)
return|;
block|}
comment|/** 	 *  	 * @param mapping 	 * @param form 	 * @param request 	 * @param response 	 * @return 	 * @throws HibernateException 	 */
specifier|public
name|ActionForward
name|add
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|HibernateException
block|{
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showAdd"
argument_list|)
return|;
block|}
comment|/** 	 *  	 * @param mapping 	 * @param form 	 * @param request 	 * @param response 	 * @return 	 * @throws HibernateException 	 * @throws SQLException 	 */
specifier|public
name|ActionForward
name|save
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|HibernateException
throws|,
name|SQLException
block|{
name|SolverParameterDefEditForm
name|solverParameterDefEditForm
init|=
operator|(
name|SolverParameterDefEditForm
operator|)
name|form
decl_stmt|;
name|SolverParameterDef
name|solverParameterDef
init|=
name|solverParameterDefEditForm
operator|.
name|getSolverParameterDef
argument_list|()
decl_stmt|;
if|if
condition|(
name|solverParameterDef
operator|.
name|getUniqueId
argument_list|()
operator|.
name|intValue
argument_list|()
operator|==
literal|0
condition|)
block|{
name|SolverParameterDef
name|solverParameterDefNew
init|=
operator|new
name|SolverParameterDef
argument_list|()
decl_stmt|;
name|solverParameterDefNew
operator|.
name|setName
argument_list|(
name|solverParameterDefEditForm
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|solverParameterDefNew
operator|.
name|setDescription
argument_list|(
name|solverParameterDefEditForm
operator|.
name|getDesc
argument_list|()
argument_list|)
expr_stmt|;
name|solverParameterDefNew
operator|.
name|setDefault
argument_list|(
name|solverParameterDefEditForm
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
name|solverParameterDefNew
operator|.
name|saveOrUpdate
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|solverParameterDef
operator|.
name|saveOrUpdate
argument_list|()
expr_stmt|;
block|}
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showSolverParameterDefList"
argument_list|)
return|;
block|}
comment|/** 	 *  	 * @param mapping 	 * @param form 	 * @param request 	 * @param response 	 * @return 	 * @throws HibernateException 	 */
specifier|public
name|ActionForward
name|delete
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|HibernateException
block|{
name|SolverParameterDefEditForm
name|solverParameterDefEditForm
init|=
operator|(
name|SolverParameterDefEditForm
operator|)
name|form
decl_stmt|;
name|Long
name|id
init|=
operator|new
name|Long
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"uniqueId"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|SolverParameterDef
operator|.
name|deleteSolverParameterDefById
argument_list|(
name|id
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showSolverParameterDefList"
argument_list|)
return|;
block|}
comment|/** 	 *  	 * @param mapping 	 * @param form 	 * @param request 	 * @param response 	 * @return 	 */
specifier|public
name|ActionForward
name|cancel
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
block|{
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showSolverParameterDefList"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

