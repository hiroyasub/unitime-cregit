begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.0 (University Course Timetabling& Student Sectioning Application)  * Copyright (C) 2007, UniTime.org, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|actions
operator|.
name|LookupDispatchAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|HibernateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|criterion
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|criterion
operator|.
name|Restrictions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|Web
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|RoomDeptEditForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Room
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomDept
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|RoomTypeComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|LocationDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|RoomDeptDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  * MyEclipse Struts Creation date: 05-05-2006  *   * XDoclet definition:  *   * @struts.action path="/roomDeptEdit" name="roomDeptEditForm"  *                input="/admin/roomDeptEdit.jsp" parameter="doit"  *                scope="request" validate="true"  * @struts.action-forward name="showEdit" path="roomDeptEditTile"  * @struts.action-forward name="showRoomDeptList" path="/roomDeptList.do"  */
end_comment

begin_class
specifier|public
class|class
name|RoomDeptEditAction
extends|extends
name|LookupDispatchAction
block|{
comment|// --------------------------------------------------------- Instance
comment|// Variables
comment|// --------------------------------------------------------- Methods
comment|/** 	 *  	 */
specifier|protected
name|Map
name|getKeyMethodMap
parameter_list|()
block|{
name|Map
name|map
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"editRoomDept"
argument_list|,
literal|"editRoomDept"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"button.editRoomSharing"
argument_list|,
literal|"editRoomDept"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"button.update"
argument_list|,
literal|"updateRoomDept"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"button.returnToRoomDeptList"
argument_list|,
literal|"cancelRoomDept"
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
comment|/** 	 *  	 * @param mapping 	 * @param form 	 * @param request 	 * @param response 	 * @return 	 * @throws HibernateException 	 * @throws Exception 	 */
specifier|public
name|ActionForward
name|editRoomDept
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|HibernateException
throws|,
name|Exception
block|{
name|RoomDeptEditForm
name|roomDeptEditForm
init|=
operator|(
name|RoomDeptEditForm
operator|)
name|form
decl_stmt|;
name|HttpSession
name|webSession
init|=
name|request
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|webSession
argument_list|)
decl_stmt|;
name|Long
name|sessionId
init|=
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
operator|.
name|getUniqueId
argument_list|()
decl_stmt|;
comment|// get department from session
name|Department
name|d
init|=
operator|new
name|Department
argument_list|()
decl_stmt|;
if|if
condition|(
name|webSession
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|DEPT_CODE_ATTR_ROOM_NAME
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|deptCode
init|=
name|webSession
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|DEPT_CODE_ATTR_ROOM_NAME
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|d
operator|=
name|Department
operator|.
name|findByDeptCode
argument_list|(
name|deptCode
argument_list|,
name|sessionId
argument_list|)
expr_stmt|;
name|roomDeptEditForm
operator|.
name|setId
argument_list|(
name|d
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// get department from request
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"id"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|Long
name|id
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"id"
argument_list|)
argument_list|)
decl_stmt|;
name|roomDeptEditForm
operator|.
name|setId
argument_list|(
name|id
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|DepartmentDAO
name|ddao
init|=
operator|new
name|DepartmentDAO
argument_list|()
decl_stmt|;
name|d
operator|=
name|ddao
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|roomDeptEditForm
operator|.
name|setDeptAbbv
argument_list|(
name|d
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|roomDeptEditForm
operator|.
name|setDeptCode
argument_list|(
name|d
operator|.
name|getDeptCode
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
name|rooms
init|=
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
operator|.
name|getRoomsFast
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Collection
name|assigned
init|=
name|getAssignedRooms
argument_list|(
name|rooms
argument_list|,
name|d
argument_list|)
decl_stmt|;
name|Collection
name|available
init|=
name|getAvailableRooms
argument_list|(
name|rooms
argument_list|,
name|d
argument_list|)
decl_stmt|;
comment|// TreeSet sortedAssignedRooms = new TreeSet(assigned);
name|roomDeptEditForm
operator|.
name|setAssignedRooms
argument_list|(
name|assigned
argument_list|)
expr_stmt|;
comment|// TreeSet sortedAvailableRooms = new TreeSet(available);
name|roomDeptEditForm
operator|.
name|setNotAssignedRooms
argument_list|(
name|available
argument_list|)
expr_stmt|;
name|roomDeptEditForm
operator|.
name|setRooms
argument_list|()
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showEdit"
argument_list|)
return|;
block|}
comment|/** 	 *  	 * @param user 	 * @param d 	 * @return 	 * @throws Exception 	 */
specifier|private
name|Collection
name|getAvailableRooms
parameter_list|(
name|Collection
name|rooms
parameter_list|,
name|Department
name|d
parameter_list|)
throws|throws
name|Exception
block|{
comment|// get rooms owned by user
name|ArrayList
name|available
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|rooms
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|location
init|=
operator|(
name|Location
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|location
operator|instanceof
name|Room
operator|&&
operator|!
operator|(
operator|(
name|Room
operator|)
name|location
operator|)
operator|.
name|hasRoomDept
argument_list|(
name|d
argument_list|)
condition|)
name|available
operator|.
name|add
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|available
argument_list|,
operator|new
name|RoomTypeComparator
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|available
return|;
block|}
comment|/** 	 *  	 * @param user 	 * @param rooms 	 * @param d 	 * @return 	 * @throws Exception 	 */
specifier|private
name|Collection
name|getAssignedRooms
parameter_list|(
name|Collection
name|rooms
parameter_list|,
name|Department
name|d
parameter_list|)
throws|throws
name|Exception
block|{
name|ArrayList
name|assigned
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|rooms
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|location
init|=
operator|(
name|Location
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Room
name|r
init|=
operator|(
name|location
operator|instanceof
name|Room
condition|?
operator|(
name|Room
operator|)
name|location
else|:
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|location
operator|instanceof
name|Room
operator|&&
operator|(
operator|(
name|Room
operator|)
name|location
operator|)
operator|.
name|hasRoomDept
argument_list|(
name|d
argument_list|)
condition|)
name|assigned
operator|.
name|add
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|assigned
argument_list|,
operator|new
name|RoomTypeComparator
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|assigned
return|;
block|}
comment|/** 	 *  	 * @param mapping 	 * @param form 	 * @param request 	 * @param response 	 * @return 	 */
specifier|public
name|ActionForward
name|cancelRoomDept
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
block|{
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showRoomList"
argument_list|)
return|;
block|}
comment|/** 	 *  	 * @param mapping 	 * @param form 	 * @param request 	 * @param response 	 * @return 	 * @throws Exception 	 */
specifier|public
name|ActionForward
name|updateRoomDept
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
name|RoomDeptEditForm
name|roomDeptEditForm
init|=
operator|(
name|RoomDeptEditForm
operator|)
name|form
decl_stmt|;
name|ActionMessages
name|errors
init|=
operator|new
name|ActionMessages
argument_list|()
decl_stmt|;
comment|// Validate input prefs
name|errors
operator|=
name|roomDeptEditForm
operator|.
name|validate
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
expr_stmt|;
if|if
condition|(
name|errors
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|update
argument_list|(
name|mapping
argument_list|,
name|roomDeptEditForm
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
name|editRoomDept
argument_list|(
name|mapping
argument_list|,
name|form
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showEdit"
argument_list|)
return|;
block|}
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showRoomList"
argument_list|)
return|;
block|}
comment|/** 	 *  	 * @param mapping 	 * @param roomGroupEditForm 	 * @param request 	 * @param response 	 */
specifier|private
name|void
name|update
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|RoomDeptEditForm
name|roomDeptEditForm
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
name|HttpSession
name|webSession
init|=
name|request
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|webSession
argument_list|)
decl_stmt|;
name|Long
name|sessionId
init|=
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
operator|.
name|getSessionId
argument_list|()
decl_stmt|;
name|Long
name|id
init|=
operator|new
name|Long
argument_list|(
name|roomDeptEditForm
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|DepartmentDAO
name|ddao
init|=
operator|new
name|DepartmentDAO
argument_list|()
decl_stmt|;
name|Department
name|d
init|=
name|ddao
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
comment|// update rooms
name|String
index|[]
name|selectedAssigned
init|=
name|roomDeptEditForm
operator|.
name|getAssignedSelected
argument_list|()
decl_stmt|;
name|String
index|[]
name|selectedNotAssigned
init|=
name|roomDeptEditForm
operator|.
name|getNotAssignedSelected
argument_list|()
decl_stmt|;
name|Collection
name|rooms
init|=
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
operator|.
name|getRoomsFast
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Collection
name|assignedRooms
init|=
name|getAssignedRooms
argument_list|(
name|rooms
argument_list|,
name|d
argument_list|)
decl_stmt|;
name|Collection
name|notAssignedRooms
init|=
name|getAvailableRooms
argument_list|(
name|rooms
argument_list|,
name|d
argument_list|)
decl_stmt|;
name|String
name|s1
init|=
literal|null
decl_stmt|;
name|String
name|s2
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|selectedAssigned
operator|.
name|length
operator|!=
literal|0
condition|)
name|s1
operator|=
name|Constants
operator|.
name|arrayToStr
argument_list|(
name|selectedAssigned
argument_list|,
literal|""
argument_list|,
literal|","
argument_list|)
expr_stmt|;
else|else
name|s1
operator|=
operator|new
name|String
argument_list|()
expr_stmt|;
if|if
condition|(
name|selectedNotAssigned
operator|.
name|length
operator|!=
literal|0
condition|)
name|s2
operator|=
name|Constants
operator|.
name|arrayToStr
argument_list|(
name|selectedNotAssigned
argument_list|,
literal|""
argument_list|,
literal|","
argument_list|)
expr_stmt|;
else|else
name|s2
operator|=
operator|new
name|String
argument_list|()
expr_stmt|;
name|RoomDeptDAO
name|rddao
init|=
operator|new
name|RoomDeptDAO
argument_list|()
decl_stmt|;
name|LocationDAO
name|ldao
init|=
operator|new
name|LocationDAO
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|rddao
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// move room from assignedRooms to notAssignedRooms
if|if
condition|(
name|selectedAssigned
operator|.
name|length
operator|!=
name|assignedRooms
operator|.
name|size
argument_list|()
condition|)
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|List
name|list
init|=
name|hibSession
operator|.
name|createCriteria
argument_list|(
name|RoomDept
operator|.
name|class
argument_list|)
operator|.
name|add
argument_list|(
name|Restrictions
operator|.
name|eq
argument_list|(
literal|"department"
argument_list|,
name|d
argument_list|)
argument_list|)
operator|.
name|addOrder
argument_list|(
name|Order
operator|.
name|asc
argument_list|(
literal|"room"
argument_list|)
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|list
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomDept
name|rd
init|=
operator|(
name|RoomDept
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Location
name|location
init|=
name|rd
operator|.
name|getRoom
argument_list|()
decl_stmt|;
if|if
condition|(
name|s1
operator|.
name|indexOf
argument_list|(
name|location
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|request
argument_list|,
name|location
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|ROOM_DEPT_EDIT
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|DELETE
argument_list|,
literal|null
argument_list|,
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|remove
argument_list|(
name|rd
argument_list|)
expr_stmt|;
name|location
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|remove
argument_list|(
name|rd
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|rd
operator|.
name|getRoom
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|rd
argument_list|)
expr_stmt|;
name|location
operator|.
name|removedFromDepartment
argument_list|(
name|d
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
block|}
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
comment|// move room from notAssignedRooms to assignedRooms
if|if
condition|(
name|selectedNotAssigned
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|selectedNotAssigned
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Location
name|location
init|=
name|ldao
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|selectedNotAssigned
index|[
name|i
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|Room
name|room
init|=
operator|(
name|location
operator|instanceof
name|Room
condition|?
operator|(
name|Room
operator|)
name|location
else|:
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|room
operator|!=
literal|null
condition|)
block|{
name|RoomDept
name|rd
init|=
operator|new
name|RoomDept
argument_list|()
decl_stmt|;
name|rd
operator|.
name|setDepartment
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|rd
operator|.
name|setRoom
argument_list|(
name|room
argument_list|)
expr_stmt|;
name|rd
operator|.
name|setControl
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|d
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|add
argument_list|(
name|rd
argument_list|)
expr_stmt|;
name|room
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|add
argument_list|(
name|rd
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|room
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|rd
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|request
argument_list|,
name|location
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|ROOM_DEPT_EDIT
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|CREATE
argument_list|,
literal|null
argument_list|,
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
block|}
throw|throw
name|e
throw|;
block|}
name|hibSession
operator|.
name|refresh
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

