begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|WebTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|SolutionReportForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|RoomTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|SolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|interactive
operator|.
name|ClassAssignmentDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|service
operator|.
name|SolverService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|DeptBalancingReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|DiscouragedInstructorBtbReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|JenrlInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|PerturbationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|RoomReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|SameSubpartBalancingReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|StudentConflictsReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|ViolatedDistrPreferencesReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|ExportUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|PdfEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|PdfFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|PdfWebTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|PageSize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Paragraph
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Rectangle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|pdf
operator|.
name|PdfPTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|pdf
operator|.
name|PdfWriter
import|;
end_import

begin_comment
comment|/**   * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"/solutionReport"
argument_list|)
specifier|public
class|class
name|SolutionReportAction
extends|extends
name|Action
block|{
specifier|private
specifier|static
name|java
operator|.
name|text
operator|.
name|DecimalFormat
name|sDoubleFormat
init|=
operator|new
name|java
operator|.
name|text
operator|.
name|DecimalFormat
argument_list|(
literal|"0.00"
argument_list|,
operator|new
name|java
operator|.
name|text
operator|.
name|DecimalFormatSymbols
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Autowired
name|SolverService
argument_list|<
name|SolverProxy
argument_list|>
name|courseTimetablingSolverService
decl_stmt|;
annotation|@
name|Autowired
name|SessionContext
name|sessionContext
decl_stmt|;
specifier|public
name|ActionForward
name|execute
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
name|SolutionReportForm
name|myForm
init|=
operator|(
name|SolutionReportForm
operator|)
name|form
decl_stmt|;
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|SolutionReports
argument_list|)
expr_stmt|;
comment|// Read operation to be performed
name|String
name|op
init|=
operator|(
name|myForm
operator|.
name|getOp
argument_list|()
operator|!=
literal|null
condition|?
name|myForm
operator|.
name|getOp
argument_list|()
else|:
name|request
operator|.
name|getParameter
argument_list|(
literal|"op"
argument_list|)
operator|)
decl_stmt|;
name|Session
name|session
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
decl_stmt|;
name|BitSet
name|sessionDays
init|=
name|session
operator|.
name|getDefaultDatePattern
argument_list|()
operator|.
name|getPatternBitSet
argument_list|()
decl_stmt|;
name|int
name|startDayDayOfWeek
init|=
name|Constants
operator|.
name|getDayOfWeek
argument_list|(
name|session
operator|.
name|getDefaultDatePattern
argument_list|()
operator|.
name|getStartDate
argument_list|()
argument_list|)
decl_stmt|;
name|SolverProxy
name|solver
init|=
name|courseTimetablingSolverService
operator|.
name|getSolver
argument_list|()
decl_stmt|;
if|if
condition|(
name|solver
operator|==
literal|null
condition|)
block|{
name|request
operator|.
name|setAttribute
argument_list|(
literal|"SolutionReport.message"
argument_list|,
literal|"Neither a solver is started nor solution is loaded."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
for|for
control|(
name|RoomType
name|type
range|:
name|RoomType
operator|.
name|findAll
argument_list|()
control|)
block|{
name|RoomReport
name|roomReport
init|=
name|solver
operator|.
name|getRoomReport
argument_list|(
name|sessionDays
argument_list|,
name|startDayDayOfWeek
argument_list|,
name|type
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|roomReport
operator|!=
literal|null
operator|&&
operator|!
name|roomReport
operator|.
name|getGroups
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|WebTable
name|t
init|=
name|getRoomReportTable
argument_list|(
name|request
argument_list|,
name|roomReport
argument_list|,
literal|false
argument_list|,
name|type
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
literal|"SolutionReport.roomReportTable."
operator|+
name|type
operator|.
name|getReference
argument_list|()
argument_list|,
name|t
operator|.
name|printTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"solutionReports.roomReport.ord"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|RoomReport
name|roomReport
init|=
name|solver
operator|.
name|getRoomReport
argument_list|(
name|sessionDays
argument_list|,
name|startDayDayOfWeek
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|roomReport
operator|!=
literal|null
operator|&&
operator|!
name|roomReport
operator|.
name|getGroups
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|WebTable
name|t
init|=
name|getRoomReportTable
argument_list|(
name|request
argument_list|,
name|roomReport
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
literal|"SolutionReport.roomReportTable.nonUniv"
argument_list|,
name|t
operator|.
name|printTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"solutionReports.roomReport.ord"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|DeptBalancingReport
name|deptBalancingReport
init|=
name|solver
operator|.
name|getDeptBalancingReport
argument_list|()
decl_stmt|;
if|if
condition|(
name|deptBalancingReport
operator|!=
literal|null
operator|&&
operator|!
name|deptBalancingReport
operator|.
name|getGroups
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
literal|"SolutionReport.deptBalancingReportTable"
argument_list|,
name|getDeptBalancingReportTable
argument_list|(
name|request
argument_list|,
name|deptBalancingReport
argument_list|,
literal|false
argument_list|)
operator|.
name|printTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"solutionReports.deptBalancingReport.ord"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ViolatedDistrPreferencesReport
name|violatedDistrPreferencesReport
init|=
name|solver
operator|.
name|getViolatedDistrPreferencesReport
argument_list|()
decl_stmt|;
if|if
condition|(
name|violatedDistrPreferencesReport
operator|!=
literal|null
operator|&&
operator|!
name|violatedDistrPreferencesReport
operator|.
name|getGroups
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
literal|"SolutionReport.violatedDistrPreferencesReportTable"
argument_list|,
name|getViolatedDistrPreferencesReportTable
argument_list|(
name|request
argument_list|,
name|violatedDistrPreferencesReport
argument_list|,
literal|false
argument_list|)
operator|.
name|printTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"solutionReports.violDistPrefReport.ord"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|DiscouragedInstructorBtbReport
name|discouragedInstructorBtbReportReport
init|=
name|solver
operator|.
name|getDiscouragedInstructorBtbReport
argument_list|()
decl_stmt|;
if|if
condition|(
name|discouragedInstructorBtbReportReport
operator|!=
literal|null
operator|&&
operator|!
name|discouragedInstructorBtbReportReport
operator|.
name|getGroups
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
literal|"SolutionReport.discouragedInstructorBtbReportReportTable"
argument_list|,
name|getDiscouragedInstructorBtbReportReportTable
argument_list|(
name|request
argument_list|,
name|discouragedInstructorBtbReportReport
argument_list|,
literal|false
argument_list|)
operator|.
name|printTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"solutionReports.violInstBtb.ord"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|StudentConflictsReport
name|studentConflictsReport
init|=
name|solver
operator|.
name|getStudentConflictsReport
argument_list|()
decl_stmt|;
if|if
condition|(
name|studentConflictsReport
operator|!=
literal|null
operator|&&
operator|!
name|studentConflictsReport
operator|.
name|getGroups
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
literal|"SolutionReport.studentConflictsReportTable"
argument_list|,
name|getStudentConflictsReportTable
argument_list|(
name|request
argument_list|,
name|studentConflictsReport
argument_list|,
literal|false
argument_list|)
operator|.
name|printTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"solutionReports.studConf.ord"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|SameSubpartBalancingReport
name|sameSubpartBalancingReport
init|=
name|solver
operator|.
name|getSameSubpartBalancingReport
argument_list|()
decl_stmt|;
if|if
condition|(
name|sameSubpartBalancingReport
operator|!=
literal|null
operator|&&
operator|!
name|sameSubpartBalancingReport
operator|.
name|getGroups
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
literal|"SolutionReport.sameSubpartBalancingReportTable"
argument_list|,
name|getSameSubpartBalancingReportTable
argument_list|(
name|request
argument_list|,
name|sameSubpartBalancingReport
argument_list|,
literal|false
argument_list|)
operator|.
name|printTable
argument_list|(
name|PdfWebTable
operator|.
name|getOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"solutionReports.sectBalancingReport.ord"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|PerturbationReport
name|perturbationReport
init|=
name|solver
operator|.
name|getPerturbationReport
argument_list|()
decl_stmt|;
if|if
condition|(
name|perturbationReport
operator|!=
literal|null
operator|&&
operator|!
name|perturbationReport
operator|.
name|getGroups
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
literal|"SolutionReport.perturbationReportTable"
argument_list|,
name|getPerturbationReportTable
argument_list|(
name|request
argument_list|,
name|perturbationReport
argument_list|,
literal|false
argument_list|)
operator|.
name|printTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"solutionReports.pert.ord"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|"Export PDF"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|OutputStream
name|out
init|=
name|ExportUtils
operator|.
name|getPdfOutputStream
argument_list|(
name|response
argument_list|,
literal|"report"
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|(
operator|new
name|Rectangle
argument_list|(
literal|60f
operator|+
name|PageSize
operator|.
name|LETTER
operator|.
name|getHeight
argument_list|()
argument_list|,
literal|60f
operator|+
literal|0.75f
operator|*
name|PageSize
operator|.
name|LETTER
operator|.
name|getHeight
argument_list|()
argument_list|)
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|)
decl_stmt|;
name|PdfWriter
name|iWriter
init|=
name|PdfWriter
operator|.
name|getInstance
argument_list|(
name|doc
argument_list|,
name|out
argument_list|)
decl_stmt|;
name|iWriter
operator|.
name|setPageEvent
argument_list|(
operator|new
name|PdfEventHandler
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|open
argument_list|()
expr_stmt|;
name|boolean
name|atLeastOneRoomReport
init|=
literal|false
decl_stmt|;
for|for
control|(
name|RoomType
name|type
range|:
name|RoomType
operator|.
name|findAll
argument_list|()
control|)
block|{
name|RoomReport
name|roomReport
init|=
name|solver
operator|.
name|getRoomReport
argument_list|(
name|sessionDays
argument_list|,
name|startDayDayOfWeek
argument_list|,
name|type
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|roomReport
operator|==
literal|null
operator|||
name|roomReport
operator|.
name|getGroups
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|PdfWebTable
name|table
init|=
name|getRoomReportTable
argument_list|(
name|request
argument_list|,
name|roomReport
argument_list|,
literal|true
argument_list|,
name|type
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|==
literal|null
condition|)
continue|continue;
name|PdfPTable
name|pdfTable
init|=
name|table
operator|.
name|printPdfTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"solutionReports.roomReport.ord"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|atLeastOneRoomReport
condition|)
block|{
name|doc
operator|.
name|setPageSize
argument_list|(
operator|new
name|Rectangle
argument_list|(
literal|60f
operator|+
name|table
operator|.
name|getWidth
argument_list|()
argument_list|,
literal|60f
operator|+
literal|0.75f
operator|*
name|table
operator|.
name|getWidth
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|newPage
argument_list|()
expr_stmt|;
block|}
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Paragraph
argument_list|(
name|table
operator|.
name|getName
argument_list|()
argument_list|,
name|PdfFont
operator|.
name|getBigFont
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|pdfTable
argument_list|)
expr_stmt|;
name|atLeastOneRoomReport
operator|=
literal|true
expr_stmt|;
block|}
name|RoomReport
name|roomReport
init|=
name|solver
operator|.
name|getRoomReport
argument_list|(
name|sessionDays
argument_list|,
name|startDayDayOfWeek
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|roomReport
operator|!=
literal|null
operator|&&
operator|!
name|roomReport
operator|.
name|getGroups
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|PdfWebTable
name|table
init|=
name|getRoomReportTable
argument_list|(
name|request
argument_list|,
name|roomReport
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|PdfPTable
name|pdfTable
init|=
name|table
operator|.
name|printPdfTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"solutionReports.roomReport.ord"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|atLeastOneRoomReport
condition|)
block|{
name|doc
operator|.
name|setPageSize
argument_list|(
operator|new
name|Rectangle
argument_list|(
literal|60f
operator|+
name|table
operator|.
name|getWidth
argument_list|()
argument_list|,
literal|60f
operator|+
literal|0.75f
operator|*
name|table
operator|.
name|getWidth
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|newPage
argument_list|()
expr_stmt|;
block|}
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Paragraph
argument_list|(
name|table
operator|.
name|getName
argument_list|()
argument_list|,
name|PdfFont
operator|.
name|getBigFont
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|pdfTable
argument_list|)
expr_stmt|;
name|atLeastOneRoomReport
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|atLeastOneRoomReport
condition|)
block|{
name|PdfPTable
name|pdfTable
init|=
operator|new
name|PdfPTable
argument_list|(
operator|new
name|float
index|[]
block|{
literal|10f
block|,
literal|100f
block|}
argument_list|)
decl_stmt|;
name|pdfTable
operator|.
name|setWidthPercentage
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|getDefaultCell
argument_list|()
operator|.
name|setPadding
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|getDefaultCell
argument_list|()
operator|.
name|setBorderWidth
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|setSplitRows
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"Group"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"group size<minimum, maximum)"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"Size"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"actual group size (size of the smallest and the biggest room in the group)"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"NrRooms"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"number of rooms in the group"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"ClUse"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"number of classes that are using a room from the group (actual solution)"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"ClShould"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"number of classes that \"should\" use a room of the group (smallest available room of a class is in this group)"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"ClMust"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"number of classes that must use a room of the group (all available rooms of a class are in this group)"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"HrUse"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"average hours a room of the group is used (actual solution)"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"HrShould"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"average hours a room of the group should be used (smallest available room of a class is in this group)"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"HrMust"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"average hours a room of this group must be used (all available rooms of a class are in this group)"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"*) cumulative numbers (group minimum ... inf) are displayed in parentheses."
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|pdfTable
argument_list|)
expr_stmt|;
block|}
name|DiscouragedInstructorBtbReport
name|discouragedInstructorBtbReportReport
init|=
name|solver
operator|.
name|getDiscouragedInstructorBtbReport
argument_list|()
decl_stmt|;
if|if
condition|(
name|discouragedInstructorBtbReportReport
operator|!=
literal|null
operator|&&
operator|!
name|discouragedInstructorBtbReportReport
operator|.
name|getGroups
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|PdfWebTable
name|table
init|=
name|getDiscouragedInstructorBtbReportReportTable
argument_list|(
name|request
argument_list|,
name|discouragedInstructorBtbReportReport
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|PdfPTable
name|pdfTable
init|=
name|table
operator|.
name|printPdfTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"solutionReports.violInstBtb.ord"
argument_list|)
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setPageSize
argument_list|(
operator|new
name|Rectangle
argument_list|(
literal|60f
operator|+
name|table
operator|.
name|getWidth
argument_list|()
argument_list|,
literal|60f
operator|+
literal|0.75f
operator|*
name|table
operator|.
name|getWidth
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|newPage
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Paragraph
argument_list|(
name|table
operator|.
name|getName
argument_list|()
argument_list|,
name|PdfFont
operator|.
name|getBigFont
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|pdfTable
argument_list|)
expr_stmt|;
block|}
name|ViolatedDistrPreferencesReport
name|violatedDistrPreferencesReport
init|=
name|solver
operator|.
name|getViolatedDistrPreferencesReport
argument_list|()
decl_stmt|;
if|if
condition|(
name|violatedDistrPreferencesReport
operator|!=
literal|null
operator|&&
operator|!
name|violatedDistrPreferencesReport
operator|.
name|getGroups
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|PdfWebTable
name|table
init|=
name|getViolatedDistrPreferencesReportTable
argument_list|(
name|request
argument_list|,
name|violatedDistrPreferencesReport
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|PdfPTable
name|pdfTable
init|=
name|table
operator|.
name|printPdfTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"solutionReports.violDistPrefReport.ord"
argument_list|)
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setPageSize
argument_list|(
operator|new
name|Rectangle
argument_list|(
literal|60f
operator|+
name|table
operator|.
name|getWidth
argument_list|()
argument_list|,
literal|60f
operator|+
literal|0.75f
operator|*
name|table
operator|.
name|getWidth
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|newPage
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Paragraph
argument_list|(
name|table
operator|.
name|getName
argument_list|()
argument_list|,
name|PdfFont
operator|.
name|getBigFont
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|pdfTable
argument_list|)
expr_stmt|;
block|}
name|StudentConflictsReport
name|studentConflictsReport
init|=
name|solver
operator|.
name|getStudentConflictsReport
argument_list|()
decl_stmt|;
if|if
condition|(
name|studentConflictsReport
operator|!=
literal|null
operator|&&
operator|!
name|studentConflictsReport
operator|.
name|getGroups
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|PdfWebTable
name|table
init|=
name|getStudentConflictsReportTable
argument_list|(
name|request
argument_list|,
name|studentConflictsReport
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|PdfPTable
name|pdfTable
init|=
name|table
operator|.
name|printPdfTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"solutionReports.studConf.ord"
argument_list|)
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setPageSize
argument_list|(
operator|new
name|Rectangle
argument_list|(
literal|60f
operator|+
name|table
operator|.
name|getWidth
argument_list|()
argument_list|,
literal|60f
operator|+
literal|0.75f
operator|*
name|table
operator|.
name|getWidth
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|newPage
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Paragraph
argument_list|(
name|table
operator|.
name|getName
argument_list|()
argument_list|,
name|PdfFont
operator|.
name|getBigFont
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|pdfTable
argument_list|)
expr_stmt|;
block|}
name|SameSubpartBalancingReport
name|sameSubpartBalancingReport
init|=
name|solver
operator|.
name|getSameSubpartBalancingReport
argument_list|()
decl_stmt|;
if|if
condition|(
name|sameSubpartBalancingReport
operator|!=
literal|null
operator|&&
operator|!
name|sameSubpartBalancingReport
operator|.
name|getGroups
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|PdfWebTable
name|table
init|=
name|getSameSubpartBalancingReportTable
argument_list|(
name|request
argument_list|,
name|sameSubpartBalancingReport
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|PdfPTable
name|pdfTable
init|=
name|table
operator|.
name|printPdfTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"solutionReports.sectBalancingReport.ord"
argument_list|)
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setPageSize
argument_list|(
operator|new
name|Rectangle
argument_list|(
literal|60f
operator|+
name|table
operator|.
name|getWidth
argument_list|()
argument_list|,
literal|60f
operator|+
literal|0.75f
operator|*
name|table
operator|.
name|getWidth
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|newPage
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Paragraph
argument_list|(
name|table
operator|.
name|getName
argument_list|()
argument_list|,
name|PdfFont
operator|.
name|getBigFont
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|pdfTable
argument_list|)
expr_stmt|;
block|}
name|DeptBalancingReport
name|deptBalancingReport
init|=
name|solver
operator|.
name|getDeptBalancingReport
argument_list|()
decl_stmt|;
if|if
condition|(
name|deptBalancingReport
operator|!=
literal|null
operator|&&
operator|!
name|deptBalancingReport
operator|.
name|getGroups
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|PdfWebTable
name|table
init|=
name|getDeptBalancingReportTable
argument_list|(
name|request
argument_list|,
name|deptBalancingReport
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|PdfPTable
name|pdfTable
init|=
name|table
operator|.
name|printPdfTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"solutionReports.deptBalancingReport.ord"
argument_list|)
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setPageSize
argument_list|(
operator|new
name|Rectangle
argument_list|(
literal|60f
operator|+
name|table
operator|.
name|getWidth
argument_list|()
argument_list|,
literal|60f
operator|+
literal|0.75f
operator|*
name|table
operator|.
name|getWidth
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|newPage
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Paragraph
argument_list|(
name|table
operator|.
name|getName
argument_list|()
argument_list|,
name|PdfFont
operator|.
name|getBigFont
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|pdfTable
argument_list|)
expr_stmt|;
block|}
name|PerturbationReport
name|perturbationReport
init|=
name|solver
operator|.
name|getPerturbationReport
argument_list|()
decl_stmt|;
if|if
condition|(
name|perturbationReport
operator|!=
literal|null
operator|&&
operator|!
name|perturbationReport
operator|.
name|getGroups
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|PdfWebTable
name|table
init|=
name|getPerturbationReportTable
argument_list|(
name|request
argument_list|,
name|perturbationReport
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|PdfPTable
name|pdfTable
init|=
name|table
operator|.
name|printPdfTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"solutionReports.pert.ord"
argument_list|)
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setPageSize
argument_list|(
operator|new
name|Rectangle
argument_list|(
literal|60f
operator|+
name|table
operator|.
name|getWidth
argument_list|()
argument_list|,
literal|60f
operator|+
literal|0.75f
operator|*
name|table
operator|.
name|getWidth
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|newPage
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Paragraph
argument_list|(
name|table
operator|.
name|getName
argument_list|()
argument_list|,
name|PdfFont
operator|.
name|getBigFont
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|pdfTable
argument_list|)
expr_stmt|;
name|pdfTable
operator|=
operator|new
name|PdfPTable
argument_list|(
operator|new
name|float
index|[]
block|{
literal|5f
block|,
literal|100f
block|}
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|setWidthPercentage
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|getDefaultCell
argument_list|()
operator|.
name|setPadding
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|getDefaultCell
argument_list|()
operator|.
name|setBorderWidth
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|setSplitRows
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"Class"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"Class name"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"Time"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"Time (initial -> assigned)"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"Room"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"Room (initial -> assigned)"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"Dist"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"Distance between assignments (if different are used buildings)"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"St"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"Number of affected students"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"StT"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"Number of affected students by time change"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"StR"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"Number of affected students by room change"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"StB"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"Number of affected students by building change"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"Ins"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"Number of affected instructors"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"InsT"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"Number of affected instructors by time change"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"InsR"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"Number of affected instructors by room change"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"InsB"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"Number of affected instructors by building change"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"Rm"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"Number of rooms changed"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"Bld"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"Number of buildings changed"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"Tm"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"Number of times changed"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"Day"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"Number of days changed"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"Hr"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"Number of hours changed"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"TFSt"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"Assigned building too far for instructor (from the initial one)"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"TFIns"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"Assigned building too far for students (from the initial one)"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"DStC"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"Difference in student conflicts"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"NStC"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"Number of new student conflicts"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"DTPr"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"Difference in time preferences"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"DRPr"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"Difference in room preferences"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"DInsB"
argument_list|)
expr_stmt|;
name|pdfTable
operator|.
name|addCell
argument_list|(
literal|"Difference in back-to-back instructor preferences"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|pdfTable
argument_list|)
expr_stmt|;
block|}
name|doc
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showSolutionReport"
argument_list|)
return|;
block|}
specifier|public
name|PdfWebTable
name|getRoomReportTable
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|RoomReport
name|report
parameter_list|,
name|boolean
name|noHtml
parameter_list|,
name|Long
name|type
parameter_list|)
block|{
name|WebTable
operator|.
name|setOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"solutionReports.roomReport.ord"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"room_ord"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|String
name|name
init|=
literal|"Room Allocation - "
operator|+
operator|(
name|type
operator|==
literal|null
condition|?
literal|"Non University Locations"
else|:
name|RoomTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|type
argument_list|)
operator|.
name|getLabel
argument_list|()
operator|)
decl_stmt|;
name|PdfWebTable
name|webTable
init|=
operator|new
name|PdfWebTable
argument_list|(
literal|9
argument_list|,
name|name
argument_list|,
literal|"solutionReport.do?room_ord=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Group"
block|,
literal|"Size"
block|,
literal|"NrRooms*"
block|,
literal|"ClUse"
block|,
literal|"ClShould"
block|,
literal|"ClMust*"
block|,
literal|"HrUse"
block|,
literal|"HrShould"
block|,
literal|"HrMust*"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"center"
block|,
literal|"center"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|webTable
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap"
argument_list|)
expr_stmt|;
name|int
name|nrLines
init|=
literal|0
decl_stmt|;
try|try
block|{
name|int
name|nrAllRooms
init|=
literal|0
decl_stmt|,
name|nrAllLectureUse
init|=
literal|0
decl_stmt|,
name|nrAllLectureShouldUse
init|=
literal|0
decl_stmt|;
name|double
name|allSlotsUse
init|=
literal|0.0
decl_stmt|,
name|allSlotsShouldUse
init|=
literal|0.0
decl_stmt|;
name|TreeSet
name|groups
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|Comparator
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
name|RoomReport
operator|.
name|RoomAllocationGroup
name|g1
init|=
operator|(
name|RoomReport
operator|.
name|RoomAllocationGroup
operator|)
name|o1
decl_stmt|;
name|RoomReport
operator|.
name|RoomAllocationGroup
name|g2
init|=
operator|(
name|RoomReport
operator|.
name|RoomAllocationGroup
operator|)
name|o2
decl_stmt|;
return|return
operator|-
name|Double
operator|.
name|compare
argument_list|(
name|g1
operator|.
name|getMinRoomSize
argument_list|()
argument_list|,
name|g2
operator|.
name|getMinRoomSize
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|groups
operator|.
name|addAll
argument_list|(
name|report
operator|.
name|getGroups
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|groups
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomReport
operator|.
name|RoomAllocationGroup
name|g
init|=
operator|(
name|RoomReport
operator|.
name|RoomAllocationGroup
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|g
operator|.
name|getNrRooms
argument_list|()
operator|==
literal|0
condition|)
continue|continue;
name|double
name|factor
init|=
operator|(
operator|(
name|double
operator|)
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|)
operator|/
literal|60.0
decl_stmt|;
name|nrAllRooms
operator|+=
name|g
operator|.
name|getNrRooms
argument_list|()
expr_stmt|;
name|allSlotsUse
operator|+=
name|g
operator|.
name|getSlotsUse
argument_list|()
expr_stmt|;
name|allSlotsShouldUse
operator|+=
name|g
operator|.
name|getSlotsShouldUse
argument_list|()
expr_stmt|;
name|nrAllLectureUse
operator|+=
name|g
operator|.
name|getLecturesUse
argument_list|()
expr_stmt|;
name|nrAllLectureShouldUse
operator|+=
name|g
operator|.
name|getLecturesShouldUse
argument_list|()
expr_stmt|;
name|nrLines
operator|++
expr_stmt|;
name|webTable
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|g
operator|.
name|getMinRoomSize
argument_list|()
operator|+
literal|" ... "
operator|+
operator|(
name|g
operator|.
name|getMaxRoomSize
argument_list|()
operator|==
name|Integer
operator|.
name|MAX_VALUE
condition|?
operator|(
name|noHtml
condition|?
literal|"inf"
else|:
literal|"<i>inf</i>"
operator|)
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|g
operator|.
name|getMaxRoomSize
argument_list|()
argument_list|)
operator|)
block|,
name|g
operator|.
name|getActualMinRoomSize
argument_list|()
operator|+
literal|" ... "
operator|+
name|g
operator|.
name|getActualMaxRoomSize
argument_list|()
block|,
name|g
operator|.
name|getNrRooms
argument_list|()
operator|+
literal|" ("
operator|+
name|g
operator|.
name|getNrRoomsThisSizeOrBigger
argument_list|()
operator|+
literal|")"
block|,
comment|//""+g.getLecturesCanUse(),
literal|""
operator|+
name|g
operator|.
name|getLecturesUse
argument_list|()
operator|+
literal|" ("
operator|+
name|nrAllLectureUse
operator|+
literal|")"
block|,
literal|""
operator|+
name|g
operator|.
name|getLecturesShouldUse
argument_list|()
operator|+
literal|" ("
operator|+
name|nrAllLectureShouldUse
operator|+
literal|")"
block|,
name|g
operator|.
name|getLecturesMustUse
argument_list|()
operator|+
literal|" ("
operator|+
name|g
operator|.
name|getLecturesMustUseThisSizeOrBigger
argument_list|()
operator|+
literal|")"
block|,
comment|//sDoubleFormat.format(factor*g.getSlotsCanUse()/g.getNrRooms()),
name|sDoubleFormat
operator|.
name|format
argument_list|(
name|factor
operator|*
name|g
operator|.
name|getSlotsUse
argument_list|()
operator|/
name|g
operator|.
name|getNrRooms
argument_list|()
argument_list|)
operator|+
literal|" ("
operator|+
name|sDoubleFormat
operator|.
name|format
argument_list|(
name|factor
operator|*
name|allSlotsUse
operator|/
name|nrAllRooms
argument_list|)
operator|+
literal|")"
block|,
name|sDoubleFormat
operator|.
name|format
argument_list|(
name|factor
operator|*
name|g
operator|.
name|getSlotsShouldUse
argument_list|()
operator|/
name|g
operator|.
name|getNrRooms
argument_list|()
argument_list|)
operator|+
literal|" ("
operator|+
name|sDoubleFormat
operator|.
name|format
argument_list|(
name|factor
operator|*
name|allSlotsShouldUse
operator|/
name|nrAllRooms
argument_list|)
operator|+
literal|")"
block|,
name|sDoubleFormat
operator|.
name|format
argument_list|(
name|factor
operator|*
name|g
operator|.
name|getSlotsMustUse
argument_list|()
operator|/
name|g
operator|.
name|getNrRooms
argument_list|()
argument_list|)
operator|+
literal|" ("
operator|+
name|sDoubleFormat
operator|.
name|format
argument_list|(
name|factor
operator|*
name|g
operator|.
name|getSlotsMustUseThisSizeOrBigger
argument_list|()
operator|/
name|g
operator|.
name|getNrRoomsThisSizeOrBigger
argument_list|()
argument_list|)
operator|+
literal|")"
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|Integer
argument_list|(
name|g
operator|.
name|getMinRoomSize
argument_list|()
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|g
operator|.
name|getActualMinRoomSize
argument_list|()
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|g
operator|.
name|getNrRooms
argument_list|()
argument_list|)
block|,
comment|//new Integer(g.getLecturesCanUse()),
operator|new
name|Integer
argument_list|(
name|g
operator|.
name|getLecturesUse
argument_list|()
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|g
operator|.
name|getLecturesShouldUse
argument_list|()
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|g
operator|.
name|getLecturesMustUse
argument_list|()
argument_list|)
block|,
comment|//new Double(factor*g.getSlotsCanUse()/g.getNrRooms()),
operator|new
name|Double
argument_list|(
name|factor
operator|*
name|g
operator|.
name|getSlotsUse
argument_list|()
operator|/
name|g
operator|.
name|getNrRooms
argument_list|()
argument_list|)
block|,
operator|new
name|Double
argument_list|(
name|factor
operator|*
name|g
operator|.
name|getSlotsShouldUse
argument_list|()
operator|/
name|g
operator|.
name|getNrRooms
argument_list|()
argument_list|)
block|,
operator|new
name|Double
argument_list|(
name|factor
operator|*
name|g
operator|.
name|getSlotsMustUse
argument_list|()
operator|/
name|g
operator|.
name|getNrRooms
argument_list|()
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|webTable
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"<font color='red'>ERROR:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"</font>"
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|nrLines
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|nrLines
operator|==
literal|0
condition|)
return|return
literal|null
return|;
return|return
name|webTable
return|;
block|}
specifier|public
name|PdfWebTable
name|getDeptBalancingReportTable
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|DeptBalancingReport
name|deptBalancingReport
parameter_list|,
name|boolean
name|noHtml
parameter_list|)
block|{
name|WebTable
operator|.
name|setOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"solutionReports.deptBalancingReport.ord"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"dept_ord"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|String
index|[]
name|header
init|=
operator|new
name|String
index|[
literal|2
operator|+
name|Constants
operator|.
name|SLOTS_PER_DAY_NO_EVENINGS
operator|/
literal|6
index|]
decl_stmt|;
name|String
index|[]
name|pos
init|=
operator|new
name|String
index|[
literal|2
operator|+
name|Constants
operator|.
name|SLOTS_PER_DAY_NO_EVENINGS
operator|/
literal|6
index|]
decl_stmt|;
name|header
index|[
literal|0
index|]
operator|=
literal|"Department"
expr_stmt|;
name|pos
index|[
literal|0
index|]
operator|=
literal|"left"
expr_stmt|;
name|header
index|[
literal|1
index|]
operator|=
literal|"Penalty"
expr_stmt|;
name|pos
index|[
literal|1
index|]
operator|=
literal|"center"
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|SLOTS_PER_DAY_NO_EVENINGS
operator|/
literal|6
condition|;
name|i
operator|++
control|)
block|{
name|header
index|[
name|i
operator|+
literal|2
index|]
operator|=
name|Constants
operator|.
name|slot2str
argument_list|(
name|Constants
operator|.
name|DAY_SLOTS_FIRST
operator|+
name|i
operator|*
literal|6
argument_list|)
expr_stmt|;
name|pos
index|[
name|i
operator|+
literal|2
index|]
operator|=
literal|"center"
expr_stmt|;
block|}
name|PdfWebTable
name|webTable
init|=
operator|new
name|PdfWebTable
argument_list|(
name|header
operator|.
name|length
argument_list|,
literal|"Departmental Balancing"
argument_list|,
literal|"solutionReport.do?dept_ord=%%"
argument_list|,
name|header
argument_list|,
name|pos
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|webTable
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap"
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|deptBalancingReport
operator|.
name|getGroups
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DeptBalancingReport
operator|.
name|DeptBalancingGroup
name|g
init|=
operator|(
name|DeptBalancingReport
operator|.
name|DeptBalancingGroup
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
index|[]
name|line
init|=
operator|new
name|String
index|[
literal|2
operator|+
name|Constants
operator|.
name|SLOTS_PER_DAY_NO_EVENINGS
operator|/
literal|6
index|]
decl_stmt|;
name|Comparable
index|[]
name|cmp
init|=
operator|new
name|Comparable
index|[
literal|2
operator|+
name|Constants
operator|.
name|SLOTS_PER_DAY_NO_EVENINGS
operator|/
literal|6
index|]
decl_stmt|;
name|line
index|[
literal|0
index|]
operator|=
name|g
operator|.
name|getDepartmentName
argument_list|()
expr_stmt|;
name|cmp
index|[
literal|0
index|]
operator|=
name|g
operator|.
name|getDepartmentName
argument_list|()
expr_stmt|;
name|int
name|penalty
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|SLOTS_PER_DAY_NO_EVENINGS
operator|/
literal|6
condition|;
name|i
operator|++
control|)
block|{
name|int
name|slot
init|=
name|Constants
operator|.
name|DAY_SLOTS_FIRST
operator|+
name|i
operator|*
literal|6
decl_stmt|;
name|int
name|usage
init|=
name|g
operator|.
name|getUsage
argument_list|(
name|slot
argument_list|)
decl_stmt|;
name|int
name|limit
init|=
name|g
operator|.
name|getLimit
argument_list|(
name|slot
argument_list|)
decl_stmt|;
if|if
condition|(
name|usage
operator|>
name|limit
condition|)
name|penalty
operator|+=
name|g
operator|.
name|getExcess
argument_list|(
name|slot
argument_list|)
expr_stmt|;
name|Vector
name|classes
init|=
operator|new
name|Vector
argument_list|(
name|g
operator|.
name|getClasses
argument_list|(
name|slot
argument_list|)
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|classes
argument_list|)
expr_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|StringBuffer
name|toolTip
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|int
name|u
init|=
literal|0
decl_stmt|;
name|boolean
name|over
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|classes
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ClassAssignmentDetails
name|ca
init|=
operator|(
name|ClassAssignmentDetails
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|int
name|nrMeetings
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|Constants
operator|.
name|NR_DAYS_WEEK
condition|;
name|j
operator|++
control|)
if|if
condition|(
operator|(
name|Constants
operator|.
name|DAY_CODES
index|[
name|j
index|]
operator|&
name|ca
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|nrMeetings
operator|++
expr_stmt|;
name|u
operator|+=
name|nrMeetings
expr_stmt|;
if|if
condition|(
name|u
operator|>
name|limit
operator|&&
operator|!
name|over
condition|)
block|{
name|over
operator|=
literal|true
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<hr>"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|noHtml
condition|?
name|ca
operator|.
name|getClazz
argument_list|()
operator|.
name|getName
argument_list|()
else|:
name|ca
operator|.
name|getClazz
argument_list|()
operator|.
name|toHtml
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|//+" ("+nrMeetings+"x"+ca.getTime().getMin()+")");
if|if
condition|(
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|)
name|sb
operator|.
name|append
argument_list|(
name|noHtml
condition|?
literal|"\n"
else|:
literal|"<br>"
argument_list|)
expr_stmt|;
name|toolTip
operator|.
name|append
argument_list|(
name|ca
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|)
name|toolTip
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|noHtml
condition|)
block|{
name|line
index|[
name|i
operator|+
literal|2
index|]
operator|=
name|usage
operator|+
literal|" / "
operator|+
name|limit
expr_stmt|;
name|line
index|[
name|i
operator|+
literal|2
index|]
operator|+=
operator|(
name|classes
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"\n"
operator|+
name|sb
operator|.
name|toString
argument_list|()
operator|)
expr_stmt|;
block|}
else|else
block|{
name|line
index|[
name|i
operator|+
literal|2
index|]
operator|=
literal|"<a title='"
operator|+
name|toolTip
operator|+
literal|"'>"
operator|+
operator|(
name|limit
operator|==
literal|0
condition|?
literal|""
else|:
operator|(
name|usage
operator|>
name|limit
condition|?
literal|"<font color='red'>"
else|:
literal|""
operator|)
operator|+
name|usage
operator|+
literal|" / "
operator|+
name|limit
operator|+
operator|(
name|usage
operator|>
name|limit
condition|?
literal|"</font>"
else|:
literal|""
operator|)
operator|)
operator|+
literal|"</a>"
expr_stmt|;
name|line
index|[
name|i
operator|+
literal|2
index|]
operator|+=
operator|(
name|classes
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"<br>"
operator|+
name|sb
operator|.
name|toString
argument_list|()
operator|)
expr_stmt|;
block|}
name|cmp
index|[
name|i
operator|+
literal|2
index|]
operator|=
operator|new
name|Integer
argument_list|(
name|usage
operator|*
literal|1000
operator|+
name|limit
argument_list|)
expr_stmt|;
block|}
name|line
index|[
literal|1
index|]
operator|=
operator|(
name|noHtml
condition|?
literal|""
operator|+
name|penalty
else|:
operator|(
name|penalty
operator|==
literal|0
condition|?
literal|""
else|:
literal|"<font color='red'>+"
operator|+
name|penalty
operator|+
literal|"</font>"
operator|)
operator|)
expr_stmt|;
name|cmp
index|[
literal|1
index|]
operator|=
operator|new
name|Integer
argument_list|(
name|penalty
argument_list|)
expr_stmt|;
name|webTable
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
name|line
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|webTable
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"<font color='red'>ERROR:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"</font>"
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|webTable
return|;
block|}
specifier|public
name|PdfWebTable
name|getViolatedDistrPreferencesReportTable
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|ViolatedDistrPreferencesReport
name|report
parameter_list|,
name|boolean
name|noHtml
parameter_list|)
block|{
name|WebTable
operator|.
name|setOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"solutionReports.violDistPrefReport.ord"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"vdist_ord"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|PdfWebTable
name|webTable
init|=
operator|new
name|PdfWebTable
argument_list|(
literal|5
argument_list|,
literal|"Violated Distribution Preferences"
argument_list|,
literal|"solutionReport.do?vdist_ord=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Type"
block|,
literal|"Preference"
block|,
literal|"Class"
block|,
literal|"Time"
block|,
literal|"Room"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|webTable
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap"
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|report
operator|.
name|getGroups
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ViolatedDistrPreferencesReport
operator|.
name|ViolatedDistrPreference
name|g
init|=
operator|(
name|ViolatedDistrPreferencesReport
operator|.
name|ViolatedDistrPreference
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|StringBuffer
name|cSB
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|MultiComparable
name|ord
init|=
operator|new
name|MultiComparable
argument_list|()
decl_stmt|;
name|StringBuffer
name|tSB
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|StringBuffer
name|rSB
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|g
operator|.
name|getClasses
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ClassAssignmentDetails
name|ca
init|=
operator|(
name|ClassAssignmentDetails
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|noHtml
condition|)
block|{
name|cSB
operator|.
name|append
argument_list|(
name|ca
operator|.
name|getClazz
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tSB
operator|.
name|append
argument_list|(
name|ca
operator|.
name|getTime
argument_list|()
operator|.
name|getDaysName
argument_list|()
operator|+
literal|" "
operator|+
name|ca
operator|.
name|getTime
argument_list|()
operator|.
name|getStartTime
argument_list|()
operator|+
literal|" - "
operator|+
name|ca
operator|.
name|getTime
argument_list|()
operator|.
name|getEndTime
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|ca
operator|.
name|getRoom
argument_list|()
operator|.
name|length
condition|;
name|j
operator|++
control|)
name|rSB
operator|.
name|append
argument_list|(
operator|(
name|j
operator|>
literal|0
condition|?
literal|", "
else|:
literal|""
operator|)
operator|+
name|ca
operator|.
name|getRoom
argument_list|()
index|[
name|j
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cSB
operator|.
name|append
argument_list|(
name|ca
operator|.
name|getClazz
argument_list|()
operator|.
name|toHtml
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|tSB
operator|.
name|append
argument_list|(
name|ca
operator|.
name|getTime
argument_list|()
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|ca
operator|.
name|getRoom
argument_list|()
operator|.
name|length
condition|;
name|j
operator|++
control|)
name|rSB
operator|.
name|append
argument_list|(
operator|(
name|j
operator|>
literal|0
condition|?
literal|", "
else|:
literal|""
operator|)
operator|+
name|ca
operator|.
name|getRoom
argument_list|()
index|[
name|j
index|]
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ord
operator|.
name|add
argument_list|(
name|ca
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
if|if
condition|(
name|noHtml
condition|)
block|{
name|cSB
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|tSB
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|rSB
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cSB
operator|.
name|append
argument_list|(
literal|"<BR>"
argument_list|)
expr_stmt|;
name|tSB
operator|.
name|append
argument_list|(
literal|"<BR>"
argument_list|)
expr_stmt|;
name|rSB
operator|.
name|append
argument_list|(
literal|"<BR>"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|webTable
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|g
operator|.
name|getName
argument_list|()
block|,
operator|(
name|noHtml
condition|?
literal|""
else|:
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
name|g
operator|.
name|getPreference
argument_list|()
argument_list|)
operator|+
literal|"'>"
operator|)
operator|+
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|int2prolog
argument_list|(
name|g
operator|.
name|getPreference
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getPrefName
argument_list|()
operator|+
operator|(
name|noHtml
condition|?
literal|""
else|:
literal|"</font>"
operator|)
block|,
name|cSB
operator|.
name|toString
argument_list|()
block|,
name|tSB
operator|.
name|toString
argument_list|()
block|,
name|rSB
operator|.
name|toString
argument_list|()
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|g
operator|.
name|getName
argument_list|()
block|,
operator|new
name|Integer
argument_list|(
name|g
operator|.
name|getPreference
argument_list|()
argument_list|)
block|,
name|ord
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|webTable
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"<font color='red'>ERROR:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"</font>"
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|webTable
return|;
block|}
specifier|public
name|PdfWebTable
name|getDiscouragedInstructorBtbReportReportTable
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|DiscouragedInstructorBtbReport
name|report
parameter_list|,
name|boolean
name|noHtml
parameter_list|)
block|{
name|WebTable
operator|.
name|setOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"solutionReports.violInstBtb.ord"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"vinbtb_ord"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|PdfWebTable
name|webTable
init|=
operator|new
name|PdfWebTable
argument_list|(
literal|7
argument_list|,
literal|"Instructor Back-to-Back Preferences"
argument_list|,
literal|"solutionReport.do?vinbtb_ord=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Instructor"
block|,
literal|"Preference"
block|,
literal|"Distance"
block|,
literal|"Class"
block|,
literal|"Time"
block|,
literal|"Date"
block|,
literal|"Room"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|webTable
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap"
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|report
operator|.
name|getGroups
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DiscouragedInstructorBtbReport
operator|.
name|DiscouragedBtb
name|g
init|=
operator|(
name|DiscouragedInstructorBtbReport
operator|.
name|DiscouragedBtb
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|StringBuffer
name|rSB
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getRoom
argument_list|()
operator|.
name|length
condition|;
name|j
operator|++
control|)
name|rSB
operator|.
name|append
argument_list|(
operator|(
name|j
operator|>
literal|0
condition|?
literal|", "
else|:
literal|""
operator|)
operator|+
operator|(
name|noHtml
condition|?
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getRoom
argument_list|()
index|[
name|j
index|]
operator|.
name|getName
argument_list|()
else|:
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getRoom
argument_list|()
index|[
name|j
index|]
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|rSB
operator|.
name|append
argument_list|(
name|noHtml
condition|?
literal|"\n"
else|:
literal|"<BR>"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getRoom
argument_list|()
operator|.
name|length
condition|;
name|j
operator|++
control|)
name|rSB
operator|.
name|append
argument_list|(
operator|(
name|j
operator|>
literal|0
condition|?
literal|", "
else|:
literal|""
operator|)
operator|+
operator|(
name|noHtml
condition|?
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getRoom
argument_list|()
index|[
name|j
index|]
operator|.
name|getName
argument_list|()
else|:
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getRoom
argument_list|()
index|[
name|j
index|]
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|webTable
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|g
operator|.
name|getInstructorName
argument_list|()
block|,
operator|(
name|noHtml
condition|?
literal|""
else|:
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|g
operator|.
name|getPreference
argument_list|()
argument_list|)
operator|+
literal|"'>"
operator|)
operator|+
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|g
operator|.
name|getPreference
argument_list|()
argument_list|)
operator|.
name|getPrefName
argument_list|()
operator|+
operator|(
name|noHtml
condition|?
literal|""
else|:
literal|"</font>"
operator|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|Math
operator|.
name|round
argument_list|(
name|g
operator|.
name|getDistance
argument_list|()
argument_list|)
argument_list|)
operator|+
literal|"m"
block|,
operator|(
name|noHtml
condition|?
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getClazz
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"\n"
operator|+
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getClazz
argument_list|()
operator|.
name|getName
argument_list|()
else|:
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getClazz
argument_list|()
operator|.
name|toHtml
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
operator|+
literal|"<BR>"
operator|+
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getClazz
argument_list|()
operator|.
name|toHtml
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
operator|)
block|,
operator|(
name|noHtml
condition|?
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|getName
argument_list|(
literal|true
argument_list|)
operator|+
literal|"\n"
operator|+
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|getName
argument_list|(
literal|true
argument_list|)
else|:
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
operator|+
literal|"<BR>"
operator|+
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
operator|)
block|,
operator|(
name|noHtml
condition|?
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
operator|+
literal|"\n"
operator|+
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
else|:
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|toDatesHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
operator|+
literal|"<BR>"
operator|+
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|toDatesHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
operator|)
block|,
name|rSB
operator|.
name|toString
argument_list|()
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|g
operator|.
name|getInstructorName
argument_list|()
block|,
name|g
operator|.
name|getPreference
argument_list|()
block|,
operator|new
name|Double
argument_list|(
name|g
operator|.
name|getDistance
argument_list|()
argument_list|)
block|,
operator|new
name|DuoComparable
argument_list|(
name|g
operator|.
name|getFirst
argument_list|()
argument_list|,
name|g
operator|.
name|getSecond
argument_list|()
argument_list|)
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|webTable
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"<font color='red'>ERROR:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"</font>"
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|webTable
return|;
block|}
specifier|public
name|PdfWebTable
name|getStudentConflictsReportTable
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|StudentConflictsReport
name|report
parameter_list|,
name|boolean
name|noHtml
parameter_list|)
block|{
name|WebTable
operator|.
name|setOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"solutionReports.studConf.ord"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"studconf_ord"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|boolean
name|hasImportant
init|=
literal|false
decl_stmt|;
for|for
control|(
name|JenrlInfo
name|g
range|:
operator|(
name|Set
argument_list|<
name|JenrlInfo
argument_list|>
operator|)
name|report
operator|.
name|getGroups
argument_list|()
control|)
block|{
if|if
condition|(
name|g
operator|.
name|isImportant
argument_list|()
condition|)
block|{
name|hasImportant
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|PdfWebTable
name|webTable
init|=
operator|new
name|PdfWebTable
argument_list|(
literal|10
argument_list|,
literal|"Student Conflicts"
argument_list|,
literal|"solutionReport.do?studconf_ord=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"NrConflicts"
block|,
literal|"Class"
block|,
literal|"Date"
block|,
literal|"Time"
block|,
literal|"Room"
block|,
literal|"Hard"
block|,
literal|"Distance"
block|,
literal|"Fixed"
block|,
literal|"Commited"
block|,
literal|"Curriculum"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasImportant
condition|)
block|{
name|webTable
operator|=
operator|new
name|PdfWebTable
argument_list|(
literal|11
argument_list|,
literal|"Student Conflicts"
argument_list|,
literal|"solutionReport.do?studconf_ord=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"NrConflicts"
block|,
literal|"Class"
block|,
literal|"Date"
block|,
literal|"Time"
block|,
literal|"Room"
block|,
literal|"Hard"
block|,
literal|"Distance"
block|,
literal|"Fixed"
block|,
literal|"Commited"
block|,
literal|"Important"
block|,
literal|"Curriculum"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|webTable
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap"
argument_list|)
expr_stmt|;
try|try
block|{
name|int
name|total
index|[]
init|=
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|report
operator|.
name|getGroups
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JenrlInfo
name|g
init|=
operator|(
name|JenrlInfo
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|Math
operator|.
name|round
argument_list|(
name|g
operator|.
name|getJenrl
argument_list|()
argument_list|)
operator|<=
literal|0
condition|)
continue|continue;
name|StringBuffer
name|rSB
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getRoom
argument_list|()
operator|.
name|length
condition|;
name|j
operator|++
control|)
name|rSB
operator|.
name|append
argument_list|(
operator|(
name|j
operator|>
literal|0
condition|?
literal|", "
else|:
literal|""
operator|)
operator|+
operator|(
name|noHtml
condition|?
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getRoom
argument_list|()
index|[
name|j
index|]
operator|.
name|getName
argument_list|()
else|:
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getRoom
argument_list|()
index|[
name|j
index|]
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|rSB
operator|.
name|append
argument_list|(
name|noHtml
condition|?
literal|"\n"
else|:
literal|"<BR>"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getRoom
argument_list|()
operator|.
name|length
condition|;
name|j
operator|++
control|)
name|rSB
operator|.
name|append
argument_list|(
operator|(
name|j
operator|>
literal|0
condition|?
literal|", "
else|:
literal|""
operator|)
operator|+
operator|(
name|noHtml
condition|?
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getRoom
argument_list|()
index|[
name|j
index|]
operator|.
name|getName
argument_list|()
else|:
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getRoom
argument_list|()
index|[
name|j
index|]
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasImportant
condition|)
block|{
name|webTable
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|valueOf
argument_list|(
name|Math
operator|.
name|round
argument_list|(
name|g
operator|.
name|getJenrl
argument_list|()
argument_list|)
argument_list|)
block|,
operator|(
name|noHtml
condition|?
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getClazz
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"\n"
operator|+
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getClazz
argument_list|()
operator|.
name|getName
argument_list|()
else|:
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getClazz
argument_list|()
operator|.
name|toHtml
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
operator|+
literal|"<BR>"
operator|+
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getClazz
argument_list|()
operator|.
name|toHtml
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
operator|)
block|,
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getDaysName
argument_list|()
operator|+
operator|(
name|noHtml
condition|?
literal|"\n"
else|:
literal|"<BR>"
operator|)
operator|+
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getDaysName
argument_list|()
block|,
operator|(
name|noHtml
condition|?
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|getName
argument_list|(
literal|true
argument_list|)
operator|+
literal|"\n"
operator|+
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|getName
argument_list|(
literal|true
argument_list|)
else|:
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
operator|+
literal|"<BR>"
operator|+
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
operator|)
block|,
name|rSB
operator|.
name|toString
argument_list|()
block|,
operator|(
name|noHtml
condition|?
operator|(
name|g
operator|.
name|isHard
argument_list|()
condition|?
literal|"true"
else|:
literal|""
operator|)
else|:
name|g
operator|.
name|isHard
argument_list|()
condition|?
literal|"<img src='images/checkmark.gif' border='0'/>"
else|:
literal|""
operator|)
block|,
operator|(
name|g
operator|.
name|isDistance
argument_list|()
condition|?
name|String
operator|.
name|valueOf
argument_list|(
name|Math
operator|.
name|round
argument_list|(
name|g
operator|.
name|getDistance
argument_list|()
argument_list|)
argument_list|)
operator|+
literal|"m"
else|:
literal|""
operator|)
block|,
operator|(
name|noHtml
condition|?
operator|(
name|g
operator|.
name|isFixed
argument_list|()
condition|?
literal|"true"
else|:
literal|""
operator|)
else|:
name|g
operator|.
name|isFixed
argument_list|()
condition|?
literal|"<img src='images/checkmark.gif' border='0'/>"
else|:
literal|""
operator|)
block|,
operator|(
name|noHtml
condition|?
operator|(
name|g
operator|.
name|isCommited
argument_list|()
condition|?
literal|"true"
else|:
literal|""
operator|)
else|:
name|g
operator|.
name|isCommited
argument_list|()
condition|?
literal|"<img src='images/checkmark.gif' border='0'/>"
else|:
literal|""
operator|)
block|,
operator|(
name|noHtml
condition|?
operator|(
name|g
operator|.
name|isImportant
argument_list|()
condition|?
literal|"true"
else|:
literal|""
operator|)
else|:
name|g
operator|.
name|isImportant
argument_list|()
condition|?
literal|"<img src='images/checkmark.gif' border='0'/>"
else|:
literal|""
operator|)
block|,
name|g
operator|.
name|getCurriculumText
argument_list|()
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|Double
argument_list|(
name|g
operator|.
name|getJenrl
argument_list|()
argument_list|)
block|,
operator|new
name|DuoComparable
argument_list|(
name|g
operator|.
name|getFirst
argument_list|()
argument_list|,
name|g
operator|.
name|getSecond
argument_list|()
argument_list|)
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
operator|new
name|Integer
argument_list|(
name|g
operator|.
name|isHard
argument_list|()
condition|?
literal|1
else|:
literal|0
argument_list|)
block|,
operator|new
name|Double
argument_list|(
name|g
operator|.
name|getDistance
argument_list|()
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|g
operator|.
name|isFixed
argument_list|()
condition|?
literal|1
else|:
literal|0
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|g
operator|.
name|isCommited
argument_list|()
condition|?
literal|1
else|:
literal|0
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|g
operator|.
name|isImportant
argument_list|()
condition|?
literal|1
else|:
literal|0
argument_list|)
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|webTable
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|valueOf
argument_list|(
name|Math
operator|.
name|round
argument_list|(
name|g
operator|.
name|getJenrl
argument_list|()
argument_list|)
argument_list|)
block|,
operator|(
name|noHtml
condition|?
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getClazz
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"\n"
operator|+
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getClazz
argument_list|()
operator|.
name|getName
argument_list|()
else|:
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getClazz
argument_list|()
operator|.
name|toHtml
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
operator|+
literal|"<BR>"
operator|+
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getClazz
argument_list|()
operator|.
name|toHtml
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
operator|)
block|,
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getDaysName
argument_list|()
operator|+
operator|(
name|noHtml
condition|?
literal|"\n"
else|:
literal|"<BR>"
operator|)
operator|+
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getDaysName
argument_list|()
block|,
operator|(
name|noHtml
condition|?
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|getName
argument_list|(
literal|true
argument_list|)
operator|+
literal|"\n"
operator|+
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|getName
argument_list|(
literal|true
argument_list|)
else|:
name|g
operator|.
name|getFirst
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
operator|+
literal|"<BR>"
operator|+
name|g
operator|.
name|getSecond
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
operator|)
block|,
name|rSB
operator|.
name|toString
argument_list|()
block|,
operator|(
name|noHtml
condition|?
operator|(
name|g
operator|.
name|isHard
argument_list|()
condition|?
literal|"true"
else|:
literal|""
operator|)
else|:
name|g
operator|.
name|isHard
argument_list|()
condition|?
literal|"<img src='images/checkmark.gif' border='0'/>"
else|:
literal|""
operator|)
block|,
operator|(
name|g
operator|.
name|isDistance
argument_list|()
condition|?
name|String
operator|.
name|valueOf
argument_list|(
name|Math
operator|.
name|round
argument_list|(
name|g
operator|.
name|getDistance
argument_list|()
argument_list|)
argument_list|)
operator|+
literal|"m"
else|:
literal|""
operator|)
block|,
operator|(
name|noHtml
condition|?
operator|(
name|g
operator|.
name|isFixed
argument_list|()
condition|?
literal|"true"
else|:
literal|""
operator|)
else|:
name|g
operator|.
name|isFixed
argument_list|()
condition|?
literal|"<img src='images/checkmark.gif' border='0'/>"
else|:
literal|""
operator|)
block|,
operator|(
name|noHtml
condition|?
operator|(
name|g
operator|.
name|isCommited
argument_list|()
condition|?
literal|"true"
else|:
literal|""
operator|)
else|:
name|g
operator|.
name|isCommited
argument_list|()
condition|?
literal|"<img src='images/checkmark.gif' border='0'/>"
else|:
literal|""
operator|)
block|,
name|g
operator|.
name|getCurriculumText
argument_list|()
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|Double
argument_list|(
name|g
operator|.
name|getJenrl
argument_list|()
argument_list|)
block|,
operator|new
name|DuoComparable
argument_list|(
name|g
operator|.
name|getFirst
argument_list|()
argument_list|,
name|g
operator|.
name|getSecond
argument_list|()
argument_list|)
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
operator|new
name|Integer
argument_list|(
name|g
operator|.
name|isHard
argument_list|()
condition|?
literal|1
else|:
literal|0
argument_list|)
block|,
operator|new
name|Double
argument_list|(
name|g
operator|.
name|getDistance
argument_list|()
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|g
operator|.
name|isFixed
argument_list|()
condition|?
literal|1
else|:
literal|0
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|g
operator|.
name|isCommited
argument_list|()
condition|?
literal|1
else|:
literal|0
argument_list|)
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
block|}
name|total
index|[
literal|0
index|]
operator|+=
name|Math
operator|.
name|round
argument_list|(
name|g
operator|.
name|getJenrl
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|g
operator|.
name|isHard
argument_list|()
condition|)
name|total
index|[
literal|1
index|]
operator|+=
name|Math
operator|.
name|round
argument_list|(
name|g
operator|.
name|getJenrl
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|g
operator|.
name|isDistance
argument_list|()
condition|)
name|total
index|[
literal|2
index|]
operator|+=
name|Math
operator|.
name|round
argument_list|(
name|g
operator|.
name|getJenrl
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|g
operator|.
name|isFixed
argument_list|()
condition|)
name|total
index|[
literal|3
index|]
operator|+=
name|Math
operator|.
name|round
argument_list|(
name|g
operator|.
name|getJenrl
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|g
operator|.
name|isCommited
argument_list|()
condition|)
name|total
index|[
literal|4
index|]
operator|+=
name|Math
operator|.
name|round
argument_list|(
name|g
operator|.
name|getJenrl
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|g
operator|.
name|isImportant
argument_list|()
condition|)
name|total
index|[
literal|5
index|]
operator|+=
name|Math
operator|.
name|round
argument_list|(
name|g
operator|.
name|getJenrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasImportant
condition|)
block|{
name|webTable
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|valueOf
argument_list|(
name|total
index|[
literal|0
index|]
argument_list|)
block|,
literal|"<i>Total</i>"
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|total
index|[
literal|1
index|]
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|total
index|[
literal|2
index|]
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|total
index|[
literal|3
index|]
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|total
index|[
literal|4
index|]
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|total
index|[
literal|5
index|]
argument_list|)
block|,
literal|""
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|Double
argument_list|(
name|total
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|DuoComparable
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
operator|new
name|Integer
argument_list|(
name|total
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|Double
argument_list|(
literal|1000.0
operator|*
name|total
index|[
literal|2
index|]
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|total
index|[
literal|3
index|]
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|total
index|[
literal|4
index|]
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|total
index|[
literal|5
index|]
argument_list|)
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|webTable
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|valueOf
argument_list|(
name|total
index|[
literal|0
index|]
argument_list|)
block|,
literal|"<i>Total</i>"
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|total
index|[
literal|1
index|]
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|total
index|[
literal|2
index|]
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|total
index|[
literal|3
index|]
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|total
index|[
literal|4
index|]
argument_list|)
block|,
literal|""
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|Double
argument_list|(
name|total
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|DuoComparable
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
operator|new
name|Integer
argument_list|(
name|total
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|Double
argument_list|(
literal|1000.0
operator|*
name|total
index|[
literal|2
index|]
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|total
index|[
literal|3
index|]
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|total
index|[
literal|4
index|]
argument_list|)
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|webTable
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"<font color='red'>ERROR:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"</font>"
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|webTable
return|;
block|}
specifier|public
name|PdfWebTable
name|getSameSubpartBalancingReportTable
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|SameSubpartBalancingReport
name|report
parameter_list|,
name|boolean
name|noHtml
parameter_list|)
block|{
name|WebTable
operator|.
name|setOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"solutionReports.sectBalancingReport.ord"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"sect_ord"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|String
index|[]
name|header
init|=
operator|new
name|String
index|[
literal|2
operator|+
name|Constants
operator|.
name|SLOTS_PER_DAY_NO_EVENINGS
operator|/
literal|6
index|]
decl_stmt|;
name|String
index|[]
name|pos
init|=
operator|new
name|String
index|[
literal|2
operator|+
name|Constants
operator|.
name|SLOTS_PER_DAY_NO_EVENINGS
operator|/
literal|6
index|]
decl_stmt|;
name|header
index|[
literal|0
index|]
operator|=
literal|"Department"
expr_stmt|;
name|pos
index|[
literal|0
index|]
operator|=
literal|"left"
expr_stmt|;
name|header
index|[
literal|1
index|]
operator|=
literal|"Penalty"
expr_stmt|;
name|pos
index|[
literal|1
index|]
operator|=
literal|"center"
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|SLOTS_PER_DAY_NO_EVENINGS
operator|/
literal|6
condition|;
name|i
operator|++
control|)
block|{
name|header
index|[
name|i
operator|+
literal|2
index|]
operator|=
name|Constants
operator|.
name|slot2str
argument_list|(
name|Constants
operator|.
name|DAY_SLOTS_FIRST
operator|+
name|i
operator|*
literal|6
argument_list|)
expr_stmt|;
name|pos
index|[
name|i
operator|+
literal|2
index|]
operator|=
literal|"center"
expr_stmt|;
block|}
name|PdfWebTable
name|webTable
init|=
operator|new
name|PdfWebTable
argument_list|(
name|header
operator|.
name|length
argument_list|,
literal|"Section Balancing"
argument_list|,
literal|"solutionReport.do?sect_ord=%%"
argument_list|,
name|header
argument_list|,
name|pos
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|webTable
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap"
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|report
operator|.
name|getGroups
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SameSubpartBalancingReport
operator|.
name|SameSubpartBalancingGroup
name|g
init|=
operator|(
name|SameSubpartBalancingReport
operator|.
name|SameSubpartBalancingGroup
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
index|[]
name|line
init|=
operator|new
name|String
index|[
literal|2
operator|+
name|Constants
operator|.
name|SLOTS_PER_DAY_NO_EVENINGS
operator|/
literal|6
index|]
decl_stmt|;
name|Comparable
index|[]
name|cmp
init|=
operator|new
name|Comparable
index|[
literal|2
operator|+
name|Constants
operator|.
name|SLOTS_PER_DAY_NO_EVENINGS
operator|/
literal|6
index|]
decl_stmt|;
name|line
index|[
literal|0
index|]
operator|=
name|g
operator|.
name|getName
argument_list|()
expr_stmt|;
name|cmp
index|[
literal|0
index|]
operator|=
name|g
operator|.
name|getName
argument_list|()
expr_stmt|;
name|int
name|penalty
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|SLOTS_PER_DAY_NO_EVENINGS
operator|/
literal|6
condition|;
name|i
operator|++
control|)
block|{
name|int
name|slot
init|=
name|Constants
operator|.
name|DAY_SLOTS_FIRST
operator|+
name|i
operator|*
literal|6
decl_stmt|;
name|int
name|usage
init|=
name|g
operator|.
name|getUsage
argument_list|(
name|slot
argument_list|)
decl_stmt|;
name|int
name|limit
init|=
name|g
operator|.
name|getLimit
argument_list|(
name|slot
argument_list|)
decl_stmt|;
if|if
condition|(
name|usage
operator|>
name|limit
condition|)
name|penalty
operator|+=
name|g
operator|.
name|getExcess
argument_list|(
name|slot
argument_list|)
expr_stmt|;
name|Vector
name|classes
init|=
operator|new
name|Vector
argument_list|(
name|g
operator|.
name|getClasses
argument_list|(
name|slot
argument_list|)
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|classes
argument_list|)
expr_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|StringBuffer
name|toolTip
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|int
name|u
init|=
literal|0
decl_stmt|;
name|boolean
name|over
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|classes
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ClassAssignmentDetails
name|ca
init|=
operator|(
name|ClassAssignmentDetails
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|int
name|nrMeetings
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|Constants
operator|.
name|NR_DAYS_WEEK
condition|;
name|j
operator|++
control|)
if|if
condition|(
operator|(
name|Constants
operator|.
name|DAY_CODES
index|[
name|j
index|]
operator|&
name|ca
operator|.
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|nrMeetings
operator|++
expr_stmt|;
name|u
operator|+=
name|nrMeetings
expr_stmt|;
if|if
condition|(
name|u
operator|>
name|limit
operator|&&
operator|!
name|over
condition|)
block|{
name|over
operator|=
literal|true
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|noHtml
condition|?
literal|"\n"
else|:
literal|"<hr>"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|noHtml
condition|?
name|ca
operator|.
name|getClazz
argument_list|()
operator|.
name|getName
argument_list|()
else|:
name|ca
operator|.
name|getClazz
argument_list|()
operator|.
name|toHtml
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|//+" ("+nrMeetings+"x"+ca.getTime().getMin()+")");
if|if
condition|(
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|)
name|sb
operator|.
name|append
argument_list|(
name|noHtml
condition|?
literal|"\n"
else|:
literal|"<br>"
argument_list|)
expr_stmt|;
name|toolTip
operator|.
name|append
argument_list|(
name|ca
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|)
name|toolTip
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|noHtml
condition|)
block|{
name|line
index|[
name|i
operator|+
literal|2
index|]
operator|=
name|usage
operator|+
literal|" / "
operator|+
name|limit
expr_stmt|;
name|line
index|[
name|i
operator|+
literal|2
index|]
operator|+=
operator|(
name|classes
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"\n"
operator|+
name|sb
operator|.
name|toString
argument_list|()
operator|)
expr_stmt|;
block|}
else|else
block|{
name|line
index|[
name|i
operator|+
literal|2
index|]
operator|=
literal|"<a title='"
operator|+
name|toolTip
operator|+
literal|"'>"
operator|+
operator|(
name|limit
operator|==
literal|0
condition|?
literal|""
else|:
operator|(
name|usage
operator|>
name|limit
condition|?
literal|"<font color='red'>"
else|:
literal|""
operator|)
operator|+
name|usage
operator|+
literal|" / "
operator|+
name|limit
operator|+
operator|(
name|usage
operator|>
name|limit
condition|?
literal|"</font>"
else|:
literal|""
operator|)
operator|)
operator|+
literal|"</a>"
expr_stmt|;
name|line
index|[
name|i
operator|+
literal|2
index|]
operator|+=
operator|(
name|classes
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"<br>"
operator|+
name|sb
operator|.
name|toString
argument_list|()
operator|)
expr_stmt|;
block|}
name|cmp
index|[
name|i
operator|+
literal|2
index|]
operator|=
operator|new
name|Integer
argument_list|(
name|usage
operator|*
literal|1000
operator|+
name|limit
argument_list|)
expr_stmt|;
block|}
name|line
index|[
literal|1
index|]
operator|=
operator|(
name|noHtml
condition|?
literal|""
operator|+
name|penalty
else|:
operator|(
name|penalty
operator|==
literal|0
condition|?
literal|""
else|:
literal|"<font color='red'>+"
operator|+
name|penalty
operator|+
literal|"</font>"
operator|)
operator|)
expr_stmt|;
name|cmp
index|[
literal|1
index|]
operator|=
operator|new
name|Integer
argument_list|(
name|penalty
argument_list|)
expr_stmt|;
name|webTable
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
name|line
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|webTable
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"<font color='red'>ERROR:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"</font>"
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|webTable
return|;
block|}
specifier|private
name|String
name|disp
parameter_list|(
name|long
name|value
parameter_list|,
name|boolean
name|noHtml
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|0
condition|)
return|return
literal|""
return|;
return|return
operator|(
name|noHtml
condition|?
name|ClassAssignmentDetails
operator|.
name|dispNumberNoHtml
argument_list|(
name|value
argument_list|)
else|:
name|ClassAssignmentDetails
operator|.
name|dispNumber
argument_list|(
name|value
argument_list|)
operator|)
return|;
comment|//return String.valueOf(value);
block|}
specifier|public
name|PdfWebTable
name|getPerturbationReportTable
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|PerturbationReport
name|report
parameter_list|,
name|boolean
name|noHtml
parameter_list|)
block|{
name|WebTable
operator|.
name|setOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"solutionReports.pert.ord"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"pert_ord"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|PdfWebTable
name|webTable
init|=
operator|new
name|PdfWebTable
argument_list|(
literal|24
argument_list|,
literal|"Perturbations"
argument_list|,
literal|"solutionReport.do?pert_ord=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Class"
block|,
literal|"Time"
block|,
literal|"Room"
block|,
literal|"Dist"
block|,
literal|"St"
block|,
literal|"StT"
block|,
literal|"StR"
block|,
literal|"StB"
block|,
literal|"Ins"
block|,
literal|"InsT"
block|,
literal|"InsR"
block|,
literal|"InsB"
block|,
literal|"Rm"
block|,
literal|"Bld"
block|,
literal|"Tm"
block|,
literal|"Day"
block|,
literal|"Hr"
block|,
literal|"TFSt"
block|,
literal|"TFIns"
block|,
literal|"DStC"
block|,
literal|"NStC"
block|,
literal|"DTPr"
block|,
literal|"DRPr"
block|,
literal|"DInsB"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|webTable
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap"
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|report
operator|.
name|getGroups
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|PerturbationReport
operator|.
name|PerturbationGroup
name|g
init|=
operator|(
name|PerturbationReport
operator|.
name|PerturbationGroup
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|webTable
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
operator|(
name|noHtml
condition|?
name|g
operator|.
name|getClazz
argument_list|()
operator|.
name|getClazz
argument_list|()
operator|.
name|getName
argument_list|()
else|:
name|g
operator|.
name|getClazz
argument_list|()
operator|.
name|getClazz
argument_list|()
operator|.
name|toHtml
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
operator|)
block|,
operator|(
name|noHtml
condition|?
name|g
operator|.
name|getClazz
argument_list|()
operator|.
name|getTimeNoHtml
argument_list|()
else|:
name|g
operator|.
name|getClazz
argument_list|()
operator|.
name|getTimeHtml
argument_list|()
operator|)
block|,
operator|(
name|noHtml
condition|?
name|g
operator|.
name|getClazz
argument_list|()
operator|.
name|getRoomNoHtml
argument_list|()
else|:
name|g
operator|.
name|getClazz
argument_list|()
operator|.
name|getRoomHtml
argument_list|()
operator|)
block|,
operator|(
name|Math
operator|.
name|round
argument_list|(
name|g
operator|.
name|distance
argument_list|)
operator|>
literal|0
condition|?
name|Math
operator|.
name|round
argument_list|(
name|g
operator|.
name|distance
argument_list|)
operator|+
literal|"m"
else|:
literal|""
operator|)
block|,
name|disp
argument_list|(
name|g
operator|.
name|affectedStudents
argument_list|,
name|noHtml
argument_list|)
block|,
name|disp
argument_list|(
name|g
operator|.
name|affectedStudentsByTime
argument_list|,
name|noHtml
argument_list|)
block|,
name|disp
argument_list|(
name|g
operator|.
name|affectedStudentsByRoom
argument_list|,
name|noHtml
argument_list|)
block|,
name|disp
argument_list|(
name|g
operator|.
name|affectedStudentsByBldg
argument_list|,
name|noHtml
argument_list|)
block|,
name|disp
argument_list|(
name|g
operator|.
name|affectedInstructors
argument_list|,
name|noHtml
argument_list|)
block|,
name|disp
argument_list|(
name|g
operator|.
name|affectedInstructorsByTime
argument_list|,
name|noHtml
argument_list|)
block|,
name|disp
argument_list|(
name|g
operator|.
name|affectedInstructorsByRoom
argument_list|,
name|noHtml
argument_list|)
block|,
name|disp
argument_list|(
name|g
operator|.
name|affectedInstructorsByBldg
argument_list|,
name|noHtml
argument_list|)
block|,
name|disp
argument_list|(
name|g
operator|.
name|differentRoom
argument_list|,
name|noHtml
argument_list|)
block|,
name|disp
argument_list|(
name|g
operator|.
name|differentBuilding
argument_list|,
name|noHtml
argument_list|)
block|,
name|disp
argument_list|(
name|g
operator|.
name|differentTime
argument_list|,
name|noHtml
argument_list|)
block|,
name|disp
argument_list|(
name|g
operator|.
name|differentDay
argument_list|,
name|noHtml
argument_list|)
block|,
name|disp
argument_list|(
name|g
operator|.
name|differentHour
argument_list|,
name|noHtml
argument_list|)
block|,
name|disp
argument_list|(
name|g
operator|.
name|tooFarForStudents
argument_list|,
name|noHtml
argument_list|)
block|,
name|disp
argument_list|(
name|g
operator|.
name|tooFarForInstructors
argument_list|,
name|noHtml
argument_list|)
block|,
name|disp
argument_list|(
name|g
operator|.
name|deltaStudentConflicts
argument_list|,
name|noHtml
argument_list|)
block|,
name|disp
argument_list|(
name|g
operator|.
name|newStudentConflicts
argument_list|,
name|noHtml
argument_list|)
block|,
name|disp
argument_list|(
name|Math
operator|.
name|round
argument_list|(
name|g
operator|.
name|deltaTimePreferences
argument_list|)
argument_list|,
name|noHtml
argument_list|)
block|,
name|disp
argument_list|(
name|g
operator|.
name|deltaRoomPreferences
argument_list|,
name|noHtml
argument_list|)
block|,
name|disp
argument_list|(
name|g
operator|.
name|deltaInstructorDistancePreferences
argument_list|,
name|noHtml
argument_list|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|g
operator|.
name|getClazz
argument_list|()
block|,
name|g
operator|.
name|getClazz
argument_list|()
operator|.
name|getTimeName
argument_list|()
block|,
name|g
operator|.
name|getClazz
argument_list|()
operator|.
name|getRoomName
argument_list|()
block|,
operator|new
name|Double
argument_list|(
name|g
operator|.
name|distance
argument_list|)
block|,
operator|new
name|Long
argument_list|(
name|g
operator|.
name|affectedStudents
argument_list|)
block|,
operator|new
name|Long
argument_list|(
name|g
operator|.
name|affectedStudentsByTime
argument_list|)
block|,
operator|new
name|Long
argument_list|(
name|g
operator|.
name|affectedStudentsByRoom
argument_list|)
block|,
operator|new
name|Long
argument_list|(
name|g
operator|.
name|affectedStudentsByBldg
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|g
operator|.
name|affectedInstructors
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|g
operator|.
name|affectedInstructorsByTime
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|g
operator|.
name|affectedInstructorsByRoom
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|g
operator|.
name|affectedInstructorsByBldg
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|g
operator|.
name|differentRoom
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|g
operator|.
name|differentBuilding
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|g
operator|.
name|differentTime
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|g
operator|.
name|differentDay
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|g
operator|.
name|differentHour
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|g
operator|.
name|tooFarForStudents
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|g
operator|.
name|tooFarForInstructors
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|g
operator|.
name|deltaStudentConflicts
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|g
operator|.
name|newStudentConflicts
argument_list|)
block|,
operator|new
name|Double
argument_list|(
name|g
operator|.
name|deltaTimePreferences
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|g
operator|.
name|deltaRoomPreferences
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|g
operator|.
name|deltaInstructorDistancePreferences
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|webTable
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"<font color='red'>ERROR:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"</font>"
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|webTable
return|;
block|}
specifier|public
specifier|static
class|class
name|DuoComparable
implements|implements
name|Comparable
block|{
specifier|private
name|Comparable
name|iA
init|=
literal|null
decl_stmt|,
name|iB
init|=
literal|null
decl_stmt|;
specifier|public
name|DuoComparable
parameter_list|(
name|Comparable
name|a
parameter_list|,
name|Comparable
name|b
parameter_list|)
block|{
name|iA
operator|=
name|a
expr_stmt|;
name|iB
operator|=
name|b
expr_stmt|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|DuoComparable
operator|)
condition|)
return|return
operator|-
literal|1
return|;
name|DuoComparable
name|d
init|=
operator|(
name|DuoComparable
operator|)
name|o
decl_stmt|;
name|int
name|cmp
init|=
name|iA
operator|.
name|compareTo
argument_list|(
name|d
operator|.
name|iA
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|iB
operator|.
name|compareTo
argument_list|(
name|d
operator|.
name|iB
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|MultiComparable
implements|implements
name|Comparable
block|{
specifier|private
name|Vector
name|iX
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
specifier|public
name|MultiComparable
parameter_list|()
block|{
block|}
specifier|public
name|void
name|add
parameter_list|(
name|Comparable
name|x
parameter_list|)
block|{
name|iX
operator|.
name|addElement
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|MultiComparable
operator|)
condition|)
return|return
operator|-
literal|1
return|;
name|MultiComparable
name|m
init|=
operator|(
name|MultiComparable
operator|)
name|o
decl_stmt|;
name|Enumeration
name|e1
init|=
name|iX
operator|.
name|elements
argument_list|()
decl_stmt|;
name|Enumeration
name|e2
init|=
name|m
operator|.
name|iX
operator|.
name|elements
argument_list|()
decl_stmt|;
while|while
condition|(
name|e1
operator|.
name|hasMoreElements
argument_list|()
operator|&&
name|e2
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|int
name|cmp
init|=
operator|(
operator|(
name|Comparable
operator|)
name|e1
operator|.
name|nextElement
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
operator|(
name|Comparable
operator|)
name|e2
operator|.
name|nextElement
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
return|return
name|Double
operator|.
name|compare
argument_list|(
name|e1
operator|.
name|hasMoreElements
argument_list|()
condition|?
literal|1
else|:
literal|0
argument_list|,
name|e2
operator|.
name|hasMoreElements
argument_list|()
condition|?
literal|1
else|:
literal|0
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

