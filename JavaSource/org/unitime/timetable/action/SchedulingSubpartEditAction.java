begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionRedirect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|util
operator|.
name|MessageResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|CommonValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|UserProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|SchedulingSubpartEditForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalSchedulingSubpartEditAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePatternPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|FixedCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ItypeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Preference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|VariableFixedCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|VariableRangeCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DatePatternDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ItypeDescDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SchedulingSubpartDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|LookupTables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|BackTracker
import|;
end_import

begin_comment
comment|/**  * MyEclipse Struts  * Creation date: 07-26-2005  *  * XDoclet definition:  * @struts:action path="/schedulingSubpartEdit" name="schedulingSubpartEditForm" input="/user/schedulingSubpartEdit.jsp" scope="request"  *  * @author Tomas Muller, Zuzana Mullerova, Stephanie Schluttenhofer  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"/schedulingSubpartEdit"
argument_list|)
specifier|public
class|class
name|SchedulingSubpartEditAction
extends|extends
name|PreferencesAction
block|{
annotation|@
name|Autowired
name|SessionContext
name|sessionContext
decl_stmt|;
comment|/**      * Method execute      * @param mapping      * @param form      * @param request      * @param response      * @return ActionForward      */
specifier|public
name|ActionForward
name|execute
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
comment|// Set common lookup tables
name|super
operator|.
name|execute
argument_list|(
name|mapping
argument_list|,
name|form
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|SchedulingSubpartEditForm
name|frm
init|=
operator|(
name|SchedulingSubpartEditForm
operator|)
name|form
decl_stmt|;
name|MessageResources
name|rsc
init|=
name|getResources
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|ActionMessages
name|errors
init|=
operator|new
name|ActionMessages
argument_list|()
decl_stmt|;
comment|// Read parameters
name|String
name|subpartId
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"ssuid"
argument_list|)
operator|==
literal|null
condition|?
name|request
operator|.
name|getAttribute
argument_list|(
literal|"ssuid"
argument_list|)
operator|!=
literal|null
condition|?
name|request
operator|.
name|getAttribute
argument_list|(
literal|"ssuid"
argument_list|)
operator|.
name|toString
argument_list|()
else|:
literal|null
else|:
name|request
operator|.
name|getParameter
argument_list|(
literal|"ssuid"
argument_list|)
decl_stmt|;
name|String
name|reloadCause
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"reloadCause"
argument_list|)
decl_stmt|;
name|String
name|op
init|=
name|frm
operator|.
name|getOp
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"op2"
argument_list|)
operator|!=
literal|null
operator|&&
name|request
operator|.
name|getParameter
argument_list|(
literal|"op2"
argument_list|)
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|op
operator|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"op2"
argument_list|)
expr_stmt|;
comment|// Read subpart id from form
if|if
condition|(
comment|//op.equals(rsc.getMessage("button.reload"))
comment|//	||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionAddTimePreference
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionAddRoomPreference
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionAddBuildingPreference
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionAddRoomFeaturePreference
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionAddDistributionPreference
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionAddRoomGroupPreference
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionUpdatePreferences
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionAddDatePatternPreference
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionAddAttributePreference
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionAddInstructorPreference
argument_list|()
argument_list|)
comment|// || op.equals(rsc.getMessage("button.cancel"))
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionClearSubpartPreferences
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionRemoveBuildingPreference
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionRemoveDistributionPreference
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionRemoveRoomFeaturePreference
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionRemoveRoomGroupPreference
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionRemoveRoomPreference
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionRemoveTimePattern
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionRemoveAttributePreference
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionRemoveInstructorPreference
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionBackToDetail
argument_list|()
argument_list|)
comment|// || op.equals(rsc.getMessage("button.addClass_"))
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionNextSubpart
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionPreviousSubpart
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
literal|"updateDatePattern"
argument_list|)
condition|)
block|{
name|subpartId
operator|=
name|frm
operator|.
name|getSchedulingSubpartId
argument_list|()
expr_stmt|;
block|}
comment|// Determine if initial load
if|if
condition|(
name|op
operator|==
literal|null
operator|||
name|op
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
operator|(
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.reload"
argument_list|)
argument_list|)
operator|&&
operator|(
name|reloadCause
operator|==
literal|null
operator|||
name|reloadCause
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
operator|)
condition|)
block|{
name|op
operator|=
literal|"init"
expr_stmt|;
block|}
comment|// Check op exists
if|if
condition|(
name|op
operator|==
literal|null
operator|||
name|op
operator|.
name|trim
argument_list|()
operator|==
literal|""
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
name|MSG
operator|.
name|errorNullOperationNotSupported
argument_list|()
argument_list|)
throw|;
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|subpartId
argument_list|,
literal|"SchedulingSubpart"
argument_list|,
name|Right
operator|.
name|SchedulingSubpartEdit
argument_list|)
expr_stmt|;
name|boolean
name|timeVertical
init|=
name|CommonValues
operator|.
name|VerticalGrid
operator|.
name|eq
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
name|UserProperty
operator|.
name|GridOrientation
argument_list|)
argument_list|)
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"op: "
operator|+
name|op
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"subpart: "
operator|+
name|subpartId
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"reload cause: "
operator|+
name|reloadCause
argument_list|)
expr_stmt|;
comment|// Check subpart exists
if|if
condition|(
name|subpartId
operator|==
literal|null
operator|||
name|subpartId
operator|.
name|trim
argument_list|()
operator|==
literal|""
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
name|MSG
operator|.
name|errorSubpartInfoNotSupplied
argument_list|()
argument_list|)
throw|;
comment|// If subpart id is not null - load subpart info
name|SchedulingSubpartDAO
name|sdao
init|=
operator|new
name|SchedulingSubpartDAO
argument_list|()
decl_stmt|;
name|SchedulingSubpart
name|ss
init|=
name|sdao
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|subpartId
argument_list|)
argument_list|)
decl_stmt|;
comment|// Cancel - Go back to Instructional Offering Screen
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionBackToDetail
argument_list|()
argument_list|)
operator|&&
name|subpartId
operator|!=
literal|null
operator|&&
name|subpartId
operator|.
name|trim
argument_list|()
operator|!=
literal|""
condition|)
block|{
name|ActionRedirect
name|redirect
init|=
operator|new
name|ActionRedirect
argument_list|(
name|mapping
operator|.
name|findForward
argument_list|(
literal|"displaySubpartDetail"
argument_list|)
argument_list|)
decl_stmt|;
name|redirect
operator|.
name|addParameter
argument_list|(
literal|"ssuid"
argument_list|,
name|subpartId
argument_list|)
expr_stmt|;
return|return
name|redirect
return|;
block|}
comment|// Clear all preferences
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionClearSubpartPreferences
argument_list|()
argument_list|)
condition|)
block|{
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|ss
argument_list|,
name|Right
operator|.
name|SchedulingSubpartEditClearPreferences
argument_list|)
expr_stmt|;
name|Set
name|s
init|=
name|ss
operator|.
name|getPreferences
argument_list|()
decl_stmt|;
name|super
operator|.
name|doClear
argument_list|(
name|s
argument_list|,
name|Preference
operator|.
name|Type
operator|.
name|TIME
argument_list|,
name|Preference
operator|.
name|Type
operator|.
name|ROOM
argument_list|,
name|Preference
operator|.
name|Type
operator|.
name|ROOM_FEATURE
argument_list|,
name|Preference
operator|.
name|Type
operator|.
name|ROOM_GROUP
argument_list|,
name|Preference
operator|.
name|Type
operator|.
name|BUILDING
argument_list|,
name|Preference
operator|.
name|Type
operator|.
name|DATE
argument_list|)
expr_stmt|;
name|ss
operator|.
name|setPreferences
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|sdao
operator|.
name|update
argument_list|(
name|ss
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
literal|null
argument_list|,
name|sessionContext
argument_list|,
name|ss
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|SCHEDULING_SUBPART_EDIT
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|CLEAR_PREF
argument_list|,
name|ss
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|ss
operator|.
name|getManagingDept
argument_list|()
argument_list|)
expr_stmt|;
name|ActionRedirect
name|redirect
init|=
operator|new
name|ActionRedirect
argument_list|(
name|mapping
operator|.
name|findForward
argument_list|(
literal|"displaySubpartDetail"
argument_list|)
argument_list|)
decl_stmt|;
name|redirect
operator|.
name|addParameter
argument_list|(
literal|"ssuid"
argument_list|,
name|subpartId
argument_list|)
expr_stmt|;
return|return
name|redirect
return|;
block|}
comment|// Reset form for initial load
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
literal|"init"
argument_list|)
condition|)
block|{
name|frm
operator|.
name|reset
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setAutoSpreadInTime
argument_list|(
name|ss
operator|.
name|isAutoSpreadInTime
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setStudentAllowOverlap
argument_list|(
name|ss
operator|.
name|isStudentAllowOverlap
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Load form attributes that are constant
name|doLoad
argument_list|(
name|request
argument_list|,
name|frm
argument_list|,
name|ss
argument_list|,
name|subpartId
argument_list|)
expr_stmt|;
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
literal|"init"
argument_list|)
condition|)
block|{
name|frm
operator|.
name|setDatePattern
argument_list|(
name|ss
operator|.
name|getDatePattern
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
else|:
name|ss
operator|.
name|getDatePattern
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Update Preferences for Subpart
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionUpdatePreferences
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionNextSubpart
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionPreviousSubpart
argument_list|()
argument_list|)
condition|)
block|{
comment|// Validate input prefs
name|errors
operator|=
name|frm
operator|.
name|validate
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
expr_stmt|;
comment|// No errors - Add to subpart and update
if|if
condition|(
name|errors
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|this
operator|.
name|doUpdate
argument_list|(
name|request
argument_list|,
name|frm
argument_list|,
name|ss
argument_list|,
name|sdao
argument_list|,
name|timeVertical
argument_list|)
expr_stmt|;
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionNextSubpart
argument_list|()
argument_list|)
condition|)
block|{
name|response
operator|.
name|sendRedirect
argument_list|(
name|response
operator|.
name|encodeURL
argument_list|(
literal|"schedulingSubpartEdit.do?ssuid="
operator|+
name|frm
operator|.
name|getNextId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionPreviousSubpart
argument_list|()
argument_list|)
condition|)
block|{
name|response
operator|.
name|sendRedirect
argument_list|(
name|response
operator|.
name|encodeURL
argument_list|(
literal|"schedulingSubpartEdit.do?ssuid="
operator|+
name|frm
operator|.
name|getPreviousId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|ActionRedirect
name|redirect
init|=
operator|new
name|ActionRedirect
argument_list|(
name|mapping
operator|.
name|findForward
argument_list|(
literal|"displaySubpartDetail"
argument_list|)
argument_list|)
decl_stmt|;
name|redirect
operator|.
name|addParameter
argument_list|(
literal|"ssuid"
argument_list|,
name|subpartId
argument_list|)
expr_stmt|;
return|return
name|redirect
return|;
block|}
else|else
block|{
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Initialize Preferences for initial load
name|Set
name|timePatterns
init|=
literal|null
decl_stmt|;
name|frm
operator|.
name|setAvailableTimePatterns
argument_list|(
name|TimePattern
operator|.
name|findApplicable
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|,
name|ss
operator|.
name|getMinutesPerWk
argument_list|()
argument_list|,
operator|(
name|frm
operator|.
name|getDatePattern
argument_list|()
operator|<
literal|0
condition|?
operator|(
name|ss
operator|.
name|canInheritParentPreferences
argument_list|()
condition|?
name|ss
operator|.
name|getParentSubpart
argument_list|()
operator|.
name|effectiveDatePattern
argument_list|()
else|:
name|ss
operator|.
name|getSession
argument_list|()
operator|.
name|getDefaultDatePatternNotNull
argument_list|()
operator|)
else|:
name|DatePatternDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|frm
operator|.
name|getDatePattern
argument_list|()
argument_list|)
operator|)
argument_list|,
name|ss
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getDurationModel
argument_list|()
argument_list|,
literal|false
argument_list|,
name|ss
operator|.
name|getManagingDept
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
literal|"init"
argument_list|)
condition|)
block|{
name|initPrefs
argument_list|(
name|frm
argument_list|,
name|ss
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|timePatterns
operator|=
name|ss
operator|.
name|getTimePatterns
argument_list|()
expr_stmt|;
name|DatePattern
name|selectedDatePattern
init|=
name|ss
operator|.
name|effectiveDatePattern
argument_list|()
decl_stmt|;
if|if
condition|(
name|selectedDatePattern
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DatePattern
name|dp
range|:
name|selectedDatePattern
operator|.
name|findChildren
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|frm
operator|.
name|getDatePatternPrefs
argument_list|()
operator|.
name|contains
argument_list|(
name|dp
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|frm
operator|.
name|addToDatePatternPrefs
argument_list|(
name|dp
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|PreferenceLevel
operator|.
name|PREF_LEVEL_NEUTRAL
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
literal|"updateDatePattern"
argument_list|)
condition|)
block|{
name|initPrefs
argument_list|(
name|frm
argument_list|,
name|ss
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|timePatterns
operator|=
name|ss
operator|.
name|getTimePatterns
argument_list|()
expr_stmt|;
name|frm
operator|.
name|getDatePatternPrefs
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|frm
operator|.
name|getDatePatternPrefLevels
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|DatePattern
name|selectedDatePattern
init|=
operator|(
name|frm
operator|.
name|getDatePattern
argument_list|()
operator|<
literal|0
condition|?
operator|(
name|ss
operator|.
name|canInheritParentPreferences
argument_list|()
condition|?
name|ss
operator|.
name|getParentSubpart
argument_list|()
operator|.
name|effectiveDatePattern
argument_list|()
else|:
name|ss
operator|.
name|getSession
argument_list|()
operator|.
name|getDefaultDatePatternNotNull
argument_list|()
operator|)
else|:
name|DatePatternDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|frm
operator|.
name|getDatePattern
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|selectedDatePattern
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DatePattern
name|dp
range|:
name|selectedDatePattern
operator|.
name|findChildren
argument_list|()
control|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|DatePatternPref
name|dpp
range|:
operator|(
name|Set
argument_list|<
name|DatePatternPref
argument_list|>
operator|)
name|ss
operator|.
name|getPreferences
argument_list|(
name|DatePatternPref
operator|.
name|class
argument_list|)
control|)
block|{
if|if
condition|(
name|dp
operator|.
name|equals
argument_list|(
name|dpp
operator|.
name|getDatePattern
argument_list|()
argument_list|)
condition|)
block|{
name|frm
operator|.
name|addToDatePatternPrefs
argument_list|(
name|dp
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|dpp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
name|frm
operator|.
name|addToDatePatternPrefs
argument_list|(
name|dp
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|PreferenceLevel
operator|.
name|PREF_LEVEL_NEUTRAL
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Process Preferences Action
name|processPrefAction
argument_list|(
name|request
argument_list|,
name|frm
argument_list|,
name|errors
argument_list|)
expr_stmt|;
comment|// Generate Time Pattern Grids
name|super
operator|.
name|generateTimePatternGrids
argument_list|(
name|request
argument_list|,
name|frm
argument_list|,
name|ss
argument_list|,
name|ss
operator|.
name|getMinutesPerWk
argument_list|()
argument_list|,
name|ss
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getDurationModel
argument_list|()
argument_list|,
operator|(
name|frm
operator|.
name|getDatePattern
argument_list|()
operator|<
literal|0
condition|?
operator|(
name|ss
operator|.
name|canInheritParentPreferences
argument_list|()
condition|?
name|ss
operator|.
name|getParentSubpart
argument_list|()
operator|.
name|effectiveDatePattern
argument_list|()
else|:
name|ss
operator|.
name|getSession
argument_list|()
operator|.
name|getDefaultDatePatternNotNull
argument_list|()
operator|)
else|:
name|DatePatternDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|frm
operator|.
name|getDatePattern
argument_list|()
argument_list|)
operator|)
argument_list|,
name|timePatterns
argument_list|,
name|op
argument_list|,
name|timeVertical
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|setupChildren
argument_list|(
name|frm
argument_list|,
name|request
argument_list|,
name|ss
argument_list|)
expr_stmt|;
comment|// Date patterns allowed in the DDL for Date pattern preferences
name|LookupTables
operator|.
name|setupDatePatterns
argument_list|(
name|request
argument_list|,
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|,
name|MSG
operator|.
name|dropDefaultDatePattern
argument_list|()
argument_list|,
operator|(
name|ss
operator|.
name|canInheritParentPreferences
argument_list|()
condition|?
name|ss
operator|.
name|getParentSubpart
argument_list|()
operator|.
name|effectiveDatePattern
argument_list|()
else|:
name|ss
operator|.
name|getSession
argument_list|()
operator|.
name|getDefaultDatePatternNotNull
argument_list|()
operator|)
argument_list|,
name|ss
operator|.
name|getManagingDept
argument_list|()
argument_list|,
name|ss
operator|.
name|effectiveDatePattern
argument_list|()
argument_list|)
expr_stmt|;
name|LookupTables
operator|.
name|setupRooms
argument_list|(
name|request
argument_list|,
name|ss
argument_list|)
expr_stmt|;
comment|// Room Prefs
name|LookupTables
operator|.
name|setupBldgs
argument_list|(
name|request
argument_list|,
name|ss
argument_list|)
expr_stmt|;
comment|// Building Prefs
name|LookupTables
operator|.
name|setupRoomFeatures
argument_list|(
name|request
argument_list|,
name|ss
argument_list|)
expr_stmt|;
comment|// Preference Levels
name|LookupTables
operator|.
name|setupRoomGroups
argument_list|(
name|request
argument_list|,
name|ss
argument_list|)
expr_stmt|;
comment|// Room Groups
name|LookupTables
operator|.
name|setupInstructorAttributes
argument_list|(
name|request
argument_list|,
name|ss
argument_list|)
expr_stmt|;
comment|// Instructor Attributes
name|LookupTables
operator|.
name|setupCourseCreditFormats
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|// Course Credit Formats
name|LookupTables
operator|.
name|setupCourseCreditTypes
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|//Course Credit Types
name|LookupTables
operator|.
name|setupCourseCreditUnitTypes
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|//Course Credit Unit Types
name|LookupTables
operator|.
name|setupInstructors
argument_list|(
name|request
argument_list|,
name|sessionContext
argument_list|,
name|ss
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setAllowHardPrefs
argument_list|(
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|ss
argument_list|,
name|Right
operator|.
name|CanUseHardRoomPrefs
argument_list|)
argument_list|)
expr_stmt|;
name|BackTracker
operator|.
name|markForBack
argument_list|(
name|request
argument_list|,
literal|"schedulingSubpartDetail.do?ssuid="
operator|+
name|frm
operator|.
name|getSchedulingSubpartId
argument_list|()
argument_list|,
name|MSG
operator|.
name|backSubpart
argument_list|(
name|ss
operator|.
name|getSchedulingSubpartLabel
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"editSchedulingSubpart"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**      * Loads the non-editable scheduling subpart info into the form      * @param request      * @param frm      * @param ss      * @param subpartId      */
specifier|private
name|void
name|doLoad
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|SchedulingSubpartEditForm
name|frm
parameter_list|,
name|SchedulingSubpart
name|ss
parameter_list|,
name|String
name|subpartId
parameter_list|)
block|{
name|CourseOffering
name|co
init|=
name|ss
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
decl_stmt|;
comment|// populate form
name|InstrOfferingConfig
name|ioc
init|=
name|ss
operator|.
name|getInstrOfferingConfig
argument_list|()
decl_stmt|;
name|InstructionalOffering
name|io
init|=
name|ioc
operator|.
name|getInstructionalOffering
argument_list|()
decl_stmt|;
name|frm
operator|.
name|setInstrOfferingId
argument_list|(
name|io
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setSchedulingSubpartId
argument_list|(
name|subpartId
argument_list|)
expr_stmt|;
if|if
condition|(
name|frm
operator|.
name|getInstructionalType
argument_list|()
operator|==
literal|null
condition|)
name|frm
operator|.
name|setInstructionalType
argument_list|(
name|ss
operator|.
name|getItype
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|label
init|=
name|ss
operator|.
name|getItype
argument_list|()
operator|.
name|getAbbv
argument_list|()
decl_stmt|;
if|if
condition|(
name|io
operator|.
name|hasMultipleConfigurations
argument_list|()
condition|)
name|label
operator|+=
literal|" ["
operator|+
name|ioc
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
expr_stmt|;
name|frm
operator|.
name|setInstructionalTypeLabel
argument_list|(
name|label
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setUnlimitedEnroll
argument_list|(
name|ioc
operator|.
name|isUnlimitedEnrollment
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setItypeBasic
argument_list|(
name|ss
operator|.
name|getItype
argument_list|()
operator|==
literal|null
operator|||
name|ss
operator|.
name|getItype
argument_list|()
operator|.
name|getBasic
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|frm
operator|.
name|getItypeBasic
argument_list|()
condition|)
name|LookupTables
operator|.
name|setupItypes
argument_list|(
name|request
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setSubjectArea
argument_list|(
name|co
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setSubjectAreaId
argument_list|(
name|co
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setCourseNbr
argument_list|(
name|co
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setCourseTitle
argument_list|(
name|co
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ss
operator|.
name|getParentSubpart
argument_list|()
operator|!=
literal|null
operator|&&
name|ss
operator|.
name|getItype
argument_list|()
operator|.
name|equals
argument_list|(
name|ss
operator|.
name|getParentSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
argument_list|)
condition|)
block|{
name|frm
operator|.
name|setSameItypeAsParent
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|frm
operator|.
name|setSameItypeAsParent
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|frm
operator|.
name|getCreditFormat
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|ss
operator|.
name|getCredit
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|CourseCreditUnitConfig
name|credit
init|=
name|ss
operator|.
name|getCredit
argument_list|()
decl_stmt|;
name|frm
operator|.
name|setCreditText
argument_list|(
name|credit
operator|.
name|creditText
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setCreditFormat
argument_list|(
name|credit
operator|.
name|getCreditFormat
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setCreditType
argument_list|(
name|credit
operator|.
name|getCreditType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setCreditUnitType
argument_list|(
name|credit
operator|.
name|getCreditUnitType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|credit
operator|instanceof
name|FixedCreditUnitConfig
condition|)
block|{
name|frm
operator|.
name|setUnits
argument_list|(
operator|(
operator|(
name|FixedCreditUnitConfig
operator|)
name|credit
operator|)
operator|.
name|getFixedUnits
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|credit
operator|instanceof
name|VariableFixedCreditUnitConfig
condition|)
block|{
name|frm
operator|.
name|setUnits
argument_list|(
operator|(
operator|(
name|VariableFixedCreditUnitConfig
operator|)
name|credit
operator|)
operator|.
name|getMinUnits
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setMaxUnits
argument_list|(
operator|(
operator|(
name|VariableFixedCreditUnitConfig
operator|)
name|credit
operator|)
operator|.
name|getMaxUnits
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|credit
operator|instanceof
name|VariableRangeCreditUnitConfig
condition|)
block|{
name|frm
operator|.
name|setFractionalIncrementsAllowed
argument_list|(
operator|(
operator|(
name|VariableRangeCreditUnitConfig
operator|)
name|credit
operator|)
operator|.
name|isFractionalIncrementsAllowed
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|SchedulingSubpart
name|next
init|=
name|ss
operator|.
name|getNextSchedulingSubpart
argument_list|(
name|sessionContext
argument_list|,
name|Right
operator|.
name|SchedulingSubpartEdit
argument_list|)
decl_stmt|;
name|frm
operator|.
name|setNextId
argument_list|(
name|next
operator|==
literal|null
condition|?
literal|null
else|:
name|next
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|SchedulingSubpart
name|previous
init|=
name|ss
operator|.
name|getPreviousSchedulingSubpart
argument_list|(
name|sessionContext
argument_list|,
name|Right
operator|.
name|SchedulingSubpartEdit
argument_list|)
decl_stmt|;
name|frm
operator|.
name|setPreviousId
argument_list|(
name|previous
operator|==
literal|null
condition|?
literal|null
else|:
name|previous
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set Parent Subpart
name|String
name|parentSubpart
init|=
literal|""
decl_stmt|;
name|SchedulingSubpart
name|parentSS
init|=
name|ss
operator|.
name|getParentSubpart
argument_list|()
decl_stmt|;
name|frm
operator|.
name|setParentSubpartId
argument_list|(
name|parentSS
operator|==
literal|null
condition|?
literal|null
else|:
name|parentSS
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setParentSubpartLabel
argument_list|(
name|parentSS
operator|==
literal|null
condition|?
literal|null
else|:
name|parentSS
operator|.
name|getSchedulingSubpartLabel
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|parentSS
operator|!=
literal|null
condition|)
block|{
name|parentSubpart
operator|=
name|parentSS
operator|.
name|getItype
argument_list|()
operator|.
name|getAbbv
argument_list|()
operator|+
literal|" - "
operator|+
name|parentSubpart
expr_stmt|;
name|parentSS
operator|=
name|parentSS
operator|.
name|getParentSubpart
argument_list|()
expr_stmt|;
block|}
name|frm
operator|.
name|setParentSubpart
argument_list|(
name|parentSubpart
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setManagingDeptName
argument_list|(
name|ss
operator|.
name|getManagingDept
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|ss
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getManagingDeptLabel
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setControllingDept
argument_list|(
name|ss
operator|.
name|getControllingDept
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Loads the non-editable scheduling subpart info into the form      * @param request      * @param frm      * @param ss      * @param subpartId      * @throws Exception      */
specifier|private
name|void
name|doUpdate
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|SchedulingSubpartEditForm
name|frm
parameter_list|,
name|SchedulingSubpart
name|ss
parameter_list|,
name|SchedulingSubpartDAO
name|sdao
parameter_list|,
name|boolean
name|timeVertical
parameter_list|)
throws|throws
name|Exception
block|{
name|Set
name|s
init|=
name|ss
operator|.
name|getPreferences
argument_list|()
decl_stmt|;
comment|// Clear all old prefs
name|super
operator|.
name|doClear
argument_list|(
name|s
argument_list|,
name|Preference
operator|.
name|Type
operator|.
name|TIME
argument_list|,
name|Preference
operator|.
name|Type
operator|.
name|ROOM
argument_list|,
name|Preference
operator|.
name|Type
operator|.
name|ROOM_FEATURE
argument_list|,
name|Preference
operator|.
name|Type
operator|.
name|ROOM_GROUP
argument_list|,
name|Preference
operator|.
name|Type
operator|.
name|BUILDING
argument_list|,
name|Preference
operator|.
name|Type
operator|.
name|DATE
argument_list|)
expr_stmt|;
name|super
operator|.
name|doUpdate
argument_list|(
name|request
argument_list|,
name|frm
argument_list|,
name|ss
argument_list|,
name|s
argument_list|,
name|timeVertical
argument_list|,
name|Preference
operator|.
name|Type
operator|.
name|TIME
argument_list|,
name|Preference
operator|.
name|Type
operator|.
name|ROOM
argument_list|,
name|Preference
operator|.
name|Type
operator|.
name|ROOM_FEATURE
argument_list|,
name|Preference
operator|.
name|Type
operator|.
name|ROOM_GROUP
argument_list|,
name|Preference
operator|.
name|Type
operator|.
name|BUILDING
argument_list|,
name|Preference
operator|.
name|Type
operator|.
name|DATE
argument_list|)
expr_stmt|;
name|ss
operator|.
name|setAutoSpreadInTime
argument_list|(
name|frm
operator|.
name|getAutoSpreadInTime
argument_list|()
argument_list|)
expr_stmt|;
name|ss
operator|.
name|setStudentAllowOverlap
argument_list|(
name|frm
operator|.
name|getStudentAllowOverlap
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|frm
operator|.
name|getDatePattern
argument_list|()
operator|==
literal|null
operator|||
name|frm
operator|.
name|getDatePattern
argument_list|()
operator|.
name|intValue
argument_list|()
operator|<
literal|0
condition|)
name|ss
operator|.
name|setDatePattern
argument_list|(
literal|null
argument_list|)
expr_stmt|;
else|else
name|ss
operator|.
name|setDatePattern
argument_list|(
operator|new
name|DatePatternDAO
argument_list|()
operator|.
name|get
argument_list|(
name|frm
operator|.
name|getDatePattern
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|frm
operator|.
name|getInstructionalType
argument_list|()
operator|==
literal|null
operator|||
name|frm
operator|.
name|getInstructionalType
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// do nothing
block|}
else|else
block|{
name|ItypeDesc
name|newItype
init|=
operator|new
name|ItypeDescDAO
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|Integer
argument_list|(
name|frm
operator|.
name|getInstructionalType
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|newItype
operator|!=
literal|null
condition|)
block|{
name|ss
operator|.
name|setItype
argument_list|(
name|newItype
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|frm
operator|.
name|getCreditFormat
argument_list|()
operator|==
literal|null
operator|||
name|frm
operator|.
name|getCreditFormat
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
name|frm
operator|.
name|getCreditFormat
argument_list|()
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|BLANK_OPTION_VALUE
argument_list|)
condition|)
block|{
name|CourseCreditUnitConfig
name|origConfig
init|=
name|ss
operator|.
name|getCredit
argument_list|()
decl_stmt|;
if|if
condition|(
name|origConfig
operator|!=
literal|null
condition|)
block|{
name|ss
operator|.
name|setCredit
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|sdao
operator|.
name|getSession
argument_list|()
operator|.
name|delete
argument_list|(
name|origConfig
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|ss
operator|.
name|getCredit
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|CourseCreditUnitConfig
name|ccuc
init|=
name|ss
operator|.
name|getCredit
argument_list|()
decl_stmt|;
if|if
condition|(
name|ccuc
operator|.
name|getCreditFormat
argument_list|()
operator|.
name|equals
argument_list|(
name|frm
operator|.
name|getCreditFormat
argument_list|()
argument_list|)
condition|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|ccuc
operator|.
name|getCreditType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|frm
operator|.
name|getCreditType
argument_list|()
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ccuc
operator|.
name|getCreditUnitType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|frm
operator|.
name|getCreditUnitType
argument_list|()
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|ccuc
operator|instanceof
name|FixedCreditUnitConfig
condition|)
block|{
name|FixedCreditUnitConfig
name|fcuc
init|=
operator|(
name|FixedCreditUnitConfig
operator|)
name|ccuc
decl_stmt|;
if|if
condition|(
operator|!
name|fcuc
operator|.
name|getFixedUnits
argument_list|()
operator|.
name|equals
argument_list|(
name|frm
operator|.
name|getUnits
argument_list|()
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|ccuc
operator|instanceof
name|VariableFixedCreditUnitConfig
condition|)
block|{
name|VariableFixedCreditUnitConfig
name|vfcuc
init|=
operator|(
name|VariableFixedCreditUnitConfig
operator|)
name|ccuc
decl_stmt|;
if|if
condition|(
operator|!
name|vfcuc
operator|.
name|getMinUnits
argument_list|()
operator|.
name|equals
argument_list|(
name|frm
operator|.
name|getUnits
argument_list|()
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|vfcuc
operator|.
name|getMaxUnits
argument_list|()
operator|.
name|equals
argument_list|(
name|frm
operator|.
name|getMaxUnits
argument_list|()
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|vfcuc
operator|instanceof
name|VariableRangeCreditUnitConfig
condition|)
block|{
name|VariableRangeCreditUnitConfig
name|vrcuc
init|=
operator|(
name|VariableRangeCreditUnitConfig
operator|)
name|vfcuc
decl_stmt|;
if|if
condition|(
operator|!
name|vrcuc
operator|.
name|isFractionalIncrementsAllowed
argument_list|()
operator|.
name|equals
argument_list|(
name|frm
operator|.
name|getFractionalIncrementsAllowed
argument_list|()
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|CourseCreditUnitConfig
name|origConfig
init|=
name|ss
operator|.
name|getCredit
argument_list|()
decl_stmt|;
name|ss
operator|.
name|setCredit
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|sdao
operator|.
name|getSession
argument_list|()
operator|.
name|delete
argument_list|(
name|origConfig
argument_list|)
expr_stmt|;
name|ss
operator|.
name|setCredit
argument_list|(
name|CourseCreditUnitConfig
operator|.
name|createCreditUnitConfigOfFormat
argument_list|(
name|frm
operator|.
name|getCreditFormat
argument_list|()
argument_list|,
name|frm
operator|.
name|getCreditType
argument_list|()
argument_list|,
name|frm
operator|.
name|getCreditUnitType
argument_list|()
argument_list|,
name|frm
operator|.
name|getUnits
argument_list|()
argument_list|,
name|frm
operator|.
name|getMaxUnits
argument_list|()
argument_list|,
name|frm
operator|.
name|getFractionalIncrementsAllowed
argument_list|()
argument_list|,
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ss
operator|.
name|getCredit
argument_list|()
operator|.
name|setOwner
argument_list|(
name|ss
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|CourseCreditUnitConfig
name|origConfig
init|=
name|ss
operator|.
name|getCredit
argument_list|()
decl_stmt|;
name|ss
operator|.
name|setCredit
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|sdao
operator|.
name|getSession
argument_list|()
operator|.
name|delete
argument_list|(
name|origConfig
argument_list|)
expr_stmt|;
name|ss
operator|.
name|setCredit
argument_list|(
name|CourseCreditUnitConfig
operator|.
name|createCreditUnitConfigOfFormat
argument_list|(
name|frm
operator|.
name|getCreditFormat
argument_list|()
argument_list|,
name|frm
operator|.
name|getCreditType
argument_list|()
argument_list|,
name|frm
operator|.
name|getCreditUnitType
argument_list|()
argument_list|,
name|frm
operator|.
name|getUnits
argument_list|()
argument_list|,
name|frm
operator|.
name|getMaxUnits
argument_list|()
argument_list|,
name|frm
operator|.
name|getFractionalIncrementsAllowed
argument_list|()
argument_list|,
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ss
operator|.
name|getCredit
argument_list|()
operator|.
name|setOwner
argument_list|(
name|ss
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|ss
operator|.
name|setCredit
argument_list|(
name|CourseCreditUnitConfig
operator|.
name|createCreditUnitConfigOfFormat
argument_list|(
name|frm
operator|.
name|getCreditFormat
argument_list|()
argument_list|,
name|frm
operator|.
name|getCreditType
argument_list|()
argument_list|,
name|frm
operator|.
name|getCreditUnitType
argument_list|()
argument_list|,
name|frm
operator|.
name|getUnits
argument_list|()
argument_list|,
name|frm
operator|.
name|getMaxUnits
argument_list|()
argument_list|,
name|frm
operator|.
name|getFractionalIncrementsAllowed
argument_list|()
argument_list|,
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ss
operator|.
name|getCredit
argument_list|()
operator|.
name|setOwner
argument_list|(
name|ss
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ss
operator|.
name|getCredit
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sdao
operator|.
name|getSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|ss
operator|.
name|getCredit
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*         if (ss.getTeachingLoad() != null)         	updateInstructorCoursePreferences(sdao.getSession(), frm, ss, ss.getControllingCourseOffering());         	*/
name|sdao
operator|.
name|update
argument_list|(
name|ss
argument_list|)
expr_stmt|;
name|String
name|className
init|=
name|ApplicationProperty
operator|.
name|ExternalActionSchedulingSubpartEdit
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
operator|&&
name|className
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ExternalSchedulingSubpartEditAction
name|editAction
init|=
operator|(
name|ExternalSchedulingSubpartEditAction
operator|)
operator|(
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|newInstance
argument_list|()
operator|)
decl_stmt|;
name|editAction
operator|.
name|performExternalSchedulingSubpartEditAction
argument_list|(
name|ss
argument_list|,
name|sdao
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ChangeLog
operator|.
name|addChange
argument_list|(
literal|null
argument_list|,
name|sessionContext
argument_list|,
name|ss
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|SCHEDULING_SUBPART_EDIT
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|UPDATE
argument_list|,
name|ss
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|ss
operator|.
name|getManagingDept
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setupChildren
parameter_list|(
name|SchedulingSubpartEditForm
name|frm
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|SchedulingSubpart
name|ss
parameter_list|)
block|{
name|DatePattern
name|selectedDatePattern
init|=
operator|(
name|frm
operator|.
name|getDatePattern
argument_list|()
operator|<
literal|0
condition|?
operator|(
name|ss
operator|.
name|canInheritParentPreferences
argument_list|()
condition|?
name|ss
operator|.
name|getParentSubpart
argument_list|()
operator|.
name|effectiveDatePattern
argument_list|()
else|:
name|ss
operator|.
name|getSession
argument_list|()
operator|.
name|getDefaultDatePatternNotNull
argument_list|()
operator|)
else|:
name|DatePatternDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|frm
operator|.
name|getDatePattern
argument_list|()
argument_list|)
operator|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|selectedDatePattern
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|DatePattern
argument_list|>
name|v
init|=
name|selectedDatePattern
operator|.
name|findChildren
argument_list|()
decl_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|DatePattern
operator|.
name|DATE_PATTERN_CHILDREN_LIST_ATTR
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|frm
operator|.
name|sortDatePatternPrefs
argument_list|(
name|frm
operator|.
name|getDatePatternPrefs
argument_list|()
argument_list|,
name|frm
operator|.
name|getDatePatternPrefLevels
argument_list|()
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

