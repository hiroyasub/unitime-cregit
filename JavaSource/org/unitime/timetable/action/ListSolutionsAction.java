begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 - 3.5 (University Timetabling Application)  * Copyright (C) 2008 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|CSVFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|criterion
operator|.
name|Restrictions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|WebTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|UserProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|ListSolutionsForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|SolverForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|ListSolutionsForm
operator|.
name|SolutionBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|SolverForm
operator|.
name|LongIdValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalSolutionCommitAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Solution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverPredefinedSetting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SolutionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SolverGroupDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SolverPredefinedSettingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|Qualifiable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|SolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|jgroups
operator|.
name|SolverServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|service
operator|.
name|SolverServerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|service
operator|.
name|SolverService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|PropertiesInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|ExportUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_comment
comment|/**   * @author Tomas Muller, Stephanie Schluttenhofer  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"/listSolutions"
argument_list|)
specifier|public
class|class
name|ListSolutionsAction
extends|extends
name|Action
block|{
specifier|private
specifier|static
name|Formats
operator|.
name|Format
argument_list|<
name|Date
argument_list|>
name|sDF
init|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|DATE_TIME_STAMP
argument_list|)
decl_stmt|;
annotation|@
name|Autowired
name|SolverService
argument_list|<
name|SolverProxy
argument_list|>
name|courseTimetablingSolverService
decl_stmt|;
annotation|@
name|Autowired
name|SessionContext
name|sessionContext
decl_stmt|;
annotation|@
name|Autowired
name|SolverServerService
name|solverServerService
decl_stmt|;
specifier|public
name|ActionForward
name|execute
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
name|ListSolutionsForm
name|myForm
init|=
operator|(
name|ListSolutionsForm
operator|)
name|form
decl_stmt|;
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|Timetables
argument_list|)
expr_stmt|;
comment|// Read operation to be performed
name|String
name|op
init|=
operator|(
name|myForm
operator|.
name|getOp
argument_list|()
operator|!=
literal|null
condition|?
name|myForm
operator|.
name|getOp
argument_list|()
else|:
name|request
operator|.
name|getParameter
argument_list|(
literal|"op"
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
literal|"n"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"confirm"
argument_list|)
argument_list|)
condition|)
name|op
operator|=
literal|null
expr_stmt|;
comment|/*         if (op==null) {         	if (request.getSession().getAttribute("Solver.selectedSolutionId")!=null)         		op = "Select";         }         */
if|if
condition|(
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|getAttribute
argument_list|(
literal|"Solver.selectedSolutionId"
argument_list|)
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
operator|(
name|String
operator|)
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|getAttribute
argument_list|(
literal|"Solver.selectedSolutionId"
argument_list|)
argument_list|,
literal|","
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|Long
name|solutionId
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|s
operator|.
name|nextToken
argument_list|()
argument_list|)
decl_stmt|;
name|Solution
name|solution
init|=
operator|(
operator|new
name|SolutionDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|solutionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|solution
operator|!=
literal|null
condition|)
name|myForm
operator|.
name|addSolution
argument_list|(
name|solution
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|CanSelectSolverServer
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|hosts
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SolverServer
name|server
range|:
name|solverServerService
operator|.
name|getServers
argument_list|(
literal|true
argument_list|)
control|)
name|hosts
operator|.
name|add
argument_list|(
name|server
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|hosts
argument_list|)
expr_stmt|;
if|if
condition|(
name|ApplicationProperties
operator|.
name|isLocalSolverEnabled
argument_list|()
condition|)
name|hosts
operator|.
name|add
argument_list|(
literal|0
argument_list|,
literal|"local"
argument_list|)
expr_stmt|;
name|hosts
operator|.
name|add
argument_list|(
literal|0
argument_list|,
literal|"auto"
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"hosts"
argument_list|,
name|hosts
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|SolverForm
operator|.
name|LongIdValue
argument_list|>
name|owners
init|=
operator|new
name|ArrayList
argument_list|<
name|SolverForm
operator|.
name|LongIdValue
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SolverGroup
name|owner
range|:
name|SolverGroup
operator|.
name|getUserSolverGroups
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|owner
argument_list|,
name|Right
operator|.
name|TimetablesSolutionLoadEmpty
argument_list|)
condition|)
name|owners
operator|.
name|add
argument_list|(
operator|new
name|LongIdValue
argument_list|(
name|owner
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|owner
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|owners
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
name|myForm
operator|.
name|setOwnerId
argument_list|(
name|owners
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
operator|!
name|owners
operator|.
name|isEmpty
argument_list|()
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
literal|"owners"
argument_list|,
name|owners
argument_list|)
expr_stmt|;
comment|// Update Note
if|if
condition|(
literal|"Update Note"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|ActionMessages
name|errors
init|=
name|myForm
operator|.
name|validate
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|errors
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showSolutions"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SolutionBean
name|solutionBean
init|=
name|myForm
operator|.
name|getSolutionBean
argument_list|()
decl_stmt|;
if|if
condition|(
name|solutionBean
operator|!=
literal|null
condition|)
block|{
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|SolutionDAO
name|dao
init|=
operator|new
name|SolutionDAO
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|dao
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Solution
name|solution
init|=
name|dao
operator|.
name|get
argument_list|(
name|solutionBean
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|solution
argument_list|,
name|Right
operator|.
name|TimetablesSolutionChangeNote
argument_list|)
expr_stmt|;
name|String
name|note
init|=
name|myForm
operator|.
name|getNote
argument_list|()
decl_stmt|;
if|if
condition|(
name|note
operator|!=
literal|null
operator|&&
name|note
operator|.
name|length
argument_list|()
operator|>
literal|1000
condition|)
name|note
operator|=
name|note
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|solutionBean
operator|.
name|setNote
argument_list|(
name|note
argument_list|)
expr_stmt|;
name|solution
operator|.
name|setNote
argument_list|(
name|note
argument_list|)
expr_stmt|;
name|dao
operator|.
name|saveOrUpdate
argument_list|(
name|solution
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Update Note
if|if
condition|(
literal|"Commit"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
literal|"Uncommit"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|ActionMessages
name|errors
init|=
name|myForm
operator|.
name|validate
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|errors
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showSolutions"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SolutionBean
name|solutionBean
init|=
name|myForm
operator|.
name|getSolutionBean
argument_list|()
decl_stmt|;
if|if
condition|(
name|solutionBean
operator|!=
literal|null
condition|)
block|{
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|SolutionDAO
name|dao
init|=
operator|new
name|SolutionDAO
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|dao
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Solution
name|solution
init|=
name|dao
operator|.
name|get
argument_list|(
name|solutionBean
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|solution
operator|.
name|getOwner
argument_list|()
argument_list|,
name|Right
operator|.
name|TimetablesSolutionCommit
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"Commit"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|List
name|solutions
init|=
name|hibSession
operator|.
name|createCriteria
argument_list|(
name|Solution
operator|.
name|class
argument_list|)
operator|.
name|add
argument_list|(
name|Restrictions
operator|.
name|eq
argument_list|(
literal|"owner"
argument_list|,
name|solution
operator|.
name|getOwner
argument_list|()
argument_list|)
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|Solution
argument_list|>
name|touchedSolutionSet
init|=
operator|new
name|HashSet
argument_list|<
name|Solution
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|solutions
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Solution
name|s
init|=
operator|(
name|Solution
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|equals
argument_list|(
name|solution
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|s
operator|.
name|isCommited
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|touchedSolutionSet
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
name|touchedSolutionSet
operator|.
name|add
argument_list|(
name|solution
argument_list|)
expr_stmt|;
name|boolean
name|committed
init|=
name|solution
operator|.
name|commitSolution
argument_list|(
name|myForm
operator|.
name|getMessages
argument_list|()
argument_list|,
name|hibSession
argument_list|,
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalUserId
argument_list|()
argument_list|)
decl_stmt|;
name|hibSession
operator|.
name|update
argument_list|(
name|solution
argument_list|)
expr_stmt|;
name|String
name|className
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.external.solution.commit_action.class"
argument_list|)
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
operator|&&
name|className
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ExternalSolutionCommitAction
name|commitAction
init|=
operator|(
name|ExternalSolutionCommitAction
operator|)
operator|(
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|newInstance
argument_list|()
operator|)
decl_stmt|;
name|commitAction
operator|.
name|performExternalSolutionCommitAction
argument_list|(
name|touchedSolutionSet
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
name|solutionBean
operator|.
name|setCommited
argument_list|(
name|committed
condition|?
name|sDF
operator|.
name|format
argument_list|(
name|solution
operator|.
name|getCommitDate
argument_list|()
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|solution
operator|.
name|uncommitSolution
argument_list|(
name|hibSession
argument_list|,
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalUserId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|className
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.external.solution.commit_action.class"
argument_list|)
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
operator|&&
name|className
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ExternalSolutionCommitAction
name|commitAction
init|=
operator|(
name|ExternalSolutionCommitAction
operator|)
operator|(
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|newInstance
argument_list|()
operator|)
decl_stmt|;
name|HashSet
argument_list|<
name|Solution
argument_list|>
name|solutions
init|=
operator|new
name|HashSet
argument_list|<
name|Solution
argument_list|>
argument_list|()
decl_stmt|;
name|solutions
operator|.
name|add
argument_list|(
name|solution
argument_list|)
expr_stmt|;
name|commitAction
operator|.
name|performExternalSolutionCommitAction
argument_list|(
name|solutions
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
name|solutionBean
operator|.
name|setCommited
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|String
name|note
init|=
name|solutionBean
operator|.
name|getNote
argument_list|()
decl_stmt|;
if|if
condition|(
name|note
operator|!=
literal|null
operator|&&
name|note
operator|.
name|length
argument_list|()
operator|>
literal|1000
condition|)
name|note
operator|=
name|note
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|solution
operator|.
name|setNote
argument_list|(
name|note
argument_list|)
expr_stmt|;
name|dao
operator|.
name|saveOrUpdate
argument_list|(
name|solution
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Delete
if|if
condition|(
literal|"Delete"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|ActionMessages
name|errors
init|=
name|myForm
operator|.
name|validate
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|errors
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showSolutions"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SolutionBean
name|solutionBean
init|=
name|myForm
operator|.
name|getSolutionBean
argument_list|()
decl_stmt|;
if|if
condition|(
name|solutionBean
operator|!=
literal|null
condition|)
block|{
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|SolutionDAO
name|dao
init|=
operator|new
name|SolutionDAO
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|dao
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Solution
name|solution
init|=
name|dao
operator|.
name|get
argument_list|(
name|solutionBean
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|solution
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|solution
operator|.
name|isCommited
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|solution
operator|.
name|getOwner
argument_list|()
argument_list|,
name|Right
operator|.
name|TimetablesSolutionCommit
argument_list|)
expr_stmt|;
name|solution
operator|.
name|uncommitSolution
argument_list|(
name|hibSession
argument_list|,
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalUserId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|className
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.external.solution.commit_action.class"
argument_list|)
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
operator|&&
name|className
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ExternalSolutionCommitAction
name|commitAction
init|=
operator|(
name|ExternalSolutionCommitAction
operator|)
operator|(
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|newInstance
argument_list|()
operator|)
decl_stmt|;
name|HashSet
argument_list|<
name|Solution
argument_list|>
name|solutions
init|=
operator|new
name|HashSet
argument_list|<
name|Solution
argument_list|>
argument_list|()
decl_stmt|;
name|solutions
operator|.
name|add
argument_list|(
name|solution
argument_list|)
expr_stmt|;
name|commitAction
operator|.
name|performExternalSolutionCommitAction
argument_list|(
name|solutions
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
block|}
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|solution
argument_list|,
name|Right
operator|.
name|TimetablesSolutionDelete
argument_list|)
expr_stmt|;
name|solution
operator|.
name|delete
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|//myForm.reset(mapping,request);
name|myForm
operator|.
name|removeSolution
argument_list|(
name|solutionBean
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|setAttribute
argument_list|(
literal|"Solver.selectedSolutionId"
argument_list|,
name|myForm
operator|.
name|getSolutionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Load
if|if
condition|(
literal|"Load"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
literal|"Load Empty Solution"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|SolverProxy
name|solver
init|=
name|courseTimetablingSolverService
operator|.
name|getSolver
argument_list|()
decl_stmt|;
if|if
condition|(
name|solver
operator|!=
literal|null
operator|&&
name|solver
operator|.
name|isWorking
argument_list|()
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Solver is working, stop it first."
argument_list|)
throw|;
name|Long
index|[]
name|ownerId
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|"Load"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|myForm
operator|.
name|getSolutionId
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|,
literal|"Solution"
argument_list|,
name|Right
operator|.
name|TimetablesSolutionLoad
argument_list|)
expr_stmt|;
name|ownerId
operator|=
name|myForm
operator|.
name|getOwnerIds
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|myForm
operator|.
name|getOwnerId
argument_list|()
argument_list|,
literal|"SolverGroup"
argument_list|,
name|Right
operator|.
name|TimetablesSolutionLoadEmpty
argument_list|)
expr_stmt|;
name|ownerId
operator|=
operator|new
name|Long
index|[]
block|{
name|myForm
operator|.
name|getOwnerId
argument_list|()
block|}
expr_stmt|;
block|}
name|String
name|host
init|=
name|myForm
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|Long
name|settingsId
init|=
name|myForm
operator|.
name|getSetting
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"Load Empty Solution"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|host
operator|=
name|myForm
operator|.
name|getHostEmpty
argument_list|()
expr_stmt|;
name|settingsId
operator|=
name|myForm
operator|.
name|getEmptySetting
argument_list|()
expr_stmt|;
block|}
name|DataProperties
name|config
init|=
name|courseTimetablingSolverService
operator|.
name|createConfig
argument_list|(
name|settingsId
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"Load"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
name|config
operator|.
name|setProperty
argument_list|(
literal|"General.SolutionId"
argument_list|,
name|myForm
operator|.
name|getSolutionId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|host
operator|!=
literal|null
condition|)
name|config
operator|.
name|setProperty
argument_list|(
literal|"General.Host"
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|config
operator|.
name|setProperty
argument_list|(
literal|"General.SolverGroupId"
argument_list|,
name|ownerId
argument_list|)
expr_stmt|;
name|courseTimetablingSolverService
operator|.
name|createSolver
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
comment|// Edit
if|if
condition|(
literal|"Select"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|String
name|id
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|ActionMessages
name|errors
init|=
operator|new
name|ActionMessages
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
operator|||
name|id
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"uniqueId"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.invalid"
argument_list|,
literal|"Unique Id : "
operator|+
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showSolutions"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|SolutionDAO
name|dao
init|=
operator|new
name|SolutionDAO
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|dao
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Solution
name|solution
init|=
operator|(
operator|new
name|SolutionDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|solution
operator|==
literal|null
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"uniqueId"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.invalid"
argument_list|,
literal|"Unique Id : "
operator|+
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showSolutions"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|myForm
operator|.
name|addSolution
argument_list|(
name|solution
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|setAttribute
argument_list|(
literal|"Solver.selectedSolutionId"
argument_list|,
name|myForm
operator|.
name|getSolutionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|"Deselect"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|SolutionBean
name|solutionBean
init|=
name|myForm
operator|.
name|getSolutionBean
argument_list|()
decl_stmt|;
if|if
condition|(
name|solutionBean
operator|!=
literal|null
condition|)
block|{
name|myForm
operator|.
name|removeSolution
argument_list|(
name|solutionBean
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|setAttribute
argument_list|(
literal|"Solver.selectedSolutionId"
argument_list|,
name|myForm
operator|.
name|getSolutionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Unload
if|if
condition|(
literal|"Unload"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|SolverProxy
name|solver
init|=
name|courseTimetablingSolverService
operator|.
name|getSolver
argument_list|()
decl_stmt|;
if|if
condition|(
name|solver
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Solver is not started."
argument_list|)
throw|;
if|if
condition|(
name|solver
operator|.
name|isWorking
argument_list|()
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Solver is working, stop it first."
argument_list|)
throw|;
name|courseTimetablingSolverService
operator|.
name|removeSolver
argument_list|()
expr_stmt|;
block|}
comment|// Reload
if|if
condition|(
literal|"Reload Input Data"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|SolverProxy
name|solver
init|=
name|courseTimetablingSolverService
operator|.
name|getSolver
argument_list|()
decl_stmt|;
if|if
condition|(
name|solver
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Solver is not started."
argument_list|)
throw|;
if|if
condition|(
name|solver
operator|.
name|isWorking
argument_list|()
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Solver is working, stop it first."
argument_list|)
throw|;
name|courseTimetablingSolverService
operator|.
name|reload
argument_list|(
name|courseTimetablingSolverService
operator|.
name|createConfig
argument_list|(
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyLong
argument_list|(
literal|"General.SettingsId"
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// WebSolver.reload(request.getSession(), null, null);
block|}
comment|// Save, Save As New, Save& Commit, Save As New& Commit
if|if
condition|(
literal|"Save"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
literal|"Save As New"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
literal|"Save& Commit"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
literal|"Save As New& Commit"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|SolverProxy
name|solver
init|=
name|courseTimetablingSolverService
operator|.
name|getSolver
argument_list|()
decl_stmt|;
if|if
condition|(
name|solver
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Solver is not started."
argument_list|)
throw|;
if|if
condition|(
name|solver
operator|.
name|isWorking
argument_list|()
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Solver is working, stop it first."
argument_list|)
throw|;
name|solver
operator|.
name|setNote
argument_list|(
name|myForm
operator|.
name|getSolverNote
argument_list|()
argument_list|)
expr_stmt|;
name|courseTimetablingSolverService
operator|.
name|getSolver
argument_list|()
operator|.
name|save
argument_list|(
name|op
operator|.
name|indexOf
argument_list|(
literal|"As New"
argument_list|)
operator|>=
literal|0
argument_list|,
name|op
operator|.
name|indexOf
argument_list|(
literal|"Commit"
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"Export Solution"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|String
name|solutionIds
init|=
literal|""
decl_stmt|;
name|CSVFile
name|csvFile
init|=
operator|new
name|CSVFile
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|myForm
operator|.
name|getSolutionBeans
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|SolutionBean
name|sb
init|=
operator|(
name|SolutionBean
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|Solution
name|solution
init|=
operator|(
operator|new
name|SolutionDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|sb
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|solution
operator|!=
literal|null
condition|)
block|{
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|solution
argument_list|,
name|Right
operator|.
name|TimetablesSolutionExportCsv
argument_list|)
expr_stmt|;
name|solution
operator|.
name|export
argument_list|(
name|csvFile
argument_list|,
name|UserProperty
operator|.
name|NameFormat
operator|.
name|get
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|solutionIds
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|solutionIds
operator|+=
literal|"-"
expr_stmt|;
name|solutionIds
operator|+=
name|solution
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
name|ExportUtils
operator|.
name|exportCSV
argument_list|(
name|csvFile
argument_list|,
name|response
argument_list|,
literal|"solution"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|getSolutions
argument_list|(
name|request
argument_list|,
name|myForm
argument_list|)
expr_stmt|;
name|myForm
operator|.
name|setSolver
argument_list|(
name|courseTimetablingSolverService
operator|.
name|getSolver
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showSolutions"
argument_list|)
return|;
block|}
specifier|private
name|void
name|getSolutions
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|ListSolutionsForm
name|myForm
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|WebTable
operator|.
name|setOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"listSolutions.ord"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"ord"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|boolean
name|committedOnly
init|=
operator|!
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|Solver
argument_list|)
decl_stmt|;
name|boolean
name|listAll
init|=
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|DepartmentIndependent
argument_list|)
decl_stmt|;
name|WebTable
name|webTable
init|=
operator|new
name|WebTable
argument_list|(
literal|16
argument_list|,
operator|(
name|committedOnly
condition|?
literal|"Committed Timetables"
else|:
literal|"Saved Timetables"
operator|)
argument_list|,
literal|"listSolutions.do?ord=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Created"
block|,
literal|"Settings"
block|,
literal|"Valid"
block|,
literal|"Commited"
block|,
literal|"Owner"
block|,
literal|"Assign"
block|,
literal|"Total"
block|,
literal|"Time"
block|,
literal|"Stud"
block|,
literal|"Room"
block|,
literal|"Distr"
block|,
literal|"Instr"
block|,
literal|"TooBig"
block|,
literal|"Useless"
block|,
literal|"Pert"
block|,
literal|"Note"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|webTable
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap"
argument_list|)
expr_stmt|;
name|SolutionDAO
name|dao
init|=
operator|new
name|SolutionDAO
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|dao
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Collection
name|solutions
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|listAll
condition|)
name|solutions
operator|=
name|Solution
operator|.
name|findBySessionId
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
else|else
block|{
name|solutions
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
for|for
control|(
name|Qualifiable
name|owner
range|:
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|getQualifiers
argument_list|(
literal|"SolverGroup"
argument_list|)
control|)
block|{
name|SolverGroup
name|sg
init|=
name|SolverGroupDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
operator|(
name|Long
operator|)
name|owner
operator|.
name|getQualifierId
argument_list|()
argument_list|)
decl_stmt|;
name|solutions
operator|.
name|addAll
argument_list|(
name|sg
operator|.
name|getSolutions
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|nrLines
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|solutions
operator|==
literal|null
operator|||
name|solutions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|webTable
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
operator|(
name|committedOnly
condition|?
literal|"<i>No solution committed so far.</i>"
else|:
literal|"<i>No solution saved so far.</i>"
operator|)
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|solutions
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Solution
name|solution
init|=
operator|(
name|Solution
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|committedOnly
operator|&&
operator|!
name|solution
operator|.
name|isCommited
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
continue|continue;
name|String
name|ownerName
init|=
name|solution
operator|.
name|getOwner
argument_list|()
operator|.
name|getAbbv
argument_list|()
decl_stmt|;
name|String
name|onClick
init|=
literal|"onClick=\"document.location='listSolutions.do?op=Select&id="
operator|+
name|solution
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"';\""
decl_stmt|;
name|String
name|note
init|=
name|solution
operator|.
name|getNote
argument_list|()
decl_stmt|;
if|if
condition|(
name|note
operator|!=
literal|null
condition|)
name|note
operator|=
name|note
operator|.
name|replaceAll
argument_list|(
literal|"\n"
argument_list|,
literal|"<br>"
argument_list|)
expr_stmt|;
name|PropertiesInfo
name|globalInfo
init|=
operator|(
name|PropertiesInfo
operator|)
name|solution
operator|.
name|getInfo
argument_list|(
literal|"GlobalInfo"
argument_list|)
decl_stmt|;
name|String
name|assigned
init|=
operator|(
name|globalInfo
operator|==
literal|null
condition|?
literal|"?"
else|:
name|globalInfo
operator|.
name|getProperty
argument_list|(
literal|"Assigned variables"
argument_list|,
literal|"N/A"
argument_list|)
operator|)
decl_stmt|;
name|String
name|totVal
init|=
operator|(
name|globalInfo
operator|==
literal|null
condition|?
literal|"?"
else|:
name|globalInfo
operator|.
name|getProperty
argument_list|(
literal|"Overall solution value"
argument_list|,
literal|"N/A"
argument_list|)
operator|)
decl_stmt|;
name|String
name|timePr
init|=
operator|(
name|globalInfo
operator|==
literal|null
condition|?
literal|"?"
else|:
name|globalInfo
operator|.
name|getProperty
argument_list|(
literal|"Time preferences"
argument_list|,
literal|"N/A"
argument_list|)
operator|)
decl_stmt|;
name|String
name|studConf
init|=
operator|(
name|globalInfo
operator|==
literal|null
condition|?
literal|"?"
else|:
name|globalInfo
operator|.
name|getProperty
argument_list|(
literal|"Student conflicts"
argument_list|,
literal|"N/A"
argument_list|)
operator|)
decl_stmt|;
name|String
name|roomPr
init|=
operator|(
name|globalInfo
operator|==
literal|null
condition|?
literal|"?"
else|:
name|globalInfo
operator|.
name|getProperty
argument_list|(
literal|"Room preferences"
argument_list|,
literal|"N/A"
argument_list|)
operator|)
decl_stmt|;
name|String
name|distPr
init|=
operator|(
name|globalInfo
operator|==
literal|null
condition|?
literal|"?"
else|:
name|globalInfo
operator|.
name|getProperty
argument_list|(
literal|"Distribution preferences"
argument_list|,
literal|"N/A"
argument_list|)
operator|)
decl_stmt|;
name|String
name|instrPr
init|=
operator|(
name|globalInfo
operator|==
literal|null
condition|?
literal|"?"
else|:
name|globalInfo
operator|.
name|getProperty
argument_list|(
literal|"Back-to-back instructor preferences"
argument_list|,
literal|"N/A"
argument_list|)
operator|)
decl_stmt|;
name|String
name|tooBig
init|=
operator|(
name|globalInfo
operator|==
literal|null
condition|?
literal|"?"
else|:
name|globalInfo
operator|.
name|getProperty
argument_list|(
literal|"Too big rooms"
argument_list|,
literal|"N/A"
argument_list|)
operator|)
decl_stmt|;
name|String
name|useless
init|=
operator|(
name|globalInfo
operator|==
literal|null
condition|?
literal|"?"
else|:
name|globalInfo
operator|.
name|getProperty
argument_list|(
literal|"Useless half-hours"
argument_list|,
literal|"N/A"
argument_list|)
operator|)
decl_stmt|;
name|String
name|pertPen
init|=
operator|(
name|globalInfo
operator|==
literal|null
condition|?
literal|"?"
else|:
name|globalInfo
operator|.
name|getProperty
argument_list|(
literal|"Perturbations: Total penalty"
argument_list|,
literal|"N/A"
argument_list|)
operator|)
decl_stmt|;
name|assigned
operator|=
name|assigned
operator|.
name|replaceAll
argument_list|(
literal|" of "
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
literal|"N/A"
operator|.
name|equals
argument_list|(
name|timePr
argument_list|)
operator|&&
name|timePr
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
operator|>=
literal|0
condition|)
name|timePr
operator|=
name|timePr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|timePr
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
literal|"N/A"
operator|.
name|equals
argument_list|(
name|roomPr
argument_list|)
operator|&&
name|roomPr
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
operator|>=
literal|0
condition|)
name|roomPr
operator|=
name|roomPr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|roomPr
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
literal|"N/A"
operator|.
name|equals
argument_list|(
name|instrPr
argument_list|)
operator|&&
name|instrPr
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
operator|>=
literal|0
condition|)
name|instrPr
operator|=
name|instrPr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|instrPr
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
literal|"N/A"
operator|.
name|equals
argument_list|(
name|assigned
argument_list|)
operator|&&
name|assigned
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|)
name|assigned
operator|=
name|assigned
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|assigned
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
literal|"N/A"
operator|.
name|equals
argument_list|(
name|timePr
argument_list|)
operator|&&
name|timePr
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|)
name|timePr
operator|=
name|timePr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|timePr
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
literal|"N/A"
operator|.
name|equals
argument_list|(
name|roomPr
argument_list|)
operator|&&
name|roomPr
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|)
name|roomPr
operator|=
name|roomPr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|roomPr
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
literal|"N/A"
operator|.
name|equals
argument_list|(
name|instrPr
argument_list|)
operator|&&
name|instrPr
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|)
name|instrPr
operator|=
name|instrPr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|instrPr
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
literal|"N/A"
operator|.
name|equals
argument_list|(
name|distPr
argument_list|)
operator|&&
name|distPr
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|)
name|distPr
operator|=
name|distPr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|distPr
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
literal|"N/A"
operator|.
name|equals
argument_list|(
name|tooBig
argument_list|)
operator|&&
name|tooBig
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|)
name|tooBig
operator|=
name|tooBig
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|tooBig
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
literal|"N/A"
operator|.
name|equals
argument_list|(
name|useless
argument_list|)
operator|&&
name|useless
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|)
name|useless
operator|=
name|useless
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|useless
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
name|studConf
operator|=
name|studConf
operator|.
name|replaceAll
argument_list|(
literal|" \\["
argument_list|,
literal|"("
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\]"
argument_list|,
literal|")"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|", "
argument_list|,
literal|","
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"hard:"
argument_list|,
literal|"h"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"distance:"
argument_list|,
literal|"d"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"commited:"
argument_list|,
literal|"c"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"committed:"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|String
name|settings
init|=
literal|null
decl_stmt|;
name|String
name|type
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|solution
operator|.
name|getParameters
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SolverParameter
name|p
init|=
operator|(
name|SolverParameter
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"General.SettingsId"
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getDefinition
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|SolverPredefinedSetting
name|set
init|=
operator|(
operator|new
name|SolverPredefinedSettingDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|p
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|set
operator|!=
literal|null
condition|)
name|settings
operator|=
name|set
operator|.
name|getDescription
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|"Basic.Mode"
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getDefinition
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|type
operator|=
name|p
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
name|type
operator|=
operator|(
name|settings
operator|==
literal|null
condition|?
name|type
operator|==
literal|null
condition|?
literal|"?"
else|:
name|type
else|:
name|settings
operator|)
expr_stmt|;
name|String
name|bgColor
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|myForm
operator|.
name|getSolutionBean
argument_list|(
name|solution
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
name|bgColor
operator|=
literal|"rgb(168,187,225)"
expr_stmt|;
name|webTable
operator|.
name|addLine
argument_list|(
name|onClick
argument_list|,
operator|new
name|String
index|[]
block|{
name|sDF
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|solution
operator|.
name|getCreated
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
block|,
name|type
block|,
operator|(
name|solution
operator|.
name|isValid
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"<IMG border='0' align='absmiddle' src='images/tick.gif'>"
else|:
literal|""
operator|)
block|,
operator|(
name|solution
operator|.
name|isCommited
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
name|sDF
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|solution
operator|.
name|getCommitDate
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
else|:
literal|""
operator|)
block|,
name|ownerName
block|,
name|assigned
block|,
name|totVal
block|,
name|timePr
block|,
name|studConf
block|,
name|roomPr
block|,
name|distPr
block|,
name|instrPr
block|,
name|tooBig
block|,
name|useless
block|,
name|pertPen
block|,
name|note
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|solution
operator|.
name|getCreated
argument_list|()
block|,
name|type
block|,
operator|(
name|solution
operator|.
name|isValid
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
else|:
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
operator|)
block|,
operator|(
name|solution
operator|.
name|isCommited
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
operator|new
name|Long
argument_list|(
name|solution
operator|.
name|getCommitDate
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
else|:
operator|new
name|Long
argument_list|(
literal|0
argument_list|)
operator|)
block|,
name|ownerName
block|,
name|assigned
block|,
name|totVal
block|,
name|timePr
block|,
name|studConf
block|,
name|roomPr
block|,
name|distPr
block|,
name|instrPr
block|,
name|tooBig
block|,
name|useless
block|,
name|pertPen
block|,
operator|(
name|solution
operator|.
name|getNote
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|solution
operator|.
name|getNote
argument_list|()
operator|)
block|}
argument_list|)
operator|.
name|setBgColor
argument_list|(
name|bgColor
argument_list|)
expr_stmt|;
name|nrLines
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|nrLines
operator|==
literal|0
condition|)
name|webTable
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"<i>No solution saved by "
operator|+
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" so far.</i>"
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|setAttribute
argument_list|(
literal|"ListSolutions.table"
argument_list|,
name|webTable
operator|.
name|printTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"listSolutions.ord"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

