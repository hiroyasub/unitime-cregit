begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.1 (University Timetabling Application)  * Copyright (C) 2008, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|util
operator|.
name|MessageResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|HibernateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|criterion
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|Web
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|WebTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|RoomListForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Building
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentRoomFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|MidtermPeriodPreferenceModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExternalRoom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|GlobalRoomFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|NonUniversityLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PeriodPreferenceModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Roles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Room
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomDept
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|DepartmentNameComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|RoomFeatureDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|RoomTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|TimetableManagerDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|LookupTables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|PdfEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|PdfWebTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|RequiredTimeTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|FontFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Paragraph
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Rectangle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|pdf
operator|.
name|PdfPTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|pdf
operator|.
name|PdfWriter
import|;
end_import

begin_comment
comment|/**  * MyEclipse Struts Creation date: 02-18-2005  *   * XDoclet definition:  *   * @struts:action path="/RoomList" name="roomListForm"  *                input="/admin/roomList.jsp" scope="request" validate="false"  */
end_comment

begin_class
specifier|public
class|class
name|RoomListAction
extends|extends
name|Action
block|{
comment|// --------------------------------------------------------- Instance
comment|// Variables
comment|// --------------------------------------------------------- Methods
comment|/** 	 * Method execute 	 *  	 * @param mapping 	 * @param form 	 * @param request 	 * @param response 	 * @return ActionForward 	 * @throws HibernateException 	 */
specifier|public
name|ActionForward
name|execute
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
name|HttpSession
name|webSession
init|=
name|request
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Web
operator|.
name|isLoggedIn
argument_list|(
name|webSession
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Access Denied."
argument_list|)
throw|;
block|}
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|webSession
argument_list|)
decl_stmt|;
name|RoomListForm
name|roomListForm
init|=
operator|(
name|RoomListForm
operator|)
name|form
decl_stmt|;
name|ActionMessages
name|errors
init|=
operator|new
name|ActionMessages
argument_list|()
decl_stmt|;
comment|//get deptCode from request - for user with only one department
name|String
name|dept
init|=
operator|(
name|String
operator|)
name|request
operator|.
name|getAttribute
argument_list|(
literal|"deptCode"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dept
operator|!=
literal|null
condition|)
block|{
name|roomListForm
operator|.
name|setDeptCodeX
argument_list|(
name|dept
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|webSession
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|DEPT_CODE_ATTR_ROOM_NAME
argument_list|)
operator|!=
literal|null
operator|&&
operator|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|==
literal|null
operator|)
condition|)
block|{
name|roomListForm
operator|.
name|setDeptCodeX
argument_list|(
name|webSession
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|DEPT_CODE_ATTR_ROOM_NAME
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Set Session Variable
if|if
condition|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|webSession
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|DEPT_CODE_ATTR_ROOM_NAME
argument_list|,
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Validate input
name|errors
operator|=
name|roomListForm
operator|.
name|validate
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
expr_stmt|;
comment|// Validation fails
if|if
condition|(
name|errors
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showRoomSearch"
argument_list|)
return|;
block|}
name|Session
name|session
init|=
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Long
name|sessionId
init|=
name|session
operator|.
name|getUniqueId
argument_list|()
decl_stmt|;
name|String
name|mgrId
init|=
operator|(
name|String
operator|)
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|TMTBL_MGR_ID_ATTR_NAME
argument_list|)
decl_stmt|;
name|TimetableManager
name|owner
init|=
operator|(
operator|new
name|TimetableManagerDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|mgrId
argument_list|)
argument_list|)
decl_stmt|;
name|roomListForm
operator|.
name|setEditRoomSharing
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|roomListForm
operator|.
name|setCanAdd
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|roomListForm
operator|.
name|setCanAddNonUniv
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|roomListForm
operator|.
name|setCanAddSpecial
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|boolean
name|hasExternalRooms
init|=
operator|!
name|ExternalRoom
operator|.
name|findAll
argument_list|(
name|sessionId
argument_list|)
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
if|if
condition|(
name|Constants
operator|.
name|ALL_OPTION_LABEL
operator|.
name|equals
argument_list|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|owner
operator|.
name|departmentsForSession
argument_list|(
name|sessionId
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|d
init|=
operator|(
name|Department
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|.
name|isEditableBy
argument_list|(
name|user
argument_list|)
condition|)
block|{
name|roomListForm
operator|.
name|setCanAdd
argument_list|(
name|user
operator|.
name|getRole
argument_list|()
operator|.
name|equals
argument_list|(
name|Roles
operator|.
name|ADMIN_ROLE
argument_list|)
argument_list|)
expr_stmt|;
comment|//&& !hasExternalRooms
name|roomListForm
operator|.
name|setCanAddNonUniv
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|roomListForm
operator|.
name|setCanAddSpecial
argument_list|(
name|hasExternalRooms
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
if|else if
condition|(
name|user
operator|.
name|getRole
argument_list|()
operator|.
name|equals
argument_list|(
name|Roles
operator|.
name|ADMIN_ROLE
argument_list|)
condition|)
block|{
name|roomListForm
operator|.
name|setEditRoomSharing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|roomListForm
operator|.
name|setCanAdd
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// !hasExternalRooms
name|roomListForm
operator|.
name|setCanAddNonUniv
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|roomListForm
operator|.
name|setCanAddSpecial
argument_list|(
name|hasExternalRooms
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"Exam"
operator|.
name|equals
argument_list|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
argument_list|)
operator|||
literal|"EExam"
operator|.
name|equals
argument_list|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|user
operator|.
name|getRole
argument_list|()
operator|.
name|equals
argument_list|(
name|Roles
operator|.
name|EXAM_MGR_ROLE
argument_list|)
operator|&&
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|canExamTimetable
argument_list|()
condition|)
block|{
name|roomListForm
operator|.
name|setEditRoomSharing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|owner
operator|.
name|departmentsForSession
argument_list|(
name|sessionId
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|roomListForm
operator|.
name|setCanAddSpecial
argument_list|(
name|hasExternalRooms
argument_list|)
expr_stmt|;
name|roomListForm
operator|.
name|setCanAddNonUniv
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|owner
operator|.
name|departmentsForSession
argument_list|(
name|sessionId
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|d
init|=
operator|(
name|Department
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equals
argument_list|(
name|d
operator|.
name|getDeptCode
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|d
operator|.
name|isEditableBy
argument_list|(
name|user
argument_list|)
condition|)
block|{
name|roomListForm
operator|.
name|setEditRoomSharing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|roomListForm
operator|.
name|setCanAddNonUniv
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|roomListForm
operator|.
name|setCanAddSpecial
argument_list|(
name|hasExternalRooms
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"All"
argument_list|)
condition|)
block|{
name|roomListForm
operator|.
name|setRooms
argument_list|(
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
operator|.
name|getRoomsFast
argument_list|(
name|Department
operator|.
name|getDeptCodesForUser
argument_list|(
name|user
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"Exam"
argument_list|)
condition|)
block|{
name|roomListForm
operator|.
name|setRooms
argument_list|(
name|Location
operator|.
name|findAllExamLocations
argument_list|(
name|sessionId
argument_list|,
name|Exam
operator|.
name|sExamTypeFinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"EExam"
argument_list|)
condition|)
block|{
name|roomListForm
operator|.
name|setRooms
argument_list|(
name|Location
operator|.
name|findAllExamLocations
argument_list|(
name|sessionId
argument_list|,
name|Exam
operator|.
name|sExamTypeMidterm
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|roomListForm
operator|.
name|setRooms
argument_list|(
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
operator|.
name|getRoomsFast
argument_list|(
operator|new
name|String
index|[]
block|{
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|examType
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
literal|"Exam"
operator|.
name|equals
argument_list|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
argument_list|)
condition|)
name|examType
operator|=
name|Exam
operator|.
name|sExamTypeFinal
expr_stmt|;
if|if
condition|(
literal|"EExam"
operator|.
name|equals
argument_list|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
argument_list|)
condition|)
name|examType
operator|=
name|Exam
operator|.
name|sExamTypeMidterm
expr_stmt|;
if|if
condition|(
literal|"Export PDF"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"op"
argument_list|)
argument_list|)
condition|)
block|{
name|buildPdfWebTable
argument_list|(
name|request
argument_list|,
name|roomListForm
argument_list|,
literal|"yes"
operator|.
name|equals
argument_list|(
name|Settings
operator|.
name|getSettingValue
argument_list|(
name|user
argument_list|,
name|Constants
operator|.
name|SETTINGS_ROOMS_FEATURES_ONE_COLUMN
argument_list|)
argument_list|)
argument_list|,
name|examType
argument_list|)
expr_stmt|;
block|}
comment|// build web table for university locations
name|buildWebTable
argument_list|(
name|request
argument_list|,
name|roomListForm
argument_list|,
literal|"yes"
operator|.
name|equals
argument_list|(
name|Settings
operator|.
name|getSettingValue
argument_list|(
name|user
argument_list|,
name|Constants
operator|.
name|SETTINGS_ROOMS_FEATURES_ONE_COLUMN
argument_list|)
argument_list|)
argument_list|,
name|examType
argument_list|)
expr_stmt|;
comment|//set request attribute for department
name|LookupTables
operator|.
name|setupDeptsForUser
argument_list|(
name|request
argument_list|,
name|user
argument_list|,
name|sessionId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showRoomList"
argument_list|)
return|;
block|}
comment|/** 	 *  	 * @param request 	 * @param roomListForm 	 * @throws Exception  	 */
specifier|private
name|void
name|buildWebTable
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|RoomListForm
name|roomListForm
parameter_list|,
name|boolean
name|featuresOneColumn
parameter_list|,
name|int
name|examType
parameter_list|)
throws|throws
name|Exception
block|{
name|MessageResources
name|rsc
init|=
name|getResources
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|ActionMessages
name|errors
init|=
operator|new
name|ActionMessages
argument_list|()
decl_stmt|;
name|HttpSession
name|httpSession
init|=
name|request
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Collection
name|rooms
init|=
name|roomListForm
operator|.
name|getRooms
argument_list|()
decl_stmt|;
if|if
condition|(
name|rooms
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"searchResult"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"No rooms for the selected department were found."
argument_list|)
argument_list|)
expr_stmt|;
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|httpSession
argument_list|)
decl_stmt|;
name|Long
name|sessionId
init|=
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
operator|.
name|getSessionId
argument_list|()
decl_stmt|;
name|ArrayList
name|globalRoomFeatures
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Set
name|deptRoomFeatures
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
name|int
name|colspan
init|=
literal|0
decl_stmt|;
name|String
name|mgrId
init|=
operator|(
name|String
operator|)
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|TMTBL_MGR_ID_ATTR_NAME
argument_list|)
decl_stmt|;
name|TimetableManagerDAO
name|tdao
init|=
operator|new
name|TimetableManagerDAO
argument_list|()
decl_stmt|;
name|TimetableManager
name|owner
init|=
name|tdao
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|mgrId
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|isAdmin
init|=
name|user
operator|.
name|getRole
argument_list|()
operator|.
name|equals
argument_list|(
name|Roles
operator|.
name|ADMIN_ROLE
argument_list|)
operator|||
name|user
operator|.
name|getRole
argument_list|()
operator|.
name|equals
argument_list|(
name|Roles
operator|.
name|EXAM_MGR_ROLE
argument_list|)
decl_stmt|;
name|Set
name|ownerDepts
init|=
name|owner
operator|.
name|departmentsForSession
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
name|Set
name|externalDepartments
init|=
name|Department
operator|.
name|findAllExternal
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
name|Set
name|depts
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"All"
argument_list|)
condition|)
block|{
if|if
condition|(
name|isAdmin
condition|)
block|{
name|depts
operator|=
name|Department
operator|.
name|findAll
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|depts
operator|=
name|Department
operator|.
name|findAllOwned
argument_list|(
name|sessionId
argument_list|,
name|owner
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"Exam"
argument_list|)
condition|)
block|{
name|depts
operator|=
operator|new
name|HashSet
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"EExam"
argument_list|)
condition|)
block|{
name|depts
operator|=
operator|new
name|HashSet
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|depts
operator|=
operator|new
name|HashSet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|depts
operator|.
name|add
argument_list|(
name|Department
operator|.
name|findByDeptCode
argument_list|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
argument_list|,
name|sessionId
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
literal|null
decl_stmt|;
try|try
block|{
name|RoomFeatureDAO
name|d
init|=
operator|new
name|RoomFeatureDAO
argument_list|()
decl_stmt|;
name|hibSession
operator|=
name|d
operator|.
name|getSession
argument_list|()
expr_stmt|;
name|List
name|list
init|=
name|hibSession
operator|.
name|createCriteria
argument_list|(
name|GlobalRoomFeature
operator|.
name|class
argument_list|)
operator|.
name|addOrder
argument_list|(
name|Order
operator|.
name|asc
argument_list|(
literal|"label"
argument_list|)
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|list
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|GlobalRoomFeature
name|rf
init|=
operator|(
name|GlobalRoomFeature
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|globalRoomFeatures
operator|.
name|add
argument_list|(
name|rf
argument_list|)
expr_stmt|;
block|}
name|Debug
operator|.
name|debug
argument_list|(
literal|"global room feature: "
operator|+
name|globalRoomFeatures
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"All"
argument_list|)
condition|)
block|{
name|String
index|[]
name|deptCodes
init|=
name|Department
operator|.
name|getDeptCodesForUser
argument_list|(
name|user
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|deptCodes
operator|!=
literal|null
condition|)
name|deptRoomFeatures
operator|.
name|addAll
argument_list|(
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct f from DepartmentRoomFeature f inner join f.department d "
operator|+
literal|"where d.session.uniqueId=:sessionId and d.deptCode in ("
operator|+
name|Constants
operator|.
name|arrayToStr
argument_list|(
name|deptCodes
argument_list|,
literal|"'"
argument_list|,
literal|", "
argument_list|)
operator|+
literal|") order by f.label"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|deptRoomFeatures
operator|.
name|addAll
argument_list|(
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct f from DepartmentRoomFeature f inner join f.department d where "
operator|+
literal|"d.session.uniqueId=:sessionId order by f.label"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"EExam"
argument_list|)
condition|)
block|{
block|}
if|else if
condition|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"Exam"
argument_list|)
condition|)
block|{
block|}
else|else
block|{
name|deptRoomFeatures
operator|.
name|addAll
argument_list|(
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct f from DepartmentRoomFeature f inner join f.department d "
operator|+
literal|"where d.session.uniqueId=:sessionId and d.deptCode = :deptCode order by f.label"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"deptCode"
argument_list|,
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Debug
operator|.
name|debug
argument_list|(
literal|"manager room feature: "
operator|+
name|deptRoomFeatures
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|//build headings for university rooms
name|String
name|fixedHeading1
index|[]
index|[]
init|=
operator|(
name|examType
operator|>=
literal|0
condition|?
operator|(
name|featuresOneColumn
condition|?
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"Bldg"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Room"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Exam Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Period Preferences"
block|,
literal|"center"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Groups"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Features"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|}
else|:
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"Bldg"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Room"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Exam Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Period Preferences"
block|,
literal|"center"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Groups"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|}
operator|)
else|:
operator|(
name|featuresOneColumn
condition|?
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"Bldg"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Room"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Availability"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Departments"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Control"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Groups"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Features"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|}
else|:
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"Bldg"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Room"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Availability"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Departments"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Control"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Groups"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|}
operator|)
operator|)
decl_stmt|;
name|String
name|heading1
index|[]
init|=
operator|new
name|String
index|[
name|fixedHeading1
operator|.
name|length
operator|+
operator|(
name|featuresOneColumn
condition|?
literal|0
else|:
operator|(
name|globalRoomFeatures
operator|.
name|size
argument_list|()
operator|+
name|deptRoomFeatures
operator|.
name|size
argument_list|()
operator|)
operator|)
index|]
decl_stmt|;
name|String
name|alignment1
index|[]
init|=
operator|new
name|String
index|[
name|heading1
operator|.
name|length
index|]
decl_stmt|;
name|boolean
name|sorted1
index|[]
init|=
operator|new
name|boolean
index|[
name|heading1
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fixedHeading1
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|heading1
index|[
name|i
index|]
operator|=
name|fixedHeading1
index|[
name|i
index|]
index|[
literal|0
index|]
expr_stmt|;
name|alignment1
index|[
name|i
index|]
operator|=
name|fixedHeading1
index|[
name|i
index|]
index|[
literal|1
index|]
expr_stmt|;
name|sorted1
index|[
name|i
index|]
operator|=
operator|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|fixedHeading1
index|[
name|i
index|]
index|[
literal|2
index|]
argument_list|)
operator|)
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
name|colspan
operator|=
name|fixedHeading1
operator|.
name|length
expr_stmt|;
if|if
condition|(
operator|!
name|featuresOneColumn
condition|)
block|{
name|int
name|i
init|=
name|fixedHeading1
operator|.
name|length
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|globalRoomFeatures
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|GlobalRoomFeature
name|grf
init|=
operator|(
name|GlobalRoomFeature
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|heading1
index|[
name|i
index|]
operator|=
literal|"<span title='"
operator|+
name|grf
operator|.
name|getLabel
argument_list|()
operator|+
literal|"'>"
operator|+
name|grf
operator|.
name|getAbbv
argument_list|()
operator|+
literal|"</span>"
expr_stmt|;
name|alignment1
index|[
name|i
index|]
operator|=
literal|"center"
expr_stmt|;
name|sorted1
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|it
init|=
name|deptRoomFeatures
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentRoomFeature
name|drf
init|=
operator|(
name|DepartmentRoomFeature
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|title
init|=
name|drf
operator|.
name|getLabel
argument_list|()
decl_stmt|;
if|if
condition|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"All"
argument_list|)
condition|)
block|{
name|Department
name|dept
init|=
name|drf
operator|.
name|getDepartment
argument_list|()
decl_stmt|;
name|title
operator|+=
literal|" ("
operator|+
name|dept
operator|.
name|getShortLabel
argument_list|()
operator|+
literal|")"
expr_stmt|;
block|}
name|heading1
index|[
name|i
index|]
operator|=
literal|"<span title='"
operator|+
name|title
operator|+
literal|"'>"
operator|+
name|drf
operator|.
name|getAbbv
argument_list|()
operator|+
literal|"</span>"
expr_stmt|;
name|alignment1
index|[
name|i
index|]
operator|=
literal|"center"
expr_stmt|;
name|sorted1
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|colspan
operator|=
name|i
expr_stmt|;
block|}
comment|//build headings for non-univ locations
name|String
name|fixedHeading2
index|[]
index|[]
init|=
operator|(
name|examType
operator|>=
literal|0
condition|?
operator|(
name|featuresOneColumn
condition|?
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"Location"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Exam Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Period Preferences"
block|,
literal|"center"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Groups"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Features"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|}
else|:
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"Location"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Exam Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Period Preferences"
block|,
literal|"center"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Groups"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|}
operator|)
else|:
operator|(
name|featuresOneColumn
condition|?
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"Location"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"IgnTooFar"
block|,
literal|"center"
block|,
literal|"true"
block|}
block|,
block|{
literal|"IgnChecks"
block|,
literal|"center"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Availability"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Departments"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Control"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Groups"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Features"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|}
else|:
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"Location"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"IgnTooFar"
block|,
literal|"center"
block|,
literal|"true"
block|}
block|,
block|{
literal|"IgnChecks"
block|,
literal|"center"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Availability"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Departments"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Control"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Groups"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|}
operator|)
operator|)
decl_stmt|;
name|String
name|heading2
index|[]
init|=
operator|new
name|String
index|[
name|fixedHeading2
operator|.
name|length
operator|+
operator|(
name|featuresOneColumn
condition|?
literal|0
else|:
operator|(
name|globalRoomFeatures
operator|.
name|size
argument_list|()
operator|+
name|deptRoomFeatures
operator|.
name|size
argument_list|()
operator|)
operator|)
index|]
decl_stmt|;
name|String
name|alignment2
index|[]
init|=
operator|new
name|String
index|[
name|heading2
operator|.
name|length
index|]
decl_stmt|;
name|boolean
name|sorted2
index|[]
init|=
operator|new
name|boolean
index|[
name|heading2
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fixedHeading2
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|heading2
index|[
name|i
index|]
operator|=
name|fixedHeading2
index|[
name|i
index|]
index|[
literal|0
index|]
expr_stmt|;
name|alignment2
index|[
name|i
index|]
operator|=
name|fixedHeading2
index|[
name|i
index|]
index|[
literal|1
index|]
expr_stmt|;
name|sorted2
index|[
name|i
index|]
operator|=
operator|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|fixedHeading2
index|[
name|i
index|]
index|[
literal|2
index|]
argument_list|)
operator|)
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|featuresOneColumn
condition|)
block|{
name|int
name|i
init|=
name|fixedHeading2
operator|.
name|length
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|globalRoomFeatures
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|GlobalRoomFeature
name|grf
init|=
operator|(
name|GlobalRoomFeature
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|heading2
index|[
name|i
index|]
operator|=
literal|"<span title='"
operator|+
name|grf
operator|.
name|getLabel
argument_list|()
operator|+
literal|"'>"
operator|+
name|grf
operator|.
name|getAbbv
argument_list|()
operator|+
literal|"</span>"
expr_stmt|;
name|alignment2
index|[
name|i
index|]
operator|=
literal|"center"
expr_stmt|;
name|sorted2
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|it
init|=
name|deptRoomFeatures
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentRoomFeature
name|drf
init|=
operator|(
name|DepartmentRoomFeature
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|title
init|=
name|drf
operator|.
name|getLabel
argument_list|()
decl_stmt|;
if|if
condition|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"All"
argument_list|)
condition|)
block|{
name|Department
name|dept
init|=
name|drf
operator|.
name|getDepartment
argument_list|()
decl_stmt|;
name|title
operator|+=
literal|" ("
operator|+
name|dept
operator|.
name|getShortLabel
argument_list|()
operator|+
literal|")"
expr_stmt|;
block|}
name|heading2
index|[
name|i
index|]
operator|=
literal|"<span title='"
operator|+
name|title
operator|+
literal|"'>"
operator|+
name|drf
operator|.
name|getAbbv
argument_list|()
operator|+
literal|"</span>"
expr_stmt|;
name|alignment2
index|[
name|i
index|]
operator|=
literal|"center"
expr_stmt|;
name|sorted2
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
name|TreeSet
argument_list|<
name|RoomType
argument_list|>
name|roomTypes
init|=
operator|new
name|TreeSet
argument_list|<
name|RoomType
argument_list|>
argument_list|(
name|RoomTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|()
argument_list|)
decl_stmt|;
name|Hashtable
argument_list|<
name|RoomType
argument_list|,
name|WebTable
argument_list|>
name|tables
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|RoomType
name|t
range|:
name|roomTypes
control|)
block|{
name|WebTable
operator|.
name|setOrder
argument_list|(
name|httpSession
argument_list|,
name|t
operator|.
name|getReference
argument_list|()
operator|+
literal|".ord"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
name|t
operator|.
name|getReference
argument_list|()
operator|+
literal|"Ord"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|WebTable
name|table
init|=
operator|(
name|t
operator|.
name|isRoom
argument_list|()
condition|?
operator|new
name|WebTable
argument_list|(
name|heading1
operator|.
name|length
argument_list|,
name|t
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|"roomList.do?"
operator|+
name|t
operator|.
name|getReference
argument_list|()
operator|+
literal|"Ord=%%"
argument_list|,
name|heading1
argument_list|,
name|alignment1
argument_list|,
name|sorted1
argument_list|)
else|:
operator|new
name|WebTable
argument_list|(
name|heading2
operator|.
name|length
argument_list|,
name|t
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|"roomList.do?"
operator|+
name|t
operator|.
name|getReference
argument_list|()
operator|+
literal|"Ord=%%"
argument_list|,
name|heading2
argument_list|,
name|alignment2
argument_list|,
name|sorted2
argument_list|)
operator|)
decl_stmt|;
name|table
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap"
argument_list|)
expr_stmt|;
name|tables
operator|.
name|put
argument_list|(
name|t
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
name|boolean
name|timeVertical
init|=
name|RequiredTimeTable
operator|.
name|getTimeGridVertical
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|boolean
name|gridAsText
init|=
name|RequiredTimeTable
operator|.
name|getTimeGridAsText
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|String
name|timeGridSize
init|=
name|RequiredTimeTable
operator|.
name|getTimeGridSize
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Department
name|dept
init|=
operator|new
name|Department
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"All"
argument_list|)
condition|)
block|{
name|dept
operator|=
name|Department
operator|.
name|findByDeptCode
argument_list|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
argument_list|,
name|sessionId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dept
operator|=
literal|null
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|iter
init|=
name|rooms
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|location
init|=
operator|(
name|Location
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|editable
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|x
init|=
name|location
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
operator|!
name|editable
operator|&&
name|x
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomDept
name|rd
init|=
operator|(
name|RoomDept
operator|)
name|x
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ownerDepts
operator|.
name|contains
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
block|{
name|editable
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|isAdmin
condition|)
name|editable
operator|=
literal|true
expr_stmt|;
name|Room
name|room
init|=
operator|(
name|location
operator|instanceof
name|Room
condition|?
operator|(
name|Room
operator|)
name|location
else|:
literal|null
operator|)
decl_stmt|;
name|Building
name|bldg
init|=
operator|(
name|room
operator|==
literal|null
condition|?
literal|null
else|:
name|room
operator|.
name|getBuilding
argument_list|()
operator|)
decl_stmt|;
name|DecimalFormat
name|df5
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"####0"
argument_list|)
decl_stmt|;
name|String
name|text
index|[]
init|=
operator|new
name|String
index|[
name|Math
operator|.
name|max
argument_list|(
name|heading1
operator|.
name|length
argument_list|,
name|heading2
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
name|Comparable
name|comp
index|[]
init|=
operator|new
name|Comparable
index|[
name|text
operator|.
name|length
index|]
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|bldg
operator|!=
literal|null
condition|)
block|{
name|text
index|[
name|idx
index|]
operator|=
operator|(
name|editable
condition|?
literal|""
else|:
literal|"<font color='gray'>"
operator|)
operator|+
operator|(
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"<i>"
else|:
literal|""
operator|)
operator|+
name|bldg
operator|.
name|getAbbreviation
argument_list|()
operator|+
operator|(
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"</i>"
else|:
literal|""
operator|)
operator|+
operator|(
name|editable
condition|?
literal|""
else|:
literal|"</font>"
operator|)
expr_stmt|;
name|comp
index|[
literal|0
index|]
operator|=
name|location
operator|.
name|getLabel
argument_list|()
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
name|text
index|[
name|idx
index|]
operator|=
operator|(
name|editable
condition|?
literal|""
else|:
literal|"<font color='gray'>"
operator|)
operator|+
operator|(
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"<i>"
else|:
literal|""
operator|)
operator|+
operator|(
name|room
operator|==
literal|null
condition|?
name|location
operator|.
name|getLabel
argument_list|()
else|:
name|room
operator|.
name|getRoomNumber
argument_list|()
operator|)
operator|+
operator|(
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"</i>"
else|:
literal|""
operator|)
operator|+
operator|(
name|editable
condition|?
literal|""
else|:
literal|"</font>"
operator|)
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
name|location
operator|.
name|getLabel
argument_list|()
expr_stmt|;
name|idx
operator|++
expr_stmt|;
name|text
index|[
name|idx
index|]
operator|=
operator|(
name|editable
condition|?
literal|""
else|:
literal|"<font color='gray'>"
operator|)
operator|+
name|df5
operator|.
name|format
argument_list|(
name|location
operator|.
name|getCapacity
argument_list|()
argument_list|)
operator|+
operator|(
name|editable
condition|?
literal|""
else|:
literal|"</font>"
operator|)
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
operator|new
name|Long
argument_list|(
name|location
operator|.
name|getCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
if|if
condition|(
name|examType
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|location
operator|.
name|isExamEnabled
argument_list|(
name|examType
argument_list|)
condition|)
block|{
name|text
index|[
name|idx
index|]
operator|=
operator|(
name|editable
condition|?
literal|""
else|:
literal|"<font color='gray'>"
operator|)
operator|+
name|df5
operator|.
name|format
argument_list|(
name|location
operator|.
name|getExamCapacity
argument_list|()
argument_list|)
operator|+
operator|(
name|editable
condition|?
literal|""
else|:
literal|"</font>"
operator|)
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
name|location
operator|.
name|getExamCapacity
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|text
index|[
name|idx
index|]
operator|=
literal|"&nbsp;"
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
if|if
condition|(
name|location
operator|.
name|isExamEnabled
argument_list|(
name|examType
argument_list|)
condition|)
block|{
if|if
condition|(
name|gridAsText
condition|)
name|text
index|[
name|idx
index|]
operator|=
name|location
operator|.
name|getExamPreferencesAbbreviationHtml
argument_list|(
name|examType
argument_list|)
expr_stmt|;
else|else
block|{
if|if
condition|(
name|examType
operator|==
name|Exam
operator|.
name|sExamTypeMidterm
condition|)
block|{
name|MidtermPeriodPreferenceModel
name|epx
init|=
operator|new
name|MidtermPeriodPreferenceModel
argument_list|(
name|location
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|epx
operator|.
name|load
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|text
index|[
name|idx
index|]
operator|=
name|epx
operator|.
name|toString
argument_list|(
literal|true
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|", "
argument_list|,
literal|"<br>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PeriodPreferenceModel
name|px
init|=
operator|new
name|PeriodPreferenceModel
argument_list|(
name|location
operator|.
name|getSession
argument_list|()
argument_list|,
name|examType
argument_list|)
decl_stmt|;
name|px
operator|.
name|load
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|RequiredTimeTable
name|rtt
init|=
operator|new
name|RequiredTimeTable
argument_list|(
name|px
argument_list|)
decl_stmt|;
name|File
name|imageFileName
init|=
literal|null
decl_stmt|;
try|try
block|{
name|imageFileName
operator|=
name|rtt
operator|.
name|createImage
argument_list|(
name|timeVertical
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|String
name|title
init|=
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|imageFileName
operator|!=
literal|null
condition|)
name|text
index|[
name|idx
index|]
operator|=
literal|"<img border='0' src='temp/"
operator|+
operator|(
name|imageFileName
operator|.
name|getName
argument_list|()
operator|)
operator|+
literal|"' title='"
operator|+
name|title
operator|+
literal|"'>"
expr_stmt|;
else|else
name|text
index|[
name|idx
index|]
operator|=
name|location
operator|.
name|getExamPreferencesAbbreviationHtml
argument_list|(
name|examType
argument_list|)
expr_stmt|;
block|}
block|}
name|comp
index|[
name|idx
index|]
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|text
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
literal|null
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
block|}
else|else
block|{
name|PreferenceLevel
name|roomPref
init|=
name|location
operator|.
name|getRoomPreferenceLevel
argument_list|(
name|dept
argument_list|)
decl_stmt|;
if|if
condition|(
name|editable
operator|&&
name|roomPref
operator|!=
literal|null
operator|&&
operator|!
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|roomPref
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|room
operator|==
literal|null
condition|)
block|{
name|text
index|[
literal|0
index|]
operator|=
operator|(
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"<i>"
else|:
literal|""
operator|)
operator|+
literal|"<span style='color:"
operator|+
name|roomPref
operator|.
name|prefcolor
argument_list|()
operator|+
literal|";font-weight:bold;' title='"
operator|+
name|roomPref
operator|.
name|getPrefName
argument_list|()
operator|+
literal|" "
operator|+
name|location
operator|.
name|getLabel
argument_list|()
operator|+
literal|"'>"
operator|+
name|location
operator|.
name|getLabel
argument_list|()
operator|+
literal|"</span>"
operator|+
operator|(
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"</i>"
else|:
literal|""
operator|)
expr_stmt|;
block|}
else|else
block|{
name|text
index|[
literal|0
index|]
operator|=
operator|(
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"<i>"
else|:
literal|""
operator|)
operator|+
literal|"<span style='color:"
operator|+
name|roomPref
operator|.
name|prefcolor
argument_list|()
operator|+
literal|";font-weight:bold;' title='"
operator|+
name|roomPref
operator|.
name|getPrefName
argument_list|()
operator|+
literal|" "
operator|+
name|location
operator|.
name|getLabel
argument_list|()
operator|+
literal|"'>"
operator|+
operator|(
name|bldg
operator|==
literal|null
condition|?
literal|""
else|:
name|bldg
operator|.
name|getAbbreviation
argument_list|()
operator|)
operator|+
literal|"</span>"
operator|+
operator|(
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"</i>"
else|:
literal|""
operator|)
expr_stmt|;
name|text
index|[
literal|1
index|]
operator|=
operator|(
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"<i>"
else|:
literal|""
operator|)
operator|+
literal|"<span style='color:"
operator|+
name|roomPref
operator|.
name|prefcolor
argument_list|()
operator|+
literal|";font-weight:bold;' title='"
operator|+
name|roomPref
operator|.
name|getPrefName
argument_list|()
operator|+
literal|" "
operator|+
name|location
operator|.
name|getLabel
argument_list|()
operator|+
literal|"'>"
operator|+
name|room
operator|.
name|getRoomNumber
argument_list|()
operator|+
literal|"</span>"
operator|+
operator|(
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"</i>"
else|:
literal|""
operator|)
expr_stmt|;
block|}
block|}
comment|//ignore too far
if|if
condition|(
name|location
operator|instanceof
name|NonUniversityLocation
condition|)
block|{
name|boolean
name|itf
init|=
operator|(
name|location
operator|.
name|isIgnoreTooFar
argument_list|()
operator|==
literal|null
condition|?
literal|false
else|:
name|location
operator|.
name|isIgnoreTooFar
argument_list|()
operator|.
name|booleanValue
argument_list|()
operator|)
decl_stmt|;
name|text
index|[
name|idx
index|]
operator|=
operator|(
name|itf
condition|?
literal|"<IMG border='0' title='Ignore too far distances' alt='true' align='absmiddle' src='images/tick.gif'>"
else|:
literal|"&nbsp;"
operator|)
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
operator|new
name|Integer
argument_list|(
name|itf
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
name|boolean
name|con
init|=
operator|(
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|==
literal|null
condition|?
literal|true
else|:
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|.
name|booleanValue
argument_list|()
operator|)
decl_stmt|;
name|text
index|[
name|idx
index|]
operator|=
operator|(
name|con
condition|?
literal|"<IMG border='0' title='Create Constraint' alt='true' align='absmiddle' src='images/tick.gif'>"
else|:
literal|"&nbsp;"
operator|)
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
operator|new
name|Integer
argument_list|(
name|con
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
comment|// get pattern column
name|RequiredTimeTable
name|rtt
init|=
name|location
operator|.
name|getRoomSharingTable
argument_list|()
decl_stmt|;
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|setDefaultSelection
argument_list|(
name|timeGridSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|gridAsText
condition|)
block|{
name|text
index|[
name|idx
index|]
operator|=
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|", "
argument_list|,
literal|"<br>"
argument_list|)
expr_stmt|;
empty_stmt|;
block|}
else|else
block|{
name|File
name|imageFileName
init|=
literal|null
decl_stmt|;
try|try
block|{
name|imageFileName
operator|=
name|rtt
operator|.
name|createImage
argument_list|(
name|timeVertical
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|imageFileName
operator|!=
literal|null
condition|)
block|{
name|text
index|[
name|idx
index|]
operator|=
operator|(
literal|"<img border='0' title='"
operator|+
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"' src='temp/"
operator|+
operator|(
name|imageFileName
operator|.
name|getName
argument_list|()
operator|)
operator|+
literal|"'>&nbsp;"
operator|)
expr_stmt|;
block|}
else|else
block|{
name|text
index|[
name|idx
index|]
operator|=
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|", "
argument_list|,
literal|"<br>"
argument_list|)
expr_stmt|;
empty_stmt|;
block|}
block|}
name|comp
index|[
name|idx
index|]
operator|=
literal|null
expr_stmt|;
name|idx
operator|++
expr_stmt|;
comment|// get departments column
name|Department
name|controlDept
init|=
literal|null
decl_stmt|;
name|text
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
name|Set
name|rds
init|=
name|location
operator|.
name|getRoomDepts
argument_list|()
decl_stmt|;
name|Set
name|departments
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iterRds
init|=
name|rds
operator|.
name|iterator
argument_list|()
init|;
name|iterRds
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomDept
name|rd
init|=
operator|(
name|RoomDept
operator|)
name|iterRds
operator|.
name|next
argument_list|()
decl_stmt|;
name|Department
name|d
init|=
name|rd
operator|.
name|getDepartment
argument_list|()
decl_stmt|;
if|if
condition|(
name|rd
operator|.
name|isControl
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
name|controlDept
operator|=
name|d
expr_stmt|;
name|departments
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
name|TreeSet
name|ts
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|DepartmentNameComparator
argument_list|()
argument_list|)
decl_stmt|;
name|ts
operator|.
name|addAll
argument_list|(
name|departments
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|ts
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|d
init|=
operator|(
name|Department
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|text
index|[
name|idx
index|]
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|text
index|[
name|idx
index|]
operator|=
name|text
index|[
name|idx
index|]
operator|+
literal|"<br>"
expr_stmt|;
else|else
name|comp
index|[
name|idx
index|]
operator|=
name|d
operator|.
name|getDeptCode
argument_list|()
expr_stmt|;
name|text
index|[
name|idx
index|]
operator|=
name|text
index|[
name|idx
index|]
operator|+
name|d
operator|.
name|htmlShortLabel
argument_list|()
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
comment|//control column
if|if
condition|(
operator|!
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"All"
argument_list|)
operator|&&
operator|!
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"Exam"
argument_list|)
operator|&&
operator|!
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"EExam"
argument_list|)
condition|)
block|{
if|if
condition|(
name|controlDept
operator|!=
literal|null
operator|&&
name|controlDept
operator|.
name|getDeptCode
argument_list|()
operator|.
name|equals
argument_list|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
argument_list|)
condition|)
block|{
name|text
index|[
name|idx
index|]
operator|=
literal|"<IMG border='0' title='Selected department is controlling this room.' alt='true' align='absmiddle' src='images/tick.gif'>"
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|text
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|controlDept
operator|!=
literal|null
condition|)
block|{
name|text
index|[
name|idx
index|]
operator|=
name|controlDept
operator|.
name|htmlShortLabel
argument_list|()
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
name|controlDept
operator|.
name|getDeptCode
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|text
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
block|}
block|}
name|idx
operator|++
expr_stmt|;
block|}
name|text
index|[
literal|0
index|]
operator|+=
literal|"<A name=\"A"
operator|+
name|location
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"\"></A>"
expr_stmt|;
comment|// get groups column
name|text
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
operator|new
name|TreeSet
argument_list|(
name|location
operator|.
name|getRoomGroups
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomGroup
name|rg
init|=
operator|(
name|RoomGroup
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|rg
operator|.
name|isGlobal
argument_list|()
operator|.
name|booleanValue
argument_list|()
operator|&&
operator|(
name|examType
operator|>=
literal|0
operator|||
operator|!
name|depts
operator|.
name|contains
argument_list|(
name|rg
operator|.
name|getDepartment
argument_list|()
argument_list|)
operator|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|rg
operator|.
name|isGlobal
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|boolean
name|skip
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|location
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomDept
name|rd
init|=
operator|(
name|RoomDept
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|rg
operator|.
name|getDepartment
argument_list|()
operator|.
name|equals
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
block|{
name|skip
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|skip
condition|)
continue|continue;
block|}
if|if
condition|(
name|text
index|[
name|idx
index|]
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|text
index|[
name|idx
index|]
operator|+=
literal|"<br>"
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
name|comp
index|[
name|idx
index|]
operator|+
name|rg
operator|.
name|getName
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|text
index|[
name|idx
index|]
operator|+=
name|rg
operator|.
name|htmlLabel
argument_list|()
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
if|if
condition|(
name|featuresOneColumn
condition|)
block|{
comment|// get features column
name|text
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
operator|new
name|TreeSet
argument_list|(
name|location
operator|.
name|getGlobalRoomFeatures
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|GlobalRoomFeature
name|rf
init|=
operator|(
name|GlobalRoomFeature
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|text
index|[
name|idx
index|]
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|text
index|[
name|idx
index|]
operator|+=
literal|"<br>"
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
name|comp
index|[
name|idx
index|]
operator|+
name|rf
operator|.
name|getLabel
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|text
index|[
name|idx
index|]
operator|+=
name|rf
operator|.
name|htmlLabel
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|examType
operator|<
literal|0
condition|)
for|for
control|(
name|Iterator
name|it
init|=
operator|new
name|TreeSet
argument_list|(
name|location
operator|.
name|getDepartmentRoomFeatures
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentRoomFeature
name|drf
init|=
operator|(
name|DepartmentRoomFeature
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|depts
operator|.
name|contains
argument_list|(
name|drf
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
continue|continue;
name|boolean
name|skip
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|location
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomDept
name|rd
init|=
operator|(
name|RoomDept
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|drf
operator|.
name|getDepartment
argument_list|()
operator|.
name|equals
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
block|{
name|skip
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|skip
condition|)
continue|continue;
if|if
condition|(
name|text
index|[
name|idx
index|]
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|text
index|[
name|idx
index|]
operator|+=
literal|"<br>"
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
name|comp
index|[
name|idx
index|]
operator|+
name|drf
operator|.
name|getLabel
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|text
index|[
name|idx
index|]
operator|+=
name|drf
operator|.
name|htmlLabel
argument_list|()
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
block|}
else|else
block|{
comment|// get features columns
for|for
control|(
name|Iterator
name|it
init|=
name|globalRoomFeatures
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|GlobalRoomFeature
name|grf
init|=
operator|(
name|GlobalRoomFeature
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|b
init|=
name|location
operator|.
name|hasFeature
argument_list|(
name|grf
argument_list|)
decl_stmt|;
name|text
index|[
name|idx
index|]
operator|=
name|b
condition|?
literal|"<IMG border='0' title='"
operator|+
name|grf
operator|.
name|getLabel
argument_list|()
operator|+
literal|"' alt='"
operator|+
name|grf
operator|.
name|getLabel
argument_list|()
operator|+
literal|"' align='absmiddle' src='images/tick.gif'>"
else|:
literal|"&nbsp;"
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
literal|""
operator|+
name|b
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|it
init|=
name|deptRoomFeatures
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentRoomFeature
name|drf
init|=
operator|(
name|DepartmentRoomFeature
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|b
init|=
name|location
operator|.
name|hasFeature
argument_list|(
name|drf
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|location
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomDept
name|rd
init|=
operator|(
name|RoomDept
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|drf
operator|.
name|getDepartment
argument_list|()
operator|.
name|equals
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
block|{
name|b
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
name|text
index|[
name|idx
index|]
operator|=
name|b
condition|?
literal|"<IMG border='0' title='"
operator|+
name|drf
operator|.
name|getLabel
argument_list|()
operator|+
literal|"' alt='"
operator|+
name|drf
operator|.
name|getLabel
argument_list|()
operator|+
literal|"' align='absmiddle' src='images/tick.gif'>"
else|:
literal|"&nbsp;"
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
literal|""
operator|+
name|b
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
block|}
comment|// build rows
if|if
condition|(
name|location
operator|instanceof
name|NonUniversityLocation
condition|)
block|{
name|tables
operator|.
name|get
argument_list|(
name|location
operator|.
name|getRoomType
argument_list|()
argument_list|)
operator|.
name|addLine
argument_list|(
operator|(
name|editable
condition|?
literal|"onClick=\"document.location='roomDetail.do?id="
operator|+
name|location
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"';\""
else|:
literal|null
operator|)
argument_list|,
name|text
argument_list|,
name|comp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tables
operator|.
name|get
argument_list|(
name|room
operator|.
name|getRoomType
argument_list|()
argument_list|)
operator|.
name|addLine
argument_list|(
operator|(
name|editable
condition|?
literal|"onClick=\"document.location='roomDetail.do?id="
operator|+
name|room
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"';\""
else|:
literal|null
operator|)
argument_list|,
name|text
argument_list|,
name|comp
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|RoomType
argument_list|,
name|WebTable
argument_list|>
name|entry
range|:
name|tables
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|int
name|ord
init|=
name|WebTable
operator|.
name|getOrder
argument_list|(
name|httpSession
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getReference
argument_list|()
operator|+
literal|".ord"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ord
operator|>
name|heading1
operator|.
name|length
condition|)
name|ord
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getLines
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|request
operator|.
name|setAttribute
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|printTable
argument_list|(
name|ord
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|request
operator|.
name|setAttribute
argument_list|(
literal|"colspan"
argument_list|,
literal|""
operator|+
name|colspan
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|buildPdfWebTable
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|RoomListForm
name|roomListForm
parameter_list|,
name|boolean
name|featuresOneColumn
parameter_list|,
name|int
name|examType
parameter_list|)
throws|throws
name|Exception
block|{
name|FileOutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|File
name|file
init|=
name|ApplicationProperties
operator|.
name|getTempFile
argument_list|(
literal|"rooms"
argument_list|,
literal|"pdf"
argument_list|)
decl_stmt|;
name|out
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|HttpSession
name|httpSession
init|=
name|request
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Collection
name|rooms
init|=
name|roomListForm
operator|.
name|getRooms
argument_list|()
decl_stmt|;
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|httpSession
argument_list|)
decl_stmt|;
name|Long
name|sessionId
init|=
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
operator|.
name|getSessionId
argument_list|()
decl_stmt|;
name|ArrayList
name|globalRoomFeatures
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Set
name|deptRoomFeatures
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
name|int
name|colspan
init|=
literal|0
decl_stmt|;
name|String
name|mgrId
init|=
operator|(
name|String
operator|)
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|TMTBL_MGR_ID_ATTR_NAME
argument_list|)
decl_stmt|;
name|TimetableManagerDAO
name|tdao
init|=
operator|new
name|TimetableManagerDAO
argument_list|()
decl_stmt|;
name|TimetableManager
name|owner
init|=
name|tdao
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|mgrId
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|isAdmin
init|=
name|user
operator|.
name|getRole
argument_list|()
operator|.
name|equals
argument_list|(
name|Roles
operator|.
name|ADMIN_ROLE
argument_list|)
decl_stmt|;
name|Set
name|ownerDepts
init|=
name|owner
operator|.
name|departmentsForSession
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
name|Set
name|externalDepartments
init|=
name|Department
operator|.
name|findAllExternal
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
name|Set
name|depts
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"All"
argument_list|)
condition|)
block|{
if|if
condition|(
name|isAdmin
condition|)
block|{
name|depts
operator|=
name|Department
operator|.
name|findAll
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|depts
operator|=
name|Department
operator|.
name|findAllOwned
argument_list|(
name|sessionId
argument_list|,
name|owner
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"Exam"
argument_list|)
condition|)
block|{
name|depts
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"EExam"
argument_list|)
condition|)
block|{
name|depts
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|depts
operator|=
operator|new
name|HashSet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|depts
operator|.
name|add
argument_list|(
name|Department
operator|.
name|findByDeptCode
argument_list|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
argument_list|,
name|sessionId
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
literal|null
decl_stmt|;
try|try
block|{
name|RoomFeatureDAO
name|d
init|=
operator|new
name|RoomFeatureDAO
argument_list|()
decl_stmt|;
name|hibSession
operator|=
name|d
operator|.
name|getSession
argument_list|()
expr_stmt|;
name|List
name|list
init|=
name|hibSession
operator|.
name|createCriteria
argument_list|(
name|GlobalRoomFeature
operator|.
name|class
argument_list|)
operator|.
name|addOrder
argument_list|(
name|Order
operator|.
name|asc
argument_list|(
literal|"label"
argument_list|)
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|list
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|GlobalRoomFeature
name|rf
init|=
operator|(
name|GlobalRoomFeature
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|globalRoomFeatures
operator|.
name|add
argument_list|(
name|rf
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"All"
argument_list|)
condition|)
block|{
name|String
index|[]
name|deptCodes
init|=
name|Department
operator|.
name|getDeptCodesForUser
argument_list|(
name|user
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|deptCodes
operator|!=
literal|null
condition|)
name|deptRoomFeatures
operator|.
name|addAll
argument_list|(
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct f from DepartmentRoomFeature f inner join f.department d "
operator|+
literal|"where d.session.uniqueId=:sessionId and d.deptCode in ("
operator|+
name|Constants
operator|.
name|arrayToStr
argument_list|(
name|deptCodes
argument_list|,
literal|"'"
argument_list|,
literal|", "
argument_list|)
operator|+
literal|") order by f.label"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|deptRoomFeatures
operator|.
name|addAll
argument_list|(
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct f from DepartmentRoomFeature f inner join f.department d where "
operator|+
literal|"d.session.uniqueId=:sessionId order by f.label"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"Exam"
argument_list|)
condition|)
block|{
block|}
if|else if
condition|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"EExam"
argument_list|)
condition|)
block|{
block|}
else|else
block|{
name|deptRoomFeatures
operator|.
name|addAll
argument_list|(
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct f from DepartmentRoomFeature f inner join f.department d "
operator|+
literal|"where d.session.uniqueId=:sessionId and d.deptCode = :deptCode order by f.label"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"deptCode"
argument_list|,
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|//build headings for university rooms
name|String
name|fixedHeading1
index|[]
index|[]
init|=
operator|(
name|examType
operator|>=
literal|0
condition|?
operator|(
name|featuresOneColumn
condition|?
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"Bldg"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Room"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Exam Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Period Preferences"
block|,
literal|"center"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Groups"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Features"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|}
else|:
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"Bldg"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Room"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Exam Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Period Preferences"
block|,
literal|"center"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Groups"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|}
operator|)
else|:
operator|(
name|featuresOneColumn
condition|?
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"Bldg"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Room"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Availability"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Departments"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Control"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Groups"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Features"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|}
else|:
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"Bldg"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Room"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Availability"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Departments"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Control"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Groups"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|}
operator|)
operator|)
decl_stmt|;
name|String
name|heading1
index|[]
init|=
operator|new
name|String
index|[
name|fixedHeading1
operator|.
name|length
operator|+
name|globalRoomFeatures
operator|.
name|size
argument_list|()
operator|+
name|deptRoomFeatures
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|String
name|alignment1
index|[]
init|=
operator|new
name|String
index|[
name|heading1
operator|.
name|length
index|]
decl_stmt|;
name|boolean
name|sorted1
index|[]
init|=
operator|new
name|boolean
index|[
name|heading1
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fixedHeading1
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|heading1
index|[
name|i
index|]
operator|=
name|fixedHeading1
index|[
name|i
index|]
index|[
literal|0
index|]
expr_stmt|;
name|alignment1
index|[
name|i
index|]
operator|=
name|fixedHeading1
index|[
name|i
index|]
index|[
literal|1
index|]
expr_stmt|;
name|sorted1
index|[
name|i
index|]
operator|=
operator|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|fixedHeading1
index|[
name|i
index|]
index|[
literal|2
index|]
argument_list|)
operator|)
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
name|colspan
operator|=
name|fixedHeading1
operator|.
name|length
expr_stmt|;
if|if
condition|(
operator|!
name|featuresOneColumn
condition|)
block|{
name|int
name|i
init|=
name|fixedHeading1
operator|.
name|length
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|globalRoomFeatures
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|heading1
index|[
name|i
index|]
operator|=
operator|(
operator|(
name|GlobalRoomFeature
operator|)
name|it
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getLabel
argument_list|()
expr_stmt|;
name|heading1
index|[
name|i
index|]
operator|=
name|heading1
index|[
name|i
index|]
operator|.
name|replaceFirst
argument_list|(
literal|" "
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
name|alignment1
index|[
name|i
index|]
operator|=
literal|"center"
expr_stmt|;
name|sorted1
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|it
init|=
name|deptRoomFeatures
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentRoomFeature
name|drf
init|=
operator|(
name|DepartmentRoomFeature
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|heading1
index|[
name|i
index|]
operator|=
name|drf
operator|.
name|getLabel
argument_list|()
expr_stmt|;
name|heading1
index|[
name|i
index|]
operator|=
name|heading1
index|[
name|i
index|]
operator|.
name|replaceFirst
argument_list|(
literal|" "
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"All"
argument_list|)
condition|)
block|{
name|Department
name|dept
init|=
name|drf
operator|.
name|getDepartment
argument_list|()
decl_stmt|;
name|heading1
index|[
name|i
index|]
operator|+=
literal|" ("
operator|+
name|dept
operator|.
name|getShortLabel
argument_list|()
operator|+
literal|")"
expr_stmt|;
block|}
name|alignment1
index|[
name|i
index|]
operator|=
literal|"center"
expr_stmt|;
name|sorted1
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|colspan
operator|=
name|i
expr_stmt|;
block|}
comment|//build headings for non-univ locations
name|String
name|fixedHeading2
index|[]
index|[]
init|=
operator|(
name|examType
operator|>=
literal|0
condition|?
operator|(
name|featuresOneColumn
condition|?
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"Location"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Exam Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Period Preferences"
block|,
literal|"center"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Groups"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Features"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|}
else|:
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"Location"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Period Preferences"
block|,
literal|"center"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Groups"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|}
operator|)
else|:
operator|(
name|featuresOneColumn
condition|?
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"Location"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"IgnTooFar"
block|,
literal|"center"
block|,
literal|"true"
block|}
block|,
block|{
literal|"IgnChecks"
block|,
literal|"center"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Availability"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Departments"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Control"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Groups"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Features"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|}
else|:
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"Location"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Exam Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"IgnTooFar"
block|,
literal|"center"
block|,
literal|"true"
block|}
block|,
block|{
literal|"IgnChecks"
block|,
literal|"center"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Availability"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Departments"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Control"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Groups"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|}
operator|)
operator|)
decl_stmt|;
name|String
name|heading2
index|[]
init|=
operator|new
name|String
index|[
name|fixedHeading2
operator|.
name|length
operator|+
name|globalRoomFeatures
operator|.
name|size
argument_list|()
operator|+
name|deptRoomFeatures
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|String
name|alignment2
index|[]
init|=
operator|new
name|String
index|[
name|heading2
operator|.
name|length
index|]
decl_stmt|;
name|boolean
name|sorted2
index|[]
init|=
operator|new
name|boolean
index|[
name|heading2
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fixedHeading2
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|heading2
index|[
name|i
index|]
operator|=
name|fixedHeading2
index|[
name|i
index|]
index|[
literal|0
index|]
expr_stmt|;
name|alignment2
index|[
name|i
index|]
operator|=
name|fixedHeading2
index|[
name|i
index|]
index|[
literal|1
index|]
expr_stmt|;
name|sorted2
index|[
name|i
index|]
operator|=
operator|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|fixedHeading2
index|[
name|i
index|]
index|[
literal|2
index|]
argument_list|)
operator|)
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|featuresOneColumn
condition|)
block|{
name|int
name|i
init|=
name|fixedHeading2
operator|.
name|length
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|globalRoomFeatures
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|heading2
index|[
name|i
index|]
operator|=
operator|(
operator|(
name|GlobalRoomFeature
operator|)
name|it
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getLabel
argument_list|()
expr_stmt|;
name|heading2
index|[
name|i
index|]
operator|=
name|heading2
index|[
name|i
index|]
operator|.
name|replaceFirst
argument_list|(
literal|" "
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
name|alignment2
index|[
name|i
index|]
operator|=
literal|"center"
expr_stmt|;
name|sorted2
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|it
init|=
name|deptRoomFeatures
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentRoomFeature
name|drf
init|=
operator|(
name|DepartmentRoomFeature
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|heading2
index|[
name|i
index|]
operator|=
name|drf
operator|.
name|getLabel
argument_list|()
expr_stmt|;
name|heading2
index|[
name|i
index|]
operator|=
name|heading2
index|[
name|i
index|]
operator|.
name|replaceFirst
argument_list|(
literal|" "
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"All"
argument_list|)
condition|)
block|{
name|Department
name|dept
init|=
name|Department
operator|.
name|findByDeptCode
argument_list|(
name|drf
operator|.
name|getDeptCode
argument_list|()
argument_list|,
name|sessionId
argument_list|)
decl_stmt|;
name|heading2
index|[
name|i
index|]
operator|+=
literal|" ("
operator|+
name|dept
operator|.
name|getShortLabel
argument_list|()
operator|+
literal|")"
expr_stmt|;
block|}
name|alignment2
index|[
name|i
index|]
operator|=
literal|"center"
expr_stmt|;
name|sorted2
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
name|TreeSet
argument_list|<
name|RoomType
argument_list|>
name|roomTypes
init|=
operator|new
name|TreeSet
argument_list|<
name|RoomType
argument_list|>
argument_list|(
name|RoomTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|()
argument_list|)
decl_stmt|;
name|Hashtable
argument_list|<
name|RoomType
argument_list|,
name|PdfWebTable
argument_list|>
name|tables
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|RoomType
name|t
range|:
name|roomTypes
control|)
block|{
name|PdfWebTable
name|table
init|=
operator|(
name|t
operator|.
name|isRoom
argument_list|()
condition|?
operator|new
name|PdfWebTable
argument_list|(
name|heading1
operator|.
name|length
argument_list|,
name|t
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|null
argument_list|,
name|heading1
argument_list|,
name|alignment1
argument_list|,
name|sorted1
argument_list|)
else|:
operator|new
name|PdfWebTable
argument_list|(
name|heading2
operator|.
name|length
argument_list|,
name|t
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|null
argument_list|,
name|heading2
argument_list|,
name|alignment2
argument_list|,
name|sorted2
argument_list|)
operator|)
decl_stmt|;
name|tables
operator|.
name|put
argument_list|(
name|t
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
name|boolean
name|timeVertical
init|=
name|RequiredTimeTable
operator|.
name|getTimeGridVertical
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|boolean
name|gridAsText
init|=
name|RequiredTimeTable
operator|.
name|getTimeGridAsText
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|String
name|timeGridSize
init|=
name|RequiredTimeTable
operator|.
name|getTimeGridSize
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Department
name|dept
init|=
operator|new
name|Department
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"All"
argument_list|)
condition|)
block|{
name|dept
operator|=
name|Department
operator|.
name|findByDeptCode
argument_list|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
argument_list|,
name|sessionId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dept
operator|=
literal|null
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|iter
init|=
name|rooms
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|location
init|=
operator|(
name|Location
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|editable
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|x
init|=
name|location
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
operator|!
name|editable
operator|&&
name|x
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomDept
name|rd
init|=
operator|(
name|RoomDept
operator|)
name|x
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ownerDepts
operator|.
name|contains
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
block|{
name|editable
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|isAdmin
condition|)
name|editable
operator|=
literal|true
expr_stmt|;
name|Room
name|room
init|=
operator|(
name|location
operator|instanceof
name|Room
condition|?
operator|(
name|Room
operator|)
name|location
else|:
literal|null
operator|)
decl_stmt|;
name|Building
name|bldg
init|=
operator|(
name|room
operator|==
literal|null
condition|?
literal|null
else|:
name|room
operator|.
name|getBuilding
argument_list|()
operator|)
decl_stmt|;
name|PdfWebTable
name|table
init|=
name|tables
operator|.
name|get
argument_list|(
name|location
operator|.
name|getRoomType
argument_list|()
argument_list|)
decl_stmt|;
name|DecimalFormat
name|df5
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"####0"
argument_list|)
decl_stmt|;
name|String
name|text
index|[]
init|=
operator|new
name|String
index|[
name|Math
operator|.
name|max
argument_list|(
name|heading1
operator|.
name|length
argument_list|,
name|heading2
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
name|Comparable
name|comp
index|[]
init|=
operator|new
name|Comparable
index|[
name|text
operator|.
name|length
index|]
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|bldg
operator|!=
literal|null
condition|)
block|{
name|text
index|[
name|idx
index|]
operator|=
operator|(
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"@@ITALIC "
else|:
literal|""
operator|)
operator|+
name|bldg
operator|.
name|getAbbreviation
argument_list|()
operator|+
operator|(
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"@@END_ITALIC "
else|:
literal|""
operator|)
expr_stmt|;
name|comp
index|[
literal|0
index|]
operator|=
name|location
operator|.
name|getLabel
argument_list|()
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
name|text
index|[
name|idx
index|]
operator|=
operator|(
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"@@ITALIC "
else|:
literal|""
operator|)
operator|+
operator|(
name|room
operator|==
literal|null
condition|?
name|location
operator|.
name|getLabel
argument_list|()
else|:
name|room
operator|.
name|getRoomNumber
argument_list|()
operator|)
operator|+
operator|(
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"@@END_ITALIC "
else|:
literal|""
operator|)
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
name|location
operator|.
name|getLabel
argument_list|()
expr_stmt|;
name|idx
operator|++
expr_stmt|;
name|text
index|[
name|idx
index|]
operator|=
name|df5
operator|.
name|format
argument_list|(
name|location
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
operator|new
name|Long
argument_list|(
name|location
operator|.
name|getCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
if|if
condition|(
name|examType
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|location
operator|.
name|isExamEnabled
argument_list|(
name|examType
argument_list|)
condition|)
block|{
name|text
index|[
name|idx
index|]
operator|=
name|df5
operator|.
name|format
argument_list|(
name|location
operator|.
name|getExamCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
name|location
operator|.
name|getExamCapacity
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|text
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
if|if
condition|(
name|location
operator|.
name|isExamEnabled
argument_list|(
name|examType
argument_list|)
condition|)
block|{
name|text
index|[
name|idx
index|]
operator|=
name|location
operator|.
name|getExamPreferencesAbbreviation
argument_list|(
name|examType
argument_list|)
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|text
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
literal|null
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
block|}
else|else
block|{
name|PreferenceLevel
name|roomPref
init|=
name|location
operator|.
name|getRoomPreferenceLevel
argument_list|(
name|dept
argument_list|)
decl_stmt|;
if|if
condition|(
name|editable
operator|&&
name|roomPref
operator|!=
literal|null
operator|&&
operator|!
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|roomPref
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|room
operator|==
literal|null
condition|)
block|{
name|text
index|[
literal|0
index|]
operator|=
operator|(
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"@@ITALIC "
else|:
literal|""
operator|)
operator|+
name|location
operator|.
name|getLabel
argument_list|()
operator|+
literal|" ("
operator|+
name|PreferenceLevel
operator|.
name|prolog2abbv
argument_list|(
name|roomPref
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|+
literal|")"
operator|+
operator|(
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"@@END_ITALIC "
else|:
literal|""
operator|)
expr_stmt|;
block|}
else|else
block|{
name|text
index|[
literal|0
index|]
operator|=
operator|(
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"@@ITALIC "
else|:
literal|""
operator|)
operator|+
operator|(
name|bldg
operator|==
literal|null
condition|?
literal|""
else|:
name|bldg
operator|.
name|getAbbreviation
argument_list|()
operator|)
operator|+
operator|(
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"@@END_ITALIC "
else|:
literal|""
operator|)
expr_stmt|;
name|text
index|[
literal|1
index|]
operator|=
operator|(
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"@@ITALIC "
else|:
literal|""
operator|)
operator|+
name|room
operator|.
name|getRoomNumber
argument_list|()
operator|+
literal|" ("
operator|+
name|PreferenceLevel
operator|.
name|prolog2abbv
argument_list|(
name|roomPref
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|+
literal|")"
operator|+
operator|(
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"@@END_ITALIC "
else|:
literal|""
operator|)
expr_stmt|;
block|}
block|}
comment|//ignore too far
if|if
condition|(
name|location
operator|instanceof
name|NonUniversityLocation
condition|)
block|{
name|boolean
name|itf
init|=
operator|(
name|location
operator|.
name|isIgnoreTooFar
argument_list|()
operator|==
literal|null
condition|?
literal|false
else|:
name|location
operator|.
name|isIgnoreTooFar
argument_list|()
operator|.
name|booleanValue
argument_list|()
operator|)
decl_stmt|;
name|text
index|[
name|idx
index|]
operator|=
operator|(
name|itf
condition|?
literal|"Yes"
else|:
literal|"No"
operator|)
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
operator|new
name|Integer
argument_list|(
name|itf
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
name|boolean
name|con
init|=
operator|(
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|==
literal|null
condition|?
literal|true
else|:
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|.
name|booleanValue
argument_list|()
operator|)
decl_stmt|;
name|text
index|[
name|idx
index|]
operator|=
operator|(
name|con
condition|?
literal|"YES"
else|:
literal|"No"
operator|)
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
operator|new
name|Integer
argument_list|(
name|con
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
comment|// get pattern column
name|RequiredTimeTable
name|rtt
init|=
name|location
operator|.
name|getRoomSharingTable
argument_list|()
decl_stmt|;
if|if
condition|(
name|gridAsText
condition|)
block|{
name|text
index|[
name|idx
index|]
operator|=
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|", "
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|setDefaultSelection
argument_list|(
name|timeGridSize
argument_list|)
expr_stmt|;
name|Image
name|image
init|=
name|rtt
operator|.
name|createBufferedImage
argument_list|(
name|timeVertical
argument_list|)
decl_stmt|;
if|if
condition|(
name|image
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|addImage
argument_list|(
name|location
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|image
argument_list|)
expr_stmt|;
name|text
index|[
name|idx
index|]
operator|=
operator|(
literal|"@@IMAGE "
operator|+
name|location
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" "
operator|)
expr_stmt|;
block|}
else|else
block|{
name|text
index|[
name|idx
index|]
operator|=
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|", "
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
name|comp
index|[
name|idx
index|]
operator|=
literal|null
expr_stmt|;
name|idx
operator|++
expr_stmt|;
comment|// get departments column
name|Department
name|controlDept
init|=
literal|null
decl_stmt|;
name|text
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
name|Set
name|rds
init|=
name|location
operator|.
name|getRoomDepts
argument_list|()
decl_stmt|;
name|Set
name|departments
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iterRds
init|=
name|rds
operator|.
name|iterator
argument_list|()
init|;
name|iterRds
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomDept
name|rd
init|=
operator|(
name|RoomDept
operator|)
name|iterRds
operator|.
name|next
argument_list|()
decl_stmt|;
name|Department
name|d
init|=
name|rd
operator|.
name|getDepartment
argument_list|()
decl_stmt|;
if|if
condition|(
name|rd
operator|.
name|isControl
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
name|controlDept
operator|=
name|d
expr_stmt|;
name|departments
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
name|TreeSet
name|ts
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|DepartmentNameComparator
argument_list|()
argument_list|)
decl_stmt|;
name|ts
operator|.
name|addAll
argument_list|(
name|departments
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|ts
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|d
init|=
operator|(
name|Department
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|text
index|[
name|idx
index|]
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|text
index|[
name|idx
index|]
operator|=
name|text
index|[
name|idx
index|]
operator|+
literal|"\n"
expr_stmt|;
else|else
name|comp
index|[
name|idx
index|]
operator|=
name|d
operator|.
name|getDeptCode
argument_list|()
expr_stmt|;
name|text
index|[
name|idx
index|]
operator|=
name|text
index|[
name|idx
index|]
operator|+
literal|"@@COLOR "
operator|+
name|d
operator|.
name|getRoomSharingColor
argument_list|(
literal|null
argument_list|)
operator|+
literal|" "
operator|+
name|d
operator|.
name|getShortLabel
argument_list|()
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
comment|//control column
if|if
condition|(
operator|!
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"All"
argument_list|)
operator|&&
operator|!
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"Exam"
argument_list|)
operator|&&
operator|!
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"EExam"
argument_list|)
condition|)
block|{
if|if
condition|(
name|controlDept
operator|!=
literal|null
operator|&&
name|controlDept
operator|.
name|getDeptCode
argument_list|()
operator|.
name|equals
argument_list|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
argument_list|)
condition|)
block|{
name|text
index|[
name|idx
index|]
operator|=
literal|"Yes"
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|text
index|[
name|idx
index|]
operator|=
literal|"No"
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|controlDept
operator|!=
literal|null
condition|)
block|{
name|text
index|[
name|idx
index|]
operator|=
literal|"@@COLOR "
operator|+
name|controlDept
operator|.
name|getRoomSharingColor
argument_list|(
literal|null
argument_list|)
operator|+
literal|" "
operator|+
name|controlDept
operator|.
name|getShortLabel
argument_list|()
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
name|controlDept
operator|.
name|getDeptCode
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|text
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
block|}
block|}
name|idx
operator|++
expr_stmt|;
block|}
comment|// get groups column
name|text
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
operator|new
name|TreeSet
argument_list|(
name|location
operator|.
name|getRoomGroups
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomGroup
name|rg
init|=
operator|(
name|RoomGroup
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|rg
operator|.
name|isGlobal
argument_list|()
operator|.
name|booleanValue
argument_list|()
operator|&&
operator|(
name|examType
operator|>=
literal|0
operator|||
operator|!
name|depts
operator|.
name|contains
argument_list|(
name|rg
operator|.
name|getDepartment
argument_list|()
argument_list|)
operator|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|rg
operator|.
name|isGlobal
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|boolean
name|skip
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|location
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomDept
name|rd
init|=
operator|(
name|RoomDept
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|rg
operator|.
name|getDepartment
argument_list|()
operator|.
name|equals
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
block|{
name|skip
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|skip
condition|)
continue|continue;
block|}
if|if
condition|(
name|text
index|[
name|idx
index|]
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|text
index|[
name|idx
index|]
operator|+=
literal|"\n"
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
name|comp
index|[
name|idx
index|]
operator|+
name|rg
operator|.
name|getName
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|text
index|[
name|idx
index|]
operator|+=
operator|(
name|rg
operator|.
name|isGlobal
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|""
else|:
literal|"@@COLOR "
operator|+
name|rg
operator|.
name|getDepartment
argument_list|()
operator|.
name|getRoomSharingColor
argument_list|(
literal|null
argument_list|)
operator|+
literal|" "
operator|)
operator|+
name|rg
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
if|if
condition|(
name|featuresOneColumn
condition|)
block|{
comment|// get features column
name|text
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
operator|new
name|TreeSet
argument_list|(
name|location
operator|.
name|getGlobalRoomFeatures
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|GlobalRoomFeature
name|rf
init|=
operator|(
name|GlobalRoomFeature
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|text
index|[
name|idx
index|]
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|text
index|[
name|idx
index|]
operator|+=
literal|"\n"
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
name|comp
index|[
name|idx
index|]
operator|+
name|rf
operator|.
name|getLabel
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|text
index|[
name|idx
index|]
operator|+=
name|rf
operator|.
name|getLabel
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|examType
operator|<
literal|0
condition|)
for|for
control|(
name|Iterator
name|it
init|=
operator|new
name|TreeSet
argument_list|(
name|location
operator|.
name|getDepartmentRoomFeatures
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentRoomFeature
name|drf
init|=
operator|(
name|DepartmentRoomFeature
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|depts
operator|.
name|contains
argument_list|(
name|drf
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
continue|continue;
name|boolean
name|skip
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|location
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomDept
name|rd
init|=
operator|(
name|RoomDept
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|drf
operator|.
name|getDepartment
argument_list|()
operator|.
name|equals
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
block|{
name|skip
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|skip
condition|)
continue|continue;
if|if
condition|(
name|text
index|[
name|idx
index|]
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|text
index|[
name|idx
index|]
operator|+=
literal|"\n"
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
name|comp
index|[
name|idx
index|]
operator|+
name|drf
operator|.
name|getLabel
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|text
index|[
name|idx
index|]
operator|+=
literal|"@@COLOR "
operator|+
name|drf
operator|.
name|getDepartment
argument_list|()
operator|.
name|getRoomSharingColor
argument_list|(
literal|null
argument_list|)
operator|+
literal|" "
operator|+
name|drf
operator|.
name|getLabel
argument_list|()
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
block|}
else|else
block|{
comment|// get features columns
for|for
control|(
name|Iterator
name|it
init|=
name|globalRoomFeatures
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|GlobalRoomFeature
name|grf
init|=
operator|(
name|GlobalRoomFeature
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|b
init|=
name|location
operator|.
name|hasFeature
argument_list|(
name|grf
argument_list|)
decl_stmt|;
name|text
index|[
name|idx
index|]
operator|=
name|b
condition|?
literal|"Yes"
else|:
literal|"No"
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
literal|""
operator|+
name|b
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|it
init|=
name|deptRoomFeatures
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentRoomFeature
name|drf
init|=
operator|(
name|DepartmentRoomFeature
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|b
init|=
name|location
operator|.
name|hasFeature
argument_list|(
name|drf
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|location
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomDept
name|rd
init|=
operator|(
name|RoomDept
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|drf
operator|.
name|getDepartment
argument_list|()
operator|.
name|equals
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
block|{
name|b
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
name|text
index|[
name|idx
index|]
operator|=
name|b
condition|?
literal|"Yes"
else|:
literal|"No"
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
literal|""
operator|+
name|b
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
block|}
comment|// build rows
name|table
operator|.
name|addLine
argument_list|(
operator|(
name|editable
condition|?
literal|"onClick=\"document.location='roomDetail.do?id="
operator|+
name|location
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"';\""
else|:
literal|null
operator|)
argument_list|,
name|text
argument_list|,
name|comp
argument_list|)
expr_stmt|;
block|}
name|Document
name|doc
init|=
literal|null
decl_stmt|;
comment|// set request attributes
for|for
control|(
name|RoomType
name|t
range|:
name|roomTypes
control|)
block|{
name|PdfWebTable
name|table
init|=
name|tables
operator|.
name|get
argument_list|(
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|table
operator|.
name|getLines
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|ord
init|=
name|WebTable
operator|.
name|getOrder
argument_list|(
name|httpSession
argument_list|,
name|t
operator|.
name|getReference
argument_list|()
operator|+
literal|".ord"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ord
operator|>
name|heading1
operator|.
name|length
condition|)
name|ord
operator|=
literal|0
expr_stmt|;
name|PdfPTable
name|pdfTable
init|=
name|table
operator|.
name|printPdfTable
argument_list|(
name|ord
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
name|doc
operator|=
operator|new
name|Document
argument_list|(
operator|new
name|Rectangle
argument_list|(
literal|60f
operator|+
name|table
operator|.
name|getWidth
argument_list|()
argument_list|,
literal|60f
operator|+
literal|0.75f
operator|*
name|table
operator|.
name|getWidth
argument_list|()
argument_list|)
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|PdfWriter
name|iWriter
init|=
name|PdfWriter
operator|.
name|getInstance
argument_list|(
name|doc
argument_list|,
name|out
argument_list|)
decl_stmt|;
name|iWriter
operator|.
name|setPageEvent
argument_list|(
operator|new
name|PdfEventHandler
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|.
name|setPageSize
argument_list|(
operator|new
name|Rectangle
argument_list|(
literal|60f
operator|+
name|table
operator|.
name|getWidth
argument_list|()
argument_list|,
literal|60f
operator|+
literal|0.75f
operator|*
name|table
operator|.
name|getWidth
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|newPage
argument_list|()
expr_stmt|;
block|}
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Paragraph
argument_list|(
name|table
operator|.
name|getName
argument_list|()
argument_list|,
name|FontFactory
operator|.
name|getFont
argument_list|(
name|FontFactory
operator|.
name|HELVETICA_BOLD
argument_list|,
literal|16
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|pdfTable
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
return|return;
name|doc
operator|.
name|close
argument_list|()
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|REQUEST_OPEN_URL
argument_list|,
literal|"temp/"
operator|+
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
block|}
block|}
block|}
block|}
end_class

end_unit

