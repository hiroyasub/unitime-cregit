begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 - 3.5 (University Timetabling Application)  * Copyright (C) 2008 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|CSVFile
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|CSVFile
operator|.
name|CSVField
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|CSVFile
operator|.
name|CSVLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|HibernateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|criterion
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|criterion
operator|.
name|Restrictions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|WebTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|WebTable
operator|.
name|WebTableLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|messages
operator|.
name|CourseMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|CommonValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|SessionAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|UserProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|RoomListForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Building
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentRoomFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|MidtermPeriodPreferenceModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|GlobalRoomFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|NonUniversityLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PeriodPreferenceModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Room
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomDept
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|DepartmentNameComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExamTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|LocationDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|RoomFeatureDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|RoomTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|Qualifiable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|ExportUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|LookupTables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|PdfEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|PdfFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|BackTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|Navigation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|PdfWebTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|RequiredTimeTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Paragraph
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Rectangle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|pdf
operator|.
name|PdfPTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|pdf
operator|.
name|PdfWriter
import|;
end_import

begin_comment
comment|/**  * MyEclipse Struts Creation date: 02-18-2005  *   * XDoclet definition:  *   * @struts:action path="/RoomList" name="roomListForm"  *                input="/admin/roomList.jsp" scope="request" validate="false"  *  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"/roomList"
argument_list|)
specifier|public
class|class
name|RoomListAction
extends|extends
name|Action
block|{
specifier|public
specifier|static
specifier|final
name|CourseMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|CourseMessages
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Autowired
name|SessionContext
name|sessionContext
decl_stmt|;
comment|// --------------------------------------------------------- Instance
comment|// Variables
comment|// --------------------------------------------------------- Methods
comment|/** 	 * Method execute 	 *  	 * @param mapping 	 * @param form 	 * @param request 	 * @param response 	 * @return ActionForward 	 * @throws HibernateException 	 */
specifier|public
name|ActionForward
name|execute
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|Rooms
argument_list|)
expr_stmt|;
name|RoomListForm
name|roomListForm
init|=
operator|(
name|RoomListForm
operator|)
name|form
decl_stmt|;
name|roomListForm
operator|.
name|save
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
name|ActionMessages
name|errors
init|=
operator|new
name|ActionMessages
argument_list|()
decl_stmt|;
comment|//get deptCode from request - for user with only one department
name|String
name|dept
init|=
operator|(
name|String
operator|)
name|request
operator|.
name|getAttribute
argument_list|(
literal|"deptCode"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dept
operator|!=
literal|null
condition|)
block|{
name|roomListForm
operator|.
name|setDeptCodeX
argument_list|(
name|dept
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sessionContext
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|DepartmentCodeRoom
argument_list|)
operator|!=
literal|null
operator|&&
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|==
literal|null
condition|)
name|roomListForm
operator|.
name|setDeptCodeX
argument_list|(
operator|(
name|String
operator|)
name|sessionContext
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|DepartmentCodeRoom
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set Session Variable
if|if
condition|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sessionContext
operator|.
name|setAttribute
argument_list|(
name|SessionAttribute
operator|.
name|DepartmentCodeRoom
argument_list|,
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//set request attribute for department
name|LookupTables
operator|.
name|setupDepartments
argument_list|(
name|request
argument_list|,
name|sessionContext
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LookupTables
operator|.
name|setupExamTypes
argument_list|(
name|request
argument_list|,
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Validate input
name|errors
operator|=
name|roomListForm
operator|.
name|validate
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
expr_stmt|;
comment|// Validation fails
if|if
condition|(
name|errors
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showRoomSearch"
argument_list|)
return|;
block|}
name|lookupRooms
argument_list|(
name|roomListForm
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"op"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|roomListForm
operator|.
name|getRooms
argument_list|()
operator|==
literal|null
operator|||
name|roomListForm
operator|.
name|getRooms
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"searchResult"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"No room matching the above criteria was found."
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"colspan"
argument_list|,
literal|"7"
argument_list|)
expr_stmt|;
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showRoomSearch"
argument_list|)
return|;
block|}
name|ExamType
name|examType
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|!=
literal|null
operator|&&
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|matches
argument_list|(
literal|"Exam[0-9]*"
argument_list|)
condition|)
name|examType
operator|=
name|ExamTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|substring
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"Export PDF"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"op"
argument_list|)
argument_list|)
condition|)
block|{
name|OutputStream
name|out
init|=
name|ExportUtils
operator|.
name|getPdfOutputStream
argument_list|(
name|response
argument_list|,
literal|"rooms"
argument_list|)
decl_stmt|;
name|buildPdfWebTable
argument_list|(
name|out
argument_list|,
name|roomListForm
argument_list|,
name|CommonValues
operator|.
name|Yes
operator|.
name|eq
argument_list|(
name|UserProperty
operator|.
name|RoomFeaturesInOneColumn
operator|.
name|get
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|examType
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
literal|"Export CSV"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"op"
argument_list|)
argument_list|)
condition|)
block|{
name|PrintWriter
name|pw
init|=
name|ExportUtils
operator|.
name|getCsvWriter
argument_list|(
name|response
argument_list|,
literal|"rooms"
argument_list|)
decl_stmt|;
name|buildCsvWebTable
argument_list|(
name|pw
argument_list|,
name|roomListForm
argument_list|,
name|CommonValues
operator|.
name|Yes
operator|.
name|eq
argument_list|(
name|UserProperty
operator|.
name|RoomFeaturesInOneColumn
operator|.
name|get
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|examType
argument_list|)
expr_stmt|;
name|pw
operator|.
name|flush
argument_list|()
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// build web table for university locations
name|buildWebTable
argument_list|(
name|request
argument_list|,
name|roomListForm
argument_list|,
name|CommonValues
operator|.
name|Yes
operator|.
name|eq
argument_list|(
name|UserProperty
operator|.
name|RoomFeaturesInOneColumn
operator|.
name|get
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|examType
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showRoomList"
argument_list|)
return|;
block|}
specifier|public
name|void
name|lookupRooms
parameter_list|(
name|RoomListForm
name|form
parameter_list|,
name|String
name|op
parameter_list|)
block|{
name|String
name|from
init|=
literal|"Location l"
operator|+
literal|" left join l.roomDepts rd"
operator|+
literal|" left join fetch l.examTypes xt"
operator|+
literal|" left join fetch l.features f"
operator|+
literal|" left join fetch l.roomGroups g"
operator|+
literal|" left join fetch l.roomType t"
decl_stmt|;
name|String
name|where
init|=
literal|"l.session.uniqueId = :sessionId"
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|departmentIds
init|=
literal|null
decl_stmt|;
name|Long
name|examTypeId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|form
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"All"
argument_list|)
condition|)
block|{
if|if
condition|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|DepartmentIndependent
argument_list|)
condition|)
block|{
block|}
else|else
block|{
name|departmentIds
operator|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|String
name|depts
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Department
name|department
range|:
name|Department
operator|.
name|getUserDepartments
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
control|)
block|{
name|depts
operator|+=
operator|(
name|depts
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|":dept"
operator|+
operator|(
name|departmentIds
operator|.
name|size
argument_list|()
operator|)
expr_stmt|;
name|departmentIds
operator|.
name|add
argument_list|(
name|department
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|where
operator|+=
literal|" and (rd.department.uniqueId in ("
operator|+
name|depts
operator|+
literal|") or l.eventDepartment.uniqueId in ("
operator|+
name|depts
operator|+
literal|"))"
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|form
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Exam"
argument_list|)
condition|)
block|{
name|TreeSet
argument_list|<
name|ExamType
argument_list|>
name|types
init|=
name|ExamType
operator|.
name|findAllUsed
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|types
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|examTypeId
operator|=
name|types
operator|.
name|first
argument_list|()
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|form
operator|.
name|setDeptCodeX
argument_list|(
literal|"Exam"
operator|+
name|examTypeId
argument_list|)
expr_stmt|;
name|where
operator|+=
literal|" and xt.uniqueId = :examTypeId"
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|form
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|matches
argument_list|(
literal|"Exam[0-9]*"
argument_list|)
condition|)
block|{
comment|// from = "Location l inner join l.examTypes xt";
name|examTypeId
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|form
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|substring
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|where
operator|+=
literal|" and xt.uniqueId = :examTypeId"
expr_stmt|;
block|}
else|else
block|{
name|Department
name|department
init|=
name|Department
operator|.
name|findByDeptCode
argument_list|(
name|form
operator|.
name|getDeptCodeX
argument_list|()
argument_list|,
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|department
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|"Export PDF"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|department
argument_list|,
name|Right
operator|.
name|RoomsExportPdf
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"Export CSV"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|department
argument_list|,
name|Right
operator|.
name|RoomsExportCsv
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|department
argument_list|,
name|Right
operator|.
name|Rooms
argument_list|)
expr_stmt|;
block|}
name|where
operator|+=
literal|" and (rd.department.uniqueId = :dept0 or l.eventDepartment.uniqueId = :dept0)"
expr_stmt|;
name|departmentIds
operator|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|departmentIds
operator|.
name|add
argument_list|(
name|department
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
return|return;
block|}
name|Integer
name|minSize
init|=
literal|null
decl_stmt|,
name|maxSize
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|form
operator|.
name|getMinRoomSize
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|form
operator|.
name|getMinRoomSize
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|minSize
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|form
operator|.
name|getMinRoomSize
argument_list|()
argument_list|)
expr_stmt|;
name|where
operator|+=
literal|" and l.capacity>= :minSize"
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
block|}
if|if
condition|(
name|form
operator|.
name|getMaxRoomSize
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|form
operator|.
name|getMaxRoomSize
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|maxSize
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|form
operator|.
name|getMaxRoomSize
argument_list|()
argument_list|)
expr_stmt|;
name|where
operator|+=
literal|" and l.capacity<= :maxSize"
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
block|}
name|List
argument_list|<
name|Long
argument_list|>
name|roomTypes
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|form
operator|.
name|getRoomTypes
argument_list|()
operator|!=
literal|null
operator|&&
name|form
operator|.
name|getRoomTypes
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|String
name|types
init|=
literal|""
decl_stmt|;
name|roomTypes
operator|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|form
operator|.
name|getRoomTypes
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|types
operator|+=
operator|(
name|types
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|":type"
operator|+
name|i
expr_stmt|;
name|roomTypes
operator|.
name|add
argument_list|(
name|form
operator|.
name|getRoomTypes
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|where
operator|+=
literal|" and l.roomType.uniqueId in ("
operator|+
name|types
operator|+
literal|")"
expr_stmt|;
block|}
name|List
argument_list|<
name|Long
argument_list|>
name|roomGroups
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|form
operator|.
name|getRoomGroups
argument_list|()
operator|!=
literal|null
operator|&&
name|form
operator|.
name|getRoomGroups
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|String
name|groups
init|=
literal|""
decl_stmt|;
name|roomGroups
operator|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|form
operator|.
name|getRoomGroups
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|groups
operator|+=
operator|(
name|groups
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|":group"
operator|+
name|i
expr_stmt|;
name|roomGroups
operator|.
name|add
argument_list|(
name|form
operator|.
name|getRoomGroups
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|where
operator|+=
literal|" and g.uniqueId in ("
operator|+
name|groups
operator|+
literal|")"
expr_stmt|;
block|}
name|List
argument_list|<
name|Long
argument_list|>
name|roomFeatures
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|form
operator|.
name|getRoomFeatures
argument_list|()
operator|!=
literal|null
operator|&&
name|form
operator|.
name|getRoomFeatures
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|roomFeatures
operator|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|form
operator|.
name|getRoomFeatures
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|from
operator|+=
literal|" inner join l.features f"
operator|+
name|i
expr_stmt|;
name|where
operator|+=
literal|" and f"
operator|+
name|i
operator|+
literal|".uniqueId = :feature"
operator|+
name|i
expr_stmt|;
name|roomFeatures
operator|.
name|add
argument_list|(
name|form
operator|.
name|getRoomFeatures
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|filter
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|form
operator|.
name|getFilter
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|form
operator|.
name|getFilter
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|filter
operator|=
name|form
operator|.
name|getFilter
argument_list|()
expr_stmt|;
name|where
operator|+=
literal|" and ((l.class = Room and (lower(l.buildingAbbv || ' ' || l.roomNumber) like :filter or lower(l.displayName) like :filter)) or (l.class = NonUniversityLocation and lower(l.name) like :filter))"
expr_stmt|;
block|}
name|Query
name|query
init|=
name|LocationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct l from "
operator|+
name|from
operator|+
literal|" where "
operator|+
name|where
argument_list|)
decl_stmt|;
name|query
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|departmentIds
operator|!=
literal|null
condition|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|departmentIds
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|query
operator|.
name|setLong
argument_list|(
literal|"dept"
operator|+
name|i
argument_list|,
name|departmentIds
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|examTypeId
operator|!=
literal|null
condition|)
name|query
operator|.
name|setLong
argument_list|(
literal|"examTypeId"
argument_list|,
name|examTypeId
argument_list|)
expr_stmt|;
if|if
condition|(
name|minSize
operator|!=
literal|null
condition|)
name|query
operator|.
name|setInteger
argument_list|(
literal|"minSize"
argument_list|,
name|minSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxSize
operator|!=
literal|null
condition|)
name|query
operator|.
name|setInteger
argument_list|(
literal|"maxSize"
argument_list|,
name|maxSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|filter
operator|!=
literal|null
condition|)
name|query
operator|.
name|setString
argument_list|(
literal|"filter"
argument_list|,
literal|"%"
operator|+
name|filter
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"%"
argument_list|)
expr_stmt|;
if|if
condition|(
name|roomTypes
operator|!=
literal|null
condition|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|roomTypes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|query
operator|.
name|setLong
argument_list|(
literal|"type"
operator|+
name|i
argument_list|,
name|roomTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|roomGroups
operator|!=
literal|null
condition|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|roomGroups
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|query
operator|.
name|setLong
argument_list|(
literal|"group"
operator|+
name|i
argument_list|,
name|roomGroups
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|roomFeatures
operator|!=
literal|null
condition|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|roomFeatures
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|query
operator|.
name|setLong
argument_list|(
literal|"feature"
operator|+
name|i
argument_list|,
name|roomFeatures
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setRooms
argument_list|(
operator|(
name|List
argument_list|<
name|Location
argument_list|>
operator|)
name|query
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** 	 *  	 * @param request 	 * @param roomListForm 	 * @throws Exception  	 */
specifier|private
name|void
name|buildWebTable
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|RoomListForm
name|roomListForm
parameter_list|,
name|boolean
name|featuresOneColumn
parameter_list|,
name|ExamType
name|examType
parameter_list|)
throws|throws
name|Exception
block|{
name|ActionMessages
name|errors
init|=
operator|new
name|ActionMessages
argument_list|()
decl_stmt|;
name|Long
name|sessionId
init|=
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
name|DecimalFormat
name|dfa
init|=
operator|new
name|DecimalFormat
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.room.area.units.format"
argument_list|,
literal|"#,##0.00"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
name|rooms
init|=
name|roomListForm
operator|.
name|getRooms
argument_list|()
decl_stmt|;
if|if
condition|(
name|rooms
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"searchResult"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"No rooms for the selected department were found."
argument_list|)
argument_list|)
expr_stmt|;
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ArrayList
name|globalRoomFeatures
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Set
name|deptRoomFeatures
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
name|Set
name|depts
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"All"
argument_list|)
condition|)
block|{
name|depts
operator|=
name|Department
operator|.
name|getUserDepartments
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|matches
argument_list|(
literal|"Exam[0-9]*"
argument_list|)
condition|)
block|{
name|depts
operator|=
operator|new
name|HashSet
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|depts
operator|=
operator|new
name|HashSet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|depts
operator|.
name|add
argument_list|(
name|Department
operator|.
name|findByDeptCode
argument_list|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
argument_list|,
name|sessionId
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
literal|null
decl_stmt|;
try|try
block|{
name|RoomFeatureDAO
name|d
init|=
operator|new
name|RoomFeatureDAO
argument_list|()
decl_stmt|;
name|hibSession
operator|=
name|d
operator|.
name|getSession
argument_list|()
expr_stmt|;
name|List
name|list
init|=
name|hibSession
operator|.
name|createCriteria
argument_list|(
name|GlobalRoomFeature
operator|.
name|class
argument_list|)
operator|.
name|add
argument_list|(
name|Restrictions
operator|.
name|eq
argument_list|(
literal|"session.uniqueId"
argument_list|,
name|sessionId
argument_list|)
argument_list|)
operator|.
name|addOrder
argument_list|(
name|Order
operator|.
name|asc
argument_list|(
literal|"label"
argument_list|)
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|list
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|GlobalRoomFeature
name|rf
init|=
operator|(
name|GlobalRoomFeature
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|globalRoomFeatures
operator|.
name|add
argument_list|(
name|rf
argument_list|)
expr_stmt|;
block|}
name|Debug
operator|.
name|debug
argument_list|(
literal|"global room feature: "
operator|+
name|globalRoomFeatures
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"All"
argument_list|)
condition|)
block|{
if|if
condition|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|DepartmentIndependent
argument_list|)
condition|)
block|{
name|deptRoomFeatures
operator|.
name|addAll
argument_list|(
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct f from DepartmentRoomFeature f inner join f.department d where "
operator|+
literal|"d.session.uniqueId=:sessionId order by f.label"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|deptIds
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Qualifiable
name|q
range|:
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|getQualifiers
argument_list|(
literal|"Department"
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|deptIds
operator|.
name|isEmpty
argument_list|()
condition|)
name|deptIds
operator|+=
literal|","
expr_stmt|;
name|deptIds
operator|+=
name|q
operator|.
name|getQualifierId
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|deptIds
operator|.
name|isEmpty
argument_list|()
condition|)
name|deptRoomFeatures
operator|.
name|addAll
argument_list|(
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct f from DepartmentRoomFeature f inner join f.department d "
operator|+
literal|"where d.session.uniqueId=:sessionId and d.uniqueId in ("
operator|+
name|deptIds
operator|+
literal|") order by f.label"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|matches
argument_list|(
literal|"Exam[0-9]*"
argument_list|)
condition|)
block|{
block|}
else|else
block|{
name|deptRoomFeatures
operator|.
name|addAll
argument_list|(
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct f from DepartmentRoomFeature f inner join f.department d "
operator|+
literal|"where d.session.uniqueId=:sessionId and d.deptCode = :deptCode order by f.label"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setString
argument_list|(
literal|"deptCode"
argument_list|,
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Debug
operator|.
name|debug
argument_list|(
literal|"manager room feature: "
operator|+
name|deptRoomFeatures
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|//build headings for university rooms
name|String
name|fixedHeading1
index|[]
index|[]
init|=
operator|(
name|examType
operator|!=
literal|null
condition|?
operator|(
name|featuresOneColumn
condition|?
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"Bldg"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Room"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Exam Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
name|MSG
operator|.
name|columnArea
argument_list|()
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Period Preferences"
block|,
literal|"center"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Groups"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Features"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|}
else|:
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"Bldg"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Room"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
name|MSG
operator|.
name|columnArea
argument_list|()
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Exam Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Period Preferences"
block|,
literal|"center"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Groups"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|}
operator|)
else|:
operator|(
name|featuresOneColumn
condition|?
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"Bldg"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Room"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
name|MSG
operator|.
name|columnArea
argument_list|()
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Availability"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Departments"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Control"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Events"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Groups"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Features"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|}
else|:
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"Bldg"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Room"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
name|MSG
operator|.
name|columnArea
argument_list|()
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Availability"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Departments"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Control"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Events"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Groups"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|}
operator|)
operator|)
decl_stmt|;
name|String
name|heading1
index|[]
init|=
operator|new
name|String
index|[
name|fixedHeading1
operator|.
name|length
operator|+
operator|(
name|featuresOneColumn
condition|?
literal|0
else|:
operator|(
name|globalRoomFeatures
operator|.
name|size
argument_list|()
operator|+
name|deptRoomFeatures
operator|.
name|size
argument_list|()
operator|)
operator|)
index|]
decl_stmt|;
name|String
name|alignment1
index|[]
init|=
operator|new
name|String
index|[
name|heading1
operator|.
name|length
index|]
decl_stmt|;
name|boolean
name|sorted1
index|[]
init|=
operator|new
name|boolean
index|[
name|heading1
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fixedHeading1
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|heading1
index|[
name|i
index|]
operator|=
name|fixedHeading1
index|[
name|i
index|]
index|[
literal|0
index|]
expr_stmt|;
name|alignment1
index|[
name|i
index|]
operator|=
name|fixedHeading1
index|[
name|i
index|]
index|[
literal|1
index|]
expr_stmt|;
name|sorted1
index|[
name|i
index|]
operator|=
operator|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|fixedHeading1
index|[
name|i
index|]
index|[
literal|2
index|]
argument_list|)
operator|)
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|featuresOneColumn
condition|)
block|{
name|int
name|i
init|=
name|fixedHeading1
operator|.
name|length
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|globalRoomFeatures
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|GlobalRoomFeature
name|grf
init|=
operator|(
name|GlobalRoomFeature
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|heading1
index|[
name|i
index|]
operator|=
literal|"<span title='"
operator|+
name|grf
operator|.
name|getLabel
argument_list|()
operator|+
literal|"'>"
operator|+
name|grf
operator|.
name|getAbbv
argument_list|()
operator|+
literal|"</span>"
expr_stmt|;
name|alignment1
index|[
name|i
index|]
operator|=
literal|"center"
expr_stmt|;
name|sorted1
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|it
init|=
name|deptRoomFeatures
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentRoomFeature
name|drf
init|=
operator|(
name|DepartmentRoomFeature
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|title
init|=
name|drf
operator|.
name|getLabel
argument_list|()
decl_stmt|;
if|if
condition|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"All"
argument_list|)
condition|)
block|{
name|Department
name|dept
init|=
name|drf
operator|.
name|getDepartment
argument_list|()
decl_stmt|;
name|title
operator|+=
literal|" ("
operator|+
name|dept
operator|.
name|getShortLabel
argument_list|()
operator|+
literal|")"
expr_stmt|;
block|}
name|heading1
index|[
name|i
index|]
operator|=
literal|"<span title='"
operator|+
name|title
operator|+
literal|"'>"
operator|+
name|drf
operator|.
name|getAbbv
argument_list|()
operator|+
literal|"</span>"
expr_stmt|;
name|alignment1
index|[
name|i
index|]
operator|=
literal|"center"
expr_stmt|;
name|sorted1
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
comment|//build headings for non-univ locations
name|String
name|fixedHeading2
index|[]
index|[]
init|=
operator|(
name|examType
operator|!=
literal|null
condition|?
operator|(
name|featuresOneColumn
condition|?
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"Location"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Exam Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
name|MSG
operator|.
name|columnArea
argument_list|()
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Period Preferences"
block|,
literal|"center"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Groups"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Features"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|}
else|:
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"Location"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Exam Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
name|MSG
operator|.
name|columnArea
argument_list|()
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Period Preferences"
block|,
literal|"center"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Groups"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|}
operator|)
else|:
operator|(
name|featuresOneColumn
condition|?
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"Location"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
name|MSG
operator|.
name|columnArea
argument_list|()
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"IgnTooFar"
block|,
literal|"center"
block|,
literal|"true"
block|}
block|,
block|{
literal|"IgnChecks"
block|,
literal|"center"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Availability"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Departments"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Control"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Events"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Groups"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Features"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|}
else|:
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"Location"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
name|MSG
operator|.
name|columnArea
argument_list|()
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"IgnTooFar"
block|,
literal|"center"
block|,
literal|"true"
block|}
block|,
block|{
literal|"IgnChecks"
block|,
literal|"center"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Availability"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Departments"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Control"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Events"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Groups"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|}
operator|)
operator|)
decl_stmt|;
name|String
name|heading2
index|[]
init|=
operator|new
name|String
index|[
name|fixedHeading2
operator|.
name|length
operator|+
operator|(
name|featuresOneColumn
condition|?
literal|0
else|:
operator|(
name|globalRoomFeatures
operator|.
name|size
argument_list|()
operator|+
name|deptRoomFeatures
operator|.
name|size
argument_list|()
operator|)
operator|)
index|]
decl_stmt|;
name|String
name|alignment2
index|[]
init|=
operator|new
name|String
index|[
name|heading2
operator|.
name|length
index|]
decl_stmt|;
name|boolean
name|sorted2
index|[]
init|=
operator|new
name|boolean
index|[
name|heading2
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fixedHeading2
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|heading2
index|[
name|i
index|]
operator|=
name|fixedHeading2
index|[
name|i
index|]
index|[
literal|0
index|]
expr_stmt|;
name|alignment2
index|[
name|i
index|]
operator|=
name|fixedHeading2
index|[
name|i
index|]
index|[
literal|1
index|]
expr_stmt|;
name|sorted2
index|[
name|i
index|]
operator|=
operator|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|fixedHeading2
index|[
name|i
index|]
index|[
literal|2
index|]
argument_list|)
operator|)
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|featuresOneColumn
condition|)
block|{
name|int
name|i
init|=
name|fixedHeading2
operator|.
name|length
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|globalRoomFeatures
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|GlobalRoomFeature
name|grf
init|=
operator|(
name|GlobalRoomFeature
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|heading2
index|[
name|i
index|]
operator|=
literal|"<span title='"
operator|+
name|grf
operator|.
name|getLabel
argument_list|()
operator|+
literal|"'>"
operator|+
name|grf
operator|.
name|getAbbv
argument_list|()
operator|+
literal|"</span>"
expr_stmt|;
name|alignment2
index|[
name|i
index|]
operator|=
literal|"center"
expr_stmt|;
name|sorted2
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|it
init|=
name|deptRoomFeatures
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentRoomFeature
name|drf
init|=
operator|(
name|DepartmentRoomFeature
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|title
init|=
name|drf
operator|.
name|getLabel
argument_list|()
decl_stmt|;
if|if
condition|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"All"
argument_list|)
condition|)
block|{
name|Department
name|dept
init|=
name|drf
operator|.
name|getDepartment
argument_list|()
decl_stmt|;
name|title
operator|+=
literal|" ("
operator|+
name|dept
operator|.
name|getShortLabel
argument_list|()
operator|+
literal|")"
expr_stmt|;
block|}
name|heading2
index|[
name|i
index|]
operator|=
literal|"<span title='"
operator|+
name|title
operator|+
literal|"'>"
operator|+
name|drf
operator|.
name|getAbbv
argument_list|()
operator|+
literal|"</span>"
expr_stmt|;
name|alignment2
index|[
name|i
index|]
operator|=
literal|"center"
expr_stmt|;
name|sorted2
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
name|TreeSet
argument_list|<
name|RoomType
argument_list|>
name|roomTypes
init|=
operator|new
name|TreeSet
argument_list|<
name|RoomType
argument_list|>
argument_list|(
name|RoomTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|()
argument_list|)
decl_stmt|;
name|Hashtable
argument_list|<
name|RoomType
argument_list|,
name|WebTable
argument_list|>
name|tables
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|RoomType
name|t
range|:
name|roomTypes
control|)
block|{
name|WebTable
operator|.
name|setOrder
argument_list|(
name|sessionContext
argument_list|,
name|t
operator|.
name|getReference
argument_list|()
operator|+
literal|".ord"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
name|t
operator|.
name|getReference
argument_list|()
operator|+
literal|"Ord"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|WebTable
name|table
init|=
operator|(
name|t
operator|.
name|isRoom
argument_list|()
condition|?
operator|new
name|WebTable
argument_list|(
name|heading1
operator|.
name|length
argument_list|,
name|t
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|"roomList.do?"
operator|+
name|t
operator|.
name|getReference
argument_list|()
operator|+
literal|"Ord=%%"
argument_list|,
name|heading1
argument_list|,
name|alignment1
argument_list|,
name|sorted1
argument_list|)
else|:
operator|new
name|WebTable
argument_list|(
name|heading2
operator|.
name|length
argument_list|,
name|t
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|"roomList.do?"
operator|+
name|t
operator|.
name|getReference
argument_list|()
operator|+
literal|"Ord=%%"
argument_list|,
name|heading2
argument_list|,
name|alignment2
argument_list|,
name|sorted2
argument_list|)
operator|)
decl_stmt|;
name|table
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap"
argument_list|)
expr_stmt|;
name|tables
operator|.
name|put
argument_list|(
name|t
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
name|boolean
name|timeVertical
init|=
name|CommonValues
operator|.
name|VerticalGrid
operator|.
name|eq
argument_list|(
name|UserProperty
operator|.
name|GridOrientation
operator|.
name|get
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|gridAsText
init|=
name|CommonValues
operator|.
name|TextGrid
operator|.
name|eq
argument_list|(
name|UserProperty
operator|.
name|GridOrientation
operator|.
name|get
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|timeGridSize
init|=
name|UserProperty
operator|.
name|GridSize
operator|.
name|get
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
name|Department
name|dept
init|=
operator|new
name|Department
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"All"
argument_list|)
condition|)
block|{
name|dept
operator|=
name|Department
operator|.
name|findByDeptCode
argument_list|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
argument_list|,
name|sessionId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dept
operator|=
literal|null
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|iter
init|=
name|rooms
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|location
init|=
operator|(
name|Location
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|editable
init|=
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomDetail
argument_list|)
decl_stmt|;
name|Room
name|room
init|=
operator|(
name|location
operator|instanceof
name|Room
condition|?
operator|(
name|Room
operator|)
name|location
else|:
literal|null
operator|)
decl_stmt|;
name|Building
name|bldg
init|=
operator|(
name|room
operator|==
literal|null
condition|?
literal|null
else|:
name|room
operator|.
name|getBuilding
argument_list|()
operator|)
decl_stmt|;
name|DecimalFormat
name|df5
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"####0"
argument_list|)
decl_stmt|;
name|String
name|text
index|[]
init|=
operator|new
name|String
index|[
name|Math
operator|.
name|max
argument_list|(
name|heading1
operator|.
name|length
argument_list|,
name|heading2
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
name|Comparable
name|comp
index|[]
init|=
operator|new
name|Comparable
index|[
name|text
operator|.
name|length
index|]
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|bldg
operator|!=
literal|null
condition|)
block|{
name|text
index|[
name|idx
index|]
operator|=
operator|(
name|editable
condition|?
literal|""
else|:
literal|"<font color='gray'>"
operator|)
operator|+
operator|(
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"<i>"
else|:
literal|""
operator|)
operator|+
literal|"<span onmouseover=\"showGwtRoomHint(this, '-"
operator|+
name|bldg
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"');\" onmouseout=\"hideGwtRoomHint();\">"
operator|+
name|bldg
operator|.
name|getAbbreviation
argument_list|()
operator|+
literal|"</span>"
operator|+
operator|(
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"</i>"
else|:
literal|""
operator|)
operator|+
operator|(
name|editable
condition|?
literal|""
else|:
literal|"</font>"
operator|)
expr_stmt|;
name|comp
index|[
literal|0
index|]
operator|=
name|location
operator|.
name|getLabel
argument_list|()
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
name|text
index|[
name|idx
index|]
operator|=
operator|(
name|editable
condition|?
literal|""
else|:
literal|"<font color='gray'>"
operator|)
operator|+
operator|(
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"<i>"
else|:
literal|""
operator|)
operator|+
operator|(
name|room
operator|==
literal|null
condition|?
name|location
operator|.
name|getLabelWithHint
argument_list|()
else|:
literal|"<span onmouseover=\"showGwtRoomHint(this, '"
operator|+
name|location
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"');\" onmouseout=\"hideGwtRoomHint();\">"
operator|+
name|room
operator|.
name|getRoomNumber
argument_list|()
operator|+
literal|"</span>"
operator|)
operator|+
operator|(
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"</i>"
else|:
literal|""
operator|)
operator|+
operator|(
name|editable
condition|?
literal|""
else|:
literal|"</font>"
operator|)
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
name|location
operator|.
name|getLabel
argument_list|()
expr_stmt|;
name|idx
operator|++
expr_stmt|;
name|text
index|[
name|idx
index|]
operator|=
operator|(
name|editable
condition|?
literal|""
else|:
literal|"<font color='gray'>"
operator|)
operator|+
name|df5
operator|.
name|format
argument_list|(
name|location
operator|.
name|getCapacity
argument_list|()
argument_list|)
operator|+
operator|(
name|editable
condition|?
literal|""
else|:
literal|"</font>"
operator|)
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
operator|new
name|Long
argument_list|(
name|location
operator|.
name|getCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
if|if
condition|(
name|examType
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|location
operator|.
name|isExamEnabled
argument_list|(
name|examType
argument_list|)
condition|)
block|{
name|text
index|[
name|idx
index|]
operator|=
operator|(
name|editable
condition|?
literal|""
else|:
literal|"<font color='gray'>"
operator|)
operator|+
name|df5
operator|.
name|format
argument_list|(
name|location
operator|.
name|getExamCapacity
argument_list|()
argument_list|)
operator|+
operator|(
name|editable
condition|?
literal|""
else|:
literal|"</font>"
operator|)
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
name|location
operator|.
name|getExamCapacity
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|text
index|[
name|idx
index|]
operator|=
literal|"&nbsp;"
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
if|if
condition|(
name|location
operator|.
name|getArea
argument_list|()
operator|==
literal|null
condition|)
block|{
name|text
index|[
name|idx
index|]
operator|=
literal|"&nbsp;"
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
operator|new
name|Double
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|text
index|[
name|idx
index|]
operator|=
name|dfa
operator|.
name|format
argument_list|(
name|location
operator|.
name|getArea
argument_list|()
argument_list|)
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
name|location
operator|.
name|getArea
argument_list|()
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
if|if
condition|(
name|location
operator|.
name|isExamEnabled
argument_list|(
name|examType
argument_list|)
condition|)
block|{
if|if
condition|(
name|gridAsText
condition|)
name|text
index|[
name|idx
index|]
operator|=
name|location
operator|.
name|getExamPreferencesAbbreviationHtml
argument_list|(
name|examType
argument_list|)
expr_stmt|;
else|else
block|{
if|if
condition|(
name|examType
operator|.
name|getType
argument_list|()
operator|==
name|ExamType
operator|.
name|sExamTypeMidterm
condition|)
block|{
name|MidtermPeriodPreferenceModel
name|epx
init|=
operator|new
name|MidtermPeriodPreferenceModel
argument_list|(
name|location
operator|.
name|getSession
argument_list|()
argument_list|,
name|examType
argument_list|)
decl_stmt|;
name|epx
operator|.
name|load
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|text
index|[
name|idx
index|]
operator|=
name|epx
operator|.
name|toString
argument_list|(
literal|true
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|", "
argument_list|,
literal|"<br>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PeriodPreferenceModel
name|px
init|=
operator|new
name|PeriodPreferenceModel
argument_list|(
name|location
operator|.
name|getSession
argument_list|()
argument_list|,
name|examType
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|px
operator|.
name|load
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|RequiredTimeTable
name|rtt
init|=
operator|new
name|RequiredTimeTable
argument_list|(
name|px
argument_list|)
decl_stmt|;
name|String
name|hint
init|=
name|rtt
operator|.
name|print
argument_list|(
literal|false
argument_list|,
name|timeVertical
argument_list|)
operator|.
name|replace
argument_list|(
literal|");\n</script>"
argument_list|,
literal|""
argument_list|)
operator|.
name|replace
argument_list|(
literal|"<script language=\"javascript\">\ndocument.write("
argument_list|,
literal|""
argument_list|)
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|" "
argument_list|)
decl_stmt|;
name|text
index|[
name|idx
index|]
operator|=
literal|"<img border='0' src='"
operator|+
literal|"pattern?v="
operator|+
operator|(
name|timeVertical
condition|?
literal|1
else|:
literal|0
operator|)
operator|+
literal|"&loc="
operator|+
name|location
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"&xt="
operator|+
name|examType
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"' onmouseover=\"showGwtHint(this, "
operator|+
name|hint
operator|+
literal|");\" onmouseout=\"hideGwtHint();\">"
expr_stmt|;
block|}
block|}
name|comp
index|[
name|idx
index|]
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|text
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
literal|null
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|location
operator|.
name|getArea
argument_list|()
operator|==
literal|null
condition|)
block|{
name|text
index|[
name|idx
index|]
operator|=
literal|"&nbsp;"
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
operator|new
name|Double
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|text
index|[
name|idx
index|]
operator|=
name|dfa
operator|.
name|format
argument_list|(
name|location
operator|.
name|getArea
argument_list|()
argument_list|)
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
name|location
operator|.
name|getArea
argument_list|()
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
name|PreferenceLevel
name|roomPref
init|=
name|location
operator|.
name|getRoomPreferenceLevel
argument_list|(
name|dept
argument_list|)
decl_stmt|;
if|if
condition|(
name|editable
operator|&&
name|roomPref
operator|!=
literal|null
operator|&&
operator|!
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|roomPref
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|room
operator|==
literal|null
condition|)
block|{
name|text
index|[
literal|0
index|]
operator|=
operator|(
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"<i>"
else|:
literal|""
operator|)
operator|+
literal|"<span style='color:"
operator|+
name|roomPref
operator|.
name|prefcolor
argument_list|()
operator|+
literal|";font-weight:bold;' onmouseover=\"showGwtRoomHint(this, '"
operator|+
name|location
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"', '"
operator|+
name|roomPref
operator|.
name|getPrefName
argument_list|()
operator|+
literal|"');\" onmouseout=\"hideGwtRoomHint();\">"
operator|+
name|location
operator|.
name|getLabel
argument_list|()
operator|+
literal|"</span>"
operator|+
operator|(
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"</i>"
else|:
literal|""
operator|)
expr_stmt|;
block|}
else|else
block|{
name|text
index|[
literal|0
index|]
operator|=
operator|(
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"<i>"
else|:
literal|""
operator|)
operator|+
literal|"<span style='color:"
operator|+
name|roomPref
operator|.
name|prefcolor
argument_list|()
operator|+
literal|";font-weight:bold;' onmouseover=\"showGwtRoomHint(this, '-"
operator|+
name|bldg
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"', '"
operator|+
operator|(
name|bldg
operator|==
literal|null
condition|?
name|roomPref
operator|.
name|getPrefName
argument_list|()
else|:
literal|""
operator|)
operator|+
literal|"');\" onmouseout=\"hideGwtRoomHint();\">"
operator|+
operator|(
name|bldg
operator|==
literal|null
condition|?
literal|""
else|:
name|bldg
operator|.
name|getAbbreviation
argument_list|()
operator|)
operator|+
literal|"</span>"
operator|+
operator|(
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"</i>"
else|:
literal|""
operator|)
expr_stmt|;
name|text
index|[
literal|1
index|]
operator|=
operator|(
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"<i>"
else|:
literal|""
operator|)
operator|+
literal|"<span style='color:"
operator|+
name|roomPref
operator|.
name|prefcolor
argument_list|()
operator|+
literal|";font-weight:bold;' onmouseover=\"showGwtRoomHint(this, '"
operator|+
name|location
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"', '"
operator|+
name|roomPref
operator|.
name|getPrefName
argument_list|()
operator|+
literal|"');\" onmouseout=\"hideGwtRoomHint();\">"
operator|+
name|room
operator|.
name|getRoomNumber
argument_list|()
operator|+
literal|"</span>"
operator|+
operator|(
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"</i>"
else|:
literal|""
operator|)
expr_stmt|;
block|}
block|}
comment|//ignore too far
if|if
condition|(
name|location
operator|instanceof
name|NonUniversityLocation
condition|)
block|{
name|boolean
name|itf
init|=
operator|(
name|location
operator|.
name|isIgnoreTooFar
argument_list|()
operator|==
literal|null
condition|?
literal|false
else|:
name|location
operator|.
name|isIgnoreTooFar
argument_list|()
operator|.
name|booleanValue
argument_list|()
operator|)
decl_stmt|;
name|text
index|[
name|idx
index|]
operator|=
operator|(
name|itf
condition|?
literal|"<IMG border='0' title='Ignore too far distances' alt='true' align='absmiddle' src='images/tick.gif'>"
else|:
literal|"&nbsp;"
operator|)
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
operator|new
name|Integer
argument_list|(
name|itf
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
name|boolean
name|con
init|=
operator|(
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|==
literal|null
condition|?
literal|true
else|:
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|.
name|booleanValue
argument_list|()
operator|)
decl_stmt|;
name|text
index|[
name|idx
index|]
operator|=
operator|(
name|con
condition|?
literal|"<IMG border='0' title='Create Constraint' alt='true' align='absmiddle' src='images/tick.gif'>"
else|:
literal|"&nbsp;"
operator|)
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
operator|new
name|Integer
argument_list|(
name|con
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomDetailAvailability
argument_list|)
condition|)
block|{
comment|// get pattern column
name|RequiredTimeTable
name|rtt
init|=
name|location
operator|.
name|getRoomSharingTable
argument_list|()
decl_stmt|;
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|setDefaultSelection
argument_list|(
name|timeGridSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|gridAsText
condition|)
block|{
comment|// String hint = rtt.print(false, timeVertical).replace(");\n</script>", "").replace("<script language=\"javascript\">\ndocument.write(", "").replace("\n", " ");
comment|// text[idx] = "<span onmouseover=\"showGwtHint(this, " + hint + ");\" onmouseout=\"hideGwtHint();\">" + rtt.getModel().toString().replaceAll(", ","<br>") + "</span>";
name|text
index|[
name|idx
index|]
operator|=
literal|"<span onmouseover=\"showGwtRoomAvailabilityHint(this, '"
operator|+
name|location
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"');\" onmouseout=\"hideGwtRoomAvailabilityHint();\">"
operator|+
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|", "
argument_list|,
literal|"<br>"
argument_list|)
operator|+
literal|"</span>"
expr_stmt|;
block|}
else|else
block|{
comment|// String hint = rtt.print(false, timeVertical).replace(");\n</script>", "").replace("<script language=\"javascript\">\ndocument.write(", "").replace("\n", " ");
comment|// text[idx] = "<img border='0' onmouseover=\"showGwtHint(this, " + hint + ");\" onmouseout=\"hideGwtHint();\" src='" +
name|text
index|[
name|idx
index|]
operator|=
literal|"<img border='0' onmouseover=\"showGwtRoomAvailabilityHint(this, '"
operator|+
name|location
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"');\" onmouseout=\"hideGwtRoomAvailabilityHint();\" src='"
operator|+
literal|"pattern?v="
operator|+
operator|(
name|timeVertical
condition|?
literal|1
else|:
literal|0
operator|)
operator|+
literal|"&s="
operator|+
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|getDefaultSelection
argument_list|()
operator|+
literal|"&loc="
operator|+
name|location
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"'>&nbsp;"
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomDetailEventAvailability
argument_list|)
condition|)
block|{
comment|// get pattern column
name|RequiredTimeTable
name|rtt
init|=
name|location
operator|.
name|getEventAvailabilityTable
argument_list|()
decl_stmt|;
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|setDefaultSelection
argument_list|(
name|timeGridSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|gridAsText
condition|)
block|{
comment|// String hint = rtt.print(false, timeVertical).replace(");\n</script>", "").replace("<script language=\"javascript\">\ndocument.write(", "").replace("\n", " ");
comment|// text[idx] = "<span onmouseover=\"showGwtHint(this, " + hint + ");\" onmouseout=\"hideGwtHint();\">" + rtt.getModel().toString().replaceAll(", ","<br>") + "</span>";
name|text
index|[
name|idx
index|]
operator|=
literal|"<span onmouseover=\"showGwtRoomEventAvailabilityHint(this, '"
operator|+
name|location
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"');\" onmouseout=\"hideGwtRoomEventAvailabilityHint();\">"
operator|+
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|", "
argument_list|,
literal|"<br>"
argument_list|)
operator|+
literal|"</span>"
expr_stmt|;
block|}
else|else
block|{
comment|// String hint = rtt.print(false, timeVertical).replace(");\n</script>", "").replace("<script language=\"javascript\">\ndocument.write(", "").replace("\n", " ");
comment|// text[idx] = "<img border='0' onmouseover=\"showGwtHint(this, " + hint + ");\" onmouseout=\"hideGwtHint();\" src='" +
name|text
index|[
name|idx
index|]
operator|=
literal|"<img border='0' onmouseover=\"showGwtRoomEventAvailabilityHint(this, '"
operator|+
name|location
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"');\" onmouseout=\"hideGwtRoomEventAvailabilityHint();\" src='"
operator|+
literal|"pattern?v="
operator|+
operator|(
name|timeVertical
condition|?
literal|1
else|:
literal|0
operator|)
operator|+
literal|"&s="
operator|+
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|getDefaultSelection
argument_list|()
operator|+
literal|"&loc="
operator|+
name|location
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"&e=1'>&nbsp;"
expr_stmt|;
block|}
block|}
name|comp
index|[
name|idx
index|]
operator|=
literal|null
expr_stmt|;
name|idx
operator|++
expr_stmt|;
comment|// get departments column
name|Department
name|controlDept
init|=
literal|null
decl_stmt|;
name|text
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
name|Set
name|rds
init|=
name|location
operator|.
name|getRoomDepts
argument_list|()
decl_stmt|;
name|Set
name|departments
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iterRds
init|=
name|rds
operator|.
name|iterator
argument_list|()
init|;
name|iterRds
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomDept
name|rd
init|=
operator|(
name|RoomDept
operator|)
name|iterRds
operator|.
name|next
argument_list|()
decl_stmt|;
name|Department
name|d
init|=
name|rd
operator|.
name|getDepartment
argument_list|()
decl_stmt|;
if|if
condition|(
name|rd
operator|.
name|isControl
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
name|controlDept
operator|=
name|d
expr_stmt|;
name|departments
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
name|TreeSet
name|ts
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|DepartmentNameComparator
argument_list|()
argument_list|)
decl_stmt|;
name|ts
operator|.
name|addAll
argument_list|(
name|departments
argument_list|)
expr_stmt|;
if|if
condition|(
name|ts
operator|.
name|size
argument_list|()
operator|==
name|session
operator|.
name|getDepartments
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
name|text
index|[
name|idx
index|]
operator|=
literal|"<b>All</b>"
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
block|}
else|else
block|{
name|int
name|cnt
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|ts
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
name|cnt
operator|++
control|)
block|{
name|Department
name|d
init|=
operator|(
name|Department
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|text
index|[
name|idx
index|]
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|text
index|[
name|idx
index|]
operator|=
name|text
index|[
name|idx
index|]
operator|+
operator|(
name|ts
operator|.
name|size
argument_list|()
operator|<=
literal|5
operator|||
name|cnt
operator|%
literal|5
operator|==
literal|0
condition|?
literal|"<br>"
else|:
literal|", "
operator|)
expr_stmt|;
else|else
name|comp
index|[
name|idx
index|]
operator|=
name|d
operator|.
name|getDeptCode
argument_list|()
expr_stmt|;
name|text
index|[
name|idx
index|]
operator|=
name|text
index|[
name|idx
index|]
operator|+
name|d
operator|.
name|htmlShortLabel
argument_list|()
expr_stmt|;
block|}
block|}
name|idx
operator|++
expr_stmt|;
comment|//control column
if|if
condition|(
operator|!
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"All"
argument_list|)
operator|&&
operator|!
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|matches
argument_list|(
literal|"Exam[0-9]*"
argument_list|)
condition|)
block|{
if|if
condition|(
name|controlDept
operator|!=
literal|null
operator|&&
name|controlDept
operator|.
name|getDeptCode
argument_list|()
operator|.
name|equals
argument_list|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
argument_list|)
condition|)
block|{
name|text
index|[
name|idx
index|]
operator|=
literal|"<IMG border='0' title='Selected department is controlling this room.' alt='true' align='absmiddle' src='images/tick.gif'>"
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|text
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|controlDept
operator|!=
literal|null
condition|)
block|{
name|text
index|[
name|idx
index|]
operator|=
name|controlDept
operator|.
name|htmlShortLabel
argument_list|()
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
name|controlDept
operator|.
name|getDeptCode
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|text
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
block|}
block|}
name|idx
operator|++
expr_stmt|;
comment|//events column
if|if
condition|(
name|location
operator|.
name|getEventDepartment
argument_list|()
operator|!=
literal|null
operator|&&
name|location
operator|.
name|getEventDepartment
argument_list|()
operator|.
name|isAllowEvents
argument_list|()
condition|)
block|{
if|if
condition|(
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomDetailEventAvailability
argument_list|)
condition|)
name|text
index|[
name|idx
index|]
operator|=
literal|"<span onmouseover=\"showGwtRoomEventAvailabilityHint(this, '"
operator|+
name|location
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"');\" onmouseout=\"hideGwtRoomEventAvailabilityHint();\">"
operator|+
name|location
operator|.
name|getEventDepartment
argument_list|()
operator|.
name|htmlShortLabel
argument_list|()
operator|+
literal|"</span>"
expr_stmt|;
else|else
name|text
index|[
name|idx
index|]
operator|=
name|location
operator|.
name|getEventDepartment
argument_list|()
operator|.
name|htmlShortLabel
argument_list|()
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
name|location
operator|.
name|getEventDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|text
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
block|}
name|text
index|[
literal|0
index|]
operator|+=
literal|"<A name=\"A"
operator|+
name|location
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"\"></A>"
expr_stmt|;
comment|// get groups column
name|text
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
operator|new
name|TreeSet
argument_list|(
name|location
operator|.
name|getRoomGroups
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomGroup
name|rg
init|=
operator|(
name|RoomGroup
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|rg
operator|.
name|isGlobal
argument_list|()
operator|.
name|booleanValue
argument_list|()
operator|&&
operator|(
name|examType
operator|!=
literal|null
operator|||
operator|!
name|depts
operator|.
name|contains
argument_list|(
name|rg
operator|.
name|getDepartment
argument_list|()
argument_list|)
operator|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|rg
operator|.
name|isGlobal
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|boolean
name|skip
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|location
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomDept
name|rd
init|=
operator|(
name|RoomDept
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|rg
operator|.
name|getDepartment
argument_list|()
operator|.
name|equals
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
block|{
name|skip
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|skip
condition|)
continue|continue;
block|}
if|if
condition|(
name|text
index|[
name|idx
index|]
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|text
index|[
name|idx
index|]
operator|+=
literal|"<br>"
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
name|comp
index|[
name|idx
index|]
operator|+
name|rg
operator|.
name|getName
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|text
index|[
name|idx
index|]
operator|+=
name|rg
operator|.
name|htmlLabel
argument_list|()
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
if|if
condition|(
name|featuresOneColumn
condition|)
block|{
comment|// get features column
name|text
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
operator|new
name|TreeSet
argument_list|(
name|location
operator|.
name|getGlobalRoomFeatures
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|GlobalRoomFeature
name|rf
init|=
operator|(
name|GlobalRoomFeature
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|text
index|[
name|idx
index|]
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|text
index|[
name|idx
index|]
operator|+=
literal|"<br>"
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
name|comp
index|[
name|idx
index|]
operator|+
name|rf
operator|.
name|getLabel
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|text
index|[
name|idx
index|]
operator|+=
name|rf
operator|.
name|htmlLabel
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|examType
operator|==
literal|null
condition|)
for|for
control|(
name|Iterator
name|it
init|=
operator|new
name|TreeSet
argument_list|(
name|location
operator|.
name|getDepartmentRoomFeatures
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentRoomFeature
name|drf
init|=
operator|(
name|DepartmentRoomFeature
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|depts
operator|.
name|contains
argument_list|(
name|drf
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
continue|continue;
name|boolean
name|skip
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|location
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomDept
name|rd
init|=
operator|(
name|RoomDept
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|drf
operator|.
name|getDepartment
argument_list|()
operator|.
name|equals
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
block|{
name|skip
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|skip
condition|)
continue|continue;
if|if
condition|(
name|text
index|[
name|idx
index|]
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|text
index|[
name|idx
index|]
operator|+=
literal|"<br>"
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
name|comp
index|[
name|idx
index|]
operator|+
name|drf
operator|.
name|getLabel
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|text
index|[
name|idx
index|]
operator|+=
name|drf
operator|.
name|htmlLabel
argument_list|()
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
block|}
else|else
block|{
comment|// get features columns
for|for
control|(
name|Iterator
name|it
init|=
name|globalRoomFeatures
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|GlobalRoomFeature
name|grf
init|=
operator|(
name|GlobalRoomFeature
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|b
init|=
name|location
operator|.
name|hasFeature
argument_list|(
name|grf
argument_list|)
decl_stmt|;
name|text
index|[
name|idx
index|]
operator|=
name|b
condition|?
literal|"<IMG border='0' title='"
operator|+
name|grf
operator|.
name|getLabel
argument_list|()
operator|+
literal|"' alt='"
operator|+
name|grf
operator|.
name|getLabel
argument_list|()
operator|+
literal|"' align='absmiddle' src='images/tick.gif'>"
else|:
literal|"&nbsp;"
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
literal|""
operator|+
name|b
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|it
init|=
name|deptRoomFeatures
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentRoomFeature
name|drf
init|=
operator|(
name|DepartmentRoomFeature
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|b
init|=
name|location
operator|.
name|hasFeature
argument_list|(
name|drf
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|location
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomDept
name|rd
init|=
operator|(
name|RoomDept
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|drf
operator|.
name|getDepartment
argument_list|()
operator|.
name|equals
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
block|{
name|b
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
name|text
index|[
name|idx
index|]
operator|=
name|b
condition|?
literal|"<IMG border='0' title='"
operator|+
name|drf
operator|.
name|getLabel
argument_list|()
operator|+
literal|"' alt='"
operator|+
name|drf
operator|.
name|getLabel
argument_list|()
operator|+
literal|"' align='absmiddle' src='images/tick.gif'>"
else|:
literal|"&nbsp;"
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
literal|""
operator|+
name|b
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
block|}
comment|// build rows
if|if
condition|(
name|location
operator|instanceof
name|NonUniversityLocation
condition|)
block|{
name|tables
operator|.
name|get
argument_list|(
name|location
operator|.
name|getRoomType
argument_list|()
argument_list|)
operator|.
name|addLine
argument_list|(
operator|(
name|editable
condition|?
literal|"onClick=\"document.location='roomDetail.do?id="
operator|+
name|location
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"';\""
else|:
literal|null
operator|)
argument_list|,
name|text
argument_list|,
name|comp
argument_list|,
name|location
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tables
operator|.
name|get
argument_list|(
name|room
operator|.
name|getRoomType
argument_list|()
argument_list|)
operator|.
name|addLine
argument_list|(
operator|(
name|editable
condition|?
literal|"onClick=\"document.location='roomDetail.do?id="
operator|+
name|room
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"';\""
else|:
literal|null
operator|)
argument_list|,
name|text
argument_list|,
name|comp
argument_list|,
name|room
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|Long
argument_list|>
name|ids
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|RoomType
argument_list|,
name|WebTable
argument_list|>
name|entry
range|:
name|tables
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|int
name|ord
init|=
name|WebTable
operator|.
name|getOrder
argument_list|(
name|sessionContext
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getReference
argument_list|()
operator|+
literal|".ord"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ord
operator|>
name|heading1
operator|.
name|length
condition|)
name|ord
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getLines
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|request
operator|.
name|setAttribute
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|printTable
argument_list|(
name|ord
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ids
operator|.
name|isEmpty
argument_list|()
condition|)
name|ids
operator|.
name|add
argument_list|(
operator|-
literal|1l
argument_list|)
expr_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|WebTableLine
argument_list|>
name|e
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getLines
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ids
operator|.
name|add
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|e
operator|.
name|nextElement
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Navigation
operator|.
name|set
argument_list|(
name|sessionContext
argument_list|,
name|Navigation
operator|.
name|sInstructionalOfferingLevel
argument_list|,
name|ids
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"backId"
argument_list|)
operator|!=
literal|null
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
literal|"hash"
argument_list|,
literal|"A"
operator|+
name|request
operator|.
name|getParameter
argument_list|(
literal|"backId"
argument_list|)
argument_list|)
expr_stmt|;
name|BackTracker
operator|.
name|markForBack
argument_list|(
name|request
argument_list|,
literal|"roomSearch.do"
argument_list|,
literal|"Rooms"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"colspan"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|heading1
operator|.
name|length
argument_list|,
name|heading2
operator|.
name|length
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|buildPdfWebTable
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|RoomListForm
name|roomListForm
parameter_list|,
name|boolean
name|featuresOneColumn
parameter_list|,
name|ExamType
name|examType
parameter_list|)
throws|throws
name|Exception
block|{
name|Long
name|sessionId
init|=
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
name|DecimalFormat
name|dfa
init|=
operator|new
name|DecimalFormat
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.room.area.units.format"
argument_list|,
literal|"#,##0.00"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
name|rooms
init|=
name|roomListForm
operator|.
name|getRooms
argument_list|()
decl_stmt|;
name|ArrayList
name|globalRoomFeatures
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Set
name|deptRoomFeatures
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
name|Set
name|depts
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"All"
argument_list|)
condition|)
block|{
name|depts
operator|=
name|Department
operator|.
name|getUserDepartments
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|matches
argument_list|(
literal|"Exam[0-9]*"
argument_list|)
condition|)
block|{
name|depts
operator|=
operator|new
name|HashSet
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|depts
operator|=
operator|new
name|HashSet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|depts
operator|.
name|add
argument_list|(
name|Department
operator|.
name|findByDeptCode
argument_list|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
argument_list|,
name|sessionId
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
literal|null
decl_stmt|;
try|try
block|{
name|RoomFeatureDAO
name|d
init|=
operator|new
name|RoomFeatureDAO
argument_list|()
decl_stmt|;
name|hibSession
operator|=
name|d
operator|.
name|getSession
argument_list|()
expr_stmt|;
name|List
name|list
init|=
name|hibSession
operator|.
name|createCriteria
argument_list|(
name|GlobalRoomFeature
operator|.
name|class
argument_list|)
operator|.
name|addOrder
argument_list|(
name|Order
operator|.
name|asc
argument_list|(
literal|"label"
argument_list|)
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|list
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|GlobalRoomFeature
name|rf
init|=
operator|(
name|GlobalRoomFeature
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|globalRoomFeatures
operator|.
name|add
argument_list|(
name|rf
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"All"
argument_list|)
condition|)
block|{
if|if
condition|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|DepartmentIndependent
argument_list|)
condition|)
block|{
name|deptRoomFeatures
operator|.
name|addAll
argument_list|(
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct f from DepartmentRoomFeature f inner join f.department d where "
operator|+
literal|"d.session.uniqueId=:sessionId order by f.label"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|deptIds
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Qualifiable
name|q
range|:
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|getQualifiers
argument_list|(
literal|"Department"
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|deptIds
operator|.
name|isEmpty
argument_list|()
condition|)
name|deptIds
operator|+=
literal|","
expr_stmt|;
name|deptIds
operator|+=
name|q
operator|.
name|getQualifierId
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|deptIds
operator|.
name|isEmpty
argument_list|()
condition|)
name|deptRoomFeatures
operator|.
name|addAll
argument_list|(
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct f from DepartmentRoomFeature f inner join f.department d "
operator|+
literal|"where d.session.uniqueId=:sessionId and d.uniqueId in ("
operator|+
name|deptIds
operator|+
literal|") order by f.label"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|matches
argument_list|(
literal|"Exam[0-9]*"
argument_list|)
condition|)
block|{
block|}
else|else
block|{
name|deptRoomFeatures
operator|.
name|addAll
argument_list|(
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct f from DepartmentRoomFeature f inner join f.department d "
operator|+
literal|"where d.session.uniqueId=:sessionId and d.deptCode = :deptCode order by f.label"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setString
argument_list|(
literal|"deptCode"
argument_list|,
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|//build headings for university rooms
name|String
name|fixedHeading1
index|[]
index|[]
init|=
operator|(
name|examType
operator|!=
literal|null
condition|?
operator|(
name|featuresOneColumn
condition|?
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"Bldg"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Room"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Exam Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
name|MSG
operator|.
name|columnAreaPDF
argument_list|()
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Period Preferences"
block|,
literal|"center"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Groups"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Features"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|}
else|:
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"Bldg"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Room"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Exam Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
name|MSG
operator|.
name|columnAreaPDF
argument_list|()
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Period Preferences"
block|,
literal|"center"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Groups"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|}
operator|)
else|:
operator|(
name|featuresOneColumn
condition|?
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"Bldg"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Room"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
name|MSG
operator|.
name|columnAreaPDF
argument_list|()
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Availability"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Departments"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Control"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Events"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Groups"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Features"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|}
else|:
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"Bldg"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Room"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
name|MSG
operator|.
name|columnAreaPDF
argument_list|()
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Availability"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Departments"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Control"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Events"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Groups"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|}
operator|)
operator|)
decl_stmt|;
name|String
name|heading1
index|[]
init|=
operator|new
name|String
index|[
name|fixedHeading1
operator|.
name|length
operator|+
operator|(
name|featuresOneColumn
condition|?
literal|0
else|:
operator|(
name|globalRoomFeatures
operator|.
name|size
argument_list|()
operator|+
name|deptRoomFeatures
operator|.
name|size
argument_list|()
operator|)
operator|)
index|]
decl_stmt|;
name|String
name|alignment1
index|[]
init|=
operator|new
name|String
index|[
name|heading1
operator|.
name|length
index|]
decl_stmt|;
name|boolean
name|sorted1
index|[]
init|=
operator|new
name|boolean
index|[
name|heading1
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fixedHeading1
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|heading1
index|[
name|i
index|]
operator|=
name|fixedHeading1
index|[
name|i
index|]
index|[
literal|0
index|]
expr_stmt|;
name|alignment1
index|[
name|i
index|]
operator|=
name|fixedHeading1
index|[
name|i
index|]
index|[
literal|1
index|]
expr_stmt|;
name|sorted1
index|[
name|i
index|]
operator|=
operator|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|fixedHeading1
index|[
name|i
index|]
index|[
literal|2
index|]
argument_list|)
operator|)
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|featuresOneColumn
condition|)
block|{
name|int
name|i
init|=
name|fixedHeading1
operator|.
name|length
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|globalRoomFeatures
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|heading1
index|[
name|i
index|]
operator|=
operator|(
operator|(
name|GlobalRoomFeature
operator|)
name|it
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getLabel
argument_list|()
expr_stmt|;
name|heading1
index|[
name|i
index|]
operator|=
name|heading1
index|[
name|i
index|]
operator|.
name|replaceFirst
argument_list|(
literal|" "
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
name|alignment1
index|[
name|i
index|]
operator|=
literal|"center"
expr_stmt|;
name|sorted1
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|it
init|=
name|deptRoomFeatures
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentRoomFeature
name|drf
init|=
operator|(
name|DepartmentRoomFeature
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|heading1
index|[
name|i
index|]
operator|=
name|drf
operator|.
name|getLabel
argument_list|()
expr_stmt|;
name|heading1
index|[
name|i
index|]
operator|=
name|heading1
index|[
name|i
index|]
operator|.
name|replaceFirst
argument_list|(
literal|" "
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"All"
argument_list|)
condition|)
block|{
name|Department
name|dept
init|=
name|drf
operator|.
name|getDepartment
argument_list|()
decl_stmt|;
name|heading1
index|[
name|i
index|]
operator|+=
literal|" ("
operator|+
name|dept
operator|.
name|getShortLabel
argument_list|()
operator|+
literal|")"
expr_stmt|;
block|}
name|alignment1
index|[
name|i
index|]
operator|=
literal|"center"
expr_stmt|;
name|sorted1
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
comment|//build headings for non-univ locations
name|String
name|fixedHeading2
index|[]
index|[]
init|=
operator|(
name|examType
operator|!=
literal|null
condition|?
operator|(
name|featuresOneColumn
condition|?
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"Location"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Exam Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
name|MSG
operator|.
name|columnAreaPDF
argument_list|()
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Period Preferences"
block|,
literal|"center"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Groups"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Features"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|}
else|:
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"Location"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
name|MSG
operator|.
name|columnAreaPDF
argument_list|()
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Period Preferences"
block|,
literal|"center"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Groups"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|}
operator|)
else|:
operator|(
name|featuresOneColumn
condition|?
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"Location"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
name|MSG
operator|.
name|columnAreaPDF
argument_list|()
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"IgnTooFar"
block|,
literal|"center"
block|,
literal|"true"
block|}
block|,
block|{
literal|"IgnChecks"
block|,
literal|"center"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Availability"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Departments"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Control"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Events"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Groups"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Features"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|}
else|:
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"Location"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Exam Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
name|MSG
operator|.
name|columnAreaPDF
argument_list|()
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"IgnTooFar"
block|,
literal|"center"
block|,
literal|"true"
block|}
block|,
block|{
literal|"IgnChecks"
block|,
literal|"center"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Availability"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Departments"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Control"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Events"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Groups"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|}
operator|)
operator|)
decl_stmt|;
name|String
name|heading2
index|[]
init|=
operator|new
name|String
index|[
name|fixedHeading2
operator|.
name|length
operator|+
operator|(
name|featuresOneColumn
condition|?
literal|0
else|:
operator|(
name|globalRoomFeatures
operator|.
name|size
argument_list|()
operator|+
name|deptRoomFeatures
operator|.
name|size
argument_list|()
operator|)
operator|)
index|]
decl_stmt|;
name|String
name|alignment2
index|[]
init|=
operator|new
name|String
index|[
name|heading2
operator|.
name|length
index|]
decl_stmt|;
name|boolean
name|sorted2
index|[]
init|=
operator|new
name|boolean
index|[
name|heading2
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fixedHeading2
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|heading2
index|[
name|i
index|]
operator|=
name|fixedHeading2
index|[
name|i
index|]
index|[
literal|0
index|]
expr_stmt|;
name|alignment2
index|[
name|i
index|]
operator|=
name|fixedHeading2
index|[
name|i
index|]
index|[
literal|1
index|]
expr_stmt|;
name|sorted2
index|[
name|i
index|]
operator|=
operator|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|fixedHeading2
index|[
name|i
index|]
index|[
literal|2
index|]
argument_list|)
operator|)
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|featuresOneColumn
condition|)
block|{
name|int
name|i
init|=
name|fixedHeading2
operator|.
name|length
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|globalRoomFeatures
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|heading2
index|[
name|i
index|]
operator|=
operator|(
operator|(
name|GlobalRoomFeature
operator|)
name|it
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getLabel
argument_list|()
expr_stmt|;
name|heading2
index|[
name|i
index|]
operator|=
name|heading2
index|[
name|i
index|]
operator|.
name|replaceFirst
argument_list|(
literal|" "
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
name|alignment2
index|[
name|i
index|]
operator|=
literal|"center"
expr_stmt|;
name|sorted2
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|it
init|=
name|deptRoomFeatures
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentRoomFeature
name|drf
init|=
operator|(
name|DepartmentRoomFeature
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|heading2
index|[
name|i
index|]
operator|=
name|drf
operator|.
name|getLabel
argument_list|()
expr_stmt|;
name|heading2
index|[
name|i
index|]
operator|=
name|heading2
index|[
name|i
index|]
operator|.
name|replaceFirst
argument_list|(
literal|" "
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"All"
argument_list|)
condition|)
block|{
name|Department
name|dept
init|=
name|Department
operator|.
name|findByDeptCode
argument_list|(
name|drf
operator|.
name|getDeptCode
argument_list|()
argument_list|,
name|sessionId
argument_list|)
decl_stmt|;
name|heading2
index|[
name|i
index|]
operator|+=
literal|" ("
operator|+
name|dept
operator|.
name|getShortLabel
argument_list|()
operator|+
literal|")"
expr_stmt|;
block|}
name|alignment2
index|[
name|i
index|]
operator|=
literal|"center"
expr_stmt|;
name|sorted2
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
name|TreeSet
argument_list|<
name|RoomType
argument_list|>
name|roomTypes
init|=
operator|new
name|TreeSet
argument_list|<
name|RoomType
argument_list|>
argument_list|(
name|RoomTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|()
argument_list|)
decl_stmt|;
name|Hashtable
argument_list|<
name|RoomType
argument_list|,
name|PdfWebTable
argument_list|>
name|tables
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|RoomType
name|t
range|:
name|roomTypes
control|)
block|{
name|PdfWebTable
name|table
init|=
operator|(
name|t
operator|.
name|isRoom
argument_list|()
condition|?
operator|new
name|PdfWebTable
argument_list|(
name|heading1
operator|.
name|length
argument_list|,
name|t
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|null
argument_list|,
name|heading1
argument_list|,
name|alignment1
argument_list|,
name|sorted1
argument_list|)
else|:
operator|new
name|PdfWebTable
argument_list|(
name|heading2
operator|.
name|length
argument_list|,
name|t
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|null
argument_list|,
name|heading2
argument_list|,
name|alignment2
argument_list|,
name|sorted2
argument_list|)
operator|)
decl_stmt|;
name|tables
operator|.
name|put
argument_list|(
name|t
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
name|boolean
name|timeVertical
init|=
name|CommonValues
operator|.
name|VerticalGrid
operator|.
name|eq
argument_list|(
name|UserProperty
operator|.
name|GridOrientation
operator|.
name|get
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|gridAsText
init|=
name|CommonValues
operator|.
name|TextGrid
operator|.
name|eq
argument_list|(
name|UserProperty
operator|.
name|GridOrientation
operator|.
name|get
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|timeGridSize
init|=
name|UserProperty
operator|.
name|GridSize
operator|.
name|get
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
name|Department
name|dept
init|=
operator|new
name|Department
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"All"
argument_list|)
condition|)
block|{
name|dept
operator|=
name|Department
operator|.
name|findByDeptCode
argument_list|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
argument_list|,
name|sessionId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dept
operator|=
literal|null
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|iter
init|=
name|rooms
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|location
init|=
operator|(
name|Location
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|editable
init|=
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomDetail
argument_list|)
decl_stmt|;
name|Room
name|room
init|=
operator|(
name|location
operator|instanceof
name|Room
condition|?
operator|(
name|Room
operator|)
name|location
else|:
literal|null
operator|)
decl_stmt|;
name|Building
name|bldg
init|=
operator|(
name|room
operator|==
literal|null
condition|?
literal|null
else|:
name|room
operator|.
name|getBuilding
argument_list|()
operator|)
decl_stmt|;
name|PdfWebTable
name|table
init|=
name|tables
operator|.
name|get
argument_list|(
name|location
operator|.
name|getRoomType
argument_list|()
argument_list|)
decl_stmt|;
name|DecimalFormat
name|df5
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"####0"
argument_list|)
decl_stmt|;
name|String
name|text
index|[]
init|=
operator|new
name|String
index|[
name|Math
operator|.
name|max
argument_list|(
name|heading1
operator|.
name|length
argument_list|,
name|heading2
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
name|Comparable
name|comp
index|[]
init|=
operator|new
name|Comparable
index|[
name|text
operator|.
name|length
index|]
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|bldg
operator|!=
literal|null
condition|)
block|{
name|text
index|[
name|idx
index|]
operator|=
operator|(
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"@@ITALIC "
else|:
literal|""
operator|)
operator|+
name|bldg
operator|.
name|getAbbreviation
argument_list|()
operator|+
operator|(
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"@@END_ITALIC "
else|:
literal|""
operator|)
expr_stmt|;
name|comp
index|[
literal|0
index|]
operator|=
name|location
operator|.
name|getLabel
argument_list|()
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
name|text
index|[
name|idx
index|]
operator|=
operator|(
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"@@ITALIC "
else|:
literal|""
operator|)
operator|+
operator|(
name|room
operator|==
literal|null
condition|?
name|location
operator|.
name|getLabel
argument_list|()
else|:
name|room
operator|.
name|getRoomNumber
argument_list|()
operator|)
operator|+
operator|(
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"@@END_ITALIC "
else|:
literal|""
operator|)
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
name|location
operator|.
name|getLabel
argument_list|()
expr_stmt|;
name|idx
operator|++
expr_stmt|;
name|text
index|[
name|idx
index|]
operator|=
name|df5
operator|.
name|format
argument_list|(
name|location
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
operator|new
name|Long
argument_list|(
name|location
operator|.
name|getCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
if|if
condition|(
name|examType
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|location
operator|.
name|isExamEnabled
argument_list|(
name|examType
argument_list|)
condition|)
block|{
name|text
index|[
name|idx
index|]
operator|=
name|df5
operator|.
name|format
argument_list|(
name|location
operator|.
name|getExamCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
name|location
operator|.
name|getExamCapacity
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|text
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
if|if
condition|(
name|location
operator|.
name|getArea
argument_list|()
operator|==
literal|null
condition|)
block|{
name|text
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
operator|new
name|Double
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|text
index|[
name|idx
index|]
operator|=
name|dfa
operator|.
name|format
argument_list|(
name|location
operator|.
name|getArea
argument_list|()
argument_list|)
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
name|location
operator|.
name|getArea
argument_list|()
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
if|if
condition|(
name|location
operator|.
name|isExamEnabled
argument_list|(
name|examType
argument_list|)
condition|)
block|{
name|text
index|[
name|idx
index|]
operator|=
name|location
operator|.
name|getExamPreferencesAbbreviation
argument_list|(
name|examType
argument_list|)
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|text
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
literal|null
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|location
operator|.
name|getArea
argument_list|()
operator|==
literal|null
condition|)
block|{
name|text
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
operator|new
name|Double
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|text
index|[
name|idx
index|]
operator|=
name|dfa
operator|.
name|format
argument_list|(
name|location
operator|.
name|getArea
argument_list|()
argument_list|)
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
name|location
operator|.
name|getArea
argument_list|()
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
name|PreferenceLevel
name|roomPref
init|=
name|location
operator|.
name|getRoomPreferenceLevel
argument_list|(
name|dept
argument_list|)
decl_stmt|;
if|if
condition|(
name|editable
operator|&&
name|roomPref
operator|!=
literal|null
operator|&&
operator|!
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|roomPref
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|room
operator|==
literal|null
condition|)
block|{
name|text
index|[
literal|0
index|]
operator|=
operator|(
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"@@ITALIC "
else|:
literal|""
operator|)
operator|+
name|location
operator|.
name|getLabel
argument_list|()
operator|+
literal|" ("
operator|+
name|PreferenceLevel
operator|.
name|prolog2abbv
argument_list|(
name|roomPref
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|+
literal|")"
operator|+
operator|(
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"@@END_ITALIC "
else|:
literal|""
operator|)
expr_stmt|;
block|}
else|else
block|{
name|text
index|[
literal|0
index|]
operator|=
operator|(
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"@@ITALIC "
else|:
literal|""
operator|)
operator|+
operator|(
name|bldg
operator|==
literal|null
condition|?
literal|""
else|:
name|bldg
operator|.
name|getAbbreviation
argument_list|()
operator|)
operator|+
operator|(
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"@@END_ITALIC "
else|:
literal|""
operator|)
expr_stmt|;
name|text
index|[
literal|1
index|]
operator|=
operator|(
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"@@ITALIC "
else|:
literal|""
operator|)
operator|+
name|room
operator|.
name|getRoomNumber
argument_list|()
operator|+
literal|" ("
operator|+
name|PreferenceLevel
operator|.
name|prolog2abbv
argument_list|(
name|roomPref
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|+
literal|")"
operator|+
operator|(
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"@@END_ITALIC "
else|:
literal|""
operator|)
expr_stmt|;
block|}
block|}
comment|//ignore too far
if|if
condition|(
name|location
operator|instanceof
name|NonUniversityLocation
condition|)
block|{
name|boolean
name|itf
init|=
operator|(
name|location
operator|.
name|isIgnoreTooFar
argument_list|()
operator|==
literal|null
condition|?
literal|false
else|:
name|location
operator|.
name|isIgnoreTooFar
argument_list|()
operator|.
name|booleanValue
argument_list|()
operator|)
decl_stmt|;
name|text
index|[
name|idx
index|]
operator|=
operator|(
name|itf
condition|?
literal|"Yes"
else|:
literal|"No"
operator|)
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
operator|new
name|Integer
argument_list|(
name|itf
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
name|boolean
name|con
init|=
operator|(
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|==
literal|null
condition|?
literal|true
else|:
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|.
name|booleanValue
argument_list|()
operator|)
decl_stmt|;
name|text
index|[
name|idx
index|]
operator|=
operator|(
name|con
condition|?
literal|"YES"
else|:
literal|"No"
operator|)
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
operator|new
name|Integer
argument_list|(
name|con
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
comment|// get pattern column
name|RequiredTimeTable
name|rtt
init|=
name|location
operator|.
name|getRoomSharingTable
argument_list|()
decl_stmt|;
if|if
condition|(
name|gridAsText
condition|)
block|{
name|text
index|[
name|idx
index|]
operator|=
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|", "
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|setDefaultSelection
argument_list|(
name|timeGridSize
argument_list|)
expr_stmt|;
name|Image
name|image
init|=
name|rtt
operator|.
name|createBufferedImage
argument_list|(
name|timeVertical
argument_list|)
decl_stmt|;
if|if
condition|(
name|image
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|addImage
argument_list|(
name|location
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|image
argument_list|)
expr_stmt|;
name|text
index|[
name|idx
index|]
operator|=
operator|(
literal|"@@IMAGE "
operator|+
name|location
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" "
operator|)
expr_stmt|;
block|}
else|else
block|{
name|text
index|[
name|idx
index|]
operator|=
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|", "
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
name|comp
index|[
name|idx
index|]
operator|=
literal|null
expr_stmt|;
name|idx
operator|++
expr_stmt|;
comment|// get departments column
name|Department
name|controlDept
init|=
literal|null
decl_stmt|;
name|text
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
name|Set
name|rds
init|=
name|location
operator|.
name|getRoomDepts
argument_list|()
decl_stmt|;
name|Set
name|departments
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iterRds
init|=
name|rds
operator|.
name|iterator
argument_list|()
init|;
name|iterRds
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomDept
name|rd
init|=
operator|(
name|RoomDept
operator|)
name|iterRds
operator|.
name|next
argument_list|()
decl_stmt|;
name|Department
name|d
init|=
name|rd
operator|.
name|getDepartment
argument_list|()
decl_stmt|;
if|if
condition|(
name|rd
operator|.
name|isControl
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
name|controlDept
operator|=
name|d
expr_stmt|;
name|departments
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
name|TreeSet
name|ts
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|DepartmentNameComparator
argument_list|()
argument_list|)
decl_stmt|;
name|ts
operator|.
name|addAll
argument_list|(
name|departments
argument_list|)
expr_stmt|;
if|if
condition|(
name|ts
operator|.
name|size
argument_list|()
operator|==
name|session
operator|.
name|getDepartments
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
name|text
index|[
name|idx
index|]
operator|=
literal|"@@BOLD All"
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
block|}
else|else
block|{
name|int
name|cnt
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|ts
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
name|cnt
operator|++
control|)
block|{
name|Department
name|d
init|=
operator|(
name|Department
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|text
index|[
name|idx
index|]
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|text
index|[
name|idx
index|]
operator|=
name|text
index|[
name|idx
index|]
operator|+
operator|(
name|ts
operator|.
name|size
argument_list|()
operator|<=
literal|5
operator|||
name|cnt
operator|%
literal|5
operator|==
literal|0
condition|?
literal|"\n"
else|:
literal|", "
operator|)
expr_stmt|;
else|else
name|comp
index|[
name|idx
index|]
operator|=
name|d
operator|.
name|getDeptCode
argument_list|()
expr_stmt|;
name|text
index|[
name|idx
index|]
operator|=
name|text
index|[
name|idx
index|]
operator|+
literal|"@@COLOR "
operator|+
name|d
operator|.
name|getRoomSharingColor
argument_list|(
literal|null
argument_list|)
operator|+
literal|" "
operator|+
name|d
operator|.
name|getShortLabel
argument_list|()
expr_stmt|;
block|}
block|}
name|idx
operator|++
expr_stmt|;
comment|//control column
if|if
condition|(
operator|!
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"All"
argument_list|)
operator|&&
operator|!
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|matches
argument_list|(
literal|"Exam[0-9]*"
argument_list|)
condition|)
block|{
if|if
condition|(
name|controlDept
operator|!=
literal|null
operator|&&
name|controlDept
operator|.
name|getDeptCode
argument_list|()
operator|.
name|equals
argument_list|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
argument_list|)
condition|)
block|{
name|text
index|[
name|idx
index|]
operator|=
literal|"Yes"
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|text
index|[
name|idx
index|]
operator|=
literal|"No"
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|controlDept
operator|!=
literal|null
condition|)
block|{
name|text
index|[
name|idx
index|]
operator|=
literal|"@@COLOR "
operator|+
name|controlDept
operator|.
name|getRoomSharingColor
argument_list|(
literal|null
argument_list|)
operator|+
literal|" "
operator|+
name|controlDept
operator|.
name|getShortLabel
argument_list|()
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
name|controlDept
operator|.
name|getDeptCode
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|text
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
block|}
block|}
name|idx
operator|++
expr_stmt|;
comment|//events column
if|if
condition|(
name|location
operator|.
name|getEventDepartment
argument_list|()
operator|!=
literal|null
operator|&&
name|location
operator|.
name|getEventDepartment
argument_list|()
operator|.
name|isAllowEvents
argument_list|()
condition|)
block|{
name|text
index|[
name|idx
index|]
operator|=
literal|"@@COLOR "
operator|+
name|location
operator|.
name|getEventDepartment
argument_list|()
operator|.
name|getRoomSharingColor
argument_list|(
literal|null
argument_list|)
operator|+
literal|" "
operator|+
name|location
operator|.
name|getEventDepartment
argument_list|()
operator|.
name|getShortLabel
argument_list|()
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
name|location
operator|.
name|getEventDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|text
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
block|}
comment|// get groups column
name|text
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
operator|new
name|TreeSet
argument_list|(
name|location
operator|.
name|getRoomGroups
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomGroup
name|rg
init|=
operator|(
name|RoomGroup
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|rg
operator|.
name|isGlobal
argument_list|()
operator|.
name|booleanValue
argument_list|()
operator|&&
operator|(
name|examType
operator|!=
literal|null
operator|||
operator|!
name|depts
operator|.
name|contains
argument_list|(
name|rg
operator|.
name|getDepartment
argument_list|()
argument_list|)
operator|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|rg
operator|.
name|isGlobal
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|boolean
name|skip
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|location
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomDept
name|rd
init|=
operator|(
name|RoomDept
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|rg
operator|.
name|getDepartment
argument_list|()
operator|.
name|equals
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
block|{
name|skip
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|skip
condition|)
continue|continue;
block|}
if|if
condition|(
name|text
index|[
name|idx
index|]
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|text
index|[
name|idx
index|]
operator|+=
literal|"\n"
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
name|comp
index|[
name|idx
index|]
operator|+
name|rg
operator|.
name|getName
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|text
index|[
name|idx
index|]
operator|+=
operator|(
name|rg
operator|.
name|isGlobal
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|""
else|:
literal|"@@COLOR "
operator|+
name|rg
operator|.
name|getDepartment
argument_list|()
operator|.
name|getRoomSharingColor
argument_list|(
literal|null
argument_list|)
operator|+
literal|" "
operator|)
operator|+
name|rg
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
if|if
condition|(
name|featuresOneColumn
condition|)
block|{
comment|// get features column
name|text
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
operator|new
name|TreeSet
argument_list|(
name|location
operator|.
name|getGlobalRoomFeatures
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|GlobalRoomFeature
name|rf
init|=
operator|(
name|GlobalRoomFeature
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|text
index|[
name|idx
index|]
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|text
index|[
name|idx
index|]
operator|+=
literal|"\n"
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
name|comp
index|[
name|idx
index|]
operator|+
name|rf
operator|.
name|getLabel
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|text
index|[
name|idx
index|]
operator|+=
name|rf
operator|.
name|getLabelWithType
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|examType
operator|==
literal|null
condition|)
for|for
control|(
name|Iterator
name|it
init|=
operator|new
name|TreeSet
argument_list|(
name|location
operator|.
name|getDepartmentRoomFeatures
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentRoomFeature
name|drf
init|=
operator|(
name|DepartmentRoomFeature
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|depts
operator|.
name|contains
argument_list|(
name|drf
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
continue|continue;
name|boolean
name|skip
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|location
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomDept
name|rd
init|=
operator|(
name|RoomDept
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|drf
operator|.
name|getDepartment
argument_list|()
operator|.
name|equals
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
block|{
name|skip
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|skip
condition|)
continue|continue;
if|if
condition|(
name|text
index|[
name|idx
index|]
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|text
index|[
name|idx
index|]
operator|+=
literal|"\n"
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
name|comp
index|[
name|idx
index|]
operator|+
name|drf
operator|.
name|getLabel
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|text
index|[
name|idx
index|]
operator|+=
literal|"@@COLOR "
operator|+
name|drf
operator|.
name|getDepartment
argument_list|()
operator|.
name|getRoomSharingColor
argument_list|(
literal|null
argument_list|)
operator|+
literal|" "
operator|+
name|drf
operator|.
name|getLabelWithType
argument_list|()
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
block|}
else|else
block|{
comment|// get features columns
for|for
control|(
name|Iterator
name|it
init|=
name|globalRoomFeatures
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|GlobalRoomFeature
name|grf
init|=
operator|(
name|GlobalRoomFeature
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|b
init|=
name|location
operator|.
name|hasFeature
argument_list|(
name|grf
argument_list|)
decl_stmt|;
name|text
index|[
name|idx
index|]
operator|=
name|b
condition|?
literal|"Yes"
else|:
literal|"No"
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
literal|""
operator|+
name|b
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|it
init|=
name|deptRoomFeatures
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentRoomFeature
name|drf
init|=
operator|(
name|DepartmentRoomFeature
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|b
init|=
name|location
operator|.
name|hasFeature
argument_list|(
name|drf
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|location
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomDept
name|rd
init|=
operator|(
name|RoomDept
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|drf
operator|.
name|getDepartment
argument_list|()
operator|.
name|equals
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
block|{
name|b
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
name|text
index|[
name|idx
index|]
operator|=
name|b
condition|?
literal|"Yes"
else|:
literal|"No"
expr_stmt|;
name|comp
index|[
name|idx
index|]
operator|=
literal|""
operator|+
name|b
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
block|}
comment|// build rows
name|table
operator|.
name|addLine
argument_list|(
operator|(
name|editable
condition|?
literal|"onClick=\"document.location='roomDetail.do?id="
operator|+
name|location
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"';\""
else|:
literal|null
operator|)
argument_list|,
name|text
argument_list|,
name|comp
argument_list|)
expr_stmt|;
block|}
name|Document
name|doc
init|=
literal|null
decl_stmt|;
comment|// set request attributes
for|for
control|(
name|RoomType
name|t
range|:
name|roomTypes
control|)
block|{
name|PdfWebTable
name|table
init|=
name|tables
operator|.
name|get
argument_list|(
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|table
operator|.
name|getLines
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|ord
init|=
name|WebTable
operator|.
name|getOrder
argument_list|(
name|sessionContext
argument_list|,
name|t
operator|.
name|getReference
argument_list|()
operator|+
literal|".ord"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ord
operator|>
name|heading1
operator|.
name|length
condition|)
name|ord
operator|=
literal|0
expr_stmt|;
name|PdfPTable
name|pdfTable
init|=
name|table
operator|.
name|printPdfTable
argument_list|(
name|ord
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
name|doc
operator|=
operator|new
name|Document
argument_list|(
operator|new
name|Rectangle
argument_list|(
literal|60f
operator|+
name|table
operator|.
name|getWidth
argument_list|()
argument_list|,
literal|60f
operator|+
literal|0.75f
operator|*
name|table
operator|.
name|getWidth
argument_list|()
argument_list|)
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|PdfWriter
name|iWriter
init|=
name|PdfWriter
operator|.
name|getInstance
argument_list|(
name|doc
argument_list|,
name|out
argument_list|)
decl_stmt|;
name|iWriter
operator|.
name|setPageEvent
argument_list|(
operator|new
name|PdfEventHandler
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|.
name|setPageSize
argument_list|(
operator|new
name|Rectangle
argument_list|(
literal|60f
operator|+
name|table
operator|.
name|getWidth
argument_list|()
argument_list|,
literal|60f
operator|+
literal|0.75f
operator|*
name|table
operator|.
name|getWidth
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|newPage
argument_list|()
expr_stmt|;
block|}
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Paragraph
argument_list|(
name|table
operator|.
name|getName
argument_list|()
argument_list|,
name|PdfFont
operator|.
name|getBigFont
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|pdfTable
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
return|return;
name|doc
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|buildCsvWebTable
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|RoomListForm
name|roomListForm
parameter_list|,
name|boolean
name|featuresOneColumn
parameter_list|,
name|ExamType
name|examType
parameter_list|)
throws|throws
name|Exception
block|{
name|Long
name|sessionId
init|=
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
name|DecimalFormat
name|dfa
init|=
operator|new
name|DecimalFormat
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.room.area.units.format"
argument_list|,
literal|"#,##0.00"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
name|rooms
init|=
name|roomListForm
operator|.
name|getRooms
argument_list|()
decl_stmt|;
name|ArrayList
name|globalRoomFeatures
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Set
name|deptRoomFeatures
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
name|Set
name|depts
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"All"
argument_list|)
condition|)
block|{
name|depts
operator|=
name|Department
operator|.
name|getUserDepartments
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|matches
argument_list|(
literal|"Exam[0-9]*"
argument_list|)
condition|)
block|{
name|depts
operator|=
operator|new
name|HashSet
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|depts
operator|=
operator|new
name|HashSet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|depts
operator|.
name|add
argument_list|(
name|Department
operator|.
name|findByDeptCode
argument_list|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
argument_list|,
name|sessionId
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
literal|null
decl_stmt|;
try|try
block|{
name|RoomFeatureDAO
name|d
init|=
operator|new
name|RoomFeatureDAO
argument_list|()
decl_stmt|;
name|hibSession
operator|=
name|d
operator|.
name|getSession
argument_list|()
expr_stmt|;
name|List
name|list
init|=
name|hibSession
operator|.
name|createCriteria
argument_list|(
name|GlobalRoomFeature
operator|.
name|class
argument_list|)
operator|.
name|addOrder
argument_list|(
name|Order
operator|.
name|asc
argument_list|(
literal|"label"
argument_list|)
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|list
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|GlobalRoomFeature
name|rf
init|=
operator|(
name|GlobalRoomFeature
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|globalRoomFeatures
operator|.
name|add
argument_list|(
name|rf
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"All"
argument_list|)
condition|)
block|{
if|if
condition|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|DepartmentIndependent
argument_list|)
condition|)
block|{
name|deptRoomFeatures
operator|.
name|addAll
argument_list|(
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct f from DepartmentRoomFeature f inner join f.department d where "
operator|+
literal|"d.session.uniqueId=:sessionId order by f.label"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|deptIds
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Qualifiable
name|q
range|:
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|getQualifiers
argument_list|(
literal|"Department"
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|deptIds
operator|.
name|isEmpty
argument_list|()
condition|)
name|deptIds
operator|+=
literal|","
expr_stmt|;
name|deptIds
operator|+=
name|q
operator|.
name|getQualifierId
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|deptIds
operator|.
name|isEmpty
argument_list|()
condition|)
name|deptRoomFeatures
operator|.
name|addAll
argument_list|(
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct f from DepartmentRoomFeature f inner join f.department d "
operator|+
literal|"where d.session.uniqueId=:sessionId and d.uniqueId in ("
operator|+
name|deptIds
operator|+
literal|") order by f.label"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|matches
argument_list|(
literal|"Exam[0-9]*"
argument_list|)
condition|)
block|{
block|}
else|else
block|{
name|deptRoomFeatures
operator|.
name|addAll
argument_list|(
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct f from DepartmentRoomFeature f inner join f.department d "
operator|+
literal|"where d.session.uniqueId=:sessionId and d.deptCode = :deptCode order by f.label"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setString
argument_list|(
literal|"deptCode"
argument_list|,
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|//build headings for university rooms
name|String
name|fixedHeading1
index|[]
index|[]
init|=
operator|(
name|examType
operator|!=
literal|null
condition|?
operator|(
name|featuresOneColumn
condition|?
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"Bldg"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Room"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Exam Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
name|MSG
operator|.
name|columnAreaPDF
argument_list|()
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Period Preferences"
block|,
literal|"center"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Groups"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Features"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|}
else|:
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"Bldg"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Room"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Exam Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Period Preferences"
block|,
literal|"center"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Groups"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|}
operator|)
else|:
operator|(
name|featuresOneColumn
condition|?
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"Bldg"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Room"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
name|MSG
operator|.
name|columnAreaPDF
argument_list|()
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Availability"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Departments"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Control"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Events"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Groups"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Features"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|}
else|:
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"Bldg"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Room"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
name|MSG
operator|.
name|columnAreaPDF
argument_list|()
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Availability"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Departments"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Control"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Events"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Groups"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|}
operator|)
operator|)
decl_stmt|;
name|String
name|heading1
index|[]
init|=
operator|new
name|String
index|[
name|fixedHeading1
operator|.
name|length
operator|+
operator|+
operator|(
name|featuresOneColumn
condition|?
literal|0
else|:
operator|(
name|globalRoomFeatures
operator|.
name|size
argument_list|()
operator|+
name|deptRoomFeatures
operator|.
name|size
argument_list|()
operator|)
operator|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fixedHeading1
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|heading1
index|[
name|i
index|]
operator|=
name|fixedHeading1
index|[
name|i
index|]
index|[
literal|0
index|]
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|featuresOneColumn
condition|)
block|{
name|int
name|i
init|=
name|fixedHeading1
operator|.
name|length
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|globalRoomFeatures
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|heading1
index|[
name|i
index|]
operator|=
operator|(
operator|(
name|GlobalRoomFeature
operator|)
name|it
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getLabel
argument_list|()
expr_stmt|;
name|heading1
index|[
name|i
index|]
operator|=
name|heading1
index|[
name|i
index|]
operator|.
name|replaceFirst
argument_list|(
literal|" "
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|it
init|=
name|deptRoomFeatures
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentRoomFeature
name|drf
init|=
operator|(
name|DepartmentRoomFeature
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|heading1
index|[
name|i
index|]
operator|=
name|drf
operator|.
name|getLabel
argument_list|()
expr_stmt|;
name|heading1
index|[
name|i
index|]
operator|=
name|heading1
index|[
name|i
index|]
operator|.
name|replaceFirst
argument_list|(
literal|" "
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"All"
argument_list|)
condition|)
block|{
name|Department
name|dept
init|=
name|drf
operator|.
name|getDepartment
argument_list|()
decl_stmt|;
name|heading1
index|[
name|i
index|]
operator|+=
literal|" ("
operator|+
name|dept
operator|.
name|getShortLabel
argument_list|()
operator|+
literal|")"
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
block|}
comment|//build headings for non-univ locations
name|String
name|fixedHeading2
index|[]
index|[]
init|=
operator|(
name|examType
operator|!=
literal|null
condition|?
operator|(
name|featuresOneColumn
condition|?
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"Location"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Exam Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
name|MSG
operator|.
name|columnAreaPDF
argument_list|()
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Period Preferences"
block|,
literal|"center"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Groups"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Features"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|}
else|:
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"Location"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
name|MSG
operator|.
name|columnAreaPDF
argument_list|()
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Period Preferences"
block|,
literal|"center"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Groups"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|}
operator|)
else|:
operator|(
name|featuresOneColumn
condition|?
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"Location"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
name|MSG
operator|.
name|columnAreaPDF
argument_list|()
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"IgnTooFar"
block|,
literal|"center"
block|,
literal|"true"
block|}
block|,
block|{
literal|"IgnChecks"
block|,
literal|"center"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Availability"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Departments"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Control"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Events"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Groups"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Features"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|}
else|:
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"Location"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"Exam Capacity"
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
name|MSG
operator|.
name|columnAreaPDF
argument_list|()
block|,
literal|"right"
block|,
literal|"false"
block|}
block|,
block|{
literal|"IgnTooFar"
block|,
literal|"center"
block|,
literal|"true"
block|}
block|,
block|{
literal|"IgnChecks"
block|,
literal|"center"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Availability"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Departments"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Control"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Events"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|,
block|{
literal|"Groups"
block|,
literal|"left"
block|,
literal|"true"
block|}
block|}
operator|)
operator|)
decl_stmt|;
name|String
name|heading2
index|[]
init|=
operator|new
name|String
index|[
name|fixedHeading2
operator|.
name|length
operator|+
operator|(
name|featuresOneColumn
condition|?
literal|0
else|:
operator|(
name|globalRoomFeatures
operator|.
name|size
argument_list|()
operator|+
name|deptRoomFeatures
operator|.
name|size
argument_list|()
operator|)
operator|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fixedHeading2
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|heading2
index|[
name|i
index|]
operator|=
name|fixedHeading2
index|[
name|i
index|]
index|[
literal|0
index|]
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|featuresOneColumn
condition|)
block|{
name|int
name|i
init|=
name|fixedHeading2
operator|.
name|length
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|globalRoomFeatures
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|heading2
index|[
name|i
index|]
operator|=
operator|(
operator|(
name|GlobalRoomFeature
operator|)
name|it
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getLabel
argument_list|()
expr_stmt|;
name|heading2
index|[
name|i
index|]
operator|=
name|heading2
index|[
name|i
index|]
operator|.
name|replaceFirst
argument_list|(
literal|" "
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|it
init|=
name|deptRoomFeatures
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentRoomFeature
name|drf
init|=
operator|(
name|DepartmentRoomFeature
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|heading2
index|[
name|i
index|]
operator|=
name|drf
operator|.
name|getLabel
argument_list|()
expr_stmt|;
name|heading2
index|[
name|i
index|]
operator|=
name|heading2
index|[
name|i
index|]
operator|.
name|replaceFirst
argument_list|(
literal|" "
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"All"
argument_list|)
condition|)
block|{
name|Department
name|dept
init|=
name|Department
operator|.
name|findByDeptCode
argument_list|(
name|drf
operator|.
name|getDeptCode
argument_list|()
argument_list|,
name|sessionId
argument_list|)
decl_stmt|;
name|heading2
index|[
name|i
index|]
operator|+=
literal|" ("
operator|+
name|dept
operator|.
name|getShortLabel
argument_list|()
operator|+
literal|")"
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
block|}
name|TreeSet
argument_list|<
name|RoomType
argument_list|>
name|roomTypes
init|=
operator|new
name|TreeSet
argument_list|<
name|RoomType
argument_list|>
argument_list|(
name|RoomTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|()
argument_list|)
decl_stmt|;
name|Hashtable
argument_list|<
name|RoomType
argument_list|,
name|CSVFile
argument_list|>
name|tables
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|RoomType
name|t
range|:
name|roomTypes
control|)
block|{
name|CSVFile
name|table
init|=
operator|new
name|CSVFile
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CSVField
argument_list|>
name|header
init|=
operator|new
name|ArrayList
argument_list|<
name|CSVFile
operator|.
name|CSVField
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|h
range|:
operator|(
name|t
operator|.
name|isRoom
argument_list|()
condition|?
name|heading1
else|:
name|heading2
operator|)
control|)
block|{
name|header
operator|.
name|add
argument_list|(
operator|new
name|CSVField
argument_list|(
name|h
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|setHeader
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|tables
operator|.
name|put
argument_list|(
name|t
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
name|Department
name|dept
init|=
operator|new
name|Department
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"All"
argument_list|)
condition|)
block|{
name|dept
operator|=
name|Department
operator|.
name|findByDeptCode
argument_list|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
argument_list|,
name|sessionId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dept
operator|=
literal|null
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|iter
init|=
name|rooms
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|location
init|=
operator|(
name|Location
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|editable
init|=
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomDetail
argument_list|)
decl_stmt|;
name|Room
name|room
init|=
operator|(
name|location
operator|instanceof
name|Room
condition|?
operator|(
name|Room
operator|)
name|location
else|:
literal|null
operator|)
decl_stmt|;
name|Building
name|bldg
init|=
operator|(
name|room
operator|==
literal|null
condition|?
literal|null
else|:
name|room
operator|.
name|getBuilding
argument_list|()
operator|)
decl_stmt|;
name|CSVFile
name|table
init|=
name|tables
operator|.
name|get
argument_list|(
name|location
operator|.
name|getRoomType
argument_list|()
argument_list|)
decl_stmt|;
name|DecimalFormat
name|df5
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"####0"
argument_list|)
decl_stmt|;
name|CSVField
name|text
index|[]
init|=
operator|new
name|CSVField
index|[
name|location
operator|instanceof
name|Room
condition|?
name|heading1
operator|.
name|length
else|:
name|heading2
operator|.
name|length
index|]
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|bldg
operator|!=
literal|null
condition|)
block|{
name|text
index|[
name|idx
index|]
operator|=
operator|new
name|CSVField
argument_list|(
name|bldg
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
name|text
index|[
name|idx
index|]
operator|=
operator|new
name|CSVField
argument_list|(
name|room
operator|==
literal|null
condition|?
name|location
operator|.
name|getLabel
argument_list|()
else|:
name|room
operator|.
name|getRoomNumber
argument_list|()
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
name|text
index|[
name|idx
index|]
operator|=
operator|new
name|CSVField
argument_list|(
name|df5
operator|.
name|format
argument_list|(
name|location
operator|.
name|getCapacity
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
if|if
condition|(
name|examType
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|location
operator|.
name|isExamEnabled
argument_list|(
name|examType
argument_list|)
condition|)
block|{
name|text
index|[
name|idx
index|]
operator|=
operator|new
name|CSVField
argument_list|(
name|df5
operator|.
name|format
argument_list|(
name|location
operator|.
name|getExamCapacity
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|text
index|[
name|idx
index|]
operator|=
operator|new
name|CSVField
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
if|if
condition|(
name|location
operator|.
name|getArea
argument_list|()
operator|==
literal|null
condition|)
block|{
name|text
index|[
name|idx
index|]
operator|=
operator|new
name|CSVField
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|text
index|[
name|idx
index|]
operator|=
operator|new
name|CSVField
argument_list|(
name|dfa
operator|.
name|format
argument_list|(
name|location
operator|.
name|getArea
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
if|if
condition|(
name|location
operator|.
name|isExamEnabled
argument_list|(
name|examType
argument_list|)
condition|)
block|{
name|text
index|[
name|idx
index|]
operator|=
operator|new
name|CSVField
argument_list|(
name|location
operator|.
name|getExamPreferencesAbbreviation
argument_list|(
name|examType
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|text
index|[
name|idx
index|]
operator|=
operator|new
name|CSVField
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|location
operator|.
name|getArea
argument_list|()
operator|==
literal|null
condition|)
block|{
name|text
index|[
name|idx
index|]
operator|=
operator|new
name|CSVField
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|text
index|[
name|idx
index|]
operator|=
operator|new
name|CSVField
argument_list|(
name|dfa
operator|.
name|format
argument_list|(
name|location
operator|.
name|getArea
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
name|PreferenceLevel
name|roomPref
init|=
name|location
operator|.
name|getRoomPreferenceLevel
argument_list|(
name|dept
argument_list|)
decl_stmt|;
if|if
condition|(
name|editable
operator|&&
name|roomPref
operator|!=
literal|null
operator|&&
operator|!
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|roomPref
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|room
operator|==
literal|null
condition|)
block|{
name|text
index|[
literal|0
index|]
operator|=
operator|new
name|CSVField
argument_list|(
name|location
operator|.
name|getLabel
argument_list|()
operator|+
literal|" ("
operator|+
name|PreferenceLevel
operator|.
name|prolog2abbv
argument_list|(
name|roomPref
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|text
index|[
literal|0
index|]
operator|=
operator|new
name|CSVField
argument_list|(
name|bldg
operator|==
literal|null
condition|?
literal|""
else|:
name|bldg
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|text
index|[
literal|1
index|]
operator|=
operator|new
name|CSVField
argument_list|(
name|room
operator|.
name|getRoomNumber
argument_list|()
operator|+
literal|" ("
operator|+
name|PreferenceLevel
operator|.
name|prolog2abbv
argument_list|(
name|roomPref
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
comment|//ignore too far
if|if
condition|(
name|location
operator|instanceof
name|NonUniversityLocation
condition|)
block|{
name|boolean
name|itf
init|=
operator|(
name|location
operator|.
name|isIgnoreTooFar
argument_list|()
operator|==
literal|null
condition|?
literal|false
else|:
name|location
operator|.
name|isIgnoreTooFar
argument_list|()
operator|.
name|booleanValue
argument_list|()
operator|)
decl_stmt|;
name|text
index|[
name|idx
index|]
operator|=
operator|new
name|CSVField
argument_list|(
name|itf
condition|?
literal|"Yes"
else|:
literal|"No"
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
name|boolean
name|con
init|=
operator|(
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|==
literal|null
condition|?
literal|true
else|:
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|.
name|booleanValue
argument_list|()
operator|)
decl_stmt|;
name|text
index|[
name|idx
index|]
operator|=
operator|new
name|CSVField
argument_list|(
name|con
condition|?
literal|"YES"
else|:
literal|"No"
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
comment|// get pattern column
name|RequiredTimeTable
name|rtt
init|=
name|location
operator|.
name|getRoomSharingTable
argument_list|()
decl_stmt|;
name|text
index|[
name|idx
index|]
operator|=
operator|new
name|CSVField
argument_list|(
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|", "
argument_list|,
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
comment|// get departments column
name|Department
name|controlDept
init|=
literal|null
decl_stmt|;
name|text
index|[
name|idx
index|]
operator|=
operator|new
name|CSVField
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|Set
name|rds
init|=
name|location
operator|.
name|getRoomDepts
argument_list|()
decl_stmt|;
name|Set
name|departments
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iterRds
init|=
name|rds
operator|.
name|iterator
argument_list|()
init|;
name|iterRds
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomDept
name|rd
init|=
operator|(
name|RoomDept
operator|)
name|iterRds
operator|.
name|next
argument_list|()
decl_stmt|;
name|Department
name|d
init|=
name|rd
operator|.
name|getDepartment
argument_list|()
decl_stmt|;
if|if
condition|(
name|rd
operator|.
name|isControl
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
name|controlDept
operator|=
name|d
expr_stmt|;
name|departments
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
name|TreeSet
name|ts
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|DepartmentNameComparator
argument_list|()
argument_list|)
decl_stmt|;
name|ts
operator|.
name|addAll
argument_list|(
name|departments
argument_list|)
expr_stmt|;
if|if
condition|(
name|ts
operator|.
name|size
argument_list|()
operator|==
name|session
operator|.
name|getDepartments
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
name|text
index|[
name|idx
index|]
operator|=
operator|new
name|CSVField
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|ts
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|d
init|=
operator|(
name|Department
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|text
index|[
name|idx
index|]
operator|=
operator|new
name|CSVField
argument_list|(
name|text
index|[
name|idx
index|]
operator|.
name|toString
argument_list|()
operator|+
operator|(
name|text
index|[
name|idx
index|]
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"\n"
operator|)
operator|+
name|d
operator|.
name|getShortLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|idx
operator|++
expr_stmt|;
comment|//control column
if|if
condition|(
operator|!
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"All"
argument_list|)
operator|&&
operator|!
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|matches
argument_list|(
literal|"Exam[0-9]*"
argument_list|)
condition|)
block|{
if|if
condition|(
name|controlDept
operator|!=
literal|null
operator|&&
name|controlDept
operator|.
name|getDeptCode
argument_list|()
operator|.
name|equals
argument_list|(
name|roomListForm
operator|.
name|getDeptCodeX
argument_list|()
argument_list|)
condition|)
block|{
name|text
index|[
name|idx
index|]
operator|=
operator|new
name|CSVField
argument_list|(
literal|"Yes"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|text
index|[
name|idx
index|]
operator|=
operator|new
name|CSVField
argument_list|(
literal|"No"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|controlDept
operator|!=
literal|null
condition|)
block|{
name|text
index|[
name|idx
index|]
operator|=
operator|new
name|CSVField
argument_list|(
name|controlDept
operator|.
name|getShortLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|text
index|[
name|idx
index|]
operator|=
operator|new
name|CSVField
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
name|idx
operator|++
expr_stmt|;
comment|//events column
if|if
condition|(
name|location
operator|.
name|getEventDepartment
argument_list|()
operator|!=
literal|null
operator|&&
name|location
operator|.
name|getEventDepartment
argument_list|()
operator|.
name|isAllowEvents
argument_list|()
condition|)
block|{
name|text
index|[
name|idx
index|]
operator|=
operator|new
name|CSVField
argument_list|(
name|location
operator|.
name|getEventDepartment
argument_list|()
operator|.
name|getShortLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|text
index|[
name|idx
index|]
operator|=
operator|new
name|CSVField
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
block|}
comment|// get groups column
name|text
index|[
name|idx
index|]
operator|=
operator|new
name|CSVField
argument_list|(
literal|""
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
operator|new
name|TreeSet
argument_list|(
name|location
operator|.
name|getRoomGroups
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomGroup
name|rg
init|=
operator|(
name|RoomGroup
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|rg
operator|.
name|isGlobal
argument_list|()
operator|.
name|booleanValue
argument_list|()
operator|&&
operator|(
name|examType
operator|!=
literal|null
operator|||
operator|!
name|depts
operator|.
name|contains
argument_list|(
name|rg
operator|.
name|getDepartment
argument_list|()
argument_list|)
operator|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|rg
operator|.
name|isGlobal
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|boolean
name|skip
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|location
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomDept
name|rd
init|=
operator|(
name|RoomDept
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|rg
operator|.
name|getDepartment
argument_list|()
operator|.
name|equals
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
block|{
name|skip
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|skip
condition|)
continue|continue;
block|}
name|text
index|[
name|idx
index|]
operator|=
operator|new
name|CSVField
argument_list|(
name|text
index|[
name|idx
index|]
operator|.
name|toString
argument_list|()
operator|+
operator|(
name|text
index|[
name|idx
index|]
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"\n"
operator|)
operator|+
name|rg
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
if|if
condition|(
name|featuresOneColumn
condition|)
block|{
comment|// get features column
name|text
index|[
name|idx
index|]
operator|=
operator|new
name|CSVField
argument_list|(
literal|""
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
operator|new
name|TreeSet
argument_list|(
name|location
operator|.
name|getGlobalRoomFeatures
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|GlobalRoomFeature
name|rf
init|=
operator|(
name|GlobalRoomFeature
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|text
index|[
name|idx
index|]
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|text
index|[
name|idx
index|]
operator|=
operator|new
name|CSVField
argument_list|(
name|text
index|[
name|idx
index|]
operator|.
name|toString
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|text
index|[
name|idx
index|]
operator|=
operator|new
name|CSVField
argument_list|(
name|text
index|[
name|idx
index|]
operator|.
name|toString
argument_list|()
operator|+
literal|" "
operator|+
name|rf
operator|.
name|getLabelWithType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|examType
operator|==
literal|null
condition|)
for|for
control|(
name|Iterator
name|it
init|=
operator|new
name|TreeSet
argument_list|(
name|location
operator|.
name|getDepartmentRoomFeatures
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentRoomFeature
name|drf
init|=
operator|(
name|DepartmentRoomFeature
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|depts
operator|.
name|contains
argument_list|(
name|drf
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
continue|continue;
name|boolean
name|skip
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|location
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomDept
name|rd
init|=
operator|(
name|RoomDept
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|drf
operator|.
name|getDepartment
argument_list|()
operator|.
name|equals
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
block|{
name|skip
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|skip
condition|)
continue|continue;
name|text
index|[
name|idx
index|]
operator|=
operator|new
name|CSVField
argument_list|(
name|text
index|[
name|idx
index|]
operator|.
name|toString
argument_list|()
operator|+
operator|(
name|text
index|[
name|idx
index|]
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"\n"
operator|)
operator|+
name|drf
operator|.
name|getLabelWithType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
block|}
else|else
block|{
comment|// get features columns
for|for
control|(
name|Iterator
name|it
init|=
name|globalRoomFeatures
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|GlobalRoomFeature
name|grf
init|=
operator|(
name|GlobalRoomFeature
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|b
init|=
name|location
operator|.
name|hasFeature
argument_list|(
name|grf
argument_list|)
decl_stmt|;
name|text
index|[
name|idx
index|]
operator|=
operator|new
name|CSVField
argument_list|(
name|b
condition|?
literal|"Yes"
else|:
literal|"No"
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|it
init|=
name|deptRoomFeatures
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentRoomFeature
name|drf
init|=
operator|(
name|DepartmentRoomFeature
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|b
init|=
name|location
operator|.
name|hasFeature
argument_list|(
name|drf
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|location
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomDept
name|rd
init|=
operator|(
name|RoomDept
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|drf
operator|.
name|getDepartment
argument_list|()
operator|.
name|equals
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
block|{
name|b
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
name|text
index|[
name|idx
index|]
operator|=
operator|new
name|CSVField
argument_list|(
name|b
condition|?
literal|"Yes"
else|:
literal|"No"
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
block|}
comment|// build rows
name|table
operator|.
name|addLine
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
comment|// set request attributes
for|for
control|(
name|RoomType
name|t
range|:
name|roomTypes
control|)
block|{
name|CSVFile
name|table
init|=
name|tables
operator|.
name|get
argument_list|(
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|.
name|getLines
argument_list|()
operator|==
literal|null
operator|||
name|table
operator|.
name|getLines
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|out
operator|.
name|println
argument_list|(
name|t
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|table
operator|.
name|getHeader
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|CSVLine
name|l
range|:
name|table
operator|.
name|getLines
argument_list|()
control|)
name|out
operator|.
name|println
argument_list|(
name|l
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

