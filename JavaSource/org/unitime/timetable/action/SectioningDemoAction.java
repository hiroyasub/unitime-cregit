begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.0 (University Course Timetabling& Student Sectioning Application)  * Copyright (C) 2007, UniTime.org, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|util
operator|.
name|MessageResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|DocumentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|XMLWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|Web
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|SectioningDemoForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|test
operator|.
name|StudentSectioningTest
import|;
end_import

begin_comment
comment|/**   * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|SectioningDemoAction
extends|extends
name|Action
block|{
comment|/**       * Method execute      * @param mapping      * @param form      * @param request      * @param response      * @return ActionForward      */
specifier|public
name|ActionForward
name|execute
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
name|HttpSession
name|httpSession
init|=
name|request
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Web
operator|.
name|isLoggedIn
argument_list|(
name|httpSession
argument_list|)
operator|||
operator|!
name|Web
operator|.
name|isAdmin
argument_list|(
name|httpSession
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Access Denied."
argument_list|)
throw|;
block|}
name|MessageResources
name|rsc
init|=
name|getResources
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|SectioningDemoForm
name|frm
init|=
operator|(
name|SectioningDemoForm
operator|)
name|form
decl_stmt|;
name|ActionMessages
name|errors
init|=
literal|null
decl_stmt|;
name|String
name|op
init|=
name|frm
operator|.
name|getOp
argument_list|()
decl_stmt|;
if|if
condition|(
name|op
operator|==
literal|null
operator|||
name|op
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|op
operator|=
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"op.view"
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"op2"
argument_list|)
operator|!=
literal|null
operator|&&
name|request
operator|.
name|getParameter
argument_list|(
literal|"op2"
argument_list|)
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|op
operator|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"op2"
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setOp
argument_list|(
name|op
argument_list|)
expr_stmt|;
comment|// First access
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"op.view"
argument_list|)
argument_list|)
condition|)
block|{
name|doLoad
argument_list|(
name|request
argument_list|,
name|frm
argument_list|)
expr_stmt|;
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|removeAttribute
argument_list|(
literal|"LastSolution"
argument_list|)
expr_stmt|;
block|}
name|Element
name|studentEl
init|=
operator|(
name|Element
operator|)
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|getAttribute
argument_list|(
literal|"LastSolution"
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentEl
operator|!=
literal|null
condition|)
block|{
name|frm
operator|.
name|load
argument_list|(
name|session
argument_list|,
name|studentEl
argument_list|,
literal|false
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"Add Request"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|frm
operator|.
name|setNrRequests
argument_list|(
name|frm
operator|.
name|getNrRequests
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"Add Alternative Request"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|frm
operator|.
name|setNrAltRequests
argument_list|(
name|frm
operator|.
name|getNrAltRequests
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"Delete"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|frm
operator|.
name|removeRequest
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"reqIdx"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"Move Up"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|frm
operator|.
name|moveRequest
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"reqIdx"
argument_list|)
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"Move Down"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|frm
operator|.
name|moveRequest
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"reqIdx"
argument_list|)
argument_list|)
argument_list|,
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"Clear"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|frm
operator|.
name|getCourseAssignments
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|frm
operator|.
name|getMessages
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|"Unload"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|frm
operator|.
name|reset
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"Load"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|errors
operator|=
name|frm
operator|.
name|validate
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
expr_stmt|;
if|if
condition|(
name|errors
operator|==
literal|null
operator|||
name|errors
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|frm
operator|.
name|getStudentId
argument_list|()
operator|==
literal|null
operator|||
name|frm
operator|.
name|getStudentId
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"studentId"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"No student id provided."
argument_list|)
argument_list|)
expr_stmt|;
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Student
name|student
init|=
name|Student
operator|.
name|findByExternalId
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|frm
operator|.
name|getStudentId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
block|{
name|frm
operator|.
name|setStudentLoaded
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
literal|"studentId"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Student with id "
operator|+
name|frm
operator|.
name|getStudentId
argument_list|()
operator|+
literal|" does not exists."
argument_list|)
argument_list|)
expr_stmt|;
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
name|frm
operator|.
name|reset
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Document
name|requestXml
init|=
name|DocumentHelper
operator|.
name|createDocument
argument_list|()
decl_stmt|;
name|Element
name|requestEl
init|=
name|requestXml
operator|.
name|addElement
argument_list|(
literal|"request"
argument_list|)
decl_stmt|;
name|requestEl
operator|.
name|addAttribute
argument_list|(
literal|"campus"
argument_list|,
name|session
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|)
expr_stmt|;
name|requestEl
operator|.
name|addAttribute
argument_list|(
literal|"year"
argument_list|,
name|session
operator|.
name|getAcademicYear
argument_list|()
argument_list|)
expr_stmt|;
name|requestEl
operator|.
name|addAttribute
argument_list|(
literal|"term"
argument_list|,
name|session
operator|.
name|getAcademicTerm
argument_list|()
argument_list|)
expr_stmt|;
name|requestEl
operator|.
name|addAttribute
argument_list|(
literal|"version"
argument_list|,
literal|"1.1"
argument_list|)
expr_stmt|;
name|requestEl
operator|.
name|addAttribute
argument_list|(
literal|"timestamp"
argument_list|,
operator|new
name|Date
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|studentEl
operator|=
name|requestEl
operator|.
name|addElement
argument_list|(
literal|"student"
argument_list|)
expr_stmt|;
name|studentEl
operator|.
name|addAttribute
argument_list|(
literal|"key"
argument_list|,
name|frm
operator|.
name|getStudentId
argument_list|()
argument_list|)
expr_stmt|;
name|studentEl
operator|.
name|addElement
argument_list|(
literal|"retrieveCourseRequests"
argument_list|)
expr_stmt|;
name|Document
name|responseXml
init|=
name|StudentSectioningTest
operator|.
name|testSectioning
argument_list|(
name|requestXml
argument_list|)
decl_stmt|;
name|studentEl
operator|=
name|responseXml
operator|.
name|getRootElement
argument_list|()
operator|.
name|element
argument_list|(
literal|"student"
argument_list|)
expr_stmt|;
name|frm
operator|.
name|load
argument_list|(
name|session
argument_list|,
name|studentEl
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|studentEl
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|setAttribute
argument_list|(
literal|"LastSolution"
argument_list|,
name|studentEl
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|removeAttribute
argument_list|(
literal|"LastSolution"
argument_list|)
expr_stmt|;
block|}
name|File
name|requestFile
init|=
name|ApplicationProperties
operator|.
name|getTempFile
argument_list|(
literal|"request"
argument_list|,
literal|"xml"
argument_list|)
decl_stmt|;
name|XMLWriter
name|out
init|=
operator|new
name|XMLWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|requestFile
argument_list|)
argument_list|,
name|OutputFormat
operator|.
name|createPrettyPrint
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|requestXml
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|frm
operator|.
name|setRequestFile
argument_list|(
literal|"temp/"
operator|+
name|requestFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|responseFile
init|=
name|ApplicationProperties
operator|.
name|getTempFile
argument_list|(
literal|"response"
argument_list|,
literal|"xml"
argument_list|)
decl_stmt|;
name|out
operator|=
operator|new
name|XMLWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|responseFile
argument_list|)
argument_list|,
name|OutputFormat
operator|.
name|createPrettyPrint
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|responseXml
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|frm
operator|.
name|setResponseFile
argument_list|(
literal|"temp/"
operator|+
name|responseFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setStudentLoaded
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Submit request
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.submitStudentRequest"
argument_list|)
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
literal|"Save"
argument_list|)
condition|)
block|{
name|errors
operator|=
name|frm
operator|.
name|validate
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
expr_stmt|;
if|if
condition|(
name|errors
operator|==
literal|null
operator|||
name|errors
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|Document
name|requestXml
init|=
name|DocumentHelper
operator|.
name|createDocument
argument_list|()
decl_stmt|;
name|Element
name|requestEl
init|=
name|requestXml
operator|.
name|addElement
argument_list|(
literal|"request"
argument_list|)
decl_stmt|;
name|requestEl
operator|.
name|addAttribute
argument_list|(
literal|"campus"
argument_list|,
name|session
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|)
expr_stmt|;
name|requestEl
operator|.
name|addAttribute
argument_list|(
literal|"year"
argument_list|,
name|session
operator|.
name|getAcademicYear
argument_list|()
argument_list|)
expr_stmt|;
name|requestEl
operator|.
name|addAttribute
argument_list|(
literal|"term"
argument_list|,
name|session
operator|.
name|getAcademicTerm
argument_list|()
argument_list|)
expr_stmt|;
name|requestEl
operator|.
name|addAttribute
argument_list|(
literal|"version"
argument_list|,
literal|"1.1"
argument_list|)
expr_stmt|;
name|requestEl
operator|.
name|addAttribute
argument_list|(
literal|"timestamp"
argument_list|,
operator|new
name|Date
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|studentEl
operator|=
name|requestEl
operator|.
name|addElement
argument_list|(
literal|"student"
argument_list|)
expr_stmt|;
name|studentEl
operator|.
name|addAttribute
argument_list|(
literal|"key"
argument_list|,
operator|(
name|frm
operator|.
name|getStudentId
argument_list|()
operator|==
literal|null
operator|||
name|frm
operator|.
name|getStudentId
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|"-1"
else|:
name|frm
operator|.
name|getStudentId
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|frm
operator|.
name|save
argument_list|(
name|session
argument_list|,
name|studentEl
argument_list|,
name|op
operator|.
name|equals
argument_list|(
literal|"Save"
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|responseXml
init|=
name|StudentSectioningTest
operator|.
name|testSectioning
argument_list|(
name|requestXml
argument_list|)
decl_stmt|;
name|studentEl
operator|=
name|responseXml
operator|.
name|getRootElement
argument_list|()
operator|.
name|element
argument_list|(
literal|"student"
argument_list|)
expr_stmt|;
name|frm
operator|.
name|load
argument_list|(
name|session
argument_list|,
name|studentEl
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|studentEl
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|setAttribute
argument_list|(
literal|"LastSolution"
argument_list|,
name|studentEl
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|removeAttribute
argument_list|(
literal|"LastSolution"
argument_list|)
expr_stmt|;
block|}
name|File
name|requestFile
init|=
name|ApplicationProperties
operator|.
name|getTempFile
argument_list|(
literal|"request"
argument_list|,
literal|"xml"
argument_list|)
decl_stmt|;
name|XMLWriter
name|out
init|=
operator|new
name|XMLWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|requestFile
argument_list|)
argument_list|,
name|OutputFormat
operator|.
name|createPrettyPrint
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|requestXml
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|frm
operator|.
name|setRequestFile
argument_list|(
literal|"temp/"
operator|+
name|requestFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|responseFile
init|=
name|ApplicationProperties
operator|.
name|getTempFile
argument_list|(
literal|"response"
argument_list|,
literal|"xml"
argument_list|)
decl_stmt|;
name|out
operator|=
operator|new
name|XMLWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|responseFile
argument_list|)
argument_list|,
name|OutputFormat
operator|.
name|createPrettyPrint
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|responseXml
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|frm
operator|.
name|setResponseFile
argument_list|(
literal|"temp/"
operator|+
name|responseFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"displayForm"
argument_list|)
return|;
block|}
comment|/**      * @param request      * @param frm      */
specifier|private
name|void
name|doLoad
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|SectioningDemoForm
name|frm
parameter_list|)
block|{
block|}
block|}
end_class

end_unit

