begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 - 3.5 (University Timetabling Application)  * Copyright (C) 2008 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|util
operator|.
name|MessageResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|SessionAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|DistributionPrefsForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|ExamDistributionPrefsForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Preference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DistributionPrefDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DistributionTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExamDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|ExportUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|LookupTables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|BackTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|ExamDistributionPrefsTableBuilder
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"/examDistributionPrefs"
argument_list|)
specifier|public
class|class
name|ExamDistributionPrefsAction
extends|extends
name|Action
block|{
annotation|@
name|Autowired
name|SessionContext
name|sessionContext
decl_stmt|;
specifier|public
name|ActionForward
name|execute
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|ExaminationDistributionPreferences
argument_list|)
expr_stmt|;
name|MessageResources
name|rsc
init|=
name|getResources
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|ActionMessages
name|errors
init|=
operator|new
name|ActionMessages
argument_list|()
decl_stmt|;
name|ExamDistributionPrefsForm
name|frm
init|=
operator|(
name|ExamDistributionPrefsForm
operator|)
name|form
decl_stmt|;
name|String
name|deleteId
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"deleteId"
argument_list|)
decl_stmt|;
name|String
name|deleteType
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"deleteType"
argument_list|)
decl_stmt|;
name|String
name|distPrefId
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"dp"
argument_list|)
decl_stmt|;
name|String
name|reloadCause
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"reloadCause"
argument_list|)
decl_stmt|;
name|String
name|reloadId
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"reloadId"
argument_list|)
decl_stmt|;
name|String
name|op
init|=
name|frm
operator|.
name|getOp
argument_list|()
decl_stmt|;
if|if
condition|(
name|op
operator|==
literal|null
operator|||
name|op
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|op
operator|=
literal|"view"
expr_stmt|;
name|frm
operator|.
name|setOp
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|reloadCause
operator|!=
literal|null
operator|&&
name|reloadCause
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|op
operator|=
literal|"reload"
expr_stmt|;
comment|// Cancel - Display blank form
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.cancel"
argument_list|)
argument_list|)
condition|)
block|{
name|frm
operator|.
name|reset
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
expr_stmt|;
if|if
condition|(
name|BackTracker
operator|.
name|doBack
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
condition|)
return|return
literal|null
return|;
name|op
operator|=
literal|"view"
expr_stmt|;
comment|//in case no back is available
block|}
comment|// Set lookup tables lists
comment|//LookupTables.setupPrefLevels(request);	 // Preference Levels
name|LookupTables
operator|.
name|setupExamDistribTypes
argument_list|(
name|request
argument_list|,
name|sessionContext
argument_list|)
expr_stmt|;
comment|// Distribution Types
name|LookupTables
operator|.
name|setupExamTypes
argument_list|(
name|request
argument_list|,
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Exam Types
comment|// Add / Update distribution pref
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.save"
argument_list|)
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.update"
argument_list|)
argument_list|)
condition|)
block|{
name|Debug
operator|.
name|debug
argument_list|(
literal|"Saving distribution pref ..."
argument_list|)
expr_stmt|;
name|errors
operator|=
name|frm
operator|.
name|validate
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
expr_stmt|;
if|if
condition|(
name|errors
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
try|try
block|{
name|doAddOrUpdate
argument_list|(
name|request
argument_list|,
name|frm
argument_list|)
expr_stmt|;
if|if
condition|(
name|frm
operator|.
name|getDistPrefId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|setAttribute
argument_list|(
literal|"backType"
argument_list|,
literal|"PreferenceGroup"
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"backId"
argument_list|,
name|frm
operator|.
name|getDistPrefId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|frm
operator|.
name|reset
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
expr_stmt|;
if|if
condition|(
name|BackTracker
operator|.
name|doBack
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
condition|)
return|return
literal|null
return|;
name|op
operator|=
literal|"view"
expr_stmt|;
comment|//in case no back is available
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
literal|"classes"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
block|}
else|else
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
comment|// Delete distribution object / pref
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.delete"
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|deleteType
operator|.
name|equals
argument_list|(
literal|"distObject"
argument_list|)
condition|)
block|{
name|frm
operator|.
name|deleteExam
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|deleteId
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deleteType
operator|.
name|equals
argument_list|(
literal|"distPref"
argument_list|)
condition|)
block|{
name|distPrefId
operator|=
name|frm
operator|.
name|getDistPrefId
argument_list|()
expr_stmt|;
name|doDelete
argument_list|(
name|request
argument_list|,
name|distPrefId
argument_list|)
expr_stmt|;
name|frm
operator|.
name|reset
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
expr_stmt|;
if|if
condition|(
name|BackTracker
operator|.
name|doBack
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
condition|)
return|return
literal|null
return|;
name|op
operator|=
literal|"view"
expr_stmt|;
comment|//in case no back is available
block|}
block|}
comment|// Add new class - redirect from SchedulingSubpartEdit / ClassEdit
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.addDistPref"
argument_list|)
argument_list|)
condition|)
block|{
name|Debug
operator|.
name|debug
argument_list|(
literal|"Adding new Class via redirect ..."
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setDistType
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getAttribute
argument_list|(
literal|"subjectAreaId"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|frm
operator|.
name|setSubjectArea
argument_list|(
literal|0
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|request
operator|.
name|getAttribute
argument_list|(
literal|"subjectAreaId"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|getAttribute
argument_list|(
literal|"courseOffrId"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|CourseOffering
name|course
init|=
operator|new
name|CourseOfferingDAO
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|request
operator|.
name|getAttribute
argument_list|(
literal|"courseOffrId"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|frm
operator|.
name|setSubjectArea
argument_list|(
literal|0
argument_list|,
name|course
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setCourseNbr
argument_list|(
literal|0
argument_list|,
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|getAttribute
argument_list|(
literal|"examId"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|Exam
name|exam
init|=
operator|new
name|ExamDAO
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|request
operator|.
name|getAttribute
argument_list|(
literal|"examId"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|frm
operator|.
name|setExam
argument_list|(
literal|0
argument_list|,
name|exam
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setSubjectArea
argument_list|(
literal|0
argument_list|,
name|exam
operator|.
name|firstSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setCourseNbr
argument_list|(
literal|0
argument_list|,
name|exam
operator|.
name|firstCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setExamType
argument_list|(
name|exam
operator|.
name|getExamType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|frm
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|frm
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|frm
operator|.
name|getExam
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Add new class
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.addExam"
argument_list|)
argument_list|)
condition|)
block|{
name|Debug
operator|.
name|debug
argument_list|(
literal|"Adding new Class ..."
argument_list|)
expr_stmt|;
name|frm
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|frm
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|frm
operator|.
name|getExam
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.search"
argument_list|)
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.exportPDF"
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|subjectAreaId
init|=
name|frm
operator|.
name|getFilterSubjectAreaId
argument_list|()
decl_stmt|;
name|String
name|courseNbr
init|=
name|frm
operator|.
name|getFilterCourseNbr
argument_list|()
decl_stmt|;
if|if
condition|(
name|subjectAreaId
operator|!=
literal|null
operator|&&
name|subjectAreaId
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|sessionContext
operator|.
name|setAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OfferingsSubjectArea
argument_list|,
name|subjectAreaId
argument_list|)
expr_stmt|;
else|else
name|sessionContext
operator|.
name|removeAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OfferingsSubjectArea
argument_list|)
expr_stmt|;
if|if
condition|(
name|courseNbr
operator|!=
literal|null
operator|&&
name|courseNbr
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|sessionContext
operator|.
name|setAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OfferingsCourseNumber
argument_list|,
name|courseNbr
argument_list|)
expr_stmt|;
else|else
name|sessionContext
operator|.
name|removeAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OfferingsCourseNumber
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|setAttribute
argument_list|(
name|SessionAttribute
operator|.
name|ExamType
argument_list|,
name|frm
operator|.
name|getExamType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.exportPDF"
argument_list|)
argument_list|)
condition|)
name|op
operator|=
literal|"export"
expr_stmt|;
else|else
name|op
operator|=
literal|"view"
expr_stmt|;
block|}
comment|// Load Distribution Pref
if|if
condition|(
name|op
operator|!=
literal|null
operator|&&
operator|(
name|op
operator|.
name|equals
argument_list|(
literal|"view"
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
literal|"export"
argument_list|)
operator|)
operator|&&
name|distPrefId
operator|!=
literal|null
operator|&&
name|distPrefId
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Debug
operator|.
name|debug
argument_list|(
literal|"Loading dist pref - "
operator|+
name|distPrefId
argument_list|)
expr_stmt|;
name|frm
operator|.
name|reset
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|doLoad
argument_list|(
name|frm
argument_list|,
name|distPrefId
argument_list|)
expr_stmt|;
block|}
comment|// Reload
if|if
condition|(
name|op
operator|!=
literal|null
operator|&&
name|op
operator|.
name|equals
argument_list|(
literal|"reload"
argument_list|)
condition|)
block|{
comment|// Move Distribution object up one level
if|if
condition|(
name|reloadCause
operator|!=
literal|null
operator|&&
name|reloadCause
operator|.
name|equals
argument_list|(
literal|"moveUp"
argument_list|)
condition|)
block|{
name|int
name|index
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|reloadId
argument_list|)
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"moving up ... "
operator|+
name|reloadId
argument_list|)
expr_stmt|;
name|frm
operator|.
name|swapExams
argument_list|(
name|index
argument_list|,
name|index
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Move Distribution object down one level
if|if
condition|(
name|reloadCause
operator|!=
literal|null
operator|&&
name|reloadCause
operator|.
name|equals
argument_list|(
literal|"moveDown"
argument_list|)
condition|)
block|{
name|int
name|index
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|reloadId
argument_list|)
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"moving down ... "
operator|+
name|reloadId
argument_list|)
expr_stmt|;
name|frm
operator|.
name|swapExams
argument_list|(
name|index
argument_list|,
name|index
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|frm
operator|.
name|getDistType
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|frm
operator|.
name|getDistType
argument_list|()
operator|.
name|equals
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
condition|)
block|{
name|Vector
name|prefs
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|DistributionType
name|dist
init|=
operator|(
operator|new
name|DistributionTypeDAO
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|frm
operator|.
name|getDistType
argument_list|()
argument_list|)
argument_list|)
operator|)
decl_stmt|;
name|frm
operator|.
name|setDescription
argument_list|(
name|dist
operator|.
name|getDescr
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|containsPref
init|=
literal|false
decl_stmt|;
for|for
control|(
name|PreferenceLevel
name|pref
range|:
name|PreferenceLevel
operator|.
name|getPreferenceLevelList
argument_list|()
control|)
block|{
if|if
condition|(
name|dist
operator|.
name|isAllowed
argument_list|(
name|pref
argument_list|)
condition|)
block|{
name|prefs
operator|.
name|addElement
argument_list|(
name|pref
argument_list|)
expr_stmt|;
if|if
condition|(
name|frm
operator|.
name|getPrefLevel
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|frm
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|equals
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
operator|&&
name|pref
operator|.
name|getPrefId
argument_list|()
operator|.
name|equals
argument_list|(
operator|new
name|Integer
argument_list|(
name|frm
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
argument_list|)
condition|)
name|containsPref
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|containsPref
condition|)
name|frm
operator|.
name|setPrefLevel
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefs
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
name|frm
operator|.
name|setPrefLevel
argument_list|(
operator|(
operator|(
name|PreferenceLevel
operator|)
name|prefs
operator|.
name|firstElement
argument_list|()
operator|)
operator|.
name|getPrefId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|PreferenceLevel
operator|.
name|PREF_LEVEL_ATTR_NAME
argument_list|,
name|prefs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|request
operator|.
name|setAttribute
argument_list|(
name|PreferenceLevel
operator|.
name|PREF_LEVEL_ATTR_NAME
argument_list|,
operator|new
name|Vector
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setDescription
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"export"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|&&
operator|(
name|frm
operator|.
name|getDistPrefId
argument_list|()
operator|==
literal|null
operator|||
name|frm
operator|.
name|getDistPrefId
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
name|OutputStream
name|out
init|=
name|ExportUtils
operator|.
name|getPdfOutputStream
argument_list|(
name|response
argument_list|,
literal|"distpref"
argument_list|)
decl_stmt|;
operator|new
name|ExamDistributionPrefsTableBuilder
argument_list|()
operator|.
name|getDistPrefsTableAsPdf
argument_list|(
name|out
argument_list|,
name|request
argument_list|,
name|sessionContext
argument_list|,
operator|(
name|Constants
operator|.
name|ALL_OPTION_VALUE
operator|.
name|equals
argument_list|(
name|frm
operator|.
name|getFilterSubjectAreaId
argument_list|()
argument_list|)
operator|||
name|frm
operator|.
name|getFilterSubjectAreaId
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|Long
operator|.
name|valueOf
argument_list|(
name|frm
operator|.
name|getFilterSubjectAreaId
argument_list|()
argument_list|)
operator|)
argument_list|,
name|frm
operator|.
name|getFilterCourseNbr
argument_list|()
argument_list|,
name|frm
operator|.
name|getExamType
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
name|request
operator|.
name|setAttribute
argument_list|(
name|DistributionPrefsForm
operator|.
name|LIST_SIZE_ATTR
argument_list|,
literal|""
operator|+
operator|(
name|frm
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|sessionContext
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|ExamType
argument_list|)
operator|!=
literal|null
condition|)
name|frm
operator|.
name|setExamType
argument_list|(
operator|(
name|Long
operator|)
name|sessionContext
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|ExamType
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|frm
operator|.
name|getExamType
argument_list|()
operator|==
literal|null
condition|)
block|{
name|TreeSet
argument_list|<
name|ExamType
argument_list|>
name|types
init|=
name|ExamType
operator|.
name|findAllUsed
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|types
operator|.
name|isEmpty
argument_list|()
condition|)
name|frm
operator|.
name|setExamType
argument_list|(
name|types
operator|.
name|first
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|frm
operator|.
name|setFilterSubjectAreas
argument_list|(
name|SubjectArea
operator|.
name|getUserSubjectAreas
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|frm
operator|.
name|getFilterSubjectAreas
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|SubjectArea
name|firstSubjectArea
init|=
operator|(
name|SubjectArea
operator|)
name|frm
operator|.
name|getFilterSubjectAreas
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|frm
operator|.
name|setFilterSubjectAreaId
argument_list|(
name|firstSubjectArea
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"view"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|&&
operator|(
name|frm
operator|.
name|getDistPrefId
argument_list|()
operator|==
literal|null
operator|||
name|frm
operator|.
name|getDistPrefId
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
name|String
name|subject
init|=
operator|(
name|String
operator|)
name|sessionContext
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OfferingsSubjectArea
argument_list|)
decl_stmt|;
if|if
condition|(
name|subject
operator|!=
literal|null
operator|&&
name|subject
operator|.
name|indexOf
argument_list|(
literal|','
argument_list|)
operator|>=
literal|0
condition|)
name|subject
operator|=
name|subject
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|subject
operator|.
name|indexOf
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setFilterSubjectAreaId
argument_list|(
name|subject
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setFilterCourseNbr
argument_list|(
operator|(
name|String
operator|)
name|sessionContext
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OfferingsCourseNumber
argument_list|)
argument_list|)
expr_stmt|;
name|ExamDistributionPrefsTableBuilder
name|tbl
init|=
operator|new
name|ExamDistributionPrefsTableBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|frm
operator|.
name|getFilterSubjectAreaId
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|DepartmentIndependent
argument_list|)
condition|)
name|frm
operator|.
name|setFilterSubjectAreaId
argument_list|(
name|Constants
operator|.
name|BLANK_OPTION_VALUE
argument_list|)
expr_stmt|;
else|else
name|frm
operator|.
name|setFilterSubjectAreaId
argument_list|(
name|Constants
operator|.
name|ALL_OPTION_VALUE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|frm
operator|.
name|getFilterSubjectAreaId
argument_list|()
operator|!=
literal|null
operator|&&
name|frm
operator|.
name|getFilterSubjectAreaId
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|html
init|=
name|tbl
operator|.
name|getDistPrefsTable
argument_list|(
name|request
argument_list|,
name|sessionContext
argument_list|,
operator|(
name|Constants
operator|.
name|ALL_OPTION_VALUE
operator|.
name|equals
argument_list|(
name|frm
operator|.
name|getFilterSubjectAreaId
argument_list|()
argument_list|)
condition|?
literal|null
else|:
name|Long
operator|.
name|valueOf
argument_list|(
name|frm
operator|.
name|getFilterSubjectAreaId
argument_list|()
argument_list|)
operator|)
argument_list|,
name|frm
operator|.
name|getFilterCourseNbr
argument_list|()
argument_list|,
name|frm
operator|.
name|getExamType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|html
operator|!=
literal|null
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
name|DistributionPref
operator|.
name|DIST_PREF_REQUEST_ATTR
argument_list|,
name|html
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|request
operator|.
name|setAttribute
argument_list|(
name|DistributionPref
operator|.
name|DIST_PREF_REQUEST_ATTR
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
name|BackTracker
operator|.
name|markForBack
argument_list|(
name|request
argument_list|,
literal|"examDistributionPrefs.do"
argument_list|,
literal|"Exam Distribution Prefs"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"list"
argument_list|)
return|;
block|}
return|return
name|mapping
operator|.
name|findForward
argument_list|(
name|frm
operator|.
name|getDistPrefId
argument_list|()
operator|==
literal|null
operator|||
name|frm
operator|.
name|getDistPrefId
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|"add"
else|:
literal|"edit"
argument_list|)
return|;
block|}
comment|/**      * Loads the form with the data for the distribution pref selected      * @param frm      * @param distPrefId      */
specifier|private
name|void
name|doLoad
parameter_list|(
name|ExamDistributionPrefsForm
name|frm
parameter_list|,
name|String
name|distPrefId
parameter_list|)
block|{
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|distPrefId
argument_list|,
literal|"DistributionPref"
argument_list|,
name|Right
operator|.
name|ExaminationDistributionPreferenceDetail
argument_list|)
expr_stmt|;
comment|// Get distribution pref info
name|DistributionPref
name|dp
init|=
operator|new
name|DistributionPrefDAO
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|distPrefId
argument_list|)
argument_list|)
decl_stmt|;
name|frm
operator|.
name|setDistType
argument_list|(
name|dp
operator|.
name|getDistributionType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setDescription
argument_list|(
name|dp
operator|.
name|getDistributionType
argument_list|()
operator|.
name|getDescr
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setPrefLevel
argument_list|(
name|dp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setDistPrefId
argument_list|(
name|distPrefId
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|TreeSet
argument_list|(
name|dp
operator|.
name|getDistributionObjects
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|distObj
init|=
operator|(
name|DistributionObject
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|distObj
operator|.
name|getPrefGroup
argument_list|()
decl_stmt|;
name|frm
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|add
argument_list|(
name|exam
operator|.
name|firstSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|add
argument_list|(
name|exam
operator|.
name|firstCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|getExam
argument_list|()
operator|.
name|add
argument_list|(
name|exam
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Add new distribution pref      * @param httpSession      * @param frm      */
specifier|private
name|void
name|doAddOrUpdate
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|ExamDistributionPrefsForm
name|frm
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|distPrefId
init|=
name|frm
operator|.
name|getDistPrefId
argument_list|()
decl_stmt|;
if|if
condition|(
name|distPrefId
operator|!=
literal|null
operator|&&
operator|!
name|distPrefId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|distPrefId
argument_list|,
literal|"DistributionPref"
argument_list|,
name|Right
operator|.
name|ExaminationDistributionPreferenceEdit
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|ExaminationDistributionPreferenceAdd
argument_list|)
expr_stmt|;
block|}
comment|// Create distribution preference
name|DistributionPref
name|dp
init|=
literal|null
decl_stmt|;
name|DistributionPrefDAO
name|dpDao
init|=
operator|new
name|DistributionPrefDAO
argument_list|()
decl_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|dpDao
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|HashSet
name|relatedExams
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
try|try
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|distPrefId
operator|!=
literal|null
operator|&&
operator|!
name|distPrefId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|dp
operator|=
name|dpDao
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|distPrefId
argument_list|)
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
name|Set
name|s
init|=
name|dp
operator|.
name|getDistributionObjects
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|s
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|dObj
init|=
operator|(
name|DistributionObject
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|PreferenceGroup
name|pg
init|=
name|dObj
operator|.
name|getPrefGroup
argument_list|()
decl_stmt|;
name|relatedExams
operator|.
name|add
argument_list|(
name|pg
argument_list|)
expr_stmt|;
name|pg
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|remove
argument_list|(
name|dObj
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|pg
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|clear
argument_list|()
expr_stmt|;
name|dp
operator|.
name|setDistributionObjects
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
else|else
name|dp
operator|=
operator|new
name|DistributionPref
argument_list|()
expr_stmt|;
name|dp
operator|.
name|setDistributionType
argument_list|(
operator|new
name|DistributionTypeDAO
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|frm
operator|.
name|getDistType
argument_list|()
argument_list|)
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setGrouping
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|frm
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setOwner
argument_list|(
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|HashSet
name|addedExams
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|frm
operator|.
name|getExam
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Long
name|examId
init|=
operator|(
name|Long
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|examId
operator|<
literal|0
condition|)
continue|continue;
name|Exam
name|exam
init|=
operator|new
name|ExamDAO
argument_list|()
operator|.
name|get
argument_list|(
name|examId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|exam
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
operator|!
name|addedExams
operator|.
name|add
argument_list|(
name|exam
argument_list|)
condition|)
continue|continue;
name|relatedExams
operator|.
name|add
argument_list|(
name|exam
argument_list|)
expr_stmt|;
name|DistributionObject
name|dObj
init|=
operator|new
name|DistributionObject
argument_list|()
decl_stmt|;
name|dObj
operator|.
name|setPrefGroup
argument_list|(
name|exam
argument_list|)
expr_stmt|;
name|dObj
operator|.
name|setDistributionPref
argument_list|(
name|dp
argument_list|)
expr_stmt|;
name|dObj
operator|.
name|setSequenceNumber
argument_list|(
operator|new
name|Integer
argument_list|(
operator|++
name|idx
argument_list|)
argument_list|)
expr_stmt|;
name|exam
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|add
argument_list|(
name|dObj
argument_list|)
expr_stmt|;
name|dp
operator|.
name|addTodistributionObjects
argument_list|(
name|dObj
argument_list|)
expr_stmt|;
block|}
comment|// Save
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|dp
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|relatedExams
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|sessionContext
argument_list|,
name|exam
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|DIST_PREF_EDIT
argument_list|,
operator|(
name|distPrefId
operator|!=
literal|null
operator|&&
name|distPrefId
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
name|ChangeLog
operator|.
name|Operation
operator|.
name|UPDATE
else|:
name|ChangeLog
operator|.
name|Operation
operator|.
name|CREATE
operator|)
argument_list|,
name|exam
operator|.
name|firstSubjectArea
argument_list|()
argument_list|,
name|exam
operator|.
name|firstDepartment
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|refresh
argument_list|(
name|dp
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setDistPrefId
argument_list|(
name|dp
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|clear
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**      * Delete distribution pref      * @param distPrefId      */
specifier|private
name|void
name|doDelete
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|String
name|distPrefId
parameter_list|)
block|{
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|distPrefId
argument_list|,
literal|"DistributionPref"
argument_list|,
name|Right
operator|.
name|ExaminationDistributionPreferenceDelete
argument_list|)
expr_stmt|;
try|try
block|{
name|DistributionPrefDAO
name|dpDao
init|=
operator|new
name|DistributionPrefDAO
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|dpDao
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|tx
operator|=
name|hibSession
operator|.
name|getTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|tx
operator|==
literal|null
operator|||
operator|!
name|tx
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|tx
operator|.
name|begin
argument_list|()
expr_stmt|;
block|}
name|HashSet
name|relatedExams
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|DistributionPref
name|dp
init|=
name|dpDao
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|distPrefId
argument_list|)
argument_list|)
decl_stmt|;
name|PreferenceGroup
name|owner
init|=
operator|(
name|PreferenceGroup
operator|)
name|dp
operator|.
name|getOwner
argument_list|()
decl_stmt|;
name|owner
operator|.
name|getPreferences
argument_list|()
operator|.
name|remove
argument_list|(
name|dp
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|dp
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|dObj
init|=
operator|(
name|DistributionObject
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|PreferenceGroup
name|pg
init|=
name|dObj
operator|.
name|getPrefGroup
argument_list|()
decl_stmt|;
name|relatedExams
operator|.
name|add
argument_list|(
name|pg
argument_list|)
expr_stmt|;
name|pg
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|remove
argument_list|(
name|dObj
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|pg
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|delete
argument_list|(
name|dp
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|owner
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|relatedExams
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|sessionContext
argument_list|,
name|exam
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|DIST_PREF_EDIT
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|DELETE
argument_list|,
name|exam
operator|.
name|firstSubjectArea
argument_list|()
argument_list|,
name|exam
operator|.
name|firstDepartment
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|refresh
argument_list|(
name|owner
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

