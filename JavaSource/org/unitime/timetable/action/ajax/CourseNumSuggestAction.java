begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.1 (University Timetabling Application)  * Copyright (C) 2008, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
operator|.
name|ajax
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|FlushMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|Web
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|improve
operator|.
name|struts
operator|.
name|taglib
operator|.
name|layout
operator|.
name|suggest
operator|.
name|MultipleSuggestAction
import|;
end_import

begin_comment
comment|/**  * MyEclipse Struts Creation date: 01-11-2006  *   * XDoclet definition:  *   * @struts:action scope="request"  */
end_comment

begin_class
specifier|public
class|class
name|CourseNumSuggestAction
extends|extends
name|MultipleSuggestAction
block|{
comment|// --------------------------------------------------------- Methods
comment|/**      * Retrieve Suggestion List of Course Numbers for a given Subject Area      */
specifier|public
name|Collection
name|getMultipleSuggestionList
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|Map
name|map
parameter_list|)
block|{
name|List
name|result
init|=
literal|null
decl_stmt|;
comment|// Read form variables -- Classes Schedule Screen
if|if
condition|(
name|map
operator|.
name|get
argument_list|(
literal|"session"
argument_list|)
operator|!=
literal|null
operator|&&
name|map
operator|.
name|get
argument_list|(
literal|"session"
argument_list|)
operator|instanceof
name|String
operator|&&
name|map
operator|.
name|get
argument_list|(
literal|"subjectArea"
argument_list|)
operator|!=
literal|null
operator|&&
name|map
operator|.
name|get
argument_list|(
literal|"subjectArea"
argument_list|)
operator|instanceof
name|String
operator|&&
name|map
operator|.
name|get
argument_list|(
literal|"courseNumber"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|StringBuffer
name|query
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"select distinct co.courseNbr "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"  from CourseOffering co "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|" where co.subjectArea.session.uniqueId = :acadSessionId "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"       and co.subjectArea.subjectAreaAbbreviation = :subjectArea"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"       and co.courseNbr like :courseNbr "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|" order by co.courseNbr "
argument_list|)
expr_stmt|;
name|CourseOfferingDAO
name|cdao
init|=
operator|new
name|CourseOfferingDAO
argument_list|()
decl_stmt|;
name|Session
name|hibSession
init|=
name|cdao
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Query
name|q
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|q
operator|.
name|setFetchSize
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|q
operator|.
name|setFlushMode
argument_list|(
name|FlushMode
operator|.
name|MANUAL
argument_list|)
expr_stmt|;
name|q
operator|.
name|setInteger
argument_list|(
literal|"acadSessionId"
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"session"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|setString
argument_list|(
literal|"subjectArea"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"subjectArea"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|setString
argument_list|(
literal|"courseNbr"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"courseNumber"
argument_list|)
operator|.
name|toString
argument_list|()
operator|+
literal|"%"
argument_list|)
expr_stmt|;
name|result
operator|=
name|q
operator|.
name|list
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
name|result
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
comment|// Security Checks
if|if
condition|(
operator|!
name|Web
operator|.
name|isLoggedIn
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
operator|||
name|user
operator|==
literal|null
operator|||
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|SESSION_ID_ATTR_NAME
argument_list|)
operator|==
literal|null
condition|)
return|return
operator|new
name|ArrayList
argument_list|()
return|;
comment|// Get Academic Session
name|String
name|acadSessionId
init|=
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|SESSION_ID_ATTR_NAME
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// Read form variables -- Instructional Offerings Screen, Reservations Screen
if|if
condition|(
name|map
operator|.
name|get
argument_list|(
literal|"subjectAreaId"
argument_list|)
operator|!=
literal|null
operator|&&
name|map
operator|.
name|get
argument_list|(
literal|"courseNbr"
argument_list|)
operator|!=
literal|null
operator|&&
name|map
operator|.
name|get
argument_list|(
literal|"subjectAreaId"
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
operator|!
name|Constants
operator|.
name|ALL_OPTION_VALUE
operator|.
name|equals
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"subjectAreaId"
argument_list|)
argument_list|)
condition|)
block|{
name|StringBuffer
name|query
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"select distinct co.courseNbr "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"  from CourseOffering co "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|" where co.subjectArea.session.uniqueId = :acadSessionId "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|" 		 and co.subjectArea.uniqueId = :subjectAreaId "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|" 		 and co.courseNbr like :courseNbr "
argument_list|)
expr_stmt|;
comment|//query.append(" 		 and co.isControl = true ");
name|query
operator|.
name|append
argument_list|(
literal|" order by co.courseNbr "
argument_list|)
expr_stmt|;
name|CourseOfferingDAO
name|cdao
init|=
operator|new
name|CourseOfferingDAO
argument_list|()
decl_stmt|;
name|Session
name|hibSession
init|=
name|cdao
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Query
name|q
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|q
operator|.
name|setFetchSize
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|q
operator|.
name|setFlushMode
argument_list|(
name|FlushMode
operator|.
name|MANUAL
argument_list|)
expr_stmt|;
name|q
operator|.
name|setInteger
argument_list|(
literal|"acadSessionId"
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|acadSessionId
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|setInteger
argument_list|(
literal|"subjectAreaId"
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"subjectAreaId"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|setString
argument_list|(
literal|"courseNbr"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"courseNbr"
argument_list|)
operator|.
name|toString
argument_list|()
operator|+
literal|"%"
argument_list|)
expr_stmt|;
name|result
operator|=
name|q
operator|.
name|list
argument_list|()
expr_stmt|;
block|}
comment|// Read form variables -- Distribution Preferences Screen
if|if
condition|(
name|map
operator|.
name|get
argument_list|(
literal|"filterSubjectAreaId"
argument_list|)
operator|!=
literal|null
operator|&&
operator|!
name|Constants
operator|.
name|BLANK_OPTION_VALUE
operator|.
name|equals
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"filterSubjectAreaId"
argument_list|)
argument_list|)
operator|&&
operator|!
name|Constants
operator|.
name|ALL_OPTION_VALUE
operator|.
name|equals
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"filterSubjectAreaId"
argument_list|)
argument_list|)
operator|&&
name|map
operator|.
name|get
argument_list|(
literal|"filterCourseNbr"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|StringBuffer
name|query
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"select distinct co.courseNbr "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"  from CourseOffering co "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|" where co.subjectArea.session.uniqueId = :acadSessionId "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|" 		 and co.subjectArea.uniqueId = :subjectAreaId "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|" 		 and co.courseNbr like :courseNbr "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|" 		 and co.isControl = true "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|" order by co.courseNbr "
argument_list|)
expr_stmt|;
name|CourseOfferingDAO
name|cdao
init|=
operator|new
name|CourseOfferingDAO
argument_list|()
decl_stmt|;
name|Session
name|hibSession
init|=
name|cdao
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Query
name|q
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|q
operator|.
name|setFetchSize
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|q
operator|.
name|setFlushMode
argument_list|(
name|FlushMode
operator|.
name|MANUAL
argument_list|)
expr_stmt|;
name|q
operator|.
name|setInteger
argument_list|(
literal|"acadSessionId"
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|acadSessionId
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|setInteger
argument_list|(
literal|"subjectAreaId"
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"filterSubjectAreaId"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|setString
argument_list|(
literal|"courseNbr"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"filterCourseNbr"
argument_list|)
operator|.
name|toString
argument_list|()
operator|+
literal|"%"
argument_list|)
expr_stmt|;
name|result
operator|=
name|q
operator|.
name|list
argument_list|()
expr_stmt|;
block|}
comment|// Read form variables -- Classes Screen
if|if
condition|(
name|map
operator|.
name|get
argument_list|(
literal|"subjectAreaIds"
argument_list|)
operator|!=
literal|null
operator|&&
name|map
operator|.
name|get
argument_list|(
literal|"subjectAreaIds"
argument_list|)
operator|instanceof
name|String
operator|&&
name|map
operator|.
name|get
argument_list|(
literal|"courseNbr"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|StringBuffer
name|query
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"select distinct co.courseNbr "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"  from CourseOffering co "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|" where co.subjectArea.session.uniqueId = :acadSessionId "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|" 		 and co.subjectArea.uniqueId = :subjectAreaId"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|" 		 and co.courseNbr like :courseNbr "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|" 		 and co.isControl = true "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|" order by co.courseNbr "
argument_list|)
expr_stmt|;
name|CourseOfferingDAO
name|cdao
init|=
operator|new
name|CourseOfferingDAO
argument_list|()
decl_stmt|;
name|Session
name|hibSession
init|=
name|cdao
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Query
name|q
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|q
operator|.
name|setFetchSize
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|q
operator|.
name|setFlushMode
argument_list|(
name|FlushMode
operator|.
name|MANUAL
argument_list|)
expr_stmt|;
name|q
operator|.
name|setInteger
argument_list|(
literal|"acadSessionId"
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|acadSessionId
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|setInteger
argument_list|(
literal|"subjectAreaId"
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"subjectAreaIds"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|setString
argument_list|(
literal|"courseNbr"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"courseNbr"
argument_list|)
operator|.
name|toString
argument_list|()
operator|+
literal|"%"
argument_list|)
expr_stmt|;
name|result
operator|=
name|q
operator|.
name|list
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|==
literal|null
condition|)
name|result
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

