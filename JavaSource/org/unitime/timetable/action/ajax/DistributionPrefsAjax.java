begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
operator|.
name|ajax
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Preference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|ClassComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|SchedulingSubpartComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|Class_DAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DistributionTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SchedulingSubpartDAO
import|;
end_import

begin_comment
comment|/**  *   * @author Tomas Muller, Stephanie Schluttenhofer  *  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"/distributionPrefsAjax"
argument_list|)
specifier|public
class|class
name|DistributionPrefsAjax
extends|extends
name|Action
block|{
specifier|public
name|ActionForward
name|execute
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
name|response
operator|.
name|addHeader
argument_list|(
literal|"Content-Type"
argument_list|,
literal|"text/xml; charset=UTF-8"
argument_list|)
expr_stmt|;
name|request
operator|.
name|setCharacterEncoding
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
comment|//System.out.println("type:"+request.getParameter("type"));
comment|//System.out.println("id:  "+request.getParameter("id"));
name|PrintWriter
name|out
init|=
name|response
operator|.
name|getWriter
argument_list|()
decl_stmt|;
comment|//System.out.println("response:");
name|out
operator|.
name|print
argument_list|(
literal|"<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<results>"
argument_list|)
expr_stmt|;
name|coumputeSuggestionList
argument_list|(
name|request
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"</results>"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|escapeXml
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
operator|(
name|s
operator|==
literal|null
condition|?
literal|""
else|:
name|s
operator|)
operator|.
name|replaceAll
argument_list|(
literal|"&"
argument_list|,
literal|"&amp;"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|">"
argument_list|,
literal|"&gt;"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"<"
argument_list|,
literal|"&lt;"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\""
argument_list|,
literal|"&quot;"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"'"
argument_list|,
literal|"&apos;"
argument_list|)
return|;
block|}
specifier|protected
name|void
name|print
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|IOException
block|{
comment|//System.out.println("<result id=\""+id+"\" value=\""+value+"\" />");
name|out
operator|.
name|print
argument_list|(
literal|"<result id=\""
operator|+
name|id
operator|+
literal|"\" value=\""
operator|+
name|escapeXml
argument_list|(
name|value
argument_list|)
operator|+
literal|"\" />"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|print
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|value
parameter_list|,
name|String
name|extra
parameter_list|)
throws|throws
name|IOException
block|{
comment|//System.out.println("<result id=\""+id+"\" value=\""+value+"\" extra=\""+extra+"\" />");
name|out
operator|.
name|print
argument_list|(
literal|"<result id=\""
operator|+
name|id
operator|+
literal|"\" value=\""
operator|+
name|escapeXml
argument_list|(
name|value
argument_list|)
operator|+
literal|"\" extra=\""
operator|+
name|escapeXml
argument_list|(
name|extra
argument_list|)
operator|+
literal|"\" />"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|coumputeSuggestionList
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|PrintWriter
name|out
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
literal|"subjectArea"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"type"
argument_list|)
argument_list|)
condition|)
block|{
name|coumputeCourseNumbers
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"id"
argument_list|)
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"courseNbr"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"type"
argument_list|)
argument_list|)
condition|)
block|{
name|coumputeSubparts
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"id"
argument_list|)
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"itype"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"type"
argument_list|)
argument_list|)
condition|)
block|{
name|coumputeClasses
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"id"
argument_list|)
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"grouping"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"type"
argument_list|)
argument_list|)
condition|)
block|{
name|coumputeGroupingDesc
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"id"
argument_list|)
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"distType"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"type"
argument_list|)
argument_list|)
condition|)
block|{
name|computePreferenceLevels
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"id"
argument_list|)
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"exam"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"type"
argument_list|)
argument_list|)
condition|)
block|{
name|coumputeExams
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"id"
argument_list|)
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"examType"
argument_list|)
argument_list|)
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|coumputeGroupingDesc
parameter_list|(
name|String
name|groupingId
parameter_list|,
name|PrintWriter
name|out
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DistributionPref
operator|.
name|sGroupings
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|DistributionPref
operator|.
name|sGroupings
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|groupingId
argument_list|)
condition|)
name|print
argument_list|(
name|out
argument_list|,
literal|"desc"
argument_list|,
name|DistributionPref
operator|.
name|getGroupingDescription
argument_list|(
name|i
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"<"
argument_list|,
literal|"@lt@"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|">"
argument_list|,
literal|"@gt@"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\""
argument_list|,
literal|"@quot@"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"&"
argument_list|,
literal|"@amp@"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|print
argument_list|(
name|out
argument_list|,
literal|"desc"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|computePreferenceLevels
parameter_list|(
name|String
name|distTypeId
parameter_list|,
name|PrintWriter
name|out
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|distTypeId
operator|==
literal|null
operator|||
name|distTypeId
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
name|distTypeId
operator|.
name|equals
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
condition|)
return|return;
name|DistributionType
name|dist
init|=
operator|new
name|DistributionTypeDAO
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|distTypeId
argument_list|)
argument_list|)
decl_stmt|;
name|print
argument_list|(
name|out
argument_list|,
literal|"desc"
argument_list|,
name|dist
operator|.
name|getDescr
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"<"
argument_list|,
literal|"@lt@"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|">"
argument_list|,
literal|"@gt@"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\""
argument_list|,
literal|"@quot@"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"&"
argument_list|,
literal|"@amp@"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|PreferenceLevel
name|pref
range|:
name|PreferenceLevel
operator|.
name|getPreferenceLevelList
argument_list|()
control|)
block|{
if|if
condition|(
name|dist
operator|.
name|isAllowed
argument_list|(
name|pref
argument_list|)
condition|)
name|print
argument_list|(
name|out
argument_list|,
name|pref
operator|.
name|getPrefId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|pref
operator|.
name|getPrefName
argument_list|()
argument_list|,
name|pref
operator|.
name|prefcolor
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|coumputeCourseNumbers
parameter_list|(
name|String
name|subjectAreaId
parameter_list|,
name|PrintWriter
name|out
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|subjectAreaId
operator|==
literal|null
operator|||
name|subjectAreaId
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
name|subjectAreaId
operator|.
name|equals
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
condition|)
return|return;
name|List
name|courseNumbers
init|=
operator|new
name|CourseOfferingDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select co.uniqueId, co.courseNbr, co.title from CourseOffering co "
operator|+
literal|"where co.subjectArea.uniqueId = :subjectAreaId "
operator|+
literal|"and co.instructionalOffering.notOffered = false and co.isControl = true "
operator|+
literal|"order by co.courseNbr "
argument_list|)
operator|.
name|setFetchSize
argument_list|(
literal|200
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"subjectAreaId"
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|subjectAreaId
argument_list|)
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|courseNumbers
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|print
argument_list|(
name|out
argument_list|,
name|o
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
argument_list|,
operator|(
name|o
index|[
literal|1
index|]
operator|.
name|toString
argument_list|()
operator|+
literal|" - "
operator|+
operator|(
name|o
index|[
literal|2
index|]
operator|==
literal|null
condition|?
literal|""
else|:
name|o
index|[
literal|2
index|]
operator|)
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|coumputeSubparts
parameter_list|(
name|String
name|courseOfferingId
parameter_list|,
name|PrintWriter
name|out
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|courseOfferingId
operator|==
literal|null
operator|||
name|courseOfferingId
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
name|courseOfferingId
operator|.
name|equals
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
condition|)
return|return;
name|TreeSet
name|subparts
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|SchedulingSubpartComparator
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|subparts
operator|.
name|addAll
argument_list|(
operator|new
name|SchedulingSubpartDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct s from "
operator|+
literal|"SchedulingSubpart s inner join s.instrOfferingConfig.instructionalOffering.courseOfferings co "
operator|+
literal|"where co.uniqueId = :courseOfferingId"
argument_list|)
operator|.
name|setFetchSize
argument_list|(
literal|200
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"courseOfferingId"
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|courseOfferingId
argument_list|)
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|subparts
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|s
init|=
operator|(
name|SchedulingSubpart
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|s
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|s
operator|.
name|getItype
argument_list|()
operator|.
name|getAbbv
argument_list|()
decl_stmt|;
name|String
name|sufix
init|=
name|s
operator|.
name|getSchedulingSubpartSuffix
argument_list|()
decl_stmt|;
while|while
condition|(
name|s
operator|.
name|getParentSubpart
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|name
operator|=
literal|"_"
operator|+
name|name
expr_stmt|;
name|s
operator|=
name|s
operator|.
name|getParentSubpart
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|s
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
name|name
operator|+=
literal|" ["
operator|+
name|s
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
expr_stmt|;
name|print
argument_list|(
name|out
argument_list|,
name|id
argument_list|,
name|name
operator|+
operator|(
name|sufix
operator|==
literal|null
operator|||
name|sufix
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|""
else|:
literal|" ("
operator|+
name|sufix
operator|+
literal|")"
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|coumputeClasses
parameter_list|(
name|String
name|schedulingSubpartId
parameter_list|,
name|PrintWriter
name|out
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|schedulingSubpartId
operator|==
literal|null
operator|||
name|schedulingSubpartId
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
name|schedulingSubpartId
operator|.
name|equals
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
condition|)
return|return;
name|TreeSet
name|classes
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|ClassComparator
argument_list|(
name|ClassComparator
operator|.
name|COMPARE_BY_HIERARCHY
argument_list|)
argument_list|)
decl_stmt|;
name|classes
operator|.
name|addAll
argument_list|(
operator|new
name|Class_DAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct c from Class_ c "
operator|+
literal|"where c.schedulingSubpart.uniqueId=:schedulingSubpartId"
argument_list|)
operator|.
name|setFetchSize
argument_list|(
literal|200
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"schedulingSubpartId"
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|schedulingSubpartId
argument_list|)
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|print
argument_list|(
name|out
argument_list|,
literal|"-1"
argument_list|,
literal|"All"
argument_list|)
expr_stmt|;
name|boolean
name|suffix
init|=
name|ApplicationProperty
operator|.
name|DistributionsShowClassSufix
operator|.
name|isTrue
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|classes
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|suffix
condition|)
block|{
name|String
name|extId
init|=
name|c
operator|.
name|getClassSuffix
argument_list|(
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
argument_list|)
decl_stmt|;
name|print
argument_list|(
name|out
argument_list|,
name|c
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|c
operator|.
name|getSectionNumberString
argument_list|()
operator|+
operator|(
name|extId
operator|==
literal|null
operator|||
name|extId
operator|.
name|isEmpty
argument_list|()
operator|||
name|extId
operator|.
name|equalsIgnoreCase
argument_list|(
name|c
operator|.
name|getSectionNumberString
argument_list|()
argument_list|)
condition|?
literal|""
else|:
literal|" - "
operator|+
name|extId
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|print
argument_list|(
name|out
argument_list|,
name|c
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|c
operator|.
name|getSectionNumberString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|coumputeExams
parameter_list|(
name|String
name|courseOfferingId
parameter_list|,
name|Long
name|examType
parameter_list|,
name|PrintWriter
name|out
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|courseOfferingId
operator|==
literal|null
operator|||
name|courseOfferingId
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
name|courseOfferingId
operator|.
name|equals
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
condition|)
return|return;
name|TreeSet
name|exams
init|=
operator|new
name|TreeSet
argument_list|(
name|Exam
operator|.
name|findExamsOfCourseOffering
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|courseOfferingId
argument_list|)
argument_list|,
name|examType
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|exams
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|||
name|exams
operator|.
name|isEmpty
argument_list|()
condition|)
name|print
argument_list|(
name|out
argument_list|,
literal|"-1"
argument_list|,
literal|"-"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exams
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|print
argument_list|(
name|out
argument_list|,
name|exam
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|exam
operator|.
name|getLabel
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"&"
argument_list|,
literal|"@amp@"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

