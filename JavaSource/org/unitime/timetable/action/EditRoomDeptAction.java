begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|util
operator|.
name|LabelValueBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|util
operator|.
name|MessageResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|CommonValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|UserProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|EditRoomDeptForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|NonUniversityLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Room
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomDept
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|LocationDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|RequiredTimeTable
import|;
end_import

begin_comment
comment|/**   * MyEclipse Struts  * Creation date: 05-12-2006  *   * XDoclet definition:  * @struts.action path="/editRoomDept" name="editRoomDeptForm" input="/admin/editRoomDept.jsp" scope="request"  * @struts.action-forward name="showRoomDetail" path="/roomDetail.do"  *  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"/editRoomDept"
argument_list|)
specifier|public
class|class
name|EditRoomDeptAction
extends|extends
name|Action
block|{
annotation|@
name|Autowired
name|SessionContext
name|sessionContext
decl_stmt|;
comment|// --------------------------------------------------------- Instance Variables
comment|// --------------------------------------------------------- Methods
comment|/**  	 * Method execute 	 * @param mapping 	 * @param form 	 * @param request 	 * @param response 	 * @return ActionForward 	 */
specifier|public
name|ActionForward
name|execute
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
name|EditRoomDeptForm
name|editRoomDeptForm
init|=
operator|(
name|EditRoomDeptForm
operator|)
name|form
decl_stmt|;
name|MessageResources
name|rsc
init|=
name|getResources
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|String
name|doit
init|=
name|editRoomDeptForm
operator|.
name|getDoit
argument_list|()
decl_stmt|;
if|if
condition|(
name|doit
operator|!=
literal|null
condition|)
block|{
comment|//update location
if|if
condition|(
name|doit
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.update"
argument_list|)
argument_list|)
condition|)
block|{
name|ActionMessages
name|errors
init|=
operator|new
name|ActionMessages
argument_list|()
decl_stmt|;
name|errors
operator|=
name|editRoomDeptForm
operator|.
name|validate
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
expr_stmt|;
if|if
condition|(
name|errors
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|doUpdate
argument_list|(
name|editRoomDeptForm
argument_list|,
name|request
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showRoomDetail"
argument_list|)
return|;
block|}
else|else
block|{
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
block|}
comment|//return to room dtail page
if|if
condition|(
name|doit
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.returnToRoomDetail"
argument_list|)
argument_list|)
condition|)
block|{
name|response
operator|.
name|sendRedirect
argument_list|(
literal|"roomDetail.do?id="
operator|+
name|editRoomDeptForm
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
comment|//the following call cannot be used since doit is has the same value as for return to room list (Back)
comment|//return mapping.findForward("showRoomDetail");
block|}
comment|//add room departments
if|if
condition|(
name|doit
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.addRoomDept"
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|editRoomDeptForm
operator|.
name|getDept
argument_list|()
operator|==
literal|null
operator|||
name|editRoomDeptForm
operator|.
name|getDept
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|ActionMessages
name|errors
init|=
operator|new
name|ActionMessages
argument_list|()
decl_stmt|;
name|errors
operator|.
name|add
argument_list|(
literal|"roomDept"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.required"
argument_list|,
literal|"Department"
argument_list|)
argument_list|)
expr_stmt|;
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|editRoomDeptForm
operator|.
name|getDepartmentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|editRoomDeptForm
operator|.
name|getDept
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|ActionMessages
name|errors
init|=
operator|new
name|ActionMessages
argument_list|()
decl_stmt|;
name|errors
operator|.
name|add
argument_list|(
literal|"roomDept"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.alreadyPresent"
argument_list|,
literal|"Department"
argument_list|)
argument_list|)
expr_stmt|;
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|editRoomDeptForm
operator|.
name|addDepartment
argument_list|(
name|editRoomDeptForm
operator|.
name|getDept
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|doit
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.removeRoomDept"
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|editRoomDeptForm
operator|.
name|getDept
argument_list|()
operator|==
literal|null
operator|||
name|editRoomDeptForm
operator|.
name|getDept
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|ActionMessages
name|errors
init|=
operator|new
name|ActionMessages
argument_list|()
decl_stmt|;
name|errors
operator|.
name|add
argument_list|(
literal|"roomDept"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.required"
argument_list|,
literal|"Department"
argument_list|)
argument_list|)
expr_stmt|;
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|editRoomDeptForm
operator|.
name|getDepartmentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|editRoomDeptForm
operator|.
name|getDept
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|ActionMessages
name|errors
init|=
operator|new
name|ActionMessages
argument_list|()
decl_stmt|;
name|errors
operator|.
name|add
argument_list|(
literal|"roomDept"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.notPresent"
argument_list|,
literal|"Department"
argument_list|)
argument_list|)
expr_stmt|;
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|editRoomDeptForm
operator|.
name|removeDepartment
argument_list|(
name|editRoomDeptForm
operator|.
name|getDept
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Long
name|id
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"id"
argument_list|)
argument_list|)
decl_stmt|;
name|LocationDAO
name|ldao
init|=
operator|new
name|LocationDAO
argument_list|()
decl_stmt|;
name|Location
name|location
init|=
name|ldao
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomEditAvailability
argument_list|)
expr_stmt|;
if|if
condition|(
name|doit
operator|!=
literal|null
operator|&&
name|doit
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.modifyRoomDepts"
argument_list|)
argument_list|)
condition|)
block|{
name|TreeSet
name|roomDepts
init|=
operator|new
name|TreeSet
argument_list|(
name|location
operator|.
name|getRoomDepts
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|roomDepts
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomDept
name|roomDept
init|=
operator|(
name|RoomDept
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|editRoomDeptForm
operator|.
name|addDepartment
argument_list|(
name|roomDept
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|//get roomSharingTable and user preference on location
name|boolean
name|timeVertical
init|=
name|CommonValues
operator|.
name|VerticalGrid
operator|.
name|eq
argument_list|(
name|UserProperty
operator|.
name|GridOrientation
operator|.
name|get
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|RequiredTimeTable
name|rtt
init|=
name|location
operator|.
name|getRoomSharingTable
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|,
name|editRoomDeptForm
operator|.
name|getDepartmentIds
argument_list|()
argument_list|)
decl_stmt|;
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|setDefaultSelection
argument_list|(
name|UserProperty
operator|.
name|GridSize
operator|.
name|get
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|doit
operator|!=
literal|null
operator|&&
operator|(
name|doit
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.removeRoomDept"
argument_list|)
argument_list|)
operator|||
name|doit
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.addRoomDept"
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|rtt
operator|.
name|update
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
name|editRoomDeptForm
operator|.
name|setSharingTable
argument_list|(
name|rtt
operator|.
name|print
argument_list|(
literal|true
argument_list|,
name|timeVertical
argument_list|)
argument_list|)
expr_stmt|;
comment|//get location information
if|if
condition|(
name|location
operator|instanceof
name|Room
condition|)
block|{
name|Room
name|r
init|=
operator|(
name|Room
operator|)
name|location
decl_stmt|;
name|editRoomDeptForm
operator|.
name|setName
argument_list|(
name|r
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|editRoomDeptForm
operator|.
name|setNonUniv
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|location
operator|instanceof
name|NonUniversityLocation
condition|)
block|{
name|NonUniversityLocation
name|nonUnivLocation
init|=
operator|(
name|NonUniversityLocation
operator|)
name|location
decl_stmt|;
name|editRoomDeptForm
operator|.
name|setName
argument_list|(
name|nonUnivLocation
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|editRoomDeptForm
operator|.
name|setNonUniv
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ActionMessages
name|errors
init|=
operator|new
name|ActionMessages
argument_list|()
decl_stmt|;
name|errors
operator|.
name|add
argument_list|(
literal|"editRoomDept"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.lookup.notFound"
argument_list|,
literal|"Room Department"
argument_list|)
argument_list|)
expr_stmt|;
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
name|setupDepartments
argument_list|(
name|editRoomDeptForm
argument_list|,
name|request
argument_list|,
name|location
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showEditRoomDept"
argument_list|)
return|;
block|}
comment|/** 	 *  	 * @param editRoomDeptForm 	 * @param request 	 * @throws Exception  	 */
specifier|private
name|void
name|doUpdate
parameter_list|(
name|EditRoomDeptForm
name|editRoomDeptForm
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|Exception
block|{
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|LocationDAO
name|ldao
init|=
operator|new
name|LocationDAO
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|ldao
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Location
name|location
init|=
name|ldao
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|editRoomDeptForm
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|RoomEditAvailability
argument_list|)
expr_stmt|;
name|Set
name|deptIds
init|=
operator|new
name|HashSet
argument_list|(
name|editRoomDeptForm
operator|.
name|getDepartmentIds
argument_list|()
argument_list|)
decl_stmt|;
name|DepartmentDAO
name|ddao
init|=
operator|new
name|DepartmentDAO
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|location
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomDept
name|rd
init|=
operator|(
name|RoomDept
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Department
name|d
init|=
name|rd
operator|.
name|getDepartment
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|deptIds
operator|.
name|remove
argument_list|(
name|d
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|d
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|remove
argument_list|(
name|rd
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|rd
argument_list|)
expr_stmt|;
name|location
operator|.
name|removedFromDepartment
argument_list|(
name|d
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|deptIds
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Long
name|deptId
init|=
operator|(
name|Long
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Department
name|d
init|=
name|ddao
operator|.
name|get
argument_list|(
name|deptId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|RoomDept
name|rd
init|=
operator|new
name|RoomDept
argument_list|()
decl_stmt|;
name|rd
operator|.
name|setRoom
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|rd
operator|.
name|setDepartment
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|rd
operator|.
name|setControl
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|location
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|add
argument_list|(
name|rd
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|rd
argument_list|)
expr_stmt|;
name|d
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|add
argument_list|(
name|rd
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
name|RequiredTimeTable
name|rtt
init|=
name|location
operator|.
name|getRoomSharingTable
argument_list|(
name|location
operator|.
name|getRoomDepts
argument_list|()
argument_list|)
decl_stmt|;
name|rtt
operator|.
name|update
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|location
operator|.
name|setRoomSharingTable
argument_list|(
name|rtt
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|sessionContext
argument_list|,
operator|(
name|Location
operator|)
name|location
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|ROOM_DEPT_EDIT
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|UPDATE
argument_list|,
literal|null
argument_list|,
name|location
operator|.
name|getControllingDepartment
argument_list|()
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ldao
operator|.
name|getSession
argument_list|()
operator|.
name|refresh
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|void
name|setupDepartments
parameter_list|(
name|EditRoomDeptForm
name|editRoomDeptForm
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|Location
name|location
parameter_list|)
throws|throws
name|Exception
block|{
name|Collection
name|availableDepts
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|Collection
name|currentDepts
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Department
argument_list|>
name|departments
init|=
name|Department
operator|.
name|getUserDepartments
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|hasControl
init|=
literal|false
decl_stmt|;
for|for
control|(
name|RoomDept
name|rd
range|:
name|location
operator|.
name|getRoomDepts
argument_list|()
control|)
block|{
name|currentDepts
operator|.
name|add
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|departments
operator|.
name|contains
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
operator|&&
name|rd
operator|.
name|isControl
argument_list|()
condition|)
name|hasControl
operator|=
literal|true
expr_stmt|;
block|}
name|Set
argument_list|<
name|Department
argument_list|>
name|set
init|=
name|Department
operator|.
name|findAllBeingUsed
argument_list|(
name|location
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Department
name|d
range|:
name|set
control|)
block|{
if|if
condition|(
name|hasControl
operator|||
name|departments
operator|.
name|contains
argument_list|(
name|d
argument_list|)
operator|||
operator|!
name|currentDepts
operator|.
name|contains
argument_list|(
name|d
argument_list|)
condition|)
name|availableDepts
operator|.
name|add
argument_list|(
operator|new
name|LabelValueBean
argument_list|(
name|d
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|" - "
operator|+
name|d
operator|.
name|getName
argument_list|()
argument_list|,
name|d
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|setAttribute
argument_list|(
name|Department
operator|.
name|DEPT_ATTR_NAME
argument_list|,
name|availableDepts
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

