begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|HibernateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|WebTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|UserProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|context
operator|.
name|UniTimeUserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_comment
comment|/**   * MyEclipse Struts  * Creation date: 02-18-2005  *   * XDoclet definition:  * @struts:action path="/sessionList" name="sessionListForm" input="/admin/sessionList.jsp" scope="request" validate="true"  *  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"/sessionList"
argument_list|)
specifier|public
class|class
name|SessionListAction
extends|extends
name|Action
block|{
annotation|@
name|Autowired
name|SessionContext
name|sessionContext
decl_stmt|;
comment|// --------------------------------------------------------- Instance Variables
comment|// --------------------------------------------------------- Methods
comment|/**  	 * Method execute 	 * @param mapping 	 * @param form 	 * @param request 	 * @param response 	 * @return ActionForward 	 * @throws HibernateException 	 */
specifier|public
name|ActionForward
name|execute
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Check access
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|AcademicSessions
argument_list|)
expr_stmt|;
name|WebTable
name|webTable
init|=
operator|new
name|WebTable
argument_list|(
literal|11
argument_list|,
literal|""
argument_list|,
literal|"sessionList.do?order=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Default"
block|,
literal|"Academic<br>Session"
block|,
literal|"Academic<br>Initiative"
block|,
literal|"Session<br>Begins"
block|,
literal|"Classes<br>End"
block|,
literal|"Session<br>Ends"
block|,
literal|"Exams<br>Begins"
block|,
literal|"Date<br>Pattern"
block|,
literal|"Status"
block|,
literal|"Class<br>Duration"
block|,
literal|"Events<br>Begins"
block|,
literal|"Events<br>Ends"
block|,
literal|"<br>Enrollment"
block|,
literal|"Deadline<br>Change"
block|,
literal|"<br>Drop"
block|,
literal|"Sectioning<br>Status"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"center"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"right"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|true
block|,
literal|false
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
decl_stmt|;
name|Formats
operator|.
name|Format
argument_list|<
name|Date
argument_list|>
name|df
init|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|SESSION_DATE
argument_list|)
decl_stmt|;
name|TreeSet
argument_list|<
name|Session
argument_list|>
name|sessions
init|=
operator|new
name|TreeSet
argument_list|<
name|Session
argument_list|>
argument_list|(
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|()
argument_list|)
decl_stmt|;
name|Session
name|defaultSession
init|=
name|UniTimeUserContext
operator|.
name|defaultSession
argument_list|(
name|sessions
argument_list|,
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
argument_list|,
name|UserProperty
operator|.
name|PrimaryCampus
operator|.
name|get
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Session
name|s
range|:
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|()
control|)
block|{
name|Calendar
name|ce
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|ce
operator|.
name|setTime
argument_list|(
name|s
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|ce
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|WEEK_OF_YEAR
argument_list|,
name|s
operator|.
name|getLastWeekToEnroll
argument_list|()
argument_list|)
expr_stmt|;
name|ce
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Calendar
name|cc
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cc
operator|.
name|setTime
argument_list|(
name|s
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|cc
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|WEEK_OF_YEAR
argument_list|,
name|s
operator|.
name|getLastWeekToChange
argument_list|()
argument_list|)
expr_stmt|;
name|cc
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Calendar
name|cd
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cd
operator|.
name|setTime
argument_list|(
name|s
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|cd
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|WEEK_OF_YEAR
argument_list|,
name|s
operator|.
name|getLastWeekToDrop
argument_list|()
argument_list|)
expr_stmt|;
name|cd
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|webTable
operator|.
name|addLine
argument_list|(
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|s
argument_list|,
name|Right
operator|.
name|AcademicSessionEdit
argument_list|)
condition|?
literal|"onClick=\"document.location='sessionEdit.do?doit=editSession&sessionId="
operator|+
name|s
operator|.
name|getSessionId
argument_list|()
operator|+
literal|"';\""
else|:
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|s
operator|.
name|equals
argument_list|(
name|defaultSession
argument_list|)
condition|?
literal|"<img src='images/accept.png'> "
else|:
literal|"&nbsp; "
block|,
name|s
operator|.
name|getAcademicTerm
argument_list|()
operator|+
literal|" "
operator|+
name|s
operator|.
name|getSessionStartYear
argument_list|()
block|,
name|s
operator|.
name|academicInitiativeDisplayString
argument_list|()
block|,
name|df
operator|.
name|format
argument_list|(
name|s
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|"&nbsp;"
argument_list|)
block|,
name|df
operator|.
name|format
argument_list|(
name|s
operator|.
name|getClassesEndDateTime
argument_list|()
argument_list|)
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|"&nbsp;"
argument_list|)
block|,
name|df
operator|.
name|format
argument_list|(
name|s
operator|.
name|getSessionEndDateTime
argument_list|()
argument_list|)
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|"&nbsp;"
argument_list|)
block|,
operator|(
name|s
operator|.
name|getExamBeginDate
argument_list|()
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|df
operator|.
name|format
argument_list|(
name|s
operator|.
name|getExamBeginDate
argument_list|()
argument_list|)
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|"&nbsp;"
argument_list|)
operator|)
block|,
name|s
operator|.
name|getDefaultDatePattern
argument_list|()
operator|!=
literal|null
condition|?
name|s
operator|.
name|getDefaultDatePattern
argument_list|()
operator|.
name|getName
argument_list|()
else|:
literal|"-"
block|,
name|s
operator|.
name|statusDisplayString
argument_list|()
block|,
name|s
operator|.
name|getDefaultClassDurationType
argument_list|()
operator|==
literal|null
condition|?
literal|"&nbsp;"
else|:
name|s
operator|.
name|getDefaultClassDurationType
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
block|,
operator|(
name|s
operator|.
name|getEventBeginDate
argument_list|()
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|df
operator|.
name|format
argument_list|(
name|s
operator|.
name|getEventBeginDate
argument_list|()
argument_list|)
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|"&nbsp;"
argument_list|)
operator|)
block|,
operator|(
name|s
operator|.
name|getEventEndDate
argument_list|()
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|df
operator|.
name|format
argument_list|(
name|s
operator|.
name|getEventEndDate
argument_list|()
argument_list|)
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|"&nbsp;"
argument_list|)
operator|)
block|,
name|df
operator|.
name|format
argument_list|(
name|ce
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|"&nbsp;"
argument_list|)
block|,
name|df
operator|.
name|format
argument_list|(
name|cc
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|"&nbsp;"
argument_list|)
block|,
name|df
operator|.
name|format
argument_list|(
name|cd
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|"&nbsp;"
argument_list|)
block|,
operator|(
name|s
operator|.
name|getDefaultSectioningStatus
argument_list|()
operator|==
literal|null
condition|?
literal|"&nbsp;"
else|:
name|s
operator|.
name|getDefaultSectioningStatus
argument_list|()
operator|.
name|getReference
argument_list|()
operator|)
block|, 						 }
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|s
operator|.
name|equals
argument_list|(
name|defaultSession
argument_list|)
condition|?
literal|"<img src='images/accept.png'>"
else|:
literal|""
block|,
name|s
operator|.
name|getLabel
argument_list|()
block|,
name|s
operator|.
name|academicInitiativeDisplayString
argument_list|()
block|,
name|s
operator|.
name|getSessionBeginDateTime
argument_list|()
block|,
name|s
operator|.
name|getClassesEndDateTime
argument_list|()
block|,
name|s
operator|.
name|getSessionEndDateTime
argument_list|()
block|,
name|s
operator|.
name|getExamBeginDate
argument_list|()
block|,
name|s
operator|.
name|getDefaultDatePattern
argument_list|()
operator|!=
literal|null
condition|?
name|s
operator|.
name|getDefaultDatePattern
argument_list|()
operator|.
name|getName
argument_list|()
else|:
literal|"-"
block|,
name|s
operator|.
name|statusDisplayString
argument_list|()
block|,
name|s
operator|.
name|getDefaultClassDurationType
argument_list|()
operator|==
literal|null
condition|?
literal|" "
else|:
name|s
operator|.
name|getDefaultClassDurationType
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
block|,
name|s
operator|.
name|getEventBeginDate
argument_list|()
block|,
name|s
operator|.
name|getEventEndDate
argument_list|()
block|,
name|ce
operator|.
name|getTime
argument_list|()
block|,
name|cc
operator|.
name|getTime
argument_list|()
block|,
name|cd
operator|.
name|getTime
argument_list|()
block|,
operator|(
name|s
operator|.
name|getDefaultSectioningStatus
argument_list|()
operator|==
literal|null
condition|?
literal|" "
else|:
name|s
operator|.
name|getDefaultSectioningStatus
argument_list|()
operator|.
name|getReference
argument_list|()
operator|)
block|}
argument_list|)
expr_stmt|;
block|}
name|webTable
operator|.
name|enableHR
argument_list|(
literal|"#9CB0CE"
argument_list|)
expr_stmt|;
name|int
name|orderCol
init|=
literal|4
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"order"
argument_list|)
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|orderCol
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"order"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|orderCol
operator|=
literal|4
expr_stmt|;
block|}
block|}
name|request
operator|.
name|setAttribute
argument_list|(
literal|"table"
argument_list|,
name|webTable
operator|.
name|printTable
argument_list|(
name|orderCol
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showSessionList"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

