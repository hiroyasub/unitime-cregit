begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts2
operator|.
name|convention
operator|.
name|annotation
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts2
operator|.
name|convention
operator|.
name|annotation
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts2
operator|.
name|tiles
operator|.
name|annotation
operator|.
name|TilesDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts2
operator|.
name|tiles
operator|.
name|annotation
operator|.
name|TilesDefinitions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts2
operator|.
name|tiles
operator|.
name|annotation
operator|.
name|TilesPutAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|WebTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|messages
operator|.
name|CourseMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|SessionAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|BlankForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|ExportUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|IdValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|BackTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|InstructorListBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|PdfWebTable
import|;
end_import

begin_comment
comment|/**   * @author Tomas Muller, Zuzana Mullerova  */
end_comment

begin_class
annotation|@
name|Action
argument_list|(
name|value
operator|=
literal|"instructorSearch"
argument_list|,
name|results
operator|=
block|{
annotation|@
name|Result
argument_list|(
name|name
operator|=
literal|"showSearch"
argument_list|,
name|type
operator|=
literal|"tiles"
argument_list|,
name|location
operator|=
literal|"instructorSearch.tiles"
argument_list|)
block|,
annotation|@
name|Result
argument_list|(
name|name
operator|=
literal|"showList"
argument_list|,
name|type
operator|=
literal|"tiles"
argument_list|,
name|location
operator|=
literal|"instructorSearch.tiles"
argument_list|)
block|,
annotation|@
name|Result
argument_list|(
name|name
operator|=
literal|"manageInstructorList"
argument_list|,
name|type
operator|=
literal|"redirect"
argument_list|,
name|location
operator|=
literal|"/instructorListUpdate.do"
argument_list|)
block|,
annotation|@
name|Result
argument_list|(
name|name
operator|=
literal|"addNewInstructor"
argument_list|,
name|type
operator|=
literal|"redirect"
argument_list|,
name|location
operator|=
literal|"/instructorAdd.action"
argument_list|)
block|}
argument_list|)
annotation|@
name|TilesDefinitions
argument_list|(
name|value
operator|=
block|{
annotation|@
name|TilesDefinition
argument_list|(
name|name
operator|=
literal|"instructorSearch.tiles"
argument_list|,
name|extend
operator|=
literal|"baseLayout"
argument_list|,
name|putAttributes
operator|=
block|{
annotation|@
name|TilesPutAttribute
argument_list|(
name|name
operator|=
literal|"title"
argument_list|,
name|value
operator|=
literal|"Instructors"
argument_list|)
block|,
annotation|@
name|TilesPutAttribute
argument_list|(
name|name
operator|=
literal|"body"
argument_list|,
name|value
operator|=
literal|"/user/instructorSearch.jsp"
argument_list|)
block|}
argument_list|)
block|,
block|}
argument_list|)
specifier|public
class|class
name|InstructorSearchAction
extends|extends
name|UniTimeAction
argument_list|<
name|BlankForm
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|7920936708671752660L
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|CourseMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|CourseMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|iDeptId
decl_stmt|;
specifier|public
name|String
name|getDeptId
parameter_list|()
block|{
return|return
name|iDeptId
return|;
block|}
specifier|public
name|void
name|setDeptId
parameter_list|(
name|String
name|deptId
parameter_list|)
block|{
name|iDeptId
operator|=
name|deptId
expr_stmt|;
block|}
specifier|public
name|String
name|execute
parameter_list|()
block|{
if|if
condition|(
name|MSG
operator|.
name|actionManageInstructorList
argument_list|()
operator|.
name|equals
argument_list|(
name|getOp
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|"manageInstructorList"
return|;
block|}
if|if
condition|(
name|MSG
operator|.
name|actionAddNewInstructor
argument_list|()
operator|.
name|equals
argument_list|(
name|getOp
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|"addNewInstructor"
return|;
block|}
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|Instructors
argument_list|)
expr_stmt|;
name|setupManagerDepartments
argument_list|()
expr_stmt|;
if|if
condition|(
name|getDeptId
argument_list|()
operator|==
literal|null
operator|||
name|getDeptId
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|setDeptId
argument_list|(
operator|(
name|String
operator|)
name|sessionContext
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|DepartmentId
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|MSG
operator|.
name|actionSearchInstructors
argument_list|()
operator|.
name|equals
argument_list|(
name|getOp
argument_list|()
argument_list|)
operator|&&
operator|(
name|getDeptId
argument_list|()
operator|==
literal|null
operator|||
name|getDeptId
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|addActionError
argument_list|(
name|MSG
operator|.
name|errorRequiredDepartment
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getDeptId
argument_list|()
operator|==
literal|null
operator|||
name|getDeptId
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|getDeptId
argument_list|()
argument_list|,
literal|"Department"
argument_list|,
name|Right
operator|.
name|Instructors
argument_list|)
condition|)
block|{
return|return
literal|"showSearch"
return|;
block|}
name|sessionContext
operator|.
name|setAttribute
argument_list|(
name|SessionAttribute
operator|.
name|DepartmentId
argument_list|,
name|getDeptId
argument_list|()
argument_list|)
expr_stmt|;
name|WebTable
operator|.
name|setOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"instructorList.ord"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"order"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|InstructorListBuilder
name|ilb
init|=
operator|new
name|InstructorListBuilder
argument_list|()
decl_stmt|;
name|String
name|backId
init|=
operator|(
literal|"PreferenceGroup"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"backType"
argument_list|)
argument_list|)
condition|?
name|request
operator|.
name|getParameter
argument_list|(
literal|"backId"
argument_list|)
else|:
literal|null
operator|)
decl_stmt|;
name|String
name|tblData
init|=
name|ilb
operator|.
name|htmlTableForInstructor
argument_list|(
name|sessionContext
argument_list|,
name|getDeptId
argument_list|()
argument_list|,
name|WebTable
operator|.
name|getOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"instructorList.ord"
argument_list|)
argument_list|,
name|backId
argument_list|)
decl_stmt|;
if|if
condition|(
name|tblData
operator|==
literal|null
operator|||
name|tblData
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|addActionError
argument_list|(
name|MSG
operator|.
name|errorNoInstructorsFoundInSearch
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|"showSearch"
return|;
block|}
else|else
block|{
name|request
operator|.
name|setAttribute
argument_list|(
literal|"instructorList"
argument_list|,
name|tblData
argument_list|)
expr_stmt|;
if|if
condition|(
name|MSG
operator|.
name|actionExportPdf
argument_list|()
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|PdfWebTable
name|table
init|=
name|ilb
operator|.
name|pdfTableForInstructor
argument_list|(
name|sessionContext
argument_list|,
name|getDeptId
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|ExportUtils
operator|.
name|exportPDF
argument_list|(
name|table
argument_list|,
name|WebTable
operator|.
name|getOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"instructorList.ord"
argument_list|)
argument_list|,
name|response
argument_list|,
literal|"instructors"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|addActionError
argument_list|(
name|MSG
operator|.
name|exportFailed
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|MSG
operator|.
name|actionExportCsv
argument_list|()
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|PdfWebTable
name|table
init|=
name|ilb
operator|.
name|pdfTableForInstructor
argument_list|(
name|sessionContext
argument_list|,
name|getDeptId
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|ExportUtils
operator|.
name|exportCSV
argument_list|(
name|table
argument_list|,
name|WebTable
operator|.
name|getOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"instructorList.ord"
argument_list|)
argument_list|,
name|response
argument_list|,
literal|"instructors"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|addActionError
argument_list|(
name|MSG
operator|.
name|exportFailed
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|getDeptId
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getDeptId
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Department
name|d
init|=
name|DepartmentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|getDeptId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|!=
literal|null
condition|)
block|{
name|BackTracker
operator|.
name|markForBack
argument_list|(
name|request
argument_list|,
literal|"instructorSearch.action?deptId="
operator|+
name|d
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|MSG
operator|.
name|backInstructors
argument_list|(
name|d
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|" - "
operator|+
name|d
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|sessionContext
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|DepartmentId
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|Department
name|d
init|=
operator|(
operator|new
name|DepartmentDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|sessionContext
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|DepartmentId
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|!=
literal|null
condition|)
block|{
name|BackTracker
operator|.
name|markForBack
argument_list|(
name|request
argument_list|,
literal|"instructorSearch.action?deptId="
operator|+
name|d
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|MSG
operator|.
name|backInstructors
argument_list|(
name|d
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|" - "
operator|+
name|d
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|BackTracker
operator|.
name|markForBack
argument_list|(
name|request
argument_list|,
literal|"instructorSearch.action"
argument_list|,
name|MSG
operator|.
name|backInstructors2
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
literal|"showList"
return|;
block|}
specifier|private
name|Set
argument_list|<
name|Department
argument_list|>
name|setupManagerDepartments
parameter_list|()
block|{
name|Set
argument_list|<
name|Department
argument_list|>
name|departments
init|=
name|Department
operator|.
name|getUserDepartments
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|departments
operator|.
name|isEmpty
argument_list|()
condition|)
name|addActionError
argument_list|(
name|MSG
operator|.
name|exceptionNoDepartmentToManage
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|IdValue
argument_list|>
name|labelValueDepts
init|=
operator|new
name|ArrayList
argument_list|<
name|IdValue
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Department
name|d
range|:
name|departments
control|)
name|labelValueDepts
operator|.
name|add
argument_list|(
operator|new
name|IdValue
argument_list|(
name|d
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|d
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|" - "
operator|+
name|d
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|labelValueDepts
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
name|setDeptId
argument_list|(
name|labelValueDepts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|Department
operator|.
name|DEPT_ATTR_NAME
argument_list|,
name|labelValueDepts
argument_list|)
expr_stmt|;
return|return
name|departments
return|;
block|}
block|}
end_class

end_unit

