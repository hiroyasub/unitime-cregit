begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|WebTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|SessionAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|RoomGroupListForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentStatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomDept
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|ExportUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|LookupTables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|PdfEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|PdfFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|PdfWebTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Paragraph
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Rectangle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|pdf
operator|.
name|PdfPTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|pdf
operator|.
name|PdfWriter
import|;
end_import

begin_comment
comment|/**   * MyEclipse Struts  * Creation date: 05-02-2006  *   * XDoclet definition:  * @struts.action path="/roomGroupList" name="roomGroupListForm" input="/admin/roomGroupList.jsp" parameter="doit" scope="request" validate="true"  * @struts.action-forward name="showRoomGroupList" path="roomGroupListTile"  * @struts.action-forward name="showAdd" path="/roomGroupEdit.do"  *  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"/roomGroupList"
argument_list|)
specifier|public
class|class
name|RoomGroupListAction
extends|extends
name|Action
block|{
annotation|@
name|Autowired
name|SessionContext
name|sessionContext
decl_stmt|;
comment|// --------------------------------------------------------- Instance Variables
comment|// --------------------------------------------------------- Methods
comment|/**  	 * Method execute 	 * @param mapping 	 * @param form 	 * @param request 	 * @param response 	 * @return ActionForward 	 */
specifier|public
name|ActionForward
name|execute
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
name|RoomGroupListForm
name|roomGroupListForm
init|=
operator|(
name|RoomGroupListForm
operator|)
name|form
decl_stmt|;
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|RoomGroups
argument_list|)
expr_stmt|;
name|ActionMessages
name|errors
init|=
operator|new
name|ActionMessages
argument_list|()
decl_stmt|;
comment|//get deptCode from request - for user with only one department
name|String
name|deptCode
init|=
operator|(
name|String
operator|)
name|request
operator|.
name|getAttribute
argument_list|(
literal|"deptCode"
argument_list|)
decl_stmt|;
if|if
condition|(
name|deptCode
operator|!=
literal|null
condition|)
block|{
name|roomGroupListForm
operator|.
name|setDeptCodeX
argument_list|(
name|deptCode
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sessionContext
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|DepartmentCodeRoom
argument_list|)
operator|!=
literal|null
operator|&&
name|roomGroupListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|==
literal|null
condition|)
block|{
name|deptCode
operator|=
operator|(
name|String
operator|)
name|sessionContext
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|DepartmentCodeRoom
argument_list|)
expr_stmt|;
if|if
condition|(
name|deptCode
operator|!=
literal|null
operator|&&
operator|(
literal|"All"
operator|.
name|equals
argument_list|(
name|deptCode
argument_list|)
operator|||
name|deptCode
operator|.
name|matches
argument_list|(
literal|"Exam[0-9]*"
argument_list|)
operator|||
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|deptCode
argument_list|,
literal|"Department"
argument_list|,
name|Right
operator|.
name|RoomFeatures
argument_list|)
operator|)
condition|)
name|roomGroupListForm
operator|.
name|setDeptCodeX
argument_list|(
operator|(
name|String
operator|)
name|sessionContext
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|DepartmentCodeRoom
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Set Session Variable
if|if
condition|(
name|roomGroupListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|roomGroupListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|sessionContext
operator|.
name|setAttribute
argument_list|(
name|SessionAttribute
operator|.
name|DepartmentCodeRoom
argument_list|,
name|roomGroupListForm
operator|.
name|getDeptCodeX
argument_list|()
argument_list|)
expr_stmt|;
comment|//set request attribute for department
name|LookupTables
operator|.
name|setupDepartments
argument_list|(
name|request
argument_list|,
name|sessionContext
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LookupTables
operator|.
name|setupExamTypes
argument_list|(
name|request
argument_list|,
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ExamView
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ExamTimetable
argument_list|)
expr_stmt|;
comment|// Validate input
name|errors
operator|=
name|roomGroupListForm
operator|.
name|validate
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
expr_stmt|;
comment|// Validation fails
if|if
condition|(
name|errors
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showRoomGroupSearch"
argument_list|)
return|;
block|}
name|buildGroupTable
argument_list|(
name|request
argument_list|,
name|roomGroupListForm
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"Export PDF"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"op"
argument_list|)
argument_list|)
condition|)
block|{
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|RoomGroupsExportPdf
argument_list|)
expr_stmt|;
name|OutputStream
name|out
init|=
name|ExportUtils
operator|.
name|getPdfOutputStream
argument_list|(
name|response
argument_list|,
literal|"roomGroups"
argument_list|)
decl_stmt|;
name|printPdfGroupTable
argument_list|(
name|out
argument_list|,
name|sessionContext
argument_list|,
name|roomGroupListForm
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showRoomGroupList"
argument_list|)
return|;
block|}
specifier|private
name|void
name|buildGroupTable
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|RoomGroupListForm
name|roomGroupListForm
parameter_list|)
throws|throws
name|Exception
block|{
name|WebTable
operator|.
name|setOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"roomGroupList.gord"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"gord"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|WebTable
operator|.
name|setOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"roomGroupList.mord"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"mord"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|WebTable
name|globalWebTable
init|=
operator|new
name|WebTable
argument_list|(
literal|5
argument_list|,
literal|"Global Room Groups"
argument_list|,
literal|"roomGroupList.do?gord=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Name"
block|,
literal|"Abbreviation"
block|,
literal|"Default"
block|,
literal|"Rooms"
block|,
literal|"Description"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"middle"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
decl_stmt|;
name|WebTable
name|departmentWebTable
init|=
operator|new
name|WebTable
argument_list|(
literal|5
argument_list|,
literal|"Department Room Groups"
argument_list|,
literal|"roomGroupList.do?mord=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Name"
block|,
literal|"Abbreviation"
block|,
literal|"Department"
block|,
literal|"Rooms"
block|,
literal|"Description"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Department
argument_list|>
name|depts
init|=
name|Department
operator|.
name|getUserDepartments
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
name|Long
name|examType
init|=
literal|null
decl_stmt|;
name|Department
name|department
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|"Exam"
operator|.
name|equals
argument_list|(
name|roomGroupListForm
operator|.
name|getDeptCodeX
argument_list|()
argument_list|)
condition|)
block|{
name|TreeSet
argument_list|<
name|ExamType
argument_list|>
name|types
init|=
name|ExamType
operator|.
name|findAllUsed
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|types
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|examType
operator|=
name|types
operator|.
name|first
argument_list|()
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|roomGroupListForm
operator|.
name|setDeptCodeX
argument_list|(
literal|"Exam"
operator|+
name|examType
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|roomGroupListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|!=
literal|null
operator|&&
name|roomGroupListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|matches
argument_list|(
literal|"Exam[0-9]*"
argument_list|)
condition|)
name|examType
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|roomGroupListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|substring
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
name|roomGroupListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|roomGroupListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
literal|"All"
operator|.
name|equals
argument_list|(
name|roomGroupListForm
operator|.
name|getDeptCodeX
argument_list|()
argument_list|)
condition|)
name|department
operator|=
name|Department
operator|.
name|findByDeptCode
argument_list|(
name|roomGroupListForm
operator|.
name|getDeptCodeX
argument_list|()
argument_list|,
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|deptCheck
init|=
name|examType
operator|==
literal|null
operator|&&
operator|!
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|DepartmentIndependent
argument_list|)
decl_stmt|;
if|if
condition|(
name|department
operator|!=
literal|null
condition|)
block|{
name|deptCheck
operator|=
literal|true
expr_stmt|;
name|depts
operator|=
operator|new
name|TreeSet
argument_list|<
name|Department
argument_list|>
argument_list|()
expr_stmt|;
name|depts
operator|.
name|add
argument_list|(
name|department
argument_list|)
expr_stmt|;
block|}
name|boolean
name|haveGlobalRoomGroup
init|=
literal|false
decl_stmt|;
for|for
control|(
name|RoomGroup
name|rg
range|:
name|RoomGroup
operator|.
name|getAllGlobalRoomGroups
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
control|)
block|{
name|Collection
name|rs
init|=
operator|new
name|TreeSet
argument_list|(
name|rg
operator|.
name|getRooms
argument_list|()
argument_list|)
decl_stmt|;
name|StringBuffer
name|assignedRoom
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|boolean
name|haveRooms
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|rs
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|r
init|=
operator|(
name|Location
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|examType
operator|!=
literal|null
operator|&&
operator|!
name|r
operator|.
name|isExamEnabled
argument_list|(
name|examType
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|deptCheck
condition|)
block|{
name|boolean
name|skip
init|=
literal|true
decl_stmt|;
for|for
control|(
name|RoomDept
name|rd
range|:
name|r
operator|.
name|getRoomDepts
argument_list|()
control|)
if|if
condition|(
name|depts
operator|.
name|contains
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
block|{
name|skip
operator|=
literal|false
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|skip
condition|)
continue|continue;
block|}
if|if
condition|(
name|assignedRoom
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|assignedRoom
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|assignedRoom
operator|.
name|append
argument_list|(
name|r
operator|.
name|getLabel
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|"&nbsp;"
argument_list|)
argument_list|)
expr_stmt|;
name|haveRooms
operator|=
literal|true
expr_stmt|;
block|}
name|boolean
name|editable
init|=
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|rg
argument_list|,
name|Right
operator|.
name|GlobalRoomGroupEdit
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|haveRooms
operator|&&
operator|!
name|editable
condition|)
continue|continue;
name|globalWebTable
operator|.
name|addLine
argument_list|(
operator|(
name|editable
condition|?
literal|"onClick=\"document.location='roomGroupEdit.do?doit=editRoomGroup&id="
operator|+
name|rg
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"';\""
else|:
literal|null
operator|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"<A name=\"A"
operator|+
name|rg
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"\"></A>"
operator|+
operator|(
name|editable
condition|?
literal|""
else|:
literal|"<font color=gray>"
operator|)
operator|+
name|rg
operator|.
name|getName
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|"&nbsp;"
argument_list|)
operator|+
operator|(
name|editable
condition|?
literal|""
else|:
literal|"</font>"
operator|)
block|,
operator|(
name|editable
condition|?
literal|""
else|:
literal|"<font color=gray>"
operator|)
operator|+
name|rg
operator|.
name|getAbbv
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|"&nbsp;"
argument_list|)
operator|+
operator|(
name|editable
condition|?
literal|""
else|:
literal|"</font>"
operator|)
block|,
operator|(
name|rg
operator|.
name|isDefaultGroup
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"<IMG border='0' title='This group is default group.' alt='Default' align='absmiddle' src='images/accept.png'>"
else|:
literal|""
operator|)
block|,
operator|(
name|editable
condition|?
literal|""
else|:
literal|"<font color=gray>"
operator|)
operator|+
name|assignedRoom
operator|+
operator|(
name|editable
condition|?
literal|""
else|:
literal|"</font>"
operator|)
block|,
operator|(
name|editable
condition|?
literal|""
else|:
literal|"<font color=gray>"
operator|)
operator|+
operator|(
name|rg
operator|.
name|getDescription
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|rg
operator|.
name|getDescription
argument_list|()
operator|)
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|"&nbsp;"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\\n"
argument_list|,
literal|"<BR>"
argument_list|)
operator|+
operator|(
name|editable
condition|?
literal|""
else|:
literal|"</font>"
operator|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|rg
operator|.
name|getName
argument_list|()
block|,
name|rg
operator|.
name|getAbbv
argument_list|()
block|,
operator|new
name|Integer
argument_list|(
name|rg
operator|.
name|isDefaultGroup
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|0
else|:
literal|1
argument_list|)
block|,
literal|null
block|,
operator|(
name|rg
operator|.
name|getDescription
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|rg
operator|.
name|getDescription
argument_list|()
operator|)
block|}
argument_list|)
expr_stmt|;
name|haveGlobalRoomGroup
operator|=
literal|true
expr_stmt|;
block|}
name|Set
argument_list|<
name|RoomGroup
argument_list|>
name|departmentRoomGroups
init|=
operator|new
name|TreeSet
argument_list|<
name|RoomGroup
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Department
name|d
range|:
name|Department
operator|.
name|getUserDepartments
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
literal|"All"
operator|.
name|equals
argument_list|(
name|roomGroupListForm
operator|.
name|getDeptCodeX
argument_list|()
argument_list|)
operator|||
name|d
operator|.
name|getDeptCode
argument_list|()
operator|.
name|equals
argument_list|(
name|roomGroupListForm
operator|.
name|getDeptCodeX
argument_list|()
argument_list|)
condition|)
name|departmentRoomGroups
operator|.
name|addAll
argument_list|(
name|RoomGroup
operator|.
name|getAllDepartmentRoomGroups
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|department
operator|!=
literal|null
operator|&&
name|department
operator|.
name|isExternalManager
argument_list|()
condition|)
block|{
name|departmentRoomGroups
operator|.
name|addAll
argument_list|(
name|RoomGroup
operator|.
name|getAllDepartmentRoomGroups
argument_list|(
name|department
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|RoomGroup
name|rg
range|:
name|departmentRoomGroups
control|)
block|{
name|boolean
name|editable
init|=
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|rg
argument_list|,
name|Right
operator|.
name|DepartmenalRoomGroupEdit
argument_list|)
decl_stmt|;
name|String
name|ownerName
init|=
literal|"<span title='"
operator|+
name|rg
operator|.
name|getDepartment
argument_list|()
operator|.
name|getHtmlTitle
argument_list|()
operator|+
literal|"'>"
operator|+
name|rg
operator|.
name|getDepartment
argument_list|()
operator|.
name|getShortLabel
argument_list|()
operator|+
literal|"</span>"
decl_stmt|;
name|Collection
name|rs
init|=
operator|new
name|TreeSet
argument_list|(
name|rg
operator|.
name|getRooms
argument_list|()
argument_list|)
decl_stmt|;
name|StringBuffer
name|assignedRoom
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|rs
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|r
init|=
operator|(
name|Location
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|examType
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|r
operator|.
name|isExamEnabled
argument_list|(
name|examType
argument_list|)
condition|)
continue|continue;
block|}
else|else
block|{
name|boolean
name|skip
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|r
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomDept
name|rd
init|=
operator|(
name|RoomDept
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|rg
operator|.
name|getDepartment
argument_list|()
operator|.
name|equals
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
block|{
name|skip
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|skip
condition|)
continue|continue;
block|}
if|if
condition|(
name|assignedRoom
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|assignedRoom
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|assignedRoom
operator|.
name|append
argument_list|(
name|r
operator|.
name|getLabel
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|"&nbsp;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|departmentWebTable
operator|.
name|addLine
argument_list|(
operator|(
name|editable
condition|?
literal|"onClick=\"document.location='roomGroupEdit.do?doit=editRoomGroup&id="
operator|+
name|rg
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"';\""
else|:
literal|null
operator|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"<A name=\"A"
operator|+
name|rg
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"\"></A>"
operator|+
operator|(
name|editable
condition|?
literal|""
else|:
literal|"<font color=gray>"
operator|)
operator|+
name|rg
operator|.
name|getName
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|"&nbsp;"
argument_list|)
operator|+
operator|(
name|editable
condition|?
literal|""
else|:
literal|"</font>"
operator|)
block|,
operator|(
name|editable
condition|?
literal|""
else|:
literal|"<font color=gray>"
operator|)
operator|+
name|rg
operator|.
name|getAbbv
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|"&nbsp;"
argument_list|)
operator|+
operator|(
name|editable
condition|?
literal|""
else|:
literal|"</font>"
operator|)
block|,
operator|(
name|editable
condition|?
literal|""
else|:
literal|"<font color=gray>"
operator|)
operator|+
name|ownerName
operator|+
operator|(
name|editable
condition|?
literal|""
else|:
literal|"</font>"
operator|)
block|,
operator|(
name|editable
condition|?
literal|""
else|:
literal|"<font color=gray>"
operator|)
operator|+
name|assignedRoom
operator|+
operator|(
name|editable
condition|?
literal|""
else|:
literal|"</font>"
operator|)
block|,
operator|(
name|editable
condition|?
literal|""
else|:
literal|"<font color=gray>"
operator|)
operator|+
operator|(
name|rg
operator|.
name|getDescription
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|rg
operator|.
name|getDescription
argument_list|()
operator|)
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|"&nbsp;"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\\n"
argument_list|,
literal|"<BR>"
argument_list|)
operator|+
operator|(
name|editable
condition|?
literal|""
else|:
literal|"</font>"
operator|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|rg
operator|.
name|getName
argument_list|()
block|,
name|rg
operator|.
name|getAbbv
argument_list|()
block|,
name|ownerName
block|,
literal|null
block|,
operator|(
name|rg
operator|.
name|getDescription
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|rg
operator|.
name|getDescription
argument_list|()
operator|)
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|haveGlobalRoomGroup
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
literal|"roomGroupsGlobal"
argument_list|,
name|globalWebTable
operator|.
name|printTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"roomGroupList.gord"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|request
operator|.
name|removeAttribute
argument_list|(
literal|"roomGroupsGlobal"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|departmentRoomGroups
operator|.
name|isEmpty
argument_list|()
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
literal|"roomGroupsDepartment"
argument_list|,
name|departmentWebTable
operator|.
name|printTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"roomGroupList.mord"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|request
operator|.
name|removeAttribute
argument_list|(
literal|"roomGroupsDepartment"
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|printPdfGroupTable
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|RoomGroupListForm
name|roomGroupListForm
parameter_list|)
throws|throws
name|Exception
block|{
name|PdfWebTable
name|globalWebTable
init|=
operator|new
name|PdfWebTable
argument_list|(
literal|5
argument_list|,
literal|"Global Room Groups"
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Name"
block|,
literal|"Abbreviation"
block|,
literal|"Default "
block|,
literal|"Rooms"
block|,
literal|"Description"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"middle"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
decl_stmt|;
name|PdfWebTable
name|departmentWebTable
init|=
operator|new
name|PdfWebTable
argument_list|(
literal|5
argument_list|,
literal|"Department Room Groups"
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Name"
block|,
literal|"Abbreviation"
block|,
literal|"Department "
block|,
literal|"Rooms"
block|,
literal|"Description"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Department
argument_list|>
name|depts
init|=
name|Department
operator|.
name|getUserDepartments
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
name|Long
name|examType
init|=
literal|null
decl_stmt|;
name|Department
name|department
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|roomGroupListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|!=
literal|null
operator|&&
name|roomGroupListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|matches
argument_list|(
literal|"Exam[0-9]*"
argument_list|)
condition|)
name|examType
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|roomGroupListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|substring
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
name|roomGroupListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|roomGroupListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
literal|"All"
operator|.
name|equals
argument_list|(
name|roomGroupListForm
operator|.
name|getDeptCodeX
argument_list|()
argument_list|)
condition|)
name|department
operator|=
name|Department
operator|.
name|findByDeptCode
argument_list|(
name|roomGroupListForm
operator|.
name|getDeptCodeX
argument_list|()
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|deptCheck
init|=
name|examType
operator|==
literal|null
operator|&&
operator|!
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|DepartmentIndependent
argument_list|)
decl_stmt|;
if|if
condition|(
name|department
operator|!=
literal|null
condition|)
block|{
name|deptCheck
operator|=
literal|true
expr_stmt|;
name|depts
operator|=
operator|new
name|TreeSet
argument_list|<
name|Department
argument_list|>
argument_list|()
expr_stmt|;
name|depts
operator|.
name|add
argument_list|(
name|department
argument_list|)
expr_stmt|;
block|}
name|boolean
name|splitRows
init|=
literal|false
decl_stmt|;
name|boolean
name|haveGlobalRoomGroup
init|=
literal|false
decl_stmt|;
for|for
control|(
name|RoomGroup
name|rg
range|:
name|RoomGroup
operator|.
name|getAllGlobalRoomGroups
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
control|)
block|{
name|Collection
name|rs
init|=
operator|new
name|TreeSet
argument_list|(
name|rg
operator|.
name|getRooms
argument_list|()
argument_list|)
decl_stmt|;
name|StringBuffer
name|assignedRoom
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|int
name|nrRows
init|=
literal|0
decl_stmt|;
name|boolean
name|haveRooms
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|rs
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|r
init|=
operator|(
name|Location
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|examType
operator|!=
literal|null
operator|&&
operator|!
name|r
operator|.
name|isExamEnabled
argument_list|(
name|examType
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|deptCheck
condition|)
block|{
name|boolean
name|skip
init|=
literal|true
decl_stmt|;
for|for
control|(
name|RoomDept
name|rd
range|:
name|r
operator|.
name|getRoomDepts
argument_list|()
control|)
if|if
condition|(
name|depts
operator|.
name|contains
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
block|{
name|skip
operator|=
literal|false
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|skip
condition|)
continue|continue;
block|}
if|if
condition|(
name|assignedRoom
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|assignedRoom
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
if|if
condition|(
name|PdfWebTable
operator|.
name|getWidthOfLastLine
argument_list|(
name|assignedRoom
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
operator|>
literal|750
condition|)
block|{
name|assignedRoom
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|nrRows
operator|++
expr_stmt|;
block|}
name|assignedRoom
operator|.
name|append
argument_list|(
name|r
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|haveRooms
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|nrRows
operator|>
literal|40
condition|)
name|splitRows
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|haveRooms
operator|&&
operator|!
name|context
operator|.
name|hasPermission
argument_list|(
name|rg
argument_list|,
name|Right
operator|.
name|GlobalRoomGroupEdit
argument_list|)
condition|)
continue|continue;
name|globalWebTable
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|rg
operator|.
name|getName
argument_list|()
block|,
name|rg
operator|.
name|getAbbv
argument_list|()
block|,
operator|(
name|rg
operator|.
name|isDefaultGroup
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"Yes"
else|:
literal|"No"
operator|)
block|,
name|assignedRoom
operator|.
name|toString
argument_list|()
block|,
operator|(
name|rg
operator|.
name|getDescription
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|rg
operator|.
name|getDescription
argument_list|()
operator|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|rg
operator|.
name|getName
argument_list|()
block|,
name|rg
operator|.
name|getAbbv
argument_list|()
block|,
operator|new
name|Integer
argument_list|(
name|rg
operator|.
name|isDefaultGroup
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|0
else|:
literal|1
argument_list|)
block|,
literal|null
block|,
operator|(
name|rg
operator|.
name|getDescription
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|rg
operator|.
name|getDescription
argument_list|()
operator|)
block|}
argument_list|)
expr_stmt|;
name|haveGlobalRoomGroup
operator|=
literal|true
expr_stmt|;
block|}
name|Set
argument_list|<
name|RoomGroup
argument_list|>
name|departmentRoomGroups
init|=
operator|new
name|TreeSet
argument_list|<
name|RoomGroup
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Department
name|d
range|:
name|Department
operator|.
name|getUserDepartments
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
literal|"All"
operator|.
name|equals
argument_list|(
name|roomGroupListForm
operator|.
name|getDeptCodeX
argument_list|()
argument_list|)
operator|||
name|d
operator|.
name|getDeptCode
argument_list|()
operator|.
name|equals
argument_list|(
name|roomGroupListForm
operator|.
name|getDeptCodeX
argument_list|()
argument_list|)
condition|)
name|departmentRoomGroups
operator|.
name|addAll
argument_list|(
name|RoomGroup
operator|.
name|getAllDepartmentRoomGroups
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|department
operator|!=
literal|null
operator|&&
name|department
operator|.
name|isExternalManager
argument_list|()
condition|)
block|{
name|departmentRoomGroups
operator|.
name|addAll
argument_list|(
name|RoomGroup
operator|.
name|getAllDepartmentRoomGroups
argument_list|(
name|department
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|RoomGroup
name|rg
range|:
name|departmentRoomGroups
control|)
block|{
name|String
name|ownerName
init|=
name|rg
operator|.
name|getDepartment
argument_list|()
operator|.
name|getShortLabel
argument_list|()
decl_stmt|;
name|Collection
name|rs
init|=
operator|new
name|TreeSet
argument_list|(
name|rg
operator|.
name|getRooms
argument_list|()
argument_list|)
decl_stmt|;
comment|// get rooms
name|StringBuffer
name|assignedRoom
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|rs
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|r
init|=
operator|(
name|Location
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|examType
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|r
operator|.
name|isExamEnabled
argument_list|(
name|examType
argument_list|)
condition|)
continue|continue;
block|}
else|else
block|{
name|boolean
name|skip
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|r
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomDept
name|rd
init|=
operator|(
name|RoomDept
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|rg
operator|.
name|getDepartment
argument_list|()
operator|.
name|equals
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
block|{
name|skip
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|skip
condition|)
continue|continue;
block|}
if|if
condition|(
name|assignedRoom
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|assignedRoom
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
if|if
condition|(
name|PdfWebTable
operator|.
name|getWidthOfLastLine
argument_list|(
name|assignedRoom
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
operator|>
literal|750
condition|)
name|assignedRoom
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|assignedRoom
operator|.
name|append
argument_list|(
name|r
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|departmentWebTable
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|rg
operator|.
name|getName
argument_list|()
block|,
name|rg
operator|.
name|getAbbv
argument_list|()
block|,
name|ownerName
block|,
name|assignedRoom
operator|.
name|toString
argument_list|()
block|,
operator|(
name|rg
operator|.
name|getDescription
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|rg
operator|.
name|getDescription
argument_list|()
operator|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|rg
operator|.
name|getName
argument_list|()
block|,
name|rg
operator|.
name|getAbbv
argument_list|()
block|,
name|ownerName
block|,
literal|null
block|,
operator|(
name|rg
operator|.
name|getDescription
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|rg
operator|.
name|getDescription
argument_list|()
operator|)
block|}
argument_list|)
expr_stmt|;
block|}
name|Document
name|doc
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|haveGlobalRoomGroup
condition|)
block|{
name|PdfWebTable
name|table
init|=
name|globalWebTable
decl_stmt|;
name|PdfPTable
name|pdfTable
init|=
name|table
operator|.
name|printPdfTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|context
argument_list|,
literal|"roomGroupList.gord"
argument_list|)
argument_list|)
decl_stmt|;
name|pdfTable
operator|.
name|setSplitRows
argument_list|(
name|splitRows
argument_list|)
expr_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
name|doc
operator|=
operator|new
name|Document
argument_list|(
operator|new
name|Rectangle
argument_list|(
literal|60f
operator|+
name|table
operator|.
name|getWidth
argument_list|()
argument_list|,
literal|60f
operator|+
literal|0.75f
operator|*
name|table
operator|.
name|getWidth
argument_list|()
argument_list|)
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|PdfWriter
name|iWriter
init|=
name|PdfWriter
operator|.
name|getInstance
argument_list|(
name|doc
argument_list|,
name|out
argument_list|)
decl_stmt|;
name|iWriter
operator|.
name|setPageEvent
argument_list|(
operator|new
name|PdfEventHandler
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Paragraph
argument_list|(
name|table
operator|.
name|getName
argument_list|()
argument_list|,
name|PdfFont
operator|.
name|getBigFont
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|pdfTable
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|departmentRoomGroups
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|PdfWebTable
name|table
init|=
name|departmentWebTable
decl_stmt|;
name|PdfPTable
name|pdfTable
init|=
name|table
operator|.
name|printPdfTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|context
argument_list|,
literal|"roomGroupList.mord"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
name|doc
operator|=
operator|new
name|Document
argument_list|(
operator|new
name|Rectangle
argument_list|(
literal|60f
operator|+
name|table
operator|.
name|getWidth
argument_list|()
argument_list|,
literal|60f
operator|+
literal|0.75f
operator|*
name|table
operator|.
name|getWidth
argument_list|()
argument_list|)
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|PdfWriter
name|iWriter
init|=
name|PdfWriter
operator|.
name|getInstance
argument_list|(
name|doc
argument_list|,
name|out
argument_list|)
decl_stmt|;
name|iWriter
operator|.
name|setPageEvent
argument_list|(
operator|new
name|PdfEventHandler
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|.
name|setPageSize
argument_list|(
operator|new
name|Rectangle
argument_list|(
literal|60f
operator|+
name|table
operator|.
name|getWidth
argument_list|()
argument_list|,
literal|60f
operator|+
literal|0.75f
operator|*
name|table
operator|.
name|getWidth
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|newPage
argument_list|()
expr_stmt|;
block|}
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Paragraph
argument_list|(
name|table
operator|.
name|getName
argument_list|()
argument_list|,
name|PdfFont
operator|.
name|getBigFont
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|pdfTable
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
name|doc
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

