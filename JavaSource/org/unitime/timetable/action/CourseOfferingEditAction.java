begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|impl
operator|.
name|SessionImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|messages
operator|.
name|CourseMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|SessionAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|CourseOfferingEditForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalCourseOfferingEditAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalLinkLookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|FixedCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|LastLikeCourseDemand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|OfferingConsentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Preference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|VariableFixedCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|VariableRangeCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentalInstructorDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|OfferingConsentTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|InstrOfferingPermIdGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|LookupTables
import|;
end_import

begin_comment
comment|/**  * MyEclipse Struts  * Creation date: 07-25-2006  *  * XDoclet definition:  * @struts:action path="/courseOfferingEdit" name="courseOfferingEditForm" input="/user/courseOfferingEdit.jsp" scope="request"  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"/courseOfferingEdit"
argument_list|)
specifier|public
class|class
name|CourseOfferingEditAction
extends|extends
name|Action
block|{
specifier|protected
specifier|final
specifier|static
name|CourseMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|CourseMessages
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Autowired
name|SessionContext
name|sessionContext
decl_stmt|;
comment|// --------------------------------------------------------- Instance Variables
comment|// --------------------------------------------------------- Methods
comment|/**      * Method execute      * @param mapping      * @param form      * @param request      * @param response      * @return ActionForward      */
specifier|public
name|ActionForward
name|execute
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
name|ActionMessages
name|errors
init|=
operator|new
name|ActionMessages
argument_list|()
decl_stmt|;
name|CourseOfferingEditForm
name|frm
init|=
operator|(
name|CourseOfferingEditForm
operator|)
name|form
decl_stmt|;
comment|// Read Parameters
name|String
name|op
init|=
operator|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"op"
argument_list|)
operator|==
literal|null
operator|)
condition|?
operator|(
name|frm
operator|.
name|getOp
argument_list|()
operator|==
literal|null
operator|||
name|frm
operator|.
name|getOp
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
condition|?
operator|(
name|request
operator|.
name|getAttribute
argument_list|(
literal|"op"
argument_list|)
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|request
operator|.
name|getAttribute
argument_list|(
literal|"op"
argument_list|)
operator|.
name|toString
argument_list|()
else|:
name|frm
operator|.
name|getOp
argument_list|()
else|:
name|request
operator|.
name|getParameter
argument_list|(
literal|"op"
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|==
literal|null
condition|)
name|op
operator|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"hdnOp"
argument_list|)
expr_stmt|;
comment|// Check operation
if|if
condition|(
name|op
operator|==
literal|null
operator|||
name|op
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
name|MSG
operator|.
name|errorOperationNotInterpreted
argument_list|()
operator|+
name|op
argument_list|)
throw|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Op: "
operator|+
name|op
argument_list|)
expr_stmt|;
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionEditCourseOffering
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|courseOfferingId
init|=
operator|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"courseOfferingId"
argument_list|)
operator|==
literal|null
operator|)
condition|?
operator|(
name|request
operator|.
name|getAttribute
argument_list|(
literal|"courseOfferingId"
argument_list|)
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|request
operator|.
name|getAttribute
argument_list|(
literal|"courseOfferingId"
argument_list|)
operator|.
name|toString
argument_list|()
else|:
name|request
operator|.
name|getParameter
argument_list|(
literal|"courseOfferingId"
argument_list|)
decl_stmt|;
if|if
condition|(
name|courseOfferingId
operator|==
literal|null
operator|&&
name|frm
operator|.
name|getCourseOfferingId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|courseOfferingId
operator|=
name|frm
operator|.
name|getCourseOfferingId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|courseOfferingId
operator|==
literal|null
operator|||
name|courseOfferingId
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|MSG
operator|.
name|errorCourseDataNotCorrect
argument_list|()
operator|+
name|courseOfferingId
argument_list|)
throw|;
block|}
else|else
block|{
name|doLoad
argument_list|(
name|request
argument_list|,
name|frm
argument_list|,
name|courseOfferingId
argument_list|)
expr_stmt|;
block|}
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"displayCourseOffering"
argument_list|)
return|;
block|}
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionUpdateCourseOffering
argument_list|()
argument_list|)
condition|)
block|{
name|errors
operator|=
name|frm
operator|.
name|validate
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
expr_stmt|;
if|if
condition|(
name|errors
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|doUpdate
argument_list|(
name|request
argument_list|,
name|frm
argument_list|)
expr_stmt|;
name|String
name|cn
init|=
operator|(
name|String
operator|)
name|sessionContext
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OfferingsCourseNumber
argument_list|)
decl_stmt|;
if|if
condition|(
name|cn
operator|!=
literal|null
condition|)
name|sessionContext
operator|.
name|setAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OfferingsCourseNumber
argument_list|,
name|frm
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
comment|// Redirect to instr offering detail on success
name|request
operator|.
name|setAttribute
argument_list|(
literal|"io"
argument_list|,
name|frm
operator|.
name|getInstrOfferingId
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"op"
argument_list|,
literal|"view"
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"instructionalOfferingDetail"
argument_list|)
return|;
block|}
else|else
block|{
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
name|doReload
argument_list|(
name|request
argument_list|,
name|frm
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionAddCoordinator
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|PREF_ROWS_ADDED
condition|;
name|i
operator|++
control|)
name|frm
operator|.
name|getInstructors
argument_list|()
operator|.
name|add
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
expr_stmt|;
name|doReload
argument_list|(
name|request
argument_list|,
name|frm
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionRemoveCoordinator
argument_list|()
argument_list|)
operator|&&
name|request
operator|.
name|getParameter
argument_list|(
literal|"deleteType"
argument_list|)
operator|!=
literal|null
operator|&&
name|request
operator|.
name|getParameter
argument_list|(
literal|"deleteType"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"coordinator"
argument_list|)
condition|)
block|{
try|try
block|{
name|int
name|deleteId
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"deleteId"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|deleteId
operator|>=
literal|0
condition|)
name|frm
operator|.
name|getInstructors
argument_list|()
operator|.
name|remove
argument_list|(
name|deleteId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|doReload
argument_list|(
name|request
argument_list|,
name|frm
argument_list|)
expr_stmt|;
block|}
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"displayCourseOffering"
argument_list|)
return|;
block|}
comment|/**      * @param request      * @param frm      */
specifier|private
name|void
name|doUpdate
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|CourseOfferingEditForm
name|frm
parameter_list|)
throws|throws
name|Exception
block|{
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|frm
operator|.
name|getCourseOfferingId
argument_list|()
argument_list|,
literal|"CourseOffering"
argument_list|,
name|Right
operator|.
name|EditCourseOffering
argument_list|)
expr_stmt|;
name|String
name|title
init|=
name|frm
operator|.
name|getTitle
argument_list|()
decl_stmt|;
name|String
name|note
init|=
name|frm
operator|.
name|getScheduleBookNote
argument_list|()
decl_stmt|;
name|Long
name|crsId
init|=
name|frm
operator|.
name|getCourseOfferingId
argument_list|()
decl_stmt|;
name|String
name|crsNbr
init|=
name|frm
operator|.
name|getCourseNbr
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
literal|null
decl_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|OfferingConsentTypeDAO
name|odao
init|=
operator|new
name|OfferingConsentTypeDAO
argument_list|()
decl_stmt|;
name|CourseOfferingDAO
name|cdao
init|=
operator|new
name|CourseOfferingDAO
argument_list|()
decl_stmt|;
name|hibSession
operator|=
name|cdao
operator|.
name|getSession
argument_list|()
expr_stmt|;
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|CourseOffering
name|co
init|=
name|cdao
operator|.
name|get
argument_list|(
name|crsId
argument_list|)
decl_stmt|;
if|if
condition|(
name|co
operator|.
name|getCourseNbr
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|co
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|equals
argument_list|(
name|crsNbr
argument_list|)
operator|&&
name|co
operator|.
name|getPermId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|LastLikeCourseDemand
name|llcd
init|=
literal|null
decl_stmt|;
name|String
name|permId
init|=
name|InstrOfferingPermIdGenerator
operator|.
name|getGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|(
name|SessionImpl
operator|)
operator|new
name|CourseOfferingDAO
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|,
name|co
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|co
operator|.
name|getCourseOfferingDemands
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|llcd
operator|=
operator|(
name|LastLikeCourseDemand
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|llcd
operator|.
name|getCoursePermId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|llcd
operator|.
name|setCoursePermId
argument_list|(
name|permId
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|update
argument_list|(
name|llcd
argument_list|)
expr_stmt|;
block|}
block|}
name|co
operator|.
name|setPermId
argument_list|(
name|permId
argument_list|)
expr_stmt|;
block|}
name|co
operator|.
name|setCourseNbr
argument_list|(
name|crsNbr
argument_list|)
expr_stmt|;
name|co
operator|.
name|setTitle
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|co
operator|.
name|setScheduleBookNote
argument_list|(
name|note
argument_list|)
expr_stmt|;
if|if
condition|(
name|frm
operator|.
name|getDemandCourseOfferingId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|co
operator|.
name|setDemandOffering
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CourseOffering
name|dco
init|=
name|cdao
operator|.
name|get
argument_list|(
name|frm
operator|.
name|getDemandCourseOfferingId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|co
operator|.
name|setDemandOffering
argument_list|(
name|dco
operator|==
literal|null
condition|?
literal|null
else|:
name|dco
argument_list|)
expr_stmt|;
block|}
comment|// Update designator required and consent only if course is controlling
name|InstructionalOffering
name|io
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|co
operator|.
name|isIsControl
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|io
operator|=
name|co
operator|.
name|getInstructionalOffering
argument_list|()
expr_stmt|;
if|if
condition|(
name|frm
operator|.
name|getConsent
argument_list|()
operator|==
literal|null
operator|||
name|frm
operator|.
name|getConsent
argument_list|()
operator|.
name|intValue
argument_list|()
operator|<=
literal|0
condition|)
name|io
operator|.
name|setConsentType
argument_list|(
literal|null
argument_list|)
expr_stmt|;
else|else
block|{
name|OfferingConsentType
name|oct
init|=
name|odao
operator|.
name|get
argument_list|(
name|frm
operator|.
name|getConsent
argument_list|()
argument_list|)
decl_stmt|;
name|io
operator|.
name|setConsentType
argument_list|(
name|oct
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|frm
operator|.
name|getDesignatorRequired
argument_list|()
operator|==
literal|null
condition|)
name|io
operator|.
name|setDesignatorRequired
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
else|else
block|{
name|io
operator|.
name|setDesignatorRequired
argument_list|(
name|frm
operator|.
name|getDesignatorRequired
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|frm
operator|.
name|getCreditFormat
argument_list|()
operator|==
literal|null
operator|||
name|frm
operator|.
name|getCreditFormat
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
name|frm
operator|.
name|getCreditFormat
argument_list|()
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|BLANK_OPTION_VALUE
argument_list|)
condition|)
block|{
name|CourseCreditUnitConfig
name|origConfig
init|=
name|io
operator|.
name|getCredit
argument_list|()
decl_stmt|;
if|if
condition|(
name|origConfig
operator|!=
literal|null
condition|)
block|{
name|io
operator|.
name|setCredit
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|origConfig
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|io
operator|.
name|getCredit
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|CourseCreditUnitConfig
name|ccuc
init|=
name|io
operator|.
name|getCredit
argument_list|()
decl_stmt|;
if|if
condition|(
name|ccuc
operator|.
name|getCreditFormat
argument_list|()
operator|.
name|equals
argument_list|(
name|frm
operator|.
name|getCreditFormat
argument_list|()
argument_list|)
condition|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|ccuc
operator|.
name|getCreditType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|frm
operator|.
name|getCreditType
argument_list|()
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ccuc
operator|.
name|getCreditUnitType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|frm
operator|.
name|getCreditUnitType
argument_list|()
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|ccuc
operator|instanceof
name|FixedCreditUnitConfig
condition|)
block|{
name|FixedCreditUnitConfig
name|fcuc
init|=
operator|(
name|FixedCreditUnitConfig
operator|)
name|ccuc
decl_stmt|;
if|if
condition|(
operator|!
name|fcuc
operator|.
name|getFixedUnits
argument_list|()
operator|.
name|equals
argument_list|(
name|frm
operator|.
name|getUnits
argument_list|()
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|ccuc
operator|instanceof
name|VariableFixedCreditUnitConfig
condition|)
block|{
name|VariableFixedCreditUnitConfig
name|vfcuc
init|=
operator|(
name|VariableFixedCreditUnitConfig
operator|)
name|ccuc
decl_stmt|;
if|if
condition|(
operator|!
name|vfcuc
operator|.
name|getMinUnits
argument_list|()
operator|.
name|equals
argument_list|(
name|frm
operator|.
name|getUnits
argument_list|()
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|vfcuc
operator|.
name|getMaxUnits
argument_list|()
operator|.
name|equals
argument_list|(
name|frm
operator|.
name|getMaxUnits
argument_list|()
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|vfcuc
operator|instanceof
name|VariableRangeCreditUnitConfig
condition|)
block|{
name|VariableRangeCreditUnitConfig
name|vrcuc
init|=
operator|(
name|VariableRangeCreditUnitConfig
operator|)
name|vfcuc
decl_stmt|;
if|if
condition|(
operator|!
name|vrcuc
operator|.
name|isFractionalIncrementsAllowed
argument_list|()
operator|.
name|equals
argument_list|(
name|frm
operator|.
name|getFractionalIncrementsAllowed
argument_list|()
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|CourseCreditUnitConfig
name|origConfig
init|=
name|io
operator|.
name|getCredit
argument_list|()
decl_stmt|;
name|io
operator|.
name|setCredit
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|origConfig
argument_list|)
expr_stmt|;
name|io
operator|.
name|setCredit
argument_list|(
name|CourseCreditUnitConfig
operator|.
name|createCreditUnitConfigOfFormat
argument_list|(
name|frm
operator|.
name|getCreditFormat
argument_list|()
argument_list|,
name|frm
operator|.
name|getCreditType
argument_list|()
argument_list|,
name|frm
operator|.
name|getCreditUnitType
argument_list|()
argument_list|,
name|frm
operator|.
name|getUnits
argument_list|()
argument_list|,
name|frm
operator|.
name|getMaxUnits
argument_list|()
argument_list|,
name|frm
operator|.
name|getFractionalIncrementsAllowed
argument_list|()
argument_list|,
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|io
operator|.
name|getCredit
argument_list|()
operator|.
name|setOwner
argument_list|(
name|io
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|CourseCreditUnitConfig
name|origConfig
init|=
name|io
operator|.
name|getCredit
argument_list|()
decl_stmt|;
name|io
operator|.
name|setCredit
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|origConfig
argument_list|)
expr_stmt|;
name|io
operator|.
name|setCredit
argument_list|(
name|CourseCreditUnitConfig
operator|.
name|createCreditUnitConfigOfFormat
argument_list|(
name|frm
operator|.
name|getCreditFormat
argument_list|()
argument_list|,
name|frm
operator|.
name|getCreditType
argument_list|()
argument_list|,
name|frm
operator|.
name|getCreditUnitType
argument_list|()
argument_list|,
name|frm
operator|.
name|getUnits
argument_list|()
argument_list|,
name|frm
operator|.
name|getMaxUnits
argument_list|()
argument_list|,
name|frm
operator|.
name|getFractionalIncrementsAllowed
argument_list|()
argument_list|,
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|io
operator|.
name|getCredit
argument_list|()
operator|.
name|setOwner
argument_list|(
name|io
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|io
operator|.
name|setCredit
argument_list|(
name|CourseCreditUnitConfig
operator|.
name|createCreditUnitConfigOfFormat
argument_list|(
name|frm
operator|.
name|getCreditFormat
argument_list|()
argument_list|,
name|frm
operator|.
name|getCreditType
argument_list|()
argument_list|,
name|frm
operator|.
name|getCreditUnitType
argument_list|()
argument_list|,
name|frm
operator|.
name|getUnits
argument_list|()
argument_list|,
name|frm
operator|.
name|getMaxUnits
argument_list|()
argument_list|,
name|frm
operator|.
name|getFractionalIncrementsAllowed
argument_list|()
argument_list|,
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|io
operator|.
name|getCredit
argument_list|()
operator|.
name|setOwner
argument_list|(
name|io
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|io
operator|.
name|getCredit
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|io
operator|.
name|getCredit
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|io
operator|.
name|setByReservationOnly
argument_list|(
name|frm
operator|.
name|isByReservationOnly
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|io
operator|.
name|setLastWeekToEnroll
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|frm
operator|.
name|getWkEnroll
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|io
operator|.
name|setLastWeekToEnroll
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|io
operator|.
name|setLastWeekToChange
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|frm
operator|.
name|getWkChange
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|io
operator|.
name|setLastWeekToChange
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|io
operator|.
name|setLastWeekToDrop
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|frm
operator|.
name|getWkDrop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|io
operator|.
name|setLastWeekToDrop
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|io
operator|.
name|getCoordinators
argument_list|()
operator|==
literal|null
condition|)
name|io
operator|.
name|setCoordinators
argument_list|(
operator|new
name|HashSet
argument_list|<
name|DepartmentalInstructor
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|i
init|=
name|io
operator|.
name|getCoordinators
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentalInstructor
name|instructor
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|instructor
operator|.
name|getOfferings
argument_list|()
operator|.
name|remove
argument_list|(
name|io
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|frm
operator|.
name|getInstructors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|instructorId
init|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Constants
operator|.
name|BLANK_OPTION_VALUE
operator|.
name|equals
argument_list|(
name|instructorId
argument_list|)
operator|&&
operator|!
name|Preference
operator|.
name|BLANK_PREF_VALUE
operator|.
name|equals
argument_list|(
name|instructorId
argument_list|)
condition|)
block|{
name|DepartmentalInstructor
name|instructor
init|=
operator|new
name|DepartmentalInstructorDAO
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|instructorId
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|instructor
operator|!=
literal|null
condition|)
block|{
name|io
operator|.
name|getCoordinators
argument_list|()
operator|.
name|add
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|getOfferings
argument_list|()
operator|.
name|add
argument_list|(
name|io
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|hibSession
operator|.
name|update
argument_list|(
name|io
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|co
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|sessionContext
argument_list|,
name|co
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|COURSE_OFFERING_EDIT
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|UPDATE
argument_list|,
name|co
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|co
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|refresh
argument_list|(
name|co
argument_list|)
expr_stmt|;
if|if
condition|(
name|io
operator|!=
literal|null
condition|)
name|hibSession
operator|.
name|refresh
argument_list|(
name|io
argument_list|)
expr_stmt|;
name|String
name|className
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.external.course_offering.edit_action.class"
argument_list|)
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
operator|&&
name|className
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|io
operator|==
literal|null
condition|)
block|{
name|io
operator|=
name|co
operator|.
name|getInstructionalOffering
argument_list|()
expr_stmt|;
block|}
name|ExternalCourseOfferingEditAction
name|editAction
init|=
operator|(
name|ExternalCourseOfferingEditAction
operator|)
operator|(
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|newInstance
argument_list|()
operator|)
decl_stmt|;
name|editAction
operator|.
name|performExternalCourseOfferingEditAction
argument_list|(
name|io
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
block|}
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|e
operator|)
throw|;
block|}
block|}
comment|/**      * @param request      * @param frm      * @param courseOfferingId      */
specifier|private
name|void
name|doLoad
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|CourseOfferingEditForm
name|frm
parameter_list|,
name|String
name|crsOfferingId
parameter_list|)
throws|throws
name|Exception
block|{
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|crsOfferingId
argument_list|,
literal|"CourseOffering"
argument_list|,
name|Right
operator|.
name|EditCourseOffering
argument_list|)
expr_stmt|;
comment|// Load Course Offering
name|Long
name|courseOfferingId
init|=
operator|new
name|Long
argument_list|(
name|crsOfferingId
argument_list|)
decl_stmt|;
name|CourseOfferingDAO
name|cdao
init|=
operator|new
name|CourseOfferingDAO
argument_list|()
decl_stmt|;
name|CourseOffering
name|co
init|=
name|cdao
operator|.
name|get
argument_list|(
name|courseOfferingId
argument_list|)
decl_stmt|;
name|InstructionalOffering
name|io
init|=
name|co
operator|.
name|getInstructionalOffering
argument_list|()
decl_stmt|;
name|Long
name|subjectAreaId
init|=
name|co
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
decl_stmt|;
comment|//io.getControllingCourseOffering().getSubjectArea().getUniqueId();
name|frm
operator|.
name|setDemandCourseOfferingId
argument_list|(
name|co
operator|.
name|getDemandOffering
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|co
operator|.
name|getDemandOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setAllowDemandCourseOfferings
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//co.getLastLikeSemesterCourseOfferingDemands().isEmpty());
name|frm
operator|.
name|setCourseName
argument_list|(
name|co
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setCourseNbr
argument_list|(
name|co
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setCourseOfferingId
argument_list|(
name|courseOfferingId
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setInstrOfferingId
argument_list|(
name|io
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setScheduleBookNote
argument_list|(
name|co
operator|.
name|getScheduleBookNote
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setSubjectAreaId
argument_list|(
name|subjectAreaId
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setTitle
argument_list|(
name|co
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setIsControl
argument_list|(
name|co
operator|.
name|getIsControl
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setIoNotOffered
argument_list|(
name|io
operator|.
name|getNotOffered
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setByReservationOnly
argument_list|(
name|io
operator|.
name|isByReservationOnly
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setWkEnroll
argument_list|(
name|io
operator|.
name|getLastWeekToEnroll
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|io
operator|.
name|getLastWeekToEnroll
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setWkEnrollDefault
argument_list|(
name|io
operator|.
name|getSession
argument_list|()
operator|.
name|getLastWeekToEnroll
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setWkChange
argument_list|(
name|io
operator|.
name|getLastWeekToChange
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|io
operator|.
name|getLastWeekToChange
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setWkChangeDefault
argument_list|(
name|io
operator|.
name|getSession
argument_list|()
operator|.
name|getLastWeekToChange
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setWkDrop
argument_list|(
name|io
operator|.
name|getLastWeekToDrop
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|io
operator|.
name|getLastWeekToDrop
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setWkDropDefault
argument_list|(
name|io
operator|.
name|getSession
argument_list|()
operator|.
name|getLastWeekToDrop
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setWeekStartDayOfWeek
argument_list|(
name|Localization
operator|.
name|getDateFormat
argument_list|(
literal|"EEEE"
argument_list|)
operator|.
name|format
argument_list|(
name|io
operator|.
name|getSession
argument_list|()
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|DepartmentalInstructor
name|instructor
range|:
operator|new
name|TreeSet
argument_list|<
name|DepartmentalInstructor
argument_list|>
argument_list|(
name|io
operator|.
name|getCoordinators
argument_list|()
argument_list|)
control|)
name|frm
operator|.
name|getInstructors
argument_list|()
operator|.
name|add
argument_list|(
name|instructor
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|PREF_ROWS_ADDED
condition|;
name|i
operator|++
control|)
name|frm
operator|.
name|getInstructors
argument_list|()
operator|.
name|add
argument_list|(
name|Constants
operator|.
name|BLANK_OPTION_VALUE
argument_list|)
expr_stmt|;
comment|// Consent Type, Credit and Designator Required can be edited only on the controlling course offering
if|if
condition|(
name|co
operator|.
name|isIsControl
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
if|if
condition|(
name|io
operator|.
name|isDesignatorRequired
argument_list|()
operator|!=
literal|null
condition|)
name|frm
operator|.
name|setDesignatorRequired
argument_list|(
name|io
operator|.
name|isDesignatorRequired
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|frm
operator|.
name|setDesignatorRequired
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|io
operator|.
name|getConsentType
argument_list|()
operator|!=
literal|null
condition|)
name|frm
operator|.
name|setConsent
argument_list|(
name|io
operator|.
name|getConsentType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|frm
operator|.
name|setConsent
argument_list|(
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|LookupTables
operator|.
name|setupConsentType
argument_list|(
name|request
argument_list|)
expr_stmt|;
if|if
condition|(
name|frm
operator|.
name|getCreditFormat
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|io
operator|.
name|getCredit
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|CourseCreditUnitConfig
name|credit
init|=
name|io
operator|.
name|getCredit
argument_list|()
decl_stmt|;
name|frm
operator|.
name|setCreditText
argument_list|(
name|credit
operator|.
name|creditText
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setCreditFormat
argument_list|(
name|credit
operator|.
name|getCreditFormat
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setCreditType
argument_list|(
name|credit
operator|.
name|getCreditType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setCreditUnitType
argument_list|(
name|credit
operator|.
name|getCreditUnitType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|credit
operator|instanceof
name|FixedCreditUnitConfig
condition|)
block|{
name|frm
operator|.
name|setUnits
argument_list|(
operator|(
operator|(
name|FixedCreditUnitConfig
operator|)
name|credit
operator|)
operator|.
name|getFixedUnits
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|credit
operator|instanceof
name|VariableFixedCreditUnitConfig
condition|)
block|{
name|frm
operator|.
name|setUnits
argument_list|(
operator|(
operator|(
name|VariableFixedCreditUnitConfig
operator|)
name|credit
operator|)
operator|.
name|getMinUnits
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setMaxUnits
argument_list|(
operator|(
operator|(
name|VariableFixedCreditUnitConfig
operator|)
name|credit
operator|)
operator|.
name|getMaxUnits
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|credit
operator|instanceof
name|VariableRangeCreditUnitConfig
condition|)
block|{
name|frm
operator|.
name|setFractionalIncrementsAllowed
argument_list|(
operator|(
operator|(
name|VariableRangeCreditUnitConfig
operator|)
name|credit
operator|)
operator|.
name|isFractionalIncrementsAllowed
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|LookupTables
operator|.
name|setupCourseCreditFormats
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|// Course Credit Formats
name|LookupTables
operator|.
name|setupCourseCreditTypes
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|//Course Credit Types
name|LookupTables
operator|.
name|setupCourseCreditUnitTypes
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|//Course Credit Unit Types
comment|// Catalog Link
name|String
name|linkLookupClass
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.catalogLink.lookup.class"
argument_list|)
decl_stmt|;
if|if
condition|(
name|linkLookupClass
operator|!=
literal|null
operator|&&
name|linkLookupClass
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ExternalLinkLookup
name|lookup
init|=
operator|(
name|ExternalLinkLookup
operator|)
operator|(
name|Class
operator|.
name|forName
argument_list|(
name|linkLookupClass
argument_list|)
operator|.
name|newInstance
argument_list|()
operator|)
decl_stmt|;
name|Map
name|results
init|=
name|lookup
operator|.
name|getLink
argument_list|(
name|io
argument_list|)
decl_stmt|;
if|if
condition|(
name|results
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
name|lookup
operator|.
name|getErrorMessage
argument_list|()
argument_list|)
throw|;
name|frm
operator|.
name|setCatalogLinkLabel
argument_list|(
operator|(
name|String
operator|)
name|results
operator|.
name|get
argument_list|(
name|ExternalLinkLookup
operator|.
name|LINK_LABEL
argument_list|)
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setCatalogLinkLocation
argument_list|(
operator|(
name|String
operator|)
name|results
operator|.
name|get
argument_list|(
name|ExternalLinkLookup
operator|.
name|LINK_LOCATION
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Setup instructors
name|Set
argument_list|<
name|Long
argument_list|>
name|deptIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|DepartmentalInstructor
name|instructor
range|:
name|co
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCoordinators
argument_list|()
control|)
name|deptIds
operator|.
name|add
argument_list|(
name|instructor
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|CourseOffering
name|x
range|:
name|co
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseOfferings
argument_list|()
control|)
name|deptIds
operator|.
name|add
argument_list|(
name|x
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|Long
index|[]
name|deptsIdsArray
init|=
operator|new
name|Long
index|[
name|deptIds
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Long
name|departmentId
range|:
name|deptIds
control|)
name|deptsIdsArray
index|[
name|idx
operator|++
index|]
operator|=
name|departmentId
expr_stmt|;
name|LookupTables
operator|.
name|setupInstructors
argument_list|(
name|request
argument_list|,
name|sessionContext
argument_list|,
name|deptsIdsArray
argument_list|)
expr_stmt|;
block|}
else|else
name|frm
operator|.
name|setConsent
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|LookupTables
operator|.
name|setupCourseOfferings
argument_list|(
name|request
argument_list|,
name|sessionContext
argument_list|,
operator|new
name|LookupTables
operator|.
name|CourseFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|CourseOffering
name|course
parameter_list|)
block|{
return|return
name|course
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|isNotOffered
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param request      * @param frm      * @param courseOfferingId      */
specifier|private
name|void
name|doReload
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|CourseOfferingEditForm
name|frm
parameter_list|)
throws|throws
name|Exception
block|{
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|frm
operator|.
name|getCourseOfferingId
argument_list|()
argument_list|,
literal|"CourseOffering"
argument_list|,
name|Right
operator|.
name|EditCourseOffering
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setAllowDemandCourseOfferings
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Consent Type, Credit and Designator Required can be edited only on the controlling course offering
if|if
condition|(
name|frm
operator|.
name|getIsControl
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
if|if
condition|(
name|frm
operator|.
name|getDesignatorRequired
argument_list|()
operator|==
literal|null
condition|)
name|frm
operator|.
name|setDesignatorRequired
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|frm
operator|.
name|getConsent
argument_list|()
operator|==
literal|null
condition|)
name|frm
operator|.
name|setConsent
argument_list|(
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|LookupTables
operator|.
name|setupConsentType
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|LookupTables
operator|.
name|setupCourseCreditFormats
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|// Course Credit Formats
name|LookupTables
operator|.
name|setupCourseCreditTypes
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|//Course Credit Types
name|LookupTables
operator|.
name|setupCourseCreditUnitTypes
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|//Course Credit Unit Types
block|}
else|else
name|frm
operator|.
name|setConsent
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|CourseOffering
name|co
init|=
operator|new
name|CourseOfferingDAO
argument_list|()
operator|.
name|get
argument_list|(
name|frm
operator|.
name|getCourseOfferingId
argument_list|()
argument_list|)
decl_stmt|;
name|LookupTables
operator|.
name|setupCourseOfferings
argument_list|(
name|request
argument_list|,
name|sessionContext
argument_list|,
operator|new
name|LookupTables
operator|.
name|CourseFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|CourseOffering
name|course
parameter_list|)
block|{
return|return
name|course
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|isNotOffered
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|co
operator|.
name|isIsControl
argument_list|()
condition|)
block|{
comment|// Setup instructors
name|Set
argument_list|<
name|Long
argument_list|>
name|deptIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|DepartmentalInstructor
name|instructor
range|:
name|co
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCoordinators
argument_list|()
control|)
name|deptIds
operator|.
name|add
argument_list|(
name|instructor
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|CourseOffering
name|x
range|:
name|co
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseOfferings
argument_list|()
control|)
name|deptIds
operator|.
name|add
argument_list|(
name|x
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|Long
index|[]
name|deptsIdsArray
init|=
operator|new
name|Long
index|[
name|deptIds
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Long
name|departmentId
range|:
name|deptIds
control|)
name|deptsIdsArray
index|[
name|idx
operator|++
index|]
operator|=
name|departmentId
expr_stmt|;
name|LookupTables
operator|.
name|setupInstructors
argument_list|(
name|request
argument_list|,
name|sessionContext
argument_list|,
name|deptsIdsArray
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

