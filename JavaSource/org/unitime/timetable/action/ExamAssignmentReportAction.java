begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.0 (University Course Timetabling& Student Sectioning Application)  * Copyright (C) 2007, UniTime.org, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|PatternSyntaxException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|MultiComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|Web
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|WebTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|ExamAssignmentReportForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|WebSolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ExamSolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignmentInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamRoomInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignmentInfo
operator|.
name|BackToBackConflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamInfo
operator|.
name|ExamSectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|PdfWebTable
import|;
end_import

begin_comment
comment|/**   * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ExamAssignmentReportAction
extends|extends
name|Action
block|{
specifier|public
name|ActionForward
name|execute
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
name|ExamAssignmentReportForm
name|myForm
init|=
operator|(
name|ExamAssignmentReportForm
operator|)
name|form
decl_stmt|;
comment|// Check Access
if|if
condition|(
operator|!
name|Web
operator|.
name|isLoggedIn
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Access Denied."
argument_list|)
throw|;
block|}
name|String
name|op
init|=
operator|(
name|myForm
operator|.
name|getOp
argument_list|()
operator|!=
literal|null
condition|?
name|myForm
operator|.
name|getOp
argument_list|()
else|:
name|request
operator|.
name|getParameter
argument_list|(
literal|"op"
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
literal|"Export PDF"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
literal|"Apply"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|myForm
operator|.
name|save
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"Refresh"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|myForm
operator|.
name|reset
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
name|Long
name|sessionId
init|=
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getUniqueId
argument_list|()
decl_stmt|;
name|myForm
operator|.
name|load
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
name|ExamSolverProxy
name|solver
init|=
name|WebSolver
operator|.
name|getExamSolver
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|assignedExams
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|myForm
operator|.
name|getSubjectArea
argument_list|()
operator|!=
literal|null
operator|&&
name|myForm
operator|.
name|getSubjectArea
argument_list|()
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|solver
operator|!=
literal|null
operator|&&
name|solver
operator|.
name|getExamType
argument_list|()
operator|==
name|myForm
operator|.
name|getExamType
argument_list|()
condition|)
name|assignedExams
operator|=
name|solver
operator|.
name|getAssignedExams
argument_list|(
name|myForm
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|assignedExams
operator|=
name|Exam
operator|.
name|findAssignedExams
argument_list|(
name|sessionId
argument_list|,
name|myForm
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|myForm
operator|.
name|getExamType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|WebTable
operator|.
name|setOrder
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
literal|"examAssignmentReport["
operator|+
name|myForm
operator|.
name|getReport
argument_list|()
operator|+
literal|"].ord"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"ord"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|WebTable
name|table
init|=
name|getTable
argument_list|(
name|sessionId
argument_list|,
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|,
name|myForm
argument_list|,
name|assignedExams
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"Export PDF"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|&&
name|table
operator|!=
literal|null
condition|)
block|{
name|PdfWebTable
name|pdfTable
init|=
name|getTable
argument_list|(
name|sessionId
argument_list|,
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|,
name|myForm
argument_list|,
name|assignedExams
argument_list|)
decl_stmt|;
name|File
name|file
init|=
name|ApplicationProperties
operator|.
name|getTempFile
argument_list|(
literal|"xreport"
argument_list|,
literal|"pdf"
argument_list|)
decl_stmt|;
name|pdfTable
operator|.
name|exportPdf
argument_list|(
name|file
argument_list|,
name|WebTable
operator|.
name|getOrder
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
literal|"examAssignmentReport["
operator|+
name|myForm
operator|.
name|getReport
argument_list|()
operator|+
literal|"].ord"
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|REQUEST_OPEN_URL
argument_list|,
literal|"temp/"
operator|+
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"Export CSV"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|&&
name|table
operator|!=
literal|null
condition|)
block|{
name|WebTable
name|csvTable
init|=
name|getTable
argument_list|(
name|sessionId
argument_list|,
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|,
name|myForm
argument_list|,
name|assignedExams
argument_list|)
decl_stmt|;
name|File
name|file
init|=
name|ApplicationProperties
operator|.
name|getTempFile
argument_list|(
literal|"xreport"
argument_list|,
literal|"csv"
argument_list|)
decl_stmt|;
name|csvTable
operator|.
name|toCSVFile
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
literal|"examAssignmentReport["
operator|+
name|myForm
operator|.
name|getReport
argument_list|()
operator|+
literal|"].ord"
argument_list|)
argument_list|)
operator|.
name|save
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|REQUEST_OPEN_URL
argument_list|,
literal|"temp/"
operator|+
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
name|myForm
operator|.
name|setTable
argument_list|(
name|table
operator|.
name|printTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
literal|"examAssignmentReport["
operator|+
name|myForm
operator|.
name|getReport
argument_list|()
operator|+
literal|"].ord"
argument_list|)
argument_list|)
argument_list|,
name|table
operator|.
name|getNrColumns
argument_list|()
argument_list|,
name|assignedExams
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"backId"
argument_list|)
operator|!=
literal|null
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
literal|"hash"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"backId"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"show"
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|match
parameter_list|(
name|ExamAssignmentReportForm
name|form
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|form
operator|.
name|getFilter
argument_list|()
operator|==
literal|null
operator|||
name|form
operator|.
name|getFilter
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|true
return|;
name|String
name|n
init|=
name|name
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
name|StringTokenizer
name|stk1
init|=
operator|new
name|StringTokenizer
argument_list|(
name|form
operator|.
name|getFilter
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|,
literal|";"
argument_list|)
decl_stmt|;
while|while
condition|(
name|stk1
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|StringTokenizer
name|stk2
init|=
operator|new
name|StringTokenizer
argument_list|(
name|stk1
operator|.
name|nextToken
argument_list|()
argument_list|,
literal|" ,"
argument_list|)
decl_stmt|;
name|boolean
name|match
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|match
operator|&&
name|stk2
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|token
init|=
name|stk2
operator|.
name|nextToken
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
continue|continue;
if|if
condition|(
name|token
operator|.
name|indexOf
argument_list|(
literal|'*'
argument_list|)
operator|>=
literal|0
operator|||
name|token
operator|.
name|indexOf
argument_list|(
literal|'?'
argument_list|)
operator|>=
literal|0
condition|)
block|{
try|try
block|{
name|String
name|tokenRegExp
init|=
literal|"\\s+"
operator|+
name|token
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"\\."
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\?"
argument_list|,
literal|".+"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\*"
argument_list|,
literal|".*"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Pattern
operator|.
name|compile
argument_list|(
name|tokenRegExp
argument_list|)
operator|.
name|matcher
argument_list|(
name|n
argument_list|)
operator|.
name|find
argument_list|()
condition|)
name|match
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PatternSyntaxException
name|e
parameter_list|)
block|{
name|match
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|n
operator|.
name|indexOf
argument_list|(
name|token
argument_list|)
operator|<
literal|0
condition|)
name|match
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|match
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|PdfWebTable
name|getTable
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
name|user
parameter_list|,
name|boolean
name|html
parameter_list|,
name|ExamAssignmentReportForm
name|form
parameter_list|,
name|Collection
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
parameter_list|)
block|{
if|if
condition|(
name|exams
operator|==
literal|null
operator|||
name|exams
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
name|String
name|nl
init|=
operator|(
name|html
condition|?
literal|"<br>"
else|:
literal|"\n"
operator|)
decl_stmt|;
name|SimpleDateFormat
name|df
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"EEE, MM/dd"
argument_list|)
decl_stmt|;
name|SimpleDateFormat
name|tf
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"hh:mmaa"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ExamAssignmentReportForm
operator|.
name|sExamAssignmentReport
operator|.
name|equals
argument_list|(
name|form
operator|.
name|getReport
argument_list|()
argument_list|)
condition|)
block|{
name|PdfWebTable
name|table
init|=
operator|new
name|PdfWebTable
argument_list|(
literal|10
argument_list|,
name|form
operator|.
name|getReport
argument_list|()
argument_list|,
literal|"examAssignmentReport.do?ord=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
operator|(
name|form
operator|.
name|getShowSections
argument_list|()
condition|?
literal|"Classe / Course"
else|:
literal|"Examination"
operator|)
block|,
literal|"Enrollment"
block|,
literal|"Seating"
operator|+
name|nl
operator|+
literal|"Type"
block|,
literal|"Date"
block|,
literal|"Time"
block|,
literal|"Room"
block|,
literal|"Capacity"
block|,
literal|"Instructor"
block|,
literal|"Student"
operator|+
name|nl
operator|+
literal|"Conflicts"
block|,
literal|"Instructor"
operator|+
name|nl
operator|+
literal|"Conflicts"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"right"
block|,
literal|"center"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"right"
block|,
literal|"left"
block|,
literal|"center"
block|,
literal|"center"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|false
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|false
block|,
literal|true
block|,
literal|false
block|,
literal|false
block|}
argument_list|)
decl_stmt|;
name|table
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap"
argument_list|)
expr_stmt|;
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|exams
control|)
block|{
if|if
condition|(
name|form
operator|.
name|getShowSections
argument_list|()
condition|)
block|{
name|boolean
name|firstSection
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|exam
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|match
argument_list|(
name|form
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
continue|continue;
name|int
name|idc
init|=
name|exam
operator|.
name|getNrInstructorDirectConflicts
argument_list|(
name|section
argument_list|)
decl_stmt|;
name|String
name|idcStr
init|=
operator|(
name|idc
operator|<=
literal|0
condition|?
literal|"0"
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"P"
argument_list|)
operator|+
literal|"'>"
operator|+
name|idc
operator|+
literal|"</font>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|idc
argument_list|)
operator|)
decl_stmt|;
name|int
name|im2d
init|=
name|exam
operator|.
name|getNrInstructorMoreThanTwoConflicts
argument_list|(
name|section
argument_list|)
decl_stmt|;
name|String
name|im2dStr
init|=
operator|(
name|im2d
operator|<=
literal|0
condition|?
literal|"0"
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"2"
argument_list|)
operator|+
literal|"'>"
operator|+
name|im2d
operator|+
literal|"</font>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|im2d
argument_list|)
operator|)
decl_stmt|;
name|int
name|ibtb
init|=
name|exam
operator|.
name|getNrInstructorBackToBackConflicts
argument_list|(
name|section
argument_list|)
decl_stmt|;
name|int
name|idbtb
init|=
name|exam
operator|.
name|getNrInstructorDistanceBackToBackConflicts
argument_list|(
name|section
argument_list|)
decl_stmt|;
name|String
name|ibtbStr
init|=
operator|(
name|ibtb
operator|<=
literal|0
operator|&&
name|idbtb
operator|<=
literal|0
condition|?
literal|"0"
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"1"
argument_list|)
operator|+
literal|"'>"
operator|+
name|ibtb
operator|+
operator|(
name|idbtb
operator|>
literal|0
condition|?
literal|" (d:"
operator|+
name|idbtb
operator|+
literal|")"
else|:
literal|""
operator|)
operator|+
literal|"</font>"
else|:
name|ibtb
operator|+
operator|(
name|idbtb
operator|>
literal|0
condition|?
literal|" (d:"
operator|+
name|idbtb
operator|+
literal|")"
else|:
literal|""
operator|)
operator|)
decl_stmt|;
name|int
name|dc
init|=
name|exam
operator|.
name|getNrDirectConflicts
argument_list|(
name|section
argument_list|)
decl_stmt|;
name|String
name|dcStr
init|=
operator|(
name|dc
operator|<=
literal|0
condition|?
literal|"0"
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"P"
argument_list|)
operator|+
literal|"'>"
operator|+
name|dc
operator|+
literal|"</font>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|dc
argument_list|)
operator|)
decl_stmt|;
name|int
name|m2d
init|=
name|exam
operator|.
name|getNrMoreThanTwoConflicts
argument_list|(
name|section
argument_list|)
decl_stmt|;
name|String
name|m2dStr
init|=
operator|(
name|m2d
operator|<=
literal|0
condition|?
literal|"0"
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"2"
argument_list|)
operator|+
literal|"'>"
operator|+
name|m2d
operator|+
literal|"</font>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|m2d
argument_list|)
operator|)
decl_stmt|;
name|int
name|btb
init|=
name|exam
operator|.
name|getNrBackToBackConflicts
argument_list|(
name|section
argument_list|)
decl_stmt|;
name|int
name|dbtb
init|=
name|exam
operator|.
name|getNrDistanceBackToBackConflicts
argument_list|(
name|section
argument_list|)
decl_stmt|;
name|String
name|btbStr
init|=
operator|(
name|btb
operator|<=
literal|0
operator|&&
name|dbtb
operator|<=
literal|0
condition|?
literal|"0"
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"1"
argument_list|)
operator|+
literal|"'>"
operator|+
name|btb
operator|+
operator|(
name|dbtb
operator|>
literal|0
condition|?
literal|" (d:"
operator|+
name|dbtb
operator|+
literal|")"
else|:
literal|""
operator|)
operator|+
literal|"</font>"
else|:
name|btb
operator|+
operator|(
name|dbtb
operator|>
literal|0
condition|?
literal|" (d:"
operator|+
name|dbtb
operator|+
literal|")"
else|:
literal|""
operator|)
operator|)
decl_stmt|;
name|table
operator|.
name|addLine
argument_list|(
literal|"onClick=\"document.location='examDetail.do?examId="
operator|+
name|exam
operator|.
name|getExamId
argument_list|()
operator|+
literal|"';\""
argument_list|,
operator|new
name|String
index|[]
block|{
operator|(
name|html
condition|?
literal|"<a name='"
operator|+
name|exam
operator|.
name|getExamId
argument_list|()
operator|+
literal|"'>"
else|:
literal|""
operator|)
operator|+
name|section
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|html
condition|?
literal|"</a>"
else|:
literal|""
operator|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|section
operator|.
name|getNrStudents
argument_list|()
argument_list|)
block|,
operator|(
name|Exam
operator|.
name|sSeatingTypeNormal
operator|==
name|exam
operator|.
name|getSeatingType
argument_list|()
condition|?
literal|"Normal"
else|:
literal|"Exam"
operator|)
block|,
name|exam
operator|.
name|getDate
argument_list|(
name|html
argument_list|)
block|,
name|exam
operator|.
name|getTime
argument_list|(
name|html
argument_list|)
block|,
name|exam
operator|.
name|getRoomsName
argument_list|(
name|html
argument_list|,
literal|", "
argument_list|)
block|,
name|exam
operator|.
name|getRoomsCapacity
argument_list|(
name|html
argument_list|,
literal|", "
argument_list|)
block|,
name|exam
operator|.
name|getInstructorName
argument_list|(
literal|", "
argument_list|)
block|,
operator|(
name|dc
operator|==
literal|0
operator|&&
name|m2d
operator|==
literal|0
operator|&&
name|btb
operator|==
literal|0
operator|&&
name|dbtb
operator|==
literal|0
condition|?
literal|""
else|:
name|dcStr
operator|+
literal|", "
operator|+
name|m2dStr
operator|+
literal|", "
operator|+
name|btbStr
operator|)
block|,
operator|(
name|idc
operator|==
literal|0
operator|&&
name|im2d
operator|==
literal|0
operator|&&
name|ibtb
operator|==
literal|0
operator|&&
name|idbtb
operator|==
literal|0
condition|?
literal|""
else|:
name|idcStr
operator|+
literal|", "
operator|+
name|im2dStr
operator|+
literal|", "
operator|+
name|ibtbStr
operator|)
block|,                                 }
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getNrStudents
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getSeatingType
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriodOrd
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getRoomsName
argument_list|(
literal|":"
argument_list|)
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getRoomsCapacity
argument_list|(
literal|false
argument_list|,
literal|" "
argument_list|)
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getInstructorName
argument_list|(
literal|":"
argument_list|)
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|dc
argument_list|,
name|m2d
argument_list|,
name|btb
argument_list|,
name|dbtb
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|idc
argument_list|,
name|im2d
argument_list|,
name|ibtb
argument_list|,
name|idbtb
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|}
argument_list|,
operator|(
name|firstSection
condition|?
name|exam
operator|.
name|getExamId
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|null
operator|)
argument_list|)
expr_stmt|;
name|firstSection
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|match
argument_list|(
name|form
argument_list|,
name|exam
operator|.
name|getExamName
argument_list|()
argument_list|)
condition|)
continue|continue;
name|int
name|idc
init|=
name|exam
operator|.
name|getNrInstructorDirectConflicts
argument_list|()
decl_stmt|;
name|String
name|idcStr
init|=
operator|(
name|idc
operator|<=
literal|0
condition|?
literal|"0"
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"P"
argument_list|)
operator|+
literal|"'>"
operator|+
name|idc
operator|+
literal|"</font>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|idc
argument_list|)
operator|)
decl_stmt|;
name|int
name|im2d
init|=
name|exam
operator|.
name|getNrInstructorMoreThanTwoConflicts
argument_list|()
decl_stmt|;
name|String
name|im2dStr
init|=
operator|(
name|im2d
operator|<=
literal|0
condition|?
literal|"0"
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"2"
argument_list|)
operator|+
literal|"'>"
operator|+
name|im2d
operator|+
literal|"</font>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|im2d
argument_list|)
operator|)
decl_stmt|;
name|int
name|ibtb
init|=
name|exam
operator|.
name|getNrInstructorBackToBackConflicts
argument_list|()
decl_stmt|;
name|int
name|idbtb
init|=
name|exam
operator|.
name|getNrInstructorDistanceBackToBackConflicts
argument_list|()
decl_stmt|;
name|String
name|ibtbStr
init|=
operator|(
name|ibtb
operator|<=
literal|0
operator|&&
name|idbtb
operator|<=
literal|0
condition|?
literal|"0"
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"1"
argument_list|)
operator|+
literal|"'>"
operator|+
name|ibtb
operator|+
operator|(
name|idbtb
operator|>
literal|0
condition|?
literal|" (d:"
operator|+
name|idbtb
operator|+
literal|")"
else|:
literal|""
operator|)
operator|+
literal|"</font>"
else|:
name|ibtb
operator|+
operator|(
name|idbtb
operator|>
literal|0
condition|?
literal|" (d:"
operator|+
name|idbtb
operator|+
literal|")"
else|:
literal|""
operator|)
operator|)
decl_stmt|;
name|int
name|dc
init|=
name|exam
operator|.
name|getNrDirectConflicts
argument_list|()
decl_stmt|;
name|String
name|dcStr
init|=
operator|(
name|dc
operator|<=
literal|0
condition|?
literal|"0"
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"P"
argument_list|)
operator|+
literal|"'>"
operator|+
name|dc
operator|+
literal|"</font>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|dc
argument_list|)
operator|)
decl_stmt|;
name|int
name|m2d
init|=
name|exam
operator|.
name|getNrMoreThanTwoConflicts
argument_list|()
decl_stmt|;
name|String
name|m2dStr
init|=
operator|(
name|m2d
operator|<=
literal|0
condition|?
literal|"0"
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"2"
argument_list|)
operator|+
literal|"'>"
operator|+
name|m2d
operator|+
literal|"</font>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|m2d
argument_list|)
operator|)
decl_stmt|;
name|int
name|btb
init|=
name|exam
operator|.
name|getNrBackToBackConflicts
argument_list|()
decl_stmt|;
name|int
name|dbtb
init|=
name|exam
operator|.
name|getNrDistanceBackToBackConflicts
argument_list|()
decl_stmt|;
name|String
name|btbStr
init|=
operator|(
name|btb
operator|<=
literal|0
operator|&&
name|dbtb
operator|<=
literal|0
condition|?
literal|"0"
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"1"
argument_list|)
operator|+
literal|"'>"
operator|+
name|btb
operator|+
operator|(
name|dbtb
operator|>
literal|0
condition|?
literal|" (d:"
operator|+
name|dbtb
operator|+
literal|")"
else|:
literal|""
operator|)
operator|+
literal|"</font>"
else|:
name|btb
operator|+
operator|(
name|dbtb
operator|>
literal|0
condition|?
literal|" (d:"
operator|+
name|dbtb
operator|+
literal|")"
else|:
literal|""
operator|)
operator|)
decl_stmt|;
name|table
operator|.
name|addLine
argument_list|(
literal|"onClick=\"document.location='examDetail.do?examId="
operator|+
name|exam
operator|.
name|getExamId
argument_list|()
operator|+
literal|"';\""
argument_list|,
operator|new
name|String
index|[]
block|{
operator|(
name|html
condition|?
literal|"<a name='"
operator|+
name|exam
operator|.
name|getExamId
argument_list|()
operator|+
literal|"'>"
else|:
literal|""
operator|)
operator|+
name|exam
operator|.
name|getExamName
argument_list|()
operator|+
operator|(
name|html
condition|?
literal|"</a>"
else|:
literal|""
operator|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|exam
operator|.
name|getNrStudents
argument_list|()
argument_list|)
block|,
operator|(
name|Exam
operator|.
name|sSeatingTypeNormal
operator|==
name|exam
operator|.
name|getSeatingType
argument_list|()
condition|?
literal|"Normal"
else|:
literal|"Exam"
operator|)
block|,
name|exam
operator|.
name|getDate
argument_list|(
name|html
argument_list|)
block|,
name|exam
operator|.
name|getTime
argument_list|(
name|html
argument_list|)
block|,
name|exam
operator|.
name|getRoomsName
argument_list|(
name|html
argument_list|,
literal|", "
argument_list|)
block|,
name|exam
operator|.
name|getRoomsCapacity
argument_list|(
name|html
argument_list|,
literal|", "
argument_list|)
block|,
name|exam
operator|.
name|getInstructorName
argument_list|(
literal|", "
argument_list|)
block|,
operator|(
name|dc
operator|==
literal|0
operator|&&
name|m2d
operator|==
literal|0
operator|&&
name|btb
operator|==
literal|0
operator|&&
name|dbtb
operator|==
literal|0
condition|?
literal|""
else|:
name|dcStr
operator|+
literal|", "
operator|+
name|m2dStr
operator|+
literal|", "
operator|+
name|btbStr
operator|)
block|,
operator|(
name|idc
operator|==
literal|0
operator|&&
name|im2d
operator|==
literal|0
operator|&&
name|ibtb
operator|==
literal|0
operator|&&
name|idbtb
operator|==
literal|0
condition|?
literal|""
else|:
name|idcStr
operator|+
literal|", "
operator|+
name|im2dStr
operator|+
literal|", "
operator|+
name|ibtbStr
operator|)
block|,                             }
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|exam
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getNrStudents
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getSeatingType
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriodOrd
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getRoomsName
argument_list|(
literal|":"
argument_list|)
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getRoomsCapacity
argument_list|(
literal|false
argument_list|,
literal|" "
argument_list|)
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getInstructorName
argument_list|(
literal|":"
argument_list|)
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|dc
argument_list|,
name|m2d
argument_list|,
name|btb
argument_list|,
name|dbtb
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|idc
argument_list|,
name|im2d
argument_list|,
name|ibtb
argument_list|,
name|idbtb
argument_list|,
name|exam
argument_list|)
block|}
argument_list|,
name|exam
operator|.
name|getExamId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|table
return|;
block|}
if|else if
condition|(
name|ExamAssignmentReportForm
operator|.
name|sRoomAssignmentReport
operator|.
name|equals
argument_list|(
name|form
operator|.
name|getReport
argument_list|()
argument_list|)
condition|)
block|{
name|PdfWebTable
name|table
init|=
operator|new
name|PdfWebTable
argument_list|(
literal|11
argument_list|,
name|form
operator|.
name|getReport
argument_list|()
argument_list|,
literal|"examAssignmentReport.do?ord=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Room"
block|,
literal|"Capacity"
block|,
literal|"Exam"
operator|+
name|nl
operator|+
literal|"Capacity"
block|,
literal|"Date"
block|,
literal|"Time"
block|,
operator|(
name|form
operator|.
name|getShowSections
argument_list|()
condition|?
literal|"Classe / Course"
else|:
literal|"Examination"
operator|)
block|,
literal|"Enrollment"
block|,
literal|"Seating"
operator|+
name|nl
operator|+
literal|"Type"
block|,
literal|"Instructor"
block|,
literal|"Student"
operator|+
name|nl
operator|+
literal|"Conflicts"
block|,
literal|"Instructor"
operator|+
name|nl
operator|+
literal|"Conflicts"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"right"
block|,
literal|"center"
block|,
literal|"left"
block|,
literal|"center"
block|,
literal|"center"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|false
block|,
literal|false
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|false
block|,
literal|true
block|,
literal|true
block|,
literal|false
block|,
literal|false
block|}
argument_list|)
decl_stmt|;
name|table
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap"
argument_list|)
expr_stmt|;
name|table
operator|.
name|setBlankWhenSame
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|exams
control|)
block|{
name|boolean
name|match
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ExamRoomInfo
name|room
range|:
name|exam
operator|.
name|getRooms
argument_list|()
control|)
block|{
if|if
condition|(
name|match
argument_list|(
name|form
argument_list|,
name|room
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|match
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|match
condition|)
continue|continue;
if|if
condition|(
name|form
operator|.
name|getShowSections
argument_list|()
condition|)
block|{
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|exam
operator|.
name|getSections
argument_list|()
control|)
block|{
name|int
name|idc
init|=
name|exam
operator|.
name|getNrInstructorDirectConflicts
argument_list|(
name|section
argument_list|)
decl_stmt|;
name|String
name|idcStr
init|=
operator|(
name|idc
operator|<=
literal|0
condition|?
literal|"0"
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"P"
argument_list|)
operator|+
literal|"'>"
operator|+
name|idc
operator|+
literal|"</font>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|idc
argument_list|)
operator|)
decl_stmt|;
name|int
name|im2d
init|=
name|exam
operator|.
name|getNrInstructorMoreThanTwoConflicts
argument_list|(
name|section
argument_list|)
decl_stmt|;
name|String
name|im2dStr
init|=
operator|(
name|im2d
operator|<=
literal|0
condition|?
literal|"0"
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"2"
argument_list|)
operator|+
literal|"'>"
operator|+
name|im2d
operator|+
literal|"</font>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|im2d
argument_list|)
operator|)
decl_stmt|;
name|int
name|ibtb
init|=
name|exam
operator|.
name|getNrInstructorBackToBackConflicts
argument_list|(
name|section
argument_list|)
decl_stmt|;
name|int
name|idbtb
init|=
name|exam
operator|.
name|getNrInstructorDistanceBackToBackConflicts
argument_list|(
name|section
argument_list|)
decl_stmt|;
name|String
name|ibtbStr
init|=
operator|(
name|ibtb
operator|<=
literal|0
operator|&&
name|idbtb
operator|<=
literal|0
condition|?
literal|"0"
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"1"
argument_list|)
operator|+
literal|"'>"
operator|+
name|ibtb
operator|+
operator|(
name|idbtb
operator|>
literal|0
condition|?
literal|" (d:"
operator|+
name|idbtb
operator|+
literal|")"
else|:
literal|""
operator|)
operator|+
literal|"</font>"
else|:
name|ibtb
operator|+
operator|(
name|idbtb
operator|>
literal|0
condition|?
literal|" (d:"
operator|+
name|idbtb
operator|+
literal|")"
else|:
literal|""
operator|)
operator|)
decl_stmt|;
name|int
name|dc
init|=
name|exam
operator|.
name|getNrDirectConflicts
argument_list|(
name|section
argument_list|)
decl_stmt|;
name|String
name|dcStr
init|=
operator|(
name|dc
operator|<=
literal|0
condition|?
literal|"0"
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"P"
argument_list|)
operator|+
literal|"'>"
operator|+
name|dc
operator|+
literal|"</font>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|dc
argument_list|)
operator|)
decl_stmt|;
name|int
name|m2d
init|=
name|exam
operator|.
name|getNrMoreThanTwoConflicts
argument_list|(
name|section
argument_list|)
decl_stmt|;
name|String
name|m2dStr
init|=
operator|(
name|m2d
operator|<=
literal|0
condition|?
literal|"0"
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"2"
argument_list|)
operator|+
literal|"'>"
operator|+
name|m2d
operator|+
literal|"</font>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|m2d
argument_list|)
operator|)
decl_stmt|;
name|int
name|btb
init|=
name|exam
operator|.
name|getNrBackToBackConflicts
argument_list|(
name|section
argument_list|)
decl_stmt|;
name|int
name|dbtb
init|=
name|exam
operator|.
name|getNrDistanceBackToBackConflicts
argument_list|(
name|section
argument_list|)
decl_stmt|;
name|String
name|btbStr
init|=
operator|(
name|btb
operator|<=
literal|0
operator|&&
name|dbtb
operator|<=
literal|0
condition|?
literal|"0"
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"1"
argument_list|)
operator|+
literal|"'>"
operator|+
name|btb
operator|+
operator|(
name|dbtb
operator|>
literal|0
condition|?
literal|" (d:"
operator|+
name|dbtb
operator|+
literal|")"
else|:
literal|""
operator|)
operator|+
literal|"</font>"
else|:
name|btb
operator|+
operator|(
name|dbtb
operator|>
literal|0
condition|?
literal|" (d:"
operator|+
name|dbtb
operator|+
literal|")"
else|:
literal|""
operator|)
operator|)
decl_stmt|;
name|boolean
name|firstRoom
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ExamRoomInfo
name|room
range|:
name|exam
operator|.
name|getRooms
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|match
argument_list|(
name|form
argument_list|,
name|room
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
continue|continue;
name|table
operator|.
name|addLine
argument_list|(
literal|"onClick=\"document.location='examDetail.do?examId="
operator|+
name|exam
operator|.
name|getExamId
argument_list|()
operator|+
literal|"';\""
argument_list|,
operator|new
name|String
index|[]
block|{
name|room
operator|.
name|getName
argument_list|()
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|room
operator|.
name|getCapacity
argument_list|()
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|room
operator|.
name|getExamCapacity
argument_list|()
argument_list|)
block|,
name|exam
operator|.
name|getDate
argument_list|(
name|html
argument_list|)
block|,
name|exam
operator|.
name|getTime
argument_list|(
name|html
argument_list|)
block|,
operator|(
name|html
condition|?
literal|"<a name='"
operator|+
name|exam
operator|.
name|getExamId
argument_list|()
operator|+
literal|"'>"
else|:
literal|""
operator|)
operator|+
name|section
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|html
condition|?
literal|"</a>"
else|:
literal|""
operator|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|section
operator|.
name|getNrStudents
argument_list|()
argument_list|)
block|,
operator|(
name|Exam
operator|.
name|sSeatingTypeNormal
operator|==
name|exam
operator|.
name|getSeatingType
argument_list|()
condition|?
literal|"Normal"
else|:
literal|"Exam"
operator|)
block|,
name|exam
operator|.
name|getInstructorName
argument_list|(
literal|", "
argument_list|)
block|,
operator|(
name|dc
operator|==
literal|0
operator|&&
name|m2d
operator|==
literal|0
operator|&&
name|btb
operator|==
literal|0
operator|&&
name|dbtb
operator|==
literal|0
condition|?
literal|""
else|:
name|dcStr
operator|+
literal|", "
operator|+
name|m2dStr
operator|+
literal|", "
operator|+
name|btbStr
operator|)
block|,
operator|(
name|idc
operator|==
literal|0
operator|&&
name|im2d
operator|==
literal|0
operator|&&
name|ibtb
operator|==
literal|0
operator|&&
name|idbtb
operator|==
literal|0
condition|?
literal|""
else|:
name|idcStr
operator|+
literal|", "
operator|+
name|im2dStr
operator|+
literal|", "
operator|+
name|ibtbStr
operator|)
block|,                                     }
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
name|room
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|room
operator|.
name|getCapacity
argument_list|()
argument_list|,
name|room
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|room
operator|.
name|getExamCapacity
argument_list|()
argument_list|,
name|room
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|room
argument_list|,
name|exam
operator|.
name|getPeriodOrd
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|room
argument_list|,
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|room
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|room
argument_list|,
name|section
operator|.
name|getNrStudents
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|room
argument_list|,
name|exam
operator|.
name|getSeatingType
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|room
argument_list|,
name|exam
operator|.
name|getInstructorName
argument_list|(
literal|":"
argument_list|)
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|room
argument_list|,
name|dc
argument_list|,
name|m2d
argument_list|,
name|btb
argument_list|,
name|dbtb
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|room
argument_list|,
name|idc
argument_list|,
name|im2d
argument_list|,
name|ibtb
argument_list|,
name|idbtb
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|}
argument_list|,
operator|(
name|firstRoom
condition|?
name|exam
operator|.
name|getExamId
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|null
operator|)
argument_list|)
expr_stmt|;
name|firstRoom
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|int
name|idc
init|=
name|exam
operator|.
name|getNrInstructorDirectConflicts
argument_list|()
decl_stmt|;
name|String
name|idcStr
init|=
operator|(
name|idc
operator|<=
literal|0
condition|?
literal|"0"
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"P"
argument_list|)
operator|+
literal|"'>"
operator|+
name|idc
operator|+
literal|"</font>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|idc
argument_list|)
operator|)
decl_stmt|;
name|int
name|im2d
init|=
name|exam
operator|.
name|getNrInstructorMoreThanTwoConflicts
argument_list|()
decl_stmt|;
name|String
name|im2dStr
init|=
operator|(
name|im2d
operator|<=
literal|0
condition|?
literal|"0"
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"2"
argument_list|)
operator|+
literal|"'>"
operator|+
name|im2d
operator|+
literal|"</font>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|im2d
argument_list|)
operator|)
decl_stmt|;
name|int
name|ibtb
init|=
name|exam
operator|.
name|getNrInstructorBackToBackConflicts
argument_list|()
decl_stmt|;
name|int
name|idbtb
init|=
name|exam
operator|.
name|getNrInstructorDistanceBackToBackConflicts
argument_list|()
decl_stmt|;
name|String
name|ibtbStr
init|=
operator|(
name|ibtb
operator|<=
literal|0
operator|&&
name|idbtb
operator|<=
literal|0
condition|?
literal|"0"
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"1"
argument_list|)
operator|+
literal|"'>"
operator|+
name|ibtb
operator|+
operator|(
name|idbtb
operator|>
literal|0
condition|?
literal|" (d:"
operator|+
name|idbtb
operator|+
literal|")"
else|:
literal|""
operator|)
operator|+
literal|"</font>"
else|:
name|ibtb
operator|+
operator|(
name|idbtb
operator|>
literal|0
condition|?
literal|" (d:"
operator|+
name|idbtb
operator|+
literal|")"
else|:
literal|""
operator|)
operator|)
decl_stmt|;
name|int
name|dc
init|=
name|exam
operator|.
name|getNrDirectConflicts
argument_list|()
decl_stmt|;
name|String
name|dcStr
init|=
operator|(
name|dc
operator|<=
literal|0
condition|?
literal|"0"
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"P"
argument_list|)
operator|+
literal|"'>"
operator|+
name|dc
operator|+
literal|"</font>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|dc
argument_list|)
operator|)
decl_stmt|;
name|int
name|m2d
init|=
name|exam
operator|.
name|getNrMoreThanTwoConflicts
argument_list|()
decl_stmt|;
name|String
name|m2dStr
init|=
operator|(
name|m2d
operator|<=
literal|0
condition|?
literal|"0"
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"2"
argument_list|)
operator|+
literal|"'>"
operator|+
name|m2d
operator|+
literal|"</font>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|m2d
argument_list|)
operator|)
decl_stmt|;
name|int
name|btb
init|=
name|exam
operator|.
name|getNrBackToBackConflicts
argument_list|()
decl_stmt|;
name|int
name|dbtb
init|=
name|exam
operator|.
name|getNrDistanceBackToBackConflicts
argument_list|()
decl_stmt|;
name|String
name|btbStr
init|=
operator|(
name|btb
operator|<=
literal|0
operator|&&
name|dbtb
operator|<=
literal|0
condition|?
literal|"0"
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"1"
argument_list|)
operator|+
literal|"'>"
operator|+
name|btb
operator|+
operator|(
name|dbtb
operator|>
literal|0
condition|?
literal|" (d:"
operator|+
name|dbtb
operator|+
literal|")"
else|:
literal|""
operator|)
operator|+
literal|"</font>"
else|:
name|btb
operator|+
operator|(
name|dbtb
operator|>
literal|0
condition|?
literal|" (d:"
operator|+
name|dbtb
operator|+
literal|")"
else|:
literal|""
operator|)
operator|)
decl_stmt|;
name|boolean
name|firstRoom
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ExamRoomInfo
name|room
range|:
name|exam
operator|.
name|getRooms
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|match
argument_list|(
name|form
argument_list|,
name|room
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
continue|continue;
name|table
operator|.
name|addLine
argument_list|(
literal|"onClick=\"document.location='examDetail.do?examId="
operator|+
name|exam
operator|.
name|getExamId
argument_list|()
operator|+
literal|"';\""
argument_list|,
operator|new
name|String
index|[]
block|{
name|room
operator|.
name|getName
argument_list|()
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|room
operator|.
name|getCapacity
argument_list|()
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|room
operator|.
name|getExamCapacity
argument_list|()
argument_list|)
block|,
name|exam
operator|.
name|getDate
argument_list|(
name|html
argument_list|)
block|,
name|exam
operator|.
name|getTime
argument_list|(
name|html
argument_list|)
block|,
operator|(
name|html
condition|?
literal|"<a name='"
operator|+
name|exam
operator|.
name|getExamId
argument_list|()
operator|+
literal|"'>"
else|:
literal|""
operator|)
operator|+
name|exam
operator|.
name|getExamName
argument_list|()
operator|+
operator|(
name|html
condition|?
literal|"</a>"
else|:
literal|""
operator|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|exam
operator|.
name|getNrStudents
argument_list|()
argument_list|)
block|,
operator|(
name|Exam
operator|.
name|sSeatingTypeNormal
operator|==
name|exam
operator|.
name|getSeatingType
argument_list|()
condition|?
literal|"Normal"
else|:
literal|"Exam"
operator|)
block|,
name|exam
operator|.
name|getInstructorName
argument_list|(
literal|", "
argument_list|)
block|,
operator|(
name|dc
operator|==
literal|0
operator|&&
name|m2d
operator|==
literal|0
operator|&&
name|btb
operator|==
literal|0
operator|&&
name|dbtb
operator|==
literal|0
condition|?
literal|""
else|:
name|dcStr
operator|+
literal|", "
operator|+
name|m2dStr
operator|+
literal|", "
operator|+
name|btbStr
operator|)
block|,
operator|(
name|idc
operator|==
literal|0
operator|&&
name|im2d
operator|==
literal|0
operator|&&
name|ibtb
operator|==
literal|0
operator|&&
name|idbtb
operator|==
literal|0
condition|?
literal|""
else|:
name|idcStr
operator|+
literal|", "
operator|+
name|im2dStr
operator|+
literal|", "
operator|+
name|ibtbStr
operator|)
block|,                                 }
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
name|room
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|room
operator|.
name|getCapacity
argument_list|()
argument_list|,
name|room
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|room
operator|.
name|getExamCapacity
argument_list|()
argument_list|,
name|room
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|room
argument_list|,
name|exam
operator|.
name|getPeriodOrd
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|room
argument_list|,
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|room
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|room
argument_list|,
name|exam
operator|.
name|getNrStudents
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|room
argument_list|,
name|exam
operator|.
name|getSeatingType
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|room
argument_list|,
name|exam
operator|.
name|getInstructorName
argument_list|(
literal|":"
argument_list|)
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|room
argument_list|,
name|dc
argument_list|,
name|m2d
argument_list|,
name|btb
argument_list|,
name|dbtb
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|room
argument_list|,
name|idc
argument_list|,
name|im2d
argument_list|,
name|ibtb
argument_list|,
name|idbtb
argument_list|,
name|exam
argument_list|)
block|}
argument_list|,
operator|(
name|firstRoom
condition|?
name|exam
operator|.
name|getExamId
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|null
operator|)
argument_list|)
expr_stmt|;
name|firstRoom
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
return|return
name|table
return|;
block|}
if|else if
condition|(
name|ExamAssignmentReportForm
operator|.
name|sPeriodUsage
operator|.
name|equals
argument_list|(
name|form
operator|.
name|getReport
argument_list|()
argument_list|)
condition|)
block|{
name|PdfWebTable
name|table
init|=
operator|new
name|PdfWebTable
argument_list|(
literal|7
argument_list|,
name|form
operator|.
name|getReport
argument_list|()
argument_list|,
literal|"examAssignmentReport.do?ord=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Date"
block|,
literal|"Time"
block|,
operator|(
name|form
operator|.
name|getShowSections
argument_list|()
condition|?
literal|"Classes / Courses"
else|:
literal|"Examinations"
operator|)
block|,
literal|"Students"
block|,
operator|(
name|form
operator|.
name|getShowSections
argument_list|()
condition|?
literal|"Classes / Courses"
else|:
literal|"Examinations"
operator|)
operator|+
name|nl
operator|+
literal|"with 10+ students"
block|,
operator|(
name|form
operator|.
name|getShowSections
argument_list|()
condition|?
literal|"Classes / Courses"
else|:
literal|"Examinations"
operator|)
operator|+
name|nl
operator|+
literal|"with 50+ students"
block|,
operator|(
name|form
operator|.
name|getShowSections
argument_list|()
condition|?
literal|"Classes / Courses"
else|:
literal|"Examinations"
operator|)
operator|+
name|nl
operator|+
literal|"with 100+ students"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
decl_stmt|;
name|table
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap"
argument_list|)
expr_stmt|;
name|int
name|tnrExams
init|=
literal|0
decl_stmt|,
name|tnrStudents
init|=
literal|0
decl_stmt|,
name|tnrExams10
init|=
literal|0
decl_stmt|,
name|tnrExams50
init|=
literal|0
decl_stmt|,
name|tnrExams100
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|ExamPeriod
operator|.
name|findAll
argument_list|(
name|sessionId
argument_list|,
name|form
operator|.
name|getExamType
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamPeriod
name|period
init|=
operator|(
name|ExamPeriod
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|periodDate
init|=
name|df
operator|.
name|format
argument_list|(
name|period
operator|.
name|getStartDate
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|periodTime
init|=
name|tf
operator|.
name|format
argument_list|(
name|period
operator|.
name|getStartTime
argument_list|()
argument_list|)
operator|+
literal|" - "
operator|+
name|tf
operator|.
name|format
argument_list|(
name|period
operator|.
name|getEndTime
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|html
operator|&&
name|period
operator|.
name|getPrefLevel
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|period
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
block|{
name|periodDate
operator|=
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|period
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|+
literal|"'>"
operator|+
name|periodDate
operator|+
literal|"</font>"
expr_stmt|;
name|periodTime
operator|=
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|period
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|+
literal|"'>"
operator|+
name|periodTime
operator|+
literal|"</font>"
expr_stmt|;
block|}
name|int
name|nrExams
init|=
literal|0
decl_stmt|,
name|nrStudents
init|=
literal|0
decl_stmt|,
name|nrExams10
init|=
literal|0
decl_stmt|,
name|nrExams50
init|=
literal|0
decl_stmt|,
name|nrExams100
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|exams
control|)
block|{
if|if
condition|(
operator|!
name|period
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|exam
operator|.
name|getPeriodId
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|form
operator|.
name|getShowSections
argument_list|()
condition|)
block|{
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|exam
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|match
argument_list|(
name|form
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
continue|continue;
name|nrExams
operator|++
expr_stmt|;
name|nrStudents
operator|+=
name|section
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getNrStudents
argument_list|()
operator|>
literal|10
condition|)
name|nrExams10
operator|++
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getNrStudents
argument_list|()
operator|>
literal|50
condition|)
name|nrExams50
operator|++
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getNrStudents
argument_list|()
operator|>
literal|100
condition|)
name|nrExams100
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|match
argument_list|(
name|form
argument_list|,
name|exam
operator|.
name|getExamName
argument_list|()
argument_list|)
condition|)
continue|continue;
name|nrExams
operator|++
expr_stmt|;
name|nrStudents
operator|+=
name|exam
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
if|if
condition|(
name|exam
operator|.
name|getNrStudents
argument_list|()
operator|>
literal|10
condition|)
name|nrExams10
operator|++
expr_stmt|;
if|if
condition|(
name|exam
operator|.
name|getNrStudents
argument_list|()
operator|>
literal|50
condition|)
name|nrExams50
operator|++
expr_stmt|;
if|if
condition|(
name|exam
operator|.
name|getNrStudents
argument_list|()
operator|>
literal|100
condition|)
name|nrExams100
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|nrExams
operator|==
literal|0
condition|)
continue|continue;
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
name|periodDate
block|,
name|periodTime
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|nrExams
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|nrStudents
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|nrExams10
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|nrExams50
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|nrExams100
argument_list|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
literal|0
argument_list|,
name|period
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|0
argument_list|,
name|period
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|period
operator|.
name|getDateOffset
argument_list|()
argument_list|,
name|period
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|0
argument_list|,
name|nrExams
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|0
argument_list|,
name|nrStudents
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|0
argument_list|,
name|nrExams10
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|0
argument_list|,
name|nrExams50
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|0
argument_list|,
name|nrExams100
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|tnrExams
operator|+=
name|nrExams
expr_stmt|;
name|tnrExams10
operator|+=
name|nrExams10
expr_stmt|;
name|tnrExams50
operator|+=
name|nrExams50
expr_stmt|;
name|tnrExams100
operator|+=
name|nrExams100
expr_stmt|;
name|tnrStudents
operator|+=
name|nrStudents
expr_stmt|;
block|}
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
operator|(
name|html
condition|?
literal|"<b>Totals</b>"
else|:
literal|"Totals"
operator|)
block|,
literal|""
block|,
operator|(
name|html
condition|?
literal|"<b>"
operator|+
name|tnrExams
operator|+
literal|"</b>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|tnrExams
argument_list|)
operator|)
block|,
operator|(
name|html
condition|?
literal|"<b>"
operator|+
name|tnrStudents
operator|+
literal|"</b>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|tnrStudents
argument_list|)
operator|)
block|,
operator|(
name|html
condition|?
literal|"<b>"
operator|+
name|tnrExams10
operator|+
literal|"</b>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|tnrExams10
argument_list|)
operator|)
block|,
operator|(
name|html
condition|?
literal|"<b>"
operator|+
name|tnrExams50
operator|+
literal|"</b>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|tnrExams50
argument_list|)
operator|)
block|,
operator|(
name|html
condition|?
literal|"<b>"
operator|+
name|tnrExams100
operator|+
literal|"</b>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|tnrExams100
argument_list|)
operator|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
literal|1
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|1
argument_list|,
name|tnrExams
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|1
argument_list|,
name|tnrStudents
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|1
argument_list|,
name|tnrExams10
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|1
argument_list|,
name|tnrExams50
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|1
argument_list|,
name|tnrExams100
argument_list|)
block|}
argument_list|)
expr_stmt|;
return|return
name|table
return|;
block|}
if|else if
condition|(
name|ExamAssignmentReportForm
operator|.
name|sNrExamsADay
operator|.
name|equals
argument_list|(
name|form
operator|.
name|getReport
argument_list|()
argument_list|)
condition|)
block|{
name|PdfWebTable
name|table
init|=
operator|new
name|PdfWebTable
argument_list|(
literal|8
argument_list|,
name|form
operator|.
name|getReport
argument_list|()
argument_list|,
literal|"examAssignmentReport.do?ord=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Date"
block|,
literal|"Students with"
operator|+
name|nl
operator|+
literal|"No Exam"
block|,
literal|"Students with"
operator|+
name|nl
operator|+
literal|"One Exam"
block|,
literal|"Students with"
operator|+
name|nl
operator|+
literal|"Two Exams"
block|,
literal|"Students with"
operator|+
name|nl
operator|+
literal|"Three Exams"
block|,
literal|"Students with"
operator|+
name|nl
operator|+
literal|"Four or More Exams"
block|,
literal|"Student "
operator|+
name|nl
operator|+
literal|"Back-To-Back Exams"
block|,
literal|"Student Distance"
operator|+
name|nl
operator|+
literal|"Back-To-Back Exams"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
decl_stmt|;
name|table
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap"
argument_list|)
expr_stmt|;
name|HashSet
argument_list|<
name|Long
argument_list|>
name|studentIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Date
argument_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|date2students
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Date
argument_list|,
name|Integer
argument_list|>
name|date2btb
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Date
argument_list|,
name|Integer
argument_list|>
name|date2dbtb
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|exams
control|)
block|{
if|if
condition|(
operator|!
name|form
operator|.
name|getShowSections
argument_list|()
operator|&&
operator|!
name|match
argument_list|(
name|form
argument_list|,
name|exam
operator|.
name|getExamName
argument_list|()
argument_list|)
condition|)
continue|continue;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|students
init|=
name|date2students
operator|.
name|get
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartDate
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|students
operator|==
literal|null
condition|)
block|{
name|students
operator|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|date2students
operator|.
name|put
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartDate
argument_list|()
argument_list|,
name|students
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|exam
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|form
operator|.
name|getShowSections
argument_list|()
operator|&&
operator|!
name|match
argument_list|(
name|form
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
continue|continue;
name|studentIds
operator|.
name|addAll
argument_list|(
name|section
operator|.
name|getStudentIds
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Long
name|studentId
range|:
name|section
operator|.
name|getStudentIds
argument_list|()
control|)
block|{
name|Integer
name|nrExamsThisDay
init|=
name|students
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
name|students
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
literal|1
operator|+
operator|(
name|nrExamsThisDay
operator|==
literal|null
condition|?
literal|0
else|:
name|nrExamsThisDay
operator|)
argument_list|)
expr_stmt|;
block|}
name|int
name|btb
init|=
literal|0
decl_stmt|,
name|dbtb
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exam
operator|.
name|getBackToBackConflicts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BackToBackConflict
name|conf
init|=
operator|(
name|BackToBackConflict
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|compareTo
argument_list|(
name|conf
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getPeriod
argument_list|()
argument_list|)
operator|>=
literal|0
condition|)
continue|continue;
if|if
condition|(
name|form
operator|.
name|getShowSections
argument_list|()
operator|&&
name|form
operator|.
name|getFilter
argument_list|()
operator|!=
literal|null
operator|&&
name|form
operator|.
name|getFilter
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Enumeration
name|e
init|=
name|conf
operator|.
name|getStudents
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|section
operator|.
name|getStudentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|studentId
argument_list|)
condition|)
block|{
name|btb
operator|++
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|isDistance
argument_list|()
condition|)
name|dbtb
operator|++
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|btb
operator|+=
name|conf
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|isDistance
argument_list|()
condition|)
name|dbtb
operator|+=
name|conf
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|btb
operator|>
literal|0
condition|)
name|date2btb
operator|.
name|put
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartDate
argument_list|()
argument_list|,
name|btb
operator|+
operator|(
name|date2btb
operator|.
name|get
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartDate
argument_list|()
argument_list|)
operator|==
literal|null
condition|?
literal|0
else|:
name|date2btb
operator|.
name|get
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartDate
argument_list|()
argument_list|)
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|dbtb
operator|>
literal|0
condition|)
name|date2dbtb
operator|.
name|put
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartDate
argument_list|()
argument_list|,
name|dbtb
operator|+
operator|(
name|date2dbtb
operator|.
name|get
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartDate
argument_list|()
argument_list|)
operator|==
literal|null
condition|?
literal|0
else|:
name|date2dbtb
operator|.
name|get
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartDate
argument_list|()
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|tNoExam
init|=
literal|0
decl_stmt|,
name|tOneExam
init|=
literal|0
decl_stmt|,
name|tTwoExams
init|=
literal|0
decl_stmt|,
name|tThreeExams
init|=
literal|0
decl_stmt|,
name|tFourExams
init|=
literal|0
decl_stmt|,
name|tBtb
init|=
literal|0
decl_stmt|,
name|tDistBtb
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Date
argument_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|entry
range|:
name|date2students
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|int
name|noExam
init|=
literal|0
decl_stmt|,
name|oneExam
init|=
literal|0
decl_stmt|,
name|twoExams
init|=
literal|0
decl_stmt|,
name|threeExams
init|=
literal|0
decl_stmt|,
name|fourExams
init|=
literal|0
decl_stmt|,
name|btb
init|=
literal|0
decl_stmt|,
name|dbtb
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|student
range|:
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|student
operator|.
name|getValue
argument_list|()
operator|==
literal|1
condition|)
name|oneExam
operator|++
expr_stmt|;
if|else if
condition|(
name|student
operator|.
name|getValue
argument_list|()
operator|==
literal|2
condition|)
name|twoExams
operator|++
expr_stmt|;
if|else if
condition|(
name|student
operator|.
name|getValue
argument_list|()
operator|==
literal|3
condition|)
name|threeExams
operator|++
expr_stmt|;
if|else if
condition|(
name|student
operator|.
name|getValue
argument_list|()
operator|>=
literal|4
condition|)
name|fourExams
operator|++
expr_stmt|;
block|}
name|noExam
operator|=
name|studentIds
operator|.
name|size
argument_list|()
operator|-
name|oneExam
operator|-
name|twoExams
operator|-
name|threeExams
operator|-
name|fourExams
expr_stmt|;
name|btb
operator|=
operator|(
name|date2btb
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|==
literal|null
condition|?
literal|0
else|:
name|date2btb
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|)
expr_stmt|;
name|dbtb
operator|=
operator|(
name|date2dbtb
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|==
literal|null
condition|?
literal|0
else|:
name|date2dbtb
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|)
expr_stmt|;
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
name|df
operator|.
name|format
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|noExam
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|oneExam
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|twoExams
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|threeExams
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|fourExams
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|btb
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|dbtb
argument_list|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
literal|0
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|0
argument_list|,
name|noExam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|0
argument_list|,
name|oneExam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|0
argument_list|,
name|twoExams
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|0
argument_list|,
name|threeExams
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|0
argument_list|,
name|fourExams
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|0
argument_list|,
name|btb
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|0
argument_list|,
name|dbtb
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|tNoExam
operator|+=
name|noExam
expr_stmt|;
name|tOneExam
operator|+=
name|oneExam
expr_stmt|;
name|tTwoExams
operator|+=
name|twoExams
expr_stmt|;
name|tThreeExams
operator|+=
name|threeExams
expr_stmt|;
name|tFourExams
operator|+=
name|fourExams
expr_stmt|;
name|tBtb
operator|+=
name|btb
expr_stmt|;
name|tDistBtb
operator|+=
name|dbtb
expr_stmt|;
block|}
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
operator|(
name|html
condition|?
literal|"<b>Totals</b>"
else|:
literal|"Totals"
operator|)
block|,
operator|(
name|html
condition|?
literal|"<b>"
operator|+
name|tNoExam
operator|+
literal|"</b>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|tNoExam
argument_list|)
operator|)
block|,
operator|(
name|html
condition|?
literal|"<b>"
operator|+
name|tOneExam
operator|+
literal|"</b>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|tOneExam
argument_list|)
operator|)
block|,
operator|(
name|html
condition|?
literal|"<b>"
operator|+
name|tTwoExams
operator|+
literal|"</b>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|tTwoExams
argument_list|)
operator|)
block|,
operator|(
name|html
condition|?
literal|"<b>"
operator|+
name|tThreeExams
operator|+
literal|"</b>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|tThreeExams
argument_list|)
operator|)
block|,
operator|(
name|html
condition|?
literal|"<b>"
operator|+
name|tFourExams
operator|+
literal|"</b>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|tFourExams
argument_list|)
operator|)
block|,
operator|(
name|html
condition|?
literal|"<b>"
operator|+
name|tBtb
operator|+
literal|"</b>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|tBtb
argument_list|)
operator|)
block|,
operator|(
name|html
condition|?
literal|"<b>"
operator|+
name|tDistBtb
operator|+
literal|"</b>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|tDistBtb
argument_list|)
operator|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
literal|1
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|1
argument_list|,
name|tNoExam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|1
argument_list|,
name|tOneExam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|1
argument_list|,
name|tTwoExams
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|1
argument_list|,
name|tThreeExams
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|1
argument_list|,
name|tFourExams
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|1
argument_list|,
name|tBtb
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|1
argument_list|,
name|tDistBtb
argument_list|)
block|}
argument_list|)
expr_stmt|;
return|return
name|table
return|;
block|}
if|else if
condition|(
name|ExamAssignmentReportForm
operator|.
name|sRoomSplits
operator|.
name|equals
argument_list|(
name|form
operator|.
name|getReport
argument_list|()
argument_list|)
condition|)
block|{
name|PdfWebTable
name|table
init|=
operator|new
name|PdfWebTable
argument_list|(
literal|13
argument_list|,
name|form
operator|.
name|getReport
argument_list|()
argument_list|,
literal|"examAssignmentReport.do?ord=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
operator|(
name|form
operator|.
name|getShowSections
argument_list|()
condition|?
literal|"Classe / Course"
else|:
literal|"Examination"
operator|)
block|,
literal|"Enrollment"
block|,
literal|"Seating"
operator|+
name|nl
operator|+
literal|"Type"
block|,
literal|"Date"
block|,
literal|"Time"
block|,
literal|"1st Room"
block|,
literal|"1st Room"
operator|+
name|nl
operator|+
literal|"Capacity"
block|,
literal|"2nd Room"
block|,
literal|"2nd Room"
operator|+
name|nl
operator|+
literal|"Capacity"
block|,
literal|"3rd Room"
block|,
literal|"3rd Room"
operator|+
name|nl
operator|+
literal|"Capacity"
block|,
literal|"4th Room"
block|,
literal|"4th Room"
operator|+
name|nl
operator|+
literal|"Capacity"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"center"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
decl_stmt|;
name|table
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap"
argument_list|)
expr_stmt|;
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|exams
control|)
block|{
if|if
condition|(
name|exam
operator|.
name|getRooms
argument_list|()
operator|==
literal|null
operator|||
name|exam
operator|.
name|getRooms
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
continue|continue;
if|if
condition|(
name|form
operator|.
name|getShowSections
argument_list|()
condition|)
block|{
name|boolean
name|firstSection
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|exam
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|match
argument_list|(
name|form
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
continue|continue;
name|ExamRoomInfo
index|[]
name|rooms
init|=
operator|new
name|ExamRoomInfo
index|[
name|Math
operator|.
name|max
argument_list|(
literal|4
argument_list|,
name|exam
operator|.
name|getRooms
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
index|]
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ExamRoomInfo
name|room
range|:
name|exam
operator|.
name|getRooms
argument_list|()
control|)
name|rooms
index|[
name|idx
operator|++
index|]
operator|=
name|room
expr_stmt|;
name|table
operator|.
name|addLine
argument_list|(
literal|"onClick=\"document.location='examDetail.do?examId="
operator|+
name|exam
operator|.
name|getExamId
argument_list|()
operator|+
literal|"';\""
argument_list|,
operator|new
name|String
index|[]
block|{
operator|(
name|html
condition|?
literal|"<a name='"
operator|+
name|exam
operator|.
name|getExamId
argument_list|()
operator|+
literal|"'>"
else|:
literal|""
operator|)
operator|+
name|section
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|html
condition|?
literal|"</a>"
else|:
literal|""
operator|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|section
operator|.
name|getNrStudents
argument_list|()
argument_list|)
block|,
operator|(
name|Exam
operator|.
name|sSeatingTypeNormal
operator|==
name|exam
operator|.
name|getSeatingType
argument_list|()
condition|?
literal|"Normal"
else|:
literal|"Exam"
operator|)
block|,
name|exam
operator|.
name|getDate
argument_list|(
name|html
argument_list|)
block|,
name|exam
operator|.
name|getTime
argument_list|(
name|html
argument_list|)
block|,
operator|(
name|rooms
index|[
literal|0
index|]
operator|==
literal|null
condition|?
literal|""
else|:
name|html
condition|?
name|rooms
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
else|:
name|rooms
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
operator|)
block|,
operator|(
name|rooms
index|[
literal|0
index|]
operator|==
literal|null
condition|?
literal|""
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
name|rooms
index|[
literal|0
index|]
operator|.
name|getPreference
argument_list|()
argument_list|)
operator|+
literal|"'>"
operator|+
name|rooms
index|[
literal|0
index|]
operator|.
name|getCapacity
argument_list|()
operator|+
literal|"</font>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|rooms
index|[
literal|0
index|]
operator|.
name|getCapacity
argument_list|()
argument_list|)
operator|)
block|,
operator|(
name|rooms
index|[
literal|1
index|]
operator|==
literal|null
condition|?
literal|""
else|:
name|html
condition|?
name|rooms
index|[
literal|1
index|]
operator|.
name|toString
argument_list|()
else|:
name|rooms
index|[
literal|1
index|]
operator|.
name|getName
argument_list|()
operator|)
block|,
operator|(
name|rooms
index|[
literal|1
index|]
operator|==
literal|null
condition|?
literal|""
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
name|rooms
index|[
literal|1
index|]
operator|.
name|getPreference
argument_list|()
argument_list|)
operator|+
literal|"'>"
operator|+
name|rooms
index|[
literal|1
index|]
operator|.
name|getCapacity
argument_list|()
operator|+
literal|"</font>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|rooms
index|[
literal|1
index|]
operator|.
name|getCapacity
argument_list|()
argument_list|)
operator|)
block|,
operator|(
name|rooms
index|[
literal|2
index|]
operator|==
literal|null
condition|?
literal|""
else|:
name|html
condition|?
name|rooms
index|[
literal|2
index|]
operator|.
name|toString
argument_list|()
else|:
name|rooms
index|[
literal|2
index|]
operator|.
name|getName
argument_list|()
operator|)
block|,
operator|(
name|rooms
index|[
literal|2
index|]
operator|==
literal|null
condition|?
literal|""
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
name|rooms
index|[
literal|2
index|]
operator|.
name|getPreference
argument_list|()
argument_list|)
operator|+
literal|"'>"
operator|+
name|rooms
index|[
literal|2
index|]
operator|.
name|getCapacity
argument_list|()
operator|+
literal|"</font>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|rooms
index|[
literal|2
index|]
operator|.
name|getCapacity
argument_list|()
argument_list|)
operator|)
block|,
operator|(
name|rooms
index|[
literal|3
index|]
operator|==
literal|null
condition|?
literal|""
else|:
name|html
condition|?
name|rooms
index|[
literal|3
index|]
operator|.
name|toString
argument_list|()
else|:
name|rooms
index|[
literal|2
index|]
operator|.
name|getName
argument_list|()
operator|)
block|,
operator|(
name|rooms
index|[
literal|3
index|]
operator|==
literal|null
condition|?
literal|""
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
name|rooms
index|[
literal|3
index|]
operator|.
name|getPreference
argument_list|()
argument_list|)
operator|+
literal|"'>"
operator|+
name|rooms
index|[
literal|3
index|]
operator|.
name|getCapacity
argument_list|()
operator|+
literal|"</font>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|rooms
index|[
literal|3
index|]
operator|.
name|getCapacity
argument_list|()
argument_list|)
operator|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getNrStudents
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getSeatingType
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriodOrd
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|(
name|rooms
index|[
literal|0
index|]
operator|==
literal|null
condition|?
literal|""
else|:
name|rooms
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
operator|)
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|(
name|rooms
index|[
literal|0
index|]
operator|==
literal|null
condition|?
literal|0
else|:
name|rooms
index|[
literal|0
index|]
operator|.
name|getCapacity
argument_list|()
operator|)
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|(
name|rooms
index|[
literal|1
index|]
operator|==
literal|null
condition|?
literal|""
else|:
name|rooms
index|[
literal|1
index|]
operator|.
name|getName
argument_list|()
operator|)
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|(
name|rooms
index|[
literal|1
index|]
operator|==
literal|null
condition|?
literal|0
else|:
name|rooms
index|[
literal|1
index|]
operator|.
name|getCapacity
argument_list|()
operator|)
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|(
name|rooms
index|[
literal|2
index|]
operator|==
literal|null
condition|?
literal|""
else|:
name|rooms
index|[
literal|2
index|]
operator|.
name|getName
argument_list|()
operator|)
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|(
name|rooms
index|[
literal|2
index|]
operator|==
literal|null
condition|?
literal|0
else|:
name|rooms
index|[
literal|2
index|]
operator|.
name|getCapacity
argument_list|()
operator|)
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|(
name|rooms
index|[
literal|3
index|]
operator|==
literal|null
condition|?
literal|""
else|:
name|rooms
index|[
literal|3
index|]
operator|.
name|getName
argument_list|()
operator|)
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|(
name|rooms
index|[
literal|3
index|]
operator|==
literal|null
condition|?
literal|0
else|:
name|rooms
index|[
literal|3
index|]
operator|.
name|getCapacity
argument_list|()
operator|)
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|}
argument_list|,
operator|(
name|firstSection
condition|?
name|exam
operator|.
name|getExamId
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|null
operator|)
argument_list|)
expr_stmt|;
name|firstSection
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|match
argument_list|(
name|form
argument_list|,
name|exam
operator|.
name|getExamName
argument_list|()
argument_list|)
condition|)
continue|continue;
name|ExamRoomInfo
index|[]
name|rooms
init|=
operator|new
name|ExamRoomInfo
index|[
name|Math
operator|.
name|max
argument_list|(
literal|4
argument_list|,
name|exam
operator|.
name|getRooms
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
index|]
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ExamRoomInfo
name|room
range|:
name|exam
operator|.
name|getRooms
argument_list|()
control|)
name|rooms
index|[
name|idx
operator|++
index|]
operator|=
name|room
expr_stmt|;
name|table
operator|.
name|addLine
argument_list|(
literal|"onClick=\"document.location='examDetail.do?examId="
operator|+
name|exam
operator|.
name|getExamId
argument_list|()
operator|+
literal|"';\""
argument_list|,
operator|new
name|String
index|[]
block|{
operator|(
name|html
condition|?
literal|"<a name='"
operator|+
name|exam
operator|.
name|getExamId
argument_list|()
operator|+
literal|"'>"
else|:
literal|""
operator|)
operator|+
name|exam
operator|.
name|getExamName
argument_list|()
operator|+
operator|(
name|html
condition|?
literal|"</a>"
else|:
literal|""
operator|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|exam
operator|.
name|getNrStudents
argument_list|()
argument_list|)
block|,
operator|(
name|Exam
operator|.
name|sSeatingTypeNormal
operator|==
name|exam
operator|.
name|getSeatingType
argument_list|()
condition|?
literal|"Normal"
else|:
literal|"Exam"
operator|)
block|,
name|exam
operator|.
name|getDate
argument_list|(
name|html
argument_list|)
block|,
name|exam
operator|.
name|getTime
argument_list|(
name|html
argument_list|)
block|,
operator|(
name|rooms
index|[
literal|0
index|]
operator|==
literal|null
condition|?
literal|""
else|:
name|html
condition|?
name|rooms
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
else|:
name|rooms
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
operator|)
block|,
operator|(
name|rooms
index|[
literal|0
index|]
operator|==
literal|null
condition|?
literal|""
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
name|rooms
index|[
literal|0
index|]
operator|.
name|getPreference
argument_list|()
argument_list|)
operator|+
literal|"'>"
operator|+
name|rooms
index|[
literal|0
index|]
operator|.
name|getCapacity
argument_list|()
operator|+
literal|"</font>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|rooms
index|[
literal|0
index|]
operator|.
name|getCapacity
argument_list|()
argument_list|)
operator|)
block|,
operator|(
name|rooms
index|[
literal|1
index|]
operator|==
literal|null
condition|?
literal|""
else|:
name|html
condition|?
name|rooms
index|[
literal|1
index|]
operator|.
name|toString
argument_list|()
else|:
name|rooms
index|[
literal|1
index|]
operator|.
name|getName
argument_list|()
operator|)
block|,
operator|(
name|rooms
index|[
literal|1
index|]
operator|==
literal|null
condition|?
literal|""
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
name|rooms
index|[
literal|1
index|]
operator|.
name|getPreference
argument_list|()
argument_list|)
operator|+
literal|"'>"
operator|+
name|rooms
index|[
literal|1
index|]
operator|.
name|getCapacity
argument_list|()
operator|+
literal|"</font>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|rooms
index|[
literal|1
index|]
operator|.
name|getCapacity
argument_list|()
argument_list|)
operator|)
block|,
operator|(
name|rooms
index|[
literal|2
index|]
operator|==
literal|null
condition|?
literal|""
else|:
name|html
condition|?
name|rooms
index|[
literal|2
index|]
operator|.
name|toString
argument_list|()
else|:
name|rooms
index|[
literal|2
index|]
operator|.
name|getName
argument_list|()
operator|)
block|,
operator|(
name|rooms
index|[
literal|2
index|]
operator|==
literal|null
condition|?
literal|""
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
name|rooms
index|[
literal|2
index|]
operator|.
name|getPreference
argument_list|()
argument_list|)
operator|+
literal|"'>"
operator|+
name|rooms
index|[
literal|2
index|]
operator|.
name|getCapacity
argument_list|()
operator|+
literal|"</font>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|rooms
index|[
literal|2
index|]
operator|.
name|getCapacity
argument_list|()
argument_list|)
operator|)
block|,
operator|(
name|rooms
index|[
literal|3
index|]
operator|==
literal|null
condition|?
literal|""
else|:
name|html
condition|?
name|rooms
index|[
literal|3
index|]
operator|.
name|toString
argument_list|()
else|:
name|rooms
index|[
literal|2
index|]
operator|.
name|getName
argument_list|()
operator|)
block|,
operator|(
name|rooms
index|[
literal|3
index|]
operator|==
literal|null
condition|?
literal|""
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
name|rooms
index|[
literal|3
index|]
operator|.
name|getPreference
argument_list|()
argument_list|)
operator|+
literal|"'>"
operator|+
name|rooms
index|[
literal|3
index|]
operator|.
name|getCapacity
argument_list|()
operator|+
literal|"</font>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|rooms
index|[
literal|3
index|]
operator|.
name|getCapacity
argument_list|()
argument_list|)
operator|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getNrStudents
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getSeatingType
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriodOrd
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|(
name|rooms
index|[
literal|0
index|]
operator|==
literal|null
condition|?
literal|""
else|:
name|rooms
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
operator|)
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|(
name|rooms
index|[
literal|0
index|]
operator|==
literal|null
condition|?
literal|0
else|:
name|rooms
index|[
literal|0
index|]
operator|.
name|getCapacity
argument_list|()
operator|)
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|(
name|rooms
index|[
literal|1
index|]
operator|==
literal|null
condition|?
literal|""
else|:
name|rooms
index|[
literal|1
index|]
operator|.
name|getName
argument_list|()
operator|)
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|(
name|rooms
index|[
literal|1
index|]
operator|==
literal|null
condition|?
literal|0
else|:
name|rooms
index|[
literal|1
index|]
operator|.
name|getCapacity
argument_list|()
operator|)
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|(
name|rooms
index|[
literal|2
index|]
operator|==
literal|null
condition|?
literal|""
else|:
name|rooms
index|[
literal|2
index|]
operator|.
name|getName
argument_list|()
operator|)
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|(
name|rooms
index|[
literal|2
index|]
operator|==
literal|null
condition|?
literal|0
else|:
name|rooms
index|[
literal|2
index|]
operator|.
name|getCapacity
argument_list|()
operator|)
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|(
name|rooms
index|[
literal|3
index|]
operator|==
literal|null
condition|?
literal|""
else|:
name|rooms
index|[
literal|3
index|]
operator|.
name|getName
argument_list|()
operator|)
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|(
name|rooms
index|[
literal|3
index|]
operator|==
literal|null
condition|?
literal|0
else|:
name|rooms
index|[
literal|3
index|]
operator|.
name|getCapacity
argument_list|()
operator|)
argument_list|,
name|exam
argument_list|)
block|}
argument_list|,
name|exam
operator|.
name|getExamId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|table
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

