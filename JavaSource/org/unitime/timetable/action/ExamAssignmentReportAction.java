begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|PatternSyntaxException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|MultiComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
operator|.
name|HibernateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|WebTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|UserProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|ExamAssignmentReportForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentStatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Meeting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentalInstructorDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExamDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StudentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|WebSolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ExamSolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignmentInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamRoomInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignmentInfo
operator|.
name|BackToBackConflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignmentInfo
operator|.
name|DirectConflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignmentInfo
operator|.
name|DistributionConflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignmentInfo
operator|.
name|MoreThanTwoADayConflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignmentInfo
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamInfo
operator|.
name|ExamInstructorInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamInfo
operator|.
name|ExamSectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|ExportUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|LookupTables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|RoomAvailability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|PdfWebTable
import|;
end_import

begin_comment
comment|/**   * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"/examAssignmentReport"
argument_list|)
specifier|public
class|class
name|ExamAssignmentReportAction
extends|extends
name|Action
block|{
annotation|@
name|Autowired
name|SessionContext
name|sessionContext
decl_stmt|;
specifier|public
name|ActionForward
name|execute
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
name|ExamAssignmentReportForm
name|myForm
init|=
operator|(
name|ExamAssignmentReportForm
operator|)
name|form
decl_stmt|;
comment|// Check Access
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|ExaminationReports
argument_list|)
expr_stmt|;
name|String
name|op
init|=
operator|(
name|myForm
operator|.
name|getOp
argument_list|()
operator|!=
literal|null
condition|?
name|myForm
operator|.
name|getOp
argument_list|()
else|:
name|request
operator|.
name|getParameter
argument_list|(
literal|"op"
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
literal|"Export PDF"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
literal|"Apply"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|myForm
operator|.
name|save
argument_list|(
name|sessionContext
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"Refresh"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|myForm
operator|.
name|reset
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
name|myForm
operator|.
name|setCanSeeAll
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|DepartmentIndependent
argument_list|)
argument_list|)
expr_stmt|;
name|Session
name|session
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
decl_stmt|;
name|RoomAvailability
operator|.
name|setAvailabilityWarning
argument_list|(
name|request
argument_list|,
name|session
argument_list|,
name|myForm
operator|.
name|getExamType
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|myForm
operator|.
name|load
argument_list|(
name|sessionContext
argument_list|)
expr_stmt|;
name|myForm
operator|.
name|setSubjectAreas
argument_list|(
name|SubjectArea
operator|.
name|getUserSubjectAreas
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|ExamSolverProxy
name|solver
init|=
name|WebSolver
operator|.
name|getExamSolver
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|assignedExams
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|myForm
operator|.
name|getSubjectArea
argument_list|()
operator|!=
literal|null
operator|&&
name|myForm
operator|.
name|getSubjectArea
argument_list|()
operator|!=
literal|0
operator|&&
name|myForm
operator|.
name|getExamType
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|solver
operator|!=
literal|null
operator|&&
name|solver
operator|.
name|getExamTypeId
argument_list|()
operator|.
name|equals
argument_list|(
name|myForm
operator|.
name|getExamType
argument_list|()
argument_list|)
condition|)
name|assignedExams
operator|=
name|solver
operator|.
name|getAssignedExams
argument_list|(
name|myForm
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
expr_stmt|;
else|else
block|{
if|if
condition|(
name|ApplicationProperty
operator|.
name|ExaminationCacheConflicts
operator|.
name|isTrue
argument_list|()
operator|&&
name|myForm
operator|.
name|getSubjectArea
argument_list|()
operator|!=
literal|null
operator|&&
name|myForm
operator|.
name|getSubjectArea
argument_list|()
operator|>
literal|0
condition|)
name|assignedExams
operator|=
name|Exam
operator|.
name|findAssignedExams
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|myForm
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|myForm
operator|.
name|getExamType
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|assignedExams
operator|=
name|findAssignedExams
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|myForm
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|myForm
operator|.
name|getExamType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|WebTable
operator|.
name|setOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"examAssignmentReport["
operator|+
name|myForm
operator|.
name|getReport
argument_list|()
operator|+
literal|"].ord"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"ord"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|WebTable
name|table
init|=
name|getTable
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|true
argument_list|,
name|myForm
argument_list|,
name|assignedExams
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"Export PDF"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|&&
name|table
operator|!=
literal|null
condition|)
block|{
name|ExportUtils
operator|.
name|exportPDF
argument_list|(
name|getTable
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|false
argument_list|,
name|myForm
argument_list|,
name|assignedExams
argument_list|)
argument_list|,
name|WebTable
operator|.
name|getOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"examAssignmentReport["
operator|+
name|myForm
operator|.
name|getReport
argument_list|()
operator|+
literal|"].ord"
argument_list|)
argument_list|,
name|response
argument_list|,
literal|"xreport"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
literal|"Export CSV"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|&&
name|table
operator|!=
literal|null
condition|)
block|{
name|ExportUtils
operator|.
name|exportCSV
argument_list|(
name|getTable
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|false
argument_list|,
name|myForm
argument_list|,
name|assignedExams
argument_list|)
argument_list|,
name|WebTable
operator|.
name|getOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"examAssignmentReport["
operator|+
name|myForm
operator|.
name|getReport
argument_list|()
operator|+
literal|"].ord"
argument_list|)
argument_list|,
name|response
argument_list|,
literal|"xreport"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
name|myForm
operator|.
name|setTable
argument_list|(
name|table
operator|.
name|printTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"examAssignmentReport["
operator|+
name|myForm
operator|.
name|getReport
argument_list|()
operator|+
literal|"].ord"
argument_list|)
argument_list|)
argument_list|,
name|table
operator|.
name|getNrColumns
argument_list|()
argument_list|,
name|assignedExams
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"backId"
argument_list|)
operator|!=
literal|null
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
literal|"hash"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"backId"
argument_list|)
argument_list|)
expr_stmt|;
name|LookupTables
operator|.
name|setupExamTypes
argument_list|(
name|request
argument_list|,
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ExamTimetable
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"show"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TreeSet
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|findAssignedExams
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|Long
name|subjectAreaId
parameter_list|,
name|Long
name|examTypeId
parameter_list|)
throws|throws
name|Exception
block|{
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Exam
argument_list|>
name|exams
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select x from Exam x where x.session.uniqueId=:sessionId and x.examType.uniqueId=:examTypeId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examTypeId"
argument_list|,
name|examTypeId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|exams
operator|.
name|put
argument_list|(
name|exam
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|exam
argument_list|)
expr_stmt|;
block|}
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c from Class_ c, ExamOwner o where o.exam.session.uniqueId=:sessionId and o.exam.examType.uniqueId=:examTypeId and o.ownerType=:classType and c.uniqueId=o.ownerId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examTypeId"
argument_list|,
name|examTypeId
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"classType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeClass
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c from InstrOfferingConfig c, ExamOwner o where o.exam.session.uniqueId=:sessionId and o.exam.examType.uniqueId=:examTypeId and o.ownerType=:configType and c.uniqueId=o.ownerId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examTypeId"
argument_list|,
name|examTypeId
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"configType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeConfig
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c from CourseOffering c, ExamOwner o where o.exam.session.uniqueId=:sessionId and o.exam.examType.uniqueId=:examTypeId and o.ownerType=:courseType and c.uniqueId=o.ownerId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examTypeId"
argument_list|,
name|examTypeId
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"courseType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeCourse
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c from InstructionalOffering c, ExamOwner o where o.exam.session.uniqueId=:sessionId and o.exam.examType.uniqueId=:examTypeId and o.ownerType=:offeringType and c.uniqueId=o.ownerId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examTypeId"
argument_list|,
name|examTypeId
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"offeringType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeOffering
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|owner2students
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Exam
argument_list|>
argument_list|>
name|student2exams
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|>
name|owner2course2students
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select x.uniqueId, o.uniqueId, e.student.uniqueId, e.courseOffering.uniqueId from "
operator|+
literal|"Exam x inner join x.owners o, "
operator|+
literal|"StudentClassEnrollment e inner join e.clazz c "
operator|+
literal|"where x.session.uniqueId=:sessionId and x.examType.uniqueId=:examTypeId and "
operator|+
literal|"o.ownerType="
operator|+
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
operator|.
name|sOwnerTypeClass
operator|+
literal|" and "
operator|+
literal|"o.ownerId=c.uniqueId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examTypeId"
argument_list|,
name|examTypeId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|examId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Long
name|ownerId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|2
index|]
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|studentsOfOwner
init|=
name|owner2students
operator|.
name|get
argument_list|(
name|ownerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentsOfOwner
operator|==
literal|null
condition|)
block|{
name|studentsOfOwner
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|owner2students
operator|.
name|put
argument_list|(
name|ownerId
argument_list|,
name|studentsOfOwner
argument_list|)
expr_stmt|;
block|}
name|studentsOfOwner
operator|.
name|add
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Exam
argument_list|>
name|examsOfStudent
init|=
name|student2exams
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|examsOfStudent
operator|==
literal|null
condition|)
block|{
name|examsOfStudent
operator|=
operator|new
name|HashSet
argument_list|<
name|Exam
argument_list|>
argument_list|()
expr_stmt|;
name|student2exams
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|examsOfStudent
argument_list|)
expr_stmt|;
block|}
name|examsOfStudent
operator|.
name|add
argument_list|(
name|exams
operator|.
name|get
argument_list|(
name|examId
argument_list|)
argument_list|)
expr_stmt|;
name|Long
name|courseId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|3
index|]
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|course2students
init|=
name|owner2course2students
operator|.
name|get
argument_list|(
name|ownerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|course2students
operator|==
literal|null
condition|)
block|{
name|course2students
operator|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|owner2course2students
operator|.
name|put
argument_list|(
name|ownerId
argument_list|,
name|course2students
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Long
argument_list|>
name|studentsOfCourse
init|=
name|course2students
operator|.
name|get
argument_list|(
name|courseId
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentsOfCourse
operator|==
literal|null
condition|)
block|{
name|studentsOfCourse
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|course2students
operator|.
name|put
argument_list|(
name|courseId
argument_list|,
name|studentsOfCourse
argument_list|)
expr_stmt|;
block|}
name|studentsOfCourse
operator|.
name|add
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select x.uniqueId, o.uniqueId, e.student.uniqueId, e.courseOffering.uniqueId from "
operator|+
literal|"Exam x inner join x.owners o, "
operator|+
literal|"StudentClassEnrollment e inner join e.clazz c "
operator|+
literal|"inner join c.schedulingSubpart.instrOfferingConfig ioc "
operator|+
literal|"where x.session.uniqueId=:sessionId and x.examType.uniqueId=:examTypeId and "
operator|+
literal|"o.ownerType="
operator|+
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
operator|.
name|sOwnerTypeConfig
operator|+
literal|" and "
operator|+
literal|"o.ownerId=ioc.uniqueId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examTypeId"
argument_list|,
name|examTypeId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|examId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Long
name|ownerId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|2
index|]
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|studentsOfOwner
init|=
name|owner2students
operator|.
name|get
argument_list|(
name|ownerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentsOfOwner
operator|==
literal|null
condition|)
block|{
name|studentsOfOwner
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|owner2students
operator|.
name|put
argument_list|(
name|ownerId
argument_list|,
name|studentsOfOwner
argument_list|)
expr_stmt|;
block|}
name|studentsOfOwner
operator|.
name|add
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Exam
argument_list|>
name|examsOfStudent
init|=
name|student2exams
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|examsOfStudent
operator|==
literal|null
condition|)
block|{
name|examsOfStudent
operator|=
operator|new
name|HashSet
argument_list|<
name|Exam
argument_list|>
argument_list|()
expr_stmt|;
name|student2exams
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|examsOfStudent
argument_list|)
expr_stmt|;
block|}
name|examsOfStudent
operator|.
name|add
argument_list|(
name|exams
operator|.
name|get
argument_list|(
name|examId
argument_list|)
argument_list|)
expr_stmt|;
name|Long
name|courseId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|3
index|]
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|course2students
init|=
name|owner2course2students
operator|.
name|get
argument_list|(
name|ownerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|course2students
operator|==
literal|null
condition|)
block|{
name|course2students
operator|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|owner2course2students
operator|.
name|put
argument_list|(
name|ownerId
argument_list|,
name|course2students
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Long
argument_list|>
name|studentsOfCourse
init|=
name|course2students
operator|.
name|get
argument_list|(
name|courseId
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentsOfCourse
operator|==
literal|null
condition|)
block|{
name|studentsOfCourse
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|course2students
operator|.
name|put
argument_list|(
name|courseId
argument_list|,
name|studentsOfCourse
argument_list|)
expr_stmt|;
block|}
name|studentsOfCourse
operator|.
name|add
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select x.uniqueId, o.uniqueId, e.student.uniqueId, e.courseOffering.uniqueId from "
operator|+
literal|"Exam x inner join x.owners o, "
operator|+
literal|"StudentClassEnrollment e inner join e.courseOffering co "
operator|+
literal|"where x.session.uniqueId=:sessionId and x.examType.uniqueId=:examTypeId and "
operator|+
literal|"o.ownerType="
operator|+
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
operator|.
name|sOwnerTypeCourse
operator|+
literal|" and "
operator|+
literal|"o.ownerId=co.uniqueId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examTypeId"
argument_list|,
name|examTypeId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|examId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Long
name|ownerId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|2
index|]
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|studentsOfOwner
init|=
name|owner2students
operator|.
name|get
argument_list|(
name|ownerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentsOfOwner
operator|==
literal|null
condition|)
block|{
name|studentsOfOwner
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|owner2students
operator|.
name|put
argument_list|(
name|ownerId
argument_list|,
name|studentsOfOwner
argument_list|)
expr_stmt|;
block|}
name|studentsOfOwner
operator|.
name|add
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Exam
argument_list|>
name|examsOfStudent
init|=
name|student2exams
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|examsOfStudent
operator|==
literal|null
condition|)
block|{
name|examsOfStudent
operator|=
operator|new
name|HashSet
argument_list|<
name|Exam
argument_list|>
argument_list|()
expr_stmt|;
name|student2exams
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|examsOfStudent
argument_list|)
expr_stmt|;
block|}
name|examsOfStudent
operator|.
name|add
argument_list|(
name|exams
operator|.
name|get
argument_list|(
name|examId
argument_list|)
argument_list|)
expr_stmt|;
name|Long
name|courseId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|3
index|]
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|course2students
init|=
name|owner2course2students
operator|.
name|get
argument_list|(
name|ownerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|course2students
operator|==
literal|null
condition|)
block|{
name|course2students
operator|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|owner2course2students
operator|.
name|put
argument_list|(
name|ownerId
argument_list|,
name|course2students
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Long
argument_list|>
name|studentsOfCourse
init|=
name|course2students
operator|.
name|get
argument_list|(
name|courseId
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentsOfCourse
operator|==
literal|null
condition|)
block|{
name|studentsOfCourse
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|course2students
operator|.
name|put
argument_list|(
name|courseId
argument_list|,
name|studentsOfCourse
argument_list|)
expr_stmt|;
block|}
name|studentsOfCourse
operator|.
name|add
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select x.uniqueId, o.uniqueId, e.student.uniqueId, e.courseOffering.uniqueId from "
operator|+
literal|"Exam x inner join x.owners o, "
operator|+
literal|"StudentClassEnrollment e inner join e.courseOffering.instructionalOffering io "
operator|+
literal|"where x.session.uniqueId=:sessionId and x.examType.uniqueId=:examTypeId and "
operator|+
literal|"o.ownerType="
operator|+
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
operator|.
name|sOwnerTypeOffering
operator|+
literal|" and "
operator|+
literal|"o.ownerId=io.uniqueId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examTypeId"
argument_list|,
name|examTypeId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|examId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Long
name|ownerId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|2
index|]
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|studentsOfOwner
init|=
name|owner2students
operator|.
name|get
argument_list|(
name|ownerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentsOfOwner
operator|==
literal|null
condition|)
block|{
name|studentsOfOwner
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|owner2students
operator|.
name|put
argument_list|(
name|ownerId
argument_list|,
name|studentsOfOwner
argument_list|)
expr_stmt|;
block|}
name|studentsOfOwner
operator|.
name|add
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Exam
argument_list|>
name|examsOfStudent
init|=
name|student2exams
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|examsOfStudent
operator|==
literal|null
condition|)
block|{
name|examsOfStudent
operator|=
operator|new
name|HashSet
argument_list|<
name|Exam
argument_list|>
argument_list|()
expr_stmt|;
name|student2exams
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|examsOfStudent
argument_list|)
expr_stmt|;
block|}
name|examsOfStudent
operator|.
name|add
argument_list|(
name|exams
operator|.
name|get
argument_list|(
name|examId
argument_list|)
argument_list|)
expr_stmt|;
name|Long
name|courseId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|3
index|]
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|course2students
init|=
name|owner2course2students
operator|.
name|get
argument_list|(
name|ownerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|course2students
operator|==
literal|null
condition|)
block|{
name|course2students
operator|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|owner2course2students
operator|.
name|put
argument_list|(
name|ownerId
argument_list|,
name|course2students
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Long
argument_list|>
name|studentsOfCourse
init|=
name|course2students
operator|.
name|get
argument_list|(
name|courseId
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentsOfCourse
operator|==
literal|null
condition|)
block|{
name|studentsOfCourse
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|course2students
operator|.
name|put
argument_list|(
name|courseId
argument_list|,
name|studentsOfCourse
argument_list|)
expr_stmt|;
block|}
name|studentsOfCourse
operator|.
name|add
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Meeting
argument_list|>
argument_list|>
name|period2meetings
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select p.uniqueId, m from ClassEvent ce inner join ce.meetings m, ExamPeriod p "
operator|+
literal|"where p.startSlot - :travelTime< m.stopPeriod and m.startPeriod< p.startSlot + p.length + :travelTime and "
operator|+
name|HibernateUtil
operator|.
name|addDate
argument_list|(
literal|"p.session.examBeginDate"
argument_list|,
literal|"p.dateOffset"
argument_list|)
operator|+
literal|" = m.meetingDate and p.session.uniqueId=:sessionId and p.examType.uniqueId=:examTypeId"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"travelTime"
argument_list|,
name|ApplicationProperty
operator|.
name|ExaminationTravelTimeClass
operator|.
name|intValue
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examTypeId"
argument_list|,
name|examTypeId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|periodId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Meeting
name|meeting
init|=
operator|(
name|Meeting
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Set
argument_list|<
name|Meeting
argument_list|>
name|meetings
init|=
name|period2meetings
operator|.
name|get
argument_list|(
name|periodId
argument_list|)
decl_stmt|;
if|if
condition|(
name|meetings
operator|==
literal|null
condition|)
block|{
name|meetings
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|period2meetings
operator|.
name|put
argument_list|(
name|periodId
argument_list|,
name|meetings
argument_list|)
expr_stmt|;
block|}
name|meetings
operator|.
name|add
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select p.uniqueId, m from CourseEvent ce inner join ce.meetings m, ExamPeriod p "
operator|+
literal|"where ce.reqAttendance=true and m.approvalStatus = 1 and p.startSlot - :travelTime< m.stopPeriod and m.startPeriod< p.startSlot + p.length + :travelTime and "
operator|+
name|HibernateUtil
operator|.
name|addDate
argument_list|(
literal|"p.session.examBeginDate"
argument_list|,
literal|"p.dateOffset"
argument_list|)
operator|+
literal|" = m.meetingDate and p.session.uniqueId=:sessionId and p.examType.uniqueId=:examTypeId"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"travelTime"
argument_list|,
name|ApplicationProperty
operator|.
name|ExaminationTravelTimeCourse
operator|.
name|intValue
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examTypeId"
argument_list|,
name|examTypeId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|periodId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Meeting
name|meeting
init|=
operator|(
name|Meeting
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Set
argument_list|<
name|Meeting
argument_list|>
name|meetings
init|=
name|period2meetings
operator|.
name|get
argument_list|(
name|periodId
argument_list|)
decl_stmt|;
if|if
condition|(
name|meetings
operator|==
literal|null
condition|)
block|{
name|meetings
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|period2meetings
operator|.
name|put
argument_list|(
name|periodId
argument_list|,
name|meetings
argument_list|)
expr_stmt|;
block|}
name|meetings
operator|.
name|add
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select p.uniqueId, m from ExamEvent ce inner join ce.meetings m, ExamPeriod p "
operator|+
literal|"where ce.exam.examType.uniqueId != :examTypeId and m.approvalStatus = 1 and p.startSlot - :travelTime< m.stopPeriod and m.startPeriod< p.startSlot + p.length + :travelTime and "
operator|+
name|HibernateUtil
operator|.
name|addDate
argument_list|(
literal|"p.session.examBeginDate"
argument_list|,
literal|"p.dateOffset"
argument_list|)
operator|+
literal|" = m.meetingDate and p.session.uniqueId=:sessionId and p.examType.uniqueId=:examTypeId"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"travelTime"
argument_list|,
name|ApplicationProperty
operator|.
name|ExaminationTravelTimeCourse
operator|.
name|intValue
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examTypeId"
argument_list|,
name|examTypeId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|periodId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Meeting
name|meeting
init|=
operator|(
name|Meeting
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Set
argument_list|<
name|Meeting
argument_list|>
name|meetings
init|=
name|period2meetings
operator|.
name|get
argument_list|(
name|periodId
argument_list|)
decl_stmt|;
if|if
condition|(
name|meetings
operator|==
literal|null
condition|)
block|{
name|meetings
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|period2meetings
operator|.
name|put
argument_list|(
name|periodId
argument_list|,
name|meetings
argument_list|)
expr_stmt|;
block|}
name|meetings
operator|.
name|add
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
block|}
name|Parameters
name|p
init|=
operator|new
name|Parameters
argument_list|(
name|sessionId
argument_list|,
name|examTypeId
argument_list|)
decl_stmt|;
name|TreeSet
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|ret
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|subjectAreaId
operator|==
literal|null
operator|||
name|subjectAreaId
operator|<
literal|0
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select x from Exam x where "
operator|+
literal|"x.examType.uniqueId=:examTypeId and "
operator|+
literal|"x.session.uniqueId=:sessionId and x.assignedPeriod!=null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examTypeId"
argument_list|,
name|examTypeId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ExamAssignmentInfo
name|info
init|=
operator|new
name|ExamAssignmentInfo
argument_list|(
name|exam
argument_list|,
name|owner2students
argument_list|,
name|owner2course2students
argument_list|,
name|student2exams
argument_list|,
name|period2meetings
argument_list|,
name|p
argument_list|)
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct x from Exam x inner join x.owners o where "
operator|+
literal|"o.course.subjectArea.uniqueId=:subjectAreaId and "
operator|+
literal|"x.examType.uniqueId=:examTypeId and "
operator|+
literal|"x.session.uniqueId=:sessionId and x.assignedPeriod!=null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examTypeId"
argument_list|,
name|examTypeId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"subjectAreaId"
argument_list|,
name|subjectAreaId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ExamAssignmentInfo
name|info
init|=
operator|new
name|ExamAssignmentInfo
argument_list|(
name|exam
argument_list|,
name|owner2students
argument_list|,
name|owner2course2students
argument_list|,
name|student2exams
argument_list|,
name|period2meetings
argument_list|,
name|p
argument_list|)
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|boolean
name|match
parameter_list|(
name|ExamAssignmentReportForm
name|form
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|form
operator|.
name|getFilter
argument_list|()
operator|==
literal|null
operator|||
name|form
operator|.
name|getFilter
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|true
return|;
name|String
name|n
init|=
operator|(
name|name
operator|==
literal|null
condition|?
literal|""
else|:
name|name
operator|)
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
name|StringTokenizer
name|stk1
init|=
operator|new
name|StringTokenizer
argument_list|(
name|form
operator|.
name|getFilter
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|,
literal|";"
argument_list|)
decl_stmt|;
while|while
condition|(
name|stk1
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|StringTokenizer
name|stk2
init|=
operator|new
name|StringTokenizer
argument_list|(
name|stk1
operator|.
name|nextToken
argument_list|()
argument_list|,
literal|" ,"
argument_list|)
decl_stmt|;
name|boolean
name|match
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|match
operator|&&
name|stk2
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|token
init|=
name|stk2
operator|.
name|nextToken
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
continue|continue;
if|if
condition|(
name|token
operator|.
name|indexOf
argument_list|(
literal|'*'
argument_list|)
operator|>=
literal|0
operator|||
name|token
operator|.
name|indexOf
argument_list|(
literal|'?'
argument_list|)
operator|>=
literal|0
condition|)
block|{
try|try
block|{
name|String
name|tokenRegExp
init|=
literal|"\\s+"
operator|+
name|token
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"\\."
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\?"
argument_list|,
literal|".+"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\*"
argument_list|,
literal|".*"
argument_list|)
operator|+
literal|"\\s"
decl_stmt|;
if|if
condition|(
operator|!
name|Pattern
operator|.
name|compile
argument_list|(
name|tokenRegExp
argument_list|)
operator|.
name|matcher
argument_list|(
literal|" "
operator|+
name|n
operator|+
literal|" "
argument_list|)
operator|.
name|find
argument_list|()
condition|)
name|match
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PatternSyntaxException
name|e
parameter_list|)
block|{
name|match
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|n
operator|.
name|indexOf
argument_list|(
name|token
argument_list|)
operator|<
literal|0
condition|)
name|match
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|match
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|match
parameter_list|(
name|ExamAssignmentReportForm
name|form
parameter_list|,
name|ExamAssignment
name|exam
parameter_list|)
block|{
if|if
condition|(
name|exam
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|form
operator|.
name|getShowSections
argument_list|()
condition|)
block|{
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|exam
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|match
argument_list|(
name|form
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|match
argument_list|(
name|form
argument_list|,
name|exam
operator|.
name|getExamName
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
name|PdfWebTable
name|getTable
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|boolean
name|html
parameter_list|,
name|ExamAssignmentReportForm
name|form
parameter_list|,
name|Collection
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
parameter_list|)
block|{
if|if
condition|(
name|exams
operator|==
literal|null
operator|||
name|exams
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|ExamAssignmentReportForm
operator|.
name|sExamAssignmentReport
operator|.
name|equals
argument_list|(
name|form
operator|.
name|getReport
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|generateAssignmentReport
argument_list|(
name|html
argument_list|,
name|form
argument_list|,
name|exams
argument_list|)
return|;
block|}
if|else if
condition|(
name|ExamAssignmentReportForm
operator|.
name|sRoomAssignmentReport
operator|.
name|equals
argument_list|(
name|form
operator|.
name|getReport
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|generateRoomReport
argument_list|(
name|html
argument_list|,
name|form
argument_list|,
name|exams
argument_list|)
return|;
block|}
if|else if
condition|(
name|ExamAssignmentReportForm
operator|.
name|sPeriodUsage
operator|.
name|equals
argument_list|(
name|form
operator|.
name|getReport
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|generatePeriodUsageReport
argument_list|(
name|html
argument_list|,
name|form
argument_list|,
name|exams
argument_list|,
name|sessionId
argument_list|)
return|;
block|}
if|else if
condition|(
name|ExamAssignmentReportForm
operator|.
name|sNrExamsADay
operator|.
name|equals
argument_list|(
name|form
operator|.
name|getReport
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|generateNrExamsADayReport
argument_list|(
name|html
argument_list|,
name|form
argument_list|,
name|exams
argument_list|)
return|;
block|}
if|else if
condition|(
name|ExamAssignmentReportForm
operator|.
name|sRoomSplits
operator|.
name|equals
argument_list|(
name|form
operator|.
name|getReport
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|generateRoomSplitReport
argument_list|(
name|html
argument_list|,
name|form
argument_list|,
name|exams
argument_list|)
return|;
block|}
if|else if
condition|(
name|ExamAssignmentReportForm
operator|.
name|sViolatedDistributions
operator|.
name|equals
argument_list|(
name|form
operator|.
name|getReport
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|generateViolatedDistributionsReport
argument_list|(
name|html
argument_list|,
name|form
argument_list|,
name|exams
argument_list|)
return|;
block|}
if|else if
condition|(
name|ExamAssignmentReportForm
operator|.
name|sIndividualStudentConflicts
operator|.
name|equals
argument_list|(
name|form
operator|.
name|getReport
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|generateIndividualConflictsReport
argument_list|(
name|html
argument_list|,
name|sessionId
argument_list|,
name|form
argument_list|,
name|exams
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|UserProperty
operator|.
name|NameFormat
operator|.
name|get
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
if|else if
condition|(
name|ExamAssignmentReportForm
operator|.
name|sIndividualDirectStudentConflicts
operator|.
name|equals
argument_list|(
name|form
operator|.
name|getReport
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|generateIndividualConflictsReport
argument_list|(
name|html
argument_list|,
name|sessionId
argument_list|,
name|form
argument_list|,
name|exams
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|UserProperty
operator|.
name|NameFormat
operator|.
name|get
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
if|else if
condition|(
name|ExamAssignmentReportForm
operator|.
name|sIndividualBackToBackStudentConflicts
operator|.
name|equals
argument_list|(
name|form
operator|.
name|getReport
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|generateIndividualConflictsReport
argument_list|(
name|html
argument_list|,
name|sessionId
argument_list|,
name|form
argument_list|,
name|exams
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|UserProperty
operator|.
name|NameFormat
operator|.
name|get
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
if|else if
condition|(
name|ExamAssignmentReportForm
operator|.
name|sIndividualMore2ADayStudentConflicts
operator|.
name|equals
argument_list|(
name|form
operator|.
name|getReport
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|generateIndividualConflictsReport
argument_list|(
name|html
argument_list|,
name|sessionId
argument_list|,
name|form
argument_list|,
name|exams
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|UserProperty
operator|.
name|NameFormat
operator|.
name|get
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
if|else if
condition|(
name|ExamAssignmentReportForm
operator|.
name|sIndividualInstructorConflicts
operator|.
name|equals
argument_list|(
name|form
operator|.
name|getReport
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|generateIndividualConflictsReport
argument_list|(
name|html
argument_list|,
name|sessionId
argument_list|,
name|form
argument_list|,
name|exams
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|UserProperty
operator|.
name|NameFormat
operator|.
name|get
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
if|else if
condition|(
name|ExamAssignmentReportForm
operator|.
name|sIndividualDirectInstructorConflicts
operator|.
name|equals
argument_list|(
name|form
operator|.
name|getReport
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|generateIndividualConflictsReport
argument_list|(
name|html
argument_list|,
name|sessionId
argument_list|,
name|form
argument_list|,
name|exams
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|UserProperty
operator|.
name|NameFormat
operator|.
name|get
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
if|else if
condition|(
name|ExamAssignmentReportForm
operator|.
name|sIndividualBackToBackInstructorConflicts
operator|.
name|equals
argument_list|(
name|form
operator|.
name|getReport
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|generateIndividualConflictsReport
argument_list|(
name|html
argument_list|,
name|sessionId
argument_list|,
name|form
argument_list|,
name|exams
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|UserProperty
operator|.
name|NameFormat
operator|.
name|get
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
if|else if
condition|(
name|ExamAssignmentReportForm
operator|.
name|sIndividualMore2ADayInstructorConflicts
operator|.
name|equals
argument_list|(
name|form
operator|.
name|getReport
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|generateIndividualConflictsReport
argument_list|(
name|html
argument_list|,
name|sessionId
argument_list|,
name|form
argument_list|,
name|exams
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|UserProperty
operator|.
name|NameFormat
operator|.
name|get
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
if|else if
condition|(
name|ExamAssignmentReportForm
operator|.
name|sDirectStudentConflicts
operator|.
name|equals
argument_list|(
name|form
operator|.
name|getReport
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|generateDirectConflictsReport
argument_list|(
name|html
argument_list|,
name|form
argument_list|,
name|exams
argument_list|,
literal|true
argument_list|)
return|;
block|}
if|else if
condition|(
name|ExamAssignmentReportForm
operator|.
name|sBackToBackStudentConflicts
operator|.
name|equals
argument_list|(
name|form
operator|.
name|getReport
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|generateBackToBackConflictsReport
argument_list|(
name|html
argument_list|,
name|form
argument_list|,
name|exams
argument_list|,
literal|true
argument_list|)
return|;
block|}
if|else if
condition|(
name|ExamAssignmentReportForm
operator|.
name|sMore2ADayStudentConflicts
operator|.
name|equals
argument_list|(
name|form
operator|.
name|getReport
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|generate2MoreADayConflictsReport
argument_list|(
name|html
argument_list|,
name|form
argument_list|,
name|exams
argument_list|,
literal|true
argument_list|)
return|;
block|}
if|else if
condition|(
name|ExamAssignmentReportForm
operator|.
name|sDirectInstructorConflicts
operator|.
name|equals
argument_list|(
name|form
operator|.
name|getReport
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|generateDirectConflictsReport
argument_list|(
name|html
argument_list|,
name|form
argument_list|,
name|exams
argument_list|,
literal|false
argument_list|)
return|;
block|}
if|else if
condition|(
name|ExamAssignmentReportForm
operator|.
name|sBackToBackInstructorConflicts
operator|.
name|equals
argument_list|(
name|form
operator|.
name|getReport
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|generateBackToBackConflictsReport
argument_list|(
name|html
argument_list|,
name|form
argument_list|,
name|exams
argument_list|,
literal|false
argument_list|)
return|;
block|}
if|else if
condition|(
name|ExamAssignmentReportForm
operator|.
name|sMore2ADayInstructorConflicts
operator|.
name|equals
argument_list|(
name|form
operator|.
name|getReport
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|generate2MoreADayConflictsReport
argument_list|(
name|html
argument_list|,
name|form
argument_list|,
name|exams
argument_list|,
literal|false
argument_list|)
return|;
block|}
if|else if
condition|(
name|ExamAssignmentReportForm
operator|.
name|sIndividualStudentSchedule
operator|.
name|equals
argument_list|(
name|form
operator|.
name|getReport
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|generateIndividualAssignmentReport
argument_list|(
name|html
argument_list|,
name|sessionId
argument_list|,
name|form
argument_list|,
name|exams
argument_list|,
literal|true
argument_list|,
name|UserProperty
operator|.
name|NameFormat
operator|.
name|get
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
if|else if
condition|(
name|ExamAssignmentReportForm
operator|.
name|sIndividualInstructorSchedule
operator|.
name|equals
argument_list|(
name|form
operator|.
name|getReport
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|generateIndividualAssignmentReport
argument_list|(
name|html
argument_list|,
name|sessionId
argument_list|,
name|form
argument_list|,
name|exams
argument_list|,
literal|false
argument_list|,
name|UserProperty
operator|.
name|NameFormat
operator|.
name|get
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
if|else if
condition|(
name|ExamAssignmentReportForm
operator|.
name|sStatistics
operator|.
name|equals
argument_list|(
name|form
operator|.
name|getReport
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|generateStatisticsReport
argument_list|(
name|html
argument_list|,
name|sessionId
argument_list|,
name|form
argument_list|,
name|exams
argument_list|)
return|;
block|}
else|else
return|return
literal|null
return|;
block|}
specifier|private
name|PdfWebTable
name|generateAssignmentReport
parameter_list|(
name|boolean
name|html
parameter_list|,
name|ExamAssignmentReportForm
name|form
parameter_list|,
name|Collection
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
parameter_list|)
block|{
name|String
name|nl
init|=
operator|(
name|html
condition|?
literal|"<br>"
else|:
literal|"\n"
operator|)
decl_stmt|;
name|PdfWebTable
name|table
init|=
operator|new
name|PdfWebTable
argument_list|(
literal|10
argument_list|,
name|form
operator|.
name|getReport
argument_list|()
argument_list|,
literal|"examAssignmentReport.do?ord=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
operator|(
name|form
operator|.
name|getShowSections
argument_list|()
condition|?
literal|"Class / Course"
else|:
literal|"Examination"
operator|)
block|,
literal|"Enrollment"
block|,
literal|"Seating"
operator|+
name|nl
operator|+
literal|"Type"
block|,
literal|"Date"
block|,
literal|"Time"
block|,
literal|"Room"
block|,
literal|"Capacity"
block|,
literal|"Instructor"
block|,
literal|"Student"
operator|+
name|nl
operator|+
literal|"Conflicts"
block|,
literal|"Instructor"
operator|+
name|nl
operator|+
literal|"Conflicts"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"right"
block|,
literal|"center"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"right"
block|,
literal|"left"
block|,
literal|"center"
block|,
literal|"center"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
decl_stmt|;
name|table
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap"
argument_list|)
expr_stmt|;
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|exams
control|)
block|{
if|if
condition|(
name|form
operator|.
name|getShowSections
argument_list|()
condition|)
block|{
name|boolean
name|firstSection
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|exam
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|match
argument_list|(
name|form
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
continue|continue;
name|int
name|idc
init|=
name|exam
operator|.
name|getNrInstructorDirectConflicts
argument_list|(
name|section
argument_list|)
decl_stmt|;
name|String
name|idcStr
init|=
operator|(
name|idc
operator|<=
literal|0
condition|?
literal|"0"
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"P"
argument_list|)
operator|+
literal|"'>"
operator|+
name|idc
operator|+
literal|"</font>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|idc
argument_list|)
operator|)
decl_stmt|;
name|int
name|im2d
init|=
name|exam
operator|.
name|getNrInstructorMoreThanTwoConflicts
argument_list|(
name|section
argument_list|)
decl_stmt|;
name|String
name|im2dStr
init|=
operator|(
name|im2d
operator|<=
literal|0
condition|?
literal|"0"
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"2"
argument_list|)
operator|+
literal|"'>"
operator|+
name|im2d
operator|+
literal|"</font>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|im2d
argument_list|)
operator|)
decl_stmt|;
name|int
name|ibtb
init|=
name|exam
operator|.
name|getNrInstructorBackToBackConflicts
argument_list|(
name|section
argument_list|)
decl_stmt|;
name|int
name|idbtb
init|=
name|exam
operator|.
name|getNrInstructorDistanceBackToBackConflicts
argument_list|(
name|section
argument_list|)
decl_stmt|;
name|String
name|ibtbStr
init|=
operator|(
name|ibtb
operator|<=
literal|0
operator|&&
name|idbtb
operator|<=
literal|0
condition|?
literal|"0"
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"1"
argument_list|)
operator|+
literal|"'>"
operator|+
name|ibtb
operator|+
operator|(
name|idbtb
operator|>
literal|0
condition|?
literal|" (d:"
operator|+
name|idbtb
operator|+
literal|")"
else|:
literal|""
operator|)
operator|+
literal|"</font>"
else|:
name|ibtb
operator|+
operator|(
name|idbtb
operator|>
literal|0
condition|?
literal|" (d:"
operator|+
name|idbtb
operator|+
literal|")"
else|:
literal|""
operator|)
operator|)
decl_stmt|;
name|int
name|dc
init|=
name|exam
operator|.
name|getNrDirectConflicts
argument_list|(
name|section
argument_list|)
decl_stmt|;
name|String
name|dcStr
init|=
operator|(
name|dc
operator|<=
literal|0
condition|?
literal|"0"
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"P"
argument_list|)
operator|+
literal|"'>"
operator|+
name|dc
operator|+
literal|"</font>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|dc
argument_list|)
operator|)
decl_stmt|;
name|int
name|m2d
init|=
name|exam
operator|.
name|getNrMoreThanTwoConflicts
argument_list|(
name|section
argument_list|)
decl_stmt|;
name|String
name|m2dStr
init|=
operator|(
name|m2d
operator|<=
literal|0
condition|?
literal|"0"
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"2"
argument_list|)
operator|+
literal|"'>"
operator|+
name|m2d
operator|+
literal|"</font>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|m2d
argument_list|)
operator|)
decl_stmt|;
name|int
name|btb
init|=
name|exam
operator|.
name|getNrBackToBackConflicts
argument_list|(
name|section
argument_list|)
decl_stmt|;
name|int
name|dbtb
init|=
name|exam
operator|.
name|getNrDistanceBackToBackConflicts
argument_list|(
name|section
argument_list|)
decl_stmt|;
name|String
name|btbStr
init|=
operator|(
name|btb
operator|<=
literal|0
operator|&&
name|dbtb
operator|<=
literal|0
condition|?
literal|"0"
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"1"
argument_list|)
operator|+
literal|"'>"
operator|+
name|btb
operator|+
operator|(
name|dbtb
operator|>
literal|0
condition|?
literal|" (d:"
operator|+
name|dbtb
operator|+
literal|")"
else|:
literal|""
operator|)
operator|+
literal|"</font>"
else|:
name|btb
operator|+
operator|(
name|dbtb
operator|>
literal|0
condition|?
literal|" (d:"
operator|+
name|dbtb
operator|+
literal|")"
else|:
literal|""
operator|)
operator|)
decl_stmt|;
name|table
operator|.
name|addLine
argument_list|(
literal|"onClick=\"document.location='examDetail.action?examId="
operator|+
name|exam
operator|.
name|getExamId
argument_list|()
operator|+
literal|"';\""
argument_list|,
operator|new
name|String
index|[]
block|{
operator|(
name|html
condition|?
literal|"<a name='"
operator|+
name|exam
operator|.
name|getExamId
argument_list|()
operator|+
literal|"'>"
else|:
literal|""
operator|)
operator|+
name|section
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|html
condition|?
literal|"</a>"
else|:
literal|""
operator|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|section
operator|.
name|getNrStudents
argument_list|()
argument_list|)
block|,
name|exam
operator|.
name|getSeatingTypeLabel
argument_list|()
block|,
name|exam
operator|.
name|getDate
argument_list|(
name|html
argument_list|)
block|,
name|exam
operator|.
name|getTime
argument_list|(
name|html
argument_list|)
block|,
name|exam
operator|.
name|getRoomsName
argument_list|(
name|html
argument_list|,
literal|", "
argument_list|)
block|,
name|exam
operator|.
name|getRoomsCapacity
argument_list|(
name|html
argument_list|,
literal|", "
argument_list|)
block|,
name|exam
operator|.
name|getInstructorName
argument_list|(
literal|"; "
argument_list|)
block|,
operator|(
name|dc
operator|==
literal|0
operator|&&
name|m2d
operator|==
literal|0
operator|&&
name|btb
operator|==
literal|0
operator|&&
name|dbtb
operator|==
literal|0
condition|?
literal|""
else|:
name|dcStr
operator|+
literal|", "
operator|+
name|m2dStr
operator|+
literal|", "
operator|+
name|btbStr
operator|)
block|,
operator|(
name|idc
operator|==
literal|0
operator|&&
name|im2d
operator|==
literal|0
operator|&&
name|ibtb
operator|==
literal|0
operator|&&
name|idbtb
operator|==
literal|0
condition|?
literal|""
else|:
name|idcStr
operator|+
literal|", "
operator|+
name|im2dStr
operator|+
literal|", "
operator|+
name|ibtbStr
operator|)
block|,                             }
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|section
operator|.
name|getNrStudents
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getSeatingType
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriodOrd
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getRoomsName
argument_list|(
literal|":"
argument_list|)
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|exam
operator|.
name|getRoomsCapacity
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getInstructorName
argument_list|(
literal|":"
argument_list|)
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|dc
argument_list|,
operator|-
name|m2d
argument_list|,
operator|-
name|btb
argument_list|,
operator|-
name|dbtb
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|idc
argument_list|,
operator|-
name|im2d
argument_list|,
operator|-
name|ibtb
argument_list|,
operator|-
name|idbtb
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|}
argument_list|,
operator|(
name|firstSection
condition|?
name|exam
operator|.
name|getExamId
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|null
operator|)
argument_list|)
expr_stmt|;
name|firstSection
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|match
argument_list|(
name|form
argument_list|,
name|exam
operator|.
name|getExamName
argument_list|()
argument_list|)
condition|)
continue|continue;
name|int
name|idc
init|=
name|exam
operator|.
name|getNrInstructorDirectConflicts
argument_list|()
decl_stmt|;
name|String
name|idcStr
init|=
operator|(
name|idc
operator|<=
literal|0
condition|?
literal|"0"
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"P"
argument_list|)
operator|+
literal|"'>"
operator|+
name|idc
operator|+
literal|"</font>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|idc
argument_list|)
operator|)
decl_stmt|;
name|int
name|im2d
init|=
name|exam
operator|.
name|getNrInstructorMoreThanTwoConflicts
argument_list|()
decl_stmt|;
name|String
name|im2dStr
init|=
operator|(
name|im2d
operator|<=
literal|0
condition|?
literal|"0"
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"2"
argument_list|)
operator|+
literal|"'>"
operator|+
name|im2d
operator|+
literal|"</font>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|im2d
argument_list|)
operator|)
decl_stmt|;
name|int
name|ibtb
init|=
name|exam
operator|.
name|getNrInstructorBackToBackConflicts
argument_list|()
decl_stmt|;
name|int
name|idbtb
init|=
name|exam
operator|.
name|getNrInstructorDistanceBackToBackConflicts
argument_list|()
decl_stmt|;
name|String
name|ibtbStr
init|=
operator|(
name|ibtb
operator|<=
literal|0
operator|&&
name|idbtb
operator|<=
literal|0
condition|?
literal|"0"
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"1"
argument_list|)
operator|+
literal|"'>"
operator|+
name|ibtb
operator|+
operator|(
name|idbtb
operator|>
literal|0
condition|?
literal|" (d:"
operator|+
name|idbtb
operator|+
literal|")"
else|:
literal|""
operator|)
operator|+
literal|"</font>"
else|:
name|ibtb
operator|+
operator|(
name|idbtb
operator|>
literal|0
condition|?
literal|" (d:"
operator|+
name|idbtb
operator|+
literal|")"
else|:
literal|""
operator|)
operator|)
decl_stmt|;
name|int
name|dc
init|=
name|exam
operator|.
name|getNrDirectConflicts
argument_list|()
decl_stmt|;
name|String
name|dcStr
init|=
operator|(
name|dc
operator|<=
literal|0
condition|?
literal|"0"
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"P"
argument_list|)
operator|+
literal|"'>"
operator|+
name|dc
operator|+
literal|"</font>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|dc
argument_list|)
operator|)
decl_stmt|;
name|int
name|m2d
init|=
name|exam
operator|.
name|getNrMoreThanTwoConflicts
argument_list|()
decl_stmt|;
name|String
name|m2dStr
init|=
operator|(
name|m2d
operator|<=
literal|0
condition|?
literal|"0"
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"2"
argument_list|)
operator|+
literal|"'>"
operator|+
name|m2d
operator|+
literal|"</font>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|m2d
argument_list|)
operator|)
decl_stmt|;
name|int
name|btb
init|=
name|exam
operator|.
name|getNrBackToBackConflicts
argument_list|()
decl_stmt|;
name|int
name|dbtb
init|=
name|exam
operator|.
name|getNrDistanceBackToBackConflicts
argument_list|()
decl_stmt|;
name|String
name|btbStr
init|=
operator|(
name|btb
operator|<=
literal|0
operator|&&
name|dbtb
operator|<=
literal|0
condition|?
literal|"0"
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"1"
argument_list|)
operator|+
literal|"'>"
operator|+
name|btb
operator|+
operator|(
name|dbtb
operator|>
literal|0
condition|?
literal|" (d:"
operator|+
name|dbtb
operator|+
literal|")"
else|:
literal|""
operator|)
operator|+
literal|"</font>"
else|:
name|btb
operator|+
operator|(
name|dbtb
operator|>
literal|0
condition|?
literal|" (d:"
operator|+
name|dbtb
operator|+
literal|")"
else|:
literal|""
operator|)
operator|)
decl_stmt|;
name|table
operator|.
name|addLine
argument_list|(
literal|"onClick=\"document.location='examDetail.action?examId="
operator|+
name|exam
operator|.
name|getExamId
argument_list|()
operator|+
literal|"';\""
argument_list|,
operator|new
name|String
index|[]
block|{
operator|(
name|html
condition|?
literal|"<a name='"
operator|+
name|exam
operator|.
name|getExamId
argument_list|()
operator|+
literal|"'>"
else|:
literal|""
operator|)
operator|+
name|exam
operator|.
name|getExamName
argument_list|()
operator|+
operator|(
name|html
condition|?
literal|"</a>"
else|:
literal|""
operator|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|exam
operator|.
name|getNrStudents
argument_list|()
argument_list|)
block|,
name|exam
operator|.
name|getSeatingTypeLabel
argument_list|()
block|,
name|exam
operator|.
name|getDate
argument_list|(
name|html
argument_list|)
block|,
name|exam
operator|.
name|getTime
argument_list|(
name|html
argument_list|)
block|,
name|exam
operator|.
name|getRoomsName
argument_list|(
name|html
argument_list|,
literal|", "
argument_list|)
block|,
name|exam
operator|.
name|getRoomsCapacity
argument_list|(
name|html
argument_list|,
literal|", "
argument_list|)
block|,
name|exam
operator|.
name|getInstructorName
argument_list|(
literal|"; "
argument_list|)
block|,
operator|(
name|dc
operator|==
literal|0
operator|&&
name|m2d
operator|==
literal|0
operator|&&
name|btb
operator|==
literal|0
operator|&&
name|dbtb
operator|==
literal|0
condition|?
literal|""
else|:
name|dcStr
operator|+
literal|", "
operator|+
name|m2dStr
operator|+
literal|", "
operator|+
name|btbStr
operator|)
block|,
operator|(
name|idc
operator|==
literal|0
operator|&&
name|im2d
operator|==
literal|0
operator|&&
name|ibtb
operator|==
literal|0
operator|&&
name|idbtb
operator|==
literal|0
condition|?
literal|""
else|:
name|idcStr
operator|+
literal|", "
operator|+
name|im2dStr
operator|+
literal|", "
operator|+
name|ibtbStr
operator|)
block|,                         }
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|exam
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getNrStudents
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getSeatingType
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriodOrd
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getRoomsName
argument_list|(
literal|":"
argument_list|)
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|exam
operator|.
name|getRoomsCapacity
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getInstructorName
argument_list|(
literal|":"
argument_list|)
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|dc
argument_list|,
operator|-
name|m2d
argument_list|,
operator|-
name|btb
argument_list|,
operator|-
name|dbtb
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|idc
argument_list|,
operator|-
name|im2d
argument_list|,
operator|-
name|ibtb
argument_list|,
operator|-
name|idbtb
argument_list|,
name|exam
argument_list|)
block|}
argument_list|,
name|exam
operator|.
name|getExamId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|table
return|;
block|}
specifier|private
name|PdfWebTable
name|generateRoomReport
parameter_list|(
name|boolean
name|html
parameter_list|,
name|ExamAssignmentReportForm
name|form
parameter_list|,
name|Collection
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
parameter_list|)
block|{
name|String
name|nl
init|=
operator|(
name|html
condition|?
literal|"<br>"
else|:
literal|"\n"
operator|)
decl_stmt|;
name|PdfWebTable
name|table
init|=
operator|new
name|PdfWebTable
argument_list|(
literal|11
argument_list|,
name|form
operator|.
name|getReport
argument_list|()
argument_list|,
literal|"examAssignmentReport.do?ord=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Room"
block|,
literal|"Capacity"
block|,
literal|"Exam"
operator|+
name|nl
operator|+
literal|"Capacity"
block|,
literal|"Date"
block|,
literal|"Time"
block|,
operator|(
name|form
operator|.
name|getShowSections
argument_list|()
condition|?
literal|"Class / Course"
else|:
literal|"Examination"
operator|)
block|,
literal|"Enrollment"
block|,
literal|"Seating"
operator|+
name|nl
operator|+
literal|"Type"
block|,
literal|"Instructor"
block|,
literal|"Student"
operator|+
name|nl
operator|+
literal|"Conflicts"
block|,
literal|"Instructor"
operator|+
name|nl
operator|+
literal|"Conflicts"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"right"
block|,
literal|"center"
block|,
literal|"left"
block|,
literal|"center"
block|,
literal|"center"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
decl_stmt|;
name|table
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap"
argument_list|)
expr_stmt|;
name|table
operator|.
name|setBlankWhenSame
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|exams
control|)
block|{
name|boolean
name|match
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ExamRoomInfo
name|room
range|:
name|exam
operator|.
name|getRooms
argument_list|()
control|)
block|{
if|if
condition|(
name|match
argument_list|(
name|form
argument_list|,
name|room
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|match
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|match
condition|)
continue|continue;
if|if
condition|(
name|form
operator|.
name|getShowSections
argument_list|()
condition|)
block|{
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|exam
operator|.
name|getSections
argument_list|()
control|)
block|{
name|int
name|idc
init|=
name|exam
operator|.
name|getNrInstructorDirectConflicts
argument_list|(
name|section
argument_list|)
decl_stmt|;
name|String
name|idcStr
init|=
operator|(
name|idc
operator|<=
literal|0
condition|?
literal|"0"
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"P"
argument_list|)
operator|+
literal|"'>"
operator|+
name|idc
operator|+
literal|"</font>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|idc
argument_list|)
operator|)
decl_stmt|;
name|int
name|im2d
init|=
name|exam
operator|.
name|getNrInstructorMoreThanTwoConflicts
argument_list|(
name|section
argument_list|)
decl_stmt|;
name|String
name|im2dStr
init|=
operator|(
name|im2d
operator|<=
literal|0
condition|?
literal|"0"
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"2"
argument_list|)
operator|+
literal|"'>"
operator|+
name|im2d
operator|+
literal|"</font>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|im2d
argument_list|)
operator|)
decl_stmt|;
name|int
name|ibtb
init|=
name|exam
operator|.
name|getNrInstructorBackToBackConflicts
argument_list|(
name|section
argument_list|)
decl_stmt|;
name|int
name|idbtb
init|=
name|exam
operator|.
name|getNrInstructorDistanceBackToBackConflicts
argument_list|(
name|section
argument_list|)
decl_stmt|;
name|String
name|ibtbStr
init|=
operator|(
name|ibtb
operator|<=
literal|0
operator|&&
name|idbtb
operator|<=
literal|0
condition|?
literal|"0"
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"1"
argument_list|)
operator|+
literal|"'>"
operator|+
name|ibtb
operator|+
operator|(
name|idbtb
operator|>
literal|0
condition|?
literal|" (d:"
operator|+
name|idbtb
operator|+
literal|")"
else|:
literal|""
operator|)
operator|+
literal|"</font>"
else|:
name|ibtb
operator|+
operator|(
name|idbtb
operator|>
literal|0
condition|?
literal|" (d:"
operator|+
name|idbtb
operator|+
literal|")"
else|:
literal|""
operator|)
operator|)
decl_stmt|;
name|int
name|dc
init|=
name|exam
operator|.
name|getNrDirectConflicts
argument_list|(
name|section
argument_list|)
decl_stmt|;
name|String
name|dcStr
init|=
operator|(
name|dc
operator|<=
literal|0
condition|?
literal|"0"
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"P"
argument_list|)
operator|+
literal|"'>"
operator|+
name|dc
operator|+
literal|"</font>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|dc
argument_list|)
operator|)
decl_stmt|;
name|int
name|m2d
init|=
name|exam
operator|.
name|getNrMoreThanTwoConflicts
argument_list|(
name|section
argument_list|)
decl_stmt|;
name|String
name|m2dStr
init|=
operator|(
name|m2d
operator|<=
literal|0
condition|?
literal|"0"
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"2"
argument_list|)
operator|+
literal|"'>"
operator|+
name|m2d
operator|+
literal|"</font>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|m2d
argument_list|)
operator|)
decl_stmt|;
name|int
name|btb
init|=
name|exam
operator|.
name|getNrBackToBackConflicts
argument_list|(
name|section
argument_list|)
decl_stmt|;
name|int
name|dbtb
init|=
name|exam
operator|.
name|getNrDistanceBackToBackConflicts
argument_list|(
name|section
argument_list|)
decl_stmt|;
name|String
name|btbStr
init|=
operator|(
name|btb
operator|<=
literal|0
operator|&&
name|dbtb
operator|<=
literal|0
condition|?
literal|"0"
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"1"
argument_list|)
operator|+
literal|"'>"
operator|+
name|btb
operator|+
operator|(
name|dbtb
operator|>
literal|0
condition|?
literal|" (d:"
operator|+
name|dbtb
operator|+
literal|")"
else|:
literal|""
operator|)
operator|+
literal|"</font>"
else|:
name|btb
operator|+
operator|(
name|dbtb
operator|>
literal|0
condition|?
literal|" (d:"
operator|+
name|dbtb
operator|+
literal|")"
else|:
literal|""
operator|)
operator|)
decl_stmt|;
name|boolean
name|firstRoom
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ExamRoomInfo
name|room
range|:
name|exam
operator|.
name|getRooms
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|match
argument_list|(
name|form
argument_list|,
name|room
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
continue|continue;
name|table
operator|.
name|addLine
argument_list|(
literal|"onClick=\"document.location='examDetail.action?examId="
operator|+
name|exam
operator|.
name|getExamId
argument_list|()
operator|+
literal|"';\""
argument_list|,
operator|new
name|String
index|[]
block|{
name|room
operator|.
name|getName
argument_list|()
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|room
operator|.
name|getCapacity
argument_list|()
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|room
operator|.
name|getExamCapacity
argument_list|()
argument_list|)
block|,
name|exam
operator|.
name|getDate
argument_list|(
name|html
argument_list|)
block|,
name|exam
operator|.
name|getTime
argument_list|(
name|html
argument_list|)
block|,
operator|(
name|html
condition|?
literal|"<a name='"
operator|+
name|exam
operator|.
name|getExamId
argument_list|()
operator|+
literal|"'>"
else|:
literal|""
operator|)
operator|+
name|section
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|html
condition|?
literal|"</a>"
else|:
literal|""
operator|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|section
operator|.
name|getNrStudents
argument_list|()
argument_list|)
block|,
name|exam
operator|.
name|getSeatingTypeLabel
argument_list|()
block|,
name|exam
operator|.
name|getInstructorName
argument_list|(
literal|"; "
argument_list|)
block|,
operator|(
name|dc
operator|==
literal|0
operator|&&
name|m2d
operator|==
literal|0
operator|&&
name|btb
operator|==
literal|0
operator|&&
name|dbtb
operator|==
literal|0
condition|?
literal|""
else|:
name|dcStr
operator|+
literal|", "
operator|+
name|m2dStr
operator|+
literal|", "
operator|+
name|btbStr
operator|)
block|,
operator|(
name|idc
operator|==
literal|0
operator|&&
name|im2d
operator|==
literal|0
operator|&&
name|ibtb
operator|==
literal|0
operator|&&
name|idbtb
operator|==
literal|0
condition|?
literal|""
else|:
name|idcStr
operator|+
literal|", "
operator|+
name|im2dStr
operator|+
literal|", "
operator|+
name|ibtbStr
operator|)
block|,                                 }
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|room
operator|.
name|getCapacity
argument_list|()
argument_list|,
name|room
operator|.
name|getName
argument_list|()
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|room
operator|.
name|getExamCapacity
argument_list|()
argument_list|,
name|room
operator|.
name|getName
argument_list|()
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
operator|.
name|getPeriodOrd
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|,
operator|-
name|section
operator|.
name|getNrStudents
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
operator|.
name|getSeatingType
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
operator|.
name|getInstructorName
argument_list|(
literal|":"
argument_list|)
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|,
operator|-
name|dc
argument_list|,
operator|-
name|m2d
argument_list|,
operator|-
name|btb
argument_list|,
operator|-
name|dbtb
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|,
operator|-
name|idc
argument_list|,
operator|-
name|im2d
argument_list|,
operator|-
name|ibtb
argument_list|,
operator|-
name|idbtb
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|}
argument_list|,
operator|(
name|firstRoom
condition|?
name|exam
operator|.
name|getExamId
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|null
operator|)
argument_list|)
expr_stmt|;
name|firstRoom
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|int
name|idc
init|=
name|exam
operator|.
name|getNrInstructorDirectConflicts
argument_list|()
decl_stmt|;
name|String
name|idcStr
init|=
operator|(
name|idc
operator|<=
literal|0
condition|?
literal|"0"
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"P"
argument_list|)
operator|+
literal|"'>"
operator|+
name|idc
operator|+
literal|"</font>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|idc
argument_list|)
operator|)
decl_stmt|;
name|int
name|im2d
init|=
name|exam
operator|.
name|getNrInstructorMoreThanTwoConflicts
argument_list|()
decl_stmt|;
name|String
name|im2dStr
init|=
operator|(
name|im2d
operator|<=
literal|0
condition|?
literal|"0"
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"2"
argument_list|)
operator|+
literal|"'>"
operator|+
name|im2d
operator|+
literal|"</font>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|im2d
argument_list|)
operator|)
decl_stmt|;
name|int
name|ibtb
init|=
name|exam
operator|.
name|getNrInstructorBackToBackConflicts
argument_list|()
decl_stmt|;
name|int
name|idbtb
init|=
name|exam
operator|.
name|getNrInstructorDistanceBackToBackConflicts
argument_list|()
decl_stmt|;
name|String
name|ibtbStr
init|=
operator|(
name|ibtb
operator|<=
literal|0
operator|&&
name|idbtb
operator|<=
literal|0
condition|?
literal|"0"
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"1"
argument_list|)
operator|+
literal|"'>"
operator|+
name|ibtb
operator|+
operator|(
name|idbtb
operator|>
literal|0
condition|?
literal|" (d:"
operator|+
name|idbtb
operator|+
literal|")"
else|:
literal|""
operator|)
operator|+
literal|"</font>"
else|:
name|ibtb
operator|+
operator|(
name|idbtb
operator|>
literal|0
condition|?
literal|" (d:"
operator|+
name|idbtb
operator|+
literal|")"
else|:
literal|""
operator|)
operator|)
decl_stmt|;
name|int
name|dc
init|=
name|exam
operator|.
name|getNrDirectConflicts
argument_list|()
decl_stmt|;
name|String
name|dcStr
init|=
operator|(
name|dc
operator|<=
literal|0
condition|?
literal|"0"
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"P"
argument_list|)
operator|+
literal|"'>"
operator|+
name|dc
operator|+
literal|"</font>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|dc
argument_list|)
operator|)
decl_stmt|;
name|int
name|m2d
init|=
name|exam
operator|.
name|getNrMoreThanTwoConflicts
argument_list|()
decl_stmt|;
name|String
name|m2dStr
init|=
operator|(
name|m2d
operator|<=
literal|0
condition|?
literal|"0"
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"2"
argument_list|)
operator|+
literal|"'>"
operator|+
name|m2d
operator|+
literal|"</font>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|m2d
argument_list|)
operator|)
decl_stmt|;
name|int
name|btb
init|=
name|exam
operator|.
name|getNrBackToBackConflicts
argument_list|()
decl_stmt|;
name|int
name|dbtb
init|=
name|exam
operator|.
name|getNrDistanceBackToBackConflicts
argument_list|()
decl_stmt|;
name|String
name|btbStr
init|=
operator|(
name|btb
operator|<=
literal|0
operator|&&
name|dbtb
operator|<=
literal|0
condition|?
literal|"0"
else|:
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"1"
argument_list|)
operator|+
literal|"'>"
operator|+
name|btb
operator|+
operator|(
name|dbtb
operator|>
literal|0
condition|?
literal|" (d:"
operator|+
name|dbtb
operator|+
literal|")"
else|:
literal|""
operator|)
operator|+
literal|"</font>"
else|:
name|btb
operator|+
operator|(
name|dbtb
operator|>
literal|0
condition|?
literal|" (d:"
operator|+
name|dbtb
operator|+
literal|")"
else|:
literal|""
operator|)
operator|)
decl_stmt|;
name|boolean
name|firstRoom
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ExamRoomInfo
name|room
range|:
name|exam
operator|.
name|getRooms
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|match
argument_list|(
name|form
argument_list|,
name|room
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
continue|continue;
name|table
operator|.
name|addLine
argument_list|(
literal|"onClick=\"document.location='examDetail.action?examId="
operator|+
name|exam
operator|.
name|getExamId
argument_list|()
operator|+
literal|"';\""
argument_list|,
operator|new
name|String
index|[]
block|{
name|room
operator|.
name|getName
argument_list|()
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|room
operator|.
name|getCapacity
argument_list|()
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|room
operator|.
name|getExamCapacity
argument_list|()
argument_list|)
block|,
name|exam
operator|.
name|getDate
argument_list|(
name|html
argument_list|)
block|,
name|exam
operator|.
name|getTime
argument_list|(
name|html
argument_list|)
block|,
operator|(
name|html
condition|?
literal|"<a name='"
operator|+
name|exam
operator|.
name|getExamId
argument_list|()
operator|+
literal|"'>"
else|:
literal|""
operator|)
operator|+
name|exam
operator|.
name|getExamName
argument_list|()
operator|+
operator|(
name|html
condition|?
literal|"</a>"
else|:
literal|""
operator|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|exam
operator|.
name|getNrStudents
argument_list|()
argument_list|)
block|,
name|exam
operator|.
name|getSeatingTypeLabel
argument_list|()
block|,
name|exam
operator|.
name|getInstructorName
argument_list|(
literal|"; "
argument_list|)
block|,
operator|(
name|dc
operator|==
literal|0
operator|&&
name|m2d
operator|==
literal|0
operator|&&
name|btb
operator|==
literal|0
operator|&&
name|dbtb
operator|==
literal|0
condition|?
literal|""
else|:
name|dcStr
operator|+
literal|", "
operator|+
name|m2dStr
operator|+
literal|", "
operator|+
name|btbStr
operator|)
block|,
operator|(
name|idc
operator|==
literal|0
operator|&&
name|im2d
operator|==
literal|0
operator|&&
name|ibtb
operator|==
literal|0
operator|&&
name|idbtb
operator|==
literal|0
condition|?
literal|""
else|:
name|idcStr
operator|+
literal|", "
operator|+
name|im2dStr
operator|+
literal|", "
operator|+
name|ibtbStr
operator|)
block|,                             }
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|room
operator|.
name|getCapacity
argument_list|()
argument_list|,
name|room
operator|.
name|getName
argument_list|()
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|room
operator|.
name|getExamCapacity
argument_list|()
argument_list|,
name|room
operator|.
name|getName
argument_list|()
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
operator|.
name|getPeriodOrd
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|,
operator|-
name|exam
operator|.
name|getNrStudents
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
operator|.
name|getSeatingType
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
operator|.
name|getInstructorName
argument_list|(
literal|":"
argument_list|)
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|,
operator|-
name|dc
argument_list|,
operator|-
name|m2d
argument_list|,
operator|-
name|btb
argument_list|,
operator|-
name|dbtb
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|,
operator|-
name|idc
argument_list|,
operator|-
name|im2d
argument_list|,
operator|-
name|ibtb
argument_list|,
operator|-
name|idbtb
argument_list|,
name|exam
argument_list|)
block|}
argument_list|,
operator|(
name|firstRoom
condition|?
name|exam
operator|.
name|getExamId
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|null
operator|)
argument_list|)
expr_stmt|;
name|firstRoom
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
return|return
name|table
return|;
block|}
specifier|private
name|PdfWebTable
name|generatePeriodUsageReport
parameter_list|(
name|boolean
name|html
parameter_list|,
name|ExamAssignmentReportForm
name|form
parameter_list|,
name|Collection
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
parameter_list|,
name|Long
name|sessionId
parameter_list|)
block|{
name|String
name|nl
init|=
operator|(
name|html
condition|?
literal|"<br>"
else|:
literal|"\n"
operator|)
decl_stmt|;
name|PdfWebTable
name|table
init|=
operator|new
name|PdfWebTable
argument_list|(
literal|8
argument_list|,
name|form
operator|.
name|getReport
argument_list|()
argument_list|,
literal|"examAssignmentReport.do?ord=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Date"
block|,
literal|"Time"
block|,
operator|(
name|form
operator|.
name|getShowSections
argument_list|()
condition|?
literal|"Classes / Courses"
else|:
literal|"Examinations"
operator|)
block|,
literal|"Total Enrollment"
block|,
operator|(
name|form
operator|.
name|getShowSections
argument_list|()
condition|?
literal|"Classes / Courses"
else|:
literal|"Examinations"
operator|)
operator|+
name|nl
operator|+
literal|"with 10+ students"
block|,
operator|(
name|form
operator|.
name|getShowSections
argument_list|()
condition|?
literal|"Classes / Courses"
else|:
literal|"Examinations"
operator|)
operator|+
name|nl
operator|+
literal|"with 50+ students"
block|,
operator|(
name|form
operator|.
name|getShowSections
argument_list|()
condition|?
literal|"Classes / Courses"
else|:
literal|"Examinations"
operator|)
operator|+
name|nl
operator|+
literal|"with 100+ students"
block|,
operator|(
name|form
operator|.
name|getShowSections
argument_list|()
condition|?
literal|"Classes / Courses"
else|:
literal|"Examinations"
operator|)
operator|+
name|nl
operator|+
literal|"with 500+ students"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
decl_stmt|;
name|int
name|tnrExams
init|=
literal|0
decl_stmt|,
name|tnrStudents
init|=
literal|0
decl_stmt|,
name|tnrExams10
init|=
literal|0
decl_stmt|,
name|tnrExams50
init|=
literal|0
decl_stmt|,
name|tnrExams100
init|=
literal|0
decl_stmt|,
name|tnrExams500
init|=
literal|0
decl_stmt|;
name|table
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|ExamPeriod
operator|.
name|findAll
argument_list|(
name|sessionId
argument_list|,
name|form
operator|.
name|getExamType
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamPeriod
name|period
init|=
operator|(
name|ExamPeriod
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|periodDate
init|=
name|period
operator|.
name|getStartDateLabel
argument_list|()
decl_stmt|;
name|String
name|periodTime
init|=
name|period
operator|.
name|getStartTimeLabel
argument_list|()
operator|+
literal|" - "
operator|+
name|period
operator|.
name|getEndTimeLabel
argument_list|()
decl_stmt|;
if|if
condition|(
name|html
operator|&&
name|period
operator|.
name|getPrefLevel
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|period
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
block|{
name|periodDate
operator|=
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|period
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|+
literal|"'>"
operator|+
name|periodDate
operator|+
literal|"</font>"
expr_stmt|;
name|periodTime
operator|=
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|period
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|+
literal|"'>"
operator|+
name|periodTime
operator|+
literal|"</font>"
expr_stmt|;
block|}
name|int
name|nrExams
init|=
literal|0
decl_stmt|,
name|nrStudents
init|=
literal|0
decl_stmt|,
name|nrExams10
init|=
literal|0
decl_stmt|,
name|nrExams50
init|=
literal|0
decl_stmt|,
name|nrExams100
init|=
literal|0
decl_stmt|,
name|nrExams500
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|exams
control|)
block|{
if|if
condition|(
operator|!
name|period
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|exam
operator|.
name|getPeriodId
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|form
operator|.
name|getShowSections
argument_list|()
condition|)
block|{
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|exam
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|match
argument_list|(
name|form
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
continue|continue;
name|nrExams
operator|++
expr_stmt|;
name|nrStudents
operator|+=
name|section
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getNrStudents
argument_list|()
operator|>=
literal|10
condition|)
name|nrExams10
operator|++
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getNrStudents
argument_list|()
operator|>=
literal|50
condition|)
name|nrExams50
operator|++
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getNrStudents
argument_list|()
operator|>=
literal|100
condition|)
name|nrExams100
operator|++
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getNrStudents
argument_list|()
operator|>=
literal|500
condition|)
name|nrExams500
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|match
argument_list|(
name|form
argument_list|,
name|exam
operator|.
name|getExamName
argument_list|()
argument_list|)
condition|)
continue|continue;
name|nrExams
operator|++
expr_stmt|;
name|int
name|nrStudentsThisExam
init|=
name|exam
operator|.
name|getStudentIds
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|nrStudents
operator|+=
name|nrStudentsThisExam
expr_stmt|;
if|if
condition|(
name|nrStudentsThisExam
operator|>=
literal|10
condition|)
name|nrExams10
operator|++
expr_stmt|;
if|if
condition|(
name|nrStudentsThisExam
operator|>=
literal|50
condition|)
name|nrExams50
operator|++
expr_stmt|;
if|if
condition|(
name|nrStudentsThisExam
operator|>=
literal|100
condition|)
name|nrExams100
operator|++
expr_stmt|;
if|if
condition|(
name|nrStudentsThisExam
operator|>=
literal|500
condition|)
name|nrExams500
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|nrExams
operator|==
literal|0
condition|)
continue|continue;
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
name|periodDate
block|,
name|periodTime
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|nrExams
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|nrStudents
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|nrExams10
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|nrExams50
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|nrExams100
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|nrExams500
argument_list|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
literal|0
argument_list|,
name|period
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|0
argument_list|,
name|period
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|period
operator|.
name|getDateOffset
argument_list|()
argument_list|,
name|period
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|0
argument_list|,
name|nrExams
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|0
argument_list|,
name|nrStudents
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|0
argument_list|,
name|nrExams10
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|0
argument_list|,
name|nrExams50
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|0
argument_list|,
name|nrExams100
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|0
argument_list|,
name|nrExams500
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|tnrExams
operator|+=
name|nrExams
expr_stmt|;
name|tnrExams10
operator|+=
name|nrExams10
expr_stmt|;
name|tnrExams50
operator|+=
name|nrExams50
expr_stmt|;
name|tnrExams100
operator|+=
name|nrExams100
expr_stmt|;
name|tnrExams500
operator|+=
name|nrExams500
expr_stmt|;
name|tnrStudents
operator|+=
name|nrStudents
expr_stmt|;
block|}
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
operator|(
name|html
condition|?
literal|"<b>Totals</b>"
else|:
literal|"Totals"
operator|)
block|,
literal|""
block|,
operator|(
name|html
condition|?
literal|"<b>"
operator|+
name|tnrExams
operator|+
literal|"</b>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|tnrExams
argument_list|)
operator|)
block|,
operator|(
name|html
condition|?
literal|"<b>"
operator|+
name|tnrStudents
operator|+
literal|"</b>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|tnrStudents
argument_list|)
operator|)
block|,
operator|(
name|html
condition|?
literal|"<b>"
operator|+
name|tnrExams10
operator|+
literal|"</b>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|tnrExams10
argument_list|)
operator|)
block|,
operator|(
name|html
condition|?
literal|"<b>"
operator|+
name|tnrExams50
operator|+
literal|"</b>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|tnrExams50
argument_list|)
operator|)
block|,
operator|(
name|html
condition|?
literal|"<b>"
operator|+
name|tnrExams100
operator|+
literal|"</b>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|tnrExams100
argument_list|)
operator|)
block|,
operator|(
name|html
condition|?
literal|"<b>"
operator|+
name|tnrExams500
operator|+
literal|"</b>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|tnrExams500
argument_list|)
operator|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
literal|1
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|1
argument_list|,
name|tnrExams
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|1
argument_list|,
name|tnrStudents
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|1
argument_list|,
name|tnrExams10
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|1
argument_list|,
name|tnrExams50
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|1
argument_list|,
name|tnrExams100
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|1
argument_list|,
name|tnrExams500
argument_list|)
block|}
argument_list|)
expr_stmt|;
return|return
name|table
return|;
block|}
specifier|private
name|PdfWebTable
name|generateNrExamsADayReport
parameter_list|(
name|boolean
name|html
parameter_list|,
name|ExamAssignmentReportForm
name|form
parameter_list|,
name|Collection
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
parameter_list|)
block|{
name|Formats
operator|.
name|Format
argument_list|<
name|Date
argument_list|>
name|df
init|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|DATE_EXAM_PERIOD
argument_list|)
decl_stmt|;
name|String
name|nl
init|=
operator|(
name|html
condition|?
literal|"<br>"
else|:
literal|"\n"
operator|)
decl_stmt|;
name|PdfWebTable
name|table
init|=
operator|new
name|PdfWebTable
argument_list|(
literal|8
argument_list|,
name|form
operator|.
name|getReport
argument_list|()
argument_list|,
literal|"examAssignmentReport.do?ord=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Date"
block|,
literal|"Students with"
operator|+
name|nl
operator|+
literal|"No Exam"
block|,
literal|"Students with"
operator|+
name|nl
operator|+
literal|"One Exam"
block|,
literal|"Students with"
operator|+
name|nl
operator|+
literal|"Two Exams"
block|,
literal|"Students with"
operator|+
name|nl
operator|+
literal|"Three Exams"
block|,
literal|"Students with"
operator|+
name|nl
operator|+
literal|"Four or More Exams"
block|,
literal|"Student "
operator|+
name|nl
operator|+
literal|"Back-To-Back Exams"
block|,
literal|"Student Distance"
operator|+
name|nl
operator|+
literal|"Back-To-Back Exams"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
decl_stmt|;
name|table
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap"
argument_list|)
expr_stmt|;
name|HashSet
argument_list|<
name|Long
argument_list|>
name|studentIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Date
argument_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|date2students
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Date
argument_list|,
name|Integer
argument_list|>
name|date2btb
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Date
argument_list|,
name|Integer
argument_list|>
name|date2dbtb
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|exams
control|)
block|{
if|if
condition|(
operator|!
name|form
operator|.
name|getShowSections
argument_list|()
operator|&&
operator|!
name|match
argument_list|(
name|form
argument_list|,
name|exam
operator|.
name|getExamName
argument_list|()
argument_list|)
condition|)
continue|continue;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|students
init|=
name|date2students
operator|.
name|get
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartDate
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|students
operator|==
literal|null
condition|)
block|{
name|students
operator|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|date2students
operator|.
name|put
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartDate
argument_list|()
argument_list|,
name|students
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|exam
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|form
operator|.
name|getShowSections
argument_list|()
operator|&&
operator|!
name|match
argument_list|(
name|form
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
continue|continue;
name|studentIds
operator|.
name|addAll
argument_list|(
name|section
operator|.
name|getStudentIds
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Long
name|studentId
range|:
name|section
operator|.
name|getStudentIds
argument_list|()
control|)
block|{
name|Integer
name|nrExamsThisDay
init|=
name|students
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
name|students
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
literal|1
operator|+
operator|(
name|nrExamsThisDay
operator|==
literal|null
condition|?
literal|0
else|:
name|nrExamsThisDay
operator|)
argument_list|)
expr_stmt|;
block|}
name|int
name|btb
init|=
literal|0
decl_stmt|,
name|dbtb
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exam
operator|.
name|getBackToBackConflicts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BackToBackConflict
name|conf
init|=
operator|(
name|BackToBackConflict
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|compareTo
argument_list|(
name|conf
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getPeriod
argument_list|()
argument_list|)
operator|>=
literal|0
condition|)
continue|continue;
if|if
condition|(
name|form
operator|.
name|getShowSections
argument_list|()
operator|&&
name|form
operator|.
name|getFilter
argument_list|()
operator|!=
literal|null
operator|&&
name|form
operator|.
name|getFilter
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Enumeration
name|e
init|=
name|conf
operator|.
name|getStudents
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|section
operator|.
name|getStudentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|studentId
argument_list|)
condition|)
block|{
name|btb
operator|++
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|isDistance
argument_list|()
condition|)
name|dbtb
operator|++
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|btb
operator|+=
name|conf
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|isDistance
argument_list|()
condition|)
name|dbtb
operator|+=
name|conf
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|btb
operator|>
literal|0
condition|)
name|date2btb
operator|.
name|put
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartDate
argument_list|()
argument_list|,
name|btb
operator|+
operator|(
name|date2btb
operator|.
name|get
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartDate
argument_list|()
argument_list|)
operator|==
literal|null
condition|?
literal|0
else|:
name|date2btb
operator|.
name|get
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartDate
argument_list|()
argument_list|)
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|dbtb
operator|>
literal|0
condition|)
name|date2dbtb
operator|.
name|put
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartDate
argument_list|()
argument_list|,
name|dbtb
operator|+
operator|(
name|date2dbtb
operator|.
name|get
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartDate
argument_list|()
argument_list|)
operator|==
literal|null
condition|?
literal|0
else|:
name|date2dbtb
operator|.
name|get
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartDate
argument_list|()
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|tNoExam
init|=
literal|0
decl_stmt|,
name|tOneExam
init|=
literal|0
decl_stmt|,
name|tTwoExams
init|=
literal|0
decl_stmt|,
name|tThreeExams
init|=
literal|0
decl_stmt|,
name|tFourExams
init|=
literal|0
decl_stmt|,
name|tBtb
init|=
literal|0
decl_stmt|,
name|tDistBtb
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Date
argument_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|entry
range|:
name|date2students
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|int
name|noExam
init|=
literal|0
decl_stmt|,
name|oneExam
init|=
literal|0
decl_stmt|,
name|twoExams
init|=
literal|0
decl_stmt|,
name|threeExams
init|=
literal|0
decl_stmt|,
name|fourExams
init|=
literal|0
decl_stmt|,
name|btb
init|=
literal|0
decl_stmt|,
name|dbtb
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|student
range|:
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|student
operator|.
name|getValue
argument_list|()
operator|==
literal|1
condition|)
name|oneExam
operator|++
expr_stmt|;
if|else if
condition|(
name|student
operator|.
name|getValue
argument_list|()
operator|==
literal|2
condition|)
name|twoExams
operator|++
expr_stmt|;
if|else if
condition|(
name|student
operator|.
name|getValue
argument_list|()
operator|==
literal|3
condition|)
name|threeExams
operator|++
expr_stmt|;
if|else if
condition|(
name|student
operator|.
name|getValue
argument_list|()
operator|>=
literal|4
condition|)
name|fourExams
operator|++
expr_stmt|;
block|}
name|noExam
operator|=
name|studentIds
operator|.
name|size
argument_list|()
operator|-
name|oneExam
operator|-
name|twoExams
operator|-
name|threeExams
operator|-
name|fourExams
expr_stmt|;
name|btb
operator|=
operator|(
name|date2btb
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|==
literal|null
condition|?
literal|0
else|:
name|date2btb
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|)
expr_stmt|;
name|dbtb
operator|=
operator|(
name|date2dbtb
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|==
literal|null
condition|?
literal|0
else|:
name|date2dbtb
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|)
expr_stmt|;
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
name|df
operator|.
name|format
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|noExam
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|oneExam
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|twoExams
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|threeExams
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|fourExams
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|btb
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|dbtb
argument_list|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
literal|0
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|0
argument_list|,
name|noExam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|0
argument_list|,
name|oneExam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|0
argument_list|,
name|twoExams
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|0
argument_list|,
name|threeExams
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|0
argument_list|,
name|fourExams
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|0
argument_list|,
name|btb
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|0
argument_list|,
name|dbtb
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|tNoExam
operator|+=
name|noExam
expr_stmt|;
name|tOneExam
operator|+=
name|oneExam
expr_stmt|;
name|tTwoExams
operator|+=
name|twoExams
expr_stmt|;
name|tThreeExams
operator|+=
name|threeExams
expr_stmt|;
name|tFourExams
operator|+=
name|fourExams
expr_stmt|;
name|tBtb
operator|+=
name|btb
expr_stmt|;
name|tDistBtb
operator|+=
name|dbtb
expr_stmt|;
block|}
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
operator|(
name|html
condition|?
literal|"<b>Totals</b>"
else|:
literal|"Totals"
operator|)
block|,
operator|(
name|html
condition|?
literal|"<b>"
operator|+
name|tNoExam
operator|+
literal|"</b>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|tNoExam
argument_list|)
operator|)
block|,
operator|(
name|html
condition|?
literal|"<b>"
operator|+
name|tOneExam
operator|+
literal|"</b>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|tOneExam
argument_list|)
operator|)
block|,
operator|(
name|html
condition|?
literal|"<b>"
operator|+
name|tTwoExams
operator|+
literal|"</b>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|tTwoExams
argument_list|)
operator|)
block|,
operator|(
name|html
condition|?
literal|"<b>"
operator|+
name|tThreeExams
operator|+
literal|"</b>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|tThreeExams
argument_list|)
operator|)
block|,
operator|(
name|html
condition|?
literal|"<b>"
operator|+
name|tFourExams
operator|+
literal|"</b>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|tFourExams
argument_list|)
operator|)
block|,
operator|(
name|html
condition|?
literal|"<b>"
operator|+
name|tBtb
operator|+
literal|"</b>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|tBtb
argument_list|)
operator|)
block|,
operator|(
name|html
condition|?
literal|"<b>"
operator|+
name|tDistBtb
operator|+
literal|"</b>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|tDistBtb
argument_list|)
operator|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
literal|1
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|1
argument_list|,
name|tNoExam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|1
argument_list|,
name|tOneExam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|1
argument_list|,
name|tTwoExams
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|1
argument_list|,
name|tThreeExams
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|1
argument_list|,
name|tFourExams
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|1
argument_list|,
name|tBtb
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|1
argument_list|,
name|tDistBtb
argument_list|)
block|}
argument_list|)
expr_stmt|;
return|return
name|table
return|;
block|}
specifier|private
name|PdfWebTable
name|generateRoomSplitReport
parameter_list|(
name|boolean
name|html
parameter_list|,
name|ExamAssignmentReportForm
name|form
parameter_list|,
name|Collection
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
parameter_list|)
block|{
name|String
name|nl
init|=
operator|(
name|html
condition|?
literal|"<br>"
else|:
literal|"\n"
operator|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
operator|(
name|form
operator|.
name|getShowSections
argument_list|()
condition|?
literal|"Class / Course"
else|:
literal|"Examination"
operator|)
block|,
literal|"Enrollment"
block|,
literal|"Seating"
operator|+
name|nl
operator|+
literal|"Type"
block|,
literal|"Date"
block|,
literal|"Time"
block|,
literal|"Average"
operator|+
name|nl
operator|+
literal|"Distance"
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colCmp
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"center"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Boolean
argument_list|>
name|colOrd
init|=
operator|new
name|ArrayList
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|maxSplits
init|=
literal|2
decl_stmt|;
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|exams
control|)
block|{
if|if
condition|(
name|exam
operator|.
name|getRooms
argument_list|()
operator|!=
literal|null
operator|&&
name|exam
operator|.
name|getRooms
argument_list|()
operator|.
name|size
argument_list|()
operator|>
name|maxSplits
condition|)
name|maxSplits
operator|=
name|exam
operator|.
name|getRooms
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|maxSplits
condition|;
name|i
operator|++
control|)
block|{
name|String
name|pos
decl_stmt|;
switch|switch
condition|(
name|i
condition|)
block|{
case|case
literal|1
case|:
name|pos
operator|=
literal|"1st"
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|pos
operator|=
literal|"2nd"
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|pos
operator|=
literal|"3rd"
expr_stmt|;
break|break;
default|default:
name|pos
operator|=
name|i
operator|+
literal|"th"
expr_stmt|;
break|break;
block|}
name|colNames
operator|.
name|add
argument_list|(
name|pos
operator|+
literal|" Room"
argument_list|)
expr_stmt|;
name|colNames
operator|.
name|add
argument_list|(
name|pos
operator|+
literal|" Room"
operator|+
name|nl
operator|+
literal|"Capacity"
argument_list|)
expr_stmt|;
name|colCmp
operator|.
name|add
argument_list|(
literal|"left"
argument_list|)
expr_stmt|;
name|colCmp
operator|.
name|add
argument_list|(
literal|"left"
argument_list|)
expr_stmt|;
name|colOrd
operator|.
name|add
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|colOrd
operator|.
name|add
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|boolean
index|[]
name|ord
init|=
operator|new
name|boolean
index|[
name|colOrd
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|colOrd
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|ord
index|[
name|i
index|]
operator|=
name|colOrd
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|PdfWebTable
name|table
init|=
operator|new
name|PdfWebTable
argument_list|(
name|colNames
operator|.
name|size
argument_list|()
argument_list|,
name|form
operator|.
name|getReport
argument_list|()
argument_list|,
literal|"examAssignmentReport.do?ord=%%"
argument_list|,
name|colNames
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|colNames
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|colCmp
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|colCmp
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|ord
argument_list|)
decl_stmt|;
name|table
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap"
argument_list|)
expr_stmt|;
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|exams
control|)
block|{
if|if
condition|(
name|exam
operator|.
name|getRooms
argument_list|()
operator|==
literal|null
operator|||
name|exam
operator|.
name|getRooms
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
continue|continue;
if|if
condition|(
name|form
operator|.
name|getShowSections
argument_list|()
condition|)
block|{
name|boolean
name|firstSection
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|exam
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|match
argument_list|(
name|form
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
continue|continue;
name|double
name|distance
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ExamRoomInfo
name|r1
range|:
name|exam
operator|.
name|getRooms
argument_list|()
control|)
for|for
control|(
name|ExamRoomInfo
name|r2
range|:
name|exam
operator|.
name|getRooms
argument_list|()
control|)
if|if
condition|(
name|r1
operator|.
name|getLocationId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getLocationId
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
name|distance
operator|+=
name|r1
operator|.
name|getDistance
argument_list|(
name|r2
argument_list|)
expr_stmt|;
name|distance
operator|/=
name|exam
operator|.
name|getRooms
argument_list|()
operator|.
name|size
argument_list|()
operator|*
operator|(
name|exam
operator|.
name|getRooms
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
operator|/
literal|2
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|line
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|colNames
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|(
name|html
condition|?
literal|"<a name='"
operator|+
name|exam
operator|.
name|getExamId
argument_list|()
operator|+
literal|"'>"
else|:
literal|""
operator|)
operator|+
name|section
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|html
condition|?
literal|"</a>"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|section
operator|.
name|getNrStudents
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|exam
operator|.
name|getSeatingTypeLabel
argument_list|()
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|exam
operator|.
name|getDate
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|exam
operator|.
name|getTime
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|(
operator|(
name|int
operator|)
operator|(
name|distance
operator|*
literal|10.0
operator|)
operator|==
literal|0
condition|?
literal|""
else|:
operator|(
name|int
operator|)
operator|(
name|distance
operator|*
literal|10.0
operator|)
operator|+
literal|" m"
operator|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Comparable
argument_list|>
name|cmp
init|=
operator|new
name|ArrayList
argument_list|<
name|Comparable
argument_list|>
argument_list|(
name|colNames
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|cmp
operator|.
name|add
argument_list|(
operator|new
name|MultiComparable
argument_list|(
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
argument_list|)
expr_stmt|;
name|cmp
operator|.
name|add
argument_list|(
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getNrStudents
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
argument_list|)
expr_stmt|;
name|cmp
operator|.
name|add
argument_list|(
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getSeatingType
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
argument_list|)
expr_stmt|;
name|cmp
operator|.
name|add
argument_list|(
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriodOrd
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
argument_list|)
expr_stmt|;
name|cmp
operator|.
name|add
argument_list|(
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
argument_list|)
expr_stmt|;
name|cmp
operator|.
name|add
argument_list|(
operator|new
name|MultiComparable
argument_list|(
operator|-
name|distance
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ExamRoomInfo
name|room
range|:
name|exam
operator|.
name|getRooms
argument_list|()
control|)
block|{
name|line
operator|.
name|add
argument_list|(
name|html
condition|?
name|room
operator|.
name|toString
argument_list|()
else|:
name|room
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
name|room
operator|.
name|getPreference
argument_list|()
argument_list|)
operator|+
literal|"'>"
operator|+
name|room
operator|.
name|getCapacity
argument_list|(
name|exam
argument_list|)
operator|+
literal|"</font>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|room
operator|.
name|getCapacity
argument_list|(
name|exam
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cmp
operator|.
name|add
argument_list|(
operator|new
name|MultiComparable
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
argument_list|)
expr_stmt|;
name|cmp
operator|.
name|add
argument_list|(
operator|new
name|MultiComparable
argument_list|(
name|room
operator|.
name|getCapacity
argument_list|(
name|exam
argument_list|)
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|exam
operator|.
name|getRooms
argument_list|()
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|maxSplits
condition|;
name|i
operator|++
control|)
block|{
name|line
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|cmp
operator|.
name|add
argument_list|(
operator|new
name|MultiComparable
argument_list|(
literal|""
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
argument_list|)
expr_stmt|;
name|cmp
operator|.
name|add
argument_list|(
operator|new
name|MultiComparable
argument_list|(
literal|0
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|addLine
argument_list|(
literal|"onClick=\"document.location='examDetail.action?examId="
operator|+
name|exam
operator|.
name|getExamId
argument_list|()
operator|+
literal|"';\""
argument_list|,
name|line
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|line
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|cmp
operator|.
name|toArray
argument_list|(
operator|new
name|Comparable
index|[
name|cmp
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
operator|(
name|firstSection
condition|?
name|exam
operator|.
name|getExamId
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|null
operator|)
argument_list|)
expr_stmt|;
name|firstSection
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|match
argument_list|(
name|form
argument_list|,
name|exam
operator|.
name|getExamName
argument_list|()
argument_list|)
condition|)
continue|continue;
name|double
name|distance
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ExamRoomInfo
name|r1
range|:
name|exam
operator|.
name|getRooms
argument_list|()
control|)
for|for
control|(
name|ExamRoomInfo
name|r2
range|:
name|exam
operator|.
name|getRooms
argument_list|()
control|)
if|if
condition|(
name|r1
operator|.
name|getLocationId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getLocationId
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
name|distance
operator|+=
name|r1
operator|.
name|getDistance
argument_list|(
name|r2
argument_list|)
expr_stmt|;
name|distance
operator|/=
name|exam
operator|.
name|getRooms
argument_list|()
operator|.
name|size
argument_list|()
operator|*
operator|(
name|exam
operator|.
name|getRooms
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
operator|/
literal|2
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|line
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|colNames
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|(
name|html
condition|?
literal|"<a name='"
operator|+
name|exam
operator|.
name|getExamId
argument_list|()
operator|+
literal|"'>"
else|:
literal|""
operator|)
operator|+
name|exam
operator|.
name|getExamName
argument_list|()
operator|+
operator|(
name|html
condition|?
literal|"</a>"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|exam
operator|.
name|getNrStudents
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|exam
operator|.
name|getSeatingTypeLabel
argument_list|()
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|exam
operator|.
name|getDate
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|exam
operator|.
name|getTime
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|(
operator|(
name|int
operator|)
operator|(
name|distance
operator|*
literal|10.0
operator|)
operator|==
literal|0
condition|?
literal|""
else|:
operator|(
name|int
operator|)
operator|(
name|distance
operator|*
literal|10.0
operator|)
operator|+
literal|" m"
operator|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Comparable
argument_list|>
name|cmp
init|=
operator|new
name|ArrayList
argument_list|<
name|Comparable
argument_list|>
argument_list|(
name|colNames
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|cmp
operator|.
name|add
argument_list|(
operator|new
name|MultiComparable
argument_list|(
name|exam
argument_list|)
argument_list|)
expr_stmt|;
name|cmp
operator|.
name|add
argument_list|(
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getNrStudents
argument_list|()
argument_list|,
name|exam
argument_list|)
argument_list|)
expr_stmt|;
name|cmp
operator|.
name|add
argument_list|(
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getSeatingType
argument_list|()
argument_list|,
name|exam
argument_list|)
argument_list|)
expr_stmt|;
name|cmp
operator|.
name|add
argument_list|(
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriodOrd
argument_list|()
argument_list|,
name|exam
argument_list|)
argument_list|)
expr_stmt|;
name|cmp
operator|.
name|add
argument_list|(
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|exam
argument_list|)
argument_list|)
expr_stmt|;
name|cmp
operator|.
name|add
argument_list|(
operator|new
name|MultiComparable
argument_list|(
operator|-
name|distance
argument_list|,
name|exam
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ExamRoomInfo
name|room
range|:
name|exam
operator|.
name|getRooms
argument_list|()
control|)
block|{
name|line
operator|.
name|add
argument_list|(
name|html
condition|?
name|room
operator|.
name|toString
argument_list|()
else|:
name|room
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
name|room
operator|.
name|getPreference
argument_list|()
argument_list|)
operator|+
literal|"'>"
operator|+
name|room
operator|.
name|getCapacity
argument_list|(
name|exam
argument_list|)
operator|+
literal|"</font>"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|room
operator|.
name|getCapacity
argument_list|(
name|exam
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cmp
operator|.
name|add
argument_list|(
operator|new
name|MultiComparable
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
argument_list|)
expr_stmt|;
name|cmp
operator|.
name|add
argument_list|(
operator|new
name|MultiComparable
argument_list|(
name|room
operator|.
name|getCapacity
argument_list|(
name|exam
argument_list|)
argument_list|,
name|exam
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|exam
operator|.
name|getRooms
argument_list|()
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|maxSplits
condition|;
name|i
operator|++
control|)
block|{
name|line
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|cmp
operator|.
name|add
argument_list|(
operator|new
name|MultiComparable
argument_list|(
literal|""
argument_list|,
name|exam
argument_list|)
argument_list|)
expr_stmt|;
name|cmp
operator|.
name|add
argument_list|(
operator|new
name|MultiComparable
argument_list|(
literal|0
argument_list|,
name|exam
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|addLine
argument_list|(
literal|"onClick=\"document.location='examDetail.action?examId="
operator|+
name|exam
operator|.
name|getExamId
argument_list|()
operator|+
literal|"';\""
argument_list|,
name|line
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|line
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|cmp
operator|.
name|toArray
argument_list|(
operator|new
name|Comparable
index|[
name|cmp
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|exam
operator|.
name|getExamId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|table
return|;
block|}
specifier|private
name|PdfWebTable
name|generateViolatedDistributionsReport
parameter_list|(
name|boolean
name|html
parameter_list|,
name|ExamAssignmentReportForm
name|form
parameter_list|,
name|Collection
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
parameter_list|)
block|{
name|String
name|nl
init|=
operator|(
name|html
condition|?
literal|"<br>"
else|:
literal|"\n"
operator|)
decl_stmt|;
name|PdfWebTable
name|table
init|=
operator|new
name|PdfWebTable
argument_list|(
literal|8
argument_list|,
name|form
operator|.
name|getReport
argument_list|()
argument_list|,
literal|"examAssignmentReport.do?ord=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Preference"
block|,
literal|"Distribution"
block|,
operator|(
name|form
operator|.
name|getShowSections
argument_list|()
condition|?
literal|"Class / Course"
else|:
literal|"Examination"
operator|)
block|,
literal|"Enrollment"
block|,
literal|"Seating"
operator|+
name|nl
operator|+
literal|"Type"
block|,
literal|"Date"
block|,
literal|"Time"
block|,
literal|"Room"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"right"
block|,
literal|"center"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
decl_stmt|;
name|table
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap"
argument_list|)
expr_stmt|;
name|HashSet
argument_list|<
name|DistributionConflict
argument_list|>
name|conflicts
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|exams
control|)
block|{
if|if
condition|(
operator|!
name|match
argument_list|(
name|form
argument_list|,
name|exam
argument_list|)
condition|)
continue|continue;
for|for
control|(
name|DistributionConflict
name|conf
range|:
name|exam
operator|.
name|getDistributionConflicts
argument_list|()
control|)
block|{
if|if
condition|(
name|conflicts
operator|.
name|contains
argument_list|(
name|conf
argument_list|)
condition|)
continue|continue;
name|conf
operator|.
name|getOtherExams
argument_list|()
operator|.
name|add
argument_list|(
name|exam
argument_list|)
expr_stmt|;
name|conflicts
operator|.
name|add
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|DistributionConflict
name|conf
range|:
name|conflicts
control|)
block|{
name|String
name|classes
init|=
literal|""
decl_stmt|,
name|enrollment
init|=
literal|""
decl_stmt|,
name|seating
init|=
literal|""
decl_stmt|;
name|String
name|date
init|=
literal|""
decl_stmt|,
name|time
init|=
literal|""
decl_stmt|,
name|room
init|=
literal|""
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|Date
index|[]
name|dates
init|=
operator|new
name|Date
index|[
name|conf
operator|.
name|getOtherExams
argument_list|()
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|Integer
index|[]
name|times
init|=
operator|new
name|Integer
index|[
name|conf
operator|.
name|getOtherExams
argument_list|()
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|enrl
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ExamInfo
name|exam
range|:
name|conf
operator|.
name|getOtherExams
argument_list|()
control|)
block|{
name|enrl
operator|+=
name|exam
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
if|if
condition|(
name|form
operator|.
name|getShowSections
argument_list|()
condition|)
block|{
if|if
condition|(
name|exam
operator|instanceof
name|ExamAssignment
condition|)
block|{
name|ExamAssignment
name|ea
init|=
operator|(
name|ExamAssignment
operator|)
name|exam
decl_stmt|;
name|dates
index|[
name|idx
index|]
operator|=
name|ea
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartTime
argument_list|()
expr_stmt|;
name|times
index|[
name|idx
index|]
operator|=
name|ea
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartSlot
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|dates
index|[
name|idx
index|]
operator|=
operator|new
name|Date
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|times
index|[
name|idx
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
name|boolean
name|firstSection
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|exam
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|classes
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|classes
operator|+=
name|nl
expr_stmt|;
name|enrollment
operator|+=
name|nl
expr_stmt|;
name|seating
operator|+=
name|nl
expr_stmt|;
name|date
operator|+=
name|nl
expr_stmt|;
name|time
operator|+=
name|nl
expr_stmt|;
name|room
operator|+=
name|nl
expr_stmt|;
block|}
name|classes
operator|+=
name|section
operator|.
name|getName
argument_list|()
expr_stmt|;
name|enrollment
operator|+=
name|section
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
if|if
condition|(
name|firstSection
condition|)
block|{
name|seating
operator|+=
name|exam
operator|.
name|getSeatingTypeLabel
argument_list|()
expr_stmt|;
if|if
condition|(
name|exam
operator|instanceof
name|ExamAssignment
condition|)
block|{
name|ExamAssignment
name|ea
init|=
operator|(
name|ExamAssignment
operator|)
name|exam
decl_stmt|;
name|date
operator|+=
name|ea
operator|.
name|getDate
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|time
operator|+=
name|ea
operator|.
name|getTime
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|room
operator|+=
name|ea
operator|.
name|getRoomsName
argument_list|(
name|html
argument_list|,
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
name|firstSection
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|classes
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|classes
operator|+=
name|nl
expr_stmt|;
name|enrollment
operator|+=
name|nl
expr_stmt|;
name|seating
operator|+=
name|nl
expr_stmt|;
name|date
operator|+=
name|nl
expr_stmt|;
name|time
operator|+=
name|nl
expr_stmt|;
name|room
operator|+=
name|nl
expr_stmt|;
block|}
name|classes
operator|+=
name|exam
operator|.
name|getExamName
argument_list|()
expr_stmt|;
name|enrollment
operator|+=
name|exam
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
name|seating
operator|+=
name|exam
operator|.
name|getSeatingTypeLabel
argument_list|()
expr_stmt|;
if|if
condition|(
name|exam
operator|instanceof
name|ExamAssignment
condition|)
block|{
name|ExamAssignment
name|ea
init|=
operator|(
name|ExamAssignment
operator|)
name|exam
decl_stmt|;
name|date
operator|+=
name|ea
operator|.
name|getDate
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|time
operator|+=
name|ea
operator|.
name|getTime
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|room
operator|+=
name|ea
operator|.
name|getRoomsName
argument_list|(
name|html
argument_list|,
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
operator|(
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|conf
operator|.
name|getPreference
argument_list|()
argument_list|)
operator|+
literal|"'>"
else|:
literal|""
operator|)
operator|+
name|PreferenceLevel
operator|.
name|prolog2string
argument_list|(
name|conf
operator|.
name|getPreference
argument_list|()
argument_list|)
operator|+
operator|(
name|html
condition|?
literal|"</font>"
else|:
literal|""
operator|)
block|,
operator|(
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|conf
operator|.
name|getPreference
argument_list|()
argument_list|)
operator|+
literal|"'>"
else|:
literal|""
operator|)
operator|+
name|conf
operator|.
name|getType
argument_list|()
operator|+
operator|(
name|html
condition|?
literal|"</font>"
else|:
literal|""
operator|)
block|,
name|classes
block|,
name|enrollment
block|,
name|seating
block|,
name|date
block|,
name|time
block|,
name|room
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
name|conf
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|conf
operator|.
name|getType
argument_list|()
argument_list|,
name|conf
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|classes
argument_list|,
name|conf
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|enrl
argument_list|,
name|conf
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|seating
argument_list|,
name|conf
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|dates
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|times
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|room
argument_list|,
name|conf
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|table
return|;
block|}
specifier|private
name|PdfWebTable
name|generateIndividualConflictsReport
parameter_list|(
name|boolean
name|html
parameter_list|,
name|Long
name|sessionId
parameter_list|,
name|ExamAssignmentReportForm
name|form
parameter_list|,
name|Collection
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
parameter_list|,
name|boolean
name|studentConf
parameter_list|,
name|boolean
name|direct
parameter_list|,
name|boolean
name|m2d
parameter_list|,
name|boolean
name|btb
parameter_list|,
name|String
name|nameFormat
parameter_list|)
block|{
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Student
argument_list|>
name|students
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
if|if
condition|(
name|studentConf
condition|)
block|{
name|HashSet
argument_list|<
name|Long
argument_list|>
name|allStudentIds
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|exams
control|)
block|{
if|if
condition|(
name|direct
condition|)
for|for
control|(
name|DirectConflict
name|conflict
range|:
name|exam
operator|.
name|getDirectConflicts
argument_list|()
control|)
block|{
name|allStudentIds
operator|.
name|addAll
argument_list|(
name|conflict
operator|.
name|getStudents
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|btb
condition|)
for|for
control|(
name|BackToBackConflict
name|conflict
range|:
name|exam
operator|.
name|getBackToBackConflicts
argument_list|()
control|)
block|{
name|allStudentIds
operator|.
name|addAll
argument_list|(
name|conflict
operator|.
name|getStudents
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m2d
condition|)
for|for
control|(
name|MoreThanTwoADayConflict
name|conflict
range|:
name|exam
operator|.
name|getMoreThanTwoADaysConflicts
argument_list|()
control|)
block|{
name|allStudentIds
operator|.
name|addAll
argument_list|(
name|conflict
operator|.
name|getStudents
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|inSet
init|=
literal|null
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|allStudentIds
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|idx
operator|==
literal|1000
condition|)
block|{
for|for
control|(
name|Iterator
name|j
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select s from Student s where s.uniqueId in ("
operator|+
name|inSet
operator|+
literal|")"
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Student
name|s
init|=
operator|(
name|Student
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|students
operator|.
name|put
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
name|idx
operator|=
literal|0
expr_stmt|;
name|inSet
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|inSet
operator|==
literal|null
condition|)
name|inSet
operator|=
name|i
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
else|else
name|inSet
operator|+=
literal|","
operator|+
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|inSet
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|j
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select s from Student s where s.uniqueId in ("
operator|+
name|inSet
operator|+
literal|")"
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Student
name|s
init|=
operator|(
name|Student
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|students
operator|.
name|put
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|String
name|nl
init|=
operator|(
name|html
condition|?
literal|"<br>"
else|:
literal|"\n"
operator|)
decl_stmt|;
name|PdfWebTable
name|table
init|=
operator|new
name|PdfWebTable
argument_list|(
literal|10
argument_list|,
name|form
operator|.
name|getReport
argument_list|()
argument_list|,
literal|"examAssignmentReport.do?ord=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
operator|(
name|studentConf
condition|?
literal|"Student Id"
else|:
literal|"Instructor Id"
operator|)
block|,
literal|"Name"
block|,
literal|"Type"
block|,
operator|(
name|form
operator|.
name|getShowSections
argument_list|()
condition|?
literal|"Class / Course"
else|:
literal|"Examination"
operator|)
block|,
literal|"Enrollment"
block|,
literal|"Seating"
operator|+
name|nl
operator|+
literal|"Type"
block|,
literal|"Date"
block|,
literal|"Time"
block|,
literal|"Room"
block|,
literal|"Distance"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"right"
block|,
literal|"center"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
decl_stmt|;
name|table
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap"
argument_list|)
expr_stmt|;
name|table
operator|.
name|setBlankWhenSame
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|exams
control|)
block|{
if|if
condition|(
name|direct
condition|)
for|for
control|(
name|DirectConflict
name|conflict
range|:
operator|(
name|studentConf
condition|?
name|exam
operator|.
name|getDirectConflicts
argument_list|()
else|:
name|exam
operator|.
name|getInstructorDirectConflicts
argument_list|()
operator|)
control|)
block|{
if|if
condition|(
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|!=
literal|null
operator|&&
name|exam
operator|.
name|compareTo
argument_list|(
name|conflict
operator|.
name|getOtherExam
argument_list|()
argument_list|)
operator|>=
literal|0
operator|&&
name|exams
operator|.
name|contains
argument_list|(
name|conflict
operator|.
name|getOtherExam
argument_list|()
argument_list|)
condition|)
continue|continue;
for|for
control|(
name|Long
name|studentId
range|:
name|conflict
operator|.
name|getStudents
argument_list|()
control|)
block|{
name|String
name|id
init|=
literal|""
decl_stmt|,
name|name
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|studentConf
condition|)
block|{
name|Student
name|student
init|=
name|students
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
name|id
operator|=
name|student
operator|.
name|getExternalUniqueId
argument_list|()
expr_stmt|;
name|name
operator|=
name|student
operator|.
name|getName
argument_list|(
name|nameFormat
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DepartmentalInstructor
name|instructor
init|=
operator|new
name|DepartmentalInstructorDAO
argument_list|()
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
name|id
operator|=
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
expr_stmt|;
name|name
operator|=
name|instructor
operator|.
name|getName
argument_list|(
name|nameFormat
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|match
argument_list|(
name|form
argument_list|,
name|id
argument_list|)
operator|&&
operator|!
name|match
argument_list|(
name|form
argument_list|,
name|name
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|form
operator|.
name|getShowSections
argument_list|()
condition|)
block|{
name|String
name|classes
init|=
literal|""
decl_stmt|,
name|enrollment
init|=
literal|""
decl_stmt|,
name|seating
init|=
literal|""
decl_stmt|,
name|date
init|=
literal|""
decl_stmt|,
name|time
init|=
literal|""
decl_stmt|,
name|room
init|=
literal|""
decl_stmt|;
name|boolean
name|firstSection
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|exam
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|studentConf
operator|&&
operator|!
name|section
operator|.
name|getStudentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|studentId
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|classes
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|classes
operator|+=
name|nl
expr_stmt|;
name|enrollment
operator|+=
name|nl
expr_stmt|;
name|seating
operator|+=
name|nl
expr_stmt|;
name|date
operator|+=
name|nl
expr_stmt|;
name|time
operator|+=
name|nl
expr_stmt|;
name|room
operator|+=
name|nl
expr_stmt|;
block|}
name|classes
operator|+=
name|section
operator|.
name|getName
argument_list|()
expr_stmt|;
name|enrollment
operator|+=
name|String
operator|.
name|valueOf
argument_list|(
name|section
operator|.
name|getNrStudents
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|firstSection
condition|)
block|{
name|seating
operator|+=
name|exam
operator|.
name|getSeatingTypeLabel
argument_list|()
expr_stmt|;
name|date
operator|+=
name|exam
operator|.
name|getDate
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|time
operator|+=
name|exam
operator|.
name|getTime
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|room
operator|+=
name|exam
operator|.
name|getRoomsName
argument_list|(
name|html
argument_list|,
literal|", "
argument_list|)
expr_stmt|;
block|}
name|firstSection
operator|=
literal|false
expr_stmt|;
block|}
name|firstSection
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|studentConf
operator|&&
operator|!
name|section
operator|.
name|getStudentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|studentId
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|classes
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|classes
operator|+=
name|nl
expr_stmt|;
name|enrollment
operator|+=
name|nl
expr_stmt|;
name|seating
operator|+=
name|nl
expr_stmt|;
name|date
operator|+=
name|nl
expr_stmt|;
name|time
operator|+=
name|nl
expr_stmt|;
name|room
operator|+=
name|nl
expr_stmt|;
block|}
name|classes
operator|+=
name|section
operator|.
name|getName
argument_list|()
expr_stmt|;
name|enrollment
operator|+=
name|String
operator|.
name|valueOf
argument_list|(
name|section
operator|.
name|getNrStudents
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|firstSection
condition|)
block|{
name|seating
operator|+=
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getSeatingTypeLabel
argument_list|()
expr_stmt|;
name|room
operator|+=
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getRoomsName
argument_list|(
name|html
argument_list|,
literal|", "
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|equals
argument_list|(
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getPeriod
argument_list|()
argument_list|)
operator|||
name|exam
operator|.
name|getLength
argument_list|()
operator|!=
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getLength
argument_list|()
condition|)
block|{
name|time
operator|+=
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getTime
argument_list|(
name|html
argument_list|)
expr_stmt|;
block|}
block|}
name|firstSection
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|conflict
operator|.
name|getOtherEventId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|classes
operator|+=
name|nl
expr_stmt|;
name|enrollment
operator|+=
name|nl
expr_stmt|;
name|seating
operator|+=
name|nl
expr_stmt|;
name|date
operator|+=
name|nl
expr_stmt|;
name|time
operator|+=
name|nl
expr_stmt|;
name|room
operator|+=
name|nl
expr_stmt|;
name|classes
operator|+=
name|conflict
operator|.
name|getOtherEventName
argument_list|()
expr_stmt|;
name|enrollment
operator|+=
name|conflict
operator|.
name|getOtherEventSize
argument_list|()
expr_stmt|;
name|seating
operator|+=
operator|(
name|conflict
operator|.
name|isOtherClass
argument_list|()
condition|?
literal|"Class"
else|:
literal|"Event"
operator|)
expr_stmt|;
name|room
operator|+=
name|conflict
operator|.
name|getOtherEventRoom
argument_list|()
expr_stmt|;
comment|//date += conflict.getOtherEventDate();
name|time
operator|+=
name|conflict
operator|.
name|getOtherEventTime
argument_list|()
expr_stmt|;
block|}
name|table
operator|.
name|addLine
argument_list|(
literal|"onClick=\"document.location='examDetail.action?examId="
operator|+
name|exam
operator|.
name|getExamId
argument_list|()
operator|+
literal|"';\""
argument_list|,
operator|new
name|String
index|[]
block|{
name|id
block|,
name|name
block|,
operator|(
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"P"
argument_list|)
operator|+
literal|"'>"
else|:
literal|""
operator|)
operator|+
literal|"Direct"
operator|+
operator|(
name|html
condition|?
literal|"</font>"
else|:
literal|""
operator|)
block|,
name|classes
block|,
name|enrollment
block|,
name|seating
block|,
name|date
block|,
name|time
block|,
name|room
block|,
literal|""
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
name|id
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|name
argument_list|,
name|id
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|0
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|exam
operator|.
name|getNrStudents
argument_list|()
operator|-
operator|(
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getNrStudents
argument_list|()
operator|)
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getSeatingType
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriodOrd
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getRoomsName
argument_list|(
literal|":"
argument_list|)
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
literal|1.0
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|}
argument_list|,
name|exam
operator|.
name|getExamId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|addLine
argument_list|(
literal|"onClick=\"document.location='examDetail.action?examId="
operator|+
name|exam
operator|.
name|getExamId
argument_list|()
operator|+
literal|"';\""
argument_list|,
operator|new
name|String
index|[]
block|{
name|id
block|,
name|name
block|,
operator|(
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"P"
argument_list|)
operator|+
literal|"'>"
else|:
literal|""
operator|)
operator|+
literal|"Direct"
operator|+
operator|(
name|html
condition|?
literal|"</font>"
else|:
literal|""
operator|)
block|,
name|exam
operator|.
name|getExamName
argument_list|()
operator|+
name|nl
operator|+
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getExamName
argument_list|()
block|,
name|exam
operator|.
name|getNrStudents
argument_list|()
operator|+
name|nl
operator|+
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getNrStudents
argument_list|()
block|,
name|exam
operator|.
name|getSeatingTypeLabel
argument_list|()
operator|+
name|nl
operator|+
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getSeatingTypeLabel
argument_list|()
block|,
name|exam
operator|.
name|getDate
argument_list|(
name|html
argument_list|)
operator|+
name|nl
block|,
name|exam
operator|.
name|getTime
argument_list|(
name|html
argument_list|)
operator|+
name|nl
operator|+
operator|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|equals
argument_list|(
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getPeriod
argument_list|()
argument_list|)
operator|&&
name|exam
operator|.
name|getLength
argument_list|()
operator|==
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getLength
argument_list|()
condition|?
literal|""
else|:
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getTime
argument_list|(
name|html
argument_list|)
operator|)
block|,
name|exam
operator|.
name|getRoomsName
argument_list|(
name|html
argument_list|,
literal|", "
argument_list|)
operator|+
name|nl
operator|+
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getRoomsName
argument_list|(
name|html
argument_list|,
literal|", "
argument_list|)
block|,
literal|""
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
name|id
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|name
argument_list|,
name|id
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|0
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|exam
operator|.
name|getNrStudents
argument_list|()
operator|-
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getNrStudents
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getSeatingType
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriodOrd
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getRoomsName
argument_list|(
literal|":"
argument_list|)
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
literal|1.0
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|}
argument_list|,
name|exam
operator|.
name|getExamId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|conflict
operator|.
name|getOtherEventId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|addLine
argument_list|(
literal|"onClick=\"document.location='examDetail.action?examId="
operator|+
name|exam
operator|.
name|getExamId
argument_list|()
operator|+
literal|"';\""
argument_list|,
operator|new
name|String
index|[]
block|{
name|id
block|,
name|name
block|,
operator|(
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"P"
argument_list|)
operator|+
literal|"'>"
else|:
literal|""
operator|)
operator|+
literal|"Direct"
operator|+
operator|(
name|html
condition|?
literal|"</font>"
else|:
literal|""
operator|)
block|,
name|exam
operator|.
name|getExamName
argument_list|()
operator|+
name|nl
operator|+
name|conflict
operator|.
name|getOtherEventName
argument_list|()
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|exam
operator|.
name|getNrStudents
argument_list|()
argument_list|)
operator|+
name|nl
operator|+
name|conflict
operator|.
name|getOtherEventSize
argument_list|()
block|,
name|exam
operator|.
name|getSeatingTypeLabel
argument_list|()
operator|+
name|nl
operator|+
operator|(
name|conflict
operator|.
name|isOtherClass
argument_list|()
condition|?
literal|"Class"
else|:
literal|"Event"
operator|)
block|,
name|exam
operator|.
name|getDate
argument_list|(
name|html
argument_list|)
operator|+
name|nl
block|,
comment|//+conflict.getOtherEventDate(),
name|exam
operator|.
name|getTime
argument_list|(
name|html
argument_list|)
operator|+
name|nl
operator|+
name|conflict
operator|.
name|getOtherEventTime
argument_list|()
block|,
name|exam
operator|.
name|getRoomsName
argument_list|(
name|html
argument_list|,
literal|", "
argument_list|)
operator|+
name|nl
operator|+
name|conflict
operator|.
name|getOtherEventRoom
argument_list|()
block|,
literal|""
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
name|id
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|name
argument_list|,
name|id
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|0
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|exam
operator|.
name|getNrStudents
argument_list|()
operator|-
name|conflict
operator|.
name|getOtherEventSize
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getSeatingType
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriodOrd
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getRoomsName
argument_list|(
literal|":"
argument_list|)
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
literal|1.0
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|}
argument_list|,
name|exam
operator|.
name|getExamId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|btb
condition|)
for|for
control|(
name|BackToBackConflict
name|conflict
range|:
operator|(
name|studentConf
condition|?
name|exam
operator|.
name|getBackToBackConflicts
argument_list|()
else|:
name|exam
operator|.
name|getInstructorBackToBackConflicts
argument_list|()
operator|)
control|)
block|{
if|if
condition|(
name|exam
operator|.
name|compareTo
argument_list|(
name|conflict
operator|.
name|getOtherExam
argument_list|()
argument_list|)
operator|>=
literal|0
operator|&&
name|exams
operator|.
name|contains
argument_list|(
name|conflict
operator|.
name|getOtherExam
argument_list|()
argument_list|)
condition|)
continue|continue;
for|for
control|(
name|Long
name|studentId
range|:
name|conflict
operator|.
name|getStudents
argument_list|()
control|)
block|{
name|String
name|id
init|=
literal|""
decl_stmt|,
name|name
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|studentConf
condition|)
block|{
name|Student
name|student
init|=
name|students
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
name|id
operator|=
name|student
operator|.
name|getExternalUniqueId
argument_list|()
expr_stmt|;
name|name
operator|=
name|student
operator|.
name|getName
argument_list|(
name|nameFormat
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DepartmentalInstructor
name|instructor
init|=
operator|new
name|DepartmentalInstructorDAO
argument_list|()
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
name|id
operator|=
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
expr_stmt|;
name|name
operator|=
name|instructor
operator|.
name|getName
argument_list|(
name|nameFormat
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|match
argument_list|(
name|form
argument_list|,
name|id
argument_list|)
operator|&&
operator|!
name|match
argument_list|(
name|form
argument_list|,
name|name
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|form
operator|.
name|getShowSections
argument_list|()
condition|)
block|{
name|String
name|classes
init|=
literal|""
decl_stmt|,
name|enrollment
init|=
literal|""
decl_stmt|,
name|seating
init|=
literal|""
decl_stmt|,
name|date
init|=
literal|""
decl_stmt|,
name|time
init|=
literal|""
decl_stmt|,
name|room
init|=
literal|""
decl_stmt|;
name|boolean
name|firstSection
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|exam
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|studentConf
operator|&&
operator|!
name|section
operator|.
name|getStudentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|studentId
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|classes
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|classes
operator|+=
name|nl
expr_stmt|;
name|enrollment
operator|+=
name|nl
expr_stmt|;
name|seating
operator|+=
name|nl
expr_stmt|;
name|date
operator|+=
name|nl
expr_stmt|;
name|time
operator|+=
name|nl
expr_stmt|;
name|room
operator|+=
name|nl
expr_stmt|;
block|}
name|classes
operator|+=
name|section
operator|.
name|getName
argument_list|()
expr_stmt|;
name|enrollment
operator|+=
name|String
operator|.
name|valueOf
argument_list|(
name|section
operator|.
name|getNrStudents
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|firstSection
condition|)
block|{
name|seating
operator|+=
name|exam
operator|.
name|getSeatingTypeLabel
argument_list|()
expr_stmt|;
name|date
operator|+=
name|exam
operator|.
name|getDate
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|time
operator|+=
name|exam
operator|.
name|getTime
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|room
operator|+=
name|exam
operator|.
name|getRoomsName
argument_list|(
name|html
argument_list|,
literal|", "
argument_list|)
expr_stmt|;
block|}
name|firstSection
operator|=
literal|false
expr_stmt|;
block|}
name|firstSection
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|studentConf
operator|&&
operator|!
name|section
operator|.
name|getStudentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|studentId
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|classes
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|classes
operator|+=
name|nl
expr_stmt|;
name|enrollment
operator|+=
name|nl
expr_stmt|;
name|seating
operator|+=
name|nl
expr_stmt|;
name|date
operator|+=
name|nl
expr_stmt|;
name|time
operator|+=
name|nl
expr_stmt|;
name|room
operator|+=
name|nl
expr_stmt|;
block|}
name|classes
operator|+=
name|section
operator|.
name|getName
argument_list|()
expr_stmt|;
name|enrollment
operator|+=
name|String
operator|.
name|valueOf
argument_list|(
name|section
operator|.
name|getNrStudents
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|firstSection
condition|)
block|{
name|seating
operator|+=
name|exam
operator|.
name|getSeatingTypeLabel
argument_list|()
expr_stmt|;
name|time
operator|+=
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getTime
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|room
operator|+=
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getRoomsName
argument_list|(
name|html
argument_list|,
literal|", "
argument_list|)
expr_stmt|;
block|}
name|firstSection
operator|=
literal|false
expr_stmt|;
block|}
name|table
operator|.
name|addLine
argument_list|(
literal|"onClick=\"document.location='examDetail.action?examId="
operator|+
name|exam
operator|.
name|getExamId
argument_list|()
operator|+
literal|"';\""
argument_list|,
operator|new
name|String
index|[]
block|{
name|id
block|,
name|name
block|,
operator|(
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"1"
argument_list|)
operator|+
literal|"'>"
else|:
literal|""
operator|)
operator|+
literal|"Back-To-Back"
operator|+
operator|(
name|html
condition|?
literal|"</font>"
else|:
literal|""
operator|)
block|,
name|classes
block|,
name|enrollment
block|,
name|seating
block|,
name|date
block|,
name|time
block|,
name|room
block|,
operator|(
name|int
operator|)
operator|(
name|conflict
operator|.
name|getDistance
argument_list|()
operator|*
literal|10.0
operator|)
operator|+
literal|" m"
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
name|id
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|name
argument_list|,
name|id
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|2
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|exam
operator|.
name|getNrStudents
argument_list|()
operator|-
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getNrStudents
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getSeatingType
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriodOrd
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getRoomsName
argument_list|(
literal|":"
argument_list|)
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|conflict
operator|.
name|getDistance
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|}
argument_list|,
name|exam
operator|.
name|getExamId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|table
operator|.
name|addLine
argument_list|(
literal|"onClick=\"document.location='examDetail.action?examId="
operator|+
name|exam
operator|.
name|getExamId
argument_list|()
operator|+
literal|"';\""
argument_list|,
operator|new
name|String
index|[]
block|{
name|id
block|,
name|name
block|,
operator|(
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"1"
argument_list|)
operator|+
literal|"'>"
else|:
literal|""
operator|)
operator|+
literal|"Back-To-Back"
operator|+
operator|(
name|html
condition|?
literal|"</font>"
else|:
literal|""
operator|)
block|,
name|exam
operator|.
name|getExamName
argument_list|()
operator|+
name|nl
operator|+
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getExamName
argument_list|()
block|,
name|exam
operator|.
name|getNrStudents
argument_list|()
operator|+
name|nl
operator|+
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getNrStudents
argument_list|()
block|,
name|exam
operator|.
name|getSeatingTypeLabel
argument_list|()
operator|+
name|nl
operator|+
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getSeatingTypeLabel
argument_list|()
block|,
name|exam
operator|.
name|getDate
argument_list|(
name|html
argument_list|)
operator|+
name|nl
block|,
name|exam
operator|.
name|getTime
argument_list|(
name|html
argument_list|)
operator|+
name|nl
operator|+
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getTime
argument_list|(
name|html
argument_list|)
block|,
name|exam
operator|.
name|getRoomsName
argument_list|(
name|html
argument_list|,
literal|", "
argument_list|)
operator|+
name|nl
operator|+
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getRoomsName
argument_list|(
name|html
argument_list|,
literal|", "
argument_list|)
block|,
operator|(
name|int
operator|)
operator|(
name|conflict
operator|.
name|getDistance
argument_list|()
operator|*
literal|10.0
operator|)
operator|+
literal|" m"
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
name|id
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|name
argument_list|,
name|id
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|2
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|exam
operator|.
name|getNrStudents
argument_list|()
operator|-
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getNrStudents
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getSeatingType
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriodOrd
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getRoomsName
argument_list|(
literal|":"
argument_list|)
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|conflict
operator|.
name|getDistance
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|}
argument_list|,
name|exam
operator|.
name|getExamId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|m2d
condition|)
name|conflicts
label|:
for|for
control|(
name|MoreThanTwoADayConflict
name|conflict
range|:
operator|(
name|studentConf
condition|?
name|exam
operator|.
name|getMoreThanTwoADaysConflicts
argument_list|()
else|:
name|exam
operator|.
name|getInstructorMoreThanTwoADaysConflicts
argument_list|()
operator|)
control|)
block|{
for|for
control|(
name|ExamAssignment
name|other
range|:
name|conflict
operator|.
name|getOtherExams
argument_list|()
control|)
if|if
condition|(
name|exam
operator|.
name|compareTo
argument_list|(
name|other
argument_list|)
operator|>=
literal|0
operator|&&
name|exams
operator|.
name|contains
argument_list|(
name|other
argument_list|)
condition|)
continue|continue
name|conflicts
continue|;
for|for
control|(
name|Long
name|studentId
range|:
name|conflict
operator|.
name|getStudents
argument_list|()
control|)
block|{
name|String
name|id
init|=
literal|""
decl_stmt|,
name|name
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|studentConf
condition|)
block|{
name|Student
name|student
init|=
name|students
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
name|id
operator|=
name|student
operator|.
name|getExternalUniqueId
argument_list|()
expr_stmt|;
name|name
operator|=
name|student
operator|.
name|getName
argument_list|(
name|nameFormat
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DepartmentalInstructor
name|instructor
init|=
operator|new
name|DepartmentalInstructorDAO
argument_list|()
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
name|id
operator|=
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
expr_stmt|;
name|name
operator|=
name|instructor
operator|.
name|getName
argument_list|(
name|nameFormat
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|match
argument_list|(
name|form
argument_list|,
name|id
argument_list|)
operator|&&
operator|!
name|match
argument_list|(
name|form
argument_list|,
name|name
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|form
operator|.
name|getShowSections
argument_list|()
condition|)
block|{
name|String
name|classes
init|=
literal|""
decl_stmt|,
name|enrollment
init|=
literal|""
decl_stmt|,
name|seating
init|=
literal|""
decl_stmt|,
name|date
init|=
literal|""
decl_stmt|,
name|time
init|=
literal|""
decl_stmt|,
name|room
init|=
literal|""
decl_stmt|;
name|int
name|nrStudents
init|=
name|exam
operator|.
name|getNrStudents
argument_list|()
decl_stmt|;
name|boolean
name|firstSection
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|exam
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|studentConf
operator|&&
operator|!
name|section
operator|.
name|getStudentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|studentId
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|classes
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|classes
operator|+=
name|nl
expr_stmt|;
name|enrollment
operator|+=
name|nl
expr_stmt|;
name|seating
operator|+=
name|nl
expr_stmt|;
name|date
operator|+=
name|nl
expr_stmt|;
name|time
operator|+=
name|nl
expr_stmt|;
name|room
operator|+=
name|nl
expr_stmt|;
block|}
name|classes
operator|+=
name|section
operator|.
name|getName
argument_list|()
expr_stmt|;
name|enrollment
operator|+=
name|String
operator|.
name|valueOf
argument_list|(
name|section
operator|.
name|getNrStudents
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|firstSection
condition|)
block|{
name|seating
operator|+=
name|exam
operator|.
name|getSeatingTypeLabel
argument_list|()
expr_stmt|;
name|date
operator|+=
name|exam
operator|.
name|getDate
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|time
operator|+=
name|exam
operator|.
name|getTime
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|room
operator|+=
name|exam
operator|.
name|getRoomsName
argument_list|(
name|html
argument_list|,
literal|", "
argument_list|)
expr_stmt|;
block|}
name|firstSection
operator|=
literal|false
expr_stmt|;
block|}
for|for
control|(
name|ExamAssignment
name|other
range|:
name|conflict
operator|.
name|getOtherExams
argument_list|()
control|)
block|{
name|firstSection
operator|=
literal|true
expr_stmt|;
name|nrStudents
operator|+=
name|other
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|other
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|studentConf
operator|&&
operator|!
name|section
operator|.
name|getStudentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|studentId
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|classes
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|classes
operator|+=
name|nl
expr_stmt|;
name|enrollment
operator|+=
name|nl
expr_stmt|;
name|seating
operator|+=
name|nl
expr_stmt|;
name|date
operator|+=
name|nl
expr_stmt|;
name|time
operator|+=
name|nl
expr_stmt|;
name|room
operator|+=
name|nl
expr_stmt|;
block|}
name|classes
operator|+=
name|section
operator|.
name|getName
argument_list|()
expr_stmt|;
name|enrollment
operator|+=
name|String
operator|.
name|valueOf
argument_list|(
name|section
operator|.
name|getNrStudents
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|firstSection
condition|)
block|{
name|seating
operator|+=
name|other
operator|.
name|getSeatingTypeLabel
argument_list|()
expr_stmt|;
name|time
operator|+=
name|other
operator|.
name|getTime
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|room
operator|+=
name|other
operator|.
name|getRoomsName
argument_list|(
name|html
argument_list|,
literal|", "
argument_list|)
expr_stmt|;
block|}
name|firstSection
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|table
operator|.
name|addLine
argument_list|(
literal|"onClick=\"document.location='examDetail.action?examId="
operator|+
name|exam
operator|.
name|getExamId
argument_list|()
operator|+
literal|"';\""
argument_list|,
operator|new
name|String
index|[]
block|{
name|id
block|,
name|name
block|,
operator|(
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"2"
argument_list|)
operator|+
literal|"'>"
else|:
literal|""
operator|)
operator|+
operator|(
name|html
condition|?
literal|"&gt;"
else|:
literal|""
operator|)
operator|+
literal|"2 A Day"
operator|+
operator|(
name|html
condition|?
literal|"</font>"
else|:
literal|""
operator|)
block|,
name|classes
block|,
name|enrollment
block|,
name|seating
block|,
name|date
block|,
name|time
block|,
name|room
block|,
literal|""
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
name|id
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|name
argument_list|,
name|id
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|1
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|nrStudents
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getSeatingType
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriodOrd
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getRoomsName
argument_list|(
literal|":"
argument_list|)
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
literal|1.0
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|}
argument_list|,
name|exam
operator|.
name|getExamId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|classes
init|=
name|exam
operator|.
name|getExamName
argument_list|()
decl_stmt|,
name|enrollment
init|=
literal|""
operator|+
name|exam
operator|.
name|getNrStudents
argument_list|()
decl_stmt|,
name|seating
init|=
name|exam
operator|.
name|getSeatingTypeLabel
argument_list|()
decl_stmt|;
name|String
name|date
init|=
name|exam
operator|.
name|getDate
argument_list|(
name|html
argument_list|)
decl_stmt|,
name|time
init|=
name|exam
operator|.
name|getTime
argument_list|(
name|html
argument_list|)
decl_stmt|,
name|room
init|=
name|exam
operator|.
name|getRoomsName
argument_list|(
name|html
argument_list|,
literal|", "
argument_list|)
decl_stmt|;
name|int
name|nrStudents
init|=
name|exam
operator|.
name|getNrStudents
argument_list|()
decl_stmt|;
for|for
control|(
name|ExamAssignment
name|other
range|:
name|conflict
operator|.
name|getOtherExams
argument_list|()
control|)
block|{
name|classes
operator|+=
name|nl
operator|+
name|other
operator|.
name|getExamName
argument_list|()
expr_stmt|;
name|enrollment
operator|+=
name|nl
operator|+
name|other
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
name|seating
operator|+=
name|nl
operator|+
name|other
operator|.
name|getSeatingTypeLabel
argument_list|()
expr_stmt|;
name|time
operator|+=
name|nl
operator|+
name|other
operator|.
name|getTime
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|room
operator|+=
name|nl
operator|+
name|other
operator|.
name|getRoomsName
argument_list|(
name|html
argument_list|,
literal|", "
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|addLine
argument_list|(
literal|"onClick=\"document.location='examDetail.action?examId="
operator|+
name|exam
operator|.
name|getExamId
argument_list|()
operator|+
literal|"';\""
argument_list|,
operator|new
name|String
index|[]
block|{
name|id
block|,
name|name
block|,
operator|(
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"2"
argument_list|)
operator|+
literal|"'>"
else|:
literal|""
operator|)
operator|+
operator|(
name|html
condition|?
literal|"&gt;"
else|:
literal|""
operator|)
operator|+
literal|"2 A Day"
operator|+
operator|(
name|html
condition|?
literal|"</font>"
else|:
literal|""
operator|)
block|,
name|classes
block|,
name|enrollment
block|,
name|seating
block|,
name|date
block|,
name|time
block|,
name|room
block|,
literal|""
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
name|id
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|name
argument_list|,
name|id
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|1
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|nrStudents
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getSeatingType
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriodOrd
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getRoomsName
argument_list|(
literal|":"
argument_list|)
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
literal|1.0
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|}
argument_list|,
name|exam
operator|.
name|getExamId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|table
return|;
block|}
specifier|private
name|PdfWebTable
name|generateDirectConflictsReport
parameter_list|(
name|boolean
name|html
parameter_list|,
name|ExamAssignmentReportForm
name|form
parameter_list|,
name|Collection
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
parameter_list|,
name|boolean
name|studentConf
parameter_list|)
block|{
name|String
name|nl
init|=
operator|(
name|html
condition|?
literal|"<br>"
else|:
literal|"\n"
operator|)
decl_stmt|;
name|DecimalFormat
name|df
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0.0"
argument_list|)
decl_stmt|;
name|PdfWebTable
name|table
init|=
operator|new
name|PdfWebTable
argument_list|(
literal|10
argument_list|,
name|form
operator|.
name|getReport
argument_list|()
argument_list|,
literal|"examAssignmentReport.do?ord=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"1st "
operator|+
operator|(
name|form
operator|.
name|getShowSections
argument_list|()
condition|?
literal|"Class / Course"
else|:
literal|"Examination"
operator|)
block|,
literal|"1st Enrollment"
block|,
literal|"1st Seating"
operator|+
name|nl
operator|+
literal|"Type"
block|,
literal|"2nd "
operator|+
operator|(
name|form
operator|.
name|getShowSections
argument_list|()
condition|?
literal|"Class / Course"
else|:
literal|"Examination"
operator|)
block|,
literal|"2nd Enrollment"
block|,
literal|"2nd Seating"
operator|+
name|nl
operator|+
literal|"Type"
block|,
literal|"Date"
block|,
literal|"Time"
block|,
literal|"Direct"
block|,
literal|"Direct [%]"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"right"
block|,
literal|"center"
block|,
literal|"left"
block|,
literal|"right"
block|,
literal|"center"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"right"
block|,
literal|"right"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
decl_stmt|;
name|table
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap"
argument_list|)
expr_stmt|;
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|exams
control|)
block|{
if|if
condition|(
operator|!
name|match
argument_list|(
name|form
argument_list|,
name|exam
argument_list|)
condition|)
continue|continue;
for|for
control|(
name|DirectConflict
name|conflict
range|:
operator|(
name|studentConf
condition|?
name|exam
operator|.
name|getDirectConflicts
argument_list|()
else|:
name|exam
operator|.
name|getInstructorDirectConflicts
argument_list|()
operator|)
control|)
block|{
if|if
condition|(
name|match
argument_list|(
name|form
argument_list|,
name|conflict
operator|.
name|getOtherExam
argument_list|()
argument_list|)
operator|&&
name|exam
operator|.
name|compareTo
argument_list|(
name|conflict
operator|.
name|getOtherExam
argument_list|()
argument_list|)
operator|>=
literal|0
condition|)
continue|continue;
name|ExamAssignment
name|other
init|=
name|conflict
operator|.
name|getOtherExam
argument_list|()
decl_stmt|;
if|if
condition|(
name|form
operator|.
name|getShowSections
argument_list|()
condition|)
block|{
for|for
control|(
name|ExamSectionInfo
name|section1
range|:
name|exam
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|other
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ExamSectionInfo
name|section2
range|:
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|match
argument_list|(
name|form
argument_list|,
name|section1
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
operator|!
name|match
argument_list|(
name|form
argument_list|,
name|section2
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
continue|continue;
name|int
name|nrStudents
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|studentConf
condition|)
for|for
control|(
name|Long
name|studentId
range|:
name|section1
operator|.
name|getStudentIds
argument_list|()
control|)
block|{
if|if
condition|(
name|section2
operator|.
name|getStudentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|studentId
argument_list|)
condition|)
name|nrStudents
operator|++
expr_stmt|;
block|}
else|else
name|nrStudents
operator|=
name|conflict
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
if|if
condition|(
name|nrStudents
operator|==
literal|0
condition|)
continue|continue;
name|table
operator|.
name|addLine
argument_list|(
literal|"onClick=\"document.location='examDetail.action?examId="
operator|+
name|exam
operator|.
name|getExamId
argument_list|()
operator|+
literal|"';\""
argument_list|,
operator|new
name|String
index|[]
block|{
name|section1
operator|.
name|getName
argument_list|()
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|section1
operator|.
name|getNrStudents
argument_list|()
argument_list|)
block|,
name|exam
operator|.
name|getSeatingTypeLabel
argument_list|()
block|,
name|section2
operator|.
name|getName
argument_list|()
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|section2
operator|.
name|getNrStudents
argument_list|()
argument_list|)
block|,
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getSeatingTypeLabel
argument_list|()
block|,
name|exam
operator|.
name|getDate
argument_list|(
name|html
argument_list|)
block|,
name|exam
operator|.
name|getTime
argument_list|(
name|html
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|nrStudents
argument_list|)
block|,
name|df
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|nrStudents
operator|/
name|Math
operator|.
name|min
argument_list|(
name|section1
operator|.
name|getNrStudents
argument_list|()
argument_list|,
name|section2
operator|.
name|getNrStudents
argument_list|()
argument_list|)
argument_list|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
name|section1
operator|.
name|getName
argument_list|()
argument_list|,
name|section2
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|,
name|other
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|section1
operator|.
name|getNrStudents
argument_list|()
argument_list|,
operator|-
name|section2
operator|.
name|getNrStudents
argument_list|()
argument_list|,
name|section1
operator|.
name|getName
argument_list|()
argument_list|,
name|section2
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|,
name|other
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getSeatingType
argument_list|()
argument_list|,
name|other
operator|.
name|getSeatingType
argument_list|()
argument_list|,
name|section1
operator|.
name|getName
argument_list|()
argument_list|,
name|section2
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|,
name|other
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|section2
operator|.
name|getName
argument_list|()
argument_list|,
name|section1
operator|.
name|getName
argument_list|()
argument_list|,
name|other
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|section2
operator|.
name|getNrStudents
argument_list|()
argument_list|,
operator|-
name|section1
operator|.
name|getNrStudents
argument_list|()
argument_list|,
name|section2
operator|.
name|getName
argument_list|()
argument_list|,
name|section1
operator|.
name|getName
argument_list|()
argument_list|,
name|other
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|other
operator|.
name|getSeatingType
argument_list|()
argument_list|,
name|exam
operator|.
name|getSeatingType
argument_list|()
argument_list|,
name|section2
operator|.
name|getName
argument_list|()
argument_list|,
name|section1
operator|.
name|getName
argument_list|()
argument_list|,
name|other
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriodOrd
argument_list|()
argument_list|,
name|exam
argument_list|,
name|other
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|exam
argument_list|,
name|other
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|nrStudents
argument_list|,
name|exam
argument_list|,
name|other
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
literal|100.0
operator|*
name|nrStudents
operator|/
name|Math
operator|.
name|min
argument_list|(
name|section1
operator|.
name|getNrStudents
argument_list|()
argument_list|,
name|section2
operator|.
name|getNrStudents
argument_list|()
argument_list|)
argument_list|,
name|exam
argument_list|,
name|other
argument_list|)
block|}
argument_list|,
name|exam
operator|.
name|getExamId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|conflict
operator|.
name|getOtherEventId
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|match
argument_list|(
name|form
argument_list|,
name|section1
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
continue|continue;
name|int
name|nrStudents
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Long
name|studentId
range|:
name|section1
operator|.
name|getStudentIds
argument_list|()
control|)
if|if
condition|(
name|conflict
operator|.
name|getStudents
argument_list|()
operator|.
name|contains
argument_list|(
name|studentId
argument_list|)
condition|)
name|nrStudents
operator|++
expr_stmt|;
if|if
condition|(
name|nrStudents
operator|==
literal|0
condition|)
continue|continue;
name|table
operator|.
name|addLine
argument_list|(
literal|"onClick=\"document.location='examDetail.action?examId="
operator|+
name|exam
operator|.
name|getExamId
argument_list|()
operator|+
literal|"';\""
argument_list|,
operator|new
name|String
index|[]
block|{
name|section1
operator|.
name|getName
argument_list|()
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|section1
operator|.
name|getNrStudents
argument_list|()
argument_list|)
block|,
name|exam
operator|.
name|getSeatingTypeLabel
argument_list|()
block|,
name|conflict
operator|.
name|getOtherEventName
argument_list|()
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|conflict
operator|.
name|getOtherEventSize
argument_list|()
argument_list|)
block|,
operator|(
name|conflict
operator|.
name|isOtherClass
argument_list|()
condition|?
literal|"Class"
else|:
literal|"Event"
operator|)
block|,
name|exam
operator|.
name|getDate
argument_list|(
name|html
argument_list|)
block|,
name|exam
operator|.
name|getTime
argument_list|(
name|html
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|nrStudents
argument_list|)
block|,
name|df
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|nrStudents
operator|/
name|Math
operator|.
name|min
argument_list|(
name|section1
operator|.
name|getNrStudents
argument_list|()
argument_list|,
name|conflict
operator|.
name|getOtherEventSize
argument_list|()
argument_list|)
argument_list|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
name|section1
operator|.
name|getName
argument_list|()
argument_list|,
name|conflict
operator|.
name|getOtherEventName
argument_list|()
argument_list|,
name|exam
argument_list|,
name|other
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|section1
operator|.
name|getNrStudents
argument_list|()
argument_list|,
operator|-
name|conflict
operator|.
name|getOtherEventSize
argument_list|()
argument_list|,
name|section1
operator|.
name|getName
argument_list|()
argument_list|,
name|conflict
operator|.
name|getOtherEventName
argument_list|()
argument_list|,
name|exam
argument_list|,
name|other
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getSeatingType
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
name|section1
operator|.
name|getName
argument_list|()
argument_list|,
name|conflict
operator|.
name|getOtherEventName
argument_list|()
argument_list|,
name|exam
argument_list|,
name|other
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|conflict
operator|.
name|getOtherEventName
argument_list|()
argument_list|,
name|section1
operator|.
name|getName
argument_list|()
argument_list|,
name|other
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|conflict
operator|.
name|getOtherEventSize
argument_list|()
argument_list|,
operator|-
name|section1
operator|.
name|getNrStudents
argument_list|()
argument_list|,
name|conflict
operator|.
name|getOtherEventName
argument_list|()
argument_list|,
name|section1
operator|.
name|getName
argument_list|()
argument_list|,
name|other
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
literal|1
argument_list|,
name|exam
operator|.
name|getSeatingType
argument_list|()
argument_list|,
name|conflict
operator|.
name|getOtherEventName
argument_list|()
argument_list|,
name|section1
operator|.
name|getName
argument_list|()
argument_list|,
name|other
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriodOrd
argument_list|()
argument_list|,
name|exam
argument_list|,
name|other
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|exam
argument_list|,
name|other
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|nrStudents
argument_list|,
name|exam
argument_list|,
name|other
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
literal|100.0
operator|*
name|nrStudents
operator|/
name|Math
operator|.
name|min
argument_list|(
name|section1
operator|.
name|getNrStudents
argument_list|()
argument_list|,
name|conflict
operator|.
name|getOtherEventSize
argument_list|()
argument_list|)
argument_list|,
name|exam
argument_list|,
name|other
argument_list|)
block|}
argument_list|,
name|exam
operator|.
name|getExamId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|other
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|addLine
argument_list|(
literal|"onClick=\"document.location='examDetail.action?examId="
operator|+
name|exam
operator|.
name|getExamId
argument_list|()
operator|+
literal|"';\""
argument_list|,
operator|new
name|String
index|[]
block|{
name|exam
operator|.
name|getExamName
argument_list|()
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|exam
operator|.
name|getNrStudents
argument_list|()
argument_list|)
block|,
name|exam
operator|.
name|getSeatingTypeLabel
argument_list|()
block|,
name|other
operator|.
name|getExamName
argument_list|()
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|other
operator|.
name|getNrStudents
argument_list|()
argument_list|)
block|,
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getSeatingTypeLabel
argument_list|()
block|,
name|exam
operator|.
name|getDate
argument_list|(
name|html
argument_list|)
block|,
name|exam
operator|.
name|getTime
argument_list|(
name|html
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|conflict
operator|.
name|getNrStudents
argument_list|()
argument_list|)
block|,
name|df
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|conflict
operator|.
name|getNrStudents
argument_list|()
operator|/
name|Math
operator|.
name|min
argument_list|(
name|exam
operator|.
name|getNrStudents
argument_list|()
argument_list|,
name|other
operator|.
name|getNrStudents
argument_list|()
argument_list|)
argument_list|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
name|exam
argument_list|,
name|other
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|exam
operator|.
name|getNrStudents
argument_list|()
argument_list|,
operator|-
name|other
operator|.
name|getNrStudents
argument_list|()
argument_list|,
name|exam
argument_list|,
name|other
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getSeatingType
argument_list|()
argument_list|,
name|other
operator|.
name|getSeatingType
argument_list|()
argument_list|,
name|exam
argument_list|,
name|other
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|other
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|other
operator|.
name|getNrStudents
argument_list|()
argument_list|,
operator|-
name|exam
operator|.
name|getNrStudents
argument_list|()
argument_list|,
name|other
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|other
operator|.
name|getSeatingType
argument_list|()
argument_list|,
name|exam
operator|.
name|getSeatingType
argument_list|()
argument_list|,
name|other
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriodOrd
argument_list|()
argument_list|,
name|exam
argument_list|,
name|other
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|exam
argument_list|,
name|other
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|conflict
operator|.
name|getNrStudents
argument_list|()
argument_list|,
name|exam
argument_list|,
name|other
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
literal|100.0
operator|*
name|conflict
operator|.
name|getNrStudents
argument_list|()
operator|/
name|Math
operator|.
name|min
argument_list|(
name|exam
operator|.
name|getNrStudents
argument_list|()
argument_list|,
name|other
operator|.
name|getNrStudents
argument_list|()
argument_list|)
argument_list|,
name|exam
argument_list|,
name|other
argument_list|)
block|}
argument_list|,
name|exam
operator|.
name|getExamId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|conflict
operator|.
name|getOtherEventId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|addLine
argument_list|(
literal|"onClick=\"document.location='examDetail.action?examId="
operator|+
name|exam
operator|.
name|getExamId
argument_list|()
operator|+
literal|"';\""
argument_list|,
operator|new
name|String
index|[]
block|{
name|exam
operator|.
name|getExamName
argument_list|()
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|exam
operator|.
name|getNrStudents
argument_list|()
argument_list|)
block|,
name|exam
operator|.
name|getSeatingTypeLabel
argument_list|()
block|,
name|conflict
operator|.
name|getOtherEventName
argument_list|()
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|conflict
operator|.
name|getOtherEventSize
argument_list|()
argument_list|)
block|,
operator|(
name|conflict
operator|.
name|isOtherClass
argument_list|()
condition|?
literal|"Class"
else|:
literal|"Event"
operator|)
block|,
name|exam
operator|.
name|getDate
argument_list|(
name|html
argument_list|)
block|,
name|exam
operator|.
name|getTime
argument_list|(
name|html
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|conflict
operator|.
name|getNrStudents
argument_list|()
argument_list|)
block|,
name|df
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|conflict
operator|.
name|getNrStudents
argument_list|()
operator|/
name|Math
operator|.
name|min
argument_list|(
name|exam
operator|.
name|getNrStudents
argument_list|()
argument_list|,
name|conflict
operator|.
name|getOtherEventSize
argument_list|()
argument_list|)
argument_list|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
name|exam
argument_list|,
name|other
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|exam
operator|.
name|getNrStudents
argument_list|()
argument_list|,
operator|-
name|conflict
operator|.
name|getOtherEventSize
argument_list|()
argument_list|,
name|exam
argument_list|,
name|other
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getSeatingType
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
name|exam
argument_list|,
name|other
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|other
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|conflict
operator|.
name|getOtherEventSize
argument_list|()
argument_list|,
operator|-
name|exam
operator|.
name|getNrStudents
argument_list|()
argument_list|,
name|other
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
literal|1
argument_list|,
name|exam
operator|.
name|getSeatingType
argument_list|()
argument_list|,
name|other
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriodOrd
argument_list|()
argument_list|,
name|exam
argument_list|,
name|other
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|exam
argument_list|,
name|other
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|conflict
operator|.
name|getNrStudents
argument_list|()
argument_list|,
name|exam
argument_list|,
name|other
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
literal|100.0
operator|*
name|conflict
operator|.
name|getNrStudents
argument_list|()
operator|/
name|Math
operator|.
name|min
argument_list|(
name|exam
operator|.
name|getNrStudents
argument_list|()
argument_list|,
name|conflict
operator|.
name|getOtherEventSize
argument_list|()
argument_list|)
argument_list|,
name|exam
argument_list|,
name|other
argument_list|)
block|}
argument_list|,
name|exam
operator|.
name|getExamId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|table
return|;
block|}
specifier|private
name|PdfWebTable
name|generateBackToBackConflictsReport
parameter_list|(
name|boolean
name|html
parameter_list|,
name|ExamAssignmentReportForm
name|form
parameter_list|,
name|Collection
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
parameter_list|,
name|boolean
name|studentConf
parameter_list|)
block|{
name|String
name|nl
init|=
operator|(
name|html
condition|?
literal|"<br>"
else|:
literal|"\n"
operator|)
decl_stmt|;
name|DecimalFormat
name|df
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0.0"
argument_list|)
decl_stmt|;
name|PdfWebTable
name|table
init|=
operator|new
name|PdfWebTable
argument_list|(
literal|11
argument_list|,
name|form
operator|.
name|getReport
argument_list|()
argument_list|,
literal|"examAssignmentReport.do?ord=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"1st "
operator|+
operator|(
name|form
operator|.
name|getShowSections
argument_list|()
condition|?
literal|"Class / Course"
else|:
literal|"Examination"
operator|)
block|,
literal|"1st Enrollment"
block|,
literal|"1st Seating"
operator|+
name|nl
operator|+
literal|"Type"
block|,
literal|"2nd "
operator|+
operator|(
name|form
operator|.
name|getShowSections
argument_list|()
condition|?
literal|"Class / Course"
else|:
literal|"Examination"
operator|)
block|,
literal|"2nd Enrollment"
block|,
literal|"2nd Seating"
operator|+
name|nl
operator|+
literal|"Type"
block|,
literal|"Date"
block|,
literal|"Time"
block|,
literal|"Back-To-Back"
block|,
literal|"Back-To-Back [%]"
block|,
literal|"Distance [m]"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"right"
block|,
literal|"center"
block|,
literal|"left"
block|,
literal|"right"
block|,
literal|"center"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
decl_stmt|;
name|table
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap"
argument_list|)
expr_stmt|;
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|exams
control|)
block|{
if|if
condition|(
operator|!
name|match
argument_list|(
name|form
argument_list|,
name|exam
argument_list|)
condition|)
continue|continue;
for|for
control|(
name|BackToBackConflict
name|conflict
range|:
operator|(
name|studentConf
condition|?
name|exam
operator|.
name|getBackToBackConflicts
argument_list|()
else|:
name|exam
operator|.
name|getInstructorBackToBackConflicts
argument_list|()
operator|)
control|)
block|{
if|if
condition|(
name|match
argument_list|(
name|form
argument_list|,
name|conflict
operator|.
name|getOtherExam
argument_list|()
argument_list|)
operator|&&
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|compareTo
argument_list|(
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getPeriod
argument_list|()
argument_list|)
operator|>=
literal|0
condition|)
continue|continue;
name|ExamAssignment
name|other
init|=
name|conflict
operator|.
name|getOtherExam
argument_list|()
decl_stmt|;
if|if
condition|(
name|form
operator|.
name|getShowSections
argument_list|()
condition|)
block|{
for|for
control|(
name|ExamSectionInfo
name|section1
range|:
name|exam
operator|.
name|getSections
argument_list|()
control|)
block|{
for|for
control|(
name|ExamSectionInfo
name|section2
range|:
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getSections
argument_list|()
control|)
block|{
name|int
name|nrStudents
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|match
argument_list|(
name|form
argument_list|,
name|section1
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
operator|!
name|match
argument_list|(
name|form
argument_list|,
name|section2
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|studentConf
condition|)
for|for
control|(
name|Long
name|studentId
range|:
name|section1
operator|.
name|getStudentIds
argument_list|()
control|)
block|{
if|if
condition|(
name|section2
operator|.
name|getStudentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|studentId
argument_list|)
condition|)
name|nrStudents
operator|++
expr_stmt|;
block|}
else|else
name|nrStudents
operator|=
name|conflict
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
if|if
condition|(
name|nrStudents
operator|==
literal|0
condition|)
continue|continue;
name|table
operator|.
name|addLine
argument_list|(
literal|"onClick=\"document.location='examDetail.action?examId="
operator|+
name|exam
operator|.
name|getExamId
argument_list|()
operator|+
literal|"';\""
argument_list|,
operator|new
name|String
index|[]
block|{
name|section1
operator|.
name|getName
argument_list|()
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|section1
operator|.
name|getNrStudents
argument_list|()
argument_list|)
block|,
name|exam
operator|.
name|getSeatingTypeLabel
argument_list|()
block|,
name|section2
operator|.
name|getName
argument_list|()
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|section2
operator|.
name|getNrStudents
argument_list|()
argument_list|)
block|,
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getSeatingTypeLabel
argument_list|()
block|,
name|exam
operator|.
name|getDate
argument_list|(
name|html
argument_list|)
block|,
name|exam
operator|.
name|getTime
argument_list|(
name|html
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|nrStudents
argument_list|)
block|,
name|df
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|nrStudents
operator|/
name|Math
operator|.
name|min
argument_list|(
name|section1
operator|.
name|getNrStudents
argument_list|()
argument_list|,
name|section2
operator|.
name|getNrStudents
argument_list|()
argument_list|)
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
operator|(
name|int
operator|)
operator|(
literal|10.0
operator|*
name|conflict
operator|.
name|getDistance
argument_list|()
operator|)
argument_list|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
name|section1
operator|.
name|getName
argument_list|()
argument_list|,
name|section2
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|,
name|other
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|section1
operator|.
name|getNrStudents
argument_list|()
argument_list|,
operator|-
name|section2
operator|.
name|getNrStudents
argument_list|()
argument_list|,
name|section1
operator|.
name|getName
argument_list|()
argument_list|,
name|section2
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|,
name|other
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getSeatingType
argument_list|()
argument_list|,
name|other
operator|.
name|getSeatingType
argument_list|()
argument_list|,
name|section1
operator|.
name|getName
argument_list|()
argument_list|,
name|section2
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|,
name|other
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|section2
operator|.
name|getName
argument_list|()
argument_list|,
name|section1
operator|.
name|getName
argument_list|()
argument_list|,
name|other
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|section2
operator|.
name|getNrStudents
argument_list|()
argument_list|,
operator|-
name|section1
operator|.
name|getNrStudents
argument_list|()
argument_list|,
name|section2
operator|.
name|getName
argument_list|()
argument_list|,
name|section1
operator|.
name|getName
argument_list|()
argument_list|,
name|other
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|other
operator|.
name|getSeatingType
argument_list|()
argument_list|,
name|exam
operator|.
name|getSeatingType
argument_list|()
argument_list|,
name|section2
operator|.
name|getName
argument_list|()
argument_list|,
name|section1
operator|.
name|getName
argument_list|()
argument_list|,
name|other
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriodOrd
argument_list|()
argument_list|,
name|exam
argument_list|,
name|other
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|exam
argument_list|,
name|other
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|nrStudents
argument_list|,
name|exam
argument_list|,
name|other
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
literal|100.0
operator|*
name|nrStudents
operator|/
name|Math
operator|.
name|min
argument_list|(
name|section1
operator|.
name|getNrStudents
argument_list|()
argument_list|,
name|section2
operator|.
name|getNrStudents
argument_list|()
argument_list|)
argument_list|,
name|exam
argument_list|,
name|other
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|conflict
operator|.
name|getDistance
argument_list|()
argument_list|,
name|exam
argument_list|,
name|other
argument_list|)
block|}
argument_list|,
name|exam
operator|.
name|getExamId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|table
operator|.
name|addLine
argument_list|(
literal|"onClick=\"document.location='examDetail.action?examId="
operator|+
name|exam
operator|.
name|getExamId
argument_list|()
operator|+
literal|"';\""
argument_list|,
operator|new
name|String
index|[]
block|{
name|exam
operator|.
name|getExamName
argument_list|()
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|exam
operator|.
name|getNrStudents
argument_list|()
argument_list|)
block|,
name|exam
operator|.
name|getSeatingTypeLabel
argument_list|()
block|,
name|other
operator|.
name|getExamName
argument_list|()
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|other
operator|.
name|getNrStudents
argument_list|()
argument_list|)
block|,
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getSeatingTypeLabel
argument_list|()
block|,
name|exam
operator|.
name|getDate
argument_list|(
name|html
argument_list|)
block|,
name|exam
operator|.
name|getTime
argument_list|(
name|html
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|conflict
operator|.
name|getNrStudents
argument_list|()
argument_list|)
block|,
name|df
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|conflict
operator|.
name|getNrStudents
argument_list|()
operator|/
name|Math
operator|.
name|min
argument_list|(
name|exam
operator|.
name|getNrStudents
argument_list|()
argument_list|,
name|other
operator|.
name|getNrStudents
argument_list|()
argument_list|)
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
operator|(
name|int
operator|)
operator|(
literal|10.0
operator|*
name|conflict
operator|.
name|getDistance
argument_list|()
operator|)
argument_list|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
name|exam
argument_list|,
name|other
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|exam
operator|.
name|getNrStudents
argument_list|()
argument_list|,
operator|-
name|other
operator|.
name|getNrStudents
argument_list|()
argument_list|,
name|exam
argument_list|,
name|other
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getSeatingType
argument_list|()
argument_list|,
name|other
operator|.
name|getSeatingType
argument_list|()
argument_list|,
name|exam
argument_list|,
name|other
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|other
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|other
operator|.
name|getNrStudents
argument_list|()
argument_list|,
operator|-
name|exam
operator|.
name|getNrStudents
argument_list|()
argument_list|,
name|other
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|other
operator|.
name|getSeatingType
argument_list|()
argument_list|,
name|exam
operator|.
name|getSeatingType
argument_list|()
argument_list|,
name|other
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriodOrd
argument_list|()
argument_list|,
name|exam
argument_list|,
name|other
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|exam
argument_list|,
name|other
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|conflict
operator|.
name|getNrStudents
argument_list|()
argument_list|,
name|exam
argument_list|,
name|other
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
literal|100.0
operator|*
name|conflict
operator|.
name|getNrStudents
argument_list|()
operator|/
name|Math
operator|.
name|min
argument_list|(
name|exam
operator|.
name|getNrStudents
argument_list|()
argument_list|,
name|other
operator|.
name|getNrStudents
argument_list|()
argument_list|)
argument_list|,
name|exam
argument_list|,
name|other
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|conflict
operator|.
name|getDistance
argument_list|()
argument_list|,
name|exam
argument_list|,
name|other
argument_list|)
block|}
argument_list|,
name|exam
operator|.
name|getExamId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|table
return|;
block|}
specifier|private
name|PdfWebTable
name|generate2MoreADayConflictsReport
parameter_list|(
name|boolean
name|html
parameter_list|,
name|ExamAssignmentReportForm
name|form
parameter_list|,
name|Collection
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
parameter_list|,
name|boolean
name|studentConf
parameter_list|)
block|{
name|DecimalFormat
name|df
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0.0"
argument_list|)
decl_stmt|;
name|int
name|max
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|exams
control|)
block|{
if|if
condition|(
operator|!
name|match
argument_list|(
name|form
argument_list|,
name|exam
argument_list|)
condition|)
continue|continue;
name|conflicts
label|:
for|for
control|(
name|MoreThanTwoADayConflict
name|conflict
range|:
operator|(
name|studentConf
condition|?
name|exam
operator|.
name|getMoreThanTwoADaysConflicts
argument_list|()
else|:
name|exam
operator|.
name|getInstructorMoreThanTwoADaysConflicts
argument_list|()
operator|)
control|)
block|{
for|for
control|(
name|ExamAssignment
name|other
range|:
name|conflict
operator|.
name|getOtherExams
argument_list|()
control|)
if|if
condition|(
name|match
argument_list|(
name|form
argument_list|,
name|other
argument_list|)
operator|&&
name|exam
operator|.
name|compareTo
argument_list|(
name|other
argument_list|)
operator|>=
literal|0
condition|)
continue|continue
name|conflicts
continue|;
name|max
operator|=
name|Math
operator|.
name|max
argument_list|(
name|max
argument_list|,
name|conflict
operator|.
name|getOtherExams
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|max
operator|<=
literal|2
condition|)
return|return
literal|null
return|;
name|String
index|[]
name|colName
init|=
operator|new
name|String
index|[
literal|3
operator|+
literal|3
operator|*
name|max
index|]
decl_stmt|;
name|String
index|[]
name|colAlign
init|=
operator|new
name|String
index|[
literal|3
operator|+
literal|3
operator|*
name|max
index|]
decl_stmt|;
name|boolean
index|[]
name|colOrd
init|=
operator|new
name|boolean
index|[
literal|3
operator|+
literal|3
operator|*
name|max
index|]
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|colName
index|[
name|idx
index|]
operator|=
literal|"Date"
expr_stmt|;
name|colAlign
index|[
name|idx
index|]
operator|=
literal|"left"
expr_stmt|;
name|colOrd
index|[
name|idx
operator|++
index|]
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|max
condition|;
name|i
operator|++
control|)
block|{
name|String
name|th
init|=
operator|(
name|i
operator|==
literal|0
condition|?
literal|"1st"
else|:
name|i
operator|==
literal|1
condition|?
literal|"2nd"
else|:
name|i
operator|==
literal|2
condition|?
literal|"3rd"
else|:
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|"th"
operator|)
decl_stmt|;
name|colName
index|[
name|idx
index|]
operator|=
name|th
operator|+
literal|" "
operator|+
operator|(
name|form
operator|.
name|getShowSections
argument_list|()
condition|?
literal|"Class / Course"
else|:
literal|"Examination"
operator|)
expr_stmt|;
name|colAlign
index|[
name|idx
index|]
operator|=
literal|"left"
expr_stmt|;
name|colOrd
index|[
name|idx
operator|++
index|]
operator|=
literal|true
expr_stmt|;
name|colName
index|[
name|idx
index|]
operator|=
name|th
operator|+
literal|" Enrollment"
expr_stmt|;
name|colAlign
index|[
name|idx
index|]
operator|=
literal|"right"
expr_stmt|;
name|colOrd
index|[
name|idx
operator|++
index|]
operator|=
literal|true
expr_stmt|;
name|colName
index|[
name|idx
index|]
operator|=
name|th
operator|+
literal|" Time"
expr_stmt|;
name|colAlign
index|[
name|idx
index|]
operator|=
literal|"left"
expr_stmt|;
name|colOrd
index|[
name|idx
operator|++
index|]
operator|=
literal|true
expr_stmt|;
block|}
name|colName
index|[
name|idx
index|]
operator|=
operator|(
name|html
condition|?
literal|"&gt;"
else|:
literal|""
operator|)
operator|+
literal|"2 A Day"
expr_stmt|;
name|colAlign
index|[
name|idx
index|]
operator|=
literal|"left"
expr_stmt|;
name|colOrd
index|[
name|idx
operator|++
index|]
operator|=
literal|true
expr_stmt|;
name|colName
index|[
name|idx
index|]
operator|=
operator|(
name|html
condition|?
literal|"&gt;"
else|:
literal|""
operator|)
operator|+
literal|"2 A Day [%]"
expr_stmt|;
name|colAlign
index|[
name|idx
index|]
operator|=
literal|"left"
expr_stmt|;
name|colOrd
index|[
name|idx
operator|++
index|]
operator|=
literal|true
expr_stmt|;
name|PdfWebTable
name|table
init|=
operator|new
name|PdfWebTable
argument_list|(
literal|3
operator|+
literal|3
operator|*
name|max
argument_list|,
name|form
operator|.
name|getReport
argument_list|()
argument_list|,
literal|"examAssignmentReport.do?ord=%%"
argument_list|,
name|colName
argument_list|,
name|colAlign
argument_list|,
name|colOrd
argument_list|)
decl_stmt|;
name|table
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap"
argument_list|)
expr_stmt|;
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|exams
control|)
block|{
if|if
condition|(
operator|!
name|match
argument_list|(
name|form
argument_list|,
name|exam
argument_list|)
condition|)
continue|continue;
name|conflicts
label|:
for|for
control|(
name|MoreThanTwoADayConflict
name|conflict
range|:
operator|(
name|studentConf
condition|?
name|exam
operator|.
name|getMoreThanTwoADaysConflicts
argument_list|()
else|:
name|exam
operator|.
name|getInstructorMoreThanTwoADaysConflicts
argument_list|()
operator|)
control|)
block|{
for|for
control|(
name|ExamAssignment
name|other
range|:
name|conflict
operator|.
name|getOtherExams
argument_list|()
control|)
if|if
condition|(
name|match
argument_list|(
name|form
argument_list|,
name|other
argument_list|)
operator|&&
name|exam
operator|.
name|compareTo
argument_list|(
name|other
argument_list|)
operator|>=
literal|0
condition|)
continue|continue
name|conflicts
continue|;
name|Vector
argument_list|<
name|ExamAssignment
argument_list|>
name|examsThisConf
init|=
operator|new
name|Vector
argument_list|<
name|ExamAssignment
argument_list|>
argument_list|(
name|max
argument_list|)
decl_stmt|;
name|examsThisConf
operator|.
name|add
argument_list|(
name|exam
argument_list|)
expr_stmt|;
name|examsThisConf
operator|.
name|addAll
argument_list|(
name|conflict
operator|.
name|getOtherExams
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|examsThisConf
argument_list|,
operator|new
name|Comparator
argument_list|<
name|ExamAssignment
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|ExamAssignment
name|a1
parameter_list|,
name|ExamAssignment
name|a2
parameter_list|)
block|{
comment|//int cmp = a1.getPeriod().compareTo(a2.getPeriod());
comment|//if (cmp!=0) return cmp;
return|return
name|a1
operator|.
name|compareTo
argument_list|(
name|a2
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|form
operator|.
name|getShowSections
argument_list|()
condition|)
block|{
name|idx
operator|=
literal|0
expr_stmt|;
name|String
index|[]
name|line
init|=
operator|new
name|String
index|[
literal|3
operator|+
literal|3
operator|*
name|max
index|]
decl_stmt|;
name|Comparable
index|[]
name|cmp
init|=
operator|new
name|Comparable
index|[
literal|3
operator|+
literal|3
operator|*
name|max
index|]
decl_stmt|;
name|line
index|[
name|idx
index|]
operator|=
name|exam
operator|.
name|getDate
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cmp
index|[
name|idx
index|]
operator|=
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriodOrd
argument_list|()
argument_list|,
operator|new
name|MultiComparable
argument_list|(
name|examsThisConf
argument_list|)
argument_list|)
expr_stmt|;
name|m2dReportAddLines
argument_list|(
name|form
argument_list|,
name|html
argument_list|,
name|studentConf
argument_list|,
name|table
argument_list|,
name|max
argument_list|,
name|examsThisConf
argument_list|,
literal|0
argument_list|,
name|line
argument_list|,
name|cmp
argument_list|,
literal|1
argument_list|,
name|exam
operator|.
name|getNrStudents
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|idx
operator|=
literal|0
expr_stmt|;
name|String
index|[]
name|line
init|=
operator|new
name|String
index|[
literal|3
operator|+
literal|3
operator|*
name|max
index|]
decl_stmt|;
name|Comparable
index|[]
name|cmp
init|=
operator|new
name|Comparable
index|[
literal|3
operator|+
literal|3
operator|*
name|max
index|]
decl_stmt|;
name|line
index|[
name|idx
index|]
operator|=
name|exam
operator|.
name|getDate
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cmp
index|[
name|idx
operator|++
index|]
operator|=
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriodOrd
argument_list|()
argument_list|,
operator|new
name|MultiComparable
argument_list|(
name|examsThisConf
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|minStudents
init|=
name|exam
operator|.
name|getNrStudents
argument_list|()
decl_stmt|;
for|for
control|(
name|ExamAssignment
name|x
range|:
name|examsThisConf
control|)
block|{
name|line
index|[
name|idx
index|]
operator|=
name|x
operator|.
name|getExamName
argument_list|()
expr_stmt|;
name|cmp
index|[
name|idx
operator|++
index|]
operator|=
operator|new
name|MultiComparable
argument_list|(
name|x
argument_list|,
operator|new
name|MultiComparable
argument_list|(
name|examsThisConf
argument_list|)
argument_list|)
expr_stmt|;
name|line
index|[
name|idx
index|]
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|x
operator|.
name|getNrStudents
argument_list|()
argument_list|)
expr_stmt|;
name|cmp
index|[
name|idx
operator|++
index|]
operator|=
operator|new
name|MultiComparable
argument_list|(
operator|-
name|x
operator|.
name|getNrStudents
argument_list|()
argument_list|,
name|x
argument_list|,
operator|new
name|MultiComparable
argument_list|(
name|examsThisConf
argument_list|)
argument_list|)
expr_stmt|;
name|line
index|[
name|idx
index|]
operator|=
name|x
operator|.
name|getTime
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|cmp
index|[
name|idx
operator|++
index|]
operator|=
operator|new
name|MultiComparable
argument_list|(
name|x
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|x
argument_list|,
operator|new
name|MultiComparable
argument_list|(
name|examsThisConf
argument_list|)
argument_list|)
expr_stmt|;
name|minStudents
operator|=
name|Math
operator|.
name|min
argument_list|(
name|minStudents
argument_list|,
name|x
operator|.
name|getNrStudents
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|examsThisConf
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|max
condition|;
name|i
operator|++
control|)
block|{
name|line
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
name|cmp
index|[
name|idx
operator|++
index|]
operator|=
operator|new
name|MultiComparable
argument_list|(
literal|null
argument_list|,
operator|new
name|MultiComparable
argument_list|(
name|examsThisConf
argument_list|)
argument_list|)
expr_stmt|;
name|line
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
name|cmp
index|[
name|idx
operator|++
index|]
operator|=
operator|new
name|MultiComparable
argument_list|(
literal|1
argument_list|,
literal|null
argument_list|,
operator|new
name|MultiComparable
argument_list|(
name|examsThisConf
argument_list|)
argument_list|)
expr_stmt|;
name|line
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
name|cmp
index|[
name|idx
operator|++
index|]
operator|=
operator|new
name|MultiComparable
argument_list|(
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
operator|new
name|MultiComparable
argument_list|(
name|examsThisConf
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|line
index|[
name|idx
index|]
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|conflict
operator|.
name|getNrStudents
argument_list|()
argument_list|)
expr_stmt|;
name|cmp
index|[
name|idx
operator|++
index|]
operator|=
operator|new
name|MultiComparable
argument_list|(
operator|-
name|conflict
operator|.
name|getNrStudents
argument_list|()
argument_list|,
operator|new
name|MultiComparable
argument_list|(
name|examsThisConf
argument_list|)
argument_list|)
expr_stmt|;
name|line
index|[
name|idx
index|]
operator|=
name|df
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|conflict
operator|.
name|getNrStudents
argument_list|()
operator|/
name|minStudents
argument_list|)
expr_stmt|;
name|cmp
index|[
name|idx
operator|++
index|]
operator|=
operator|new
name|MultiComparable
argument_list|(
operator|-
literal|100.0
operator|*
name|conflict
operator|.
name|getNrStudents
argument_list|()
operator|/
name|minStudents
argument_list|,
operator|new
name|MultiComparable
argument_list|(
name|examsThisConf
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addLine
argument_list|(
literal|"onClick=\"document.location='examDetail.action?examId="
operator|+
name|examsThisConf
operator|.
name|firstElement
argument_list|()
operator|.
name|getExamId
argument_list|()
operator|+
literal|"';\""
argument_list|,
name|line
argument_list|,
name|cmp
argument_list|,
name|examsThisConf
operator|.
name|firstElement
argument_list|()
operator|.
name|getExamId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|table
return|;
block|}
specifier|private
name|void
name|m2dReportAddLines
parameter_list|(
name|ExamAssignmentReportForm
name|form
parameter_list|,
name|boolean
name|html
parameter_list|,
name|boolean
name|studentConf
parameter_list|,
name|PdfWebTable
name|table
parameter_list|,
name|int
name|max
parameter_list|,
name|Vector
argument_list|<
name|ExamAssignment
argument_list|>
name|exams
parameter_list|,
name|int
name|pos
parameter_list|,
name|String
index|[]
name|line
parameter_list|,
name|Comparable
index|[]
name|cmp
parameter_list|,
name|int
name|idx
parameter_list|,
name|int
name|minStudents
parameter_list|,
name|Set
argument_list|<
name|Long
argument_list|>
name|students
parameter_list|,
name|boolean
name|match
parameter_list|)
block|{
if|if
condition|(
name|students
operator|!=
literal|null
operator|&&
name|students
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
if|if
condition|(
name|pos
operator|==
name|max
condition|)
block|{
if|if
condition|(
operator|!
name|match
condition|)
return|return;
name|line
index|[
name|idx
index|]
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|students
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|cmp
index|[
name|idx
operator|++
index|]
operator|=
operator|new
name|MultiComparable
argument_list|(
operator|-
name|students
operator|.
name|size
argument_list|()
argument_list|,
operator|new
name|MultiComparable
argument_list|(
name|exams
argument_list|)
argument_list|)
expr_stmt|;
name|line
index|[
name|idx
index|]
operator|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0.0"
argument_list|)
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|students
operator|.
name|size
argument_list|()
operator|/
name|minStudents
argument_list|)
expr_stmt|;
name|cmp
index|[
name|idx
operator|++
index|]
operator|=
operator|new
name|MultiComparable
argument_list|(
operator|-
literal|100.0
operator|*
name|students
operator|.
name|size
argument_list|()
operator|/
name|minStudents
argument_list|,
operator|new
name|MultiComparable
argument_list|(
name|exams
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addLine
argument_list|(
literal|"onClick=\"document.location='examDetail.action?examId="
operator|+
name|exams
operator|.
name|firstElement
argument_list|()
operator|.
name|getExamId
argument_list|()
operator|+
literal|"';\""
argument_list|,
operator|(
name|String
index|[]
operator|)
name|line
operator|.
name|clone
argument_list|()
argument_list|,
operator|(
name|Comparable
index|[]
operator|)
name|cmp
operator|.
name|clone
argument_list|()
argument_list|,
name|exams
operator|.
name|firstElement
argument_list|()
operator|.
name|getExamId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|pos
operator|<
name|exams
operator|.
name|size
argument_list|()
condition|)
block|{
name|ExamAssignment
name|exam
init|=
name|exams
operator|.
name|elementAt
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|newStudents
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|exam
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|students
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|studentConf
condition|)
name|newStudents
operator|=
operator|new
name|HashSet
argument_list|(
name|section
operator|.
name|getStudentIds
argument_list|()
argument_list|)
expr_stmt|;
else|else
block|{
name|newStudents
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
for|for
control|(
name|ExamInstructorInfo
name|i
range|:
name|section
operator|.
name|getExam
argument_list|()
operator|.
name|getInstructors
argument_list|()
control|)
name|newStudents
operator|.
name|add
argument_list|(
name|i
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|newStudents
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Long
name|studentId
range|:
name|students
control|)
block|{
if|if
condition|(
name|studentConf
operator|&&
name|section
operator|.
name|getStudentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|studentId
argument_list|)
condition|)
name|newStudents
operator|.
name|add
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|studentConf
operator|&&
name|section
operator|.
name|getExam
argument_list|()
operator|.
name|hasInstructor
argument_list|(
name|studentId
argument_list|)
condition|)
name|newStudents
operator|.
name|add
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|newStudents
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|line
index|[
name|idx
index|]
operator|=
name|section
operator|.
name|getName
argument_list|()
expr_stmt|;
name|cmp
index|[
name|idx
index|]
operator|=
operator|new
name|MultiComparable
argument_list|(
name|section
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|MultiComparable
argument_list|(
name|exams
argument_list|)
argument_list|)
expr_stmt|;
name|line
index|[
name|idx
operator|+
literal|1
index|]
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|section
operator|.
name|getNrStudents
argument_list|()
argument_list|)
expr_stmt|;
name|cmp
index|[
name|idx
operator|+
literal|1
index|]
operator|=
operator|new
name|MultiComparable
argument_list|(
operator|-
name|section
operator|.
name|getNrStudents
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|MultiComparable
argument_list|(
name|exams
argument_list|)
argument_list|)
expr_stmt|;
name|line
index|[
name|idx
operator|+
literal|2
index|]
operator|=
name|exam
operator|.
name|getTime
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|cmp
index|[
name|idx
operator|+
literal|2
index|]
operator|=
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|MultiComparable
argument_list|(
name|exams
argument_list|)
argument_list|)
expr_stmt|;
name|m2dReportAddLines
argument_list|(
name|form
argument_list|,
name|html
argument_list|,
name|studentConf
argument_list|,
name|table
argument_list|,
name|max
argument_list|,
name|exams
argument_list|,
name|pos
operator|+
literal|1
argument_list|,
name|line
argument_list|,
name|cmp
argument_list|,
name|idx
operator|+
literal|3
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|section
operator|.
name|getNrStudents
argument_list|()
argument_list|,
name|minStudents
argument_list|)
argument_list|,
name|newStudents
argument_list|,
name|match
operator|||
name|match
argument_list|(
name|form
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|line
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
name|cmp
index|[
name|idx
operator|++
index|]
operator|=
operator|new
name|MultiComparable
argument_list|(
literal|null
argument_list|,
operator|new
name|MultiComparable
argument_list|(
name|exams
argument_list|)
argument_list|)
expr_stmt|;
name|line
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
name|cmp
index|[
name|idx
operator|++
index|]
operator|=
operator|new
name|MultiComparable
argument_list|(
literal|1
argument_list|,
literal|null
argument_list|,
operator|new
name|MultiComparable
argument_list|(
name|exams
argument_list|)
argument_list|)
expr_stmt|;
name|line
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
name|cmp
index|[
name|idx
operator|++
index|]
operator|=
operator|new
name|MultiComparable
argument_list|(
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
operator|new
name|MultiComparable
argument_list|(
name|exams
argument_list|)
argument_list|)
expr_stmt|;
name|m2dReportAddLines
argument_list|(
name|form
argument_list|,
name|html
argument_list|,
name|studentConf
argument_list|,
name|table
argument_list|,
name|max
argument_list|,
name|exams
argument_list|,
name|pos
operator|+
literal|1
argument_list|,
name|line
argument_list|,
name|cmp
argument_list|,
name|idx
argument_list|,
name|minStudents
argument_list|,
name|students
argument_list|,
name|match
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|PdfWebTable
name|generateIndividualAssignmentReport
parameter_list|(
name|boolean
name|html
parameter_list|,
name|Long
name|sessionId
parameter_list|,
name|ExamAssignmentReportForm
name|form
parameter_list|,
name|Collection
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
parameter_list|,
name|boolean
name|student
parameter_list|,
name|String
name|nameFormat
parameter_list|)
block|{
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Student
argument_list|>
name|students
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
if|if
condition|(
name|student
condition|)
block|{
name|HashSet
argument_list|<
name|Long
argument_list|>
name|allStudentIds
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|exams
control|)
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|exam
operator|.
name|getSections
argument_list|()
control|)
name|allStudentIds
operator|.
name|addAll
argument_list|(
name|section
operator|.
name|getStudentIds
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|inSet
init|=
literal|null
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|allStudentIds
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|idx
operator|==
literal|1000
condition|)
block|{
for|for
control|(
name|Iterator
name|j
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select s from Student s where s.uniqueId in ("
operator|+
name|inSet
operator|+
literal|")"
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Student
name|s
init|=
operator|(
name|Student
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|students
operator|.
name|put
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
name|idx
operator|=
literal|0
expr_stmt|;
name|inSet
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|inSet
operator|==
literal|null
condition|)
name|inSet
operator|=
name|i
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
else|else
name|inSet
operator|+=
literal|","
operator|+
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|inSet
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|j
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select s from Student s where s.uniqueId in ("
operator|+
name|inSet
operator|+
literal|")"
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Student
name|s
init|=
operator|(
name|Student
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|students
operator|.
name|put
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|PdfWebTable
name|table
init|=
operator|(
name|student
condition|?
operator|new
name|PdfWebTable
argument_list|(
literal|7
argument_list|,
name|form
operator|.
name|getReport
argument_list|()
argument_list|,
literal|"examAssignmentReport.do?ord=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
operator|(
name|student
condition|?
literal|"Student Id"
else|:
literal|"Instructor Id"
operator|)
block|,
literal|"Name"
block|,
operator|(
name|form
operator|.
name|getShowSections
argument_list|()
condition|?
literal|"Class / Course"
else|:
literal|"Examination"
operator|)
block|,
literal|"Date"
block|,
literal|"Time"
block|,
literal|"Room"
block|,
literal|"Instuctor"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
else|:
operator|new
name|PdfWebTable
argument_list|(
literal|6
argument_list|,
name|form
operator|.
name|getReport
argument_list|()
argument_list|,
literal|"examAssignmentReport.do?ord=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
operator|(
name|student
condition|?
literal|"Student Id"
else|:
literal|"Instructor Id"
operator|)
block|,
literal|"Name"
block|,
operator|(
name|form
operator|.
name|getShowSections
argument_list|()
condition|?
literal|"Class / Course"
else|:
literal|"Examination"
operator|)
block|,
literal|"Date"
block|,
literal|"Time"
block|,
literal|"Room"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
operator|)
decl_stmt|;
name|table
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap"
argument_list|)
expr_stmt|;
name|table
operator|.
name|setBlankWhenSame
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|exams
control|)
block|{
if|if
condition|(
name|form
operator|.
name|getShowSections
argument_list|()
condition|)
block|{
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|exam
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|student
condition|)
block|{
for|for
control|(
name|Long
name|studentId
range|:
name|section
operator|.
name|getStudentIds
argument_list|()
control|)
block|{
name|Student
name|s
init|=
name|students
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
operator|!
name|match
argument_list|(
name|form
argument_list|,
name|s
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
operator|&&
operator|!
name|match
argument_list|(
name|form
argument_list|,
name|s
operator|.
name|getName
argument_list|(
name|nameFormat
argument_list|)
argument_list|)
condition|)
continue|continue;
name|table
operator|.
name|addLine
argument_list|(
literal|"onClick=\"document.location='examDetail.action?examId="
operator|+
name|exam
operator|.
name|getExamId
argument_list|()
operator|+
literal|"';\""
argument_list|,
operator|new
name|String
index|[]
block|{
name|s
operator|.
name|getExternalUniqueId
argument_list|()
block|,
name|s
operator|.
name|getName
argument_list|(
name|nameFormat
argument_list|)
block|,
operator|(
name|html
condition|?
literal|"<a name='"
operator|+
name|exam
operator|.
name|getExamId
argument_list|()
operator|+
literal|"'>"
else|:
literal|""
operator|)
operator|+
name|section
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|html
condition|?
literal|"</a>"
else|:
literal|""
operator|)
block|,
name|exam
operator|.
name|getDate
argument_list|(
name|html
argument_list|)
block|,
name|exam
operator|.
name|getTime
argument_list|(
name|html
argument_list|)
block|,
name|exam
operator|.
name|getRoomsName
argument_list|(
name|html
argument_list|,
literal|", "
argument_list|)
block|,
name|exam
operator|.
name|getInstructorName
argument_list|(
literal|"; "
argument_list|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
name|s
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|s
operator|.
name|getName
argument_list|(
name|nameFormat
argument_list|)
argument_list|,
name|s
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriodOrd
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getRoomsName
argument_list|(
literal|":"
argument_list|)
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getInstructorName
argument_list|(
literal|":"
argument_list|)
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|ExamInstructorInfo
name|instructor
range|:
name|section
operator|.
name|getExam
argument_list|()
operator|.
name|getInstructors
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|match
argument_list|(
name|form
argument_list|,
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
operator|&&
operator|!
name|match
argument_list|(
name|form
argument_list|,
name|instructor
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
continue|continue;
name|table
operator|.
name|addLine
argument_list|(
literal|"onClick=\"document.location='examDetail.action?examId="
operator|+
name|exam
operator|.
name|getExamId
argument_list|()
operator|+
literal|"';\""
argument_list|,
operator|new
name|String
index|[]
block|{
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
block|,
name|instructor
operator|.
name|getName
argument_list|()
block|,
operator|(
name|html
condition|?
literal|"<a name='"
operator|+
name|exam
operator|.
name|getExamId
argument_list|()
operator|+
literal|"'>"
else|:
literal|""
operator|)
operator|+
name|section
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|html
condition|?
literal|"</a>"
else|:
literal|""
operator|)
block|,
name|exam
operator|.
name|getDate
argument_list|(
name|html
argument_list|)
block|,
name|exam
operator|.
name|getTime
argument_list|(
name|html
argument_list|)
block|,
name|exam
operator|.
name|getRoomsName
argument_list|(
name|html
argument_list|,
literal|", "
argument_list|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|instructor
operator|.
name|getName
argument_list|()
argument_list|,
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriodOrd
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getRoomsName
argument_list|(
literal|":"
argument_list|)
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|student
condition|)
block|{
name|HashSet
argument_list|<
name|Long
argument_list|>
name|studentIds
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|exam
operator|.
name|getSections
argument_list|()
control|)
block|{
name|studentIds
operator|.
name|addAll
argument_list|(
name|section
operator|.
name|getStudentIds
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Long
name|studentId
range|:
name|studentIds
control|)
block|{
name|Student
name|s
init|=
name|students
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
operator|!
name|match
argument_list|(
name|form
argument_list|,
name|s
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
operator|&&
operator|!
name|match
argument_list|(
name|form
argument_list|,
name|s
operator|.
name|getName
argument_list|(
name|nameFormat
argument_list|)
argument_list|)
condition|)
continue|continue;
name|table
operator|.
name|addLine
argument_list|(
literal|"onClick=\"document.location='examDetail.action?examId="
operator|+
name|exam
operator|.
name|getExamId
argument_list|()
operator|+
literal|"';\""
argument_list|,
operator|new
name|String
index|[]
block|{
name|s
operator|.
name|getExternalUniqueId
argument_list|()
block|,
name|s
operator|.
name|getName
argument_list|(
name|nameFormat
argument_list|)
block|,
operator|(
name|html
condition|?
literal|"<a name='"
operator|+
name|exam
operator|.
name|getExamId
argument_list|()
operator|+
literal|"'>"
else|:
literal|""
operator|)
operator|+
name|exam
operator|.
name|getExamName
argument_list|()
operator|+
operator|(
name|html
condition|?
literal|"</a>"
else|:
literal|""
operator|)
block|,
name|exam
operator|.
name|getDate
argument_list|(
name|html
argument_list|)
block|,
name|exam
operator|.
name|getTime
argument_list|(
name|html
argument_list|)
block|,
name|exam
operator|.
name|getRoomsName
argument_list|(
name|html
argument_list|,
literal|", "
argument_list|)
block|,
name|exam
operator|.
name|getInstructorName
argument_list|(
literal|"; "
argument_list|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
name|s
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|s
operator|.
name|getName
argument_list|(
name|nameFormat
argument_list|)
argument_list|,
name|s
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriodOrd
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getRoomsName
argument_list|(
literal|":"
argument_list|)
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getInstructorName
argument_list|(
literal|":"
argument_list|)
argument_list|,
name|exam
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|ExamInstructorInfo
name|instructor
range|:
name|exam
operator|.
name|getInstructors
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|match
argument_list|(
name|form
argument_list|,
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
operator|&&
operator|!
name|match
argument_list|(
name|form
argument_list|,
name|instructor
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
continue|continue;
name|table
operator|.
name|addLine
argument_list|(
literal|"onClick=\"document.location='examDetail.action?examId="
operator|+
name|exam
operator|.
name|getExamId
argument_list|()
operator|+
literal|"';\""
argument_list|,
operator|new
name|String
index|[]
block|{
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
block|,
name|instructor
operator|.
name|getName
argument_list|()
block|,
operator|(
name|html
condition|?
literal|"<a name='"
operator|+
name|exam
operator|.
name|getExamId
argument_list|()
operator|+
literal|"'>"
else|:
literal|""
operator|)
operator|+
name|exam
operator|.
name|getExamName
argument_list|()
operator|+
operator|(
name|html
condition|?
literal|"</a>"
else|:
literal|""
operator|)
block|,
name|exam
operator|.
name|getDate
argument_list|(
name|html
argument_list|)
block|,
name|exam
operator|.
name|getTime
argument_list|(
name|html
argument_list|)
block|,
name|exam
operator|.
name|getRoomsName
argument_list|(
name|html
argument_list|,
literal|", "
argument_list|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|instructor
operator|.
name|getName
argument_list|()
argument_list|,
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriodOrd
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getRoomsName
argument_list|(
literal|":"
argument_list|)
argument_list|,
name|exam
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|table
return|;
block|}
specifier|private
name|PdfWebTable
name|generateStatisticsReport
parameter_list|(
name|boolean
name|html
parameter_list|,
name|long
name|sessionId
parameter_list|,
name|ExamAssignmentReportForm
name|form
parameter_list|,
name|Collection
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
parameter_list|)
block|{
name|String
name|sp
init|=
operator|(
name|html
condition|?
literal|"&nbsp;"
else|:
literal|" "
operator|)
decl_stmt|;
name|String
name|indent
init|=
operator|(
name|html
condition|?
literal|"&nbsp;&nbsp;&nbsp;&nbsp;"
else|:
literal|"    "
operator|)
decl_stmt|;
name|PdfWebTable
name|table
init|=
operator|new
name|PdfWebTable
argument_list|(
literal|2
argument_list|,
name|form
operator|.
name|getReport
argument_list|()
argument_list|,
literal|"examAssignmentReport.do?ord=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Name"
block|,
literal|"Value"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"right"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|}
argument_list|)
decl_stmt|;
name|table
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap"
argument_list|)
expr_stmt|;
name|int
name|row
init|=
literal|0
decl_stmt|;
name|int
name|sdc
init|=
literal|0
decl_stmt|,
name|sdcna
init|=
literal|0
decl_stmt|,
name|sbtb
init|=
literal|0
decl_stmt|,
name|sdbtb
init|=
literal|0
decl_stmt|,
name|sm2d
init|=
literal|0
decl_stmt|;
name|int
name|idc
init|=
literal|0
decl_stmt|,
name|idcna
init|=
literal|0
decl_stmt|,
name|ibtb
init|=
literal|0
decl_stmt|,
name|idbtb
init|=
literal|0
decl_stmt|,
name|im2d
init|=
literal|0
decl_stmt|;
name|HashSet
argument_list|<
name|Long
argument_list|>
index|[]
name|sct
init|=
operator|new
name|HashSet
index|[]
block|{
operator|new
name|HashSet
argument_list|()
block|,
operator|new
name|HashSet
argument_list|()
block|,
operator|new
name|HashSet
argument_list|()
block|,
operator|new
name|HashSet
argument_list|()
block|}
decl_stmt|;
name|HashSet
argument_list|<
name|Long
argument_list|>
name|students
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|int
name|studentExams
init|=
literal|0
decl_stmt|;
name|DecimalFormat
name|df1
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0.00"
argument_list|)
decl_stmt|;
name|DecimalFormat
name|df2
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"#,##0"
argument_list|)
decl_stmt|;
name|int
name|instructorExams
init|=
literal|0
decl_stmt|;
name|HashSet
argument_list|<
name|Long
argument_list|>
name|instructors
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|exams
control|)
block|{
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|exam
operator|.
name|getSections
argument_list|()
control|)
block|{
name|sct
index|[
name|section
operator|.
name|getOwnerType
argument_list|()
index|]
operator|.
name|add
argument_list|(
name|section
operator|.
name|getOwnerId
argument_list|()
argument_list|)
expr_stmt|;
name|students
operator|.
name|addAll
argument_list|(
name|section
operator|.
name|getStudentIds
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|studentExams
operator|+=
name|exam
operator|.
name|getStudentIds
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
name|instructorExams
operator|+=
name|exam
operator|.
name|getInstructors
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
for|for
control|(
name|DirectConflict
name|dc
range|:
name|exam
operator|.
name|getDirectConflicts
argument_list|()
control|)
block|{
if|if
condition|(
name|dc
operator|.
name|getOtherExam
argument_list|()
operator|!=
literal|null
operator|&&
name|exam
operator|.
name|compareTo
argument_list|(
name|dc
operator|.
name|getOtherExam
argument_list|()
argument_list|)
operator|>=
literal|0
operator|&&
name|exams
operator|.
name|contains
argument_list|(
name|dc
operator|.
name|getOtherExam
argument_list|()
argument_list|)
condition|)
continue|continue;
name|sdc
operator|+=
name|dc
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
if|if
condition|(
name|dc
operator|.
name|getOtherExam
argument_list|()
operator|==
literal|null
condition|)
name|sdcna
operator|+=
name|dc
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|DirectConflict
name|dc
range|:
name|exam
operator|.
name|getInstructorDirectConflicts
argument_list|()
control|)
block|{
if|if
condition|(
name|dc
operator|.
name|getOtherExam
argument_list|()
operator|!=
literal|null
operator|&&
name|exam
operator|.
name|compareTo
argument_list|(
name|dc
operator|.
name|getOtherExam
argument_list|()
argument_list|)
operator|>=
literal|0
operator|&&
name|exams
operator|.
name|contains
argument_list|(
name|dc
operator|.
name|getOtherExam
argument_list|()
argument_list|)
condition|)
continue|continue;
name|idc
operator|+=
name|dc
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
if|if
condition|(
name|dc
operator|.
name|getOtherExam
argument_list|()
operator|==
literal|null
condition|)
name|idcna
operator|+=
name|dc
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|BackToBackConflict
name|btb
range|:
name|exam
operator|.
name|getBackToBackConflicts
argument_list|()
control|)
block|{
if|if
condition|(
name|btb
operator|.
name|getOtherExam
argument_list|()
operator|!=
literal|null
operator|&&
name|exam
operator|.
name|compareTo
argument_list|(
name|btb
operator|.
name|getOtherExam
argument_list|()
argument_list|)
operator|>=
literal|0
operator|&&
name|exams
operator|.
name|contains
argument_list|(
name|btb
operator|.
name|getOtherExam
argument_list|()
argument_list|)
condition|)
continue|continue;
name|sbtb
operator|+=
name|btb
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
if|if
condition|(
name|btb
operator|.
name|isDistance
argument_list|()
condition|)
name|sdbtb
operator|+=
name|btb
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|BackToBackConflict
name|btb
range|:
name|exam
operator|.
name|getInstructorBackToBackConflicts
argument_list|()
control|)
block|{
if|if
condition|(
name|btb
operator|.
name|getOtherExam
argument_list|()
operator|!=
literal|null
operator|&&
name|exam
operator|.
name|compareTo
argument_list|(
name|btb
operator|.
name|getOtherExam
argument_list|()
argument_list|)
operator|>=
literal|0
operator|&&
name|exams
operator|.
name|contains
argument_list|(
name|btb
operator|.
name|getOtherExam
argument_list|()
argument_list|)
condition|)
continue|continue;
name|ibtb
operator|+=
name|btb
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
if|if
condition|(
name|btb
operator|.
name|isDistance
argument_list|()
condition|)
name|idbtb
operator|+=
name|btb
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
block|}
name|m2d
label|:
for|for
control|(
name|MoreThanTwoADayConflict
name|m2d
range|:
name|exam
operator|.
name|getMoreThanTwoADaysConflicts
argument_list|()
control|)
block|{
for|for
control|(
name|ExamAssignment
name|other
range|:
name|m2d
operator|.
name|getOtherExams
argument_list|()
control|)
if|if
condition|(
name|exam
operator|.
name|compareTo
argument_list|(
name|other
argument_list|)
operator|>=
literal|0
operator|&&
name|exams
operator|.
name|contains
argument_list|(
name|other
argument_list|)
condition|)
continue|continue
name|m2d
continue|;
name|sm2d
operator|+=
name|m2d
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
block|}
name|m2d
label|:
for|for
control|(
name|MoreThanTwoADayConflict
name|m2d
range|:
name|exam
operator|.
name|getInstructorMoreThanTwoADaysConflicts
argument_list|()
control|)
block|{
for|for
control|(
name|ExamAssignment
name|other
range|:
name|m2d
operator|.
name|getOtherExams
argument_list|()
control|)
if|if
condition|(
name|exam
operator|.
name|compareTo
argument_list|(
name|other
argument_list|)
operator|>=
literal|0
operator|&&
name|exams
operator|.
name|contains
argument_list|(
name|other
argument_list|)
condition|)
continue|continue
name|m2d
continue|;
name|im2d
operator|+=
name|m2d
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
block|}
block|}
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"Number of exams"
block|,
name|df2
operator|.
name|format
argument_list|(
name|exams
operator|.
name|size
argument_list|()
argument_list|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|row
operator|++
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ExamOwner
operator|.
name|sOwnerTypes
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
operator|!
name|sct
index|[
name|i
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
name|indent
operator|+
operator|(
name|i
operator|==
name|ExamOwner
operator|.
name|sOwnerTypeClass
condition|?
literal|"Classes"
else|:
name|i
operator|==
name|ExamOwner
operator|.
name|sOwnerTypeConfig
condition|?
literal|"Configs"
else|:
name|i
operator|==
name|ExamOwner
operator|.
name|sOwnerTypeCourse
condition|?
literal|"Courses"
else|:
literal|"Offerings"
operator|)
operator|+
literal|" with an exam"
block|,
name|df2
operator|.
name|format
argument_list|(
name|sct
index|[
name|i
index|]
operator|.
name|size
argument_list|()
argument_list|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|row
operator|++
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
name|sp
block|,
literal|""
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|row
operator|++
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
comment|/*         table.addLine(new String[] {                 "Registered students",                  df2.format(new StudentDAO().getSession().createQuery("select count(s) from Student s where s.session.uniqueId=:sessionId")                 .setLong("sessionId", sessionId).uniqueResult())                 }, new Comparable[] {row++,null,null});                 */
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
name|indent
operator|+
literal|"Students enrolled in classes"
block|,
name|df2
operator|.
name|format
argument_list|(
operator|new
name|StudentDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select count(distinct s) from Student s inner join s.classEnrollments c where s.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|uniqueResult
argument_list|()
argument_list|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|row
operator|++
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
name|indent
operator|+
literal|"Students having an exam"
block|,
name|df2
operator|.
name|format
argument_list|(
name|students
operator|.
name|size
argument_list|()
argument_list|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|row
operator|++
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
name|indent
operator|+
literal|"Student exam enrollments"
block|,
name|df2
operator|.
name|format
argument_list|(
name|studentExams
argument_list|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|row
operator|++
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
name|sp
block|,
literal|""
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|row
operator|++
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|instructors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"Registered instructors"
block|,
name|df2
operator|.
name|format
argument_list|(
operator|new
name|StudentDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select count(i.externalUniqueId) from DepartmentalInstructor i where i.department.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|uniqueResult
argument_list|()
argument_list|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|row
operator|++
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
name|indent
operator|+
literal|"Instructors having an exam"
block|,
name|df2
operator|.
name|format
argument_list|(
name|instructors
operator|.
name|size
argument_list|()
argument_list|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|row
operator|++
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
name|indent
operator|+
literal|"Instructor exam enrollments"
block|,
name|df2
operator|.
name|format
argument_list|(
name|instructorExams
argument_list|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|row
operator|++
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
name|sp
block|,
literal|""
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|row
operator|++
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sdc
operator|>
literal|0
condition|)
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"Direct student conflicts"
block|,
name|df2
operator|.
name|format
argument_list|(
name|sdc
argument_list|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|row
operator|++
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|sdcna
operator|>
literal|0
condition|)
block|{
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
name|indent
operator|+
literal|"Conflict with other exam"
block|,
name|df2
operator|.
name|format
argument_list|(
name|sdc
operator|-
name|sdcna
argument_list|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|row
operator|++
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
name|indent
operator|+
literal|"Student not available"
block|,
name|df2
operator|.
name|format
argument_list|(
name|sdcna
argument_list|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|row
operator|++
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sm2d
operator|>
literal|0
condition|)
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"More than 2 exams a day student conflicts"
block|,
literal|""
operator|+
name|df2
operator|.
name|format
argument_list|(
name|sm2d
argument_list|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|row
operator|++
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|sbtb
operator|>
literal|0
condition|)
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"Back-to-back student conflicts"
block|,
name|df2
operator|.
name|format
argument_list|(
name|sbtb
argument_list|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|row
operator|++
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|sdbtb
operator|>
literal|0
condition|)
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
name|indent
operator|+
literal|"Distance back-to-back student conflicts"
block|,
name|df2
operator|.
name|format
argument_list|(
name|sdbtb
argument_list|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|row
operator|++
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|idc
operator|>
literal|0
operator|||
name|im2d
operator|>
literal|0
operator|||
name|ibtb
operator|>
literal|0
condition|)
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
name|sp
block|,
literal|""
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|row
operator|++
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|idc
operator|>
literal|0
condition|)
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"Direct instructor conflicts"
block|,
name|df2
operator|.
name|format
argument_list|(
name|idc
argument_list|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|row
operator|++
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|idcna
operator|>
literal|0
condition|)
block|{
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
name|indent
operator|+
literal|"Conflict with other exam"
block|,
name|df2
operator|.
name|format
argument_list|(
name|idc
operator|-
name|idcna
argument_list|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|row
operator|++
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
name|indent
operator|+
literal|"Instructor not available"
block|,
name|df2
operator|.
name|format
argument_list|(
name|idcna
argument_list|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|row
operator|++
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|im2d
operator|>
literal|0
condition|)
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"More than 2 exams a day instructor conflicts"
block|,
name|df2
operator|.
name|format
argument_list|(
name|im2d
argument_list|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|row
operator|++
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|ibtb
operator|>
literal|0
condition|)
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"Back-to-back instructor conflicts"
block|,
name|df2
operator|.
name|format
argument_list|(
name|ibtb
argument_list|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|row
operator|++
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|idbtb
operator|>
literal|0
condition|)
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
name|indent
operator|+
literal|"Distance back-to-back instructor conflicts"
block|,
name|df2
operator|.
name|format
argument_list|(
name|idbtb
argument_list|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|row
operator|++
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
name|sp
block|,
literal|""
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|row
operator|++
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|sdc
operator|>
literal|0
condition|)
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"Direct student conflicts"
block|,
name|df1
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|sdc
operator|/
name|studentExams
argument_list|)
operator|+
literal|"%"
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|row
operator|++
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|sdcna
operator|>
literal|0
condition|)
block|{
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
name|indent
operator|+
literal|"Conflict with other exam"
block|,
name|df1
operator|.
name|format
argument_list|(
literal|100.0
operator|*
operator|(
name|sdc
operator|-
name|sdcna
operator|)
operator|/
name|studentExams
argument_list|)
operator|+
literal|"%"
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|row
operator|++
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
name|indent
operator|+
literal|"Student not available"
block|,
name|df1
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|sdcna
operator|/
name|studentExams
argument_list|)
operator|+
literal|"%"
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|row
operator|++
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sm2d
operator|>
literal|0
condition|)
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"More than 2 exams a day student conflicts"
block|,
literal|""
operator|+
name|df1
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|sm2d
operator|/
name|studentExams
argument_list|)
operator|+
literal|"%"
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|row
operator|++
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|sbtb
operator|>
literal|0
condition|)
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"Back-to-back student conflicts"
block|,
name|df1
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|sbtb
operator|/
name|studentExams
argument_list|)
operator|+
literal|"%"
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|row
operator|++
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|sdbtb
operator|>
literal|0
condition|)
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
name|indent
operator|+
literal|"Distance back-to-back student conflicts"
block|,
name|df1
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|sdbtb
operator|/
name|studentExams
argument_list|)
operator|+
literal|"%"
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|row
operator|++
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|idc
operator|>
literal|0
operator|||
name|im2d
operator|>
literal|0
operator|||
name|ibtb
operator|>
literal|0
condition|)
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
name|sp
block|,
literal|""
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|row
operator|++
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|idc
operator|>
literal|0
condition|)
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"Direct instructor conflicts"
block|,
name|df1
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|idc
operator|/
name|studentExams
argument_list|)
operator|+
literal|"%"
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|row
operator|++
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|idcna
operator|>
literal|0
condition|)
block|{
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
name|indent
operator|+
literal|"Conflict with other exam"
block|,
name|df1
operator|.
name|format
argument_list|(
literal|100.0
operator|*
operator|(
name|idc
operator|-
name|idcna
operator|)
operator|/
name|studentExams
argument_list|)
operator|+
literal|"%"
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|row
operator|++
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
name|indent
operator|+
literal|"Instructor not available"
block|,
name|df1
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|idcna
operator|/
name|studentExams
argument_list|)
operator|+
literal|"%"
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|row
operator|++
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|im2d
operator|>
literal|0
condition|)
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"More than 2 exams a day instructor conflicts"
block|,
name|df1
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|im2d
operator|/
name|studentExams
argument_list|)
operator|+
literal|"%"
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|row
operator|++
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|ibtb
operator|>
literal|0
condition|)
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"Back-to-back instructor conflicts"
block|,
name|df1
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|ibtb
operator|/
name|studentExams
argument_list|)
operator|+
literal|"%"
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|row
operator|++
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|idbtb
operator|>
literal|0
condition|)
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
name|indent
operator|+
literal|"Distance back-to-back instructor conflicts"
block|,
name|df1
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|idbtb
operator|/
name|studentExams
argument_list|)
operator|+
literal|"%"
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|row
operator|++
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
name|table
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap"
argument_list|)
expr_stmt|;
return|return
name|table
return|;
block|}
block|}
end_class

end_unit

