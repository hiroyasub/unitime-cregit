begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.1 (University Timetabling Application)  * Copyright (C) 2008, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipOutputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|FileDataSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|Authenticator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|BodyPart
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|Multipart
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|PasswordAuthentication
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|Message
operator|.
name|RecipientType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|internet
operator|.
name|InternetAddress
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|internet
operator|.
name|MimeBodyPart
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|internet
operator|.
name|MimeMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|internet
operator|.
name|MimeMultipart
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|Web
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|ExamPdfReportForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SubjectAreaDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|reports
operator|.
name|exam
operator|.
name|InstructorExamReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|reports
operator|.
name|exam
operator|.
name|PdfLegacyExamReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|reports
operator|.
name|exam
operator|.
name|StudentExamReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|WebSolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignmentInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamInfo
operator|.
name|ExamInstructorInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**   * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ExamPdfReportAction
extends|extends
name|Action
block|{
specifier|protected
specifier|static
name|Logger
name|sLog
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|ExamPdfReportAction
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|ActionForward
name|execute
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
name|ExamPdfReportForm
name|myForm
init|=
operator|(
name|ExamPdfReportForm
operator|)
name|form
decl_stmt|;
comment|// Check Access
if|if
condition|(
operator|!
name|Web
operator|.
name|isLoggedIn
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Access Denied."
argument_list|)
throw|;
block|}
if|if
condition|(
name|WebSolver
operator|.
name|getExamSolver
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|REQUEST_WARN
argument_list|,
literal|"Examination PDF reports are generated from the saved solution (solver assignments are ignored)."
argument_list|)
expr_stmt|;
name|TimetableManager
name|mgr
init|=
name|TimetableManager
operator|.
name|getManager
argument_list|(
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// Read operation to be performed
name|String
name|op
init|=
operator|(
name|myForm
operator|.
name|getOp
argument_list|()
operator|!=
literal|null
condition|?
name|myForm
operator|.
name|getOp
argument_list|()
else|:
name|request
operator|.
name|getParameter
argument_list|(
literal|"op"
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
literal|"Generate"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
name|myForm
operator|.
name|save
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
name|myForm
operator|.
name|load
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"Generate"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|ActionMessages
name|errors
init|=
name|myForm
operator|.
name|validate
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|errors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"show"
argument_list|)
return|;
block|}
name|Session
name|session
init|=
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|myForm
operator|.
name|setReport
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|myForm
operator|.
name|log
argument_list|(
literal|"Loading exams..."
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
init|=
name|PdfLegacyExamReport
operator|.
name|loadExams
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|myForm
operator|.
name|getExamType
argument_list|()
argument_list|,
literal|true
argument_list|,
name|myForm
operator|.
name|getIgnoreEmptyExams
argument_list|()
argument_list|)
decl_stmt|;
comment|/*                 if (myForm.getAll()) {                     for (Iterator i=Exam.findAll(session.getUniqueId(), myForm.getExamType()).iterator();i.hasNext();) {                         exams.add(new ExamAssignmentInfo((Exam)i.next()));                     }                 } else {                     for (int i=0;i<myForm.getSubjects().length;i++) {                         SubjectArea subject = new SubjectAreaDAO().get(Long.valueOf(myForm.getSubjects()[i]));                         TreeSet<ExamAssignmentInfo> examsThisSubject = new TreeSet();                         for (Iterator j=Exam.findExamsOfSubjectArea(subject.getUniqueId(), myForm.getExamType()).iterator();j.hasNext();) {                             examsThisSubject.add(new ExamAssignmentInfo((Exam)j.next()));                         }                         examsPerSubject.put(subject, examsThisSubject);                     }                 }                 */
name|Hashtable
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
name|output
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|SubjectArea
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
argument_list|>
name|outputPerSubject
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|ExamInstructorInfo
argument_list|,
name|File
argument_list|>
name|ireports
init|=
literal|null
decl_stmt|;
name|Hashtable
argument_list|<
name|Student
argument_list|,
name|File
argument_list|>
name|sreports
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|myForm
operator|.
name|getReports
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|myForm
operator|.
name|log
argument_list|(
literal|"Generating "
operator|+
name|myForm
operator|.
name|getReports
argument_list|()
index|[
name|i
index|]
operator|+
literal|"..."
argument_list|)
expr_stmt|;
name|Class
name|reportClass
init|=
name|ExamPdfReportForm
operator|.
name|sRegisteredReports
operator|.
name|get
argument_list|(
name|myForm
operator|.
name|getReports
argument_list|()
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|String
name|reportName
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
name|entry
range|:
name|PdfLegacyExamReport
operator|.
name|sRegisteredReports
operator|.
name|entrySet
argument_list|()
control|)
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|reportClass
argument_list|)
condition|)
name|reportName
operator|=
name|entry
operator|.
name|getKey
argument_list|()
expr_stmt|;
if|if
condition|(
name|reportName
operator|==
literal|null
condition|)
name|reportName
operator|=
literal|"r"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
expr_stmt|;
name|String
name|name
init|=
name|session
operator|.
name|getAcademicTerm
argument_list|()
operator|+
name|session
operator|.
name|getYear
argument_list|()
operator|+
operator|(
name|myForm
operator|.
name|getExamType
argument_list|()
operator|==
name|Exam
operator|.
name|sExamTypeMidterm
condition|?
literal|"evn"
else|:
literal|"fin"
operator|)
operator|+
literal|"_"
operator|+
name|reportName
decl_stmt|;
if|if
condition|(
name|myForm
operator|.
name|getAll
argument_list|()
condition|)
block|{
name|File
name|file
init|=
name|ApplicationProperties
operator|.
name|getTempFile
argument_list|(
name|name
argument_list|,
operator|(
name|myForm
operator|.
name|getModeIdx
argument_list|()
operator|==
name|PdfLegacyExamReport
operator|.
name|sModeText
condition|?
literal|"txt"
else|:
literal|"pdf"
operator|)
argument_list|)
decl_stmt|;
name|myForm
operator|.
name|log
argument_list|(
literal|"&nbsp;&nbsp;Writing<a href='temp/"
operator|+
name|file
operator|.
name|getName
argument_list|()
operator|+
literal|"'>"
operator|+
name|reportName
operator|+
literal|"."
operator|+
operator|(
name|myForm
operator|.
name|getModeIdx
argument_list|()
operator|==
name|PdfLegacyExamReport
operator|.
name|sModeText
condition|?
literal|"txt"
else|:
literal|"pdf"
operator|)
operator|+
literal|"</a>... ("
operator|+
name|exams
operator|.
name|size
argument_list|()
operator|+
literal|" exams)"
argument_list|)
expr_stmt|;
name|PdfLegacyExamReport
name|report
init|=
operator|(
name|PdfLegacyExamReport
operator|)
name|reportClass
operator|.
name|getConstructor
argument_list|(
name|int
operator|.
name|class
argument_list|,
name|File
operator|.
name|class
argument_list|,
name|Session
operator|.
name|class
argument_list|,
name|int
operator|.
name|class
argument_list|,
name|SubjectArea
operator|.
name|class
argument_list|,
name|Collection
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|myForm
operator|.
name|getModeIdx
argument_list|()
argument_list|,
name|file
argument_list|,
operator|new
name|SessionDAO
argument_list|()
operator|.
name|get
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|,
name|myForm
operator|.
name|getExamType
argument_list|()
argument_list|,
literal|null
argument_list|,
name|exams
argument_list|)
decl_stmt|;
name|report
operator|.
name|setDirect
argument_list|(
name|myForm
operator|.
name|getDirect
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setM2d
argument_list|(
name|myForm
operator|.
name|getM2d
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setBtb
argument_list|(
name|myForm
operator|.
name|getBtb
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setDispRooms
argument_list|(
name|myForm
operator|.
name|getDispRooms
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setNoRoom
argument_list|(
name|myForm
operator|.
name|getNoRoom
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setTotals
argument_list|(
name|myForm
operator|.
name|getTotals
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setLimit
argument_list|(
name|myForm
operator|.
name|getLimit
argument_list|()
operator|==
literal|null
operator|||
name|myForm
operator|.
name|getLimit
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
operator|-
literal|1
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|myForm
operator|.
name|getLimit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|report
operator|.
name|setRoomCode
argument_list|(
name|myForm
operator|.
name|getRoomCodes
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setDispLimits
argument_list|(
name|myForm
operator|.
name|getDispLimit
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setSince
argument_list|(
name|myForm
operator|.
name|getSince
argument_list|()
operator|==
literal|null
operator|||
name|myForm
operator|.
name|getSince
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|null
else|:
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd/yyyy"
argument_list|)
operator|.
name|parse
argument_list|(
name|myForm
operator|.
name|getSince
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|report
operator|.
name|setItype
argument_list|(
name|myForm
operator|.
name|getItype
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setClassSchedule
argument_list|(
name|myForm
operator|.
name|getClassSchedule
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|printReport
argument_list|()
expr_stmt|;
name|report
operator|.
name|close
argument_list|()
expr_stmt|;
name|output
operator|.
name|put
argument_list|(
name|reportName
operator|+
literal|"."
operator|+
operator|(
name|myForm
operator|.
name|getModeIdx
argument_list|()
operator|==
name|PdfLegacyExamReport
operator|.
name|sModeText
condition|?
literal|"txt"
else|:
literal|"pdf"
operator|)
argument_list|,
name|file
argument_list|)
expr_stmt|;
if|if
condition|(
name|report
operator|instanceof
name|InstructorExamReport
operator|&&
name|myForm
operator|.
name|getEmailInstructors
argument_list|()
condition|)
block|{
name|ireports
operator|=
operator|(
operator|(
name|InstructorExamReport
operator|)
name|report
operator|)
operator|.
name|printInstructorReports
argument_list|(
name|myForm
operator|.
name|getModeIdx
argument_list|()
argument_list|,
name|name
argument_list|,
operator|new
name|FileGenerator
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|report
operator|instanceof
name|StudentExamReport
operator|&&
name|myForm
operator|.
name|getEmailStudents
argument_list|()
condition|)
block|{
name|sreports
operator|=
operator|(
operator|(
name|StudentExamReport
operator|)
name|report
operator|)
operator|.
name|printStudentReports
argument_list|(
name|myForm
operator|.
name|getModeIdx
argument_list|()
argument_list|,
name|name
argument_list|,
operator|new
name|FileGenerator
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|myForm
operator|.
name|getSubjects
argument_list|()
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|SubjectArea
name|subject
init|=
operator|new
name|SubjectAreaDAO
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|myForm
operator|.
name|getSubjects
argument_list|()
index|[
name|j
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|file
init|=
name|ApplicationProperties
operator|.
name|getTempFile
argument_list|(
name|name
operator|+
literal|"_"
operator|+
name|subject
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|,
operator|(
name|myForm
operator|.
name|getModeIdx
argument_list|()
operator|==
name|PdfLegacyExamReport
operator|.
name|sModeText
condition|?
literal|"txt"
else|:
literal|"pdf"
operator|)
argument_list|)
decl_stmt|;
name|int
name|nrExams
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|exams
control|)
block|{
if|if
condition|(
name|exam
operator|.
name|isOfSubjectArea
argument_list|(
name|subject
argument_list|)
condition|)
name|nrExams
operator|++
expr_stmt|;
block|}
name|myForm
operator|.
name|log
argument_list|(
literal|"&nbsp;&nbsp;Writing<a href='temp/"
operator|+
name|file
operator|.
name|getName
argument_list|()
operator|+
literal|"'>"
operator|+
name|subject
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|"_"
operator|+
name|reportName
operator|+
literal|"."
operator|+
operator|(
name|myForm
operator|.
name|getModeIdx
argument_list|()
operator|==
name|PdfLegacyExamReport
operator|.
name|sModeText
condition|?
literal|"txt"
else|:
literal|"pdf"
operator|)
operator|+
literal|"</a>... ("
operator|+
name|nrExams
operator|+
literal|" exams)"
argument_list|)
expr_stmt|;
name|PdfLegacyExamReport
name|report
init|=
operator|(
name|PdfLegacyExamReport
operator|)
name|reportClass
operator|.
name|getConstructor
argument_list|(
name|int
operator|.
name|class
argument_list|,
name|File
operator|.
name|class
argument_list|,
name|Session
operator|.
name|class
argument_list|,
name|int
operator|.
name|class
argument_list|,
name|SubjectArea
operator|.
name|class
argument_list|,
name|Collection
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|myForm
operator|.
name|getModeIdx
argument_list|()
argument_list|,
name|file
argument_list|,
operator|new
name|SessionDAO
argument_list|()
operator|.
name|get
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|,
name|myForm
operator|.
name|getExamType
argument_list|()
argument_list|,
name|subject
argument_list|,
name|exams
argument_list|)
decl_stmt|;
name|report
operator|.
name|setDirect
argument_list|(
name|myForm
operator|.
name|getDirect
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setM2d
argument_list|(
name|myForm
operator|.
name|getM2d
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setBtb
argument_list|(
name|myForm
operator|.
name|getBtb
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setDispRooms
argument_list|(
name|myForm
operator|.
name|getDispRooms
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setNoRoom
argument_list|(
name|myForm
operator|.
name|getNoRoom
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setTotals
argument_list|(
name|myForm
operator|.
name|getTotals
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setLimit
argument_list|(
name|myForm
operator|.
name|getLimit
argument_list|()
operator|==
literal|null
operator|||
name|myForm
operator|.
name|getLimit
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
operator|-
literal|1
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|myForm
operator|.
name|getLimit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|report
operator|.
name|setRoomCode
argument_list|(
name|myForm
operator|.
name|getRoomCodes
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setDispLimits
argument_list|(
name|myForm
operator|.
name|getDispLimit
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setItype
argument_list|(
name|myForm
operator|.
name|getItype
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|setClassSchedule
argument_list|(
name|myForm
operator|.
name|getClassSchedule
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|printReport
argument_list|()
expr_stmt|;
name|report
operator|.
name|close
argument_list|()
expr_stmt|;
name|output
operator|.
name|put
argument_list|(
name|subject
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|"_"
operator|+
name|reportName
operator|+
literal|"."
operator|+
operator|(
name|myForm
operator|.
name|getModeIdx
argument_list|()
operator|==
name|PdfLegacyExamReport
operator|.
name|sModeText
condition|?
literal|"txt"
else|:
literal|"pdf"
operator|)
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
name|files
init|=
name|outputPerSubject
operator|.
name|get
argument_list|(
name|subject
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|==
literal|null
condition|)
block|{
name|files
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
name|outputPerSubject
operator|.
name|put
argument_list|(
name|subject
argument_list|,
name|files
argument_list|)
expr_stmt|;
block|}
name|files
operator|.
name|put
argument_list|(
name|subject
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|"_"
operator|+
name|reportName
operator|+
literal|"."
operator|+
operator|(
name|myForm
operator|.
name|getModeIdx
argument_list|()
operator|==
name|PdfLegacyExamReport
operator|.
name|sModeText
condition|?
literal|"txt"
else|:
literal|"pdf"
operator|)
argument_list|,
name|file
argument_list|)
expr_stmt|;
if|if
condition|(
name|report
operator|instanceof
name|InstructorExamReport
operator|&&
name|myForm
operator|.
name|getEmailInstructors
argument_list|()
condition|)
block|{
name|ireports
operator|=
operator|(
operator|(
name|InstructorExamReport
operator|)
name|report
operator|)
operator|.
name|printInstructorReports
argument_list|(
name|myForm
operator|.
name|getModeIdx
argument_list|()
argument_list|,
name|name
argument_list|,
operator|new
name|FileGenerator
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|report
operator|instanceof
name|StudentExamReport
operator|&&
name|myForm
operator|.
name|getEmailStudents
argument_list|()
condition|)
block|{
name|sreports
operator|=
operator|(
operator|(
name|StudentExamReport
operator|)
name|report
operator|)
operator|.
name|printStudentReports
argument_list|(
name|myForm
operator|.
name|getModeIdx
argument_list|()
argument_list|,
name|name
argument_list|,
operator|new
name|FileGenerator
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|32
operator|*
literal|1024
index|]
decl_stmt|;
name|int
name|len
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|output
operator|.
name|isEmpty
argument_list|()
condition|)
name|myForm
operator|.
name|log
argument_list|(
literal|"<font color='orange'>No report generated.</font>"
argument_list|)
expr_stmt|;
if|else if
condition|(
name|myForm
operator|.
name|getEmail
argument_list|()
condition|)
block|{
name|InternetAddress
name|from
init|=
operator|(
name|mgr
operator|.
name|getEmailAddress
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|InternetAddress
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.inquiry.sender"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.contact.email"
argument_list|)
argument_list|)
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.inquiry.sender.name"
argument_list|)
argument_list|)
else|:
operator|new
name|InternetAddress
argument_list|(
name|mgr
operator|.
name|getEmailAddress
argument_list|()
argument_list|,
name|mgr
operator|.
name|getName
argument_list|()
argument_list|)
operator|)
decl_stmt|;
name|myForm
operator|.
name|log
argument_list|(
literal|"Sending email(s)..."
argument_list|)
expr_stmt|;
name|Properties
name|p
init|=
name|ApplicationProperties
operator|.
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|getProperty
argument_list|(
literal|"mail.smtp.host"
argument_list|)
operator|==
literal|null
operator|&&
name|p
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.smtp.host"
argument_list|)
operator|!=
literal|null
condition|)
name|p
operator|.
name|setProperty
argument_list|(
literal|"mail.smtp.host"
argument_list|,
name|p
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.smtp.host"
argument_list|)
argument_list|)
expr_stmt|;
name|Authenticator
name|a
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.mail.user"
argument_list|)
operator|!=
literal|null
operator|&&
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.mail.pwd"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|a
operator|=
operator|new
name|Authenticator
argument_list|()
block|{
specifier|public
name|PasswordAuthentication
name|getPasswordAuthentication
parameter_list|()
block|{
return|return
operator|new
name|PasswordAuthentication
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.mail.user"
argument_list|)
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.mail.pwd"
argument_list|)
argument_list|)
return|;
block|}
block|}
expr_stmt|;
block|}
name|javax
operator|.
name|mail
operator|.
name|Session
name|mailSession
init|=
name|javax
operator|.
name|mail
operator|.
name|Session
operator|.
name|getDefaultInstance
argument_list|(
name|p
argument_list|,
name|a
argument_list|)
decl_stmt|;
if|if
condition|(
name|myForm
operator|.
name|getEmailDeputies
argument_list|()
condition|)
block|{
name|Hashtable
argument_list|<
name|TimetableManager
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
argument_list|>
name|files2send
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|SubjectArea
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
argument_list|>
name|entry
range|:
name|outputPerSubject
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getDepartment
argument_list|()
operator|.
name|getTimetableManagers
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|myForm
operator|.
name|log
argument_list|(
literal|"<font color='orange'>&nbsp;&nbsp;No manager associated with subject area "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|" ("
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getDepartment
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|")</font>"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getDepartment
argument_list|()
operator|.
name|getTimetableManagers
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimetableManager
name|g
init|=
operator|(
name|TimetableManager
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|g
operator|.
name|getEmailAddress
argument_list|()
operator|==
literal|null
operator|||
name|g
operator|.
name|getEmailAddress
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|myForm
operator|.
name|log
argument_list|(
literal|"<font color='orange'>&nbsp;&nbsp;Manager "
operator|+
name|g
operator|.
name|getName
argument_list|()
operator|+
literal|" has no email address.</font>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
name|files
init|=
name|files2send
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|==
literal|null
condition|)
block|{
name|files
operator|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
argument_list|()
expr_stmt|;
name|files2send
operator|.
name|put
argument_list|(
name|g
argument_list|,
name|files
argument_list|)
expr_stmt|;
block|}
name|files
operator|.
name|putAll
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|files2send
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|myForm
operator|.
name|log
argument_list|(
literal|"<font color='red'>Nothing to send.</font>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Set
argument_list|<
name|TimetableManager
argument_list|>
name|managers
init|=
name|files2send
operator|.
name|keySet
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|managers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|TimetableManager
name|manager
init|=
name|managers
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
name|files
init|=
name|files2send
operator|.
name|get
argument_list|(
name|manager
argument_list|)
decl_stmt|;
name|managers
operator|.
name|remove
argument_list|(
name|manager
argument_list|)
expr_stmt|;
name|myForm
operator|.
name|log
argument_list|(
literal|"Sending email to "
operator|+
name|manager
operator|.
name|getName
argument_list|()
operator|+
literal|" ("
operator|+
name|manager
operator|.
name|getEmailAddress
argument_list|()
operator|+
literal|")..."
argument_list|)
expr_stmt|;
name|MimeMessage
name|mail
init|=
operator|new
name|MimeMessage
argument_list|(
name|mailSession
argument_list|)
decl_stmt|;
name|mail
operator|.
name|setSubject
argument_list|(
name|myForm
operator|.
name|getSubject
argument_list|()
operator|==
literal|null
condition|?
literal|"Examination Report"
else|:
name|myForm
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
name|Multipart
name|body
init|=
operator|new
name|MimeMultipart
argument_list|()
decl_stmt|;
name|BodyPart
name|text
init|=
operator|new
name|MimeBodyPart
argument_list|()
decl_stmt|;
name|text
operator|.
name|setText
argument_list|(
operator|(
name|myForm
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|myForm
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\r\n\r\n"
operator|)
operator|+
literal|"For an up-to-date report, please visit "
operator|+
name|request
operator|.
name|getScheme
argument_list|()
operator|+
literal|"://"
operator|+
name|request
operator|.
name|getServerName
argument_list|()
operator|+
literal|":"
operator|+
name|request
operator|.
name|getServerPort
argument_list|()
operator|+
name|request
operator|.
name|getContextPath
argument_list|()
operator|+
literal|"/\r\n\r\n"
operator|+
literal|"This email was automatically generated by "
operator|+
literal|"UniTime "
operator|+
name|Constants
operator|.
name|VERSION
operator|+
literal|"."
operator|+
name|Constants
operator|.
name|BLD_NUMBER
operator|.
name|replaceAll
argument_list|(
literal|"@build.number@"
argument_list|,
literal|"?"
argument_list|)
operator|+
literal|" (Univesity Timetabling Application, http://www.unitime.org)."
argument_list|)
expr_stmt|;
name|body
operator|.
name|addBodyPart
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|mail
operator|.
name|addRecipient
argument_list|(
name|RecipientType
operator|.
name|TO
argument_list|,
operator|new
name|InternetAddress
argument_list|(
name|manager
operator|.
name|getEmailAddress
argument_list|()
argument_list|,
name|manager
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|TimetableManager
argument_list|>
name|i
init|=
name|managers
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimetableManager
name|m
init|=
operator|(
name|TimetableManager
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|.
name|equals
argument_list|(
name|files2send
operator|.
name|get
argument_list|(
name|m
argument_list|)
argument_list|)
condition|)
block|{
name|myForm
operator|.
name|log
argument_list|(
literal|"&nbsp;&nbsp;Including "
operator|+
name|m
operator|.
name|getName
argument_list|()
operator|+
literal|" ("
operator|+
name|m
operator|.
name|getEmailAddress
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|mail
operator|.
name|addRecipient
argument_list|(
name|RecipientType
operator|.
name|TO
argument_list|,
operator|new
name|InternetAddress
argument_list|(
name|m
operator|.
name|getEmailAddress
argument_list|()
argument_list|,
name|m
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|myForm
operator|.
name|getAddress
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|myForm
operator|.
name|getAddress
argument_list|()
argument_list|,
literal|";,\n\r "
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
name|mail
operator|.
name|addRecipient
argument_list|(
name|RecipientType
operator|.
name|TO
argument_list|,
operator|new
name|InternetAddress
argument_list|(
name|s
operator|.
name|nextToken
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|myForm
operator|.
name|getCc
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|myForm
operator|.
name|getCc
argument_list|()
argument_list|,
literal|";,\n\r "
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
name|mail
operator|.
name|addRecipient
argument_list|(
name|RecipientType
operator|.
name|CC
argument_list|,
operator|new
name|InternetAddress
argument_list|(
name|s
operator|.
name|nextToken
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|myForm
operator|.
name|getBcc
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|myForm
operator|.
name|getBcc
argument_list|()
argument_list|,
literal|";,\n\r "
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
name|mail
operator|.
name|addRecipient
argument_list|(
name|RecipientType
operator|.
name|BCC
argument_list|,
operator|new
name|InternetAddress
argument_list|(
name|s
operator|.
name|nextToken
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|from
operator|!=
literal|null
condition|)
name|mail
operator|.
name|setFrom
argument_list|(
name|from
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
name|entry
range|:
name|files
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|BodyPart
name|attachement
init|=
operator|new
name|MimeBodyPart
argument_list|()
decl_stmt|;
name|attachement
operator|.
name|setDataHandler
argument_list|(
operator|new
name|DataHandler
argument_list|(
operator|new
name|FileDataSource
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|attachement
operator|.
name|setFileName
argument_list|(
name|session
operator|.
name|getAcademicTerm
argument_list|()
operator|+
name|session
operator|.
name|getYear
argument_list|()
operator|+
operator|(
name|myForm
operator|.
name|getExamType
argument_list|()
operator|==
name|Exam
operator|.
name|sExamTypeMidterm
condition|?
literal|"evn"
else|:
literal|"fin"
operator|)
operator|+
literal|"_"
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|body
operator|.
name|addBodyPart
argument_list|(
name|attachement
argument_list|)
expr_stmt|;
name|myForm
operator|.
name|log
argument_list|(
literal|"&nbsp;&nbsp;Attaching<a href='temp/"
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"'>"
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"</a>"
argument_list|)
expr_stmt|;
block|}
name|mail
operator|.
name|setSentDate
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|mail
operator|.
name|setContent
argument_list|(
name|body
argument_list|)
expr_stmt|;
try|try
block|{
name|Transport
operator|.
name|send
argument_list|(
name|mail
argument_list|)
expr_stmt|;
name|myForm
operator|.
name|log
argument_list|(
literal|"Email sent."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|myForm
operator|.
name|log
argument_list|(
literal|"<font color='red'>Unable to send email: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"</font>"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|MimeMessage
name|mail
init|=
operator|new
name|MimeMessage
argument_list|(
name|mailSession
argument_list|)
decl_stmt|;
name|mail
operator|.
name|setSubject
argument_list|(
name|myForm
operator|.
name|getSubject
argument_list|()
operator|==
literal|null
condition|?
literal|"Examination Report"
else|:
name|myForm
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
name|Multipart
name|body
init|=
operator|new
name|MimeMultipart
argument_list|()
decl_stmt|;
name|MimeBodyPart
name|text
init|=
operator|new
name|MimeBodyPart
argument_list|()
decl_stmt|;
name|text
operator|.
name|setText
argument_list|(
operator|(
name|myForm
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|myForm
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\r\n\r\n"
operator|)
operator|+
literal|"For an up-to-date report, please visit "
operator|+
name|request
operator|.
name|getScheme
argument_list|()
operator|+
literal|"://"
operator|+
name|request
operator|.
name|getServerName
argument_list|()
operator|+
literal|":"
operator|+
name|request
operator|.
name|getServerPort
argument_list|()
operator|+
name|request
operator|.
name|getContextPath
argument_list|()
operator|+
literal|"/\r\n\r\n"
operator|+
literal|"This email was automatically generated by "
operator|+
literal|"UniTime "
operator|+
name|Constants
operator|.
name|VERSION
operator|+
literal|"."
operator|+
name|Constants
operator|.
name|BLD_NUMBER
operator|.
name|replaceAll
argument_list|(
literal|"@build.number@"
argument_list|,
literal|"?"
argument_list|)
operator|+
literal|" (Univesity Timetabling Application, http://www.unitime.org)."
argument_list|)
expr_stmt|;
name|body
operator|.
name|addBodyPart
argument_list|(
name|text
argument_list|)
expr_stmt|;
if|if
condition|(
name|myForm
operator|.
name|getAddress
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|myForm
operator|.
name|getAddress
argument_list|()
argument_list|,
literal|";,\n\r "
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
name|mail
operator|.
name|addRecipient
argument_list|(
name|RecipientType
operator|.
name|TO
argument_list|,
operator|new
name|InternetAddress
argument_list|(
name|s
operator|.
name|nextToken
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|myForm
operator|.
name|getCc
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|myForm
operator|.
name|getCc
argument_list|()
argument_list|,
literal|";,\n\r "
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
name|mail
operator|.
name|addRecipient
argument_list|(
name|RecipientType
operator|.
name|CC
argument_list|,
operator|new
name|InternetAddress
argument_list|(
name|s
operator|.
name|nextToken
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|myForm
operator|.
name|getBcc
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|myForm
operator|.
name|getBcc
argument_list|()
argument_list|,
literal|";,\n\r "
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
name|mail
operator|.
name|addRecipient
argument_list|(
name|RecipientType
operator|.
name|BCC
argument_list|,
operator|new
name|InternetAddress
argument_list|(
name|s
operator|.
name|nextToken
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|from
operator|!=
literal|null
condition|)
name|mail
operator|.
name|setFrom
argument_list|(
name|from
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
name|entry
range|:
name|output
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|BodyPart
name|attachement
init|=
operator|new
name|MimeBodyPart
argument_list|()
decl_stmt|;
name|attachement
operator|.
name|setDataHandler
argument_list|(
operator|new
name|DataHandler
argument_list|(
operator|new
name|FileDataSource
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|attachement
operator|.
name|setFileName
argument_list|(
name|session
operator|.
name|getAcademicTerm
argument_list|()
operator|+
name|session
operator|.
name|getYear
argument_list|()
operator|+
operator|(
name|myForm
operator|.
name|getExamType
argument_list|()
operator|==
name|Exam
operator|.
name|sExamTypeMidterm
condition|?
literal|"evn"
else|:
literal|"fin"
operator|)
operator|+
literal|"_"
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|body
operator|.
name|addBodyPart
argument_list|(
name|attachement
argument_list|)
expr_stmt|;
block|}
name|mail
operator|.
name|setSentDate
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|mail
operator|.
name|setContent
argument_list|(
name|body
argument_list|)
expr_stmt|;
try|try
block|{
name|Transport
operator|.
name|send
argument_list|(
name|mail
argument_list|)
expr_stmt|;
name|myForm
operator|.
name|log
argument_list|(
literal|"Email sent."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|myForm
operator|.
name|log
argument_list|(
literal|"<font color='red'>Unable to send email: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"</font>"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|myForm
operator|.
name|getEmailInstructors
argument_list|()
operator|&&
name|ireports
operator|!=
literal|null
operator|&&
operator|!
name|ireports
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|myForm
operator|.
name|log
argument_list|(
literal|"Emailing instructors..."
argument_list|)
expr_stmt|;
for|for
control|(
name|ExamInstructorInfo
name|instructor
range|:
operator|new
name|TreeSet
argument_list|<
name|ExamInstructorInfo
argument_list|>
argument_list|(
name|ireports
operator|.
name|keySet
argument_list|()
argument_list|)
control|)
block|{
name|File
name|report
init|=
name|ireports
operator|.
name|get
argument_list|(
name|instructor
argument_list|)
decl_stmt|;
name|String
name|email
init|=
name|instructor
operator|.
name|getInstructor
argument_list|()
operator|.
name|getEmail
argument_list|()
decl_stmt|;
if|if
condition|(
name|email
operator|==
literal|null
operator|||
name|email
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|myForm
operator|.
name|log
argument_list|(
literal|"&nbsp;&nbsp;<font color='orange'>Unable to email<a href='temp/"
operator|+
name|report
operator|.
name|getName
argument_list|()
operator|+
literal|"'>"
operator|+
name|instructor
operator|.
name|getName
argument_list|()
operator|+
literal|"</a> -- instructor has no email address.</font>"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|MimeMessage
name|mail
init|=
operator|new
name|MimeMessage
argument_list|(
name|mailSession
argument_list|)
decl_stmt|;
name|mail
operator|.
name|setSubject
argument_list|(
name|myForm
operator|.
name|getSubject
argument_list|()
operator|==
literal|null
condition|?
literal|"Examination Report"
else|:
name|myForm
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
name|Multipart
name|body
init|=
operator|new
name|MimeMultipart
argument_list|()
decl_stmt|;
name|MimeBodyPart
name|text
init|=
operator|new
name|MimeBodyPart
argument_list|()
decl_stmt|;
name|text
operator|.
name|setText
argument_list|(
operator|(
name|myForm
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|myForm
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\r\n\r\n"
operator|)
operator|+
literal|"For an up-to-date report, please visit "
operator|+
name|request
operator|.
name|getScheme
argument_list|()
operator|+
literal|"://"
operator|+
name|request
operator|.
name|getServerName
argument_list|()
operator|+
literal|":"
operator|+
name|request
operator|.
name|getServerPort
argument_list|()
operator|+
name|request
operator|.
name|getContextPath
argument_list|()
operator|+
literal|"/exams.do\r\n\r\n"
operator|+
literal|"This email was automatically generated by "
operator|+
literal|"UniTime "
operator|+
name|Constants
operator|.
name|VERSION
operator|+
literal|"."
operator|+
name|Constants
operator|.
name|BLD_NUMBER
operator|.
name|replaceAll
argument_list|(
literal|"@build.number@"
argument_list|,
literal|"?"
argument_list|)
operator|+
literal|" (Univesity Timetabling Application, http://www.unitime.org)."
argument_list|)
expr_stmt|;
name|body
operator|.
name|addBodyPart
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|mail
operator|.
name|addRecipient
argument_list|(
name|RecipientType
operator|.
name|TO
argument_list|,
operator|new
name|InternetAddress
argument_list|(
name|email
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|myForm
operator|.
name|getCc
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|myForm
operator|.
name|getCc
argument_list|()
argument_list|,
literal|";,\n\r "
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
name|mail
operator|.
name|addRecipient
argument_list|(
name|RecipientType
operator|.
name|CC
argument_list|,
operator|new
name|InternetAddress
argument_list|(
name|s
operator|.
name|nextToken
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|myForm
operator|.
name|getBcc
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|myForm
operator|.
name|getBcc
argument_list|()
argument_list|,
literal|";,\n\r "
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
name|mail
operator|.
name|addRecipient
argument_list|(
name|RecipientType
operator|.
name|BCC
argument_list|,
operator|new
name|InternetAddress
argument_list|(
name|s
operator|.
name|nextToken
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|from
operator|!=
literal|null
condition|)
name|mail
operator|.
name|setFrom
argument_list|(
name|from
argument_list|)
expr_stmt|;
name|BodyPart
name|attachement
init|=
operator|new
name|MimeBodyPart
argument_list|()
decl_stmt|;
name|attachement
operator|.
name|setDataHandler
argument_list|(
operator|new
name|DataHandler
argument_list|(
operator|new
name|FileDataSource
argument_list|(
name|report
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|attachement
operator|.
name|setFileName
argument_list|(
name|session
operator|.
name|getAcademicTerm
argument_list|()
operator|+
name|session
operator|.
name|getYear
argument_list|()
operator|+
operator|(
name|myForm
operator|.
name|getExamType
argument_list|()
operator|==
name|Exam
operator|.
name|sExamTypeMidterm
condition|?
literal|"evn"
else|:
literal|"fin"
operator|)
operator|+
operator|(
name|myForm
operator|.
name|getModeIdx
argument_list|()
operator|==
name|PdfLegacyExamReport
operator|.
name|sModeText
condition|?
literal|".txt"
else|:
literal|".pdf"
operator|)
argument_list|)
expr_stmt|;
name|body
operator|.
name|addBodyPart
argument_list|(
name|attachement
argument_list|)
expr_stmt|;
name|mail
operator|.
name|setSentDate
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|mail
operator|.
name|setContent
argument_list|(
name|body
argument_list|)
expr_stmt|;
try|try
block|{
name|Transport
operator|.
name|send
argument_list|(
name|mail
argument_list|)
expr_stmt|;
name|myForm
operator|.
name|log
argument_list|(
literal|"&nbsp;&nbsp;An email was sent to<a href='temp/"
operator|+
name|report
operator|.
name|getName
argument_list|()
operator|+
literal|"'>"
operator|+
name|instructor
operator|.
name|getName
argument_list|()
operator|+
literal|"</a>."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|myForm
operator|.
name|log
argument_list|(
literal|"&nbsp;&nbsp;<font color='orange'>Unable to email<a href='temp/"
operator|+
name|report
operator|.
name|getName
argument_list|()
operator|+
literal|"'>"
operator|+
name|instructor
operator|.
name|getName
argument_list|()
operator|+
literal|"</a> -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|".</font>"
argument_list|)
expr_stmt|;
block|}
block|}
name|myForm
operator|.
name|log
argument_list|(
literal|"Emails sent."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myForm
operator|.
name|getEmailStudents
argument_list|()
operator|&&
name|sreports
operator|!=
literal|null
operator|&&
operator|!
name|sreports
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|myForm
operator|.
name|log
argument_list|(
literal|"Emailing students..."
argument_list|)
expr_stmt|;
for|for
control|(
name|Student
name|student
range|:
operator|new
name|TreeSet
argument_list|<
name|Student
argument_list|>
argument_list|(
name|sreports
operator|.
name|keySet
argument_list|()
argument_list|)
control|)
block|{
name|File
name|report
init|=
name|sreports
operator|.
name|get
argument_list|(
name|student
argument_list|)
decl_stmt|;
name|String
name|email
init|=
name|student
operator|.
name|getEmail
argument_list|()
decl_stmt|;
if|if
condition|(
name|email
operator|==
literal|null
operator|||
name|email
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|myForm
operator|.
name|log
argument_list|(
literal|"&nbsp;&nbsp;<font color='orange'>Unable to email<a href='temp/"
operator|+
name|report
operator|.
name|getName
argument_list|()
operator|+
literal|"'>"
operator|+
name|student
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatLastFist
argument_list|)
operator|+
literal|"</a> -- student has no email address.</font>"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|MimeMessage
name|mail
init|=
operator|new
name|MimeMessage
argument_list|(
name|mailSession
argument_list|)
decl_stmt|;
name|mail
operator|.
name|setSubject
argument_list|(
name|myForm
operator|.
name|getSubject
argument_list|()
operator|==
literal|null
condition|?
literal|"Examination Report"
else|:
name|myForm
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
name|Multipart
name|body
init|=
operator|new
name|MimeMultipart
argument_list|()
decl_stmt|;
name|MimeBodyPart
name|text
init|=
operator|new
name|MimeBodyPart
argument_list|()
decl_stmt|;
name|text
operator|.
name|setText
argument_list|(
operator|(
name|myForm
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|myForm
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\r\n\r\n"
operator|)
operator|+
literal|"For an up-to-date report, please visit "
operator|+
name|request
operator|.
name|getScheme
argument_list|()
operator|+
literal|"://"
operator|+
name|request
operator|.
name|getServerName
argument_list|()
operator|+
literal|":"
operator|+
name|request
operator|.
name|getServerPort
argument_list|()
operator|+
name|request
operator|.
name|getContextPath
argument_list|()
operator|+
literal|"/exams.do\r\n\r\n"
operator|+
literal|"This email was automatically generated by "
operator|+
literal|"UniTime "
operator|+
name|Constants
operator|.
name|VERSION
operator|+
literal|"."
operator|+
name|Constants
operator|.
name|BLD_NUMBER
operator|.
name|replaceAll
argument_list|(
literal|"@build.number@"
argument_list|,
literal|"?"
argument_list|)
operator|+
literal|" (Univesity Timetabling Application, http://www.unitime.org)."
argument_list|)
expr_stmt|;
name|body
operator|.
name|addBodyPart
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|mail
operator|.
name|addRecipient
argument_list|(
name|RecipientType
operator|.
name|TO
argument_list|,
operator|new
name|InternetAddress
argument_list|(
name|email
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|myForm
operator|.
name|getCc
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|myForm
operator|.
name|getCc
argument_list|()
argument_list|,
literal|";,\n\r "
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
name|mail
operator|.
name|addRecipient
argument_list|(
name|RecipientType
operator|.
name|CC
argument_list|,
operator|new
name|InternetAddress
argument_list|(
name|s
operator|.
name|nextToken
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|myForm
operator|.
name|getBcc
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|myForm
operator|.
name|getBcc
argument_list|()
argument_list|,
literal|";,\n\r "
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
name|mail
operator|.
name|addRecipient
argument_list|(
name|RecipientType
operator|.
name|BCC
argument_list|,
operator|new
name|InternetAddress
argument_list|(
name|s
operator|.
name|nextToken
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|from
operator|!=
literal|null
condition|)
name|mail
operator|.
name|setFrom
argument_list|(
name|from
argument_list|)
expr_stmt|;
name|BodyPart
name|attachement
init|=
operator|new
name|MimeBodyPart
argument_list|()
decl_stmt|;
name|attachement
operator|.
name|setDataHandler
argument_list|(
operator|new
name|DataHandler
argument_list|(
operator|new
name|FileDataSource
argument_list|(
name|report
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|attachement
operator|.
name|setFileName
argument_list|(
name|session
operator|.
name|getAcademicTerm
argument_list|()
operator|+
name|session
operator|.
name|getYear
argument_list|()
operator|+
operator|(
name|myForm
operator|.
name|getExamType
argument_list|()
operator|==
name|Exam
operator|.
name|sExamTypeMidterm
condition|?
literal|"evn"
else|:
literal|"fin"
operator|)
operator|+
operator|(
name|myForm
operator|.
name|getModeIdx
argument_list|()
operator|==
name|PdfLegacyExamReport
operator|.
name|sModeText
condition|?
literal|".txt"
else|:
literal|".pdf"
operator|)
argument_list|)
expr_stmt|;
name|body
operator|.
name|addBodyPart
argument_list|(
name|attachement
argument_list|)
expr_stmt|;
name|mail
operator|.
name|setSentDate
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|mail
operator|.
name|setContent
argument_list|(
name|body
argument_list|)
expr_stmt|;
try|try
block|{
name|Transport
operator|.
name|send
argument_list|(
name|mail
argument_list|)
expr_stmt|;
name|myForm
operator|.
name|log
argument_list|(
literal|"&nbsp;&nbsp;An email was sent to<a href='temp/"
operator|+
name|report
operator|.
name|getName
argument_list|()
operator|+
literal|"'>"
operator|+
name|student
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatLastFist
argument_list|)
operator|+
literal|"</a>."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|myForm
operator|.
name|log
argument_list|(
literal|"&nbsp;&nbsp;<font color='orange'>Unable to email<a href='temp/"
operator|+
name|report
operator|.
name|getName
argument_list|()
operator|+
literal|"'>"
operator|+
name|student
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatLastFist
argument_list|)
operator|+
literal|"</a> -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|".</font>"
argument_list|)
expr_stmt|;
block|}
block|}
name|myForm
operator|.
name|log
argument_list|(
literal|"Emails sent."
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|output
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
if|else if
condition|(
name|output
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|request
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|REQUEST_OPEN_URL
argument_list|,
literal|"temp/"
operator|+
name|output
operator|.
name|elements
argument_list|()
operator|.
name|nextElement
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FileInputStream
name|fis
init|=
literal|null
decl_stmt|;
name|ZipOutputStream
name|zip
init|=
literal|null
decl_stmt|;
try|try
block|{
name|File
name|zipFile
init|=
name|ApplicationProperties
operator|.
name|getTempFile
argument_list|(
name|session
operator|.
name|getAcademicTerm
argument_list|()
operator|+
name|session
operator|.
name|getYear
argument_list|()
operator|+
operator|(
name|myForm
operator|.
name|getExamType
argument_list|()
operator|==
name|Exam
operator|.
name|sExamTypeMidterm
condition|?
literal|"evn"
else|:
literal|"fin"
operator|)
argument_list|,
literal|"zip"
argument_list|)
decl_stmt|;
name|myForm
operator|.
name|log
argument_list|(
literal|"Writing<a href='temp/"
operator|+
name|zipFile
operator|.
name|getName
argument_list|()
operator|+
literal|"'>"
operator|+
name|session
operator|.
name|getAcademicTerm
argument_list|()
operator|+
name|session
operator|.
name|getYear
argument_list|()
operator|+
operator|(
name|myForm
operator|.
name|getExamType
argument_list|()
operator|==
name|Exam
operator|.
name|sExamTypeMidterm
condition|?
literal|"evn"
else|:
literal|"fin"
operator|)
operator|+
literal|".zip</a>..."
argument_list|)
expr_stmt|;
name|zip
operator|=
operator|new
name|ZipOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|zipFile
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
name|entry
range|:
name|output
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|zip
operator|.
name|putNextEntry
argument_list|(
operator|new
name|ZipEntry
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fis
operator|=
operator|new
name|FileInputStream
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
operator|(
name|len
operator|=
name|fis
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|>
literal|0
condition|)
name|zip
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
name|fis
operator|=
literal|null
expr_stmt|;
name|zip
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
block|}
name|zip
operator|.
name|flush
argument_list|()
expr_stmt|;
name|zip
operator|.
name|close
argument_list|()
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|REQUEST_OPEN_URL
argument_list|,
literal|"temp/"
operator|+
name|zipFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|fis
operator|!=
literal|null
condition|)
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|zip
operator|!=
literal|null
condition|)
name|zip
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|myForm
operator|.
name|log
argument_list|(
literal|"All done."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|myForm
operator|.
name|log
argument_list|(
literal|"<font color='red'>Process failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|" (exception "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|")</font>"
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
literal|"report"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Unable to generate report, reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"show"
argument_list|)
return|;
block|}
specifier|public
specifier|static
class|class
name|FileGenerator
implements|implements
name|InstructorExamReport
operator|.
name|FileGenerator
block|{
name|String
name|iName
decl_stmt|;
specifier|public
name|FileGenerator
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|iName
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|File
name|generate
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|ext
parameter_list|)
block|{
return|return
name|ApplicationProperties
operator|.
name|getTempFile
argument_list|(
name|iName
operator|+
literal|"_"
operator|+
name|prefix
argument_list|,
name|ext
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

