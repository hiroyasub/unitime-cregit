begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|WebTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|SponsoringOrgListForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SponsoringOrganization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_comment
comment|/**  * @author Zuzana Mullerova  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"/sponsoringOrgList"
argument_list|)
specifier|public
class|class
name|SponsoringOrgListAction
extends|extends
name|Action
block|{
annotation|@
name|Autowired
name|SessionContext
name|sessionContext
decl_stmt|;
specifier|public
name|ActionForward
name|execute
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
name|SponsoringOrgListForm
name|myForm
init|=
operator|(
name|SponsoringOrgListForm
operator|)
name|form
decl_stmt|;
name|String
name|op
init|=
name|myForm
operator|.
name|getOp
argument_list|()
decl_stmt|;
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|SponsoringOrganizations
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"Add Organization"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|request
operator|.
name|setAttribute
argument_list|(
literal|"op"
argument_list|,
literal|"add"
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"add"
argument_list|)
return|;
block|}
name|request
operator|.
name|setAttribute
argument_list|(
literal|"table"
argument_list|,
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"show"
argument_list|)
return|;
block|}
specifier|public
name|String
name|getTable
parameter_list|()
block|{
comment|// Create new table
name|WebTable
name|table
init|=
operator|new
name|WebTable
argument_list|(
literal|2
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Name"
block|,
literal|"Email"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|SponsoringOrganization
operator|.
name|findAll
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SponsoringOrganization
name|spor
init|=
operator|(
name|SponsoringOrganization
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|table
operator|.
name|addLine
argument_list|(
operator|(
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|spor
argument_list|,
name|Right
operator|.
name|SponsoringOrganizationEdit
argument_list|)
condition|?
literal|"onclick=\"document.location='sponsoringOrgEdit.do?op=Edit&id="
operator|+
name|spor
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"';\""
else|:
literal|null
operator|)
argument_list|,
operator|new
name|String
index|[]
block|{
name|spor
operator|.
name|getName
argument_list|()
block|,
name|spor
operator|.
name|getEmail
argument_list|()
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
literal|null
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
block|}
comment|/*		    if ("Export PDF".equals(request.getParameter("op"))) { 		        File file = ApplicationProperties.getTempFile("itypes", "pdf"); 		        webTable.exportPdf(file, PdfWebTable.getOrder(request.getSession(),"itypeDescList.ord")); 		        request.setAttribute(Constants.REQUEST_OPEN_URL, "temp/"+file.getName()); 		    } 		 		    String tblData = webTable.printTable(PdfWebTable.getOrder(request.getSession(),"itypeDescList.ord")); */
return|return
operator|(
name|table
operator|.
name|getLines
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
name|table
operator|.
name|printTable
argument_list|()
operator|)
return|;
block|}
block|}
end_class

end_unit

