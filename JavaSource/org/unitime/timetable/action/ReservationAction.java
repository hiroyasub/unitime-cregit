begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.1 (University Timetabling Application)  * Copyright (C) 2008, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|Web
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|ReservationForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcadAreaReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOfferingReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|IndividualReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PosReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentGroupReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|Class_DAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstrOfferingConfigDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstructionalOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|LookupTables
import|;
end_import

begin_comment
comment|/**  * Base Reservations action class  * @author Heston Fernandes  */
end_comment

begin_class
specifier|public
class|class
name|ReservationAction
extends|extends
name|Action
block|{
comment|// --------------------------------------------------------- Instance Variables
comment|// --------------------------------------------------------- Methods
comment|/**       * Method execute      * @param mapping      * @param form      * @param request      * @param response      * @return ActionForward      */
specifier|public
name|ActionForward
name|execute
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
name|HttpSession
name|httpSession
init|=
name|request
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Web
operator|.
name|isLoggedIn
argument_list|(
name|httpSession
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Access Denied."
argument_list|)
throw|;
block|}
name|ReservationForm
name|frm
init|=
operator|(
name|ReservationForm
operator|)
name|form
decl_stmt|;
comment|// Get operation
name|String
name|op
init|=
operator|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"op"
argument_list|)
operator|==
literal|null
operator|)
condition|?
operator|(
name|frm
operator|.
name|getOp
argument_list|()
operator|==
literal|null
operator|||
name|frm
operator|.
name|getOp
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
condition|?
operator|(
name|request
operator|.
name|getAttribute
argument_list|(
literal|"op"
argument_list|)
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|request
operator|.
name|getAttribute
argument_list|(
literal|"op"
argument_list|)
operator|.
name|toString
argument_list|()
else|:
name|frm
operator|.
name|getOp
argument_list|()
else|:
name|request
operator|.
name|getParameter
argument_list|(
literal|"op"
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|==
literal|null
operator|||
name|op
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Invalid operation"
argument_list|)
throw|;
name|frm
operator|.
name|setOp
argument_list|(
name|op
argument_list|)
expr_stmt|;
comment|// Set labels
if|if
condition|(
name|frm
operator|.
name|getOwnerName
argument_list|()
operator|==
literal|null
condition|)
name|frm
operator|.
name|setOwnerName
argument_list|(
operator|(
name|String
operator|)
name|request
operator|.
name|getAttribute
argument_list|(
literal|"ownerName"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|frm
operator|.
name|getOwnerTypeLabel
argument_list|()
operator|==
literal|null
condition|)
name|frm
operator|.
name|setOwnerTypeLabel
argument_list|(
operator|(
name|String
operator|)
name|request
operator|.
name|getAttribute
argument_list|(
literal|"ownerTypeLabel"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|frm
operator|.
name|getIoLimit
argument_list|()
operator|==
literal|null
condition|)
name|frm
operator|.
name|setIoLimit
argument_list|(
operator|(
name|String
operator|)
name|request
operator|.
name|getAttribute
argument_list|(
literal|"ioLimit"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|frm
operator|.
name|getCrsLimit
argument_list|()
operator|==
literal|null
condition|)
name|frm
operator|.
name|setCrsLimit
argument_list|(
operator|(
name|String
operator|)
name|request
operator|.
name|getAttribute
argument_list|(
literal|"crsLimit"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|frm
operator|.
name|getUnlimited
argument_list|()
operator|==
literal|null
condition|)
name|frm
operator|.
name|setUnlimited
argument_list|(
operator|(
name|Boolean
operator|)
name|request
operator|.
name|getAttribute
argument_list|(
literal|"unlimited"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set up lists
name|LookupTables
operator|.
name|setupReservationPriorities
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|LookupTables
operator|.
name|setupReservationTypes
argument_list|(
name|request
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|""
argument_list|)
return|;
block|}
comment|/**      * Get the list element number of the row to be deleted      * @param request      * @return -1 if the id could not be determined, row number otherwise      */
specifier|public
name|int
name|getDeletedRowId
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|int
name|deleteId
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|deleteId
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"deleteId"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|deleteId
operator|=
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|deleteId
return|;
block|}
comment|/**      * Get owner object      * @param frm      * @return Owner Object, null if owner object not found      */
specifier|public
name|Object
name|getOwner
parameter_list|(
name|ReservationForm
name|frm
parameter_list|)
block|{
name|String
name|ownerType
init|=
name|frm
operator|.
name|getOwnerType
argument_list|()
decl_stmt|;
name|Long
name|ownerId
init|=
name|frm
operator|.
name|getOwnerId
argument_list|()
decl_stmt|;
name|Object
name|owner
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ownerType
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|RESV_OWNER_IO
argument_list|)
condition|)
block|{
name|owner
operator|=
operator|new
name|InstructionalOfferingDAO
argument_list|()
operator|.
name|get
argument_list|(
name|ownerId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ownerType
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|RESV_OWNER_CONFIG
argument_list|)
condition|)
block|{
name|owner
operator|=
operator|new
name|InstrOfferingConfigDAO
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|ownerId
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ownerType
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|RESV_OWNER_CLASS
argument_list|)
condition|)
block|{
name|owner
operator|=
operator|new
name|Class_DAO
argument_list|()
operator|.
name|get
argument_list|(
name|ownerId
argument_list|)
expr_stmt|;
block|}
comment|//TODO Reservations - functionality to be removed later
if|if
condition|(
name|ownerType
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|RESV_OWNER_COURSE
argument_list|)
condition|)
block|{
name|owner
operator|=
operator|new
name|CourseOfferingDAO
argument_list|()
operator|.
name|get
argument_list|(
name|ownerId
argument_list|)
expr_stmt|;
block|}
comment|//End Bypass
return|return
name|owner
return|;
block|}
comment|/**      * Get the reservations for the specified reservation class      * @param frm      * @param c Of the form - xxxReservation.class      * @return Reservations of the class specified, null if no reservations found      * @throws Exception      */
specifier|public
name|Collection
name|getReservations
parameter_list|(
name|ReservationForm
name|frm
parameter_list|,
name|Class
name|c
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|ownerType
init|=
name|frm
operator|.
name|getOwnerType
argument_list|()
decl_stmt|;
name|Long
name|ownerId
init|=
name|frm
operator|.
name|getOwnerId
argument_list|()
decl_stmt|;
name|Set
name|resv
init|=
literal|null
decl_stmt|;
comment|// Instructional Offering Reservations
if|if
condition|(
name|ownerType
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|RESV_OWNER_IO
argument_list|)
condition|)
block|{
name|InstructionalOffering
name|io
init|=
operator|new
name|InstructionalOfferingDAO
argument_list|()
operator|.
name|get
argument_list|(
name|ownerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|IndividualReservation
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
name|resv
operator|=
name|io
operator|.
name|getIndividualReservations
argument_list|()
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|CourseOfferingReservation
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
name|resv
operator|=
name|io
operator|.
name|getCourseReservations
argument_list|()
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|StudentGroupReservation
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
name|resv
operator|=
name|io
operator|.
name|getStudentGroupReservations
argument_list|()
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|AcadAreaReservation
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
name|resv
operator|=
name|io
operator|.
name|getAcadAreaReservations
argument_list|()
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|PosReservation
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
name|resv
operator|=
name|io
operator|.
name|getPosReservations
argument_list|()
expr_stmt|;
block|}
comment|// Configuration Reservations
if|if
condition|(
name|ownerType
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|RESV_OWNER_CONFIG
argument_list|)
condition|)
block|{
name|InstrOfferingConfig
name|config
init|=
operator|new
name|InstrOfferingConfigDAO
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|ownerId
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|IndividualReservation
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
name|resv
operator|=
name|config
operator|.
name|getIndividualReservations
argument_list|()
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|CourseOfferingReservation
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
name|resv
operator|=
name|config
operator|.
name|getCourseReservations
argument_list|()
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|StudentGroupReservation
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
name|resv
operator|=
name|config
operator|.
name|getStudentGroupReservations
argument_list|()
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|AcadAreaReservation
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
name|resv
operator|=
name|config
operator|.
name|getAcadAreaReservations
argument_list|()
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|PosReservation
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
name|resv
operator|=
name|config
operator|.
name|getPosReservations
argument_list|()
expr_stmt|;
block|}
comment|// Class Reservations
if|if
condition|(
name|ownerType
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|RESV_OWNER_CLASS
argument_list|)
condition|)
block|{
name|Class_
name|cls
init|=
operator|new
name|Class_DAO
argument_list|()
operator|.
name|get
argument_list|(
name|ownerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|IndividualReservation
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
name|resv
operator|=
name|cls
operator|.
name|getIndividualReservations
argument_list|()
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|CourseOfferingReservation
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
name|resv
operator|=
name|cls
operator|.
name|getCourseReservations
argument_list|()
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|StudentGroupReservation
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
name|resv
operator|=
name|cls
operator|.
name|getStudentGroupReservations
argument_list|()
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|AcadAreaReservation
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
name|resv
operator|=
name|cls
operator|.
name|getAcadAreaReservations
argument_list|()
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|PosReservation
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
name|resv
operator|=
name|cls
operator|.
name|getPosReservations
argument_list|()
expr_stmt|;
block|}
comment|//TODO Reservations - functionality to be removed later
comment|// Course Reservations
if|if
condition|(
name|ownerType
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|RESV_OWNER_COURSE
argument_list|)
condition|)
block|{
name|CourseOffering
name|co
init|=
operator|new
name|CourseOfferingDAO
argument_list|()
operator|.
name|get
argument_list|(
name|ownerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|AcadAreaReservation
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
name|resv
operator|=
name|co
operator|.
name|getAcadAreaReservations
argument_list|()
expr_stmt|;
block|}
comment|// End Bypass
return|return
name|resv
return|;
block|}
specifier|public
name|void
name|addChange
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|Object
name|ownerObj
parameter_list|)
block|{
name|SubjectArea
name|subjArea
init|=
literal|null
decl_stmt|;
name|Department
name|dept
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ownerObj
operator|instanceof
name|Class_
condition|)
block|{
name|subjArea
operator|=
operator|(
operator|(
name|Class_
operator|)
name|ownerObj
operator|)
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
expr_stmt|;
name|dept
operator|=
operator|(
operator|(
name|Class_
operator|)
name|ownerObj
operator|)
operator|.
name|getManagingDept
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|ownerObj
operator|instanceof
name|CourseOffering
condition|)
block|{
name|subjArea
operator|=
operator|(
operator|(
name|CourseOffering
operator|)
name|ownerObj
operator|)
operator|.
name|getSubjectArea
argument_list|()
expr_stmt|;
name|dept
operator|=
name|subjArea
operator|.
name|getDepartment
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|ownerObj
operator|instanceof
name|InstrOfferingConfig
condition|)
block|{
name|subjArea
operator|=
operator|(
operator|(
name|InstrOfferingConfig
operator|)
name|ownerObj
operator|)
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
expr_stmt|;
name|dept
operator|=
name|subjArea
operator|.
name|getDepartment
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|ownerObj
operator|instanceof
name|InstructionalOffering
condition|)
block|{
name|subjArea
operator|=
operator|(
operator|(
name|InstructionalOffering
operator|)
name|ownerObj
operator|)
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
expr_stmt|;
name|dept
operator|=
name|subjArea
operator|.
name|getDepartment
argument_list|()
expr_stmt|;
block|}
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|request
argument_list|,
name|ownerObj
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|RESERVATION
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|UPDATE
argument_list|,
name|subjArea
argument_list|,
name|dept
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

