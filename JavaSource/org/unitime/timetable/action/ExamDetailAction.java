begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts2
operator|.
name|convention
operator|.
name|annotation
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts2
operator|.
name|convention
operator|.
name|annotation
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts2
operator|.
name|tiles
operator|.
name|annotation
operator|.
name|TilesDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts2
operator|.
name|tiles
operator|.
name|annotation
operator|.
name|TilesPutAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|WebTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|WebTable
operator|.
name|WebTableLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|messages
operator|.
name|ExaminationMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|CommonValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|UserProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|ExamEditForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentStatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamConflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentAccomodation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExamDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|context
operator|.
name|HttpSessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|WebSolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ExamAssignmentProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignmentInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|LookupTables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|BackTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|ExamDistributionPrefsTableBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|Navigation
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Action
argument_list|(
name|value
operator|=
literal|"examDetail"
argument_list|,
name|results
operator|=
block|{
annotation|@
name|Result
argument_list|(
name|name
operator|=
literal|"showExamDetail"
argument_list|,
name|type
operator|=
literal|"tiles"
argument_list|,
name|location
operator|=
literal|"examDetail.tiles"
argument_list|)
block|,
annotation|@
name|Result
argument_list|(
name|name
operator|=
literal|"addDistributionPrefs"
argument_list|,
name|type
operator|=
literal|"redirect"
argument_list|,
name|location
operator|=
literal|"/examDistributionPrefs.do"
argument_list|,
name|params
operator|=
block|{
literal|"examId"
block|,
literal|"${form.examId}"
block|,
literal|"op"
block|,
literal|"${op}"
block|}
argument_list|)
block|,
annotation|@
name|Result
argument_list|(
name|name
operator|=
literal|"showList"
argument_list|,
name|type
operator|=
literal|"redirect"
argument_list|,
name|location
operator|=
literal|"/examList.action"
argument_list|)
block|}
argument_list|)
annotation|@
name|TilesDefinition
argument_list|(
name|name
operator|=
literal|"examDetail.tiles"
argument_list|,
name|extend
operator|=
literal|"baseLayout"
argument_list|,
name|putAttributes
operator|=
block|{
annotation|@
name|TilesPutAttribute
argument_list|(
name|name
operator|=
literal|"title"
argument_list|,
name|value
operator|=
literal|"Examination Detail"
argument_list|)
block|,
annotation|@
name|TilesPutAttribute
argument_list|(
name|name
operator|=
literal|"body"
argument_list|,
name|value
operator|=
literal|"/user/examDetail.jsp"
argument_list|)
block|,
annotation|@
name|TilesPutAttribute
argument_list|(
name|name
operator|=
literal|"showNavigation"
argument_list|,
name|value
operator|=
literal|"true"
argument_list|)
block|,
annotation|@
name|TilesPutAttribute
argument_list|(
name|name
operator|=
literal|"showSolverWarnings"
argument_list|,
name|value
operator|=
literal|"exams"
argument_list|)
block|}
argument_list|)
specifier|public
class|class
name|ExamDetailAction
extends|extends
name|PreferencesAction2
argument_list|<
name|ExamEditForm
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|2704790729386013602L
decl_stmt|;
specifier|protected
specifier|static
name|GwtConstants
name|CONSTANTS
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|ExaminationMessages
name|EXMSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|ExaminationMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|String
name|examId
init|=
literal|null
decl_stmt|;
specifier|protected
name|String
name|op2
init|=
literal|null
decl_stmt|;
specifier|public
name|String
name|getExamId
parameter_list|()
block|{
return|return
name|examId
return|;
block|}
specifier|public
name|void
name|setExamId
parameter_list|(
name|String
name|examId
parameter_list|)
block|{
name|this
operator|.
name|examId
operator|=
name|examId
expr_stmt|;
block|}
specifier|public
name|String
name|getOp2
parameter_list|()
block|{
return|return
name|op2
return|;
block|}
specifier|public
name|void
name|setOp2
parameter_list|(
name|String
name|op2
parameter_list|)
block|{
name|this
operator|.
name|op2
operator|=
name|op2
expr_stmt|;
block|}
specifier|public
name|String
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|form
operator|==
literal|null
condition|)
name|form
operator|=
operator|new
name|ExamEditForm
argument_list|()
expr_stmt|;
name|super
operator|.
name|execute
argument_list|()
expr_stmt|;
comment|//Read parameters
if|if
condition|(
name|examId
operator|==
literal|null
operator|&&
name|request
operator|.
name|getAttribute
argument_list|(
literal|"examId"
argument_list|)
operator|!=
literal|null
condition|)
name|examId
operator|=
operator|(
name|String
operator|)
name|request
operator|.
name|getAttribute
argument_list|(
literal|"examId"
argument_list|)
expr_stmt|;
if|if
condition|(
name|op
operator|==
literal|null
condition|)
name|op
operator|=
name|form
operator|.
name|getOp
argument_list|()
expr_stmt|;
if|if
condition|(
name|op2
operator|!=
literal|null
operator|&&
operator|!
name|op2
operator|.
name|isEmpty
argument_list|()
condition|)
name|op
operator|=
name|op2
expr_stmt|;
comment|//Check op exists
comment|// if (op==null) throw new Exception("Null Operation not supported.");
comment|// Read exam id from form
if|if
condition|(
literal|"Edit"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
literal|"Clone"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
literal|"Add Distribution Preference"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
literal|"Next"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
literal|"Previous"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
literal|"Delete"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|examId
operator|=
name|form
operator|.
name|getExamId
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|EXMSG
operator|.
name|accessExamEdit
argument_list|()
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
name|EXMSG
operator|.
name|accessExamClone
argument_list|()
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
name|EXMSG
operator|.
name|accessExamAddDistributionPref
argument_list|()
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
name|EXMSG
operator|.
name|accessExamNext
argument_list|()
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
name|EXMSG
operator|.
name|accessExamPrevious
argument_list|()
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
name|EXMSG
operator|.
name|accessExamDelete
argument_list|()
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|examId
operator|=
name|form
operator|.
name|getExamId
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|form
operator|.
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|getAttribute
argument_list|(
literal|"Exam.Type"
argument_list|)
operator|!=
literal|null
condition|)
name|form
operator|.
name|setExamType
argument_list|(
operator|(
name|Long
operator|)
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|getAttribute
argument_list|(
literal|"Exam.Type"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|form
operator|.
name|getExamType
argument_list|()
operator|==
literal|null
condition|)
block|{
name|List
argument_list|<
name|ExamType
argument_list|>
name|types
init|=
name|ExamType
operator|.
name|findAllUsedApplicable
argument_list|(
name|HttpSessionContext
operator|.
name|getSessionContext
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|getServletContext
argument_list|()
argument_list|)
operator|.
name|getUser
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ExamEdit
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ExamTimetable
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|types
operator|.
name|isEmpty
argument_list|()
condition|)
name|form
operator|.
name|setExamType
argument_list|(
name|types
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Debug
operator|.
name|debug
argument_list|(
literal|"op: "
operator|+
name|op
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"exam: "
operator|+
name|examId
argument_list|)
expr_stmt|;
comment|//Check exam exists
if|if
condition|(
name|examId
operator|==
literal|null
operator|||
name|examId
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
name|EXMSG
operator|.
name|errorNoExamId
argument_list|()
argument_list|)
throw|;
name|boolean
name|timeVertical
init|=
name|CommonValues
operator|.
name|VerticalGrid
operator|.
name|eq
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
name|UserProperty
operator|.
name|GridOrientation
argument_list|)
argument_list|)
decl_stmt|;
name|Exam
name|exam
init|=
operator|new
name|ExamDAO
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|examId
argument_list|)
argument_list|)
decl_stmt|;
comment|//After delete -> one more back
if|if
condition|(
name|exam
operator|==
literal|null
operator|&&
name|BackTracker
operator|.
name|hasBack
argument_list|(
name|request
argument_list|,
literal|1
argument_list|)
condition|)
block|{
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"backType"
argument_list|)
operator|!=
literal|null
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
literal|"backType"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"backType"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"backId"
argument_list|)
operator|!=
literal|null
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
literal|"backId"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"backId"
argument_list|)
argument_list|)
expr_stmt|;
name|BackTracker
operator|.
name|doBack
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|examId
argument_list|,
literal|"Exam"
argument_list|,
name|Right
operator|.
name|ExaminationDetail
argument_list|)
expr_stmt|;
comment|//Edit Information - Redirect to info edit screen
if|if
condition|(
operator|(
literal|"Edit"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
name|EXMSG
operator|.
name|accessExamEdit
argument_list|()
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|)
operator|&&
name|examId
operator|!=
literal|null
operator|&&
name|examId
operator|.
name|trim
argument_list|()
operator|!=
literal|""
condition|)
block|{
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|exam
argument_list|,
name|Right
operator|.
name|ExaminationEdit
argument_list|)
expr_stmt|;
name|response
operator|.
name|sendRedirect
argument_list|(
name|response
operator|.
name|encodeURL
argument_list|(
literal|"examEdit.action?examId="
operator|+
name|examId
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|(
literal|"Clone"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
name|EXMSG
operator|.
name|accessExamClone
argument_list|()
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|)
operator|&&
name|examId
operator|!=
literal|null
operator|&&
name|examId
operator|.
name|trim
argument_list|()
operator|!=
literal|""
condition|)
block|{
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|exam
argument_list|,
name|Right
operator|.
name|ExaminationClone
argument_list|)
expr_stmt|;
name|response
operator|.
name|sendRedirect
argument_list|(
name|response
operator|.
name|encodeURL
argument_list|(
literal|"examEdit.action?examId="
operator|+
name|examId
operator|+
literal|"&clone=true"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
literal|"Next"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
name|EXMSG
operator|.
name|accessExamNext
argument_list|()
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|response
operator|.
name|sendRedirect
argument_list|(
name|response
operator|.
name|encodeURL
argument_list|(
literal|"examDetail.action?examId="
operator|+
name|form
operator|.
name|getNextId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
literal|"Previous"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
name|EXMSG
operator|.
name|accessExamPrevious
argument_list|()
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|response
operator|.
name|sendRedirect
argument_list|(
name|response
operator|.
name|encodeURL
argument_list|(
literal|"examDetail.action?examId="
operator|+
name|form
operator|.
name|getPreviousId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
literal|"Delete"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
name|EXMSG
operator|.
name|accessExamDelete
argument_list|()
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|exam
argument_list|,
name|Right
operator|.
name|ExaminationDelete
argument_list|)
expr_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|sessionContext
argument_list|,
name|exam
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|EXAM_EDIT
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|DELETE
argument_list|,
name|exam
operator|.
name|firstSubjectArea
argument_list|()
argument_list|,
name|exam
operator|.
name|firstDepartment
argument_list|()
argument_list|)
expr_stmt|;
name|exam
operator|.
name|deleteDependentObjects
argument_list|(
name|hibSession
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|ExamConflict
argument_list|>
name|j
init|=
name|exam
operator|.
name|getConflicts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamConflict
name|conf
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Exam
argument_list|>
name|i
init|=
name|conf
operator|.
name|getExams
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|x
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|x
operator|.
name|equals
argument_list|(
name|exam
argument_list|)
condition|)
name|x
operator|.
name|getConflicts
argument_list|()
operator|.
name|remove
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|delete
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|j
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|hibSession
operator|.
name|delete
argument_list|(
name|exam
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
if|if
condition|(
name|BackTracker
operator|.
name|hasBack
argument_list|(
name|request
argument_list|,
literal|1
argument_list|)
condition|)
block|{
name|request
operator|.
name|setAttribute
argument_list|(
literal|"backType"
argument_list|,
literal|"Exam"
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"backId"
argument_list|,
literal|"-1"
argument_list|)
expr_stmt|;
name|BackTracker
operator|.
name|doBack
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
literal|"showList"
return|;
block|}
comment|// Add Distribution Preference - Redirect to dist prefs screen
if|if
condition|(
literal|"Add Distribution Preference"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
name|EXMSG
operator|.
name|accessExamAddDistributionPref
argument_list|()
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|exam
argument_list|,
name|Right
operator|.
name|DistributionPreferenceExam
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"examId"
argument_list|,
name|examId
argument_list|)
expr_stmt|;
return|return
literal|"addDistributionPrefs"
return|;
block|}
comment|// Load form attributes that are constant
name|doLoad
argument_list|(
name|exam
argument_list|)
expr_stmt|;
comment|// Display distribution Prefs
name|ExamDistributionPrefsTableBuilder
name|tbl
init|=
operator|new
name|ExamDistributionPrefsTableBuilder
argument_list|()
decl_stmt|;
name|String
name|html
init|=
name|tbl
operator|.
name|getDistPrefsTable
argument_list|(
name|request
argument_list|,
name|sessionContext
argument_list|,
name|exam
argument_list|)
decl_stmt|;
if|if
condition|(
name|html
operator|!=
literal|null
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
name|DistributionPref
operator|.
name|DIST_PREF_REQUEST_ATTR
argument_list|,
name|html
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|exam
operator|.
name|getOwners
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|WebTable
name|table
init|=
operator|new
name|WebTable
argument_list|(
literal|7
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|EXMSG
operator|.
name|colExamOwnerObject
argument_list|()
block|,
name|EXMSG
operator|.
name|colExamOwnerType
argument_list|()
block|,
name|EXMSG
operator|.
name|colExamOwnerTitle
argument_list|()
block|,
name|EXMSG
operator|.
name|colExamOwnerManager
argument_list|()
block|,
name|EXMSG
operator|.
name|colExamOwnerStudents
argument_list|()
block|,
name|EXMSG
operator|.
name|colExamOwnerLimit
argument_list|()
block|,
name|EXMSG
operator|.
name|colExamOwnerAssignment
argument_list|()
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"center"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"left"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|TreeSet
argument_list|(
name|exam
operator|.
name|getOwners
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamOwner
name|owner
init|=
operator|(
name|ExamOwner
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|onclick
init|=
literal|null
decl_stmt|,
name|name
init|=
literal|null
decl_stmt|,
name|type
init|=
literal|null
decl_stmt|,
name|students
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|owner
operator|.
name|countStudents
argument_list|()
argument_list|)
decl_stmt|,
name|limit
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|owner
operator|.
name|getLimit
argument_list|()
argument_list|)
decl_stmt|,
name|manager
init|=
literal|null
decl_stmt|,
name|assignment
init|=
literal|null
decl_stmt|,
name|title
init|=
literal|null
decl_stmt|;
name|String
name|rowStyle
init|=
literal|null
decl_stmt|,
name|rowTitle
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|owner
operator|.
name|getOwnerType
argument_list|()
condition|)
block|{
case|case
name|ExamOwner
operator|.
name|sOwnerTypeClass
case|:
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|owner
operator|.
name|getOwnerObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|clazz
argument_list|,
name|Right
operator|.
name|ClassDetail
argument_list|)
condition|)
name|onclick
operator|=
literal|"onClick=\"document.location='classDetail.do?cid="
operator|+
name|clazz
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"';\""
expr_stmt|;
name|name
operator|=
name|owner
operator|.
name|getLabel
argument_list|()
expr_stmt|;
comment|//clazz.getClassLabel();
name|type
operator|=
name|EXMSG
operator|.
name|examTypeClass
argument_list|()
expr_stmt|;
name|manager
operator|=
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getShortLabel
argument_list|()
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
operator|!=
literal|null
condition|)
name|assignment
operator|=
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
operator|.
name|getPlacement
argument_list|()
operator|.
name|getLongName
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
expr_stmt|;
name|title
operator|=
name|clazz
operator|.
name|getSchedulePrintNote
argument_list|()
expr_stmt|;
if|if
condition|(
name|title
operator|==
literal|null
operator|||
name|title
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|title
operator|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getTitle
argument_list|()
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
name|rowStyle
operator|=
literal|"color: gray; font-style: italic;"
expr_stmt|;
name|rowTitle
operator|=
name|MSG
operator|.
name|classNoteCancelled
argument_list|(
name|clazz
operator|.
name|getClassLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ExamOwner
operator|.
name|sOwnerTypeConfig
case|:
name|InstrOfferingConfig
name|config
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|owner
operator|.
name|getOwnerObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|config
operator|.
name|getInstructionalOffering
argument_list|()
argument_list|,
name|Right
operator|.
name|InstructionalOfferingDetail
argument_list|)
condition|)
name|onclick
operator|=
literal|"onClick=\"document.location='instructionalOfferingDetail.do?io="
operator|+
name|config
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"';\""
expr_stmt|;
empty_stmt|;
name|name
operator|=
name|owner
operator|.
name|getLabel
argument_list|()
expr_stmt|;
comment|//config.getCourseName()+" ["+config.getName()+"]";
name|type
operator|=
name|EXMSG
operator|.
name|examTypeConfig
argument_list|()
expr_stmt|;
name|manager
operator|=
name|config
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getDepartment
argument_list|()
operator|.
name|getShortLabel
argument_list|()
expr_stmt|;
name|title
operator|=
name|config
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getTitle
argument_list|()
expr_stmt|;
break|break;
case|case
name|ExamOwner
operator|.
name|sOwnerTypeOffering
case|:
name|InstructionalOffering
name|offering
init|=
operator|(
name|InstructionalOffering
operator|)
name|owner
operator|.
name|getOwnerObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|offering
argument_list|,
name|Right
operator|.
name|InstructionalOfferingDetail
argument_list|)
condition|)
name|onclick
operator|=
literal|"onClick=\"document.location='instructionalOfferingDetail.do?io="
operator|+
name|offering
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"';\""
expr_stmt|;
empty_stmt|;
name|name
operator|=
name|owner
operator|.
name|getLabel
argument_list|()
expr_stmt|;
comment|//offering.getCourseName();
name|type
operator|=
name|EXMSG
operator|.
name|examTypeOffering
argument_list|()
expr_stmt|;
name|manager
operator|=
name|offering
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getDepartment
argument_list|()
operator|.
name|getShortLabel
argument_list|()
expr_stmt|;
name|title
operator|=
name|offering
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getTitle
argument_list|()
expr_stmt|;
break|break;
case|case
name|ExamOwner
operator|.
name|sOwnerTypeCourse
case|:
name|CourseOffering
name|course
init|=
operator|(
name|CourseOffering
operator|)
name|owner
operator|.
name|getOwnerObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|course
operator|.
name|getInstructionalOffering
argument_list|()
argument_list|,
name|Right
operator|.
name|InstructionalOfferingDetail
argument_list|)
condition|)
name|onclick
operator|=
literal|"onClick=\"document.location='instructionalOfferingDetail.do?io="
operator|+
name|course
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"';\""
expr_stmt|;
empty_stmt|;
name|name
operator|=
name|owner
operator|.
name|getLabel
argument_list|()
expr_stmt|;
comment|//course.getCourseName();
name|type
operator|=
name|EXMSG
operator|.
name|examTypeCourse
argument_list|()
expr_stmt|;
name|manager
operator|=
name|course
operator|.
name|getDepartment
argument_list|()
operator|.
name|getShortLabel
argument_list|()
expr_stmt|;
name|title
operator|=
name|course
operator|.
name|getTitle
argument_list|()
expr_stmt|;
break|break;
block|}
name|WebTableLine
name|line
init|=
name|table
operator|.
name|addLine
argument_list|(
name|onclick
argument_list|,
operator|new
name|String
index|[]
block|{
name|name
block|,
name|type
block|,
name|title
block|,
name|manager
block|,
name|students
block|,
name|limit
block|,
name|assignment
block|}
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|rowStyle
operator|!=
literal|null
condition|)
name|line
operator|.
name|setStyle
argument_list|(
name|rowStyle
argument_list|)
expr_stmt|;
if|if
condition|(
name|rowTitle
operator|!=
literal|null
condition|)
name|line
operator|.
name|setTitle
argument_list|(
name|rowTitle
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|setAttribute
argument_list|(
literal|"table"
argument_list|,
name|table
operator|.
name|printTable
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ExamAssignmentInfo
name|ea
init|=
literal|null
decl_stmt|;
name|ExamAssignmentProxy
name|examAssignment
init|=
name|WebSolver
operator|.
name|getExamSolver
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|examAssignment
operator|!=
literal|null
operator|&&
name|examAssignment
operator|.
name|getExamTypeId
argument_list|()
operator|.
name|equals
argument_list|(
name|exam
operator|.
name|getExamType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|ea
operator|=
name|examAssignment
operator|.
name|getAssignmentInfo
argument_list|(
name|exam
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
operator|!=
literal|null
condition|)
name|ea
operator|=
operator|new
name|ExamAssignmentInfo
argument_list|(
name|exam
argument_list|)
expr_stmt|;
if|if
condition|(
name|ea
operator|!=
literal|null
operator|&&
name|ea
operator|.
name|getPeriod
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|assignment
init|=
literal|"<tr><td>"
operator|+
name|EXMSG
operator|.
name|propExamAssignedPeriod
argument_list|()
operator|+
literal|"</td><td>"
operator|+
name|ea
operator|.
name|getPeriodNameWithPref
argument_list|()
operator|+
literal|"</td></tr>"
decl_stmt|;
if|if
condition|(
operator|!
name|ea
operator|.
name|getRooms
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|assignment
operator|+=
literal|"<tr><td>"
operator|+
operator|(
name|ea
operator|.
name|getRooms
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
name|EXMSG
operator|.
name|propExamAssignedRooms
argument_list|()
else|:
name|EXMSG
operator|.
name|propExamAssignedRoom
argument_list|()
operator|)
operator|+
literal|"</td><td>"
expr_stmt|;
name|assignment
operator|+=
name|ea
operator|.
name|getRoomsNameWithPref
argument_list|(
literal|"<br>"
argument_list|)
expr_stmt|;
name|assignment
operator|+=
literal|"</td></tr>"
expr_stmt|;
block|}
if|if
condition|(
name|ea
operator|.
name|getNrDistributionConflicts
argument_list|()
operator|>
literal|0
condition|)
block|{
name|assignment
operator|+=
literal|"<tr><td>"
operator|+
name|EXMSG
operator|.
name|propExamViolatedDistConstraints
argument_list|()
operator|+
literal|"</td><td>"
expr_stmt|;
name|assignment
operator|+=
name|ea
operator|.
name|getDistributionConflictTable
argument_list|()
expr_stmt|;
name|assignment
operator|+=
literal|"</td></tr>"
expr_stmt|;
block|}
if|if
condition|(
name|ea
operator|.
name|getHasConflicts
argument_list|()
condition|)
block|{
name|assignment
operator|+=
literal|"<tr><td>"
operator|+
name|EXMSG
operator|.
name|propExamStudentConflicts
argument_list|()
operator|+
literal|"</td><td>"
expr_stmt|;
name|assignment
operator|+=
name|ea
operator|.
name|getConflictTable
argument_list|()
expr_stmt|;
name|assignment
operator|+=
literal|"</td></tr>"
expr_stmt|;
block|}
if|if
condition|(
name|ea
operator|.
name|getHasInstructorConflicts
argument_list|()
condition|)
block|{
name|assignment
operator|+=
literal|"<tr><td>"
operator|+
name|EXMSG
operator|.
name|propExamInstructorConflicts
argument_list|()
operator|+
literal|"</td><td>"
expr_stmt|;
name|assignment
operator|+=
name|ea
operator|.
name|getInstructorConflictTable
argument_list|()
expr_stmt|;
name|assignment
operator|+=
literal|"</td></tr>"
expr_stmt|;
block|}
name|request
operator|.
name|setAttribute
argument_list|(
literal|"assignment"
argument_list|,
name|assignment
argument_list|)
expr_stmt|;
block|}
name|BackTracker
operator|.
name|markForBack
argument_list|(
name|request
argument_list|,
literal|"examDetail.action?examId="
operator|+
name|examId
argument_list|,
name|EXMSG
operator|.
name|backToExam
argument_list|(
name|form
operator|.
name|getName
argument_list|()
operator|==
literal|null
condition|?
name|form
operator|.
name|getLabel
argument_list|()
operator|.
name|trim
argument_list|()
else|:
name|form
operator|.
name|getName
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Initialize Preferences for initial load
name|form
operator|.
name|setAvailableTimePatterns
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|initPrefs
argument_list|(
name|exam
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|generateExamPeriodGrid
argument_list|(
name|exam
argument_list|,
literal|"init"
argument_list|,
name|timeVertical
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Process Preferences Action
name|processPrefAction
argument_list|()
expr_stmt|;
name|setupInstructors
argument_list|(
name|exam
argument_list|)
expr_stmt|;
name|LookupTables
operator|.
name|setupRooms
argument_list|(
name|request
argument_list|,
name|exam
argument_list|)
expr_stmt|;
comment|// Room Prefs
name|LookupTables
operator|.
name|setupBldgs
argument_list|(
name|request
argument_list|,
name|exam
argument_list|)
expr_stmt|;
comment|// Building Prefs
name|LookupTables
operator|.
name|setupRoomFeatures
argument_list|(
name|request
argument_list|,
name|exam
argument_list|)
expr_stmt|;
comment|// Preference Levels
name|LookupTables
operator|.
name|setupRoomGroups
argument_list|(
name|request
argument_list|,
name|exam
argument_list|)
expr_stmt|;
comment|// Room Groups
name|LookupTables
operator|.
name|setupExamTypes
argument_list|(
name|request
argument_list|,
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ExamTimetable
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ExamView
argument_list|)
expr_stmt|;
return|return
literal|"showExamDetail"
return|;
block|}
specifier|protected
name|void
name|doLoad
parameter_list|(
name|Exam
name|exam
parameter_list|)
block|{
name|form
operator|.
name|setExamId
argument_list|(
name|exam
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|form
operator|.
name|setLabel
argument_list|(
name|exam
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|form
operator|.
name|setName
argument_list|(
name|exam
operator|.
name|generateName
argument_list|()
operator|.
name|equals
argument_list|(
name|exam
operator|.
name|getName
argument_list|()
argument_list|)
condition|?
literal|null
else|:
name|exam
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|form
operator|.
name|setNote
argument_list|(
name|exam
operator|.
name|getNote
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|exam
operator|.
name|getNote
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\n"
argument_list|,
literal|"<br>"
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setLength
argument_list|(
name|exam
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|form
operator|.
name|setSize
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|exam
operator|.
name|getSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setPrintOffset
argument_list|(
name|exam
operator|.
name|getPrintOffset
argument_list|()
operator|==
literal|null
operator|||
name|exam
operator|.
name|getPrintOffset
argument_list|()
operator|==
literal|0
condition|?
literal|null
else|:
operator|(
name|exam
operator|.
name|getPrintOffset
argument_list|()
operator|>
literal|0
condition|?
literal|"+"
else|:
literal|""
operator|)
operator|+
name|exam
operator|.
name|getPrintOffset
argument_list|()
argument_list|)
expr_stmt|;
name|form
operator|.
name|setSeatingType
argument_list|(
name|Exam
operator|.
name|sSeatingTypes
index|[
name|exam
operator|.
name|getSeatingType
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|form
operator|.
name|setMaxNbrRooms
argument_list|(
name|exam
operator|.
name|getMaxNbrRooms
argument_list|()
argument_list|)
expr_stmt|;
name|form
operator|.
name|setExamType
argument_list|(
name|exam
operator|.
name|getExamType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|form
operator|.
name|setAccommodation
argument_list|(
name|StudentAccomodation
operator|.
name|toHtml
argument_list|(
name|StudentAccomodation
operator|.
name|getAccommodations
argument_list|(
name|exam
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|TreeSet
name|instructors
init|=
operator|new
name|TreeSet
argument_list|(
name|exam
operator|.
name|getInstructors
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|instructors
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentalInstructor
name|instr
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|form
operator|.
name|getInstructors
argument_list|()
operator|.
name|add
argument_list|(
name|instr
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Long
name|nextId
init|=
name|Navigation
operator|.
name|getNext
argument_list|(
name|sessionContext
argument_list|,
name|Navigation
operator|.
name|sInstructionalOfferingLevel
argument_list|,
name|exam
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|Long
name|prevId
init|=
name|Navigation
operator|.
name|getPrevious
argument_list|(
name|sessionContext
argument_list|,
name|Navigation
operator|.
name|sInstructionalOfferingLevel
argument_list|,
name|exam
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|form
operator|.
name|setPreviousId
argument_list|(
name|prevId
operator|==
literal|null
condition|?
literal|null
else|:
name|prevId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|form
operator|.
name|setNextId
argument_list|(
name|nextId
operator|==
literal|null
condition|?
literal|null
else|:
name|nextId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ExamPeriod
name|avgPeriod
init|=
name|exam
operator|.
name|getAveragePeriod
argument_list|()
decl_stmt|;
name|form
operator|.
name|setAvgPeriod
argument_list|(
name|avgPeriod
operator|==
literal|null
condition|?
literal|null
else|:
name|avgPeriod
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setupInstructors
parameter_list|(
name|Exam
name|exam
parameter_list|)
throws|throws
name|Exception
block|{
name|List
name|instructors
init|=
name|form
operator|.
name|getInstructors
argument_list|()
decl_stmt|;
if|if
condition|(
name|instructors
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return;
name|HashSet
name|deptIds
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exam
operator|.
name|getInstructors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentalInstructor
name|instr
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|deptIds
operator|.
name|add
argument_list|(
name|instr
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|exam
operator|.
name|getOwners
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamOwner
name|own
init|=
operator|(
name|ExamOwner
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|deptIds
operator|.
name|add
argument_list|(
name|own
operator|.
name|getCourse
argument_list|()
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Long
index|[]
name|deptsIdsArray
init|=
operator|new
name|Long
index|[
name|deptIds
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|deptIds
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|deptsIdsArray
index|[
name|idx
operator|++
index|]
operator|=
operator|(
name|Long
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|LookupTables
operator|.
name|setupInstructors
argument_list|(
name|request
argument_list|,
name|sessionContext
argument_list|,
name|deptsIdsArray
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

