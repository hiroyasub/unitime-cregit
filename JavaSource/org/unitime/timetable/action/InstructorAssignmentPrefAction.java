begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionRedirect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|util
operator|.
name|MessageResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|messages
operator|.
name|CourseMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|UserProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|InstructorEditForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructorAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Preference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentalInstructorDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|LookupTables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|BackTracker
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"/instructorAssignmentPref"
argument_list|)
specifier|public
class|class
name|InstructorAssignmentPrefAction
extends|extends
name|PreferencesAction
block|{
specifier|protected
specifier|final
specifier|static
name|CourseMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|CourseMessages
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Autowired
name|SessionContext
name|sessionContext
decl_stmt|;
comment|// --------------------------------------------------------- Instance Variables
comment|// --------------------------------------------------------- Methods
comment|/**  	 * Method execute 	 * @param mapping 	 * @param form 	 * @param request 	 * @param response 	 * @return ActionForward 	 */
specifier|public
name|ActionForward
name|execute
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
comment|// Set common lookup tables
name|super
operator|.
name|execute
argument_list|(
name|mapping
argument_list|,
name|form
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|InstructorEditForm
name|frm
init|=
operator|(
name|InstructorEditForm
operator|)
name|form
decl_stmt|;
name|MessageResources
name|rsc
init|=
name|getResources
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|ActionMessages
name|errors
init|=
operator|new
name|ActionMessages
argument_list|()
decl_stmt|;
comment|// Read parameters
name|String
name|instructorId
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"instructorId"
argument_list|)
decl_stmt|;
name|String
name|op
init|=
name|frm
operator|.
name|getOp
argument_list|()
decl_stmt|;
name|String
name|reloadCause
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"reloadCause"
argument_list|)
decl_stmt|;
comment|// Read subpart id from form
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.reload"
argument_list|)
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionAddTimePreference
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionAddDistributionPreference
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionAddCoursePreference
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionUpdatePreferences
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionBackToDetail
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionNextInstructor
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionPreviousInstructor
argument_list|()
argument_list|)
condition|)
block|{
name|instructorId
operator|=
name|frm
operator|.
name|getInstructorId
argument_list|()
expr_stmt|;
block|}
comment|// Determine if initial load
if|if
condition|(
name|op
operator|==
literal|null
operator|||
name|op
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
operator|(
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.reload"
argument_list|)
argument_list|)
operator|&&
operator|(
name|reloadCause
operator|==
literal|null
operator|||
name|reloadCause
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
operator|)
condition|)
block|{
name|op
operator|=
literal|"init"
expr_stmt|;
block|}
comment|// Check op exists
if|if
condition|(
name|op
operator|==
literal|null
operator|||
name|op
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
name|MSG
operator|.
name|exceptionNullOperationNotSupported
argument_list|()
argument_list|)
throw|;
comment|//Check instructor exists
if|if
condition|(
name|instructorId
operator|==
literal|null
operator|||
name|instructorId
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
name|MSG
operator|.
name|exceptionInstructorInfoNotSupplied
argument_list|()
argument_list|)
throw|;
comment|// Set screen name
name|frm
operator|.
name|setScreenName
argument_list|(
literal|"instructorPref"
argument_list|)
expr_stmt|;
comment|// If subpart id is not null - load subpart info
name|DepartmentalInstructorDAO
name|idao
init|=
operator|new
name|DepartmentalInstructorDAO
argument_list|()
decl_stmt|;
name|DepartmentalInstructor
name|inst
init|=
name|idao
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|instructorId
argument_list|)
argument_list|)
decl_stmt|;
name|LookupTables
operator|.
name|setupInstructorDistribTypes
argument_list|(
name|request
argument_list|,
name|sessionContext
argument_list|,
name|inst
argument_list|)
expr_stmt|;
comment|// Check permissions
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|inst
operator|.
name|getDepartment
argument_list|()
argument_list|,
name|Right
operator|.
name|InstructorAssignmentPreferences
argument_list|)
expr_stmt|;
comment|// Cancel - Go back to Instructors Detail Screen
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionBackToDetail
argument_list|()
argument_list|)
operator|&&
name|instructorId
operator|!=
literal|null
operator|&&
operator|!
name|instructorId
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ActionRedirect
name|redirect
init|=
operator|new
name|ActionRedirect
argument_list|(
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showDetail"
argument_list|)
argument_list|)
decl_stmt|;
name|redirect
operator|.
name|addParameter
argument_list|(
literal|"instructorId"
argument_list|,
name|frm
operator|.
name|getInstructorId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|redirect
return|;
block|}
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
literal|"init"
argument_list|)
condition|)
block|{
comment|// Reset form for initial load
name|frm
operator|.
name|reset
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
expr_stmt|;
comment|// Load form attributes
name|doLoad
argument_list|(
name|request
argument_list|,
name|frm
argument_list|,
name|inst
argument_list|,
name|instructorId
argument_list|)
expr_stmt|;
block|}
comment|// Update Preferences for InstructorDept
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionUpdatePreferences
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionNextInstructor
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionPreviousInstructor
argument_list|()
argument_list|)
condition|)
block|{
comment|// Validate input prefs
name|errors
operator|=
name|frm
operator|.
name|validate
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
expr_stmt|;
comment|// No errors - Add to instructorDept and update
if|if
condition|(
name|errors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|doUpdate
argument_list|(
name|frm
argument_list|,
name|request
argument_list|)
expr_stmt|;
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionNextInstructor
argument_list|()
argument_list|)
condition|)
block|{
name|response
operator|.
name|sendRedirect
argument_list|(
name|response
operator|.
name|encodeURL
argument_list|(
literal|"instructorAssignmentPref.do?instructorId="
operator|+
name|frm
operator|.
name|getNextId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionPreviousInstructor
argument_list|()
argument_list|)
condition|)
block|{
name|response
operator|.
name|sendRedirect
argument_list|(
name|response
operator|.
name|encodeURL
argument_list|(
literal|"instructorAssignmentPref.do?instructorId="
operator|+
name|frm
operator|.
name|getPreviousId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|ActionRedirect
name|redirect
init|=
operator|new
name|ActionRedirect
argument_list|(
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showDetail"
argument_list|)
argument_list|)
decl_stmt|;
name|redirect
operator|.
name|addParameter
argument_list|(
literal|"instructorId"
argument_list|,
name|frm
operator|.
name|getInstructorId
argument_list|()
argument_list|)
expr_stmt|;
name|redirect
operator|.
name|addParameter
argument_list|(
literal|"showPrefs"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
return|return
name|redirect
return|;
block|}
else|else
block|{
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Initialize Preferences for initial load
name|Set
name|timePatterns
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|frm
operator|.
name|setAvailableTimePatterns
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
literal|"init"
argument_list|)
condition|)
block|{
name|initPrefs
argument_list|(
name|frm
argument_list|,
name|inst
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|timePatterns
operator|.
name|add
argument_list|(
operator|new
name|TimePattern
argument_list|(
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Process Preferences Action
name|processPrefAction
argument_list|(
name|request
argument_list|,
name|frm
argument_list|,
name|errors
argument_list|)
expr_stmt|;
comment|// Generate Time Pattern Grids
for|for
control|(
name|Preference
name|pref
range|:
name|inst
operator|.
name|getPreferences
argument_list|()
control|)
block|{
if|if
condition|(
name|pref
operator|instanceof
name|TimePref
condition|)
block|{
name|frm
operator|.
name|setAvailability
argument_list|(
operator|(
operator|(
name|TimePref
operator|)
name|pref
operator|)
operator|.
name|getPreference
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|LookupTables
operator|.
name|setupCourses
argument_list|(
name|request
argument_list|,
name|inst
argument_list|)
expr_stmt|;
comment|// Courses
name|LookupTables
operator|.
name|setupInstructorAttributeTypes
argument_list|(
name|request
argument_list|,
name|inst
argument_list|)
expr_stmt|;
name|LookupTables
operator|.
name|setupInstructorAttributes
argument_list|(
name|request
argument_list|,
name|inst
argument_list|)
expr_stmt|;
name|BackTracker
operator|.
name|markForBack
argument_list|(
name|request
argument_list|,
literal|"instructorDetail.do?instructorId="
operator|+
name|frm
operator|.
name|getInstructorId
argument_list|()
argument_list|,
name|MSG
operator|.
name|backInstructor
argument_list|(
name|frm
operator|.
name|getName
argument_list|()
operator|==
literal|null
condition|?
literal|"null"
else|:
name|frm
operator|.
name|getName
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showEdit"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/** 	 * Loads the non-editable instructor info into the form 	 * @param request 	 * @param frm 	 * @param inst 	 * @param instructorId 	 */
specifier|private
name|void
name|doLoad
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|InstructorEditForm
name|frm
parameter_list|,
name|DepartmentalInstructor
name|inst
parameter_list|,
name|String
name|instructorId
parameter_list|)
block|{
comment|// populate form
name|frm
operator|.
name|setInstructorId
argument_list|(
name|instructorId
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"Enabled"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ApplicationProperty
operator|.
name|InstructorUnavailbeDays
operator|.
name|value
argument_list|()
argument_list|)
operator|||
literal|"Assignments"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ApplicationProperty
operator|.
name|InstructorUnavailbeDays
operator|.
name|value
argument_list|()
argument_list|)
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
literal|"UnavailableDays.pattern"
argument_list|,
name|inst
operator|.
name|getUnavailablePatternHtml
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setName
argument_list|(
name|inst
operator|.
name|getName
argument_list|(
name|UserProperty
operator|.
name|NameFormat
operator|.
name|get
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
operator|+
operator|(
name|inst
operator|.
name|getPositionType
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" ("
operator|+
name|inst
operator|.
name|getPositionType
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|")"
operator|)
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setMaxLoad
argument_list|(
name|inst
operator|.
name|getMaxLoad
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|Formats
operator|.
name|getNumberFormat
argument_list|(
literal|"0.##"
argument_list|)
operator|.
name|format
argument_list|(
name|inst
operator|.
name|getMaxLoad
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setTeachingPreference
argument_list|(
name|inst
operator|.
name|getTeachingPreference
argument_list|()
operator|==
literal|null
condition|?
name|PreferenceLevel
operator|.
name|sProhibited
else|:
name|inst
operator|.
name|getTeachingPreference
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|clearAttributes
argument_list|()
expr_stmt|;
for|for
control|(
name|InstructorAttribute
name|attribute
range|:
name|inst
operator|.
name|getAttributes
argument_list|()
control|)
name|frm
operator|.
name|setAttribute
argument_list|(
name|attribute
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|DepartmentalInstructor
name|previous
init|=
name|inst
operator|.
name|getPreviousDepartmentalInstructor
argument_list|(
name|sessionContext
argument_list|,
name|Right
operator|.
name|InstructorAssignmentPreferences
argument_list|)
decl_stmt|;
name|frm
operator|.
name|setPreviousId
argument_list|(
name|previous
operator|==
literal|null
condition|?
literal|null
else|:
name|previous
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|DepartmentalInstructor
name|next
init|=
name|inst
operator|.
name|getNextDepartmentalInstructor
argument_list|(
name|sessionContext
argument_list|,
name|Right
operator|.
name|InstructorAssignmentPreferences
argument_list|)
decl_stmt|;
name|frm
operator|.
name|setNextId
argument_list|(
name|next
operator|==
literal|null
condition|?
literal|null
else|:
name|next
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|doUpdate
parameter_list|(
name|InstructorEditForm
name|frm
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|Exception
block|{
name|DepartmentalInstructorDAO
name|idao
init|=
operator|new
name|DepartmentalInstructorDAO
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|idao
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|DepartmentalInstructor
name|inst
init|=
name|idao
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|frm
operator|.
name|getInstructorId
argument_list|()
argument_list|)
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|frm
operator|.
name|getMaxLoad
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|frm
operator|.
name|getMaxLoad
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|inst
operator|.
name|setMaxLoad
argument_list|(
name|Formats
operator|.
name|getNumberFormat
argument_list|(
literal|"0.##"
argument_list|)
operator|.
name|parse
argument_list|(
name|frm
operator|.
name|getMaxLoad
argument_list|()
argument_list|)
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
block|}
block|}
else|else
block|{
name|inst
operator|.
name|setMaxLoad
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|frm
operator|.
name|getTeachingPreference
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|frm
operator|.
name|getTeachingPreference
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|frm
operator|.
name|getTeachingPreference
argument_list|()
argument_list|)
condition|)
block|{
name|inst
operator|.
name|setTeachingPreference
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|frm
operator|.
name|getTeachingPreference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|inst
operator|.
name|setTeachingPreference
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|InstructorAttribute
name|attribute
range|:
name|inst
operator|.
name|getDepartment
argument_list|()
operator|.
name|getAvailableAttributes
argument_list|()
control|)
block|{
if|if
condition|(
name|frm
operator|.
name|getAttribute
argument_list|(
name|attribute
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|inst
operator|.
name|getAttributes
argument_list|()
operator|.
name|contains
argument_list|(
name|attribute
argument_list|)
condition|)
name|inst
operator|.
name|getAttributes
argument_list|()
operator|.
name|add
argument_list|(
name|attribute
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|inst
operator|.
name|getAttributes
argument_list|()
operator|.
name|contains
argument_list|(
name|attribute
argument_list|)
condition|)
name|inst
operator|.
name|getAttributes
argument_list|()
operator|.
name|remove
argument_list|(
name|attribute
argument_list|)
expr_stmt|;
block|}
block|}
name|super
operator|.
name|doUpdate
argument_list|(
name|request
argument_list|,
name|frm
argument_list|,
name|inst
argument_list|,
name|inst
operator|.
name|getPreferences
argument_list|()
argument_list|,
literal|false
argument_list|,
name|Preference
operator|.
name|Type
operator|.
name|TIME
argument_list|,
name|Preference
operator|.
name|Type
operator|.
name|DISTRIBUTION
argument_list|,
name|Preference
operator|.
name|Type
operator|.
name|COURSE
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"Enabled"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ApplicationProperty
operator|.
name|InstructorUnavailbeDays
operator|.
name|value
argument_list|()
argument_list|)
operator|||
literal|"Assignments"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ApplicationProperty
operator|.
name|InstructorUnavailbeDays
operator|.
name|value
argument_list|()
argument_list|)
condition|)
name|inst
operator|.
name|setUnavailablePatternAndOffset
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|inst
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|sessionContext
argument_list|,
name|inst
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|INSTRUCTOR_ASSIGNMENT_PREF_EDIT
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|UPDATE
argument_list|,
literal|null
argument_list|,
name|inst
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
block|}
throw|throw
name|e
throw|;
block|}
block|}
block|}
end_class

end_unit

