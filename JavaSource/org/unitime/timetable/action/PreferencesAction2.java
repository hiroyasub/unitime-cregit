begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|messages
operator|.
name|CourseMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|UserProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|ExamEditForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|InstructionalOfferingListForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|PreferencesForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Building
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|BuildingPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePatternPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriodPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructorAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructorAttributePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructorCoursePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructorPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|MidtermPeriodPreferenceModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PeriodPreferenceModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Preference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeaturePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomGroupPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|BuildingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DatePatternDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentalInstructorDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DistributionTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExamTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstructorAttributeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|LocationDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|RoomFeatureDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|RoomGroupDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SchedulingSubpartDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|TimePatternDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|rooms
operator|.
name|PeriodPreferencesBackend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ClassAssignmentProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|SolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|WebSolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ExamSolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|interactive
operator|.
name|ClassAssignmentDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|interactive
operator|.
name|Hint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|LookupTables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|NameFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|duration
operator|.
name|DurationModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|RequiredTimeTable
import|;
end_import

begin_comment
comment|/**  * Superclass for implementing Preferences  * @author Heston Fernandes, Tomas Muller, Zuzana Mullerova  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|PreferencesAction2
parameter_list|<
name|T
extends|extends
name|PreferencesForm
parameter_list|>
extends|extends
name|UniTimeAction
argument_list|<
name|T
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1693039471914780672L
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|CourseMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|CourseMessages
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// --------------------------------------------------------- Class Constants
comment|/** Request attribute name for time pattern grid **/
specifier|public
specifier|static
specifier|final
name|String
name|TIME_PATTERN_GRID_ATTR
init|=
literal|"timePatternGrid"
decl_stmt|;
comment|/** Request attribute name for anchor in form **/
specifier|public
specifier|static
specifier|final
name|String
name|HASH_ATTR
init|=
literal|"hash"
decl_stmt|;
comment|/** Anchor names **/
specifier|public
specifier|final
name|String
name|HASH_TIME_PREF
init|=
literal|"TimePref"
decl_stmt|;
specifier|public
specifier|final
name|String
name|HASH_RM_GROUP
init|=
literal|"RoomGroupPref"
decl_stmt|;
specifier|public
specifier|final
name|String
name|HASH_RM_PREF
init|=
literal|"RoomPref"
decl_stmt|;
specifier|public
specifier|final
name|String
name|HASH_RM_FEAT_PREF
init|=
literal|"RoomFeatPref"
decl_stmt|;
specifier|public
specifier|final
name|String
name|HASH_BLDG_PREF
init|=
literal|"BldgPref"
decl_stmt|;
specifier|public
specifier|final
name|String
name|HASH_DIST_PREF
init|=
literal|"DistPref"
decl_stmt|;
specifier|public
specifier|final
name|String
name|HASH_PERIOD_PREF
init|=
literal|"PeriodPref"
decl_stmt|;
specifier|public
specifier|final
name|String
name|HASH_DATE_PATTERN_PREF
init|=
literal|"DatePatternPref"
decl_stmt|;
specifier|public
specifier|final
name|String
name|HASH_COURSE_PREF
init|=
literal|"CoursePref"
decl_stmt|;
specifier|public
specifier|final
name|String
name|HASH_INSTRUCTOR_PREF
init|=
literal|"InstructorPref"
decl_stmt|;
specifier|public
specifier|final
name|String
name|HASH_ATTRIBUTE_PREF
init|=
literal|"AttributePref"
decl_stmt|;
comment|// --------------------------------------------------------- Methods
specifier|public
name|String
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Load Combo Box Lists
name|LookupTables
operator|.
name|setupItypes
argument_list|(
name|request
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Itypes
name|LookupTables
operator|.
name|setupPrefLevels
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|// Preference Levels
return|return
literal|null
return|;
block|}
specifier|protected
name|void
name|processPrefAction
parameter_list|()
block|{
name|String
name|op
init|=
name|form
operator|.
name|getOp
argument_list|()
decl_stmt|;
if|if
condition|(
name|op
operator|==
literal|null
condition|)
return|return;
comment|// Add Room Group row
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionAddRoomGroupPreference
argument_list|()
argument_list|)
condition|)
name|addRoomGroup
argument_list|()
expr_stmt|;
comment|// Add Room Preference row
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionAddRoomPreference
argument_list|()
argument_list|)
condition|)
name|addRoomPref
argument_list|()
expr_stmt|;
comment|// Add Building Preference row
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionAddBuildingPreference
argument_list|()
argument_list|)
condition|)
name|addBldgPref
argument_list|()
expr_stmt|;
comment|// Add Distribution Preference row
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionAddDistributionPreference
argument_list|()
argument_list|)
condition|)
name|addDistPref
argument_list|()
expr_stmt|;
comment|// Add Room Feature Preference row
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionAddRoomFeaturePreference
argument_list|()
argument_list|)
condition|)
name|addRoomFeatPref
argument_list|()
expr_stmt|;
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionAddTimePreference
argument_list|()
argument_list|)
condition|)
name|addTimePattern
argument_list|()
expr_stmt|;
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionAddCoursePreference
argument_list|()
argument_list|)
condition|)
name|addCoursePref
argument_list|()
expr_stmt|;
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionAddInstructorPreference
argument_list|()
argument_list|)
condition|)
name|addInstructorPref
argument_list|()
expr_stmt|;
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionAddAttributePreference
argument_list|()
argument_list|)
condition|)
name|addAttributePref
argument_list|()
expr_stmt|;
comment|// Delete single preference
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionRemoveBuildingPreference
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionRemoveDistributionPreference
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionRemoveRoomFeaturePreference
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionRemoveRoomGroupPreference
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionRemoveRoomPreference
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionRemoveTimePattern
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionRemoveInstructor
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionRemoveCoursePreference
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionRemoveAttributePreference
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionRemoveInstructorPreference
argument_list|()
argument_list|)
condition|)
name|doDelete
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|addRoomGroup
parameter_list|()
block|{
name|List
name|lst
init|=
name|form
operator|.
name|getRoomGroups
argument_list|()
decl_stmt|;
if|if
condition|(
name|form
operator|.
name|checkPrefs
argument_list|(
name|lst
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|PREF_ROWS_ADDED
condition|;
name|i
operator|++
control|)
block|{
name|form
operator|.
name|addToRoomGroups
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|,
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|setAttribute
argument_list|(
name|HASH_ATTR
argument_list|,
name|HASH_RM_GROUP
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addFieldError
argument_list|(
literal|"roomGroup"
argument_list|,
name|MSG
operator|.
name|errorInvalidRoomGroup
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Add a building preference to the list (UI)      * @param request      * @param form      * @param errors      */
specifier|protected
name|void
name|addBldgPref
parameter_list|()
block|{
name|List
name|lst
init|=
name|form
operator|.
name|getBldgPrefs
argument_list|()
decl_stmt|;
if|if
condition|(
name|form
operator|.
name|checkPrefs
argument_list|(
name|lst
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|PREF_ROWS_ADDED
condition|;
name|i
operator|++
control|)
block|{
name|form
operator|.
name|addToBldgPrefs
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|,
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|setAttribute
argument_list|(
name|HASH_ATTR
argument_list|,
name|HASH_BLDG_PREF
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addFieldError
argument_list|(
literal|"bldgPrefs"
argument_list|,
name|MSG
operator|.
name|errorInvalidBuildingPreference
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|addDistPref
parameter_list|()
block|{
name|List
name|lst
init|=
name|form
operator|.
name|getDistPrefs
argument_list|()
decl_stmt|;
if|if
condition|(
name|form
operator|.
name|checkPrefs
argument_list|(
name|lst
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|PREF_ROWS_ADDED
condition|;
name|i
operator|++
control|)
block|{
name|form
operator|.
name|addToDistPrefs
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|,
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|setAttribute
argument_list|(
name|HASH_ATTR
argument_list|,
name|HASH_DIST_PREF
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addFieldError
argument_list|(
literal|"distPrefs"
argument_list|,
name|MSG
operator|.
name|errorInvalidDistributionPreference
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|addCoursePref
parameter_list|()
block|{
name|List
name|lst
init|=
name|form
operator|.
name|getCoursePrefs
argument_list|()
decl_stmt|;
if|if
condition|(
name|form
operator|.
name|checkPrefs
argument_list|(
name|lst
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|PREF_ROWS_ADDED
condition|;
name|i
operator|++
control|)
block|{
name|form
operator|.
name|addToCoursePrefs
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|,
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|setAttribute
argument_list|(
name|HASH_ATTR
argument_list|,
name|HASH_COURSE_PREF
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addFieldError
argument_list|(
literal|"coursePrefs"
argument_list|,
name|MSG
operator|.
name|errorInvalidCoursePreference
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|addInstructorPref
parameter_list|()
block|{
name|List
name|lst
init|=
name|form
operator|.
name|getInstructorPrefs
argument_list|()
decl_stmt|;
if|if
condition|(
name|form
operator|.
name|checkPrefs
argument_list|(
name|lst
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|PREF_ROWS_ADDED
condition|;
name|i
operator|++
control|)
block|{
name|form
operator|.
name|addToInstructorPrefs
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|,
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|setAttribute
argument_list|(
name|HASH_ATTR
argument_list|,
name|HASH_INSTRUCTOR_PREF
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addFieldError
argument_list|(
literal|"instructorPrefs"
argument_list|,
name|MSG
operator|.
name|errorInvalidAttributePreference
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|addAttributePref
parameter_list|()
block|{
name|List
name|lst
init|=
name|form
operator|.
name|getAttributePrefs
argument_list|()
decl_stmt|;
if|if
condition|(
name|form
operator|.
name|checkPrefs
argument_list|(
name|lst
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|PREF_ROWS_ADDED
condition|;
name|i
operator|++
control|)
block|{
name|form
operator|.
name|addToAttributePrefs
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|,
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|setAttribute
argument_list|(
name|HASH_ATTR
argument_list|,
name|HASH_ATTRIBUTE_PREF
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addFieldError
argument_list|(
literal|"attributePrefs"
argument_list|,
name|MSG
operator|.
name|errorInvalidAttributePreference
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Add a room feature preference to the list (UI)      * @param request      * @param form      * @param errors      */
specifier|protected
name|void
name|addRoomFeatPref
parameter_list|()
block|{
name|List
name|lst
init|=
name|form
operator|.
name|getRoomFeaturePrefs
argument_list|()
decl_stmt|;
if|if
condition|(
name|form
operator|.
name|checkPrefs
argument_list|(
name|lst
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|PREF_ROWS_ADDED
condition|;
name|i
operator|++
control|)
block|{
name|form
operator|.
name|addToRoomFeatPrefs
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|,
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|setAttribute
argument_list|(
name|HASH_ATTR
argument_list|,
name|HASH_RM_FEAT_PREF
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addFieldError
argument_list|(
literal|"roomFeaturePrefs"
argument_list|,
name|MSG
operator|.
name|errorInvalidRoomFeaturePreference
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|addTimePattern
parameter_list|()
block|{
if|if
condition|(
literal|"-"
operator|.
name|equals
argument_list|(
name|form
operator|.
name|getTimePattern
argument_list|()
argument_list|)
condition|)
block|{
name|addFieldError
argument_list|(
literal|"timePrefs"
argument_list|,
name|MSG
operator|.
name|errorTimePatternNotSelected
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|form
operator|.
name|getTimePatterns
argument_list|()
operator|==
literal|null
condition|)
name|form
operator|.
name|setTimePatterns
argument_list|(
operator|new
name|Vector
argument_list|()
argument_list|)
expr_stmt|;
name|form
operator|.
name|getTimePatterns
argument_list|()
operator|.
name|add
argument_list|(
name|form
operator|.
name|getTimePattern
argument_list|()
argument_list|)
expr_stmt|;
name|TimePattern
name|tp
init|=
operator|(
operator|new
name|TimePatternDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|form
operator|.
name|getTimePattern
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tp
operator|.
name|getTimePatternModel
argument_list|()
operator|.
name|isExactTime
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|form
operator|.
name|getTimePatterns
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|patternId
init|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|TimePattern
name|tpx
init|=
operator|(
operator|new
name|TimePatternDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|patternId
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tpx
operator|.
name|getTimePatternModel
argument_list|()
operator|.
name|isExactTime
argument_list|()
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|form
operator|.
name|getTimePatterns
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|patternId
init|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|TimePattern
name|tpx
init|=
operator|(
operator|new
name|TimePatternDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|patternId
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tpx
operator|.
name|getTimePatternModel
argument_list|()
operator|.
name|isExactTime
argument_list|()
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|request
operator|.
name|setAttribute
argument_list|(
name|HASH_ATTR
argument_list|,
name|HASH_TIME_PREF
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Add a room preference to the list (UI)      * @param request      * @param form      * @param errors      */
specifier|protected
name|void
name|addRoomPref
parameter_list|()
block|{
name|List
name|lst
init|=
name|form
operator|.
name|getRoomPrefs
argument_list|()
decl_stmt|;
if|if
condition|(
name|form
operator|.
name|checkPrefs
argument_list|(
name|lst
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|PREF_ROWS_ADDED
condition|;
name|i
operator|++
control|)
block|{
name|form
operator|.
name|addToRoomPrefs
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|,
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|setAttribute
argument_list|(
name|HASH_ATTR
argument_list|,
name|HASH_RM_PREF
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addFieldError
argument_list|(
literal|"roomPrefs"
argument_list|,
name|MSG
operator|.
name|errorInvalidRoomPreference
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Redirects to search results screen      * @param request      * @param subpartId      */
specifier|protected
name|void
name|doCancel
parameter_list|(
name|String
name|subpartId
parameter_list|)
block|{
name|SchedulingSubpartDAO
name|sdao
init|=
operator|new
name|SchedulingSubpartDAO
argument_list|()
decl_stmt|;
name|SchedulingSubpart
name|ss
init|=
name|sdao
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|subpartId
argument_list|)
argument_list|)
decl_stmt|;
name|InstructionalOffering
name|io
init|=
name|ss
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
decl_stmt|;
name|CourseOffering
name|co
init|=
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
decl_stmt|;
name|InstructionalOfferingListForm
name|frm2
init|=
operator|new
name|InstructionalOfferingListForm
argument_list|()
decl_stmt|;
name|frm2
operator|.
name|setSubjectAreaIds
argument_list|(
operator|new
name|String
index|[]
block|{
name|co
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|frm2
operator|.
name|setSubjectAreaAbbv
argument_list|(
name|co
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|frm2
operator|.
name|setCourseNbr
argument_list|(
name|co
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|frm2
operator|.
name|setCtrlInstrOfferingId
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|frm2
operator|.
name|setIsControl
argument_list|(
name|co
operator|.
name|isIsControl
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"subjectAreaId"
argument_list|,
name|co
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"instructionalOfferingListForm"
argument_list|,
name|frm2
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|doDelete
parameter_list|()
block|{
name|String
name|deleteType
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"deleteType"
argument_list|)
decl_stmt|;
name|int
name|deleteId
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|deleteId
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"deleteId"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|deleteId
operator|=
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|deleteType
operator|!=
literal|null
operator|&&
name|deleteId
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|deleteType
operator|.
name|equals
argument_list|(
literal|"roomPref"
argument_list|)
condition|)
block|{
name|List
name|lst
init|=
name|form
operator|.
name|getRoomPrefs
argument_list|()
decl_stmt|;
name|List
name|lstL
init|=
name|form
operator|.
name|getRoomPrefLevels
argument_list|()
decl_stmt|;
name|lst
operator|.
name|remove
argument_list|(
name|deleteId
argument_list|)
expr_stmt|;
name|lstL
operator|.
name|remove
argument_list|(
name|deleteId
argument_list|)
expr_stmt|;
name|form
operator|.
name|setRoomPrefs
argument_list|(
name|lst
argument_list|)
expr_stmt|;
name|form
operator|.
name|setRoomPrefLevels
argument_list|(
name|lstL
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|HASH_ATTR
argument_list|,
name|HASH_RM_PREF
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deleteType
operator|.
name|equals
argument_list|(
literal|"rgPref"
argument_list|)
condition|)
block|{
name|List
name|lst
init|=
name|form
operator|.
name|getRoomGroups
argument_list|()
decl_stmt|;
name|List
name|lstL
init|=
name|form
operator|.
name|getRoomGroupLevels
argument_list|()
decl_stmt|;
name|lst
operator|.
name|remove
argument_list|(
name|deleteId
argument_list|)
expr_stmt|;
name|lstL
operator|.
name|remove
argument_list|(
name|deleteId
argument_list|)
expr_stmt|;
name|form
operator|.
name|setRoomGroups
argument_list|(
name|lst
argument_list|)
expr_stmt|;
name|form
operator|.
name|setRoomGroupLevels
argument_list|(
name|lstL
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|HASH_ATTR
argument_list|,
name|HASH_RM_GROUP
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deleteType
operator|.
name|equals
argument_list|(
literal|"bldgPref"
argument_list|)
condition|)
block|{
name|List
name|lst
init|=
name|form
operator|.
name|getBldgPrefs
argument_list|()
decl_stmt|;
name|List
name|lstL
init|=
name|form
operator|.
name|getBldgPrefLevels
argument_list|()
decl_stmt|;
name|lst
operator|.
name|remove
argument_list|(
name|deleteId
argument_list|)
expr_stmt|;
name|lstL
operator|.
name|remove
argument_list|(
name|deleteId
argument_list|)
expr_stmt|;
name|form
operator|.
name|setBldgPrefs
argument_list|(
name|lst
argument_list|)
expr_stmt|;
name|form
operator|.
name|setBldgPrefLevels
argument_list|(
name|lstL
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|HASH_ATTR
argument_list|,
name|HASH_BLDG_PREF
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deleteType
operator|.
name|equals
argument_list|(
literal|"distPref"
argument_list|)
condition|)
block|{
name|List
name|lst
init|=
name|form
operator|.
name|getDistPrefs
argument_list|()
decl_stmt|;
name|List
name|lstL
init|=
name|form
operator|.
name|getDistPrefLevels
argument_list|()
decl_stmt|;
name|lst
operator|.
name|remove
argument_list|(
name|deleteId
argument_list|)
expr_stmt|;
name|lstL
operator|.
name|remove
argument_list|(
name|deleteId
argument_list|)
expr_stmt|;
name|form
operator|.
name|setDistPrefs
argument_list|(
name|lst
argument_list|)
expr_stmt|;
name|form
operator|.
name|setDistPrefLevels
argument_list|(
name|lstL
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|HASH_ATTR
argument_list|,
name|HASH_DIST_PREF
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deleteType
operator|.
name|equals
argument_list|(
literal|"roomFeaturePref"
argument_list|)
condition|)
block|{
name|List
name|lst
init|=
name|form
operator|.
name|getRoomFeaturePrefs
argument_list|()
decl_stmt|;
name|List
name|lstL
init|=
name|form
operator|.
name|getRoomFeaturePrefLevels
argument_list|()
decl_stmt|;
name|lst
operator|.
name|remove
argument_list|(
name|deleteId
argument_list|)
expr_stmt|;
name|lstL
operator|.
name|remove
argument_list|(
name|deleteId
argument_list|)
expr_stmt|;
name|form
operator|.
name|setRoomFeaturePrefs
argument_list|(
name|lst
argument_list|)
expr_stmt|;
name|form
operator|.
name|setRoomFeaturePrefLevels
argument_list|(
name|lstL
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|HASH_ATTR
argument_list|,
name|HASH_RM_FEAT_PREF
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deleteType
operator|.
name|equals
argument_list|(
literal|"timePattern"
argument_list|)
condition|)
block|{
name|List
name|tps
init|=
name|form
operator|.
name|getTimePatterns
argument_list|()
decl_stmt|;
name|tps
operator|.
name|remove
argument_list|(
name|deleteId
argument_list|)
expr_stmt|;
name|form
operator|.
name|setTimePatterns
argument_list|(
name|tps
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|HASH_ATTR
argument_list|,
name|HASH_TIME_PREF
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deleteType
operator|.
name|equals
argument_list|(
literal|"dpPref"
argument_list|)
condition|)
block|{
name|List
name|lst
init|=
name|form
operator|.
name|getDatePatternPrefs
argument_list|()
decl_stmt|;
name|List
name|lstL
init|=
name|form
operator|.
name|getDatePatternPrefLevels
argument_list|()
decl_stmt|;
name|lst
operator|.
name|remove
argument_list|(
name|deleteId
argument_list|)
expr_stmt|;
name|lstL
operator|.
name|remove
argument_list|(
name|deleteId
argument_list|)
expr_stmt|;
name|form
operator|.
name|setDatePatternPrefs
argument_list|(
name|lst
argument_list|)
expr_stmt|;
name|form
operator|.
name|setDatePatternPrefLevels
argument_list|(
name|lstL
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|HASH_ATTR
argument_list|,
name|HASH_RM_GROUP
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deleteType
operator|.
name|equals
argument_list|(
literal|"coursePref"
argument_list|)
condition|)
block|{
name|List
name|lst
init|=
name|form
operator|.
name|getCoursePrefs
argument_list|()
decl_stmt|;
name|List
name|lstL
init|=
name|form
operator|.
name|getCoursePrefLevels
argument_list|()
decl_stmt|;
name|lst
operator|.
name|remove
argument_list|(
name|deleteId
argument_list|)
expr_stmt|;
name|lstL
operator|.
name|remove
argument_list|(
name|deleteId
argument_list|)
expr_stmt|;
name|form
operator|.
name|setCoursePrefs
argument_list|(
name|lst
argument_list|)
expr_stmt|;
name|form
operator|.
name|setCoursePrefLevels
argument_list|(
name|lstL
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|HASH_ATTR
argument_list|,
name|HASH_COURSE_PREF
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deleteType
operator|.
name|equals
argument_list|(
literal|"attributePref"
argument_list|)
condition|)
block|{
name|List
name|lst
init|=
name|form
operator|.
name|getAttributePrefs
argument_list|()
decl_stmt|;
name|List
name|lstL
init|=
name|form
operator|.
name|getAttributePrefLevels
argument_list|()
decl_stmt|;
name|lst
operator|.
name|remove
argument_list|(
name|deleteId
argument_list|)
expr_stmt|;
name|lstL
operator|.
name|remove
argument_list|(
name|deleteId
argument_list|)
expr_stmt|;
name|form
operator|.
name|setAttributePrefs
argument_list|(
name|lst
argument_list|)
expr_stmt|;
name|form
operator|.
name|setAttributePrefLevels
argument_list|(
name|lstL
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|HASH_ATTR
argument_list|,
name|HASH_ATTRIBUTE_PREF
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deleteType
operator|.
name|equals
argument_list|(
literal|"instructorPref"
argument_list|)
condition|)
block|{
name|List
name|lst
init|=
name|form
operator|.
name|getInstructorPrefs
argument_list|()
decl_stmt|;
name|List
name|lstL
init|=
name|form
operator|.
name|getInstructorPrefLevels
argument_list|()
decl_stmt|;
name|lst
operator|.
name|remove
argument_list|(
name|deleteId
argument_list|)
expr_stmt|;
name|lstL
operator|.
name|remove
argument_list|(
name|deleteId
argument_list|)
expr_stmt|;
name|form
operator|.
name|setInstructorPrefs
argument_list|(
name|lst
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|HASH_ATTR
argument_list|,
name|HASH_INSTRUCTOR_PREF
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|doClear
parameter_list|(
name|Set
name|s
parameter_list|,
name|Preference
operator|.
name|Type
modifier|...
name|typesArray
parameter_list|)
block|{
name|int
name|types
init|=
name|Preference
operator|.
name|Type
operator|.
name|toInt
argument_list|(
name|typesArray
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|s
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|p
init|=
operator|(
name|Preference
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|getType
argument_list|()
operator|.
name|in
argument_list|(
name|types
argument_list|)
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|doUpdate
parameter_list|(
name|PreferenceGroup
name|pg
parameter_list|,
name|Set
name|s
parameter_list|,
name|boolean
name|timeVertical
parameter_list|,
name|Preference
operator|.
name|Type
modifier|...
name|typesArray
parameter_list|)
throws|throws
name|Exception
block|{
name|pg
operator|.
name|setPreferences
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|int
name|types
init|=
name|Preference
operator|.
name|Type
operator|.
name|toInt
argument_list|(
name|typesArray
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|s
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|p
init|=
operator|(
name|Preference
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|getType
argument_list|()
operator|.
name|in
argument_list|(
name|types
argument_list|)
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
comment|// Time Prefs
if|if
condition|(
name|Preference
operator|.
name|Type
operator|.
name|TIME
operator|.
name|in
argument_list|(
name|types
argument_list|)
condition|)
block|{
if|if
condition|(
name|pg
operator|instanceof
name|DepartmentalInstructor
condition|)
block|{
if|if
condition|(
name|form
operator|.
name|getAvailability
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
name|form
operator|.
name|getAvailability
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|336
operator|||
name|form
operator|.
name|getAvailability
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|2016
operator|)
condition|)
block|{
name|TimePref
name|tp
init|=
operator|new
name|TimePref
argument_list|()
decl_stmt|;
name|tp
operator|.
name|setOwner
argument_list|(
name|pg
argument_list|)
expr_stmt|;
name|tp
operator|.
name|setPreference
argument_list|(
name|form
operator|.
name|getAvailability
argument_list|()
argument_list|)
expr_stmt|;
name|tp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
argument_list|)
expr_stmt|;
name|tp
operator|.
name|setTimePattern
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|s
operator|.
name|add
argument_list|(
name|tp
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Set
name|parentTimePrefs
init|=
name|pg
operator|.
name|effectivePreferences
argument_list|(
name|TimePref
operator|.
name|class
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|List
name|lst
init|=
name|form
operator|.
name|getTimePatterns
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lst
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
operator|(
name|String
operator|)
name|lst
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|addToTimePref
argument_list|(
name|pg
argument_list|,
name|id
argument_list|,
name|s
argument_list|,
name|i
argument_list|,
name|timeVertical
argument_list|,
name|parentTimePrefs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parentTimePrefs
operator|!=
literal|null
operator|&&
operator|!
name|parentTimePrefs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|parentTimePrefs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePref
name|tp
init|=
operator|(
name|TimePref
operator|)
operator|(
operator|(
name|TimePref
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|clone
argument_list|()
decl_stmt|;
name|tp
operator|.
name|setOwner
argument_list|(
name|pg
argument_list|)
expr_stmt|;
name|tp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|add
argument_list|(
name|tp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Room Prefs
if|if
condition|(
name|Preference
operator|.
name|Type
operator|.
name|ROOM
operator|.
name|in
argument_list|(
name|types
argument_list|)
condition|)
block|{
name|List
name|lst
init|=
name|form
operator|.
name|getRoomPrefs
argument_list|()
decl_stmt|;
name|List
name|lstL
init|=
name|form
operator|.
name|getRoomPrefLevels
argument_list|()
decl_stmt|;
name|Set
name|parentRoomPrefs
init|=
name|pg
operator|.
name|effectivePreferences
argument_list|(
name|RoomPref
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lst
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
operator|(
name|String
operator|)
name|lst
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
operator|||
name|id
operator|.
name|equals
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
condition|)
continue|continue;
name|String
name|pref
init|=
operator|(
name|String
operator|)
name|lstL
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Room: "
operator|+
name|id
operator|+
literal|": "
operator|+
name|pref
argument_list|)
expr_stmt|;
name|LocationDAO
name|rdao
init|=
operator|new
name|LocationDAO
argument_list|()
decl_stmt|;
name|Location
name|room
init|=
name|rdao
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|RoomPref
name|rp
init|=
operator|new
name|RoomPref
argument_list|()
decl_stmt|;
name|rp
operator|.
name|setOwner
argument_list|(
name|pg
argument_list|)
expr_stmt|;
name|rp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|pref
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rp
operator|.
name|setRoom
argument_list|(
name|room
argument_list|)
expr_stmt|;
name|RoomPref
name|sameParentRp
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|parentRoomPrefs
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomPref
name|p
init|=
operator|(
name|RoomPref
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|isSame
argument_list|(
name|rp
argument_list|)
condition|)
block|{
if|if
condition|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|equals
argument_list|(
name|rp
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
condition|)
name|sameParentRp
operator|=
name|rp
expr_stmt|;
name|j
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|sameParentRp
operator|==
literal|null
condition|)
name|s
operator|.
name|add
argument_list|(
name|rp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parentRoomPrefs
operator|!=
literal|null
operator|&&
operator|!
name|parentRoomPrefs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|parentRoomPrefs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomPref
name|rp
init|=
operator|(
name|RoomPref
operator|)
operator|(
operator|(
name|RoomPref
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|clone
argument_list|()
decl_stmt|;
name|rp
operator|.
name|setOwner
argument_list|(
name|pg
argument_list|)
expr_stmt|;
name|rp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|add
argument_list|(
name|rp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Bldg Prefs
if|if
condition|(
name|Preference
operator|.
name|Type
operator|.
name|BUILDING
operator|.
name|in
argument_list|(
name|types
argument_list|)
condition|)
block|{
name|List
name|lst
init|=
name|form
operator|.
name|getBldgPrefs
argument_list|()
decl_stmt|;
name|List
name|lstL
init|=
name|form
operator|.
name|getBldgPrefLevels
argument_list|()
decl_stmt|;
name|Set
name|parentBuildingPrefs
init|=
name|pg
operator|.
name|effectivePreferences
argument_list|(
name|BuildingPref
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lst
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
operator|(
name|String
operator|)
name|lst
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
operator|||
name|id
operator|.
name|equals
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
condition|)
continue|continue;
name|String
name|pref
init|=
operator|(
name|String
operator|)
name|lstL
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Bldg: "
operator|+
name|id
operator|+
literal|": "
operator|+
name|pref
argument_list|)
expr_stmt|;
name|BuildingDAO
name|bdao
init|=
operator|new
name|BuildingDAO
argument_list|()
decl_stmt|;
name|Building
name|bldg
init|=
name|bdao
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|BuildingPref
name|bp
init|=
operator|new
name|BuildingPref
argument_list|()
decl_stmt|;
name|bp
operator|.
name|setOwner
argument_list|(
name|pg
argument_list|)
expr_stmt|;
name|bp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|pref
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|bp
operator|.
name|setBuilding
argument_list|(
name|bldg
argument_list|)
expr_stmt|;
name|BuildingPref
name|sameParentBp
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|parentBuildingPrefs
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BuildingPref
name|p
init|=
operator|(
name|BuildingPref
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|isSame
argument_list|(
name|bp
argument_list|)
condition|)
block|{
if|if
condition|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|equals
argument_list|(
name|bp
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
condition|)
name|sameParentBp
operator|=
name|bp
expr_stmt|;
name|j
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|sameParentBp
operator|==
literal|null
condition|)
name|s
operator|.
name|add
argument_list|(
name|bp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parentBuildingPrefs
operator|!=
literal|null
operator|&&
operator|!
name|parentBuildingPrefs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|parentBuildingPrefs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BuildingPref
name|bp
init|=
operator|(
name|BuildingPref
operator|)
operator|(
operator|(
name|BuildingPref
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|clone
argument_list|()
decl_stmt|;
name|bp
operator|.
name|setOwner
argument_list|(
name|pg
argument_list|)
expr_stmt|;
name|bp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|add
argument_list|(
name|bp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Dist Prefs
if|if
condition|(
name|Preference
operator|.
name|Type
operator|.
name|DISTRIBUTION
operator|.
name|in
argument_list|(
name|types
argument_list|)
condition|)
block|{
name|List
name|lst
init|=
name|form
operator|.
name|getDistPrefs
argument_list|()
decl_stmt|;
name|List
name|lstL
init|=
name|form
operator|.
name|getDistPrefLevels
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lst
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
operator|(
name|String
operator|)
name|lst
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
operator|||
name|id
operator|.
name|equals
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
condition|)
continue|continue;
name|String
name|pref
init|=
operator|(
name|String
operator|)
name|lstL
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Dist: "
operator|+
name|id
operator|+
literal|": "
operator|+
name|pref
argument_list|)
expr_stmt|;
name|DistributionTypeDAO
name|ddao
init|=
operator|new
name|DistributionTypeDAO
argument_list|()
decl_stmt|;
name|DistributionType
name|dist
init|=
name|ddao
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|DistributionPref
name|dp
init|=
operator|new
name|DistributionPref
argument_list|()
decl_stmt|;
name|dp
operator|.
name|setOwner
argument_list|(
name|pg
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|pref
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setDistributionType
argument_list|(
name|dist
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setStructure
argument_list|(
name|DistributionPref
operator|.
name|Structure
operator|.
name|AllClasses
argument_list|)
expr_stmt|;
name|s
operator|.
name|add
argument_list|(
name|dp
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Period Prefs
if|if
condition|(
name|Preference
operator|.
name|Type
operator|.
name|PERIOD
operator|.
name|in
argument_list|(
name|types
argument_list|)
condition|)
block|{
if|if
condition|(
name|pg
operator|instanceof
name|Exam
condition|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|pg
decl_stmt|;
if|if
condition|(
name|ApplicationProperty
operator|.
name|LegacyPeriodPreferences
operator|.
name|isTrue
argument_list|()
condition|)
block|{
name|ExamSolverProxy
name|solver
init|=
name|WebSolver
operator|.
name|getExamSolver
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|ExamAssignment
name|assignment
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|solver
operator|!=
literal|null
operator|&&
name|exam
operator|!=
literal|null
operator|&&
name|exam
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|assignment
operator|=
name|solver
operator|.
name|getAssignment
argument_list|(
name|exam
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
operator|!=
literal|null
condition|)
name|assignment
operator|=
operator|new
name|ExamAssignment
argument_list|(
name|exam
argument_list|)
expr_stmt|;
if|if
condition|(
name|ExamType
operator|.
name|sExamTypeMidterm
operator|==
name|exam
operator|.
name|getExamType
argument_list|()
operator|.
name|getType
argument_list|()
condition|)
block|{
name|MidtermPeriodPreferenceModel
name|epx
init|=
operator|new
name|MidtermPeriodPreferenceModel
argument_list|(
name|exam
operator|.
name|getSession
argument_list|()
argument_list|,
name|exam
operator|.
name|getExamType
argument_list|()
argument_list|,
name|assignment
argument_list|)
decl_stmt|;
name|epx
operator|.
name|load
argument_list|(
name|exam
argument_list|)
expr_stmt|;
name|epx
operator|.
name|load
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|epx
operator|.
name|save
argument_list|(
name|s
argument_list|,
name|exam
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PeriodPreferenceModel
name|px
init|=
operator|new
name|PeriodPreferenceModel
argument_list|(
name|exam
operator|.
name|getSession
argument_list|()
argument_list|,
name|assignment
argument_list|,
name|exam
operator|.
name|getExamType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|px
operator|.
name|load
argument_list|(
name|exam
argument_list|)
expr_stmt|;
name|RequiredTimeTable
name|rtt
init|=
operator|new
name|RequiredTimeTable
argument_list|(
name|px
argument_list|)
decl_stmt|;
name|rtt
operator|.
name|setName
argument_list|(
literal|"PeriodPref"
argument_list|)
expr_stmt|;
name|rtt
operator|.
name|update
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|px
operator|.
name|save
argument_list|(
name|s
argument_list|,
name|exam
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|String
name|pattern
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"periodPrefs"
argument_list|)
decl_stmt|;
if|if
condition|(
name|pattern
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
operator|>=
literal|0
condition|)
name|pattern
operator|=
name|pattern
operator|.
name|substring
argument_list|(
name|pattern
operator|.
name|lastIndexOf
argument_list|(
literal|':'
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|String
name|defaultPref
init|=
operator|(
name|exam
operator|.
name|getExamType
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|ExamType
operator|.
name|sExamTypeMidterm
condition|?
name|PreferenceLevel
operator|.
name|sProhibited
else|:
name|PreferenceLevel
operator|.
name|sNeutral
operator|)
decl_stmt|;
for|for
control|(
name|ExamPeriod
name|period
range|:
name|ExamPeriod
operator|.
name|findAll
argument_list|(
name|exam
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|exam
operator|.
name|getExamType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
control|)
block|{
name|char
name|ch
init|=
operator|(
name|exam
operator|.
name|getExamType
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|ExamType
operator|.
name|sExamTypeMidterm
condition|?
literal|'P'
else|:
literal|'2'
operator|)
decl_stmt|;
try|try
block|{
name|ch
operator|=
name|pattern
operator|.
name|charAt
argument_list|(
name|idx
operator|++
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|e
parameter_list|)
block|{
block|}
name|String
name|pref
init|=
name|PreferenceLevel
operator|.
name|char2prolog
argument_list|(
name|ch
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|defaultPref
operator|.
name|equals
argument_list|(
name|pref
argument_list|)
condition|)
block|{
name|ExamPeriodPref
name|p
init|=
operator|new
name|ExamPeriodPref
argument_list|()
decl_stmt|;
name|p
operator|.
name|setOwner
argument_list|(
name|pg
argument_list|)
expr_stmt|;
name|p
operator|.
name|setExamPeriod
argument_list|(
name|period
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|pref
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|// Room Feature Prefs
if|if
condition|(
name|Preference
operator|.
name|Type
operator|.
name|ROOM_FEATURE
operator|.
name|in
argument_list|(
name|types
argument_list|)
condition|)
block|{
name|List
name|lst
init|=
name|form
operator|.
name|getRoomFeaturePrefs
argument_list|()
decl_stmt|;
name|List
name|lstL
init|=
name|form
operator|.
name|getRoomFeaturePrefLevels
argument_list|()
decl_stmt|;
name|Set
name|parentRoomFeaturePrefs
init|=
name|pg
operator|.
name|effectivePreferences
argument_list|(
name|RoomFeaturePref
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lst
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
operator|(
name|String
operator|)
name|lst
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
operator|||
name|id
operator|.
name|equals
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
condition|)
continue|continue;
name|String
name|pref
init|=
operator|(
name|String
operator|)
name|lstL
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Room Feat: "
operator|+
name|id
operator|+
literal|": "
operator|+
name|pref
argument_list|)
expr_stmt|;
name|RoomFeatureDAO
name|rfdao
init|=
operator|new
name|RoomFeatureDAO
argument_list|()
decl_stmt|;
name|RoomFeature
name|rf
init|=
name|rfdao
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|RoomFeaturePref
name|rfp
init|=
operator|new
name|RoomFeaturePref
argument_list|()
decl_stmt|;
name|rfp
operator|.
name|setOwner
argument_list|(
name|pg
argument_list|)
expr_stmt|;
name|rfp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|pref
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rfp
operator|.
name|setRoomFeature
argument_list|(
name|rf
argument_list|)
expr_stmt|;
name|RoomFeaturePref
name|sameParentRfp
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|parentRoomFeaturePrefs
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomFeaturePref
name|p
init|=
operator|(
name|RoomFeaturePref
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|isSame
argument_list|(
name|rfp
argument_list|)
condition|)
block|{
if|if
condition|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|equals
argument_list|(
name|rfp
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
condition|)
name|sameParentRfp
operator|=
name|rfp
expr_stmt|;
name|j
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|sameParentRfp
operator|==
literal|null
condition|)
name|s
operator|.
name|add
argument_list|(
name|rfp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parentRoomFeaturePrefs
operator|!=
literal|null
operator|&&
operator|!
name|parentRoomFeaturePrefs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|parentRoomFeaturePrefs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomFeaturePref
name|rp
init|=
operator|(
name|RoomFeaturePref
operator|)
operator|(
operator|(
name|RoomFeaturePref
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|clone
argument_list|()
decl_stmt|;
name|rp
operator|.
name|setOwner
argument_list|(
name|pg
argument_list|)
expr_stmt|;
name|rp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|add
argument_list|(
name|rp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Room Group Prefs
if|if
condition|(
name|Preference
operator|.
name|Type
operator|.
name|ROOM_GROUP
operator|.
name|in
argument_list|(
name|types
argument_list|)
condition|)
block|{
name|List
name|lst
init|=
name|form
operator|.
name|getRoomGroups
argument_list|()
decl_stmt|;
name|List
name|lstL
init|=
name|form
operator|.
name|getRoomGroupLevels
argument_list|()
decl_stmt|;
name|Set
name|parentRoomGroupPrefs
init|=
name|pg
operator|.
name|effectivePreferences
argument_list|(
name|RoomGroupPref
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lst
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
operator|(
name|String
operator|)
name|lst
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
operator|||
name|id
operator|.
name|equals
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
condition|)
continue|continue;
name|String
name|pref
init|=
operator|(
name|String
operator|)
name|lstL
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Roomgr: "
operator|+
name|id
operator|+
literal|": "
operator|+
name|pref
argument_list|)
expr_stmt|;
name|RoomGroupDAO
name|gdao
init|=
operator|new
name|RoomGroupDAO
argument_list|()
decl_stmt|;
name|RoomGroup
name|gr
init|=
name|gdao
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|RoomGroupPref
name|gp
init|=
operator|new
name|RoomGroupPref
argument_list|()
decl_stmt|;
name|gp
operator|.
name|setOwner
argument_list|(
name|pg
argument_list|)
expr_stmt|;
name|gp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|pref
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|gp
operator|.
name|setRoomGroup
argument_list|(
name|gr
argument_list|)
expr_stmt|;
name|RoomGroupPref
name|sameParentGp
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|parentRoomGroupPrefs
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomGroupPref
name|p
init|=
operator|(
name|RoomGroupPref
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|isSame
argument_list|(
name|gp
argument_list|)
condition|)
block|{
if|if
condition|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|equals
argument_list|(
name|gp
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
condition|)
name|sameParentGp
operator|=
name|gp
expr_stmt|;
name|j
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|sameParentGp
operator|==
literal|null
condition|)
name|s
operator|.
name|add
argument_list|(
name|gp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parentRoomGroupPrefs
operator|!=
literal|null
operator|&&
operator|!
name|parentRoomGroupPrefs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|parentRoomGroupPrefs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomGroupPref
name|gp
init|=
operator|(
name|RoomGroupPref
operator|)
operator|(
operator|(
name|RoomGroupPref
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|clone
argument_list|()
decl_stmt|;
name|gp
operator|.
name|setOwner
argument_list|(
name|pg
argument_list|)
expr_stmt|;
name|gp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|add
argument_list|(
name|gp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Date pattern Prefs
if|if
condition|(
name|Preference
operator|.
name|Type
operator|.
name|DATE
operator|.
name|in
argument_list|(
name|types
argument_list|)
condition|)
block|{
name|List
name|lst
init|=
name|form
operator|.
name|getDatePatternPrefs
argument_list|()
decl_stmt|;
name|List
name|lstL
init|=
name|form
operator|.
name|getDatePatternPrefLevels
argument_list|()
decl_stmt|;
name|Set
name|parentDatePatternPrefs
init|=
name|pg
operator|.
name|effectivePreferences
argument_list|(
name|DatePatternPref
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lst
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
operator|(
name|String
operator|)
name|lst
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
operator|||
name|id
operator|.
name|equals
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
operator|||
name|lstL
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|PREF_LEVEL_NEUTRAL
argument_list|)
condition|)
continue|continue;
name|String
name|pref
init|=
operator|(
name|String
operator|)
name|lstL
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Datepattern: "
operator|+
name|id
operator|+
literal|": "
operator|+
name|pref
argument_list|)
expr_stmt|;
name|DatePatternDAO
name|dpdao
init|=
operator|new
name|DatePatternDAO
argument_list|()
decl_stmt|;
name|DatePattern
name|dp
init|=
name|dpdao
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|DatePatternPref
name|dpp
init|=
operator|new
name|DatePatternPref
argument_list|()
decl_stmt|;
name|dpp
operator|.
name|setOwner
argument_list|(
name|pg
argument_list|)
expr_stmt|;
name|dpp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|pref
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|dpp
operator|.
name|setDatePattern
argument_list|(
name|dp
argument_list|)
expr_stmt|;
name|DatePatternPref
name|sameParentDp
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|parentDatePatternPrefs
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DatePatternPref
name|p
init|=
operator|(
name|DatePatternPref
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|isSame
argument_list|(
name|dpp
argument_list|)
condition|)
block|{
if|if
condition|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|equals
argument_list|(
name|dpp
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
condition|)
name|sameParentDp
operator|=
name|dpp
expr_stmt|;
name|j
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|sameParentDp
operator|==
literal|null
condition|)
name|s
operator|.
name|add
argument_list|(
name|dpp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parentDatePatternPrefs
operator|!=
literal|null
operator|&&
operator|!
name|parentDatePatternPrefs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|parentDatePatternPrefs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DatePatternPref
name|gp
init|=
operator|(
name|DatePatternPref
operator|)
operator|(
operator|(
name|DatePatternPref
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|clone
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|pg
operator|.
name|effectiveDatePattern
argument_list|()
operator|.
name|findChildren
argument_list|()
operator|.
name|contains
argument_list|(
name|gp
operator|.
name|getDatePattern
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|gp
operator|.
name|setOwner
argument_list|(
name|pg
argument_list|)
expr_stmt|;
name|gp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|add
argument_list|(
name|gp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Course Prefs
if|if
condition|(
name|Preference
operator|.
name|Type
operator|.
name|COURSE
operator|.
name|in
argument_list|(
name|types
argument_list|)
condition|)
block|{
name|List
name|lst
init|=
name|form
operator|.
name|getCoursePrefs
argument_list|()
decl_stmt|;
name|List
name|lstL
init|=
name|form
operator|.
name|getCoursePrefLevels
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lst
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
operator|(
name|String
operator|)
name|lst
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
operator|||
name|id
operator|.
name|equals
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
condition|)
continue|continue;
name|String
name|pref
init|=
operator|(
name|String
operator|)
name|lstL
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Course: "
operator|+
name|id
operator|+
literal|": "
operator|+
name|pref
argument_list|)
expr_stmt|;
name|CourseOfferingDAO
name|cdao
init|=
operator|new
name|CourseOfferingDAO
argument_list|()
decl_stmt|;
name|CourseOffering
name|course
init|=
name|cdao
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|InstructorCoursePref
name|cp
init|=
operator|new
name|InstructorCoursePref
argument_list|()
decl_stmt|;
name|cp
operator|.
name|setOwner
argument_list|(
name|pg
argument_list|)
expr_stmt|;
name|cp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|pref
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cp
operator|.
name|setCourse
argument_list|(
name|course
argument_list|)
expr_stmt|;
name|s
operator|.
name|add
argument_list|(
name|cp
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Attribute Prefs
if|if
condition|(
name|Preference
operator|.
name|Type
operator|.
name|ATTRIBUTE
operator|.
name|in
argument_list|(
name|types
argument_list|)
condition|)
block|{
name|List
name|lst
init|=
name|form
operator|.
name|getAttributePrefs
argument_list|()
decl_stmt|;
name|List
name|lstL
init|=
name|form
operator|.
name|getAttributePrefLevels
argument_list|()
decl_stmt|;
name|Set
name|parentAttributePrefs
init|=
name|pg
operator|.
name|effectivePreferences
argument_list|(
name|InstructorAttributePref
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lst
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
operator|(
name|String
operator|)
name|lst
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
operator|||
name|id
operator|.
name|equals
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
condition|)
continue|continue;
name|String
name|pref
init|=
operator|(
name|String
operator|)
name|lstL
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Attribute: "
operator|+
name|id
operator|+
literal|": "
operator|+
name|pref
argument_list|)
expr_stmt|;
name|InstructorAttributeDAO
name|adao
init|=
operator|new
name|InstructorAttributeDAO
argument_list|()
decl_stmt|;
name|InstructorAttribute
name|attribute
init|=
name|adao
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|InstructorAttributePref
name|ap
init|=
operator|new
name|InstructorAttributePref
argument_list|()
decl_stmt|;
name|ap
operator|.
name|setOwner
argument_list|(
name|pg
argument_list|)
expr_stmt|;
name|ap
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|pref
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ap
operator|.
name|setAttribute
argument_list|(
name|attribute
argument_list|)
expr_stmt|;
name|InstructorAttributePref
name|sameParentAp
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|parentAttributePrefs
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstructorAttributePref
name|p
init|=
operator|(
name|InstructorAttributePref
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|isSame
argument_list|(
name|ap
argument_list|)
condition|)
block|{
if|if
condition|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|equals
argument_list|(
name|ap
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
condition|)
name|sameParentAp
operator|=
name|p
expr_stmt|;
name|j
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|sameParentAp
operator|==
literal|null
condition|)
name|s
operator|.
name|add
argument_list|(
name|ap
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parentAttributePrefs
operator|!=
literal|null
operator|&&
operator|!
name|parentAttributePrefs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|parentAttributePrefs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstructorAttributePref
name|ap
init|=
operator|(
name|InstructorAttributePref
operator|)
operator|(
operator|(
name|InstructorAttributePref
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|clone
argument_list|()
decl_stmt|;
name|ap
operator|.
name|setOwner
argument_list|(
name|pg
argument_list|)
expr_stmt|;
name|ap
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|add
argument_list|(
name|ap
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Instructor Prefs
if|if
condition|(
name|Preference
operator|.
name|Type
operator|.
name|INSTRUCTOR
operator|.
name|in
argument_list|(
name|types
argument_list|)
condition|)
block|{
name|List
name|lst
init|=
name|form
operator|.
name|getInstructorPrefs
argument_list|()
decl_stmt|;
name|List
name|lstL
init|=
name|form
operator|.
name|getInstructorPrefLevels
argument_list|()
decl_stmt|;
name|Set
name|parentInstructorPrefs
init|=
name|pg
operator|.
name|effectivePreferences
argument_list|(
name|InstructorPref
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lst
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
operator|(
name|String
operator|)
name|lst
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
operator|||
name|id
operator|.
name|equals
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
condition|)
continue|continue;
name|String
name|pref
init|=
operator|(
name|String
operator|)
name|lstL
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Instructor: "
operator|+
name|id
operator|+
literal|": "
operator|+
name|pref
argument_list|)
expr_stmt|;
name|DepartmentalInstructorDAO
name|idao
init|=
operator|new
name|DepartmentalInstructorDAO
argument_list|()
decl_stmt|;
name|DepartmentalInstructor
name|instructor
init|=
name|idao
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|InstructorPref
name|ip
init|=
operator|new
name|InstructorPref
argument_list|()
decl_stmt|;
name|ip
operator|.
name|setOwner
argument_list|(
name|pg
argument_list|)
expr_stmt|;
name|ip
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|pref
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ip
operator|.
name|setInstructor
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
name|InstructorPref
name|sameParentAp
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|parentInstructorPrefs
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstructorPref
name|p
init|=
operator|(
name|InstructorPref
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|isSame
argument_list|(
name|ip
argument_list|)
condition|)
block|{
if|if
condition|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|equals
argument_list|(
name|ip
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
condition|)
name|sameParentAp
operator|=
name|p
expr_stmt|;
name|j
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|sameParentAp
operator|==
literal|null
condition|)
name|s
operator|.
name|add
argument_list|(
name|ip
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parentInstructorPrefs
operator|!=
literal|null
operator|&&
operator|!
name|parentInstructorPrefs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|parentInstructorPrefs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstructorPref
name|ap
init|=
operator|(
name|InstructorPref
operator|)
operator|(
operator|(
name|InstructorPref
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|clone
argument_list|()
decl_stmt|;
name|ap
operator|.
name|setOwner
argument_list|(
name|pg
argument_list|)
expr_stmt|;
name|ap
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|add
argument_list|(
name|ap
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Set values in subpart
name|pg
operator|.
name|setPreferences
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|updateInstructorCoursePreferences
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|PreferenceGroup
name|pg
parameter_list|,
name|CourseOffering
name|course
parameter_list|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|InstructorCoursePref
argument_list|>
name|prefs
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|InstructorCoursePref
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|InstructorCoursePref
name|pref
range|:
operator|(
name|List
argument_list|<
name|InstructorCoursePref
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from InstructorCoursePref where course.uniqueId = :courseId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"courseId"
argument_list|,
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|prefs
operator|.
name|put
argument_list|(
name|pref
operator|.
name|getOwner
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|pref
argument_list|)
expr_stmt|;
block|}
name|List
name|lst
init|=
name|form
operator|.
name|getCoursePrefs
argument_list|()
decl_stmt|;
name|List
name|lstL
init|=
name|form
operator|.
name|getCoursePrefLevels
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lst
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
operator|(
name|String
operator|)
name|lst
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
operator|||
name|id
operator|.
name|equals
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
condition|)
continue|continue;
name|String
name|pref
init|=
operator|(
name|String
operator|)
name|lstL
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Course: "
operator|+
name|id
operator|+
literal|": "
operator|+
name|pref
argument_list|)
expr_stmt|;
name|InstructorCoursePref
name|cp
init|=
name|prefs
operator|.
name|remove
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cp
operator|==
literal|null
condition|)
block|{
name|DepartmentalInstructor
name|instructor
init|=
name|DepartmentalInstructorDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|cp
operator|=
operator|new
name|InstructorCoursePref
argument_list|()
expr_stmt|;
name|cp
operator|.
name|setOwner
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
name|cp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|pref
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cp
operator|.
name|setCourse
argument_list|(
name|course
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|getPreferences
argument_list|()
operator|.
name|add
argument_list|(
name|cp
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|cp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefId
argument_list|()
operator|.
name|equals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|pref
argument_list|)
argument_list|)
condition|)
block|{
name|cp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|pref
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|cp
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|InstructorCoursePref
name|cp
range|:
name|prefs
operator|.
name|values
argument_list|()
control|)
block|{
name|cp
operator|.
name|getOwner
argument_list|()
operator|.
name|getPreferences
argument_list|()
operator|.
name|remove
argument_list|(
name|cp
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|cp
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|addToTimePref
parameter_list|(
name|PreferenceGroup
name|owner
parameter_list|,
name|String
name|tpat
parameter_list|,
name|Set
name|prefs
parameter_list|,
name|int
name|idx
parameter_list|,
name|boolean
name|timeVertical
parameter_list|,
name|Set
name|parentTimePrefs
parameter_list|)
throws|throws
name|Exception
block|{
name|TimePatternDAO
name|timePatternDao
init|=
operator|new
name|TimePatternDAO
argument_list|()
decl_stmt|;
name|TimePattern
name|timePattern
init|=
operator|(
name|tpat
operator|.
name|equals
argument_list|(
literal|"-1"
argument_list|)
condition|?
literal|null
else|:
name|timePatternDao
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|tpat
argument_list|)
argument_list|)
operator|)
decl_stmt|;
comment|// Generate grid prefs
name|boolean
name|canUseHardTimePrefs
init|=
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|owner
argument_list|,
name|Right
operator|.
name|CanUseHardTimePrefs
argument_list|)
decl_stmt|;
name|RequiredTimeTable
name|rtt
init|=
operator|(
name|timePattern
operator|==
literal|null
condition|?
name|TimePattern
operator|.
name|getDefaultRequiredTimeTable
argument_list|()
else|:
name|timePattern
operator|.
name|getRequiredTimeTable
argument_list|(
name|canUseHardTimePrefs
argument_list|)
operator|)
decl_stmt|;
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|setDefaultSelection
argument_list|(
name|RequiredTimeTable
operator|.
name|getTimeGridSize
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rtt
operator|.
name|setName
argument_list|(
literal|"p"
operator|+
name|idx
argument_list|)
expr_stmt|;
name|rtt
operator|.
name|update
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|TimePref
name|tp
init|=
operator|new
name|TimePref
argument_list|()
decl_stmt|;
name|tp
operator|.
name|setOwner
argument_list|(
name|owner
argument_list|)
expr_stmt|;
name|tp
operator|.
name|setPreference
argument_list|(
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|getPreferences
argument_list|()
argument_list|)
expr_stmt|;
name|tp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
argument_list|)
expr_stmt|;
name|tp
operator|.
name|setTimePattern
argument_list|(
name|timePattern
argument_list|)
expr_stmt|;
name|TimePref
name|sameParentTimePref
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|parentTimePrefs
operator|!=
literal|null
operator|&&
operator|!
name|parentTimePrefs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|parentTimePrefs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePref
name|parentTimePref
init|=
operator|(
name|TimePref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentTimePref
operator|.
name|isSame
argument_list|(
name|tp
argument_list|)
condition|)
block|{
if|if
condition|(
name|parentTimePref
operator|.
name|getPreference
argument_list|()
operator|.
name|equals
argument_list|(
name|tp
operator|.
name|getPreference
argument_list|()
argument_list|)
operator|&&
name|parentTimePref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|equals
argument_list|(
name|tp
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
condition|)
name|sameParentTimePref
operator|=
name|parentTimePref
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|sameParentTimePref
operator|==
literal|null
condition|)
name|prefs
operator|.
name|add
argument_list|(
name|tp
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|generateExamPeriodGrid
parameter_list|(
name|Exam
name|exam
parameter_list|,
name|String
name|op
parameter_list|,
name|boolean
name|timeVertical
parameter_list|,
name|boolean
name|editable
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|ApplicationProperty
operator|.
name|LegacyPeriodPreferences
operator|.
name|isTrue
argument_list|()
condition|)
block|{
name|ExamSolverProxy
name|solver
init|=
name|WebSolver
operator|.
name|getExamSolver
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|ExamAssignment
name|assignment
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|solver
operator|!=
literal|null
operator|&&
name|exam
operator|!=
literal|null
condition|)
name|assignment
operator|=
name|solver
operator|.
name|getAssignment
argument_list|(
name|exam
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|exam
operator|!=
literal|null
operator|&&
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
operator|!=
literal|null
condition|)
name|assignment
operator|=
operator|new
name|ExamAssignment
argument_list|(
name|exam
argument_list|)
expr_stmt|;
name|ExamType
name|type
init|=
operator|(
name|exam
operator|==
literal|null
condition|?
name|ExamTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
operator|(
operator|(
name|ExamEditForm
operator|)
name|form
operator|)
operator|.
name|getExamType
argument_list|()
argument_list|)
else|:
name|exam
operator|.
name|getExamType
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|ExamType
operator|.
name|sExamTypeMidterm
operator|==
name|type
operator|.
name|getType
argument_list|()
condition|)
block|{
name|MidtermPeriodPreferenceModel
name|epx
init|=
operator|new
name|MidtermPeriodPreferenceModel
argument_list|(
name|exam
operator|==
literal|null
condition|?
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
else|:
name|exam
operator|.
name|getSession
argument_list|()
argument_list|,
name|type
argument_list|,
name|assignment
argument_list|)
decl_stmt|;
if|if
condition|(
name|exam
operator|!=
literal|null
condition|)
name|epx
operator|.
name|load
argument_list|(
name|exam
argument_list|)
expr_stmt|;
name|form
operator|.
name|setHasNotAvailable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|op
operator|.
name|equals
argument_list|(
literal|"init"
argument_list|)
condition|)
name|epx
operator|.
name|load
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"ExamPeriodGrid"
argument_list|,
name|epx
operator|.
name|print
argument_list|(
name|editable
argument_list|,
operator|(
name|editable
condition|?
literal|0
else|:
name|exam
operator|.
name|getLength
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PeriodPreferenceModel
name|px
init|=
operator|new
name|PeriodPreferenceModel
argument_list|(
name|exam
operator|==
literal|null
condition|?
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
else|:
name|exam
operator|.
name|getSession
argument_list|()
argument_list|,
name|assignment
argument_list|,
name|type
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|exam
operator|!=
literal|null
condition|)
name|px
operator|.
name|load
argument_list|(
name|exam
argument_list|)
expr_stmt|;
name|px
operator|.
name|setAllowHard
argument_list|(
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|exam
argument_list|,
name|Right
operator|.
name|CanUseHardTimePrefs
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setHasNotAvailable
argument_list|(
name|px
operator|.
name|hasNotAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|RequiredTimeTable
name|rtt
init|=
operator|new
name|RequiredTimeTable
argument_list|(
name|px
argument_list|)
decl_stmt|;
name|rtt
operator|.
name|setName
argument_list|(
literal|"PeriodPref"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|op
operator|.
name|equals
argument_list|(
literal|"init"
argument_list|)
condition|)
name|rtt
operator|.
name|update
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"ExamPeriodGrid"
argument_list|,
name|rtt
operator|.
name|print
argument_list|(
name|editable
argument_list|,
name|timeVertical
argument_list|,
name|editable
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|RoomInterface
operator|.
name|PeriodPreferenceModel
name|model
init|=
operator|new
name|PeriodPreferencesBackend
argument_list|()
operator|.
name|loadExamPeriodPreferences
argument_list|(
name|WebSolver
operator|.
name|getExamSolver
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
argument_list|,
name|exam
argument_list|,
operator|(
name|exam
operator|==
literal|null
condition|?
name|ExamTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
operator|(
operator|(
name|ExamEditForm
operator|)
name|form
operator|)
operator|.
name|getExamType
argument_list|()
argument_list|)
else|:
name|exam
operator|.
name|getExamType
argument_list|()
operator|)
argument_list|,
name|sessionContext
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|op
operator|.
name|equals
argument_list|(
literal|"init"
argument_list|)
operator|&&
name|request
operator|.
name|getParameter
argument_list|(
literal|"periodPrefs"
argument_list|)
operator|!=
literal|null
condition|)
name|model
operator|.
name|setPattern
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"periodPrefs"
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setHasNotAvailable
argument_list|(
name|model
operator|.
name|hasNotAvailable
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|editable
condition|)
block|{
name|request
operator|.
name|setAttribute
argument_list|(
literal|"ExamPeriodGrid"
argument_list|,
literal|"<div id='UniTimeGWT:PeriodPreferences'><input type=\"hidden\" name=\"periodPrefs\" value=\""
operator|+
name|model
operator|.
name|getPattern
argument_list|()
operator|+
literal|"\"></div>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|request
operator|.
name|setAttribute
argument_list|(
literal|"ExamPeriodGrid"
argument_list|,
literal|"<div id='UniTimeGWT:PeriodPreferences' style='display: none;'>"
operator|+
name|model
operator|.
name|getPattern
argument_list|()
operator|+
literal|"</div>"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|generateTimePatternGrids
parameter_list|(
name|PreferenceGroup
name|pg
parameter_list|,
name|int
name|minutes
parameter_list|,
name|DurationModel
name|dmod
parameter_list|,
name|DatePattern
name|dpat
parameter_list|,
name|Set
name|tpat
parameter_list|,
name|String
name|op
parameter_list|,
name|boolean
name|timeVertical
parameter_list|,
name|boolean
name|editable
parameter_list|,
name|Vector
name|leadInstructors
parameter_list|)
throws|throws
name|Exception
block|{
name|Vector
name|timePrefs
init|=
literal|null
decl_stmt|;
name|List
name|tps
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
literal|"init"
argument_list|)
condition|)
block|{
name|Set
name|tp
init|=
name|pg
operator|.
name|effectivePreferences
argument_list|(
name|TimePref
operator|.
name|class
argument_list|,
name|leadInstructors
argument_list|,
operator|!
name|editable
argument_list|)
decl_stmt|;
if|if
condition|(
name|tp
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|timePrefs
operator|=
operator|new
name|Vector
argument_list|(
name|tp
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|timePrefs
argument_list|)
expr_stmt|;
name|tps
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|timePrefs
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|TimePref
name|timePref
init|=
operator|(
name|TimePref
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|timePref
operator|.
name|getTimePatternModel
argument_list|()
operator|.
name|hasNotAvailablePreference
argument_list|()
condition|)
name|form
operator|.
name|setHasNotAvailable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tps
operator|.
name|add
argument_list|(
name|timePref
operator|.
name|getTimePattern
argument_list|()
operator|==
literal|null
condition|?
literal|"-1"
else|:
name|timePref
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|tpat
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|editable
condition|)
block|{
name|Vector
name|x
init|=
operator|new
name|Vector
argument_list|(
name|tpat
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|tps
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|x
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|TimePattern
name|pat
init|=
operator|(
name|TimePattern
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|tps
operator|.
name|add
argument_list|(
name|pat
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|form
operator|.
name|setTimePatterns
argument_list|(
name|tps
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tps
operator|=
name|form
operator|.
name|getTimePatterns
argument_list|()
expr_stmt|;
block|}
name|Assignment
name|assignment
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|pg
operator|instanceof
name|Class_
condition|)
block|{
if|if
condition|(
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|ClassAssignments
argument_list|)
condition|)
block|{
name|ClassAssignmentDetails
name|ca
init|=
name|ClassAssignmentDetails
operator|.
name|createClassAssignmentDetails
argument_list|(
name|sessionContext
argument_list|,
name|getCourseTimetablingSolverService
argument_list|()
operator|.
name|getSolver
argument_list|()
argument_list|,
name|pg
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|ca
operator|!=
literal|null
condition|)
block|{
name|String
name|assignmentTable
init|=
name|getAssignmentTable
argument_list|(
name|sessionContext
argument_list|,
name|getCourseTimetablingSolverService
argument_list|()
operator|.
name|getSolver
argument_list|()
argument_list|,
name|ca
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|assignmentTable
operator|!=
literal|null
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
literal|"Suggestions.assignmentInfo"
argument_list|,
name|assignmentTable
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ClassAssignmentProxy
name|cap
init|=
name|getClassAssignmentService
argument_list|()
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|cap
operator|!=
literal|null
condition|)
block|{
name|assignment
operator|=
name|cap
operator|.
name|getAssignment
argument_list|(
operator|(
name|Class_
operator|)
name|pg
argument_list|)
expr_stmt|;
if|if
condition|(
name|assignment
operator|!=
literal|null
operator|&&
name|assignment
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ca
operator|=
name|ClassAssignmentDetails
operator|.
name|createClassAssignmentDetailsFromAssignment
argument_list|(
name|sessionContext
argument_list|,
name|assignment
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|ca
operator|!=
literal|null
condition|)
block|{
name|String
name|assignmentTable
init|=
name|getAssignmentTable
argument_list|(
name|sessionContext
argument_list|,
name|getCourseTimetablingSolverService
argument_list|()
operator|.
name|getSolver
argument_list|()
argument_list|,
name|ca
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|assignmentTable
operator|!=
literal|null
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
literal|"Suggestions.assignmentInfo"
argument_list|,
name|assignmentTable
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
comment|// Time Pattern not selected
if|if
condition|(
name|tps
operator|==
literal|null
operator|||
name|tps
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|request
operator|.
name|setAttribute
argument_list|(
name|TIME_PATTERN_GRID_ATTR
argument_list|,
name|MSG
operator|.
name|errorTimePatternNotSelected
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Time Pattern value set
else|else
block|{
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|int
name|deletedTimePatternIdx
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
literal|"timePattern"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"deleteType"
argument_list|)
argument_list|)
condition|)
block|{
try|try
block|{
name|deletedTimePatternIdx
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"deleteId"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|tps
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|String
name|tp
init|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Load TimePattern Object
name|TimePatternDAO
name|timePatternDao
init|=
operator|new
name|TimePatternDAO
argument_list|()
decl_stmt|;
name|TimePattern
name|timePattern
init|=
operator|(
name|tp
operator|.
name|equals
argument_list|(
literal|"-1"
argument_list|)
condition|?
literal|null
else|:
name|timePatternDao
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|tp
argument_list|)
argument_list|)
operator|)
decl_stmt|;
comment|// 	Display time grid
name|RequiredTimeTable
name|rtt
init|=
operator|(
name|timePattern
operator|==
literal|null
condition|?
name|TimePattern
operator|.
name|getDefaultRequiredTimeTable
argument_list|()
else|:
name|timePattern
operator|.
name|getRequiredTimeTable
argument_list|(
name|assignment
operator|==
literal|null
condition|?
literal|null
else|:
name|assignment
operator|.
name|getTimeLocation
argument_list|()
argument_list|,
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|pg
argument_list|,
name|Right
operator|.
name|CanUseHardTimePrefs
argument_list|)
argument_list|)
operator|)
decl_stmt|;
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|setDefaultSelection
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
name|UserProperty
operator|.
name|GridSize
argument_list|)
argument_list|)
expr_stmt|;
name|rtt
operator|.
name|setName
argument_list|(
literal|"p"
operator|+
name|idx
argument_list|)
expr_stmt|;
comment|// 	Reload all preferences selected
name|String
name|reloadCause
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"reloadCause"
argument_list|)
decl_stmt|;
if|if
condition|(
name|reloadCause
operator|!=
literal|null
operator|&&
name|reloadCause
operator|.
name|equals
argument_list|(
literal|"timePattern"
argument_list|)
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
name|HASH_ATTR
argument_list|,
name|HASH_TIME_PREF
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|reloadCause
operator|==
literal|null
operator|||
operator|!
name|reloadCause
operator|.
name|equals
argument_list|(
literal|"timePattern"
argument_list|)
operator|)
operator|&&
operator|!
name|op
operator|.
name|equals
argument_list|(
literal|"init"
argument_list|)
condition|)
block|{
if|if
condition|(
name|deletedTimePatternIdx
operator|>=
literal|0
operator|&&
name|idx
operator|>=
name|deletedTimePatternIdx
condition|)
block|{
name|rtt
operator|.
name|setName
argument_list|(
literal|"p"
operator|+
operator|(
name|idx
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
name|rtt
operator|.
name|update
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|rtt
operator|.
name|setName
argument_list|(
literal|"p"
operator|+
name|idx
argument_list|)
expr_stmt|;
block|}
else|else
name|rtt
operator|.
name|update
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
comment|// Load existing time preferences
if|if
condition|(
name|timePrefs
operator|!=
literal|null
operator|&&
name|timePrefs
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|op
operator|.
name|equals
argument_list|(
literal|"init"
argument_list|)
condition|)
block|{
comment|//rtt.getModel().setDefaults(user);
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|setPreferences
argument_list|(
operator|(
operator|(
name|TimePref
operator|)
name|timePrefs
operator|.
name|elementAt
argument_list|(
name|idx
argument_list|)
operator|)
operator|.
name|getPreference
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|name
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|timePattern
operator|!=
literal|null
operator|&&
operator|!
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|isExactTime
argument_list|()
condition|)
block|{
if|if
condition|(
name|dpat
operator|==
literal|null
condition|)
block|{
name|name
operator|=
name|timePattern
operator|.
name|getName
argument_list|()
operator|+
literal|"<font color=\\'red\\'>"
operator|+
name|MSG
operator|.
name|warnNoMatchingDatePattern
argument_list|()
operator|+
literal|"</font>"
expr_stmt|;
block|}
if|else if
condition|(
name|dpat
operator|.
name|getType
argument_list|()
operator|!=
literal|null
operator|&&
name|dpat
operator|.
name|getType
argument_list|()
operator|==
name|DatePattern
operator|.
name|sTypePatternSet
condition|)
block|{
name|boolean
name|allPatterns
init|=
literal|true
decl_stmt|;
name|String
name|matching
init|=
literal|""
decl_stmt|;
for|for
control|(
name|DatePattern
name|dch
range|:
name|dpat
operator|.
name|findChildren
argument_list|()
control|)
block|{
if|if
condition|(
name|dmod
operator|.
name|isValidCombination
argument_list|(
name|minutes
argument_list|,
name|dch
argument_list|,
name|timePattern
argument_list|)
condition|)
block|{
name|matching
operator|+=
operator|(
name|matching
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|", "
operator|)
operator|+
name|dch
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|allPatterns
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|matching
operator|.
name|isEmpty
argument_list|()
condition|)
name|name
operator|=
name|timePattern
operator|.
name|getName
argument_list|()
operator|+
literal|"<font color=\\'red\\'>"
operator|+
name|MSG
operator|.
name|warnNoMatchingDatePattern
argument_list|()
operator|+
literal|"</font>"
expr_stmt|;
if|else if
condition|(
operator|!
name|allPatterns
condition|)
name|name
operator|=
name|timePattern
operator|.
name|getName
argument_list|()
operator|+
literal|" ("
operator|+
name|matching
operator|+
literal|")"
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|dmod
operator|.
name|isValidCombination
argument_list|(
name|minutes
argument_list|,
name|dpat
argument_list|,
name|timePattern
argument_list|)
condition|)
name|name
operator|=
name|timePattern
operator|.
name|getName
argument_list|()
operator|+
literal|"<font color=\\'red\\'>"
operator|+
name|MSG
operator|.
name|warnNoMatchingDatePattern
argument_list|()
operator|+
literal|"</font>"
expr_stmt|;
block|}
block|}
name|request
operator|.
name|setAttribute
argument_list|(
name|TIME_PATTERN_GRID_ATTR
operator|+
literal|"_"
operator|+
name|idx
argument_list|,
name|rtt
operator|.
name|print
argument_list|(
name|editable
argument_list|,
name|timeVertical
argument_list|,
name|editable
argument_list|,
literal|false
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|initPrefs
parameter_list|(
name|PreferenceGroup
name|pg
parameter_list|,
name|Vector
name|leadInstructors
parameter_list|,
name|boolean
name|addBlankRows
parameter_list|)
block|{
if|if
condition|(
name|pg
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|addBlankRows
condition|)
name|form
operator|.
name|addBlankPrefRows
argument_list|()
expr_stmt|;
return|return;
block|}
comment|// Room Prefs
name|form
operator|.
name|getRoomPrefs
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|form
operator|.
name|getRoomPrefLevels
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Set
name|roomPrefs
init|=
name|pg
operator|.
name|effectivePreferences
argument_list|(
name|RoomPref
operator|.
name|class
argument_list|,
name|leadInstructors
argument_list|)
decl_stmt|;
name|Iterator
name|iter
init|=
name|roomPrefs
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|RoomPref
name|rp
init|=
operator|(
name|RoomPref
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Adding room pref ... "
operator|+
name|rp
operator|.
name|getRoom
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|form
operator|.
name|addToRoomPrefs
argument_list|(
name|rp
operator|.
name|getRoom
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|rp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Room Feature Prefs
name|form
operator|.
name|getRoomFeaturePrefs
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|form
operator|.
name|getRoomFeaturePrefLevels
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Set
name|roomFeatPrefs
init|=
name|pg
operator|.
name|effectivePreferences
argument_list|(
name|RoomFeaturePref
operator|.
name|class
argument_list|,
name|leadInstructors
argument_list|)
decl_stmt|;
name|iter
operator|=
name|roomFeatPrefs
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|RoomFeaturePref
name|rfp
init|=
operator|(
name|RoomFeaturePref
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Adding room feature pref ... "
operator|+
name|rfp
operator|.
name|getRoomFeature
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|form
operator|.
name|addToRoomFeatPrefs
argument_list|(
name|rfp
operator|.
name|getRoomFeature
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|rfp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Building Prefs
name|form
operator|.
name|getBldgPrefs
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|form
operator|.
name|getBldgPrefLevels
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Set
name|bldgPrefs
init|=
name|pg
operator|.
name|effectivePreferences
argument_list|(
name|BuildingPref
operator|.
name|class
argument_list|,
name|leadInstructors
argument_list|)
decl_stmt|;
name|iter
operator|=
name|bldgPrefs
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|BuildingPref
name|bp
init|=
operator|(
name|BuildingPref
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Adding building pref ... "
operator|+
name|bp
operator|.
name|getBuilding
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|form
operator|.
name|addToBldgPrefs
argument_list|(
name|bp
operator|.
name|getBuilding
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|bp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Distribution Prefs
name|form
operator|.
name|getDistPrefs
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|form
operator|.
name|getDistPrefLevels
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Set
name|distPrefs
init|=
name|pg
operator|.
name|effectivePreferences
argument_list|(
name|DistributionPref
operator|.
name|class
argument_list|,
name|leadInstructors
argument_list|)
decl_stmt|;
name|iter
operator|=
name|distPrefs
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DistributionPref
name|dp
init|=
operator|(
name|DistributionPref
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Adding distribution pref ... "
operator|+
name|dp
operator|.
name|getDistributionType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|form
operator|.
name|addToDistPrefs
argument_list|(
name|dp
operator|.
name|getDistributionType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|dp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Period Prefs
comment|/*         form.getPeriodPrefs().clear();         form.getPeriodPrefLevels().clear();         Set periodPrefs = pg.effectivePreferences(ExamPeriodPref.class, leadInstructors);         iter = periodPrefs.iterator();         while (iter.hasNext()){             ExamPeriodPref xp = (ExamPeriodPref) iter.next();             Debug.debug("Adding period pref ... " + xp.getExamPeriod().getUniqueId().toString());             form.addToPeriodPrefs(                     xp.getExamPeriod().getUniqueId().toString(),                      xp.getPrefLevel().getUniqueId().toString() );         }         */
comment|// Room group Prefs
name|form
operator|.
name|getRoomGroups
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|form
operator|.
name|getRoomGroupLevels
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Set
name|rgPrefs
init|=
name|pg
operator|.
name|effectivePreferences
argument_list|(
name|RoomGroupPref
operator|.
name|class
argument_list|,
name|leadInstructors
argument_list|)
decl_stmt|;
name|iter
operator|=
name|rgPrefs
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|RoomGroupPref
name|bp
init|=
operator|(
name|RoomGroupPref
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Adding room group pref ... "
operator|+
name|bp
operator|.
name|getRoomGroup
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|form
operator|.
name|addToRoomGroups
argument_list|(
name|bp
operator|.
name|getRoomGroup
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|bp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Date Pattern Prefs
name|Set
name|datePatternPrefs
init|=
name|pg
operator|.
name|effectivePreferences
argument_list|(
name|DatePatternPref
operator|.
name|class
argument_list|)
decl_stmt|;
name|form
operator|.
name|getDatePatternPrefs
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|form
operator|.
name|getDatePatternPrefLevels
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iter
operator|=
name|datePatternPrefs
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DatePatternPref
name|dp
init|=
operator|(
name|DatePatternPref
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|dp
operator|.
name|appliesTo
argument_list|(
name|pg
argument_list|)
condition|)
continue|continue;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Adding date pattern pref ... "
operator|+
name|dp
operator|.
name|getDatePattern
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|form
operator|.
name|addToDatePatternPrefs
argument_list|(
name|dp
operator|.
name|getDatePattern
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|dp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Course Prefs
name|form
operator|.
name|getCoursePrefs
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|form
operator|.
name|getCoursePrefLevels
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Set
name|coursePrefs
init|=
name|pg
operator|.
name|effectivePreferences
argument_list|(
name|InstructorCoursePref
operator|.
name|class
argument_list|,
name|leadInstructors
argument_list|)
decl_stmt|;
name|iter
operator|=
name|coursePrefs
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|InstructorCoursePref
name|cp
init|=
operator|(
name|InstructorCoursePref
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Adding course pref ... "
operator|+
name|cp
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|pg
operator|instanceof
name|DepartmentalInstructor
condition|)
name|form
operator|.
name|addToCoursePrefs
argument_list|(
name|cp
operator|.
name|getCourse
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|cp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|form
operator|.
name|addToCoursePrefs
argument_list|(
name|cp
operator|.
name|getOwner
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|cp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Attribute Prefs
name|form
operator|.
name|getAttributePrefs
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|form
operator|.
name|getAttributePrefLevels
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Set
name|attributePrefs
init|=
name|pg
operator|.
name|effectivePreferences
argument_list|(
name|InstructorAttributePref
operator|.
name|class
argument_list|,
name|leadInstructors
argument_list|)
decl_stmt|;
name|iter
operator|=
name|attributePrefs
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|InstructorAttributePref
name|ap
init|=
operator|(
name|InstructorAttributePref
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Adding attribute pref ... "
operator|+
name|ap
operator|.
name|getAttribute
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|form
operator|.
name|addToAttributePrefs
argument_list|(
name|ap
operator|.
name|getAttribute
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|ap
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Instructor Prefs
name|form
operator|.
name|getInstructorPrefs
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|form
operator|.
name|getInstructorPrefLevels
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Set
name|instructorPrefs
init|=
name|pg
operator|.
name|effectivePreferences
argument_list|(
name|InstructorPref
operator|.
name|class
argument_list|,
name|leadInstructors
argument_list|)
decl_stmt|;
name|iter
operator|=
name|instructorPrefs
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|InstructorPref
name|ap
init|=
operator|(
name|InstructorPref
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Adding instructor pref ... "
operator|+
name|ap
operator|.
name|getInstructor
argument_list|()
operator|.
name|getName
argument_list|(
name|NameFormat
operator|.
name|LAST_FIRST_MIDDLE
operator|.
name|reference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|addToInstructorPrefs
argument_list|(
name|ap
operator|.
name|getInstructor
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|ap
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|addBlankRows
condition|)
name|form
operator|.
name|addBlankPrefRows
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|clearPrefs
parameter_list|()
block|{
name|form
operator|.
name|clearPrefs
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
name|getAssignmentTable
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|SolverProxy
name|solver
parameter_list|,
name|ClassAssignmentDetails
name|ca
parameter_list|,
name|boolean
name|dispLinks
parameter_list|,
name|Hint
name|selection
parameter_list|,
name|boolean
name|dispDate
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|ca
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<TR><TD colspan='2'><I>"
operator|+
name|MSG
operator|.
name|messageNotAssigned
argument_list|()
operator|+
literal|"</I></TD></TR>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|dispDate
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"<TR><TD>"
operator|+
name|MSG
operator|.
name|propertyDate
argument_list|()
operator|+
literal|"</TD><TD>"
operator|+
name|ca
operator|.
name|getAssignedTime
argument_list|()
operator|.
name|getDatePatternHtml
argument_list|()
operator|+
literal|"</TD></TR>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<TR><TD>"
operator|+
name|MSG
operator|.
name|propertyTime
argument_list|()
operator|+
literal|"</TD><TD>"
operator|+
name|ca
operator|.
name|getAssignedTime
argument_list|()
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
operator|+
literal|"</TD></TR>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|ca
operator|.
name|getAssignedRoom
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<TR><TD>"
operator|+
name|MSG
operator|.
name|propertyRoom
argument_list|()
operator|+
literal|"</TD><TD>"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ca
operator|.
name|getAssignedRoom
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|ca
operator|.
name|getAssignedRoom
argument_list|()
index|[
name|i
index|]
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"</TD></TR>"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ca
operator|.
name|getInstructor
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<TR><TD>"
operator|+
name|MSG
operator|.
name|propertyInstructor
argument_list|()
operator|+
literal|"</TD><TD>"
operator|+
name|ca
operator|.
name|getInstructorHtml
argument_list|()
operator|+
literal|"</TD></TR>"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ca
operator|.
name|getBtbInstructors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<TR><TD></TD><TD>"
argument_list|)
expr_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|ca
operator|.
name|getBtbInstructors
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ClassAssignmentDetails
operator|.
name|BtbInstructorInfo
name|btb
init|=
operator|(
name|ClassAssignmentDetails
operator|.
name|BtbInstructorInfo
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|btb
operator|.
name|toHtml
argument_list|(
name|context
argument_list|,
name|solver
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"<br>"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"</TD></TR>"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ca
operator|.
name|getInitialTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<TR><TD nowrap>"
operator|+
name|MSG
operator|.
name|propertyInitialAssignment
argument_list|()
operator|+
literal|"</TD><TD>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|ca
operator|.
name|isInitial
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<I>"
operator|+
name|MSG
operator|.
name|messageThisOne
argument_list|()
operator|+
literal|"</I>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|ca
operator|.
name|getInitialTime
argument_list|()
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
operator|+
literal|" "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ca
operator|.
name|getInitialRoom
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|ca
operator|.
name|getInitialRoom
argument_list|()
index|[
name|i
index|]
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"</TD></TR>"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"</TD></TR>"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ca
operator|.
name|getStudentConflicts
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<TR><TD nowrap>"
operator|+
name|MSG
operator|.
name|propertyStudentConflicts
argument_list|()
operator|+
literal|"</TD><TD>"
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|ca
operator|.
name|getStudentConflicts
argument_list|()
argument_list|,
operator|new
name|ClassAssignmentDetails
operator|.
name|StudentConflictInfoComparator
argument_list|(
name|context
argument_list|,
name|solver
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|ca
operator|.
name|getStudentConflicts
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ClassAssignmentDetails
operator|.
name|StudentConflictInfo
name|std
init|=
operator|(
name|ClassAssignmentDetails
operator|.
name|StudentConflictInfo
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|std
operator|.
name|toHtml
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
name|dispLinks
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"<BR>"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"</TD></TR>"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ca
operator|.
name|hasViolatedGroupConstraint
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<TR><TD>"
operator|+
name|MSG
operator|.
name|propertyViolatedConstraints
argument_list|()
operator|+
literal|"</TD><TD>"
argument_list|)
expr_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|ca
operator|.
name|getGroupConstraints
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ClassAssignmentDetails
operator|.
name|DistributionInfo
name|gc
init|=
operator|(
name|ClassAssignmentDetails
operator|.
name|DistributionInfo
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|gc
operator|.
name|getInfo
argument_list|()
operator|.
name|isSatisfied
argument_list|()
condition|)
continue|continue;
name|sb
operator|.
name|append
argument_list|(
name|gc
operator|.
name|toHtml
argument_list|(
name|context
argument_list|,
name|solver
argument_list|,
name|dispLinks
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"<BR>"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"</TD></TR>"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dispLinks
condition|)
block|{
if|if
condition|(
operator|!
name|ca
operator|.
name|getRooms
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<TR><TD nowrap>"
operator|+
name|MSG
operator|.
name|propertyRoomLocations
argument_list|()
operator|+
literal|"</TD><TD>"
operator|+
name|ca
operator|.
name|getRooms
argument_list|()
operator|.
name|toHtml
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|selection
argument_list|)
operator|+
literal|"</TD></TR>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<input type='hidden' name='nrRooms' value='0'/>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<input type='hidden' name='roomState' value='0'/>"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ca
operator|.
name|getTimes
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<TR><TD nowrap>"
operator|+
name|MSG
operator|.
name|propertyTimeLocations
argument_list|()
operator|+
literal|"</TD><TD>"
operator|+
name|ca
operator|.
name|getTimes
argument_list|()
operator|.
name|toHtml
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|selection
argument_list|)
operator|+
literal|"</TD></TR>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<TR"
operator|+
operator|(
name|ca
operator|.
name|getTimes
argument_list|()
operator|.
name|getNrDates
argument_list|()
operator|<=
literal|1
condition|?
literal|" style='display:none;'"
else|:
literal|""
operator|)
operator|+
literal|"><TD nowrap>"
operator|+
name|MSG
operator|.
name|propertyDatePatterns
argument_list|()
operator|+
literal|"</TD><TD>"
operator|+
name|ca
operator|.
name|getTimes
argument_list|()
operator|.
name|toDatesHtml
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|selection
argument_list|)
operator|+
literal|"</TD></TR>"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|dispLinks
operator|&&
name|ca
operator|.
name|getClazz
argument_list|()
operator|!=
literal|null
operator|&&
name|ca
operator|.
name|getClazz
argument_list|()
operator|.
name|getRoomCapacity
argument_list|()
operator|>=
literal|0
operator|&&
name|ca
operator|.
name|getClazz
argument_list|()
operator|.
name|getRoomCapacity
argument_list|()
operator|<
name|Integer
operator|.
name|MAX_VALUE
operator|&&
name|ca
operator|.
name|getClazz
argument_list|()
operator|.
name|nrRooms
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<TR><TD>"
operator|+
name|MSG
operator|.
name|propertyMinimumRoomSize
argument_list|()
operator|+
literal|"</TD><TD>"
operator|+
name|ca
operator|.
name|getClazz
argument_list|()
operator|.
name|getRoomCapacity
argument_list|()
operator|+
literal|"</TD></TR>"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dispLinks
operator|&&
name|ca
operator|.
name|getClazz
argument_list|()
operator|!=
literal|null
operator|&&
name|ca
operator|.
name|getClazz
argument_list|()
operator|.
name|getNote
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<TR><TD>"
operator|+
name|MSG
operator|.
name|propertyNote
argument_list|()
operator|+
literal|"</TD><TD>"
operator|+
name|ca
operator|.
name|getClazz
argument_list|()
operator|.
name|getNote
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\n"
argument_list|,
literal|"<BR>"
argument_list|)
operator|+
literal|"</TD></TR>"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

