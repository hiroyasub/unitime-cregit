begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionErrors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|util
operator|.
name|LabelValueBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|CSVFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|criterion
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|criterion
operator|.
name|Restrictions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|WebTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|DatePatternEditForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|ClassComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DatePatternDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|TimePatternDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|ExportUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_comment
comment|/**   * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"/datePatternEdit"
argument_list|)
specifier|public
class|class
name|DatePatternEditAction
extends|extends
name|Action
block|{
annotation|@
name|Autowired
name|SessionContext
name|sessionContext
decl_stmt|;
comment|// --------------------------------------------------------- Instance Variables
specifier|private
name|int
name|diff
parameter_list|(
name|Set
name|x
parameter_list|,
name|Set
name|y
parameter_list|)
block|{
name|int
name|diff
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|x
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|o
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|y
operator|.
name|contains
argument_list|(
name|o
argument_list|)
condition|)
name|diff
operator|++
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|y
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|o
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|x
operator|.
name|contains
argument_list|(
name|o
argument_list|)
condition|)
name|diff
operator|++
expr_stmt|;
block|}
return|return
name|diff
return|;
block|}
comment|// --------------------------------------------------------- Methods
comment|/**  	 * Method execute 	 * @param mapping 	 * @param form 	 * @param request 	 * @param response 	 * @return ActionForward 	 */
specifier|public
name|ActionForward
name|execute
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|DatePatternEditForm
name|myForm
init|=
operator|(
name|DatePatternEditForm
operator|)
name|form
decl_stmt|;
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|DatePatterns
argument_list|)
expr_stmt|;
comment|// Read operation to be performed
name|String
name|op
init|=
operator|(
name|myForm
operator|.
name|getOp
argument_list|()
operator|!=
literal|null
condition|?
name|myForm
operator|.
name|getOp
argument_list|()
else|:
name|request
operator|.
name|getParameter
argument_list|(
literal|"op"
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getParameterValues
argument_list|(
literal|"depts"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|depts
init|=
name|request
operator|.
name|getParameterValues
argument_list|(
literal|"depts"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|depts
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|myForm
operator|.
name|getDepartmentIds
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Long
argument_list|(
name|depts
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|getParameterValues
argument_list|(
literal|"prnts"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|prnts
init|=
name|request
operator|.
name|getParameterValues
argument_list|(
literal|"prnts"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|prnts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|myForm
operator|.
name|getParentIds
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Long
argument_list|(
name|prnts
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|op
operator|==
literal|null
condition|)
block|{
name|myForm
operator|.
name|load
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|myForm
operator|.
name|setOp
argument_list|(
literal|"List"
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|setAttribute
argument_list|(
name|DatePattern
operator|.
name|DATE_PATTERN_PARENT_LIST_ATTR
argument_list|,
name|DatePattern
operator|.
name|findAllParents
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|List
name|list
init|=
operator|(
operator|new
name|DepartmentDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|createCriteria
argument_list|(
name|Department
operator|.
name|class
argument_list|)
operator|.
name|add
argument_list|(
name|Restrictions
operator|.
name|eq
argument_list|(
literal|"session.uniqueId"
argument_list|,
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|addOrder
argument_list|(
name|Order
operator|.
name|asc
argument_list|(
literal|"deptCode"
argument_list|)
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|Vector
name|availableDepts
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|list
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|d
init|=
operator|(
name|Department
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|availableDepts
operator|.
name|add
argument_list|(
operator|new
name|LabelValueBean
argument_list|(
name|d
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|"-"
operator|+
name|d
operator|.
name|getName
argument_list|()
argument_list|,
name|d
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|setAttribute
argument_list|(
name|Department
operator|.
name|DEPT_ATTR_NAME
argument_list|,
name|availableDepts
argument_list|)
expr_stmt|;
comment|// Reset Form
if|if
condition|(
literal|"Back"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
if|if
condition|(
name|myForm
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
literal|"hash"
argument_list|,
name|myForm
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|myForm
operator|.
name|load
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|myForm
operator|.
name|setOp
argument_list|(
literal|"List"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"Add Date Pattern"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|myForm
operator|.
name|load
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|myForm
operator|.
name|setSessionId
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
name|myForm
operator|.
name|setOp
argument_list|(
literal|"Save"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"Add Department"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|ActionMessages
name|errors
init|=
operator|new
name|ActionErrors
argument_list|()
decl_stmt|;
if|if
condition|(
name|myForm
operator|.
name|getDepartmentId
argument_list|()
operator|==
literal|null
operator|||
name|myForm
operator|.
name|getDepartmentId
argument_list|()
operator|.
name|longValue
argument_list|()
operator|<
literal|0
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"department"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"No department selected."
argument_list|)
argument_list|)
expr_stmt|;
else|else
block|{
name|boolean
name|contains
init|=
name|myForm
operator|.
name|getDepartmentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|myForm
operator|.
name|getDepartmentId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|contains
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"department"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Department already present in the list of departments."
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|errors
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|myForm
operator|.
name|getDepartmentIds
argument_list|()
operator|.
name|add
argument_list|(
name|myForm
operator|.
name|getDepartmentId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|myForm
operator|.
name|setOp
argument_list|(
name|myForm
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
operator|<
literal|0
condition|?
literal|"Save"
else|:
literal|"Update"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"Add Pattern Set"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|ActionMessages
name|errors
init|=
operator|new
name|ActionErrors
argument_list|()
decl_stmt|;
if|if
condition|(
name|myForm
operator|.
name|getParentId
argument_list|()
operator|==
literal|null
operator|||
name|myForm
operator|.
name|getParentId
argument_list|()
operator|.
name|longValue
argument_list|()
operator|<
literal|0
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"parent"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"No date pattern selected."
argument_list|)
argument_list|)
expr_stmt|;
else|else
block|{
name|boolean
name|contains
init|=
name|myForm
operator|.
name|getParentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|myForm
operator|.
name|getParentId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|contains
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"parent"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Date pattern already present in the list of alternative pattern sets."
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|errors
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|myForm
operator|.
name|getParentIds
argument_list|()
operator|.
name|add
argument_list|(
name|myForm
operator|.
name|getParentId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|myForm
operator|.
name|setOp
argument_list|(
name|myForm
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
operator|<
literal|0
condition|?
literal|"Save"
else|:
literal|"Update"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"Remove Department"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|ActionMessages
name|errors
init|=
operator|new
name|ActionErrors
argument_list|()
decl_stmt|;
if|if
condition|(
name|myForm
operator|.
name|getDepartmentId
argument_list|()
operator|==
literal|null
operator|||
name|myForm
operator|.
name|getDepartmentId
argument_list|()
operator|.
name|longValue
argument_list|()
operator|<
literal|0
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"department"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"No department selected."
argument_list|)
argument_list|)
expr_stmt|;
else|else
block|{
name|boolean
name|contains
init|=
name|myForm
operator|.
name|getDepartmentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|myForm
operator|.
name|getDepartmentId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|contains
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"department"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Department not present in the list of departments."
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|errors
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|myForm
operator|.
name|getDepartmentIds
argument_list|()
operator|.
name|remove
argument_list|(
name|myForm
operator|.
name|getDepartmentId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|myForm
operator|.
name|setOp
argument_list|(
name|myForm
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
operator|<
literal|0
condition|?
literal|"Save"
else|:
literal|"Update"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"Remove Pattern Set"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|ActionMessages
name|errors
init|=
operator|new
name|ActionErrors
argument_list|()
decl_stmt|;
if|if
condition|(
name|myForm
operator|.
name|getParentId
argument_list|()
operator|==
literal|null
operator|||
name|myForm
operator|.
name|getParentId
argument_list|()
operator|.
name|longValue
argument_list|()
operator|<
literal|0
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"parent"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"No date pattern selected."
argument_list|)
argument_list|)
expr_stmt|;
else|else
block|{
name|boolean
name|contains
init|=
name|myForm
operator|.
name|getParentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|myForm
operator|.
name|getParentId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|contains
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"parent"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Date pattern not present in the list of alternative pattern sets."
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|errors
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|myForm
operator|.
name|getParentIds
argument_list|()
operator|.
name|remove
argument_list|(
name|myForm
operator|.
name|getParentId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|myForm
operator|.
name|setOp
argument_list|(
name|myForm
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
operator|<
literal|0
condition|?
literal|"Save"
else|:
literal|"Update"
argument_list|)
expr_stmt|;
block|}
comment|// Add / Update
if|if
condition|(
literal|"Update"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
literal|"Save"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
literal|"Make Default"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
comment|// Validate input
name|ActionMessages
name|errors
init|=
name|myForm
operator|.
name|validate
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|errors
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
name|myForm
operator|.
name|setOp
argument_list|(
name|myForm
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
operator|<
literal|0
condition|?
literal|"Save"
else|:
literal|"Update"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
operator|(
operator|new
name|TimePatternDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|DatePattern
name|dp
init|=
name|myForm
operator|.
name|saveOrUpdate
argument_list|(
name|request
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"Make Default"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|dp
operator|.
name|getSession
argument_list|()
operator|.
name|setDefaultDatePattern
argument_list|(
name|dp
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|dp
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
name|myForm
operator|.
name|setIsDefault
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|sessionContext
argument_list|,
name|dp
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|DATE_PATTERN_EDIT
argument_list|,
operator|(
literal|"Save"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|?
name|ChangeLog
operator|.
name|Operation
operator|.
name|CREATE
else|:
name|ChangeLog
operator|.
name|Operation
operator|.
name|UPDATE
operator|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|myForm
operator|.
name|setOp
argument_list|(
literal|"List"
argument_list|)
expr_stmt|;
if|if
condition|(
name|myForm
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
literal|"hash"
argument_list|,
name|myForm
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Edit
if|if
condition|(
literal|"Edit"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|String
name|id
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|ActionMessages
name|errors
init|=
operator|new
name|ActionMessages
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
operator|||
name|id
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"key"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.invalid"
argument_list|,
literal|"Unique Id : "
operator|+
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"DatePatterns.pattern"
argument_list|,
name|myForm
operator|.
name|getDatePattern
argument_list|(
name|request
argument_list|)
operator|.
name|getPatternHtml
argument_list|(
literal|true
argument_list|,
name|myForm
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"list"
argument_list|)
return|;
block|}
else|else
block|{
name|DatePattern
name|pattern
init|=
operator|(
operator|new
name|DatePatternDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|pattern
operator|==
literal|null
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"name"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.invalid"
argument_list|,
literal|"Unique Id : "
operator|+
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"DatePatterns.pattern"
argument_list|,
name|myForm
operator|.
name|getDatePattern
argument_list|(
name|request
argument_list|)
operator|.
name|getPatternHtml
argument_list|(
literal|true
argument_list|,
name|myForm
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"list"
argument_list|)
return|;
block|}
else|else
block|{
name|myForm
operator|.
name|load
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Delete
if|if
condition|(
literal|"Delete"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
operator|(
operator|new
name|TimePatternDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|DatePattern
name|dp
init|=
operator|(
operator|new
name|DatePatternDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|myForm
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|sessionContext
argument_list|,
name|dp
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|DATE_PATTERN_EDIT
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|DELETE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|myForm
operator|.
name|delete
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|myForm
operator|.
name|load
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|myForm
operator|.
name|setOp
argument_list|(
literal|"List"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"Fix Generated"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
name|PrintWriter
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
operator|(
operator|new
name|TimePatternDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|File
name|file
init|=
name|ApplicationProperties
operator|.
name|getTempFile
argument_list|(
literal|"fix"
argument_list|,
literal|"txt"
argument_list|)
decl_stmt|;
name|out
operator|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DatePattern
argument_list|>
name|allDatePatterns
init|=
name|DatePattern
operator|.
name|findAll
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|DatePattern
name|dp
range|:
name|allDatePatterns
control|)
block|{
if|if
condition|(
operator|!
name|dp
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"generated"
argument_list|)
condition|)
continue|continue;
name|out
operator|.
name|println
argument_list|(
literal|"Checking "
operator|+
name|dp
operator|.
name|getName
argument_list|()
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|List
name|classes
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct c from Class_ as c inner join c.datePattern as dp where dp.uniqueId=:uniqueId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"uniqueId"
argument_list|,
name|dp
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|List
name|subparts
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct s from SchedulingSubpart as s inner join s.datePattern as dp where dp.uniqueId=:uniqueId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"uniqueId"
argument_list|,
name|dp
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|Vector
name|allClasses
init|=
operator|new
name|Vector
argument_list|(
name|classes
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|subparts
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|s
init|=
operator|(
name|SchedulingSubpart
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|k
init|=
name|s
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getDatePattern
argument_list|()
operator|==
literal|null
condition|)
name|allClasses
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|allClasses
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"  -- date pattern is not used -> delete"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|dp
operator|.
name|getDepartments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|d
init|=
operator|(
name|Department
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|d
operator|.
name|getDatePatterns
argument_list|()
operator|.
name|remove
argument_list|(
name|dp
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|sessionContext
argument_list|,
name|dp
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|DATE_PATTERN_EDIT
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|DELETE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|dp
argument_list|)
expr_stmt|;
continue|continue;
block|}
for|for
control|(
name|Iterator
name|j
init|=
name|allClasses
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"  -- used by "
operator|+
name|clazz
operator|.
name|getClassLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|TreeSet
name|days
init|=
name|dp
operator|.
name|getUsage
argument_list|(
name|allClasses
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    -- "
operator|+
name|days
argument_list|)
expr_stmt|;
if|if
condition|(
name|days
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|offset
init|=
name|dp
operator|.
name|getPatternOffset
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|dp
operator|.
name|getPattern
argument_list|()
operator|.
name|length
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
name|dp
operator|.
name|getPattern
argument_list|()
operator|.
name|charAt
argument_list|(
name|x
argument_list|)
operator|!=
literal|'1'
condition|)
continue|continue;
name|days
operator|.
name|add
argument_list|(
operator|new
name|Integer
argument_list|(
name|x
operator|+
name|offset
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|DatePattern
name|likeDp
init|=
literal|null
decl_stmt|;
name|int
name|likeDiff
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|allDatePatterns
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DatePattern
name|xdp
init|=
operator|(
name|DatePattern
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|xdp
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"generated"
argument_list|)
condition|)
continue|continue;
name|TreeSet
name|xdays
init|=
name|xdp
operator|.
name|getUsage
argument_list|(
name|allClasses
argument_list|)
decl_stmt|;
if|if
condition|(
name|xdays
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|offset
init|=
name|xdp
operator|.
name|getPatternOffset
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|xdp
operator|.
name|getPattern
argument_list|()
operator|.
name|length
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
name|xdp
operator|.
name|getPattern
argument_list|()
operator|.
name|charAt
argument_list|(
name|x
argument_list|)
operator|!=
literal|'1'
condition|)
continue|continue;
name|xdays
operator|.
name|add
argument_list|(
operator|new
name|Integer
argument_list|(
name|x
operator|+
name|offset
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|diff
init|=
name|diff
argument_list|(
name|days
argument_list|,
name|xdays
argument_list|)
decl_stmt|;
if|if
condition|(
name|likeDp
operator|==
literal|null
operator|||
name|likeDiff
operator|>
name|diff
operator|||
operator|(
name|likeDiff
operator|==
name|diff
operator|&&
name|xdp
operator|.
name|isDefault
argument_list|()
operator|)
condition|)
block|{
name|likeDp
operator|=
name|xdp
expr_stmt|;
name|likeDiff
operator|=
name|diff
expr_stmt|;
block|}
block|}
if|if
condition|(
name|likeDp
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|likeDiff
operator|<=
literal|5
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"      -- like "
operator|+
name|likeDp
operator|.
name|getName
argument_list|()
operator|+
literal|", diff="
operator|+
name|likeDiff
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"      -- "
operator|+
name|likeDp
operator|.
name|getUsage
argument_list|(
name|allClasses
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    -- transfering all classes and subparts from "
operator|+
name|dp
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|likeDp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|classes
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|clazz
operator|.
name|setDatePattern
argument_list|(
name|likeDp
operator|.
name|isDefault
argument_list|()
condition|?
literal|null
else|:
name|likeDp
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|j
init|=
name|subparts
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|subpart
init|=
operator|(
name|SchedulingSubpart
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|subpart
operator|.
name|setDatePattern
argument_list|(
name|likeDp
operator|.
name|isDefault
argument_list|()
condition|?
literal|null
else|:
name|likeDp
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|subpart
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"    -- deleting date pattern "
operator|+
name|dp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|dp
operator|.
name|getDepartments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|d
init|=
operator|(
name|Department
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|d
operator|.
name|getDatePatterns
argument_list|()
operator|.
name|remove
argument_list|(
name|dp
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|sessionContext
argument_list|,
name|dp
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|DATE_PATTERN_EDIT
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|DELETE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|dp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"      -- like "
operator|+
name|likeDp
operator|.
name|getName
argument_list|()
operator|+
literal|", diff="
operator|+
name|likeDiff
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"      -- "
operator|+
name|likeDp
operator|.
name|getUsage
argument_list|(
name|allClasses
argument_list|)
argument_list|)
expr_stmt|;
name|Formats
operator|.
name|Format
argument_list|<
name|Date
argument_list|>
name|sdf
init|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|DATE_EVENT_SHORT
argument_list|)
decl_stmt|;
name|dp
operator|.
name|setName
argument_list|(
literal|"generated "
operator|+
name|sdf
operator|.
name|format
argument_list|(
name|dp
operator|.
name|getStartDate
argument_list|()
argument_list|)
operator|+
literal|" - "
operator|+
name|sdf
operator|.
name|format
argument_list|(
name|dp
operator|.
name|getEndDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|dp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|=
literal|null
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|REQUEST_OPEN_URL
argument_list|,
literal|"temp/"
operator|+
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|myForm
operator|.
name|load
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|myForm
operator|.
name|setOp
argument_list|(
literal|"List"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"Generate SQL"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|PrintWriter
name|out
init|=
name|ExportUtils
operator|.
name|getPlainTextWriter
argument_list|(
name|response
argument_list|,
literal|"tp.sql"
argument_list|)
decl_stmt|;
try|try
block|{
name|TreeSet
name|patterns
init|=
operator|new
name|TreeSet
argument_list|(
name|DatePattern
operator|.
name|findAll
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|mysql
init|=
literal|false
decl_stmt|;
name|int
name|line
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|mysql
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"INSERT INTO `timetable`.`date_pattern`(`uniqueid`, `name`, `pattern`, `offset`, `type`, `visible`, `session_id`)"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"prompt Loading DATE_PATTERN..."
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|patterns
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DatePattern
name|dp
init|=
operator|(
name|DatePattern
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|dp
operator|.
name|getType
argument_list|()
operator|==
name|DatePattern
operator|.
name|sTypeExtended
condition|)
continue|continue;
if|if
condition|(
operator|!
name|dp
operator|.
name|isVisible
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|mysql
condition|)
block|{
if|if
condition|(
name|line
operator|==
literal|0
condition|)
name|out
operator|.
name|print
argument_list|(
literal|"VALUES"
argument_list|)
expr_stmt|;
else|else
name|out
operator|.
name|println
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|" ("
operator|+
name|dp
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|", '"
operator|+
name|dp
operator|.
name|getName
argument_list|()
operator|+
literal|"', '"
operator|+
name|dp
operator|.
name|getPattern
argument_list|()
operator|+
literal|"', "
operator|+
name|dp
operator|.
name|getOffset
argument_list|()
operator|+
literal|", "
operator|+
name|dp
operator|.
name|getType
argument_list|()
operator|+
literal|", "
operator|+
operator|(
name|dp
operator|.
name|isVisible
argument_list|()
condition|?
literal|"1"
else|:
literal|"0"
operator|)
operator|+
literal|", "
operator|+
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"insert into DATE_PATTERN (UNIQUEID, NAME, PATTERN, OFFSET, TYPE, VISIBLE, SESSION_ID)"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"values ("
operator|+
name|dp
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|", '"
operator|+
name|dp
operator|.
name|getName
argument_list|()
operator|+
literal|"', '"
operator|+
name|dp
operator|.
name|getPattern
argument_list|()
operator|+
literal|"', "
operator|+
name|dp
operator|.
name|getOffset
argument_list|()
operator|+
literal|", "
operator|+
name|dp
operator|.
name|getType
argument_list|()
operator|+
literal|", "
operator|+
operator|(
name|dp
operator|.
name|isVisible
argument_list|()
condition|?
literal|"1"
else|:
literal|"0"
operator|)
operator|+
literal|", "
operator|+
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
operator|+
literal|");"
argument_list|)
expr_stmt|;
block|}
name|line
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|mysql
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"commit;"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"prompt "
operator|+
name|line
operator|+
literal|" records loaded"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
if|if
condition|(
literal|"Push Up"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
name|PrintWriter
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
operator|(
operator|new
name|TimePatternDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|File
name|file
init|=
name|ApplicationProperties
operator|.
name|getTempFile
argument_list|(
literal|"push"
argument_list|,
literal|"txt"
argument_list|)
decl_stmt|;
name|out
operator|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|List
name|subparts
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct c.schedulingSubpart from Class_ as c inner join c.datePattern as dp where dp.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|subparts
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|subpart
init|=
operator|(
name|SchedulingSubpart
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Checking "
operator|+
name|subpart
operator|.
name|getSchedulingSubpartLabel
argument_list|()
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|boolean
name|sameDatePattern
init|=
literal|true
decl_stmt|;
name|DatePattern
name|dp
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|subpart
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getDatePattern
argument_list|()
operator|==
literal|null
condition|)
block|{
name|sameDatePattern
operator|=
literal|false
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|dp
operator|==
literal|null
condition|)
name|dp
operator|=
name|clazz
operator|.
name|getDatePattern
argument_list|()
expr_stmt|;
if|else if
condition|(
operator|!
name|dp
operator|.
name|equals
argument_list|(
name|clazz
operator|.
name|getDatePattern
argument_list|()
argument_list|)
condition|)
block|{
name|sameDatePattern
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|sameDatePattern
condition|)
continue|continue;
name|out
operator|.
name|println
argument_list|(
literal|"  -- all classes share same date pattern "
operator|+
name|dp
operator|.
name|getName
argument_list|()
operator|+
literal|" --> pushing it to subpart"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|subpart
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|clazz
operator|.
name|setDatePattern
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
name|subpart
operator|.
name|setDatePattern
argument_list|(
name|dp
operator|.
name|isDefault
argument_list|()
condition|?
literal|null
else|:
name|dp
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|subpart
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|=
literal|null
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|REQUEST_OPEN_URL
argument_list|,
literal|"temp/"
operator|+
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|myForm
operator|.
name|load
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|myForm
operator|.
name|setOp
argument_list|(
literal|"List"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"Assign Departments"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
name|PrintWriter
name|out
init|=
literal|null
decl_stmt|;
name|HashSet
name|refresh
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
try|try
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
operator|(
operator|new
name|TimePatternDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|File
name|file
init|=
name|ApplicationProperties
operator|.
name|getTempFile
argument_list|(
literal|"assigndept"
argument_list|,
literal|"txt"
argument_list|)
decl_stmt|;
name|out
operator|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|TreeSet
name|allDatePatterns
init|=
operator|new
name|TreeSet
argument_list|(
name|DatePattern
operator|.
name|findAll
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|allDatePatterns
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DatePattern
name|dp
init|=
operator|(
name|DatePattern
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|dp
operator|.
name|getType
argument_list|()
operator|.
name|intValue
argument_list|()
operator|!=
name|DatePattern
operator|.
name|sTypeExtended
condition|)
continue|continue;
name|out
operator|.
name|println
argument_list|(
literal|"Checking "
operator|+
name|dp
operator|.
name|getName
argument_list|()
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|List
name|classes
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct c from Class_ as c inner join c.datePattern as dp where dp.uniqueId=:uniqueId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"uniqueId"
argument_list|,
name|dp
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|List
name|subparts
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct s from SchedulingSubpart as s inner join s.datePattern as dp where dp.uniqueId=:uniqueId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"uniqueId"
argument_list|,
name|dp
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|HashSet
name|depts
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|classes
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|depts
operator|.
name|add
argument_list|(
name|c
operator|.
name|getManagingDept
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|j
init|=
name|subparts
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|s
init|=
operator|(
name|SchedulingSubpart
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|depts
operator|.
name|add
argument_list|(
name|s
operator|.
name|getManagingDept
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"  -- departments: "
operator|+
name|depts
argument_list|)
expr_stmt|;
name|boolean
name|added
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|depts
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|d
init|=
operator|(
name|Department
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|.
name|isExternalManager
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
comment|/* 	            				if (dp.getDepartments().contains(d)) { 	            					dp.getDepartments().remove(d); 	            					d.getDatePatterns().remove(dp); 	            					hibSession.saveOrUpdate(d); 	                				out.println("    -- department "+d+" removed from "+dp.getName()); 	                				added=true; 	            				}*/
continue|continue;
block|}
if|if
condition|(
operator|!
name|dp
operator|.
name|getDepartments
argument_list|()
operator|.
name|contains
argument_list|(
name|d
argument_list|)
condition|)
block|{
name|dp
operator|.
name|getDepartments
argument_list|()
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|d
operator|.
name|getDatePatterns
argument_list|()
operator|.
name|add
argument_list|(
name|dp
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    -- department "
operator|+
name|d
operator|+
literal|" added to "
operator|+
name|dp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|added
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|added
condition|)
block|{
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|dp
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|sessionContext
argument_list|,
name|dp
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|DATE_PATTERN_EDIT
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|UPDATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|refresh
operator|.
name|add
argument_list|(
name|dp
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|=
literal|null
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|REQUEST_OPEN_URL
argument_list|,
literal|"temp/"
operator|+
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|refresh
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|hibSession
operator|.
name|refresh
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|myForm
operator|.
name|load
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|myForm
operator|.
name|setOp
argument_list|(
literal|"List"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"Export CSV"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
operator|(
operator|new
name|TimePatternDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|CSVFile
name|csv
init|=
operator|new
name|CSVFile
argument_list|()
decl_stmt|;
name|csv
operator|.
name|setHeader
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
index|[]
block|{
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|"Name"
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|"Type"
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|"NrDays"
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|"From"
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|"To"
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|"Dates"
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|"Parent"
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|"Departments"
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|"Classes"
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|Formats
operator|.
name|Format
argument_list|<
name|Date
argument_list|>
name|sdf
init|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|DATE_EVENT_SHORT
argument_list|)
decl_stmt|;
name|TreeSet
name|allDatePatterns
init|=
operator|new
name|TreeSet
argument_list|(
name|DatePattern
operator|.
name|findAll
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|allDatePatterns
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DatePattern
name|dp
init|=
operator|(
name|DatePattern
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|List
name|classes
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct c from Class_ as c inner join c.datePattern as dp where dp.uniqueId=:uniqueId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"uniqueId"
argument_list|,
name|dp
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|List
name|subparts
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct s from SchedulingSubpart as s inner join s.datePattern as dp where dp.uniqueId=:uniqueId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"uniqueId"
argument_list|,
name|dp
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|TreeSet
name|allClasses
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|ClassComparator
argument_list|(
name|ClassComparator
operator|.
name|COMPARE_BY_HIERARCHY
argument_list|)
argument_list|)
decl_stmt|;
name|allClasses
operator|.
name|addAll
argument_list|(
name|classes
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|subparts
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|s
init|=
operator|(
name|SchedulingSubpart
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|k
init|=
name|s
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getDatePattern
argument_list|()
operator|==
literal|null
condition|)
name|allClasses
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|deptStr
init|=
literal|""
decl_stmt|;
name|TreeSet
name|depts
init|=
operator|new
name|TreeSet
argument_list|(
name|dp
operator|.
name|getDepartments
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|depts
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|d
init|=
operator|(
name|Department
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|deptStr
operator|+=
name|d
operator|.
name|getShortLabel
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|j
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|deptStr
operator|+=
literal|", "
expr_stmt|;
block|}
block|}
name|String
name|classStr
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|allClasses
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|classStr
operator|+=
name|clazz
operator|.
name|getClassLabel
argument_list|()
expr_stmt|;
if|if
condition|(
name|j
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|classStr
operator|+=
literal|", "
expr_stmt|;
block|}
block|}
name|String
name|datePattStr
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|dp
operator|.
name|getParents
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DatePattern
name|d
init|=
operator|(
name|DatePattern
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|datePattStr
operator|+=
name|d
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|j
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|datePattStr
operator|+=
literal|", "
expr_stmt|;
block|}
block|}
name|csv
operator|.
name|addLine
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
index|[]
block|{
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|dp
operator|.
name|getName
argument_list|()
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|DatePattern
operator|.
name|sTypes
index|[
name|dp
operator|.
name|getType
argument_list|()
operator|.
name|intValue
argument_list|()
index|]
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|dp
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|sdf
operator|.
name|format
argument_list|(
name|dp
operator|.
name|getStartDate
argument_list|()
argument_list|)
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|sdf
operator|.
name|format
argument_list|(
name|dp
operator|.
name|getEndDate
argument_list|()
argument_list|)
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|dp
operator|.
name|getPatternString
argument_list|()
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|datePattStr
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|deptStr
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|classStr
argument_list|)
block|}
argument_list|)
expr_stmt|;
comment|/* 	                	System.out.println( 	                			"insert into date_pattern (uniqueid, name, pattern, offset, type, visible, session_id) values (" + 	                			"DATE_PATTERN_SEQ.Nextval, "+ 	                			"'"+dp.getName()+"', "+ 	                			"'"+dp.getPattern()+"', "+ 	                			dp.getOffset()+", "+ 	                			dp.getType()+", "+ 	                			(dp.isVisible().booleanValue()?1:0)+", "+ 	                			dp.getSession().getUniqueId()+");"); 						*/
block|}
name|ExportUtils
operator|.
name|exportCSV
argument_list|(
name|csv
argument_list|,
name|response
argument_list|,
literal|"datePatterns"
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
if|if
condition|(
literal|"List"
operator|.
name|equals
argument_list|(
name|myForm
operator|.
name|getOp
argument_list|()
argument_list|)
condition|)
block|{
comment|// Read all existing settings and store in request
name|getDatePatterns
argument_list|(
name|request
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"list"
argument_list|)
return|;
block|}
name|request
operator|.
name|setAttribute
argument_list|(
literal|"DatePatterns.pattern"
argument_list|,
name|myForm
operator|.
name|getDatePattern
argument_list|(
name|request
argument_list|)
operator|.
name|getPatternHtml
argument_list|(
literal|true
argument_list|,
name|myForm
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
name|myForm
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
operator|<
literal|0
condition|?
literal|"add"
else|:
literal|"edit"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|private
name|void
name|getDatePatterns
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|Exception
block|{
name|Set
name|used
init|=
name|DatePattern
operator|.
name|findAllUsed
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|hasSet
init|=
operator|!
name|DatePattern
operator|.
name|findAllParents
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
name|Formats
operator|.
name|Format
argument_list|<
name|Date
argument_list|>
name|sdf
init|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|DATE_EXAM_PERIOD
argument_list|)
decl_stmt|;
name|WebTable
operator|.
name|setOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"datePatterns.ord"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"ord"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Create web table instance
name|WebTable
name|webTable
init|=
operator|(
name|hasSet
condition|?
operator|new
name|WebTable
argument_list|(
literal|6
argument_list|,
literal|null
argument_list|,
literal|"datePatternEdit.do?ord=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Name"
block|,
literal|"Type"
block|,
literal|"Used"
block|,
literal|"Dates / Patterns"
block|,
literal|"Pattern Sets"
block|,
literal|"Departments"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
literal|null
argument_list|)
else|:
operator|new
name|WebTable
argument_list|(
literal|5
argument_list|,
literal|null
argument_list|,
literal|"datePatternEdit.do?ord=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Name"
block|,
literal|"Type"
block|,
literal|"Used"
block|,
literal|"Dates"
block|,
literal|"Departments"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
literal|null
argument_list|)
operator|)
decl_stmt|;
name|List
argument_list|<
name|DatePattern
argument_list|>
name|patterns
init|=
name|DatePattern
operator|.
name|findAll
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|patterns
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|webTable
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"No date pattern defined for this session."
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|DatePattern
name|pattern
range|:
name|patterns
control|)
block|{
name|String
name|onClick
init|=
literal|"onClick=\"document.location='datePatternEdit.do?op=Edit&id="
operator|+
name|pattern
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"';\""
decl_stmt|;
name|String
name|deptStr
init|=
literal|""
decl_stmt|;
name|String
name|deptCmp
init|=
literal|""
decl_stmt|;
name|TreeSet
name|depts
init|=
operator|new
name|TreeSet
argument_list|(
name|pattern
operator|.
name|getDepartments
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|depts
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|d
init|=
operator|(
name|Department
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|deptStr
operator|+=
name|d
operator|.
name|getManagingDeptAbbv
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|deptCmp
operator|+=
name|d
operator|.
name|getDeptCode
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|deptStr
operator|+=
literal|", "
expr_stmt|;
name|deptCmp
operator|+=
literal|","
expr_stmt|;
block|}
block|}
name|String
name|datePatternStr
init|=
literal|""
decl_stmt|;
name|List
name|dps
init|=
operator|new
name|ArrayList
argument_list|(
name|pattern
operator|.
name|getParents
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|dps
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|dps
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DatePattern
name|d
init|=
operator|(
name|DatePattern
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|datePatternStr
operator|+=
name|d
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|datePatternStr
operator|+=
literal|", "
expr_stmt|;
block|}
block|}
name|String
name|pattStr
init|=
name|pattern
operator|.
name|getPatternString
argument_list|()
decl_stmt|;
if|if
condition|(
name|pattern
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"generated"
argument_list|)
condition|)
block|{
name|int
name|first
init|=
name|pattern
operator|.
name|getPattern
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|'1'
argument_list|)
operator|-
name|pattern
operator|.
name|getOffset
argument_list|()
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|int
name|last
init|=
name|pattern
operator|.
name|getPattern
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|'1'
argument_list|)
operator|-
name|pattern
operator|.
name|getOffset
argument_list|()
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|DatePattern
name|likeDp
init|=
literal|null
decl_stmt|;
name|int
name|likeDiff
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|patterns
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DatePattern
name|xdp
init|=
operator|(
name|DatePattern
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|xdp
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"generated"
argument_list|)
condition|)
continue|continue;
name|int
name|xfirst
init|=
name|xdp
operator|.
name|getPattern
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|'1'
argument_list|)
operator|-
name|xdp
operator|.
name|getOffset
argument_list|()
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|int
name|xlast
init|=
name|xdp
operator|.
name|getPattern
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|'1'
argument_list|)
operator|-
name|xdp
operator|.
name|getOffset
argument_list|()
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|int
name|diff
init|=
name|Math
operator|.
name|abs
argument_list|(
name|first
operator|-
name|xfirst
argument_list|)
operator|+
name|Math
operator|.
name|abs
argument_list|(
name|last
operator|-
name|xlast
argument_list|)
decl_stmt|;
if|if
condition|(
name|likeDp
operator|==
literal|null
operator|||
name|likeDiff
operator|>
name|diff
operator|||
operator|(
name|likeDiff
operator|==
name|diff
operator|&&
name|xdp
operator|.
name|isDefault
argument_list|()
operator|)
condition|)
block|{
name|likeDp
operator|=
name|xdp
expr_stmt|;
name|likeDiff
operator|=
name|diff
expr_stmt|;
block|}
block|}
if|if
condition|(
name|likeDp
operator|!=
literal|null
condition|)
block|{
name|int
name|xfirst
init|=
name|likeDp
operator|.
name|getPattern
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|'1'
argument_list|)
operator|-
name|likeDp
operator|.
name|getOffset
argument_list|()
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|int
name|xlast
init|=
name|likeDp
operator|.
name|getPattern
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|'1'
argument_list|)
operator|-
name|likeDp
operator|.
name|getOffset
argument_list|()
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|int
name|firstDiff
init|=
name|first
operator|-
name|xfirst
decl_stmt|;
name|int
name|lastDiff
init|=
name|last
operator|-
name|xlast
decl_stmt|;
if|if
condition|(
name|Math
operator|.
name|abs
argument_list|(
name|lastDiff
argument_list|)
operator|>
literal|3
operator|||
name|Math
operator|.
name|abs
argument_list|(
name|firstDiff
argument_list|)
operator|>
literal|3
condition|)
name|pattStr
operator|+=
literal|"<b>"
expr_stmt|;
name|pattStr
operator|+=
literal|"<br>Similar to "
operator|+
name|likeDp
operator|.
name|getName
argument_list|()
operator|+
literal|" (offset "
operator|+
name|firstDiff
operator|+
literal|" and "
operator|+
name|lastDiff
operator|+
literal|" days)"
expr_stmt|;
name|pattStr
operator|+=
literal|"<br>"
operator|+
name|sdf
operator|.
name|format
argument_list|(
name|pattern
operator|.
name|getStartDate
argument_list|()
argument_list|)
operator|+
literal|"-"
operator|+
name|sdf
operator|.
name|format
argument_list|(
name|pattern
operator|.
name|getEndDate
argument_list|()
argument_list|)
operator|+
literal|" versus "
operator|+
name|sdf
operator|.
name|format
argument_list|(
name|likeDp
operator|.
name|getStartDate
argument_list|()
argument_list|)
operator|+
literal|"-"
operator|+
name|sdf
operator|.
name|format
argument_list|(
name|likeDp
operator|.
name|getEndDate
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|Math
operator|.
name|abs
argument_list|(
name|lastDiff
argument_list|)
operator|>
literal|3
operator|||
name|Math
operator|.
name|abs
argument_list|(
name|firstDiff
argument_list|)
operator|>
literal|3
condition|)
name|pattStr
operator|+=
literal|"</b>"
expr_stmt|;
block|}
block|}
if|if
condition|(
name|pattern
operator|.
name|getType
argument_list|()
operator|==
name|DatePattern
operator|.
name|sTypePatternSet
condition|)
block|{
for|for
control|(
name|DatePattern
name|child
range|:
operator|new
name|TreeSet
argument_list|<
name|DatePattern
argument_list|>
argument_list|(
name|pattern
operator|.
name|findChildren
argument_list|()
argument_list|)
control|)
block|{
name|pattStr
operator|+=
operator|(
name|pattStr
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|", "
operator|)
operator|+
name|child
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
block|}
name|boolean
name|isUsed
init|=
name|used
operator|.
name|contains
argument_list|(
name|pattern
argument_list|)
operator|||
name|pattern
operator|.
name|isDefault
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasSet
condition|)
name|webTable
operator|.
name|addLine
argument_list|(
name|onClick
argument_list|,
operator|new
name|String
index|[]
block|{
operator|(
name|pattern
operator|.
name|isDefault
argument_list|()
condition|?
literal|"<B>"
else|:
literal|""
operator|)
operator|+
operator|(
name|pattern
operator|.
name|isVisible
argument_list|()
condition|?
literal|""
else|:
literal|"<font color='gray'>"
operator|)
operator|+
literal|"<a name='"
operator|+
name|pattern
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"'>"
operator|+
name|pattern
operator|.
name|getName
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|"&nbsp;"
argument_list|)
operator|+
literal|"</a>"
operator|+
operator|(
name|pattern
operator|.
name|isVisible
argument_list|()
condition|?
literal|""
else|:
literal|"</font>"
operator|)
operator|+
operator|(
name|pattern
operator|.
name|isDefault
argument_list|()
condition|?
literal|"</B>"
else|:
literal|""
operator|)
block|,
operator|(
name|pattern
operator|.
name|isVisible
argument_list|()
condition|?
literal|""
else|:
literal|"<font color='gray'>"
operator|)
operator|+
name|DatePattern
operator|.
name|sTypes
index|[
name|pattern
operator|.
name|getType
argument_list|()
operator|.
name|intValue
argument_list|()
index|]
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|"&nbsp;"
argument_list|)
operator|+
operator|(
name|pattern
operator|.
name|isVisible
argument_list|()
condition|?
literal|""
else|:
literal|"</font>"
operator|)
block|,
operator|(
name|isUsed
condition|?
literal|"<IMG border='0' title='This date pattern is being used.' alt='Default' align='absmiddle' src='images/accept.png'>"
else|:
literal|""
operator|)
block|,
operator|(
name|pattern
operator|.
name|isVisible
argument_list|()
condition|?
literal|""
else|:
literal|"<font color='gray'>"
operator|)
operator|+
name|pattStr
operator|+
operator|(
name|pattern
operator|.
name|isVisible
argument_list|()
condition|?
literal|""
else|:
literal|"</font>"
operator|)
block|,
operator|(
name|pattern
operator|.
name|isVisible
argument_list|()
condition|?
literal|""
else|:
literal|"<font color='gray'>"
operator|)
operator|+
name|datePatternStr
operator|+
operator|(
name|pattern
operator|.
name|isVisible
argument_list|()
condition|?
literal|""
else|:
literal|"</font>"
operator|)
block|,
operator|(
name|pattern
operator|.
name|isVisible
argument_list|()
condition|?
literal|""
else|:
literal|"<font color='gray'>"
operator|)
operator|+
name|deptStr
operator|+
operator|(
name|pattern
operator|.
name|isVisible
argument_list|()
condition|?
literal|""
else|:
literal|"</font>"
operator|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|pattern
operator|.
name|getName
argument_list|()
block|,
name|pattern
operator|.
name|getType
argument_list|()
block|,
operator|(
name|isUsed
condition|?
literal|"0"
else|:
literal|"1"
operator|)
block|,
name|pattStr
block|,
name|datePatternStr
block|,
name|deptCmp
block|,             		}
argument_list|)
expr_stmt|;
else|else
name|webTable
operator|.
name|addLine
argument_list|(
name|onClick
argument_list|,
operator|new
name|String
index|[]
block|{
operator|(
name|pattern
operator|.
name|isDefault
argument_list|()
condition|?
literal|"<B>"
else|:
literal|""
operator|)
operator|+
operator|(
name|pattern
operator|.
name|isVisible
argument_list|()
condition|?
literal|""
else|:
literal|"<font color='gray'>"
operator|)
operator|+
literal|"<a name='"
operator|+
name|pattern
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"'>"
operator|+
name|pattern
operator|.
name|getName
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|"&nbsp;"
argument_list|)
operator|+
literal|"</a>"
operator|+
operator|(
name|pattern
operator|.
name|isVisible
argument_list|()
condition|?
literal|""
else|:
literal|"</font>"
operator|)
operator|+
operator|(
name|pattern
operator|.
name|isDefault
argument_list|()
condition|?
literal|"</B>"
else|:
literal|""
operator|)
block|,
operator|(
name|pattern
operator|.
name|isVisible
argument_list|()
condition|?
literal|""
else|:
literal|"<font color='gray'>"
operator|)
operator|+
name|DatePattern
operator|.
name|sTypes
index|[
name|pattern
operator|.
name|getType
argument_list|()
operator|.
name|intValue
argument_list|()
index|]
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|"&nbsp;"
argument_list|)
operator|+
operator|(
name|pattern
operator|.
name|isVisible
argument_list|()
condition|?
literal|""
else|:
literal|"</font>"
operator|)
block|,
operator|(
name|isUsed
condition|?
literal|"<IMG border='0' title='This date pattern is being used.' alt='Default' align='absmiddle' src='images/accept.png'>"
else|:
literal|""
operator|)
block|,
operator|(
name|pattern
operator|.
name|isVisible
argument_list|()
condition|?
literal|""
else|:
literal|"<font color='gray'>"
operator|)
operator|+
name|pattStr
operator|+
operator|(
name|pattern
operator|.
name|isVisible
argument_list|()
condition|?
literal|""
else|:
literal|"</font>"
operator|)
block|,
operator|(
name|pattern
operator|.
name|isVisible
argument_list|()
condition|?
literal|""
else|:
literal|"<font color='gray'>"
operator|)
operator|+
name|deptStr
operator|+
operator|(
name|pattern
operator|.
name|isVisible
argument_list|()
condition|?
literal|""
else|:
literal|"</font>"
operator|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|pattern
operator|.
name|getName
argument_list|()
block|,
name|pattern
operator|.
name|getType
argument_list|()
block|,
operator|(
name|isUsed
condition|?
literal|"0"
else|:
literal|"1"
operator|)
block|,
name|pattStr
block|,
name|deptCmp
block|,             		}
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|setAttribute
argument_list|(
literal|"DatePatterns.table"
argument_list|,
name|webTable
operator|.
name|printTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"datePatterns.ord"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

