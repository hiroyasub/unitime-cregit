begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|WebTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|SessionAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|ManageSolversForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverParameterGroup
operator|.
name|SolverType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverPredefinedSetting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExamTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SolverGroupDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SolverPredefinedSettingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|basic
operator|.
name|GetInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|qualifiers
operator|.
name|SimpleQualifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|CommonSolverInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|SolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ExamSolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|instructor
operator|.
name|InstructorSchedulingProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|jgroups
operator|.
name|SolverServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|service
operator|.
name|SolverServerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|service
operator|.
name|SolverService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|studentsct
operator|.
name|StudentSolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|LookupTables
import|;
end_import

begin_comment
comment|/**   * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"/manageSolvers"
argument_list|)
specifier|public
class|class
name|ManageSolversAction
extends|extends
name|Action
block|{
specifier|protected
specifier|static
name|GwtMessages
name|MESSAGES
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Formats
operator|.
name|Format
argument_list|<
name|Date
argument_list|>
name|sDF
init|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|DATE_TIME_STAMP
argument_list|)
decl_stmt|;
annotation|@
name|Autowired
name|SessionContext
name|sessionContext
decl_stmt|;
annotation|@
name|Autowired
name|SolverService
argument_list|<
name|SolverProxy
argument_list|>
name|courseTimetablingSolverService
decl_stmt|;
annotation|@
name|Autowired
name|SolverService
argument_list|<
name|ExamSolverProxy
argument_list|>
name|examinationSolverService
decl_stmt|;
annotation|@
name|Autowired
name|SolverService
argument_list|<
name|StudentSolverProxy
argument_list|>
name|studentSectioningSolverService
decl_stmt|;
annotation|@
name|Autowired
name|SolverService
argument_list|<
name|InstructorSchedulingProxy
argument_list|>
name|instructorSchedulingSolverService
decl_stmt|;
annotation|@
name|Autowired
name|SolverServerService
name|solverServerService
decl_stmt|;
specifier|protected
name|SolverService
argument_list|<
name|?
extends|extends
name|CommonSolverInterface
argument_list|>
name|getSolverService
parameter_list|(
name|SolverType
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|COURSE
case|:
return|return
name|courseTimetablingSolverService
return|;
case|case
name|EXAM
case|:
return|return
name|examinationSolverService
return|;
case|case
name|STUDENT
case|:
return|return
name|studentSectioningSolverService
return|;
case|case
name|INSTRUCTOR
case|:
return|return
name|instructorSchedulingSolverService
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|MESSAGES
operator|.
name|errorSolverInvalidType
argument_list|(
name|type
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|public
name|ActionForward
name|execute
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
name|ManageSolversForm
name|myForm
init|=
operator|(
name|ManageSolversForm
operator|)
name|form
decl_stmt|;
comment|// Check Access.
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|ManageSolvers
argument_list|)
expr_stmt|;
comment|// Read operation to be performed
name|String
name|op
init|=
operator|(
name|myForm
operator|.
name|getOp
argument_list|()
operator|!=
literal|null
condition|?
name|myForm
operator|.
name|getOp
argument_list|()
else|:
name|request
operator|.
name|getParameter
argument_list|(
literal|"op"
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
literal|"Select"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|&&
name|request
operator|.
name|getParameter
argument_list|(
literal|"owner"
argument_list|)
operator|!=
literal|null
operator|&&
name|request
operator|.
name|getParameter
argument_list|(
literal|"type"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|SolverType
name|type
init|=
name|SolverType
operator|.
name|valueOf
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"type"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|puid
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"owner"
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|COURSE
case|:
name|sessionContext
operator|.
name|setAttribute
argument_list|(
name|SessionAttribute
operator|.
name|CourseTimetablingUser
argument_list|,
name|puid
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|removeAttribute
argument_list|(
name|SessionAttribute
operator|.
name|CourseTimetablingSolver
argument_list|)
expr_stmt|;
if|if
condition|(
name|ApplicationProperty
operator|.
name|LegacySolver
operator|.
name|isTrue
argument_list|()
condition|)
block|{
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showSolver"
argument_list|)
return|;
block|}
else|else
block|{
name|response
operator|.
name|sendRedirect
argument_list|(
literal|"gwt.jsp?page=solver&type=course"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
case|case
name|EXAM
case|:
name|sessionContext
operator|.
name|setAttribute
argument_list|(
name|SessionAttribute
operator|.
name|ExaminationUser
argument_list|,
name|puid
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|removeAttribute
argument_list|(
name|SessionAttribute
operator|.
name|ExaminationSolver
argument_list|)
expr_stmt|;
name|LookupTables
operator|.
name|setupExamTypes
argument_list|(
name|request
argument_list|,
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ApplicationProperty
operator|.
name|LegacySolver
operator|.
name|isTrue
argument_list|()
condition|)
block|{
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showExamSolver"
argument_list|)
return|;
block|}
else|else
block|{
name|response
operator|.
name|sendRedirect
argument_list|(
literal|"gwt.jsp?page=solver&type=exam"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
case|case
name|STUDENT
case|:
name|sessionContext
operator|.
name|setAttribute
argument_list|(
name|SessionAttribute
operator|.
name|StudentSectioningUser
argument_list|,
name|puid
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|removeAttribute
argument_list|(
name|SessionAttribute
operator|.
name|StudentSectioningSolver
argument_list|)
expr_stmt|;
if|if
condition|(
name|ApplicationProperty
operator|.
name|LegacySolver
operator|.
name|isTrue
argument_list|()
condition|)
block|{
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showStudentSolver"
argument_list|)
return|;
block|}
else|else
block|{
name|response
operator|.
name|sendRedirect
argument_list|(
literal|"gwt.jsp?page=solver&type=student"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
case|case
name|INSTRUCTOR
case|:
name|sessionContext
operator|.
name|setAttribute
argument_list|(
name|SessionAttribute
operator|.
name|InstructorSchedulingUser
argument_list|,
name|puid
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|removeAttribute
argument_list|(
name|SessionAttribute
operator|.
name|InstructorSchedulingSolver
argument_list|)
expr_stmt|;
name|response
operator|.
name|sendRedirect
argument_list|(
literal|"gwt.jsp?page=solver&type=instructor"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
if|if
condition|(
literal|"Unload"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|&&
name|request
operator|.
name|getParameter
argument_list|(
literal|"owner"
argument_list|)
operator|!=
literal|null
operator|&&
name|request
operator|.
name|getParameter
argument_list|(
literal|"type"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|SolverType
name|type
init|=
name|SolverType
operator|.
name|valueOf
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"type"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|puid
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"owner"
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|COURSE
case|:
name|sessionContext
operator|.
name|setAttribute
argument_list|(
name|SessionAttribute
operator|.
name|CourseTimetablingUser
argument_list|,
name|puid
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|removeAttribute
argument_list|(
name|SessionAttribute
operator|.
name|CourseTimetablingSolver
argument_list|)
expr_stmt|;
name|courseTimetablingSolverService
operator|.
name|removeSolver
argument_list|()
expr_stmt|;
break|break;
case|case
name|EXAM
case|:
name|sessionContext
operator|.
name|setAttribute
argument_list|(
name|SessionAttribute
operator|.
name|ExaminationUser
argument_list|,
name|puid
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|removeAttribute
argument_list|(
name|SessionAttribute
operator|.
name|ExaminationSolver
argument_list|)
expr_stmt|;
name|examinationSolverService
operator|.
name|removeSolver
argument_list|()
expr_stmt|;
break|break;
case|case
name|STUDENT
case|:
name|sessionContext
operator|.
name|setAttribute
argument_list|(
name|SessionAttribute
operator|.
name|StudentSectioningUser
argument_list|,
name|puid
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|removeAttribute
argument_list|(
name|SessionAttribute
operator|.
name|StudentSectioningSolver
argument_list|)
expr_stmt|;
name|studentSectioningSolverService
operator|.
name|removeSolver
argument_list|()
expr_stmt|;
break|break;
case|case
name|INSTRUCTOR
case|:
name|sessionContext
operator|.
name|setAttribute
argument_list|(
name|SessionAttribute
operator|.
name|InstructorSchedulingUser
argument_list|,
name|puid
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|removeAttribute
argument_list|(
name|SessionAttribute
operator|.
name|InstructorSchedulingSolver
argument_list|)
expr_stmt|;
name|instructorSchedulingSolverService
operator|.
name|removeSolver
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
literal|"Unload"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|&&
name|request
operator|.
name|getParameter
argument_list|(
literal|"onlineId"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|id
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"onlineId"
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"host"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|SolverServer
name|server
init|=
name|solverServerService
operator|.
name|getServer
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"host"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|server
operator|.
name|getOnlineStudentSchedulingContainer
argument_list|()
operator|.
name|unloadSolver
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|solverServerService
operator|.
name|getOnlineStudentSchedulingContainer
argument_list|()
operator|.
name|unloadSolver
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|solverServerService
operator|.
name|getOnlineStudentSchedulingContainer
argument_list|()
operator|.
name|unloadSolver
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|"Reload"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|&&
name|request
operator|.
name|getParameter
argument_list|(
literal|"onlineId"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|id
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"onlineId"
argument_list|)
decl_stmt|;
name|OnlineSectioningServer
name|solver
init|=
name|solverServerService
operator|.
name|getOnlineStudentSchedulingContainer
argument_list|()
operator|.
name|getSolver
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|solver
operator|!=
literal|null
operator|&&
name|solver
operator|.
name|isMaster
argument_list|()
condition|)
block|{
name|solver
operator|.
name|setProperty
argument_list|(
literal|"ReadyToServe"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|solver
operator|.
name|setProperty
argument_list|(
literal|"ReloadIsNeeded"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|solver
operator|.
name|releaseMasterLockIfHeld
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|"Unmaster"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|&&
name|request
operator|.
name|getParameter
argument_list|(
literal|"onlineId"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|id
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"onlineId"
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"host"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|SolverServer
name|server
init|=
name|solverServerService
operator|.
name|getServer
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"host"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|OnlineSectioningServer
name|solver
init|=
name|server
operator|.
name|getOnlineStudentSchedulingContainer
argument_list|()
operator|.
name|getSolver
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
name|solver
operator|.
name|releaseMasterLockIfHeld
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|OnlineSectioningServer
name|solver
init|=
name|solverServerService
operator|.
name|getOnlineStudentSchedulingContainer
argument_list|()
operator|.
name|getSolver
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
name|solver
operator|.
name|releaseMasterLockIfHeld
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|"Deselect"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|sessionContext
operator|.
name|removeAttribute
argument_list|(
name|SessionAttribute
operator|.
name|CourseTimetablingUser
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|removeAttribute
argument_list|(
name|SessionAttribute
operator|.
name|CourseTimetablingSolver
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|removeAttribute
argument_list|(
name|SessionAttribute
operator|.
name|ExaminationUser
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|removeAttribute
argument_list|(
name|SessionAttribute
operator|.
name|ExaminationSolver
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|removeAttribute
argument_list|(
name|SessionAttribute
operator|.
name|StudentSectioningUser
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|removeAttribute
argument_list|(
name|SessionAttribute
operator|.
name|StudentSectioningSolver
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|removeAttribute
argument_list|(
name|SessionAttribute
operator|.
name|InstructorSchedulingUser
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|removeAttribute
argument_list|(
name|SessionAttribute
operator|.
name|InstructorSchedulingSolver
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"Shutdown"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|SolverServer
name|server
init|=
name|solverServerService
operator|.
name|getServer
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"solver"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
name|server
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|"Reset"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|SolverServer
name|server
init|=
name|solverServerService
operator|.
name|getServer
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"solver"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
name|server
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|"Start Using"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|SolverServer
name|server
init|=
name|solverServerService
operator|.
name|getServer
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"solver"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
name|server
operator|.
name|setUsageBase
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"Stop Using"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|SolverServer
name|server
init|=
name|solverServerService
operator|.
name|getServer
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"solver"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
name|server
operator|.
name|setUsageBase
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SolverType
name|type
range|:
name|SolverType
operator|.
name|values
argument_list|()
control|)
name|createSolverTable
argument_list|(
name|request
argument_list|,
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|SessionIndependent
argument_list|)
condition|)
name|getServers
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|getOnlineSolvers
argument_list|(
name|request
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showSolvers"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getSolverOwner
parameter_list|(
name|DataProperties
name|solverProperties
parameter_list|)
block|{
name|String
name|owner
init|=
name|solverProperties
operator|.
name|getProperty
argument_list|(
literal|"General.OwnerPuid"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|owner
operator|!=
literal|null
condition|)
block|{
name|TimetableManager
name|mgr
init|=
name|TimetableManager
operator|.
name|findByExternalId
argument_list|(
name|owner
argument_list|)
decl_stmt|;
if|if
condition|(
name|mgr
operator|!=
literal|null
condition|)
name|owner
operator|=
name|mgr
operator|.
name|getShortName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|owner
operator|=
literal|"N/A"
expr_stmt|;
block|}
name|Long
index|[]
name|solverGroupId
init|=
name|solverProperties
operator|.
name|getPropertyLongArry
argument_list|(
literal|"General.SolverGroupId"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|problem
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|solverGroupId
operator|!=
literal|null
condition|)
block|{
name|problem
operator|=
literal|""
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|solverGroupId
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SolverGroup
name|g
init|=
name|SolverGroupDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|solverGroupId
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|g
operator|!=
literal|null
condition|)
name|problem
operator|+=
operator|(
name|i
operator|==
literal|0
condition|?
literal|""
else|:
literal|"& "
operator|)
operator|+
name|g
operator|.
name|getAbbv
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|Long
name|examTypeId
init|=
name|solverProperties
operator|.
name|getPropertyLong
argument_list|(
literal|"Exam.Type"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|examTypeId
operator|!=
literal|null
condition|)
block|{
name|ExamType
name|type
init|=
name|ExamTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|examTypeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
name|problem
operator|=
name|type
operator|.
name|getLabel
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|problem
operator|==
literal|null
operator|||
name|problem
operator|.
name|isEmpty
argument_list|()
condition|)
name|problem
operator|=
literal|"N/A"
expr_stmt|;
if|if
condition|(
literal|"N/A"
operator|.
name|equals
argument_list|(
name|problem
argument_list|)
condition|)
return|return
name|owner
return|;
if|if
condition|(
literal|"N/A"
operator|.
name|equals
argument_list|(
name|owner
argument_list|)
condition|)
return|return
name|problem
return|;
if|if
condition|(
operator|!
name|owner
operator|.
name|equals
argument_list|(
name|problem
argument_list|)
condition|)
return|return
name|owner
operator|+
literal|" as "
operator|+
name|problem
return|;
return|return
name|owner
return|;
block|}
specifier|public
specifier|static
name|String
name|getSolverSession
parameter_list|(
name|DataProperties
name|solverProperties
parameter_list|)
block|{
name|Long
name|sessionId
init|=
name|solverProperties
operator|.
name|getPropertyLong
argument_list|(
literal|"General.SessionId"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|sessionId
operator|!=
literal|null
condition|)
block|{
name|Session
name|session
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
return|return
name|session
operator|.
name|getLabel
argument_list|()
return|;
block|}
return|return
literal|"N/A"
return|;
block|}
specifier|public
specifier|static
name|String
name|getSolverConfiguration
parameter_list|(
name|DataProperties
name|solverProperties
parameter_list|)
block|{
name|Long
name|settingsId
init|=
name|solverProperties
operator|.
name|getPropertyLong
argument_list|(
literal|"General.SettingsId"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|settingsId
operator|!=
literal|null
condition|)
block|{
name|SolverPredefinedSetting
name|setting
init|=
name|SolverPredefinedSettingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|settingsId
argument_list|)
decl_stmt|;
if|if
condition|(
name|setting
operator|!=
literal|null
condition|)
return|return
name|setting
operator|.
name|getDescription
argument_list|()
return|;
block|}
return|return
name|solverProperties
operator|.
name|getProperty
argument_list|(
literal|"Basic.Mode"
argument_list|,
literal|"N/A"
argument_list|)
return|;
block|}
specifier|public
name|String
name|getOnClick
parameter_list|(
name|DataProperties
name|solverProperties
parameter_list|,
name|SolverType
name|type
parameter_list|)
block|{
name|Long
name|sessionId
init|=
name|solverProperties
operator|.
name|getPropertyLong
argument_list|(
literal|"General.SessionId"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|ownerId
init|=
name|solverProperties
operator|.
name|getProperty
argument_list|(
literal|"General.OwnerPuid"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sessionId
operator|!=
literal|null
operator|&&
name|sessionId
operator|.
name|equals
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
operator|&&
name|ownerId
operator|!=
literal|null
condition|)
return|return
literal|"onClick=\"document.location='manageSolvers.do?op=Select&type="
operator|+
name|type
operator|.
name|name
argument_list|()
operator|+
literal|"&owner="
operator|+
name|ownerId
operator|+
literal|"';\""
return|;
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|String
name|getSolverStatus
parameter_list|(
name|CommonSolverInterface
name|solver
parameter_list|)
block|{
name|String
name|status
init|=
literal|"N/A"
decl_stmt|;
try|try
block|{
name|status
operator|=
operator|(
name|String
operator|)
name|solver
operator|.
name|getProgress
argument_list|()
operator|.
name|get
argument_list|(
literal|"STATUS"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
return|return
name|status
return|;
block|}
specifier|public
specifier|static
name|String
name|getSolverOperations
parameter_list|(
name|DataProperties
name|solverProperties
parameter_list|,
name|SolverType
name|type
parameter_list|)
block|{
name|String
name|operations
init|=
literal|""
decl_stmt|;
name|String
name|ownerId
init|=
name|solverProperties
operator|.
name|getProperty
argument_list|(
literal|"General.OwnerPuid"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ownerId
operator|!=
literal|null
condition|)
block|{
name|operations
operator|+=
literal|"<input type=\"button\" value=\"Unload\" onClick=\""
operator|+
literal|"if (confirm('Do you really want to unload this solver?')) "
operator|+
literal|"document.location='manageSolvers.do?op=Unload&type="
operator|+
name|type
operator|.
name|name
argument_list|()
operator|+
literal|"&owner="
operator|+
name|ownerId
operator|+
literal|"';"
operator|+
literal|" event.cancelBubble=true;\">"
expr_stmt|;
block|}
return|return
name|operations
return|;
block|}
specifier|public
specifier|static
name|String
name|getSolverMemory
parameter_list|(
name|DataProperties
name|solverProperties
parameter_list|,
name|SolverType
name|type
parameter_list|)
block|{
name|String
name|ownerId
init|=
name|solverProperties
operator|.
name|getProperty
argument_list|(
literal|"General.OwnerPuid"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ownerId
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|COURSE
case|:
return|return
literal|"<span name='UniTimeGWT:SolverAllocatedMem' style='display: none;'>C"
operator|+
name|ownerId
operator|+
literal|"</span>"
return|;
case|case
name|STUDENT
case|:
return|return
literal|"<span name='UniTimeGWT:SolverAllocatedMem' style='display: none;'>S"
operator|+
name|ownerId
operator|+
literal|"</span>"
return|;
case|case
name|EXAM
case|:
return|return
literal|"<span name='UniTimeGWT:SolverAllocatedMem' style='display: none;'>X"
operator|+
name|ownerId
operator|+
literal|"</span>"
return|;
case|case
name|INSTRUCTOR
case|:
return|return
literal|"<span name='UniTimeGWT:SolverAllocatedMem' style='display: none;'>I"
operator|+
name|ownerId
operator|+
literal|"</span>"
return|;
block|}
block|}
return|return
literal|"N/A"
return|;
block|}
specifier|public
specifier|static
interface|interface
name|SolverProperty
parameter_list|<
name|T
parameter_list|>
block|{
specifier|public
name|T
name|getValue
parameter_list|(
name|CommonSolverInterface
name|solver
parameter_list|,
name|SolverType
name|type
parameter_list|,
name|DataProperties
name|properties
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|info
parameter_list|)
function_decl|;
specifier|public
name|String
name|getText
parameter_list|(
name|T
name|value
parameter_list|)
function_decl|;
specifier|public
name|Comparable
name|getComparable
parameter_list|(
name|T
name|value
parameter_list|)
function_decl|;
block|}
specifier|public
specifier|static
specifier|abstract
class|class
name|DateSolverProperty
implements|implements
name|SolverProperty
argument_list|<
name|Date
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|String
name|getText
parameter_list|(
name|Date
name|value
parameter_list|)
block|{
return|return
name|value
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|sDF
operator|.
name|format
argument_list|(
name|value
argument_list|)
return|;
block|}
specifier|public
name|Comparable
name|getComparable
parameter_list|(
name|Date
name|value
parameter_list|)
block|{
return|return
name|value
operator|==
literal|null
condition|?
operator|new
name|Date
argument_list|()
else|:
name|value
return|;
block|}
block|}
specifier|public
specifier|static
specifier|abstract
class|class
name|StringSolverProperty
implements|implements
name|SolverProperty
argument_list|<
name|String
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|String
name|getText
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|value
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|value
return|;
block|}
specifier|public
name|Comparable
name|getComparable
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|value
operator|==
literal|null
condition|?
literal|""
else|:
name|value
return|;
block|}
block|}
specifier|public
specifier|static
specifier|abstract
class|class
name|IntegerSolverProperty
implements|implements
name|SolverProperty
argument_list|<
name|Integer
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|String
name|getText
parameter_list|(
name|Integer
name|value
parameter_list|)
block|{
return|return
name|value
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
return|;
block|}
specifier|public
name|Comparable
name|getComparable
parameter_list|(
name|Integer
name|value
parameter_list|)
block|{
return|return
name|value
operator|==
literal|null
condition|?
literal|0
else|:
name|value
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|InfoSolverProperty
extends|extends
name|StringSolverProperty
block|{
specifier|private
name|String
name|iName
decl_stmt|;
specifier|private
name|boolean
name|iStrip
decl_stmt|;
specifier|public
name|InfoSolverProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|strip
parameter_list|)
block|{
name|iName
operator|=
name|name
expr_stmt|;
name|iStrip
operator|=
name|strip
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getValue
parameter_list|(
name|CommonSolverInterface
name|solver
parameter_list|,
name|SolverType
name|type
parameter_list|,
name|DataProperties
name|properties
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|info
parameter_list|)
block|{
if|if
condition|(
name|info
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|String
name|ret
init|=
name|info
operator|.
name|get
argument_list|(
name|iName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
operator|&&
name|iStrip
operator|&&
name|ret
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>
literal|0
condition|)
name|ret
operator|=
name|ret
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
specifier|public
specifier|static
enum|enum
name|SolverProperties
block|{
name|CREATED
argument_list|(
literal|"Created"
argument_list|,
operator|new
name|DateSolverProperty
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Date
name|getValue
parameter_list|(
name|CommonSolverInterface
name|solver
parameter_list|,
name|SolverType
name|type
parameter_list|,
name|DataProperties
name|properties
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|info
parameter_list|)
block|{
return|return
name|solver
operator|.
name|getLoadedDate
argument_list|()
return|;
block|}
block|}
argument_list|)
block|,
name|LAST_USED
argument_list|(
literal|"Last Used"
argument_list|,
operator|new
name|DateSolverProperty
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Date
name|getValue
parameter_list|(
name|CommonSolverInterface
name|solver
parameter_list|,
name|SolverType
name|type
parameter_list|,
name|DataProperties
name|properties
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|info
parameter_list|)
block|{
return|return
name|solver
operator|.
name|getLastUsed
argument_list|()
return|;
block|}
block|}
argument_list|)
block|,
name|SESSION
argument_list|(
literal|"Session"
argument_list|,
operator|new
name|StringSolverProperty
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getValue
parameter_list|(
name|CommonSolverInterface
name|solver
parameter_list|,
name|SolverType
name|type
parameter_list|,
name|DataProperties
name|properties
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|info
parameter_list|)
block|{
return|return
name|getSolverSession
argument_list|(
name|properties
argument_list|)
return|;
block|}
block|}
argument_list|)
block|,
name|HOST
argument_list|(
literal|"Host"
argument_list|,
operator|new
name|StringSolverProperty
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getValue
parameter_list|(
name|CommonSolverInterface
name|solver
parameter_list|,
name|SolverType
name|type
parameter_list|,
name|DataProperties
name|properties
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|info
parameter_list|)
block|{
return|return
name|solver
operator|.
name|getHost
argument_list|()
return|;
block|}
block|}
argument_list|)
block|,
name|CONFIG
argument_list|(
literal|"Config"
argument_list|,
operator|new
name|StringSolverProperty
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getValue
parameter_list|(
name|CommonSolverInterface
name|solver
parameter_list|,
name|SolverType
name|type
parameter_list|,
name|DataProperties
name|properties
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|info
parameter_list|)
block|{
return|return
name|getSolverConfiguration
argument_list|(
name|properties
argument_list|)
return|;
block|}
block|}
argument_list|)
block|,
name|STATUS
argument_list|(
literal|"Status"
argument_list|,
operator|new
name|StringSolverProperty
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getValue
parameter_list|(
name|CommonSolverInterface
name|solver
parameter_list|,
name|SolverType
name|type
parameter_list|,
name|DataProperties
name|properties
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|info
parameter_list|)
block|{
return|return
name|getSolverStatus
argument_list|(
name|solver
argument_list|)
return|;
block|}
block|}
argument_list|)
block|,
name|OWNER
argument_list|(
literal|"Owner"
argument_list|,
operator|new
name|StringSolverProperty
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getValue
parameter_list|(
name|CommonSolverInterface
name|solver
parameter_list|,
name|SolverType
name|type
parameter_list|,
name|DataProperties
name|properties
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|info
parameter_list|)
block|{
return|return
name|getSolverOwner
argument_list|(
name|properties
argument_list|)
return|;
block|}
block|}
argument_list|)
block|,
name|MEMORY
argument_list|(
literal|"Mem"
argument_list|,
operator|new
name|StringSolverProperty
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getValue
parameter_list|(
name|CommonSolverInterface
name|solver
parameter_list|,
name|SolverType
name|type
parameter_list|,
name|DataProperties
name|properties
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|info
parameter_list|)
block|{
return|return
name|getSolverMemory
argument_list|(
name|properties
argument_list|,
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Comparable
name|getComparable
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
argument_list|)
block|,
name|NR_CORES
argument_list|(
literal|"Cores"
argument_list|,
operator|new
name|IntegerSolverProperty
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|getValue
parameter_list|(
name|CommonSolverInterface
name|solver
parameter_list|,
name|SolverType
name|type
parameter_list|,
name|DataProperties
name|properties
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|info
parameter_list|)
block|{
return|return
name|Math
operator|.
name|abs
argument_list|(
name|properties
operator|.
name|getPropertyInt
argument_list|(
literal|"Parallel.NrSolvers"
argument_list|,
literal|4
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
block|,
name|ASSIGNED_VAR
argument_list|(
literal|"Assign"
argument_list|,
operator|new
name|InfoSolverProperty
argument_list|(
literal|"Assigned variables"
argument_list|,
literal|true
argument_list|)
argument_list|)
block|,
name|TOTAL
argument_list|(
literal|"Total"
argument_list|,
operator|new
name|InfoSolverProperty
argument_list|(
literal|"Overall solution value"
argument_list|,
literal|true
argument_list|)
argument_list|)
block|,
name|COURSE_TIME_PREF
argument_list|(
name|SolverType
operator|.
name|COURSE
argument_list|,
literal|"Time"
argument_list|,
operator|new
name|InfoSolverProperty
argument_list|(
literal|"Time preferences"
argument_list|,
literal|true
argument_list|)
argument_list|)
block|,
name|COURSE_STUDENT_CONF
argument_list|(
name|SolverType
operator|.
name|COURSE
argument_list|,
literal|"Stud"
argument_list|,
operator|new
name|StringSolverProperty
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getValue
parameter_list|(
name|CommonSolverInterface
name|solver
parameter_list|,
name|SolverType
name|type
parameter_list|,
name|DataProperties
name|properties
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|info
parameter_list|)
block|{
name|String
name|studConf
init|=
operator|(
name|info
operator|==
literal|null
condition|?
literal|null
else|:
name|info
operator|.
name|get
argument_list|(
literal|"Student conflicts"
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|studConf
operator|!=
literal|null
condition|)
return|return
name|studConf
operator|.
name|replaceAll
argument_list|(
literal|" \\["
argument_list|,
literal|"("
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\]"
argument_list|,
literal|")"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|", "
argument_list|,
literal|","
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"hard:"
argument_list|,
literal|"h"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"distance:"
argument_list|,
literal|"d"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"commited:"
argument_list|,
literal|"c"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"committed:"
argument_list|,
literal|"c"
argument_list|)
return|;
else|else
return|return
literal|null
return|;
block|}
block|}
argument_list|)
block|,
name|COURSE_ROOM_PREF
argument_list|(
name|SolverType
operator|.
name|COURSE
argument_list|,
literal|"Room"
argument_list|,
operator|new
name|InfoSolverProperty
argument_list|(
literal|"Room preferences"
argument_list|,
literal|true
argument_list|)
argument_list|)
block|,
name|COURSE_DIST_PREF
argument_list|(
name|SolverType
operator|.
name|COURSE
argument_list|,
literal|"Distr"
argument_list|,
operator|new
name|InfoSolverProperty
argument_list|(
literal|"Distribution preferences"
argument_list|,
literal|true
argument_list|)
argument_list|)
block|,
name|COURSE_BTB_INSTR_PREF
argument_list|(
name|SolverType
operator|.
name|COURSE
argument_list|,
literal|"Instr"
argument_list|,
operator|new
name|InfoSolverProperty
argument_list|(
literal|"Back-to-back instructor preferences"
argument_list|,
literal|true
argument_list|)
argument_list|)
block|,
comment|// COURSE_TOO_BIG(SolverType.COURSE, "TooBig", new InfoSolverProperty("Too big rooms", true)),
comment|// COURSE_USELESS(SolverType.COURSE, "Useless", new InfoSolverProperty("Useless half-hours", true)),
name|COURSE_PERTURBATIONS
argument_list|(
name|SolverType
operator|.
name|COURSE
argument_list|,
literal|"Pert"
argument_list|,
operator|new
name|InfoSolverProperty
argument_list|(
literal|"Perturbations: Total penalty"
argument_list|,
literal|false
argument_list|)
argument_list|)
block|,
name|COURSE_NOTE
argument_list|(
name|SolverType
operator|.
name|COURSE
argument_list|,
literal|"Note"
argument_list|,
operator|new
name|StringSolverProperty
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getValue
parameter_list|(
name|CommonSolverInterface
name|solver
parameter_list|,
name|SolverType
name|type
parameter_list|,
name|DataProperties
name|properties
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|info
parameter_list|)
block|{
return|return
name|properties
operator|.
name|getProperty
argument_list|(
literal|"General.Note"
argument_list|,
literal|""
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\n"
argument_list|,
literal|"<br>"
argument_list|)
return|;
block|}
block|}
argument_list|)
block|,
name|EXAM_STUD_CONF
argument_list|(
name|SolverType
operator|.
name|EXAM
argument_list|,
literal|"StudConf"
argument_list|,
operator|new
name|StringSolverProperty
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getValue
parameter_list|(
name|CommonSolverInterface
name|solver
parameter_list|,
name|SolverType
name|type
parameter_list|,
name|DataProperties
name|properties
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|info
parameter_list|)
block|{
if|if
condition|(
name|info
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|String
name|dc
init|=
name|info
operator|.
name|get
argument_list|(
literal|"Direct Conflicts"
argument_list|)
decl_stmt|;
name|String
name|m2d
init|=
name|info
operator|.
name|get
argument_list|(
literal|"More Than 2 A Day Conflicts"
argument_list|)
decl_stmt|;
name|String
name|btb
init|=
operator|(
name|String
operator|)
name|info
operator|.
name|get
argument_list|(
literal|"Back-To-Back Conflicts"
argument_list|)
decl_stmt|;
return|return
operator|(
name|dc
operator|==
literal|null
condition|?
literal|"0"
else|:
name|dc
operator|)
operator|+
literal|", "
operator|+
operator|(
name|m2d
operator|==
literal|null
condition|?
literal|"0"
else|:
name|m2d
operator|)
operator|+
literal|", "
operator|+
operator|(
name|btb
operator|==
literal|null
condition|?
literal|"0"
else|:
name|btb
operator|)
return|;
block|}
block|}
argument_list|)
block|,
name|EXAM_INSTR_CONF
argument_list|(
name|SolverType
operator|.
name|EXAM
argument_list|,
literal|"InstConf"
argument_list|,
operator|new
name|StringSolverProperty
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getValue
parameter_list|(
name|CommonSolverInterface
name|solver
parameter_list|,
name|SolverType
name|type
parameter_list|,
name|DataProperties
name|properties
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|info
parameter_list|)
block|{
if|if
condition|(
name|info
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|String
name|dc
init|=
name|info
operator|.
name|get
argument_list|(
literal|"Instructor Direct Conflicts"
argument_list|)
decl_stmt|;
name|String
name|m2d
init|=
name|info
operator|.
name|get
argument_list|(
literal|"Instructor More Than 2 A Day Conflicts"
argument_list|)
decl_stmt|;
name|String
name|btb
init|=
operator|(
name|String
operator|)
name|info
operator|.
name|get
argument_list|(
literal|"Instructor Back-To-Back Conflicts"
argument_list|)
decl_stmt|;
return|return
operator|(
name|dc
operator|==
literal|null
condition|?
literal|"0"
else|:
name|dc
operator|)
operator|+
literal|", "
operator|+
operator|(
name|m2d
operator|==
literal|null
condition|?
literal|"0"
else|:
name|m2d
operator|)
operator|+
literal|", "
operator|+
operator|(
name|btb
operator|==
literal|null
condition|?
literal|"0"
else|:
name|btb
operator|)
return|;
block|}
block|}
argument_list|)
block|,
name|EXAM_PERIOD_PREF
argument_list|(
name|SolverType
operator|.
name|EXAM
argument_list|,
literal|"Period"
argument_list|,
operator|new
name|InfoSolverProperty
argument_list|(
literal|"Period Penalty"
argument_list|,
literal|true
argument_list|)
argument_list|)
block|,
name|EXAM_ROOM_PREF
argument_list|(
name|SolverType
operator|.
name|EXAM
argument_list|,
literal|"Room"
argument_list|,
operator|new
name|InfoSolverProperty
argument_list|(
literal|"Room Penalty"
argument_list|,
literal|true
argument_list|)
argument_list|)
block|,
name|EXAM_ROOM_SPLIT
argument_list|(
name|SolverType
operator|.
name|EXAM
argument_list|,
literal|"RoomSplit"
argument_list|,
operator|new
name|InfoSolverProperty
argument_list|(
literal|"Room Split Penalty"
argument_list|,
literal|true
argument_list|)
argument_list|)
block|,
name|EXAM_ROOM_SIZE
argument_list|(
name|SolverType
operator|.
name|EXAM
argument_list|,
literal|"RoomSize"
argument_list|,
operator|new
name|InfoSolverProperty
argument_list|(
literal|"Room Size Penalty"
argument_list|,
literal|true
argument_list|)
argument_list|)
block|,
name|EXAM_DIST_PREF
argument_list|(
name|SolverType
operator|.
name|EXAM
argument_list|,
literal|"Distr"
argument_list|,
operator|new
name|InfoSolverProperty
argument_list|(
literal|"Distribution Penalty"
argument_list|,
literal|true
argument_list|)
argument_list|)
block|,
name|EXAM_ROTATION
argument_list|(
name|SolverType
operator|.
name|EXAM
argument_list|,
literal|"Rot"
argument_list|,
operator|new
name|InfoSolverProperty
argument_list|(
literal|"Exam Rotation Penalty"
argument_list|,
literal|true
argument_list|)
argument_list|)
block|,
name|EXAM_PERTURBATIONS
argument_list|(
name|SolverType
operator|.
name|EXAM
argument_list|,
literal|"Pert"
argument_list|,
operator|new
name|InfoSolverProperty
argument_list|(
literal|"Perturbation Penalty"
argument_list|,
literal|true
argument_list|)
argument_list|)
block|,
name|STUDENT_COMPLETE
argument_list|(
name|SolverType
operator|.
name|STUDENT
argument_list|,
literal|"CompSched"
argument_list|,
operator|new
name|InfoSolverProperty
argument_list|(
literal|"Students with complete schedule"
argument_list|,
literal|true
argument_list|)
argument_list|)
block|,
name|STUDENT_DIST_CONF
argument_list|(
name|SolverType
operator|.
name|STUDENT
argument_list|,
literal|"DistConf"
argument_list|,
operator|new
name|InfoSolverProperty
argument_list|(
literal|"Student distance conflicts"
argument_list|,
literal|true
argument_list|)
argument_list|)
block|,
name|STUDENT_TIME_OVERLAPS
argument_list|(
name|SolverType
operator|.
name|STUDENT
argument_list|,
literal|"TimeConf"
argument_list|,
operator|new
name|InfoSolverProperty
argument_list|(
literal|"Time overlapping conflicts"
argument_list|,
literal|true
argument_list|)
argument_list|)
block|,
comment|//STUDENT_FREE_OVERLAPS(SolverType.STUDENT, "FreeConf", new InfoSolverProperty("Free time overlapping conflicts", true)),
comment|//STUDENT_DISBALANCE_AVG(SolverType.STUDENT, "AvgDisb", new InfoSolverProperty("Average disbalance", true)),
comment|//STUDENT_DISBALANCE_10P(SolverType.STUDENT, "Disb[>=10%]", new InfoSolverProperty("Sections disbalanced by 10% or more", true)),
name|STUDENT_PERTURBATIONS
argument_list|(
name|SolverType
operator|.
name|STUDENT
argument_list|,
literal|"Pert"
argument_list|,
operator|new
name|InfoSolverProperty
argument_list|(
literal|"Perturbation Penalty"
argument_list|,
literal|true
argument_list|)
argument_list|)
block|,
name|INSTRUCTOR_ATTR_PREF
argument_list|(
name|SolverType
operator|.
name|INSTRUCTOR
argument_list|,
literal|"Attribute"
argument_list|,
operator|new
name|InfoSolverProperty
argument_list|(
literal|"Attribute Preferences"
argument_list|,
literal|true
argument_list|)
argument_list|)
block|,
name|INSTRUCTOR_COURSE_PREF
argument_list|(
name|SolverType
operator|.
name|INSTRUCTOR
argument_list|,
literal|"Course"
argument_list|,
operator|new
name|InfoSolverProperty
argument_list|(
literal|"Course Preferences"
argument_list|,
literal|true
argument_list|)
argument_list|)
block|,
name|INSTRUCTOR_INSTR_PREF
argument_list|(
name|SolverType
operator|.
name|INSTRUCTOR
argument_list|,
literal|"Instructor"
argument_list|,
operator|new
name|InfoSolverProperty
argument_list|(
literal|"Instructor Preferences"
argument_list|,
literal|true
argument_list|)
argument_list|)
block|,
name|INSTRUCTOR_TEACH_PREF
argument_list|(
name|SolverType
operator|.
name|INSTRUCTOR
argument_list|,
literal|"Teaching"
argument_list|,
operator|new
name|InfoSolverProperty
argument_list|(
literal|"Teaching Preferences"
argument_list|,
literal|true
argument_list|)
argument_list|)
block|,
name|INSTRUCTOR_TIME_PREF
argument_list|(
name|SolverType
operator|.
name|INSTRUCTOR
argument_list|,
literal|"Time"
argument_list|,
operator|new
name|InfoSolverProperty
argument_list|(
literal|"Time Preferences"
argument_list|,
literal|true
argument_list|)
argument_list|)
block|,
name|INSTRUCTOR_SAME_INSTRUCTOR
argument_list|(
name|SolverType
operator|.
name|INSTRUCTOR
argument_list|,
literal|"SameInstr"
argument_list|,
operator|new
name|InfoSolverProperty
argument_list|(
literal|"Same Instructor"
argument_list|,
literal|true
argument_list|)
argument_list|)
block|,
name|INSTRUCTOR_SAME_LECTURE
argument_list|(
name|SolverType
operator|.
name|INSTRUCTOR
argument_list|,
literal|"SameLect"
argument_list|,
operator|new
name|InfoSolverProperty
argument_list|(
literal|"Same Lecture"
argument_list|,
literal|true
argument_list|)
argument_list|)
block|,
name|INSTRUCTOR_BTB
argument_list|(
name|SolverType
operator|.
name|INSTRUCTOR
argument_list|,
literal|"BTB"
argument_list|,
operator|new
name|InfoSolverProperty
argument_list|(
literal|"Back To Back"
argument_list|,
literal|true
argument_list|)
argument_list|)
block|,
name|INSTRUCTOR_SAME_DAYS
argument_list|(
name|SolverType
operator|.
name|INSTRUCTOR
argument_list|,
literal|"SameDays"
argument_list|,
operator|new
name|InfoSolverProperty
argument_list|(
literal|"Same Days"
argument_list|,
literal|true
argument_list|)
argument_list|)
block|,
name|INSTRUCTOR_SAME_ROOM
argument_list|(
name|SolverType
operator|.
name|INSTRUCTOR
argument_list|,
literal|"SameRoom"
argument_list|,
operator|new
name|InfoSolverProperty
argument_list|(
literal|"Same Room"
argument_list|,
literal|true
argument_list|)
argument_list|)
block|,
name|INSTRUCTOR_PERTURBATIONS
argument_list|(
name|SolverType
operator|.
name|INSTRUCTOR
argument_list|,
literal|"Original"
argument_list|,
operator|new
name|InfoSolverProperty
argument_list|(
literal|"Original Instructor"
argument_list|,
literal|true
argument_list|)
argument_list|)
block|,
name|OPERATIONS
argument_list|(
literal|"Operation(s)"
argument_list|,
operator|new
name|StringSolverProperty
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getValue
parameter_list|(
name|CommonSolverInterface
name|solver
parameter_list|,
name|SolverType
name|type
parameter_list|,
name|DataProperties
name|properties
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|info
parameter_list|)
block|{
return|return
name|getSolverOperations
argument_list|(
name|properties
argument_list|,
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Comparable
name|getComparable
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
argument_list|)
block|, 		;
specifier|private
name|String
name|iName
decl_stmt|;
specifier|private
name|SolverProperty
argument_list|<
name|?
argument_list|>
name|iProperty
decl_stmt|;
specifier|private
name|SolverType
name|iType
decl_stmt|;
name|SolverProperties
parameter_list|(
name|SolverType
name|type
parameter_list|,
name|String
name|name
parameter_list|,
name|SolverProperty
argument_list|<
name|?
argument_list|>
name|property
parameter_list|)
block|{
name|iType
operator|=
name|type
expr_stmt|;
name|iName
operator|=
name|name
expr_stmt|;
name|iProperty
operator|=
name|property
expr_stmt|;
block|}
name|SolverProperties
parameter_list|(
name|String
name|name
parameter_list|,
name|SolverProperty
argument_list|<
name|?
argument_list|>
name|property
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|name
argument_list|,
name|property
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
specifier|public
name|String
name|getAlignment
parameter_list|()
block|{
return|return
literal|"left"
return|;
block|}
specifier|public
name|boolean
name|getDefaultOrder
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|SolverProperty
argument_list|<
name|?
argument_list|>
name|getProperty
parameter_list|()
block|{
return|return
name|iProperty
return|;
block|}
specifier|public
name|SolverType
name|getType
parameter_list|()
block|{
return|return
name|iType
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|SolverProperties
argument_list|>
name|applicable
parameter_list|(
name|SolverType
name|type
parameter_list|)
block|{
name|List
argument_list|<
name|SolverProperties
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|SolverProperties
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SolverProperties
name|p
range|:
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getType
argument_list|()
operator|==
literal|null
operator|||
name|p
operator|.
name|getType
argument_list|()
operator|==
name|type
condition|)
name|ret
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
specifier|protected
specifier|static
name|String
name|getTableName
parameter_list|(
name|SolverType
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|COURSE
case|:
return|return
literal|"Manage Course Timetabling Solvers"
return|;
case|case
name|EXAM
case|:
return|return
literal|"Manage Examination Timetabling Solvers"
return|;
case|case
name|STUDENT
case|:
return|return
literal|"Manage Batch Student Scheduling Solvers"
return|;
case|case
name|INSTRUCTOR
case|:
return|return
literal|"Manage Instructor Scheduling Solvers"
return|;
block|}
return|return
literal|"Manage "
operator|+
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|type
operator|.
name|name
argument_list|()
argument_list|)
operator|+
literal|" Solvers"
return|;
block|}
specifier|private
name|void
name|createSolverTable
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|SolverType
name|type
parameter_list|)
block|{
name|WebTable
operator|.
name|setOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"manageSolvers.ord["
operator|+
name|type
operator|+
literal|"]"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"ord"
operator|+
name|type
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SolverProperties
argument_list|>
name|props
init|=
name|SolverProperties
operator|.
name|applicable
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|String
index|[]
name|names
init|=
operator|new
name|String
index|[
name|props
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|String
index|[]
name|align
init|=
operator|new
name|String
index|[
name|props
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|boolean
index|[]
name|ord
init|=
operator|new
name|boolean
index|[
name|props
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|props
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SolverProperties
name|p
init|=
name|props
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|names
index|[
name|i
index|]
operator|=
name|p
operator|.
name|getName
argument_list|()
expr_stmt|;
name|align
index|[
name|i
index|]
operator|=
name|p
operator|.
name|getAlignment
argument_list|()
expr_stmt|;
name|ord
index|[
name|i
index|]
operator|=
name|p
operator|.
name|getDefaultOrder
argument_list|()
expr_stmt|;
block|}
name|WebTable
name|webTable
init|=
operator|new
name|WebTable
argument_list|(
name|props
operator|.
name|size
argument_list|()
argument_list|,
name|getTableName
argument_list|(
name|type
argument_list|)
argument_list|,
literal|"manageSolvers.do?ord"
operator|+
name|type
operator|.
name|ordinal
argument_list|()
operator|+
literal|"=%%"
argument_list|,
name|names
argument_list|,
name|align
argument_list|,
name|ord
argument_list|)
decl_stmt|;
name|webTable
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap"
argument_list|)
expr_stmt|;
name|int
name|nrLines
init|=
literal|0
decl_stmt|;
name|SolverService
argument_list|<
name|?
extends|extends
name|CommonSolverInterface
argument_list|>
name|service
init|=
name|getSolverService
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|CommonSolverInterface
name|selected
init|=
name|service
operator|.
name|getSolverNoSessionCheck
argument_list|()
decl_stmt|;
name|String
name|selectedId
init|=
operator|(
name|selected
operator|==
literal|null
condition|?
literal|null
else|:
name|selected
operator|.
name|getUser
argument_list|()
operator|)
decl_stmt|;
name|List
argument_list|<
name|CommonSolverInterface
argument_list|>
name|solvers
init|=
operator|new
name|ArrayList
argument_list|<
name|CommonSolverInterface
argument_list|>
argument_list|(
name|service
operator|.
name|getSolvers
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|CommonSolverInterface
name|solver
range|:
name|solvers
control|)
block|{
if|if
condition|(
name|solver
operator|==
literal|null
condition|)
continue|continue;
name|DataProperties
name|properties
init|=
name|solver
operator|.
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
continue|continue;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|info
init|=
name|solver
operator|.
name|statusSolutionInfo
argument_list|()
decl_stmt|;
name|String
name|bgColor
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|selectedId
operator|!=
literal|null
operator|&&
name|selectedId
operator|.
name|equals
argument_list|(
name|solver
operator|.
name|getUser
argument_list|()
argument_list|)
condition|)
name|bgColor
operator|=
literal|"rgb(168,187,225)"
expr_stmt|;
name|String
index|[]
name|line
init|=
operator|new
name|String
index|[
name|props
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|Comparable
index|[]
name|cmp
init|=
operator|new
name|Comparable
index|[
name|props
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|props
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SolverProperty
argument_list|<
name|Object
argument_list|>
name|p
init|=
operator|(
name|SolverProperty
argument_list|<
name|Object
argument_list|>
operator|)
name|props
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getProperty
argument_list|()
decl_stmt|;
name|Object
name|o
init|=
name|p
operator|.
name|getValue
argument_list|(
name|solver
argument_list|,
name|type
argument_list|,
name|properties
argument_list|,
name|info
argument_list|)
decl_stmt|;
name|line
index|[
name|i
index|]
operator|=
name|p
operator|.
name|getText
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|cmp
index|[
name|i
index|]
operator|=
name|p
operator|.
name|getComparable
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
name|webTable
operator|.
name|addLine
argument_list|(
name|getOnClick
argument_list|(
name|properties
argument_list|,
name|type
argument_list|)
argument_list|,
name|line
argument_list|,
name|cmp
argument_list|)
operator|.
name|setBgColor
argument_list|(
name|bgColor
argument_list|)
expr_stmt|;
name|nrLines
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|nrLines
operator|==
literal|0
condition|)
name|webTable
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"<i>No solver is running.</i>"
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"ManageSolvers.table["
operator|+
name|type
operator|+
literal|"]"
argument_list|,
name|webTable
operator|.
name|printTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"manageSolvers.ord["
operator|+
name|type
operator|+
literal|"]"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|getServers
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|WebTable
operator|.
name|setOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"manageSolvers.ord[SERVERS]"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"ords"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|WebTable
name|webTable
init|=
operator|new
name|WebTable
argument_list|(
literal|12
argument_list|,
literal|"Available Servers"
argument_list|,
literal|"manageSolvers.do?ords=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Host"
block|,
literal|"Version"
block|,
literal|"Started"
block|,
literal|"Available Memory"
block|,
literal|"NrCores"
block|,
literal|"Ping"
block|,
literal|"Usage"
block|,
literal|"NrInstances"
block|,
literal|"Active"
block|,
literal|"Working"
block|,
literal|"Passivated"
block|,
literal|"Operation(s)"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|webTable
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap"
argument_list|)
expr_stmt|;
name|DecimalFormat
name|df
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0.00"
argument_list|)
decl_stmt|;
name|int
name|nrLines
init|=
literal|0
decl_stmt|;
for|for
control|(
name|SolverServer
name|server
range|:
name|solverServerService
operator|.
name|getServers
argument_list|(
literal|false
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|server
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|webTable
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|server
operator|.
name|getHost
argument_list|()
block|,
literal|"<i>inactive</i>"
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|server
operator|.
name|getHost
argument_list|()
block|,
literal|""
block|,
literal|null
block|,
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
operator|-
literal|1
argument_list|)
block|,
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
block|,
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
operator|-
literal|1
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
operator|-
literal|1
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
operator|-
literal|1
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
operator|-
literal|1
argument_list|)
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|int
name|nrActive
init|=
literal|0
decl_stmt|;
name|int
name|nrPassivated
init|=
literal|0
decl_stmt|;
name|int
name|nrWorking
init|=
literal|0
decl_stmt|;
name|long
name|mem
init|=
name|server
operator|.
name|getAvailableMemory
argument_list|()
decl_stmt|;
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|usage
init|=
name|server
operator|.
name|getUsage
argument_list|()
decl_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|user
range|:
name|server
operator|.
name|getCourseSolverContainer
argument_list|()
operator|.
name|getSolvers
argument_list|()
control|)
block|{
name|SolverProxy
name|solver
init|=
name|server
operator|.
name|getCourseSolverContainer
argument_list|()
operator|.
name|getSolver
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|solver
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|solver
operator|.
name|isPassivated
argument_list|()
condition|)
block|{
name|nrPassivated
operator|++
expr_stmt|;
block|}
else|else
block|{
name|nrActive
operator|++
expr_stmt|;
if|if
condition|(
name|solver
operator|.
name|isWorking
argument_list|()
condition|)
name|nrWorking
operator|++
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|user
range|:
name|server
operator|.
name|getExamSolverContainer
argument_list|()
operator|.
name|getSolvers
argument_list|()
control|)
block|{
name|ExamSolverProxy
name|solver
init|=
name|server
operator|.
name|getExamSolverContainer
argument_list|()
operator|.
name|getSolver
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|solver
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|solver
operator|.
name|isPassivated
argument_list|()
condition|)
block|{
name|nrPassivated
operator|++
expr_stmt|;
block|}
else|else
block|{
name|nrActive
operator|++
expr_stmt|;
if|if
condition|(
name|solver
operator|.
name|isWorking
argument_list|()
condition|)
name|nrWorking
operator|++
expr_stmt|;
block|}
block|}
name|String
name|version
init|=
name|server
operator|.
name|getVersion
argument_list|()
decl_stmt|;
name|Date
name|startTime
init|=
name|server
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
name|boolean
name|local
init|=
name|server
operator|.
name|isLocal
argument_list|()
decl_stmt|;
name|int
name|cores
init|=
name|server
operator|.
name|getAvailableProcessors
argument_list|()
decl_stmt|;
name|String
name|op
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|usage
operator|>=
literal|1000
condition|)
block|{
name|op
operator|+=
literal|"<input type=\"button\" value=\"Enable\" onClick=\"if (confirm('Do you really want to enable server "
operator|+
name|server
operator|.
name|getHost
argument_list|()
operator|+
literal|" for the new solver instances?')) document.location='manageSolvers.do?op=Start%20Using&solver="
operator|+
name|server
operator|.
name|getHost
argument_list|()
operator|+
literal|"';\">&nbsp;&nbsp;"
expr_stmt|;
block|}
else|else
block|{
name|op
operator|+=
literal|"<input type=\"button\" value=\"Disable\" onClick=\"if (confirm('Do you really want to disable server "
operator|+
name|server
operator|.
name|getHost
argument_list|()
operator|+
literal|" for the new solver instances?')) document.location='manageSolvers.do?op=Stop%20Using&solver="
operator|+
name|server
operator|.
name|getHost
argument_list|()
operator|+
literal|"';\">&nbsp;&nbsp;"
expr_stmt|;
block|}
name|op
operator|+=
literal|"<input type=\"button\" value=\"Reset\" onClick=\"if (confirm('Do you really want to reset server "
operator|+
name|server
operator|.
name|getHost
argument_list|()
operator|+
literal|"?')) document.location='manageSolvers.do?op=Reset&solver="
operator|+
name|server
operator|.
name|getHost
argument_list|()
operator|+
literal|"';\">&nbsp;&nbsp;"
expr_stmt|;
if|if
condition|(
operator|!
name|local
condition|)
block|{
name|op
operator|+=
literal|"<input type=\"button\" value=\"Shutdown\" onClick=\"if (confirm('Do you really want to shutdown server "
operator|+
name|server
operator|.
name|getHost
argument_list|()
operator|+
literal|"?')) document.location='manageSolvers.do?op=Shutdown&solver="
operator|+
name|server
operator|.
name|getHost
argument_list|()
operator|+
literal|"';\">&nbsp;&nbsp;"
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|flags
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|local
condition|)
name|flags
operator|.
name|add
argument_list|(
literal|"tomcat"
argument_list|)
expr_stmt|;
if|if
condition|(
name|server
operator|.
name|isCoordinator
argument_list|()
condition|)
name|flags
operator|.
name|add
argument_list|(
literal|"coordinator"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|server
operator|.
name|isAvailable
argument_list|()
condition|)
name|flags
operator|.
name|add
argument_list|(
literal|"unavailable"
argument_list|)
expr_stmt|;
name|webTable
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|server
operator|.
name|getHost
argument_list|()
operator|+
operator|(
name|flags
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|" "
operator|+
name|flags
operator|.
name|toString
argument_list|()
operator|)
block|,
operator|(
name|version
operator|==
literal|null
operator|||
literal|"-1"
operator|.
name|equals
argument_list|(
name|version
argument_list|)
condition|?
literal|"<i>N/A</i>"
else|:
name|version
operator|)
block|,
operator|(
name|startTime
operator|==
literal|null
condition|?
literal|"<i>N/A</i>"
else|:
name|sDF
operator|.
name|format
argument_list|(
name|startTime
argument_list|)
operator|)
block|,
name|df
operator|.
name|format
argument_list|(
operator|(
operator|(
name|double
operator|)
name|mem
operator|)
operator|/
literal|1024
operator|/
literal|1024
argument_list|)
operator|+
literal|" MB"
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|cores
argument_list|)
block|,
operator|(
name|t1
operator|-
name|t0
operator|)
operator|+
literal|" ms"
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|usage
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|nrActive
operator|+
name|nrPassivated
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|nrActive
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|nrWorking
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|nrPassivated
argument_list|)
block|,
name|op
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|server
operator|.
name|getHost
argument_list|()
block|,
name|version
block|,
name|startTime
block|,
operator|new
name|Long
argument_list|(
name|t1
operator|-
name|t0
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|cores
argument_list|)
block|,
operator|new
name|Long
argument_list|(
name|mem
argument_list|)
block|,
operator|new
name|Long
argument_list|(
name|usage
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|nrActive
operator|+
name|nrPassivated
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|nrActive
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|nrWorking
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|nrPassivated
argument_list|)
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
name|nrLines
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|nrLines
operator|==
literal|0
condition|)
name|webTable
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"<i>No solver server is running.</i>"
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"ManageSolvers.table[SERVERS]"
argument_list|,
name|webTable
operator|.
name|printTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"manageSolvers.ord[SERVERS]"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|getOnlineSolvers
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|WebTable
operator|.
name|setOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"manageSolvers.ord[ONLINE]"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"ordo"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|WebTable
name|webTable
init|=
operator|new
name|WebTable
argument_list|(
literal|14
argument_list|,
literal|"Manage Online Scheduling Servers"
argument_list|,
literal|"manageSolvers.do?ordo=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Created"
block|,
literal|"Session"
block|,
literal|"Host"
block|,
literal|"Mode"
block|,
literal|"Mem"
block|,
literal|"Assign"
block|,
literal|"Total"
block|,
literal|"CompSched"
block|,
literal|"DistConf"
block|,
literal|"TimeConf"
block|,
literal|"FreeConf"
block|,
literal|"AvgDisb"
block|,
literal|"Disb[>=10%]"
block|,
literal|"Operation(s)"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|webTable
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap"
argument_list|)
expr_stmt|;
name|int
name|nrLines
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|SolverServer
argument_list|>
name|servers
init|=
name|solverServerService
operator|.
name|getServers
argument_list|(
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|SolverServer
name|server
range|:
name|servers
control|)
block|{
for|for
control|(
name|String
name|sessionId
range|:
name|server
operator|.
name|getOnlineStudentSchedulingContainer
argument_list|()
operator|.
name|getSolvers
argument_list|()
control|)
block|{
name|OnlineSectioningServer
name|solver
init|=
name|server
operator|.
name|getOnlineStudentSchedulingContainer
argument_list|()
operator|.
name|getSolver
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|solver
operator|==
literal|null
condition|)
continue|continue;
name|DataProperties
name|properties
init|=
name|solver
operator|.
name|getConfig
argument_list|()
decl_stmt|;
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getAuthorities
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|getRole
argument_list|()
argument_list|,
operator|new
name|SimpleQualifier
argument_list|(
literal|"Session"
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|sessionId
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|String
name|sessionLabel
init|=
name|solver
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|mode
init|=
name|solver
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|isSectioningEnabled
argument_list|()
condition|?
literal|"Online"
else|:
literal|"Assistant"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|info
init|=
operator|(
name|solver
operator|.
name|isReady
argument_list|()
condition|?
name|solver
operator|.
name|execute
argument_list|(
name|solver
operator|.
name|createAction
argument_list|(
name|GetInfo
operator|.
name|class
argument_list|)
argument_list|,
literal|null
argument_list|)
else|:
literal|null
operator|)
decl_stmt|;
name|String
name|assigned
init|=
operator|(
name|info
operator|==
literal|null
condition|?
literal|null
else|:
name|info
operator|.
name|get
argument_list|(
literal|"Assigned variables"
argument_list|)
operator|)
decl_stmt|;
name|String
name|totVal
init|=
operator|(
name|info
operator|==
literal|null
condition|?
literal|null
else|:
name|info
operator|.
name|get
argument_list|(
literal|"Overall solution value"
argument_list|)
operator|)
decl_stmt|;
name|String
name|compSch
init|=
operator|(
name|info
operator|==
literal|null
condition|?
literal|null
else|:
name|info
operator|.
name|get
argument_list|(
literal|"Students with complete schedule"
argument_list|)
operator|)
decl_stmt|;
name|String
name|distConf
init|=
operator|(
name|info
operator|==
literal|null
condition|?
literal|null
else|:
name|info
operator|.
name|get
argument_list|(
literal|"Student distance conflicts"
argument_list|)
operator|)
decl_stmt|;
name|String
name|time
init|=
operator|(
name|info
operator|==
literal|null
condition|?
literal|null
else|:
name|info
operator|.
name|get
argument_list|(
literal|"Time overlapping conflicts"
argument_list|)
operator|)
decl_stmt|;
name|String
name|free
init|=
operator|(
name|info
operator|==
literal|null
condition|?
literal|null
else|:
name|info
operator|.
name|get
argument_list|(
literal|"Free time overlapping conflicts"
argument_list|)
operator|)
decl_stmt|;
name|String
name|disb
init|=
operator|(
name|info
operator|==
literal|null
condition|?
literal|null
else|:
name|info
operator|.
name|get
argument_list|(
literal|"Average disbalance"
argument_list|)
operator|)
decl_stmt|;
name|String
name|disb10
init|=
operator|(
name|info
operator|==
literal|null
condition|?
literal|null
else|:
name|info
operator|.
name|get
argument_list|(
literal|"Sections disbalanced by 10% or more"
argument_list|)
operator|)
decl_stmt|;
name|Date
name|loaded
init|=
operator|new
name|Date
argument_list|(
name|solver
operator|.
name|getConfig
argument_list|()
operator|.
name|getPropertyLong
argument_list|(
literal|"General.StartUpDate"
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|op
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|solver
operator|.
name|isMaster
argument_list|()
operator|&&
name|solver
operator|.
name|isReady
argument_list|()
condition|)
block|{
name|op
operator|+=
literal|"<input type=\"button\" value=\"Reload\" onClick=\""
operator|+
literal|"if (confirm('Do you really want to reload this server?')) "
operator|+
literal|"document.location='manageSolvers.do?op=Reload&onlineId="
operator|+
name|sessionId
operator|+
literal|"';"
operator|+
literal|" event.cancelBubble=true;\">&nbsp;&nbsp;"
expr_stmt|;
block|}
if|if
condition|(
name|solver
operator|.
name|isMaster
argument_list|()
operator|&&
name|servers
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|op
operator|+=
literal|"<input type=\"button\" value=\"Shutdown All\" onClick=\""
operator|+
literal|"if (confirm('Do you really want to shutdown this server?')) "
operator|+
literal|"document.location='manageSolvers.do?op=Unload&onlineId="
operator|+
name|sessionId
operator|+
literal|"';"
operator|+
literal|" event.cancelBubble=true;\">&nbsp;&nbsp;"
expr_stmt|;
name|op
operator|+=
literal|"<input type=\"button\" value=\"Un-Master\" onClick=\""
operator|+
literal|"if (confirm('Do you really want to un-master this server?')) "
operator|+
literal|"document.location='manageSolvers.do?op=Unmaster&onlineId="
operator|+
name|sessionId
operator|+
literal|"&host="
operator|+
name|server
operator|.
name|getHost
argument_list|()
operator|+
literal|"';"
operator|+
literal|" event.cancelBubble=true;\">"
expr_stmt|;
block|}
else|else
block|{
name|op
operator|+=
literal|"<input type=\"button\" value=\"Shutdown\" onClick=\""
operator|+
literal|"if (confirm('Do you really want to shutdown this server?')) "
operator|+
literal|"document.location='manageSolvers.do?op=Unload&onlineId="
operator|+
name|sessionId
operator|+
literal|"&host="
operator|+
name|server
operator|.
name|getHost
argument_list|()
operator|+
literal|"';"
operator|+
literal|" event.cancelBubble=true;\">"
expr_stmt|;
block|}
name|webTable
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
operator|(
name|loaded
operator|.
name|getTime
argument_list|()
operator|<=
literal|0
condition|?
literal|"N/A"
else|:
name|sDF
operator|.
name|format
argument_list|(
name|loaded
argument_list|)
operator|)
block|,
name|sessionLabel
block|,
name|solver
operator|.
name|getHost
argument_list|()
operator|+
operator|(
name|solver
operator|.
name|isMaster
argument_list|()
condition|?
literal|" (master)"
else|:
literal|""
operator|)
block|,
name|mode
block|,
literal|"<span name='UniTimeGWT:SolverAllocatedMem' style='display: none;'>O"
operator|+
name|server
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|sessionId
operator|+
literal|"</span>"
block|,
operator|(
name|assigned
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|assigned
operator|)
block|,
operator|(
name|totVal
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|totVal
operator|)
block|,
operator|(
name|compSch
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|compSch
operator|)
block|,
operator|(
name|distConf
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|distConf
operator|)
block|,
operator|(
name|time
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|time
operator|)
block|,
operator|(
name|free
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|free
operator|)
block|,
operator|(
name|disb
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|disb
operator|)
block|,
operator|(
name|disb10
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|disb10
operator|)
block|,
name|op
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|loaded
block|,
name|sessionLabel
block|,
name|solver
operator|.
name|getHost
argument_list|()
block|,
name|mode
block|,
literal|null
block|,
operator|(
name|assigned
operator|==
literal|null
condition|?
literal|""
else|:
name|assigned
operator|)
block|,
operator|(
name|totVal
operator|==
literal|null
condition|?
literal|""
else|:
name|totVal
operator|)
block|,
operator|(
name|compSch
operator|==
literal|null
condition|?
literal|""
else|:
name|compSch
operator|)
block|,
operator|(
name|distConf
operator|==
literal|null
condition|?
literal|""
else|:
name|distConf
operator|)
block|,
operator|(
name|time
operator|==
literal|null
condition|?
literal|""
else|:
name|time
operator|)
block|,
operator|(
name|free
operator|==
literal|null
condition|?
literal|""
else|:
name|free
operator|)
block|,
operator|(
name|disb
operator|==
literal|null
condition|?
literal|""
else|:
name|disb
operator|)
block|,
operator|(
name|disb10
operator|==
literal|null
condition|?
literal|""
else|:
name|disb10
operator|)
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
name|nrLines
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|nrLines
operator|==
literal|0
condition|)
name|webTable
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"<i>There is no online student scheduling server running at the moment.</i>"
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"ManageSolvers.table[ONLINE]"
argument_list|,
name|webTable
operator|.
name|printTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"manageSolvers.ord[ONLINE]"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

