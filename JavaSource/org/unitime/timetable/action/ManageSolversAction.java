begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.1 (University Timetabling Application)  * Copyright (C) 2008, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|Web
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|WebTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|ManageSolversForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Roles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverPredefinedSetting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SolverGroupDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SolverPredefinedSettingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|SolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|WebSolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ExamSolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|remote
operator|.
name|RemoteSolverServerProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|remote
operator|.
name|SolverRegisterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|studentsct
operator|.
name|StudentSolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|PropertiesInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**   * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ManageSolversAction
extends|extends
name|Action
block|{
specifier|private
specifier|static
name|SimpleDateFormat
name|sDF
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd/yy hh:mmaa"
argument_list|)
decl_stmt|;
specifier|public
name|ActionForward
name|execute
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
name|ManageSolversForm
name|myForm
init|=
operator|(
name|ManageSolversForm
operator|)
name|form
decl_stmt|;
comment|// Check Access
if|if
condition|(
operator|!
name|Web
operator|.
name|isLoggedIn
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
operator|||
operator|!
name|Web
operator|.
name|hasRole
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
name|Roles
operator|.
name|getAdminRoles
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Access Denied."
argument_list|)
throw|;
block|}
comment|// Read operation to be performed
name|String
name|op
init|=
operator|(
name|myForm
operator|.
name|getOp
argument_list|()
operator|!=
literal|null
condition|?
name|myForm
operator|.
name|getOp
argument_list|()
else|:
name|request
operator|.
name|getParameter
argument_list|(
literal|"op"
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
literal|"Select"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|&&
name|request
operator|.
name|getParameter
argument_list|(
literal|"puid"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|puid
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"puid"
argument_list|)
decl_stmt|;
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|setAttribute
argument_list|(
literal|"ManageSolver.puid"
argument_list|,
name|puid
argument_list|)
expr_stmt|;
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|removeAttribute
argument_list|(
literal|"SolverProxy"
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showSolver"
argument_list|)
return|;
block|}
if|if
condition|(
literal|"Select"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|&&
name|request
operator|.
name|getParameter
argument_list|(
literal|"examPuid"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|puid
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"examPuid"
argument_list|)
decl_stmt|;
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|setAttribute
argument_list|(
literal|"ManageSolver.examPuid"
argument_list|,
name|puid
argument_list|)
expr_stmt|;
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|removeAttribute
argument_list|(
literal|"ExamSolverProxy"
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showExamSolver"
argument_list|)
return|;
block|}
if|if
condition|(
literal|"Select"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|&&
name|request
operator|.
name|getParameter
argument_list|(
literal|"sectionPuid"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|puid
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"sectionPuid"
argument_list|)
decl_stmt|;
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|setAttribute
argument_list|(
literal|"ManageSolver.sectionPuid"
argument_list|,
name|puid
argument_list|)
expr_stmt|;
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|removeAttribute
argument_list|(
literal|"StudentSolverProxy"
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showStudentSolver"
argument_list|)
return|;
block|}
if|if
condition|(
literal|"Deselect"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|removeAttribute
argument_list|(
literal|"ManageSolver.puid"
argument_list|)
expr_stmt|;
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|removeAttribute
argument_list|(
literal|"SolverProxy"
argument_list|)
expr_stmt|;
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|removeAttribute
argument_list|(
literal|"ManageSolver.examPuid"
argument_list|)
expr_stmt|;
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|removeAttribute
argument_list|(
literal|"ExamSolverProxy"
argument_list|)
expr_stmt|;
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|removeAttribute
argument_list|(
literal|"ManageSolver.sectionPuid"
argument_list|)
expr_stmt|;
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|removeAttribute
argument_list|(
literal|"StudentSolverProxy"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"Shutdown"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|String
name|solverName
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"solver"
argument_list|)
decl_stmt|;
if|if
condition|(
name|solverName
operator|!=
literal|null
condition|)
block|{
name|Set
name|servers
init|=
name|SolverRegisterService
operator|.
name|getInstance
argument_list|()
operator|.
name|getServers
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|servers
init|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|servers
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RemoteSolverServerProxy
name|server
init|=
operator|(
name|RemoteSolverServerProxy
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|solverName
operator|.
name|equals
argument_list|(
name|server
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|server
operator|.
name|shutdown
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
literal|"Kill"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|String
name|solverName
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"solver"
argument_list|)
decl_stmt|;
if|if
condition|(
name|solverName
operator|!=
literal|null
condition|)
block|{
name|Set
name|servers
init|=
name|SolverRegisterService
operator|.
name|getInstance
argument_list|()
operator|.
name|getServers
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|servers
init|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|servers
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RemoteSolverServerProxy
name|server
init|=
operator|(
name|RemoteSolverServerProxy
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|solverName
operator|.
name|equals
argument_list|(
name|server
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|server
operator|.
name|kill
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
literal|"Start Using"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|String
name|solverName
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"solver"
argument_list|)
decl_stmt|;
if|if
condition|(
name|solverName
operator|!=
literal|null
condition|)
block|{
name|Set
name|servers
init|=
name|SolverRegisterService
operator|.
name|getInstance
argument_list|()
operator|.
name|getServers
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|servers
init|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|servers
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RemoteSolverServerProxy
name|server
init|=
operator|(
name|RemoteSolverServerProxy
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|solverName
operator|.
name|equals
argument_list|(
name|server
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|server
operator|.
name|startUsing
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
literal|"Stop Using"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|String
name|solverName
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"solver"
argument_list|)
decl_stmt|;
if|if
condition|(
name|solverName
operator|!=
literal|null
condition|)
block|{
name|Set
name|servers
init|=
name|SolverRegisterService
operator|.
name|getInstance
argument_list|()
operator|.
name|getServers
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|servers
init|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|servers
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RemoteSolverServerProxy
name|server
init|=
operator|(
name|RemoteSolverServerProxy
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|solverName
operator|.
name|equals
argument_list|(
name|server
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|server
operator|.
name|stopUsing
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
literal|"Disconnect"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|String
name|solverName
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"solver"
argument_list|)
decl_stmt|;
if|if
condition|(
name|solverName
operator|!=
literal|null
condition|)
block|{
name|Set
name|servers
init|=
name|SolverRegisterService
operator|.
name|getInstance
argument_list|()
operator|.
name|getServers
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|servers
init|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|servers
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RemoteSolverServerProxy
name|server
init|=
operator|(
name|RemoteSolverServerProxy
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|solverName
operator|.
name|equals
argument_list|(
name|server
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|server
operator|.
name|disconnectProxy
argument_list|()
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
name|getSolvers
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|getServers
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|getExamSolvers
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|getStudentSolvers
argument_list|(
name|request
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showSolvers"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getName
parameter_list|(
name|String
name|puid
parameter_list|)
block|{
return|return
name|getName
argument_list|(
name|TimetableManager
operator|.
name|findByExternalId
argument_list|(
name|puid
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getName
parameter_list|(
name|TimetableManager
name|mgr
parameter_list|)
block|{
if|if
condition|(
name|mgr
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|mgr
operator|.
name|getShortName
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|getName
parameter_list|(
name|SolverGroup
name|sg
parameter_list|)
block|{
if|if
condition|(
name|sg
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|sg
operator|.
name|getAbbv
argument_list|()
return|;
block|}
specifier|private
name|void
name|getSolvers
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|WebTable
operator|.
name|setOrder
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
literal|"manageSolvers.ord"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"ord"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|WebTable
name|webTable
init|=
operator|new
name|WebTable
argument_list|(
literal|18
argument_list|,
literal|"Manage Course Solvers"
argument_list|,
literal|"manageSolvers.do?ord=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Created"
block|,
literal|"Last Used"
block|,
literal|"Session"
block|,
literal|"Host"
block|,
literal|"Config"
block|,
literal|"Status"
block|,
literal|"Owner"
block|,
literal|"Assign"
block|,
literal|"Total"
block|,
literal|"Time"
block|,
literal|"Stud"
block|,
literal|"Room"
block|,
literal|"Distr"
block|,
literal|"Instr"
block|,
literal|"TooBig"
block|,
literal|"Useless"
block|,
literal|"Pert"
block|,
literal|"Note"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|webTable
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap"
argument_list|)
expr_stmt|;
name|int
name|nrLines
init|=
literal|0
decl_stmt|;
name|Long
name|currentSessionId
init|=
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getUniqueId
argument_list|()
decl_stmt|;
name|SolverProxy
name|x
init|=
name|WebSolver
operator|.
name|getSolverNoSessionCheck
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|xId
init|=
operator|(
name|x
operator|==
literal|null
condition|?
literal|null
else|:
name|x
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"General.OwnerPuid"
argument_list|)
operator|)
decl_stmt|;
name|HashSet
name|solvers
init|=
operator|new
name|HashSet
argument_list|(
name|WebSolver
operator|.
name|getSolvers
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|solvers
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SolverProxy
name|solver
init|=
operator|(
name|SolverProxy
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|solver
operator|==
literal|null
condition|)
continue|continue;
name|DataProperties
name|properties
init|=
name|solver
operator|.
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
continue|continue;
name|String
name|runnerName
init|=
name|getName
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"General.OwnerPuid"
argument_list|,
literal|"N/A"
argument_list|)
argument_list|)
decl_stmt|;
name|Long
index|[]
name|solverGroupId
init|=
name|properties
operator|.
name|getPropertyLongArry
argument_list|(
literal|"General.SolverGroupId"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|ownerName
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|solverGroupId
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|solverGroupId
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|j
operator|>
literal|0
condition|)
name|ownerName
operator|+=
literal|"& "
expr_stmt|;
name|ownerName
operator|+=
name|getName
argument_list|(
operator|(
operator|new
name|SolverGroupDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|solverGroupId
index|[
name|j
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ownerName
operator|==
literal|null
operator|||
name|ownerName
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|ownerName
operator|=
literal|"N/A"
expr_stmt|;
if|if
condition|(
name|runnerName
operator|==
literal|null
condition|)
name|runnerName
operator|=
literal|"N/A"
expr_stmt|;
if|if
condition|(
name|ownerName
operator|.
name|equals
argument_list|(
literal|"N/A"
argument_list|)
condition|)
name|ownerName
operator|=
name|runnerName
expr_stmt|;
if|if
condition|(
name|runnerName
operator|.
name|equals
argument_list|(
literal|"N/A"
argument_list|)
condition|)
name|runnerName
operator|=
name|ownerName
expr_stmt|;
if|if
condition|(
operator|!
name|ownerName
operator|.
name|equals
argument_list|(
name|runnerName
argument_list|)
condition|)
name|ownerName
operator|=
name|runnerName
operator|+
literal|" as "
operator|+
name|ownerName
expr_stmt|;
name|Session
name|session
init|=
operator|(
operator|new
name|SessionDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|properties
operator|.
name|getPropertyLong
argument_list|(
literal|"General.SessionId"
argument_list|,
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|sessionLabel
init|=
literal|"N/A"
decl_stmt|;
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
name|sessionLabel
operator|=
name|session
operator|.
name|getLabel
argument_list|()
expr_stmt|;
name|SolverPredefinedSetting
name|setting
init|=
operator|(
operator|new
name|SolverPredefinedSettingDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|properties
operator|.
name|getPropertyLong
argument_list|(
literal|"General.SettingsId"
argument_list|,
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|settingLabel
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"Basic.Mode"
argument_list|,
literal|"N/A"
argument_list|)
decl_stmt|;
if|if
condition|(
name|setting
operator|!=
literal|null
condition|)
name|settingLabel
operator|=
name|setting
operator|.
name|getDescription
argument_list|()
expr_stmt|;
name|String
name|onClick
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|session
operator|!=
literal|null
operator|&&
name|session
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|currentSessionId
argument_list|)
operator|&&
name|properties
operator|.
name|getProperty
argument_list|(
literal|"General.OwnerPuid"
argument_list|)
operator|!=
literal|null
condition|)
name|onClick
operator|=
literal|"onClick=\"document.location='manageSolvers.do?op=Select&puid="
operator|+
name|properties
operator|.
name|getProperty
argument_list|(
literal|"General.OwnerPuid"
argument_list|)
operator|+
literal|"';\""
expr_stmt|;
name|String
name|status
init|=
literal|"N/A"
decl_stmt|;
try|try
block|{
name|status
operator|=
operator|(
name|String
operator|)
name|solver
operator|.
name|getProgress
argument_list|()
operator|.
name|get
argument_list|(
literal|"STATUS"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|String
name|note
init|=
literal|null
decl_stmt|;
try|try
block|{
name|note
operator|=
name|solver
operator|.
name|getNote
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|note
operator|!=
literal|null
condition|)
name|note
operator|=
name|note
operator|.
name|replaceAll
argument_list|(
literal|"\n"
argument_list|,
literal|"<br>"
argument_list|)
expr_stmt|;
name|PropertiesInfo
name|globalInfo
init|=
literal|null
decl_stmt|;
try|try
block|{
name|globalInfo
operator|=
name|solver
operator|.
name|getGlobalInfo
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|String
name|assigned
init|=
operator|(
name|globalInfo
operator|==
literal|null
condition|?
literal|"?"
else|:
name|globalInfo
operator|.
name|getProperty
argument_list|(
literal|"Assigned variables"
argument_list|,
literal|"N/A"
argument_list|)
operator|)
decl_stmt|;
name|String
name|totVal
init|=
operator|(
name|globalInfo
operator|==
literal|null
condition|?
literal|"?"
else|:
name|globalInfo
operator|.
name|getProperty
argument_list|(
literal|"Overall solution value"
argument_list|,
literal|"N/A"
argument_list|)
operator|)
decl_stmt|;
name|String
name|timePr
init|=
operator|(
name|globalInfo
operator|==
literal|null
condition|?
literal|"?"
else|:
name|globalInfo
operator|.
name|getProperty
argument_list|(
literal|"Time preferences"
argument_list|,
literal|"N/A"
argument_list|)
operator|)
decl_stmt|;
name|String
name|studConf
init|=
operator|(
name|globalInfo
operator|==
literal|null
condition|?
literal|"?"
else|:
name|globalInfo
operator|.
name|getProperty
argument_list|(
literal|"Student conflicts"
argument_list|,
literal|"N/A"
argument_list|)
operator|)
decl_stmt|;
name|String
name|roomPr
init|=
operator|(
name|globalInfo
operator|==
literal|null
condition|?
literal|"?"
else|:
name|globalInfo
operator|.
name|getProperty
argument_list|(
literal|"Room preferences"
argument_list|,
literal|"N/A"
argument_list|)
operator|)
decl_stmt|;
name|String
name|distPr
init|=
operator|(
name|globalInfo
operator|==
literal|null
condition|?
literal|"?"
else|:
name|globalInfo
operator|.
name|getProperty
argument_list|(
literal|"Distribution preferences"
argument_list|,
literal|"N/A"
argument_list|)
operator|)
decl_stmt|;
name|String
name|instrPr
init|=
operator|(
name|globalInfo
operator|==
literal|null
condition|?
literal|"?"
else|:
name|globalInfo
operator|.
name|getProperty
argument_list|(
literal|"Back-to-back instructor preferences"
argument_list|,
literal|"N/A"
argument_list|)
operator|)
decl_stmt|;
name|String
name|tooBig
init|=
operator|(
name|globalInfo
operator|==
literal|null
condition|?
literal|"?"
else|:
name|globalInfo
operator|.
name|getProperty
argument_list|(
literal|"Too big rooms"
argument_list|,
literal|"N/A"
argument_list|)
operator|)
decl_stmt|;
name|String
name|useless
init|=
operator|(
name|globalInfo
operator|==
literal|null
condition|?
literal|"?"
else|:
name|globalInfo
operator|.
name|getProperty
argument_list|(
literal|"Useless half-hours"
argument_list|,
literal|"N/A"
argument_list|)
operator|)
decl_stmt|;
name|String
name|pertPen
init|=
operator|(
name|globalInfo
operator|==
literal|null
condition|?
literal|"?"
else|:
name|globalInfo
operator|.
name|getProperty
argument_list|(
literal|"Perturbations: Total penalty"
argument_list|,
literal|"N/A"
argument_list|)
operator|)
decl_stmt|;
name|assigned
operator|=
name|assigned
operator|.
name|replaceAll
argument_list|(
literal|" of "
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
literal|"N/A"
operator|.
name|equals
argument_list|(
name|timePr
argument_list|)
operator|&&
name|timePr
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
operator|>=
literal|0
condition|)
name|timePr
operator|=
name|timePr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|timePr
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
literal|"N/A"
operator|.
name|equals
argument_list|(
name|roomPr
argument_list|)
operator|&&
name|roomPr
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
operator|>=
literal|0
condition|)
name|roomPr
operator|=
name|roomPr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|roomPr
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
literal|"N/A"
operator|.
name|equals
argument_list|(
name|instrPr
argument_list|)
operator|&&
name|instrPr
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
operator|>=
literal|0
condition|)
name|instrPr
operator|=
name|instrPr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|instrPr
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
literal|"N/A"
operator|.
name|equals
argument_list|(
name|assigned
argument_list|)
operator|&&
name|assigned
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|)
name|assigned
operator|=
name|assigned
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|assigned
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
literal|"N/A"
operator|.
name|equals
argument_list|(
name|timePr
argument_list|)
operator|&&
name|timePr
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|)
name|timePr
operator|=
name|timePr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|timePr
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
literal|"N/A"
operator|.
name|equals
argument_list|(
name|roomPr
argument_list|)
operator|&&
name|roomPr
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|)
name|roomPr
operator|=
name|roomPr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|roomPr
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
literal|"N/A"
operator|.
name|equals
argument_list|(
name|instrPr
argument_list|)
operator|&&
name|instrPr
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|)
name|instrPr
operator|=
name|instrPr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|instrPr
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
literal|"N/A"
operator|.
name|equals
argument_list|(
name|distPr
argument_list|)
operator|&&
name|distPr
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|)
name|distPr
operator|=
name|distPr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|distPr
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
literal|"N/A"
operator|.
name|equals
argument_list|(
name|tooBig
argument_list|)
operator|&&
name|tooBig
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|)
name|tooBig
operator|=
name|tooBig
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|tooBig
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
literal|"N/A"
operator|.
name|equals
argument_list|(
name|useless
argument_list|)
operator|&&
name|useless
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|)
name|useless
operator|=
name|useless
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|useless
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
name|studConf
operator|=
name|studConf
operator|.
name|replaceAll
argument_list|(
literal|" \\["
argument_list|,
literal|"("
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\]"
argument_list|,
literal|")"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|", "
argument_list|,
literal|","
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"hard:"
argument_list|,
literal|"h"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"distance:"
argument_list|,
literal|"d"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"commited:"
argument_list|,
literal|"c"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"committed:"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|Date
name|loaded
init|=
name|solver
operator|.
name|getLoadedDate
argument_list|()
decl_stmt|;
name|Date
name|lastUsed
init|=
name|solver
operator|.
name|getLastUsed
argument_list|()
decl_stmt|;
name|String
name|bgColor
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|x
operator|!=
literal|null
operator|&&
name|ToolBox
operator|.
name|equals
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"General.OwnerPuid"
argument_list|)
argument_list|,
name|xId
argument_list|)
condition|)
name|bgColor
operator|=
literal|"rgb(168,187,225)"
expr_stmt|;
name|String
name|host
init|=
name|solver
operator|.
name|getHostLabel
argument_list|()
decl_stmt|;
name|webTable
operator|.
name|addLine
argument_list|(
name|onClick
argument_list|,
operator|new
name|String
index|[]
block|{
operator|(
name|loaded
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|sDF
operator|.
name|format
argument_list|(
name|loaded
argument_list|)
operator|)
block|,
operator|(
name|lastUsed
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|sDF
operator|.
name|format
argument_list|(
name|lastUsed
argument_list|)
operator|)
block|,
name|sessionLabel
block|,
name|host
block|,
name|settingLabel
block|,
name|status
block|,
name|ownerName
block|,
name|assigned
block|,
name|totVal
block|,
name|timePr
block|,
name|studConf
block|,
name|roomPr
block|,
name|distPr
block|,
name|instrPr
block|,
name|tooBig
block|,
name|useless
block|,
name|pertPen
block|,
name|note
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|(
name|loaded
operator|==
literal|null
condition|?
operator|new
name|Date
argument_list|()
else|:
name|loaded
operator|)
block|,
operator|(
name|lastUsed
operator|==
literal|null
condition|?
operator|new
name|Date
argument_list|()
else|:
name|lastUsed
operator|)
block|,
name|sessionLabel
block|,
name|solver
operator|.
name|getHost
argument_list|()
block|,
name|settingLabel
block|,
name|status
block|,
name|ownerName
block|,
name|assigned
block|,
name|totVal
block|,
name|timePr
block|,
name|studConf
block|,
name|roomPr
block|,
name|distPr
block|,
name|instrPr
block|,
name|tooBig
block|,
name|useless
block|,
name|pertPen
block|,
operator|(
name|solver
operator|.
name|getNote
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|solver
operator|.
name|getNote
argument_list|()
operator|)
block|}
argument_list|)
operator|.
name|setBgColor
argument_list|(
name|bgColor
argument_list|)
expr_stmt|;
name|nrLines
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|nrLines
operator|==
literal|0
condition|)
name|webTable
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"<i>No solver is running.</i>"
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"ManageSolvers.table"
argument_list|,
name|webTable
operator|.
name|printTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
literal|"manageSolvers.ord"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|getServers
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|WebTable
operator|.
name|setOrder
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
literal|"manageSolvers.ord2"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"ord2"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|WebTable
name|webTable
init|=
operator|new
name|WebTable
argument_list|(
literal|11
argument_list|,
literal|"Available Servers"
argument_list|,
literal|"manageSolvers.do?ord2=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Host"
block|,
literal|"Version"
block|,
literal|"Started"
block|,
literal|"Available Memory"
block|,
literal|"Ping"
block|,
literal|"Usage"
block|,
literal|"NrInstances"
block|,
literal|"Active"
block|,
literal|"Working"
block|,
literal|"Passivated"
block|,
literal|"Operation(s)"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|webTable
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap"
argument_list|)
expr_stmt|;
name|DecimalFormat
name|df
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0.00"
argument_list|)
decl_stmt|;
name|int
name|nrLines
init|=
literal|0
decl_stmt|;
name|Set
name|servers
init|=
name|SolverRegisterService
operator|.
name|getInstance
argument_list|()
operator|.
name|getServers
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|servers
init|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|servers
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RemoteSolverServerProxy
name|server
init|=
operator|(
name|RemoteSolverServerProxy
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|server
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|String
name|op
init|=
literal|"<input type=\"button\" value=\"Disconnect\" onClick=\"if (confirm('Do you really want to disconnect server "
operator|+
name|server
operator|+
literal|"?')) document.location='manageSolvers.do?op=Disconnect&solver="
operator|+
name|server
operator|.
name|toString
argument_list|()
operator|+
literal|"';\">"
decl_stmt|;
name|webTable
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|server
operator|.
name|getAddress
argument_list|()
operator|.
name|getHostName
argument_list|()
operator|+
literal|":"
operator|+
name|server
operator|.
name|getPort
argument_list|()
block|,
literal|"<i>inactive</i>"
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
name|op
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|server
operator|.
name|getAddress
argument_list|()
operator|.
name|getHostName
argument_list|()
operator|+
literal|":"
operator|+
name|server
operator|.
name|getPort
argument_list|()
block|,
literal|""
block|,
literal|null
block|,
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
block|,
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
block|,
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
operator|-
literal|1
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
operator|-
literal|1
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
operator|-
literal|1
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
operator|-
literal|1
argument_list|)
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|int
name|nrActive
init|=
literal|0
decl_stmt|;
name|int
name|nrPassivated
init|=
literal|0
decl_stmt|;
name|int
name|nrWorking
init|=
literal|0
decl_stmt|;
name|long
name|mem
init|=
name|server
operator|.
name|getAvailableMemory
argument_list|()
decl_stmt|;
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|usage
init|=
name|server
operator|.
name|getUsage
argument_list|()
decl_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|server
operator|.
name|getSolvers
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|SolverProxy
name|solver
init|=
operator|(
name|SolverProxy
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|solver
operator|.
name|isPassivated
argument_list|()
condition|)
block|{
name|nrPassivated
operator|++
expr_stmt|;
block|}
else|else
block|{
name|nrActive
operator|++
expr_stmt|;
if|if
condition|(
name|solver
operator|.
name|isWorking
argument_list|()
condition|)
name|nrWorking
operator|++
expr_stmt|;
block|}
block|}
for|for
control|(
name|Enumeration
name|e
init|=
name|server
operator|.
name|getExamSolvers
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ExamSolverProxy
name|solver
init|=
operator|(
name|ExamSolverProxy
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|solver
operator|.
name|isPassivated
argument_list|()
condition|)
block|{
name|nrPassivated
operator|++
expr_stmt|;
block|}
else|else
block|{
name|nrActive
operator|++
expr_stmt|;
if|if
condition|(
name|solver
operator|.
name|isWorking
argument_list|()
condition|)
name|nrWorking
operator|++
expr_stmt|;
block|}
block|}
name|String
name|version
init|=
name|server
operator|.
name|getVersion
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"@build.number@"
argument_list|,
literal|"?"
argument_list|)
decl_stmt|;
name|Date
name|startTime
init|=
name|server
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
name|String
name|op
init|=
literal|"<input type=\"button\" value=\"Shutdown\" onClick=\"if (confirm('Do you really want to shutdown server "
operator|+
name|server
operator|+
literal|"?')) document.location='manageSolvers.do?op=Shutdown&solver="
operator|+
name|server
operator|.
name|toString
argument_list|()
operator|+
literal|"';\">"
decl_stmt|;
comment|//op+="&nbsp;&nbsp;<input type=\"button\" value=\"Disconnect\" onClick=\"if (confirm('Do you really want to disconnect server "+server+"?')) document.location='manageSolvers.do?op=Disconnect&solver="+server.toString()+"';\">";
comment|//op+="&nbsp;&nbsp;<input type=\"button\" value=\"Kill\" onClick=\"if (confirm('Do you really want to kill server "+server+"?')&& confirm('DO YOU REALLY REALLY WANT TO KILL SERVER "+server+"? THIS FUNCTION IS ONLY FOR TESTING PURPOSES AND SHOULD NEVER BE USED IN PRODUCTION!!!')) document.location='manageSolvers.do?op=Kill&solver="+server.toString()+"';\">";
if|if
condition|(
name|usage
operator|>=
literal|1000
condition|)
block|{
name|op
operator|+=
literal|"&nbsp;&nbsp;<input type=\"button\" value=\"Enable\" onClick=\"if (confirm('Do you really want to enable server "
operator|+
name|server
operator|+
literal|" for the new solver instances?')) document.location='manageSolvers.do?op=Start%20Using&solver="
operator|+
name|server
operator|.
name|toString
argument_list|()
operator|+
literal|"';\">"
expr_stmt|;
block|}
else|else
block|{
name|op
operator|+=
literal|"&nbsp;&nbsp;<input type=\"button\" value=\"Disable\" onClick=\"if (confirm('Do you really want to disable server "
operator|+
name|server
operator|+
literal|" for the new solver instances?')) document.location='manageSolvers.do?op=Stop%20Using&solver="
operator|+
name|server
operator|.
name|toString
argument_list|()
operator|+
literal|"';\">"
expr_stmt|;
block|}
name|webTable
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|server
operator|.
name|getAddress
argument_list|()
operator|.
name|getHostName
argument_list|()
operator|+
literal|":"
operator|+
name|server
operator|.
name|getPort
argument_list|()
block|,
operator|(
name|version
operator|==
literal|null
operator|||
literal|"-1"
operator|.
name|equals
argument_list|(
name|version
argument_list|)
condition|?
literal|"<i>N/A</i>"
else|:
name|version
operator|)
block|,
operator|(
name|startTime
operator|==
literal|null
condition|?
literal|"<i>N/A</i>"
else|:
name|sDF
operator|.
name|format
argument_list|(
name|startTime
argument_list|)
operator|)
block|,
name|df
operator|.
name|format
argument_list|(
operator|(
operator|(
name|double
operator|)
name|mem
operator|)
operator|/
literal|1024
operator|/
literal|1024
argument_list|)
operator|+
literal|" MB"
block|,
operator|(
name|t1
operator|-
name|t0
operator|)
operator|+
literal|" ms"
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|usage
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|nrActive
operator|+
name|nrPassivated
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|nrActive
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|nrWorking
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|nrPassivated
argument_list|)
block|,
name|op
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|server
operator|.
name|getAddress
argument_list|()
operator|.
name|getHostName
argument_list|()
operator|+
literal|":"
operator|+
name|server
operator|.
name|getPort
argument_list|()
block|,
name|version
block|,
name|startTime
block|,
operator|new
name|Long
argument_list|(
name|t1
operator|-
name|t0
argument_list|)
block|,
operator|new
name|Long
argument_list|(
name|mem
argument_list|)
block|,
operator|new
name|Long
argument_list|(
name|usage
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|nrActive
operator|+
name|nrPassivated
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|nrActive
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|nrWorking
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|nrPassivated
argument_list|)
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
name|nrLines
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ApplicationProperties
operator|.
name|isLocalSolverEnabled
argument_list|()
condition|)
block|{
name|int
name|nrActive
init|=
literal|0
decl_stmt|;
name|int
name|nrPassivated
init|=
literal|0
decl_stmt|;
name|int
name|nrWorking
init|=
literal|0
decl_stmt|;
name|long
name|mem
init|=
name|WebSolver
operator|.
name|getAvailableMemory
argument_list|()
decl_stmt|;
name|long
name|usage
init|=
name|WebSolver
operator|.
name|getUsage
argument_list|()
decl_stmt|;
name|Date
name|startTime
init|=
operator|(
name|SolverRegisterService
operator|.
name|getInstance
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|SolverRegisterService
operator|.
name|getInstance
argument_list|()
operator|.
name|getStartTime
argument_list|()
operator|)
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|WebSolver
operator|.
name|getLocalSolvers
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|SolverProxy
name|solver
init|=
operator|(
name|SolverProxy
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|solver
operator|.
name|isPassivated
argument_list|()
condition|)
block|{
name|nrPassivated
operator|++
expr_stmt|;
block|}
else|else
block|{
name|nrActive
operator|++
expr_stmt|;
if|if
condition|(
name|solver
operator|.
name|isWorking
argument_list|()
condition|)
name|nrWorking
operator|++
expr_stmt|;
block|}
block|}
for|for
control|(
name|Enumeration
name|e
init|=
name|WebSolver
operator|.
name|getLocalExaminationSolvers
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ExamSolverProxy
name|solver
init|=
operator|(
name|ExamSolverProxy
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|solver
operator|.
name|isPassivated
argument_list|()
condition|)
block|{
name|nrPassivated
operator|++
expr_stmt|;
block|}
else|else
block|{
name|nrActive
operator|++
expr_stmt|;
if|if
condition|(
name|solver
operator|.
name|isWorking
argument_list|()
condition|)
name|nrWorking
operator|++
expr_stmt|;
block|}
block|}
name|String
name|version
init|=
operator|(
name|Constants
operator|.
name|VERSION
operator|+
literal|"."
operator|+
name|Constants
operator|.
name|BLD_NUMBER
operator|)
operator|.
name|replaceAll
argument_list|(
literal|"@build.number@"
argument_list|,
literal|"?"
argument_list|)
decl_stmt|;
name|webTable
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"local"
block|,
operator|(
name|version
operator|==
literal|null
operator|||
literal|"-1"
operator|.
name|equals
argument_list|(
name|version
argument_list|)
condition|?
literal|"<i>N/A</i>"
else|:
name|version
operator|)
block|,
operator|(
name|startTime
operator|==
literal|null
condition|?
literal|"<i>N/A</i>"
else|:
name|sDF
operator|.
name|format
argument_list|(
name|startTime
argument_list|)
operator|)
block|,
name|df
operator|.
name|format
argument_list|(
operator|(
operator|(
name|double
operator|)
name|mem
operator|)
operator|/
literal|1024
operator|/
literal|1024
argument_list|)
operator|+
literal|" MB"
block|,
literal|"N/A"
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|usage
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|nrActive
operator|+
name|nrPassivated
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|nrActive
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|nrWorking
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|nrPassivated
argument_list|)
block|,
literal|""
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
literal|""
block|,
name|version
block|,
name|startTime
block|,
operator|new
name|Long
argument_list|(
name|mem
argument_list|)
block|,
operator|new
name|Long
argument_list|(
literal|0
argument_list|)
block|,
operator|new
name|Long
argument_list|(
name|usage
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|nrActive
operator|+
name|nrPassivated
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|nrActive
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|nrWorking
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|nrPassivated
argument_list|)
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
name|nrLines
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|nrLines
operator|==
literal|0
condition|)
name|webTable
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"<i>No solver server is running.</i>"
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"ManageSolvers.table2"
argument_list|,
name|webTable
operator|.
name|printTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
literal|"manageSolvers.ord2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|getExamSolvers
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|WebTable
operator|.
name|setOrder
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
literal|"manageSolvers.ord3"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"ord3"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|WebTable
name|webTable
init|=
operator|new
name|WebTable
argument_list|(
literal|19
argument_list|,
literal|"Manage Examination Solvers"
argument_list|,
literal|"manageSolvers.do?ord3=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Created"
block|,
literal|"Last Used"
block|,
literal|"Session"
block|,
literal|"Host"
block|,
literal|"Config"
block|,
literal|"Status"
block|,
literal|"Owner"
block|,
literal|"Type"
block|,
literal|"Assign"
block|,
literal|"Total"
block|,
literal|"StudConf"
block|,
literal|"InstConf"
block|,
literal|"Period"
block|,
literal|"Room"
block|,
literal|"RoomSplit"
block|,
literal|"RoomSize"
block|,
literal|"Distr"
block|,
literal|"Rot"
block|,
literal|"Pert"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|webTable
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap"
argument_list|)
expr_stmt|;
name|int
name|nrLines
init|=
literal|0
decl_stmt|;
name|Long
name|currentSessionId
init|=
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getUniqueId
argument_list|()
decl_stmt|;
name|ExamSolverProxy
name|x
init|=
name|WebSolver
operator|.
name|getExamSolverNoSessionCheck
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|xId
init|=
operator|(
name|x
operator|==
literal|null
condition|?
literal|null
else|:
name|x
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"General.OwnerPuid"
argument_list|)
operator|)
decl_stmt|;
for|for
control|(
name|ExamSolverProxy
name|solver
range|:
name|WebSolver
operator|.
name|getExamSolvers
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|solver
operator|==
literal|null
condition|)
continue|continue;
name|DataProperties
name|properties
init|=
name|solver
operator|.
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
continue|continue;
name|String
name|runnerName
init|=
name|getName
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"General.OwnerPuid"
argument_list|,
literal|"N/A"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|examType
init|=
name|solver
operator|.
name|getExamType
argument_list|()
decl_stmt|;
if|if
condition|(
name|runnerName
operator|==
literal|null
condition|)
name|runnerName
operator|=
literal|"N/A"
expr_stmt|;
name|Session
name|session
init|=
operator|(
operator|new
name|SessionDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|properties
operator|.
name|getPropertyLong
argument_list|(
literal|"General.SessionId"
argument_list|,
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|sessionLabel
init|=
literal|"N/A"
decl_stmt|;
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
name|sessionLabel
operator|=
name|session
operator|.
name|getLabel
argument_list|()
expr_stmt|;
name|SolverPredefinedSetting
name|setting
init|=
operator|(
operator|new
name|SolverPredefinedSettingDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|properties
operator|.
name|getPropertyLong
argument_list|(
literal|"General.SettingsId"
argument_list|,
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|settingLabel
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"Basic.Mode"
argument_list|,
literal|"N/A"
argument_list|)
decl_stmt|;
if|if
condition|(
name|setting
operator|!=
literal|null
condition|)
name|settingLabel
operator|=
name|setting
operator|.
name|getDescription
argument_list|()
expr_stmt|;
name|String
name|onClick
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|session
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|currentSessionId
argument_list|)
operator|&&
name|properties
operator|.
name|getProperty
argument_list|(
literal|"General.OwnerPuid"
argument_list|)
operator|!=
literal|null
condition|)
name|onClick
operator|=
literal|"onClick=\"document.location='manageSolvers.do?op=Select&examPuid="
operator|+
name|properties
operator|.
name|getProperty
argument_list|(
literal|"General.OwnerPuid"
argument_list|)
operator|+
literal|"';\""
expr_stmt|;
name|String
name|status
init|=
operator|(
name|String
operator|)
name|solver
operator|.
name|getProgress
argument_list|()
operator|.
name|get
argument_list|(
literal|"STATUS"
argument_list|)
decl_stmt|;
name|Hashtable
name|info
init|=
literal|null
decl_stmt|;
try|try
block|{
name|info
operator|=
name|solver
operator|.
name|currentSolutionInfo
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|String
name|assigned
init|=
operator|(
name|String
operator|)
name|info
operator|.
name|get
argument_list|(
literal|"Assigned variables"
argument_list|)
decl_stmt|;
name|String
name|totVal
init|=
operator|(
name|String
operator|)
name|info
operator|.
name|get
argument_list|(
literal|"Overall solution value"
argument_list|)
decl_stmt|;
name|String
name|dc
init|=
operator|(
name|String
operator|)
name|info
operator|.
name|get
argument_list|(
literal|"Direct Conflicts"
argument_list|)
decl_stmt|;
name|String
name|m2d
init|=
operator|(
name|String
operator|)
name|info
operator|.
name|get
argument_list|(
literal|"More Than 2 A Day Conflicts"
argument_list|)
decl_stmt|;
name|String
name|btb
init|=
operator|(
name|String
operator|)
name|info
operator|.
name|get
argument_list|(
literal|"Back-To-Back Conflicts"
argument_list|)
decl_stmt|;
name|String
name|conf
init|=
operator|(
name|dc
operator|==
literal|null
condition|?
literal|"0"
else|:
name|dc
operator|)
operator|+
literal|", "
operator|+
operator|(
name|m2d
operator|==
literal|null
condition|?
literal|"0"
else|:
name|m2d
operator|)
operator|+
literal|", "
operator|+
operator|(
name|btb
operator|==
literal|null
condition|?
literal|"0"
else|:
name|btb
operator|)
decl_stmt|;
name|String
name|idc
init|=
operator|(
name|String
operator|)
name|info
operator|.
name|get
argument_list|(
literal|"Instructor Direct Conflicts"
argument_list|)
decl_stmt|;
name|String
name|im2d
init|=
operator|(
name|String
operator|)
name|info
operator|.
name|get
argument_list|(
literal|"Instructor More Than 2 A Day Conflicts"
argument_list|)
decl_stmt|;
name|String
name|ibtb
init|=
operator|(
name|String
operator|)
name|info
operator|.
name|get
argument_list|(
literal|"Instructor Back-To-Back Conflicts"
argument_list|)
decl_stmt|;
name|String
name|iconf
init|=
operator|(
name|idc
operator|==
literal|null
condition|?
literal|"0"
else|:
name|idc
operator|)
operator|+
literal|", "
operator|+
operator|(
name|im2d
operator|==
literal|null
condition|?
literal|"0"
else|:
name|im2d
operator|)
operator|+
literal|", "
operator|+
operator|(
name|ibtb
operator|==
literal|null
condition|?
literal|"0"
else|:
name|ibtb
operator|)
decl_stmt|;
name|String
name|pp
init|=
operator|(
name|String
operator|)
name|info
operator|.
name|get
argument_list|(
literal|"Period Penalty"
argument_list|)
decl_stmt|;
name|String
name|rp
init|=
operator|(
name|String
operator|)
name|info
operator|.
name|get
argument_list|(
literal|"Room Penalty"
argument_list|)
decl_stmt|;
name|String
name|rsp
init|=
operator|(
name|String
operator|)
name|info
operator|.
name|get
argument_list|(
literal|"Room Split Penalty"
argument_list|)
decl_stmt|;
name|String
name|rsz
init|=
operator|(
name|String
operator|)
name|info
operator|.
name|get
argument_list|(
literal|"Room Size Penalty"
argument_list|)
decl_stmt|;
name|String
name|dp
init|=
operator|(
name|String
operator|)
name|info
operator|.
name|get
argument_list|(
literal|"Distribution Penalty"
argument_list|)
decl_stmt|;
name|String
name|erp
init|=
operator|(
name|String
operator|)
name|info
operator|.
name|get
argument_list|(
literal|"Exam Rotation Penalty"
argument_list|)
decl_stmt|;
name|String
name|pert
init|=
operator|(
name|String
operator|)
name|info
operator|.
name|get
argument_list|(
literal|"Perturbation Penalty"
argument_list|)
decl_stmt|;
name|Date
name|loaded
init|=
name|solver
operator|.
name|getLoadedDate
argument_list|()
decl_stmt|;
name|Date
name|lastUsed
init|=
name|solver
operator|.
name|getLastUsed
argument_list|()
decl_stmt|;
name|String
name|bgColor
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|x
operator|!=
literal|null
operator|&&
name|ToolBox
operator|.
name|equals
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"General.OwnerPuid"
argument_list|)
argument_list|,
name|xId
argument_list|)
condition|)
name|bgColor
operator|=
literal|"rgb(168,187,225)"
expr_stmt|;
name|webTable
operator|.
name|addLine
argument_list|(
name|onClick
argument_list|,
operator|new
name|String
index|[]
block|{
operator|(
name|loaded
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|sDF
operator|.
name|format
argument_list|(
name|loaded
argument_list|)
operator|)
block|,
operator|(
name|lastUsed
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|sDF
operator|.
name|format
argument_list|(
name|lastUsed
argument_list|)
operator|)
block|,
name|sessionLabel
block|,
name|solver
operator|.
name|getHostLabel
argument_list|()
block|,
name|settingLabel
block|,
name|status
block|,
name|runnerName
block|,
name|Exam
operator|.
name|sExamTypes
index|[
name|examType
index|]
block|,
operator|(
name|assigned
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|assigned
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|?
name|assigned
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|assigned
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
argument_list|)
else|:
name|assigned
operator|)
block|,
operator|(
name|totVal
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|totVal
operator|)
block|,
operator|(
name|conf
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|conf
operator|)
block|,
operator|(
name|iconf
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|iconf
operator|)
block|,
operator|(
name|pp
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|pp
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|?
name|pp
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pp
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
argument_list|)
else|:
name|pp
operator|)
block|,
operator|(
name|rp
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|rp
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|?
name|rp
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|rp
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
argument_list|)
else|:
name|rp
operator|)
block|,
operator|(
name|rsp
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|rsp
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|?
name|rsp
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|rsp
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
argument_list|)
else|:
name|rsp
operator|)
block|,
operator|(
name|rsz
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|rsz
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|?
name|rsz
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|rsz
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
argument_list|)
else|:
name|rsz
operator|)
block|,
operator|(
name|dp
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|dp
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|?
name|dp
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|dp
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
argument_list|)
else|:
name|dp
operator|)
block|,
operator|(
name|erp
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|erp
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|?
name|erp
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|erp
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
argument_list|)
else|:
name|erp
operator|)
block|,
operator|(
name|pert
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|pert
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|?
name|pert
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pert
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
argument_list|)
else|:
name|pert
operator|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|(
name|loaded
operator|==
literal|null
condition|?
operator|new
name|Date
argument_list|()
else|:
name|loaded
operator|)
block|,
operator|(
name|lastUsed
operator|==
literal|null
condition|?
operator|new
name|Date
argument_list|()
else|:
name|lastUsed
operator|)
block|,
name|sessionLabel
block|,
name|solver
operator|.
name|getHost
argument_list|()
block|,
name|settingLabel
block|,
name|status
block|,
name|runnerName
block|,
name|examType
block|,
operator|(
name|assigned
operator|==
literal|null
condition|?
literal|""
else|:
name|assigned
operator|)
block|,
operator|(
name|totVal
operator|==
literal|null
condition|?
literal|""
else|:
name|totVal
operator|)
block|,
operator|(
name|conf
operator|==
literal|null
condition|?
literal|""
else|:
name|conf
operator|)
block|,
operator|(
name|iconf
operator|==
literal|null
condition|?
literal|""
else|:
name|iconf
operator|)
block|,
operator|(
name|pp
operator|==
literal|null
condition|?
literal|""
else|:
name|pp
operator|)
block|,
operator|(
name|rp
operator|==
literal|null
condition|?
literal|""
else|:
name|rp
operator|)
block|,
operator|(
name|rsp
operator|==
literal|null
condition|?
literal|""
else|:
name|rsp
operator|)
block|,
operator|(
name|rsz
operator|==
literal|null
condition|?
literal|""
else|:
name|rsz
operator|)
block|,
operator|(
name|dp
operator|==
literal|null
condition|?
literal|""
else|:
name|dp
operator|)
block|,
operator|(
name|erp
operator|==
literal|null
condition|?
literal|""
else|:
name|erp
operator|)
block|,
operator|(
name|pert
operator|==
literal|null
condition|?
literal|""
else|:
name|pert
operator|)
block|}
argument_list|)
operator|.
name|setBgColor
argument_list|(
name|bgColor
argument_list|)
expr_stmt|;
name|nrLines
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|nrLines
operator|==
literal|0
condition|)
name|webTable
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"<i>No solver is running.</i>"
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"ManageSolvers.xtable"
argument_list|,
name|webTable
operator|.
name|printTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
literal|"manageSolvers.ord3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|getStudentSolvers
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|WebTable
operator|.
name|setOrder
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
literal|"manageSolvers.ord4"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"ord4"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|WebTable
name|webTable
init|=
operator|new
name|WebTable
argument_list|(
literal|12
argument_list|,
literal|"Manage Student Sectioning Solvers"
argument_list|,
literal|"manageSolvers.do?ord4=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Created"
block|,
literal|"Last Used"
block|,
literal|"Session"
block|,
literal|"Host"
block|,
literal|"Config"
block|,
literal|"Status"
block|,
literal|"Owner"
block|,
literal|"Assign"
block|,
literal|"Total"
block|,
literal|"CompSched"
block|,
literal|"DistConf"
block|,
literal|"Pert"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|webTable
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap"
argument_list|)
expr_stmt|;
name|int
name|nrLines
init|=
literal|0
decl_stmt|;
name|Long
name|currentSessionId
init|=
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getUniqueId
argument_list|()
decl_stmt|;
name|StudentSolverProxy
name|x
init|=
name|WebSolver
operator|.
name|getStudentSolverNoSessionCheck
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|xId
init|=
operator|(
name|x
operator|==
literal|null
condition|?
literal|null
else|:
name|x
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"General.OwnerPuid"
argument_list|)
operator|)
decl_stmt|;
for|for
control|(
name|StudentSolverProxy
name|solver
range|:
name|WebSolver
operator|.
name|getStudentSolvers
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|solver
operator|==
literal|null
condition|)
continue|continue;
name|DataProperties
name|properties
init|=
name|solver
operator|.
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
continue|continue;
name|String
name|runnerName
init|=
name|getName
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"General.OwnerPuid"
argument_list|,
literal|"N/A"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|runnerName
operator|==
literal|null
condition|)
name|runnerName
operator|=
literal|"N/A"
expr_stmt|;
name|Session
name|session
init|=
operator|(
operator|new
name|SessionDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|properties
operator|.
name|getPropertyLong
argument_list|(
literal|"General.SessionId"
argument_list|,
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|sessionLabel
init|=
literal|"N/A"
decl_stmt|;
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
name|sessionLabel
operator|=
name|session
operator|.
name|getLabel
argument_list|()
expr_stmt|;
name|SolverPredefinedSetting
name|setting
init|=
operator|(
operator|new
name|SolverPredefinedSettingDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|properties
operator|.
name|getPropertyLong
argument_list|(
literal|"General.SettingsId"
argument_list|,
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|settingLabel
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"Basic.Mode"
argument_list|,
literal|"N/A"
argument_list|)
decl_stmt|;
if|if
condition|(
name|setting
operator|!=
literal|null
condition|)
name|settingLabel
operator|=
name|setting
operator|.
name|getDescription
argument_list|()
expr_stmt|;
name|String
name|onClick
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|session
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|currentSessionId
argument_list|)
operator|&&
name|properties
operator|.
name|getProperty
argument_list|(
literal|"General.OwnerPuid"
argument_list|)
operator|!=
literal|null
condition|)
name|onClick
operator|=
literal|"onClick=\"document.location='manageSolvers.do?op=Select&sectionPuid="
operator|+
name|properties
operator|.
name|getProperty
argument_list|(
literal|"General.OwnerPuid"
argument_list|)
operator|+
literal|"';\""
expr_stmt|;
name|String
name|status
init|=
operator|(
name|String
operator|)
name|solver
operator|.
name|getProgress
argument_list|()
operator|.
name|get
argument_list|(
literal|"STATUS"
argument_list|)
decl_stmt|;
name|Hashtable
name|info
init|=
literal|null
decl_stmt|;
try|try
block|{
name|info
operator|=
name|solver
operator|.
name|currentSolutionInfo
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|String
name|assigned
init|=
operator|(
name|String
operator|)
name|info
operator|.
name|get
argument_list|(
literal|"Assigned variables"
argument_list|)
decl_stmt|;
name|String
name|totVal
init|=
operator|(
name|String
operator|)
name|info
operator|.
name|get
argument_list|(
literal|"Overall solution value"
argument_list|)
decl_stmt|;
name|String
name|compSch
init|=
operator|(
name|String
operator|)
name|info
operator|.
name|get
argument_list|(
literal|"Students with complete schedule"
argument_list|)
decl_stmt|;
name|String
name|distConf
init|=
operator|(
name|String
operator|)
name|info
operator|.
name|get
argument_list|(
literal|"Student distance conflicts"
argument_list|)
decl_stmt|;
name|String
name|pert
init|=
operator|(
name|String
operator|)
name|info
operator|.
name|get
argument_list|(
literal|"Perturbation Penalty"
argument_list|)
decl_stmt|;
name|Date
name|loaded
init|=
name|solver
operator|.
name|getLoadedDate
argument_list|()
decl_stmt|;
name|Date
name|lastUsed
init|=
name|solver
operator|.
name|getLastUsed
argument_list|()
decl_stmt|;
name|String
name|bgColor
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|x
operator|!=
literal|null
operator|&&
name|ToolBox
operator|.
name|equals
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"General.OwnerPuid"
argument_list|)
argument_list|,
name|xId
argument_list|)
condition|)
name|bgColor
operator|=
literal|"rgb(168,187,225)"
expr_stmt|;
name|webTable
operator|.
name|addLine
argument_list|(
name|onClick
argument_list|,
operator|new
name|String
index|[]
block|{
operator|(
name|loaded
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|sDF
operator|.
name|format
argument_list|(
name|loaded
argument_list|)
operator|)
block|,
operator|(
name|lastUsed
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|sDF
operator|.
name|format
argument_list|(
name|lastUsed
argument_list|)
operator|)
block|,
name|sessionLabel
block|,
name|solver
operator|.
name|getHostLabel
argument_list|()
block|,
name|settingLabel
block|,
name|status
block|,
name|runnerName
block|,
operator|(
name|assigned
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|assigned
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|?
name|assigned
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|assigned
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
argument_list|)
else|:
name|assigned
operator|)
block|,
operator|(
name|totVal
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|totVal
operator|)
block|,
operator|(
name|compSch
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|compSch
operator|)
block|,
operator|(
name|distConf
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|distConf
operator|)
block|,
operator|(
name|pert
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|pert
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|?
name|pert
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pert
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
argument_list|)
else|:
name|pert
operator|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|(
name|loaded
operator|==
literal|null
condition|?
operator|new
name|Date
argument_list|()
else|:
name|loaded
operator|)
block|,
operator|(
name|lastUsed
operator|==
literal|null
condition|?
operator|new
name|Date
argument_list|()
else|:
name|lastUsed
operator|)
block|,
name|sessionLabel
block|,
name|solver
operator|.
name|getHost
argument_list|()
block|,
name|settingLabel
block|,
name|status
block|,
name|runnerName
block|,
operator|(
name|assigned
operator|==
literal|null
condition|?
literal|""
else|:
name|assigned
operator|)
block|,
operator|(
name|totVal
operator|==
literal|null
condition|?
literal|""
else|:
name|totVal
operator|)
block|,
operator|(
name|compSch
operator|==
literal|null
condition|?
literal|""
else|:
name|compSch
operator|)
block|,
operator|(
name|distConf
operator|==
literal|null
condition|?
literal|""
else|:
name|distConf
operator|)
block|,
operator|(
name|pert
operator|==
literal|null
condition|?
literal|""
else|:
name|pert
operator|)
block|}
argument_list|)
operator|.
name|setBgColor
argument_list|(
name|bgColor
argument_list|)
expr_stmt|;
name|nrLines
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|nrLines
operator|==
literal|0
condition|)
name|webTable
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"<i>No solver is running.</i>"
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"ManageSolvers.stable"
argument_list|,
name|webTable
operator|.
name|printTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
literal|"manageSolvers.ord4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

