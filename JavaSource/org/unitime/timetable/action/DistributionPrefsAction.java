begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|util
operator|.
name|MessageResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|messages
operator|.
name|CourseMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|SessionAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|DistributionPrefsForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Preference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|ClassComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|SchedulingSubpartComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|Class_DAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DistributionPrefDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DistributionTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstructionalOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SchedulingSubpartDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|ComboBoxLookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|LookupTables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|BackTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|DistributionPrefsTableBuilder
import|;
end_import

begin_comment
comment|/**   * MyEclipse Struts  * Creation date: 12-14-2005  *   * XDoclet definition:  * @struts:action path="/distributionPrefs" name="distributionPrefsForm" input="/user/distributionPrefs.jsp" scope="request"  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"/distributionPrefs"
argument_list|)
specifier|public
class|class
name|DistributionPrefsAction
extends|extends
name|Action
block|{
specifier|protected
specifier|final
specifier|static
name|CourseMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|CourseMessages
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Autowired
name|SessionContext
name|sessionContext
decl_stmt|;
comment|// --------------------------------------------------------- Instance Variables
comment|// --------------------------------------------------------- Methods
comment|/**       * Method execute      * @param mapping      * @param form      * @param request      * @param response      * @return ActionForward      */
specifier|public
name|ActionForward
name|execute
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|DistributionPreferences
argument_list|)
expr_stmt|;
name|MessageResources
name|rsc
init|=
name|getResources
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|ActionMessages
name|errors
init|=
operator|new
name|ActionMessages
argument_list|()
decl_stmt|;
name|DistributionPrefsForm
name|frm
init|=
operator|(
name|DistributionPrefsForm
operator|)
name|form
decl_stmt|;
name|String
name|reloadId
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"reloadId"
argument_list|)
decl_stmt|;
name|String
name|reloadCause
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"reloadCause"
argument_list|)
decl_stmt|;
name|String
name|deleteId
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"deleteId"
argument_list|)
decl_stmt|;
name|String
name|deleteType
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"deleteType"
argument_list|)
decl_stmt|;
name|String
name|distPrefId
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"dp"
argument_list|)
decl_stmt|;
name|String
name|op
init|=
name|frm
operator|.
name|getOp
argument_list|()
decl_stmt|;
if|if
condition|(
name|op
operator|==
literal|null
operator|||
name|op
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|op
operator|=
literal|"view"
expr_stmt|;
name|frm
operator|.
name|setOp
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
name|frm
operator|.
name|setFilterSubjectAreas
argument_list|(
name|SubjectArea
operator|.
name|getUserSubjectAreas
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"DistTypeChange"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"op2"
argument_list|)
argument_list|)
operator|||
literal|"GroupingChange"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"op2"
argument_list|)
argument_list|)
condition|)
name|op
operator|=
literal|"reload pref"
expr_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"op: "
operator|+
name|op
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"deleteId: "
operator|+
name|deleteId
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"deleteType: "
operator|+
name|deleteType
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"reloadCause: "
operator|+
name|reloadCause
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"reloadId: "
operator|+
name|reloadId
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"distPrefId: "
operator|+
name|distPrefId
argument_list|)
expr_stmt|;
if|if
condition|(
name|reloadCause
operator|!=
literal|null
operator|&&
name|reloadCause
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|op
operator|=
literal|"reload"
expr_stmt|;
comment|// Cancel - Display blank form
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.cancel"
argument_list|)
argument_list|)
condition|)
block|{
name|frm
operator|.
name|reset
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
expr_stmt|;
if|if
condition|(
name|BackTracker
operator|.
name|doBack
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
condition|)
return|return
literal|null
return|;
name|op
operator|=
literal|"view"
expr_stmt|;
comment|//in case no back is available
block|}
comment|// Set lookup tables lists
comment|//LookupTables.setupPrefLevels(request);	 // Preference Levels
name|LookupTables
operator|.
name|setupDistribTypes
argument_list|(
name|request
argument_list|,
name|sessionContext
argument_list|)
expr_stmt|;
comment|// Distribution Types
name|Vector
name|subjectAreaList
init|=
name|setupSubjectAreas
argument_list|(
name|request
argument_list|)
decl_stmt|;
comment|// Subject Areas
comment|// Add / Update distribution pref
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.save"
argument_list|)
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.update"
argument_list|)
argument_list|)
condition|)
block|{
name|Debug
operator|.
name|debug
argument_list|(
literal|"Saving distribution pref ..."
argument_list|)
expr_stmt|;
name|errors
operator|=
name|frm
operator|.
name|validate
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
expr_stmt|;
if|if
condition|(
name|errors
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
try|try
block|{
name|doAddOrUpdate
argument_list|(
name|request
argument_list|,
name|frm
argument_list|)
expr_stmt|;
if|if
condition|(
name|frm
operator|.
name|getDistPrefId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|setAttribute
argument_list|(
literal|"backType"
argument_list|,
literal|"PreferenceGroup"
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"backId"
argument_list|,
name|frm
operator|.
name|getDistPrefId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|frm
operator|.
name|reset
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
expr_stmt|;
if|if
condition|(
name|BackTracker
operator|.
name|doBack
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
condition|)
return|return
literal|null
return|;
name|op
operator|=
literal|"view"
expr_stmt|;
comment|//in case no back is available
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
literal|"classes"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
block|}
else|else
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
comment|// Delete distribution object / pref
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.delete"
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|deleteType
operator|.
name|equals
argument_list|(
literal|"distObject"
argument_list|)
condition|)
block|{
name|frm
operator|.
name|removeFromLists
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|deleteId
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deleteType
operator|.
name|equals
argument_list|(
literal|"distPref"
argument_list|)
condition|)
block|{
name|distPrefId
operator|=
name|frm
operator|.
name|getDistPrefId
argument_list|()
expr_stmt|;
name|doDelete
argument_list|(
name|request
argument_list|,
name|distPrefId
argument_list|)
expr_stmt|;
name|frm
operator|.
name|reset
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
expr_stmt|;
if|if
condition|(
name|BackTracker
operator|.
name|doBack
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
condition|)
return|return
literal|null
return|;
name|op
operator|=
literal|"view"
expr_stmt|;
comment|//in case no back is available
block|}
block|}
comment|// Add new class - redirect from SchedulingSubpartEdit / ClassEdit
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.addDistPref"
argument_list|)
argument_list|)
operator|||
name|MSG
operator|.
name|actionAddDistributionPreference
argument_list|()
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|Debug
operator|.
name|debug
argument_list|(
literal|"Adding new Class via redirect ..."
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setDistType
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setGrouping
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getAttribute
argument_list|(
literal|"subjectAreaId"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|frm
operator|.
name|addToSubjectArea
argument_list|(
name|request
operator|.
name|getAttribute
argument_list|(
literal|"subjectAreaId"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|addToItype
argument_list|(
name|request
operator|.
name|getAttribute
argument_list|(
literal|"schedSubpartId"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|addToCourseNbr
argument_list|(
name|request
operator|.
name|getAttribute
argument_list|(
literal|"courseOffrId"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|addToClassNumber
argument_list|(
name|request
operator|.
name|getAttribute
argument_list|(
literal|"classId"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"addedClass"
argument_list|,
literal|""
operator|+
operator|(
name|frm
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Add new class
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.addClass_"
argument_list|)
argument_list|)
condition|)
block|{
name|Debug
operator|.
name|debug
argument_list|(
literal|"Adding new Class ..."
argument_list|)
expr_stmt|;
name|String
name|subjAreaId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|subjectAreaList
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
name|subjAreaId
operator|=
operator|(
operator|(
name|ComboBoxLookup
operator|)
name|subjectAreaList
operator|.
name|elementAt
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|frm
operator|.
name|addNewClass
argument_list|(
name|subjAreaId
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"addedClass"
argument_list|,
literal|""
operator|+
operator|(
name|frm
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.search"
argument_list|)
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.exportPDF"
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|subjectAreaId
init|=
name|frm
operator|.
name|getFilterSubjectAreaId
argument_list|()
decl_stmt|;
name|String
name|courseNbr
init|=
name|frm
operator|.
name|getFilterCourseNbr
argument_list|()
decl_stmt|;
if|if
condition|(
name|subjectAreaId
operator|!=
literal|null
operator|&&
name|subjectAreaId
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|sessionContext
operator|.
name|setAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OfferingsSubjectArea
argument_list|,
name|subjectAreaId
argument_list|)
expr_stmt|;
else|else
name|sessionContext
operator|.
name|removeAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OfferingsSubjectArea
argument_list|)
expr_stmt|;
if|if
condition|(
name|courseNbr
operator|!=
literal|null
operator|&&
name|courseNbr
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|sessionContext
operator|.
name|setAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OfferingsCourseNumber
argument_list|,
name|courseNbr
argument_list|)
expr_stmt|;
else|else
name|sessionContext
operator|.
name|removeAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OfferingsCourseNumber
argument_list|)
expr_stmt|;
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.exportPDF"
argument_list|)
argument_list|)
condition|)
name|op
operator|=
literal|"export"
expr_stmt|;
else|else
name|op
operator|=
literal|"view"
expr_stmt|;
block|}
comment|// Load Distribution Pref
if|if
condition|(
name|op
operator|!=
literal|null
operator|&&
operator|(
name|op
operator|.
name|equals
argument_list|(
literal|"view"
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
literal|"export"
argument_list|)
operator|)
operator|&&
name|distPrefId
operator|!=
literal|null
operator|&&
name|distPrefId
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Debug
operator|.
name|debug
argument_list|(
literal|"Loading dist pref - "
operator|+
name|distPrefId
argument_list|)
expr_stmt|;
name|frm
operator|.
name|reset
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|doLoad
argument_list|(
name|frm
argument_list|,
name|distPrefId
argument_list|)
expr_stmt|;
block|}
comment|// Reload
if|if
condition|(
name|op
operator|!=
literal|null
operator|&&
name|op
operator|.
name|equals
argument_list|(
literal|"reload"
argument_list|)
condition|)
block|{
comment|// Subject area changed
if|if
condition|(
name|reloadCause
operator|!=
literal|null
operator|&&
name|reloadCause
operator|.
name|equals
argument_list|(
literal|"subjectArea"
argument_list|)
condition|)
block|{
name|int
name|index
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|reloadId
argument_list|)
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"subj area changed ... "
operator|+
name|reloadId
operator|+
literal|" - "
operator|+
name|frm
operator|.
name|getSubjectArea
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
comment|// Reset values to blank
name|frm
operator|.
name|setCourseNbr
argument_list|(
name|index
argument_list|,
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setItype
argument_list|(
name|index
argument_list|,
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setClassNumber
argument_list|(
name|index
argument_list|,
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
expr_stmt|;
block|}
comment|// Move Distribution object up one level
if|if
condition|(
name|reloadCause
operator|!=
literal|null
operator|&&
name|reloadCause
operator|.
name|equals
argument_list|(
literal|"moveUp"
argument_list|)
condition|)
block|{
name|int
name|index
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|reloadId
argument_list|)
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"moving up ... "
operator|+
name|reloadId
argument_list|)
expr_stmt|;
name|frm
operator|.
name|swap
argument_list|(
name|index
argument_list|,
name|index
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Move Distribution object down one level
if|if
condition|(
name|reloadCause
operator|!=
literal|null
operator|&&
name|reloadCause
operator|.
name|equals
argument_list|(
literal|"moveDown"
argument_list|)
condition|)
block|{
name|int
name|index
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|reloadId
argument_list|)
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"moving down ... "
operator|+
name|reloadId
argument_list|)
expr_stmt|;
name|frm
operator|.
name|swap
argument_list|(
name|index
argument_list|,
name|index
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Set up lookup list
name|setLookupLists
argument_list|(
name|request
argument_list|,
name|frm
argument_list|,
name|subjectAreaList
argument_list|,
name|errors
argument_list|)
expr_stmt|;
comment|// Distribution Objects
if|if
condition|(
name|frm
operator|.
name|getDistType
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|frm
operator|.
name|getDistType
argument_list|()
operator|.
name|equals
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
condition|)
block|{
name|Vector
name|prefs
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|DistributionType
name|dist
init|=
operator|(
operator|new
name|DistributionTypeDAO
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|frm
operator|.
name|getDistType
argument_list|()
argument_list|)
argument_list|)
operator|)
decl_stmt|;
name|frm
operator|.
name|setDescription
argument_list|(
name|dist
operator|.
name|getDescr
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|containsPref
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|PreferenceLevel
operator|.
name|getPreferenceLevelList
argument_list|(
literal|false
argument_list|)
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|PreferenceLevel
name|pref
init|=
operator|(
name|PreferenceLevel
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|dist
operator|.
name|isAllowed
argument_list|(
name|pref
argument_list|)
condition|)
block|{
name|prefs
operator|.
name|addElement
argument_list|(
name|pref
argument_list|)
expr_stmt|;
if|if
condition|(
name|frm
operator|.
name|getPrefLevel
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|frm
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|equals
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
operator|&&
name|pref
operator|.
name|getPrefId
argument_list|()
operator|.
name|equals
argument_list|(
operator|new
name|Integer
argument_list|(
name|frm
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
argument_list|)
condition|)
name|containsPref
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|containsPref
condition|)
name|frm
operator|.
name|setPrefLevel
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefs
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
name|frm
operator|.
name|setPrefLevel
argument_list|(
operator|(
operator|(
name|PreferenceLevel
operator|)
name|prefs
operator|.
name|firstElement
argument_list|()
operator|)
operator|.
name|getPrefId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|PreferenceLevel
operator|.
name|PREF_LEVEL_ATTR_NAME
argument_list|,
name|prefs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|request
operator|.
name|setAttribute
argument_list|(
name|PreferenceLevel
operator|.
name|PREF_LEVEL_ATTR_NAME
argument_list|,
operator|new
name|Vector
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setDescription
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|frm
operator|.
name|getGrouping
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|frm
operator|.
name|getGrouping
argument_list|()
operator|.
name|equals
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
condition|)
block|{
name|frm
operator|.
name|setGroupingDescription
argument_list|(
name|DistributionPref
operator|.
name|getGroupingDescription
argument_list|(
name|frm
operator|.
name|getGroupingInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"export"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|&&
operator|(
name|frm
operator|.
name|getDistPrefId
argument_list|()
operator|==
literal|null
operator|||
name|frm
operator|.
name|getDistPrefId
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
name|DistributionPrefsTableBuilder
name|tbl
init|=
operator|new
name|DistributionPrefsTableBuilder
argument_list|()
decl_stmt|;
name|File
name|file
init|=
name|tbl
operator|.
name|getAllDistPrefsTableForCurrentUserAsPdf
argument_list|(
name|sessionContext
argument_list|,
name|frm
operator|.
name|getFilterSubjectAreaId
argument_list|()
argument_list|,
name|frm
operator|.
name|getFilterCourseNbr
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|REQUEST_OPEN_URL
argument_list|,
literal|"temp/"
operator|+
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|op
operator|=
literal|"view"
expr_stmt|;
block|}
name|request
operator|.
name|setAttribute
argument_list|(
name|DistributionPrefsForm
operator|.
name|LIST_SIZE_ATTR
argument_list|,
literal|""
operator|+
operator|(
name|frm
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"view"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|&&
operator|(
name|frm
operator|.
name|getDistPrefId
argument_list|()
operator|==
literal|null
operator|||
name|frm
operator|.
name|getDistPrefId
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
name|frm
operator|.
name|setFilterSubjectAreaId
argument_list|(
operator|(
name|String
operator|)
name|sessionContext
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OfferingsSubjectArea
argument_list|)
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setFilterCourseNbr
argument_list|(
operator|(
name|String
operator|)
name|sessionContext
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OfferingsCourseNumber
argument_list|)
argument_list|)
expr_stmt|;
name|DistributionPrefsTableBuilder
name|tbl
init|=
operator|new
name|DistributionPrefsTableBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|frm
operator|.
name|getFilterSubjectAreaId
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|DepartmentIndependent
argument_list|)
condition|)
name|frm
operator|.
name|setFilterSubjectAreaId
argument_list|(
name|Constants
operator|.
name|BLANK_OPTION_VALUE
argument_list|)
expr_stmt|;
else|else
name|frm
operator|.
name|setFilterSubjectAreaId
argument_list|(
name|Constants
operator|.
name|ALL_OPTION_VALUE
argument_list|)
expr_stmt|;
block|}
name|String
name|html
init|=
name|tbl
operator|.
name|getAllDistPrefsTableForCurrentUser
argument_list|(
name|request
argument_list|,
name|sessionContext
argument_list|,
name|frm
operator|.
name|getFilterSubjectAreaId
argument_list|()
argument_list|,
name|frm
operator|.
name|getFilterCourseNbr
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|html
operator|!=
literal|null
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
name|DistributionPref
operator|.
name|DIST_PREF_REQUEST_ATTR
argument_list|,
name|html
argument_list|)
expr_stmt|;
name|BackTracker
operator|.
name|markForBack
argument_list|(
name|request
argument_list|,
literal|"distributionPrefs.do"
argument_list|,
literal|"Distribution Preferences"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"list"
argument_list|)
return|;
block|}
return|return
name|mapping
operator|.
name|findForward
argument_list|(
name|frm
operator|.
name|getDistPrefId
argument_list|()
operator|==
literal|null
operator|||
name|frm
operator|.
name|getDistPrefId
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|"add"
else|:
literal|"edit"
argument_list|)
return|;
block|}
comment|/**      * Get Subject Areas for an acad session for a user and store it in request object      * Gets all subject areas for LLR Manager, Lab Manager and Admin      * @param request      * @throws Exception      */
specifier|public
name|Vector
name|setupSubjectAreas
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|Exception
block|{
name|Set
name|subjectAreas
init|=
name|SubjectArea
operator|.
name|getUserSubjectAreas
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|subjectAreas
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Vector
name|v
init|=
operator|new
name|Vector
argument_list|(
name|subjectAreas
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|subjectAreas
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SubjectArea
name|sa
init|=
operator|(
name|SubjectArea
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|v
operator|.
name|addElement
argument_list|(
operator|new
name|ComboBoxLookup
argument_list|(
name|sa
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|,
name|sa
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|v
return|;
block|}
comment|/**      * @param index      */
specifier|private
name|void
name|setLookupLists
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|DistributionPrefsForm
name|frm
parameter_list|,
name|Vector
name|subjectAreaList
parameter_list|,
name|ActionMessages
name|errors
parameter_list|)
block|{
name|int
name|ct
init|=
name|frm
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|ct
condition|;
name|index
operator|++
control|)
block|{
name|String
name|subjectAreaId
init|=
name|frm
operator|.
name|getSubjectArea
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|String
name|courseNbr
init|=
name|frm
operator|.
name|getCourseNbr
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|String
name|subpart
init|=
name|frm
operator|.
name|getItype
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|String
name|classNumber
init|=
name|frm
operator|.
name|getClassNumber
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|Vector
name|crsNumList
init|=
literal|null
decl_stmt|;
name|Vector
name|subpartList
init|=
literal|null
decl_stmt|;
name|Vector
name|classNumList
init|=
literal|null
decl_stmt|;
comment|// Process subject area selection
if|if
condition|(
name|subjectAreaId
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|subjectAreaId
operator|.
name|equals
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
condition|)
block|{
name|crsNumList
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
name|subpartList
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
name|classNumList
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|StringBuffer
name|query
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"select co.uniqueId, co.courseNbr, co.title "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"  from InstructionalOffering as io , CourseOffering co "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|" where co.subjectArea.uniqueId = :subjectAreaId "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"       and io.uniqueId = co.instructionalOffering.uniqueId "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"       and io.notOffered = false "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"       and co.isControl = true "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|" order by co.courseNbr "
argument_list|)
expr_stmt|;
name|InstructionalOfferingDAO
name|idao
init|=
operator|new
name|InstructionalOfferingDAO
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|idao
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Query
name|q
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|q
operator|.
name|setFetchSize
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|q
operator|.
name|setInteger
argument_list|(
literal|"subjectAreaId"
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|subjectAreaId
argument_list|)
argument_list|)
expr_stmt|;
name|List
name|result
init|=
name|q
operator|.
name|list
argument_list|()
decl_stmt|;
name|crsNumList
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|result
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Object
index|[]
name|a
init|=
operator|(
name|Object
index|[]
operator|)
name|result
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ComboBoxLookup
name|cbl
init|=
operator|new
name|ComboBoxLookup
argument_list|(
operator|(
name|a
index|[
literal|1
index|]
operator|.
name|toString
argument_list|()
operator|+
literal|" - "
operator|+
operator|(
name|a
index|[
literal|2
index|]
operator|==
literal|null
condition|?
literal|""
else|:
name|a
index|[
literal|2
index|]
operator|.
name|toString
argument_list|()
operator|)
operator|)
argument_list|,
name|a
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|crsNumList
operator|.
name|addElement
argument_list|(
name|cbl
argument_list|)
expr_stmt|;
block|}
comment|// Only one record - select it to save time and one more click
if|if
condition|(
name|result
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|ComboBoxLookup
name|cbl
init|=
operator|(
name|ComboBoxLookup
operator|)
name|crsNumList
operator|.
name|elementAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|frm
operator|.
name|setCourseNbr
argument_list|(
name|index
argument_list|,
name|cbl
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|courseNbr
operator|=
name|frm
operator|.
name|getCourseNbr
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Process course number selection
if|if
condition|(
name|courseNbr
operator|.
name|equals
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
condition|)
block|{
name|subpartList
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
name|classNumList
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|query
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|" select distinct s "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"   from CourseOffering co, "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"        InstructionalOffering io, "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"        InstrOfferingConfig ioc, "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"        SchedulingSubpart s "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"  where co.uniqueId=:courseNbr "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"    and co.instructionalOffering.uniqueId=io.uniqueId "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"    and ioc.instructionalOffering.uniqueId=io.uniqueId "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"    and s.instrOfferingConfig.uniqueId=ioc.uniqueId "
argument_list|)
expr_stmt|;
name|q
operator|=
name|hibSession
operator|.
name|createQuery
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|setFetchSize
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|q
operator|.
name|setInteger
argument_list|(
literal|"courseNbr"
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|courseNbr
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|Vector
argument_list|(
name|q
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
operator|&&
name|result
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|result
argument_list|,
operator|new
name|SchedulingSubpartComparator
argument_list|(
name|subjectAreaId
operator|==
literal|null
operator|||
name|subjectAreaId
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|null
else|:
operator|new
name|Long
argument_list|(
name|subjectAreaId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|subpartList
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|result
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SchedulingSubpart
name|a
init|=
operator|(
name|SchedulingSubpart
operator|)
name|result
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|ssid
init|=
name|a
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|a
operator|.
name|getItype
argument_list|()
operator|.
name|getAbbv
argument_list|()
decl_stmt|;
name|String
name|sufix
init|=
name|a
operator|.
name|getSchedulingSubpartSuffix
argument_list|()
decl_stmt|;
while|while
condition|(
name|a
operator|.
name|getParentSubpart
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|name
operator|=
literal|"&nbsp;&nbsp;&nbsp;&nbsp;"
operator|+
name|name
expr_stmt|;
name|a
operator|=
name|a
operator|.
name|getParentSubpart
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|a
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
name|name
operator|+=
literal|" ["
operator|+
name|a
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
expr_stmt|;
name|ComboBoxLookup
name|cbl
init|=
operator|new
name|ComboBoxLookup
argument_list|(
name|name
operator|+
operator|(
name|sufix
operator|==
literal|null
operator|||
name|sufix
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|""
else|:
literal|" ("
operator|+
name|sufix
operator|+
literal|")"
operator|)
argument_list|,
name|ssid
argument_list|)
decl_stmt|;
name|subpartList
operator|.
name|addElement
argument_list|(
name|cbl
argument_list|)
expr_stmt|;
block|}
comment|// Only one record - select it to save time and one more click
if|if
condition|(
name|result
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|ComboBoxLookup
name|cbl
init|=
operator|(
name|ComboBoxLookup
operator|)
name|subpartList
operator|.
name|elementAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|frm
operator|.
name|setItype
argument_list|(
name|index
argument_list|,
name|cbl
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|subpart
operator|=
name|frm
operator|.
name|getItype
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|subpartList
operator|==
literal|null
operator|||
name|subpartList
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|subpartList
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
literal|"classes"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"No subparts exist for the given course"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Process subpart selection
if|if
condition|(
name|subpart
operator|.
name|equals
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
condition|)
block|{
name|classNumList
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|query
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|" select distinct c "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"   from SchedulingSubpart s, "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"        Class_ c "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"  where s.uniqueId=:itype "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"    and s.uniqueId=c.schedulingSubpart.uniqueId "
argument_list|)
expr_stmt|;
name|q
operator|=
name|hibSession
operator|.
name|createQuery
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|setFetchSize
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|q
operator|.
name|setLong
argument_list|(
literal|"itype"
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|subpart
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|q
operator|.
name|list
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
operator|&&
name|result
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|result
argument_list|,
operator|new
name|ClassComparator
argument_list|(
name|ClassComparator
operator|.
name|COMPARE_BY_HIERARCHY
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|classNumber
operator|.
name|equals
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
condition|)
name|frm
operator|.
name|setClassNumber
argument_list|(
name|index
argument_list|,
name|DistributionPrefsForm
operator|.
name|ALL_CLASSES_SELECT
argument_list|)
expr_stmt|;
name|classNumList
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|result
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|result
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ComboBoxLookup
name|cbl
init|=
operator|new
name|ComboBoxLookup
argument_list|(
name|clazz
operator|.
name|getSectionNumberString
argument_list|()
argument_list|,
name|clazz
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|classNumList
operator|.
name|addElement
argument_list|(
name|cbl
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|classNumList
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
literal|"classes"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"No classes exist for the given subpart"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|// Set drop down lists for a row
name|request
operator|.
name|setAttribute
argument_list|(
name|DistributionPrefsForm
operator|.
name|SUBJ_AREA_ATTR_LIST
operator|+
name|index
argument_list|,
name|subjectAreaList
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|DistributionPrefsForm
operator|.
name|CRS_NUM_ATTR_LIST
operator|+
name|index
argument_list|,
name|crsNumList
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|DistributionPrefsForm
operator|.
name|ITYPE_ATTR_LIST
operator|+
name|index
argument_list|,
name|subpartList
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|DistributionPrefsForm
operator|.
name|CLASS_NUM_ATTR_LIST
operator|+
name|index
argument_list|,
name|classNumList
argument_list|)
expr_stmt|;
block|}
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
comment|/**      * Loads the form with the data for the distribution pref selected      * @param frm      * @param distPrefId      */
specifier|private
name|void
name|doLoad
parameter_list|(
name|DistributionPrefsForm
name|frm
parameter_list|,
name|String
name|distPrefId
parameter_list|)
block|{
comment|// Get distribution pref info
name|DistributionPrefDAO
name|dpDao
init|=
operator|new
name|DistributionPrefDAO
argument_list|()
decl_stmt|;
name|DistributionPref
name|dp
init|=
name|dpDao
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|distPrefId
argument_list|)
argument_list|)
decl_stmt|;
name|frm
operator|.
name|setDistType
argument_list|(
name|dp
operator|.
name|getDistributionType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setGrouping
argument_list|(
name|dp
operator|.
name|getGroupingName
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setOwner
argument_list|(
name|dp
operator|.
name|getOwner
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setPrefLevel
argument_list|(
name|dp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setDistPrefId
argument_list|(
name|distPrefId
argument_list|)
expr_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|dpDao
operator|.
name|getSession
argument_list|()
decl_stmt|;
comment|// Get Subpart Distribution Prefs
name|StringBuffer
name|query
init|=
operator|new
name|StringBuffer
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"select sa.uniqueId, co.uniqueId, su.uniqueId, -1,  do.sequenceNumber "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"  from "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"       DistributionObject do, "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"       SchedulingSubpart su, "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"       InstrOfferingConfig ioc, "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"       InstructionalOffering io, "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"       CourseOffering co, "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"       SubjectArea sa "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|" where co.isControl=true "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"   and do.distributionPref.uniqueId=:distPrefId "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"   and do.prefGroup.uniqueId=su.uniqueId "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"   and su.instrOfferingConfig.uniqueId=ioc.uniqueId "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"   and ioc.instructionalOffering.uniqueId=io.uniqueId "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"   and co.instructionalOffering.uniqueId=io.uniqueId "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"   and co.subjectArea.uniqueId=sa.uniqueId "
argument_list|)
expr_stmt|;
name|Query
name|q
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|q
operator|.
name|setInteger
argument_list|(
literal|"distPrefId"
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|distPrefId
argument_list|)
argument_list|)
expr_stmt|;
name|List
name|distPrefs1
init|=
name|q
operator|.
name|list
argument_list|()
decl_stmt|;
comment|// Get class Distribution Prefs
name|StringBuffer
name|query2
init|=
operator|new
name|StringBuffer
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|query2
operator|.
name|append
argument_list|(
literal|"select sa.uniqueId, co.uniqueId, su.uniqueId, c.uniqueId, do.sequenceNumber "
argument_list|)
expr_stmt|;
name|query2
operator|.
name|append
argument_list|(
literal|"  from "
argument_list|)
expr_stmt|;
name|query2
operator|.
name|append
argument_list|(
literal|"       DistributionObject do, "
argument_list|)
expr_stmt|;
name|query2
operator|.
name|append
argument_list|(
literal|"       Class_ c, "
argument_list|)
expr_stmt|;
name|query2
operator|.
name|append
argument_list|(
literal|"       SchedulingSubpart su, "
argument_list|)
expr_stmt|;
name|query2
operator|.
name|append
argument_list|(
literal|"       InstrOfferingConfig ioc, "
argument_list|)
expr_stmt|;
name|query2
operator|.
name|append
argument_list|(
literal|"       InstructionalOffering io, "
argument_list|)
expr_stmt|;
name|query2
operator|.
name|append
argument_list|(
literal|"       CourseOffering co, "
argument_list|)
expr_stmt|;
name|query2
operator|.
name|append
argument_list|(
literal|"       SubjectArea sa "
argument_list|)
expr_stmt|;
name|query2
operator|.
name|append
argument_list|(
literal|" where co.isControl=true "
argument_list|)
expr_stmt|;
name|query2
operator|.
name|append
argument_list|(
literal|"   and do.distributionPref.uniqueId=:distPrefId "
argument_list|)
expr_stmt|;
name|query2
operator|.
name|append
argument_list|(
literal|"   and do.prefGroup.uniqueId=c.uniqueId "
argument_list|)
expr_stmt|;
name|query2
operator|.
name|append
argument_list|(
literal|"   and c.schedulingSubpart.uniqueId=su.uniqueId "
argument_list|)
expr_stmt|;
name|query2
operator|.
name|append
argument_list|(
literal|"   and su.instrOfferingConfig.uniqueId=ioc.uniqueId "
argument_list|)
expr_stmt|;
name|query2
operator|.
name|append
argument_list|(
literal|"   and ioc.instructionalOffering.uniqueId=io.uniqueId "
argument_list|)
expr_stmt|;
name|query2
operator|.
name|append
argument_list|(
literal|"   and co.instructionalOffering.uniqueId=io.uniqueId "
argument_list|)
expr_stmt|;
name|query2
operator|.
name|append
argument_list|(
literal|"   and co.subjectArea.uniqueId=sa.uniqueId "
argument_list|)
expr_stmt|;
name|q
operator|=
name|hibSession
operator|.
name|createQuery
argument_list|(
name|query2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|setInteger
argument_list|(
literal|"distPrefId"
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|distPrefId
argument_list|)
argument_list|)
expr_stmt|;
name|List
name|distPrefs2
init|=
name|q
operator|.
name|list
argument_list|()
decl_stmt|;
comment|// Combine subparts and classes
name|ArrayList
name|distPrefs
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
if|if
condition|(
name|distPrefs1
operator|!=
literal|null
operator|&&
name|distPrefs1
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
name|distPrefs
operator|.
name|addAll
argument_list|(
name|distPrefs1
argument_list|)
expr_stmt|;
if|if
condition|(
name|distPrefs2
operator|!=
literal|null
operator|&&
name|distPrefs2
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
name|distPrefs
operator|.
name|addAll
argument_list|(
name|distPrefs2
argument_list|)
expr_stmt|;
if|if
condition|(
name|distPrefs
operator|!=
literal|null
operator|&&
name|distPrefs
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Iterator
name|iter
init|=
name|distPrefs
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
index|[]
name|rec
init|=
operator|(
name|Object
index|[]
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|indx
decl_stmt|;
if|if
condition|(
name|rec
index|[
literal|4
index|]
operator|==
literal|null
condition|)
block|{
name|indx
operator|=
name|i
expr_stmt|;
block|}
else|else
block|{
name|indx
operator|=
operator|(
operator|(
name|Integer
operator|)
name|rec
index|[
literal|4
index|]
operator|)
operator|.
name|intValue
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
name|frm
operator|.
name|setSubjectArea
argument_list|(
name|indx
argument_list|,
name|rec
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setCourseNbr
argument_list|(
name|indx
argument_list|,
name|rec
index|[
literal|1
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setItype
argument_list|(
name|indx
argument_list|,
name|rec
index|[
literal|2
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setClassNumber
argument_list|(
name|indx
argument_list|,
name|rec
index|[
literal|3
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Add new distribution pref      * @param httpSession      * @param frm      */
specifier|private
name|void
name|doAddOrUpdate
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|DistributionPrefsForm
name|frm
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|distPrefId
init|=
name|frm
operator|.
name|getDistPrefId
argument_list|()
decl_stmt|;
name|List
name|saList
init|=
name|frm
operator|.
name|getSubjectArea
argument_list|()
decl_stmt|;
name|List
name|suList
init|=
name|frm
operator|.
name|getItype
argument_list|()
decl_stmt|;
name|List
name|clList
init|=
name|frm
operator|.
name|getClassNumber
argument_list|()
decl_stmt|;
comment|// Create distribution preference
name|DistributionPref
name|dp
init|=
literal|null
decl_stmt|;
name|Department
name|oldOwner
init|=
literal|null
decl_stmt|;
name|DistributionPrefDAO
name|dpDao
init|=
operator|new
name|DistributionPrefDAO
argument_list|()
decl_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|dpDao
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|HashSet
name|relatedInstructionalOfferings
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
try|try
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|distPrefId
operator|!=
literal|null
operator|&&
name|distPrefId
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Long
name|distPrefUid
init|=
operator|new
name|Long
argument_list|(
name|distPrefId
argument_list|)
decl_stmt|;
if|if
condition|(
name|distPrefUid
operator|.
name|longValue
argument_list|()
operator|>
literal|0
condition|)
block|{
name|dp
operator|=
name|dpDao
operator|.
name|get
argument_list|(
name|distPrefUid
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
name|Set
name|s
init|=
name|dp
operator|.
name|getDistributionObjects
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|s
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|dObj
init|=
operator|(
name|DistributionObject
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|PreferenceGroup
name|pg
init|=
name|dObj
operator|.
name|getPrefGroup
argument_list|()
decl_stmt|;
name|relatedInstructionalOfferings
operator|.
name|add
argument_list|(
operator|(
name|pg
operator|instanceof
name|Class_
condition|?
operator|(
operator|(
name|Class_
operator|)
name|pg
operator|)
operator|.
name|getSchedulingSubpart
argument_list|()
else|:
operator|(
name|SchedulingSubpart
operator|)
name|pg
operator|)
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
argument_list|)
expr_stmt|;
name|pg
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|remove
argument_list|(
name|dObj
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|pg
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|clear
argument_list|()
expr_stmt|;
name|dp
operator|.
name|setDistributionObjects
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|oldOwner
operator|=
operator|(
name|Department
operator|)
name|dp
operator|.
name|getOwner
argument_list|()
expr_stmt|;
block|}
block|}
else|else
name|dp
operator|=
operator|new
name|DistributionPref
argument_list|()
expr_stmt|;
name|dp
operator|.
name|setDistributionType
argument_list|(
operator|new
name|DistributionTypeDAO
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|frm
operator|.
name|getDistType
argument_list|()
argument_list|)
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setGrouping
argument_list|(
operator|new
name|Integer
argument_list|(
name|frm
operator|.
name|getGroupingInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|frm
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Department
name|owningDept
init|=
literal|null
decl_stmt|;
comment|// Create distribution objects
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|saList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|su
init|=
name|suList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|cl
init|=
name|clList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|DistributionObject
name|dObj
init|=
operator|new
name|DistributionObject
argument_list|()
decl_stmt|;
comment|// Subpart
if|if
condition|(
name|cl
operator|.
name|equals
argument_list|(
name|DistributionPrefsForm
operator|.
name|ALL_CLASSES_SELECT
argument_list|)
condition|)
block|{
name|SchedulingSubpart
name|subpart
init|=
operator|new
name|SchedulingSubpartDAO
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|su
argument_list|)
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|owningDept
operator|==
literal|null
condition|)
name|owningDept
operator|=
name|subpart
operator|.
name|getManagingDept
argument_list|()
expr_stmt|;
if|else if
condition|(
operator|!
name|owningDept
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|subpart
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|owningDept
operator|.
name|getDistributionPrefPriority
argument_list|()
operator|.
name|intValue
argument_list|()
operator|<
name|subpart
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getDistributionPrefPriority
argument_list|()
operator|.
name|intValue
argument_list|()
condition|)
name|owningDept
operator|=
name|subpart
operator|.
name|getManagingDept
argument_list|()
expr_stmt|;
if|else if
condition|(
name|owningDept
operator|.
name|getDistributionPrefPriority
argument_list|()
operator|.
name|intValue
argument_list|()
operator|==
name|subpart
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getDistributionPrefPriority
argument_list|()
operator|.
name|intValue
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasQualifier
argument_list|(
name|owningDept
argument_list|)
operator|&&
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasQualifier
argument_list|(
name|subpart
operator|.
name|getManagingDept
argument_list|()
argument_list|)
condition|)
name|owningDept
operator|=
name|subpart
operator|.
name|getManagingDept
argument_list|()
expr_stmt|;
block|}
block|}
name|dObj
operator|.
name|setPrefGroup
argument_list|(
name|subpart
argument_list|)
expr_stmt|;
name|relatedInstructionalOfferings
operator|.
name|add
argument_list|(
name|subpart
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Class
else|else
block|{
name|Class_
name|clazz
init|=
operator|new
name|Class_DAO
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|cl
argument_list|)
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|owningDept
operator|==
literal|null
condition|)
name|owningDept
operator|=
name|clazz
operator|.
name|getManagingDept
argument_list|()
expr_stmt|;
if|else if
condition|(
operator|!
name|owningDept
operator|.
name|equals
argument_list|(
name|clazz
operator|.
name|getManagingDept
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|owningDept
operator|.
name|getDistributionPrefPriority
argument_list|()
operator|.
name|intValue
argument_list|()
operator|<
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getDistributionPrefPriority
argument_list|()
operator|.
name|intValue
argument_list|()
condition|)
name|owningDept
operator|=
name|clazz
operator|.
name|getManagingDept
argument_list|()
expr_stmt|;
if|else if
condition|(
name|owningDept
operator|.
name|getDistributionPrefPriority
argument_list|()
operator|.
name|intValue
argument_list|()
operator|==
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getDistributionPrefPriority
argument_list|()
operator|.
name|intValue
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasQualifier
argument_list|(
name|owningDept
argument_list|)
operator|&&
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasQualifier
argument_list|(
name|clazz
operator|.
name|getManagingDept
argument_list|()
argument_list|)
condition|)
name|owningDept
operator|=
name|clazz
operator|.
name|getManagingDept
argument_list|()
expr_stmt|;
block|}
block|}
name|relatedInstructionalOfferings
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
argument_list|)
expr_stmt|;
name|dObj
operator|.
name|setPrefGroup
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
name|dObj
operator|.
name|setSequenceNumber
argument_list|(
operator|new
name|Integer
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|dObj
operator|.
name|setDistributionPref
argument_list|(
name|dp
argument_list|)
expr_stmt|;
name|dObj
operator|.
name|getPrefGroup
argument_list|()
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|add
argument_list|(
name|dObj
argument_list|)
expr_stmt|;
name|dp
operator|.
name|addTodistributionObjects
argument_list|(
name|dObj
argument_list|)
expr_stmt|;
block|}
name|dp
operator|.
name|setOwner
argument_list|(
name|owningDept
argument_list|)
expr_stmt|;
comment|/*      	            	if (dp.getOwner()==null)         		throw new Exception("Creation of such constraint denied: no owner specified.");      		if (sessionContext.hasPermission(Right.)&& !dp.getDistributionType().isApplicable(owningDept)) {     			throw new Exception("Creation of such constraint denied: distribution preference "+dp.getDistributionType().getLabel()+" not allowed for "+dp.getOwner()+".");     		}          		if (!sessionContext.hasPermission(dp.getOwner(), Right.DistributionPreferenceAdd)) 	        		throw new Exception("Creation of such constraint denied: unable to create constraint owned by "+dp.getOwner()+".");  	        	if (!sessionContext.getUser().getCurrentAuthority().hasQualifier((Department)dp.getOwner())&& !((Department)dp.getOwner()).effectiveStatusType().canOwnerEdit())         			throw new Exception("Creation of such constraint denied: unable to create constraint owned by "+dp.getOwner()+".");         	         		if (currentMgr.isExternalManager()&& !sessionContext.getUser().getCurrentAuthority().hasQualifier((Department)dp.getOwner()))         			throw new Exception("Creation of such constraint denied: unable to create constraint owned by "+dp.getOwner()+".");         	         		Department dept = (Department)dp.getOwner();         		if (dept.isExternalManager()&& !dept.isAllowReqDistribution()&& !sessionContext.getUser().getCurrentAuthority().hasQualifier((Department)dp.getOwner())) {         			if (dp.getPrefLevel().getPrefProlog().equals(PreferenceLevel.sRequired)) {         				if (dp.getDistributionType().getAllowedPref().indexOf(PreferenceLevel.sCharLevelStronglyPreferred)>=0)         					dp.setPrefLevel(PreferenceLevel.getPreferenceLevel(PreferenceLevel.sStronglyPreferred));         				else         					throw new Exception("Creation of such constraint denied: unable to create "+dp.getPrefLevel().getPrefName()+" constraint owned by "+dp.getOwner()+".");         			}             		if (dp.getPrefLevel().getPrefProlog().equals(PreferenceLevel.sProhibited)) {             			if (dp.getDistributionType().getAllowedPref().indexOf(PreferenceLevel.sCharLevelStronglyDiscouraged)>=0)             				dp.setPrefLevel(PreferenceLevel.getPreferenceLevel(PreferenceLevel.sStronglyDiscouraged));             			else             				throw new Exception("Creation of such constraint denied: unable to create "+dp.getPrefLevel().getPrefName()+" constraint owned by "+dp.getOwner()+".");             		}         		}         	}*/
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|dp
argument_list|,
name|Right
operator|.
name|DistributionPreferenceEdit
argument_list|)
expr_stmt|;
comment|// Save
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|dp
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|relatedInstructionalOfferings
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstructionalOffering
name|io
init|=
operator|(
name|InstructionalOffering
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|sessionContext
argument_list|,
name|io
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|DIST_PREF_EDIT
argument_list|,
operator|(
name|distPrefId
operator|!=
literal|null
operator|&&
name|distPrefId
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
name|ChangeLog
operator|.
name|Operation
operator|.
name|UPDATE
else|:
name|ChangeLog
operator|.
name|Operation
operator|.
name|CREATE
operator|)
argument_list|,
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|refresh
argument_list|(
name|dp
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldOwner
operator|!=
literal|null
operator|&&
operator|!
name|oldOwner
operator|.
name|equals
argument_list|(
name|dp
operator|.
name|getOwner
argument_list|()
argument_list|)
condition|)
name|hibSession
operator|.
name|refresh
argument_list|(
name|oldOwner
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setDistPrefId
argument_list|(
name|dp
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|clear
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**      * Delete distribution pref      * @param distPrefId      */
specifier|private
name|void
name|doDelete
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|String
name|distPrefId
parameter_list|)
block|{
comment|/*         String query = "delete DistributionPref dp where dp.uniqueId=:distPrefId";          Query q = hibSession.createQuery(query);         q.setInteger("distPrefId", Integer.parseInt(distPrefId));         q.executeUpdate();         */
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|DistributionPrefDAO
name|dpDao
init|=
operator|new
name|DistributionPrefDAO
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|dpDao
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|tx
operator|=
name|hibSession
operator|.
name|getTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|tx
operator|==
literal|null
operator|||
operator|!
name|tx
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|tx
operator|.
name|begin
argument_list|()
expr_stmt|;
block|}
name|HashSet
name|relatedInstructionalOfferings
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|DistributionPref
name|dp
init|=
name|dpDao
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|distPrefId
argument_list|)
argument_list|)
decl_stmt|;
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|dp
argument_list|,
name|Right
operator|.
name|DistributionPreferenceDelete
argument_list|)
expr_stmt|;
name|Department
name|dept
init|=
operator|(
name|Department
operator|)
name|dp
operator|.
name|getOwner
argument_list|()
decl_stmt|;
name|dept
operator|.
name|getPreferences
argument_list|()
operator|.
name|remove
argument_list|(
name|dp
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|dp
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|dObj
init|=
operator|(
name|DistributionObject
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|PreferenceGroup
name|pg
init|=
name|dObj
operator|.
name|getPrefGroup
argument_list|()
decl_stmt|;
name|relatedInstructionalOfferings
operator|.
name|add
argument_list|(
operator|(
name|pg
operator|instanceof
name|Class_
condition|?
operator|(
operator|(
name|Class_
operator|)
name|pg
operator|)
operator|.
name|getSchedulingSubpart
argument_list|()
else|:
operator|(
name|SchedulingSubpart
operator|)
name|pg
operator|)
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
argument_list|)
expr_stmt|;
name|pg
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|remove
argument_list|(
name|dObj
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|pg
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|delete
argument_list|(
name|dp
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|dept
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|relatedInstructionalOfferings
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstructionalOffering
name|io
init|=
operator|(
name|InstructionalOffering
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|sessionContext
argument_list|,
name|io
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|DIST_PREF_EDIT
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|DELETE
argument_list|,
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|refresh
argument_list|(
name|dept
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

