begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.1 (University Timetabling Application)  * Copyright (C) 2008, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|util
operator|.
name|MessageResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|Web
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|ExamEditForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Meeting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Preference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Roles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverParameterDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|Class_DAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentalInstructorDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExamDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstrOfferingConfigDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstructionalOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SchedulingSubpartDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|LookupTables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|BackTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|Navigation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|RequiredTimeTable
import|;
end_import

begin_class
specifier|public
class|class
name|ExamEditAction
extends|extends
name|PreferencesAction
block|{
specifier|public
name|ActionForward
name|execute
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
name|ExamEditForm
name|frm
init|=
operator|(
name|ExamEditForm
operator|)
name|form
decl_stmt|;
try|try
block|{
comment|// Set common lookup tables
name|super
operator|.
name|execute
argument_list|(
name|mapping
argument_list|,
name|form
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|HttpSession
name|httpSession
init|=
name|request
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|httpSession
argument_list|)
decl_stmt|;
name|Long
name|sessionId
init|=
operator|(
name|Long
operator|)
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|SESSION_ID_ATTR_NAME
argument_list|)
decl_stmt|;
name|MessageResources
name|rsc
init|=
name|getResources
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|ActionMessages
name|errors
init|=
operator|new
name|ActionMessages
argument_list|()
decl_stmt|;
comment|// Read parameters
name|String
name|examId
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"examId"
argument_list|)
decl_stmt|;
name|String
name|op
init|=
name|frm
operator|.
name|getOp
argument_list|()
decl_stmt|;
name|String
name|reloadCause
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"reloadCause"
argument_list|)
decl_stmt|;
name|String
name|deleteType
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"deleteType"
argument_list|)
decl_stmt|;
comment|// Read subpart id from form
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.reload"
argument_list|)
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.addObject"
argument_list|)
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.addPeriod"
argument_list|)
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.addRoomPref"
argument_list|)
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.addBldgPref"
argument_list|)
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.addRoomFeaturePref"
argument_list|)
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.addDistPref"
argument_list|)
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.addRoomGroupPref"
argument_list|)
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.addInstructor"
argument_list|)
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.updateExam"
argument_list|)
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.cancel"
argument_list|)
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.clearExamPrefs"
argument_list|)
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.delete"
argument_list|)
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.saveExam"
argument_list|)
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.addExam"
argument_list|)
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.returnToDetail"
argument_list|)
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.nextExam"
argument_list|)
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.previousExam"
argument_list|)
argument_list|)
condition|)
block|{
name|examId
operator|=
name|frm
operator|.
name|getExamId
argument_list|()
expr_stmt|;
block|}
comment|// Determine if initial load
if|if
condition|(
name|op
operator|==
literal|null
operator|||
name|op
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
operator|(
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.reload"
argument_list|)
argument_list|)
operator|&&
operator|(
name|reloadCause
operator|==
literal|null
operator|||
name|reloadCause
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
operator|)
condition|)
block|{
if|if
condition|(
name|deleteType
operator|!=
literal|null
operator|&&
name|deleteType
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|op
operator|=
literal|"delete"
expr_stmt|;
else|else
name|op
operator|=
literal|"init"
expr_stmt|;
block|}
comment|// Check op exists
if|if
condition|(
name|op
operator|==
literal|null
operator|||
name|op
operator|.
name|trim
argument_list|()
operator|==
literal|""
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Null Operation not supported."
argument_list|)
throw|;
name|Exam
name|exam
init|=
operator|(
name|examId
operator|==
literal|null
operator|||
name|examId
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|null
else|:
operator|new
name|ExamDAO
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|examId
argument_list|)
argument_list|)
operator|)
decl_stmt|;
comment|// Cancel - Go back to Instructors Detail Screen
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.returnToDetail"
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|BackTracker
operator|.
name|hasBack
argument_list|(
name|request
argument_list|,
literal|1
argument_list|)
condition|)
block|{
name|BackTracker
operator|.
name|doBack
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|examId
operator|!=
literal|null
operator|&&
name|examId
operator|.
name|trim
argument_list|()
operator|!=
literal|""
condition|)
block|{
name|request
operator|.
name|setAttribute
argument_list|(
literal|"examId"
argument_list|,
name|examId
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"fromChildScreen"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showDetail"
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showList"
argument_list|)
return|;
block|}
block|}
comment|// Clear all preferences
if|if
condition|(
name|exam
operator|!=
literal|null
operator|&&
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.clearExamPrefs"
argument_list|)
argument_list|)
condition|)
block|{
name|Set
name|s
init|=
name|exam
operator|.
name|getPreferences
argument_list|()
decl_stmt|;
name|s
operator|.
name|clear
argument_list|()
expr_stmt|;
name|exam
operator|.
name|setPreferences
argument_list|(
name|s
argument_list|)
expr_stmt|;
operator|new
name|ExamDAO
argument_list|()
operator|.
name|update
argument_list|(
name|exam
argument_list|)
expr_stmt|;
name|op
operator|=
literal|"init"
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"examId"
argument_list|,
name|examId
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
literal|null
argument_list|,
name|request
argument_list|,
name|exam
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|EXAM_EDIT
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|CLEAR_PREF
argument_list|,
name|exam
operator|.
name|firstSubjectArea
argument_list|()
argument_list|,
name|exam
operator|.
name|firstDepartment
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showDetail"
argument_list|)
return|;
block|}
comment|// Reset form for initial load
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
literal|"init"
argument_list|)
condition|)
block|{
name|frm
operator|.
name|reset
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
expr_stmt|;
comment|// Load form attributes that are constant
name|doLoad
argument_list|(
name|request
argument_list|,
name|frm
argument_list|,
name|exam
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"clone"
argument_list|)
argument_list|)
condition|)
block|{
name|frm
operator|.
name|setExamId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setClone
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exam.useLimit."
operator|+
name|Exam
operator|.
name|sExamTypes
index|[
name|frm
operator|.
name|getExamType
argument_list|()
index|]
argument_list|,
operator|(
name|frm
operator|.
name|getExamType
argument_list|()
operator|==
name|Exam
operator|.
name|sExamTypeFinal
condition|?
literal|"false"
else|:
literal|"true"
operator|)
argument_list|)
argument_list|)
condition|)
name|frm
operator|.
name|setSizeNote
argument_list|(
literal|"A number of enrolled students or a total limit of selected classes/courses (whichever is bigger) is used when blank"
argument_list|)
expr_stmt|;
else|else
name|frm
operator|.
name|setSizeNote
argument_list|(
literal|"A number of enrolled students is used when blank"
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setLabel
argument_list|(
name|frm
operator|.
name|getClone
argument_list|()
operator|||
name|exam
operator|==
literal|null
condition|?
literal|"New Examination"
else|:
name|exam
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.addInstructor"
argument_list|)
argument_list|)
condition|)
block|{
name|List
name|lst
init|=
name|frm
operator|.
name|getInstructors
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|PREF_ROWS_ADDED
condition|;
name|i
operator|++
control|)
block|{
name|frm
operator|.
name|getInstructors
argument_list|()
operator|.
name|add
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.addObject"
argument_list|)
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|PREF_ROWS_ADDED
condition|;
name|i
operator|++
control|)
block|{
name|frm
operator|.
name|addExamOwner
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|setAttribute
argument_list|(
literal|"hash"
argument_list|,
literal|"objects"
argument_list|)
expr_stmt|;
block|}
name|int
name|deleteId
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|deleteId
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"deleteId"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|deleteId
operator|=
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
literal|"instructor"
operator|.
name|equals
argument_list|(
name|deleteType
argument_list|)
operator|&&
name|deleteId
operator|>=
literal|0
condition|)
block|{
name|frm
operator|.
name|getInstructors
argument_list|()
operator|.
name|remove
argument_list|(
name|deleteId
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"examType"
operator|.
name|equals
argument_list|(
name|deleteType
argument_list|)
operator|&&
name|deleteId
operator|>=
literal|0
condition|)
block|{
name|frm
operator|.
name|setExamType
argument_list|(
name|deleteId
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"objects"
operator|.
name|equals
argument_list|(
name|deleteType
argument_list|)
operator|&&
name|deleteId
operator|>=
literal|0
condition|)
block|{
name|frm
operator|.
name|deleteExamOwner
argument_list|(
name|deleteId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.updateExam"
argument_list|)
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.saveExam"
argument_list|)
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.nextExam"
argument_list|)
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.previousExam"
argument_list|)
argument_list|)
condition|)
block|{
comment|// Validate input prefs
name|errors
operator|=
name|frm
operator|.
name|validate
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
expr_stmt|;
comment|// No errors - save
if|if
condition|(
name|errors
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|doUpdate
argument_list|(
name|request
argument_list|,
name|frm
argument_list|,
name|exam
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"examId"
argument_list|,
name|frm
operator|.
name|getExamId
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"fromChildScreen"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.nextExam"
argument_list|)
argument_list|)
condition|)
name|response
operator|.
name|sendRedirect
argument_list|(
name|response
operator|.
name|encodeURL
argument_list|(
literal|"examEdit.do?examId="
operator|+
name|frm
operator|.
name|getNextId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.previousExam"
argument_list|)
argument_list|)
condition|)
name|response
operator|.
name|sendRedirect
argument_list|(
name|response
operator|.
name|encodeURL
argument_list|(
literal|"examEdit.do?examId="
operator|+
name|frm
operator|.
name|getPreviousId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//response.sendRedirect(response.encodeURL("examDetail.do?examId="+examId));
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.saveExam"
argument_list|)
argument_list|)
operator|&&
name|BackTracker
operator|.
name|hasBack
argument_list|(
name|request
argument_list|,
literal|2
argument_list|)
operator|&&
operator|!
name|frm
operator|.
name|getClone
argument_list|()
condition|)
block|{
name|request
operator|.
name|setAttribute
argument_list|(
literal|"backType"
argument_list|,
literal|"PreferenceGroup"
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"backId"
argument_list|,
name|frm
operator|.
name|getExamId
argument_list|()
argument_list|)
expr_stmt|;
name|BackTracker
operator|.
name|doBack
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showDetail"
argument_list|)
return|;
block|}
else|else
block|{
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Initialize Preferences for initial load
name|frm
operator|.
name|setAvailableTimePatterns
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
literal|"init"
argument_list|)
condition|)
block|{
name|initPrefs
argument_list|(
name|user
argument_list|,
name|frm
argument_list|,
name|exam
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|boolean
name|timeVertical
init|=
name|RequiredTimeTable
operator|.
name|getTimeGridVertical
argument_list|(
name|Web
operator|.
name|getUser
argument_list|(
name|httpSession
argument_list|)
argument_list|)
decl_stmt|;
name|generateExamPeriodGrid
argument_list|(
name|request
argument_list|,
name|frm
argument_list|,
operator|(
name|frm
operator|.
name|getClone
argument_list|()
condition|?
literal|null
else|:
name|exam
operator|)
argument_list|,
name|op
argument_list|,
name|timeVertical
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Process Preferences Action
name|processPrefAction
argument_list|(
name|request
argument_list|,
name|frm
argument_list|,
name|errors
argument_list|)
expr_stmt|;
name|setupInstructors
argument_list|(
name|request
argument_list|,
name|frm
argument_list|,
name|exam
argument_list|)
expr_stmt|;
if|if
condition|(
name|exam
operator|!=
literal|null
condition|)
block|{
name|LookupTables
operator|.
name|setupRooms
argument_list|(
name|request
argument_list|,
name|exam
argument_list|)
expr_stmt|;
comment|// Room Prefs
name|LookupTables
operator|.
name|setupBldgs
argument_list|(
name|request
argument_list|,
name|exam
argument_list|)
expr_stmt|;
comment|// Building Prefs
name|LookupTables
operator|.
name|setupRoomFeatures
argument_list|(
name|request
argument_list|,
name|exam
argument_list|)
expr_stmt|;
comment|// Preference Levels
name|LookupTables
operator|.
name|setupRoomGroups
argument_list|(
name|request
argument_list|,
name|exam
argument_list|)
expr_stmt|;
comment|// Room Groups
block|}
else|else
block|{
name|Exam
name|dummy
init|=
operator|new
name|Exam
argument_list|()
decl_stmt|;
name|dummy
operator|.
name|setSession
argument_list|(
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setExamType
argument_list|(
name|frm
operator|.
name|getExamType
argument_list|()
argument_list|)
expr_stmt|;
name|LookupTables
operator|.
name|setupRooms
argument_list|(
name|request
argument_list|,
name|dummy
argument_list|)
expr_stmt|;
comment|// Room Prefs
name|LookupTables
operator|.
name|setupBldgs
argument_list|(
name|request
argument_list|,
name|dummy
argument_list|)
expr_stmt|;
comment|// Building Prefs
name|LookupTables
operator|.
name|setupRoomFeatures
argument_list|(
name|request
argument_list|,
name|dummy
argument_list|)
expr_stmt|;
comment|// Preference Levels
name|LookupTables
operator|.
name|setupRoomGroups
argument_list|(
name|request
argument_list|,
name|dummy
argument_list|)
expr_stmt|;
comment|// Room Groups
block|}
name|frm
operator|.
name|setAllowHardPrefs
argument_list|(
name|user
operator|.
name|isAdmin
argument_list|()
operator|||
name|user
operator|.
name|hasRole
argument_list|(
name|Roles
operator|.
name|EXAM_MGR_ROLE
argument_list|)
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setSubjectAreas
argument_list|(
name|TimetableManager
operator|.
name|getSubjectAreas
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|frm
operator|.
name|getClone
argument_list|()
operator|&&
name|exam
operator|!=
literal|null
condition|)
block|{
name|BackTracker
operator|.
name|markForBack
argument_list|(
name|request
argument_list|,
literal|"examDetail.do?examId="
operator|+
name|frm
operator|.
name|getExamId
argument_list|()
argument_list|,
literal|"Exam ("
operator|+
operator|(
name|frm
operator|.
name|getName
argument_list|()
operator|==
literal|null
operator|||
name|frm
operator|.
name|getName
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
name|frm
operator|.
name|getLabel
argument_list|()
operator|.
name|trim
argument_list|()
else|:
name|frm
operator|.
name|getName
argument_list|()
operator|.
name|trim
argument_list|()
operator|)
operator|+
literal|")"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|frm
operator|.
name|getClone
argument_list|()
operator|||
name|exam
operator|==
literal|null
condition|?
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showAdd"
argument_list|)
else|:
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showEdit"
argument_list|)
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|protected
name|void
name|doLoad
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|ExamEditForm
name|frm
parameter_list|,
name|Exam
name|exam
parameter_list|)
block|{
if|if
condition|(
name|exam
operator|!=
literal|null
condition|)
block|{
name|frm
operator|.
name|setExamId
argument_list|(
name|exam
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setExamType
argument_list|(
name|exam
operator|.
name|getExamType
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setName
argument_list|(
name|exam
operator|.
name|generateName
argument_list|()
operator|.
name|equals
argument_list|(
name|exam
operator|.
name|getName
argument_list|()
argument_list|)
condition|?
literal|null
else|:
name|exam
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setNote
argument_list|(
name|exam
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setLength
argument_list|(
name|exam
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setSize
argument_list|(
name|exam
operator|.
name|getExamSize
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|exam
operator|.
name|getExamSize
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setSeatingType
argument_list|(
name|Exam
operator|.
name|sSeatingTypes
index|[
name|exam
operator|.
name|getSeatingType
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setMaxNbrRooms
argument_list|(
name|exam
operator|.
name|getMaxNbrRooms
argument_list|()
argument_list|)
expr_stmt|;
name|TreeSet
name|instructors
init|=
operator|new
name|TreeSet
argument_list|(
name|exam
operator|.
name|getInstructors
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|instructors
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentalInstructor
name|instr
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|frm
operator|.
name|getInstructors
argument_list|()
operator|.
name|add
argument_list|(
name|instr
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|frm
operator|.
name|setEditable
argument_list|(
name|exam
operator|.
name|isEditableBy
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|Long
name|nextId
init|=
name|Navigation
operator|.
name|getNext
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
name|Navigation
operator|.
name|sInstructionalOfferingLevel
argument_list|,
name|exam
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|Long
name|prevId
init|=
name|Navigation
operator|.
name|getPrevious
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
name|Navigation
operator|.
name|sInstructionalOfferingLevel
argument_list|,
name|exam
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|frm
operator|.
name|setPreviousId
argument_list|(
name|prevId
operator|==
literal|null
condition|?
literal|null
else|:
name|prevId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setNextId
argument_list|(
name|nextId
operator|==
literal|null
condition|?
literal|null
else|:
name|nextId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|TreeSet
argument_list|(
name|exam
operator|.
name|getOwners
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|frm
operator|.
name|addExamOwner
argument_list|(
operator|(
name|ExamOwner
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|TreeSet
name|periods
init|=
name|ExamPeriod
operator|.
name|findAll
argument_list|(
name|request
argument_list|,
operator|(
name|frm
operator|.
name|getExamType
argument_list|()
operator|==
literal|null
condition|?
name|Exam
operator|.
name|sExamTypeFinal
else|:
name|frm
operator|.
name|getExamType
argument_list|()
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|periods
operator|.
name|isEmpty
argument_list|()
condition|)
name|frm
operator|.
name|setLength
argument_list|(
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
operator|(
operator|(
name|ExamPeriod
operator|)
name|periods
operator|.
name|first
argument_list|()
operator|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|SolverParameterDef
name|maxRoomsParam
init|=
name|SolverParameterDef
operator|.
name|findByName
argument_list|(
literal|"Exams.MaxRooms"
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxRoomsParam
operator|!=
literal|null
operator|&&
name|maxRoomsParam
operator|.
name|getDefault
argument_list|()
operator|!=
literal|null
condition|)
name|frm
operator|.
name|setMaxNbrRooms
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|maxRoomsParam
operator|.
name|getDefault
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"firstType"
argument_list|)
operator|!=
literal|null
operator|&&
name|request
operator|.
name|getParameter
argument_list|(
literal|"firstId"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|firstType
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"firstType"
argument_list|)
decl_stmt|;
name|Long
name|firstId
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"firstId"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"Class_"
operator|.
name|equals
argument_list|(
name|firstType
argument_list|)
condition|)
block|{
name|Class_
name|clazz
init|=
operator|new
name|Class_DAO
argument_list|()
operator|.
name|get
argument_list|(
name|firstId
argument_list|)
decl_stmt|;
name|frm
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|getItype
argument_list|()
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|getClassNumber
argument_list|()
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"SchedulingSubpart"
operator|.
name|equals
argument_list|(
name|firstType
argument_list|)
condition|)
block|{
name|SchedulingSubpart
name|subpart
init|=
operator|new
name|SchedulingSubpartDAO
argument_list|()
operator|.
name|get
argument_list|(
name|firstId
argument_list|)
decl_stmt|;
name|InstrOfferingConfig
name|config
init|=
name|subpart
operator|.
name|getInstrOfferingConfig
argument_list|()
decl_stmt|;
name|frm
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|add
argument_list|(
name|config
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|add
argument_list|(
name|config
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|getItype
argument_list|()
operator|.
name|add
argument_list|(
operator|-
name|config
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|getClassNumber
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"InstrOfferingConfig"
operator|.
name|equals
argument_list|(
name|firstType
argument_list|)
condition|)
block|{
name|InstrOfferingConfig
name|config
init|=
operator|new
name|InstrOfferingConfigDAO
argument_list|()
operator|.
name|get
argument_list|(
name|firstId
argument_list|)
decl_stmt|;
name|frm
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|add
argument_list|(
name|config
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|add
argument_list|(
name|config
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|getItype
argument_list|()
operator|.
name|add
argument_list|(
operator|-
name|config
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|getClassNumber
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"InstructionalOffering"
operator|.
name|equals
argument_list|(
name|firstType
argument_list|)
condition|)
block|{
name|InstructionalOffering
name|offering
init|=
operator|new
name|InstructionalOfferingDAO
argument_list|()
operator|.
name|get
argument_list|(
name|firstId
argument_list|)
decl_stmt|;
name|frm
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|add
argument_list|(
name|offering
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|add
argument_list|(
name|offering
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|getItype
argument_list|()
operator|.
name|add
argument_list|(
name|Long
operator|.
name|MIN_VALUE
operator|+
literal|1
argument_list|)
expr_stmt|;
name|frm
operator|.
name|getClassNumber
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"CourseOffering"
operator|.
name|equals
argument_list|(
name|firstType
argument_list|)
condition|)
block|{
name|CourseOffering
name|course
init|=
operator|new
name|CourseOfferingDAO
argument_list|()
operator|.
name|get
argument_list|(
name|firstId
argument_list|)
decl_stmt|;
name|frm
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|add
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|add
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|getItype
argument_list|()
operator|.
name|add
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|frm
operator|.
name|getClassNumber
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|PREF_ROWS_ADDED
condition|;
name|i
operator|++
control|)
block|{
name|frm
operator|.
name|addExamOwner
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|frm
operator|.
name|getInstructors
argument_list|()
operator|.
name|add
argument_list|(
name|Constants
operator|.
name|BLANK_OPTION_VALUE
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|setupInstructors
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|ExamEditForm
name|frm
parameter_list|,
name|Exam
name|exam
parameter_list|)
throws|throws
name|Exception
block|{
name|List
name|instructors
init|=
name|frm
operator|.
name|getInstructors
argument_list|()
decl_stmt|;
if|if
condition|(
name|instructors
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return;
name|HashSet
name|deptIds
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|exam
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|exam
operator|.
name|getInstructors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentalInstructor
name|instr
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|deptIds
operator|.
name|add
argument_list|(
name|instr
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|exam
operator|.
name|getOwners
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamOwner
name|own
init|=
operator|(
name|ExamOwner
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|deptIds
operator|.
name|add
argument_list|(
name|own
operator|.
name|getCourse
argument_list|()
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|frm
operator|.
name|getSubjectAreaList
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ExamOwner
name|own
init|=
name|frm
operator|.
name|getExamOwner
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|own
operator|!=
literal|null
condition|)
name|deptIds
operator|.
name|add
argument_list|(
name|own
operator|.
name|getCourse
argument_list|()
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deptIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|TimetableManager
operator|.
name|getManager
argument_list|(
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getDepartments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|dept
init|=
operator|(
name|Department
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|deptIds
operator|.
name|add
argument_list|(
name|dept
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Long
index|[]
name|deptsIdsArray
init|=
operator|new
name|Long
index|[
name|deptIds
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|deptIds
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|deptsIdsArray
index|[
name|idx
operator|++
index|]
operator|=
operator|(
name|Long
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|LookupTables
operator|.
name|setupInstructors
argument_list|(
name|request
argument_list|,
name|deptsIdsArray
argument_list|)
expr_stmt|;
name|Vector
name|deptInstrList
init|=
operator|(
name|Vector
operator|)
name|request
operator|.
name|getAttribute
argument_list|(
name|DepartmentalInstructor
operator|.
name|INSTR_LIST_ATTR_NAME
argument_list|)
decl_stmt|;
comment|// For each instructor set the instructor list
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|instructors
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|request
operator|.
name|setAttribute
argument_list|(
name|DepartmentalInstructor
operator|.
name|INSTR_LIST_ATTR_NAME
operator|+
name|i
argument_list|,
name|deptInstrList
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|doUpdate
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|ExamEditForm
name|frm
parameter_list|,
name|Exam
name|exam
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|add
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|exam
operator|==
literal|null
condition|)
block|{
name|add
operator|=
literal|true
expr_stmt|;
name|exam
operator|=
operator|new
name|Exam
argument_list|()
expr_stmt|;
name|exam
operator|.
name|setSession
argument_list|(
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Set
name|s
init|=
name|exam
operator|.
name|getPreferences
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
name|s
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
comment|// Clear all old prefs
for|for
control|(
name|Iterator
name|i
init|=
name|s
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|p
init|=
operator|(
name|Preference
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|instanceof
name|DistributionPref
condition|)
block|{
comment|//skip distribution preferences
block|}
else|else
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|exam
operator|.
name|setExamType
argument_list|(
name|frm
operator|.
name|getExamType
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|doUpdate
argument_list|(
name|request
argument_list|,
name|frm
argument_list|,
name|exam
argument_list|,
name|s
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|exam
operator|.
name|setNote
argument_list|(
name|frm
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|exam
operator|.
name|setSeatingType
argument_list|(
name|frm
operator|.
name|getSeatingTypeIdx
argument_list|()
argument_list|)
expr_stmt|;
name|Integer
name|oldLength
init|=
name|exam
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|exam
operator|.
name|setLength
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|frm
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|frm
operator|.
name|getSize
argument_list|()
operator|==
literal|null
operator|||
name|frm
operator|.
name|getSize
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|exam
operator|.
name|setExamSize
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exam
operator|.
name|setExamSize
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|frm
operator|.
name|getSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|exam
operator|.
name|setMaxNbrRooms
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|frm
operator|.
name|getMaxNbrRooms
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|exam
operator|.
name|getInstructors
argument_list|()
operator|==
literal|null
condition|)
name|exam
operator|.
name|setInstructors
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exam
operator|.
name|getInstructors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentalInstructor
name|instructor
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|instructor
operator|.
name|getExams
argument_list|()
operator|.
name|remove
argument_list|(
name|exam
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|frm
operator|.
name|getInstructors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|instructorId
init|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Constants
operator|.
name|BLANK_OPTION_VALUE
operator|.
name|equals
argument_list|(
name|instructorId
argument_list|)
operator|&&
operator|!
name|Preference
operator|.
name|BLANK_PREF_VALUE
operator|.
name|equals
argument_list|(
name|instructorId
argument_list|)
condition|)
block|{
name|DepartmentalInstructor
name|instructor
init|=
operator|new
name|DepartmentalInstructorDAO
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|instructorId
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|instructor
operator|!=
literal|null
condition|)
block|{
name|exam
operator|.
name|getInstructors
argument_list|()
operator|.
name|add
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|getExams
argument_list|()
operator|.
name|add
argument_list|(
name|exam
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|frm
operator|.
name|setExamOwners
argument_list|(
name|exam
argument_list|)
expr_stmt|;
if|if
condition|(
name|frm
operator|.
name|getName
argument_list|()
operator|==
literal|null
operator|||
name|frm
operator|.
name|getName
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|exam
operator|.
name|setName
argument_list|(
name|exam
operator|.
name|generateName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exam
operator|.
name|setName
argument_list|(
name|frm
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ExamEvent
name|event
init|=
name|exam
operator|.
name|getEvent
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|!=
literal|null
condition|)
block|{
name|event
operator|.
name|setEventName
argument_list|(
name|exam
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|exam
operator|.
name|getLength
argument_list|()
operator|.
name|equals
argument_list|(
name|oldLength
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|event
operator|.
name|getMeetings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Meeting
name|m
init|=
operator|(
name|Meeting
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|m
operator|.
name|setStopOffset
argument_list|(
name|exam
operator|.
name|getLength
argument_list|()
operator|-
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|exam
operator|.
name|generateDefaultPreferences
argument_list|(
literal|false
argument_list|)
expr_stmt|;
operator|new
name|ExamDAO
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|exam
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
literal|null
argument_list|,
name|request
argument_list|,
name|exam
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|EXAM_EDIT
argument_list|,
operator|(
name|add
condition|?
name|ChangeLog
operator|.
name|Operation
operator|.
name|CREATE
else|:
name|ChangeLog
operator|.
name|Operation
operator|.
name|UPDATE
operator|)
argument_list|,
name|exam
operator|.
name|firstSubjectArea
argument_list|()
argument_list|,
name|exam
operator|.
name|firstDepartment
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|add
condition|)
name|frm
operator|.
name|setExamId
argument_list|(
name|exam
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

