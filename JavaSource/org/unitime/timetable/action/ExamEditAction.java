begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts2
operator|.
name|convention
operator|.
name|annotation
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts2
operator|.
name|convention
operator|.
name|annotation
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts2
operator|.
name|tiles
operator|.
name|annotation
operator|.
name|TilesDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts2
operator|.
name|tiles
operator|.
name|annotation
operator|.
name|TilesDefinitions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts2
operator|.
name|tiles
operator|.
name|annotation
operator|.
name|TilesPutAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|messages
operator|.
name|ExaminationMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|CommonValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|UserProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|ExamEditForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentStatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Meeting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Preference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverParameterDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverParameterGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentAccomodation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|Class_DAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentalInstructorDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExamDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExamTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstrOfferingConfigDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstructionalOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SchedulingSubpartDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|context
operator|.
name|HttpSessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|LookupTables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|BackTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|Navigation
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Action
argument_list|(
name|value
operator|=
literal|"examEdit"
argument_list|,
name|results
operator|=
block|{
annotation|@
name|Result
argument_list|(
name|name
operator|=
literal|"showAdd"
argument_list|,
name|type
operator|=
literal|"tiles"
argument_list|,
name|location
operator|=
literal|"examAdd.tiles"
argument_list|)
block|,
annotation|@
name|Result
argument_list|(
name|name
operator|=
literal|"showEdit"
argument_list|,
name|type
operator|=
literal|"tiles"
argument_list|,
name|location
operator|=
literal|"examEdit.tiles"
argument_list|)
block|,
annotation|@
name|Result
argument_list|(
name|name
operator|=
literal|"showDetail"
argument_list|,
name|type
operator|=
literal|"redirect"
argument_list|,
name|location
operator|=
literal|"/examDetail.action"
argument_list|,
name|params
operator|=
block|{
literal|"examId"
block|,
literal|"${form.examId}"
block|,
literal|"op"
block|,
literal|"${op}"
block|}
argument_list|)
block|,
annotation|@
name|Result
argument_list|(
name|name
operator|=
literal|"showList"
argument_list|,
name|type
operator|=
literal|"redirect"
argument_list|,
name|location
operator|=
literal|"/examList.action"
argument_list|)
block|}
argument_list|)
annotation|@
name|TilesDefinitions
argument_list|(
name|value
operator|=
block|{
annotation|@
name|TilesDefinition
argument_list|(
name|name
operator|=
literal|"examEdit.tiles"
argument_list|,
name|extend
operator|=
literal|"baseLayout"
argument_list|,
name|putAttributes
operator|=
block|{
annotation|@
name|TilesPutAttribute
argument_list|(
name|name
operator|=
literal|"title"
argument_list|,
name|value
operator|=
literal|"Edit Examination"
argument_list|)
block|,
annotation|@
name|TilesPutAttribute
argument_list|(
name|name
operator|=
literal|"body"
argument_list|,
name|value
operator|=
literal|"/user/examEdit.jsp"
argument_list|)
block|,
annotation|@
name|TilesPutAttribute
argument_list|(
name|name
operator|=
literal|"showNavigation"
argument_list|,
name|value
operator|=
literal|"true"
argument_list|)
block|}
argument_list|)
block|,
annotation|@
name|TilesDefinition
argument_list|(
name|name
operator|=
literal|"examAdd.tiles"
argument_list|,
name|extend
operator|=
literal|"baseLayout"
argument_list|,
name|putAttributes
operator|=
block|{
annotation|@
name|TilesPutAttribute
argument_list|(
name|name
operator|=
literal|"title"
argument_list|,
name|value
operator|=
literal|"Add Examination"
argument_list|)
block|,
annotation|@
name|TilesPutAttribute
argument_list|(
name|name
operator|=
literal|"body"
argument_list|,
name|value
operator|=
literal|"/user/examEdit.jsp"
argument_list|)
block|,
annotation|@
name|TilesPutAttribute
argument_list|(
name|name
operator|=
literal|"showNavigation"
argument_list|,
name|value
operator|=
literal|"true"
argument_list|)
block|}
argument_list|)
block|}
argument_list|)
specifier|public
class|class
name|ExamEditAction
extends|extends
name|PreferencesAction2
argument_list|<
name|ExamEditForm
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|6628177736452722156L
decl_stmt|;
specifier|protected
specifier|static
name|GwtConstants
name|CONSTANTS
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|ExaminationMessages
name|EXMSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|ExaminationMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|String
name|examId
init|=
literal|null
decl_stmt|;
specifier|protected
name|String
name|op2
init|=
literal|null
decl_stmt|;
specifier|protected
name|String
name|reloadCause
init|=
literal|null
decl_stmt|;
specifier|protected
name|String
name|deleteType
init|=
literal|null
decl_stmt|;
specifier|protected
name|Boolean
name|clone
init|=
literal|null
decl_stmt|;
specifier|protected
name|Long
name|deleteId
init|=
literal|null
decl_stmt|;
specifier|protected
name|Long
name|firstId
init|=
literal|null
decl_stmt|;
specifier|protected
name|String
name|firstType
init|=
literal|null
decl_stmt|;
specifier|public
name|String
name|getExamId
parameter_list|()
block|{
return|return
name|examId
return|;
block|}
specifier|public
name|void
name|setExamId
parameter_list|(
name|String
name|examId
parameter_list|)
block|{
name|this
operator|.
name|examId
operator|=
name|examId
expr_stmt|;
block|}
specifier|public
name|String
name|getOp2
parameter_list|()
block|{
return|return
name|op2
return|;
block|}
specifier|public
name|void
name|setOp2
parameter_list|(
name|String
name|op2
parameter_list|)
block|{
name|this
operator|.
name|op2
operator|=
name|op2
expr_stmt|;
block|}
specifier|public
name|String
name|getReloadCause
parameter_list|()
block|{
return|return
name|reloadCause
return|;
block|}
specifier|public
name|void
name|setReloadCause
parameter_list|(
name|String
name|reloadCause
parameter_list|)
block|{
name|this
operator|.
name|reloadCause
operator|=
name|reloadCause
expr_stmt|;
block|}
specifier|public
name|String
name|getDeleteType
parameter_list|()
block|{
return|return
name|deleteType
return|;
block|}
specifier|public
name|void
name|setDeleteType
parameter_list|(
name|String
name|deleteType
parameter_list|)
block|{
name|this
operator|.
name|deleteType
operator|=
name|deleteType
expr_stmt|;
block|}
specifier|public
name|Boolean
name|isClone
parameter_list|()
block|{
return|return
name|clone
return|;
block|}
specifier|public
name|void
name|setClone
parameter_list|(
name|Boolean
name|clone
parameter_list|)
block|{
name|this
operator|.
name|clone
operator|=
name|clone
expr_stmt|;
block|}
specifier|public
name|Long
name|getDeleteId
parameter_list|()
block|{
return|return
name|deleteId
return|;
block|}
specifier|public
name|void
name|setDeleteId
parameter_list|(
name|Long
name|deleteId
parameter_list|)
block|{
name|this
operator|.
name|deleteId
operator|=
name|deleteId
expr_stmt|;
block|}
specifier|public
name|Long
name|getFirstId
parameter_list|()
block|{
return|return
name|firstId
return|;
block|}
specifier|public
name|void
name|setFirstId
parameter_list|(
name|Long
name|firstId
parameter_list|)
block|{
name|this
operator|.
name|firstId
operator|=
name|firstId
expr_stmt|;
block|}
specifier|public
name|String
name|getFirstType
parameter_list|()
block|{
return|return
name|firstType
return|;
block|}
specifier|public
name|void
name|setFirstType
parameter_list|(
name|String
name|firstType
parameter_list|)
block|{
name|this
operator|.
name|firstType
operator|=
name|firstType
expr_stmt|;
block|}
specifier|public
name|String
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|form
operator|==
literal|null
condition|)
block|{
name|form
operator|=
operator|new
name|ExamEditForm
argument_list|()
expr_stmt|;
name|form
operator|.
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|getAttribute
argument_list|(
literal|"Exam.Type"
argument_list|)
operator|!=
literal|null
condition|)
name|form
operator|.
name|setExamType
argument_list|(
operator|(
name|Long
operator|)
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|getAttribute
argument_list|(
literal|"Exam.Type"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|form
operator|.
name|getExamType
argument_list|()
operator|==
literal|null
condition|)
block|{
name|List
argument_list|<
name|ExamType
argument_list|>
name|types
init|=
name|ExamType
operator|.
name|findAllUsedApplicable
argument_list|(
name|HttpSessionContext
operator|.
name|getSessionContext
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|getServletContext
argument_list|()
argument_list|)
operator|.
name|getUser
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ExamEdit
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ExamTimetable
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|types
operator|.
name|isEmpty
argument_list|()
condition|)
name|form
operator|.
name|setExamType
argument_list|(
name|types
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|super
operator|.
name|execute
argument_list|()
expr_stmt|;
comment|// Read parameters
if|if
condition|(
name|op
operator|==
literal|null
condition|)
name|op
operator|=
name|form
operator|.
name|getOp
argument_list|()
expr_stmt|;
if|if
condition|(
name|examId
operator|==
literal|null
operator|&&
name|form
operator|.
name|getExamId
argument_list|()
operator|!=
literal|null
condition|)
name|examId
operator|=
name|form
operator|.
name|getExamId
argument_list|()
expr_stmt|;
comment|// Determine if initial load
if|if
condition|(
name|op
operator|==
literal|null
operator|||
name|op
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
operator|(
literal|"Reload"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|&&
operator|(
name|reloadCause
operator|==
literal|null
operator|||
name|reloadCause
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
operator|)
condition|)
block|{
if|if
condition|(
name|deleteType
operator|!=
literal|null
operator|&&
operator|!
name|deleteType
operator|.
name|isEmpty
argument_list|()
condition|)
name|op
operator|=
literal|"delete"
expr_stmt|;
else|else
name|op
operator|=
literal|"init"
expr_stmt|;
block|}
comment|// Check op exists
if|if
condition|(
name|op
operator|==
literal|null
operator|||
name|op
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
name|EXMSG
operator|.
name|errorNoExamId
argument_list|()
argument_list|)
throw|;
name|Exam
name|exam
init|=
operator|(
name|examId
operator|==
literal|null
operator|||
name|examId
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|ExamDAO
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|examId
argument_list|)
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|exam
operator|!=
literal|null
condition|)
block|{
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|examId
argument_list|,
literal|"Exam"
argument_list|,
name|Right
operator|.
name|ExaminationEdit
argument_list|)
expr_stmt|;
name|form
operator|.
name|setExamId
argument_list|(
name|exam
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|exam
operator|==
literal|null
condition|)
block|{
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|ExaminationAdd
argument_list|)
expr_stmt|;
name|form
operator|.
name|setExamId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|boolean
name|timeVertical
init|=
name|CommonValues
operator|.
name|VerticalGrid
operator|.
name|eq
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
name|UserProperty
operator|.
name|GridOrientation
argument_list|)
argument_list|)
decl_stmt|;
comment|// Cancel - Go back to Instructors Detail Screen
if|if
condition|(
literal|"Back"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
name|EXMSG
operator|.
name|actionBatckToDetail
argument_list|()
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
if|if
condition|(
name|BackTracker
operator|.
name|hasBack
argument_list|(
name|request
argument_list|,
literal|1
argument_list|)
condition|)
block|{
name|BackTracker
operator|.
name|doBack
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|examId
operator|!=
literal|null
operator|&&
operator|!
name|examId
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|"showDetail"
return|;
block|}
else|else
block|{
return|return
literal|"showList"
return|;
block|}
block|}
comment|// Clear all preferences
if|if
condition|(
name|exam
operator|!=
literal|null
operator|&&
operator|(
literal|"Clear Preferences"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
name|EXMSG
operator|.
name|actionClearExamPreferences
argument_list|()
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|)
condition|)
block|{
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|exam
argument_list|,
name|Right
operator|.
name|ExaminationEditClearPreferences
argument_list|)
expr_stmt|;
name|Set
name|s
init|=
name|exam
operator|.
name|getPreferences
argument_list|()
decl_stmt|;
name|s
operator|.
name|clear
argument_list|()
expr_stmt|;
name|exam
operator|.
name|setPreferences
argument_list|(
name|s
argument_list|)
expr_stmt|;
operator|new
name|ExamDAO
argument_list|()
operator|.
name|update
argument_list|(
name|exam
argument_list|)
expr_stmt|;
name|op
operator|=
literal|"init"
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
literal|null
argument_list|,
name|sessionContext
argument_list|,
name|exam
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|EXAM_EDIT
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|CLEAR_PREF
argument_list|,
name|exam
operator|.
name|firstSubjectArea
argument_list|()
argument_list|,
name|exam
operator|.
name|firstDepartment
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|"showDetail"
return|;
block|}
comment|// Reset form for initial load
if|if
condition|(
literal|"init"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|doLoad
argument_list|(
name|exam
argument_list|)
expr_stmt|;
if|if
condition|(
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|clone
argument_list|)
condition|)
block|{
name|form
operator|.
name|setExamId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|form
operator|.
name|setClone
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|ExamType
name|type
init|=
name|ExamTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|form
operator|.
name|getExamType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ApplicationProperty
operator|.
name|ExaminationSizeUseLimitInsteadOfEnrollment
operator|.
name|isTrue
argument_list|(
name|type
operator|.
name|getReference
argument_list|()
argument_list|,
name|type
operator|.
name|getType
argument_list|()
operator|!=
name|ExamType
operator|.
name|sExamTypeFinal
argument_list|)
condition|)
name|form
operator|.
name|setSizeNote
argument_list|(
literal|"A number of enrolled students or a total limit of selected classes/courses (whichever is bigger) is used when blank"
argument_list|)
expr_stmt|;
else|else
name|form
operator|.
name|setSizeNote
argument_list|(
literal|"A number of enrolled students is used when blank"
argument_list|)
expr_stmt|;
name|form
operator|.
name|setLabel
argument_list|(
name|form
operator|.
name|getClone
argument_list|()
operator|||
name|exam
operator|==
literal|null
condition|?
literal|"New Examination"
else|:
name|exam
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"Add Instructor"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
name|EXMSG
operator|.
name|actionAddInstructor
argument_list|()
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|PREF_ROWS_ADDED
condition|;
name|i
operator|++
control|)
block|{
name|form
operator|.
name|getInstructors
argument_list|()
operator|.
name|add
argument_list|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|"Add Object"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
name|EXMSG
operator|.
name|actionAddObject
argument_list|()
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|PREF_ROWS_ADDED
condition|;
name|i
operator|++
control|)
block|{
name|form
operator|.
name|addExamOwner
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|setAttribute
argument_list|(
literal|"hash"
argument_list|,
literal|"objects"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"instructor"
operator|.
name|equals
argument_list|(
name|deleteType
argument_list|)
operator|&&
name|deleteId
operator|!=
literal|null
condition|)
block|{
name|form
operator|.
name|getInstructors
argument_list|()
operator|.
name|remove
argument_list|(
name|deleteId
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"examType"
operator|.
name|equals
argument_list|(
name|deleteType
argument_list|)
operator|&&
name|deleteId
operator|!=
literal|null
condition|)
block|{
name|form
operator|.
name|setExamType
argument_list|(
name|deleteId
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"objects"
operator|.
name|equals
argument_list|(
name|deleteType
argument_list|)
operator|&&
name|deleteId
operator|!=
literal|null
condition|)
block|{
name|form
operator|.
name|deleteExamOwner
argument_list|(
name|deleteId
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"Update"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
name|EXMSG
operator|.
name|actionExamUpdate
argument_list|()
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
literal|"Save"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
name|EXMSG
operator|.
name|actionExamSave
argument_list|()
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
literal|"Previous"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
name|EXMSG
operator|.
name|actionExamPrevious
argument_list|()
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
literal|"Next"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
name|EXMSG
operator|.
name|actionExamNext
argument_list|()
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|form
operator|.
name|validate
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hasFieldErrors
argument_list|()
condition|)
block|{
name|doUpdate
argument_list|(
name|exam
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"Next"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
name|EXMSG
operator|.
name|actionExamNext
argument_list|()
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|response
operator|.
name|sendRedirect
argument_list|(
name|response
operator|.
name|encodeURL
argument_list|(
literal|"examEdit.action?examId="
operator|+
name|form
operator|.
name|getNextId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
literal|"Previous"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
name|EXMSG
operator|.
name|actionExamPrevious
argument_list|()
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|response
operator|.
name|sendRedirect
argument_list|(
name|response
operator|.
name|encodeURL
argument_list|(
literal|"examEdit.action?examId="
operator|+
name|form
operator|.
name|getPreviousId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|(
literal|"Save"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
name|EXMSG
operator|.
name|actionExamSave
argument_list|()
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|)
operator|&&
name|BackTracker
operator|.
name|hasBack
argument_list|(
name|request
argument_list|,
literal|2
argument_list|)
operator|&&
operator|!
name|form
operator|.
name|getClone
argument_list|()
condition|)
block|{
name|request
operator|.
name|setAttribute
argument_list|(
literal|"backType"
argument_list|,
literal|"PreferenceGroup"
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"backId"
argument_list|,
name|form
operator|.
name|getExamId
argument_list|()
argument_list|)
expr_stmt|;
name|BackTracker
operator|.
name|doBack
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
literal|"showDetail"
return|;
block|}
block|}
comment|// Initialize Preferences for initial load
name|form
operator|.
name|setAvailableTimePatterns
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"init"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|initPrefs
argument_list|(
name|exam
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|generateExamPeriodGrid
argument_list|(
operator|(
name|form
operator|.
name|getClone
argument_list|()
condition|?
literal|null
else|:
name|exam
operator|)
argument_list|,
name|op
argument_list|,
name|timeVertical
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Process Preferences Action
name|processPrefAction
argument_list|()
expr_stmt|;
name|setupInstructors
argument_list|(
name|exam
argument_list|)
expr_stmt|;
name|LookupTables
operator|.
name|setupExamTypes
argument_list|(
name|request
argument_list|,
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ExamTimetable
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ExamEdit
argument_list|)
expr_stmt|;
if|if
condition|(
name|exam
operator|!=
literal|null
condition|)
block|{
name|LookupTables
operator|.
name|setupRooms
argument_list|(
name|request
argument_list|,
name|exam
argument_list|)
expr_stmt|;
comment|// Room Prefs
name|LookupTables
operator|.
name|setupBldgs
argument_list|(
name|request
argument_list|,
name|exam
argument_list|)
expr_stmt|;
comment|// Building Prefs
name|LookupTables
operator|.
name|setupRoomFeatures
argument_list|(
name|request
argument_list|,
name|exam
argument_list|)
expr_stmt|;
comment|// Preference Levels
name|LookupTables
operator|.
name|setupRoomGroups
argument_list|(
name|request
argument_list|,
name|exam
argument_list|)
expr_stmt|;
comment|// Room Groups
block|}
else|else
block|{
name|Exam
name|dummy
init|=
operator|new
name|Exam
argument_list|()
decl_stmt|;
name|dummy
operator|.
name|setSession
argument_list|(
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|setExamType
argument_list|(
name|ExamTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|form
operator|.
name|getExamType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LookupTables
operator|.
name|setupRooms
argument_list|(
name|request
argument_list|,
name|dummy
argument_list|)
expr_stmt|;
comment|// Room Prefs
name|LookupTables
operator|.
name|setupBldgs
argument_list|(
name|request
argument_list|,
name|dummy
argument_list|)
expr_stmt|;
comment|// Building Prefs
name|LookupTables
operator|.
name|setupRoomFeatures
argument_list|(
name|request
argument_list|,
name|dummy
argument_list|)
expr_stmt|;
comment|// Preference Levels
name|LookupTables
operator|.
name|setupRoomGroups
argument_list|(
name|request
argument_list|,
name|dummy
argument_list|)
expr_stmt|;
comment|// Room Groups
block|}
name|form
operator|.
name|setAllowHardPrefs
argument_list|(
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|exam
argument_list|,
name|Right
operator|.
name|CanUseHardPeriodPrefs
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setSubjectAreas
argument_list|(
name|SubjectArea
operator|.
name|getUserSubjectAreas
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|form
operator|.
name|getClone
argument_list|()
operator|&&
name|exam
operator|!=
literal|null
condition|)
block|{
name|BackTracker
operator|.
name|markForBack
argument_list|(
name|request
argument_list|,
literal|"examDetail.action?examId="
operator|+
name|form
operator|.
name|getExamId
argument_list|()
argument_list|,
name|EXMSG
operator|.
name|backExam
argument_list|(
name|form
operator|.
name|getName
argument_list|()
operator|==
literal|null
operator|||
name|form
operator|.
name|getName
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
name|form
operator|.
name|getLabel
argument_list|()
operator|.
name|trim
argument_list|()
else|:
name|form
operator|.
name|getName
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|form
operator|.
name|getClone
argument_list|()
operator|||
name|exam
operator|==
literal|null
condition|?
literal|"showAdd"
else|:
literal|"showEdit"
operator|)
return|;
block|}
specifier|protected
name|void
name|doLoad
parameter_list|(
name|Exam
name|exam
parameter_list|)
block|{
if|if
condition|(
name|exam
operator|!=
literal|null
condition|)
block|{
name|form
operator|.
name|setExamId
argument_list|(
name|exam
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|form
operator|.
name|setExamType
argument_list|(
name|exam
operator|.
name|getExamType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|form
operator|.
name|setName
argument_list|(
name|exam
operator|.
name|generateName
argument_list|()
operator|.
name|equals
argument_list|(
name|exam
operator|.
name|getName
argument_list|()
argument_list|)
condition|?
literal|null
else|:
name|exam
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|form
operator|.
name|setNote
argument_list|(
name|exam
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|form
operator|.
name|setLength
argument_list|(
name|exam
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|form
operator|.
name|setSize
argument_list|(
name|exam
operator|.
name|getExamSize
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|exam
operator|.
name|getExamSize
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|form
operator|.
name|setPrintOffset
argument_list|(
name|exam
operator|.
name|getPrintOffset
argument_list|()
operator|==
literal|null
operator|||
name|exam
operator|.
name|getPrintOffset
argument_list|()
operator|==
literal|0
condition|?
literal|null
else|:
name|exam
operator|.
name|getPrintOffset
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|form
operator|.
name|setSeatingType
argument_list|(
name|Exam
operator|.
name|sSeatingTypes
index|[
name|exam
operator|.
name|getSeatingType
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|form
operator|.
name|setMaxNbrRooms
argument_list|(
name|exam
operator|.
name|getMaxNbrRooms
argument_list|()
argument_list|)
expr_stmt|;
name|form
operator|.
name|setAccommodation
argument_list|(
name|StudentAccomodation
operator|.
name|toHtml
argument_list|(
name|StudentAccomodation
operator|.
name|getAccommodations
argument_list|(
name|exam
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|TreeSet
name|instructors
init|=
operator|new
name|TreeSet
argument_list|(
name|exam
operator|.
name|getInstructors
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|instructors
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentalInstructor
name|instr
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|form
operator|.
name|getInstructors
argument_list|()
operator|.
name|add
argument_list|(
name|instr
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Long
name|nextId
init|=
name|Navigation
operator|.
name|getNext
argument_list|(
name|sessionContext
argument_list|,
name|Navigation
operator|.
name|sInstructionalOfferingLevel
argument_list|,
name|exam
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|Long
name|prevId
init|=
name|Navigation
operator|.
name|getPrevious
argument_list|(
name|sessionContext
argument_list|,
name|Navigation
operator|.
name|sInstructionalOfferingLevel
argument_list|,
name|exam
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|form
operator|.
name|setPreviousId
argument_list|(
name|prevId
operator|==
literal|null
condition|?
literal|null
else|:
name|prevId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|form
operator|.
name|setNextId
argument_list|(
name|nextId
operator|==
literal|null
condition|?
literal|null
else|:
name|nextId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|TreeSet
argument_list|(
name|exam
operator|.
name|getOwners
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|form
operator|.
name|addExamOwner
argument_list|(
operator|(
name|ExamOwner
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|TreeSet
name|periods
init|=
name|ExamPeriod
operator|.
name|findAll
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|,
name|form
operator|.
name|getExamType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|periods
operator|.
name|isEmpty
argument_list|()
condition|)
name|form
operator|.
name|setLength
argument_list|(
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
operator|(
operator|(
name|ExamPeriod
operator|)
name|periods
operator|.
name|first
argument_list|()
operator|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|SolverParameterDef
name|maxRoomsParam
init|=
name|SolverParameterDef
operator|.
name|findByNameType
argument_list|(
literal|"Exams.MaxRooms"
argument_list|,
name|SolverParameterGroup
operator|.
name|SolverType
operator|.
name|EXAM
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxRoomsParam
operator|!=
literal|null
operator|&&
name|maxRoomsParam
operator|.
name|getDefault
argument_list|()
operator|!=
literal|null
condition|)
name|form
operator|.
name|setMaxNbrRooms
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|maxRoomsParam
operator|.
name|getDefault
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
if|if
condition|(
name|firstId
operator|!=
literal|null
operator|&&
name|firstType
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|"Class_"
operator|.
name|equals
argument_list|(
name|firstType
argument_list|)
condition|)
block|{
name|Class_
name|clazz
init|=
operator|new
name|Class_DAO
argument_list|()
operator|.
name|get
argument_list|(
name|firstId
argument_list|)
decl_stmt|;
name|form
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|form
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|form
operator|.
name|getItype
argument_list|()
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|form
operator|.
name|getClassNumber
argument_list|()
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"SchedulingSubpart"
operator|.
name|equals
argument_list|(
name|firstType
argument_list|)
condition|)
block|{
name|SchedulingSubpart
name|subpart
init|=
operator|new
name|SchedulingSubpartDAO
argument_list|()
operator|.
name|get
argument_list|(
name|firstId
argument_list|)
decl_stmt|;
name|InstrOfferingConfig
name|config
init|=
name|subpart
operator|.
name|getInstrOfferingConfig
argument_list|()
decl_stmt|;
name|form
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|add
argument_list|(
name|config
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|form
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|add
argument_list|(
name|config
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|form
operator|.
name|getItype
argument_list|()
operator|.
name|add
argument_list|(
operator|-
name|config
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|form
operator|.
name|getClassNumber
argument_list|()
operator|.
name|add
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"InstrOfferingConfig"
operator|.
name|equals
argument_list|(
name|firstType
argument_list|)
condition|)
block|{
name|InstrOfferingConfig
name|config
init|=
operator|new
name|InstrOfferingConfigDAO
argument_list|()
operator|.
name|get
argument_list|(
name|firstId
argument_list|)
decl_stmt|;
name|form
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|add
argument_list|(
name|config
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|form
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|add
argument_list|(
name|config
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|form
operator|.
name|getItype
argument_list|()
operator|.
name|add
argument_list|(
operator|-
name|config
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|form
operator|.
name|getClassNumber
argument_list|()
operator|.
name|add
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"InstructionalOffering"
operator|.
name|equals
argument_list|(
name|firstType
argument_list|)
condition|)
block|{
name|InstructionalOffering
name|offering
init|=
operator|new
name|InstructionalOfferingDAO
argument_list|()
operator|.
name|get
argument_list|(
name|firstId
argument_list|)
decl_stmt|;
name|form
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|add
argument_list|(
name|offering
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|form
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|add
argument_list|(
name|offering
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|form
operator|.
name|getItype
argument_list|()
operator|.
name|add
argument_list|(
name|Long
operator|.
name|MIN_VALUE
operator|+
literal|1
argument_list|)
expr_stmt|;
name|form
operator|.
name|getClassNumber
argument_list|()
operator|.
name|add
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"CourseOffering"
operator|.
name|equals
argument_list|(
name|firstType
argument_list|)
condition|)
block|{
name|CourseOffering
name|course
init|=
operator|new
name|CourseOfferingDAO
argument_list|()
operator|.
name|get
argument_list|(
name|firstId
argument_list|)
decl_stmt|;
name|form
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|add
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|form
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|add
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|form
operator|.
name|getItype
argument_list|()
operator|.
name|add
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|form
operator|.
name|getClassNumber
argument_list|()
operator|.
name|add
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|PREF_ROWS_ADDED
condition|;
name|i
operator|++
control|)
block|{
name|form
operator|.
name|addExamOwner
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|form
operator|.
name|getInstructors
argument_list|()
operator|.
name|add
argument_list|(
name|Constants
operator|.
name|BLANK_OPTION_VALUE
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|setupInstructors
parameter_list|(
name|Exam
name|exam
parameter_list|)
throws|throws
name|Exception
block|{
name|List
name|instructors
init|=
name|form
operator|.
name|getInstructors
argument_list|()
decl_stmt|;
if|if
condition|(
name|instructors
operator|==
literal|null
operator|||
name|instructors
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return;
name|HashSet
name|deptIds
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|exam
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|exam
operator|.
name|getInstructors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentalInstructor
name|instr
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|deptIds
operator|.
name|add
argument_list|(
name|instr
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|exam
operator|.
name|getOwners
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamOwner
name|own
init|=
operator|(
name|ExamOwner
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|deptIds
operator|.
name|add
argument_list|(
name|own
operator|.
name|getCourse
argument_list|()
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|form
operator|.
name|getSubjectAreaList
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ExamOwner
name|own
init|=
name|form
operator|.
name|getExamOwner
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|own
operator|!=
literal|null
condition|)
name|deptIds
operator|.
name|add
argument_list|(
name|own
operator|.
name|getCourse
argument_list|()
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deptIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Department
name|dept
range|:
name|Department
operator|.
name|getUserDepartments
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
control|)
block|{
name|deptIds
operator|.
name|add
argument_list|(
name|dept
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Long
index|[]
name|deptsIdsArray
init|=
operator|new
name|Long
index|[
name|deptIds
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|deptIds
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|deptsIdsArray
index|[
name|idx
operator|++
index|]
operator|=
operator|(
name|Long
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|LookupTables
operator|.
name|setupInstructors
argument_list|(
name|request
argument_list|,
name|sessionContext
argument_list|,
name|deptsIdsArray
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|doUpdate
parameter_list|(
name|Exam
name|exam
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|add
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|exam
operator|==
literal|null
condition|)
block|{
name|add
operator|=
literal|true
expr_stmt|;
name|exam
operator|=
operator|new
name|Exam
argument_list|()
expr_stmt|;
name|exam
operator|.
name|setSession
argument_list|(
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|exam
operator|.
name|setExamType
argument_list|(
name|ExamTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|form
operator|.
name|getExamType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Set
name|s
init|=
name|exam
operator|.
name|getPreferences
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
name|s
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
comment|// Clear all old prefs
for|for
control|(
name|Iterator
name|i
init|=
name|s
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|p
init|=
operator|(
name|Preference
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|instanceof
name|DistributionPref
condition|)
block|{
comment|//skip distribution preferences
block|}
else|else
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|doUpdate
argument_list|(
name|exam
argument_list|,
name|s
argument_list|,
literal|false
argument_list|,
name|Preference
operator|.
name|Type
operator|.
name|PERIOD
argument_list|,
name|Preference
operator|.
name|Type
operator|.
name|ROOM
argument_list|,
name|Preference
operator|.
name|Type
operator|.
name|ROOM_FEATURE
argument_list|,
name|Preference
operator|.
name|Type
operator|.
name|ROOM_GROUP
argument_list|,
name|Preference
operator|.
name|Type
operator|.
name|BUILDING
argument_list|)
expr_stmt|;
name|exam
operator|.
name|setNote
argument_list|(
name|form
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|exam
operator|.
name|setSeatingType
argument_list|(
name|form
operator|.
name|getSeatingTypeIdx
argument_list|()
argument_list|)
expr_stmt|;
name|Integer
name|oldLength
init|=
name|exam
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|exam
operator|.
name|setLength
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|form
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|form
operator|.
name|getSize
argument_list|()
operator|==
literal|null
operator|||
name|form
operator|.
name|getSize
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|exam
operator|.
name|setExamSize
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exam
operator|.
name|setExamSize
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|form
operator|.
name|getSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|oldPrintOffset
init|=
operator|(
name|exam
operator|.
name|getPrintOffset
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|exam
operator|.
name|getPrintOffset
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|form
operator|.
name|getPrintOffset
argument_list|()
operator|==
literal|null
operator|||
name|form
operator|.
name|getPrintOffset
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|exam
operator|.
name|setPrintOffset
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exam
operator|.
name|setPrintOffset
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|form
operator|.
name|getPrintOffset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|exam
operator|.
name|setMaxNbrRooms
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|form
operator|.
name|getMaxNbrRooms
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|exam
operator|.
name|getInstructors
argument_list|()
operator|==
literal|null
condition|)
name|exam
operator|.
name|setInstructors
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exam
operator|.
name|getInstructors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentalInstructor
name|instructor
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|instructor
operator|.
name|getExams
argument_list|()
operator|.
name|remove
argument_list|(
name|exam
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|form
operator|.
name|getInstructors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|instructorId
init|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Constants
operator|.
name|BLANK_OPTION_VALUE
operator|.
name|equals
argument_list|(
name|instructorId
argument_list|)
operator|&&
operator|!
name|Preference
operator|.
name|BLANK_PREF_VALUE
operator|.
name|equals
argument_list|(
name|instructorId
argument_list|)
condition|)
block|{
name|DepartmentalInstructor
name|instructor
init|=
operator|new
name|DepartmentalInstructorDAO
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|instructorId
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|instructor
operator|!=
literal|null
condition|)
block|{
name|exam
operator|.
name|getInstructors
argument_list|()
operator|.
name|add
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|getExams
argument_list|()
operator|.
name|add
argument_list|(
name|exam
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|form
operator|.
name|setExamOwners
argument_list|(
name|exam
argument_list|)
expr_stmt|;
if|if
condition|(
name|form
operator|.
name|getName
argument_list|()
operator|==
literal|null
operator|||
name|form
operator|.
name|getName
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|exam
operator|.
name|setName
argument_list|(
name|exam
operator|.
name|generateName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exam
operator|.
name|setName
argument_list|(
name|form
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ExamEvent
name|event
init|=
name|exam
operator|.
name|getEvent
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|!=
literal|null
condition|)
block|{
name|event
operator|.
name|setEventName
argument_list|(
name|exam
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
operator|!
name|exam
operator|.
name|getLength
argument_list|()
operator|.
name|equals
argument_list|(
name|oldLength
argument_list|)
operator|||
name|oldPrintOffset
operator|!=
operator|(
name|exam
operator|.
name|getPrintOffset
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|exam
operator|.
name|getPrintOffset
argument_list|()
operator|)
operator|)
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|event
operator|.
name|getMeetings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Meeting
name|m
init|=
operator|(
name|Meeting
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|m
operator|.
name|setStartOffset
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
operator|.
name|getExamEventStartOffsetForExam
argument_list|(
name|exam
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|setStopOffset
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
operator|.
name|getExamEventStopOffsetForExam
argument_list|(
name|exam
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|exam
operator|.
name|generateDefaultPreferences
argument_list|(
literal|false
argument_list|)
expr_stmt|;
operator|new
name|ExamDAO
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|exam
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
literal|null
argument_list|,
name|sessionContext
argument_list|,
name|exam
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|EXAM_EDIT
argument_list|,
operator|(
name|add
condition|?
name|ChangeLog
operator|.
name|Operation
operator|.
name|CREATE
else|:
name|ChangeLog
operator|.
name|Operation
operator|.
name|UPDATE
operator|)
argument_list|,
name|exam
operator|.
name|firstSubjectArea
argument_list|()
argument_list|,
name|exam
operator|.
name|firstDepartment
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|add
condition|)
name|form
operator|.
name|setExamId
argument_list|(
name|exam
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

