begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|util
operator|.
name|MessageResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|Web
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|WebTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|InstructorEditForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Roles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|UserData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|ClassComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|ClassInstructorComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentalInstructorDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ClassAssignmentProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|WebSolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|AssignmentPreferenceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|LookupTables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|BackTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|DesignatorListBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|Navigation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|RequiredTimeTable
import|;
end_import

begin_comment
comment|/**   * MyEclipse Struts  * Creation date: 07-18-2006  *   * XDoclet definition:  * @struts.action path="/instructorDetail" name="instructorEditForm" input="/user/instructorDetail.jsp" scope="request"  */
end_comment

begin_class
specifier|public
class|class
name|InstructorDetailAction
extends|extends
name|PreferencesAction
block|{
comment|// --------------------------------------------------------- Instance Variables
comment|// --------------------------------------------------------- Methods
comment|/**  	 * Method execute 	 * @param mapping 	 * @param form 	 * @param request 	 * @param response 	 * @return ActionForward 	 */
specifier|public
name|ActionForward
name|execute
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
comment|// Set common lookup tables
name|super
operator|.
name|execute
argument_list|(
name|mapping
argument_list|,
name|form
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|HttpSession
name|httpSession
init|=
name|request
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|httpSession
argument_list|)
decl_stmt|;
name|InstructorEditForm
name|frm
init|=
operator|(
name|InstructorEditForm
operator|)
name|form
decl_stmt|;
name|MessageResources
name|rsc
init|=
name|getResources
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|ActionMessages
name|errors
init|=
operator|new
name|ActionMessages
argument_list|()
decl_stmt|;
comment|//Read parameters
name|String
name|instructorId
init|=
operator|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"instructorId"
argument_list|)
operator|==
literal|null
operator|)
condition|?
operator|(
name|request
operator|.
name|getAttribute
argument_list|(
literal|"instructorId"
argument_list|)
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|request
operator|.
name|getAttribute
argument_list|(
literal|"instructorId"
argument_list|)
operator|.
name|toString
argument_list|()
else|:
name|request
operator|.
name|getParameter
argument_list|(
literal|"instructorId"
argument_list|)
decl_stmt|;
name|String
name|op
init|=
name|frm
operator|.
name|getOp
argument_list|()
decl_stmt|;
name|boolean
name|timeVertical
init|=
name|RequiredTimeTable
operator|.
name|getTimeGridVertical
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"op2"
argument_list|)
operator|!=
literal|null
operator|&&
name|request
operator|.
name|getParameter
argument_list|(
literal|"op2"
argument_list|)
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|op
operator|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"op2"
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getAttribute
argument_list|(
literal|"fromChildScreen"
argument_list|)
operator|!=
literal|null
operator|&&
name|request
operator|.
name|getAttribute
argument_list|(
literal|"fromChildScreen"
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
condition|)
block|{
name|op
operator|=
literal|""
expr_stmt|;
name|frm
operator|.
name|setOp
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
comment|// Read instructor id from form
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.editInstructorInfo"
argument_list|)
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.editInstructorPref"
argument_list|)
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.backToInstructorList"
argument_list|)
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.displayPrefs"
argument_list|)
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.nextInstructor"
argument_list|)
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.previousInstructor"
argument_list|)
argument_list|)
condition|)
block|{
name|instructorId
operator|=
name|frm
operator|.
name|getInstructorId
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|frm
operator|.
name|reset
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
comment|//Check op exists
if|if
condition|(
name|op
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Null Operation not supported."
argument_list|)
throw|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"op: "
operator|+
name|op
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"instructor: "
operator|+
name|instructorId
argument_list|)
expr_stmt|;
comment|//Check instructor exists
if|if
condition|(
name|instructorId
operator|==
literal|null
operator|||
name|instructorId
operator|.
name|trim
argument_list|()
operator|==
literal|""
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Instructor Info not supplied."
argument_list|)
throw|;
comment|// Cancel - Go back to Instructors List Screen
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.backToInstructorList"
argument_list|)
argument_list|)
operator|&&
name|instructorId
operator|!=
literal|null
operator|&&
name|instructorId
operator|.
name|trim
argument_list|()
operator|!=
literal|""
condition|)
block|{
name|response
operator|.
name|sendRedirect
argument_list|(
name|response
operator|.
name|encodeURL
argument_list|(
literal|"instructorList.do"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// If subpart id is not null - load subpart info
name|DepartmentalInstructorDAO
name|idao
init|=
operator|new
name|DepartmentalInstructorDAO
argument_list|()
decl_stmt|;
name|DepartmentalInstructor
name|inst
init|=
name|idao
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|instructorId
argument_list|)
argument_list|)
decl_stmt|;
comment|//Edit Information - Redirect to info edit screen
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.editInstructorInfo"
argument_list|)
argument_list|)
operator|&&
name|instructorId
operator|!=
literal|null
operator|&&
name|instructorId
operator|.
name|trim
argument_list|()
operator|!=
literal|""
condition|)
block|{
name|response
operator|.
name|sendRedirect
argument_list|(
name|response
operator|.
name|encodeURL
argument_list|(
literal|"instructorInfoEdit.do?instructorId="
operator|+
name|instructorId
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// Edit Preference - Redirect to prefs edit screen
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.editInstructorPref"
argument_list|)
argument_list|)
operator|&&
name|instructorId
operator|!=
literal|null
operator|&&
name|instructorId
operator|.
name|trim
argument_list|()
operator|!=
literal|""
condition|)
block|{
name|response
operator|.
name|sendRedirect
argument_list|(
name|response
operator|.
name|encodeURL
argument_list|(
literal|"instructorPrefEdit.do?instructorId="
operator|+
name|instructorId
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// Add Designator
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.addDesignator2"
argument_list|)
argument_list|)
operator|&&
name|instructorId
operator|!=
literal|null
operator|&&
name|instructorId
operator|.
name|trim
argument_list|()
operator|!=
literal|""
condition|)
block|{
name|request
operator|.
name|setAttribute
argument_list|(
literal|"instructorId"
argument_list|,
name|instructorId
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"addDesignator"
argument_list|)
return|;
block|}
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.nextInstructor"
argument_list|)
argument_list|)
condition|)
block|{
name|response
operator|.
name|sendRedirect
argument_list|(
name|response
operator|.
name|encodeURL
argument_list|(
literal|"instructorDetail.do?instructorId="
operator|+
name|frm
operator|.
name|getNextId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.previousInstructor"
argument_list|)
argument_list|)
condition|)
block|{
name|response
operator|.
name|sendRedirect
argument_list|(
name|response
operator|.
name|encodeURL
argument_list|(
literal|"instructorDetail.do?instructorId="
operator|+
name|frm
operator|.
name|getPreviousId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// Load form attributes that are constant
name|doLoad
argument_list|(
name|request
argument_list|,
name|frm
argument_list|,
name|inst
argument_list|,
name|instructorId
argument_list|)
expr_stmt|;
name|BackTracker
operator|.
name|markForBack
argument_list|(
name|request
argument_list|,
literal|"instructorDetail.do?instructorId="
operator|+
name|instructorId
argument_list|,
literal|"Instructor ("
operator|+
operator|(
name|frm
operator|.
name|getName
argument_list|()
operator|==
literal|null
condition|?
literal|"null"
else|:
name|frm
operator|.
name|getName
argument_list|()
operator|.
name|trim
argument_list|()
operator|)
operator|+
literal|")"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//load class assignments
name|Set
name|allClasses
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|DepartmentalInstructor
operator|.
name|getAllForInstructor
argument_list|(
name|inst
argument_list|,
name|inst
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentalInstructor
name|di
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|allClasses
operator|.
name|addAll
argument_list|(
name|di
operator|.
name|getClasses
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|allClasses
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ClassAssignmentProxy
name|proxy
init|=
name|WebSolver
operator|.
name|getClassAssignmentProxy
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|TimetableManager
name|manager
init|=
name|TimetableManager
operator|.
name|getManager
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|boolean
name|hasTimetable
init|=
literal|false
decl_stmt|;
try|try
block|{
if|if
condition|(
name|manager
operator|!=
literal|null
operator|&&
name|manager
operator|.
name|canSeeTimetable
argument_list|(
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
argument_list|,
name|user
argument_list|)
operator|&&
name|proxy
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|iterInst
init|=
name|allClasses
operator|.
name|iterator
argument_list|()
init|;
name|iterInst
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|ci
init|=
operator|(
name|ClassInstructor
operator|)
name|iterInst
operator|.
name|next
argument_list|()
decl_stmt|;
name|Class_
name|c
init|=
name|ci
operator|.
name|getClassInstructing
argument_list|()
decl_stmt|;
if|if
condition|(
name|proxy
operator|.
name|getAssignment
argument_list|(
name|c
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|hasTimetable
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|WebTable
name|classTable
init|=
operator|(
name|hasTimetable
condition|?
operator|new
name|WebTable
argument_list|(
literal|7
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Class"
block|,
literal|"Check Conflicts"
block|,
literal|"Share"
block|,
literal|"Limit"
block|,
literal|"Manager"
block|,
literal|"Time"
block|,
literal|"Room"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
literal|null
argument_list|)
else|:
operator|new
name|WebTable
argument_list|(
literal|5
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Class"
block|,
literal|"Check Conflicts"
block|,
literal|"Share"
block|,
literal|"Limit"
block|,
literal|"Manager"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
literal|null
argument_list|)
operator|)
decl_stmt|;
name|String
name|backType
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"backType"
argument_list|)
decl_stmt|;
name|String
name|backId
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"backId"
argument_list|)
decl_stmt|;
name|TreeSet
name|classes
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|ClassInstructorComparator
argument_list|(
operator|new
name|ClassComparator
argument_list|(
name|ClassComparator
operator|.
name|COMPARE_BY_LABEL
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|classes
operator|.
name|addAll
argument_list|(
name|allClasses
argument_list|)
expr_stmt|;
name|Vector
name|classIds
init|=
operator|new
name|Vector
argument_list|(
name|classes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|//Get class assignment information
for|for
control|(
name|Iterator
name|iterInst
init|=
name|classes
operator|.
name|iterator
argument_list|()
init|;
name|iterInst
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|ci
init|=
operator|(
name|ClassInstructor
operator|)
name|iterInst
operator|.
name|next
argument_list|()
decl_stmt|;
name|Class_
name|c
init|=
name|ci
operator|.
name|getClassInstructing
argument_list|()
decl_stmt|;
name|classIds
operator|.
name|add
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|limitString
init|=
literal|""
decl_stmt|;
if|if
condition|(
operator|!
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|isUnlimitedEnrollment
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
if|if
condition|(
name|c
operator|.
name|getExpectedCapacity
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|limitString
operator|=
name|c
operator|.
name|getExpectedCapacity
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getMaxExpectedCapacity
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|c
operator|.
name|getMaxExpectedCapacity
argument_list|()
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getExpectedCapacity
argument_list|()
argument_list|)
condition|)
block|{
name|limitString
operator|=
name|limitString
operator|+
literal|"-"
operator|+
name|c
operator|.
name|getMaxExpectedCapacity
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|limitString
operator|=
literal|"0"
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getMaxExpectedCapacity
argument_list|()
operator|!=
literal|null
operator|&&
name|c
operator|.
name|getMaxExpectedCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|limitString
operator|=
name|limitString
operator|+
literal|"-"
operator|+
name|c
operator|.
name|getMaxExpectedCapacity
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|String
name|managingDept
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getManagingDept
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Department
name|d
init|=
name|c
operator|.
name|getManagingDept
argument_list|()
decl_stmt|;
name|managingDept
operator|=
name|d
operator|.
name|getManagingDeptAbbv
argument_list|()
expr_stmt|;
block|}
name|String
name|assignedTime
init|=
literal|""
decl_stmt|;
name|String
name|assignedRoom
init|=
literal|""
decl_stmt|;
name|Assignment
name|a
init|=
literal|null
decl_stmt|;
name|AssignmentPreferenceInfo
name|info
init|=
literal|null
decl_stmt|;
try|try
block|{
name|a
operator|=
name|proxy
operator|.
name|getAssignment
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|info
operator|=
name|proxy
operator|.
name|getAssignmentInfo
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|a
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
name|assignedTime
operator|+=
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
name|info
operator|.
name|getTimePreference
argument_list|()
argument_list|)
operator|+
literal|"'>"
expr_stmt|;
name|Enumeration
argument_list|<
name|Integer
argument_list|>
name|e
init|=
name|a
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDays
argument_list|()
decl_stmt|;
while|while
condition|(
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|assignedTime
operator|+=
name|Constants
operator|.
name|DAY_NAMES_SHORT
index|[
name|e
operator|.
name|nextElement
argument_list|()
index|]
expr_stmt|;
block|}
name|assignedTime
operator|+=
literal|" "
expr_stmt|;
name|assignedTime
operator|+=
name|a
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getStartTimeHeader
argument_list|()
expr_stmt|;
name|assignedTime
operator|+=
literal|"-"
expr_stmt|;
name|assignedTime
operator|+=
name|a
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getEndTimeHeader
argument_list|()
expr_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
name|assignedTime
operator|+=
literal|"</font>"
expr_stmt|;
name|Iterator
name|it2
init|=
name|a
operator|.
name|getRooms
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Location
name|room
init|=
operator|(
name|Location
operator|)
name|it2
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
name|assignedRoom
operator|+=
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
name|info
operator|.
name|getRoomPreference
argument_list|(
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
operator|+
literal|"'>"
expr_stmt|;
name|assignedRoom
operator|+=
name|room
operator|.
name|getLabel
argument_list|()
expr_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
name|assignedRoom
operator|+=
literal|"</font>"
expr_stmt|;
if|if
condition|(
name|it2
operator|.
name|hasNext
argument_list|()
condition|)
name|assignedRoom
operator|+=
literal|", "
expr_stmt|;
block|}
block|}
name|String
name|onClick
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|isViewableBy
argument_list|(
name|user
argument_list|)
condition|)
block|{
name|onClick
operator|=
literal|"onClick=\"document.location='classDetail.do?cid="
operator|+
name|c
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"';\""
expr_stmt|;
block|}
name|boolean
name|back
init|=
literal|"PreferenceGroup"
operator|.
name|equals
argument_list|(
name|backType
argument_list|)
operator|&&
name|c
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|backId
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasTimetable
condition|)
block|{
name|classTable
operator|.
name|addLine
argument_list|(
name|onClick
argument_list|,
operator|new
name|String
index|[]
block|{
operator|(
name|back
condition|?
literal|"<A name=\"back\"></A>"
else|:
literal|""
operator|)
operator|+
name|c
operator|.
name|getClassLabel
argument_list|()
block|,
operator|(
name|ci
operator|.
name|isLead
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"<IMG border='0' alt='true' align='absmiddle' src='images/tick.gif'>"
else|:
literal|""
operator|)
block|,
name|ci
operator|.
name|getPercentShare
argument_list|()
operator|+
literal|"%"
block|,
name|limitString
block|,
name|managingDept
block|,
name|assignedTime
block|,
name|assignedRoom
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|classTable
operator|.
name|addLine
argument_list|(
name|onClick
argument_list|,
operator|new
name|String
index|[]
block|{
operator|(
name|back
condition|?
literal|"<A name=\"back\"></A>"
else|:
literal|""
operator|)
operator|+
name|c
operator|.
name|getClassLabel
argument_list|()
block|,
operator|(
name|ci
operator|.
name|isLead
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"<IMG border='0' alt='true' align='absmiddle' src='images/tick.gif'>"
else|:
literal|""
operator|)
block|,
name|ci
operator|.
name|getPercentShare
argument_list|()
operator|+
literal|"%"
block|,
name|limitString
block|,
name|managingDept
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|Navigation
operator|.
name|set
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
name|Navigation
operator|.
name|sClassLevel
argument_list|,
name|classIds
argument_list|)
expr_stmt|;
name|String
name|tblData
init|=
name|classTable
operator|.
name|printTable
argument_list|()
decl_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"classTable"
argument_list|,
name|tblData
argument_list|)
expr_stmt|;
block|}
comment|//// Set display distribution to Not Applicable
comment|/* 			request.setAttribute(DistributionPref.DIST_PREF_REQUEST_ATTR,  					"<FONT color=696969>Distribution Preferences Not Applicable</FONT>"); 					*/
name|frm
operator|.
name|setDisplayPrefs
argument_list|(
name|UserData
operator|.
name|getPropertyBoolean
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
literal|"InstructorDetail.distPref"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.displayPrefs"
argument_list|)
argument_list|)
operator|||
operator|(
name|request
operator|.
name|getAttribute
argument_list|(
literal|"showPrefs"
argument_list|)
operator|!=
literal|null
operator|&&
name|request
operator|.
name|getAttribute
argument_list|(
literal|"showPrefs"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
operator|)
condition|)
block|{
name|frm
operator|.
name|setDisplayPrefs
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setPropertyBoolean
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
literal|"InstructorDetail.distPref"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.hidePrefs"
argument_list|)
argument_list|)
operator|||
operator|(
name|request
operator|.
name|getAttribute
argument_list|(
literal|"showPrefs"
argument_list|)
operator|!=
literal|null
operator|&&
name|request
operator|.
name|getAttribute
argument_list|(
literal|"showPrefs"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"false"
argument_list|)
operator|)
condition|)
block|{
name|frm
operator|.
name|setDisplayPrefs
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setPropertyBoolean
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
literal|"InstructorDetail.distPref"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|frm
operator|.
name|isDisplayPrefs
argument_list|()
condition|)
block|{
comment|// Initialize Preferences for initial load
name|Set
name|timePatterns
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|frm
operator|.
name|setAvailableTimePatterns
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|initPrefs
argument_list|(
name|user
argument_list|,
name|frm
argument_list|,
name|inst
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|timePatterns
operator|.
name|add
argument_list|(
operator|new
name|TimePattern
argument_list|(
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//timePatterns.addAll(TimePattern.findApplicable(request,30,false));
comment|// Process Preferences Action
name|processPrefAction
argument_list|(
name|request
argument_list|,
name|frm
argument_list|,
name|errors
argument_list|)
expr_stmt|;
comment|// Generate Time Pattern Grids
name|super
operator|.
name|generateTimePatternGrids
argument_list|(
name|request
argument_list|,
name|frm
argument_list|,
name|inst
argument_list|,
name|timePatterns
argument_list|,
literal|"init"
argument_list|,
name|timeVertical
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|LookupTables
operator|.
name|setupRooms
argument_list|(
name|request
argument_list|,
name|inst
argument_list|)
expr_stmt|;
comment|// Room Prefs
name|LookupTables
operator|.
name|setupBldgs
argument_list|(
name|request
argument_list|,
name|inst
argument_list|)
expr_stmt|;
comment|// Building Prefs
name|LookupTables
operator|.
name|setupRoomFeatures
argument_list|(
name|request
argument_list|,
name|inst
argument_list|)
expr_stmt|;
comment|// Preference Levels
name|LookupTables
operator|.
name|setupRoomGroups
argument_list|(
name|request
argument_list|,
name|inst
argument_list|)
expr_stmt|;
comment|// Room Groups
block|}
name|DepartmentalInstructor
name|previous
init|=
name|inst
operator|.
name|getPreviousDepartmentalInstructor
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
name|user
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|frm
operator|.
name|setPreviousId
argument_list|(
name|previous
operator|==
literal|null
condition|?
literal|null
else|:
name|previous
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|DepartmentalInstructor
name|next
init|=
name|inst
operator|.
name|getNextDepartmentalInstructor
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
name|user
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|frm
operator|.
name|setNextId
argument_list|(
name|next
operator|==
literal|null
condition|?
literal|null
else|:
name|next
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showInstructorDetail"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/** 	 * Loads the non-editable instructor info into the form 	 * @param request 	 * @param frm 	 * @param inst 	 * @param instructorId 	 */
specifier|private
name|void
name|doLoad
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|InstructorEditForm
name|frm
parameter_list|,
name|DepartmentalInstructor
name|inst
parameter_list|,
name|String
name|instructorId
parameter_list|)
block|{
comment|// populate form
name|frm
operator|.
name|setInstructorId
argument_list|(
name|instructorId
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setName
argument_list|(
operator|(
operator|(
name|inst
operator|.
name|getFirstName
argument_list|()
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|inst
operator|.
name|getFirstName
argument_list|()
argument_list|,
literal|"-"
operator|.
name|toCharArray
argument_list|()
argument_list|)
operator|)
operator|+
literal|" "
operator|+
operator|(
operator|(
name|inst
operator|.
name|getMiddleName
argument_list|()
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|inst
operator|.
name|getMiddleName
argument_list|()
argument_list|,
literal|"-"
operator|.
name|toCharArray
argument_list|()
argument_list|)
operator|)
operator|+
literal|" "
operator|+
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|inst
operator|.
name|getLastName
argument_list|()
argument_list|,
literal|"-"
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setEmail
argument_list|(
name|inst
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|puid
init|=
name|inst
operator|.
name|getExternalUniqueId
argument_list|()
decl_stmt|;
if|if
condition|(
name|puid
operator|!=
literal|null
condition|)
block|{
name|frm
operator|.
name|setPuId
argument_list|(
name|puid
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|inst
operator|.
name|getPositionType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|frm
operator|.
name|setPosType
argument_list|(
name|inst
operator|.
name|getPositionType
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|inst
operator|.
name|getCareerAcct
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|frm
operator|.
name|setCareerAcct
argument_list|(
name|inst
operator|.
name|getCareerAcct
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|puid
operator|!=
literal|null
operator|&&
name|User
operator|.
name|canIdentify
argument_list|()
condition|)
block|{
name|User
name|user
init|=
name|User
operator|.
name|identify
argument_list|(
name|puid
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
operator|&&
name|user
operator|.
name|getLogin
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|frm
operator|.
name|setCareerAcct
argument_list|(
name|user
operator|.
name|getLogin
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|inst
operator|.
name|getNote
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|frm
operator|.
name|setNote
argument_list|(
name|inst
operator|.
name|getNote
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|frm
operator|.
name|setEditable
argument_list|(
name|inst
operator|.
name|isEditableBy
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setLimitedEditable
argument_list|(
name|frm
operator|.
name|isEditable
argument_list|()
operator|||
name|inst
operator|.
name|getDepartment
argument_list|()
operator|.
name|isLimitedEditableBy
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|frm
operator|.
name|isEditable
argument_list|()
operator|&&
name|user
operator|.
name|getRole
argument_list|()
operator|.
name|equals
argument_list|(
name|Roles
operator|.
name|EXAM_MGR_ROLE
argument_list|)
condition|)
block|{
name|frm
operator|.
name|setLimitedEditable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setEditable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|DEPT_ID_ATTR_NAME
argument_list|,
name|inst
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check column ordering - default to name
name|String
name|orderStr
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"order"
argument_list|)
decl_stmt|;
name|int
name|cols
init|=
literal|2
decl_stmt|;
name|int
name|order
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|orderStr
operator|!=
literal|null
operator|&&
name|orderStr
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
try|try
block|{
name|order
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|orderStr
argument_list|)
expr_stmt|;
if|if
condition|(
name|Math
operator|.
name|abs
argument_list|(
name|order
argument_list|)
operator|>
name|cols
condition|)
name|order
operator|=
literal|1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|order
operator|=
literal|1
expr_stmt|;
block|}
block|}
name|frm
operator|.
name|setIgnoreDist
argument_list|(
name|inst
operator|.
name|isIgnoreToFar
argument_list|()
operator|==
literal|null
condition|?
literal|false
else|:
name|inst
operator|.
name|isIgnoreToFar
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|designatorTable
init|=
operator|new
name|DesignatorListBuilder
argument_list|()
operator|.
name|htmlTableForInstructor
argument_list|(
name|request
argument_list|,
name|instructorId
argument_list|,
name|order
argument_list|)
decl_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"designatorList"
argument_list|,
name|designatorTable
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

