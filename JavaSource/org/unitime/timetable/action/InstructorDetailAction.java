begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|WebTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|WebTable
operator|.
name|WebTableLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|messages
operator|.
name|CourseMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|CommonValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|UserProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|InstructorEditForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalUidLookup
operator|.
name|UserInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructorAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Meeting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Preference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Event
operator|.
name|MultiMeeting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|ClassComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|ClassInstructorComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentalInstructorDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|EventDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ClassAssignmentProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|SolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|interactive
operator|.
name|ClassAssignmentDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|service
operator|.
name|AssignmentService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|service
operator|.
name|SolverService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|DefaultRoomAvailabilityService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|LookupTables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|NameFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|RoomAvailability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|BackTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|Navigation
import|;
end_import

begin_comment
comment|/**   * MyEclipse Struts  * Creation date: 07-18-2006  *   * XDoclet definition:  * @struts.action path="/instructorDetail" name="instructorEditForm" input="/user/instructorDetail.jsp" scope="request"  *  * @author Tomas Muller, Zuzana Mullerova, Stephanie Schluttenhofer  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"/instructorDetail"
argument_list|)
specifier|public
class|class
name|InstructorDetailAction
extends|extends
name|PreferencesAction
block|{
specifier|protected
specifier|final
specifier|static
name|CourseMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|CourseMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|GwtConstants
name|CONST
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Autowired
name|SessionContext
name|sessionContext
decl_stmt|;
annotation|@
name|Autowired
name|AssignmentService
argument_list|<
name|ClassAssignmentProxy
argument_list|>
name|classAssignmentService
decl_stmt|;
annotation|@
name|Autowired
name|SolverService
argument_list|<
name|SolverProxy
argument_list|>
name|courseTimetablingSolverService
decl_stmt|;
comment|// --------------------------------------------------------- Instance Variables
comment|// --------------------------------------------------------- Methods
comment|/**  	 * Method execute 	 * @param mapping 	 * @param form 	 * @param request 	 * @param response 	 * @return ActionForward 	 */
specifier|public
name|ActionForward
name|execute
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
comment|// Set common lookup tables
name|super
operator|.
name|execute
argument_list|(
name|mapping
argument_list|,
name|form
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|InstructorEditForm
name|frm
init|=
operator|(
name|InstructorEditForm
operator|)
name|form
decl_stmt|;
comment|//	        MessageResources rsc = getResources(request);
name|ActionMessages
name|errors
init|=
operator|new
name|ActionMessages
argument_list|()
decl_stmt|;
comment|//Read parameters
name|String
name|instructorId
init|=
operator|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"instructorId"
argument_list|)
operator|==
literal|null
operator|)
condition|?
operator|(
name|request
operator|.
name|getAttribute
argument_list|(
literal|"instructorId"
argument_list|)
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|request
operator|.
name|getAttribute
argument_list|(
literal|"instructorId"
argument_list|)
operator|.
name|toString
argument_list|()
else|:
name|request
operator|.
name|getParameter
argument_list|(
literal|"instructorId"
argument_list|)
decl_stmt|;
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|instructorId
argument_list|,
literal|"DepartmentalInstructor"
argument_list|,
name|Right
operator|.
name|InstructorDetail
argument_list|)
expr_stmt|;
name|String
name|op
init|=
name|frm
operator|.
name|getOp
argument_list|()
decl_stmt|;
comment|// boolean timeVertical = CommonValues.VerticalGrid.eq(sessionContext.getUser().getProperty(UserProperty.GridOrientation));
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"op2"
argument_list|)
operator|!=
literal|null
operator|&&
name|request
operator|.
name|getParameter
argument_list|(
literal|"op2"
argument_list|)
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|op
operator|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"op2"
argument_list|)
expr_stmt|;
comment|//Check op exists
if|if
condition|(
name|op
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Null Operation not supported."
argument_list|)
throw|;
comment|// Read instructor id from form
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionEditInstructor
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionEditInstructorPreferences
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionEditInstructorAssignmentPreferences
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionBackToInstructors
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionDisplayInstructorPreferences
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionNextInstructor
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionPreviousInstructor
argument_list|()
argument_list|)
condition|)
block|{
name|instructorId
operator|=
name|frm
operator|.
name|getInstructorId
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|frm
operator|.
name|reset
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
name|Debug
operator|.
name|debug
argument_list|(
literal|"op: "
operator|+
name|op
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"instructor: "
operator|+
name|instructorId
argument_list|)
expr_stmt|;
comment|//Check instructor exists
if|if
condition|(
name|instructorId
operator|==
literal|null
operator|||
name|instructorId
operator|.
name|trim
argument_list|()
operator|==
literal|""
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Instructor Info not supplied."
argument_list|)
throw|;
comment|// Cancel - Go back to Instructors List Screen
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionBackToInstructors
argument_list|()
argument_list|)
operator|&&
name|instructorId
operator|!=
literal|null
operator|&&
name|instructorId
operator|.
name|trim
argument_list|()
operator|!=
literal|""
condition|)
block|{
name|response
operator|.
name|sendRedirect
argument_list|(
name|response
operator|.
name|encodeURL
argument_list|(
literal|"instructorList.do"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// If subpart id is not null - load subpart info
name|DepartmentalInstructorDAO
name|idao
init|=
operator|new
name|DepartmentalInstructorDAO
argument_list|()
decl_stmt|;
name|DepartmentalInstructor
name|inst
init|=
name|idao
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|instructorId
argument_list|)
argument_list|)
decl_stmt|;
name|LookupTables
operator|.
name|setupInstructorDistribTypes
argument_list|(
name|request
argument_list|,
name|sessionContext
argument_list|,
name|inst
argument_list|)
expr_stmt|;
comment|//Edit Information - Redirect to info edit screen
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionEditInstructor
argument_list|()
argument_list|)
operator|&&
name|instructorId
operator|!=
literal|null
operator|&&
name|instructorId
operator|.
name|trim
argument_list|()
operator|!=
literal|""
condition|)
block|{
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|instructorId
argument_list|,
literal|"DepartmentalInstructor"
argument_list|,
name|Right
operator|.
name|InstructorEdit
argument_list|)
expr_stmt|;
name|response
operator|.
name|sendRedirect
argument_list|(
name|response
operator|.
name|encodeURL
argument_list|(
literal|"instructorInfoEdit.do?instructorId="
operator|+
name|instructorId
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// Edit Preference - Redirect to prefs edit screen
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionEditInstructorPreferences
argument_list|()
argument_list|)
operator|&&
name|instructorId
operator|!=
literal|null
operator|&&
name|instructorId
operator|.
name|trim
argument_list|()
operator|!=
literal|""
condition|)
block|{
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|instructorId
argument_list|,
literal|"DepartmentalInstructor"
argument_list|,
name|Right
operator|.
name|InstructorPreferences
argument_list|)
expr_stmt|;
name|response
operator|.
name|sendRedirect
argument_list|(
name|response
operator|.
name|encodeURL
argument_list|(
literal|"instructorPrefEdit.do?instructorId="
operator|+
name|instructorId
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionEditInstructorAssignmentPreferences
argument_list|()
argument_list|)
operator|&&
name|instructorId
operator|!=
literal|null
operator|&&
operator|!
name|instructorId
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|inst
operator|.
name|getDepartment
argument_list|()
argument_list|,
name|Right
operator|.
name|InstructorAssignmentPreferences
argument_list|)
expr_stmt|;
name|response
operator|.
name|sendRedirect
argument_list|(
name|response
operator|.
name|encodeURL
argument_list|(
literal|"instructorAssignmentPref.do?instructorId="
operator|+
name|instructorId
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionNextInstructor
argument_list|()
argument_list|)
condition|)
block|{
name|response
operator|.
name|sendRedirect
argument_list|(
name|response
operator|.
name|encodeURL
argument_list|(
literal|"instructorDetail.do?instructorId="
operator|+
name|frm
operator|.
name|getNextId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionPreviousInstructor
argument_list|()
argument_list|)
condition|)
block|{
name|response
operator|.
name|sendRedirect
argument_list|(
name|response
operator|.
name|encodeURL
argument_list|(
literal|"instructorDetail.do?instructorId="
operator|+
name|frm
operator|.
name|getPreviousId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// Load form attributes that are constant
name|doLoad
argument_list|(
name|request
argument_list|,
name|frm
argument_list|,
name|inst
argument_list|,
name|instructorId
argument_list|)
expr_stmt|;
name|BackTracker
operator|.
name|markForBack
argument_list|(
name|request
argument_list|,
literal|"instructorDetail.do?instructorId="
operator|+
name|instructorId
argument_list|,
name|MSG
operator|.
name|backInstructor
argument_list|(
name|frm
operator|.
name|getName
argument_list|()
operator|==
literal|null
condition|?
literal|"null"
else|:
name|frm
operator|.
name|getName
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//load class assignments
name|Set
name|allClasses
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|DepartmentalInstructor
operator|.
name|getAllForInstructor
argument_list|(
name|inst
argument_list|,
name|inst
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentalInstructor
name|di
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|allClasses
operator|.
name|addAll
argument_list|(
name|di
operator|.
name|getClasses
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|allClasses
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|boolean
name|hasTimetable
init|=
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|ClassAssignments
argument_list|)
decl_stmt|;
name|WebTable
name|classTable
init|=
operator|(
name|hasTimetable
condition|?
operator|new
name|WebTable
argument_list|(
literal|10
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|MSG
operator|.
name|columnClass
argument_list|()
block|,
name|MSG
operator|.
name|columnInstructorCheckConflicts
argument_list|()
block|,
name|MSG
operator|.
name|columnInstructorShare
argument_list|()
block|,
name|MSG
operator|.
name|columnTeachingResponsibility
argument_list|()
block|,
name|MSG
operator|.
name|columnLimit
argument_list|()
block|,
name|MSG
operator|.
name|columnEnrollment
argument_list|()
block|,
name|MSG
operator|.
name|columnManager
argument_list|()
block|,
name|MSG
operator|.
name|columnAssignedTime
argument_list|()
block|,
name|MSG
operator|.
name|columnAssignedDatePattern
argument_list|()
block|,
name|MSG
operator|.
name|columnAssignedRoom
argument_list|()
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
literal|null
argument_list|)
else|:
operator|new
name|WebTable
argument_list|(
literal|6
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|MSG
operator|.
name|columnClass
argument_list|()
block|,
name|MSG
operator|.
name|columnInstructorCheckConflicts
argument_list|()
block|,
name|MSG
operator|.
name|columnInstructorShare
argument_list|()
block|,
name|MSG
operator|.
name|columnTeachingResponsibility
argument_list|()
block|,
name|MSG
operator|.
name|columnLimit
argument_list|()
block|,
name|MSG
operator|.
name|columnManager
argument_list|()
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
literal|null
argument_list|)
operator|)
decl_stmt|;
name|String
name|backType
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"backType"
argument_list|)
decl_stmt|;
name|String
name|backId
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"backId"
argument_list|)
decl_stmt|;
name|TreeSet
name|classes
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|ClassInstructorComparator
argument_list|(
operator|new
name|ClassComparator
argument_list|(
name|ClassComparator
operator|.
name|COMPARE_BY_LABEL
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|classes
operator|.
name|addAll
argument_list|(
name|allClasses
argument_list|)
expr_stmt|;
name|Vector
name|classIds
init|=
operator|new
name|Vector
argument_list|(
name|classes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|//Get class assignment information
for|for
control|(
name|Iterator
name|iterInst
init|=
name|classes
operator|.
name|iterator
argument_list|()
init|;
name|iterInst
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|ci
init|=
operator|(
name|ClassInstructor
operator|)
name|iterInst
operator|.
name|next
argument_list|()
decl_stmt|;
name|Class_
name|c
init|=
name|ci
operator|.
name|getClassInstructing
argument_list|()
decl_stmt|;
name|classIds
operator|.
name|add
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|limitString
init|=
literal|""
decl_stmt|;
if|if
condition|(
operator|!
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|isUnlimitedEnrollment
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
if|if
condition|(
name|c
operator|.
name|getExpectedCapacity
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|limitString
operator|=
name|c
operator|.
name|getExpectedCapacity
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getMaxExpectedCapacity
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|c
operator|.
name|getMaxExpectedCapacity
argument_list|()
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getExpectedCapacity
argument_list|()
argument_list|)
condition|)
block|{
name|limitString
operator|=
name|limitString
operator|+
literal|"-"
operator|+
name|c
operator|.
name|getMaxExpectedCapacity
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|limitString
operator|=
literal|"0"
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getMaxExpectedCapacity
argument_list|()
operator|!=
literal|null
operator|&&
name|c
operator|.
name|getMaxExpectedCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|limitString
operator|=
name|limitString
operator|+
literal|"-"
operator|+
name|c
operator|.
name|getMaxExpectedCapacity
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|String
name|enrollmentString
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|enrollmentString
operator|=
name|c
operator|.
name|getEnrollment
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|enrollmentString
operator|=
literal|"0"
expr_stmt|;
block|}
name|String
name|managingDept
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getManagingDept
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Department
name|d
init|=
name|c
operator|.
name|getManagingDept
argument_list|()
decl_stmt|;
name|managingDept
operator|=
name|d
operator|.
name|getManagingDeptAbbv
argument_list|()
expr_stmt|;
block|}
name|String
name|assignedTime
init|=
literal|""
decl_stmt|;
name|String
name|assignedDate
init|=
literal|""
decl_stmt|;
name|String
name|assignedRoom
init|=
literal|""
decl_stmt|;
name|ClassAssignmentDetails
name|ca
init|=
name|ClassAssignmentDetails
operator|.
name|createClassAssignmentDetails
argument_list|(
name|sessionContext
argument_list|,
name|courseTimetablingSolverService
operator|.
name|getSolver
argument_list|()
argument_list|,
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|ca
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|Assignment
name|a
init|=
name|classAssignmentService
operator|.
name|getAssignment
argument_list|()
operator|.
name|getAssignment
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|ca
operator|=
name|ClassAssignmentDetails
operator|.
name|createClassAssignmentDetailsFromAssignment
argument_list|(
name|sessionContext
argument_list|,
name|a
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
if|if
condition|(
name|ca
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ca
operator|.
name|getAssignedTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|assignedTime
operator|=
name|ca
operator|.
name|getAssignedTime
argument_list|()
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assignedDate
operator|=
name|ca
operator|.
name|getAssignedTime
argument_list|()
operator|.
name|getDatePatternHtml
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ca
operator|.
name|getAssignedRoom
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ca
operator|.
name|getAssignedRoom
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|assignedRoom
operator|+=
literal|", "
expr_stmt|;
name|assignedRoom
operator|+=
name|ca
operator|.
name|getAssignedRoom
argument_list|()
index|[
name|i
index|]
operator|.
name|toHtml
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|String
name|onClick
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|c
argument_list|,
name|Right
operator|.
name|ClassDetail
argument_list|)
condition|)
block|{
name|onClick
operator|=
literal|"onClick=\"document.location='classDetail.do?cid="
operator|+
name|c
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"';\""
expr_stmt|;
block|}
name|boolean
name|back
init|=
literal|"PreferenceGroup"
operator|.
name|equals
argument_list|(
name|backType
argument_list|)
operator|&&
name|c
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|backId
argument_list|)
decl_stmt|;
name|String
name|responsibility
init|=
operator|(
name|ci
operator|.
name|getResponsibility
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|ci
operator|.
name|getResponsibility
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|)
decl_stmt|;
name|WebTableLine
name|line
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hasTimetable
condition|)
block|{
name|line
operator|=
name|classTable
operator|.
name|addLine
argument_list|(
name|onClick
argument_list|,
operator|new
name|String
index|[]
block|{
operator|(
name|back
condition|?
literal|"<A name=\"back\"></A>"
else|:
literal|""
operator|)
operator|+
name|c
operator|.
name|getClassLabel
argument_list|()
block|,
operator|(
name|ci
operator|.
name|isLead
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"<IMG border='0' alt='true' align='absmiddle' src='images/accept.png'>"
else|:
literal|""
operator|)
block|,
name|ci
operator|.
name|getPercentShare
argument_list|()
operator|+
literal|"%"
block|,
name|responsibility
block|,
name|limitString
block|,
name|enrollmentString
block|,
name|managingDept
block|,
name|assignedTime
block|,
name|assignedDate
block|,
name|assignedRoom
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|line
operator|=
name|classTable
operator|.
name|addLine
argument_list|(
name|onClick
argument_list|,
operator|new
name|String
index|[]
block|{
operator|(
name|back
condition|?
literal|"<A name=\"back\"></A>"
else|:
literal|""
operator|)
operator|+
name|c
operator|.
name|getClassLabel
argument_list|()
block|,
operator|(
name|ci
operator|.
name|isLead
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"<IMG border='0' alt='true' align='absmiddle' src='images/accept.png'>"
else|:
literal|""
operator|)
block|,
name|ci
operator|.
name|getPercentShare
argument_list|()
operator|+
literal|"%"
block|,
name|responsibility
block|,
name|limitString
block|,
name|managingDept
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
name|line
operator|.
name|setStyle
argument_list|(
literal|"color: gray; font-style: italic;"
argument_list|)
expr_stmt|;
name|line
operator|.
name|setTitle
argument_list|(
name|MSG
operator|.
name|classNoteCancelled
argument_list|(
name|c
operator|.
name|getClassLabel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Navigation
operator|.
name|set
argument_list|(
name|sessionContext
argument_list|,
name|Navigation
operator|.
name|sClassLevel
argument_list|,
name|classIds
argument_list|)
expr_stmt|;
name|String
name|tblData
init|=
name|classTable
operator|.
name|printTable
argument_list|()
decl_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"classTable"
argument_list|,
name|tblData
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ApplicationProperty
operator|.
name|RoomAvailabilityIncludeInstructors
operator|.
name|isTrue
argument_list|()
operator|&&
name|inst
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|inst
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|RoomAvailability
operator|.
name|getInstance
argument_list|()
operator|!=
literal|null
operator|&&
name|RoomAvailability
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|DefaultRoomAvailabilityService
condition|)
block|{
name|WebTable
operator|.
name|setOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"instructorUnavailability.ord"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"iuord"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|WebTable
name|eventTable
init|=
operator|new
name|WebTable
argument_list|(
literal|5
argument_list|,
literal|"Instructor Unavailability"
argument_list|,
literal|"instructorDetail.do?instructorId="
operator|+
name|frm
operator|.
name|getInstructorId
argument_list|()
operator|+
literal|"&iuord=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Event"
block|,
literal|"Type"
block|,
literal|"Date"
block|,
literal|"Time"
block|,
literal|"Room"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Formats
operator|.
name|Format
argument_list|<
name|Date
argument_list|>
name|dfShort
init|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|DATE_EVENT_SHORT
argument_list|)
decl_stmt|;
name|Formats
operator|.
name|Format
argument_list|<
name|Date
argument_list|>
name|dfLong
init|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|DATE_EVENT_LONG
argument_list|)
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|EventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Event
argument_list|,
name|Set
argument_list|<
name|Meeting
argument_list|>
argument_list|>
name|unavailabilities
init|=
operator|new
name|HashMap
argument_list|<
name|Event
argument_list|,
name|Set
argument_list|<
name|Meeting
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Meeting
name|meeting
range|:
operator|(
name|List
argument_list|<
name|Meeting
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct m from Event e inner join e.meetings m left outer join e.additionalContacts c, Session s "
operator|+
literal|"where e.class in (CourseEvent, SpecialEvent, UnavailableEvent) and m.meetingDate>= s.eventBeginDate and m.meetingDate<= s.eventEndDate "
operator|+
literal|"and s.uniqueId = :sessionId and (e.mainContact.externalUniqueId = :user or c.externalUniqueId = :user) and m.approvalStatus = 1"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"user"
argument_list|,
name|inst
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|Meeting
argument_list|>
name|meetings
init|=
name|unavailabilities
operator|.
name|get
argument_list|(
name|meeting
operator|.
name|getEvent
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|meetings
operator|==
literal|null
condition|)
block|{
name|meetings
operator|=
operator|new
name|HashSet
argument_list|<
name|Meeting
argument_list|>
argument_list|()
expr_stmt|;
name|unavailabilities
operator|.
name|put
argument_list|(
name|meeting
operator|.
name|getEvent
argument_list|()
argument_list|,
name|meetings
argument_list|)
expr_stmt|;
block|}
name|meetings
operator|.
name|add
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Event
name|event
range|:
operator|new
name|TreeSet
argument_list|<
name|Event
argument_list|>
argument_list|(
name|unavailabilities
operator|.
name|keySet
argument_list|()
argument_list|)
control|)
block|{
for|for
control|(
name|MultiMeeting
name|m
range|:
name|Event
operator|.
name|getMultiMeetings
argument_list|(
name|unavailabilities
operator|.
name|get
argument_list|(
name|event
argument_list|)
argument_list|)
control|)
block|{
name|String
name|date
init|=
name|m
operator|.
name|getDays
argument_list|()
operator|+
literal|" "
operator|+
operator|(
name|m
operator|.
name|getMeetings
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|?
name|dfLong
operator|.
name|format
argument_list|(
name|m
operator|.
name|getMeetings
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
else|:
name|dfShort
operator|.
name|format
argument_list|(
name|m
operator|.
name|getMeetings
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
operator|+
literal|" - "
operator|+
name|dfLong
operator|.
name|format
argument_list|(
name|m
operator|.
name|getMeetings
argument_list|()
operator|.
name|last
argument_list|()
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
operator|)
decl_stmt|;
name|String
name|time
init|=
name|m
operator|.
name|getMeetings
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|startTime
argument_list|()
operator|+
literal|" - "
operator|+
name|m
operator|.
name|getMeetings
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|stopTime
argument_list|()
decl_stmt|;
name|String
name|room
init|=
operator|(
name|m
operator|.
name|getMeetings
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|m
operator|.
name|getMeetings
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|.
name|getLabelWithHint
argument_list|()
operator|)
decl_stmt|;
name|eventTable
operator|.
name|addLine
argument_list|(
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|event
argument_list|,
name|Right
operator|.
name|EventDetail
argument_list|)
condition|?
literal|"onClick=\"showGwtDialog('Event Detail', 'gwt.jsp?page=events&menu=hide#event="
operator|+
name|event
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"','900','85%');\""
else|:
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|event
operator|.
name|getEventName
argument_list|()
block|,
name|event
operator|.
name|getEventTypeAbbv
argument_list|()
block|,
name|date
block|,
name|time
block|,
name|room
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|event
operator|.
name|getEventName
argument_list|()
block|,
name|event
operator|.
name|getEventType
argument_list|()
block|,
name|m
operator|.
name|getMeetings
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|getMeetingDate
argument_list|()
block|,
name|m
operator|.
name|getMeetings
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|getStartPeriod
argument_list|()
block|,
name|room
block|}
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|eventTable
operator|.
name|getLines
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
literal|"eventTable"
argument_list|,
name|eventTable
operator|.
name|printTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"instructorUnavailability.ord"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//// Set display distribution to Not Applicable
comment|/* 			request.setAttribute(DistributionPref.DIST_PREF_REQUEST_ATTR,  					"<FONT color=696969>Distribution Preferences Not Applicable</FONT>"); 					*/
name|frm
operator|.
name|setDisplayPrefs
argument_list|(
name|CommonValues
operator|.
name|Yes
operator|.
name|eq
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
name|UserProperty
operator|.
name|DispInstructorPrefs
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionDisplayInstructorPreferences
argument_list|()
argument_list|)
operator|||
literal|"true"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"showPrefs"
argument_list|)
argument_list|)
condition|)
block|{
name|frm
operator|.
name|setDisplayPrefs
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
name|UserProperty
operator|.
name|DispInstructorPrefs
argument_list|,
name|CommonValues
operator|.
name|Yes
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionHideInstructorPreferences
argument_list|()
argument_list|)
operator|||
literal|"false"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"showPrefs"
argument_list|)
argument_list|)
condition|)
block|{
name|frm
operator|.
name|setDisplayPrefs
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
name|UserProperty
operator|.
name|DispInstructorPrefs
argument_list|,
name|CommonValues
operator|.
name|No
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|frm
operator|.
name|isDisplayPrefs
argument_list|()
condition|)
block|{
comment|// Initialize Preferences for initial load
name|Set
name|timePatterns
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|frm
operator|.
name|setAvailableTimePatterns
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|initPrefs
argument_list|(
name|frm
argument_list|,
name|inst
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|timePatterns
operator|.
name|add
argument_list|(
operator|new
name|TimePattern
argument_list|(
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//timePatterns.addAll(TimePattern.findApplicable(request,30,false));
comment|// Process Preferences Action
name|processPrefAction
argument_list|(
name|request
argument_list|,
name|frm
argument_list|,
name|errors
argument_list|)
expr_stmt|;
comment|// Generate Time Pattern Grids
comment|//super.generateTimePatternGrids(request, frm, inst, timePatterns, "init", timeVertical, false, null);
for|for
control|(
name|Preference
name|pref
range|:
name|inst
operator|.
name|getPreferences
argument_list|()
control|)
block|{
if|if
condition|(
name|pref
operator|instanceof
name|TimePref
condition|)
block|{
name|frm
operator|.
name|setAvailability
argument_list|(
operator|(
operator|(
name|TimePref
operator|)
name|pref
operator|)
operator|.
name|getPreference
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|LookupTables
operator|.
name|setupRooms
argument_list|(
name|request
argument_list|,
name|inst
argument_list|)
expr_stmt|;
comment|// Room Prefs
name|LookupTables
operator|.
name|setupBldgs
argument_list|(
name|request
argument_list|,
name|inst
argument_list|)
expr_stmt|;
comment|// Building Prefs
name|LookupTables
operator|.
name|setupRoomFeatures
argument_list|(
name|request
argument_list|,
name|inst
argument_list|)
expr_stmt|;
comment|// Preference Levels
name|LookupTables
operator|.
name|setupRoomGroups
argument_list|(
name|request
argument_list|,
name|inst
argument_list|)
expr_stmt|;
comment|// Room Groups
name|LookupTables
operator|.
name|setupCourses
argument_list|(
name|request
argument_list|,
name|inst
argument_list|)
expr_stmt|;
comment|// Courses
block|}
name|frm
operator|.
name|setMaxLoad
argument_list|(
name|inst
operator|.
name|getMaxLoad
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|Formats
operator|.
name|getNumberFormat
argument_list|(
literal|"0.##"
argument_list|)
operator|.
name|format
argument_list|(
name|inst
operator|.
name|getMaxLoad
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setTeachingPreference
argument_list|(
name|inst
operator|.
name|getTeachingPreference
argument_list|()
operator|==
literal|null
condition|?
name|PreferenceLevel
operator|.
name|sProhibited
else|:
name|inst
operator|.
name|getTeachingPreference
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|inst
operator|.
name|getMaxLoad
argument_list|()
operator|==
literal|null
operator|&&
operator|(
name|inst
operator|.
name|getTeachingPreference
argument_list|()
operator|==
literal|null
operator|||
name|inst
operator|.
name|getTeachingPreference
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
operator|)
condition|)
name|frm
operator|.
name|setTeachingPreference
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|frm
operator|.
name|clearAttributes
argument_list|()
expr_stmt|;
for|for
control|(
name|InstructorAttribute
name|attribute
range|:
name|inst
operator|.
name|getAttributes
argument_list|()
control|)
name|frm
operator|.
name|setAttribute
argument_list|(
name|attribute
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LookupTables
operator|.
name|setupInstructorAttributeTypes
argument_list|(
name|request
argument_list|,
name|inst
argument_list|)
expr_stmt|;
name|LookupTables
operator|.
name|setupInstructorAttributes
argument_list|(
name|request
argument_list|,
name|inst
argument_list|)
expr_stmt|;
name|DepartmentalInstructor
name|previous
init|=
name|inst
operator|.
name|getPreviousDepartmentalInstructor
argument_list|(
name|sessionContext
argument_list|,
name|Right
operator|.
name|InstructorDetail
argument_list|)
decl_stmt|;
name|frm
operator|.
name|setPreviousId
argument_list|(
name|previous
operator|==
literal|null
condition|?
literal|null
else|:
name|previous
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|DepartmentalInstructor
name|next
init|=
name|inst
operator|.
name|getNextDepartmentalInstructor
argument_list|(
name|sessionContext
argument_list|,
name|Right
operator|.
name|InstructorDetail
argument_list|)
decl_stmt|;
name|frm
operator|.
name|setNextId
argument_list|(
name|next
operator|==
literal|null
condition|?
literal|null
else|:
name|next
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showInstructorDetail"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/** 	 * Loads the non-editable instructor info into the form 	 * @param request 	 * @param frm 	 * @param inst 	 * @param instructorId 	 */
specifier|private
name|void
name|doLoad
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|InstructorEditForm
name|frm
parameter_list|,
name|DepartmentalInstructor
name|inst
parameter_list|,
name|String
name|instructorId
parameter_list|)
block|{
comment|// populate form
name|frm
operator|.
name|setInstructorId
argument_list|(
name|instructorId
argument_list|)
expr_stmt|;
name|NameFormat
name|nameFormat
init|=
name|NameFormat
operator|.
name|fromReference
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
name|UserProperty
operator|.
name|NameFormat
argument_list|)
argument_list|)
decl_stmt|;
name|frm
operator|.
name|setName
argument_list|(
name|nameFormat
operator|.
name|format
argument_list|(
name|inst
argument_list|)
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setEmail
argument_list|(
name|inst
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|puid
init|=
name|inst
operator|.
name|getExternalUniqueId
argument_list|()
decl_stmt|;
if|if
condition|(
name|puid
operator|!=
literal|null
condition|)
block|{
name|frm
operator|.
name|setPuId
argument_list|(
name|puid
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|inst
operator|.
name|getPositionType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|frm
operator|.
name|setPosType
argument_list|(
name|inst
operator|.
name|getPositionType
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|inst
operator|.
name|getCareerAcct
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|frm
operator|.
name|setCareerAcct
argument_list|(
name|inst
operator|.
name|getCareerAcct
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|DepartmentalInstructor
operator|.
name|canLookupInstructor
argument_list|()
condition|)
block|{
try|try
block|{
name|UserInfo
name|user
init|=
name|DepartmentalInstructor
operator|.
name|lookupInstructor
argument_list|(
name|puid
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
operator|&&
name|user
operator|.
name|getUserName
argument_list|()
operator|!=
literal|null
condition|)
name|frm
operator|.
name|setCareerAcct
argument_list|(
name|user
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
if|if
condition|(
name|inst
operator|.
name|getNote
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|frm
operator|.
name|setNote
argument_list|(
name|inst
operator|.
name|getNote
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|DEPT_ID_ATTR_NAME
argument_list|,
name|inst
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check column ordering - default to name
name|String
name|orderStr
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"order"
argument_list|)
decl_stmt|;
name|int
name|cols
init|=
literal|2
decl_stmt|;
name|int
name|order
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|orderStr
operator|!=
literal|null
operator|&&
name|orderStr
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
try|try
block|{
name|order
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|orderStr
argument_list|)
expr_stmt|;
if|if
condition|(
name|Math
operator|.
name|abs
argument_list|(
name|order
argument_list|)
operator|>
name|cols
condition|)
name|order
operator|=
literal|1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|order
operator|=
literal|1
expr_stmt|;
block|}
block|}
name|frm
operator|.
name|setIgnoreDist
argument_list|(
name|inst
operator|.
name|isIgnoreToFar
argument_list|()
operator|==
literal|null
condition|?
literal|false
else|:
name|inst
operator|.
name|isIgnoreToFar
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

