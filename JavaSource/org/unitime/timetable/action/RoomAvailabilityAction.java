begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|PatternSyntaxException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|MultiComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|Web
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|WebTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|RoomAvailabilityForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|RoomAvailabilityInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|RoomAvailabilityInterface
operator|.
name|TimeBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExamDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|WebSolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ExamAssignmentProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|RoomAvailability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|PdfWebTable
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|RoomAvailabilityAction
extends|extends
name|Action
block|{
specifier|public
name|ActionForward
name|execute
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
name|RoomAvailabilityForm
name|myForm
init|=
operator|(
name|RoomAvailabilityForm
operator|)
name|form
decl_stmt|;
comment|// Check Access
if|if
condition|(
operator|!
name|Web
operator|.
name|isLoggedIn
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Access Denied."
argument_list|)
throw|;
block|}
name|String
name|op
init|=
operator|(
name|myForm
operator|.
name|getOp
argument_list|()
operator|!=
literal|null
condition|?
name|myForm
operator|.
name|getOp
argument_list|()
else|:
name|request
operator|.
name|getParameter
argument_list|(
literal|"op"
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
literal|"Export PDF"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
literal|"Apply"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|myForm
operator|.
name|save
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"Refresh"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|myForm
operator|.
name|reset
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
name|myForm
operator|.
name|load
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|myForm
operator|.
name|getExamType
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|Date
index|[]
name|bounds
init|=
name|ExamPeriod
operator|.
name|getBounds
argument_list|(
name|session
argument_list|,
name|myForm
operator|.
name|getExamType
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|exclude
init|=
operator|(
name|myForm
operator|.
name|getIncludeExams
argument_list|()
condition|?
literal|null
else|:
operator|(
name|myForm
operator|.
name|getExamType
argument_list|()
operator|==
name|Exam
operator|.
name|sExamTypeFinal
condition|?
name|RoomAvailabilityInterface
operator|.
name|sFinalExamType
else|:
name|RoomAvailabilityInterface
operator|.
name|sMidtermExamType
operator|)
operator|)
decl_stmt|;
if|if
condition|(
name|bounds
operator|!=
literal|null
operator|&&
name|RoomAvailability
operator|.
name|getInstance
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|RoomAvailability
operator|.
name|getInstance
argument_list|()
operator|.
name|activate
argument_list|(
name|session
argument_list|,
name|bounds
index|[
literal|0
index|]
argument_list|,
name|bounds
index|[
literal|1
index|]
argument_list|,
name|exclude
argument_list|,
literal|"Refresh"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|WebTable
operator|.
name|setOrder
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
operator|(
name|myForm
operator|.
name|getCompare
argument_list|()
condition|?
literal|"roomAvailability.cord"
else|:
literal|"roomAvailability.ord"
operator|)
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"ord"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|WebTable
name|table
init|=
operator|(
name|myForm
operator|.
name|getCompare
argument_list|()
condition|?
name|getCompareTable
argument_list|(
name|request
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|true
argument_list|,
name|myForm
argument_list|)
else|:
name|getTable
argument_list|(
name|request
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|true
argument_list|,
name|myForm
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
literal|"Export PDF"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|&&
name|table
operator|!=
literal|null
condition|)
block|{
name|PdfWebTable
name|pdfTable
init|=
operator|(
name|myForm
operator|.
name|getCompare
argument_list|()
condition|?
name|getCompareTable
argument_list|(
name|request
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|false
argument_list|,
name|myForm
argument_list|)
else|:
name|getTable
argument_list|(
name|request
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|false
argument_list|,
name|myForm
argument_list|)
operator|)
decl_stmt|;
name|File
name|file
init|=
name|ApplicationProperties
operator|.
name|getTempFile
argument_list|(
literal|"roomavail"
argument_list|,
literal|"pdf"
argument_list|)
decl_stmt|;
name|pdfTable
operator|.
name|exportPdf
argument_list|(
name|file
argument_list|,
name|WebTable
operator|.
name|getOrder
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
operator|(
name|myForm
operator|.
name|getCompare
argument_list|()
condition|?
literal|"roomAvailability.cord"
else|:
literal|"roomAvailability.ord"
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|REQUEST_OPEN_URL
argument_list|,
literal|"temp/"
operator|+
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
name|myForm
operator|.
name|setTable
argument_list|(
name|table
operator|.
name|printTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
operator|(
name|myForm
operator|.
name|getCompare
argument_list|()
condition|?
literal|"roomAvailability.cord"
else|:
literal|"roomAvailability.ord"
operator|)
argument_list|)
argument_list|)
argument_list|,
literal|6
argument_list|,
name|table
operator|.
name|getLines
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|RoomAvailability
operator|.
name|setAvailabilityWarning
argument_list|(
name|request
argument_list|,
name|session
argument_list|,
name|myForm
operator|.
name|getExamType
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"backId"
argument_list|)
operator|!=
literal|null
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
literal|"hash"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"backId"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showReport"
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|match
parameter_list|(
name|RoomAvailabilityForm
name|form
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|form
operator|.
name|getFilter
argument_list|()
operator|==
literal|null
operator|||
name|form
operator|.
name|getFilter
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|true
return|;
name|String
name|n
init|=
name|name
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
name|StringTokenizer
name|stk1
init|=
operator|new
name|StringTokenizer
argument_list|(
name|form
operator|.
name|getFilter
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|,
literal|";"
argument_list|)
decl_stmt|;
while|while
condition|(
name|stk1
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|StringTokenizer
name|stk2
init|=
operator|new
name|StringTokenizer
argument_list|(
name|stk1
operator|.
name|nextToken
argument_list|()
argument_list|,
literal|" ,"
argument_list|)
decl_stmt|;
name|boolean
name|match
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|match
operator|&&
name|stk2
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|token
init|=
name|stk2
operator|.
name|nextToken
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
continue|continue;
if|if
condition|(
name|token
operator|.
name|indexOf
argument_list|(
literal|'*'
argument_list|)
operator|>=
literal|0
operator|||
name|token
operator|.
name|indexOf
argument_list|(
literal|'?'
argument_list|)
operator|>=
literal|0
condition|)
block|{
try|try
block|{
name|String
name|tokenRegExp
init|=
literal|"\\s+"
operator|+
name|token
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"\\."
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\?"
argument_list|,
literal|".+"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\*"
argument_list|,
literal|".*"
argument_list|)
operator|+
literal|"\\s"
decl_stmt|;
if|if
condition|(
operator|!
name|Pattern
operator|.
name|compile
argument_list|(
name|tokenRegExp
argument_list|)
operator|.
name|matcher
argument_list|(
literal|" "
operator|+
name|n
operator|+
literal|" "
argument_list|)
operator|.
name|find
argument_list|()
condition|)
name|match
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PatternSyntaxException
name|e
parameter_list|)
block|{
name|match
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|n
operator|.
name|indexOf
argument_list|(
name|token
argument_list|)
operator|<
literal|0
condition|)
name|match
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|match
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|PdfWebTable
name|getTable
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|Long
name|sessionId
parameter_list|,
name|boolean
name|html
parameter_list|,
name|RoomAvailabilityForm
name|form
parameter_list|)
block|{
name|RoomAvailabilityInterface
name|ra
init|=
name|RoomAvailability
operator|.
name|getInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|ra
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|String
name|nl
init|=
operator|(
name|html
condition|?
literal|"<br>"
else|:
literal|"\n"
operator|)
decl_stmt|;
name|PdfWebTable
name|table
init|=
operator|new
name|PdfWebTable
argument_list|(
literal|8
argument_list|,
literal|"Room Availability"
argument_list|,
literal|"roomAvailability.do?ord=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Room"
block|,
literal|"Capacity"
block|,
literal|"Examination"
operator|+
name|nl
operator|+
literal|"Capacity"
block|,
literal|"Event"
block|,
literal|"Event Type"
block|,
literal|"Date"
block|,
literal|"Start Time"
block|,
literal|"End Time"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
decl_stmt|;
name|table
operator|.
name|setBlankWhenSame
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|TreeSet
name|periods
init|=
name|ExamPeriod
operator|.
name|findAll
argument_list|(
name|sessionId
argument_list|,
name|form
operator|.
name|getExamType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|periods
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"<font color='orange'>WARN: No examination periods.</font>"
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|table
return|;
block|}
name|Date
index|[]
name|bounds
init|=
name|ExamPeriod
operator|.
name|getBounds
argument_list|(
operator|new
name|SessionDAO
argument_list|()
operator|.
name|get
argument_list|(
name|sessionId
argument_list|)
argument_list|,
name|form
operator|.
name|getExamType
argument_list|()
argument_list|)
decl_stmt|;
name|SimpleDateFormat
name|dateFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"EEE, MM/dd/yyyy"
argument_list|)
decl_stmt|;
name|SimpleDateFormat
name|timeFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"hh:mmaa"
argument_list|)
decl_stmt|;
name|String
name|ts
init|=
literal|null
decl_stmt|;
try|try
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|Location
operator|.
name|findAllExamLocations
argument_list|(
name|sessionId
argument_list|,
name|form
operator|.
name|getExamType
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|location
init|=
operator|(
name|Location
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|match
argument_list|(
name|form
argument_list|,
name|location
operator|.
name|getLabel
argument_list|()
argument_list|)
condition|)
continue|continue;
name|String
name|exclude
init|=
operator|(
name|form
operator|.
name|getIncludeExams
argument_list|()
condition|?
literal|null
else|:
operator|(
name|form
operator|.
name|getExamType
argument_list|()
operator|==
name|Exam
operator|.
name|sExamTypeFinal
condition|?
name|RoomAvailabilityInterface
operator|.
name|sFinalExamType
else|:
name|RoomAvailabilityInterface
operator|.
name|sMidtermExamType
operator|)
operator|)
decl_stmt|;
name|Collection
argument_list|<
name|TimeBlock
argument_list|>
name|events
init|=
name|ra
operator|.
name|getRoomAvailability
argument_list|(
name|location
argument_list|,
name|bounds
index|[
literal|0
index|]
argument_list|,
name|bounds
index|[
literal|1
index|]
argument_list|,
name|exclude
argument_list|)
decl_stmt|;
if|if
condition|(
name|events
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|ts
operator|==
literal|null
condition|)
name|ts
operator|=
name|ra
operator|.
name|getTimeStamp
argument_list|(
name|bounds
index|[
literal|0
index|]
argument_list|,
name|bounds
index|[
literal|1
index|]
argument_list|,
name|exclude
argument_list|)
expr_stmt|;
for|for
control|(
name|TimeBlock
name|event
range|:
name|events
control|)
block|{
name|boolean
name|overlaps
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|periods
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamPeriod
name|period
init|=
operator|(
name|ExamPeriod
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|period
operator|.
name|overlap
argument_list|(
name|event
argument_list|)
condition|)
block|{
name|overlaps
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|overlaps
condition|)
continue|continue;
name|table
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|location
operator|.
name|getLabel
argument_list|()
block|,
name|location
operator|.
name|getCapacity
argument_list|()
operator|.
name|toString
argument_list|()
block|,
name|location
operator|.
name|getExamCapacity
argument_list|()
operator|.
name|toString
argument_list|()
block|,
name|event
operator|.
name|getEventName
argument_list|()
block|,
name|event
operator|.
name|getEventType
argument_list|()
block|,
name|dateFormat
operator|.
name|format
argument_list|(
name|event
operator|.
name|getStartTime
argument_list|()
argument_list|)
block|,
name|timeFormat
operator|.
name|format
argument_list|(
name|event
operator|.
name|getStartTime
argument_list|()
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"AM"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"PM"
argument_list|,
literal|"p"
argument_list|)
block|,
name|timeFormat
operator|.
name|format
argument_list|(
name|event
operator|.
name|getEndTime
argument_list|()
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"AM"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"PM"
argument_list|,
literal|"p"
argument_list|)
block|,                             }
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
name|location
operator|.
name|getLabel
argument_list|()
argument_list|,
name|event
operator|.
name|getStartTime
argument_list|()
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|location
operator|.
name|getCapacity
argument_list|()
argument_list|,
name|location
operator|.
name|getLabel
argument_list|()
argument_list|,
name|event
operator|.
name|getStartTime
argument_list|()
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|location
operator|.
name|getExamCapacity
argument_list|()
argument_list|,
name|location
operator|.
name|getLabel
argument_list|()
argument_list|,
name|event
operator|.
name|getStartTime
argument_list|()
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|event
operator|.
name|getEventName
argument_list|()
argument_list|,
name|location
operator|.
name|getLabel
argument_list|()
argument_list|,
name|event
operator|.
name|getStartTime
argument_list|()
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|event
operator|.
name|getEventType
argument_list|()
argument_list|,
name|event
operator|.
name|getEventName
argument_list|()
argument_list|,
name|location
operator|.
name|getLabel
argument_list|()
argument_list|,
name|event
operator|.
name|getStartTime
argument_list|()
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|event
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|location
operator|.
name|getLabel
argument_list|()
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|event
operator|.
name|getStartTime
argument_list|()
operator|.
name|getTime
argument_list|()
operator|%
literal|86400000
argument_list|,
name|location
operator|.
name|getLabel
argument_list|()
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|event
operator|.
name|getEndTime
argument_list|()
operator|.
name|getTime
argument_list|()
operator|%
literal|86400000
argument_list|,
name|location
operator|.
name|getLabel
argument_list|()
argument_list|)
block|}
argument_list|,
name|location
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ts
operator|!=
literal|null
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
literal|"timestamp"
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"<font color='red'>ERROR:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"</font>"
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|table
return|;
block|}
specifier|public
name|PdfWebTable
name|getCompareTable
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|Long
name|sessionId
parameter_list|,
name|boolean
name|html
parameter_list|,
name|RoomAvailabilityForm
name|form
parameter_list|)
block|{
name|RoomAvailabilityInterface
name|ra
init|=
name|RoomAvailability
operator|.
name|getInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|ra
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|String
name|nl
init|=
operator|(
name|html
condition|?
literal|"<br>"
else|:
literal|"\n"
operator|)
decl_stmt|;
name|PdfWebTable
name|table
init|=
operator|new
name|PdfWebTable
argument_list|(
literal|9
argument_list|,
literal|"Examination Comparison"
argument_list|,
literal|"roomAvailability.do?ord=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Room"
block|,
literal|"Capacity"
block|,
literal|"Examination"
operator|+
name|nl
operator|+
literal|"Capacity"
block|,
literal|"Examination"
block|,
literal|"Examination"
operator|+
name|nl
operator|+
literal|"Date"
block|,
literal|"Examination"
operator|+
name|nl
operator|+
literal|"Time"
block|,
literal|"Event"
block|,
literal|"Event"
operator|+
name|nl
operator|+
literal|"Date"
block|,
literal|"Event"
operator|+
name|nl
operator|+
literal|"Time"
block|,                          }
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
decl_stmt|;
name|table
operator|.
name|setBlankWhenSame
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|TreeSet
name|periods
init|=
name|ExamPeriod
operator|.
name|findAll
argument_list|(
name|sessionId
argument_list|,
name|form
operator|.
name|getExamType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|periods
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"<font color='orange'>WARN: No examination periods.</font>"
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|table
return|;
block|}
name|Date
index|[]
name|bounds
init|=
name|ExamPeriod
operator|.
name|getBounds
argument_list|(
operator|new
name|SessionDAO
argument_list|()
operator|.
name|get
argument_list|(
name|sessionId
argument_list|)
argument_list|,
name|form
operator|.
name|getExamType
argument_list|()
argument_list|)
decl_stmt|;
name|SimpleDateFormat
name|dateFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"EEE, MM/dd"
argument_list|)
decl_stmt|;
name|SimpleDateFormat
name|timeFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"hh:mmaa"
argument_list|)
decl_stmt|;
name|String
name|ts
init|=
literal|null
decl_stmt|;
name|String
name|eventType
init|=
operator|(
name|form
operator|.
name|getExamType
argument_list|()
operator|==
name|Exam
operator|.
name|sExamTypeFinal
condition|?
name|RoomAvailabilityInterface
operator|.
name|sFinalExamType
else|:
name|RoomAvailabilityInterface
operator|.
name|sMidtermExamType
operator|)
decl_stmt|;
name|ExamAssignmentProxy
name|examAssignment
init|=
name|WebSolver
operator|.
name|getExamSolver
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|examAssignment
operator|!=
literal|null
operator|&&
name|examAssignment
operator|.
name|getExamType
argument_list|()
operator|!=
name|form
operator|.
name|getExamType
argument_list|()
condition|)
name|examAssignment
operator|=
literal|null
expr_stmt|;
try|try
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|Location
operator|.
name|findAllExamLocations
argument_list|(
name|sessionId
argument_list|,
name|form
operator|.
name|getExamType
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|location
init|=
operator|(
name|Location
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|match
argument_list|(
name|form
argument_list|,
name|location
operator|.
name|getLabel
argument_list|()
argument_list|)
condition|)
continue|continue;
name|Collection
argument_list|<
name|TimeBlock
argument_list|>
name|events
init|=
name|ra
operator|.
name|getRoomAvailability
argument_list|(
name|location
argument_list|,
name|bounds
index|[
literal|0
index|]
argument_list|,
name|bounds
index|[
literal|1
index|]
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|ts
operator|==
literal|null
condition|)
name|ts
operator|=
name|ra
operator|.
name|getTimeStamp
argument_list|(
name|bounds
index|[
literal|0
index|]
argument_list|,
name|bounds
index|[
literal|1
index|]
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|ExamAssignment
argument_list|>
name|exams
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|examAssignment
operator|!=
literal|null
condition|)
name|exams
operator|=
name|examAssignment
operator|.
name|getExamsOfRoom
argument_list|(
name|location
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
else|else
block|{
name|exams
operator|=
operator|new
name|TreeSet
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select x from Exam x inner join x.assignedRooms r where x.examType=:examType and r.uniqueId=:locationId"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"examType"
argument_list|,
name|form
operator|.
name|getExamType
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"locationId"
argument_list|,
name|location
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|exams
operator|.
name|add
argument_list|(
operator|new
name|ExamAssignment
argument_list|(
operator|(
name|Exam
operator|)
name|j
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|exams
operator|==
literal|null
condition|)
name|exams
operator|=
operator|new
name|TreeSet
argument_list|()
expr_stmt|;
if|if
condition|(
name|events
operator|==
literal|null
condition|)
name|events
operator|=
operator|new
name|TreeSet
argument_list|()
expr_stmt|;
name|Hashtable
argument_list|<
name|TimeBlock
argument_list|,
name|ExamAssignment
argument_list|>
name|mapping
init|=
operator|new
name|Hashtable
argument_list|<
name|TimeBlock
argument_list|,
name|ExamAssignment
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TimeBlock
name|event
range|:
name|events
control|)
block|{
if|if
condition|(
operator|!
name|eventType
operator|.
name|equals
argument_list|(
name|event
operator|.
name|getEventType
argument_list|()
argument_list|)
condition|)
continue|continue;
name|ExamAssignment
name|match
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ExamAssignment
name|exam
range|:
name|exams
control|)
block|{
if|if
condition|(
name|event
operator|.
name|getEventName
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|exam
operator|.
name|getExamName
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
operator|&&
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|overlap
argument_list|(
name|event
argument_list|)
condition|)
block|{
name|match
operator|=
name|exam
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|match
operator|!=
literal|null
condition|)
block|{
name|mapping
operator|.
name|put
argument_list|(
name|event
argument_list|,
name|match
argument_list|)
expr_stmt|;
name|exams
operator|.
name|remove
argument_list|(
name|match
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|TimeBlock
name|event
range|:
name|events
control|)
block|{
if|if
condition|(
operator|!
name|eventType
operator|.
name|equals
argument_list|(
name|event
operator|.
name|getEventType
argument_list|()
argument_list|)
condition|)
continue|continue;
name|ExamAssignment
name|match
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ExamAssignment
name|exam
range|:
name|exams
control|)
block|{
if|if
condition|(
name|event
operator|.
name|getEventName
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|exam
operator|.
name|getExamName
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
name|match
operator|=
name|exam
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|match
operator|!=
literal|null
condition|)
block|{
name|mapping
operator|.
name|put
argument_list|(
name|event
argument_list|,
name|match
argument_list|)
expr_stmt|;
name|exams
operator|.
name|remove
argument_list|(
name|match
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|TimeBlock
name|event
range|:
name|events
control|)
block|{
if|if
condition|(
operator|!
name|eventType
operator|.
name|equals
argument_list|(
name|event
operator|.
name|getEventType
argument_list|()
argument_list|)
condition|)
continue|continue;
name|ExamAssignment
name|match
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ExamAssignment
name|exam
range|:
name|exams
control|)
block|{
if|if
condition|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|overlap
argument_list|(
name|event
argument_list|)
condition|)
block|{
name|match
operator|=
name|exam
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|match
operator|!=
literal|null
condition|)
block|{
name|mapping
operator|.
name|put
argument_list|(
name|event
argument_list|,
name|match
argument_list|)
expr_stmt|;
name|exams
operator|.
name|remove
argument_list|(
name|match
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|TimeBlock
name|event
range|:
name|events
control|)
block|{
if|if
condition|(
operator|!
name|eventType
operator|.
name|equals
argument_list|(
name|event
operator|.
name|getEventType
argument_list|()
argument_list|)
condition|)
continue|continue;
name|ExamAssignment
name|match
init|=
name|mapping
operator|.
name|get
argument_list|(
name|event
argument_list|)
decl_stmt|;
if|if
condition|(
name|match
operator|==
literal|null
condition|)
block|{
name|table
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|location
operator|.
name|getLabel
argument_list|()
block|,
name|location
operator|.
name|getCapacity
argument_list|()
operator|.
name|toString
argument_list|()
block|,
name|location
operator|.
name|getExamCapacity
argument_list|()
operator|.
name|toString
argument_list|()
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
operator|(
name|html
condition|?
literal|"<span style='background-color:yellow;'>"
else|:
literal|"@@BGCOLOR FFFF00 "
operator|)
operator|+
name|event
operator|.
name|getEventName
argument_list|()
operator|+
operator|(
name|html
condition|?
literal|"</span>"
else|:
literal|" @@END_BGCOLOR "
operator|)
block|,
operator|(
name|html
condition|?
literal|"<span style='background-color:yellow;'>"
else|:
literal|"@@BGCOLOR FFFF00 "
operator|)
operator|+
operator|(
name|html
condition|?
name|dateFormat
operator|.
name|format
argument_list|(
name|event
operator|.
name|getStartTime
argument_list|()
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|"&nbsp;"
argument_list|)
else|:
name|dateFormat
operator|.
name|format
argument_list|(
name|event
operator|.
name|getStartTime
argument_list|()
argument_list|)
operator|)
operator|+
operator|(
name|html
condition|?
literal|"</span>"
else|:
literal|" @@END_BGCOLOR "
operator|)
block|,
operator|(
name|html
condition|?
literal|"<span style='background-color:yellow;'>"
else|:
literal|"@@BGCOLOR FFFF00 "
operator|)
operator|+
name|timeFormat
operator|.
name|format
argument_list|(
name|event
operator|.
name|getStartTime
argument_list|()
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"AM"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"PM"
argument_list|,
literal|"p"
argument_list|)
operator|+
operator|(
name|html
condition|?
literal|"</span>"
else|:
literal|" @@END_BGCOLOR "
operator|)
operator|+
operator|(
name|html
condition|?
literal|"&nbsp;-&nbsp;"
else|:
literal|" - "
operator|)
operator|+
operator|(
name|html
condition|?
literal|"<span style='background-color:yellow;'>"
else|:
literal|"@@BGCOLOR FFFF00 "
operator|)
operator|+
name|timeFormat
operator|.
name|format
argument_list|(
name|event
operator|.
name|getEndTime
argument_list|()
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"AM"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"PM"
argument_list|,
literal|"p"
argument_list|)
operator|+
operator|(
name|html
condition|?
literal|"</span>"
else|:
literal|" @@END_BGCOLOR "
operator|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
name|location
operator|.
name|getLabel
argument_list|()
argument_list|,
name|event
operator|.
name|getStartTime
argument_list|()
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|location
operator|.
name|getCapacity
argument_list|()
argument_list|,
name|location
operator|.
name|getLabel
argument_list|()
argument_list|,
name|event
operator|.
name|getStartTime
argument_list|()
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|location
operator|.
name|getExamCapacity
argument_list|()
argument_list|,
name|location
operator|.
name|getLabel
argument_list|()
argument_list|,
name|event
operator|.
name|getStartTime
argument_list|()
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|""
argument_list|,
name|location
operator|.
name|getLabel
argument_list|()
argument_list|,
operator|new
name|Date
argument_list|(
literal|0
argument_list|)
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|new
name|Date
argument_list|(
literal|0
argument_list|)
argument_list|,
name|location
operator|.
name|getLabel
argument_list|()
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|0
argument_list|,
name|location
operator|.
name|getLabel
argument_list|()
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|event
operator|.
name|getEventName
argument_list|()
argument_list|,
name|location
operator|.
name|getLabel
argument_list|()
argument_list|,
name|event
operator|.
name|getStartTime
argument_list|()
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|event
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|location
operator|.
name|getLabel
argument_list|()
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|event
operator|.
name|getStartTime
argument_list|()
operator|.
name|getTime
argument_list|()
operator|%
literal|86400000
argument_list|,
name|location
operator|.
name|getLabel
argument_list|()
argument_list|)
block|}
argument_list|,
name|location
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|c
operator|.
name|setTime
argument_list|(
name|match
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|match
operator|.
name|getPrintOffset
argument_list|()
argument_list|)
expr_stmt|;
name|Date
name|startTime
init|=
name|c
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|c
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|match
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|Date
name|endTime
init|=
name|c
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|boolean
name|nameMatch
init|=
name|event
operator|.
name|getEventName
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|match
operator|.
name|getExamName
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|dateMatch
init|=
name|dateFormat
operator|.
name|format
argument_list|(
name|event
operator|.
name|getStartTime
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|dateFormat
operator|.
name|format
argument_list|(
name|match
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartDate
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Date
name|start
init|=
name|event
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
name|int
name|breakTimeStart
init|=
name|match
operator|.
name|getPeriod
argument_list|()
operator|.
name|getEventStartOffset
argument_list|()
operator|.
name|intValue
argument_list|()
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
decl_stmt|;
name|c
operator|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
expr_stmt|;
name|c
operator|.
name|setTime
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|c
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|breakTimeStart
argument_list|)
expr_stmt|;
name|start
operator|=
name|c
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|Date
name|stop
init|=
name|event
operator|.
name|getEndTime
argument_list|()
decl_stmt|;
name|int
name|breakTimeStop
init|=
name|match
operator|.
name|getPeriod
argument_list|()
operator|.
name|getEventStopOffset
argument_list|()
operator|.
name|intValue
argument_list|()
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
decl_stmt|;
name|c
operator|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
expr_stmt|;
name|c
operator|.
name|setTime
argument_list|(
name|stop
argument_list|)
expr_stmt|;
name|c
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
operator|-
name|breakTimeStop
argument_list|)
expr_stmt|;
name|stop
operator|=
name|c
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|boolean
name|startMatch
init|=
name|start
operator|.
name|equals
argument_list|(
name|startTime
argument_list|)
decl_stmt|;
name|boolean
name|endMatch
init|=
name|stop
operator|.
name|equals
argument_list|(
name|endTime
argument_list|)
decl_stmt|;
if|if
condition|(
name|nameMatch
operator|&&
name|dateMatch
operator|&&
name|startMatch
operator|&&
name|endMatch
condition|)
continue|continue;
name|table
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|location
operator|.
name|getLabel
argument_list|()
block|,
name|location
operator|.
name|getCapacity
argument_list|()
operator|.
name|toString
argument_list|()
block|,
name|location
operator|.
name|getExamCapacity
argument_list|()
operator|.
name|toString
argument_list|()
block|,
operator|(
name|nameMatch
condition|?
literal|""
else|:
name|html
condition|?
literal|"<span style='background-color:yellow;'>"
else|:
literal|"@@BGCOLOR FFFF00 "
operator|)
operator|+
name|match
operator|.
name|getExamName
argument_list|()
operator|+
operator|(
name|nameMatch
condition|?
literal|""
else|:
name|html
condition|?
literal|"</span>"
else|:
literal|" @@END_BGCOLOR "
operator|)
block|,
operator|(
name|dateMatch
condition|?
literal|""
else|:
name|html
condition|?
literal|"<span style='background-color:yellow;'>"
else|:
literal|"@@BGCOLOR FFFF00 "
operator|)
operator|+
operator|(
name|html
condition|?
name|dateFormat
operator|.
name|format
argument_list|(
name|match
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartDate
argument_list|()
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|"&nbsp;"
argument_list|)
else|:
name|dateFormat
operator|.
name|format
argument_list|(
name|match
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartDate
argument_list|()
argument_list|)
operator|)
operator|+
operator|(
name|dateMatch
condition|?
literal|""
else|:
name|html
condition|?
literal|"</span>"
else|:
literal|" @@END_BGCOLOR "
operator|)
block|,
operator|(
name|startMatch
condition|?
literal|""
else|:
name|html
condition|?
literal|"<span style='background-color:yellow;'>"
else|:
literal|"@@BGCOLOR FFFF00 "
operator|)
operator|+
name|timeFormat
operator|.
name|format
argument_list|(
name|startTime
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"AM"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"PM"
argument_list|,
literal|"p"
argument_list|)
operator|+
operator|(
name|startMatch
condition|?
literal|""
else|:
name|html
condition|?
literal|"</span>"
else|:
literal|" @@END_BGCOLOR "
operator|)
operator|+
operator|(
name|html
condition|?
literal|"&nbsp;-&nbsp;"
else|:
literal|" - "
operator|)
operator|+
operator|(
name|endMatch
condition|?
literal|""
else|:
name|html
condition|?
literal|"<span style='background-color:yellow;'>"
else|:
literal|"@@BGCOLOR FFFF00 "
operator|)
operator|+
name|timeFormat
operator|.
name|format
argument_list|(
name|endTime
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"AM"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"PM"
argument_list|,
literal|"p"
argument_list|)
operator|+
operator|(
name|endMatch
condition|?
literal|""
else|:
name|html
condition|?
literal|"</span>"
else|:
literal|" @@END_BGCOLOR "
operator|)
block|,
operator|(
name|nameMatch
condition|?
literal|""
else|:
name|html
condition|?
literal|"<span style='background-color:yellow;'>"
else|:
literal|"@@BGCOLOR FFFF00 "
operator|)
operator|+
name|event
operator|.
name|getEventName
argument_list|()
operator|+
operator|(
name|nameMatch
condition|?
literal|""
else|:
name|html
condition|?
literal|"</span>"
else|:
literal|" @@END_BGCOLOR "
operator|)
block|,
operator|(
name|dateMatch
condition|?
literal|""
else|:
name|html
condition|?
literal|"<span style='background-color:yellow;'>"
else|:
literal|"@@BGCOLOR FFFF00 "
operator|)
operator|+
operator|(
name|html
condition|?
name|dateFormat
operator|.
name|format
argument_list|(
name|event
operator|.
name|getStartTime
argument_list|()
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|"&nbsp;"
argument_list|)
else|:
name|dateFormat
operator|.
name|format
argument_list|(
name|event
operator|.
name|getStartTime
argument_list|()
argument_list|)
operator|)
operator|+
operator|(
name|dateMatch
condition|?
literal|""
else|:
name|html
condition|?
literal|"</span>"
else|:
literal|" @@END_BGCOLOR "
operator|)
block|,
operator|(
name|startMatch
condition|?
literal|""
else|:
name|html
condition|?
literal|"<span style='background-color:yellow;'>"
else|:
literal|"@@BGCOLOR FFFF00 "
operator|)
operator|+
name|timeFormat
operator|.
name|format
argument_list|(
name|event
operator|.
name|getStartTime
argument_list|()
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"AM"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"PM"
argument_list|,
literal|"p"
argument_list|)
operator|+
operator|(
name|startMatch
condition|?
literal|""
else|:
name|html
condition|?
literal|"</span>"
else|:
literal|" @@END_BGCOLOR "
operator|)
operator|+
operator|(
name|html
condition|?
literal|"&nbsp;-&nbsp;"
else|:
literal|" - "
operator|)
operator|+
operator|(
name|endMatch
condition|?
literal|""
else|:
name|html
condition|?
literal|"<span style='background-color:yellow;'>"
else|:
literal|"@@BGCOLOR FFFF00 "
operator|)
operator|+
name|timeFormat
operator|.
name|format
argument_list|(
name|event
operator|.
name|getEndTime
argument_list|()
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"AM"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"PM"
argument_list|,
literal|"p"
argument_list|)
operator|+
operator|(
name|endMatch
condition|?
literal|""
else|:
name|html
condition|?
literal|"</span>"
else|:
literal|" @@END_BGCOLOR "
operator|)
block|,                                 }
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
name|location
operator|.
name|getLabel
argument_list|()
argument_list|,
name|event
operator|.
name|getStartTime
argument_list|()
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|location
operator|.
name|getCapacity
argument_list|()
argument_list|,
name|location
operator|.
name|getLabel
argument_list|()
argument_list|,
name|event
operator|.
name|getStartTime
argument_list|()
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|location
operator|.
name|getExamCapacity
argument_list|()
argument_list|,
name|location
operator|.
name|getLabel
argument_list|()
argument_list|,
name|event
operator|.
name|getStartTime
argument_list|()
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|match
operator|.
name|getExamName
argument_list|()
argument_list|,
name|location
operator|.
name|getLabel
argument_list|()
argument_list|,
name|match
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartTime
argument_list|()
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|match
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|location
operator|.
name|getLabel
argument_list|()
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|match
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartTime
argument_list|()
operator|.
name|getTime
argument_list|()
operator|%
literal|86400000
argument_list|,
name|location
operator|.
name|getLabel
argument_list|()
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|event
operator|.
name|getEventName
argument_list|()
argument_list|,
name|location
operator|.
name|getLabel
argument_list|()
argument_list|,
name|event
operator|.
name|getStartTime
argument_list|()
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|event
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|location
operator|.
name|getLabel
argument_list|()
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|event
operator|.
name|getStartTime
argument_list|()
operator|.
name|getTime
argument_list|()
operator|%
literal|86400000
argument_list|,
name|location
operator|.
name|getLabel
argument_list|()
argument_list|)
block|}
argument_list|,
name|location
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|ExamAssignment
name|exam
range|:
name|exams
control|)
block|{
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|c
operator|.
name|setTime
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|exam
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|Date
name|endTime
init|=
name|c
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|table
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|location
operator|.
name|getLabel
argument_list|()
block|,
name|location
operator|.
name|getCapacity
argument_list|()
operator|.
name|toString
argument_list|()
block|,
name|location
operator|.
name|getExamCapacity
argument_list|()
operator|.
name|toString
argument_list|()
block|,
operator|(
name|html
condition|?
literal|"<span style='background-color:yellow;'>"
else|:
literal|"@@BGCOLOR FFFF00 "
operator|)
operator|+
name|exam
operator|.
name|getExamName
argument_list|()
operator|+
operator|(
name|html
condition|?
literal|"</span>"
else|:
literal|" @@END_BGCOLOR "
operator|)
block|,
operator|(
name|html
condition|?
literal|"<span style='background-color:yellow;'>"
else|:
literal|"@@BGCOLOR FFFF00 "
operator|)
operator|+
operator|(
name|html
condition|?
name|dateFormat
operator|.
name|format
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartDate
argument_list|()
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|"&nbsp;"
argument_list|)
else|:
name|dateFormat
operator|.
name|format
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartDate
argument_list|()
argument_list|)
operator|)
operator|+
operator|(
name|html
condition|?
literal|"</span>"
else|:
literal|" @@END_BGCOLOR "
operator|)
block|,
operator|(
name|html
condition|?
literal|"<span style='background-color:yellow;'>"
else|:
literal|"@@BGCOLOR FFFF00 "
operator|)
operator|+
name|timeFormat
operator|.
name|format
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartTime
argument_list|()
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"AM"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"PM"
argument_list|,
literal|"p"
argument_list|)
operator|+
operator|(
name|html
condition|?
literal|"</span>"
else|:
literal|" @@END_BGCOLOR "
operator|)
operator|+
operator|(
name|html
condition|?
literal|"&nbsp;-&nbsp;"
else|:
literal|" - "
operator|)
operator|+
operator|(
name|html
condition|?
literal|"<span style='background-color:yellow;'>"
else|:
literal|"@@BGCOLOR FFFF00 "
operator|)
operator|+
name|timeFormat
operator|.
name|format
argument_list|(
name|endTime
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"AM"
argument_list|,
literal|"a"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"PM"
argument_list|,
literal|"p"
argument_list|)
operator|+
operator|(
name|html
condition|?
literal|"</span>"
else|:
literal|" @@END_BGCOLOR "
operator|)
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
name|location
operator|.
name|getLabel
argument_list|()
argument_list|,
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartTime
argument_list|()
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|location
operator|.
name|getCapacity
argument_list|()
argument_list|,
name|location
operator|.
name|getLabel
argument_list|()
argument_list|,
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartTime
argument_list|()
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|location
operator|.
name|getExamCapacity
argument_list|()
argument_list|,
name|location
operator|.
name|getLabel
argument_list|()
argument_list|,
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartTime
argument_list|()
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getExamName
argument_list|()
argument_list|,
name|location
operator|.
name|getLabel
argument_list|()
argument_list|,
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartTime
argument_list|()
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|location
operator|.
name|getLabel
argument_list|()
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartTime
argument_list|()
operator|.
name|getTime
argument_list|()
operator|%
literal|86400000
argument_list|,
name|location
operator|.
name|getLabel
argument_list|()
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|""
argument_list|,
name|location
operator|.
name|getLabel
argument_list|()
argument_list|,
operator|new
name|Date
argument_list|(
literal|0
argument_list|)
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|new
name|Date
argument_list|(
literal|0
argument_list|)
argument_list|,
name|location
operator|.
name|getLabel
argument_list|()
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|0
argument_list|,
name|location
operator|.
name|getLabel
argument_list|()
argument_list|)
block|}
argument_list|,
name|location
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ts
operator|!=
literal|null
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
literal|"timestamp"
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"<font color='red'>ERROR:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"</font>"
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|table
return|;
block|}
block|}
end_class

end_unit

