begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.0 (University Course Timetabling& Student Sectioning Application)  * Copyright (C) 2007, UniTime.org, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionErrors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|util
operator|.
name|LabelValueBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|criterion
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|criterion
operator|.
name|Restrictions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|Web
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|WebTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|TimePatternEditForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Roles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|TimePatternDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|CSVFile
import|;
end_import

begin_comment
comment|/**   * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|TimePatternEditAction
extends|extends
name|Action
block|{
specifier|public
name|ActionForward
name|execute
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|TimePatternEditForm
name|myForm
init|=
operator|(
name|TimePatternEditForm
operator|)
name|form
decl_stmt|;
comment|// Check Access
if|if
condition|(
operator|!
name|Web
operator|.
name|isLoggedIn
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
operator|||
operator|!
name|Web
operator|.
name|hasRole
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
name|Roles
operator|.
name|getAdminRoles
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Access Denied."
argument_list|)
throw|;
block|}
comment|// Read operation to be performed
name|String
name|op
init|=
operator|(
name|myForm
operator|.
name|getOp
argument_list|()
operator|!=
literal|null
condition|?
name|myForm
operator|.
name|getOp
argument_list|()
else|:
name|request
operator|.
name|getParameter
argument_list|(
literal|"op"
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getParameterValues
argument_list|(
literal|"depts"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|depts
init|=
name|request
operator|.
name|getParameterValues
argument_list|(
literal|"depts"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|depts
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|myForm
operator|.
name|getDepartmentIds
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Long
argument_list|(
name|depts
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|op
operator|==
literal|null
condition|)
block|{
name|myForm
operator|.
name|load
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|Long
name|sessionId
init|=
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
operator|.
name|getSessionId
argument_list|()
decl_stmt|;
name|List
name|list
init|=
operator|(
operator|new
name|DepartmentDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
operator|.
name|createCriteria
argument_list|(
name|Department
operator|.
name|class
argument_list|)
operator|.
name|add
argument_list|(
name|Restrictions
operator|.
name|eq
argument_list|(
literal|"session.uniqueId"
argument_list|,
name|sessionId
argument_list|)
argument_list|)
operator|.
name|addOrder
argument_list|(
name|Order
operator|.
name|asc
argument_list|(
literal|"deptCode"
argument_list|)
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|Vector
name|availableDepts
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|list
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|d
init|=
operator|(
name|Department
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|availableDepts
operator|.
name|add
argument_list|(
operator|new
name|LabelValueBean
argument_list|(
name|d
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|"-"
operator|+
name|d
operator|.
name|getName
argument_list|()
argument_list|,
name|d
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|setAttribute
argument_list|(
name|Department
operator|.
name|DEPT_ATTR_NAME
argument_list|,
name|availableDepts
argument_list|)
expr_stmt|;
comment|// Reset Form
if|if
condition|(
literal|"Clear"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|myForm
operator|.
name|load
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"Add Department"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|ActionMessages
name|errors
init|=
operator|new
name|ActionErrors
argument_list|()
decl_stmt|;
if|if
condition|(
name|myForm
operator|.
name|getDepartmentId
argument_list|()
operator|==
literal|null
operator|||
name|myForm
operator|.
name|getDepartmentId
argument_list|()
operator|.
name|longValue
argument_list|()
operator|<
literal|0
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"department"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"No department selected."
argument_list|)
argument_list|)
expr_stmt|;
else|else
block|{
name|boolean
name|contains
init|=
name|myForm
operator|.
name|getDepartmentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|myForm
operator|.
name|getDepartmentId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|contains
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"department"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Department already present in the list of departments."
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|errors
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|myForm
operator|.
name|getDepartmentIds
argument_list|()
operator|.
name|add
argument_list|(
name|myForm
operator|.
name|getDepartmentId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|myForm
operator|.
name|setOp
argument_list|(
name|myForm
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
operator|<
literal|0
condition|?
literal|"Add New"
else|:
literal|"Update"
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showTimePatterns"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"Remove Department"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|ActionMessages
name|errors
init|=
operator|new
name|ActionErrors
argument_list|()
decl_stmt|;
if|if
condition|(
name|myForm
operator|.
name|getDepartmentId
argument_list|()
operator|==
literal|null
operator|||
name|myForm
operator|.
name|getDepartmentId
argument_list|()
operator|.
name|longValue
argument_list|()
operator|<
literal|0
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"department"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"No department selected."
argument_list|)
argument_list|)
expr_stmt|;
else|else
block|{
name|boolean
name|contains
init|=
name|myForm
operator|.
name|getDepartmentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|myForm
operator|.
name|getDepartmentId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|contains
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"department"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"Department not present in the list of departments."
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|errors
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|myForm
operator|.
name|getDepartmentIds
argument_list|()
operator|.
name|remove
argument_list|(
name|myForm
operator|.
name|getDepartmentId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|myForm
operator|.
name|setOp
argument_list|(
name|myForm
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
operator|<
literal|0
condition|?
literal|"Add New"
else|:
literal|"Update"
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showTimePatterns"
argument_list|)
expr_stmt|;
block|}
comment|// Add / Update
if|if
condition|(
literal|"Update"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
literal|"Add New"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
comment|// Validate input
name|ActionMessages
name|errors
init|=
name|myForm
operator|.
name|validate
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|errors
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showTimePatterns"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
operator|(
operator|new
name|TimePatternDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|myForm
operator|.
name|saveOrUpdate
argument_list|(
name|request
argument_list|,
name|hibSession
argument_list|,
name|sessionId
argument_list|)
expr_stmt|;
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|myForm
operator|.
name|setOp
argument_list|(
literal|"Update"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Edit
if|if
condition|(
literal|"Edit"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|String
name|id
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|ActionMessages
name|errors
init|=
operator|new
name|ActionMessages
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
operator|||
name|id
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"key"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.invalid"
argument_list|,
literal|"Unique Id : "
operator|+
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showTimePatterns"
argument_list|)
return|;
block|}
else|else
block|{
name|TimePattern
name|pattern
init|=
operator|(
operator|new
name|TimePatternDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|pattern
operator|==
literal|null
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"name"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.invalid"
argument_list|,
literal|"Unique Id : "
operator|+
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showTimePatterns"
argument_list|)
return|;
block|}
else|else
block|{
name|myForm
operator|.
name|load
argument_list|(
name|pattern
argument_list|,
name|sessionId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Delete
if|if
condition|(
literal|"Delete"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
operator|(
operator|new
name|TimePatternDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|myForm
operator|.
name|delete
argument_list|(
name|hibSession
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|myForm
operator|.
name|load
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|myForm
operator|.
name|setOp
argument_list|(
literal|"Add New"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"Exact Times"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
operator|(
operator|new
name|TimePatternDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|TimePattern
name|tp
init|=
name|TimePattern
operator|.
name|findByName
argument_list|(
name|session
argument_list|,
literal|"Exact Time"
argument_list|)
decl_stmt|;
name|List
name|timePrefs
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct p from TimePref as p inner join p.timePattern as tp where tp.uniqueId=:uniqueid"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"uniqueid"
argument_list|,
name|tp
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|CSVFile
name|csv
init|=
operator|new
name|CSVFile
argument_list|()
decl_stmt|;
name|csv
operator|.
name|setHeader
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
index|[]
block|{
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|"Class"
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|"Pattern"
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|"Time"
argument_list|)
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|timePrefs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePref
name|tpref
init|=
operator|(
name|TimePref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|tpref
operator|.
name|getOwner
argument_list|()
operator|instanceof
name|Class_
operator|)
condition|)
continue|continue;
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|tpref
operator|.
name|getOwner
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|clazz
operator|.
name|getSessionId
argument_list|()
operator|.
name|equals
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|int
name|dayCode
init|=
name|tpref
operator|.
name|getTimePatternModel
argument_list|()
operator|.
name|getExactDays
argument_list|()
decl_stmt|;
name|String
name|name
init|=
literal|""
decl_stmt|;
name|int
name|nrDays
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|Constants
operator|.
name|DAY_CODES
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|Constants
operator|.
name|DAY_CODES
index|[
name|j
index|]
operator|&
name|dayCode
operator|)
operator|!=
literal|0
condition|)
block|{
name|name
operator|+=
name|Constants
operator|.
name|DAY_NAMES_SHORT
index|[
name|j
index|]
expr_stmt|;
name|nrDays
operator|++
expr_stmt|;
block|}
block|}
name|name
operator|+=
literal|" "
expr_stmt|;
name|int
name|startSlot
init|=
name|tpref
operator|.
name|getTimePatternModel
argument_list|()
operator|.
name|getExactStartSlot
argument_list|()
decl_stmt|;
name|int
name|startTime
init|=
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|+
operator|(
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|startSlot
operator|)
decl_stmt|;
name|int
name|startHour
init|=
name|startTime
operator|/
literal|60
decl_stmt|;
name|int
name|startMinute
init|=
name|startTime
operator|%
literal|60
decl_stmt|;
name|name
operator|+=
operator|(
name|startHour
operator|>
literal|12
condition|?
name|startHour
operator|-
literal|12
else|:
name|startHour
operator|)
operator|+
literal|":"
operator|+
operator|(
name|startMinute
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|startMinute
operator|+
operator|(
name|startHour
operator|>=
literal|12
condition|?
literal|"p"
else|:
literal|"a"
operator|)
expr_stmt|;
name|int
name|minPerMtg
init|=
operator|(
name|nrDays
operator|==
literal|0
condition|?
literal|0
else|:
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
operator|.
name|intValue
argument_list|()
operator|/
name|nrDays
operator|)
decl_stmt|;
if|if
condition|(
name|nrDays
operator|==
literal|0
condition|)
name|Debug
operator|.
name|warning
argument_list|(
literal|"Class "
operator|+
name|clazz
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" has zero number of days."
argument_list|)
expr_stmt|;
name|csv
operator|.
name|addLine
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
index|[]
block|{
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|clazz
operator|.
name|getClassLabel
argument_list|()
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|nrDays
operator|+
literal|" x "
operator|+
name|minPerMtg
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|name
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
name|File
name|file
init|=
name|ApplicationProperties
operator|.
name|getTempFile
argument_list|(
literal|"exact"
argument_list|,
literal|"csv"
argument_list|)
decl_stmt|;
name|csv
operator|.
name|save
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|REQUEST_OPEN_URL
argument_list|,
literal|"temp/"
operator|+
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|myForm
operator|.
name|load
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|myForm
operator|.
name|setOp
argument_list|(
literal|"Add New"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"Assign Departments"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
name|PrintWriter
name|out
init|=
literal|null
decl_stmt|;
name|HashSet
name|refresh
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
try|try
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
operator|(
operator|new
name|TimePatternDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|File
name|file
init|=
name|ApplicationProperties
operator|.
name|getTempFile
argument_list|(
literal|"assigndept"
argument_list|,
literal|"txt"
argument_list|)
decl_stmt|;
name|out
operator|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|TreeSet
name|patterns
init|=
operator|new
name|TreeSet
argument_list|(
name|TimePattern
operator|.
name|findAll
argument_list|(
name|request
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|patterns
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePattern
name|tp
init|=
operator|(
name|TimePattern
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|tp
operator|.
name|getType
argument_list|()
operator|.
name|intValue
argument_list|()
operator|!=
name|TimePattern
operator|.
name|sTypeExtended
condition|)
continue|continue;
name|out
operator|.
name|println
argument_list|(
literal|"Checking "
operator|+
name|tp
operator|.
name|getName
argument_list|()
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|List
name|timePrefs
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct p from TimePref as p inner join p.timePattern as tp where tp.uniqueId=:uniqueid"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"uniqueid"
argument_list|,
name|tp
operator|.
name|getUniqueId
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|HashSet
name|depts
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|timePrefs
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePref
name|timePref
init|=
operator|(
name|TimePref
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|timePref
operator|.
name|getOwner
argument_list|()
operator|instanceof
name|Class_
condition|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|timePref
operator|.
name|getOwner
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|c
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|depts
operator|.
name|add
argument_list|(
name|c
operator|.
name|getManagingDept
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|timePref
operator|.
name|getOwner
argument_list|()
operator|instanceof
name|SchedulingSubpart
condition|)
block|{
name|SchedulingSubpart
name|s
init|=
operator|(
name|SchedulingSubpart
operator|)
name|timePref
operator|.
name|getOwner
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|depts
operator|.
name|add
argument_list|(
name|s
operator|.
name|getManagingDept
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|println
argument_list|(
literal|"  -- departments: "
operator|+
name|depts
argument_list|)
expr_stmt|;
name|boolean
name|added
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|depts
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|d
init|=
operator|(
name|Department
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|.
name|isExternalManager
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
comment|/*             				if (tp.getDepartments().contains(d)) {             					tp.getDepartments().remove(d);             					d.getTimePatterns().remove(tp);             					hibSession.saveOrUpdate(d);                 				out.println("    -- department "+d+" removed from "+tp.getName());                 				added=true;             				}             				*/
continue|continue;
block|}
if|if
condition|(
operator|!
name|tp
operator|.
name|getDepartments
argument_list|()
operator|.
name|contains
argument_list|(
name|d
argument_list|)
condition|)
block|{
name|tp
operator|.
name|getDepartments
argument_list|()
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|d
operator|.
name|getTimePatterns
argument_list|()
operator|.
name|add
argument_list|(
name|tp
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    -- department "
operator|+
name|d
operator|+
literal|" added to "
operator|+
name|tp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|added
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|added
condition|)
block|{
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|tp
argument_list|)
expr_stmt|;
name|refresh
operator|.
name|add
argument_list|(
name|tp
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|=
literal|null
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|REQUEST_OPEN_URL
argument_list|,
literal|"temp/"
operator|+
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|refresh
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|hibSession
operator|.
name|refresh
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|myForm
operator|.
name|load
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|myForm
operator|.
name|setOp
argument_list|(
literal|"Add New"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"Export CSV"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
operator|(
operator|new
name|TimePatternDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|CSVFile
name|csv
init|=
operator|new
name|CSVFile
argument_list|()
decl_stmt|;
name|csv
operator|.
name|setHeader
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
index|[]
block|{
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|"Name"
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|"Type"
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|"Visible"
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|"Used"
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|"NbrMtgs"
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|"MinPerMtg"
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|"SlotsPerMtg"
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|"BreakTime"
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|"Days"
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|"Times"
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|"Departments"
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|"Classes"
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|TreeSet
name|patterns
init|=
operator|new
name|TreeSet
argument_list|(
name|TimePattern
operator|.
name|findAll
argument_list|(
name|request
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|patterns
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePattern
name|tp
init|=
operator|(
name|TimePattern
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|deptStr
init|=
literal|""
decl_stmt|;
name|TreeSet
name|depts
init|=
operator|new
name|TreeSet
argument_list|(
name|tp
operator|.
name|getDepartments
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|depts
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|d
init|=
operator|(
name|Department
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|.
name|getSessionId
argument_list|()
operator|.
name|equals
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|deptStr
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|deptStr
operator|+=
literal|", "
expr_stmt|;
block|}
name|deptStr
operator|+=
name|d
operator|.
name|getShortLabel
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
name|String
name|classStr
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|tp
operator|.
name|getType
argument_list|()
operator|.
name|intValue
argument_list|()
operator|!=
name|TimePattern
operator|.
name|sTypeStandard
condition|)
block|{
name|List
name|timePrefs
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct p.owner from TimePref as p inner join p.timePattern as tp where tp.uniqueId=:uniqueid"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"uniqueid"
argument_list|,
name|tp
operator|.
name|getUniqueId
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|TreeSet
name|allOwners
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|timePrefs
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|owner
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|owner
operator|instanceof
name|Class_
condition|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|owner
decl_stmt|;
if|if
condition|(
operator|!
name|c
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|allOwners
operator|.
name|add
argument_list|(
name|c
operator|.
name|getClassLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|owner
operator|instanceof
name|SchedulingSubpart
condition|)
block|{
name|SchedulingSubpart
name|s
init|=
operator|(
name|SchedulingSubpart
operator|)
name|owner
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|allOwners
operator|.
name|add
argument_list|(
name|s
operator|.
name|getSchedulingSubpartLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|allOwners
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|classStr
operator|+=
literal|"not used"
expr_stmt|;
block|}
else|else
block|{
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|classStr
operator|+=
name|allOwners
operator|.
name|size
argument_list|()
operator|+
literal|" / "
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|allOwners
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|idx
operator|==
literal|20
condition|)
block|{
name|classStr
operator|+=
literal|"..."
expr_stmt|;
break|break;
block|}
name|classStr
operator|+=
operator|(
name|String
operator|)
name|j
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|j
operator|.
name|hasNext
argument_list|()
condition|)
name|classStr
operator|+=
literal|", "
expr_stmt|;
block|}
block|}
block|}
name|csv
operator|.
name|addLine
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
index|[]
block|{
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|tp
operator|.
name|getName
argument_list|()
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|TimePattern
operator|.
name|sTypes
index|[
name|tp
operator|.
name|getType
argument_list|()
operator|.
name|intValue
argument_list|()
index|]
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|tp
operator|.
name|isVisible
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"Y"
else|:
literal|"N"
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|tp
operator|.
name|isEditable
argument_list|()
condition|?
literal|"N"
else|:
literal|"Y"
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|tp
operator|.
name|getNrMeetings
argument_list|()
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|tp
operator|.
name|getMinPerMtg
argument_list|()
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|tp
operator|.
name|getSlotsPerMtg
argument_list|()
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|tp
operator|.
name|getBreakTime
argument_list|()
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|TimePatternEditForm
operator|.
name|dayCodes2str
argument_list|(
name|tp
operator|.
name|getDays
argument_list|()
argument_list|,
literal|", "
argument_list|)
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|TimePatternEditForm
operator|.
name|startSlots2str
argument_list|(
name|tp
operator|.
name|getTimes
argument_list|()
argument_list|,
literal|", "
argument_list|)
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|deptStr
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|classStr
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
name|File
name|file
init|=
name|ApplicationProperties
operator|.
name|getTempFile
argument_list|(
literal|"timePatterns"
argument_list|,
literal|"csv"
argument_list|)
decl_stmt|;
name|csv
operator|.
name|save
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|REQUEST_OPEN_URL
argument_list|,
literal|"temp/"
operator|+
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|myForm
operator|.
name|load
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|myForm
operator|.
name|setOp
argument_list|(
literal|"Add New"
argument_list|)
expr_stmt|;
block|}
comment|// Read all existing settings and store in request
name|getTimePatterns
argument_list|(
name|request
argument_list|,
name|sessionId
argument_list|)
expr_stmt|;
name|String
name|example
init|=
name|myForm
operator|.
name|getExample
argument_list|()
decl_stmt|;
if|if
condition|(
name|example
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|setAttribute
argument_list|(
literal|"TimePatterns.example"
argument_list|,
name|example
argument_list|)
expr_stmt|;
block|}
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showTimePatterns"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|private
name|void
name|getTimePatterns
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|Long
name|sessionId
parameter_list|)
throws|throws
name|Exception
block|{
name|WebTable
operator|.
name|setOrder
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
literal|"timePatterns.ord"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"ord"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Create web table instance
name|WebTable
name|webTable
init|=
operator|new
name|WebTable
argument_list|(
literal|11
argument_list|,
literal|"Time Patterns"
argument_list|,
literal|"timePatternEdit.do?ord=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Name"
block|,
literal|"Type"
block|,
literal|"Visible"
block|,
literal|"Used"
block|,
literal|"NrMtgs"
block|,
literal|"MinPerMtg"
block|,
literal|"SlotPerMtg"
block|,
literal|"Break Time"
block|,
literal|"Days"
block|,
literal|"Times"
block|,
literal|"Departments"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Vector
name|patterns
init|=
name|TimePattern
operator|.
name|findAll
argument_list|(
name|request
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|patterns
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|webTable
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"No time pattern defined for this academic initiative and term."
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Set
name|used
init|=
name|TimePattern
operator|.
name|findAllUsed
argument_list|(
name|session
argument_list|)
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|patterns
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|TimePattern
name|pattern
init|=
operator|(
name|TimePattern
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|String
name|onClick
init|=
literal|"onClick=\"document.location='timePatternEdit.do?op=Edit&id="
operator|+
name|pattern
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"';\""
decl_stmt|;
name|String
name|deptStr
init|=
literal|""
decl_stmt|;
name|String
name|deptCmp
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|pattern
operator|.
name|getDepartments
argument_list|(
name|sessionId
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|d
init|=
operator|(
name|Department
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|deptStr
operator|+=
name|d
operator|.
name|getManagingDeptAbbv
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|deptCmp
operator|+=
name|d
operator|.
name|getDeptCode
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|deptStr
operator|+=
literal|", "
expr_stmt|;
name|deptCmp
operator|+=
literal|","
expr_stmt|;
block|}
block|}
name|boolean
name|isUsed
init|=
name|used
operator|.
name|contains
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
name|webTable
operator|.
name|addLine
argument_list|(
name|onClick
argument_list|,
operator|new
name|String
index|[]
block|{
name|pattern
operator|.
name|getName
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|"&nbsp;"
argument_list|)
block|,
name|TimePattern
operator|.
name|sTypes
index|[
name|pattern
operator|.
name|getType
argument_list|()
operator|.
name|intValue
argument_list|()
index|]
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|"&nbsp;"
argument_list|)
block|,
name|pattern
operator|.
name|isVisible
argument_list|()
operator|.
name|toString
argument_list|()
block|,
operator|(
operator|new
name|Boolean
argument_list|(
name|isUsed
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
block|,
name|pattern
operator|.
name|getNrMeetings
argument_list|()
operator|.
name|toString
argument_list|()
block|,
name|pattern
operator|.
name|getMinPerMtg
argument_list|()
operator|.
name|toString
argument_list|()
block|,
name|pattern
operator|.
name|getSlotsPerMtg
argument_list|()
operator|.
name|toString
argument_list|()
block|,
name|pattern
operator|.
name|getBreakTime
argument_list|()
operator|.
name|toString
argument_list|()
block|,
name|TimePatternEditForm
operator|.
name|dayCodes2str
argument_list|(
name|pattern
operator|.
name|getDays
argument_list|()
argument_list|,
literal|", "
argument_list|)
block|,
name|TimePatternEditForm
operator|.
name|startSlots2str
argument_list|(
name|pattern
operator|.
name|getTimes
argument_list|()
argument_list|,
literal|", "
argument_list|)
block|,
name|deptStr
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|pattern
operator|.
name|getName
argument_list|()
block|,
name|pattern
operator|.
name|getType
argument_list|()
block|,
operator|(
name|pattern
operator|.
name|isVisible
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"1"
else|:
literal|"0"
operator|)
block|,
operator|(
name|isUsed
condition|?
literal|"0"
else|:
literal|"1"
operator|)
block|,
name|pattern
operator|.
name|getNrMeetings
argument_list|()
block|,
name|pattern
operator|.
name|getMinPerMtg
argument_list|()
block|,
name|pattern
operator|.
name|getSlotsPerMtg
argument_list|()
block|,
name|pattern
operator|.
name|getBreakTime
argument_list|()
block|,
name|TimePatternEditForm
operator|.
name|dayCodes2str
argument_list|(
name|pattern
operator|.
name|getDays
argument_list|()
argument_list|,
literal|", "
argument_list|)
block|,
name|TimePatternEditForm
operator|.
name|startSlots2str
argument_list|(
name|pattern
operator|.
name|getTimes
argument_list|()
argument_list|,
literal|", "
argument_list|)
block|,
name|deptCmp
block|}
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|setAttribute
argument_list|(
literal|"TimePatterns.table"
argument_list|,
name|webTable
operator|.
name|printTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
literal|"timePatterns.ord"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

