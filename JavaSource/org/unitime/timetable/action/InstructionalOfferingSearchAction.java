begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|util
operator|.
name|MessageResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Hibernate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|HibernateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|Web
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|LocalizedLookupDispatchAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|messages
operator|.
name|CourseMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|messages
operator|.
name|Messages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|ClassListForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|InstructionalOfferingListForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Solution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|UserData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstructionalOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SubjectAreaDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ClassAssignmentProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|WebSolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|PdfWorksheet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|BackTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|pdf
operator|.
name|PdfInstructionalOfferingTableBuilder
import|;
end_import

begin_comment
comment|/**  * @author Stephanie Schluttenhofer  */
end_comment

begin_class
specifier|public
class|class
name|InstructionalOfferingSearchAction
extends|extends
name|LocalizedLookupDispatchAction
block|{
specifier|protected
specifier|final
specifier|static
name|CourseMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|CourseMessages
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|Messages
name|getMessages
parameter_list|()
block|{
return|return
name|MSG
return|;
block|}
comment|/* 	protected Map getKeyMethodMap() { 	      Map map = new HashMap(); 	      map.put("button.searchInstructionalOfferings", "searchInstructionalOfferings"); 	      map.put("button.exportPDF", "exportPdf"); 	      map.put("button.worksheetPDF", "worksheetPdf"); 	      map.put("button.saveNotOfferedChanges", "saveNotOfferedChanges"); 	      map.put("button.addNew", "addInstructionalOfferings"); //	      map.put("button.update", "updateInstructionalOfferings"); //	      map.put("button.delete", "deleteCourseOffering"); 	      map.put("button.cancel", "searchInstructionalOfferings"); 	      return map; 	} 	*/
specifier|protected
name|String
name|getMethodName
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|String
name|parameter
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|super
operator|.
name|getMethodName
argument_list|(
name|mapping
argument_list|,
name|form
argument_list|,
name|request
argument_list|,
name|response
argument_list|,
name|parameter
argument_list|)
return|;
block|}
comment|/**  	 * Method execute 	 * @param mapping 	 * @param form 	 * @param request 	 * @param response 	 * @return ActionForward 	 * @throws HibernateException 	 */
specifier|public
name|ActionForward
name|searchInstructionalOfferings
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
name|HttpSession
name|httpSession
init|=
name|request
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Web
operator|.
name|isLoggedIn
argument_list|(
name|httpSession
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Access Denied."
argument_list|)
throw|;
block|}
comment|// Check that a valid subject area is selected
name|InstructionalOfferingListForm
name|frm
init|=
operator|(
name|InstructionalOfferingListForm
operator|)
name|form
decl_stmt|;
name|ActionMessages
name|errors
init|=
literal|null
decl_stmt|;
name|errors
operator|=
name|frm
operator|.
name|validate
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
expr_stmt|;
comment|// Validation fails
if|if
condition|(
name|errors
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setCollections
argument_list|(
name|request
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showInstructionalOfferingSearch"
argument_list|)
return|;
block|}
comment|// Set Session Variables
name|httpSession
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|SUBJ_AREA_ID_ATTR_NAME
argument_list|,
name|frm
operator|.
name|getSubjectAreaId
argument_list|()
argument_list|)
expr_stmt|;
name|httpSession
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|CRS_NBR_ATTR_NAME
argument_list|,
name|frm
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"1"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"loadInstrFilter"
argument_list|)
argument_list|)
condition|)
block|{
name|setupInstrOffrListSpecificFormFilters
argument_list|(
name|httpSession
argument_list|,
name|frm
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|UserData
operator|.
name|setPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"InstructionalOfferingList.divSec"
argument_list|,
name|frm
operator|.
name|getDivSec
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"InstructionalOfferingList.demand"
argument_list|,
name|frm
operator|.
name|getDemand
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"InstructionalOfferingList.projectedDemand"
argument_list|,
name|frm
operator|.
name|getProjectedDemand
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"InstructionalOfferingList.minPerWk"
argument_list|,
name|frm
operator|.
name|getMinPerWk
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"InstructionalOfferingList.limit"
argument_list|,
name|frm
operator|.
name|getLimit
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"InstructionalOfferingList.roomLimit"
argument_list|,
name|frm
operator|.
name|getRoomLimit
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"InstructionalOfferingList.manager"
argument_list|,
name|frm
operator|.
name|getManager
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"InstructionalOfferingList.datePattern"
argument_list|,
name|frm
operator|.
name|getDatePattern
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"InstructionalOfferingList.timePattern"
argument_list|,
name|frm
operator|.
name|getTimePattern
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"InstructionalOfferingList.instructor"
argument_list|,
name|frm
operator|.
name|getInstructor
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"InstructionalOfferingList.preferences"
argument_list|,
name|frm
operator|.
name|getPreferences
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"InstructionalOfferingList.timetable"
argument_list|,
operator|(
name|frm
operator|.
name|getTimetable
argument_list|()
operator|==
literal|null
condition|?
literal|false
else|:
name|frm
operator|.
name|getTimetable
argument_list|()
operator|.
name|booleanValue
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"InstructionalOfferingList.credit"
argument_list|,
name|frm
operator|.
name|getCredit
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"InstructionalOfferingList.subpartCredit"
argument_list|,
name|frm
operator|.
name|getSubpartCredit
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"InstructionalOfferingList.schedulePrintNote"
argument_list|,
name|frm
operator|.
name|getSchedulePrintNote
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"InstructionalOfferingList.note"
argument_list|,
name|frm
operator|.
name|getNote
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"InstructionalOfferingList.title"
argument_list|,
name|frm
operator|.
name|getTitle
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|frm
operator|.
name|getCanSeeExams
argument_list|()
condition|)
name|UserData
operator|.
name|setPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"InstructionalOfferingList.exams"
argument_list|,
name|frm
operator|.
name|getExams
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"InstructionalOfferingList.consent"
argument_list|,
name|frm
operator|.
name|getConsent
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"InstructionalOfferingList.designatorRequired"
argument_list|,
name|frm
operator|.
name|getDesignatorRequired
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setProperty
argument_list|(
name|httpSession
argument_list|,
literal|"InstructionalOfferingList.sortBy"
argument_list|,
name|frm
operator|.
name|getSortBy
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Perform Search
name|frm
operator|.
name|setCollections
argument_list|(
name|request
argument_list|,
name|getInstructionalOfferings
argument_list|(
name|request
argument_list|,
name|frm
argument_list|)
argument_list|)
expr_stmt|;
name|Collection
name|instrOfferings
init|=
name|frm
operator|.
name|getInstructionalOfferings
argument_list|()
decl_stmt|;
comment|// No results returned
if|if
condition|(
name|instrOfferings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"searchResult"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
name|MSG
operator|.
name|errorNoRecords
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showInstructionalOfferingSearch"
argument_list|)
return|;
block|}
else|else
block|{
name|BackTracker
operator|.
name|markForBack
argument_list|(
name|request
argument_list|,
literal|"instructionalOfferingSearch.do?op=Back&doit=Search&loadInstrFilter=1&subjectAreaId="
operator|+
name|frm
operator|.
name|getSubjectAreaId
argument_list|()
operator|+
literal|"&courseNbr="
operator|+
name|frm
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|MSG
operator|.
name|labelInstructionalOfferings
argument_list|()
operator|+
literal|" ("
operator|+
operator|(
name|frm
operator|.
name|getSubjectAreaAbbv
argument_list|()
operator|==
literal|null
condition|?
operator|(
operator|(
operator|new
name|SubjectAreaDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|frm
operator|.
name|getSubjectAreaId
argument_list|()
argument_list|)
argument_list|)
operator|)
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
else|:
name|frm
operator|.
name|getSubjectAreaAbbv
argument_list|()
operator|)
operator|+
operator|(
name|frm
operator|.
name|getCourseNbr
argument_list|()
operator|==
literal|null
operator|||
name|frm
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|""
else|:
literal|" "
operator|+
name|frm
operator|.
name|getCourseNbr
argument_list|()
operator|)
operator|+
literal|")"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"op"
argument_list|)
operator|==
literal|null
operator|||
operator|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"op"
argument_list|)
operator|!=
literal|null
operator|&&
operator|!
name|request
operator|.
name|getParameter
argument_list|(
literal|"op"
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"Back"
argument_list|)
operator|)
condition|)
block|{
comment|// Search produces 1 result - redirect to offering detail
if|if
condition|(
name|instrOfferings
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|InstructionalOffering
name|io
init|=
operator|(
name|InstructionalOffering
operator|)
name|instrOfferings
operator|.
name|toArray
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"op"
argument_list|,
literal|"view"
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"io"
argument_list|,
name|io
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showInstructionalOfferingDetail"
argument_list|)
return|;
block|}
block|}
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showInstructionalOfferingList"
argument_list|)
return|;
block|}
block|}
specifier|public
name|ActionForward
name|exportPdf
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
name|ActionForward
name|fwd
init|=
name|searchInstructionalOfferings
argument_list|(
name|mapping
argument_list|,
name|form
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
decl_stmt|;
name|InstructionalOfferingListForm
name|frm
init|=
operator|(
name|InstructionalOfferingListForm
operator|)
name|form
decl_stmt|;
if|if
condition|(
name|getErrors
argument_list|(
name|request
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|File
name|pdfFile
init|=
operator|(
operator|new
name|PdfInstructionalOfferingTableBuilder
argument_list|()
operator|)
operator|.
name|pdfTableForInstructionalOfferings
argument_list|(
name|WebSolver
operator|.
name|getClassAssignmentProxy
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
argument_list|,
name|WebSolver
operator|.
name|getExamSolver
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
argument_list|,
name|frm
argument_list|,
operator|new
name|Long
argument_list|(
name|frm
operator|.
name|getSubjectAreaId
argument_list|()
argument_list|)
argument_list|,
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|,
name|frm
operator|.
name|getCourseNbr
argument_list|()
operator|==
literal|null
operator|||
name|frm
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|pdfFile
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|REQUEST_OPEN_URL
argument_list|,
literal|"temp/"
operator|+
name|pdfFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|//response.sendRedirect("temp/"+pdfFile.getName());
block|}
else|else
block|{
name|getErrors
argument_list|(
name|request
argument_list|)
operator|.
name|add
argument_list|(
literal|"searchResult"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
name|MSG
operator|.
name|errorUnableToCreatePdf
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|fwd
return|;
block|}
specifier|public
name|ActionForward
name|worksheetPdf
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
name|ActionForward
name|fwd
init|=
name|searchInstructionalOfferings
argument_list|(
name|mapping
argument_list|,
name|form
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
decl_stmt|;
name|InstructionalOfferingListForm
name|frm
init|=
operator|(
name|InstructionalOfferingListForm
operator|)
name|form
decl_stmt|;
if|if
condition|(
name|getErrors
argument_list|(
name|request
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|File
name|file
init|=
name|ApplicationProperties
operator|.
name|getTempFile
argument_list|(
literal|"worksheet"
argument_list|,
literal|"pdf"
argument_list|)
decl_stmt|;
name|PdfWorksheet
operator|.
name|print
argument_list|(
name|file
argument_list|,
operator|new
name|SubjectAreaDAO
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|frm
operator|.
name|getSubjectAreaId
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|frm
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|REQUEST_OPEN_URL
argument_list|,
literal|"temp/"
operator|+
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
else|else
block|{
name|ActionMessages
name|errors
init|=
name|getErrors
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|errors
operator|.
name|add
argument_list|(
literal|"searchResult"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
name|MSG
operator|.
name|errorUnableToCreateWorksheetPdfNoData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ActionMessages
name|errors
init|=
name|getErrors
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|errors
operator|.
name|add
argument_list|(
literal|"searchResult"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
name|MSG
operator|.
name|errorUnableToCreateWorksheetPdf
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|fwd
return|;
block|}
specifier|public
name|ActionForward
name|saveNotOfferedChanges
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
name|InstructionalOfferingListForm
name|instructionalOfferingListForm
init|=
operator|(
name|InstructionalOfferingListForm
operator|)
name|form
decl_stmt|;
name|instructionalOfferingListForm
operator|.
name|setCollections
argument_list|(
name|request
argument_list|,
name|getInstructionalOfferings
argument_list|(
name|request
argument_list|,
name|instructionalOfferingListForm
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|instructionalOfferingListForm
operator|.
name|getInstructionalOfferings
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showInstructionalOfferingSearch"
argument_list|)
return|;
block|}
else|else
block|{
name|Iterator
name|it
init|=
name|instructionalOfferingListForm
operator|.
name|getInstructionalOfferings
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|InstructionalOffering
name|io
init|=
literal|null
decl_stmt|;
name|InstructionalOfferingDAO
name|dao
init|=
operator|new
name|InstructionalOfferingDAO
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|io
operator|=
operator|(
name|InstructionalOffering
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|dao
operator|.
name|save
argument_list|(
name|io
argument_list|)
expr_stmt|;
block|}
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showInstructionalOfferingList"
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|Set
name|getInstructionalOfferings
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|InstructionalOfferingListForm
name|form
parameter_list|)
block|{
name|HttpSession
name|httpSession
init|=
name|request
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|httpSession
argument_list|)
decl_stmt|;
name|Long
name|sessionId
init|=
operator|(
name|Long
operator|)
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|SESSION_ID_ATTR_NAME
argument_list|)
decl_stmt|;
name|boolean
name|fetchStructure
init|=
literal|true
decl_stmt|;
name|boolean
name|fetchCredits
init|=
literal|false
decl_stmt|;
comment|//singleCourseSelection || form.getCredit().booleanValue();
name|boolean
name|fetchInstructors
init|=
literal|false
decl_stmt|;
comment|//singleCourseSelection || form.getInstructor().booleanValue();
name|boolean
name|fetchPreferences
init|=
literal|false
decl_stmt|;
comment|//singleCourseSelection || form.getPreferences().booleanValue() || form.getTimePattern().booleanValue();
name|boolean
name|fetchAssignments
init|=
literal|false
decl_stmt|;
comment|//singleCourseSelection || (form.getTimetable()!=null&& form.getTimetable().booleanValue());
name|boolean
name|fetchReservations
init|=
literal|false
decl_stmt|;
comment|//singleCourseSelection;
name|TreeSet
name|ts
init|=
name|InstructionalOffering
operator|.
name|search
argument_list|(
name|sessionId
argument_list|,
name|form
operator|.
name|getSubjectAreaId
argument_list|()
argument_list|,
name|form
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|fetchStructure
argument_list|,
name|fetchCredits
argument_list|,
name|fetchInstructors
argument_list|,
name|fetchPreferences
argument_list|,
name|fetchAssignments
argument_list|,
name|fetchReservations
argument_list|)
decl_stmt|;
if|if
condition|(
name|form
operator|.
name|getInstructor
argument_list|()
operator|.
name|booleanValue
argument_list|()
operator|||
name|form
operator|.
name|getPreferences
argument_list|()
operator|.
name|booleanValue
argument_list|()
operator|||
name|form
operator|.
name|getTimePattern
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|Debug
operator|.
name|debug
argument_list|(
literal|"---- Load Instructors ---- "
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|ts
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstructionalOffering
name|io
init|=
operator|(
name|InstructionalOffering
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|ioc
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|k
init|=
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|s
init|=
operator|(
name|SchedulingSubpart
operator|)
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|l
init|=
name|s
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|l
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|l
operator|.
name|next
argument_list|()
decl_stmt|;
name|Hibernate
operator|.
name|initialize
argument_list|(
name|c
operator|.
name|getClassInstructors
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|ts
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstructionalOffering
name|io
init|=
operator|(
name|InstructionalOffering
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|ioc
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|k
init|=
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|s
init|=
operator|(
name|SchedulingSubpart
operator|)
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|l
init|=
name|s
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|l
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|l
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|m
init|=
name|c
operator|.
name|getClassInstructors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|m
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|ci
init|=
operator|(
name|ClassInstructor
operator|)
name|m
operator|.
name|next
argument_list|()
decl_stmt|;
name|Hibernate
operator|.
name|initialize
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|form
operator|.
name|getPreferences
argument_list|()
operator|.
name|booleanValue
argument_list|()
operator|||
name|form
operator|.
name|getTimePattern
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|Debug
operator|.
name|debug
argument_list|(
literal|"---- Load Preferences ---- "
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|ts
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstructionalOffering
name|io
init|=
operator|(
name|InstructionalOffering
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|ioc
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|k
init|=
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|s
init|=
operator|(
name|SchedulingSubpart
operator|)
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
name|Hibernate
operator|.
name|initialize
argument_list|(
name|s
operator|.
name|getPreferences
argument_list|()
argument_list|)
expr_stmt|;
name|Hibernate
operator|.
name|initialize
argument_list|(
name|s
operator|.
name|getDistributionObjects
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|l
init|=
name|s
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|l
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|l
operator|.
name|next
argument_list|()
decl_stmt|;
name|Hibernate
operator|.
name|initialize
argument_list|(
name|c
operator|.
name|getPreferences
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|m
init|=
name|c
operator|.
name|getClassInstructors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|m
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|ci
init|=
operator|(
name|ClassInstructor
operator|)
name|m
operator|.
name|next
argument_list|()
decl_stmt|;
name|Hibernate
operator|.
name|initialize
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getPreferences
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|c
operator|.
name|getControllingDept
argument_list|()
operator|.
name|getPreferences
argument_list|()
expr_stmt|;
name|c
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getPreferences
argument_list|()
expr_stmt|;
name|Hibernate
operator|.
name|initialize
argument_list|(
name|c
operator|.
name|getDistributionObjects
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|form
operator|.
name|getTimetable
argument_list|()
operator|!=
literal|null
operator|&&
name|form
operator|.
name|getTimetable
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|Debug
operator|.
name|debug
argument_list|(
literal|"--- Load Assignments --- "
argument_list|)
expr_stmt|;
name|ClassAssignmentProxy
name|classAssignmentProxy
init|=
name|WebSolver
operator|.
name|getClassAssignmentProxy
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|classAssignmentProxy
operator|!=
literal|null
operator|&&
name|classAssignmentProxy
operator|instanceof
name|Solution
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|ts
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstructionalOffering
name|io
init|=
operator|(
name|InstructionalOffering
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|ioc
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|k
init|=
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|s
init|=
operator|(
name|SchedulingSubpart
operator|)
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|l
init|=
name|s
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|l
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|l
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|Assignment
name|a
init|=
name|classAssignmentProxy
operator|.
name|getAssignment
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
condition|)
name|Hibernate
operator|.
name|initialize
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
block|}
block|}
block|}
block|}
block|}
return|return
operator|(
name|ts
operator|)
return|;
block|}
comment|/**      * Creates an instructional offering      * @param mapping      * @param form      * @param request      * @param response      * @return      * @throws Exception      */
specifier|public
name|ActionForward
name|addInstructionalOfferings
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
name|HttpSession
name|httpSession
init|=
name|request
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Web
operator|.
name|isLoggedIn
argument_list|(
name|httpSession
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Access Denied."
argument_list|)
throw|;
block|}
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|httpSession
argument_list|)
decl_stmt|;
name|Long
name|sessionId
init|=
operator|(
name|Long
operator|)
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|SESSION_ID_ATTR_NAME
argument_list|)
decl_stmt|;
name|InstructionalOfferingListForm
name|instructionalOfferingListForm
init|=
operator|(
name|InstructionalOfferingListForm
operator|)
name|form
decl_stmt|;
name|String
name|courseNbr
init|=
name|instructionalOfferingListForm
operator|.
name|getCourseNbr
argument_list|()
decl_stmt|;
name|String
name|subjAreaId
init|=
name|instructionalOfferingListForm
operator|.
name|getSubjectAreaId
argument_list|()
decl_stmt|;
name|ActionMessages
name|errors
init|=
operator|new
name|ActionMessages
argument_list|()
decl_stmt|;
comment|// Check blank subject area
if|if
condition|(
name|subjAreaId
operator|==
literal|null
operator|||
name|subjAreaId
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"subjAreaId"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.required"
argument_list|,
literal|"Subject Area"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check blank course number
if|if
condition|(
name|courseNbr
operator|==
literal|null
operator|||
name|courseNbr
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|errors
operator|.
name|add
argument_list|(
literal|"courseNbr"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.required"
argument_list|,
literal|"Course Number"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that course number matches a pattern
else|else
block|{
name|String
name|courseNbrRegex
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.courseNumber.pattern"
argument_list|)
decl_stmt|;
name|String
name|courseNbrInfo
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.courseNumber.patternInfo"
argument_list|)
decl_stmt|;
try|try
block|{
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|courseNbrRegex
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|courseNbr
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"courseNbr"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
name|courseNbrInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"courseNbr"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
name|MSG
operator|.
name|errorCourseDoesNotMatchRegEx
argument_list|(
name|courseNbrRegex
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Check if errors were found
if|if
condition|(
operator|!
name|errors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|instructionalOfferingListForm
operator|.
name|setCollections
argument_list|(
name|request
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
if|if
condition|(
name|instructionalOfferingListForm
operator|.
name|getInstructionalOfferings
argument_list|()
operator|==
literal|null
operator|||
name|instructionalOfferingListForm
operator|.
name|getInstructionalOfferings
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showInstructionalOfferingSearch"
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showInstructionalOfferingList"
argument_list|)
return|;
block|}
block|}
comment|// Convert to uppercase - e.g. 001d -> 001D
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.courseNumber.upperCase"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
condition|)
name|courseNbr
operator|=
name|courseNbr
operator|.
name|toUpperCase
argument_list|()
expr_stmt|;
name|instructionalOfferingListForm
operator|.
name|setCourseNbr
argument_list|(
name|courseNbr
argument_list|)
expr_stmt|;
name|instructionalOfferingListForm
operator|.
name|setCollections
argument_list|(
name|request
argument_list|,
name|getInstructionalOfferings
argument_list|(
name|request
argument_list|,
name|instructionalOfferingListForm
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set Session Variables
name|httpSession
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|SUBJ_AREA_ID_ATTR_NAME
argument_list|,
name|instructionalOfferingListForm
operator|.
name|getSubjectAreaId
argument_list|()
argument_list|)
expr_stmt|;
name|httpSession
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|CRS_NBR_ATTR_NAME
argument_list|,
name|instructionalOfferingListForm
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
comment|// Offering exists - redirect to offering detail
name|String
name|courseNumbersMustBeUnique
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.courseNumber.unique"
argument_list|,
literal|"true"
argument_list|)
decl_stmt|;
if|if
condition|(
name|courseNumbersMustBeUnique
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
condition|)
block|{
name|List
name|l
init|=
name|CourseOffering
operator|.
name|search
argument_list|(
name|sessionId
argument_list|,
name|subjAreaId
argument_list|,
name|courseNbr
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// errors.add("courseNbr", new ActionMessage("errors.exists", courseNbr));
name|InstructionalOffering
name|io
init|=
operator|(
operator|(
name|CourseOffering
operator|)
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getInstructionalOffering
argument_list|()
decl_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"op"
argument_list|,
literal|"view"
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"io"
argument_list|,
name|io
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showInstructionalOfferingDetail"
argument_list|)
return|;
block|}
block|}
comment|// No Errors - create Course Offering
name|CourseOffering
name|newCourseOffering
init|=
name|CourseOffering
operator|.
name|addNew
argument_list|(
name|subjAreaId
argument_list|,
name|courseNbr
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Web
operator|.
name|isLoggedIn
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|MSG
operator|.
name|errorAccessDenied
argument_list|()
argument_list|)
throw|;
block|}
name|Debug
operator|.
name|debug
argument_list|(
literal|"before get collection"
argument_list|)
expr_stmt|;
name|instructionalOfferingListForm
operator|.
name|setCollections
argument_list|(
name|request
argument_list|,
name|getInstructionalOfferings
argument_list|(
name|request
argument_list|,
name|instructionalOfferingListForm
argument_list|)
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"after get collection size = "
operator|+
name|instructionalOfferingListForm
operator|.
name|getInstructionalOfferings
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Offering exists - redirect to offering detail
comment|//	    List l2 = CourseOffering.search(sessionId, subjAreaId, courseNbr);
if|if
condition|(
name|newCourseOffering
operator|!=
literal|null
condition|)
block|{
comment|// errors.add("courseNbr", new ActionMessage("errors.exists", courseNbr));
comment|/* 	        InstructionalOffering io = ((CourseOffering) l2.get(0)).getInstructionalOffering(); 	        request.setAttribute("op", "view"); 	        request.setAttribute("io", io.getUniqueId().toString()); 	        return mapping.findForward("showInstructionalOfferingDetail"); 	    	*/
name|MessageResources
name|rsc
init|=
name|getResources
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"op"
argument_list|,
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.editCourseOffering"
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"courseOfferingId"
argument_list|,
name|newCourseOffering
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showCourseOfferingEdit"
argument_list|)
return|;
block|}
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showInstructionalOfferingList"
argument_list|)
return|;
block|}
comment|/** 	 * Updates changes made to instructional offerings 	 * @param mapping 	 * @param form 	 * @param request 	 * @param response 	 * @return 	 * @throws Exception 	 */
comment|//	public ActionForward updateInstructionalOfferings(
comment|//			ActionMapping mapping,
comment|//			ActionForm form,
comment|//			HttpServletRequest request,
comment|//			HttpServletResponse response) throws Exception {
comment|//
comment|//        HttpSession httpSession = request.getSession();
comment|//        if(!Web.isLoggedIn( httpSession )) {
comment|//            throw new Exception ("Access Denied.");
comment|//        }
comment|//
comment|//        User user = Web.getUser(httpSession);
comment|//        Long sessionId = (Long) user.getAttribute(Constants.SESSION_ID_ATTR_NAME);
comment|//
comment|//        // Read values
comment|//	    InstructionalOfferingListForm frm = (InstructionalOfferingListForm) form;
comment|//	    ActionMessages errors = new ActionMessages();
comment|//
comment|//        String subjAreaId = frm.getSubjectAreaId();
comment|//        String courseNbr = frm.getCourseNbr();
comment|//        String ctrCrsOffrId = frm.getCtrlInstrOfferingId();
comment|//        Boolean isControl = frm.getIsControl();
comment|//
comment|//        if(ctrCrsOffrId==null) ctrCrsOffrId = "";
comment|//        if(isControl==null) isControl = new Boolean(false);
comment|//
comment|//        frm.setCollections(request, getInstructionalOfferings(request, frm));
comment|//	    frm.setSubjectAreaAbbv(new SubjectAreaDAO().get(new Long(subjAreaId)).getSubjectAreaAbbreviation());
comment|//
comment|//        List l = CourseOffering.search(sessionId, subjAreaId, courseNbr);
comment|//	    if(l.size()>0) {
comment|//
comment|//            CourseOfferingDAO cdao = new CourseOfferingDAO();
comment|//    	    InstructionalOfferingDAO idao = new InstructionalOfferingDAO();
comment|//    	    org.hibernate.Session hibSession = idao.getSession();
comment|//    	    Transaction tx = hibSession.beginTransaction();
comment|//
comment|//    	    try {
comment|//		        // Update
comment|//		        CourseOffering co = (CourseOffering) l.get(0);
comment|//		        InstructionalOffering io = co.getInstructionalOffering();
comment|//
comment|//		        String ctrCrsOffrId2 = io.getCtrlCourseId().toString();
comment|//		        Boolean isControl2 = co.isIsControl();
comment|//
comment|//		        if(ctrCrsOffrId2==null) ctrCrsOffrId2 = "";
comment|//		        if(isControl2==null) isControl2 = new Boolean(false);
comment|//
comment|//		        // Check if value is changed
comment|//		        if(isControl2.booleanValue()!=isControl.booleanValue()
comment|//		               || !ctrCrsOffrId2.equals(ctrCrsOffrId) ) {
comment|//
comment|//		            // Control flag is changed
comment|//		            if(isControl2.booleanValue()!=isControl.booleanValue()) {
comment|//
comment|//
comment|//		                // It is now a controlling course
comment|//		                if(isControl.booleanValue()) {
comment|//		                    co.setIsControl(isControl);
comment|//
comment|//		                    // Loop through IO and update other controlling course to false
comment|//		                    Set offerings = io.getCourseOfferings();
comment|//		                    Iterator iter = offerings.iterator();
comment|//		                    while(iter.hasNext()) {
comment|//		                        CourseOffering co2 = (CourseOffering) iter.next();
comment|//		                        if(co2.getUniqueId().intValue()!=co.getUniqueId().intValue()&& co2.isIsControl().booleanValue()) {
comment|//		                            co2.setIsControl(new Boolean(false));
comment|//		                        }
comment|//		                    }
comment|//		                    idao.saveOrUpdate(io);
comment|//		                }
comment|//		                // It is now NOT a controlling course
comment|//		                else {
comment|//
comment|//			                // Check that controlling course is not the same
comment|//		                    if(ctrCrsOffrId2.equals(ctrCrsOffrId) || ctrCrsOffrId.trim().length()==0) {
comment|//		        		        errors.add("ctrlInstrOfferingId", new ActionMessage("errors.ctrlCourse.invalid"));
comment|//		                    }
comment|//		                    else {
comment|//
comment|//		                        // Has other course offerings attached to it
comment|//		                        if(io.getCourseOfferings().size()>1) {
comment|//			        		        errors.add("ctrlInstrOfferingId", new ActionMessage("errors.ctrlCourse.multipleChildren"));
comment|//		                        }
comment|//		                        else {
comment|//								    io.removeCourseOffering(co);
comment|//								    io.setCourseOfferings(null);
comment|//								    co.setIsControl(new Boolean(false));
comment|//								    co.setInstructionalOffering(null);
comment|//								    Event.deleteFromEvents(hibSession, io);
comment|//								    Exam.deleteFromExams(hibSession, io);
comment|//								    idao.delete(io);
comment|//
comment|//			                        CourseOffering co2 = cdao.get(new Long(ctrCrsOffrId));
comment|//			                        InstructionalOffering io2 = co2.getInstructionalOffering();
comment|//			                        io2.addTocourseOfferings(co);
comment|//			                        co.setInstructionalOffering(io2);
comment|//			                        idao.save(io2);
comment|//		                        }
comment|//		                    }
comment|//		                }
comment|//		            }
comment|//		            else {
comment|//			            // Controlling course has changed
comment|//			            if(!ctrCrsOffrId2.equals(ctrCrsOffrId)) {
comment|//			                // Check that is not a controlling course
comment|//			                if(!isControl2.booleanValue()) {
comment|//		                        // Has other course offerings attached to it
comment|//		                        if(io.getCourseOfferings().size()>1&& isControl.booleanValue()) {
comment|//			        		        errors.add("ctrlInstrOfferingId", new ActionMessage("errors.ctrlCourse.multipleChildren"));
comment|//		                        }
comment|//		                        else {
comment|//								    io.removeCourseOffering(co);
comment|//								    co.setInstructionalOffering(null);
comment|//								    idao.save(io);
comment|//
comment|//								    CourseOffering co2 = cdao.get(new Long(ctrCrsOffrId));
comment|//			                        InstructionalOffering io2 = co2.getInstructionalOffering();
comment|//			                        io2.addTocourseOfferings(co);
comment|//			                        co.setInstructionalOffering(io2);
comment|//			                        idao.save(io2);
comment|//		                        }
comment|//			                }
comment|//			                // Ambiguous - cannot have a controlling course if it is controlling
comment|//			                else {
comment|//			                    errors.add("ctrlInstrOfferingId",
comment|//	                            	new ActionMessage("errors.exception",
comment|//	                            	    "Ambiguous operation requested - cannot assign a controlling offering it is flagged as a controlling course"));
comment|//			                }
comment|//			            }
comment|//		            }
comment|//
comment|//				    tx.commit();
comment|//			    }
comment|//	        }
comment|//		    catch (Exception e) {
comment|//		        tx.rollback();
comment|//		        Debug.error(e);
comment|//		        errors.add("", new ActionMessage("errors.exception", "ERRORS: " + e.getMessage()));
comment|//			    addErrors(request, errors);
comment|//			    return mapping.findForward("editInstructionalOffering");
comment|//		    }
comment|//	    }
comment|//	    else {
comment|//	        String crsName = frm.getSubjectAreaAbbv() + " " + frm.getCourseNbr();
comment|//	        errors.add("courseNbr", new ActionMessage("errors.lookup.notFound", "Course Offering: " + crsName ));
comment|//	    }
comment|//
comment|//	    addErrors(request, errors);
comment|//	    if(errors.size()>0)
comment|//		    return mapping.findForward("editInstructionalOffering");
comment|//
comment|//	    frm.setCollections(request, getInstructionalOfferings(request, frm));
comment|//	    return mapping.findForward("showInstructionalOfferingList");
comment|//	}
comment|//	public ActionForward deleteCourseOffering(
comment|//			ActionMapping mapping,
comment|//			ActionForm form,
comment|//			HttpServletRequest request,
comment|//			HttpServletResponse response) throws Exception {
comment|//
comment|//        HttpSession httpSession = request.getSession();
comment|//        if(!Web.isLoggedIn( httpSession )) {
comment|//            throw new Exception ("Access Denied.");
comment|//        }
comment|//
comment|//        User user = Web.getUser(httpSession);
comment|//        Long sessionId = (Long) user.getAttribute(Constants.SESSION_ID_ATTR_NAME);
comment|//
comment|//        InstructionalOfferingListForm frm = (InstructionalOfferingListForm) form;
comment|//        ActionMessages errors = new ActionMessages();
comment|//
comment|//        String subjAreaId = frm.getSubjectAreaId();
comment|//        String courseNbr = frm.getCourseNbr();
comment|//        List l = CourseOffering.search(sessionId, subjAreaId, courseNbr);
comment|//	    if(l.size()>0) {
comment|//	        // Delete
comment|//	        InstructionalOfferingDAO idao = new InstructionalOfferingDAO();
comment|//	        CourseOffering co = (CourseOffering) l.get(0);
comment|//	        InstructionalOffering io = co.getInstructionalOffering();
comment|//
comment|//    	    org.hibernate.Session hibSession = idao.getSession();
comment|//    	    Transaction tx = hibSession.beginTransaction();
comment|//
comment|//    	    try {
comment|//    	        Event.deleteFromEvents(hibSession, co);
comment|//                Exam.deleteFromExams(hibSession, co);
comment|//
comment|//    	        if(co.isIsControl().booleanValue()) {
comment|//    	            Event.deleteFromEvents(hibSession, io);
comment|//    	            Exam.deleteFromExams(hibSession, io);
comment|//    	            idao.delete(io);
comment|//    	        } else {
comment|//    	            io.removeCourseOffering(co);
comment|//    	            idao.save(io);
comment|//    	        }
comment|//
comment|//		        tx.commit();
comment|//    	    }
comment|//		    catch (Exception e) {
comment|//		        tx.rollback();
comment|//		        Debug.error(e);
comment|//		        errors.add("subjectAreaId", new ActionMessage("errors.exception", e.getMessage()));
comment|//		        addErrors(request, errors);
comment|//			    return mapping.findForward("addInstructionalOffering");
comment|//		    }
comment|//	    }
comment|//
comment|//	    // Redirect back to search
comment|//	    frm.setSubjectAreaId(subjAreaId);
comment|//	    frm.setCourseNbr("");
comment|//	    frm.setCollections(request, getInstructionalOfferings(request, frm));
comment|//	    return mapping.findForward("showInstructionalOfferingList");
comment|//	}
specifier|public
specifier|static
name|void
name|setupInstrOffrListSpecificFormFilters
parameter_list|(
name|HttpSession
name|httpSession
parameter_list|,
name|InstructionalOfferingListForm
name|form
parameter_list|)
block|{
name|form
operator|.
name|setDivSec
argument_list|(
operator|new
name|Boolean
argument_list|(
name|UserData
operator|.
name|getPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"InstructionalOfferingList.divSec"
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setDemand
argument_list|(
operator|new
name|Boolean
argument_list|(
name|UserData
operator|.
name|getPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"InstructionalOfferingList.demand"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setProjectedDemand
argument_list|(
operator|new
name|Boolean
argument_list|(
name|UserData
operator|.
name|getPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"InstructionalOfferingList.projectedDemand"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setMinPerWk
argument_list|(
operator|new
name|Boolean
argument_list|(
name|UserData
operator|.
name|getPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"InstructionalOfferingList.minPerWk"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setLimit
argument_list|(
operator|new
name|Boolean
argument_list|(
name|UserData
operator|.
name|getPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"InstructionalOfferingList.limit"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setRoomLimit
argument_list|(
operator|new
name|Boolean
argument_list|(
name|UserData
operator|.
name|getPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"InstructionalOfferingList.roomLimit"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setManager
argument_list|(
operator|new
name|Boolean
argument_list|(
name|UserData
operator|.
name|getPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"InstructionalOfferingList.manager"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setDatePattern
argument_list|(
operator|new
name|Boolean
argument_list|(
name|UserData
operator|.
name|getPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"InstructionalOfferingList.datePattern"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setTimePattern
argument_list|(
operator|new
name|Boolean
argument_list|(
name|UserData
operator|.
name|getPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"InstructionalOfferingList.timePattern"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setInstructor
argument_list|(
operator|new
name|Boolean
argument_list|(
name|UserData
operator|.
name|getPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"InstructionalOfferingList.instructor"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setPreferences
argument_list|(
operator|new
name|Boolean
argument_list|(
name|UserData
operator|.
name|getPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"InstructionalOfferingList.preferences"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setTimetable
argument_list|(
operator|new
name|Boolean
argument_list|(
name|UserData
operator|.
name|getPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"InstructionalOfferingList.timetable"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setCredit
argument_list|(
operator|new
name|Boolean
argument_list|(
name|UserData
operator|.
name|getPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"InstructionalOfferingList.credit"
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setSubpartCredit
argument_list|(
operator|new
name|Boolean
argument_list|(
name|UserData
operator|.
name|getPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"InstructionalOfferingList.subpartCredit"
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setSchedulePrintNote
argument_list|(
operator|new
name|Boolean
argument_list|(
name|UserData
operator|.
name|getPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"InstructionalOfferingList.schedulePrintNote"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setNote
argument_list|(
operator|new
name|Boolean
argument_list|(
name|UserData
operator|.
name|getPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"InstructionalOfferingList.note"
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setTitle
argument_list|(
operator|new
name|Boolean
argument_list|(
name|UserData
operator|.
name|getPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"InstructionalOfferingList.title"
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setConsent
argument_list|(
operator|new
name|Boolean
argument_list|(
name|UserData
operator|.
name|getPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"InstructionalOfferingList.consent"
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setDesignatorRequired
argument_list|(
operator|new
name|Boolean
argument_list|(
name|UserData
operator|.
name|getPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"InstructionalOfferingList.designatorRequired"
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setSortBy
argument_list|(
name|UserData
operator|.
name|getProperty
argument_list|(
name|httpSession
argument_list|,
literal|"InstructionalOfferingList.sortBy"
argument_list|,
name|ClassListForm
operator|.
name|sSortByName
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|httpSession
argument_list|)
decl_stmt|;
name|TimetableManager
name|manager
init|=
name|TimetableManager
operator|.
name|getManager
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|manager
operator|.
name|canSeeExams
argument_list|(
name|session
argument_list|,
name|user
argument_list|)
condition|)
block|{
name|form
operator|.
name|setCanSeeExams
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|form
operator|.
name|setExams
argument_list|(
operator|new
name|Boolean
argument_list|(
name|UserData
operator|.
name|getPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"InstructionalOfferingList.exams"
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|form
operator|.
name|setCanSeeExams
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
block|}
end_class

end_unit

