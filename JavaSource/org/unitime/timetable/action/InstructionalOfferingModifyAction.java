begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.0 (University Course Timetabling& Student Sectioning Application)  * Copyright (C) 2007, UniTime.org, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|util
operator|.
name|MessageResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|Web
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|InstructionalOfferingModifyForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|BuildingPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeaturePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomGroupPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|ClassComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|SchedulingSubpartComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|Class_DAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DatePatternDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstrOfferingConfigDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstructionalOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SchedulingSubpartDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|LookupTables
import|;
end_import

begin_class
specifier|public
class|class
name|InstructionalOfferingModifyAction
extends|extends
name|Action
block|{
comment|/**      * Method execute      * @param mapping      * @param form      * @param request      * @param response      * @return ActionForward      */
specifier|public
name|ActionForward
name|execute
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|Web
operator|.
name|isLoggedIn
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Access Denied."
argument_list|)
throw|;
block|}
name|MessageResources
name|rsc
init|=
name|getResources
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|TimetableManager
name|tm
init|=
name|TimetableManager
operator|.
name|getManager
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|InstructionalOfferingModifyForm
name|frm
init|=
operator|(
name|InstructionalOfferingModifyForm
operator|)
name|form
decl_stmt|;
name|LookupTables
operator|.
name|setupExternalDepts
argument_list|(
name|request
argument_list|,
operator|(
name|Long
operator|)
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|SESSION_ID_ATTR_NAME
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|user
operator|.
name|isAdmin
argument_list|()
condition|)
block|{
name|request
operator|.
name|setAttribute
argument_list|(
operator|(
name|Department
operator|.
name|EXTERNAL_DEPT_ATTR_NAME
operator|+
literal|"list"
operator|)
argument_list|,
name|request
operator|.
name|getAttribute
argument_list|(
name|Department
operator|.
name|EXTERNAL_DEPT_ATTR_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TreeSet
name|ts
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
operator|(
operator|(
name|TreeSet
operator|)
name|request
operator|.
name|getAttribute
argument_list|(
name|Department
operator|.
name|EXTERNAL_DEPT_ATTR_NAME
argument_list|)
operator|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|d
init|=
operator|(
name|Department
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|tm
operator|.
name|isExternalManager
argument_list|()
condition|)
block|{
if|if
condition|(
name|tm
operator|.
name|getDepartments
argument_list|()
operator|.
name|contains
argument_list|(
name|d
argument_list|)
condition|)
name|ts
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|d
operator|.
name|effectiveStatusType
argument_list|()
operator|.
name|canOwnerEdit
argument_list|()
operator|||
name|tm
operator|.
name|getDepartments
argument_list|()
operator|.
name|contains
argument_list|(
name|d
argument_list|)
condition|)
block|{
name|ts
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|request
operator|.
name|setAttribute
argument_list|(
operator|(
name|Department
operator|.
name|EXTERNAL_DEPT_ATTR_NAME
operator|+
literal|"list"
operator|)
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
comment|// Get operation
name|String
name|op
init|=
operator|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"op"
argument_list|)
operator|==
literal|null
operator|)
condition|?
operator|(
name|frm
operator|.
name|getOp
argument_list|()
operator|==
literal|null
operator|||
name|frm
operator|.
name|getOp
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
condition|?
operator|(
name|request
operator|.
name|getAttribute
argument_list|(
literal|"op"
argument_list|)
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|request
operator|.
name|getAttribute
argument_list|(
literal|"op"
argument_list|)
operator|.
name|toString
argument_list|()
else|:
name|frm
operator|.
name|getOp
argument_list|()
else|:
name|request
operator|.
name|getParameter
argument_list|(
literal|"op"
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|==
literal|null
condition|)
name|op
operator|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"hdnOp"
argument_list|)
expr_stmt|;
if|if
condition|(
name|op
operator|==
literal|null
operator|||
name|op
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Operation could not be interpreted: "
operator|+
name|op
argument_list|)
throw|;
comment|// Instructional Offering Config Id
name|String
name|instrOffrConfigId
init|=
literal|""
decl_stmt|;
comment|// Set up Lists
name|frm
operator|.
name|setOp
argument_list|(
name|op
argument_list|)
expr_stmt|;
comment|// First access to screen
if|if
condition|(
name|op
operator|.
name|equalsIgnoreCase
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.modifyOffering"
argument_list|)
argument_list|)
condition|)
block|{
name|instrOffrConfigId
operator|=
operator|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"uid"
argument_list|)
operator|==
literal|null
operator|)
condition|?
operator|(
name|request
operator|.
name|getAttribute
argument_list|(
literal|"uid"
argument_list|)
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|request
operator|.
name|getAttribute
argument_list|(
literal|"uid"
argument_list|)
operator|.
name|toString
argument_list|()
else|:
name|request
operator|.
name|getParameter
argument_list|(
literal|"uid"
argument_list|)
expr_stmt|;
name|doLoad
argument_list|(
name|request
argument_list|,
name|frm
argument_list|,
name|instrOffrConfigId
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
comment|// Add a class
if|if
condition|(
name|op
operator|.
name|equalsIgnoreCase
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.add"
argument_list|)
argument_list|)
condition|)
block|{
comment|// Validate data input
name|ActionMessages
name|errors
init|=
name|frm
operator|.
name|validate
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|errors
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|String
name|addTemplateClass
init|=
name|frm
operator|.
name|getAddTemplateClassId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|frm
operator|.
name|addNewClassesBasedOnTemplate
argument_list|(
name|addTemplateClass
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Move a class up
if|if
condition|(
name|op
operator|.
name|equalsIgnoreCase
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.moveUp"
argument_list|)
argument_list|)
condition|)
block|{
comment|// Validate data input
name|ActionMessages
name|errors
init|=
name|frm
operator|.
name|validate
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|errors
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|String
name|moveUpClass
init|=
name|frm
operator|.
name|getMoveUpClassId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|frm
operator|.
name|moveClassUp
argument_list|(
name|moveUpClass
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Move a class down
if|if
condition|(
name|op
operator|.
name|equalsIgnoreCase
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.moveDown"
argument_list|)
argument_list|)
condition|)
block|{
comment|// Validate data input
name|ActionMessages
name|errors
init|=
name|frm
operator|.
name|validate
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|errors
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|String
name|moveDownClass
init|=
name|frm
operator|.
name|getMoveDownClassId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|frm
operator|.
name|moveClassDown
argument_list|(
name|moveDownClass
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Remove a class and its children
if|if
condition|(
name|op
operator|.
name|equalsIgnoreCase
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.delete"
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|deletedClass
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"deletedClassId"
argument_list|)
decl_stmt|;
if|if
condition|(
name|deletedClass
operator|!=
literal|null
operator|&&
name|deletedClass
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|frm
operator|.
name|removeFromClasses
argument_list|(
name|deletedClass
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|op
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"multipleLimits"
argument_list|)
condition|)
block|{
name|frm
operator|.
name|setDisplayMaxLimit
argument_list|(
operator|new
name|Boolean
argument_list|(
operator|!
name|frm
operator|.
name|getDisplayMaxLimit
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|frm
operator|.
name|getDisplayMaxLimit
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|frm
operator|.
name|maxLimitCanBeHidden
argument_list|()
condition|)
block|{
name|frm
operator|.
name|setDisplayMaxLimit
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setDisplayOptionForMaxLimit
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Update the classes
if|if
condition|(
name|op
operator|.
name|equalsIgnoreCase
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.update"
argument_list|)
argument_list|)
condition|)
block|{
comment|// Validate data input
name|ActionMessages
name|errors
init|=
name|frm
operator|.
name|validate
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|errors
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|doUpdate
argument_list|(
name|request
argument_list|,
name|frm
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"io"
argument_list|,
name|frm
operator|.
name|getInstrOfferingId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"instructionalOfferingDetail"
argument_list|)
return|;
block|}
else|else
block|{
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|frm
operator|.
name|getInstrOfferingId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|InstructionalOffering
name|io
init|=
operator|(
operator|new
name|InstructionalOfferingDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|frm
operator|.
name|getInstrOfferingId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|io
operator|!=
literal|null
condition|)
name|LookupTables
operator|.
name|setupDatePatterns
argument_list|(
name|request
argument_list|,
literal|"Default"
argument_list|,
literal|null
argument_list|,
name|io
operator|.
name|getDepartment
argument_list|()
argument_list|,
name|io
operator|.
name|getSession
argument_list|()
operator|.
name|getDefaultDatePatternNotNull
argument_list|()
argument_list|)
expr_stmt|;
comment|// Facility Groups
block|}
name|frm
operator|.
name|setDirectionsClassesCanMove
argument_list|()
expr_stmt|;
comment|//after all classes have been loaded into the form tell the form to determine whether each class can be moved up or down.
name|frm
operator|.
name|initalizeSubpartSubtotalsAndDisplayFlags
argument_list|()
expr_stmt|;
name|frm
operator|.
name|initializeDisplayAllClassesInSchedBook
argument_list|()
expr_stmt|;
name|frm
operator|.
name|initializeDisplayAllClassInstructors
argument_list|()
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"instructionalOfferingModify"
argument_list|)
return|;
block|}
comment|/**      * Loads the form with the classes that are part of the instructional offering config      * @param frm Form object      * @param instrCoffrConfigId Instructional Offering Config Id      * @param user User object      */
specifier|private
name|void
name|doLoad
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|InstructionalOfferingModifyForm
name|frm
parameter_list|,
name|String
name|instrOffrConfigId
parameter_list|,
name|User
name|user
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Check uniqueid
if|if
condition|(
name|instrOffrConfigId
operator|==
literal|null
operator|||
name|instrOffrConfigId
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Missing Instructional Offering Config."
argument_list|)
throw|;
comment|// Load details
name|InstrOfferingConfigDAO
name|iocDao
init|=
operator|new
name|InstrOfferingConfigDAO
argument_list|()
decl_stmt|;
name|InstrOfferingConfig
name|ioc
init|=
name|iocDao
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|instrOffrConfigId
argument_list|)
argument_list|)
decl_stmt|;
name|InstructionalOffering
name|io
init|=
name|ioc
operator|.
name|getInstructionalOffering
argument_list|()
decl_stmt|;
name|String
name|showVarLimits
init|=
name|Settings
operator|.
name|getSettingValue
argument_list|(
name|user
argument_list|,
name|Constants
operator|.
name|SETTINGS_SHOW_VAR_LIMITS
argument_list|)
decl_stmt|;
name|frm
operator|.
name|setDisplayOptionForMaxLimit
argument_list|(
operator|new
name|Boolean
argument_list|(
name|showVarLimits
operator|!=
literal|null
operator|&&
operator|!
name|showVarLimits
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"no"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Load form properties
name|frm
operator|.
name|setInstrOffrConfigId
argument_list|(
name|ioc
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setInstrOffrConfigLimit
argument_list|(
name|ioc
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setInstrOfferingId
argument_list|(
name|io
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|io
operator|.
name|getCourseNameWithTitle
argument_list|()
decl_stmt|;
if|if
condition|(
name|io
operator|.
name|hasMultipleConfigurations
argument_list|()
condition|)
block|{
name|name
operator|+=
literal|" ["
operator|+
name|ioc
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
expr_stmt|;
block|}
name|frm
operator|.
name|setInstrOfferingName
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
operator|==
literal|null
operator|||
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Instructional Offering Config has not been defined."
argument_list|)
throw|;
name|ArrayList
name|subpartList
init|=
operator|new
name|ArrayList
argument_list|(
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|subpartList
argument_list|,
operator|new
name|SchedulingSubpartComparator
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|subpartList
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|ss
init|=
operator|(
name|SchedulingSubpart
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|getClasses
argument_list|()
operator|==
literal|null
operator|||
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Initial setup of Instructional Offering Config has not been completed."
argument_list|)
throw|;
if|if
condition|(
name|ss
operator|.
name|getParentSubpart
argument_list|()
operator|==
literal|null
condition|)
block|{
name|loadClasses
argument_list|(
name|frm
argument_list|,
name|user
argument_list|,
name|ss
operator|.
name|getClasses
argument_list|()
argument_list|,
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
argument_list|,
operator|new
name|String
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|frm
operator|.
name|initializeOrigSubparts
argument_list|()
expr_stmt|;
name|frm
operator|.
name|setDirectionsClassesCanMove
argument_list|()
expr_stmt|;
comment|//after all classes have been loaded into the form tell the form to determine whether each class can be moved up or down.
name|frm
operator|.
name|initalizeSubpartSubtotalsAndDisplayFlags
argument_list|()
expr_stmt|;
name|frm
operator|.
name|initializeDisplayAllClassesInSchedBook
argument_list|()
expr_stmt|;
name|frm
operator|.
name|initializeDisplayAllClassInstructors
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|loadClasses
parameter_list|(
name|InstructionalOfferingModifyForm
name|frm
parameter_list|,
name|User
name|user
parameter_list|,
name|Set
name|classes
parameter_list|,
name|Boolean
name|isReadOnly
parameter_list|,
name|String
name|indent
parameter_list|)
block|{
if|if
condition|(
name|classes
operator|!=
literal|null
operator|&&
name|classes
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ArrayList
name|classesList
init|=
operator|new
name|ArrayList
argument_list|(
name|classes
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|classesList
argument_list|,
operator|new
name|ClassComparator
argument_list|(
name|ClassComparator
operator|.
name|COMPARE_BY_ITYPE
argument_list|)
argument_list|)
expr_stmt|;
name|Boolean
name|readOnlyClass
init|=
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Class_
name|cls
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|classesList
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|cls
operator|=
operator|(
name|Class_
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isReadOnly
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|readOnlyClass
operator|=
operator|new
name|Boolean
argument_list|(
name|isReadOnly
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|readOnlyClass
operator|=
operator|new
name|Boolean
argument_list|(
operator|!
name|cls
operator|.
name|isEditableBy
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|frm
operator|.
name|addToClasses
argument_list|(
name|cls
argument_list|,
name|readOnlyClass
argument_list|,
name|indent
argument_list|)
expr_stmt|;
name|loadClasses
argument_list|(
name|frm
argument_list|,
name|user
argument_list|,
name|cls
operator|.
name|getChildClasses
argument_list|()
argument_list|,
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
argument_list|,
name|indent
operator|+
literal|"&nbsp;&nbsp;&nbsp;&nbsp;"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Update the instructional offering config      * @param request      * @param frm      */
specifier|private
name|void
name|doUpdate
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|InstructionalOfferingModifyForm
name|frm
parameter_list|,
name|User
name|user
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Get Instructional Offering Config
name|InstrOfferingConfigDAO
name|iocdao
init|=
operator|new
name|InstrOfferingConfigDAO
argument_list|()
decl_stmt|;
name|InstrOfferingConfig
name|ioc
init|=
name|iocdao
operator|.
name|get
argument_list|(
name|frm
operator|.
name|getInstrOffrConfigId
argument_list|()
argument_list|)
decl_stmt|;
name|Session
name|hibSession
init|=
name|iocdao
operator|.
name|getSession
argument_list|()
decl_stmt|;
comment|// Get default room group
name|RoomGroup
name|rg
init|=
operator|(
name|RoomGroup
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from RoomGroup as rg where rg.global = true and rg.defaultGroup= true"
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
comment|// If the instructional offering config limit has changed update it.
if|if
condition|(
operator|!
name|frm
operator|.
name|getInstrOffrConfigLimit
argument_list|()
operator|.
name|equals
argument_list|(
name|ioc
operator|.
name|getLimit
argument_list|()
argument_list|)
condition|)
block|{
name|ioc
operator|.
name|setLimit
argument_list|(
name|frm
operator|.
name|getInstrOffrConfigLimit
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|update
argument_list|(
name|ioc
argument_list|)
expr_stmt|;
block|}
comment|// Get map of subpart ownership so that after the classes have changed it is possible to see if the ownership for a subparts has changed
name|HashMap
name|origSubpartManagingDept
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SchedulingSubpart
name|ss
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ss
operator|=
operator|(
name|SchedulingSubpart
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|origSubpartManagingDept
operator|.
name|put
argument_list|(
name|ss
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|ss
operator|.
name|getManagingDept
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// For all added classes, create the classes and save them, get back a map of the temp ids to the new classes
name|HashMap
name|tmpClassIdsToClasses
init|=
name|addClasses
argument_list|(
name|frm
argument_list|,
name|ioc
argument_list|,
name|hibSession
argument_list|,
name|user
argument_list|)
decl_stmt|;
comment|// For all changed classes, update them
name|modifyClasses
argument_list|(
name|frm
argument_list|,
name|ioc
argument_list|,
name|hibSession
argument_list|,
name|rg
argument_list|,
name|tmpClassIdsToClasses
argument_list|)
expr_stmt|;
comment|// Update subpart ownership
name|modifySubparts
argument_list|(
name|ioc
argument_list|,
name|origSubpartManagingDept
argument_list|,
name|rg
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
comment|// Delete all classes in the original classes that are no longer in the modified classes
name|deleteClasses
argument_list|(
name|frm
argument_list|,
name|ioc
argument_list|,
name|hibSession
argument_list|,
name|tmpClassIdsToClasses
argument_list|)
expr_stmt|;
name|ioc
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|computeLabels
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|request
argument_list|,
name|ioc
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|CLASS_SETUP
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|UPDATE
argument_list|,
name|ioc
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|refresh
argument_list|(
name|ioc
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|refresh
argument_list|(
name|ioc
operator|.
name|getInstructionalOffering
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
block|}
throw|throw
name|e
throw|;
block|}
block|}
specifier|private
name|void
name|modifySubparts
parameter_list|(
name|InstrOfferingConfig
name|ioc
parameter_list|,
name|HashMap
name|origSubpartManagingDept
parameter_list|,
name|RoomGroup
name|rg
parameter_list|,
name|Session
name|hibSession
parameter_list|)
block|{
if|if
condition|(
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SchedulingSubpart
name|ss
init|=
literal|null
decl_stmt|;
name|Department
name|origManagingDept
init|=
literal|null
decl_stmt|;
name|Department
name|currentManagingDept
init|=
literal|null
decl_stmt|;
name|TimePref
name|tp
init|=
literal|null
decl_stmt|;
name|RoomPref
name|rp
init|=
literal|null
decl_stmt|;
name|BuildingPref
name|bp
init|=
literal|null
decl_stmt|;
name|RoomFeaturePref
name|rfp
init|=
literal|null
decl_stmt|;
name|RoomGroupPref
name|rgp
init|=
literal|null
decl_stmt|;
name|TimePref
name|ntp
init|=
literal|null
decl_stmt|;
name|RoomPref
name|nrp
init|=
literal|null
decl_stmt|;
name|BuildingPref
name|nbp
init|=
literal|null
decl_stmt|;
name|RoomFeaturePref
name|nrfp
init|=
literal|null
decl_stmt|;
name|RoomGroupPref
name|nrgp
init|=
literal|null
decl_stmt|;
name|Class_
name|c
init|=
literal|null
decl_stmt|;
name|Set
name|prefObjs
init|=
literal|null
decl_stmt|;
name|boolean
name|classChanged
decl_stmt|;
comment|//FacilityGroup deptFacilityGroup = FacilityGroup.getFacilityGroupByReference(Constants.FACILITY_GROUP_DEPT);
name|Department
name|controllingDept
init|=
literal|null
decl_stmt|;
name|PreferenceLevel
name|prefLevel
init|=
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ss
operator|=
operator|(
name|SchedulingSubpart
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|controllingDept
operator|==
literal|null
condition|)
block|{
name|controllingDept
operator|=
name|ss
operator|.
name|getControllingDept
argument_list|()
expr_stmt|;
block|}
name|currentManagingDept
operator|=
name|ss
operator|.
name|getManagingDept
argument_list|()
expr_stmt|;
name|origManagingDept
operator|=
operator|(
name|Department
operator|)
name|origSubpartManagingDept
operator|.
name|get
argument_list|(
name|ss
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|origManagingDept
operator|!=
literal|null
operator|&&
operator|!
name|currentManagingDept
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|origManagingDept
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|origManagingDept
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|controllingDept
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|ss
operator|.
name|getClasses
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|it2
init|=
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|c
operator|=
operator|(
name|Class_
operator|)
name|it2
operator|.
name|next
argument_list|()
expr_stmt|;
name|classChanged
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|origManagingDept
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|prefObjs
operator|=
name|c
operator|.
name|getTimePatterns
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|it3
init|=
name|ss
operator|.
name|getTimePreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it3
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|tp
operator|=
operator|(
name|TimePref
operator|)
name|it3
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|prefObjs
operator|!=
literal|null
operator|&&
operator|!
name|prefObjs
operator|.
name|contains
argument_list|(
name|tp
operator|.
name|getTimePattern
argument_list|()
argument_list|)
condition|)
block|{
name|ntp
operator|=
operator|new
name|TimePref
argument_list|()
expr_stmt|;
name|ntp
operator|.
name|setOwner
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|ntp
operator|.
name|setPrefLevel
argument_list|(
name|prefLevel
argument_list|)
expr_stmt|;
name|ntp
operator|.
name|setTimePattern
argument_list|(
name|tp
operator|.
name|getTimePattern
argument_list|()
argument_list|)
expr_stmt|;
name|ntp
operator|.
name|setPreference
argument_list|(
name|tp
operator|.
name|getPreference
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|addTopreferences
argument_list|(
name|ntp
argument_list|)
expr_stmt|;
name|classChanged
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|prefObjs
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|it3
init|=
name|c
operator|.
name|getBuildingPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it3
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|prefObjs
operator|.
name|add
argument_list|(
operator|(
operator|(
name|BuildingPref
operator|)
name|it3
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getBuilding
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|it3
init|=
name|ss
operator|.
name|getBuildingPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it3
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|bp
operator|=
operator|(
name|BuildingPref
operator|)
name|it3
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|prefObjs
operator|.
name|contains
argument_list|(
name|bp
operator|.
name|getBuilding
argument_list|()
argument_list|)
condition|)
block|{
name|nbp
operator|=
operator|new
name|BuildingPref
argument_list|()
expr_stmt|;
name|nbp
operator|.
name|setOwner
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|nbp
operator|.
name|setPrefLevel
argument_list|(
name|bp
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
expr_stmt|;
name|nbp
operator|.
name|setBuilding
argument_list|(
name|bp
operator|.
name|getBuilding
argument_list|()
argument_list|)
expr_stmt|;
name|nbp
operator|.
name|setDistanceFrom
argument_list|(
name|bp
operator|.
name|getDistanceFrom
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|addTopreferences
argument_list|(
name|nbp
argument_list|)
expr_stmt|;
name|classChanged
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|prefObjs
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|it3
init|=
name|c
operator|.
name|getRoomPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it3
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|prefObjs
operator|.
name|add
argument_list|(
operator|(
operator|(
name|RoomPref
operator|)
name|it3
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getRoom
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|it3
init|=
name|ss
operator|.
name|getRoomPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it3
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|rp
operator|=
operator|(
name|RoomPref
operator|)
name|it3
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|prefObjs
operator|.
name|contains
argument_list|(
name|rp
operator|.
name|getRoom
argument_list|()
argument_list|)
condition|)
block|{
name|nrp
operator|=
operator|new
name|RoomPref
argument_list|()
expr_stmt|;
name|nrp
operator|.
name|setOwner
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|nrp
operator|.
name|setPrefLevel
argument_list|(
name|rp
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
expr_stmt|;
name|nrp
operator|.
name|setRoom
argument_list|(
name|rp
operator|.
name|getRoom
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|addTopreferences
argument_list|(
name|nrp
argument_list|)
expr_stmt|;
name|classChanged
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|prefObjs
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|it3
init|=
name|c
operator|.
name|getRoomFeaturePreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it3
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|prefObjs
operator|.
name|add
argument_list|(
operator|(
operator|(
name|RoomFeaturePref
operator|)
name|it3
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getRoomFeature
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|it3
init|=
name|ss
operator|.
name|getRoomFeaturePreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it3
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|rfp
operator|=
operator|(
name|RoomFeaturePref
operator|)
name|it3
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|prefObjs
operator|.
name|contains
argument_list|(
name|rfp
operator|.
name|getRoomFeature
argument_list|()
argument_list|)
condition|)
block|{
name|nrfp
operator|=
operator|new
name|RoomFeaturePref
argument_list|()
expr_stmt|;
name|nrfp
operator|.
name|setOwner
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|nrfp
operator|.
name|setPrefLevel
argument_list|(
name|rfp
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
expr_stmt|;
name|nrfp
operator|.
name|setRoomFeature
argument_list|(
name|rfp
operator|.
name|getRoomFeature
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|addTopreferences
argument_list|(
name|nrfp
argument_list|)
expr_stmt|;
name|classChanged
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|prefObjs
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|it3
init|=
name|c
operator|.
name|getRoomGroupPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it3
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|prefObjs
operator|.
name|add
argument_list|(
operator|(
operator|(
name|RoomGroupPref
operator|)
name|it3
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getRoomGroup
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|it3
init|=
name|ss
operator|.
name|getRoomGroupPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it3
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|rgp
operator|=
operator|(
name|RoomGroupPref
operator|)
name|it3
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|prefObjs
operator|.
name|contains
argument_list|(
name|rgp
operator|.
name|getRoomGroup
argument_list|()
argument_list|)
condition|)
block|{
name|nrgp
operator|=
operator|new
name|RoomGroupPref
argument_list|()
expr_stmt|;
name|nrgp
operator|.
name|setOwner
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|nrgp
operator|.
name|setPrefLevel
argument_list|(
name|rgp
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
expr_stmt|;
name|nrgp
operator|.
name|setRoomGroup
argument_list|(
name|rgp
operator|.
name|getRoomGroup
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|addTopreferences
argument_list|(
name|nrgp
argument_list|)
expr_stmt|;
name|classChanged
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|classChanged
condition|)
block|{
name|hibSession
operator|.
name|update
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|ss
operator|.
name|deleteAllDistributionPreferences
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
name|boolean
name|weaken
init|=
literal|true
decl_stmt|;
if|if
condition|(
operator|!
name|currentManagingDept
operator|.
name|isExternalManager
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
name|weaken
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|weaken
operator|&&
name|currentManagingDept
operator|.
name|isAllowReqTime
argument_list|()
operator|!=
literal|null
operator|&&
name|currentManagingDept
operator|.
name|isAllowReqTime
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
name|weaken
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|weaken
operator|&&
name|ss
operator|.
name|getControllingDept
argument_list|()
operator|.
name|isAllowReqTime
argument_list|()
operator|!=
literal|null
operator|&&
name|ss
operator|.
name|getControllingDept
argument_list|()
operator|.
name|isAllowReqTime
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
name|weaken
operator|=
literal|false
expr_stmt|;
name|Set
name|timePrefs
init|=
name|ss
operator|.
name|getTimePreferences
argument_list|()
decl_stmt|;
name|Set
name|prefs
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|prefs
operator|.
name|addAll
argument_list|(
name|ss
operator|.
name|getPreferences
argument_list|()
argument_list|)
expr_stmt|;
name|ss
operator|.
name|getPreferences
argument_list|()
operator|.
name|removeAll
argument_list|(
name|ss
operator|.
name|getPreferences
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|it2
init|=
name|timePrefs
operator|.
name|iterator
argument_list|()
init|;
name|it2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePref
name|timePref
init|=
operator|(
name|TimePref
operator|)
name|it2
operator|.
name|next
argument_list|()
decl_stmt|;
name|tp
operator|=
operator|new
name|TimePref
argument_list|()
expr_stmt|;
name|tp
operator|.
name|setOwner
argument_list|(
name|ss
argument_list|)
expr_stmt|;
name|tp
operator|.
name|setPrefLevel
argument_list|(
name|timePref
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
expr_stmt|;
name|tp
operator|.
name|setTimePattern
argument_list|(
name|timePref
operator|.
name|getTimePattern
argument_list|()
argument_list|)
expr_stmt|;
name|tp
operator|.
name|setPreference
argument_list|(
name|timePref
operator|.
name|getPreference
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|weaken
condition|)
name|tp
operator|.
name|weakenHardPreferences
argument_list|()
expr_stmt|;
name|ss
operator|.
name|addTopreferences
argument_list|(
name|tp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|currentManagingDept
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|controllingDept
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|rgp
operator|=
operator|new
name|RoomGroupPref
argument_list|()
expr_stmt|;
name|rgp
operator|.
name|setOwner
argument_list|(
name|ss
argument_list|)
expr_stmt|;
name|rgp
operator|.
name|setPrefLevel
argument_list|(
name|prefLevel
argument_list|)
expr_stmt|;
name|rgp
operator|.
name|setRoomGroup
argument_list|(
name|rg
argument_list|)
expr_stmt|;
name|ss
operator|.
name|addTopreferences
argument_list|(
name|rgp
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|update
argument_list|(
name|ss
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|buildClassList
parameter_list|(
name|Set
name|classes
parameter_list|,
name|ArrayList
name|lst
parameter_list|)
block|{
if|if
condition|(
name|classes
operator|!=
literal|null
operator|&&
name|classes
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ArrayList
name|classesList
init|=
operator|new
name|ArrayList
argument_list|(
name|classes
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|classesList
argument_list|,
operator|new
name|ClassComparator
argument_list|(
name|ClassComparator
operator|.
name|COMPARE_BY_ITYPE
argument_list|)
argument_list|)
expr_stmt|;
name|Class_
name|c
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|it2
init|=
name|classesList
operator|.
name|iterator
argument_list|()
init|;
name|it2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|c
operator|=
operator|(
name|Class_
operator|)
name|it2
operator|.
name|next
argument_list|()
expr_stmt|;
name|lst
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|buildClassList
argument_list|(
name|c
operator|.
name|getChildClasses
argument_list|()
argument_list|,
name|lst
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|deleteClasses
parameter_list|(
name|InstructionalOfferingModifyForm
name|frm
parameter_list|,
name|InstrOfferingConfig
name|ioc
parameter_list|,
name|Session
name|hibSession
parameter_list|,
name|HashMap
name|tmpClassIdsToRealClasses
parameter_list|)
block|{
if|if
condition|(
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SchedulingSubpart
name|ss
init|=
literal|null
decl_stmt|;
name|ArrayList
name|lst
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|ArrayList
name|subpartList
init|=
operator|new
name|ArrayList
argument_list|(
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|subpartList
argument_list|,
operator|new
name|SchedulingSubpartComparator
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|subpartList
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ss
operator|=
operator|(
name|SchedulingSubpart
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|ss
operator|.
name|getParentSubpart
argument_list|()
operator|==
literal|null
condition|)
block|{
name|buildClassList
argument_list|(
name|ss
operator|.
name|getClasses
argument_list|()
argument_list|,
name|lst
argument_list|)
expr_stmt|;
block|}
block|}
name|Class_
name|c
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
operator|(
name|lst
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|c
operator|=
operator|(
name|Class_
operator|)
name|lst
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|frm
operator|.
name|getClassIds
argument_list|()
operator|.
name|contains
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|&&
operator|!
name|tmpClassIdsToRealClasses
operator|.
name|containsValue
argument_list|(
name|c
argument_list|)
condition|)
block|{
if|if
condition|(
name|c
operator|.
name|getParentClass
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Class_
name|parent
init|=
name|c
operator|.
name|getParentClass
argument_list|()
decl_stmt|;
name|parent
operator|.
name|getChildClasses
argument_list|()
operator|.
name|remove
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|update
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getClasses
argument_list|()
operator|.
name|remove
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getPreferences
argument_list|()
operator|!=
literal|null
condition|)
name|c
operator|.
name|getPreferences
argument_list|()
operator|.
name|removeAll
argument_list|(
name|c
operator|.
name|getPreferences
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|HashMap
name|addClasses
parameter_list|(
name|InstructionalOfferingModifyForm
name|frm
parameter_list|,
name|InstrOfferingConfig
name|ioc
parameter_list|,
name|Session
name|hibSession
parameter_list|,
name|User
name|user
parameter_list|)
block|{
name|HashMap
name|tmpClsToRealClass
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|SchedulingSubpartDAO
name|ssdao
init|=
operator|new
name|SchedulingSubpartDAO
argument_list|()
decl_stmt|;
name|SchedulingSubpart
name|ss
init|=
literal|null
decl_stmt|;
name|Class_DAO
name|cdao
init|=
operator|new
name|Class_DAO
argument_list|()
decl_stmt|;
name|Class_
name|parentClass
init|=
literal|null
decl_stmt|;
name|DepartmentDAO
name|deptdao
init|=
operator|new
name|DepartmentDAO
argument_list|()
decl_stmt|;
name|Department
name|managingDept
init|=
literal|null
decl_stmt|;
name|DatePatternDAO
name|dpdao
init|=
operator|new
name|DatePatternDAO
argument_list|()
decl_stmt|;
name|DatePattern
name|dp
init|=
literal|null
decl_stmt|;
name|Iterator
name|it1
init|=
name|frm
operator|.
name|getClassIds
argument_list|()
operator|.
name|listIterator
argument_list|()
decl_stmt|;
name|Iterator
name|it2
init|=
name|frm
operator|.
name|getSubpartIds
argument_list|()
operator|.
name|listIterator
argument_list|()
decl_stmt|;
name|Iterator
name|it3
init|=
name|frm
operator|.
name|getParentClassIds
argument_list|()
operator|.
name|listIterator
argument_list|()
decl_stmt|;
name|Iterator
name|it4
init|=
name|frm
operator|.
name|getMinClassLimits
argument_list|()
operator|.
name|listIterator
argument_list|()
decl_stmt|;
name|Iterator
name|it5
init|=
name|frm
operator|.
name|getDepartments
argument_list|()
operator|.
name|listIterator
argument_list|()
decl_stmt|;
name|Iterator
name|it6
init|=
name|frm
operator|.
name|getDatePatterns
argument_list|()
operator|.
name|listIterator
argument_list|()
decl_stmt|;
name|Iterator
name|it7
init|=
name|frm
operator|.
name|getNumberOfRooms
argument_list|()
operator|.
name|listIterator
argument_list|()
decl_stmt|;
name|Iterator
name|it8
init|=
name|frm
operator|.
name|getMaxClassLimits
argument_list|()
operator|.
name|listIterator
argument_list|()
decl_stmt|;
name|Iterator
name|it9
init|=
name|frm
operator|.
name|getRoomRatios
argument_list|()
operator|.
name|listIterator
argument_list|()
decl_stmt|;
name|Iterator
name|it10
init|=
name|frm
operator|.
name|getDisplayInstructors
argument_list|()
operator|.
name|listIterator
argument_list|()
decl_stmt|;
name|Iterator
name|it11
init|=
name|frm
operator|.
name|getDisplayInScheduleBooks
argument_list|()
operator|.
name|listIterator
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|it1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Long
name|classId
init|=
operator|new
name|Long
argument_list|(
name|it1
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Long
name|subpartId
init|=
operator|new
name|Long
argument_list|(
name|it2
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|parentId
init|=
name|it3
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Long
name|parentClassId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|parentId
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
name|parentClassId
operator|=
operator|new
name|Long
argument_list|(
name|parentId
argument_list|)
expr_stmt|;
name|Integer
name|minClassLimit
init|=
operator|new
name|Integer
argument_list|(
name|it4
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|managingDeptIdString
init|=
operator|(
name|String
operator|)
name|it5
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|managingDeptId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|managingDeptIdString
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
name|managingDeptId
operator|=
operator|new
name|Long
argument_list|(
name|managingDeptIdString
argument_list|)
expr_stmt|;
name|String
name|datePatternId
init|=
name|it6
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Long
name|datePattern
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|datePatternId
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
name|datePattern
operator|=
operator|new
name|Long
argument_list|(
name|datePatternId
argument_list|)
expr_stmt|;
name|Integer
name|numberOfRooms
init|=
operator|new
name|Integer
argument_list|(
name|it7
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Integer
name|maxClassLimit
init|=
operator|new
name|Integer
argument_list|(
name|it8
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Float
name|roomRatio
init|=
operator|new
name|Float
argument_list|(
name|it9
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|displayInstructorStr
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|it10
operator|.
name|hasNext
argument_list|()
condition|)
name|displayInstructorStr
operator|=
operator|(
name|String
operator|)
name|it10
operator|.
name|next
argument_list|()
expr_stmt|;
name|Boolean
name|displayInstructor
init|=
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|displayInstructorStr
operator|!=
literal|null
operator|&&
name|displayInstructorStr
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|displayInstructor
operator|=
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|String
name|displayInScheduleBookStr
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|it11
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|displayInScheduleBookStr
operator|=
operator|(
name|String
operator|)
name|it11
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|Boolean
name|displayInScheduleBook
init|=
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|displayInScheduleBookStr
operator|!=
literal|null
operator|&&
name|displayInScheduleBookStr
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|displayInScheduleBook
operator|=
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|classId
operator|.
name|longValue
argument_list|()
operator|<
literal|0
condition|)
block|{
name|Class_
name|newClass
init|=
operator|new
name|Class_
argument_list|()
decl_stmt|;
if|if
condition|(
name|ss
operator|==
literal|null
operator|||
operator|!
name|ss
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|subpartId
argument_list|)
condition|)
name|ss
operator|=
name|ssdao
operator|.
name|get
argument_list|(
name|subpartId
argument_list|)
expr_stmt|;
name|newClass
operator|.
name|setSchedulingSubpart
argument_list|(
name|ss
argument_list|)
expr_stmt|;
name|ss
operator|.
name|addToclasses
argument_list|(
name|newClass
argument_list|)
expr_stmt|;
if|if
condition|(
name|parentClassId
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|parentClassId
operator|.
name|longValue
argument_list|()
operator|>
literal|0
operator|&&
operator|(
name|parentClass
operator|==
literal|null
operator|||
operator|!
name|parentClass
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|parentClassId
argument_list|)
operator|)
condition|)
name|parentClass
operator|=
name|cdao
operator|.
name|get
argument_list|(
name|parentClassId
argument_list|)
expr_stmt|;
if|else if
condition|(
name|parentClassId
operator|.
name|longValue
argument_list|()
operator|<
literal|0
condition|)
name|parentClass
operator|=
operator|(
name|Class_
operator|)
name|tmpClsToRealClass
operator|.
name|get
argument_list|(
name|parentClassId
argument_list|)
expr_stmt|;
name|newClass
operator|.
name|setParentClass
argument_list|(
name|parentClass
argument_list|)
expr_stmt|;
name|parentClass
operator|.
name|addTochildClasses
argument_list|(
name|newClass
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|managingDept
operator|==
literal|null
operator|||
operator|!
name|managingDept
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|managingDeptId
argument_list|)
condition|)
name|managingDept
operator|=
name|deptdao
operator|.
name|get
argument_list|(
name|managingDeptId
argument_list|)
expr_stmt|;
name|newClass
operator|.
name|setControllingDept
argument_list|(
name|ss
operator|.
name|getControllingDept
argument_list|()
argument_list|)
expr_stmt|;
name|newClass
operator|.
name|setManagingDept
argument_list|(
name|managingDept
argument_list|)
expr_stmt|;
if|if
condition|(
name|dp
operator|==
literal|null
operator|||
operator|!
name|dp
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|datePattern
argument_list|)
condition|)
name|dp
operator|=
name|dpdao
operator|.
name|get
argument_list|(
name|datePattern
argument_list|)
expr_stmt|;
name|newClass
operator|.
name|setDatePattern
argument_list|(
name|dp
argument_list|)
expr_stmt|;
name|newClass
operator|.
name|setExpectedCapacity
argument_list|(
name|minClassLimit
argument_list|)
expr_stmt|;
name|newClass
operator|.
name|setNbrRooms
argument_list|(
name|numberOfRooms
argument_list|)
expr_stmt|;
name|newClass
operator|.
name|setMaxExpectedCapacity
argument_list|(
name|maxClassLimit
argument_list|)
expr_stmt|;
name|newClass
operator|.
name|setRoomRatio
argument_list|(
name|roomRatio
argument_list|)
expr_stmt|;
name|newClass
operator|.
name|setDisplayInstructor
argument_list|(
name|displayInstructor
argument_list|)
expr_stmt|;
name|newClass
operator|.
name|setDisplayInScheduleBook
argument_list|(
name|displayInScheduleBook
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|newClass
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|ss
argument_list|)
expr_stmt|;
name|tmpClsToRealClass
operator|.
name|put
argument_list|(
name|classId
argument_list|,
name|newClass
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|tmpClsToRealClass
operator|)
return|;
block|}
specifier|private
name|void
name|modifyClasses
parameter_list|(
name|InstructionalOfferingModifyForm
name|frm
parameter_list|,
name|InstrOfferingConfig
name|ioc
parameter_list|,
name|Session
name|hibSession
parameter_list|,
name|RoomGroup
name|rg
parameter_list|,
name|HashMap
name|tmpClassIdsToRealClasses
parameter_list|)
block|{
name|Class_DAO
name|cdao
init|=
operator|new
name|Class_DAO
argument_list|()
decl_stmt|;
name|DepartmentDAO
name|deptdao
init|=
operator|new
name|DepartmentDAO
argument_list|()
decl_stmt|;
name|Department
name|managingDept
init|=
literal|null
decl_stmt|;
name|DatePatternDAO
name|dpdao
init|=
operator|new
name|DatePatternDAO
argument_list|()
decl_stmt|;
name|DatePattern
name|dp
init|=
literal|null
decl_stmt|;
name|PreferenceLevel
name|prefLevel
init|=
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
decl_stmt|;
name|Iterator
name|it1
init|=
name|frm
operator|.
name|getClassIds
argument_list|()
operator|.
name|listIterator
argument_list|()
decl_stmt|;
name|Iterator
name|it2
init|=
name|frm
operator|.
name|getMinClassLimits
argument_list|()
operator|.
name|listIterator
argument_list|()
decl_stmt|;
name|Iterator
name|it3
init|=
name|frm
operator|.
name|getDepartments
argument_list|()
operator|.
name|listIterator
argument_list|()
decl_stmt|;
name|Iterator
name|it4
init|=
name|frm
operator|.
name|getDatePatterns
argument_list|()
operator|.
name|listIterator
argument_list|()
decl_stmt|;
name|Iterator
name|it5
init|=
name|frm
operator|.
name|getNumberOfRooms
argument_list|()
operator|.
name|listIterator
argument_list|()
decl_stmt|;
name|Iterator
name|it6
init|=
name|frm
operator|.
name|getMaxClassLimits
argument_list|()
operator|.
name|listIterator
argument_list|()
decl_stmt|;
name|Iterator
name|it7
init|=
name|frm
operator|.
name|getRoomRatios
argument_list|()
operator|.
name|listIterator
argument_list|()
decl_stmt|;
name|Iterator
name|it8
init|=
name|frm
operator|.
name|getDisplayInstructors
argument_list|()
operator|.
name|listIterator
argument_list|()
decl_stmt|;
name|Iterator
name|it9
init|=
name|frm
operator|.
name|getDisplayInScheduleBooks
argument_list|()
operator|.
name|listIterator
argument_list|()
decl_stmt|;
name|Iterator
name|it10
init|=
name|frm
operator|.
name|getParentClassIds
argument_list|()
operator|.
name|listIterator
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|it1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Long
name|classId
init|=
operator|new
name|Long
argument_list|(
name|it1
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Integer
name|minClassLimit
init|=
operator|new
name|Integer
argument_list|(
name|it2
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Long
name|managingDeptId
init|=
operator|new
name|Long
argument_list|(
name|it3
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|datePatternId
init|=
name|it4
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Long
name|datePattern
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|datePatternId
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
name|datePattern
operator|=
operator|new
name|Long
argument_list|(
name|datePatternId
argument_list|)
expr_stmt|;
name|Integer
name|numberOfRooms
init|=
operator|new
name|Integer
argument_list|(
name|it5
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Integer
name|maxClassLimit
init|=
operator|new
name|Integer
argument_list|(
name|it6
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Float
name|roomRatio
init|=
operator|new
name|Float
argument_list|(
name|it7
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|displayInstructorStr
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|it8
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|displayInstructorStr
operator|=
operator|(
name|String
operator|)
name|it8
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|Boolean
name|displayInstructor
init|=
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|displayInstructorStr
operator|!=
literal|null
operator|&&
name|displayInstructorStr
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|displayInstructor
operator|=
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|String
name|displayInScheduleBookStr
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|it9
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|displayInScheduleBookStr
operator|=
operator|(
name|String
operator|)
name|it9
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|Boolean
name|displayInScheduleBook
init|=
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|displayInScheduleBookStr
operator|!=
literal|null
operator|&&
name|displayInScheduleBookStr
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|displayInScheduleBook
operator|=
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|Long
name|parentClassId
init|=
literal|null
decl_stmt|;
name|String
name|parentClassIdString
init|=
operator|(
name|String
operator|)
name|it10
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentClassIdString
operator|!=
literal|null
operator|&&
name|parentClassIdString
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|parentClassId
operator|=
operator|new
name|Long
argument_list|(
name|parentClassIdString
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|classId
operator|.
name|longValue
argument_list|()
operator|>
literal|0
condition|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|Class_
name|modifiedClass
init|=
name|cdao
operator|.
name|get
argument_list|(
name|classId
argument_list|)
decl_stmt|;
if|if
condition|(
name|modifiedClass
operator|.
name|getParentClass
argument_list|()
operator|!=
literal|null
operator|&&
name|parentClassId
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|modifiedClass
operator|.
name|getParentClass
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|parentClassId
argument_list|)
condition|)
block|{
name|Class_
name|origParent
init|=
name|modifiedClass
operator|.
name|getParentClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentClassId
operator|.
name|longValue
argument_list|()
operator|<
literal|0
condition|)
block|{
name|modifiedClass
operator|.
name|setParentClass
argument_list|(
operator|(
name|Class_
operator|)
name|tmpClassIdsToRealClasses
operator|.
name|get
argument_list|(
name|parentClassId
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|modifiedClass
operator|.
name|setParentClass
argument_list|(
name|cdao
operator|.
name|get
argument_list|(
name|parentClassId
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|update
argument_list|(
name|modifiedClass
operator|.
name|getParentClass
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|update
argument_list|(
name|origParent
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|managingDeptId
operator|.
name|equals
argument_list|(
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
condition|)
block|{
name|managingDeptId
operator|=
name|modifiedClass
operator|.
name|getControllingDept
argument_list|()
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|modifiedClass
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|managingDeptId
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|managingDept
operator|==
literal|null
operator|||
operator|!
name|managingDept
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|managingDeptId
argument_list|)
condition|)
name|managingDept
operator|=
name|deptdao
operator|.
name|get
argument_list|(
name|managingDeptId
argument_list|)
expr_stmt|;
name|modifiedClass
operator|.
name|setManagingDept
argument_list|(
name|managingDept
argument_list|)
expr_stmt|;
name|Set
name|timePrefs
init|=
name|modifiedClass
operator|.
name|getTimePreferences
argument_list|()
decl_stmt|;
name|Set
name|prefs
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|prefs
operator|.
name|addAll
argument_list|(
name|modifiedClass
operator|.
name|getPreferences
argument_list|()
argument_list|)
expr_stmt|;
name|modifiedClass
operator|.
name|getPreferences
argument_list|()
operator|.
name|removeAll
argument_list|(
name|prefs
argument_list|)
expr_stmt|;
name|boolean
name|weaken
init|=
literal|true
decl_stmt|;
if|if
condition|(
operator|!
name|managingDept
operator|.
name|isExternalManager
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
name|weaken
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|weaken
operator|&&
name|managingDept
operator|.
name|isAllowReqTime
argument_list|()
operator|!=
literal|null
operator|&&
name|managingDept
operator|.
name|isAllowReqTime
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
name|weaken
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|weaken
operator|&&
name|modifiedClass
operator|.
name|getControllingDept
argument_list|()
operator|.
name|isAllowReqTime
argument_list|()
operator|!=
literal|null
operator|&&
name|modifiedClass
operator|.
name|getControllingDept
argument_list|()
operator|.
name|isAllowReqTime
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
name|weaken
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|timePrefs
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePref
name|timePref
init|=
operator|(
name|TimePref
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|TimePattern
name|timePattern
init|=
name|timePref
operator|.
name|getTimePattern
argument_list|()
decl_stmt|;
if|if
condition|(
name|TimePattern
operator|.
name|sTypeExactTime
operator|==
name|timePattern
operator|.
name|getType
argument_list|()
operator|.
name|intValue
argument_list|()
condition|)
continue|continue;
name|TimePref
name|tp
init|=
operator|new
name|TimePref
argument_list|()
decl_stmt|;
name|tp
operator|.
name|setOwner
argument_list|(
name|modifiedClass
argument_list|)
expr_stmt|;
name|tp
operator|.
name|setPrefLevel
argument_list|(
name|timePref
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
expr_stmt|;
name|tp
operator|.
name|setTimePattern
argument_list|(
name|timePattern
argument_list|)
expr_stmt|;
name|tp
operator|.
name|setPreference
argument_list|(
name|timePref
operator|.
name|getPreference
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|weaken
condition|)
name|tp
operator|.
name|weakenHardPreferences
argument_list|()
expr_stmt|;
name|modifiedClass
operator|.
name|addTopreferences
argument_list|(
name|tp
argument_list|)
expr_stmt|;
block|}
name|modifiedClass
operator|.
name|deleteAllDistributionPreferences
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|modifiedClass
operator|.
name|getDatePattern
argument_list|()
operator|==
literal|null
operator|&&
name|datePattern
operator|!=
literal|null
operator|)
operator|||
operator|(
name|modifiedClass
operator|.
name|getDatePattern
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|modifiedClass
operator|.
name|getDatePattern
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|datePattern
argument_list|)
operator|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|dp
operator|==
literal|null
operator|||
operator|!
name|dp
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|datePattern
argument_list|)
condition|)
name|dp
operator|=
name|dpdao
operator|.
name|get
argument_list|(
name|datePattern
argument_list|)
expr_stmt|;
name|modifiedClass
operator|.
name|setDatePattern
argument_list|(
name|dp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|modifiedClass
operator|.
name|getExpectedCapacity
argument_list|()
operator|.
name|equals
argument_list|(
name|minClassLimit
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
name|modifiedClass
operator|.
name|setExpectedCapacity
argument_list|(
name|minClassLimit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|modifiedClass
operator|.
name|getNbrRooms
argument_list|()
operator|.
name|equals
argument_list|(
name|numberOfRooms
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
name|modifiedClass
operator|.
name|setNbrRooms
argument_list|(
name|numberOfRooms
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|modifiedClass
operator|.
name|getMaxExpectedCapacity
argument_list|()
operator|.
name|equals
argument_list|(
name|maxClassLimit
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
name|modifiedClass
operator|.
name|setMaxExpectedCapacity
argument_list|(
name|maxClassLimit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|modifiedClass
operator|.
name|getRoomRatio
argument_list|()
operator|.
name|equals
argument_list|(
name|roomRatio
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
name|modifiedClass
operator|.
name|setRoomRatio
argument_list|(
name|roomRatio
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|modifiedClass
operator|.
name|isDisplayInstructor
argument_list|()
operator|.
name|equals
argument_list|(
name|displayInstructor
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
name|modifiedClass
operator|.
name|setDisplayInstructor
argument_list|(
name|displayInstructor
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|modifiedClass
operator|.
name|isDisplayInScheduleBook
argument_list|()
operator|.
name|equals
argument_list|(
name|displayInScheduleBook
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
name|modifiedClass
operator|.
name|setDisplayInScheduleBook
argument_list|(
name|displayInScheduleBook
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|changed
condition|)
name|hibSession
operator|.
name|update
argument_list|(
name|modifiedClass
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

