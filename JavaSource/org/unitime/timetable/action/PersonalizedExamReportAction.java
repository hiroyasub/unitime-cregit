begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.1 (University Timetabling Application)  * Copyright (C) 2007, UniTime.org, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|MultiComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|Web
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|WebTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|PersonalizedExamReportForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Meeting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentClassEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentalInstructorDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StudentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|reports
operator|.
name|exam
operator|.
name|InstructorExamReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|reports
operator|.
name|exam
operator|.
name|StudentExamReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignmentInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignmentInfo
operator|.
name|BackToBackConflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignmentInfo
operator|.
name|DirectConflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignmentInfo
operator|.
name|MoreThanTwoADayConflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamInfo
operator|.
name|ExamSectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|PdfWebTable
import|;
end_import

begin_class
specifier|public
class|class
name|PersonalizedExamReportAction
extends|extends
name|Action
block|{
specifier|public
name|ActionForward
name|execute
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
name|PersonalizedExamReportForm
name|myForm
init|=
operator|(
name|PersonalizedExamReportForm
operator|)
name|form
decl_stmt|;
name|String
name|back
init|=
operator|(
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|getAttribute
argument_list|(
literal|"loginFromExams"
argument_list|)
argument_list|)
condition|?
literal|"exams"
else|:
literal|"back"
operator|)
decl_stmt|;
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
name|request
operator|.
name|setAttribute
argument_list|(
literal|"message"
argument_list|,
literal|"Login is required."
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
name|back
argument_list|)
return|;
block|}
if|if
condition|(
name|user
operator|.
name|getRole
argument_list|()
operator|!=
literal|null
condition|)
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"main"
argument_list|)
return|;
name|String
name|externalId
init|=
name|user
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|externalId
operator|==
literal|null
operator|||
name|externalId
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|request
operator|.
name|setAttribute
argument_list|(
literal|"message"
argument_list|,
literal|"No user id provided."
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
name|back
argument_list|)
return|;
block|}
if|if
condition|(
literal|"Log Out"
operator|.
name|equals
argument_list|(
name|myForm
operator|.
name|getOp
argument_list|()
argument_list|)
condition|)
block|{
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|invalidate
argument_list|()
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
name|back
argument_list|)
return|;
block|}
name|Long
name|sessionId
init|=
operator|(
name|Long
operator|)
name|request
operator|.
name|getAttribute
argument_list|(
literal|"PersonalizedExamReport.SessionId"
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"session"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|sessionId
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"session"
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"PersonalizedExamReport.SessionId"
argument_list|,
name|sessionId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
block|{
name|sessionId
operator|=
operator|(
name|Long
operator|)
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|getAttribute
argument_list|(
literal|"Exams.session"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|setAttribute
argument_list|(
literal|"Exams.session"
argument_list|,
name|sessionId
argument_list|)
expr_stmt|;
block|}
name|HashSet
argument_list|<
name|Session
argument_list|>
name|sessions
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|DepartmentalInstructor
name|instructor
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|DepartmentalInstructorDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select i from DepartmentalInstructor i where i.externalUniqueId=:externalId"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"externalId"
argument_list|,
name|externalId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentalInstructor
name|s
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getStatusType
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|s
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getStatusType
argument_list|()
operator|.
name|canNoRoleReport
argument_list|()
operator|||
operator|!
name|Exam
operator|.
name|hasTimetable
argument_list|(
name|s
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|sessions
operator|.
name|add
argument_list|(
name|s
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|instructor
operator|==
literal|null
operator|||
name|instructor
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
operator|>
literal|0
condition|)
name|instructor
operator|=
name|s
expr_stmt|;
block|}
if|else if
condition|(
name|sessionId
operator|.
name|equals
argument_list|(
name|s
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|instructor
operator|=
name|s
expr_stmt|;
block|}
block|}
name|Student
name|student
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|StudentDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select s from Student s where s.externalUniqueId=:externalId"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"externalId"
argument_list|,
name|externalId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Student
name|s
init|=
operator|(
name|Student
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|getSession
argument_list|()
operator|.
name|getStatusType
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|s
operator|.
name|getSession
argument_list|()
operator|.
name|getStatusType
argument_list|()
operator|.
name|canNoRoleReport
argument_list|()
operator|||
operator|!
name|Exam
operator|.
name|hasTimetable
argument_list|(
name|s
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|sessions
operator|.
name|add
argument_list|(
name|s
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|student
operator|==
literal|null
operator|||
name|student
operator|.
name|getSession
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s
operator|.
name|getSession
argument_list|()
argument_list|)
operator|>
literal|0
condition|)
name|student
operator|=
name|s
expr_stmt|;
block|}
if|else if
condition|(
name|sessionId
operator|.
name|equals
argument_list|(
name|s
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
name|student
operator|=
name|s
expr_stmt|;
block|}
if|if
condition|(
name|instructor
operator|==
literal|null
operator|&&
name|student
operator|==
literal|null
condition|)
block|{
name|request
operator|.
name|setAttribute
argument_list|(
literal|"message"
argument_list|,
literal|"No examinations found."
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
name|back
argument_list|)
return|;
block|}
name|myForm
operator|.
name|setCanExport
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|instructor
operator|!=
literal|null
operator|&&
name|student
operator|!=
literal|null
operator|&&
operator|!
name|instructor
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getSession
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|instructor
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|compareTo
argument_list|(
name|student
operator|.
name|getSession
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
name|instructor
operator|=
literal|null
expr_stmt|;
else|else
name|student
operator|=
literal|null
expr_stmt|;
block|}
name|HashSet
argument_list|<
name|Exam
argument_list|>
name|studentExams
init|=
operator|new
name|HashSet
argument_list|<
name|Exam
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|student
operator|!=
literal|null
condition|)
for|for
control|(
name|Iterator
name|i
init|=
name|student
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|StudentClassEnrollment
name|sce
init|=
operator|(
name|StudentClassEnrollment
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|studentExams
operator|.
name|addAll
argument_list|(
name|Exam
operator|.
name|findAllRelated
argument_list|(
literal|"Class_"
argument_list|,
name|sce
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|HashSet
argument_list|<
name|Exam
argument_list|>
name|instructorExams
init|=
operator|new
name|HashSet
argument_list|<
name|Exam
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|instructor
operator|!=
literal|null
condition|)
block|{
name|instructorExams
operator|.
name|addAll
argument_list|(
name|instructor
operator|.
name|getExams
argument_list|(
name|Exam
operator|.
name|sExamTypeMidterm
argument_list|)
argument_list|)
expr_stmt|;
name|instructorExams
operator|.
name|addAll
argument_list|(
name|instructor
operator|.
name|getExams
argument_list|(
name|Exam
operator|.
name|sExamTypeFinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|instructorExams
operator|.
name|isEmpty
argument_list|()
operator|&&
name|studentExams
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|request
operator|.
name|setAttribute
argument_list|(
literal|"message"
argument_list|,
literal|"No examinations found."
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
name|back
argument_list|)
return|;
block|}
name|WebTable
operator|.
name|setOrder
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
literal|"exams.o0"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"o0"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|WebTable
operator|.
name|setOrder
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
literal|"exams.o1"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"o1"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|WebTable
operator|.
name|setOrder
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
literal|"exams.o2"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"o2"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|WebTable
operator|.
name|setOrder
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
literal|"exams.o3"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"o3"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|WebTable
operator|.
name|setOrder
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
literal|"exams.o4"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"o4"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|WebTable
operator|.
name|setOrder
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
literal|"exams.o5"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"o5"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|WebTable
operator|.
name|setOrder
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
literal|"exams.o6"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"o6"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|WebTable
operator|.
name|setOrder
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
literal|"exams.o7"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"o7"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"Export PDF"
operator|.
name|equals
argument_list|(
name|myForm
operator|.
name|getOp
argument_list|()
argument_list|)
condition|)
block|{
name|FileOutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|File
name|file
init|=
name|ApplicationProperties
operator|.
name|getTempFile
argument_list|(
literal|"exams"
argument_list|,
literal|"pdf"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|instructorExams
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|TreeSet
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
init|=
operator|new
name|TreeSet
argument_list|<
name|ExamAssignmentInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Exam
name|exam
range|:
name|instructorExams
control|)
name|exams
operator|.
name|add
argument_list|(
operator|new
name|ExamAssignmentInfo
argument_list|(
name|exam
argument_list|)
argument_list|)
expr_stmt|;
name|InstructorExamReport
name|ir
init|=
operator|new
name|InstructorExamReport
argument_list|(
name|InstructorExamReport
operator|.
name|sModeNormal
argument_list|,
name|file
argument_list|,
name|instructor
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
name|exams
argument_list|)
decl_stmt|;
name|ir
operator|.
name|setM2d
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ir
operator|.
name|setDirect
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ir
operator|.
name|printHeader
argument_list|()
expr_stmt|;
name|ir
operator|.
name|printReport
argument_list|(
name|ExamInfo
operator|.
name|createInstructorInfo
argument_list|(
name|instructor
argument_list|)
argument_list|,
name|exams
argument_list|)
expr_stmt|;
name|ir
operator|.
name|lastPage
argument_list|()
expr_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TreeSet
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
init|=
operator|new
name|TreeSet
argument_list|<
name|ExamAssignmentInfo
argument_list|>
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|ExamSectionInfo
argument_list|>
name|sections
init|=
operator|new
name|TreeSet
argument_list|<
name|ExamSectionInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Exam
name|exam
range|:
name|studentExams
control|)
block|{
name|ExamAssignmentInfo
name|x
init|=
operator|new
name|ExamAssignmentInfo
argument_list|(
name|exam
argument_list|)
decl_stmt|;
name|exams
operator|.
name|add
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|sections
operator|.
name|addAll
argument_list|(
name|x
operator|.
name|getSections
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|StudentExamReport
name|sr
init|=
operator|new
name|StudentExamReport
argument_list|(
name|StudentExamReport
operator|.
name|sModeNormal
argument_list|,
name|file
argument_list|,
name|student
operator|.
name|getSession
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
name|exams
argument_list|)
decl_stmt|;
name|sr
operator|.
name|setM2d
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sr
operator|.
name|setBtb
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sr
operator|.
name|setDirect
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sr
operator|.
name|printHeader
argument_list|()
expr_stmt|;
name|sr
operator|.
name|printReport
argument_list|(
name|student
argument_list|,
name|sections
argument_list|)
expr_stmt|;
name|sr
operator|.
name|lastPage
argument_list|()
expr_stmt|;
name|sr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|request
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|REQUEST_OPEN_URL
argument_list|,
literal|"temp/"
operator|+
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
block|}
block|}
block|}
if|if
condition|(
literal|"iCalendar"
operator|.
name|equals
argument_list|(
name|myForm
operator|.
name|getOp
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|File
name|file
init|=
name|ApplicationProperties
operator|.
name|getTempFile
argument_list|(
literal|"schedule"
argument_list|,
literal|"ics"
argument_list|)
decl_stmt|;
if|if
condition|(
name|instructor
operator|!=
literal|null
condition|)
block|{
name|printInstructorSchedule
argument_list|(
name|file
argument_list|,
name|instructor
argument_list|,
name|instructorExams
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|printStudentSchedule
argument_list|(
name|file
argument_list|,
name|student
argument_list|,
name|studentExams
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|REQUEST_OPEN_URL
argument_list|,
literal|"temp/"
operator|+
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|instructor
operator|!=
literal|null
operator|&&
name|sessions
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|PdfWebTable
name|table
init|=
name|getSessions
argument_list|(
literal|true
argument_list|,
name|sessions
argument_list|,
name|instructor
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatLastFist
argument_list|)
argument_list|,
name|instructor
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"sessions"
argument_list|,
name|table
operator|.
name|printTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
literal|"exams.o0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|student
operator|!=
literal|null
operator|&&
name|sessions
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|PdfWebTable
name|table
init|=
name|getSessions
argument_list|(
literal|true
argument_list|,
name|sessions
argument_list|,
name|student
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatLastFist
argument_list|)
argument_list|,
name|student
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"sessions"
argument_list|,
name|table
operator|.
name|printTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
literal|"exams.o0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|student
operator|!=
literal|null
operator|&&
operator|!
name|student
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|PdfWebTable
name|table
init|=
name|getStudentClassSchedule
argument_list|(
literal|true
argument_list|,
name|student
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|table
operator|.
name|getLines
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|request
operator|.
name|setAttribute
argument_list|(
literal|"clsschd"
argument_list|,
name|table
operator|.
name|printTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
literal|"exams.o6"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|instructor
operator|!=
literal|null
condition|)
block|{
name|PdfWebTable
name|table
init|=
name|getInstructorClassSchedule
argument_list|(
literal|true
argument_list|,
name|instructor
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|table
operator|.
name|getLines
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|request
operator|.
name|setAttribute
argument_list|(
literal|"iclsschd"
argument_list|,
name|table
operator|.
name|printTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
literal|"exams.o7"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|studentExams
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|myForm
operator|.
name|setCanExport
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
init|=
operator|new
name|TreeSet
argument_list|<
name|ExamAssignmentInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Exam
name|exam
range|:
name|studentExams
control|)
name|exams
operator|.
name|add
argument_list|(
operator|new
name|ExamAssignmentInfo
argument_list|(
name|exam
argument_list|)
argument_list|)
expr_stmt|;
name|PdfWebTable
name|table
init|=
name|getStudentExamSchedule
argument_list|(
literal|true
argument_list|,
name|exams
argument_list|,
name|student
argument_list|)
decl_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"schedule"
argument_list|,
name|table
operator|.
name|printTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
literal|"exams.o1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|=
name|getStudentConflits
argument_list|(
literal|true
argument_list|,
name|exams
argument_list|,
name|student
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|table
operator|.
name|getLines
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
literal|"conf"
argument_list|,
name|table
operator|.
name|printTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
literal|"exams.o3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|instructorExams
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|myForm
operator|.
name|setCanExport
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
init|=
operator|new
name|TreeSet
argument_list|<
name|ExamAssignmentInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Exam
name|exam
range|:
name|instructorExams
control|)
name|exams
operator|.
name|add
argument_list|(
operator|new
name|ExamAssignmentInfo
argument_list|(
name|exam
argument_list|)
argument_list|)
expr_stmt|;
name|PdfWebTable
name|table
init|=
name|getInstructorExamSchedule
argument_list|(
literal|true
argument_list|,
name|exams
argument_list|,
name|instructor
argument_list|)
decl_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"ischedule"
argument_list|,
name|table
operator|.
name|printTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
literal|"exams.o2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|=
name|getInstructorConflits
argument_list|(
literal|true
argument_list|,
name|exams
argument_list|,
name|instructor
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|table
operator|.
name|getLines
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
literal|"iconf"
argument_list|,
name|table
operator|.
name|printTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
literal|"exams.o4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|=
name|getStudentConflits
argument_list|(
literal|true
argument_list|,
name|exams
argument_list|,
name|instructor
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|table
operator|.
name|getLines
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
literal|"sconf"
argument_list|,
name|table
operator|.
name|printTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
literal|"exams.o5"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"show"
argument_list|)
return|;
block|}
specifier|public
name|int
name|getDaysCode
parameter_list|(
name|Set
name|meetings
parameter_list|)
block|{
name|int
name|daysCode
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|meetings
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Meeting
name|meeting
init|=
operator|(
name|Meeting
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Calendar
name|date
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|date
operator|.
name|setTime
argument_list|(
name|meeting
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|date
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
name|daysCode
operator||=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_MON
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
name|daysCode
operator||=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_TUE
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
name|daysCode
operator||=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_WED
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
name|daysCode
operator||=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_THU
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
name|daysCode
operator||=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_FRI
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
name|daysCode
operator||=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_SAT
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
name|daysCode
operator||=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_SUN
index|]
expr_stmt|;
break|break;
block|}
block|}
return|return
name|daysCode
return|;
block|}
specifier|public
specifier|static
name|String
name|DAY_NAMES_SHORT
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|"M"
block|,
literal|"T"
block|,
literal|"W"
block|,
literal|"R"
block|,
literal|"F"
block|,
literal|"S"
block|,
literal|"U"
block|}
decl_stmt|;
specifier|protected
name|long
name|getMeetingComparable
parameter_list|(
name|ExamSectionInfo
name|section
parameter_list|)
block|{
if|if
condition|(
name|section
operator|.
name|getOwner
argument_list|()
operator|.
name|getOwnerObject
argument_list|()
operator|instanceof
name|Class_
condition|)
block|{
name|SimpleDateFormat
name|dpf
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd"
argument_list|)
decl_stmt|;
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|section
operator|.
name|getOwner
argument_list|()
operator|.
name|getOwnerObject
argument_list|()
decl_stmt|;
name|Assignment
name|assignment
init|=
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
name|TreeSet
name|meetings
init|=
operator|(
name|clazz
operator|.
name|getEvent
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|TreeSet
argument_list|(
name|clazz
operator|.
name|getEvent
argument_list|()
operator|.
name|getMeetings
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|meetings
operator|!=
literal|null
operator|&&
operator|!
name|meetings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|(
operator|(
name|Meeting
operator|)
name|meetings
operator|.
name|first
argument_list|()
operator|)
operator|.
name|getMeetingDate
argument_list|()
operator|.
name|getTime
argument_list|()
return|;
block|}
if|else if
condition|(
name|assignment
operator|!=
literal|null
condition|)
block|{
return|return
name|assignment
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getStartSlot
argument_list|()
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
specifier|protected
name|String
name|getMeetingTime
parameter_list|(
name|ExamSectionInfo
name|section
parameter_list|)
block|{
name|String
name|meetingTime
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|section
operator|.
name|getOwner
argument_list|()
operator|.
name|getOwnerObject
argument_list|()
operator|instanceof
name|Class_
condition|)
block|{
name|SimpleDateFormat
name|dpf
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd"
argument_list|)
decl_stmt|;
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|section
operator|.
name|getOwner
argument_list|()
operator|.
name|getOwnerObject
argument_list|()
decl_stmt|;
name|Assignment
name|assignment
init|=
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
name|TreeSet
name|meetings
init|=
operator|(
name|clazz
operator|.
name|getEvent
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|TreeSet
argument_list|(
name|clazz
operator|.
name|getEvent
argument_list|()
operator|.
name|getMeetings
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|meetings
operator|!=
literal|null
operator|&&
operator|!
name|meetings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Date
name|first
init|=
operator|(
operator|(
name|Meeting
operator|)
name|meetings
operator|.
name|first
argument_list|()
operator|)
operator|.
name|getMeetingDate
argument_list|()
decl_stmt|;
name|Date
name|last
init|=
operator|(
operator|(
name|Meeting
operator|)
name|meetings
operator|.
name|last
argument_list|()
operator|)
operator|.
name|getMeetingDate
argument_list|()
decl_stmt|;
name|meetingTime
operator|+=
name|dpf
operator|.
name|format
argument_list|(
name|first
argument_list|)
operator|+
literal|" - "
operator|+
name|dpf
operator|.
name|format
argument_list|(
name|last
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|assignment
operator|!=
literal|null
operator|&&
name|assignment
operator|.
name|getDatePattern
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|DatePattern
name|dp
init|=
name|assignment
operator|.
name|getDatePattern
argument_list|()
decl_stmt|;
if|if
condition|(
name|dp
operator|!=
literal|null
operator|&&
operator|!
name|dp
operator|.
name|isDefault
argument_list|()
condition|)
block|{
if|if
condition|(
name|dp
operator|.
name|getType
argument_list|()
operator|.
name|intValue
argument_list|()
operator|==
name|DatePattern
operator|.
name|sTypeAlternate
condition|)
name|meetingTime
operator|+=
name|dp
operator|.
name|getName
argument_list|()
expr_stmt|;
else|else
block|{
name|meetingTime
operator|+=
name|dpf
operator|.
name|format
argument_list|(
name|dp
operator|.
name|getStartDate
argument_list|()
argument_list|)
operator|+
literal|" - "
operator|+
name|dpf
operator|.
name|format
argument_list|(
name|dp
operator|.
name|getEndDate
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|meetings
operator|!=
literal|null
operator|&&
operator|!
name|meetings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|dayCode
init|=
name|getDaysCode
argument_list|(
name|meetings
argument_list|)
decl_stmt|;
name|String
name|days
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|DAY_CODES
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
operator|(
name|dayCode
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|i
index|]
operator|)
operator|!=
literal|0
condition|)
name|days
operator|+=
name|Constants
operator|.
name|DAY_NAMES_SHORT
index|[
name|i
index|]
expr_stmt|;
name|meetingTime
operator|+=
literal|" "
operator|+
name|days
expr_stmt|;
name|Meeting
name|first
init|=
operator|(
name|Meeting
operator|)
name|meetings
operator|.
name|first
argument_list|()
decl_stmt|;
name|meetingTime
operator|+=
literal|" "
operator|+
name|first
operator|.
name|startTime
argument_list|()
operator|+
literal|" - "
operator|+
name|first
operator|.
name|stopTime
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|assignment
operator|!=
literal|null
condition|)
block|{
name|TimeLocation
name|t
init|=
name|assignment
operator|.
name|getTimeLocation
argument_list|()
decl_stmt|;
name|meetingTime
operator|+=
literal|" "
operator|+
name|t
operator|.
name|getDayHeader
argument_list|()
operator|+
literal|" "
operator|+
name|t
operator|.
name|getStartTimeHeader
argument_list|()
operator|+
literal|" - "
operator|+
name|t
operator|.
name|getEndTimeHeader
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|meetingTime
return|;
block|}
specifier|public
name|PdfWebTable
name|getSessions
parameter_list|(
name|boolean
name|html
parameter_list|,
name|HashSet
argument_list|<
name|Session
argument_list|>
name|sessions
parameter_list|,
name|String
name|name
parameter_list|,
name|Long
name|sessionId
parameter_list|)
block|{
name|String
name|nl
init|=
operator|(
name|html
condition|?
literal|"<br>"
else|:
literal|"\n"
operator|)
decl_stmt|;
name|PdfWebTable
name|table
init|=
operator|new
name|PdfWebTable
argument_list|(
literal|5
argument_list|,
literal|"Available Academic Sessions for "
operator|+
name|name
argument_list|,
literal|"personalizedExams.do?o0=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Term"
block|,
literal|"Year"
block|,
literal|"Campus"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
decl_stmt|;
name|table
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap"
argument_list|)
expr_stmt|;
for|for
control|(
name|Session
name|session
range|:
name|sessions
control|)
block|{
name|String
name|bgColor
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|sessionId
operator|.
name|equals
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
name|bgColor
operator|=
literal|"rgb(168,187,225)"
expr_stmt|;
name|table
operator|.
name|addLine
argument_list|(
literal|"onClick=\"document.location='personalizedExams.do?session="
operator|+
name|session
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"';\""
argument_list|,
operator|new
name|String
index|[]
block|{
name|session
operator|.
name|getAcademicTerm
argument_list|()
block|,
name|session
operator|.
name|getAcademicYear
argument_list|()
block|,
name|session
operator|.
name|getAcademicInitiative
argument_list|()
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
name|session
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|,
name|session
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|session
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|,
name|session
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|session
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|,
name|session
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
block|}
argument_list|)
operator|.
name|setBgColor
argument_list|(
name|bgColor
argument_list|)
expr_stmt|;
block|}
return|return
name|table
return|;
block|}
specifier|public
name|PdfWebTable
name|getStudentExamSchedule
parameter_list|(
name|boolean
name|html
parameter_list|,
name|TreeSet
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
parameter_list|,
name|Student
name|student
parameter_list|)
block|{
name|String
name|nl
init|=
operator|(
name|html
condition|?
literal|"<br>"
else|:
literal|"\n"
operator|)
decl_stmt|;
name|PdfWebTable
name|table
init|=
operator|new
name|PdfWebTable
argument_list|(
literal|5
argument_list|,
name|student
operator|.
name|getSession
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|" Examination Schedule for "
operator|+
name|student
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatLastFist
argument_list|)
argument_list|,
literal|"personalizedExams.do?o1=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Class / Course"
block|,
literal|"Meeting Time"
block|,
literal|"Date"
block|,
literal|"Time"
block|,
literal|"Room"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
decl_stmt|;
name|table
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap"
argument_list|)
expr_stmt|;
name|String
name|noRoom
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exam.report.noroom"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|exams
control|)
block|{
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|exam
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|section
operator|.
name|getStudentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
name|section
operator|.
name|getName
argument_list|()
block|,
name|getMeetingTime
argument_list|(
name|section
argument_list|)
block|,
name|exam
operator|.
name|getDate
argument_list|(
literal|false
argument_list|)
block|,
name|exam
operator|.
name|getTime
argument_list|(
literal|false
argument_list|)
block|,
operator|(
name|exam
operator|.
name|getNrRooms
argument_list|()
operator|==
literal|0
condition|?
name|noRoom
else|:
name|exam
operator|.
name|getRoomsName
argument_list|(
literal|false
argument_list|,
literal|", "
argument_list|)
operator|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|getMeetingComparable
argument_list|(
name|section
argument_list|)
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriodOrd
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getRoomsName
argument_list|(
literal|":"
argument_list|)
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|table
return|;
block|}
specifier|public
name|PdfWebTable
name|getStudentConflits
parameter_list|(
name|boolean
name|html
parameter_list|,
name|TreeSet
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
parameter_list|,
name|Student
name|student
parameter_list|)
block|{
name|String
name|nl
init|=
operator|(
name|html
condition|?
literal|"<br>"
else|:
literal|"\n"
operator|)
decl_stmt|;
name|PdfWebTable
name|table
init|=
operator|new
name|PdfWebTable
argument_list|(
literal|6
argument_list|,
name|student
operator|.
name|getSession
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|" Examination Conflicts for "
operator|+
name|student
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatLastFist
argument_list|)
argument_list|,
literal|"personalizedExams.do?o3=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Type"
block|,
literal|"Class / Course"
block|,
literal|"Date"
block|,
literal|"Time"
block|,
literal|"Room"
block|,
literal|"Distance"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
decl_stmt|;
name|table
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap"
argument_list|)
expr_stmt|;
name|String
name|noRoom
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exam.report.noroom"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|exams
control|)
block|{
for|for
control|(
name|DirectConflict
name|conflict
range|:
name|exam
operator|.
name|getDirectConflicts
argument_list|()
control|)
block|{
if|if
condition|(
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|!=
literal|null
operator|&&
name|exam
operator|.
name|compareTo
argument_list|(
name|conflict
operator|.
name|getOtherExam
argument_list|()
argument_list|)
operator|>=
literal|0
operator|&&
name|exams
operator|.
name|contains
argument_list|(
name|conflict
operator|.
name|getOtherExam
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|conflict
operator|.
name|getStudents
argument_list|()
operator|.
name|contains
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|String
name|classes
init|=
literal|""
decl_stmt|,
name|date
init|=
literal|""
decl_stmt|,
name|time
init|=
literal|""
decl_stmt|,
name|room
init|=
literal|""
decl_stmt|,
name|distance
init|=
literal|""
decl_stmt|,
name|blank
init|=
literal|""
decl_stmt|;
name|boolean
name|firstSection
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|exam
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|section
operator|.
name|getStudentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|classes
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|blank
operator|+=
name|nl
expr_stmt|;
name|classes
operator|+=
name|nl
expr_stmt|;
name|date
operator|+=
name|nl
expr_stmt|;
name|time
operator|+=
name|nl
expr_stmt|;
name|room
operator|+=
name|nl
expr_stmt|;
name|distance
operator|+=
name|nl
expr_stmt|;
block|}
name|classes
operator|+=
name|section
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|firstSection
condition|)
block|{
name|date
operator|+=
name|exam
operator|.
name|getDate
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|time
operator|+=
name|exam
operator|.
name|getTime
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|room
operator|+=
operator|(
name|exam
operator|.
name|getNrRooms
argument_list|()
operator|==
literal|0
condition|?
name|noRoom
else|:
name|exam
operator|.
name|getRoomsName
argument_list|(
literal|false
argument_list|,
literal|", "
argument_list|)
operator|)
expr_stmt|;
block|}
name|firstSection
operator|=
literal|false
expr_stmt|;
block|}
name|firstSection
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|section
operator|.
name|getStudentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|classes
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|blank
operator|+=
name|nl
expr_stmt|;
name|classes
operator|+=
name|nl
expr_stmt|;
name|date
operator|+=
name|nl
expr_stmt|;
name|time
operator|+=
name|nl
expr_stmt|;
name|room
operator|+=
name|nl
expr_stmt|;
name|distance
operator|+=
name|nl
expr_stmt|;
block|}
name|classes
operator|+=
name|section
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|firstSection
condition|)
block|{
name|room
operator|+=
operator|(
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getNrRooms
argument_list|()
operator|==
literal|0
condition|?
name|noRoom
else|:
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getRoomsName
argument_list|(
literal|false
argument_list|,
literal|", "
argument_list|)
operator|)
expr_stmt|;
block|}
name|firstSection
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|conflict
operator|.
name|getOtherEventId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|blank
operator|+=
name|nl
expr_stmt|;
name|classes
operator|+=
name|nl
expr_stmt|;
name|date
operator|+=
name|nl
expr_stmt|;
name|time
operator|+=
name|nl
expr_stmt|;
name|room
operator|+=
name|nl
expr_stmt|;
name|distance
operator|+=
name|nl
expr_stmt|;
name|classes
operator|+=
name|conflict
operator|.
name|getOtherEventName
argument_list|()
expr_stmt|;
name|room
operator|+=
name|conflict
operator|.
name|getOtherEventRoom
argument_list|()
expr_stmt|;
comment|//date += conflict.getOtherEventDate();
name|time
operator|+=
name|conflict
operator|.
name|getOtherEventTime
argument_list|()
expr_stmt|;
block|}
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
operator|(
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"P"
argument_list|)
operator|+
literal|"'>"
else|:
literal|""
operator|)
operator|+
operator|(
name|conflict
operator|.
name|getOtherEventId
argument_list|()
operator|!=
literal|null
condition|?
literal|"Class"
else|:
literal|"Direct"
operator|)
operator|+
operator|(
name|html
condition|?
literal|"</font>"
else|:
literal|""
operator|)
block|,
name|classes
block|,
name|date
block|,
name|time
block|,
name|room
block|,
literal|""
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
literal|0
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriodOrd
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getRoomsName
argument_list|(
literal|":"
argument_list|)
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
literal|1.0
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|BackToBackConflict
name|conflict
range|:
name|exam
operator|.
name|getBackToBackConflicts
argument_list|()
control|)
block|{
if|if
condition|(
name|exam
operator|.
name|compareTo
argument_list|(
name|conflict
operator|.
name|getOtherExam
argument_list|()
argument_list|)
operator|>=
literal|0
operator|&&
name|exams
operator|.
name|contains
argument_list|(
name|conflict
operator|.
name|getOtherExam
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|conflict
operator|.
name|getStudents
argument_list|()
operator|.
name|contains
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|String
name|classes
init|=
literal|""
decl_stmt|,
name|date
init|=
literal|""
decl_stmt|,
name|time
init|=
literal|""
decl_stmt|,
name|room
init|=
literal|""
decl_stmt|,
name|distance
init|=
literal|""
decl_stmt|,
name|blank
init|=
literal|""
decl_stmt|;
name|boolean
name|firstSection
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|exam
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|section
operator|.
name|getStudentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|classes
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|blank
operator|+=
name|nl
expr_stmt|;
name|classes
operator|+=
name|nl
expr_stmt|;
name|date
operator|+=
name|nl
expr_stmt|;
name|time
operator|+=
name|nl
expr_stmt|;
name|room
operator|+=
name|nl
expr_stmt|;
name|distance
operator|+=
name|nl
expr_stmt|;
block|}
name|classes
operator|+=
name|section
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|firstSection
condition|)
block|{
name|date
operator|+=
name|exam
operator|.
name|getDate
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|time
operator|+=
name|exam
operator|.
name|getTime
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|room
operator|+=
operator|(
name|exam
operator|.
name|getNrRooms
argument_list|()
operator|==
literal|0
condition|?
name|noRoom
else|:
name|exam
operator|.
name|getRoomsName
argument_list|(
literal|false
argument_list|,
literal|", "
argument_list|)
operator|)
expr_stmt|;
empty_stmt|;
block|}
name|firstSection
operator|=
literal|false
expr_stmt|;
block|}
name|firstSection
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|section
operator|.
name|getStudentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|classes
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|blank
operator|+=
name|nl
expr_stmt|;
name|classes
operator|+=
name|nl
expr_stmt|;
name|date
operator|+=
name|nl
expr_stmt|;
name|time
operator|+=
name|nl
expr_stmt|;
name|room
operator|+=
name|nl
expr_stmt|;
name|distance
operator|+=
name|nl
expr_stmt|;
block|}
name|classes
operator|+=
name|section
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|firstSection
condition|)
block|{
name|time
operator|+=
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getTime
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|room
operator|+=
operator|(
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getNrRooms
argument_list|()
operator|==
literal|0
condition|?
name|noRoom
else|:
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getRoomsName
argument_list|(
literal|false
argument_list|,
literal|", "
argument_list|)
operator|)
expr_stmt|;
block|}
name|firstSection
operator|=
literal|false
expr_stmt|;
block|}
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
operator|(
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"1"
argument_list|)
operator|+
literal|"'>"
else|:
literal|""
operator|)
operator|+
literal|"Back-To-Back"
operator|+
operator|(
name|html
condition|?
literal|"</font>"
else|:
literal|""
operator|)
block|,
name|classes
block|,
name|date
block|,
name|time
block|,
name|room
block|,
operator|(
name|int
operator|)
operator|(
name|conflict
operator|.
name|getDistance
argument_list|()
operator|*
literal|10.0
operator|)
operator|+
literal|" m"
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
literal|2
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriodOrd
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getRoomsName
argument_list|(
literal|":"
argument_list|)
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|conflict
operator|.
name|getDistance
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
name|conflicts
label|:
for|for
control|(
name|MoreThanTwoADayConflict
name|conflict
range|:
name|exam
operator|.
name|getMoreThanTwoADaysConflicts
argument_list|()
control|)
block|{
for|for
control|(
name|ExamAssignment
name|other
range|:
name|conflict
operator|.
name|getOtherExams
argument_list|()
control|)
if|if
condition|(
name|exam
operator|.
name|compareTo
argument_list|(
name|other
argument_list|)
operator|>=
literal|0
operator|&&
name|exams
operator|.
name|contains
argument_list|(
name|other
argument_list|)
condition|)
continue|continue
name|conflicts
continue|;
if|if
condition|(
operator|!
name|conflict
operator|.
name|getStudents
argument_list|()
operator|.
name|contains
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|String
name|classes
init|=
literal|""
decl_stmt|,
name|date
init|=
literal|""
decl_stmt|,
name|time
init|=
literal|""
decl_stmt|,
name|room
init|=
literal|""
decl_stmt|,
name|distance
init|=
literal|""
decl_stmt|,
name|blank
init|=
literal|""
decl_stmt|;
name|boolean
name|firstSection
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|exam
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|section
operator|.
name|getStudentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|classes
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|blank
operator|+=
name|nl
expr_stmt|;
name|classes
operator|+=
name|nl
expr_stmt|;
name|date
operator|+=
name|nl
expr_stmt|;
name|time
operator|+=
name|nl
expr_stmt|;
name|room
operator|+=
name|nl
expr_stmt|;
name|distance
operator|+=
name|nl
expr_stmt|;
block|}
name|classes
operator|+=
name|section
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|firstSection
condition|)
block|{
name|date
operator|+=
name|exam
operator|.
name|getDate
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|time
operator|+=
name|exam
operator|.
name|getTime
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|room
operator|+=
operator|(
name|exam
operator|.
name|getNrRooms
argument_list|()
operator|==
literal|0
condition|?
name|noRoom
else|:
name|exam
operator|.
name|getRoomsName
argument_list|(
literal|false
argument_list|,
literal|", "
argument_list|)
operator|)
expr_stmt|;
block|}
name|firstSection
operator|=
literal|false
expr_stmt|;
block|}
for|for
control|(
name|ExamAssignment
name|other
range|:
name|conflict
operator|.
name|getOtherExams
argument_list|()
control|)
block|{
name|firstSection
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|other
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|section
operator|.
name|getStudentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|classes
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|blank
operator|+=
name|nl
expr_stmt|;
name|classes
operator|+=
name|nl
expr_stmt|;
name|date
operator|+=
name|nl
expr_stmt|;
name|time
operator|+=
name|nl
expr_stmt|;
name|room
operator|+=
name|nl
expr_stmt|;
name|distance
operator|+=
name|nl
expr_stmt|;
block|}
name|classes
operator|+=
name|section
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|firstSection
condition|)
block|{
name|time
operator|+=
name|other
operator|.
name|getTime
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|room
operator|+=
operator|(
name|other
operator|.
name|getNrRooms
argument_list|()
operator|==
literal|0
condition|?
name|noRoom
else|:
name|other
operator|.
name|getRoomsName
argument_list|(
literal|false
argument_list|,
literal|", "
argument_list|)
operator|)
expr_stmt|;
block|}
name|firstSection
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|table
operator|.
name|addLine
argument_list|(
literal|"onClick=\"document.location='examDetail.do?examId="
operator|+
name|exam
operator|.
name|getExamId
argument_list|()
operator|+
literal|"';\""
argument_list|,
operator|new
name|String
index|[]
block|{
operator|(
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"2"
argument_list|)
operator|+
literal|"'>"
else|:
literal|""
operator|)
operator|+
operator|(
name|html
condition|?
literal|"&gt;"
else|:
literal|""
operator|)
operator|+
literal|"2 A Day"
operator|+
operator|(
name|html
condition|?
literal|"</font>"
else|:
literal|""
operator|)
block|,
name|classes
block|,
name|date
block|,
name|time
block|,
name|room
block|,
literal|""
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
literal|1
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriodOrd
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getRoomsName
argument_list|(
literal|":"
argument_list|)
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
literal|1.0
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|}
argument_list|,
name|exam
operator|.
name|getExamId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|table
return|;
block|}
specifier|public
name|PdfWebTable
name|getInstructorExamSchedule
parameter_list|(
name|boolean
name|html
parameter_list|,
name|TreeSet
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
parameter_list|,
name|DepartmentalInstructor
name|instructor
parameter_list|)
block|{
name|String
name|nl
init|=
operator|(
name|html
condition|?
literal|"<br>"
else|:
literal|"\n"
operator|)
decl_stmt|;
name|PdfWebTable
name|table
init|=
operator|new
name|PdfWebTable
argument_list|(
literal|8
argument_list|,
name|instructor
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|" Examination Instructor Schedule for "
operator|+
name|instructor
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatLastFist
argument_list|)
argument_list|,
literal|"personalizedExams.do?o2=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Class / Course"
block|,
literal|"Enrollment"
block|,
literal|"Seating"
operator|+
name|nl
operator|+
literal|"Type"
block|,
literal|"Meeting Times"
block|,
literal|"Date"
block|,
literal|"Time"
block|,
literal|"Room"
block|,
literal|"Capacity"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"right"
block|,
literal|"center"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"right"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
decl_stmt|;
name|table
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap"
argument_list|)
expr_stmt|;
name|String
name|noRoom
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exam.report.noroom"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|exams
control|)
block|{
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|exam
operator|.
name|getSections
argument_list|()
control|)
block|{
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
name|section
operator|.
name|getName
argument_list|()
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|section
operator|.
name|getNrStudents
argument_list|()
argument_list|)
block|,
name|Exam
operator|.
name|sSeatingTypes
index|[
name|exam
operator|.
name|getSeatingType
argument_list|()
index|]
block|,
name|getMeetingTime
argument_list|(
name|section
argument_list|)
block|,
name|exam
operator|.
name|getDate
argument_list|(
literal|false
argument_list|)
block|,
name|exam
operator|.
name|getTime
argument_list|(
literal|false
argument_list|)
block|,
operator|(
name|exam
operator|.
name|getNrRooms
argument_list|()
operator|==
literal|0
condition|?
name|noRoom
else|:
name|exam
operator|.
name|getRoomsName
argument_list|(
literal|false
argument_list|,
literal|", "
argument_list|)
operator|)
block|,
name|exam
operator|.
name|getRoomsCapacity
argument_list|(
literal|false
argument_list|,
literal|", "
argument_list|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|exam
operator|.
name|getNrStudents
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getSeatingType
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|getMeetingComparable
argument_list|(
name|section
argument_list|)
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriodOrd
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getRoomsName
argument_list|(
literal|":"
argument_list|)
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|exam
operator|.
name|getRoomsCapacity
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|exam
argument_list|)
block|,                         }
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|table
return|;
block|}
specifier|public
name|PdfWebTable
name|getInstructorConflits
parameter_list|(
name|boolean
name|html
parameter_list|,
name|TreeSet
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
parameter_list|,
name|DepartmentalInstructor
name|instructor
parameter_list|)
block|{
name|String
name|nl
init|=
operator|(
name|html
condition|?
literal|"<br>"
else|:
literal|"\n"
operator|)
decl_stmt|;
name|PdfWebTable
name|table
init|=
operator|new
name|PdfWebTable
argument_list|(
literal|8
argument_list|,
name|instructor
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|" Examination Instructor Conflicts for "
operator|+
name|instructor
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatLastFist
argument_list|)
argument_list|,
literal|"personalizedExams.do?o4=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Type"
block|,
literal|"Class / Course"
block|,
literal|"Enrollment"
block|,
literal|"Seating"
operator|+
name|nl
operator|+
literal|"Type"
block|,
literal|"Date"
block|,
literal|"Time"
block|,
literal|"Room"
block|,
literal|"Distance"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"right"
block|,
literal|"center"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
decl_stmt|;
name|table
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap"
argument_list|)
expr_stmt|;
name|String
name|noRoom
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exam.report.noroom"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|exams
control|)
block|{
for|for
control|(
name|DirectConflict
name|conflict
range|:
name|exam
operator|.
name|getInstructorDirectConflicts
argument_list|()
control|)
block|{
if|if
condition|(
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|!=
literal|null
operator|&&
name|exam
operator|.
name|compareTo
argument_list|(
name|conflict
operator|.
name|getOtherExam
argument_list|()
argument_list|)
operator|>=
literal|0
operator|&&
name|exams
operator|.
name|contains
argument_list|(
name|conflict
operator|.
name|getOtherExam
argument_list|()
argument_list|)
condition|)
continue|continue;
name|String
name|classes
init|=
literal|""
decl_stmt|,
name|enrollment
init|=
literal|""
decl_stmt|,
name|seating
init|=
literal|""
decl_stmt|,
name|date
init|=
literal|""
decl_stmt|,
name|time
init|=
literal|""
decl_stmt|,
name|room
init|=
literal|""
decl_stmt|,
name|distance
init|=
literal|""
decl_stmt|,
name|blank
init|=
literal|""
decl_stmt|;
name|boolean
name|firstSection
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|exam
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|classes
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|blank
operator|+=
name|nl
expr_stmt|;
name|classes
operator|+=
name|nl
expr_stmt|;
name|enrollment
operator|+=
name|nl
expr_stmt|;
name|seating
operator|+=
name|nl
expr_stmt|;
name|date
operator|+=
name|nl
expr_stmt|;
name|time
operator|+=
name|nl
expr_stmt|;
name|room
operator|+=
name|nl
expr_stmt|;
name|distance
operator|+=
name|nl
expr_stmt|;
block|}
name|classes
operator|+=
name|section
operator|.
name|getName
argument_list|()
expr_stmt|;
name|enrollment
operator|+=
name|String
operator|.
name|valueOf
argument_list|(
name|section
operator|.
name|getNrStudents
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|firstSection
condition|)
block|{
name|seating
operator|+=
name|Exam
operator|.
name|sSeatingTypes
index|[
name|exam
operator|.
name|getSeatingType
argument_list|()
index|]
expr_stmt|;
name|date
operator|+=
name|exam
operator|.
name|getDate
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|time
operator|+=
name|exam
operator|.
name|getTime
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|room
operator|+=
operator|(
name|exam
operator|.
name|getNrRooms
argument_list|()
operator|==
literal|0
condition|?
name|noRoom
else|:
name|exam
operator|.
name|getRoomsName
argument_list|(
literal|false
argument_list|,
literal|", "
argument_list|)
operator|)
expr_stmt|;
block|}
name|firstSection
operator|=
literal|false
expr_stmt|;
block|}
name|firstSection
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|classes
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|blank
operator|+=
name|nl
expr_stmt|;
name|classes
operator|+=
name|nl
expr_stmt|;
name|enrollment
operator|+=
name|nl
expr_stmt|;
name|seating
operator|+=
name|nl
expr_stmt|;
name|date
operator|+=
name|nl
expr_stmt|;
name|time
operator|+=
name|nl
expr_stmt|;
name|room
operator|+=
name|nl
expr_stmt|;
name|distance
operator|+=
name|nl
expr_stmt|;
block|}
name|classes
operator|+=
name|section
operator|.
name|getName
argument_list|()
expr_stmt|;
name|enrollment
operator|+=
name|String
operator|.
name|valueOf
argument_list|(
name|section
operator|.
name|getNrStudents
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|firstSection
condition|)
block|{
name|seating
operator|+=
name|Exam
operator|.
name|sSeatingTypes
index|[
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getSeatingType
argument_list|()
index|]
expr_stmt|;
name|room
operator|+=
operator|(
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getNrRooms
argument_list|()
operator|==
literal|0
condition|?
name|conflict
operator|.
name|getOtherExam
argument_list|()
else|:
name|exam
operator|.
name|getRoomsName
argument_list|(
literal|false
argument_list|,
literal|", "
argument_list|)
operator|)
expr_stmt|;
block|}
name|firstSection
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|conflict
operator|.
name|getOtherEventId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|blank
operator|+=
name|nl
expr_stmt|;
name|classes
operator|+=
name|nl
expr_stmt|;
name|enrollment
operator|+=
name|nl
expr_stmt|;
name|seating
operator|+=
name|nl
expr_stmt|;
name|date
operator|+=
name|nl
expr_stmt|;
name|time
operator|+=
name|nl
expr_stmt|;
name|room
operator|+=
name|nl
expr_stmt|;
name|distance
operator|+=
name|nl
expr_stmt|;
name|classes
operator|+=
name|conflict
operator|.
name|getOtherEventName
argument_list|()
expr_stmt|;
name|enrollment
operator|+=
name|conflict
operator|.
name|getOtherEventSize
argument_list|()
expr_stmt|;
name|seating
operator|+=
literal|"Class"
expr_stmt|;
name|room
operator|+=
name|conflict
operator|.
name|getOtherEventRoom
argument_list|()
expr_stmt|;
comment|//date += conflict.getOtherEventDate();
name|time
operator|+=
name|conflict
operator|.
name|getOtherEventTime
argument_list|()
expr_stmt|;
block|}
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
operator|(
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"P"
argument_list|)
operator|+
literal|"'>"
else|:
literal|""
operator|)
operator|+
operator|(
name|conflict
operator|.
name|getOtherEventId
argument_list|()
operator|!=
literal|null
condition|?
literal|"Class"
else|:
literal|"Direct"
operator|)
operator|+
operator|(
name|html
condition|?
literal|"</font>"
else|:
literal|""
operator|)
block|,
name|classes
block|,
name|enrollment
block|,
name|seating
block|,
name|date
block|,
name|time
block|,
name|room
block|,
literal|""
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
literal|0
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|exam
operator|.
name|getNrStudents
argument_list|()
operator|-
operator|(
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getNrStudents
argument_list|()
operator|)
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getExamType
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriodOrd
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getRoomsName
argument_list|(
literal|":"
argument_list|)
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
literal|1.0
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|BackToBackConflict
name|conflict
range|:
name|exam
operator|.
name|getInstructorBackToBackConflicts
argument_list|()
control|)
block|{
if|if
condition|(
name|exam
operator|.
name|compareTo
argument_list|(
name|conflict
operator|.
name|getOtherExam
argument_list|()
argument_list|)
operator|>=
literal|0
operator|&&
name|exams
operator|.
name|contains
argument_list|(
name|conflict
operator|.
name|getOtherExam
argument_list|()
argument_list|)
condition|)
continue|continue;
name|String
name|classes
init|=
literal|""
decl_stmt|,
name|enrollment
init|=
literal|""
decl_stmt|,
name|seating
init|=
literal|""
decl_stmt|,
name|date
init|=
literal|""
decl_stmt|,
name|time
init|=
literal|""
decl_stmt|,
name|room
init|=
literal|""
decl_stmt|,
name|distance
init|=
literal|""
decl_stmt|,
name|blank
init|=
literal|""
decl_stmt|;
name|boolean
name|firstSection
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|exam
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|classes
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|blank
operator|+=
name|nl
expr_stmt|;
name|classes
operator|+=
name|nl
expr_stmt|;
name|enrollment
operator|+=
name|nl
expr_stmt|;
name|seating
operator|+=
name|nl
expr_stmt|;
name|date
operator|+=
name|nl
expr_stmt|;
name|time
operator|+=
name|nl
expr_stmt|;
name|room
operator|+=
name|nl
expr_stmt|;
name|distance
operator|+=
name|nl
expr_stmt|;
block|}
name|classes
operator|+=
name|section
operator|.
name|getName
argument_list|()
expr_stmt|;
name|enrollment
operator|+=
name|String
operator|.
name|valueOf
argument_list|(
name|section
operator|.
name|getNrStudents
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|firstSection
condition|)
block|{
name|seating
operator|+=
name|Exam
operator|.
name|sSeatingTypes
index|[
name|exam
operator|.
name|getSeatingType
argument_list|()
index|]
expr_stmt|;
name|date
operator|+=
name|exam
operator|.
name|getDate
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|time
operator|+=
name|exam
operator|.
name|getTime
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|room
operator|+=
operator|(
name|exam
operator|.
name|getNrRooms
argument_list|()
operator|==
literal|0
condition|?
name|noRoom
else|:
name|exam
operator|.
name|getRoomsName
argument_list|(
literal|false
argument_list|,
literal|", "
argument_list|)
operator|)
expr_stmt|;
block|}
name|firstSection
operator|=
literal|false
expr_stmt|;
block|}
name|firstSection
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|classes
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|blank
operator|+=
name|nl
expr_stmt|;
name|classes
operator|+=
name|nl
expr_stmt|;
name|enrollment
operator|+=
name|nl
expr_stmt|;
name|seating
operator|+=
name|nl
expr_stmt|;
name|date
operator|+=
name|nl
expr_stmt|;
name|time
operator|+=
name|nl
expr_stmt|;
name|room
operator|+=
name|nl
expr_stmt|;
name|distance
operator|+=
name|nl
expr_stmt|;
block|}
name|classes
operator|+=
name|section
operator|.
name|getName
argument_list|()
expr_stmt|;
name|enrollment
operator|+=
name|String
operator|.
name|valueOf
argument_list|(
name|section
operator|.
name|getNrStudents
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|firstSection
condition|)
block|{
name|seating
operator|+=
name|Exam
operator|.
name|sSeatingTypes
index|[
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getSeatingType
argument_list|()
index|]
expr_stmt|;
name|time
operator|+=
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getTime
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|room
operator|+=
operator|(
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getNrRooms
argument_list|()
operator|==
literal|0
condition|?
name|conflict
operator|.
name|getOtherExam
argument_list|()
else|:
name|exam
operator|.
name|getRoomsName
argument_list|(
literal|false
argument_list|,
literal|", "
argument_list|)
operator|)
expr_stmt|;
block|}
name|firstSection
operator|=
literal|false
expr_stmt|;
block|}
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
operator|(
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"1"
argument_list|)
operator|+
literal|"'>"
else|:
literal|""
operator|)
operator|+
literal|"Back-To-Back"
operator|+
operator|(
name|html
condition|?
literal|"</font>"
else|:
literal|""
operator|)
block|,
name|classes
block|,
name|enrollment
block|,
name|seating
block|,
name|date
block|,
name|time
block|,
name|room
block|,
operator|(
name|int
operator|)
operator|(
name|conflict
operator|.
name|getDistance
argument_list|()
operator|*
literal|10.0
operator|)
operator|+
literal|" m"
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
literal|2
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|exam
operator|.
name|getNrStudents
argument_list|()
operator|-
operator|(
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getNrStudents
argument_list|()
operator|)
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getExamType
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriodOrd
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getRoomsName
argument_list|(
literal|":"
argument_list|)
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|conflict
operator|.
name|getDistance
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
name|conflicts
label|:
for|for
control|(
name|MoreThanTwoADayConflict
name|conflict
range|:
name|exam
operator|.
name|getInstructorMoreThanTwoADaysConflicts
argument_list|()
control|)
block|{
for|for
control|(
name|ExamAssignment
name|other
range|:
name|conflict
operator|.
name|getOtherExams
argument_list|()
control|)
if|if
condition|(
name|exam
operator|.
name|compareTo
argument_list|(
name|other
argument_list|)
operator|>=
literal|0
operator|&&
name|exams
operator|.
name|contains
argument_list|(
name|other
argument_list|)
condition|)
continue|continue
name|conflicts
continue|;
name|String
name|classes
init|=
literal|""
decl_stmt|,
name|enrollment
init|=
literal|""
decl_stmt|,
name|seating
init|=
literal|""
decl_stmt|,
name|date
init|=
literal|""
decl_stmt|,
name|time
init|=
literal|""
decl_stmt|,
name|room
init|=
literal|""
decl_stmt|,
name|distance
init|=
literal|""
decl_stmt|,
name|blank
init|=
literal|""
decl_stmt|;
name|int
name|nrStudents
init|=
name|exam
operator|.
name|getNrStudents
argument_list|()
decl_stmt|;
name|boolean
name|firstSection
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|exam
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|classes
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|blank
operator|+=
name|nl
expr_stmt|;
name|classes
operator|+=
name|nl
expr_stmt|;
name|enrollment
operator|+=
name|nl
expr_stmt|;
name|seating
operator|+=
name|nl
expr_stmt|;
name|date
operator|+=
name|nl
expr_stmt|;
name|time
operator|+=
name|nl
expr_stmt|;
name|room
operator|+=
name|nl
expr_stmt|;
name|distance
operator|+=
name|nl
expr_stmt|;
block|}
name|classes
operator|+=
name|section
operator|.
name|getName
argument_list|()
expr_stmt|;
name|enrollment
operator|+=
name|String
operator|.
name|valueOf
argument_list|(
name|section
operator|.
name|getNrStudents
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|firstSection
condition|)
block|{
name|seating
operator|+=
name|Exam
operator|.
name|sSeatingTypes
index|[
name|exam
operator|.
name|getSeatingType
argument_list|()
index|]
expr_stmt|;
name|date
operator|+=
name|exam
operator|.
name|getDate
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|time
operator|+=
name|exam
operator|.
name|getTime
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|room
operator|+=
operator|(
name|exam
operator|.
name|getNrRooms
argument_list|()
operator|==
literal|0
condition|?
name|noRoom
else|:
name|exam
operator|.
name|getRoomsName
argument_list|(
literal|false
argument_list|,
literal|", "
argument_list|)
operator|)
expr_stmt|;
block|}
name|firstSection
operator|=
literal|false
expr_stmt|;
block|}
for|for
control|(
name|ExamAssignment
name|other
range|:
name|conflict
operator|.
name|getOtherExams
argument_list|()
control|)
block|{
name|firstSection
operator|=
literal|true
expr_stmt|;
name|nrStudents
operator|+=
name|other
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|other
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|classes
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|blank
operator|+=
name|nl
expr_stmt|;
name|classes
operator|+=
name|nl
expr_stmt|;
name|enrollment
operator|+=
name|nl
expr_stmt|;
name|seating
operator|+=
name|nl
expr_stmt|;
name|date
operator|+=
name|nl
expr_stmt|;
name|time
operator|+=
name|nl
expr_stmt|;
name|room
operator|+=
name|nl
expr_stmt|;
name|distance
operator|+=
name|nl
expr_stmt|;
block|}
name|classes
operator|+=
name|section
operator|.
name|getName
argument_list|()
expr_stmt|;
name|enrollment
operator|+=
name|String
operator|.
name|valueOf
argument_list|(
name|section
operator|.
name|getNrStudents
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|firstSection
condition|)
block|{
name|seating
operator|+=
name|Exam
operator|.
name|sSeatingTypes
index|[
name|exam
operator|.
name|getSeatingType
argument_list|()
index|]
expr_stmt|;
name|time
operator|+=
name|other
operator|.
name|getTime
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|room
operator|+=
operator|(
name|other
operator|.
name|getNrRooms
argument_list|()
operator|==
literal|0
condition|?
name|noRoom
else|:
name|other
operator|.
name|getRoomsName
argument_list|(
literal|false
argument_list|,
literal|", "
argument_list|)
operator|)
expr_stmt|;
block|}
name|firstSection
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|table
operator|.
name|addLine
argument_list|(
literal|"onClick=\"document.location='examDetail.do?examId="
operator|+
name|exam
operator|.
name|getExamId
argument_list|()
operator|+
literal|"';\""
argument_list|,
operator|new
name|String
index|[]
block|{
operator|(
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"2"
argument_list|)
operator|+
literal|"'>"
else|:
literal|""
operator|)
operator|+
operator|(
name|html
condition|?
literal|"&gt;"
else|:
literal|""
operator|)
operator|+
literal|"2 A Day"
operator|+
operator|(
name|html
condition|?
literal|"</font>"
else|:
literal|""
operator|)
block|,
name|classes
block|,
name|enrollment
block|,
name|seating
block|,
name|date
block|,
name|time
block|,
name|room
block|,
literal|""
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
literal|1
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|nrStudents
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getExamType
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriodOrd
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getRoomsName
argument_list|(
literal|":"
argument_list|)
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
literal|1.0
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|}
argument_list|,
name|exam
operator|.
name|getExamId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|table
return|;
block|}
specifier|public
name|PdfWebTable
name|getStudentConflits
parameter_list|(
name|boolean
name|html
parameter_list|,
name|TreeSet
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
parameter_list|,
name|DepartmentalInstructor
name|instructor
parameter_list|)
block|{
name|String
name|nl
init|=
operator|(
name|html
condition|?
literal|"<br>"
else|:
literal|"\n"
operator|)
decl_stmt|;
name|PdfWebTable
name|table
init|=
operator|new
name|PdfWebTable
argument_list|(
literal|8
argument_list|,
name|instructor
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|" Examination Conflicts for "
operator|+
name|instructor
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatLastFist
argument_list|)
argument_list|,
literal|"personalizedExams.do?o5=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Name"
block|,
literal|"Type"
block|,
literal|"Class / Course"
block|,
literal|"Enrollment"
block|,
literal|"Seating"
operator|+
name|nl
operator|+
literal|"Type"
block|,
literal|"Date"
block|,
literal|"Time"
block|,
literal|"Room"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"right"
block|,
literal|"center"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
decl_stmt|;
name|table
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap"
argument_list|)
expr_stmt|;
name|String
name|noRoom
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exam.report.noroom"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|table
operator|.
name|setBlankWhenSame
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|exams
control|)
block|{
for|for
control|(
name|DirectConflict
name|conflict
range|:
name|exam
operator|.
name|getDirectConflicts
argument_list|()
control|)
block|{
if|if
condition|(
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|!=
literal|null
operator|&&
name|exam
operator|.
name|compareTo
argument_list|(
name|conflict
operator|.
name|getOtherExam
argument_list|()
argument_list|)
operator|>=
literal|0
operator|&&
name|exams
operator|.
name|contains
argument_list|(
name|conflict
operator|.
name|getOtherExam
argument_list|()
argument_list|)
condition|)
continue|continue;
for|for
control|(
name|Long
name|studentId
range|:
name|conflict
operator|.
name|getStudents
argument_list|()
control|)
block|{
name|Student
name|student
init|=
operator|new
name|StudentDAO
argument_list|()
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|student
operator|.
name|getExternalUniqueId
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|student
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatLastFist
argument_list|)
decl_stmt|;
name|String
name|classes
init|=
literal|""
decl_stmt|,
name|enrollment
init|=
literal|""
decl_stmt|,
name|seating
init|=
literal|""
decl_stmt|,
name|date
init|=
literal|""
decl_stmt|,
name|time
init|=
literal|""
decl_stmt|,
name|room
init|=
literal|""
decl_stmt|,
name|distance
init|=
literal|""
decl_stmt|,
name|blank
init|=
literal|""
decl_stmt|;
name|boolean
name|firstSection
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|exam
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|section
operator|.
name|getStudentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|studentId
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|classes
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|blank
operator|+=
name|nl
expr_stmt|;
name|classes
operator|+=
name|nl
expr_stmt|;
name|enrollment
operator|+=
name|nl
expr_stmt|;
name|seating
operator|+=
name|nl
expr_stmt|;
name|date
operator|+=
name|nl
expr_stmt|;
name|time
operator|+=
name|nl
expr_stmt|;
name|room
operator|+=
name|nl
expr_stmt|;
name|distance
operator|+=
name|nl
expr_stmt|;
block|}
name|classes
operator|+=
name|section
operator|.
name|getName
argument_list|()
expr_stmt|;
name|enrollment
operator|+=
name|String
operator|.
name|valueOf
argument_list|(
name|section
operator|.
name|getNrStudents
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|firstSection
condition|)
block|{
name|seating
operator|+=
name|Exam
operator|.
name|sSeatingTypes
index|[
name|exam
operator|.
name|getSeatingType
argument_list|()
index|]
expr_stmt|;
name|date
operator|+=
name|exam
operator|.
name|getDate
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|time
operator|+=
name|exam
operator|.
name|getTime
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|room
operator|+=
operator|(
name|exam
operator|.
name|getNrRooms
argument_list|()
operator|==
literal|0
condition|?
name|noRoom
else|:
name|exam
operator|.
name|getRoomsName
argument_list|(
literal|false
argument_list|,
literal|", "
argument_list|)
operator|)
expr_stmt|;
block|}
name|firstSection
operator|=
literal|false
expr_stmt|;
block|}
name|firstSection
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|section
operator|.
name|getStudentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|studentId
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|classes
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|blank
operator|+=
name|nl
expr_stmt|;
name|classes
operator|+=
name|nl
expr_stmt|;
name|enrollment
operator|+=
name|nl
expr_stmt|;
name|seating
operator|+=
name|nl
expr_stmt|;
name|date
operator|+=
name|nl
expr_stmt|;
name|time
operator|+=
name|nl
expr_stmt|;
name|room
operator|+=
name|nl
expr_stmt|;
name|distance
operator|+=
name|nl
expr_stmt|;
block|}
name|classes
operator|+=
name|section
operator|.
name|getName
argument_list|()
expr_stmt|;
name|enrollment
operator|+=
name|String
operator|.
name|valueOf
argument_list|(
name|section
operator|.
name|getNrStudents
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|firstSection
condition|)
block|{
name|seating
operator|+=
name|Exam
operator|.
name|sSeatingTypes
index|[
name|exam
operator|.
name|getSeatingType
argument_list|()
index|]
expr_stmt|;
name|room
operator|+=
operator|(
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getNrRooms
argument_list|()
operator|==
literal|0
condition|?
name|noRoom
else|:
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getRoomsName
argument_list|(
literal|false
argument_list|,
literal|", "
argument_list|)
operator|)
expr_stmt|;
block|}
name|firstSection
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|conflict
operator|.
name|getOtherEventId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|blank
operator|+=
name|nl
expr_stmt|;
name|classes
operator|+=
name|nl
expr_stmt|;
name|enrollment
operator|+=
name|nl
expr_stmt|;
name|seating
operator|+=
name|nl
expr_stmt|;
name|date
operator|+=
name|nl
expr_stmt|;
name|time
operator|+=
name|nl
expr_stmt|;
name|room
operator|+=
name|nl
expr_stmt|;
name|distance
operator|+=
name|nl
expr_stmt|;
name|classes
operator|+=
name|conflict
operator|.
name|getOtherEventName
argument_list|()
expr_stmt|;
name|enrollment
operator|+=
name|conflict
operator|.
name|getOtherEventSize
argument_list|()
expr_stmt|;
name|seating
operator|+=
literal|"Class"
expr_stmt|;
name|room
operator|+=
name|conflict
operator|.
name|getOtherEventRoom
argument_list|()
expr_stmt|;
comment|//date += conflict.getOtherEventDate();
name|time
operator|+=
name|conflict
operator|.
name|getOtherEventTime
argument_list|()
expr_stmt|;
block|}
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
name|name
block|,
operator|(
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"P"
argument_list|)
operator|+
literal|"'>"
else|:
literal|""
operator|)
operator|+
literal|"Direct"
operator|+
operator|(
name|html
condition|?
literal|"</font>"
else|:
literal|""
operator|)
block|,
name|classes
block|,
name|enrollment
block|,
name|seating
block|,
name|date
block|,
name|time
block|,
name|room
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
name|name
argument_list|,
name|id
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|0
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|exam
operator|.
name|getNrStudents
argument_list|()
operator|-
operator|(
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getNrStudents
argument_list|()
operator|)
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getExamType
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriodOrd
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getRoomsName
argument_list|(
literal|":"
argument_list|)
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*             for (BackToBackConflict conflict : exam.getBackToBackConflicts()) {                 if (exam.compareTo(conflict.getOtherExam())>=0&& exams.contains(conflict.getOtherExam())) continue;                 for (Long studentId : conflict.getStudents()) {                     Student student = new StudentDAO().get(studentId);                     String id = student.getExternalUniqueId();                     String name = student.getName(DepartmentalInstructor.sNameFormatLastFist);                     String classes = "", enrollment = "", seating = "", date = "", time = "", room = "", distance = "", blank="";                     boolean firstSection = true;                     for (ExamSectionInfo section : exam.getSections()) {                         if (!section.getStudentIds().contains(studentId)) continue;                         if (classes.length()>0) {                             blank+=nl; classes += nl; enrollment += nl; seating += nl; date += nl; time += nl; room += nl; distance += nl;                         }                         classes += section.getName();                         enrollment += String.valueOf(section.getNrStudents());                         if (firstSection) {                             seating += Exam.sSeatingTypes[exam.getSeatingType()];                             date += exam.getDate(false);                             time += exam.getTime(false);                             room += (exam.getNrRooms()==0?noRoom:exam.getRoomsName(false,", "));                         }                         firstSection = false;                     }                     firstSection = true;                     for (ExamSectionInfo section : conflict.getOtherExam().getSections()) {                         if (!section.getStudentIds().contains(studentId)) continue;                         if (classes.length()>0) {                             blank+=nl; classes += nl; enrollment += nl; seating += nl; date += nl; time += nl; room += nl; distance += nl;                         }                         classes += section.getName();                         enrollment += String.valueOf(section.getNrStudents());                         if (firstSection) {                             seating += Exam.sSeatingTypes[exam.getSeatingType()];                             time += conflict.getOtherExam().getTime(false);                             room += (conflict.getOtherExam().getNrRooms()==0?noRoom:conflict.getOtherExam().getRoomsName(false,", "));                         }                         firstSection = false;                     }                     table.addLine(                             new String[] {                                 name,                                 (html?"<font color='"+PreferenceLevel.prolog2color("1")+"'>":"")+"Back-To-Back"+(html?"</font>":""),                                 classes,                                 enrollment,                                 seating,                                 date,                                 time,                                 room                             }, new Comparable[] {                                 new MultiComparable(name, id, exam, 0),                                 new MultiComparable(2, exam, 0),                                 new MultiComparable(exam, exam, 0),                                 new MultiComparable(-exam.getNrStudents()-conflict.getOtherExam().getNrStudents(), exam, 0),                                 new MultiComparable(exam.getExamType(), exam, 0),                                 new MultiComparable(exam.getPeriodOrd(), exam, 0),                                 new MultiComparable(exam.getPeriod().getStartSlot(), exam, 0),                                 new MultiComparable(exam.getRoomsName(":"), exam, 0)                             });                 }             }             */
name|conflicts
label|:
for|for
control|(
name|MoreThanTwoADayConflict
name|conflict
range|:
name|exam
operator|.
name|getMoreThanTwoADaysConflicts
argument_list|()
control|)
block|{
for|for
control|(
name|ExamAssignment
name|other
range|:
name|conflict
operator|.
name|getOtherExams
argument_list|()
control|)
if|if
condition|(
name|exam
operator|.
name|compareTo
argument_list|(
name|other
argument_list|)
operator|>=
literal|0
operator|&&
name|exams
operator|.
name|contains
argument_list|(
name|other
argument_list|)
condition|)
continue|continue
name|conflicts
continue|;
for|for
control|(
name|Long
name|studentId
range|:
name|conflict
operator|.
name|getStudents
argument_list|()
control|)
block|{
name|Student
name|student
init|=
operator|new
name|StudentDAO
argument_list|()
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|student
operator|.
name|getExternalUniqueId
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|student
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatLastFist
argument_list|)
decl_stmt|;
name|String
name|classes
init|=
literal|""
decl_stmt|,
name|enrollment
init|=
literal|""
decl_stmt|,
name|seating
init|=
literal|""
decl_stmt|,
name|date
init|=
literal|""
decl_stmt|,
name|time
init|=
literal|""
decl_stmt|,
name|room
init|=
literal|""
decl_stmt|,
name|distance
init|=
literal|""
decl_stmt|,
name|blank
init|=
literal|""
decl_stmt|;
name|int
name|nrStudents
init|=
name|exam
operator|.
name|getNrStudents
argument_list|()
decl_stmt|;
name|boolean
name|firstSection
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|exam
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|section
operator|.
name|getStudentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|studentId
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|classes
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|blank
operator|+=
name|nl
expr_stmt|;
name|classes
operator|+=
name|nl
expr_stmt|;
name|enrollment
operator|+=
name|nl
expr_stmt|;
name|seating
operator|+=
name|nl
expr_stmt|;
name|date
operator|+=
name|nl
expr_stmt|;
name|time
operator|+=
name|nl
expr_stmt|;
name|room
operator|+=
name|nl
expr_stmt|;
name|distance
operator|+=
name|nl
expr_stmt|;
block|}
name|classes
operator|+=
name|section
operator|.
name|getName
argument_list|()
expr_stmt|;
name|enrollment
operator|+=
name|String
operator|.
name|valueOf
argument_list|(
name|section
operator|.
name|getNrStudents
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|firstSection
condition|)
block|{
name|seating
operator|+=
name|Exam
operator|.
name|sSeatingTypes
index|[
name|exam
operator|.
name|getSeatingType
argument_list|()
index|]
expr_stmt|;
name|date
operator|+=
name|exam
operator|.
name|getDate
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|time
operator|+=
name|exam
operator|.
name|getTime
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|room
operator|+=
operator|(
name|exam
operator|.
name|getNrRooms
argument_list|()
operator|==
literal|0
condition|?
name|noRoom
else|:
name|exam
operator|.
name|getRoomsName
argument_list|(
literal|false
argument_list|,
literal|", "
argument_list|)
operator|)
expr_stmt|;
block|}
name|firstSection
operator|=
literal|false
expr_stmt|;
block|}
for|for
control|(
name|ExamAssignment
name|other
range|:
name|conflict
operator|.
name|getOtherExams
argument_list|()
control|)
block|{
name|firstSection
operator|=
literal|true
expr_stmt|;
name|nrStudents
operator|+=
name|other
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|other
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|section
operator|.
name|getStudentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|studentId
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|classes
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|blank
operator|+=
name|nl
expr_stmt|;
name|classes
operator|+=
name|nl
expr_stmt|;
name|enrollment
operator|+=
name|nl
expr_stmt|;
name|seating
operator|+=
name|nl
expr_stmt|;
name|date
operator|+=
name|nl
expr_stmt|;
name|time
operator|+=
name|nl
expr_stmt|;
name|room
operator|+=
name|nl
expr_stmt|;
name|distance
operator|+=
name|nl
expr_stmt|;
block|}
name|classes
operator|+=
name|section
operator|.
name|getName
argument_list|()
expr_stmt|;
name|enrollment
operator|+=
name|String
operator|.
name|valueOf
argument_list|(
name|section
operator|.
name|getNrStudents
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|firstSection
condition|)
block|{
name|seating
operator|+=
name|Exam
operator|.
name|sSeatingTypes
index|[
name|exam
operator|.
name|getSeatingType
argument_list|()
index|]
expr_stmt|;
name|time
operator|+=
name|other
operator|.
name|getTime
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|room
operator|+=
operator|(
name|other
operator|.
name|getNrRooms
argument_list|()
operator|==
literal|0
condition|?
name|noRoom
else|:
name|other
operator|.
name|getRoomsName
argument_list|(
literal|false
argument_list|,
literal|", "
argument_list|)
operator|)
expr_stmt|;
block|}
name|firstSection
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
name|name
block|,
operator|(
name|html
condition|?
literal|"<font color='"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"2"
argument_list|)
operator|+
literal|"'>"
else|:
literal|""
operator|)
operator|+
operator|(
name|html
condition|?
literal|"&gt;"
else|:
literal|""
operator|)
operator|+
literal|"2 A Day"
operator|+
operator|(
name|html
condition|?
literal|"</font>"
else|:
literal|""
operator|)
block|,
name|classes
block|,
name|enrollment
block|,
name|seating
block|,
name|date
block|,
name|time
block|,
name|room
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
name|name
argument_list|,
name|id
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
literal|1
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|nrStudents
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getExamType
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriodOrd
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|exam
operator|.
name|getRoomsName
argument_list|(
literal|":"
argument_list|)
argument_list|,
name|exam
argument_list|,
literal|0
argument_list|)
block|,                             }
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|table
return|;
block|}
specifier|protected
name|String
name|getMeetingTime
parameter_list|(
name|Class_
name|clazz
parameter_list|)
block|{
name|String
name|meetingTime
init|=
literal|""
decl_stmt|;
name|SimpleDateFormat
name|dpf
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd"
argument_list|)
decl_stmt|;
name|Assignment
name|assignment
init|=
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
name|TreeSet
name|meetings
init|=
operator|(
name|clazz
operator|.
name|getEvent
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|TreeSet
argument_list|(
name|clazz
operator|.
name|getEvent
argument_list|()
operator|.
name|getMeetings
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|meetings
operator|!=
literal|null
operator|&&
operator|!
name|meetings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Date
name|first
init|=
operator|(
operator|(
name|Meeting
operator|)
name|meetings
operator|.
name|first
argument_list|()
operator|)
operator|.
name|getMeetingDate
argument_list|()
decl_stmt|;
name|Date
name|last
init|=
operator|(
operator|(
name|Meeting
operator|)
name|meetings
operator|.
name|last
argument_list|()
operator|)
operator|.
name|getMeetingDate
argument_list|()
decl_stmt|;
name|meetingTime
operator|+=
name|dpf
operator|.
name|format
argument_list|(
name|first
argument_list|)
operator|+
literal|" - "
operator|+
name|dpf
operator|.
name|format
argument_list|(
name|last
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|assignment
operator|!=
literal|null
operator|&&
name|assignment
operator|.
name|getDatePattern
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|DatePattern
name|dp
init|=
name|assignment
operator|.
name|getDatePattern
argument_list|()
decl_stmt|;
if|if
condition|(
name|dp
operator|!=
literal|null
operator|&&
operator|!
name|dp
operator|.
name|isDefault
argument_list|()
condition|)
block|{
if|if
condition|(
name|dp
operator|.
name|getType
argument_list|()
operator|.
name|intValue
argument_list|()
operator|==
name|DatePattern
operator|.
name|sTypeAlternate
condition|)
name|meetingTime
operator|+=
name|dp
operator|.
name|getName
argument_list|()
expr_stmt|;
else|else
block|{
name|meetingTime
operator|+=
name|dpf
operator|.
name|format
argument_list|(
name|dp
operator|.
name|getStartDate
argument_list|()
argument_list|)
operator|+
literal|" - "
operator|+
name|dpf
operator|.
name|format
argument_list|(
name|dp
operator|.
name|getEndDate
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|meetings
operator|!=
literal|null
operator|&&
operator|!
name|meetings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|dayCode
init|=
name|getDaysCode
argument_list|(
name|meetings
argument_list|)
decl_stmt|;
name|String
name|days
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|DAY_CODES
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
operator|(
name|dayCode
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|i
index|]
operator|)
operator|!=
literal|0
condition|)
name|days
operator|+=
name|Constants
operator|.
name|DAY_NAMES_SHORT
index|[
name|i
index|]
expr_stmt|;
name|meetingTime
operator|+=
literal|" "
operator|+
name|days
expr_stmt|;
name|Meeting
name|first
init|=
operator|(
name|Meeting
operator|)
name|meetings
operator|.
name|first
argument_list|()
decl_stmt|;
name|meetingTime
operator|+=
literal|" "
operator|+
name|first
operator|.
name|startTime
argument_list|()
operator|+
literal|" - "
operator|+
name|first
operator|.
name|stopTime
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|assignment
operator|!=
literal|null
condition|)
block|{
name|TimeLocation
name|t
init|=
name|assignment
operator|.
name|getTimeLocation
argument_list|()
decl_stmt|;
name|meetingTime
operator|+=
literal|" "
operator|+
name|t
operator|.
name|getDayHeader
argument_list|()
operator|+
literal|" "
operator|+
name|t
operator|.
name|getStartTimeHeader
argument_list|()
operator|+
literal|" - "
operator|+
name|t
operator|.
name|getEndTimeHeader
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|meetingTime
operator|+=
literal|"Arr Hrs"
expr_stmt|;
block|}
return|return
name|meetingTime
return|;
block|}
specifier|protected
name|String
name|getMeetingRooms
parameter_list|(
name|Class_
name|clazz
parameter_list|)
block|{
name|String
name|meetingRooms
init|=
literal|""
decl_stmt|;
name|Assignment
name|assignment
init|=
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|Meeting
argument_list|>
name|meetings
init|=
operator|(
name|clazz
operator|.
name|getEvent
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|TreeSet
argument_list|(
name|clazz
operator|.
name|getEvent
argument_list|()
operator|.
name|getMeetings
argument_list|()
argument_list|)
operator|)
decl_stmt|;
name|TreeSet
argument_list|<
name|Location
argument_list|>
name|locations
init|=
operator|new
name|TreeSet
argument_list|<
name|Location
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|meetings
operator|!=
literal|null
operator|&&
operator|!
name|meetings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Meeting
name|meeting
range|:
name|meetings
control|)
if|if
condition|(
name|meeting
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
name|locations
operator|.
name|add
argument_list|(
name|meeting
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|assignment
operator|!=
literal|null
operator|&&
name|assignment
operator|.
name|getDatePattern
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|assignment
operator|.
name|getRooms
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|locations
operator|.
name|add
argument_list|(
operator|(
name|Location
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Location
name|location
range|:
name|locations
control|)
block|{
if|if
condition|(
name|meetingRooms
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|meetingRooms
operator|+=
literal|", "
expr_stmt|;
name|meetingRooms
operator|+=
name|location
operator|.
name|getLabel
argument_list|()
expr_stmt|;
block|}
return|return
name|meetingRooms
return|;
block|}
specifier|protected
name|long
name|getMeetingComparable
parameter_list|(
name|Class_
name|clazz
parameter_list|)
block|{
name|Assignment
name|assignment
init|=
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
name|TreeSet
name|meetings
init|=
operator|(
name|clazz
operator|.
name|getEvent
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|TreeSet
argument_list|(
name|clazz
operator|.
name|getEvent
argument_list|()
operator|.
name|getMeetings
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|meetings
operator|!=
literal|null
operator|&&
operator|!
name|meetings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|(
operator|(
name|Meeting
operator|)
name|meetings
operator|.
name|first
argument_list|()
operator|)
operator|.
name|getMeetingDate
argument_list|()
operator|.
name|getTime
argument_list|()
return|;
block|}
if|else if
condition|(
name|assignment
operator|!=
literal|null
condition|)
block|{
return|return
name|assignment
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getStartSlot
argument_list|()
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
specifier|protected
name|String
name|getMeetingInstructor
parameter_list|(
name|Class_
name|clazz
parameter_list|)
block|{
name|String
name|meetingInstructor
init|=
literal|""
decl_stmt|;
if|if
condition|(
operator|!
name|clazz
operator|.
name|isDisplayInstructor
argument_list|()
condition|)
return|return
name|meetingInstructor
return|;
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|TreeSet
argument_list|(
name|clazz
operator|.
name|getClassInstructors
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|ci
init|=
operator|(
name|ClassInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|meetingInstructor
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|meetingInstructor
operator|+=
literal|", "
expr_stmt|;
name|meetingInstructor
operator|+=
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatLastInitial
argument_list|)
expr_stmt|;
block|}
return|return
name|meetingInstructor
return|;
block|}
specifier|public
name|PdfWebTable
name|getStudentClassSchedule
parameter_list|(
name|boolean
name|html
parameter_list|,
name|Student
name|student
parameter_list|)
block|{
name|String
name|nl
init|=
operator|(
name|html
condition|?
literal|"<br>"
else|:
literal|"\n"
operator|)
decl_stmt|;
name|PdfWebTable
name|table
init|=
operator|new
name|PdfWebTable
argument_list|(
literal|6
argument_list|,
name|student
operator|.
name|getSession
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|" Class Schedule for "
operator|+
name|student
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatLastFist
argument_list|)
argument_list|,
literal|"personalizedExams.do?o6=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Course"
block|,
literal|"Instruction"
operator|+
name|nl
operator|+
literal|"Type"
block|,
literal|"Section"
block|,
literal|"Time"
block|,
literal|"Room"
block|,
literal|"Instructor"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
decl_stmt|;
name|table
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap"
argument_list|)
expr_stmt|;
name|table
operator|.
name|setBlankWhenSame
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|boolean
name|suffix
init|=
literal|"true"
operator|.
name|equals
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exam.report.suffix"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|student
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|StudentClassEnrollment
name|sce
init|=
operator|(
name|StudentClassEnrollment
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|course
init|=
name|sce
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
decl_stmt|;
name|String
name|itype
init|=
name|sce
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
decl_stmt|;
name|int
name|itypeCmp
init|=
name|sce
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getItype
argument_list|()
decl_stmt|;
name|String
name|section
init|=
operator|(
name|suffix
operator|&&
name|sce
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassSuffix
argument_list|()
operator|!=
literal|null
condition|?
name|sce
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassSuffix
argument_list|()
else|:
name|sce
operator|.
name|getClazz
argument_list|()
operator|.
name|getSectionNumberString
argument_list|()
operator|)
decl_stmt|;
name|String
name|time
init|=
name|getMeetingTime
argument_list|(
name|sce
operator|.
name|getClazz
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|timeCmp
init|=
name|getMeetingComparable
argument_list|(
name|sce
operator|.
name|getClazz
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|room
init|=
name|getMeetingRooms
argument_list|(
name|sce
operator|.
name|getClazz
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|instr
init|=
name|getMeetingInstructor
argument_list|(
name|sce
operator|.
name|getClazz
argument_list|()
argument_list|)
decl_stmt|;
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
name|course
block|,
name|itype
block|,
name|section
block|,
name|time
block|,
name|room
block|,
name|instr
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
name|course
argument_list|,
name|itypeCmp
argument_list|,
name|section
argument_list|,
name|timeCmp
argument_list|,
name|room
argument_list|,
name|instr
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|itypeCmp
argument_list|,
name|course
argument_list|,
name|section
argument_list|,
name|timeCmp
argument_list|,
name|room
argument_list|,
name|instr
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|course
argument_list|,
name|section
argument_list|,
name|itypeCmp
argument_list|,
name|timeCmp
argument_list|,
name|room
argument_list|,
name|instr
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|timeCmp
argument_list|,
name|room
argument_list|,
name|course
argument_list|,
name|itypeCmp
argument_list|,
name|section
argument_list|,
name|instr
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|room
argument_list|,
name|timeCmp
argument_list|,
name|course
argument_list|,
name|itypeCmp
argument_list|,
name|section
argument_list|,
name|instr
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|instr
argument_list|,
name|course
argument_list|,
name|itypeCmp
argument_list|,
name|section
argument_list|,
name|timeCmp
argument_list|,
name|room
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|table
return|;
block|}
specifier|public
name|PdfWebTable
name|getInstructorClassSchedule
parameter_list|(
name|boolean
name|html
parameter_list|,
name|DepartmentalInstructor
name|instructor
parameter_list|)
block|{
name|String
name|nl
init|=
operator|(
name|html
condition|?
literal|"<br>"
else|:
literal|"\n"
operator|)
decl_stmt|;
name|PdfWebTable
name|table
init|=
operator|new
name|PdfWebTable
argument_list|(
literal|6
argument_list|,
name|instructor
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|" Class Schedule for "
operator|+
name|instructor
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatLastFist
argument_list|)
argument_list|,
literal|"personalizedExams.do?o7=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Course"
block|,
literal|"Instruction"
operator|+
name|nl
operator|+
literal|"Type"
block|,
literal|"Section"
block|,
literal|"Time"
block|,
literal|"Room"
block|,
literal|"Share"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
decl_stmt|;
name|Set
name|allClasses
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|DepartmentalInstructor
operator|.
name|getAllForInstructor
argument_list|(
name|instructor
argument_list|,
name|instructor
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentalInstructor
name|di
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|allClasses
operator|.
name|addAll
argument_list|(
name|di
operator|.
name|getClasses
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap"
argument_list|)
expr_stmt|;
name|table
operator|.
name|setBlankWhenSame
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|boolean
name|suffix
init|=
literal|"true"
operator|.
name|equals
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exam.report.suffix"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|allClasses
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|ci
init|=
operator|(
name|ClassInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|course
init|=
name|ci
operator|.
name|getClassInstructing
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
decl_stmt|;
name|String
name|itype
init|=
name|ci
operator|.
name|getClassInstructing
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
decl_stmt|;
name|int
name|itypeCmp
init|=
name|ci
operator|.
name|getClassInstructing
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getItype
argument_list|()
decl_stmt|;
name|String
name|section
init|=
operator|(
name|suffix
operator|&&
name|ci
operator|.
name|getClassInstructing
argument_list|()
operator|.
name|getClassSuffix
argument_list|()
operator|!=
literal|null
condition|?
name|ci
operator|.
name|getClassInstructing
argument_list|()
operator|.
name|getClassSuffix
argument_list|()
else|:
name|ci
operator|.
name|getClassInstructing
argument_list|()
operator|.
name|getSectionNumberString
argument_list|()
operator|)
decl_stmt|;
name|String
name|time
init|=
name|getMeetingTime
argument_list|(
name|ci
operator|.
name|getClassInstructing
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|timeCmp
init|=
name|getMeetingComparable
argument_list|(
name|ci
operator|.
name|getClassInstructing
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|room
init|=
name|getMeetingRooms
argument_list|(
name|ci
operator|.
name|getClassInstructing
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|share
init|=
name|ci
operator|.
name|getPercentShare
argument_list|()
operator|+
literal|"%"
decl_stmt|;
if|if
condition|(
name|html
operator|&&
name|ci
operator|.
name|isLead
argument_list|()
condition|)
name|share
operator|=
literal|"<b>"
operator|+
name|share
operator|+
literal|"</b>"
expr_stmt|;
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
name|course
block|,
name|itype
block|,
name|section
block|,
name|time
block|,
name|room
block|,
name|share
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
name|course
argument_list|,
name|itypeCmp
argument_list|,
name|section
argument_list|,
name|timeCmp
argument_list|,
name|room
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|itypeCmp
argument_list|,
name|course
argument_list|,
name|section
argument_list|,
name|timeCmp
argument_list|,
name|room
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|course
argument_list|,
name|section
argument_list|,
name|itypeCmp
argument_list|,
name|timeCmp
argument_list|,
name|room
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|timeCmp
argument_list|,
name|room
argument_list|,
name|course
argument_list|,
name|itypeCmp
argument_list|,
name|section
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|room
argument_list|,
name|timeCmp
argument_list|,
name|course
argument_list|,
name|itypeCmp
argument_list|,
name|section
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
operator|-
name|ci
operator|.
name|getPercentShare
argument_list|()
argument_list|,
name|course
argument_list|,
name|itypeCmp
argument_list|,
name|section
argument_list|,
name|timeCmp
argument_list|,
name|room
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|table
return|;
block|}
specifier|public
name|void
name|printStudentSchedule
parameter_list|(
name|File
name|file
parameter_list|,
name|Student
name|student
parameter_list|,
name|HashSet
argument_list|<
name|Exam
argument_list|>
name|exams
parameter_list|)
throws|throws
name|Exception
block|{
name|PrintWriter
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|SimpleDateFormat
name|df
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyyMMdd"
argument_list|)
decl_stmt|;
name|df
operator|.
name|setTimeZone
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
expr_stmt|;
name|SimpleDateFormat
name|tf
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"HHmmss"
argument_list|)
decl_stmt|;
name|tf
operator|.
name|setTimeZone
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"BEGIN:VCALENDAR"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"VERSION:2.0"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"CALSCALE:GREGORIAN"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"METHOD:PUBLISH"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"X-WR-CALNAME:"
operator|+
name|student
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatLastFist
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"X-WR-TIMEZONE:"
operator|+
name|TimeZone
operator|.
name|getDefault
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"PRODID:-//UniTime "
operator|+
name|Constants
operator|.
name|VERSION
operator|+
literal|"."
operator|+
name|Constants
operator|.
name|BLD_NUMBER
operator|.
name|replaceAll
argument_list|(
literal|"@build.number@"
argument_list|,
literal|"?"
argument_list|)
operator|+
literal|"/UniTime Personal Schedule//NONSGML v1.0//EN"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|student
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|StudentClassEnrollment
name|sce
init|=
operator|(
name|StudentClassEnrollment
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|sce
operator|.
name|getClazz
argument_list|()
operator|.
name|getEvent
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|k
init|=
name|sce
operator|.
name|getClazz
argument_list|()
operator|.
name|getEvent
argument_list|()
operator|.
name|getMeetings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Meeting
name|meeting
init|=
operator|(
name|Meeting
operator|)
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"BEGIN:VEVENT"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"UID:m"
operator|+
name|meeting
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"DTSTART:"
operator|+
name|df
operator|.
name|format
argument_list|(
name|meeting
operator|.
name|getStartTime
argument_list|()
argument_list|)
operator|+
literal|"T"
operator|+
name|tf
operator|.
name|format
argument_list|(
name|meeting
operator|.
name|getStartTime
argument_list|()
argument_list|)
operator|+
literal|"Z"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"DTEND:"
operator|+
name|df
operator|.
name|format
argument_list|(
name|meeting
operator|.
name|getStopTime
argument_list|()
argument_list|)
operator|+
literal|"T"
operator|+
name|tf
operator|.
name|format
argument_list|(
name|meeting
operator|.
name|getStopTime
argument_list|()
argument_list|)
operator|+
literal|"Z"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"SUMMARY:"
operator|+
name|meeting
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventName
argument_list|()
operator|+
literal|" ("
operator|+
name|meeting
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventTypeLabel
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|meeting
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
name|out
operator|.
name|println
argument_list|(
literal|"LOCATION:"
operator|+
name|meeting
operator|.
name|getLocation
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"END:VEVENT"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Exam
name|exam
range|:
name|exams
control|)
block|{
if|if
condition|(
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|ExamSectionInfo
name|section
range|:
operator|new
name|ExamAssignment
argument_list|(
name|exam
argument_list|)
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|section
operator|.
name|getStudentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"BEGIN:VEVENT"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"UID:x"
operator|+
name|exam
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"DTSTART:"
operator|+
name|df
operator|.
name|format
argument_list|(
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
operator|.
name|getStartTime
argument_list|()
argument_list|)
operator|+
literal|"T"
operator|+
name|tf
operator|.
name|format
argument_list|(
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
operator|.
name|getStartTime
argument_list|()
argument_list|)
operator|+
literal|"Z"
argument_list|)
expr_stmt|;
name|Calendar
name|endTime
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|endTime
operator|.
name|setTime
argument_list|(
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|endTime
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|exam
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"DTEND:"
operator|+
name|df
operator|.
name|format
argument_list|(
name|endTime
operator|.
name|getTime
argument_list|()
argument_list|)
operator|+
literal|"T"
operator|+
name|tf
operator|.
name|format
argument_list|(
name|endTime
operator|.
name|getTime
argument_list|()
argument_list|)
operator|+
literal|"Z"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"SUMMARY:"
operator|+
name|section
operator|.
name|getName
argument_list|()
operator|+
literal|" ("
operator|+
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exam.name.type."
operator|+
name|Exam
operator|.
name|sExamTypes
index|[
name|exam
operator|.
name|getExamType
argument_list|()
index|]
argument_list|,
name|Exam
operator|.
name|sExamTypes
index|[
name|exam
operator|.
name|getExamType
argument_list|()
index|]
argument_list|)
operator|+
literal|" Exam)"
argument_list|)
expr_stmt|;
comment|//out.println("DESCRIPTION:"+exam.getExamName()+" ("+Exam.sExamTypes[exam.getExamType()]+" Exam)");
if|if
condition|(
operator|!
name|exam
operator|.
name|getAssignedRooms
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|rooms
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|TreeSet
argument_list|(
name|exam
operator|.
name|getAssignedRooms
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|location
init|=
operator|(
name|Location
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|rooms
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|rooms
operator|+=
literal|", "
expr_stmt|;
name|rooms
operator|+=
name|location
operator|.
name|getLabel
argument_list|()
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"LOCATION:"
operator|+
name|rooms
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"END:VEVENT"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|printInstructorSchedule
parameter_list|(
name|File
name|file
parameter_list|,
name|DepartmentalInstructor
name|instructor
parameter_list|,
name|HashSet
argument_list|<
name|Exam
argument_list|>
name|exams
parameter_list|)
throws|throws
name|Exception
block|{
name|PrintWriter
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|SimpleDateFormat
name|df
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyyMMdd"
argument_list|)
decl_stmt|;
name|df
operator|.
name|setTimeZone
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
expr_stmt|;
name|SimpleDateFormat
name|tf
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"HHmmss"
argument_list|)
decl_stmt|;
name|tf
operator|.
name|setTimeZone
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"BEGIN:VCALENDAR"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"VERSION:2.0"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"CALSCALE:GREGORIAN"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"METHOD:PUBLISH"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"X-WR-CALNAME:"
operator|+
name|instructor
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatLastFist
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"X-WR-TIMEZONE:"
operator|+
name|TimeZone
operator|.
name|getDefault
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"PRODID:-//UniTime "
operator|+
name|Constants
operator|.
name|VERSION
operator|+
literal|"."
operator|+
name|Constants
operator|.
name|BLD_NUMBER
operator|.
name|replaceAll
argument_list|(
literal|"@build.number@"
argument_list|,
literal|"?"
argument_list|)
operator|+
literal|"/UniTime Personal Schedule//NONSGML v1.0//EN"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|DepartmentalInstructor
operator|.
name|getAllForInstructor
argument_list|(
name|instructor
argument_list|,
name|instructor
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentalInstructor
name|di
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|di
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|ci
init|=
operator|(
name|ClassInstructor
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ci
operator|.
name|getClassInstructing
argument_list|()
operator|.
name|getEvent
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|k
init|=
name|ci
operator|.
name|getClassInstructing
argument_list|()
operator|.
name|getEvent
argument_list|()
operator|.
name|getMeetings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Meeting
name|meeting
init|=
operator|(
name|Meeting
operator|)
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"BEGIN:VEVENT"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"UID:m"
operator|+
name|meeting
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"DTSTART:"
operator|+
name|df
operator|.
name|format
argument_list|(
name|meeting
operator|.
name|getStartTime
argument_list|()
argument_list|)
operator|+
literal|"T"
operator|+
name|tf
operator|.
name|format
argument_list|(
name|meeting
operator|.
name|getStartTime
argument_list|()
argument_list|)
operator|+
literal|"Z"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"DTEND:"
operator|+
name|df
operator|.
name|format
argument_list|(
name|meeting
operator|.
name|getStopTime
argument_list|()
argument_list|)
operator|+
literal|"T"
operator|+
name|tf
operator|.
name|format
argument_list|(
name|meeting
operator|.
name|getStopTime
argument_list|()
argument_list|)
operator|+
literal|"Z"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"SUMMARY:"
operator|+
name|meeting
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventName
argument_list|()
operator|+
literal|" ("
operator|+
name|meeting
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventTypeLabel
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|meeting
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
name|out
operator|.
name|println
argument_list|(
literal|"LOCATION:"
operator|+
name|meeting
operator|.
name|getLocation
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"END:VEVENT"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|Exam
name|exam
range|:
name|exams
control|)
block|{
if|if
condition|(
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|out
operator|.
name|println
argument_list|(
literal|"BEGIN:VEVENT"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"UID:x"
operator|+
name|exam
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"DTSTART:"
operator|+
name|df
operator|.
name|format
argument_list|(
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
operator|.
name|getStartTime
argument_list|()
argument_list|)
operator|+
literal|"T"
operator|+
name|tf
operator|.
name|format
argument_list|(
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
operator|.
name|getStartTime
argument_list|()
argument_list|)
operator|+
literal|"Z"
argument_list|)
expr_stmt|;
name|Calendar
name|endTime
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|endTime
operator|.
name|setTime
argument_list|(
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|endTime
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|exam
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"DTEND:"
operator|+
name|df
operator|.
name|format
argument_list|(
name|endTime
operator|.
name|getTime
argument_list|()
argument_list|)
operator|+
literal|"T"
operator|+
name|tf
operator|.
name|format
argument_list|(
name|endTime
operator|.
name|getTime
argument_list|()
argument_list|)
operator|+
literal|"Z"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"SUMMARY:"
operator|+
name|exam
operator|.
name|getLabel
argument_list|()
operator|+
literal|" ("
operator|+
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exam.name.type."
operator|+
name|Exam
operator|.
name|sExamTypes
index|[
name|exam
operator|.
name|getExamType
argument_list|()
index|]
argument_list|,
name|Exam
operator|.
name|sExamTypes
index|[
name|exam
operator|.
name|getExamType
argument_list|()
index|]
argument_list|)
operator|+
literal|" Exam)"
argument_list|)
expr_stmt|;
comment|//out.println("DESCRIPTION:"+exam.getExamName()+" ("+Exam.sExamTypes[exam.getExamType()]+" Exam)");
if|if
condition|(
operator|!
name|exam
operator|.
name|getAssignedRooms
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|rooms
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|TreeSet
argument_list|(
name|exam
operator|.
name|getAssignedRooms
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|location
init|=
operator|(
name|Location
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|rooms
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|rooms
operator|+=
literal|", "
expr_stmt|;
name|rooms
operator|+=
name|location
operator|.
name|getLabel
argument_list|()
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"LOCATION:"
operator|+
name|rooms
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"END:VEVENT"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

