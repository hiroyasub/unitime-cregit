begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 - 3.5 (University Timetabling Application)  * Copyright (C) 2008 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|authentication
operator|.
name|AuthenticationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|authentication
operator|.
name|UsernamePasswordAuthenticationToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|core
operator|.
name|Authentication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|core
operator|.
name|context
operator|.
name|SecurityContextHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|MultiComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|WebTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|ClassesForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Meeting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|Class_DAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserAuthority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|LoginManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|PdfWebTable
import|;
end_import

begin_comment
comment|/**   * @author Tomas Muller, Stephanie Schluttenhofer  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"/classes"
argument_list|)
specifier|public
class|class
name|ClassesAction
extends|extends
name|Action
block|{
annotation|@
name|Autowired
name|AuthenticationManager
name|authenticationManager
decl_stmt|;
annotation|@
name|Autowired
name|SessionContext
name|sessionContext
decl_stmt|;
specifier|public
name|ActionForward
name|execute
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
name|ClassesForm
name|myForm
init|=
operator|(
name|ClassesForm
operator|)
name|form
decl_stmt|;
name|String
name|op
init|=
operator|(
name|myForm
operator|.
name|getOp
argument_list|()
operator|!=
literal|null
condition|?
name|myForm
operator|.
name|getOp
argument_list|()
else|:
name|request
operator|.
name|getParameter
argument_list|(
literal|"op"
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"select"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|myForm
operator|.
name|load
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"subject"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|myForm
operator|.
name|setSubjectArea
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|myForm
operator|.
name|canDisplayAllSubjectsAtOnce
argument_list|()
condition|)
block|{
name|myForm
operator|.
name|setSubjectArea
argument_list|(
literal|"--ALL--"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"year"
argument_list|)
operator|!=
literal|null
operator|&&
name|request
operator|.
name|getParameter
argument_list|(
literal|"term"
argument_list|)
operator|!=
literal|null
operator|&&
name|request
operator|.
name|getParameter
argument_list|(
literal|"campus"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|Session
name|session
init|=
name|Session
operator|.
name|getSessionUsingInitiativeYearTerm
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"campus"
argument_list|)
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"year"
argument_list|)
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"term"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
name|myForm
operator|.
name|setSession
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"course"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|myForm
operator|.
name|setCourseNumber
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"course"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|myForm
operator|.
name|setCourseNumber
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|op
operator|=
literal|"Apply"
expr_stmt|;
block|}
if|if
condition|(
literal|"Apply"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|myForm
operator|.
name|save
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|myForm
operator|.
name|getUsername
argument_list|()
operator|!=
literal|null
operator|&&
name|myForm
operator|.
name|getUsername
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|myForm
operator|.
name|getPassword
argument_list|()
operator|!=
literal|null
operator|&&
name|myForm
operator|.
name|getPassword
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|Authentication
name|authRequest
init|=
operator|new
name|UsernamePasswordAuthenticationToken
argument_list|(
name|myForm
operator|.
name|getUsername
argument_list|()
argument_list|,
name|myForm
operator|.
name|getPassword
argument_list|()
argument_list|)
decl_stmt|;
name|Authentication
name|authResult
init|=
name|authenticationManager
operator|.
name|authenticate
argument_list|(
name|authRequest
argument_list|)
decl_stmt|;
name|SecurityContextHolder
operator|.
name|getContext
argument_list|()
operator|.
name|setAuthentication
argument_list|(
name|authResult
argument_list|)
expr_stmt|;
name|UserContext
name|user
init|=
operator|(
name|UserContext
operator|)
name|authResult
operator|.
name|getPrincipal
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|PersonalSchedule
argument_list|)
condition|)
for|for
control|(
name|UserAuthority
name|auth
range|:
name|user
operator|.
name|getAuthorities
argument_list|()
control|)
block|{
if|if
condition|(
name|auth
operator|.
name|getAcademicSession
argument_list|()
operator|!=
literal|null
operator|&&
name|auth
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getQualifierId
argument_list|()
operator|.
name|equals
argument_list|(
name|myForm
operator|.
name|getSession
argument_list|()
argument_list|)
operator|&&
name|auth
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|PersonalSchedule
argument_list|)
condition|)
block|{
name|user
operator|.
name|setCurrentAuthority
argument_list|(
name|auth
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|setAttribute
argument_list|(
literal|"loginPage"
argument_list|,
literal|"classes"
argument_list|)
expr_stmt|;
name|LoginManager
operator|.
name|loginSuceeded
argument_list|(
name|authResult
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|==
literal|null
condition|)
block|{
name|response
operator|.
name|sendRedirect
argument_list|(
literal|"selectPrimaryRole.do"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"personal"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|myForm
operator|.
name|setMessage
argument_list|(
literal|"Authentication failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|LoginManager
operator|.
name|addFailedLoginAttempt
argument_list|(
name|myForm
operator|.
name|getUsername
argument_list|()
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|myForm
operator|.
name|load
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
name|WebTable
operator|.
name|setOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"classes.order"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"ord"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|myForm
operator|.
name|getSession
argument_list|()
operator|!=
literal|null
operator|&&
name|myForm
operator|.
name|getSubjectArea
argument_list|()
operator|!=
literal|null
operator|&&
name|myForm
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
name|session
init|=
operator|new
name|SessionDAO
argument_list|()
operator|.
name|get
argument_list|(
name|myForm
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|canNoRoleReportClass
argument_list|()
condition|)
block|{
name|List
name|classes
init|=
literal|null
decl_stmt|;
name|SubjectArea
name|sa
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|"--ALL--"
operator|.
name|equals
argument_list|(
name|myForm
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
condition|)
name|classes
operator|=
name|Class_
operator|.
name|findAll
argument_list|(
name|myForm
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
else|else
block|{
name|sa
operator|=
name|SubjectArea
operator|.
name|findByAbbv
argument_list|(
name|myForm
operator|.
name|getSession
argument_list|()
argument_list|,
name|myForm
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sa
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|myForm
operator|.
name|getCourseNumber
argument_list|()
operator|!=
literal|null
operator|&&
name|myForm
operator|.
name|getCourseNumber
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|classes
operator|=
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct c from Class_ c inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering io inner join io.courseOfferings co where "
operator|+
literal|"c.schedulingSubpart.instrOfferingConfig.instructionalOffering.session.uniqueId=:sessionId and "
operator|+
literal|"co.subjectArea.uniqueId=:subjectAreaId and co.courseNbr like :courseNbr"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|myForm
operator|.
name|getSession
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"subjectAreaId"
argument_list|,
name|sa
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"courseNbr"
argument_list|,
name|myForm
operator|.
name|getCourseNumber
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\*"
argument_list|,
literal|"%"
argument_list|)
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|classes
operator|=
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct c from Class_ c inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering io inner join io.courseOfferings co where "
operator|+
literal|"c.schedulingSubpart.instrOfferingConfig.instructionalOffering.session.uniqueId=:sessionId and "
operator|+
literal|"co.subjectArea.uniqueId=:subjectAreaId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|myForm
operator|.
name|getSession
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"subjectAreaId"
argument_list|,
name|sa
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|classes
operator|!=
literal|null
operator|&&
operator|!
name|classes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|ord
init|=
name|WebTable
operator|.
name|getOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"classes.order"
argument_list|)
decl_stmt|;
name|PdfWebTable
name|table
init|=
name|getTable
argument_list|(
literal|true
argument_list|,
name|myForm
argument_list|,
name|classes
argument_list|,
name|ord
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
name|myForm
operator|.
name|setTable
argument_list|(
name|table
operator|.
name|printTable
argument_list|(
name|ord
argument_list|)
argument_list|,
name|table
operator|.
name|getNrColumns
argument_list|()
argument_list|,
name|table
operator|.
name|getLines
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|String
name|msg
init|=
name|ApplicationProperty
operator|.
name|ClassesMessage
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|!=
literal|null
operator|&&
name|msg
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|REQUEST_MSSG
argument_list|,
name|msg
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"show"
argument_list|)
return|;
block|}
specifier|public
name|int
name|getDaysCode
parameter_list|(
name|Set
name|meetings
parameter_list|)
block|{
name|int
name|daysCode
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|meetings
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Meeting
name|meeting
init|=
operator|(
name|Meeting
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Calendar
name|date
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|date
operator|.
name|setTime
argument_list|(
name|meeting
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|date
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
name|daysCode
operator||=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_MON
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
name|daysCode
operator||=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_TUE
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
name|daysCode
operator||=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_WED
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
name|daysCode
operator||=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_THU
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
name|daysCode
operator||=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_FRI
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
name|daysCode
operator||=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_SAT
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
name|daysCode
operator||=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_SUN
index|]
expr_stmt|;
break|break;
block|}
block|}
return|return
name|daysCode
return|;
block|}
specifier|protected
name|String
name|getMeetingTime
parameter_list|(
name|Class_
name|clazz
parameter_list|)
block|{
name|String
name|meetingTime
init|=
literal|""
decl_stmt|;
name|Formats
operator|.
name|Format
argument_list|<
name|Date
argument_list|>
name|dpf
init|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|DATE_EVENT_SHORT
argument_list|)
decl_stmt|;
name|Assignment
name|assignment
init|=
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
name|TreeSet
name|meetings
init|=
operator|(
name|clazz
operator|.
name|getEvent
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|TreeSet
argument_list|(
name|clazz
operator|.
name|getEvent
argument_list|()
operator|.
name|getMeetings
argument_list|()
argument_list|)
operator|)
decl_stmt|;
name|DatePattern
name|dp
init|=
operator|(
name|assignment
operator|==
literal|null
condition|?
literal|null
else|:
name|assignment
operator|.
name|getDatePattern
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|meetings
operator|!=
literal|null
operator|&&
operator|!
name|meetings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|dayCode
init|=
name|getDaysCode
argument_list|(
name|meetings
argument_list|)
decl_stmt|;
name|String
name|days
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|DAY_CODES
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
operator|(
name|dayCode
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|i
index|]
operator|)
operator|!=
literal|0
condition|)
name|days
operator|+=
name|Constants
operator|.
name|DAY_NAMES_SHORT
index|[
name|i
index|]
expr_stmt|;
name|meetingTime
operator|+=
name|days
expr_stmt|;
name|Meeting
name|first
init|=
operator|(
name|Meeting
operator|)
name|meetings
operator|.
name|first
argument_list|()
decl_stmt|;
name|meetingTime
operator|+=
literal|" "
operator|+
name|first
operator|.
name|startTime
argument_list|()
operator|+
literal|" - "
operator|+
name|first
operator|.
name|stopTime
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|assignment
operator|!=
literal|null
condition|)
block|{
name|TimeLocation
name|t
init|=
name|assignment
operator|.
name|getTimeLocation
argument_list|()
decl_stmt|;
name|meetingTime
operator|+=
name|t
operator|.
name|getDayHeader
argument_list|()
operator|+
literal|" "
operator|+
name|t
operator|.
name|getStartTimeHeader
argument_list|()
operator|+
literal|" - "
operator|+
name|t
operator|.
name|getEndTimeHeader
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|meetingTime
operator|+=
literal|"Arr Hrs"
expr_stmt|;
block|}
if|if
condition|(
name|meetings
operator|!=
literal|null
operator|&&
operator|!
name|meetings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|dp
operator|==
literal|null
operator|||
operator|!
name|dp
operator|.
name|isDefault
argument_list|()
condition|)
block|{
name|Date
name|first
init|=
operator|(
operator|(
name|Meeting
operator|)
name|meetings
operator|.
name|first
argument_list|()
operator|)
operator|.
name|getMeetingDate
argument_list|()
decl_stmt|;
name|Date
name|last
init|=
operator|(
operator|(
name|Meeting
operator|)
name|meetings
operator|.
name|last
argument_list|()
operator|)
operator|.
name|getMeetingDate
argument_list|()
decl_stmt|;
if|if
condition|(
name|dp
operator|!=
literal|null
operator|&&
name|dp
operator|.
name|getType
argument_list|()
operator|==
name|DatePattern
operator|.
name|sTypeAlternate
condition|)
name|meetingTime
operator|+=
literal|" ("
operator|+
name|dpf
operator|.
name|format
argument_list|(
name|first
argument_list|)
operator|+
literal|" - "
operator|+
name|dpf
operator|.
name|format
argument_list|(
name|last
argument_list|)
operator|+
literal|" "
operator|+
name|dp
operator|.
name|getName
argument_list|()
operator|+
literal|")"
expr_stmt|;
else|else
name|meetingTime
operator|+=
literal|" ("
operator|+
name|dpf
operator|.
name|format
argument_list|(
name|first
argument_list|)
operator|+
literal|" - "
operator|+
name|dpf
operator|.
name|format
argument_list|(
name|last
argument_list|)
operator|+
literal|")"
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|dp
operator|!=
literal|null
operator|&&
operator|!
name|dp
operator|.
name|isDefault
argument_list|()
condition|)
block|{
if|if
condition|(
name|dp
operator|.
name|getType
argument_list|()
operator|==
name|DatePattern
operator|.
name|sTypeAlternate
condition|)
name|meetingTime
operator|+=
literal|" ("
operator|+
name|dpf
operator|.
name|format
argument_list|(
name|dp
operator|.
name|getStartDate
argument_list|()
argument_list|)
operator|+
literal|" - "
operator|+
name|dpf
operator|.
name|format
argument_list|(
name|dp
operator|.
name|getEndDate
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|dp
operator|.
name|getName
argument_list|()
operator|+
literal|")"
expr_stmt|;
else|else
name|meetingTime
operator|+=
literal|" ("
operator|+
name|dpf
operator|.
name|format
argument_list|(
name|dp
operator|.
name|getStartDate
argument_list|()
argument_list|)
operator|+
literal|" - "
operator|+
name|dpf
operator|.
name|format
argument_list|(
name|dp
operator|.
name|getEndDate
argument_list|()
argument_list|)
operator|+
literal|")"
expr_stmt|;
block|}
return|return
name|meetingTime
return|;
block|}
specifier|protected
name|String
name|getMeetingRooms
parameter_list|(
name|boolean
name|html
parameter_list|,
name|Class_
name|clazz
parameter_list|)
block|{
name|String
name|meetingRooms
init|=
literal|""
decl_stmt|;
name|Assignment
name|assignment
init|=
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|Meeting
argument_list|>
name|meetings
init|=
operator|(
name|clazz
operator|.
name|getEvent
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|TreeSet
argument_list|(
name|clazz
operator|.
name|getEvent
argument_list|()
operator|.
name|getMeetings
argument_list|()
argument_list|)
operator|)
decl_stmt|;
name|TreeSet
argument_list|<
name|Location
argument_list|>
name|locations
init|=
operator|new
name|TreeSet
argument_list|<
name|Location
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|meetings
operator|!=
literal|null
operator|&&
operator|!
name|meetings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Meeting
name|meeting
range|:
name|meetings
control|)
if|if
condition|(
name|meeting
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
name|locations
operator|.
name|add
argument_list|(
name|meeting
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|assignment
operator|!=
literal|null
operator|&&
name|assignment
operator|.
name|getDatePattern
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|assignment
operator|.
name|getRooms
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|locations
operator|.
name|add
argument_list|(
operator|(
name|Location
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Location
name|location
range|:
name|locations
control|)
block|{
if|if
condition|(
name|meetingRooms
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|meetingRooms
operator|+=
literal|", "
expr_stmt|;
name|meetingRooms
operator|+=
operator|(
name|html
condition|?
name|location
operator|.
name|getLabelWithHint
argument_list|()
else|:
name|location
operator|.
name|getLabel
argument_list|()
operator|)
expr_stmt|;
block|}
return|return
name|meetingRooms
return|;
block|}
specifier|protected
name|long
name|getMeetingComparable
parameter_list|(
name|Class_
name|clazz
parameter_list|)
block|{
name|Assignment
name|assignment
init|=
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
name|TreeSet
name|meetings
init|=
operator|(
name|clazz
operator|.
name|getEvent
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|TreeSet
argument_list|(
name|clazz
operator|.
name|getEvent
argument_list|()
operator|.
name|getMeetings
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|meetings
operator|!=
literal|null
operator|&&
operator|!
name|meetings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|(
operator|(
name|Meeting
operator|)
name|meetings
operator|.
name|first
argument_list|()
operator|)
operator|.
name|getMeetingDate
argument_list|()
operator|.
name|getTime
argument_list|()
return|;
block|}
if|else if
condition|(
name|assignment
operator|!=
literal|null
condition|)
block|{
return|return
name|assignment
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getStartSlot
argument_list|()
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
specifier|protected
name|String
name|getMeetingInstructor
parameter_list|(
name|Class_
name|clazz
parameter_list|)
block|{
name|String
name|meetingInstructor
init|=
literal|""
decl_stmt|;
if|if
condition|(
operator|!
name|clazz
operator|.
name|isDisplayInstructor
argument_list|()
condition|)
return|return
name|meetingInstructor
return|;
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|TreeSet
argument_list|(
name|clazz
operator|.
name|getClassInstructors
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|ci
init|=
operator|(
name|ClassInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|meetingInstructor
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|meetingInstructor
operator|+=
literal|", "
expr_stmt|;
name|meetingInstructor
operator|+=
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatLastInitial
argument_list|)
expr_stmt|;
block|}
return|return
name|meetingInstructor
return|;
block|}
specifier|public
name|boolean
name|match
parameter_list|(
name|ClassesForm
name|form
parameter_list|,
name|CourseOffering
name|co
parameter_list|)
block|{
if|if
condition|(
literal|"--ALL--"
operator|.
name|equals
argument_list|(
name|form
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
name|co
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|.
name|equals
argument_list|(
name|form
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|form
operator|.
name|getCourseNumber
argument_list|()
operator|!=
literal|null
operator|&&
name|form
operator|.
name|getCourseNumber
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|co
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|matches
argument_list|(
name|form
operator|.
name|getCourseNumber
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\*"
argument_list|,
literal|".*"
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|PdfWebTable
name|getTable
parameter_list|(
name|boolean
name|html
parameter_list|,
name|ClassesForm
name|form
parameter_list|,
name|Collection
argument_list|<
name|Class_
argument_list|>
name|classes
parameter_list|,
name|int
name|ord
parameter_list|)
block|{
name|String
name|nl
init|=
operator|(
name|html
condition|?
literal|"<br>"
else|:
literal|"\n"
operator|)
decl_stmt|;
name|PdfWebTable
name|table
init|=
operator|new
name|PdfWebTable
argument_list|(
literal|6
argument_list|,
name|form
operator|.
name|getSessionLabel
argument_list|()
operator|+
literal|" classes"
operator|+
operator|(
literal|"--ALL--"
operator|.
name|equals
argument_list|(
name|form
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
condition|?
literal|""
else|:
literal|" ("
operator|+
name|form
operator|.
name|getSubjectArea
argument_list|()
operator|+
operator|(
name|form
operator|.
name|getCourseNumber
argument_list|()
operator|!=
literal|null
operator|&&
name|form
operator|.
name|getCourseNumber
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
literal|" "
operator|+
name|form
operator|.
name|getCourseNumber
argument_list|()
else|:
literal|""
operator|)
operator|+
literal|")"
operator|)
argument_list|,
literal|"classes.do?ord=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Course"
block|,
literal|"Instruction"
operator|+
name|nl
operator|+
literal|"Type"
block|,
literal|"Section"
block|,
literal|"Time"
block|,
literal|"Room"
block|,
literal|"Instructor"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
decl_stmt|;
name|table
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap"
argument_list|)
expr_stmt|;
name|table
operator|.
name|setBlankWhenSame
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|boolean
name|suffix
init|=
name|ApplicationProperty
operator|.
name|ExaminationReportsClassSufix
operator|.
name|isTrue
argument_list|()
decl_stmt|;
for|for
control|(
name|Class_
name|clazz
range|:
name|classes
control|)
block|{
for|for
control|(
name|CourseOffering
name|co
range|:
operator|(
name|Collection
argument_list|<
name|CourseOffering
argument_list|>
operator|)
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseOfferings
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|match
argument_list|(
name|form
argument_list|,
name|co
argument_list|)
condition|)
continue|continue;
name|String
name|course
init|=
name|co
operator|.
name|getCourseName
argument_list|()
decl_stmt|;
name|String
name|itype
init|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
decl_stmt|;
name|int
name|itypeCmp
init|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getItype
argument_list|()
decl_stmt|;
name|String
name|section
init|=
operator|(
name|suffix
operator|&&
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|co
argument_list|)
operator|!=
literal|null
condition|?
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|co
argument_list|)
else|:
name|clazz
operator|.
name|getSectionNumberString
argument_list|()
operator|)
decl_stmt|;
name|String
name|time
init|=
name|getMeetingTime
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
name|long
name|timeCmp
init|=
name|getMeetingComparable
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
name|String
name|room
init|=
name|getMeetingRooms
argument_list|(
name|html
argument_list|,
name|clazz
argument_list|)
decl_stmt|;
name|String
name|instr
init|=
name|getMeetingInstructor
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
name|course
block|,
name|itype
block|,
name|section
block|,
name|time
block|,
name|room
block|,
name|instr
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
name|course
argument_list|,
name|itypeCmp
argument_list|,
name|section
argument_list|,
name|timeCmp
argument_list|,
name|room
argument_list|,
name|instr
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|itypeCmp
argument_list|,
name|course
argument_list|,
name|section
argument_list|,
name|timeCmp
argument_list|,
name|room
argument_list|,
name|instr
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|course
argument_list|,
name|section
argument_list|,
name|itypeCmp
argument_list|,
name|timeCmp
argument_list|,
name|room
argument_list|,
name|instr
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|timeCmp
argument_list|,
name|room
argument_list|,
name|course
argument_list|,
name|itypeCmp
argument_list|,
name|section
argument_list|,
name|instr
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|room
argument_list|,
name|timeCmp
argument_list|,
name|course
argument_list|,
name|itypeCmp
argument_list|,
name|section
argument_list|,
name|instr
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|instr
argument_list|,
name|course
argument_list|,
name|itypeCmp
argument_list|,
name|section
argument_list|,
name|timeCmp
argument_list|,
name|room
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|table
return|;
block|}
block|}
end_class

end_unit

