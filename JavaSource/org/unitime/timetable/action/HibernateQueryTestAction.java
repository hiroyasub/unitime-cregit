begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 - 3.5 (University Timetabling Application)  * Copyright (C) 2008 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Appender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|PatternLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|WriterAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|MappingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|SessionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|engine
operator|.
name|spi
operator|.
name|SessionFactoryImplementor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|engine
operator|.
name|spi
operator|.
name|SessionImplementor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|hql
operator|.
name|internal
operator|.
name|QueryExecutionRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|metadata
operator|.
name|ClassMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|type
operator|.
name|CollectionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|type
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
operator|.
name|HibernateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
operator|.
name|PrettyFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|HibernateQueryTestForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|_RootDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_comment
comment|/**   * MyEclipse Struts  * Creation date: 12-16-2005  *   * XDoclet definition:  * @struts:action path="/hibernateQueryTest" name="hibernateQueryTestForm" input="/form/hibernateQueryTest.jsp" scope="request"  *  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"/hibernateQueryTest"
argument_list|)
specifier|public
class|class
name|HibernateQueryTestAction
extends|extends
name|Action
block|{
specifier|private
specifier|static
name|Level
name|iOriginalLevel
init|=
literal|null
decl_stmt|;
annotation|@
name|Autowired
name|SessionContext
name|sessionContext
decl_stmt|;
comment|// --------------------------------------------------------- Instance Variables
comment|// --------------------------------------------------------- Methods
comment|/**       * Method execute      * @param mapping      * @param form      * @param request      * @param response      * @return ActionForward      */
specifier|public
name|ActionForward
name|execute
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|TestHQL
argument_list|)
expr_stmt|;
name|String
name|op
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"op"
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|==
literal|null
operator|||
operator|!
name|op
operator|.
name|equals
argument_list|(
literal|"Submit"
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"Clear Cache"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
name|HibernateUtil
operator|.
name|clearCache
argument_list|()
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"displayQueryForm"
argument_list|)
return|;
block|}
name|HibernateQueryTestForm
name|frm
init|=
operator|(
name|HibernateQueryTestForm
operator|)
name|form
decl_stmt|;
name|ActionMessages
name|errors
init|=
name|frm
operator|.
name|validate
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
decl_stmt|;
name|Logger
name|sqlLog
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
literal|"org.hibernate.SQL"
argument_list|)
decl_stmt|;
if|if
condition|(
name|iOriginalLevel
operator|==
literal|null
condition|)
name|iOriginalLevel
operator|=
name|sqlLog
operator|.
name|getLevel
argument_list|()
expr_stmt|;
name|sqlLog
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|Appender
name|myAppender
init|=
operator|new
name|WriterAppender
argument_list|(
operator|new
name|PatternLayout
argument_list|(
literal|"%m%n"
argument_list|)
argument_list|,
name|out
argument_list|)
decl_stmt|;
name|sqlLog
operator|.
name|addAppender
argument_list|(
name|myAppender
argument_list|)
expr_stmt|;
if|if
condition|(
name|errors
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
try|try
block|{
name|int
name|limit
init|=
name|ApplicationProperty
operator|.
name|TestHQLMaxLines
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|frm
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|_RootDAO
name|rdao
init|=
operator|new
name|_RootDAO
argument_list|()
decl_stmt|;
name|Session
name|hibSession
init|=
name|rdao
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Query
name|q
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
try|try
block|{
name|List
name|l
init|=
name|q
operator|.
name|list
argument_list|()
decl_stmt|;
name|StringBuffer
name|s
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|int
name|line
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|l
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
name|line
operator|++
control|)
block|{
if|if
condition|(
name|limit
operator|>
literal|0
operator|&&
name|line
operator|>=
name|limit
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
literal|"<tr><td>...</td></tr>"
argument_list|)
expr_stmt|;
break|break;
block|}
name|Object
name|o
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|printHeader
argument_list|(
name|s
argument_list|,
name|o
argument_list|)
expr_stmt|;
name|printLine
argument_list|(
name|s
argument_list|,
name|o
argument_list|,
operator|(
name|SessionImplementor
operator|)
name|hibSession
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|printFooter
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"result"
argument_list|,
name|s
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|frm
operator|.
name|setListSize
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|l
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QueryExecutionRequestException
name|e
parameter_list|)
block|{
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|int
name|i
init|=
name|q
operator|.
name|executeUpdate
argument_list|()
decl_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"result"
argument_list|,
name|i
operator|+
literal|" lines updated."
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setListSize
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|HibernateUtil
operator|.
name|clearCache
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"query"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|sqlLog
operator|.
name|removeAppender
argument_list|(
name|myAppender
argument_list|)
expr_stmt|;
name|sqlLog
operator|.
name|setLevel
argument_list|(
name|iOriginalLevel
operator|==
literal|null
condition|?
name|Level
operator|.
name|INFO
else|:
name|iOriginalLevel
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|sql
init|=
literal|""
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|stk
init|=
operator|new
name|StringTokenizer
argument_list|(
operator|new
name|String
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|,
literal|"\n"
argument_list|)
init|;
name|stk
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|line
init|=
operator|(
name|String
operator|)
name|stk
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|String
name|comment
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|indexOf
argument_list|(
literal|"/*"
argument_list|)
operator|>=
literal|0
operator|&&
name|line
operator|.
name|indexOf
argument_list|(
literal|"/*"
argument_list|)
operator|<
name|line
operator|.
name|indexOf
argument_list|(
literal|"*/"
argument_list|)
condition|)
block|{
name|comment
operator|=
name|line
operator|.
name|substring
argument_list|(
name|line
operator|.
name|indexOf
argument_list|(
literal|"/*"
argument_list|)
operator|+
literal|2
argument_list|,
name|line
operator|.
name|indexOf
argument_list|(
literal|"*/"
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|=
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|line
operator|.
name|indexOf
argument_list|(
literal|"/*"
argument_list|)
argument_list|)
operator|+
name|line
operator|.
name|substring
argument_list|(
name|line
operator|.
name|indexOf
argument_list|(
literal|"*/"
argument_list|)
operator|+
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sql
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|sql
operator|+=
literal|"<br><br>"
expr_stmt|;
if|if
condition|(
name|comment
operator|!=
literal|null
condition|)
name|sql
operator|+=
literal|"<font color='gray'>-- "
operator|+
name|comment
operator|+
literal|"</font>"
expr_stmt|;
name|sql
operator|+=
operator|new
name|PrettyFormatter
argument_list|(
name|line
argument_list|)
operator|.
name|format
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\n"
argument_list|,
literal|"<br>"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|"&nbsp;"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sql
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
literal|"sql"
argument_list|,
name|sql
argument_list|)
expr_stmt|;
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"displayQueryForm"
argument_list|)
return|;
block|}
specifier|private
name|void
name|header
parameter_list|(
name|StringBuffer
name|s
parameter_list|,
name|int
name|idx
parameter_list|,
name|String
name|text
parameter_list|)
block|{
name|s
operator|.
name|append
argument_list|(
literal|"<td class='WebTableHeader'><i>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|text
operator|==
literal|null
operator|||
name|text
operator|.
name|length
argument_list|()
operator|<=
literal|0
condition|)
name|s
operator|.
name|append
argument_list|(
literal|"Col "
operator|+
name|idx
argument_list|)
expr_stmt|;
else|else
block|{
name|s
operator|.
name|append
argument_list|(
name|text
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|text
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
name|s
operator|.
name|append
argument_list|(
name|text
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|append
argument_list|(
literal|"</i></td>"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|skip
parameter_list|(
name|Type
name|t
parameter_list|,
name|boolean
name|lazy
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|t
operator|.
name|isCollectionType
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|lazy
condition|)
return|return
literal|true
return|;
name|SessionFactory
name|hibSessionFactory
init|=
operator|new
name|_RootDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getSessionFactory
argument_list|()
decl_stmt|;
name|Type
name|w
init|=
operator|(
operator|(
name|CollectionType
operator|)
name|t
operator|)
operator|.
name|getElementType
argument_list|(
operator|(
name|SessionFactoryImplementor
operator|)
name|hibSessionFactory
argument_list|)
decl_stmt|;
name|Class
name|ts
init|=
name|w
operator|.
name|getReturnedClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"toString"
argument_list|,
operator|new
name|Class
index|[]
block|{}
argument_list|)
operator|.
name|getDeclaringClass
argument_list|()
decl_stmt|;
return|return
operator|(
name|ts
operator|.
name|equals
argument_list|(
name|Object
operator|.
name|class
argument_list|)
operator|||
name|ts
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"org.unitime.timetable.model.base.Base"
argument_list|)
operator|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|MappingException
name|e
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
try|try
block|{
name|Class
name|ts
init|=
name|t
operator|.
name|getReturnedClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"toString"
argument_list|,
operator|new
name|Class
index|[]
block|{}
argument_list|)
operator|.
name|getDeclaringClass
argument_list|()
decl_stmt|;
return|return
operator|(
name|ts
operator|.
name|equals
argument_list|(
name|Object
operator|.
name|class
argument_list|)
operator|||
name|ts
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"org.unitime.timetable.model.base.Base"
argument_list|)
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
specifier|public
name|void
name|printHeader
parameter_list|(
name|StringBuffer
name|s
parameter_list|,
name|Object
name|o
parameter_list|)
block|{
name|s
operator|.
name|append
argument_list|(
literal|"<table width='100%' border='0' cellspacing='0' cellpadding='3'>"
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|"<tr align='left'>"
argument_list|)
expr_stmt|;
name|SessionFactory
name|hibSessionFactory
init|=
operator|new
name|_RootDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getSessionFactory
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|header
argument_list|(
name|s
argument_list|,
name|idx
operator|++
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|Object
index|[]
condition|)
block|{
name|Object
index|[]
name|x
init|=
operator|(
name|Object
index|[]
operator|)
name|o
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|x
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|x
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
name|header
argument_list|(
name|s
argument_list|,
name|idx
operator|++
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ClassMetadata
name|meta
init|=
name|hibSessionFactory
operator|.
name|getClassMetadata
argument_list|(
name|x
index|[
name|i
index|]
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|meta
operator|==
literal|null
condition|)
block|{
name|header
argument_list|(
name|s
argument_list|,
name|idx
operator|++
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|header
argument_list|(
name|s
argument_list|,
name|idx
operator|++
argument_list|,
name|meta
operator|.
name|getIdentifierPropertyName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|meta
operator|.
name|getPropertyNames
argument_list|()
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|skip
argument_list|(
name|meta
operator|.
name|getPropertyTypes
argument_list|()
index|[
name|j
index|]
argument_list|,
name|meta
operator|.
name|getPropertyLaziness
argument_list|()
index|[
name|j
index|]
argument_list|)
condition|)
name|header
argument_list|(
name|s
argument_list|,
name|idx
operator|++
argument_list|,
name|meta
operator|.
name|getPropertyNames
argument_list|()
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
else|else
block|{
name|ClassMetadata
name|meta
init|=
name|hibSessionFactory
operator|.
name|getClassMetadata
argument_list|(
name|o
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|meta
operator|==
literal|null
condition|)
block|{
name|header
argument_list|(
name|s
argument_list|,
name|idx
operator|++
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|header
argument_list|(
name|s
argument_list|,
name|idx
operator|++
argument_list|,
name|meta
operator|.
name|getIdentifierPropertyName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|meta
operator|.
name|getPropertyNames
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|skip
argument_list|(
name|meta
operator|.
name|getPropertyTypes
argument_list|()
index|[
name|i
index|]
argument_list|,
name|meta
operator|.
name|getPropertyLaziness
argument_list|()
index|[
name|i
index|]
argument_list|)
condition|)
name|header
argument_list|(
name|s
argument_list|,
name|idx
operator|++
argument_list|,
name|meta
operator|.
name|getPropertyNames
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|s
operator|.
name|append
argument_list|(
literal|"</tr>"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|line
parameter_list|(
name|StringBuffer
name|s
parameter_list|,
name|Object
name|text
parameter_list|)
block|{
name|s
operator|.
name|append
argument_list|(
literal|"<td>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|text
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|text
operator|instanceof
name|Document
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
operator|(
operator|(
name|Document
operator|)
name|text
operator|)
operator|.
name|asXML
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<"
argument_list|,
literal|"&lt;"
argument_list|)
operator|.
name|replace
argument_list|(
literal|">"
argument_list|,
literal|"&gt;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|s
operator|.
name|append
argument_list|(
name|text
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|s
operator|.
name|append
argument_list|(
literal|"</td>"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|printLine
parameter_list|(
name|StringBuffer
name|s
parameter_list|,
name|Object
name|o
parameter_list|,
name|SessionImplementor
name|session
parameter_list|)
block|{
name|s
operator|.
name|append
argument_list|(
literal|"<tr align='left' onmouseover=\"this.style.backgroundColor='rgb(223,231,242)';\" onmouseout=\"this.style.backgroundColor='transparent';\">"
argument_list|)
expr_stmt|;
name|SessionFactory
name|hibSessionFactory
init|=
operator|new
name|_RootDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getSessionFactory
argument_list|()
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|line
argument_list|(
name|s
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|Object
index|[]
condition|)
block|{
name|Object
index|[]
name|x
init|=
operator|(
name|Object
index|[]
operator|)
name|o
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|x
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|x
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
name|line
argument_list|(
name|s
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ClassMetadata
name|meta
init|=
name|hibSessionFactory
operator|.
name|getClassMetadata
argument_list|(
name|x
index|[
name|i
index|]
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|meta
operator|==
literal|null
condition|)
block|{
name|line
argument_list|(
name|s
argument_list|,
name|x
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|line
argument_list|(
name|s
argument_list|,
name|meta
operator|.
name|getIdentifier
argument_list|(
name|x
index|[
name|i
index|]
argument_list|,
name|session
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|meta
operator|.
name|getPropertyNames
argument_list|()
operator|.
name|length
condition|;
name|j
operator|++
control|)
if|if
condition|(
operator|!
name|skip
argument_list|(
name|meta
operator|.
name|getPropertyTypes
argument_list|()
index|[
name|j
index|]
argument_list|,
name|meta
operator|.
name|getPropertyLaziness
argument_list|()
index|[
name|j
index|]
argument_list|)
condition|)
name|line
argument_list|(
name|s
argument_list|,
name|meta
operator|.
name|getPropertyValue
argument_list|(
name|x
index|[
name|i
index|]
argument_list|,
name|meta
operator|.
name|getPropertyNames
argument_list|()
index|[
name|j
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|ClassMetadata
name|meta
init|=
name|hibSessionFactory
operator|.
name|getClassMetadata
argument_list|(
name|o
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|meta
operator|==
literal|null
condition|)
block|{
name|line
argument_list|(
name|s
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|line
argument_list|(
name|s
argument_list|,
name|meta
operator|.
name|getIdentifier
argument_list|(
name|o
argument_list|,
name|session
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|meta
operator|.
name|getPropertyNames
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
operator|!
name|skip
argument_list|(
name|meta
operator|.
name|getPropertyTypes
argument_list|()
index|[
name|i
index|]
argument_list|,
name|meta
operator|.
name|getPropertyLaziness
argument_list|()
index|[
name|i
index|]
argument_list|)
condition|)
name|line
argument_list|(
name|s
argument_list|,
name|meta
operator|.
name|getPropertyValue
argument_list|(
name|o
argument_list|,
name|meta
operator|.
name|getPropertyNames
argument_list|()
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|s
operator|.
name|append
argument_list|(
literal|"</tr>"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|printFooter
parameter_list|(
name|StringBuffer
name|s
parameter_list|)
block|{
name|s
operator|.
name|append
argument_list|(
literal|"</table>"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

