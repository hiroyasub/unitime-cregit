begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts2
operator|.
name|convention
operator|.
name|annotation
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts2
operator|.
name|convention
operator|.
name|annotation
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts2
operator|.
name|tiles
operator|.
name|annotation
operator|.
name|TilesDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts2
operator|.
name|tiles
operator|.
name|annotation
operator|.
name|TilesPutAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|messages
operator|.
name|CourseMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalClassEditAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalUidLookup
operator|.
name|UserInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentalInstructorDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|BackTracker
import|;
end_import

begin_comment
comment|/**   * @author Tomas Muller, Stephanie Schluttenhofer, Zuzana Mullerova  */
end_comment

begin_class
annotation|@
name|Action
argument_list|(
name|value
operator|=
literal|"instructorInfoEdit"
argument_list|,
name|results
operator|=
block|{
annotation|@
name|Result
argument_list|(
name|name
operator|=
literal|"showEdit"
argument_list|,
name|type
operator|=
literal|"tiles"
argument_list|,
name|location
operator|=
literal|"instructorInfoEdit.tiles"
argument_list|)
block|,
annotation|@
name|Result
argument_list|(
name|name
operator|=
literal|"showDetail"
argument_list|,
name|type
operator|=
literal|"redirect"
argument_list|,
name|location
operator|=
literal|"/instructorDetail.action"
argument_list|,
name|params
operator|=
block|{
literal|"instructorId"
block|,
literal|"${form.instructorId}"
block|}
argument_list|)
block|,
annotation|@
name|Result
argument_list|(
name|name
operator|=
literal|"showList"
argument_list|,
name|type
operator|=
literal|"redirect"
argument_list|,
name|location
operator|=
literal|"/instructorSearch.action"
argument_list|)
block|}
argument_list|)
annotation|@
name|TilesDefinition
argument_list|(
name|name
operator|=
literal|"instructorInfoEdit.tiles"
argument_list|,
name|extend
operator|=
literal|"baseLayout"
argument_list|,
name|putAttributes
operator|=
block|{
annotation|@
name|TilesPutAttribute
argument_list|(
name|name
operator|=
literal|"title"
argument_list|,
name|value
operator|=
literal|"Edit Instructor"
argument_list|)
block|,
annotation|@
name|TilesPutAttribute
argument_list|(
name|name
operator|=
literal|"body"
argument_list|,
name|value
operator|=
literal|"/user/instructorInfoEdit.jsp"
argument_list|)
block|,
annotation|@
name|TilesPutAttribute
argument_list|(
name|name
operator|=
literal|"showNavigation"
argument_list|,
name|value
operator|=
literal|"true"
argument_list|)
block|,
annotation|@
name|TilesPutAttribute
argument_list|(
name|name
operator|=
literal|"checkRole"
argument_list|,
name|value
operator|=
literal|"false"
argument_list|)
block|}
argument_list|)
specifier|public
class|class
name|InstructorInfoEditAction
extends|extends
name|InstructorAction
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|4279427823049903910L
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|CourseMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|CourseMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|String
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|execute
argument_list|()
expr_stmt|;
comment|//Read parameters
name|String
name|instructorId
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"instructorId"
argument_list|)
decl_stmt|;
if|if
condition|(
name|instructorId
operator|==
literal|null
condition|)
name|instructorId
operator|=
name|form
operator|.
name|getInstructorId
argument_list|()
expr_stmt|;
comment|//Check instructor exists
if|if
condition|(
name|instructorId
operator|==
literal|null
operator|||
name|instructorId
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
name|MSG
operator|.
name|exceptionInstructorInfoNotSupplied
argument_list|()
argument_list|)
throw|;
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|instructorId
argument_list|,
literal|"DepartmentalInstructor"
argument_list|,
name|Right
operator|.
name|InstructorEdit
argument_list|)
expr_stmt|;
name|form
operator|.
name|setInstructorId
argument_list|(
name|instructorId
argument_list|)
expr_stmt|;
comment|// Cancel - Go back to Instructors Detail Screen
if|if
condition|(
name|MSG
operator|.
name|actionBackToDetail
argument_list|()
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|&&
name|instructorId
operator|!=
literal|null
operator|&&
operator|!
name|instructorId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|response
operator|.
name|sendRedirect
argument_list|(
name|response
operator|.
name|encodeURL
argument_list|(
literal|"instructorDetail.action?instructorId="
operator|+
name|instructorId
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// Check ID
if|if
condition|(
name|MSG
operator|.
name|actionLookupInstructor
argument_list|()
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|form
operator|.
name|validate
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hasFieldErrors
argument_list|()
condition|)
block|{
name|findMatchingInstructor
argument_list|()
expr_stmt|;
if|if
condition|(
name|form
operator|.
name|getMatchFound
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|form
operator|.
name|getMatchFound
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|addFieldError
argument_list|(
literal|"lookup"
argument_list|,
name|MSG
operator|.
name|errorNoMatchingRecordsFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|"showEdit"
return|;
block|}
comment|//update - Update the instructor and go back to Instructor Detail Screen
if|if
condition|(
operator|(
name|MSG
operator|.
name|actionUpdateInstructor
argument_list|()
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
name|MSG
operator|.
name|actionNextInstructor
argument_list|()
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
name|MSG
operator|.
name|actionPreviousInstructor
argument_list|()
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|)
operator|&&
name|instructorId
operator|!=
literal|null
operator|&&
operator|!
name|instructorId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|form
operator|.
name|validate
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hasFieldErrors
argument_list|()
operator|&&
name|isDeptInstructorUnique
argument_list|()
condition|)
block|{
name|doUpdate
argument_list|()
expr_stmt|;
if|if
condition|(
name|MSG
operator|.
name|actionNextInstructor
argument_list|()
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|response
operator|.
name|sendRedirect
argument_list|(
name|response
operator|.
name|encodeURL
argument_list|(
literal|"instructorInfoEdit.action?instructorId="
operator|+
name|form
operator|.
name|getNextId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|MSG
operator|.
name|actionPreviousInstructor
argument_list|()
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|response
operator|.
name|sendRedirect
argument_list|(
name|response
operator|.
name|encodeURL
argument_list|(
literal|"instructorInfoEdit.action?instructorId="
operator|+
name|form
operator|.
name|getPreviousId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
literal|"showDetail"
return|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|hasFieldErrors
argument_list|()
condition|)
block|{
name|addFieldError
argument_list|(
literal|"uniqueId"
argument_list|,
name|MSG
operator|.
name|errorInstructorIdAlreadyExistsInList
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Delete Instructor
if|if
condition|(
name|MSG
operator|.
name|actionDeleteInstructor
argument_list|()
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|doDelete
argument_list|()
expr_stmt|;
return|return
literal|"showList"
return|;
block|}
comment|// search select
if|if
condition|(
name|MSG
operator|.
name|actionSelectInstructor
argument_list|()
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|String
name|select
init|=
name|form
operator|.
name|getSearchSelect
argument_list|()
decl_stmt|;
if|if
condition|(
name|select
operator|!=
literal|null
operator|&&
name|select
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|select
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"i2a2"
argument_list|)
condition|)
block|{
name|fillI2A2Info
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|fillStaffInfo
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|"showEdit"
return|;
block|}
comment|//Load form
name|doLoad
argument_list|()
expr_stmt|;
name|BackTracker
operator|.
name|markForBack
argument_list|(
name|request
argument_list|,
literal|"instructorDetail.action?instructorId="
operator|+
name|form
operator|.
name|getInstructorId
argument_list|()
argument_list|,
name|MSG
operator|.
name|backInstructor
argument_list|(
name|form
operator|.
name|getName
argument_list|()
operator|==
literal|null
condition|?
literal|"null"
else|:
name|form
operator|.
name|getName
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
literal|"showEdit"
return|;
block|}
comment|/** 	 * Deletes instructor 	 */
specifier|private
name|void
name|doDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|instructorId
init|=
name|form
operator|.
name|getInstructorId
argument_list|()
decl_stmt|;
name|DepartmentalInstructorDAO
name|idao
init|=
operator|new
name|DepartmentalInstructorDAO
argument_list|()
decl_stmt|;
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|instructorId
argument_list|,
literal|"DepartmentalInstructor"
argument_list|,
name|Right
operator|.
name|InstructorDelete
argument_list|)
expr_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|idao
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|DepartmentalInstructor
name|inst
init|=
name|idao
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|instructorId
argument_list|)
argument_list|)
decl_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|sessionContext
argument_list|,
name|inst
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|INSTRUCTOR_EDIT
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|DELETE
argument_list|,
literal|null
argument_list|,
name|inst
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
name|HashSet
argument_list|<
name|Class_
argument_list|>
name|updatedClasses
init|=
operator|new
name|HashSet
argument_list|<
name|Class_
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|inst
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|ci
init|=
operator|(
name|ClassInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Class_
name|c
init|=
name|ci
operator|.
name|getClassInstructing
argument_list|()
decl_stmt|;
name|updatedClasses
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|.
name|getClassInstructors
argument_list|()
operator|.
name|remove
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|inst
operator|.
name|getExams
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|exam
operator|.
name|getInstructors
argument_list|()
operator|.
name|remove
argument_list|(
name|inst
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|exam
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|inst
operator|.
name|getAssignments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Assignment
name|a
init|=
operator|(
name|Assignment
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|a
operator|.
name|getInstructors
argument_list|()
operator|.
name|remove
argument_list|(
name|inst
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
name|Department
name|d
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|inst
operator|.
name|getDepartment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|d
operator|=
name|inst
operator|.
name|getDepartment
argument_list|()
expr_stmt|;
block|}
name|d
operator|.
name|getInstructors
argument_list|()
operator|.
name|remove
argument_list|(
name|inst
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|inst
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|className
init|=
name|ApplicationProperty
operator|.
name|ExternalActionClassEdit
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
operator|&&
name|className
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ExternalClassEditAction
name|editAction
init|=
operator|(
name|ExternalClassEditAction
operator|)
operator|(
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|getDeclaredConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
operator|)
decl_stmt|;
for|for
control|(
name|Class_
name|c
range|:
name|updatedClasses
control|)
block|{
name|editAction
operator|.
name|performExternalClassEditAction
argument_list|(
name|c
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
block|}
name|hibSession
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
block|}
throw|throw
name|e
throw|;
block|}
block|}
comment|/** 	 * Loads the non-editable instructor info into the form 	 * @param request 	 * @param form 	 */
specifier|private
name|void
name|doLoad
parameter_list|()
block|{
name|String
name|instructorId
init|=
name|form
operator|.
name|getInstructorId
argument_list|()
decl_stmt|;
name|DepartmentalInstructorDAO
name|idao
init|=
operator|new
name|DepartmentalInstructorDAO
argument_list|()
decl_stmt|;
name|DepartmentalInstructor
name|inst
init|=
name|idao
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|instructorId
argument_list|)
argument_list|)
decl_stmt|;
comment|// populate form
name|form
operator|.
name|setInstructorId
argument_list|(
name|instructorId
argument_list|)
expr_stmt|;
name|form
operator|.
name|setName
argument_list|(
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|inst
operator|.
name|getFirstName
argument_list|()
argument_list|,
literal|"-"
operator|.
name|toCharArray
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
operator|(
operator|(
name|inst
operator|.
name|getMiddleName
argument_list|()
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|inst
operator|.
name|getMiddleName
argument_list|()
argument_list|,
literal|"-"
operator|.
name|toCharArray
argument_list|()
argument_list|)
operator|)
operator|+
literal|" "
operator|+
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|inst
operator|.
name|getLastName
argument_list|()
argument_list|,
literal|"-"
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|inst
operator|.
name|getFirstName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|form
operator|.
name|setFname
argument_list|(
name|inst
operator|.
name|getFirstName
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|inst
operator|.
name|getMiddleName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|form
operator|.
name|setMname
argument_list|(
name|inst
operator|.
name|getMiddleName
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|form
operator|.
name|setLname
argument_list|(
name|inst
operator|.
name|getLastName
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|form
operator|.
name|setTitle
argument_list|(
name|inst
operator|.
name|getAcademicTitle
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|puid
init|=
name|inst
operator|.
name|getExternalUniqueId
argument_list|()
decl_stmt|;
if|if
condition|(
name|puid
operator|!=
literal|null
condition|)
block|{
name|form
operator|.
name|setPuId
argument_list|(
name|puid
argument_list|)
expr_stmt|;
block|}
name|form
operator|.
name|setEmail
argument_list|(
name|inst
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
name|form
operator|.
name|setDeptName
argument_list|(
name|inst
operator|.
name|getDepartment
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|inst
operator|.
name|getPositionType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|form
operator|.
name|setPosType
argument_list|(
name|inst
operator|.
name|getPositionType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|inst
operator|.
name|getCareerAcct
argument_list|()
operator|!=
literal|null
operator|&&
name|inst
operator|.
name|getCareerAcct
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|form
operator|.
name|setCareerAcct
argument_list|(
name|inst
operator|.
name|getCareerAcct
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|puid
operator|!=
literal|null
operator|&&
operator|!
name|puid
operator|.
name|isEmpty
argument_list|()
operator|&&
name|DepartmentalInstructor
operator|.
name|canLookupInstructor
argument_list|()
condition|)
block|{
try|try
block|{
name|UserInfo
name|user
init|=
name|DepartmentalInstructor
operator|.
name|lookupInstructor
argument_list|(
name|puid
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
operator|&&
name|user
operator|.
name|getUserName
argument_list|()
operator|!=
literal|null
condition|)
name|form
operator|.
name|setCareerAcct
argument_list|(
name|user
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|form
operator|.
name|setCareerAcct
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
block|}
if|if
condition|(
name|inst
operator|.
name|getNote
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|form
operator|.
name|setNote
argument_list|(
name|inst
operator|.
name|getNote
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|form
operator|.
name|setIgnoreDist
argument_list|(
name|inst
operator|.
name|isIgnoreToFar
argument_list|()
operator|==
literal|null
condition|?
literal|false
else|:
name|inst
operator|.
name|isIgnoreToFar
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|DepartmentalInstructor
name|previous
init|=
name|inst
operator|.
name|getPreviousDepartmentalInstructor
argument_list|(
name|sessionContext
argument_list|,
name|Right
operator|.
name|InstructorEdit
argument_list|)
decl_stmt|;
name|form
operator|.
name|setPreviousId
argument_list|(
name|previous
operator|==
literal|null
condition|?
literal|null
else|:
name|previous
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|DepartmentalInstructor
name|next
init|=
name|inst
operator|.
name|getNextDepartmentalInstructor
argument_list|(
name|sessionContext
argument_list|,
name|Right
operator|.
name|InstructorEdit
argument_list|)
decl_stmt|;
name|form
operator|.
name|setNextId
argument_list|(
name|next
operator|==
literal|null
condition|?
literal|null
else|:
name|next
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

