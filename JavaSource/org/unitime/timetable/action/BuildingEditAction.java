begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
operator|.
name|HibernateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|BuildingEditForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Building
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Room
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|BuildingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|ExportUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|PdfWebTable
import|;
end_import

begin_comment
comment|/**   * @author Tomas Muller, Stephanie Schluttenhofer  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"/buildingEdit"
argument_list|)
specifier|public
class|class
name|BuildingEditAction
extends|extends
name|Action
block|{
annotation|@
name|Autowired
name|SessionContext
name|sessionContext
decl_stmt|;
specifier|public
name|ActionForward
name|execute
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|BuildingEditForm
name|myForm
init|=
operator|(
name|BuildingEditForm
operator|)
name|form
decl_stmt|;
comment|// Read operation to be performed
name|String
name|op
init|=
operator|(
name|myForm
operator|.
name|getOp
argument_list|()
operator|!=
literal|null
condition|?
name|myForm
operator|.
name|getOp
argument_list|()
else|:
name|request
operator|.
name|getParameter
argument_list|(
literal|"op"
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|op
operator|==
literal|null
condition|)
block|{
name|myForm
operator|.
name|reset
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|myForm
operator|.
name|setSessionId
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
name|myForm
operator|.
name|setOp
argument_list|(
literal|"Save"
argument_list|)
expr_stmt|;
block|}
comment|// Return
if|if
condition|(
literal|"Back"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"back"
argument_list|)
return|;
block|}
if|if
condition|(
literal|"Add"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|myForm
operator|.
name|setOp
argument_list|(
literal|"Save"
argument_list|)
expr_stmt|;
block|}
comment|// Add / Update
if|if
condition|(
literal|"Update"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
literal|"Save"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
comment|// Validate input
name|ActionMessages
name|errors
init|=
name|myForm
operator|.
name|validate
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|errors
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|findForward
argument_list|(
literal|"Save"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|?
literal|"add"
else|:
literal|"edit"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
literal|"Save"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|BuildingAdd
argument_list|)
expr_stmt|;
else|else
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|myForm
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|"Building"
argument_list|,
name|Right
operator|.
name|BuildingEdit
argument_list|)
expr_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
operator|(
operator|new
name|BuildingDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|saveOrUpdate
argument_list|(
name|myForm
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"back"
argument_list|)
return|;
block|}
block|}
comment|// Edit
if|if
condition|(
literal|"Edit"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|String
name|id
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|ActionMessages
name|errors
init|=
operator|new
name|ActionMessages
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
operator|||
name|id
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"externalId"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.invalid"
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"edit"
argument_list|)
return|;
block|}
else|else
block|{
name|Building
name|b
init|=
operator|new
name|BuildingDAO
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"back"
argument_list|)
return|;
block|}
else|else
block|{
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|b
argument_list|,
name|Right
operator|.
name|BuildingEdit
argument_list|)
expr_stmt|;
name|myForm
operator|.
name|load
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Delete
if|if
condition|(
literal|"Delete"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|myForm
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|"Building"
argument_list|,
name|Right
operator|.
name|BuildingDelete
argument_list|)
expr_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
operator|(
operator|new
name|BuildingDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|delete
argument_list|(
name|myForm
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|HibernateUtil
operator|.
name|clearCache
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"back"
argument_list|)
return|;
block|}
if|if
condition|(
literal|"Export PDF"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|DecimalFormat
name|df5
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"####0.######"
argument_list|)
decl_stmt|;
name|PdfWebTable
name|table
init|=
operator|new
name|PdfWebTable
argument_list|(
literal|5
argument_list|,
literal|"Buildings"
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Abbreviation"
block|,
literal|"Name"
block|,
literal|"External ID"
block|,
literal|"X-Coordinate"
block|,
literal|"Y-Coordinate"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"right"
block|,
literal|"right"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|Building
name|b
range|:
name|Building
operator|.
name|findAll
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
control|)
block|{
name|table
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|b
operator|.
name|getAbbreviation
argument_list|()
block|,
name|b
operator|.
name|getName
argument_list|()
block|,
name|b
operator|.
name|getExternalUniqueId
argument_list|()
operator|==
literal|null
condition|?
literal|"@@ITALIC N/A @@END_ITALIC "
else|:
name|b
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
block|,
operator|(
name|b
operator|.
name|getCoordinateX
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|df5
operator|.
name|format
argument_list|(
name|b
operator|.
name|getCoordinateX
argument_list|()
argument_list|)
operator|)
block|,
operator|(
name|b
operator|.
name|getCoordinateY
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|df5
operator|.
name|format
argument_list|(
name|b
operator|.
name|getCoordinateY
argument_list|()
argument_list|)
operator|)
block|,                             }
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|b
operator|.
name|getAbbreviation
argument_list|()
block|,
name|b
operator|.
name|getName
argument_list|()
block|,
name|b
operator|.
name|getExternalUniqueId
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|b
operator|.
name|getExternalUniqueId
argument_list|()
block|,
name|b
operator|.
name|getCoordinateX
argument_list|()
block|,
name|b
operator|.
name|getCoordinateY
argument_list|()
block|,                             }
argument_list|)
expr_stmt|;
block|}
name|ExportUtils
operator|.
name|exportPDF
argument_list|(
name|table
argument_list|,
name|PdfWebTable
operator|.
name|getOrder
argument_list|(
name|sessionContext
argument_list|,
literal|"BuildingList.ord"
argument_list|)
argument_list|,
name|response
argument_list|,
literal|"buildings"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
literal|"Update Data"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|BuildingUpdateData
argument_list|)
expr_stmt|;
name|Room
operator|.
name|addNewExternalRoomsToSession
argument_list|(
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"back"
argument_list|)
return|;
block|}
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"Save"
operator|.
name|equals
argument_list|(
name|myForm
operator|.
name|getOp
argument_list|()
argument_list|)
condition|?
literal|"add"
else|:
literal|"edit"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|void
name|saveOrUpdate
parameter_list|(
name|BuildingEditForm
name|form
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
throws|throws
name|Exception
block|{
name|Building
name|building
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|form
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|building
operator|=
name|BuildingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|form
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|building
operator|==
literal|null
condition|)
block|{
name|building
operator|=
operator|new
name|Building
argument_list|()
expr_stmt|;
name|building
operator|.
name|setSession
argument_list|(
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|building
operator|.
name|setName
argument_list|(
name|form
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|building
operator|.
name|setAbbreviation
argument_list|(
name|form
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|building
operator|.
name|setExternalUniqueId
argument_list|(
name|form
operator|.
name|getExternalId
argument_list|()
operator|!=
literal|null
operator|&&
name|form
operator|.
name|getExternalId
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|null
else|:
name|form
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|building
operator|.
name|setCoordinateX
argument_list|(
name|form
operator|.
name|getCoordX
argument_list|()
operator|==
literal|null
operator|||
name|form
operator|.
name|getCoordX
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|null
else|:
name|Double
operator|.
name|valueOf
argument_list|(
name|form
operator|.
name|getCoordX
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|building
operator|.
name|setCoordinateY
argument_list|(
name|form
operator|.
name|getCoordY
argument_list|()
operator|==
literal|null
operator|||
name|form
operator|.
name|getCoordY
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|null
else|:
name|Double
operator|.
name|valueOf
argument_list|(
name|form
operator|.
name|getCoordY
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|building
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|sessionContext
argument_list|,
name|building
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|BUILDING_EDIT
argument_list|,
operator|(
name|form
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|?
name|ChangeLog
operator|.
name|Operation
operator|.
name|CREATE
else|:
name|ChangeLog
operator|.
name|Operation
operator|.
name|UPDATE
operator|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|delete
parameter_list|(
name|BuildingEditForm
name|form
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|Building
name|building
init|=
name|BuildingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|form
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|building
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select r from Room r where r.building.uniqueId=:buildingId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"buildingId"
argument_list|,
name|form
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Room
name|r
init|=
operator|(
name|Room
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"delete RoomPref p where p.room.uniqueId=:roomId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"roomId"
argument_list|,
name|r
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|r
operator|.
name|getAssignments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Assignment
name|a
init|=
operator|(
name|Assignment
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|a
operator|.
name|getRooms
argument_list|()
operator|.
name|remove
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|j
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|hibSession
operator|.
name|delete
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|sessionContext
argument_list|,
name|building
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|BUILDING_EDIT
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|DELETE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|building
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

