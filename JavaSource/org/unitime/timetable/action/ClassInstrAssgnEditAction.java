begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionRedirect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|messages
operator|.
name|CourseMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|ClassEditForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalClassEditAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Preference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentAccomodation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentSectioningQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|InstructorComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|Class_DAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentalInstructorDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|TeachingResponsibilityDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|permissions
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ClassAssignmentProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|interactive
operator|.
name|ClassAssignmentDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|LookupTables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|BackTracker
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"/classInstrAssgnEdit"
argument_list|)
specifier|public
class|class
name|ClassInstrAssgnEditAction
extends|extends
name|PreferencesAction
block|{
specifier|protected
specifier|final
specifier|static
name|CourseMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|CourseMessages
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Autowired
name|SessionContext
name|sessionContext
decl_stmt|;
annotation|@
name|Autowired
name|Permission
argument_list|<
name|InstructionalOffering
argument_list|>
name|permissionOfferingLockNeeded
decl_stmt|;
specifier|public
name|ActionForward
name|execute
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|super
operator|.
name|execute
argument_list|(
name|mapping
argument_list|,
name|form
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|ClassEditForm
name|frm
init|=
operator|(
name|ClassEditForm
operator|)
name|form
decl_stmt|;
name|ActionMessages
name|errors
init|=
operator|new
name|ActionMessages
argument_list|()
decl_stmt|;
comment|// Read parameters
name|String
name|classId
init|=
operator|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"cid"
argument_list|)
operator|==
literal|null
condition|?
name|request
operator|.
name|getAttribute
argument_list|(
literal|"cid"
argument_list|)
operator|!=
literal|null
condition|?
name|request
operator|.
name|getAttribute
argument_list|(
literal|"cid"
argument_list|)
operator|.
name|toString
argument_list|()
else|:
literal|null
else|:
name|request
operator|.
name|getParameter
argument_list|(
literal|"cid"
argument_list|)
operator|)
decl_stmt|;
name|String
name|op
init|=
name|frm
operator|.
name|getOp
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"op2"
argument_list|)
operator|!=
literal|null
operator|&&
operator|!
name|request
operator|.
name|getParameter
argument_list|(
literal|"op2"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
name|op
operator|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"op2"
argument_list|)
expr_stmt|;
comment|// Read class id from form
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionUpdatePreferences
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionAddAttributePreference
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionAddInstructorPreference
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionClearClassPreferences
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionRemoveAttributePreference
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionRemoveInstructorPreference
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionBackToDetail
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionNextClass
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionPreviousClass
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionAddInstructor
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionRemoveInstructor
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
literal|"updateInstructorAssignment"
argument_list|)
condition|)
block|{
name|classId
operator|=
name|frm
operator|.
name|getClassId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
comment|// Determine if initial load
if|if
condition|(
name|op
operator|==
literal|null
operator|||
name|op
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|op
operator|=
literal|"init"
expr_stmt|;
comment|// Check class exists
if|if
condition|(
name|classId
operator|==
literal|null
operator|||
name|classId
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|BackTracker
operator|.
name|doBack
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
condition|)
return|return
literal|null
return|;
else|else
throw|throw
operator|new
name|Exception
argument_list|(
name|MSG
operator|.
name|errorClassInfoNotSupplied
argument_list|()
argument_list|)
throw|;
block|}
comment|// If class id is not null - load class info
name|Class_DAO
name|cdao
init|=
operator|new
name|Class_DAO
argument_list|()
decl_stmt|;
name|Class_
name|c
init|=
name|cdao
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|classId
argument_list|)
argument_list|)
decl_stmt|;
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|c
operator|.
name|getControllingDept
argument_list|()
argument_list|,
name|Right
operator|.
name|InstructorAssignmentPreferences
argument_list|)
expr_stmt|;
comment|// Cancel - Go back to Class Detail Screen
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionBackToDetail
argument_list|()
argument_list|)
condition|)
block|{
name|ActionRedirect
name|redirect
init|=
operator|new
name|ActionRedirect
argument_list|(
name|mapping
operator|.
name|findForward
argument_list|(
literal|"displayClassDetail"
argument_list|)
argument_list|)
decl_stmt|;
name|redirect
operator|.
name|addParameter
argument_list|(
literal|"cid"
argument_list|,
name|classId
argument_list|)
expr_stmt|;
return|return
name|redirect
return|;
block|}
comment|// Add Instructor
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionAddInstructor
argument_list|()
argument_list|)
condition|)
block|{
name|List
name|lst
init|=
name|frm
operator|.
name|getInstructors
argument_list|()
decl_stmt|;
if|if
condition|(
name|frm
operator|.
name|checkPrefs
argument_list|(
name|lst
argument_list|)
condition|)
block|{
name|frm
operator|.
name|addToInstructors
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|HASH_ATTR
argument_list|,
literal|"Instructors"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"instrPrefs"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
name|MSG
operator|.
name|errorInvalidInstructors
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Delete Instructor
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionRemoveInstructor
argument_list|()
argument_list|)
operator|&&
literal|"instructor"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"deleteType"
argument_list|)
argument_list|)
condition|)
block|{
try|try
block|{
name|frm
operator|.
name|removeInstructor
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"deleteId"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|HASH_ATTR
argument_list|,
literal|"Instructors"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
comment|// Restore all inherited preferences
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionClearClassPreferences
argument_list|()
argument_list|)
condition|)
block|{
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|c
operator|.
name|getControllingDept
argument_list|()
argument_list|,
name|Right
operator|.
name|InstructorClearAssignmentPreferences
argument_list|)
expr_stmt|;
name|doClear
argument_list|(
name|c
operator|.
name|getPreferences
argument_list|()
argument_list|,
name|Preference
operator|.
name|Type
operator|.
name|ATTRIBUTE
argument_list|,
name|Preference
operator|.
name|Type
operator|.
name|INSTRUCTOR
argument_list|)
expr_stmt|;
name|cdao
operator|.
name|update
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|op
operator|=
literal|"init"
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
literal|null
argument_list|,
name|sessionContext
argument_list|,
name|c
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|CLASS_EDIT
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|CLEAR_PREF
argument_list|,
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|c
operator|.
name|getManagingDept
argument_list|()
argument_list|)
expr_stmt|;
name|ActionRedirect
name|redirect
init|=
operator|new
name|ActionRedirect
argument_list|(
name|mapping
operator|.
name|findForward
argument_list|(
literal|"displayClassDetail"
argument_list|)
argument_list|)
decl_stmt|;
name|redirect
operator|.
name|addParameter
argument_list|(
literal|"cid"
argument_list|,
name|classId
argument_list|)
expr_stmt|;
return|return
name|redirect
return|;
block|}
comment|// Reset form for initial load
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
literal|"init"
argument_list|)
condition|)
block|{
name|frm
operator|.
name|reset
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
comment|// Create assignment information
if|if
condition|(
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|ClassAssignments
argument_list|)
condition|)
block|{
name|ClassAssignmentDetails
name|ca
init|=
name|ClassAssignmentDetails
operator|.
name|createClassAssignmentDetails
argument_list|(
name|sessionContext
argument_list|,
name|courseTimetablingSolverService
operator|.
name|getSolver
argument_list|()
argument_list|,
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|ca
operator|!=
literal|null
condition|)
block|{
name|String
name|assignmentTable
init|=
name|SuggestionsAction
operator|.
name|getAssignmentTable
argument_list|(
name|sessionContext
argument_list|,
name|courseTimetablingSolverService
operator|.
name|getSolver
argument_list|()
argument_list|,
name|ca
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|assignmentTable
operator|!=
literal|null
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
literal|"Suggestions.assignmentInfo"
argument_list|,
name|assignmentTable
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ClassAssignmentProxy
name|cap
init|=
name|classAssignmentService
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|cap
operator|!=
literal|null
condition|)
block|{
name|Assignment
name|assignment
init|=
name|cap
operator|.
name|getAssignment
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|assignment
operator|!=
literal|null
operator|&&
name|assignment
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ca
operator|=
name|ClassAssignmentDetails
operator|.
name|createClassAssignmentDetailsFromAssignment
argument_list|(
name|sessionContext
argument_list|,
name|assignment
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|ca
operator|!=
literal|null
condition|)
block|{
name|String
name|assignmentTable
init|=
name|SuggestionsAction
operator|.
name|getAssignmentTable
argument_list|(
name|sessionContext
argument_list|,
name|courseTimetablingSolverService
operator|.
name|getSolver
argument_list|()
argument_list|,
name|ca
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|assignmentTable
operator|!=
literal|null
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
literal|"Suggestions.assignmentInfo"
argument_list|,
name|assignmentTable
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|// Load form attributes that are constant
name|doLoad
argument_list|(
name|request
argument_list|,
name|frm
argument_list|,
name|c
argument_list|,
name|op
argument_list|)
expr_stmt|;
comment|// Update Preferences for Class
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionUpdatePreferences
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionNextClass
argument_list|()
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionPreviousClass
argument_list|()
argument_list|)
condition|)
block|{
comment|// Validate input prefs
name|errors
operator|=
name|frm
operator|.
name|validate
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
expr_stmt|;
comment|// No errors - Add to class and update
if|if
condition|(
name|errors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|cdao
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Transaction
name|tx
init|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Clear all old prefs
name|doClear
argument_list|(
name|c
operator|.
name|getPreferences
argument_list|()
argument_list|,
name|Preference
operator|.
name|Type
operator|.
name|ATTRIBUTE
argument_list|,
name|Preference
operator|.
name|Type
operator|.
name|INSTRUCTOR
argument_list|)
expr_stmt|;
comment|// Save class data
name|doUpdate
argument_list|(
name|request
argument_list|,
name|frm
argument_list|,
name|c
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
comment|// Save Prefs
name|doUpdate
argument_list|(
name|request
argument_list|,
name|frm
argument_list|,
name|c
argument_list|,
name|c
operator|.
name|getPreferences
argument_list|()
argument_list|,
literal|false
argument_list|,
name|Preference
operator|.
name|Type
operator|.
name|ATTRIBUTE
argument_list|,
name|Preference
operator|.
name|Type
operator|.
name|INSTRUCTOR
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|className
init|=
name|ApplicationProperty
operator|.
name|ExternalActionClassEdit
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
operator|&&
name|className
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ExternalClassEditAction
name|editAction
init|=
operator|(
name|ExternalClassEditAction
operator|)
operator|(
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|newInstance
argument_list|()
operator|)
decl_stmt|;
name|editAction
operator|.
name|performExternalClassEditAction
argument_list|(
name|c
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionNextClass
argument_list|()
argument_list|)
condition|)
block|{
name|response
operator|.
name|sendRedirect
argument_list|(
name|response
operator|.
name|encodeURL
argument_list|(
literal|"classInstrAssgnEdit.do?cid="
operator|+
name|frm
operator|.
name|getNextId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|MSG
operator|.
name|actionPreviousClass
argument_list|()
argument_list|)
condition|)
block|{
name|response
operator|.
name|sendRedirect
argument_list|(
name|response
operator|.
name|encodeURL
argument_list|(
literal|"classInstrAssgnEdit.do?cid="
operator|+
name|frm
operator|.
name|getPreviousId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|ActionRedirect
name|redirect
init|=
operator|new
name|ActionRedirect
argument_list|(
name|mapping
operator|.
name|findForward
argument_list|(
literal|"displayClassDetail"
argument_list|)
argument_list|)
decl_stmt|;
name|redirect
operator|.
name|addParameter
argument_list|(
literal|"cid"
argument_list|,
name|classId
argument_list|)
expr_stmt|;
return|return
name|redirect
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
else|else
block|{
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
literal|"updateInstructorAssignment"
argument_list|)
condition|)
block|{
name|initPrefs
argument_list|(
name|frm
argument_list|,
name|c
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Initialize Preferences for initial load
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
literal|"init"
argument_list|)
condition|)
block|{
name|initPrefs
argument_list|(
name|frm
argument_list|,
name|c
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Process Preferences Action
name|processPrefAction
argument_list|(
name|request
argument_list|,
name|frm
argument_list|,
name|errors
argument_list|)
expr_stmt|;
name|LookupTables
operator|.
name|setupDatePatterns
argument_list|(
name|request
argument_list|,
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|,
literal|"Default"
argument_list|,
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|effectiveDatePattern
argument_list|()
argument_list|,
name|c
operator|.
name|getManagingDept
argument_list|()
argument_list|,
name|c
operator|.
name|effectiveDatePattern
argument_list|()
argument_list|)
expr_stmt|;
name|LookupTables
operator|.
name|setupInstructors
argument_list|(
name|request
argument_list|,
name|sessionContext
argument_list|,
name|c
operator|.
name|getDepartmentForSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Instructors
name|LookupTables
operator|.
name|setupInstructorAttributes
argument_list|(
name|request
argument_list|,
name|c
argument_list|)
expr_stmt|;
comment|// Instructor Attributes
name|frm
operator|.
name|setAllowHardPrefs
argument_list|(
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|c
argument_list|,
name|Right
operator|.
name|CanUseHardRoomPrefs
argument_list|)
argument_list|)
expr_stmt|;
name|BackTracker
operator|.
name|markForBack
argument_list|(
name|request
argument_list|,
literal|"classDetail.do?cid="
operator|+
name|frm
operator|.
name|getClassId
argument_list|()
argument_list|,
name|MSG
operator|.
name|backClass
argument_list|(
name|frm
operator|.
name|getClassName
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"editClass"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|private
name|void
name|doLoad
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|ClassEditForm
name|frm
parameter_list|,
name|Class_
name|c
parameter_list|,
name|String
name|op
parameter_list|)
block|{
name|Department
name|managingDept
init|=
name|c
operator|.
name|getManagingDept
argument_list|()
decl_stmt|;
name|String
name|parentClassName
init|=
literal|"-"
decl_stmt|;
name|Long
name|parentClassId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getParentClass
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|parentClassName
operator|=
name|c
operator|.
name|getParentClass
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|parentClassId
operator|=
name|c
operator|.
name|getParentClass
argument_list|()
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
block|}
name|CourseOffering
name|cco
init|=
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
decl_stmt|;
comment|// populate form
name|frm
operator|.
name|setClassId
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setSection
argument_list|(
name|c
operator|.
name|getSectionNumberString
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setClassName
argument_list|(
name|c
operator|.
name|getClassLabel
argument_list|()
argument_list|)
expr_stmt|;
name|SchedulingSubpart
name|ss
init|=
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
decl_stmt|;
name|String
name|itypeDesc
init|=
name|c
operator|.
name|getItypeDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|hasMultipleConfigurations
argument_list|()
condition|)
name|itypeDesc
operator|+=
literal|" ["
operator|+
name|ss
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
expr_stmt|;
name|frm
operator|.
name|setItypeDesc
argument_list|(
name|itypeDesc
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setParentClassName
argument_list|(
name|parentClassName
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setParentClassId
argument_list|(
name|parentClassId
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setSubjectAreaId
argument_list|(
name|cco
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setInstrOfferingId
argument_list|(
name|cco
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setSubpart
argument_list|(
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setCourseName
argument_list|(
name|cco
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setCourseTitle
argument_list|(
name|cco
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setManagingDept
argument_list|(
name|managingDept
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setControllingDept
argument_list|(
name|c
operator|.
name|getControllingDept
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setManagingDeptLabel
argument_list|(
name|managingDept
operator|.
name|getManagingDeptLabel
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setUnlimitedEnroll
argument_list|(
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|isUnlimitedEnrollment
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setAccommodation
argument_list|(
name|StudentAccomodation
operator|.
name|toHtml
argument_list|(
name|StudentAccomodation
operator|.
name|getAccommodations
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setInstructorAssignmentDefault
argument_list|(
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|isInstructorAssignmentNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setTeachingLoadDefault
argument_list|(
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getTeachingLoad
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|Formats
operator|.
name|getNumberFormat
argument_list|(
literal|"0.##"
argument_list|)
operator|.
name|format
argument_list|(
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getTeachingLoad
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setNbrInstructorsDefault
argument_list|(
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|isInstructorAssignmentNeeded
argument_list|()
condition|?
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getNbrInstructors
argument_list|()
else|:
literal|1
argument_list|)
expr_stmt|;
name|Class_
name|next
init|=
name|c
operator|.
name|getNextClass
argument_list|(
name|sessionContext
argument_list|,
name|Right
operator|.
name|InstructorAssignmentPreferences
argument_list|)
decl_stmt|;
name|frm
operator|.
name|setNextId
argument_list|(
name|next
operator|==
literal|null
condition|?
literal|null
else|:
name|next
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Class_
name|previous
init|=
name|c
operator|.
name|getPreviousClass
argument_list|(
name|sessionContext
argument_list|,
name|Right
operator|.
name|InstructorAssignmentPreferences
argument_list|)
decl_stmt|;
name|frm
operator|.
name|setPreviousId
argument_list|(
name|previous
operator|==
literal|null
condition|?
literal|null
else|:
name|previous
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setMinRoomLimit
argument_list|(
name|c
operator|.
name|getMinRoomLimit
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setEnrollment
argument_list|(
name|c
operator|.
name|getEnrollment
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setExpectedCapacity
argument_list|(
name|c
operator|.
name|getExpectedCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setDatePattern
argument_list|(
name|c
operator|.
name|getDatePattern
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
else|:
name|c
operator|.
name|getDatePattern
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setNbrRooms
argument_list|(
name|c
operator|.
name|getNbrRooms
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setNotes
argument_list|(
name|c
operator|.
name|getNotes
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setManagingDept
argument_list|(
name|c
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setSchedulePrintNote
argument_list|(
name|c
operator|.
name|getSchedulePrintNote
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setClassSuffix
argument_list|(
name|c
operator|.
name|getDivSecNumber
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setMaxExpectedCapacity
argument_list|(
name|c
operator|.
name|getMaxExpectedCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setRoomRatio
argument_list|(
name|c
operator|.
name|getRoomRatio
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setEnabledForStudentScheduling
argument_list|(
name|c
operator|.
name|isEnabledForStudentScheduling
argument_list|()
argument_list|)
expr_stmt|;
comment|// Load from class only for initial load or reload
if|if
condition|(
literal|"init"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|)
block|{
name|frm
operator|.
name|setInstructorAssignment
argument_list|(
name|c
operator|.
name|isInstructorAssignmentNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setTeachingLoad
argument_list|(
name|c
operator|.
name|getTeachingLoad
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|Formats
operator|.
name|getNumberFormat
argument_list|(
literal|"0.##"
argument_list|)
operator|.
name|format
argument_list|(
name|c
operator|.
name|getTeachingLoad
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setNbrInstructors
argument_list|(
name|c
operator|.
name|isInstructorAssignmentNeeded
argument_list|()
operator|&&
name|c
operator|.
name|getNbrInstructors
argument_list|()
operator|!=
literal|null
condition|?
name|c
operator|.
name|getNbrInstructors
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|""
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setDisplayInstructor
argument_list|(
name|c
operator|.
name|isDisplayInstructor
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"init"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
operator|||
operator|!
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|c
argument_list|,
name|Right
operator|.
name|AssignInstructorsClass
argument_list|)
condition|)
block|{
name|List
name|instructors
init|=
operator|new
name|ArrayList
argument_list|(
name|c
operator|.
name|getClassInstructors
argument_list|()
argument_list|)
decl_stmt|;
name|InstructorComparator
name|ic
init|=
operator|new
name|InstructorComparator
argument_list|()
decl_stmt|;
name|ic
operator|.
name|setCompareBy
argument_list|(
name|ic
operator|.
name|COMPARE_BY_INDEX
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|instructors
argument_list|,
name|ic
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|instructors
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|classInstr
init|=
operator|(
name|ClassInstructor
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|frm
operator|.
name|addToInstructors
argument_list|(
name|classInstr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|doUpdate
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|ClassEditForm
name|frm
parameter_list|,
name|Class_
name|c
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|frm
operator|.
name|getInstructorAssignment
argument_list|()
operator|!=
literal|null
operator|&&
name|frm
operator|.
name|getInstructorAssignment
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
try|try
block|{
if|if
condition|(
name|frm
operator|.
name|getInstructorAssignment
argument_list|()
operator|&&
name|frm
operator|.
name|getTeachingLoad
argument_list|()
operator|!=
literal|null
condition|)
name|c
operator|.
name|setTeachingLoad
argument_list|(
name|Formats
operator|.
name|getNumberFormat
argument_list|(
literal|"0.##"
argument_list|)
operator|.
name|parse
argument_list|(
name|frm
operator|.
name|getTeachingLoad
argument_list|()
argument_list|)
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|c
operator|.
name|setTeachingLoad
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|c
operator|.
name|setTeachingLoad
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|frm
operator|.
name|getInstructorAssignment
argument_list|()
operator|&&
name|frm
operator|.
name|getNbrInstructors
argument_list|()
operator|!=
literal|null
condition|)
name|c
operator|.
name|setNbrInstructors
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|frm
operator|.
name|getNbrInstructors
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|c
operator|.
name|setNbrInstructors
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|c
operator|.
name|setNbrInstructors
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|c
operator|.
name|setTeachingLoad
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|c
operator|.
name|setNbrInstructors
argument_list|(
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getNbrInstructors
argument_list|()
operator|!=
literal|null
operator|&&
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getNbrInstructors
argument_list|()
operator|>
literal|0
condition|?
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
name|Boolean
name|di
init|=
name|frm
operator|.
name|getDisplayInstructor
argument_list|()
decl_stmt|;
name|c
operator|.
name|setDisplayInstructor
argument_list|(
name|di
operator|==
literal|null
condition|?
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
else|:
name|di
argument_list|)
expr_stmt|;
if|if
condition|(
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|c
argument_list|,
name|Right
operator|.
name|AssignInstructorsClass
argument_list|)
condition|)
block|{
comment|// Class all instructors
name|Set
name|classInstrs
init|=
name|c
operator|.
name|getClassInstructors
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|classInstrs
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|ci
init|=
operator|(
name|ClassInstructor
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|DepartmentalInstructor
name|instr
init|=
name|ci
operator|.
name|getInstructor
argument_list|()
decl_stmt|;
name|instr
operator|.
name|getClasses
argument_list|()
operator|.
name|remove
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|instr
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
name|classInstrs
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Get instructor data
name|List
name|instrLead
init|=
name|frm
operator|.
name|getInstrLead
argument_list|()
decl_stmt|;
name|List
name|instructors
init|=
name|frm
operator|.
name|getInstructors
argument_list|()
decl_stmt|;
name|List
name|instrPctShare
init|=
name|frm
operator|.
name|getInstrPctShare
argument_list|()
decl_stmt|;
name|List
name|instrResponsibility
init|=
name|frm
operator|.
name|getInstrResponsibility
argument_list|()
decl_stmt|;
comment|// Save instructor data to class
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|instructors
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|instrId
init|=
name|instructors
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|Preference
operator|.
name|BLANK_PREF_VALUE
operator|.
name|equals
argument_list|(
name|instrId
argument_list|)
condition|)
continue|continue;
name|String
name|pctShare
init|=
name|instrPctShare
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|boolean
name|lead
init|=
literal|"on"
operator|.
name|equals
argument_list|(
name|instrLead
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|resp
init|=
name|instrResponsibility
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|DepartmentalInstructor
name|deptInstr
init|=
operator|new
name|DepartmentalInstructorDAO
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|instrId
argument_list|)
argument_list|)
decl_stmt|;
name|ClassInstructor
name|classInstr
init|=
operator|new
name|ClassInstructor
argument_list|()
decl_stmt|;
name|classInstr
operator|.
name|setClassInstructing
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|classInstr
operator|.
name|setInstructor
argument_list|(
name|deptInstr
argument_list|)
expr_stmt|;
name|classInstr
operator|.
name|setLead
argument_list|(
operator|new
name|Boolean
argument_list|(
name|lead
argument_list|)
argument_list|)
expr_stmt|;
name|classInstr
operator|.
name|setTentative
argument_list|(
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|classInstr
operator|.
name|setPercentShare
argument_list|(
operator|new
name|Integer
argument_list|(
name|pctShare
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|classInstr
operator|.
name|setPercentShare
argument_list|(
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|classInstr
operator|.
name|setResponsibility
argument_list|(
name|TeachingResponsibilityDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|resp
argument_list|)
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|classInstr
operator|.
name|setResponsibility
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|classInstr
operator|.
name|setAssignmentIndex
argument_list|(
name|index
operator|++
argument_list|)
expr_stmt|;
name|classInstrs
operator|.
name|add
argument_list|(
name|classInstr
argument_list|)
expr_stmt|;
name|deptInstr
operator|.
name|getClasses
argument_list|()
operator|.
name|add
argument_list|(
name|classInstr
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|deptInstr
argument_list|)
expr_stmt|;
block|}
name|c
operator|.
name|setClassInstructors
argument_list|(
name|classInstrs
argument_list|)
expr_stmt|;
block|}
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|sessionContext
argument_list|,
name|c
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|CLASS_EDIT
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|UPDATE
argument_list|,
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|c
operator|.
name|getManagingDept
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|permissionOfferingLockNeeded
operator|.
name|check
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|,
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
argument_list|)
condition|)
block|{
name|StudentSectioningQueue
operator|.
name|classAssignmentChanged
argument_list|(
name|hibSession
argument_list|,
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|,
name|c
operator|.
name|getControllingDept
argument_list|()
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

