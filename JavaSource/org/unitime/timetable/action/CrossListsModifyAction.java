begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionRedirect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|util
operator|.
name|MessageResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|FlushMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|messages
operator|.
name|CourseMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|CrossListsModifyForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalCourseCrosslistAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalCourseOfferingRemoveAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalInstructionalOfferingInCrosslistAddAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AdvisorClassPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AdvisorCourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AdvisorSectioningPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|CourseOfferingComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstructionalOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|LookupTables
import|;
end_import

begin_comment
comment|/**   * MyEclipse Struts  * Creation date: 07-15-2005  *   * XDoclet definition:  * @struts:action path="/courseOfferingEdit" name="instructionalOfferingListForm" input="/user/instructionalOfferingSearch.jsp" scope="request"  *  * @author Tomas Muller, Heston Fernandes, Stephanie Schluttenhofer, Zuzana Mullerova  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"/crossListsModify"
argument_list|)
specifier|public
class|class
name|CrossListsModifyAction
extends|extends
name|Action
block|{
specifier|protected
specifier|final
specifier|static
name|CourseMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|CourseMessages
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Autowired
name|SessionContext
name|sessionContext
decl_stmt|;
comment|// --------------------------------------------------------- Instance Variables
comment|// --------------------------------------------------------- Methods
comment|/**       * Method execute      * @param mapping      * @param form      * @param request      * @param response      * @return ActionForward      */
specifier|public
name|ActionForward
name|execute
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
name|MessageResources
name|rsc
init|=
name|getResources
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|CrossListsModifyForm
name|frm
init|=
operator|(
name|CrossListsModifyForm
operator|)
name|form
decl_stmt|;
comment|// Get operation
name|String
name|op
init|=
operator|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"op"
argument_list|)
operator|==
literal|null
operator|)
condition|?
operator|(
name|frm
operator|.
name|getOp
argument_list|()
operator|==
literal|null
operator|||
name|frm
operator|.
name|getOp
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
condition|?
operator|(
name|request
operator|.
name|getAttribute
argument_list|(
literal|"op"
argument_list|)
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|request
operator|.
name|getAttribute
argument_list|(
literal|"op"
argument_list|)
operator|.
name|toString
argument_list|()
else|:
name|frm
operator|.
name|getOp
argument_list|()
else|:
name|request
operator|.
name|getParameter
argument_list|(
literal|"op"
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|==
literal|null
condition|)
name|op
operator|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"hdnOp"
argument_list|)
expr_stmt|;
if|if
condition|(
name|op
operator|==
literal|null
operator|||
name|op
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
name|MSG
operator|.
name|errorOperationNotInterpreted
argument_list|()
operator|+
name|op
argument_list|)
throw|;
comment|// Course Offering Id
name|String
name|courseOfferingId
init|=
literal|""
decl_stmt|;
comment|// Set up Lists
name|frm
operator|.
name|setOp
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|LookupTables
operator|.
name|setupCourseOfferings
argument_list|(
name|request
argument_list|,
name|sessionContext
argument_list|,
operator|new
name|LookupTables
operator|.
name|CourseFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|CourseOffering
name|course
parameter_list|)
block|{
return|return
name|course
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|isNotOffered
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// First access to screen
if|if
condition|(
name|op
operator|.
name|equalsIgnoreCase
argument_list|(
name|MSG
operator|.
name|actionCrossLists
argument_list|()
argument_list|)
condition|)
block|{
name|courseOfferingId
operator|=
operator|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"uid"
argument_list|)
operator|==
literal|null
operator|)
condition|?
operator|(
name|request
operator|.
name|getAttribute
argument_list|(
literal|"uid"
argument_list|)
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|request
operator|.
name|getAttribute
argument_list|(
literal|"uid"
argument_list|)
operator|.
name|toString
argument_list|()
else|:
name|request
operator|.
name|getParameter
argument_list|(
literal|"uid"
argument_list|)
expr_stmt|;
name|doLoad
argument_list|(
name|frm
argument_list|,
name|courseOfferingId
argument_list|)
expr_stmt|;
block|}
comment|// Add a course offering
if|if
condition|(
name|op
operator|.
name|equalsIgnoreCase
argument_list|(
name|MSG
operator|.
name|actionAddCourseToCrossList
argument_list|()
argument_list|)
condition|)
block|{
comment|// Validate data input
name|ActionMessages
name|errors
init|=
name|frm
operator|.
name|validate
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|errors
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|Long
name|addedOffering
init|=
name|frm
operator|.
name|getAddCourseOfferingId
argument_list|()
decl_stmt|;
name|CourseOfferingDAO
name|cdao
init|=
operator|new
name|CourseOfferingDAO
argument_list|()
decl_stmt|;
name|CourseOffering
name|co
init|=
name|cdao
operator|.
name|get
argument_list|(
name|addedOffering
argument_list|)
decl_stmt|;
comment|// Check reservations limit
name|frm
operator|.
name|addToCourseOfferings
argument_list|(
name|co
argument_list|,
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|DepartmentIndependent
argument_list|)
operator|||
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasQualifier
argument_list|(
name|co
operator|.
name|getDepartment
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setAddCourseOfferingId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Remove a course offering
if|if
condition|(
name|op
operator|.
name|equalsIgnoreCase
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.delete"
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|deletedOffering
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"deletedCourseOfferingId"
argument_list|)
decl_stmt|;
if|if
condition|(
name|deletedOffering
operator|!=
literal|null
operator|&&
name|deletedOffering
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|frm
operator|.
name|removeFromCourseOfferings
argument_list|(
name|deletedOffering
argument_list|)
expr_stmt|;
block|}
comment|// Update the course offering
if|if
condition|(
name|op
operator|.
name|equalsIgnoreCase
argument_list|(
name|MSG
operator|.
name|actionUpdateCrossLists
argument_list|()
argument_list|)
condition|)
block|{
comment|// Validate data input
name|ActionMessages
name|errors
init|=
name|frm
operator|.
name|validate
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|errors
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|doUpdate
argument_list|(
name|request
argument_list|,
name|frm
argument_list|)
expr_stmt|;
name|ActionRedirect
name|redirect
init|=
operator|new
name|ActionRedirect
argument_list|(
name|mapping
operator|.
name|findForward
argument_list|(
literal|"instructionalOfferingDetail"
argument_list|)
argument_list|)
decl_stmt|;
name|redirect
operator|.
name|addParameter
argument_list|(
literal|"io"
argument_list|,
name|frm
operator|.
name|getInstrOfferingId
argument_list|()
argument_list|)
expr_stmt|;
name|redirect
operator|.
name|addParameter
argument_list|(
literal|"op"
argument_list|,
literal|"view"
argument_list|)
expr_stmt|;
return|return
name|redirect
return|;
block|}
else|else
block|{
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Determine if a course offering cannot be deleted
name|setReadOnlyCourseId
argument_list|(
name|request
argument_list|,
name|frm
argument_list|)
expr_stmt|;
comment|// Remove the courses that are already part of this offering from list of courses
name|filterCourseOfferingList
argument_list|(
name|request
argument_list|,
name|frm
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"crossListsModify"
argument_list|)
return|;
block|}
comment|/**      * Ensures that all offerings that are part of the instructional offering      * does not appear in the drop down list       * @param request      * @param frm      */
specifier|private
name|void
name|filterCourseOfferingList
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|CrossListsModifyForm
name|frm
parameter_list|)
block|{
name|Collection
name|existingOfferings
init|=
name|frm
operator|.
name|getCourseOfferingIds
argument_list|()
decl_stmt|;
name|Collection
name|offerings
init|=
operator|(
name|Collection
operator|)
name|request
operator|.
name|getAttribute
argument_list|(
name|CourseOffering
operator|.
name|CRS_OFFERING_LIST_ATTR_NAME
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|offerings
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOffering
name|co
init|=
operator|(
name|CourseOffering
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
operator|!
name|co
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|isNotOffered
argument_list|()
operator|&&
operator|!
name|co
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
name|co
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
continue|continue;
block|}
for|for
control|(
name|Iterator
name|j
init|=
name|existingOfferings
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|course
init|=
operator|(
name|String
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|course
operator|.
name|equals
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|request
operator|.
name|setAttribute
argument_list|(
name|CourseOffering
operator|.
name|CRS_OFFERING_LIST_ATTR_NAME
argument_list|,
name|offerings
argument_list|)
expr_stmt|;
block|}
comment|/**      * Compares the modified offering to the original offering      * If more than one offering is in common then all offerings show the 'Delete' icon      * If only one offering is in common that offering cannot be deleted      * @param request      * @param frm      */
specifier|private
name|void
name|setReadOnlyCourseId
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|CrossListsModifyForm
name|frm
parameter_list|)
block|{
name|short
name|ct
init|=
literal|0
decl_stmt|;
name|String
name|originalOfferings
init|=
name|frm
operator|.
name|getOriginalOfferings
argument_list|()
decl_stmt|;
name|List
name|courseOfferingIds
init|=
name|frm
operator|.
name|getCourseOfferingIds
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|courseOfferingIds
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|cid
init|=
name|i
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|originalOfferings
operator|.
name|indexOf
argument_list|(
name|cid
argument_list|)
operator|>
literal|0
condition|)
block|{
comment|// More than one course from the original offering exists in the modified one
if|if
condition|(
operator|++
name|ct
operator|>
literal|1
condition|)
block|{
name|frm
operator|.
name|setReadOnlyCrsOfferingId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
name|frm
operator|.
name|setReadOnlyCrsOfferingId
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|cid
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Debug
operator|.
name|debug
argument_list|(
literal|"Read Only Ctr Course: "
operator|+
name|frm
operator|.
name|getReadOnlyCrsOfferingId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Update the instructional offering      * @param request      * @param frm      */
specifier|private
name|void
name|doUpdate
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|CrossListsModifyForm
name|frm
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Get the modified offering
name|List
name|ids
init|=
name|frm
operator|.
name|getCourseOfferingIds
argument_list|()
decl_stmt|;
name|String
name|courseIds
init|=
name|Constants
operator|.
name|arrayToStr
argument_list|(
name|ids
operator|.
name|toArray
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|" "
argument_list|)
decl_stmt|;
name|String
name|origCourseIds
init|=
name|frm
operator|.
name|getOriginalOfferings
argument_list|()
decl_stmt|;
comment|// Get Offering
name|CourseOfferingDAO
name|cdao
init|=
operator|new
name|CourseOfferingDAO
argument_list|()
decl_stmt|;
name|InstructionalOfferingDAO
name|idao
init|=
operator|new
name|InstructionalOfferingDAO
argument_list|()
decl_stmt|;
name|InstructionalOffering
name|io
init|=
name|idao
operator|.
name|get
argument_list|(
name|frm
operator|.
name|getInstrOfferingId
argument_list|()
argument_list|)
decl_stmt|;
name|Session
name|hibSession
init|=
name|idao
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|hibSession
operator|.
name|setFlushMode
argument_list|(
name|FlushMode
operator|.
name|MANUAL
argument_list|)
expr_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
name|HashMap
name|saList
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CurriculumCourse
argument_list|>
name|cc
init|=
operator|new
name|ArrayList
argument_list|<
name|CurriculumCourse
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CourseRequest
argument_list|>
name|courseRequests
init|=
operator|new
name|ArrayList
argument_list|<
name|CourseRequest
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|AdvisorCourseRequest
argument_list|>
argument_list|>
name|advCourseReqs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|AdvisorCourseRequest
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|StringTokenizer
name|strTok
init|=
operator|new
name|StringTokenizer
argument_list|(
name|origCourseIds
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|CourseOffering
argument_list|>
name|deletedOfferings
init|=
operator|new
name|ArrayList
argument_list|<
name|CourseOffering
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|strTok
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|origCrs
init|=
name|strTok
operator|.
name|nextToken
argument_list|()
decl_stmt|;
comment|// 1. For all deleted courses - create new offering and make 'not offered'
if|if
condition|(
name|courseIds
operator|.
name|indexOf
argument_list|(
name|origCrs
argument_list|)
operator|<
literal|0
condition|)
block|{
name|Debug
operator|.
name|debug
argument_list|(
literal|"Course removed from offering: "
operator|+
name|origCrs
argument_list|)
expr_stmt|;
comment|// Create new instructional offering
name|InstructionalOffering
name|io1
init|=
operator|new
name|InstructionalOffering
argument_list|()
decl_stmt|;
name|CourseOffering
name|co1
init|=
name|cdao
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|origCrs
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|co1
argument_list|,
name|Right
operator|.
name|CourseOfferingDeleteFromCrossList
argument_list|)
expr_stmt|;
comment|// Copy attributes of old instr offering - make not offered
name|io1
operator|.
name|setDemand
argument_list|(
name|io
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|io1
operator|.
name|setLimit
argument_list|(
name|io
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|io1
operator|.
name|setNotOffered
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|io1
operator|.
name|setSession
argument_list|(
name|io
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
name|io1
operator|.
name|setByReservationOnly
argument_list|(
name|io
operator|.
name|getByReservationOnly
argument_list|()
argument_list|)
expr_stmt|;
comment|// Copy attributes of old crs offering - set controlling
name|CourseOffering
name|co2
init|=
operator|(
name|CourseOffering
operator|)
name|co1
operator|.
name|clone
argument_list|()
decl_stmt|;
name|co2
operator|.
name|setIsControl
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|CurriculumCourse
name|x
range|:
operator|(
name|List
argument_list|<
name|CurriculumCourse
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from CurriculumCourse where course.uniqueId = :courseId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"courseId"
argument_list|,
name|co1
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|cc
operator|.
name|add
argument_list|(
name|x
operator|.
name|clone
argument_list|(
name|co2
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|getClassification
argument_list|()
operator|.
name|getCourses
argument_list|()
operator|.
name|remove
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ApplicationProperty
operator|.
name|ModifyCrossListKeepCourseRequests
operator|.
name|isTrue
argument_list|()
condition|)
for|for
control|(
name|CourseRequest
name|oldReq
range|:
operator|(
name|List
argument_list|<
name|CourseRequest
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from CourseRequest where courseOffering.uniqueId = :courseId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"courseId"
argument_list|,
name|co1
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|CourseRequest
name|newReq
init|=
operator|new
name|CourseRequest
argument_list|()
decl_stmt|;
name|newReq
operator|.
name|setAllowOverlap
argument_list|(
name|oldReq
operator|.
name|getAllowOverlap
argument_list|()
argument_list|)
expr_stmt|;
name|newReq
operator|.
name|setOrder
argument_list|(
name|oldReq
operator|.
name|getOrder
argument_list|()
argument_list|)
expr_stmt|;
name|newReq
operator|.
name|setCredit
argument_list|(
name|oldReq
operator|.
name|getCredit
argument_list|()
argument_list|)
expr_stmt|;
name|newReq
operator|.
name|setCourseOffering
argument_list|(
name|co2
argument_list|)
expr_stmt|;
name|newReq
operator|.
name|setCourseDemand
argument_list|(
name|oldReq
operator|.
name|getCourseDemand
argument_list|()
argument_list|)
expr_stmt|;
name|oldReq
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getCourseRequests
argument_list|()
operator|.
name|remove
argument_list|(
name|oldReq
argument_list|)
expr_stmt|;
name|courseRequests
operator|.
name|add
argument_list|(
name|newReq
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|oldReq
argument_list|)
expr_stmt|;
block|}
name|advCourseReqs
operator|.
name|put
argument_list|(
name|co2
operator|.
name|getCourseName
argument_list|()
argument_list|,
operator|(
name|List
argument_list|<
name|AdvisorCourseRequest
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from AdvisorCourseRequest where courseOffering.uniqueId = :courseId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"courseId"
argument_list|,
name|co1
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|deletedOfferings
operator|.
name|add
argument_list|(
name|co2
argument_list|)
expr_stmt|;
comment|/*	                 	                hibSession.saveOrUpdate(io1); 	                hibSession.flush(); */
comment|// Remove from original inst offr
name|Set
name|offerings
init|=
name|io
operator|.
name|getCourseOfferings
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|offerings
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOffering
name|co3
init|=
operator|(
name|CourseOffering
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|co3
operator|.
name|equals
argument_list|(
name|co1
argument_list|)
condition|)
block|{
comment|// Remove from Subject Area
name|SubjectArea
name|sa
init|=
name|co3
operator|.
name|getSubjectArea
argument_list|()
decl_stmt|;
name|sa
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|remove
argument_list|(
name|co1
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|sa
argument_list|)
expr_stmt|;
name|saList
operator|.
name|put
argument_list|(
name|sa
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|,
name|sa
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Delete old course offering
name|io
operator|.
name|removeCourseOffering
argument_list|(
name|co1
argument_list|)
expr_stmt|;
name|Event
operator|.
name|deleteFromEvents
argument_list|(
name|hibSession
argument_list|,
name|co1
argument_list|)
expr_stmt|;
name|Exam
operator|.
name|deleteFromExams
argument_list|(
name|hibSession
argument_list|,
name|co1
argument_list|)
expr_stmt|;
name|String
name|className
init|=
name|ApplicationProperty
operator|.
name|ExternalActionCourseOfferingRemove
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
operator|&&
name|className
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ExternalCourseOfferingRemoveAction
name|removeAction
init|=
operator|(
name|ExternalCourseOfferingRemoveAction
operator|)
operator|(
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|getDeclaredConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
operator|)
decl_stmt|;
name|removeAction
operator|.
name|performExternalCourseOfferingRemoveAction
argument_list|(
name|co1
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|delete
argument_list|(
name|co1
argument_list|)
expr_stmt|;
comment|//io.setCourseOfferings(offerings);
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|io
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Add course to instructional offering
name|co2
operator|.
name|setInstructionalOffering
argument_list|(
name|io1
argument_list|)
expr_stmt|;
name|io1
operator|.
name|addTocourseOfferings
argument_list|(
name|co2
argument_list|)
expr_stmt|;
comment|// Update
if|if
condition|(
name|io1
operator|.
name|getInstrOfferingPermId
argument_list|()
operator|==
literal|null
condition|)
name|io1
operator|.
name|generateInstrOfferingPermId
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|io1
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|refresh
argument_list|(
name|io
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|refresh
argument_list|(
name|io1
argument_list|)
expr_stmt|;
name|className
operator|=
name|ApplicationProperty
operator|.
name|ExternalActionInstructionalOfferingInCrosslistAdd
operator|.
name|value
argument_list|()
expr_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
operator|&&
name|className
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ExternalInstructionalOfferingInCrosslistAddAction
name|addAction
init|=
operator|(
name|ExternalInstructionalOfferingInCrosslistAddAction
operator|)
operator|(
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|getDeclaredConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
operator|)
decl_stmt|;
name|addAction
operator|.
name|performExternalInstructionalOfferingInCrosslistAddAction
argument_list|(
name|io1
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
block|}
comment|// 2. For all existing courses - update controlling attribute and reservation limits
else|else
block|{
name|Debug
operator|.
name|debug
argument_list|(
literal|"Updating controlling course  and course reservation: "
operator|+
name|origCrs
argument_list|)
expr_stmt|;
comment|// Update controlling course attribute
name|CourseOffering
name|co
init|=
name|cdao
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|origCrs
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|frm
operator|.
name|getCtrlCrsOfferingId
argument_list|()
operator|.
name|equals
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
name|co
operator|.
name|setIsControl
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|co
operator|.
name|setIsControl
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Update course reservation
name|int
name|indx
init|=
name|frm
operator|.
name|getIndex
argument_list|(
name|origCrs
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|ApplicationProperty
operator|.
name|ModifyCrossListSingleCourseLimit
operator|.
name|isTrue
argument_list|()
condition|)
name|co
operator|.
name|setReservation
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|frm
operator|.
name|getLimits
argument_list|(
name|indx
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|co
operator|.
name|setReservation
argument_list|(
name|ids
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
name|Integer
operator|.
name|valueOf
argument_list|(
name|frm
operator|.
name|getLimits
argument_list|(
name|indx
argument_list|)
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|co
operator|.
name|setReservation
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|co
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|refresh
argument_list|(
name|co
argument_list|)
expr_stmt|;
block|}
block|}
comment|// 3. For all added courses - delete all preferences and change the instr offering id
name|Vector
argument_list|<
name|CourseOffering
argument_list|>
name|addedOfferings
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|StringTokenizer
name|strTok2
init|=
operator|new
name|StringTokenizer
argument_list|(
name|courseIds
argument_list|)
decl_stmt|;
while|while
condition|(
name|strTok2
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|course
init|=
name|strTok2
operator|.
name|nextToken
argument_list|()
decl_stmt|;
comment|// Course added to offering
if|if
condition|(
name|origCourseIds
operator|.
name|indexOf
argument_list|(
name|course
argument_list|)
operator|<
literal|0
condition|)
block|{
name|Debug
operator|.
name|debug
argument_list|(
literal|"Course added to offering: "
operator|+
name|course
argument_list|)
expr_stmt|;
name|CourseOffering
name|co1
init|=
name|cdao
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|course
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|InstructionalOffering
name|io1
init|=
name|co1
operator|.
name|getInstructionalOffering
argument_list|()
decl_stmt|;
name|SubjectArea
name|sa
init|=
name|io1
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
decl_stmt|;
name|Set
name|offerings
init|=
name|io1
operator|.
name|getCourseOfferings
argument_list|()
decl_stmt|;
comment|// Copy course offerings
for|for
control|(
name|Iterator
name|i
init|=
name|offerings
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOffering
name|co2
init|=
operator|(
name|CourseOffering
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|SubjectArea
name|sa2
init|=
name|co2
operator|.
name|getSubjectArea
argument_list|()
decl_stmt|;
comment|// Create a copy
name|CourseOffering
name|co3
init|=
operator|(
name|CourseOffering
operator|)
name|co2
operator|.
name|clone
argument_list|()
decl_stmt|;
if|if
condition|(
name|frm
operator|.
name|getCtrlCrsOfferingId
argument_list|()
operator|.
name|equals
argument_list|(
name|co2
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
name|co3
operator|.
name|setIsControl
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|co3
operator|.
name|setIsControl
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|CurriculumCourse
name|x
range|:
operator|(
name|List
argument_list|<
name|CurriculumCourse
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from CurriculumCourse where course.uniqueId = :courseId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"courseId"
argument_list|,
name|co2
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|cc
operator|.
name|add
argument_list|(
name|x
operator|.
name|clone
argument_list|(
name|co3
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|getClassification
argument_list|()
operator|.
name|getCourses
argument_list|()
operator|.
name|remove
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ApplicationProperty
operator|.
name|ModifyCrossListKeepCourseRequests
operator|.
name|isTrue
argument_list|()
condition|)
for|for
control|(
name|CourseRequest
name|oldReq
range|:
operator|(
name|List
argument_list|<
name|CourseRequest
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from CourseRequest where courseOffering.uniqueId = :courseId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"courseId"
argument_list|,
name|co2
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|CourseRequest
name|newReq
init|=
operator|new
name|CourseRequest
argument_list|()
decl_stmt|;
name|newReq
operator|.
name|setAllowOverlap
argument_list|(
name|oldReq
operator|.
name|getAllowOverlap
argument_list|()
argument_list|)
expr_stmt|;
name|newReq
operator|.
name|setOrder
argument_list|(
name|oldReq
operator|.
name|getOrder
argument_list|()
argument_list|)
expr_stmt|;
name|newReq
operator|.
name|setCredit
argument_list|(
name|oldReq
operator|.
name|getCredit
argument_list|()
argument_list|)
expr_stmt|;
name|newReq
operator|.
name|setCourseOffering
argument_list|(
name|co3
argument_list|)
expr_stmt|;
name|newReq
operator|.
name|setCourseDemand
argument_list|(
name|oldReq
operator|.
name|getCourseDemand
argument_list|()
argument_list|)
expr_stmt|;
name|oldReq
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getCourseRequests
argument_list|()
operator|.
name|remove
argument_list|(
name|oldReq
argument_list|)
expr_stmt|;
name|courseRequests
operator|.
name|add
argument_list|(
name|newReq
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|oldReq
argument_list|)
expr_stmt|;
block|}
name|advCourseReqs
operator|.
name|put
argument_list|(
name|co3
operator|.
name|getCourseName
argument_list|()
argument_list|,
operator|(
name|List
argument_list|<
name|AdvisorCourseRequest
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from AdvisorCourseRequest where courseOffering.uniqueId = :courseId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"courseId"
argument_list|,
name|co2
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|addedOfferings
operator|.
name|addElement
argument_list|(
name|co3
argument_list|)
expr_stmt|;
name|int
name|indx
init|=
name|frm
operator|.
name|getIndex
argument_list|(
name|course
argument_list|)
decl_stmt|;
try|try
block|{
name|co3
operator|.
name|setReservation
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|frm
operator|.
name|getLimits
argument_list|(
name|indx
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|co3
operator|.
name|setReservation
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// Remove from collection
comment|//i.remove();
name|sa2
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|remove
argument_list|(
name|co2
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|sa2
argument_list|)
expr_stmt|;
name|saList
operator|.
name|put
argument_list|(
name|sa2
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|,
name|sa2
argument_list|)
expr_stmt|;
comment|// Delete course offering
name|io1
operator|.
name|removeCourseOffering
argument_list|(
name|co2
argument_list|)
expr_stmt|;
name|Event
operator|.
name|deleteFromEvents
argument_list|(
name|hibSession
argument_list|,
name|co2
argument_list|)
expr_stmt|;
name|Exam
operator|.
name|deleteFromExams
argument_list|(
name|hibSession
argument_list|,
name|co2
argument_list|)
expr_stmt|;
name|String
name|className
init|=
name|ApplicationProperty
operator|.
name|ExternalActionCourseOfferingRemove
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
operator|&&
name|className
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ExternalCourseOfferingRemoveAction
name|removeAction
init|=
operator|(
name|ExternalCourseOfferingRemoveAction
operator|)
operator|(
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|getDeclaredConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
operator|)
decl_stmt|;
name|removeAction
operator|.
name|performExternalCourseOfferingRemoveAction
argument_list|(
name|co2
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|delete
argument_list|(
name|co2
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|//hibSession.refresh(sa2);
block|}
comment|//io1.setCourseOfferings(offerings);
comment|//hibSession.saveOrUpdate(io1);
name|Event
operator|.
name|deleteFromEvents
argument_list|(
name|hibSession
argument_list|,
name|io1
argument_list|)
expr_stmt|;
name|Exam
operator|.
name|deleteFromExams
argument_list|(
name|hibSession
argument_list|,
name|io1
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|io1
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|sa
argument_list|)
expr_stmt|;
name|saList
operator|.
name|put
argument_list|(
name|sa
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|,
name|sa
argument_list|)
expr_stmt|;
comment|//hibSession.refresh(sa);
block|}
block|}
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Update Offering - Added Offerings
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|addedOfferings
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|CourseOffering
name|co3
init|=
operator|(
name|CourseOffering
operator|)
name|addedOfferings
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|co3
operator|.
name|setInstructionalOffering
argument_list|(
name|io
argument_list|)
expr_stmt|;
name|io
operator|.
name|addTocourseOfferings
argument_list|(
name|co3
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|co3
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|refresh
argument_list|(
name|co3
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|io
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CurriculumCourse
name|x
range|:
name|cc
control|)
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|x
argument_list|)
expr_stmt|;
for|for
control|(
name|CourseRequest
name|x
range|:
name|courseRequests
control|)
block|{
name|x
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getCourseRequests
argument_list|()
operator|.
name|add
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
comment|// for advisor course recommendations, keep the requests but remove class preferences as they no longer apply (courses moved away)
for|for
control|(
name|CourseOffering
name|co
range|:
name|deletedOfferings
control|)
block|{
name|List
argument_list|<
name|AdvisorCourseRequest
argument_list|>
name|acrs
init|=
name|advCourseReqs
operator|.
name|get
argument_list|(
name|co
operator|.
name|getCourseName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|acrs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AdvisorCourseRequest
name|req
range|:
name|acrs
control|)
block|{
name|req
operator|.
name|setCourseOffering
argument_list|(
name|co
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|AdvisorSectioningPref
argument_list|>
name|ip
init|=
name|req
operator|.
name|getPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|ip
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|AdvisorSectioningPref
name|p
init|=
name|ip
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|instanceof
name|AdvisorClassPref
condition|)
block|{
name|hibSession
operator|.
name|delete
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|ip
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// for advisor course recommendations, keep the requests (courses moved in)
for|for
control|(
name|CourseOffering
name|co
range|:
name|addedOfferings
control|)
block|{
name|List
argument_list|<
name|AdvisorCourseRequest
argument_list|>
name|acrs
init|=
name|advCourseReqs
operator|.
name|get
argument_list|(
name|co
operator|.
name|getCourseName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|acrs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AdvisorCourseRequest
name|req
range|:
name|acrs
control|)
block|{
name|req
operator|.
name|setCourseOffering
argument_list|(
name|co
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Update managing department on all classes
name|Department
name|dept
init|=
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getDepartment
argument_list|()
decl_stmt|;
name|Set
name|cfgs
init|=
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iterCfg
init|=
name|cfgs
operator|.
name|iterator
argument_list|()
init|;
name|iterCfg
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|cfg
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|iterCfg
operator|.
name|next
argument_list|()
decl_stmt|;
name|Set
name|subparts
init|=
name|cfg
operator|.
name|getSchedulingSubparts
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iterSbp
init|=
name|subparts
operator|.
name|iterator
argument_list|()
init|;
name|iterSbp
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|subpart
init|=
operator|(
name|SchedulingSubpart
operator|)
name|iterSbp
operator|.
name|next
argument_list|()
decl_stmt|;
name|Set
name|classes
init|=
name|subpart
operator|.
name|getClasses
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iterCls
init|=
name|classes
operator|.
name|iterator
argument_list|()
init|;
name|iterCls
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|cls
init|=
operator|(
name|Class_
operator|)
name|iterCls
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Only change departmental class managing dept and not externally managed
if|if
condition|(
operator|!
name|cls
operator|.
name|getManagingDept
argument_list|()
operator|.
name|isExternalManager
argument_list|()
condition|)
block|{
name|cls
operator|.
name|setManagingDept
argument_list|(
name|dept
argument_list|,
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|cls
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|sessionContext
argument_list|,
name|io
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|CROSS_LIST
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|UPDATE
argument_list|,
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|clear
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|refresh
argument_list|(
name|io
argument_list|)
expr_stmt|;
comment|// Refresh objects
for|for
control|(
name|Iterator
name|i1
init|=
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|cfg
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|i1
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i2
init|=
name|cfg
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|ss
init|=
operator|(
name|SchedulingSubpart
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i3
init|=
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i3
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|i3
operator|.
name|next
argument_list|()
decl_stmt|;
name|hibSession
operator|.
name|refresh
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|refresh
argument_list|(
name|ss
argument_list|)
expr_stmt|;
block|}
block|}
name|Set
name|keys
init|=
name|saList
operator|.
name|keySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i1
init|=
name|keys
operator|.
name|iterator
argument_list|()
init|;
name|i1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|hibSession
operator|.
name|refresh
argument_list|(
name|saList
operator|.
name|get
argument_list|(
name|i1
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|className
init|=
name|ApplicationProperty
operator|.
name|ExternalActionCourseCrosslist
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
operator|&&
name|className
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ExternalCourseCrosslistAction
name|addAction
init|=
operator|(
name|ExternalCourseCrosslistAction
operator|)
operator|(
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|getDeclaredConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
operator|)
decl_stmt|;
name|addAction
operator|.
name|performExternalCourseCrosslistAction
argument_list|(
name|io
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
block|}
throw|throw
name|e
throw|;
block|}
block|}
comment|/**      * Loads the form with the offering detail      * @param frm Form object      * @param courseOfferingId Course Offering Id of controlling course      * @param user User object      */
specifier|private
name|void
name|doLoad
parameter_list|(
name|CrossListsModifyForm
name|frm
parameter_list|,
name|String
name|courseOfferingId
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Check uniqueid
if|if
condition|(
name|courseOfferingId
operator|==
literal|null
operator|||
name|courseOfferingId
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
name|MSG
operator|.
name|errorUniqueIdNeeded
argument_list|()
argument_list|)
throw|;
comment|// Load details
name|CourseOfferingDAO
name|coDao
init|=
operator|new
name|CourseOfferingDAO
argument_list|()
decl_stmt|;
name|CourseOffering
name|co
init|=
name|coDao
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|courseOfferingId
argument_list|)
argument_list|)
decl_stmt|;
name|InstructionalOffering
name|io
init|=
name|co
operator|.
name|getInstructionalOffering
argument_list|()
decl_stmt|;
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|io
argument_list|,
name|Right
operator|.
name|InstructionalOfferingCrossLists
argument_list|)
expr_stmt|;
comment|// Sort Offerings
name|ArrayList
name|offerings
init|=
operator|new
name|ArrayList
argument_list|(
name|io
operator|.
name|getCourseOfferings
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|offerings
argument_list|,
operator|new
name|CourseOfferingComparator
argument_list|(
name|CourseOfferingComparator
operator|.
name|COMPARE_BY_CTRL_CRS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Load form properties
name|frm
operator|.
name|setInstrOfferingId
argument_list|(
name|io
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setCtrlCrsOfferingId
argument_list|(
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setReadOnlyCrsOfferingId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setSubjectAreaId
argument_list|(
name|co
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setInstrOfferingName
argument_list|(
name|io
operator|.
name|getCourseNameWithTitle
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setOwnedInstrOffr
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//?? Boolean.valueOf(io.isEditableBy(user)));
name|frm
operator|.
name|setIoLimit
argument_list|(
name|io
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setUnlimited
argument_list|(
name|io
operator|.
name|hasUnlimitedEnrollment
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|offerings
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOffering
name|co1
init|=
operator|(
operator|(
name|CourseOffering
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
decl_stmt|;
name|frm
operator|.
name|addToCourseOfferings
argument_list|(
name|co1
argument_list|,
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|DepartmentIndependent
argument_list|)
operator|||
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasQualifier
argument_list|(
name|co1
operator|.
name|getDepartment
argument_list|()
argument_list|)
argument_list|,
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|co1
argument_list|,
name|Right
operator|.
name|CourseOfferingDeleteFromCrossList
argument_list|)
argument_list|)
expr_stmt|;
name|frm
operator|.
name|addToOriginalCourseOfferings
argument_list|(
name|co1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

