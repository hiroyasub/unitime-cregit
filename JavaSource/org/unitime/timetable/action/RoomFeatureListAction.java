begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|HibernateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|criterion
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|Web
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|WebTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|RoomFeatureListForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentRoomFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|GlobalRoomFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Roles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomDept
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|RoomFeatureDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|TimetableManagerDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|LookupTables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|PdfEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|PdfWebTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|itextpdf
operator|.
name|text
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|com
operator|.
name|itextpdf
operator|.
name|text
operator|.
name|FontFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|itextpdf
operator|.
name|text
operator|.
name|Paragraph
import|;
end_import

begin_import
import|import
name|com
operator|.
name|itextpdf
operator|.
name|text
operator|.
name|Rectangle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|itextpdf
operator|.
name|text
operator|.
name|pdf
operator|.
name|PdfPTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|itextpdf
operator|.
name|text
operator|.
name|pdf
operator|.
name|PdfWriter
import|;
end_import

begin_comment
comment|/**  * MyEclipse Struts Creation date: 02-18-2005  *   * XDoclet definition:  *   * @struts:action path="/roomFeatureList" name="roomFeatureListForm"  *                input="/admin/roomFeatureList.jsp" scope="request"  *                validate="true"  */
end_comment

begin_class
specifier|public
class|class
name|RoomFeatureListAction
extends|extends
name|Action
block|{
comment|// --------------------------------------------------------- Instance
comment|// Variables
comment|// --------------------------------------------------------- Methods
comment|/** 	 * Method execute 	 *  	 * @param mapping 	 * @param form 	 * @param request 	 * @param response 	 * @return ActionForward 	 * @throws HibernateException 	 */
specifier|public
name|ActionForward
name|execute
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
name|RoomFeatureListForm
name|roomFeatureListForm
init|=
operator|(
name|RoomFeatureListForm
operator|)
name|form
decl_stmt|;
name|HttpSession
name|webSession
init|=
name|request
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Web
operator|.
name|isLoggedIn
argument_list|(
name|webSession
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Access Denied."
argument_list|)
throw|;
block|}
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|webSession
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Long
name|sessionId
init|=
name|session
operator|.
name|getSessionId
argument_list|()
decl_stmt|;
name|ActionMessages
name|errors
init|=
operator|new
name|ActionMessages
argument_list|()
decl_stmt|;
comment|//get deptCode from request - for user with only one department
name|String
name|deptCode
init|=
operator|(
name|String
operator|)
name|request
operator|.
name|getAttribute
argument_list|(
literal|"deptCode"
argument_list|)
decl_stmt|;
if|if
condition|(
name|deptCode
operator|!=
literal|null
condition|)
block|{
name|roomFeatureListForm
operator|.
name|setDeptCodeX
argument_list|(
name|deptCode
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|webSession
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|DEPT_CODE_ATTR_ROOM_NAME
argument_list|)
operator|!=
literal|null
operator|&&
operator|(
name|roomFeatureListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|==
literal|null
operator|)
condition|)
block|{
name|roomFeatureListForm
operator|.
name|setDeptCodeX
argument_list|(
name|webSession
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|DEPT_CODE_ATTR_ROOM_NAME
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Set Session Variable
if|if
condition|(
operator|!
name|roomFeatureListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|webSession
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|DEPT_CODE_ATTR_ROOM_NAME
argument_list|,
name|roomFeatureListForm
operator|.
name|getDeptCodeX
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Validate input
name|errors
operator|=
name|roomFeatureListForm
operator|.
name|validate
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
expr_stmt|;
comment|// Validation fails
if|if
condition|(
name|errors
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showRoomFeatureSearch"
argument_list|)
return|;
block|}
name|String
name|mgrId
init|=
operator|(
name|String
operator|)
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|TMTBL_MGR_ID_ATTR_NAME
argument_list|)
decl_stmt|;
name|TimetableManagerDAO
name|tdao
init|=
operator|new
name|TimetableManagerDAO
argument_list|()
decl_stmt|;
name|TimetableManager
name|mgr
init|=
name|tdao
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|mgrId
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|isAdmin
init|=
name|user
operator|.
name|getRole
argument_list|()
operator|.
name|equals
argument_list|(
name|Roles
operator|.
name|ADMIN_ROLE
argument_list|)
decl_stmt|;
name|ArrayList
name|globalRoomFeatures
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Set
name|departmentRoomFeatures
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
literal|null
decl_stmt|;
try|try
block|{
name|RoomFeatureDAO
name|d
init|=
operator|new
name|RoomFeatureDAO
argument_list|()
decl_stmt|;
name|hibSession
operator|=
name|d
operator|.
name|getSession
argument_list|()
expr_stmt|;
name|List
name|list
init|=
name|hibSession
operator|.
name|createCriteria
argument_list|(
name|GlobalRoomFeature
operator|.
name|class
argument_list|)
operator|.
name|addOrder
argument_list|(
name|Order
operator|.
name|asc
argument_list|(
literal|"label"
argument_list|)
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|list
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|GlobalRoomFeature
name|rf
init|=
operator|(
name|GlobalRoomFeature
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|globalRoomFeatures
operator|.
name|add
argument_list|(
name|rf
argument_list|)
expr_stmt|;
block|}
name|list
operator|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct f from DepartmentRoomFeature f where f.department.session=:sessionId order by label"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
name|Set
name|departments
init|=
name|mgr
operator|.
name|departmentsForSession
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i1
init|=
name|list
operator|.
name|iterator
argument_list|()
init|;
name|i1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentRoomFeature
name|rf
init|=
operator|(
name|DepartmentRoomFeature
operator|)
name|i1
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|rf
operator|.
name|getDeptCode
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|roomFeatureListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"All"
argument_list|)
condition|)
block|{
if|if
condition|(
name|departments
operator|.
name|contains
argument_list|(
name|rf
operator|.
name|getDepartment
argument_list|()
argument_list|)
operator|||
name|isAdmin
condition|)
block|{
name|departmentRoomFeatures
operator|.
name|add
argument_list|(
name|rf
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|roomFeatureListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"Exam"
argument_list|)
condition|)
block|{
block|}
if|else if
condition|(
name|roomFeatureListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"EExam"
argument_list|)
condition|)
block|{
block|}
if|else if
condition|(
name|rf
operator|.
name|getDeptCode
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|roomFeatureListForm
operator|.
name|getDeptCodeX
argument_list|()
argument_list|)
condition|)
block|{
name|departmentRoomFeatures
operator|.
name|add
argument_list|(
name|rf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|roomFeatureListForm
operator|.
name|setGlobalRoomFeatures
argument_list|(
name|globalRoomFeatures
argument_list|)
expr_stmt|;
name|roomFeatureListForm
operator|.
name|setDepartmentRoomFeatures
argument_list|(
name|departmentRoomFeatures
argument_list|)
expr_stmt|;
name|buildFeatureTable
argument_list|(
name|request
argument_list|,
name|roomFeatureListForm
argument_list|)
expr_stmt|;
comment|//set request attribute for department
name|LookupTables
operator|.
name|setupDeptsForUser
argument_list|(
name|request
argument_list|,
name|user
argument_list|,
name|sessionId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|user
operator|.
name|getRole
argument_list|()
operator|.
name|equals
argument_list|(
name|Roles
operator|.
name|ADMIN_ROLE
argument_list|)
operator|||
operator|(
name|user
operator|.
name|getRole
argument_list|()
operator|.
name|equals
argument_list|(
name|Roles
operator|.
name|EXAM_MGR_ROLE
argument_list|)
operator|&&
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|canExamTimetable
argument_list|()
operator|)
condition|)
name|roomFeatureListForm
operator|.
name|setCanAdd
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|else if
condition|(
name|Constants
operator|.
name|ALL_OPTION_LABEL
operator|.
name|equals
argument_list|(
name|roomFeatureListForm
operator|.
name|getDeptCodeX
argument_list|()
argument_list|)
condition|)
block|{
name|roomFeatureListForm
operator|.
name|setCanAdd
argument_list|(
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|mgr
operator|.
name|departmentsForSession
argument_list|(
name|sessionId
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|d
init|=
operator|(
name|Department
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|.
name|isEditableBy
argument_list|(
name|user
argument_list|)
condition|)
block|{
name|roomFeatureListForm
operator|.
name|setCanAdd
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
else|else
block|{
name|roomFeatureListForm
operator|.
name|setCanAdd
argument_list|(
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|mgr
operator|.
name|departmentsForSession
argument_list|(
name|sessionId
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|d
init|=
operator|(
name|Department
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|.
name|getDeptCode
argument_list|()
operator|.
name|equals
argument_list|(
name|roomFeatureListForm
operator|.
name|getDeptCodeX
argument_list|()
argument_list|)
operator|&&
name|d
operator|.
name|isEditableBy
argument_list|(
name|user
argument_list|)
condition|)
block|{
name|roomFeatureListForm
operator|.
name|setCanAdd
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
literal|"Export PDF"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"op"
argument_list|)
argument_list|)
condition|)
block|{
name|buildPdfFeatureTable
argument_list|(
name|request
argument_list|,
name|roomFeatureListForm
argument_list|)
expr_stmt|;
block|}
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showRoomFeatureList"
argument_list|)
return|;
block|}
comment|/** 	 *  	 * @param request 	 * @param roomFeatureListForm 	 * @throws Exception 	 */
specifier|private
name|void
name|buildFeatureTable
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|RoomFeatureListForm
name|roomFeatureListForm
parameter_list|)
throws|throws
name|Exception
block|{
name|HttpSession
name|webSession
init|=
name|request
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|webSession
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Long
name|sessionId
init|=
name|session
operator|.
name|getSessionId
argument_list|()
decl_stmt|;
name|String
name|mgrId
init|=
operator|(
name|String
operator|)
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|TMTBL_MGR_ID_ATTR_NAME
argument_list|)
decl_stmt|;
name|TimetableManagerDAO
name|tdao
init|=
operator|new
name|TimetableManagerDAO
argument_list|()
decl_stmt|;
name|TimetableManager
name|manager
init|=
name|tdao
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|mgrId
argument_list|)
argument_list|)
decl_stmt|;
name|TimetableManager
name|owner
init|=
name|manager
decl_stmt|;
name|WebTable
operator|.
name|setOrder
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
literal|"roomFeatureList.gord"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"gord"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|WebTable
operator|.
name|setOrder
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
literal|"roomFeatureList.mord"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"mord"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|WebTable
name|globalWebTable
init|=
operator|new
name|WebTable
argument_list|(
literal|4
argument_list|,
literal|"Global Room Features"
argument_list|,
literal|"roomFeatureList.do?gord=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Name"
block|,
literal|"Abbreviation"
block|,
literal|""
block|,
literal|"Rooms"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
decl_stmt|;
name|WebTable
name|departmentWebTable
init|=
operator|new
name|WebTable
argument_list|(
literal|4
argument_list|,
literal|"Department Room Features"
argument_list|,
literal|"roomFeatureList.do?mord=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Name"
block|,
literal|"Abbreviation"
block|,
literal|"Department"
block|,
literal|"Rooms"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
decl_stmt|;
name|boolean
name|isAdmin
init|=
name|user
operator|.
name|getRole
argument_list|()
operator|.
name|equals
argument_list|(
name|Roles
operator|.
name|ADMIN_ROLE
argument_list|)
operator|||
operator|(
name|user
operator|.
name|getRole
argument_list|()
operator|.
name|equals
argument_list|(
name|Roles
operator|.
name|EXAM_MGR_ROLE
argument_list|)
operator|&&
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|canExamTimetable
argument_list|()
operator|)
decl_stmt|;
name|boolean
name|showAll
init|=
literal|false
decl_stmt|;
name|Set
name|depts
init|=
literal|null
decl_stmt|;
name|int
name|examType
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|roomFeatureListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"exam"
argument_list|)
condition|)
name|examType
operator|=
name|Exam
operator|.
name|sExamTypeFinal
expr_stmt|;
if|if
condition|(
name|roomFeatureListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"eexam"
argument_list|)
condition|)
name|examType
operator|=
name|Exam
operator|.
name|sExamTypeMidterm
expr_stmt|;
if|if
condition|(
name|roomFeatureListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"All"
argument_list|)
condition|)
block|{
if|if
condition|(
name|isAdmin
condition|)
block|{
name|showAll
operator|=
literal|true
expr_stmt|;
name|depts
operator|=
name|Department
operator|.
name|findAll
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|depts
operator|=
name|Department
operator|.
name|findAllOwned
argument_list|(
name|sessionId
argument_list|,
name|owner
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|roomFeatureListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"Exam"
argument_list|)
condition|)
block|{
name|depts
operator|=
operator|new
name|HashSet
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|roomFeatureListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"EExam"
argument_list|)
condition|)
block|{
name|depts
operator|=
operator|new
name|HashSet
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|depts
operator|=
operator|new
name|HashSet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|depts
operator|.
name|add
argument_list|(
name|Department
operator|.
name|findByDeptCode
argument_list|(
name|roomFeatureListForm
operator|.
name|getDeptCodeX
argument_list|()
argument_list|,
name|sessionId
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// build global room features rows
name|Collection
name|globalRoomFeatures
init|=
name|roomFeatureListForm
operator|.
name|getGlobalRoomFeatures
argument_list|()
decl_stmt|;
name|boolean
name|haveGlobalRoomFeature
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|globalRoomFeatures
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|GlobalRoomFeature
name|gr
init|=
operator|(
name|GlobalRoomFeature
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Collection
name|rs
init|=
operator|new
name|TreeSet
argument_list|(
name|gr
operator|.
name|getRooms
argument_list|()
argument_list|)
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
name|gr
operator|.
name|getLabel
argument_list|()
operator|+
literal|" has "
operator|+
name|rs
operator|.
name|size
argument_list|()
operator|+
literal|" rooms"
argument_list|)
expr_stmt|;
comment|// get rooms
name|StringBuffer
name|assignedRoom
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|boolean
name|haveRooms
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|rs
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|r
init|=
operator|(
name|Location
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|sessionId
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|examType
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|r
operator|.
name|isExamEnabled
argument_list|(
name|examType
argument_list|)
condition|)
continue|continue;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|showAll
condition|)
block|{
name|boolean
name|skip
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|r
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomDept
name|rd
init|=
operator|(
name|RoomDept
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|depts
operator|.
name|contains
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
block|{
name|skip
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|skip
condition|)
continue|continue;
block|}
block|}
if|if
condition|(
name|assignedRoom
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|assignedRoom
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|assignedRoom
operator|.
name|append
argument_list|(
name|r
operator|.
name|getLabel
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|"&nbsp;"
argument_list|)
argument_list|)
expr_stmt|;
name|haveRooms
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isAdmin
operator|&&
operator|!
name|haveRooms
condition|)
continue|continue;
name|globalWebTable
operator|.
name|addLine
argument_list|(
operator|(
name|isAdmin
condition|?
literal|"onClick=\"document.location='roomFeatureEdit.do?doit=editRoomFeature&id="
operator|+
name|gr
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"';\""
else|:
literal|null
operator|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"<A name=\"A"
operator|+
name|gr
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"\"></A>"
operator|+
operator|(
name|isAdmin
condition|?
literal|""
else|:
literal|"<font color=gray>"
operator|)
operator|+
name|gr
operator|.
name|getLabel
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|"&nbsp;"
argument_list|)
operator|+
operator|(
name|isAdmin
condition|?
literal|""
else|:
literal|"</font>"
operator|)
block|,
operator|(
name|isAdmin
condition|?
literal|""
else|:
literal|"<font color=gray>"
operator|)
operator|+
name|gr
operator|.
name|getAbbv
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|"&nbsp;"
argument_list|)
operator|+
operator|(
name|isAdmin
condition|?
literal|""
else|:
literal|"</font>"
operator|)
block|,
literal|""
block|,
operator|(
name|isAdmin
condition|?
literal|""
else|:
literal|"<font color=gray>"
operator|)
operator|+
name|assignedRoom
operator|+
operator|(
name|isAdmin
condition|?
literal|""
else|:
literal|"</font>"
operator|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|gr
operator|.
name|getLabel
argument_list|()
block|,
name|gr
operator|.
name|getAbbv
argument_list|()
block|,
literal|""
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
name|haveGlobalRoomFeature
operator|=
literal|true
expr_stmt|;
block|}
comment|// build department room features rows
name|Collection
name|departmentRoomFeatures
init|=
name|roomFeatureListForm
operator|.
name|getDepartmentRoomFeatures
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|departmentRoomFeatures
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentRoomFeature
name|drf
init|=
operator|(
name|DepartmentRoomFeature
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Department
name|rfOwner
init|=
name|Department
operator|.
name|findByDeptCode
argument_list|(
name|drf
operator|.
name|getDeptCode
argument_list|()
argument_list|,
name|sessionId
argument_list|)
decl_stmt|;
name|boolean
name|isOwner
init|=
name|isAdmin
operator|||
name|owner
operator|.
name|getDepartments
argument_list|()
operator|.
name|contains
argument_list|(
name|rfOwner
argument_list|)
decl_stmt|;
name|boolean
name|isEditable
init|=
name|rfOwner
operator|.
name|isEditableBy
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|String
name|ownerName
init|=
literal|"<i>Not defined</i>"
decl_stmt|;
if|if
condition|(
name|rfOwner
operator|!=
literal|null
condition|)
block|{
name|ownerName
operator|=
literal|"<span title='"
operator|+
name|rfOwner
operator|.
name|getHtmlTitle
argument_list|()
operator|+
literal|"'>"
operator|+
name|rfOwner
operator|.
name|getShortLabel
argument_list|()
operator|+
literal|"</span>"
expr_stmt|;
block|}
name|Collection
name|rs
init|=
operator|new
name|TreeSet
argument_list|(
name|drf
operator|.
name|getRooms
argument_list|()
argument_list|)
decl_stmt|;
comment|// get rooms
name|StringBuffer
name|assignedRoom
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|rs
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|r
init|=
operator|(
name|Location
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|examType
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|r
operator|.
name|isExamEnabled
argument_list|(
name|examType
argument_list|)
condition|)
continue|continue;
block|}
else|else
block|{
name|boolean
name|skip
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|r
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomDept
name|rd
init|=
operator|(
name|RoomDept
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|drf
operator|.
name|getDepartment
argument_list|()
operator|.
name|equals
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
block|{
name|skip
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|skip
condition|)
continue|continue;
block|}
if|if
condition|(
name|assignedRoom
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|assignedRoom
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|assignedRoom
operator|.
name|append
argument_list|(
name|r
operator|.
name|getLabel
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|"&nbsp;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|departmentWebTable
operator|.
name|addLine
argument_list|(
operator|(
name|isEditable
condition|?
literal|"onClick=\"document.location='roomFeatureEdit.do?doit=editRoomFeature&id="
operator|+
name|drf
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"';\""
else|:
literal|null
operator|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"<A name=\"A"
operator|+
name|drf
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"\"></A>"
operator|+
operator|(
name|isOwner
condition|?
literal|""
else|:
literal|"<font color=gray>"
operator|)
operator|+
name|drf
operator|.
name|getLabel
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|"&nbsp;"
argument_list|)
operator|+
operator|(
name|isOwner
condition|?
literal|""
else|:
literal|"</font>"
operator|)
block|,
operator|(
name|isOwner
condition|?
literal|""
else|:
literal|"<font color=gray>"
operator|)
operator|+
name|drf
operator|.
name|getAbbv
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|"&nbsp;"
argument_list|)
operator|+
operator|(
name|isOwner
condition|?
literal|""
else|:
literal|"</font>"
operator|)
block|,
operator|(
name|isOwner
condition|?
literal|""
else|:
literal|"<font color=gray>"
operator|)
operator|+
name|ownerName
operator|+
operator|(
name|isOwner
condition|?
literal|""
else|:
literal|"</font>"
operator|)
block|,
operator|(
name|isOwner
condition|?
literal|""
else|:
literal|"<font color=gray>"
operator|)
operator|+
name|assignedRoom
operator|+
operator|(
name|isOwner
condition|?
literal|""
else|:
literal|"</font>"
operator|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|drf
operator|.
name|getLabel
argument_list|()
block|,
name|drf
operator|.
name|getAbbv
argument_list|()
block|,
name|ownerName
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
block|}
comment|// set request attributes
if|if
condition|(
name|haveGlobalRoomFeature
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
literal|"roomFeaturesGlobal"
argument_list|,
name|globalWebTable
operator|.
name|printTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
literal|"roomFeatureList.gord"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|request
operator|.
name|removeAttribute
argument_list|(
literal|"roomFeaturesGlobal"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|departmentRoomFeatures
operator|.
name|isEmpty
argument_list|()
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
literal|"roomFeaturesDepartment"
argument_list|,
name|departmentWebTable
operator|.
name|printTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
literal|"roomFeatureList.mord"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|request
operator|.
name|removeAttribute
argument_list|(
literal|"roomFeaturesDepartment"
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|buildPdfFeatureTable
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|RoomFeatureListForm
name|roomFeatureListForm
parameter_list|)
throws|throws
name|Exception
block|{
name|FileOutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|File
name|file
init|=
name|ApplicationProperties
operator|.
name|getTempFile
argument_list|(
literal|"room_features"
argument_list|,
literal|"pdf"
argument_list|)
decl_stmt|;
name|out
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|HttpSession
name|webSession
init|=
name|request
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|webSession
argument_list|)
decl_stmt|;
name|Long
name|sessionId
init|=
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
operator|.
name|getSessionId
argument_list|()
decl_stmt|;
name|String
name|mgrId
init|=
operator|(
name|String
operator|)
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|TMTBL_MGR_ID_ATTR_NAME
argument_list|)
decl_stmt|;
name|TimetableManagerDAO
name|tdao
init|=
operator|new
name|TimetableManagerDAO
argument_list|()
decl_stmt|;
name|TimetableManager
name|manager
init|=
name|tdao
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|mgrId
argument_list|)
argument_list|)
decl_stmt|;
name|TimetableManager
name|owner
init|=
name|manager
decl_stmt|;
name|PdfWebTable
name|globalWebTable
init|=
operator|new
name|PdfWebTable
argument_list|(
literal|4
argument_list|,
literal|"Global Room Features"
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Name"
block|,
literal|"Abbreviation"
block|,
literal|""
block|,
literal|"Rooms"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
decl_stmt|;
name|PdfWebTable
name|departmentWebTable
init|=
operator|new
name|PdfWebTable
argument_list|(
literal|4
argument_list|,
literal|"Department Room Features"
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Name"
block|,
literal|"Abbreviation"
block|,
literal|"Department "
block|,
literal|"Rooms"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
decl_stmt|;
name|boolean
name|isAdmin
init|=
name|user
operator|.
name|getRole
argument_list|()
operator|.
name|equals
argument_list|(
name|Roles
operator|.
name|ADMIN_ROLE
argument_list|)
decl_stmt|;
name|boolean
name|showAll
init|=
literal|false
decl_stmt|;
name|Set
name|depts
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|roomFeatureListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"All"
argument_list|)
condition|)
block|{
if|if
condition|(
name|isAdmin
condition|)
block|{
name|showAll
operator|=
literal|true
expr_stmt|;
name|depts
operator|=
name|Department
operator|.
name|findAll
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|depts
operator|=
name|Department
operator|.
name|findAllOwned
argument_list|(
name|sessionId
argument_list|,
name|owner
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|roomFeatureListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"Exam"
argument_list|)
condition|)
block|{
block|}
if|else if
condition|(
name|roomFeatureListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"EExam"
argument_list|)
condition|)
block|{
block|}
else|else
block|{
name|depts
operator|=
operator|new
name|HashSet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|depts
operator|.
name|add
argument_list|(
name|Department
operator|.
name|findByDeptCode
argument_list|(
name|roomFeatureListForm
operator|.
name|getDeptCodeX
argument_list|()
argument_list|,
name|sessionId
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|examType
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|roomFeatureListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"exam"
argument_list|)
condition|)
name|examType
operator|=
name|Exam
operator|.
name|sExamTypeFinal
expr_stmt|;
if|if
condition|(
name|roomFeatureListForm
operator|.
name|getDeptCodeX
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"eexam"
argument_list|)
condition|)
name|examType
operator|=
name|Exam
operator|.
name|sExamTypeMidterm
expr_stmt|;
name|boolean
name|splitRows
init|=
literal|false
decl_stmt|;
comment|// build global room features rows
name|Collection
name|globalRoomFeatures
init|=
name|roomFeatureListForm
operator|.
name|getGlobalRoomFeatures
argument_list|()
decl_stmt|;
name|boolean
name|haveGlobalRoomFeature
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|globalRoomFeatures
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|GlobalRoomFeature
name|gr
init|=
operator|(
name|GlobalRoomFeature
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Collection
name|rs
init|=
operator|new
name|TreeSet
argument_list|(
name|gr
operator|.
name|getRooms
argument_list|()
argument_list|)
decl_stmt|;
comment|// get rooms
name|StringBuffer
name|assignedRoom
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|int
name|nrRows
init|=
literal|0
decl_stmt|;
name|boolean
name|haveRooms
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|rs
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|r
init|=
operator|(
name|Location
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|sessionId
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|examType
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|r
operator|.
name|isExamEnabled
argument_list|(
name|examType
argument_list|)
condition|)
continue|continue;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|showAll
condition|)
block|{
name|boolean
name|skip
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|r
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomDept
name|rd
init|=
operator|(
name|RoomDept
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|depts
operator|.
name|contains
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
block|{
name|skip
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|skip
condition|)
continue|continue;
block|}
block|}
if|if
condition|(
name|assignedRoom
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|assignedRoom
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
if|if
condition|(
name|PdfWebTable
operator|.
name|getWidthOfLastLine
argument_list|(
name|assignedRoom
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
operator|>
literal|750
condition|)
block|{
name|assignedRoom
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|nrRows
operator|++
expr_stmt|;
block|}
name|assignedRoom
operator|.
name|append
argument_list|(
name|r
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|haveRooms
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|nrRows
operator|>
literal|40
condition|)
name|splitRows
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|isAdmin
operator|&&
operator|!
name|haveRooms
condition|)
continue|continue;
name|globalWebTable
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|gr
operator|.
name|getLabel
argument_list|()
block|,
name|gr
operator|.
name|getAbbv
argument_list|()
block|,
literal|""
block|,
name|assignedRoom
operator|.
name|toString
argument_list|()
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|gr
operator|.
name|getLabel
argument_list|()
block|,
name|gr
operator|.
name|getAbbv
argument_list|()
block|,
literal|""
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
name|haveGlobalRoomFeature
operator|=
literal|true
expr_stmt|;
block|}
comment|// build department room features rows
name|Collection
name|departmentRoomFeatures
init|=
name|roomFeatureListForm
operator|.
name|getDepartmentRoomFeatures
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|departmentRoomFeatures
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentRoomFeature
name|drf
init|=
operator|(
name|DepartmentRoomFeature
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Department
name|rfOwner
init|=
name|Department
operator|.
name|findByDeptCode
argument_list|(
name|drf
operator|.
name|getDeptCode
argument_list|()
argument_list|,
name|sessionId
argument_list|)
decl_stmt|;
name|String
name|ownerName
init|=
literal|"@@ITALIC Not defined"
decl_stmt|;
if|if
condition|(
name|rfOwner
operator|!=
literal|null
condition|)
block|{
name|ownerName
operator|=
name|rfOwner
operator|.
name|getShortLabel
argument_list|()
expr_stmt|;
block|}
name|Collection
name|rs
init|=
operator|new
name|TreeSet
argument_list|(
name|drf
operator|.
name|getRooms
argument_list|()
argument_list|)
decl_stmt|;
comment|// get rooms
name|StringBuffer
name|assignedRoom
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|rs
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|r
init|=
operator|(
name|Location
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|examType
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|r
operator|.
name|isExamEnabled
argument_list|(
name|examType
argument_list|)
condition|)
continue|continue;
block|}
else|else
block|{
name|boolean
name|skip
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|r
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomDept
name|rd
init|=
operator|(
name|RoomDept
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|drf
operator|.
name|getDepartment
argument_list|()
operator|.
name|equals
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
block|{
name|skip
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|skip
condition|)
continue|continue;
block|}
if|if
condition|(
name|assignedRoom
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|assignedRoom
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
if|if
condition|(
name|PdfWebTable
operator|.
name|getWidthOfLastLine
argument_list|(
name|assignedRoom
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
operator|>
literal|750
condition|)
name|assignedRoom
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|assignedRoom
operator|.
name|append
argument_list|(
name|r
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|departmentWebTable
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|drf
operator|.
name|getLabel
argument_list|()
block|,
name|drf
operator|.
name|getAbbv
argument_list|()
block|,
name|ownerName
block|,
name|assignedRoom
operator|.
name|toString
argument_list|()
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|drf
operator|.
name|getLabel
argument_list|()
block|,
name|drf
operator|.
name|getAbbv
argument_list|()
block|,
name|ownerName
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
block|}
name|Document
name|doc
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|haveGlobalRoomFeature
condition|)
block|{
name|PdfWebTable
name|table
init|=
name|globalWebTable
decl_stmt|;
name|PdfPTable
name|pdfTable
init|=
name|table
operator|.
name|printPdfTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
literal|"roomFeatureList.gord"
argument_list|)
argument_list|)
decl_stmt|;
name|pdfTable
operator|.
name|setSplitRows
argument_list|(
name|splitRows
argument_list|)
expr_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
name|doc
operator|=
operator|new
name|Document
argument_list|(
operator|new
name|Rectangle
argument_list|(
literal|60f
operator|+
name|table
operator|.
name|getWidth
argument_list|()
argument_list|,
literal|60f
operator|+
literal|0.75f
operator|*
name|table
operator|.
name|getWidth
argument_list|()
argument_list|)
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|PdfWriter
name|iWriter
init|=
name|PdfWriter
operator|.
name|getInstance
argument_list|(
name|doc
argument_list|,
name|out
argument_list|)
decl_stmt|;
name|iWriter
operator|.
name|setPageEvent
argument_list|(
operator|new
name|PdfEventHandler
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|.
name|setPageSize
argument_list|(
operator|new
name|Rectangle
argument_list|(
literal|60f
operator|+
name|table
operator|.
name|getWidth
argument_list|()
argument_list|,
literal|60f
operator|+
literal|0.75f
operator|*
name|table
operator|.
name|getWidth
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|newPage
argument_list|()
expr_stmt|;
block|}
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Paragraph
argument_list|(
name|table
operator|.
name|getName
argument_list|()
argument_list|,
name|FontFactory
operator|.
name|getFont
argument_list|(
name|FontFactory
operator|.
name|HELVETICA_BOLD
argument_list|,
literal|16
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|pdfTable
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|departmentRoomFeatures
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|PdfWebTable
name|table
init|=
name|departmentWebTable
decl_stmt|;
name|PdfPTable
name|pdfTable
init|=
name|table
operator|.
name|printPdfTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
literal|"roomFeatureList.mord"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
name|doc
operator|=
operator|new
name|Document
argument_list|(
operator|new
name|Rectangle
argument_list|(
literal|60f
operator|+
name|table
operator|.
name|getWidth
argument_list|()
argument_list|,
literal|60f
operator|+
literal|0.75f
operator|*
name|table
operator|.
name|getWidth
argument_list|()
argument_list|)
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|PdfWriter
name|iWriter
init|=
name|PdfWriter
operator|.
name|getInstance
argument_list|(
name|doc
argument_list|,
name|out
argument_list|)
decl_stmt|;
name|iWriter
operator|.
name|setPageEvent
argument_list|(
operator|new
name|PdfEventHandler
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|.
name|setPageSize
argument_list|(
operator|new
name|Rectangle
argument_list|(
literal|60f
operator|+
name|table
operator|.
name|getWidth
argument_list|()
argument_list|,
literal|60f
operator|+
literal|0.75f
operator|*
name|table
operator|.
name|getWidth
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|newPage
argument_list|()
expr_stmt|;
block|}
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Paragraph
argument_list|(
name|table
operator|.
name|getName
argument_list|()
argument_list|,
name|FontFactory
operator|.
name|getFont
argument_list|(
name|FontFactory
operator|.
name|HELVETICA_BOLD
argument_list|,
literal|16
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|pdfTable
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
return|return;
name|doc
operator|.
name|close
argument_list|()
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|REQUEST_OPEN_URL
argument_list|,
literal|"temp/"
operator|+
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
block|}
block|}
block|}
block|}
end_class

end_unit

