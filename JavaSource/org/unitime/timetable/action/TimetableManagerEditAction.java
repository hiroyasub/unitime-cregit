begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.1 (University Timetabling Application)  * Copyright (C) 2008, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|util
operator|.
name|MessageResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|Web
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|TimetableManagerForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalUidLookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ManagerRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Roles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|RolesComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|RolesDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SolverGroupDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|TimetableManagerDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|LookupTables
import|;
end_import

begin_comment
comment|/**  * MyEclipse Struts  * Creation date: 04-06-2005  *  * XDoclet definition:  * @struts:action path="/timetableManagerEdit" name="timetableManagerForm" input="/admin/timetableManagerList.jsp" scope="request" validate="true"  * @struts:action-forward name="success" path="timetableManagerList.do" redirect="true"  * @struts:action-forward name="fail" path="timetableManagerList.do" redirect="true"  */
end_comment

begin_class
specifier|public
class|class
name|TimetableManagerEditAction
extends|extends
name|Action
block|{
comment|// --------------------------------------------------------- Instance Variables
comment|// --------------------------------------------------------- Methods
comment|/**      * Method execute      * @param mapping      * @param form      * @param request      * @param response      * @return ActionForward      */
specifier|public
name|ActionForward
name|execute
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Check access
if|if
condition|(
operator|!
name|Web
operator|.
name|hasRole
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
name|Roles
operator|.
name|ADMIN_ROLE
block|}
block_content|)
block|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Access Denied."
argument_list|)
throw|;
block|}
end_class

begin_decl_stmt
name|HttpSession
name|httpSession
init|=
name|request
operator|.
name|getSession
argument_list|()
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|MessageResources
name|rsc
init|=
name|getResources
argument_list|(
name|request
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|TimetableManagerForm
name|frm
init|=
operator|(
name|TimetableManagerForm
operator|)
name|form
decl_stmt|;
end_decl_stmt

begin_comment
comment|// Read Operation
end_comment

begin_decl_stmt
name|String
name|op
init|=
operator|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"op"
argument_list|)
operator|==
literal|null
operator|)
condition|?
operator|(
name|frm
operator|.
name|getOp
argument_list|()
operator|==
literal|null
operator|||
name|frm
operator|.
name|getOp
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
condition|?
operator|(
name|request
operator|.
name|getAttribute
argument_list|(
literal|"op"
argument_list|)
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|request
operator|.
name|getAttribute
argument_list|(
literal|"op"
argument_list|)
operator|.
name|toString
argument_list|()
else|:
name|frm
operator|.
name|getOp
argument_list|()
else|:
name|request
operator|.
name|getParameter
argument_list|(
literal|"op"
argument_list|)
decl_stmt|;
end_decl_stmt

begin_if_stmt
if|if
condition|(
name|op
operator|==
literal|null
operator|||
name|op
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Operation could not be interpreted: "
operator|+
name|op
argument_list|)
throw|;
end_if_stmt

begin_comment
comment|// Set up Departments
end_comment

begin_expr_stmt
name|LookupTables
operator|.
name|setupDepts
argument_list|(
name|request
argument_list|,
operator|(
name|Long
operator|)
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|SESSION_ID_ATTR_NAME
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|request
operator|.
name|setAttribute
argument_list|(
literal|"solverGroupList"
argument_list|,
name|SolverGroup
operator|.
name|findBySessionId
argument_list|(
operator|(
name|Long
operator|)
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|SESSION_ID_ATTR_NAME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|frm
operator|.
name|setOp
argument_list|(
name|op
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// Back
end_comment

begin_if_stmt
if|if
condition|(
name|op
operator|.
name|equalsIgnoreCase
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.backToManagerList"
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|frm
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
name|frm
operator|.
name|getUniqueId
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|JUMP_TO_ATTR_NAME
argument_list|,
name|frm
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"displayManagerList"
argument_list|)
return|;
block|}
end_if_stmt

begin_comment
comment|// Redirect from Manager List - Edit Manager
end_comment

begin_if_stmt
if|if
condition|(
name|op
operator|.
name|equalsIgnoreCase
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"op.edit"
argument_list|)
argument_list|)
condition|)
block|{
name|frm
operator|.
name|setOp1
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
name|loadForm
argument_list|(
name|request
argument_list|,
name|frm
argument_list|)
expr_stmt|;
block|}
end_if_stmt

begin_comment
comment|// Redirect from Manager List - Add Manager
end_comment

begin_if_stmt
if|if
condition|(
name|op
operator|.
name|equalsIgnoreCase
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.addTimetableManager"
argument_list|)
argument_list|)
condition|)
block|{
name|frm
operator|.
name|setOp1
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|String
name|uidLookupEnabled
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.manager.external_id.lookup.enabled"
argument_list|)
decl_stmt|;
if|if
condition|(
name|uidLookupEnabled
operator|!=
literal|null
operator|&&
name|uidLookupEnabled
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
condition|)
block|{
name|frm
operator|.
name|setLookupEnabled
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|frm
operator|.
name|setLookupEnabled
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
block|}
block|}
end_if_stmt

begin_comment
comment|// Lookup puid / career account
end_comment

begin_if_stmt
if|if
condition|(
name|op
operator|.
name|equalsIgnoreCase
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.lookupManager"
argument_list|)
argument_list|)
condition|)
block|{
comment|// Do nothing - taken care below
block|}
end_if_stmt

begin_decl_stmt
name|String
name|mapPath
init|=
name|frm
operator|.
name|getOp1
argument_list|()
operator|.
name|equals
argument_list|(
literal|"1"
argument_list|)
condition|?
literal|"addManagerInfo"
else|:
literal|"editManagerInfo"
decl_stmt|;
end_decl_stmt

begin_comment
comment|// Add Role
end_comment

begin_if_stmt
if|if
condition|(
name|op
operator|.
name|equalsIgnoreCase
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.addRole"
argument_list|)
argument_list|)
condition|)
block|{
name|ActionMessages
name|errors
init|=
name|frm
operator|.
name|validate
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|errors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
name|setupRoles
argument_list|(
name|request
argument_list|,
name|frm
argument_list|)
expr_stmt|;
name|lookupManager
argument_list|(
name|frm
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
name|mapPath
argument_list|)
return|;
block|}
name|Roles
name|role
init|=
operator|new
name|RolesDAO
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|frm
operator|.
name|getRole
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|frm
operator|.
name|addToRoles
argument_list|(
name|role
argument_list|)
expr_stmt|;
if|if
condition|(
name|frm
operator|.
name|getRoles
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
name|frm
operator|.
name|setPrimaryRole
argument_list|(
name|role
operator|.
name|getRoleId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_if_stmt

begin_comment
comment|// Add Department
end_comment

begin_if_stmt
if|if
condition|(
name|op
operator|.
name|equalsIgnoreCase
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.addDepartment"
argument_list|)
argument_list|)
condition|)
block|{
name|ActionMessages
name|errors
init|=
name|frm
operator|.
name|validate
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|errors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
name|setupRoles
argument_list|(
name|request
argument_list|,
name|frm
argument_list|)
expr_stmt|;
name|lookupManager
argument_list|(
name|frm
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
name|mapPath
argument_list|)
return|;
block|}
name|Department
name|dept
init|=
operator|new
name|DepartmentDAO
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|frm
operator|.
name|getDept
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|frm
operator|.
name|addToDepts
argument_list|(
name|dept
argument_list|)
expr_stmt|;
if|if
condition|(
name|dept
operator|.
name|isExternalManager
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
name|frm
operator|.
name|setIsExternalManager
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_if_stmt

begin_comment
comment|// Add Solver Group
end_comment

begin_if_stmt
if|if
condition|(
name|op
operator|.
name|equalsIgnoreCase
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.addSolverGroup"
argument_list|)
argument_list|)
condition|)
block|{
name|ActionMessages
name|errors
init|=
name|frm
operator|.
name|validate
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|errors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
name|setupRoles
argument_list|(
name|request
argument_list|,
name|frm
argument_list|)
expr_stmt|;
name|lookupManager
argument_list|(
name|frm
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
name|mapPath
argument_list|)
return|;
block|}
name|SolverGroup
name|sg
init|=
operator|new
name|SolverGroupDAO
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|frm
operator|.
name|getSolverGr
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|frm
operator|.
name|addToSolverGrs
argument_list|(
name|sg
argument_list|)
expr_stmt|;
block|}
end_if_stmt

begin_comment
comment|// Add new manager
end_comment

begin_if_stmt
if|if
condition|(
name|op
operator|.
name|equalsIgnoreCase
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.insertTimetableManager"
argument_list|)
argument_list|)
condition|)
block|{
name|frm
operator|.
name|setOp1
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|ActionMessages
name|errors
init|=
name|frm
operator|.
name|validate
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|errors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
name|setupRoles
argument_list|(
name|request
argument_list|,
name|frm
argument_list|)
expr_stmt|;
try|try
block|{
name|lookupManager
argument_list|(
name|frm
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
return|return
name|mapping
operator|.
name|findForward
argument_list|(
name|mapPath
argument_list|)
return|;
block|}
name|addManager
argument_list|(
name|request
argument_list|,
name|frm
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"displayManagerList"
argument_list|)
return|;
block|}
end_if_stmt

begin_comment
comment|// Update Manager
end_comment

begin_if_stmt
if|if
condition|(
name|op
operator|.
name|equalsIgnoreCase
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.updateTimetableManager"
argument_list|)
argument_list|)
condition|)
block|{
name|frm
operator|.
name|setOp1
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
name|ActionMessages
name|errors
init|=
name|frm
operator|.
name|validate
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|errors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
name|setupRoles
argument_list|(
name|request
argument_list|,
name|frm
argument_list|)
expr_stmt|;
try|try
block|{
name|lookupManager
argument_list|(
name|frm
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
return|return
name|mapping
operator|.
name|findForward
argument_list|(
name|mapPath
argument_list|)
return|;
block|}
name|updateManager
argument_list|(
name|request
argument_list|,
name|frm
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"displayManagerList"
argument_list|)
return|;
block|}
end_if_stmt

begin_comment
comment|// Delete Manager
end_comment

begin_if_stmt
if|if
condition|(
name|op
operator|.
name|equalsIgnoreCase
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.delete"
argument_list|)
argument_list|)
operator|||
name|op
operator|.
name|equalsIgnoreCase
argument_list|(
name|rsc
operator|.
name|getMessage
argument_list|(
literal|"button.deleteTimetableManager"
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|deleteType
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"deleteType"
argument_list|)
decl_stmt|;
name|String
name|deleteId
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"deleteId"
argument_list|)
decl_stmt|;
if|if
condition|(
name|deleteType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"dept"
argument_list|)
condition|)
block|{
name|frm
operator|.
name|removeFromDepts
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|deleteId
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deleteType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"solverGr"
argument_list|)
condition|)
block|{
name|frm
operator|.
name|removeFromSolverGrs
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|deleteId
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deleteType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"role"
argument_list|)
condition|)
block|{
name|frm
operator|.
name|removeFromRoles
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|deleteId
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|frm
operator|.
name|getRoles
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
name|frm
operator|.
name|setPrimaryRole
argument_list|(
name|frm
operator|.
name|getRoles
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deleteType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"manager"
argument_list|)
condition|)
block|{
name|frm
operator|.
name|setOp1
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
name|deleteManager
argument_list|(
name|request
argument_list|,
name|frm
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"displayManagerList"
argument_list|)
return|;
block|}
block|}
end_if_stmt

begin_comment
comment|// Get manager details
end_comment

begin_try
try|try
block|{
name|lookupManager
argument_list|(
name|frm
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ActionMessages
name|errors
init|=
operator|new
name|ActionMessages
argument_list|()
decl_stmt|;
name|errors
operator|.
name|add
argument_list|(
literal|"puid"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
name|setupRoles
argument_list|(
name|request
argument_list|,
name|frm
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
name|mapPath
argument_list|)
return|;
block|}
end_try

begin_comment
comment|// Get roles not already assigned
end_comment

begin_expr_stmt
name|setupRoles
argument_list|(
name|request
argument_list|,
name|frm
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|mapping
operator|.
name|findForward
argument_list|(
name|mapPath
argument_list|)
return|;
end_return

begin_comment
unit|}
comment|/**      * Lookup manager details from I2A2      * @param frm      */
end_comment

begin_function
unit|private
name|void
name|lookupManager
parameter_list|(
name|TimetableManagerForm
name|frm
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|id
init|=
name|frm
operator|.
name|getExternalId
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
operator|&&
name|id
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|frm
operator|.
name|getLookupEnabled
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|HashMap
name|attributes
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|ExternalUidLookup
operator|.
name|SEARCH_ID
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|String
name|className
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.manager.external_id.lookup.class"
argument_list|)
decl_stmt|;
name|ExternalUidLookup
name|lookup
init|=
operator|(
name|ExternalUidLookup
operator|)
operator|(
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|newInstance
argument_list|()
operator|)
decl_stmt|;
name|Map
name|results
init|=
name|lookup
operator|.
name|doLookup
argument_list|(
name|attributes
argument_list|)
decl_stmt|;
if|if
condition|(
name|results
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
name|lookup
operator|.
name|getErrorMessage
argument_list|()
argument_list|)
throw|;
name|frm
operator|.
name|setExternalId
argument_list|(
operator|(
name|String
operator|)
name|results
operator|.
name|get
argument_list|(
name|ExternalUidLookup
operator|.
name|EXTERNAL_ID
argument_list|)
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setLookupResult
argument_list|(
operator|(
name|String
operator|)
name|results
operator|.
name|get
argument_list|(
name|ExternalUidLookup
operator|.
name|USERNAME
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|frm
operator|.
name|getFirstName
argument_list|()
operator|==
literal|null
operator|||
name|frm
operator|.
name|getFirstName
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|frm
operator|.
name|setFirstName
argument_list|(
operator|(
name|String
operator|)
name|results
operator|.
name|get
argument_list|(
name|ExternalUidLookup
operator|.
name|FIRST_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|frm
operator|.
name|getMiddleName
argument_list|()
operator|==
literal|null
operator|||
name|frm
operator|.
name|getMiddleName
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|frm
operator|.
name|setMiddleName
argument_list|(
operator|(
name|String
operator|)
name|results
operator|.
name|get
argument_list|(
name|ExternalUidLookup
operator|.
name|MIDDLE_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|frm
operator|.
name|getLastName
argument_list|()
operator|==
literal|null
operator|||
name|frm
operator|.
name|getLastName
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|frm
operator|.
name|setLastName
argument_list|(
operator|(
name|String
operator|)
name|results
operator|.
name|get
argument_list|(
name|ExternalUidLookup
operator|.
name|LAST_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|frm
operator|.
name|setEmail
argument_list|(
operator|(
name|String
operator|)
name|results
operator|.
name|get
argument_list|(
name|ExternalUidLookup
operator|.
name|EMAIL
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**      * Display only those roles not already assigned to the manager      * @param request      */
end_comment

begin_function
specifier|private
name|void
name|setupRoles
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|TimetableManagerForm
name|frm
parameter_list|)
block|{
name|Vector
name|v
init|=
name|Roles
operator|.
name|getRolesList
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Vector
name|rolesList
init|=
operator|(
name|Vector
operator|)
name|v
operator|.
name|clone
argument_list|()
decl_stmt|;
name|ArrayList
name|exclude
init|=
operator|new
name|ArrayList
argument_list|(
name|frm
operator|.
name|getRoleRefs
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|exclude
operator|!=
literal|null
operator|&&
name|exclude
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|exclude
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
operator|(
name|rolesList
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
init|;
name|j
operator|>=
literal|0
condition|;
name|j
operator|--
control|)
block|{
name|Roles
name|role
init|=
operator|(
name|Roles
operator|)
name|rolesList
operator|.
name|elementAt
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|role
operator|.
name|getReference
argument_list|()
operator|.
name|equals
argument_list|(
name|exclude
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
name|rolesList
operator|.
name|remove
argument_list|(
name|j
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|request
operator|.
name|setAttribute
argument_list|(
name|Roles
operator|.
name|ROLES_ATTR_NAME
argument_list|,
name|rolesList
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Load details of manager from database      * @param request      * @param frm      * @throws Exception      */
end_comment

begin_function
specifier|private
name|void
name|loadForm
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|TimetableManagerForm
name|frm
parameter_list|)
throws|throws
name|Exception
block|{
name|Long
name|mgrId
init|=
literal|null
decl_stmt|;
name|String
name|uniqueId
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|uniqueId
operator|==
literal|null
operator|||
name|uniqueId
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Manager Id could not be read."
argument_list|)
throw|;
try|try
block|{
name|mgrId
operator|=
operator|new
name|Long
argument_list|(
name|uniqueId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Invalid Manager Id : "
operator|+
name|uniqueId
argument_list|)
throw|;
block|}
name|frm
operator|.
name|setUniqueId
argument_list|(
name|uniqueId
argument_list|)
expr_stmt|;
name|TimetableManagerDAO
name|mgrDao
init|=
operator|new
name|TimetableManagerDAO
argument_list|()
decl_stmt|;
name|TimetableManager
name|mgr
init|=
name|mgrDao
operator|.
name|get
argument_list|(
name|mgrId
argument_list|)
decl_stmt|;
name|frm
operator|.
name|setEmail
argument_list|(
name|mgr
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setExternalId
argument_list|(
name|mgr
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setIsExternalManager
argument_list|(
operator|new
name|Boolean
argument_list|(
name|mgr
operator|.
name|isExternalManager
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Set
name|rolesSet
init|=
name|mgr
operator|.
name|getManagerRoles
argument_list|()
decl_stmt|;
name|ArrayList
name|roles
init|=
operator|new
name|ArrayList
argument_list|(
name|rolesSet
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|roles
argument_list|,
operator|new
name|RolesComparator
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|roles
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ManagerRole
name|mgrRole
init|=
operator|(
name|ManagerRole
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Roles
name|role
init|=
name|mgrRole
operator|.
name|getRole
argument_list|()
decl_stmt|;
name|frm
operator|.
name|addToRoles
argument_list|(
name|role
argument_list|)
expr_stmt|;
if|if
condition|(
name|mgrRole
operator|.
name|isPrimary
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
name|frm
operator|.
name|setPrimaryRole
argument_list|(
name|role
operator|.
name|getRoleId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|Long
name|sessionId
init|=
operator|(
name|Long
operator|)
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|SESSION_ID_ATTR_NAME
argument_list|)
decl_stmt|;
name|Set
name|depts
init|=
name|mgr
operator|.
name|getDepartments
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|depts
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|dept
init|=
operator|(
name|Department
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|dept
operator|.
name|getSessionId
argument_list|()
operator|.
name|equals
argument_list|(
name|sessionId
argument_list|)
condition|)
name|frm
operator|.
name|addToDepts
argument_list|(
name|dept
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|mgr
operator|.
name|getSolverGroups
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SolverGroup
name|sg
init|=
operator|(
name|SolverGroup
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|sg
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|sessionId
argument_list|)
condition|)
name|frm
operator|.
name|addToSolverGrs
argument_list|(
name|sg
argument_list|)
expr_stmt|;
block|}
name|String
name|uidLookupEnabled
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.manager.external_id.lookup.enabled"
argument_list|)
decl_stmt|;
if|if
condition|(
name|uidLookupEnabled
operator|!=
literal|null
operator|&&
name|uidLookupEnabled
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
condition|)
block|{
name|frm
operator|.
name|setLookupEnabled
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setFirstName
argument_list|(
name|mgr
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setMiddleName
argument_list|(
name|mgr
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setLastName
argument_list|(
name|mgr
operator|.
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|frm
operator|.
name|setLookupEnabled
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setFirstName
argument_list|(
name|mgr
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setMiddleName
argument_list|(
name|mgr
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
name|frm
operator|.
name|setLastName
argument_list|(
name|mgr
operator|.
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**      * Add New Manager      * @param request      * @param frm      * @throws Exception      */
end_comment

begin_function
specifier|private
name|void
name|addManager
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|TimetableManagerForm
name|frm
parameter_list|)
throws|throws
name|Exception
block|{
name|lookupManager
argument_list|(
name|frm
argument_list|)
expr_stmt|;
name|TimetableManagerDAO
name|mgrDao
init|=
operator|new
name|TimetableManagerDAO
argument_list|()
decl_stmt|;
name|RolesDAO
name|rDao
init|=
operator|new
name|RolesDAO
argument_list|()
decl_stmt|;
name|DepartmentDAO
name|dDao
init|=
operator|new
name|DepartmentDAO
argument_list|()
decl_stmt|;
name|SolverGroupDAO
name|sgDao
init|=
operator|new
name|SolverGroupDAO
argument_list|()
decl_stmt|;
name|Session
name|hibSession
init|=
name|mgrDao
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Transaction
name|tx
init|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
name|TimetableManager
name|mgr
init|=
operator|new
name|TimetableManager
argument_list|()
decl_stmt|;
name|mgr
operator|.
name|setFirstName
argument_list|(
name|frm
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|setMiddleName
argument_list|(
name|frm
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|setLastName
argument_list|(
name|frm
operator|.
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|setExternalUniqueId
argument_list|(
name|frm
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|setEmailAddress
argument_list|(
name|frm
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add Roles
name|List
name|roles
init|=
name|frm
operator|.
name|getRoles
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|roles
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Roles
name|role
init|=
name|rDao
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|i
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ManagerRole
name|mgrRole
init|=
operator|new
name|ManagerRole
argument_list|()
decl_stmt|;
name|mgrRole
operator|.
name|setRole
argument_list|(
name|role
argument_list|)
expr_stmt|;
name|mgrRole
operator|.
name|setTimetableManager
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
if|if
condition|(
name|frm
operator|.
name|getPrimaryRole
argument_list|()
operator|.
name|equals
argument_list|(
name|role
operator|.
name|getRoleId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
name|mgrRole
operator|.
name|setPrimary
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|mgrRole
operator|.
name|setPrimary
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addTomanagerRoles
argument_list|(
name|mgrRole
argument_list|)
expr_stmt|;
block|}
comment|// Add departments
name|List
name|depts
init|=
name|frm
operator|.
name|getDepts
argument_list|()
decl_stmt|;
name|HashSet
name|deptsSet
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|depts
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|dept
init|=
name|dDao
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|i
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|deptsSet
operator|.
name|add
argument_list|(
name|dept
argument_list|)
expr_stmt|;
block|}
name|mgr
operator|.
name|setDepartments
argument_list|(
name|deptsSet
argument_list|)
expr_stmt|;
name|List
name|solverGrs
init|=
name|frm
operator|.
name|getSolverGrs
argument_list|()
decl_stmt|;
name|HashSet
name|solverGrSet
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|solverGrs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SolverGroup
name|sg
init|=
name|sgDao
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|i
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|solverGrSet
operator|.
name|add
argument_list|(
name|sg
argument_list|)
expr_stmt|;
block|}
name|mgr
operator|.
name|setSolverGroups
argument_list|(
name|solverGrSet
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|request
argument_list|,
name|mgr
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|MANAGER_EDIT
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|CREATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|clear
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|refresh
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
if|if
condition|(
name|mgr
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|JUMP_TO_ATTR_NAME
argument_list|,
name|mgr
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|mgr
operator|.
name|getSolverGroups
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|hibSession
operator|.
name|refresh
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Update Manager Details      * @param request      * @param frm      */
end_comment

begin_function
specifier|private
name|void
name|updateManager
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|TimetableManagerForm
name|frm
parameter_list|)
throws|throws
name|Exception
block|{
name|lookupManager
argument_list|(
name|frm
argument_list|)
expr_stmt|;
name|TimetableManagerDAO
name|mgrDao
init|=
operator|new
name|TimetableManagerDAO
argument_list|()
decl_stmt|;
name|RolesDAO
name|rDao
init|=
operator|new
name|RolesDAO
argument_list|()
decl_stmt|;
name|DepartmentDAO
name|dDao
init|=
operator|new
name|DepartmentDAO
argument_list|()
decl_stmt|;
name|SolverGroupDAO
name|sgDao
init|=
operator|new
name|SolverGroupDAO
argument_list|()
decl_stmt|;
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|Long
name|sessionId
init|=
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
operator|.
name|getUniqueId
argument_list|()
decl_stmt|;
name|Session
name|hibSession
init|=
name|mgrDao
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Transaction
name|tx
init|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
name|TimetableManager
name|mgr
init|=
name|mgrDao
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|frm
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|mgr
operator|.
name|setFirstName
argument_list|(
name|frm
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|setMiddleName
argument_list|(
name|frm
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|setLastName
argument_list|(
name|frm
operator|.
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|setExternalUniqueId
argument_list|(
name|frm
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|setEmailAddress
argument_list|(
name|frm
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
comment|// Update Roles
name|List
name|roles
init|=
name|frm
operator|.
name|getRoles
argument_list|()
decl_stmt|;
name|Set
name|mgrRoles
init|=
name|mgr
operator|.
name|getManagerRoles
argument_list|()
decl_stmt|;
if|if
condition|(
name|mgrRoles
operator|==
literal|null
condition|)
name|mgrRoles
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
comment|// Check if roles added or updated
for|for
control|(
name|Iterator
name|i
init|=
name|roles
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Roles
name|role
init|=
name|rDao
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|i
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
comment|// Check if role already exists
for|for
control|(
name|Iterator
name|j
init|=
name|mgrRoles
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ManagerRole
name|eMgrRole
init|=
operator|(
name|ManagerRole
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|Roles
name|eRole
init|=
name|eMgrRole
operator|.
name|getRole
argument_list|()
decl_stmt|;
comment|// Exists - check if primary
if|if
condition|(
name|eRole
operator|.
name|equals
argument_list|(
name|role
argument_list|)
condition|)
block|{
if|if
condition|(
name|frm
operator|.
name|getPrimaryRole
argument_list|()
operator|.
name|equals
argument_list|(
name|role
operator|.
name|getRoleId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
name|eMgrRole
operator|.
name|setPrimary
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|eMgrRole
operator|.
name|setPrimary
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
comment|// Role does not exist - add
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|ManagerRole
name|mgrRole
init|=
operator|new
name|ManagerRole
argument_list|()
decl_stmt|;
name|mgrRole
operator|.
name|setRole
argument_list|(
name|role
argument_list|)
expr_stmt|;
name|mgrRole
operator|.
name|setTimetableManager
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
if|if
condition|(
name|frm
operator|.
name|getPrimaryRole
argument_list|()
operator|.
name|equals
argument_list|(
name|role
operator|.
name|getRoleId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
name|mgrRole
operator|.
name|setPrimary
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|mgrRole
operator|.
name|setPrimary
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addTomanagerRoles
argument_list|(
name|mgrRole
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Check if roles deleted
for|for
control|(
name|Iterator
name|j
init|=
name|mgrRoles
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ManagerRole
name|eMgrRole
init|=
operator|(
name|ManagerRole
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|Roles
name|eRole
init|=
name|eMgrRole
operator|.
name|getRole
argument_list|()
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|roles
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Roles
name|role
init|=
name|rDao
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|i
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|eRole
operator|.
name|equals
argument_list|(
name|role
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|j
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Update departments
name|List
name|depts
init|=
name|frm
operator|.
name|getDepts
argument_list|()
decl_stmt|;
name|Set
name|mgrDepts
init|=
name|mgr
operator|.
name|getDepartments
argument_list|()
decl_stmt|;
if|if
condition|(
name|mgrDepts
operator|==
literal|null
condition|)
block|{
name|mgrDepts
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|mgr
operator|.
name|setDepartments
argument_list|(
name|mgrDepts
argument_list|)
expr_stmt|;
block|}
comment|// Check if depts added or updated
for|for
control|(
name|Iterator
name|i
init|=
name|depts
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|dept
init|=
name|dDao
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|i
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|mgrDepts
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|eDept
init|=
operator|(
name|Department
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|eDept
operator|.
name|equals
argument_list|(
name|dept
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|mgrDepts
operator|.
name|add
argument_list|(
name|dept
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Check if depts deleted
for|for
control|(
name|Iterator
name|j
init|=
name|mgrDepts
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|eDept
init|=
operator|(
name|Department
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|eDept
operator|.
name|getSessionId
argument_list|()
operator|.
name|equals
argument_list|(
name|sessionId
argument_list|)
condition|)
continue|continue;
comment|//SKIP DEPARTMENTS OF DIFFERENT SESSIONS!!!
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|depts
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|dept
init|=
name|dDao
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|i
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|eDept
operator|.
name|equals
argument_list|(
name|dept
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|j
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Update solver groups
name|List
name|solverGrs
init|=
name|frm
operator|.
name|getSolverGrs
argument_list|()
decl_stmt|;
name|Set
name|mgrSolverGrs
init|=
name|mgr
operator|.
name|getSolverGroups
argument_list|()
decl_stmt|;
if|if
condition|(
name|mgrSolverGrs
operator|==
literal|null
condition|)
block|{
name|mgrSolverGrs
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|mgr
operator|.
name|setSolverGroups
argument_list|(
name|mgrSolverGrs
argument_list|)
expr_stmt|;
block|}
name|Set
name|solverGrToRefresh
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
comment|// Check if solver group added or updated
for|for
control|(
name|Iterator
name|i
init|=
name|solverGrs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SolverGroup
name|sg
init|=
name|sgDao
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|i
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|mgrSolverGrs
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SolverGroup
name|eSg
init|=
operator|(
name|SolverGroup
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|eSg
operator|.
name|equals
argument_list|(
name|sg
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|mgrSolverGrs
operator|.
name|add
argument_list|(
name|sg
argument_list|)
expr_stmt|;
name|solverGrToRefresh
operator|.
name|add
argument_list|(
name|sg
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Check if depts deleted
for|for
control|(
name|Iterator
name|j
init|=
name|mgrSolverGrs
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SolverGroup
name|eSg
init|=
operator|(
name|SolverGroup
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|eSg
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|sessionId
argument_list|)
condition|)
continue|continue;
comment|//SKIP DEPARTMENTS OF DIFFERENT SESSIONS!!!
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|solverGrs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SolverGroup
name|sg
init|=
name|sgDao
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|i
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|eSg
operator|.
name|equals
argument_list|(
name|sg
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|j
operator|.
name|remove
argument_list|()
expr_stmt|;
name|solverGrToRefresh
operator|.
name|add
argument_list|(
name|eSg
argument_list|)
expr_stmt|;
block|}
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|request
argument_list|,
name|mgr
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|MANAGER_EDIT
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|UPDATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|clear
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|refresh
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
if|if
condition|(
name|mgr
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|JUMP_TO_ATTR_NAME
argument_list|,
name|mgr
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|solverGrToRefresh
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|hibSession
operator|.
name|refresh
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Delete Manager      * @param request      * @param frm      */
end_comment

begin_function
specifier|private
name|void
name|deleteManager
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|TimetableManagerForm
name|frm
parameter_list|)
block|{
name|TimetableManagerDAO
name|mgrDao
init|=
operator|new
name|TimetableManagerDAO
argument_list|()
decl_stmt|;
name|Session
name|hibSession
init|=
name|mgrDao
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|TimetableManager
name|mgr
init|=
name|mgrDao
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|frm
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Transaction
name|tx
init|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|request
argument_list|,
name|mgr
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|MANAGER_EDIT
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|DELETE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Set
name|mgrRoles
init|=
name|mgr
operator|.
name|getManagerRoles
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|mgrRoles
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ManagerRole
name|mgrRole
init|=
operator|(
name|ManagerRole
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|mgrRole
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|delete
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function

unit|}
end_unit

