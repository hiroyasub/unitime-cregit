begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|MultiComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|Web
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|WebTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|RoleListForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ManagerRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Roles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|UserData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ManagerRoleDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  * MyEclipse Struts  * Creation date: 03-17-2005  *  * XDoclet definition:  * @struts:action path="/selectPrimaryRole" name="roleListForm" input="/selectPrimaryRole.jsp" scope="request" validate="true"  * @struts:action-forward name="success" path="/main.jsp" contextRelative="true"  * @struts:action-forward name="fail" path="/selectPrimaryRole.jsp" contextRelative="true"  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"/selectPrimaryRole"
argument_list|)
specifier|public
class|class
name|RoleListAction
extends|extends
name|Action
block|{
comment|/**      * Method execute      * @param mapping      * @param form      * @param request      * @param response      * @return ActionForward      */
specifier|public
name|ActionForward
name|execute
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
name|HttpSession
name|webSession
init|=
name|request
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|webSession
argument_list|)
decl_stmt|;
name|RoleListForm
name|roleListForm
init|=
operator|(
name|RoleListForm
operator|)
name|form
decl_stmt|;
comment|// Check user is logged in
if|if
condition|(
name|user
operator|==
literal|null
condition|)
return|return
operator|(
name|mapping
operator|.
name|findForward
argument_list|(
literal|"loginRequired"
argument_list|)
operator|)
return|;
comment|// Get manager object
name|TimetableManager
name|tm
init|=
name|TimetableManager
operator|.
name|getManager
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|tm
operator|==
literal|null
condition|)
block|{
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.authentication.norole"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
condition|)
return|return
name|mapping
operator|.
name|findForward
argument_list|(
name|TimetableManager
operator|.
name|canSeeEvents
argument_list|(
name|user
argument_list|)
condition|?
literal|"success"
else|:
literal|"norole"
argument_list|)
return|;
return|return
operator|(
name|mapping
operator|.
name|findForward
argument_list|(
literal|"loginRequired"
argument_list|)
operator|)
return|;
block|}
comment|// Check App Access Level
name|String
name|appAccessLevel
init|=
operator|(
name|String
operator|)
name|webSession
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|CFG_APP_ACCESS_LEVEL
argument_list|)
decl_stmt|;
if|if
condition|(
name|appAccessLevel
operator|==
literal|null
operator|||
name|appAccessLevel
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
operator|(
name|mapping
operator|.
name|findForward
argument_list|(
literal|"loginRequired"
argument_list|)
operator|)
return|;
block|}
comment|// All authorized users can access the application
name|boolean
name|aclSet
init|=
literal|false
decl_stmt|;
name|Set
name|departments
init|=
name|tm
operator|.
name|getDepartments
argument_list|()
decl_stmt|;
if|if
condition|(
name|appAccessLevel
operator|.
name|equalsIgnoreCase
argument_list|(
name|Constants
operator|.
name|APP_ACL_ALL
argument_list|)
condition|)
block|{
name|webSession
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|SESSION_APP_ACCESS_LEVEL
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|aclSet
operator|=
literal|true
expr_stmt|;
block|}
comment|// Get roles
name|Vector
name|roles
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|tm
operator|.
name|getManagerRoles
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ManagerRole
name|mr
init|=
operator|(
name|ManagerRole
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|roles
operator|.
name|add
argument_list|(
name|mr
operator|.
name|getRole
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|appAccessLevel
operator|.
name|equalsIgnoreCase
argument_list|(
name|Constants
operator|.
name|APP_ACL_ALL
argument_list|)
condition|)
block|{
comment|// If user possesses admin role (may not be default) - allow user
if|if
condition|(
name|mr
operator|.
name|getRole
argument_list|()
operator|.
name|getReference
argument_list|()
operator|.
name|equals
argument_list|(
name|Roles
operator|.
name|ADMIN_ROLE
argument_list|)
condition|)
block|{
name|webSession
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|SESSION_APP_ACCESS_LEVEL
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|aclSet
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|aclSet
condition|)
block|{
name|StringTokenizer
name|strTok
init|=
operator|new
name|StringTokenizer
argument_list|(
name|appAccessLevel
argument_list|,
literal|":"
argument_list|)
decl_stmt|;
name|outerLoop
label|:
while|while
condition|(
name|strTok
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|elem
init|=
name|strTok
operator|.
name|nextToken
argument_list|()
decl_stmt|;
comment|// Check department access
if|if
condition|(
operator|!
name|elem
operator|.
name|equalsIgnoreCase
argument_list|(
name|Constants
operator|.
name|APP_ACL_ADMIN
argument_list|)
operator|&&
name|elem
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|deptIter
init|=
name|departments
operator|.
name|iterator
argument_list|()
init|;
name|deptIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|dept
init|=
operator|(
name|Department
operator|)
name|deptIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|elem
operator|.
name|trim
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|dept
operator|.
name|getDeptCode
argument_list|()
argument_list|)
condition|)
block|{
name|webSession
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|SESSION_APP_ACCESS_LEVEL
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|aclSet
operator|=
literal|true
expr_stmt|;
break|break
name|outerLoop
break|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|aclSet
condition|)
block|{
name|webSession
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|SESSION_APP_ACCESS_LEVEL
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
comment|// Lookup acad sessions for the roles
name|ManagerRole
name|defaultRole
init|=
name|setUpRoles
argument_list|(
name|request
argument_list|,
name|user
argument_list|)
decl_stmt|;
comment|/*         if (defaultRole!=null) {             Set sessions = (Roles.ADMIN_ROLE.equals(defaultRole.getRole().getReference())?Session.getAllSessions():defaultRole.getTimetableManager().sessionsCanManage());             //If only one role exists - redirect to main menu               if (sessions.size()==1&& setPrimaryRole(webSession, user, defaultRole, (Session)sessions.iterator().next()))                 return mapping.findForward("success");         }         */
comment|// Form submitted
if|if
condition|(
name|roleListForm
operator|.
name|getRoleId
argument_list|()
operator|!=
literal|null
operator|&&
name|roleListForm
operator|.
name|getSessionId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ManagerRole
name|role
init|=
operator|new
name|ManagerRoleDAO
argument_list|()
operator|.
name|get
argument_list|(
name|roleListForm
operator|.
name|getRoleId
argument_list|()
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
operator|new
name|SessionDAO
argument_list|()
operator|.
name|get
argument_list|(
name|roleListForm
operator|.
name|getSessionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|setPrimaryRole
argument_list|(
name|webSession
argument_list|,
name|user
argument_list|,
name|role
argument_list|,
name|session
argument_list|)
condition|)
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"success"
argument_list|)
return|;
block|}
comment|// Role/session list not requested -- try assign default role/session first
if|if
condition|(
operator|!
literal|"Y"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"list"
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|setPrimaryRole
argument_list|(
name|webSession
argument_list|,
name|user
argument_list|,
name|defaultRole
argument_list|,
literal|null
argument_list|)
condition|)
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"success"
argument_list|)
return|;
block|}
if|if
condition|(
name|tm
operator|.
name|getManagerRoles
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
return|return
operator|(
name|mapping
operator|.
name|findForward
argument_list|(
literal|"getUserSelectedRole"
argument_list|)
operator|)
return|;
else|else
return|return
operator|(
name|mapping
operator|.
name|findForward
argument_list|(
literal|"getDefaultAcadSession"
argument_list|)
operator|)
return|;
block|}
comment|/**      * Looks up roles for the current user and saves it in the User object      * @param request HttpServletRequest object      * @param user User object      */
specifier|private
name|ManagerRole
name|setUpRoles
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|User
name|user
parameter_list|)
throws|throws
name|Exception
block|{
name|WebTable
operator|.
name|setOrder
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
literal|"roleLists.ord"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"ord"
argument_list|)
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
name|ManagerRole
name|defaultRole
init|=
literal|null
decl_stmt|;
name|TimetableManager
name|tm
init|=
name|TimetableManager
operator|.
name|getManager
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|WebTable
name|table
init|=
operator|new
name|WebTable
argument_list|(
literal|4
argument_list|,
literal|"Select "
operator|+
operator|(
name|tm
operator|.
name|getManagerRoles
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
literal|"User Role&amp; "
else|:
literal|""
operator|)
operator|+
literal|"Academic Session"
argument_list|,
literal|"selectPrimaryRole.do?list=Y&ord=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"User Role"
block|,
literal|"Academic Session"
block|,
literal|"Academic Initiative"
block|,
literal|"Academic Session Status"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
decl_stmt|;
name|Object
name|currentSessionId
init|=
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|SESSION_ID_ATTR_NAME
argument_list|)
decl_stmt|;
name|int
name|nrLines
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|tm
operator|.
name|getManagerRoles
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ManagerRole
name|mr
init|=
operator|(
name|ManagerRole
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|mr
operator|.
name|isPrimary
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
name|defaultRole
operator|=
name|mr
expr_stmt|;
name|boolean
name|currentRole
init|=
name|mr
operator|.
name|getRole
argument_list|()
operator|.
name|getReference
argument_list|()
operator|.
name|equals
argument_list|(
name|user
operator|.
name|getCurrentRole
argument_list|()
argument_list|)
decl_stmt|;
name|Set
name|sessions
init|=
name|Session
operator|.
name|availableSessions
argument_list|(
name|mr
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|sessions
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Session
name|session
init|=
operator|(
name|Session
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|onClick
init|=
literal|"onClick=\"roleListForm.roleId.value="
operator|+
name|mr
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|";roleListForm.sessionId.value="
operator|+
name|session
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|";roleListForm.submit();\""
decl_stmt|;
name|String
name|bgColor
init|=
operator|(
name|currentRole
operator|&&
name|session
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|currentSessionId
argument_list|)
condition|?
literal|"rgb(168,187,225)"
else|:
literal|null
operator|)
decl_stmt|;
name|table
operator|.
name|addLine
argument_list|(
name|onClick
argument_list|,
operator|new
name|String
index|[]
block|{
name|mr
operator|.
name|getRole
argument_list|()
operator|.
name|getAbbv
argument_list|()
block|,
name|session
operator|.
name|getAcademicYear
argument_list|()
operator|+
literal|" "
operator|+
name|session
operator|.
name|getAcademicTerm
argument_list|()
block|,
name|session
operator|.
name|getAcademicInitiative
argument_list|()
block|,
operator|(
name|session
operator|.
name|getStatusType
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
operator|new
name|MultiComparable
argument_list|(
name|mr
operator|.
name|getRole
argument_list|()
operator|.
name|getAbbv
argument_list|()
argument_list|,
name|session
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|,
name|session
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|session
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|,
name|session
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|,
name|mr
operator|.
name|getRole
argument_list|()
operator|.
name|getAbbv
argument_list|()
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|session
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|,
name|session
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|,
name|mr
operator|.
name|getRole
argument_list|()
operator|.
name|getAbbv
argument_list|()
argument_list|)
block|,
operator|new
name|MultiComparable
argument_list|(
name|session
operator|.
name|getStatusType
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|getOrd
argument_list|()
argument_list|,
name|session
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|,
name|session
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|,
name|mr
operator|.
name|getRole
argument_list|()
operator|.
name|getAbbv
argument_list|()
argument_list|)
block|}
argument_list|)
operator|.
name|setBgColor
argument_list|(
name|bgColor
argument_list|)
expr_stmt|;
name|nrLines
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tm
operator|.
name|getManagerRoles
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"<i><font color='red'>No user role associated with timetabling manager "
operator|+
name|tm
operator|.
name|getName
argument_list|()
operator|+
literal|".</font></i>"
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|else if
condition|(
name|nrLines
operator|==
literal|0
condition|)
name|table
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"<i><font color='red'>No academic session associated with timetabling manager "
operator|+
name|tm
operator|.
name|getName
argument_list|()
operator|+
literal|".</font></i>"
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|defaultRole
operator|==
literal|null
operator|&&
name|tm
operator|.
name|getManagerRoles
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
name|defaultRole
operator|=
operator|(
name|ManagerRole
operator|)
name|tm
operator|.
name|getManagerRoles
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|Roles
operator|.
name|USER_ROLES_ATTR_NAME
argument_list|,
name|table
operator|.
name|printTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
literal|"roleLists.ord"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Web
operator|.
name|setUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
name|user
argument_list|)
expr_stmt|;
return|return
name|defaultRole
return|;
block|}
comment|/**      * Parse the role token to set the role and academic year      * @param webSession Http Session object of the user      * @param user User object      * @param role Manager role      * @param session Academic session (default session will be taken if null)      * @return true if primary role was set      */
specifier|private
name|boolean
name|setPrimaryRole
parameter_list|(
name|HttpSession
name|webSession
parameter_list|,
name|User
name|user
parameter_list|,
name|ManagerRole
name|role
parameter_list|,
name|Session
name|session
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|role
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.keeplastused.session"
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|sessionId
init|=
name|UserData
operator|.
name|getProperty
argument_list|(
name|webSession
argument_list|,
literal|"LastUsed.acadSessionId"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sessionId
operator|!=
literal|null
condition|)
block|{
name|session
operator|=
operator|new
name|SessionDAO
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|sessionId
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|session
operator|!=
literal|null
operator|&&
operator|!
name|Session
operator|.
name|availableSessions
argument_list|(
name|role
argument_list|)
operator|.
name|contains
argument_list|(
name|session
argument_list|)
condition|)
name|session
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|session
operator|==
literal|null
condition|)
name|session
operator|=
name|Session
operator|.
name|defaultSession
argument_list|(
name|role
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|session
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|TimetableManager
name|tm
init|=
name|TimetableManager
operator|.
name|getManager
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|tm
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Timetable manager could not be loaded for user "
operator|+
name|user
operator|.
name|getLogin
argument_list|()
operator|+
literal|"."
argument_list|)
throw|;
if|if
condition|(
operator|!
name|tm
operator|.
name|getManagerRoles
argument_list|()
operator|.
name|contains
argument_list|(
name|role
argument_list|)
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Timetable manager "
operator|+
name|tm
operator|.
name|getName
argument_list|()
operator|+
literal|" does not have requested role "
operator|+
name|role
operator|.
name|getRole
argument_list|()
operator|.
name|getReference
argument_list|()
operator|+
literal|"."
argument_list|)
throw|;
if|if
condition|(
operator|!
name|Session
operator|.
name|availableSessions
argument_list|(
name|role
argument_list|)
operator|.
name|contains
argument_list|(
name|session
argument_list|)
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Timetable manager "
operator|+
name|tm
operator|.
name|getName
argument_list|()
operator|+
literal|" cannot manage requested academic session "
operator|+
name|session
operator|.
name|getAcademicYear
argument_list|()
operator|+
literal|" "
operator|+
name|session
operator|.
name|getAcademicTerm
argument_list|()
operator|+
literal|" "
operator|+
name|session
operator|.
name|getAcademicInitiative
argument_list|()
operator|+
literal|"."
argument_list|)
throw|;
name|Constants
operator|.
name|resetSessionAttributes
argument_list|(
name|webSession
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setProperty
argument_list|(
name|webSession
argument_list|,
literal|"LastUsed.acadSessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|user
operator|.
name|setAdmin
argument_list|(
name|Roles
operator|.
name|ADMIN_ROLE
operator|.
name|equals
argument_list|(
name|role
operator|.
name|getRole
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|user
operator|.
name|setRole
argument_list|(
name|role
operator|.
name|getRole
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
name|user
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|SESSION_ID_ATTR_NAME
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|user
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|ACAD_YRTERM_ATTR_NAME
argument_list|,
name|session
operator|.
name|getAcademicYearTerm
argument_list|()
argument_list|)
expr_stmt|;
name|user
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|TMTBL_MGR_ID_ATTR_NAME
argument_list|,
name|tm
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|user
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|ACAD_YRTERM_LABEL_ATTR_NAME
argument_list|,
name|session
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Current Role: "
operator|+
name|user
operator|.
name|getRole
argument_list|()
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Acad Session Id: "
operator|+
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|SESSION_ID_ATTR_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Acad Year Term: "
operator|+
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|ACAD_YRTERM_ATTR_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Acad Year Term Label: "
operator|+
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|ACAD_YRTERM_LABEL_ATTR_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Timetable Manager Id: "
operator|+
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|TMTBL_MGR_ID_ATTR_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|Web
operator|.
name|setUser
argument_list|(
name|webSession
argument_list|,
name|user
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

