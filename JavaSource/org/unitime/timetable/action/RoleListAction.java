begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.0 (University Course Timetabling& Student Sectioning Application)  * Copyright (C) 2007, UniTime.org, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|criterion
operator|.
name|Restrictions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|Web
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|RoleListForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ManagerRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Roles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  * MyEclipse Struts  * Creation date: 03-17-2005  *  * XDoclet definition:  * @struts:action path="/selectPrimaryRole" name="roleListForm" input="/selectPrimaryRole.jsp" scope="request" validate="true"  * @struts:action-forward name="success" path="/main.jsp" contextRelative="true"  * @struts:action-forward name="fail" path="/selectPrimaryRole.jsp" contextRelative="true"  */
end_comment

begin_class
specifier|public
class|class
name|RoleListAction
extends|extends
name|Action
block|{
comment|/**      * Method execute      * @param mapping      * @param form      * @param request      * @param response      * @return ActionForward      */
specifier|public
name|ActionForward
name|execute
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
name|HttpSession
name|webSession
init|=
name|request
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|webSession
argument_list|)
decl_stmt|;
name|RoleListForm
name|roleListForm
init|=
operator|(
name|RoleListForm
operator|)
name|form
decl_stmt|;
comment|// Check user is logged in
if|if
condition|(
name|user
operator|==
literal|null
condition|)
return|return
operator|(
name|mapping
operator|.
name|findForward
argument_list|(
literal|"loginRequired"
argument_list|)
operator|)
return|;
comment|// Get manager object
name|TimetableManager
name|tm
init|=
name|TimetableManager
operator|.
name|getManager
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|tm
operator|==
literal|null
condition|)
return|return
operator|(
name|mapping
operator|.
name|findForward
argument_list|(
literal|"loginRequired"
argument_list|)
operator|)
return|;
comment|// Check App Access Level
name|String
name|appAccessLevel
init|=
operator|(
name|String
operator|)
name|webSession
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|CFG_APP_ACCESS_LEVEL
argument_list|)
decl_stmt|;
if|if
condition|(
name|appAccessLevel
operator|==
literal|null
operator|||
name|appAccessLevel
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
operator|(
name|mapping
operator|.
name|findForward
argument_list|(
literal|"loginRequired"
argument_list|)
operator|)
return|;
block|}
comment|// All authorized users can access the application
name|boolean
name|aclSet
init|=
literal|false
decl_stmt|;
name|Set
name|departments
init|=
name|tm
operator|.
name|getDepartments
argument_list|()
decl_stmt|;
if|if
condition|(
name|appAccessLevel
operator|.
name|equalsIgnoreCase
argument_list|(
name|Constants
operator|.
name|APP_ACL_ALL
argument_list|)
condition|)
block|{
name|webSession
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|SESSION_APP_ACCESS_LEVEL
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|aclSet
operator|=
literal|true
expr_stmt|;
block|}
comment|// Get roles
name|Vector
name|roles
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|ManagerRole
name|mr
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|tm
operator|.
name|getManagerRoles
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|mr
operator|=
operator|(
name|ManagerRole
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|roles
operator|.
name|add
argument_list|(
name|mr
operator|.
name|getRole
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|appAccessLevel
operator|.
name|equalsIgnoreCase
argument_list|(
name|Constants
operator|.
name|APP_ACL_ALL
argument_list|)
condition|)
block|{
comment|// If user possesses admin role (may not be default) - allow user
if|if
condition|(
name|mr
operator|.
name|getRole
argument_list|()
operator|.
name|getReference
argument_list|()
operator|.
name|equals
argument_list|(
name|Roles
operator|.
name|ADMIN_ROLE
argument_list|)
condition|)
block|{
name|webSession
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|SESSION_APP_ACCESS_LEVEL
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|aclSet
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|aclSet
condition|)
block|{
name|StringTokenizer
name|strTok
init|=
operator|new
name|StringTokenizer
argument_list|(
name|appAccessLevel
argument_list|,
literal|":"
argument_list|)
decl_stmt|;
name|outerLoop
label|:
while|while
condition|(
name|strTok
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|elem
init|=
name|strTok
operator|.
name|nextToken
argument_list|()
decl_stmt|;
comment|// Check department access
if|if
condition|(
operator|!
name|elem
operator|.
name|equalsIgnoreCase
argument_list|(
name|Constants
operator|.
name|APP_ACL_ADMIN
argument_list|)
operator|&&
name|elem
operator|!=
literal|null
operator|&&
name|elem
operator|.
name|length
argument_list|()
operator|==
literal|4
condition|)
block|{
for|for
control|(
name|Iterator
name|deptIter
init|=
name|departments
operator|.
name|iterator
argument_list|()
init|;
name|deptIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|dept
init|=
operator|(
name|Department
operator|)
name|deptIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|elem
operator|.
name|trim
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|dept
operator|.
name|getDeptCode
argument_list|()
argument_list|)
condition|)
block|{
name|webSession
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|SESSION_APP_ACCESS_LEVEL
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|aclSet
operator|=
literal|true
expr_stmt|;
break|break
name|outerLoop
break|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|aclSet
condition|)
block|{
name|webSession
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|SESSION_APP_ACCESS_LEVEL
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
comment|// User possesses at least one role
if|if
condition|(
name|roles
operator|.
name|size
argument_list|()
operator|>=
literal|1
condition|)
block|{
comment|// Lookup acad sessions for the roles
name|String
name|defaultRole
init|=
name|setUpRoles
argument_list|(
name|request
argument_list|,
name|user
argument_list|)
decl_stmt|;
comment|// If only one role exists - redirect to main menu
name|Vector
name|reqRoles
init|=
operator|(
name|Vector
operator|)
name|request
operator|.
name|getAttribute
argument_list|(
name|Roles
operator|.
name|USER_ROLES_ATTR_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|reqRoles
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|String
name|primaryRole
init|=
operator|(
name|String
operator|)
name|reqRoles
operator|.
name|elementAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|setPrimaryRole
argument_list|(
name|webSession
argument_list|,
name|user
argument_list|,
name|primaryRole
argument_list|)
expr_stmt|;
if|if
condition|(
name|issetUserAcadSession
argument_list|(
name|user
argument_list|)
condition|)
block|{
name|Constants
operator|.
name|resetSessionAttributes
argument_list|(
name|webSession
argument_list|)
expr_stmt|;
name|roleListForm
operator|.
name|setPrimaryRole
argument_list|(
name|user
operator|.
name|getRole
argument_list|()
argument_list|,
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|ACAD_YRTERM_ATTR_NAME
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|mapping
operator|.
name|findForward
argument_list|(
literal|"success"
argument_list|)
operator|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|mapping
operator|.
name|findForward
argument_list|(
literal|"getDefaultAcadSession"
argument_list|)
operator|)
return|;
block|}
block|}
comment|// Check form submission
name|String
name|action
init|=
name|roleListForm
operator|.
name|getAction
argument_list|()
decl_stmt|;
if|if
condition|(
name|action
operator|==
literal|null
operator|||
operator|!
name|action
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|"selectRole"
argument_list|)
condition|)
block|{
comment|// If default role found - redirect to main menu
name|String
name|listAll
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"list"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|listAll
operator|==
literal|null
operator|||
operator|!
name|listAll
operator|.
name|equals
argument_list|(
literal|"Y"
argument_list|)
operator|)
operator|&&
operator|(
name|defaultRole
operator|!=
literal|null
operator|&&
name|defaultRole
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|setPrimaryRole
argument_list|(
name|webSession
argument_list|,
name|user
argument_list|,
name|defaultRole
argument_list|)
expr_stmt|;
if|if
condition|(
name|issetUserAcadSession
argument_list|(
name|user
argument_list|)
condition|)
block|{
name|Constants
operator|.
name|resetSessionAttributes
argument_list|(
name|webSession
argument_list|)
expr_stmt|;
name|roleListForm
operator|.
name|setPrimaryRole
argument_list|(
name|user
operator|.
name|getRole
argument_list|()
argument_list|,
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|ACAD_YRTERM_ATTR_NAME
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|mapping
operator|.
name|findForward
argument_list|(
literal|"success"
argument_list|)
operator|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|mapping
operator|.
name|findForward
argument_list|(
literal|"getDefaultAcadSession"
argument_list|)
operator|)
return|;
block|}
block|}
comment|// Else prompt for selection
name|roleListForm
operator|.
name|setPrimaryRole
argument_list|(
name|user
operator|.
name|getRole
argument_list|()
argument_list|,
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|ACAD_YRTERM_ATTR_NAME
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|mapping
operator|.
name|findForward
argument_list|(
literal|"getUserSelectedRole"
argument_list|)
operator|)
return|;
block|}
comment|// Form submitted
else|else
block|{
comment|// Validate input - user has selected a role
name|ActionMessages
name|errors
init|=
name|roleListForm
operator|.
name|validate
argument_list|(
name|mapping
argument_list|,
name|request
argument_list|)
decl_stmt|;
comment|// Validation error - redirect back to input jsp
if|if
condition|(
name|errors
operator|!=
literal|null
operator|&&
operator|!
name|errors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
return|return
operator|(
operator|new
name|ActionForward
argument_list|(
name|mapping
operator|.
name|getInput
argument_list|()
argument_list|)
operator|)
return|;
block|}
comment|// Validation success - save to user object
name|String
name|primaryRole
init|=
name|roleListForm
operator|.
name|getPrimaryRole
argument_list|()
decl_stmt|;
name|setPrimaryRole
argument_list|(
name|webSession
argument_list|,
name|user
argument_list|,
name|primaryRole
argument_list|)
expr_stmt|;
if|if
condition|(
name|issetUserAcadSession
argument_list|(
name|user
argument_list|)
condition|)
block|{
name|Constants
operator|.
name|resetSessionAttributes
argument_list|(
name|webSession
argument_list|)
expr_stmt|;
return|return
operator|(
name|mapping
operator|.
name|findForward
argument_list|(
literal|"success"
argument_list|)
operator|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|mapping
operator|.
name|findForward
argument_list|(
literal|"getDefaultAcadSession"
argument_list|)
operator|)
return|;
block|}
block|}
block|}
comment|// No roles found - Generate error message
name|ActionMessages
name|errors
init|=
operator|new
name|ActionMessages
argument_list|()
decl_stmt|;
name|errors
operator|.
name|add
argument_list|(
literal|"primaryRole"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.lookup.primaryRole.notFound"
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|mapping
operator|.
name|findForward
argument_list|(
literal|"fail"
argument_list|)
operator|)
return|;
block|}
comment|/**      * Looks up roles for the current user and saves it in the User object      * @param request HttpServletRequest object      * @param user User object      */
specifier|private
name|String
name|setUpRoles
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|User
name|user
parameter_list|)
block|{
name|String
name|defaultRole
init|=
literal|""
decl_stmt|;
name|Vector
name|roleSessions
init|=
operator|(
name|Vector
operator|)
name|user
operator|.
name|getAttribute
argument_list|(
name|Roles
operator|.
name|USER_ROLES_ATTR_NAME
argument_list|)
decl_stmt|;
try|try
block|{
name|roleSessions
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
name|TimetableManager
name|tm
init|=
name|TimetableManager
operator|.
name|getManager
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|ManagerRole
name|mr
init|=
literal|null
decl_stmt|;
name|Iterator
name|iterUserRoles
init|=
name|tm
operator|.
name|getManagerRoles
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|List
name|sList
init|=
name|Session
operator|.
name|getAllSessions
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterUserRoles
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|mr
operator|=
operator|(
name|ManagerRole
operator|)
name|iterUserRoles
operator|.
name|next
argument_list|()
expr_stmt|;
name|String
name|roleRef
init|=
name|mr
operator|.
name|getRole
argument_list|()
operator|.
name|getReference
argument_list|()
decl_stmt|;
if|if
condition|(
name|roleRef
operator|!=
literal|null
operator|&&
name|roleRef
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|mr
operator|.
name|getRole
argument_list|()
operator|.
name|getReference
argument_list|()
operator|.
name|equals
argument_list|(
name|Roles
operator|.
name|ADMIN_ROLE
argument_list|)
condition|)
block|{
comment|// Loop through all sessions and add role to each session
name|Iterator
name|iterS
init|=
name|sList
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterS
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Session
name|sessn
init|=
operator|(
name|Session
operator|)
name|iterS
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|roleRef1
init|=
name|sessn
operator|.
name|getAcademicYear
argument_list|()
operator|+
literal|" "
operator|+
name|sessn
operator|.
name|getAcademicTerm
argument_list|()
operator|+
literal|"-"
operator|+
name|roleRef
decl_stmt|;
name|roleSessions
operator|.
name|addElement
argument_list|(
name|roleRef1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Iterator
name|iterS
init|=
name|tm
operator|.
name|sessionsCanManage
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterS
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Session
name|sessn
init|=
operator|(
name|Session
operator|)
name|iterS
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|roleRef1
init|=
name|sessn
operator|.
name|getAcademicYear
argument_list|()
operator|+
literal|" "
operator|+
name|sessn
operator|.
name|getAcademicTerm
argument_list|()
operator|+
literal|"-"
operator|+
name|roleRef
decl_stmt|;
name|roleSessions
operator|.
name|addElement
argument_list|(
name|roleRef1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
name|roleSessions
operator|.
name|addElement
argument_list|(
name|roleRef
argument_list|)
expr_stmt|;
if|if
condition|(
name|mr
operator|.
name|isPrimary
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
name|defaultRole
operator|=
name|roleRef
expr_stmt|;
block|}
comment|// Add to request scope
name|request
operator|.
name|setAttribute
argument_list|(
name|Roles
operator|.
name|USER_ROLES_ATTR_NAME
argument_list|,
name|roleSessions
argument_list|)
expr_stmt|;
comment|// Save User Attribute to cache roles
name|user
operator|.
name|setAttribute
argument_list|(
name|Roles
operator|.
name|USER_ROLES_ATTR_NAME
argument_list|,
name|roleSessions
argument_list|)
expr_stmt|;
name|Web
operator|.
name|setUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|//if (hibSession!=null&& hibSession.isOpen()) hibSession.close();
block|}
return|return
name|defaultRole
return|;
block|}
comment|/**      * Parse the role token to set the role and academic year      * @param webSession Http Session object of the user      * @param user User object      * @param roleToken Role Token (of the form {acadYearTerm}-{role})      */
specifier|private
name|void
name|setPrimaryRole
parameter_list|(
name|HttpSession
name|webSession
parameter_list|,
name|User
name|user
parameter_list|,
name|String
name|roleToken
parameter_list|)
throws|throws
name|Exception
block|{
name|user
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|TMTBL_MGR_ID_ATTR_NAME
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|user
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|SESSION_ID_ATTR_NAME
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|user
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|ACAD_YRTERM_ATTR_NAME
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|user
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|ACAD_YRTERM_LABEL_ATTR_NAME
argument_list|,
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|roleToken
operator|.
name|equals
argument_list|(
name|Roles
operator|.
name|ADMIN_ROLE
argument_list|)
condition|)
block|{
comment|// Load default Session
name|setUserRoleAcadSession
argument_list|(
name|user
argument_list|,
literal|null
argument_list|,
name|roleToken
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|user
operator|.
name|setAdmin
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|int
name|indx
init|=
name|roleToken
operator|.
name|indexOf
argument_list|(
literal|"-"
argument_list|)
decl_stmt|;
if|if
condition|(
name|indx
operator|<
literal|0
condition|)
name|setUserRoleAcadSession
argument_list|(
name|user
argument_list|,
literal|null
argument_list|,
name|roleToken
argument_list|)
expr_stmt|;
else|else
block|{
name|String
name|acadYearTerm
init|=
name|roleToken
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|indx
argument_list|)
decl_stmt|;
name|String
name|currentRole
init|=
name|roleToken
operator|.
name|substring
argument_list|(
name|indx
operator|+
literal|1
argument_list|)
decl_stmt|;
name|user
operator|.
name|setRole
argument_list|(
name|currentRole
argument_list|)
expr_stmt|;
name|user
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|ACAD_YRTERM_ATTR_NAME
argument_list|,
name|acadYearTerm
argument_list|)
expr_stmt|;
comment|// Load acad session for the Acad Year Term
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
literal|null
decl_stmt|;
try|try
block|{
name|TimetableManager
name|tm
init|=
name|TimetableManager
operator|.
name|getManager
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|tm
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Timetable Manager Record could not be loaded for - "
operator|+
name|user
operator|.
name|getLogin
argument_list|()
argument_list|)
throw|;
block|}
comment|// Get Session Id
name|int
name|indx2
init|=
name|acadYearTerm
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
name|String
name|acadYear
init|=
name|acadYearTerm
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|indx2
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|acadTerm
init|=
name|acadYearTerm
operator|.
name|substring
argument_list|(
name|indx2
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|hibSession
operator|=
operator|new
name|SessionDAO
argument_list|()
operator|.
name|getSession
argument_list|()
expr_stmt|;
name|List
name|sessionList
init|=
name|hibSession
operator|.
name|createCriteria
argument_list|(
name|Session
operator|.
name|class
argument_list|)
operator|.
name|add
argument_list|(
name|Restrictions
operator|.
name|eq
argument_list|(
literal|"academicYear"
argument_list|,
name|acadYear
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|Restrictions
operator|.
name|eq
argument_list|(
literal|"academicTerm"
argument_list|,
name|acadTerm
argument_list|)
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|Iterator
name|iterSessions
init|=
name|sessionList
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|iterSessions
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|setUserRoleAcadSession
argument_list|(
name|user
argument_list|,
operator|(
name|Session
operator|)
name|iterSessions
operator|.
name|next
argument_list|()
argument_list|,
name|currentRole
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Academic Session could not be loaded for - "
operator|+
name|acadYearTerm
argument_list|)
throw|;
block|}
name|user
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|TMTBL_MGR_ID_ATTR_NAME
argument_list|,
name|tm
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|ex
operator|)
throw|;
block|}
block|}
block|}
name|Debug
operator|.
name|debug
argument_list|(
literal|"Current Role: "
operator|+
name|user
operator|.
name|getRole
argument_list|()
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Acad Session Id: "
operator|+
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|SESSION_ID_ATTR_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Acad Year Term: "
operator|+
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|ACAD_YRTERM_ATTR_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Acad Year Term Label: "
operator|+
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|ACAD_YRTERM_LABEL_ATTR_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Timetable Manager Id: "
operator|+
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|TMTBL_MGR_ID_ATTR_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|Web
operator|.
name|setUser
argument_list|(
name|webSession
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the user attributes for Session Id and Acad Year Term      * If Acad Session object is null then default Session is loaded      * @param user User object      * @param acadSession Academic Session Object      * @return true is academic session is set, false otherwise      */
specifier|private
name|boolean
name|setUserRoleAcadSession
parameter_list|(
name|User
name|user
parameter_list|,
name|Session
name|acadSession
parameter_list|,
name|String
name|roleToken
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Set admin
if|if
condition|(
name|roleToken
operator|.
name|equals
argument_list|(
name|Roles
operator|.
name|ADMIN_ROLE
argument_list|)
condition|)
name|user
operator|.
name|setAdmin
argument_list|(
literal|true
argument_list|)
expr_stmt|;
else|else
name|user
operator|.
name|setAdmin
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|TimetableManager
name|tm
init|=
name|TimetableManager
operator|.
name|getManager
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|tm
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Timetable Manager Record could not be loaded for - "
operator|+
name|user
operator|.
name|getLogin
argument_list|()
argument_list|)
throw|;
block|}
name|user
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|TMTBL_MGR_ID_ATTR_NAME
argument_list|,
name|tm
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set Role
name|user
operator|.
name|setRole
argument_list|(
name|roleToken
argument_list|)
expr_stmt|;
comment|// Get Default Acad Session
if|if
condition|(
name|acadSession
operator|==
literal|null
condition|)
name|acadSession
operator|=
name|Session
operator|.
name|defaultSession
argument_list|()
expr_stmt|;
comment|// Default not found - return to prompt user to select one
if|if
condition|(
name|acadSession
operator|==
literal|null
condition|)
return|return
literal|false
return|;
comment|// Set Acad Session details
name|user
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|SESSION_ID_ATTR_NAME
argument_list|,
name|acadSession
operator|.
name|getSessionId
argument_list|()
argument_list|)
expr_stmt|;
name|user
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|ACAD_YRTERM_ATTR_NAME
argument_list|,
name|acadSession
operator|.
name|getAcademicYearTerm
argument_list|()
argument_list|)
expr_stmt|;
name|user
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|ACAD_YRTERM_LABEL_ATTR_NAME
argument_list|,
name|acadSession
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Current Role: "
operator|+
name|user
operator|.
name|getRole
argument_list|()
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Acad Session Id: "
operator|+
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|SESSION_ID_ATTR_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Acad Year Term: "
operator|+
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|ACAD_YRTERM_ATTR_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Acad Year Term Label: "
operator|+
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|ACAD_YRTERM_LABEL_ATTR_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"Timetable Manager Id: "
operator|+
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|TMTBL_MGR_ID_ATTR_NAME
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**      * Check if user acad session is set      * @param user User object      * @return true is acad session is set, false otherwise      */
specifier|private
name|boolean
name|issetUserAcadSession
parameter_list|(
name|User
name|user
parameter_list|)
block|{
name|Object
name|s
init|=
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|SESSION_ID_ATTR_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
operator|||
name|s
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

