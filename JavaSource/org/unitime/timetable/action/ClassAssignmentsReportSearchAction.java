begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.0 (University Course Timetabling& Student Sectioning Application)  * Copyright (C) 2007, UniTime.org, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|CSVFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|actions
operator|.
name|LookupDispatchAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|HibernateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|Web
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|ClassAssignmentsReportForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|ClassListForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|ClassListFormInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|UserData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SubjectAreaDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|WebSolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|LookupTables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|BackTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|CsvClassAssignmentExport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|pdf
operator|.
name|PdfClassAssignmentReportListTableBuilder
import|;
end_import

begin_comment
comment|/**  * @author Stephanie Schluttenhofer  */
end_comment

begin_class
specifier|public
class|class
name|ClassAssignmentsReportSearchAction
extends|extends
name|LookupDispatchAction
block|{
specifier|protected
name|Map
name|getKeyMethodMap
parameter_list|()
block|{
name|Map
name|map
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"button.searchClasses"
argument_list|,
literal|"searchClasses"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"button.cancel"
argument_list|,
literal|"searchClasses"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"button.exportPDF"
argument_list|,
literal|"exportPdf"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"button.exportCSV"
argument_list|,
literal|"exportCsv"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"button.msfExport"
argument_list|,
literal|"msfExport"
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
specifier|private
name|void
name|initializeFilters
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|ClassAssignmentsReportForm
name|classListForm
parameter_list|)
block|{
name|HttpSession
name|httpSession
init|=
name|request
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"1"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"loadFilter"
argument_list|)
argument_list|)
condition|)
block|{
name|ClassAssignmentsReportSearchAction
operator|.
name|setupGeneralFormFilters
argument_list|(
name|httpSession
argument_list|,
name|classListForm
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|UserData
operator|.
name|setPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"ClassAssignments.sortByKeepSubparts"
argument_list|,
name|classListForm
operator|.
name|getSortByKeepSubparts
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setProperty
argument_list|(
name|httpSession
argument_list|,
literal|"ClassAssignments.sortBy"
argument_list|,
name|classListForm
operator|.
name|getSortBy
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setProperty
argument_list|(
name|httpSession
argument_list|,
literal|"ClassAssignments.filterAssignedRoom"
argument_list|,
name|classListForm
operator|.
name|getFilterAssignedRoom
argument_list|()
argument_list|)
expr_stmt|;
comment|//UserData.setProperty(httpSession,"ClassAssignments.filterInstructor", classListForm.getFilterInstructor());
name|UserData
operator|.
name|setProperty
argument_list|(
name|httpSession
argument_list|,
literal|"ClassAssignments.filterManager"
argument_list|,
name|classListForm
operator|.
name|getFilterManager
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setProperty
argument_list|(
name|httpSession
argument_list|,
literal|"ClassAssignments.filterIType"
argument_list|,
name|classListForm
operator|.
name|getFilterIType
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setPropertyInt
argument_list|(
name|httpSession
argument_list|,
literal|"ClassAssignments.filterDayCode"
argument_list|,
name|classListForm
operator|.
name|getFilterDayCode
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setPropertyInt
argument_list|(
name|httpSession
argument_list|,
literal|"ClassAssignments.filterStartSlot"
argument_list|,
name|classListForm
operator|.
name|getFilterStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setPropertyInt
argument_list|(
name|httpSession
argument_list|,
literal|"ClassAssignments.filterLength"
argument_list|,
name|classListForm
operator|.
name|getFilterLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|setupGeneralFormFilters
parameter_list|(
name|HttpSession
name|httpSession
parameter_list|,
name|ClassListFormInterface
name|form
parameter_list|)
block|{
name|form
operator|.
name|setSortBy
argument_list|(
name|UserData
operator|.
name|getProperty
argument_list|(
name|httpSession
argument_list|,
literal|"ClassAssignments.sortBy"
argument_list|,
name|ClassListForm
operator|.
name|sSortByName
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setFilterAssignedRoom
argument_list|(
name|UserData
operator|.
name|getProperty
argument_list|(
name|httpSession
argument_list|,
literal|"ClassAssignments.filterAssignedRoom"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setFilterManager
argument_list|(
name|UserData
operator|.
name|getProperty
argument_list|(
name|httpSession
argument_list|,
literal|"ClassAssignments.filterManager"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setFilterIType
argument_list|(
name|UserData
operator|.
name|getProperty
argument_list|(
name|httpSession
argument_list|,
literal|"ClassAssignments.filterIType"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setFilterDayCode
argument_list|(
name|UserData
operator|.
name|getPropertyInt
argument_list|(
name|httpSession
argument_list|,
literal|"ClassAssignments.filterDayCode"
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setFilterStartSlot
argument_list|(
name|UserData
operator|.
name|getPropertyInt
argument_list|(
name|httpSession
argument_list|,
literal|"ClassAssignments.filterStartSlot"
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setFilterLength
argument_list|(
name|UserData
operator|.
name|getPropertyInt
argument_list|(
name|httpSession
argument_list|,
literal|"ClassAssignments.filterLength"
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setSortByKeepSubparts
argument_list|(
name|UserData
operator|.
name|getPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"ClassAssignments.sortByKeepSubparts"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**  	 * Method execute 	 * @param mapping 	 * @param form 	 * @param request 	 * @param response 	 * @return ActionForward 	 * @throws HibernateException 	 */
specifier|public
name|ActionForward
name|searchClasses
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|(
name|performAction
argument_list|(
name|mapping
argument_list|,
name|form
argument_list|,
name|request
argument_list|,
name|response
argument_list|,
literal|"search"
argument_list|)
operator|)
return|;
block|}
specifier|public
name|ActionForward
name|msfExport
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|(
name|performAction
argument_list|(
name|mapping
argument_list|,
name|form
argument_list|,
name|request
argument_list|,
name|response
argument_list|,
literal|"msfExport"
argument_list|)
operator|)
return|;
block|}
specifier|public
name|ActionForward
name|exportPdf
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|(
name|performAction
argument_list|(
name|mapping
argument_list|,
name|form
argument_list|,
name|request
argument_list|,
name|response
argument_list|,
literal|"exportPdf"
argument_list|)
operator|)
return|;
block|}
specifier|public
name|ActionForward
name|exportCsv
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|(
name|performAction
argument_list|(
name|mapping
argument_list|,
name|form
argument_list|,
name|request
argument_list|,
name|response
argument_list|,
literal|"exportCsv"
argument_list|)
operator|)
return|;
block|}
specifier|public
name|ActionForward
name|performAction
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|String
name|action
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|Web
operator|.
name|isLoggedIn
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Access Denied."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|action
operator|.
name|equals
argument_list|(
literal|"search"
argument_list|)
operator|&&
operator|!
name|action
operator|.
name|equals
argument_list|(
literal|"msfExport"
argument_list|)
operator|&&
operator|!
name|action
operator|.
name|equals
argument_list|(
literal|"exportPdf"
argument_list|)
operator|&&
operator|!
name|action
operator|.
name|equals
argument_list|(
literal|"exportCsv"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unrecognized Action"
argument_list|)
throw|;
block|}
name|HttpSession
name|httpSession
init|=
name|request
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|ClassAssignmentsReportForm
name|classListForm
init|=
operator|(
name|ClassAssignmentsReportForm
operator|)
name|form
decl_stmt|;
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|LookupTables
operator|.
name|setupExternalDepts
argument_list|(
name|request
argument_list|,
operator|(
name|Long
operator|)
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|SESSION_ID_ATTR_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|classListForm
operator|.
name|setIsAdmin
argument_list|(
name|user
operator|.
name|isAdmin
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|initializeFilters
argument_list|(
name|request
argument_list|,
name|classListForm
argument_list|)
expr_stmt|;
name|classListForm
operator|.
name|setCollections
argument_list|(
name|request
argument_list|,
name|ClassSearchAction
operator|.
name|getClasses
argument_list|(
name|classListForm
argument_list|,
name|WebSolver
operator|.
name|getClassAssignmentProxy
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Collection
name|classes
init|=
name|classListForm
operator|.
name|getClasses
argument_list|()
decl_stmt|;
if|if
condition|(
name|classes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ActionMessages
name|errors
init|=
operator|new
name|ActionMessages
argument_list|()
decl_stmt|;
name|errors
operator|.
name|add
argument_list|(
literal|"searchResult"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"No records matching the search criteria were found."
argument_list|)
argument_list|)
expr_stmt|;
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showClassAssignmentsReportSearch"
argument_list|)
return|;
block|}
else|else
block|{
name|StringBuffer
name|subjIds
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|StringBuffer
name|ids
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|StringBuffer
name|names
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|classListForm
operator|.
name|getSubjectAreaIds
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|names
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|subjIds
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|ids
operator|.
name|append
argument_list|(
literal|"&subjectAreaIds="
operator|+
name|classListForm
operator|.
name|getSubjectAreaIds
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|subjIds
operator|.
name|append
argument_list|(
name|classListForm
operator|.
name|getSubjectAreaIds
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|names
operator|.
name|append
argument_list|(
operator|(
operator|(
operator|new
name|SubjectAreaDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|classListForm
operator|.
name|getSubjectAreaIds
argument_list|()
index|[
name|i
index|]
argument_list|)
argument_list|)
operator|)
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|httpSession
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|CRS_ASGN_LST_SUBJ_AREA_IDS_ATTR_NAME
argument_list|,
name|subjIds
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"search"
operator|.
name|equals
argument_list|(
name|action
argument_list|)
condition|)
block|{
name|BackTracker
operator|.
name|markForBack
argument_list|(
name|request
argument_list|,
literal|"classAssignmentsReportSearch.do?doit=Search&loadFilter=1"
operator|+
name|ids
argument_list|,
literal|"Class Assignments ("
operator|+
name|names
operator|+
literal|")"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"exportPdf"
operator|.
name|equals
argument_list|(
name|action
argument_list|)
condition|)
block|{
name|PdfClassAssignmentReportListTableBuilder
name|tb
init|=
operator|new
name|PdfClassAssignmentReportListTableBuilder
argument_list|()
decl_stmt|;
name|File
name|outFile
init|=
name|tb
operator|.
name|pdfTableForClasses
argument_list|(
name|WebSolver
operator|.
name|getClassAssignmentProxy
argument_list|(
name|httpSession
argument_list|)
argument_list|,
name|WebSolver
operator|.
name|getExamSolver
argument_list|(
name|httpSession
argument_list|)
argument_list|,
name|classListForm
argument_list|,
name|user
argument_list|)
decl_stmt|;
comment|//if (outFile!=null) response.sendRedirect("temp/"+outFile.getName());
if|if
condition|(
name|outFile
operator|!=
literal|null
condition|)
name|request
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|REQUEST_OPEN_URL
argument_list|,
literal|"temp/"
operator|+
name|outFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|BackTracker
operator|.
name|markForBack
argument_list|(
name|request
argument_list|,
literal|"classAssignmentsReportSearch.do?doit=Search&loadFilter=1"
operator|+
name|ids
argument_list|,
literal|"Class Assignments ("
operator|+
name|names
operator|+
literal|")"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"exportCsv"
operator|.
name|equals
argument_list|(
name|action
argument_list|)
condition|)
block|{
name|CSVFile
name|csvFile
init|=
name|CsvClassAssignmentExport
operator|.
name|exportCsv
argument_list|(
name|user
argument_list|,
name|classListForm
operator|.
name|getClasses
argument_list|()
argument_list|,
name|WebSolver
operator|.
name|getClassAssignmentProxy
argument_list|(
name|httpSession
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|file
init|=
name|ApplicationProperties
operator|.
name|getTempFile
argument_list|(
literal|"classassign"
argument_list|,
literal|"csv"
argument_list|)
decl_stmt|;
name|csvFile
operator|.
name|save
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|REQUEST_OPEN_URL
argument_list|,
literal|"temp/"
operator|+
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|BackTracker
operator|.
name|markForBack
argument_list|(
name|request
argument_list|,
literal|"classAssignmentsReportSearch.do?doit=Search&loadFilter=1"
operator|+
name|ids
argument_list|,
literal|"Class Assignments ("
operator|+
name|names
operator|+
literal|")"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|/* 	        	response.sendRedirect("temp/"+file.getName()); 	       		response.setContentType("text/csv"); 	       		*/
block|}
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showClassAssignmentsReportList"
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

