begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionForward
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|action
operator|.
name|ActionMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|HibernateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|SessionAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|ClassAssignmentsReportForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|ClassListFormInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|ClassCourseComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SubjectAreaDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ClassAssignmentProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ExamSolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|service
operator|.
name|AssignmentService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|service
operator|.
name|SolverService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|spring
operator|.
name|struts
operator|.
name|SpringAwareLookupDispatchAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|ExportUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|BackTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|CsvClassAssignmentExport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|pdf
operator|.
name|PdfClassAssignmentReportListTableBuilder
import|;
end_import

begin_comment
comment|/**  * @author Stephanie Schluttenhofer, Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"/classAssignmentsReportSearch"
argument_list|)
specifier|public
class|class
name|ClassAssignmentsReportSearchAction
extends|extends
name|SpringAwareLookupDispatchAction
block|{
annotation|@
name|Autowired
name|SessionContext
name|sessionContext
decl_stmt|;
annotation|@
name|Autowired
name|AssignmentService
argument_list|<
name|ClassAssignmentProxy
argument_list|>
name|classAssignmentService
decl_stmt|;
annotation|@
name|Autowired
name|SolverService
argument_list|<
name|ExamSolverProxy
argument_list|>
name|examinationSolverService
decl_stmt|;
specifier|protected
name|Map
name|getKeyMethodMap
parameter_list|()
block|{
name|Map
name|map
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"button.searchClasses"
argument_list|,
literal|"searchClasses"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"button.cancel"
argument_list|,
literal|"searchClasses"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"button.exportPDF"
argument_list|,
literal|"exportPdf"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"button.exportCSV"
argument_list|,
literal|"exportCsv"
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
specifier|private
name|void
name|initializeFilters
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|ClassAssignmentsReportForm
name|classListForm
parameter_list|)
block|{
if|if
condition|(
literal|"1"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"loadFilter"
argument_list|)
argument_list|)
condition|)
block|{
name|ClassAssignmentsReportSearchAction
operator|.
name|setupGeneralFormFilters
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|,
name|classListForm
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"ClassAssignments.sortByKeepSubparts"
argument_list|,
name|classListForm
operator|.
name|getSortByKeepSubparts
argument_list|()
condition|?
literal|"1"
else|:
literal|"0"
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"ClassAssignments.sortBy"
argument_list|,
name|classListForm
operator|.
name|getSortBy
argument_list|()
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"ClassAssignments.filterAssignedRoom"
argument_list|,
name|classListForm
operator|.
name|getFilterAssignedRoom
argument_list|()
argument_list|)
expr_stmt|;
comment|//sessionContext.getUser().setProperty("ClassAssignments.filterInstructor", classListForm.getFilterInstructor());
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"ClassAssignments.filterManager"
argument_list|,
name|classListForm
operator|.
name|getFilterManager
argument_list|()
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"ClassAssignments.filterIType"
argument_list|,
name|classListForm
operator|.
name|getFilterIType
argument_list|()
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"ClassAssignments.filterDayCode"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|classListForm
operator|.
name|getFilterDayCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"ClassAssignments.filterStartSlot"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|classListForm
operator|.
name|getFilterStartSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"ClassAssignments.filterLength"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|classListForm
operator|.
name|getFilterLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"ClassAssignments.showCrossListedClasses"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|classListForm
operator|.
name|getShowCrossListedClasses
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|setupGeneralFormFilters
parameter_list|(
name|UserContext
name|user
parameter_list|,
name|ClassListFormInterface
name|form
parameter_list|)
block|{
name|form
operator|.
name|setSortBy
argument_list|(
name|user
operator|.
name|getProperty
argument_list|(
literal|"ClassAssignments.sortBy"
argument_list|,
name|ClassCourseComparator
operator|.
name|getName
argument_list|(
name|ClassCourseComparator
operator|.
name|SortBy
operator|.
name|NAME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setFilterAssignedRoom
argument_list|(
name|user
operator|.
name|getProperty
argument_list|(
literal|"ClassAssignments.filterAssignedRoom"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setFilterManager
argument_list|(
name|user
operator|.
name|getProperty
argument_list|(
literal|"ClassAssignments.filterManager"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setFilterIType
argument_list|(
name|user
operator|.
name|getProperty
argument_list|(
literal|"ClassAssignments.filterIType"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setFilterDayCode
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|user
operator|.
name|getProperty
argument_list|(
literal|"ClassAssignments.filterDayCode"
argument_list|,
literal|"-1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setFilterStartSlot
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|user
operator|.
name|getProperty
argument_list|(
literal|"ClassAssignments.filterStartSlot"
argument_list|,
literal|"-1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setFilterLength
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|user
operator|.
name|getProperty
argument_list|(
literal|"ClassAssignments.filterLength"
argument_list|,
literal|"-1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setSortByKeepSubparts
argument_list|(
literal|"1"
operator|.
name|equals
argument_list|(
name|user
operator|.
name|getProperty
argument_list|(
literal|"ClassAssignments.sortByKeepSubparts"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|form
operator|.
name|setShowCrossListedClasses
argument_list|(
literal|"1"
operator|.
name|equals
argument_list|(
name|user
operator|.
name|getProperty
argument_list|(
literal|"ClassAssignments.showCrossListedClasses"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**  	 * Method execute 	 * @param mapping 	 * @param form 	 * @param request 	 * @param response 	 * @return ActionForward 	 * @throws HibernateException 	 */
specifier|public
name|ActionForward
name|searchClasses
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|(
name|performAction
argument_list|(
name|mapping
argument_list|,
name|form
argument_list|,
name|request
argument_list|,
name|response
argument_list|,
literal|"search"
argument_list|)
operator|)
return|;
block|}
specifier|public
name|ActionForward
name|exportPdf
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|(
name|performAction
argument_list|(
name|mapping
argument_list|,
name|form
argument_list|,
name|request
argument_list|,
name|response
argument_list|,
literal|"exportPdf"
argument_list|)
operator|)
return|;
block|}
specifier|public
name|ActionForward
name|exportCsv
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|(
name|performAction
argument_list|(
name|mapping
argument_list|,
name|form
argument_list|,
name|request
argument_list|,
name|response
argument_list|,
literal|"exportCsv"
argument_list|)
operator|)
return|;
block|}
specifier|public
name|ActionForward
name|performAction
parameter_list|(
name|ActionMapping
name|mapping
parameter_list|,
name|ActionForm
name|form
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|String
name|action
parameter_list|)
throws|throws
name|Exception
block|{
name|sessionContext
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|ClassAssignments
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|action
operator|.
name|equals
argument_list|(
literal|"search"
argument_list|)
operator|&&
operator|!
name|action
operator|.
name|equals
argument_list|(
literal|"exportPdf"
argument_list|)
operator|&&
operator|!
name|action
operator|.
name|equals
argument_list|(
literal|"exportCsv"
argument_list|)
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unrecognized Action"
argument_list|)
throw|;
name|ClassAssignmentsReportForm
name|classListForm
init|=
operator|(
name|ClassAssignmentsReportForm
operator|)
name|form
decl_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|Department
operator|.
name|EXTERNAL_DEPT_ATTR_NAME
argument_list|,
name|Department
operator|.
name|findAllExternal
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|initializeFilters
argument_list|(
name|request
argument_list|,
name|classListForm
argument_list|)
expr_stmt|;
name|classListForm
operator|.
name|setSubjectAreas
argument_list|(
name|SubjectArea
operator|.
name|getAllSubjectAreas
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|classListForm
operator|.
name|setClasses
argument_list|(
name|ClassSearchAction
operator|.
name|getClasses
argument_list|(
name|classListForm
argument_list|,
name|classAssignmentService
operator|.
name|getAssignment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Collection
name|classes
init|=
name|classListForm
operator|.
name|getClasses
argument_list|()
decl_stmt|;
if|if
condition|(
name|classes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ActionMessages
name|errors
init|=
operator|new
name|ActionMessages
argument_list|()
decl_stmt|;
name|errors
operator|.
name|add
argument_list|(
literal|"searchResult"
argument_list|,
operator|new
name|ActionMessage
argument_list|(
literal|"errors.generic"
argument_list|,
literal|"No records matching the search criteria were found."
argument_list|)
argument_list|)
expr_stmt|;
name|saveErrors
argument_list|(
name|request
argument_list|,
name|errors
argument_list|)
expr_stmt|;
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showClassAssignmentsReportSearch"
argument_list|)
return|;
block|}
else|else
block|{
name|StringBuffer
name|subjIds
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|StringBuffer
name|ids
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|StringBuffer
name|names
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|classListForm
operator|.
name|getSubjectAreaIds
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|names
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|subjIds
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|ids
operator|.
name|append
argument_list|(
literal|"&subjectAreaIds="
operator|+
name|classListForm
operator|.
name|getSubjectAreaIds
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|subjIds
operator|.
name|append
argument_list|(
name|classListForm
operator|.
name|getSubjectAreaIds
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|names
operator|.
name|append
argument_list|(
operator|(
operator|(
operator|new
name|SubjectAreaDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|classListForm
operator|.
name|getSubjectAreaIds
argument_list|()
index|[
name|i
index|]
argument_list|)
argument_list|)
operator|)
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sessionContext
operator|.
name|setAttribute
argument_list|(
name|SessionAttribute
operator|.
name|ClassAssignmentsSubjectAreas
argument_list|,
name|subjIds
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"search"
operator|.
name|equals
argument_list|(
name|action
argument_list|)
condition|)
block|{
name|BackTracker
operator|.
name|markForBack
argument_list|(
name|request
argument_list|,
literal|"classAssignmentsReportSearch.do?doit=Search&loadFilter=1"
operator|+
name|ids
argument_list|,
literal|"Class Assignments ("
operator|+
name|names
operator|+
literal|")"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"exportPdf"
operator|.
name|equals
argument_list|(
name|action
argument_list|)
condition|)
block|{
name|OutputStream
name|out
init|=
name|ExportUtils
operator|.
name|getPdfOutputStream
argument_list|(
name|response
argument_list|,
literal|"classassign"
argument_list|)
decl_stmt|;
operator|new
name|PdfClassAssignmentReportListTableBuilder
argument_list|()
operator|.
name|pdfTableForClasses
argument_list|(
name|out
argument_list|,
name|classAssignmentService
operator|.
name|getAssignment
argument_list|()
argument_list|,
name|examinationSolverService
operator|.
name|getSolver
argument_list|()
argument_list|,
name|classListForm
argument_list|,
name|sessionContext
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
if|else if
condition|(
literal|"exportCsv"
operator|.
name|equals
argument_list|(
name|action
argument_list|)
condition|)
block|{
name|ExportUtils
operator|.
name|exportCSV
argument_list|(
name|CsvClassAssignmentExport
operator|.
name|exportCsv
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|,
name|classListForm
operator|.
name|getClasses
argument_list|()
argument_list|,
name|classAssignmentService
operator|.
name|getAssignment
argument_list|()
argument_list|)
argument_list|,
name|response
argument_list|,
literal|"classassign"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|mapping
operator|.
name|findForward
argument_list|(
literal|"showClassAssignmentsReportList"
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

