begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_interface
specifier|public
interface|interface
name|RoomAvailabilityInterface
block|{
specifier|public
specifier|static
specifier|final
name|String
name|sMidtermExamType
init|=
name|ApplicationProperty
operator|.
name|RoomAvailabilityMidtermExamType
operator|.
name|value
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|sFinalExamType
init|=
name|ApplicationProperty
operator|.
name|RoomAvailabilityFinalExamType
operator|.
name|value
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|sClassType
init|=
name|ApplicationProperty
operator|.
name|RoomAvailabilityClassType
operator|.
name|value
argument_list|()
decl_stmt|;
specifier|public
name|String
name|getTimeStamp
parameter_list|(
name|Date
name|startTime
parameter_list|,
name|Date
name|endTime
parameter_list|,
name|String
name|excludeType
parameter_list|)
function_decl|;
specifier|public
name|Collection
argument_list|<
name|TimeBlock
argument_list|>
name|getRoomAvailability
parameter_list|(
name|Long
name|locationId
parameter_list|,
name|Date
name|startTime
parameter_list|,
name|Date
name|endTime
parameter_list|,
name|String
name|excludeType
parameter_list|)
function_decl|;
specifier|public
name|Collection
argument_list|<
name|TimeBlock
argument_list|>
name|getInstructorAvailability
parameter_list|(
name|Long
name|instructorId
parameter_list|,
name|Date
name|startTime
parameter_list|,
name|Date
name|endTime
parameter_list|,
name|String
name|excludeType
parameter_list|)
function_decl|;
specifier|public
name|void
name|activate
parameter_list|(
name|Session
name|session
parameter_list|,
name|Date
name|startTime
parameter_list|,
name|Date
name|endTime
parameter_list|,
name|String
name|excludeType
parameter_list|,
name|boolean
name|waitForSync
parameter_list|)
function_decl|;
specifier|public
name|void
name|startService
parameter_list|()
function_decl|;
specifier|public
name|void
name|stopService
parameter_list|()
function_decl|;
specifier|public
interface|interface
name|TimeBlock
extends|extends
name|Serializable
block|{
specifier|public
name|Long
name|getEventId
parameter_list|()
function_decl|;
specifier|public
name|String
name|getEventName
parameter_list|()
function_decl|;
specifier|public
name|String
name|getEventType
parameter_list|()
function_decl|;
specifier|public
name|Date
name|getStartTime
parameter_list|()
function_decl|;
specifier|public
name|Date
name|getEndTime
parameter_list|()
function_decl|;
block|}
specifier|public
specifier|static
class|class
name|TimeBlockComparator
implements|implements
name|Comparator
argument_list|<
name|TimeBlock
argument_list|>
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|TimeBlock
name|t1
parameter_list|,
name|TimeBlock
name|t2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|t1
operator|.
name|getEventName
argument_list|()
operator|.
name|compareToIgnoreCase
argument_list|(
name|t2
operator|.
name|getEventName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|t1
operator|.
name|getEventType
argument_list|()
operator|.
name|compareToIgnoreCase
argument_list|(
name|t2
operator|.
name|getEventType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|t1
operator|.
name|getStartTime
argument_list|()
operator|.
name|compareTo
argument_list|(
name|t2
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|t1
operator|.
name|getEndTime
argument_list|()
operator|.
name|compareTo
argument_list|(
name|t2
operator|.
name|getEndTime
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_interface

end_unit

