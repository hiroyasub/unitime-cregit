begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|events
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DistanceMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|type
operator|.
name|StringType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|Query
operator|.
name|TermMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|FilterRpcResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|FilterRpcResponse
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|RoomFilterRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Building
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentRoomFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentStatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|GlobalRoomFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Room
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomDept
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeatureType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomTypeOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TravelTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|RoomDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|RoomFeatureTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|TimetableManagerDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|GwtRpcImplements
argument_list|(
name|RoomFilterRpcRequest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|RoomFilterBackend
extends|extends
name|FilterBoxBackend
argument_list|<
name|RoomFilterRpcRequest
argument_list|>
block|{
specifier|private
name|DistanceMetric
name|iMetrics
decl_stmt|;
specifier|private
specifier|static
name|double
name|EPSILON
init|=
literal|0.000001
decl_stmt|;
specifier|private
specifier|static
name|DecimalFormat
name|sCDF
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0.000000"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|DecimalFormat
name|sNF
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0000"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|GwtMessages
name|MESSAGES
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
enum|enum
name|Size
block|{
name|eq
block|,
name|lt
block|,
name|gt
block|,
name|le
block|,
name|ge
block|}
empty_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|load
parameter_list|(
name|RoomFilterRpcRequest
name|request
parameter_list|,
name|FilterRpcResponse
name|response
parameter_list|,
name|EventContext
name|context
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|departments
init|=
name|request
operator|.
name|getOptions
argument_list|(
literal|"department"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|userDepts
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"user"
argument_list|)
condition|)
block|{
name|userDepts
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|(
name|TimetableManagerDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select d.uniqueId from TimetableManager m inner join m.departments d where "
operator|+
literal|"m.externalUniqueId = :user and d.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"user"
argument_list|,
name|request
operator|.
name|getOption
argument_list|(
literal|"user"
argument_list|)
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|fixRoomFeatureTypes
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|Entity
argument_list|>
name|types
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Entity
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Location
name|location
range|:
name|locations
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|request
operator|.
name|getOptions
argument_list|()
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
literal|"type"
argument_list|,
name|context
argument_list|)
control|)
block|{
name|Entity
name|type
init|=
name|types
operator|.
name|get
argument_list|(
name|location
operator|.
name|getRoomType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|type
operator|=
operator|new
name|Entity
argument_list|(
name|location
operator|.
name|getRoomType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|location
operator|.
name|getRoomType
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|,
name|location
operator|.
name|getRoomType
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|"order"
argument_list|,
name|sNF
operator|.
name|format
argument_list|(
name|location
operator|.
name|getRoomType
argument_list|()
operator|.
name|getOrd
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|types
operator|.
name|put
argument_list|(
name|type
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
name|type
operator|.
name|incCount
argument_list|()
expr_stmt|;
block|}
name|response
operator|.
name|add
argument_list|(
literal|"type"
argument_list|,
operator|new
name|TreeSet
argument_list|<
name|Entity
argument_list|>
argument_list|(
name|types
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|Entity
argument_list|>
argument_list|>
name|featuresByType
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|Entity
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Location
name|location
range|:
name|locations
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|request
operator|.
name|getOptions
argument_list|()
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|context
argument_list|)
control|)
block|{
for|for
control|(
name|RoomFeature
name|rf
range|:
name|location
operator|.
name|getFeatures
argument_list|()
control|)
block|{
if|if
condition|(
name|rf
operator|instanceof
name|GlobalRoomFeature
operator|||
operator|(
name|rf
operator|instanceof
name|DepartmentRoomFeature
operator|&&
name|departments
operator|!=
literal|null
operator|&&
name|departments
operator|.
name|contains
argument_list|(
operator|(
operator|(
name|DepartmentRoomFeature
operator|)
name|rf
operator|)
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
name|showRoomFeature
argument_list|(
name|rf
operator|.
name|getFeatureType
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|type
init|=
operator|(
name|rf
operator|.
name|getFeatureType
argument_list|()
operator|==
literal|null
condition|?
literal|"feature"
else|:
name|rf
operator|.
name|getFeatureType
argument_list|()
operator|.
name|getReference
argument_list|()
operator|)
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|Entity
argument_list|>
name|features
init|=
name|featuresByType
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|features
operator|==
literal|null
condition|)
block|{
name|features
operator|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Entity
argument_list|>
argument_list|()
expr_stmt|;
name|featuresByType
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|features
argument_list|)
expr_stmt|;
block|}
name|Entity
name|feature
init|=
name|features
operator|.
name|get
argument_list|(
name|rf
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|feature
operator|==
literal|null
condition|)
block|{
name|feature
operator|=
operator|new
name|Entity
argument_list|(
name|rf
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|rf
operator|.
name|getAbbv
argument_list|()
argument_list|,
name|rf
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|features
operator|.
name|put
argument_list|(
name|feature
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|feature
argument_list|)
expr_stmt|;
block|}
name|feature
operator|.
name|incCount
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|String
name|type
range|:
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|featuresByType
operator|.
name|keySet
argument_list|()
argument_list|)
control|)
block|{
name|response
operator|.
name|add
argument_list|(
name|type
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'_'
argument_list|)
argument_list|,
operator|new
name|TreeSet
argument_list|<
name|Entity
argument_list|>
argument_list|(
name|featuresByType
operator|.
name|get
argument_list|(
name|type
argument_list|)
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|Long
argument_list|,
name|Entity
argument_list|>
name|groups
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Entity
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Location
name|location
range|:
name|locations
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|request
operator|.
name|getOptions
argument_list|()
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
literal|"group"
argument_list|,
name|context
argument_list|)
control|)
block|{
for|for
control|(
name|RoomGroup
name|rg
range|:
name|location
operator|.
name|getRoomGroups
argument_list|()
control|)
block|{
if|if
condition|(
name|rg
operator|.
name|isGlobal
argument_list|()
operator|||
operator|(
name|departments
operator|!=
literal|null
operator|&&
name|departments
operator|.
name|contains
argument_list|(
name|rg
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|Entity
name|group
init|=
name|groups
operator|.
name|get
argument_list|(
name|rg
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|==
literal|null
condition|)
block|{
name|group
operator|=
operator|new
name|Entity
argument_list|(
name|rg
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|rg
operator|.
name|getAbbv
argument_list|()
argument_list|,
name|rg
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|groups
operator|.
name|put
argument_list|(
name|group
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
name|group
operator|.
name|incCount
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|response
operator|.
name|add
argument_list|(
literal|"group"
argument_list|,
operator|new
name|TreeSet
argument_list|<
name|Entity
argument_list|>
argument_list|(
name|groups
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|Entity
argument_list|>
name|buildings
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Entity
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Location
name|location
range|:
name|locations
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|request
operator|.
name|getOptions
argument_list|()
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
literal|"building"
argument_list|,
name|context
argument_list|)
control|)
block|{
if|if
condition|(
name|location
operator|instanceof
name|Room
condition|)
block|{
name|Room
name|room
init|=
operator|(
name|Room
operator|)
name|location
decl_stmt|;
name|Entity
name|building
init|=
name|buildings
operator|.
name|get
argument_list|(
name|room
operator|.
name|getBuilding
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|building
operator|==
literal|null
condition|)
block|{
name|building
operator|=
operator|new
name|Entity
argument_list|(
name|room
operator|.
name|getBuilding
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|room
operator|.
name|getBuilding
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
argument_list|,
name|room
operator|.
name|getBuilding
argument_list|()
operator|.
name|getAbbrName
argument_list|()
argument_list|)
expr_stmt|;
name|buildings
operator|.
name|put
argument_list|(
name|building
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|building
argument_list|)
expr_stmt|;
block|}
name|building
operator|.
name|incCount
argument_list|()
expr_stmt|;
block|}
block|}
name|response
operator|.
name|add
argument_list|(
literal|"building"
argument_list|,
operator|new
name|TreeSet
argument_list|<
name|Entity
argument_list|>
argument_list|(
name|buildings
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Entity
name|managed
init|=
operator|new
name|Entity
argument_list|(
literal|0l
argument_list|,
literal|"Managed"
argument_list|,
name|MESSAGES
operator|.
name|labelDepartmentManagedRooms
argument_list|()
argument_list|,
literal|"translated-value"
argument_list|,
name|MESSAGES
operator|.
name|attrDepartmentManagedRooms
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|Entity
argument_list|>
name|exams
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|Right
operator|.
name|Examinations
argument_list|)
operator|||
name|context
operator|.
name|hasPermission
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|Right
operator|.
name|ExaminationSchedule
argument_list|)
condition|)
block|{
name|exams
operator|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Entity
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|ExamType
name|type
range|:
name|ExamType
operator|.
name|findAllApplicable
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ExamView
argument_list|,
name|DepartmentStatusType
operator|.
name|Status
operator|.
name|ExamTimetable
argument_list|)
control|)
block|{
name|Entity
name|e
init|=
operator|new
name|Entity
argument_list|(
operator|-
name|type
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|type
operator|.
name|getReference
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|examinationRooms
argument_list|(
name|type
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|exams
operator|.
name|put
argument_list|(
name|type
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|Long
argument_list|,
name|Entity
argument_list|>
name|depts
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Entity
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|eventRooms
init|=
operator|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"flag"
argument_list|)
operator|&&
operator|(
name|request
operator|.
name|getOptions
argument_list|(
literal|"flag"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"event"
argument_list|)
operator|||
name|request
operator|.
name|getOptions
argument_list|(
literal|"flag"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Event"
argument_list|)
operator|)
operator|)
decl_stmt|;
name|boolean
name|allRooms
init|=
operator|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"flag"
argument_list|)
operator|&&
operator|(
name|request
operator|.
name|getOptions
argument_list|(
literal|"flag"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"all"
argument_list|)
operator|||
name|request
operator|.
name|getOptions
argument_list|(
literal|"flag"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"All"
argument_list|)
operator|)
operator|)
decl_stmt|;
name|boolean
name|deptIndep
init|=
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|DepartmentIndependent
argument_list|)
decl_stmt|;
for|for
control|(
name|Location
name|location
range|:
name|locations
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|request
operator|.
name|getOptions
argument_list|()
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
literal|"department"
argument_list|,
name|context
argument_list|)
control|)
block|{
name|Department
name|evtDept
init|=
operator|(
name|location
operator|.
name|getEventDepartment
argument_list|()
operator|!=
literal|null
operator|&&
name|location
operator|.
name|getEventDepartment
argument_list|()
operator|.
name|isAllowEvents
argument_list|()
condition|?
name|location
operator|.
name|getEventDepartment
argument_list|()
else|:
literal|null
operator|)
decl_stmt|;
name|boolean
name|isManaged
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|eventRooms
condition|)
block|{
name|Entity
name|department
init|=
name|depts
operator|.
name|get
argument_list|(
name|location
operator|.
name|getEventDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|department
operator|==
literal|null
condition|)
block|{
name|department
operator|=
operator|new
name|Entity
argument_list|(
name|location
operator|.
name|getEventDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|location
operator|.
name|getEventDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
argument_list|,
name|location
operator|.
name|getEventDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|" - "
operator|+
name|location
operator|.
name|getEventDepartment
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|depts
operator|.
name|put
argument_list|(
name|department
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|department
argument_list|)
expr_stmt|;
block|}
name|department
operator|.
name|incCount
argument_list|()
expr_stmt|;
if|if
condition|(
name|deptIndep
operator|||
operator|(
name|userDepts
operator|!=
literal|null
operator|&&
name|userDepts
operator|.
name|contains
argument_list|(
name|location
operator|.
name|getEventDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|)
condition|)
name|isManaged
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|RoomDept
name|rd
range|:
name|location
operator|.
name|getRoomDepts
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|deptIndep
operator|&&
operator|!
name|allRooms
operator|&&
operator|(
name|userDepts
operator|==
literal|null
operator|||
operator|!
operator|(
name|userDepts
operator|.
name|contains
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|)
operator|)
condition|)
continue|continue;
if|if
condition|(
name|evtDept
operator|!=
literal|null
operator|&&
name|rd
operator|.
name|getDepartment
argument_list|()
operator|.
name|equals
argument_list|(
name|evtDept
argument_list|)
condition|)
name|evtDept
operator|=
literal|null
expr_stmt|;
name|Entity
name|department
init|=
name|depts
operator|.
name|get
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|department
operator|==
literal|null
condition|)
block|{
name|department
operator|=
operator|new
name|Entity
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|rd
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
argument_list|,
name|rd
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|" - "
operator|+
name|rd
operator|.
name|getDepartment
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|rd
operator|.
name|getDepartment
argument_list|()
operator|.
name|isExternalManager
argument_list|()
condition|?
literal|" ("
operator|+
name|rd
operator|.
name|getDepartment
argument_list|()
operator|.
name|getExternalMgrLabel
argument_list|()
operator|+
literal|")"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
name|depts
operator|.
name|put
argument_list|(
name|department
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|department
argument_list|)
expr_stmt|;
block|}
name|department
operator|.
name|incCount
argument_list|()
expr_stmt|;
if|if
condition|(
name|deptIndep
operator|||
operator|(
name|userDepts
operator|!=
literal|null
operator|&&
name|userDepts
operator|.
name|contains
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|)
condition|)
name|isManaged
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|evtDept
operator|!=
literal|null
operator|&&
name|allRooms
condition|)
block|{
name|Entity
name|department
init|=
name|depts
operator|.
name|get
argument_list|(
name|evtDept
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|department
operator|==
literal|null
condition|)
block|{
name|department
operator|=
operator|new
name|Entity
argument_list|(
name|evtDept
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|evtDept
operator|.
name|getDeptCode
argument_list|()
argument_list|,
name|evtDept
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|" - "
operator|+
name|evtDept
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|evtDept
operator|.
name|isExternalManager
argument_list|()
condition|?
literal|" ("
operator|+
name|evtDept
operator|.
name|getExternalMgrLabel
argument_list|()
operator|+
literal|")"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
name|depts
operator|.
name|put
argument_list|(
name|department
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|department
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deptIndep
operator|||
operator|(
name|userDepts
operator|!=
literal|null
operator|&&
name|userDepts
operator|.
name|contains
argument_list|(
name|evtDept
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|)
condition|)
name|isManaged
operator|=
literal|true
expr_stmt|;
name|department
operator|.
name|incCount
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|exams
operator|!=
literal|null
operator|&&
operator|!
name|exams
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|ExamType
name|type
range|:
name|location
operator|.
name|getExamTypes
argument_list|()
control|)
block|{
name|Entity
name|e
init|=
name|exams
operator|.
name|get
argument_list|(
name|type
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
name|e
operator|.
name|incCount
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isManaged
condition|)
name|managed
operator|.
name|incCount
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|managed
operator|.
name|getCount
argument_list|()
operator|>
literal|0
condition|)
name|response
operator|.
name|add
argument_list|(
literal|"department"
argument_list|,
name|managed
argument_list|)
expr_stmt|;
if|if
condition|(
name|exams
operator|!=
literal|null
operator|&&
operator|!
name|exams
operator|.
name|isEmpty
argument_list|()
condition|)
for|for
control|(
name|Entity
name|e
range|:
operator|new
name|TreeSet
argument_list|<
name|Entity
argument_list|>
argument_list|(
name|exams
operator|.
name|values
argument_list|()
argument_list|)
control|)
if|if
condition|(
name|e
operator|.
name|getCount
argument_list|()
operator|>
literal|0
condition|)
name|response
operator|.
name|add
argument_list|(
literal|"department"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|response
operator|.
name|add
argument_list|(
literal|"department"
argument_list|,
operator|new
name|TreeSet
argument_list|<
name|Entity
argument_list|>
argument_list|(
name|depts
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|fixRoomFeatureTypes
parameter_list|(
name|RoomFilterRpcRequest
name|request
parameter_list|)
block|{
for|for
control|(
name|RoomFeatureType
name|type
range|:
name|RoomFeatureTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|()
control|)
if|if
condition|(
name|showRoomFeature
argument_list|(
name|type
argument_list|)
operator|&&
name|request
operator|.
name|hasOptions
argument_list|(
name|type
operator|.
name|getReference
argument_list|()
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'_'
argument_list|)
argument_list|)
condition|)
for|for
control|(
name|String
name|option
range|:
name|request
operator|.
name|getOptions
argument_list|(
name|type
operator|.
name|getReference
argument_list|()
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'_'
argument_list|)
argument_list|)
control|)
name|request
operator|.
name|addOption
argument_list|(
literal|"feature"
argument_list|,
name|option
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Location
argument_list|>
name|locations
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|RoomFilterRpcRequest
name|filter
parameter_list|,
name|int
name|limit
parameter_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|Double
argument_list|>
name|room2distance
parameter_list|,
name|EventContext
name|context
parameter_list|)
block|{
name|fixRoomFeatureTypes
argument_list|(
name|filter
argument_list|)
expr_stmt|;
return|return
name|locations
argument_list|(
name|sessionId
argument_list|,
name|filter
operator|.
name|getOptions
argument_list|()
argument_list|,
operator|new
name|Query
argument_list|(
name|filter
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|,
name|limit
argument_list|,
name|room2distance
argument_list|,
literal|null
argument_list|,
name|context
argument_list|)
return|;
block|}
specifier|protected
name|List
argument_list|<
name|Location
argument_list|>
name|locations
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|options
parameter_list|,
name|Query
name|query
parameter_list|,
name|int
name|limit
parameter_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|Double
argument_list|>
name|room2distance
parameter_list|,
name|String
name|ignoreCommand
parameter_list|,
name|EventContext
name|context
parameter_list|)
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|RoomDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|RoomQuery
name|rq
init|=
name|getQuery
argument_list|(
name|sessionId
argument_list|,
name|options
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Query
name|q
init|=
name|rq
operator|.
name|select
argument_list|()
operator|.
name|exclude
argument_list|(
name|ignoreCommand
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Location
argument_list|>
name|locations
init|=
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|building
init|=
operator|(
name|options
operator|==
literal|null
operator|||
literal|"building"
operator|.
name|equals
argument_list|(
name|ignoreCommand
argument_list|)
condition|?
literal|null
else|:
name|options
operator|.
name|get
argument_list|(
literal|"building"
argument_list|)
operator|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|size
init|=
operator|(
name|options
operator|==
literal|null
operator|||
literal|"size"
operator|.
name|equals
argument_list|(
name|ignoreCommand
argument_list|)
condition|?
literal|null
else|:
name|options
operator|.
name|get
argument_list|(
literal|"size"
argument_list|)
operator|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|flag
init|=
operator|(
name|options
operator|==
literal|null
operator|||
literal|"flag"
operator|.
name|equals
argument_list|(
name|ignoreCommand
argument_list|)
condition|?
literal|null
else|:
name|options
operator|.
name|get
argument_list|(
literal|"flag"
argument_list|)
operator|)
decl_stmt|;
name|boolean
name|nearby
init|=
operator|(
name|flag
operator|!=
literal|null
operator|&&
operator|(
name|flag
operator|.
name|contains
argument_list|(
literal|"nearby"
argument_list|)
operator|||
name|flag
operator|.
name|contains
argument_list|(
literal|"Nearby"
argument_list|)
operator|)
operator|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|featureTypes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RoomFeatureType
name|ft
range|:
name|RoomFeatureTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|()
control|)
if|if
condition|(
name|showRoomFeature
argument_list|(
name|ft
argument_list|)
condition|)
name|featureTypes
operator|.
name|add
argument_list|(
name|ft
operator|.
name|getReference
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'_'
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Location
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|Location
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Location
name|location
range|:
name|locations
control|)
block|{
if|if
condition|(
name|query
operator|!=
literal|null
operator|&&
operator|!
name|query
operator|.
name|match
argument_list|(
operator|new
name|LocationMatcher
argument_list|(
name|location
argument_list|,
name|featureTypes
argument_list|)
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|nearby
operator|&&
name|building
operator|!=
literal|null
operator|&&
operator|!
name|building
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
operator|!
operator|(
name|location
operator|instanceof
name|Room
operator|)
operator|||
operator|!
name|building
operator|.
name|contains
argument_list|(
operator|(
operator|(
name|Room
operator|)
name|location
operator|)
operator|.
name|getBuilding
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
operator|)
condition|)
continue|continue;
name|ret
operator|.
name|add
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Map
argument_list|<
name|Long
argument_list|,
name|Double
argument_list|>
name|distances
init|=
operator|(
name|room2distance
operator|==
literal|null
condition|?
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Double
argument_list|>
argument_list|()
else|:
name|room2distance
operator|)
decl_stmt|;
if|if
condition|(
name|nearby
operator|&&
name|building
operator|!=
literal|null
operator|&&
operator|!
name|building
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|limit
operator|<=
literal|0
operator|||
name|ret
operator|.
name|size
argument_list|()
operator|<
name|limit
operator|)
condition|)
block|{
name|double
name|allowedDistance
init|=
name|ApplicationProperty
operator|.
name|EventNearByDistance
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Coordinates
argument_list|>
name|coord
init|=
operator|new
name|HashSet
argument_list|<
name|Coordinates
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Location
name|location
range|:
name|ret
control|)
name|coord
operator|.
name|add
argument_list|(
operator|new
name|Coordinates
argument_list|(
name|location
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|coord
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Building
name|b
range|:
operator|(
name|List
argument_list|<
name|Building
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select b from Building b where"
operator|+
literal|" b.session.uniqueId = :sessionId and b.abbreviation in :building"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setParameterList
argument_list|(
literal|"building"
argument_list|,
name|building
argument_list|,
operator|new
name|StringType
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|coord
operator|.
name|add
argument_list|(
operator|new
name|Coordinates
argument_list|(
operator|-
name|b
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|b
operator|.
name|getCoordinateX
argument_list|()
argument_list|,
name|b
operator|.
name|getCoordinateY
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|coord
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Location
name|location
range|:
name|locations
control|)
block|{
if|if
condition|(
name|building
operator|!=
literal|null
operator|&&
operator|!
name|building
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|location
operator|instanceof
name|Room
operator|)
operator|&&
name|building
operator|.
name|contains
argument_list|(
operator|(
operator|(
name|Room
operator|)
name|location
operator|)
operator|.
name|getBuilding
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|query
operator|!=
literal|null
operator|&&
operator|!
name|query
operator|.
name|match
argument_list|(
operator|new
name|LocationMatcher
argument_list|(
name|location
argument_list|,
name|featureTypes
argument_list|)
argument_list|)
condition|)
continue|continue;
name|Coordinates
name|c
init|=
operator|new
name|Coordinates
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|Double
name|distance
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Coordinates
name|x
range|:
name|coord
control|)
block|{
name|double
name|d
init|=
name|c
operator|.
name|distance
argument_list|(
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
name|distance
operator|==
literal|null
operator|||
name|distance
operator|>
name|d
condition|)
name|distance
operator|=
name|d
expr_stmt|;
block|}
if|if
condition|(
name|distance
operator|!=
literal|null
operator|&&
name|distance
operator|<=
name|allowedDistance
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|location
argument_list|)
expr_stmt|;
if|if
condition|(
name|distances
operator|!=
literal|null
condition|)
name|distances
operator|.
name|put
argument_list|(
name|location
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|distance
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|final
name|boolean
name|sortBySize
init|=
operator|(
name|size
operator|!=
literal|null
operator|&&
operator|!
name|size
operator|.
name|isEmpty
argument_list|()
operator|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|ret
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Location
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Location
name|l1
parameter_list|,
name|Location
name|l2
parameter_list|)
block|{
name|Double
name|d1
init|=
name|distances
operator|.
name|get
argument_list|(
name|l1
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|Double
name|d2
init|=
name|distances
operator|.
name|get
argument_list|(
name|l2
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|d1
operator|==
literal|null
operator|&&
name|d2
operator|!=
literal|null
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|d1
operator|!=
literal|null
operator|&&
name|d2
operator|==
literal|null
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|d1
operator|!=
literal|null
condition|)
block|{
name|int
name|cmp
init|=
operator|new
name|Long
argument_list|(
name|Math
operator|.
name|round
argument_list|(
name|d1
argument_list|)
argument_list|)
operator|.
name|compareTo
argument_list|(
name|Math
operator|.
name|round
argument_list|(
name|d2
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
if|if
condition|(
name|sortBySize
condition|)
block|{
name|int
name|cmp
init|=
operator|new
name|Integer
argument_list|(
name|l1
operator|.
name|getCapacity
argument_list|()
operator|!=
literal|null
condition|?
name|l1
operator|.
name|getCapacity
argument_list|()
else|:
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|compareTo
argument_list|(
name|l2
operator|.
name|getCapacity
argument_list|()
operator|!=
literal|null
condition|?
name|l2
operator|.
name|getCapacity
argument_list|()
else|:
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
return|return
name|l1
operator|.
name|getLabel
argument_list|()
operator|.
name|compareTo
argument_list|(
name|l2
operator|.
name|getLabel
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
operator|(
name|limit
operator|<=
literal|0
operator|||
name|ret
operator|.
name|size
argument_list|()
operator|<
name|limit
condition|?
name|ret
else|:
name|ret
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|limit
argument_list|)
operator|)
return|;
block|}
specifier|private
name|String
name|suggestionQuery
parameter_list|(
name|String
name|query
parameter_list|)
block|{
if|if
condition|(
name|query
operator|==
literal|null
operator|||
name|query
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|query
return|;
if|if
condition|(
operator|!
name|query
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
operator|&&
operator|!
name|query
operator|.
name|contains
argument_list|(
literal|"\""
argument_list|)
condition|)
return|return
literal|"starts:\""
operator|+
name|query
operator|+
literal|"\""
return|;
return|return
name|query
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|suggestions
parameter_list|(
name|RoomFilterRpcRequest
name|request
parameter_list|,
name|FilterRpcResponse
name|response
parameter_list|,
name|EventContext
name|context
parameter_list|)
block|{
name|fixRoomFeatureTypes
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|Double
argument_list|>
name|distances
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Double
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Location
name|location
range|:
name|locations
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|request
operator|.
name|getOptions
argument_list|()
argument_list|,
operator|new
name|Query
argument_list|(
name|suggestionQuery
argument_list|(
name|request
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|20
argument_list|,
name|distances
argument_list|,
literal|null
argument_list|,
name|context
argument_list|)
control|)
block|{
name|String
name|hint
init|=
name|location
operator|.
name|getRoomTypeLabel
argument_list|()
operator|+
literal|", "
operator|+
name|location
operator|.
name|getCapacity
argument_list|()
operator|+
literal|" seats"
decl_stmt|;
name|Double
name|dist
init|=
name|distances
operator|.
name|get
argument_list|(
name|location
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dist
operator|!=
literal|null
condition|)
name|hint
operator|+=
literal|", "
operator|+
name|Math
operator|.
name|round
argument_list|(
name|dist
argument_list|)
operator|+
literal|" m"
expr_stmt|;
name|response
operator|.
name|addSuggestion
argument_list|(
name|location
operator|.
name|getLabel
argument_list|()
argument_list|,
name|location
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|"("
operator|+
name|hint
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|enumarate
parameter_list|(
name|RoomFilterRpcRequest
name|request
parameter_list|,
name|FilterRpcResponse
name|response
parameter_list|,
name|EventContext
name|context
parameter_list|)
block|{
name|fixRoomFeatureTypes
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|Double
argument_list|>
name|distances
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Double
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Location
name|location
range|:
name|locations
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|request
operator|.
name|getOptions
argument_list|()
argument_list|,
operator|new
name|Query
argument_list|(
name|request
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
name|distances
argument_list|,
literal|null
argument_list|,
name|context
argument_list|)
control|)
block|{
name|Double
name|dist
init|=
name|distances
operator|.
name|get
argument_list|(
name|location
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|response
operator|.
name|addResult
argument_list|(
operator|new
name|Entity
argument_list|(
name|location
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|location
operator|.
name|getDisplayName
argument_list|()
argument_list|,
name|location
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|"permId"
argument_list|,
name|location
operator|.
name|getPermanentId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"type"
argument_list|,
name|location
operator|.
name|getRoomType
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|"capacity"
argument_list|,
name|location
operator|.
name|getCapacity
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"distance"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|dist
operator|==
literal|null
condition|?
literal|0l
else|:
name|Math
operator|.
name|round
argument_list|(
name|dist
argument_list|)
argument_list|)
argument_list|,
literal|"overbook"
argument_list|,
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|EventLocationOverbook
argument_list|)
condition|?
literal|"1"
else|:
literal|"0"
argument_list|,
literal|"breakTime"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|location
operator|.
name|getEffectiveBreakTime
argument_list|()
argument_list|)
argument_list|,
literal|"message"
argument_list|,
name|location
operator|.
name|getEventMessage
argument_list|()
argument_list|,
literal|"ignoreRoomCheck"
argument_list|,
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
condition|?
literal|"1"
else|:
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|DistanceMetric
name|getDistanceMetric
parameter_list|()
block|{
if|if
condition|(
name|iMetrics
operator|==
literal|null
condition|)
block|{
name|DataProperties
name|config
init|=
operator|new
name|DataProperties
argument_list|()
decl_stmt|;
name|config
operator|.
name|setProperty
argument_list|(
literal|"Distances.Ellipsoid"
argument_list|,
name|ApplicationProperty
operator|.
name|DistanceEllipsoid
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setProperty
argument_list|(
literal|"Distances.Speed"
argument_list|,
name|ApplicationProperty
operator|.
name|EventDistanceSpeed
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|iMetrics
operator|=
operator|new
name|DistanceMetric
argument_list|(
operator|new
name|DataProperties
argument_list|(
name|config
argument_list|)
argument_list|)
expr_stmt|;
name|TravelTime
operator|.
name|populateTravelTimes
argument_list|(
name|iMetrics
argument_list|)
expr_stmt|;
block|}
return|return
name|iMetrics
return|;
block|}
specifier|public
class|class
name|Coordinates
block|{
name|Long
name|iId
decl_stmt|;
name|Double
name|iX
decl_stmt|,
name|iY
decl_stmt|;
specifier|public
name|Coordinates
parameter_list|(
name|Long
name|id
parameter_list|,
name|Double
name|x
parameter_list|,
name|Double
name|y
parameter_list|)
block|{
name|iId
operator|=
name|id
expr_stmt|;
name|iX
operator|=
name|x
expr_stmt|;
name|iY
operator|=
name|y
expr_stmt|;
block|}
specifier|public
name|Coordinates
parameter_list|(
name|Location
name|location
parameter_list|)
block|{
name|iId
operator|=
name|location
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|iX
operator|=
name|location
operator|.
name|getCoordinateX
argument_list|()
expr_stmt|;
name|iY
operator|=
name|location
operator|.
name|getCoordinateY
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Long
name|id
parameter_list|()
block|{
return|return
name|iId
return|;
block|}
specifier|public
name|Double
name|x
parameter_list|()
block|{
return|return
name|iX
return|;
block|}
specifier|public
name|Double
name|y
parameter_list|()
block|{
return|return
name|iY
return|;
block|}
specifier|public
name|boolean
name|hasCoordinates
parameter_list|()
block|{
return|return
name|iX
operator|!=
literal|null
operator|&&
name|iY
operator|!=
literal|null
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|Coordinates
operator|)
condition|)
return|return
literal|false
return|;
name|Coordinates
name|c
init|=
operator|(
name|Coordinates
operator|)
name|o
decl_stmt|;
if|if
condition|(
operator|!
name|hasCoordinates
argument_list|()
condition|)
return|return
operator|!
name|c
operator|.
name|hasCoordinates
argument_list|()
return|;
if|else if
condition|(
operator|!
name|c
operator|.
name|hasCoordinates
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
name|Math
operator|.
name|abs
argument_list|(
name|c
operator|.
name|x
argument_list|()
operator|-
name|x
argument_list|()
argument_list|)
operator|<
name|EPSILON
operator|&&
name|Math
operator|.
name|abs
argument_list|(
name|c
operator|.
name|y
argument_list|()
operator|-
name|y
argument_list|()
argument_list|)
operator|<
name|EPSILON
return|;
block|}
specifier|public
name|double
name|distance
parameter_list|(
name|Coordinates
name|c
parameter_list|)
block|{
return|return
operator|(
name|hasCoordinates
argument_list|()
operator|&&
name|c
operator|.
name|hasCoordinates
argument_list|()
condition|?
name|getDistanceMetric
argument_list|()
operator|.
name|getDistanceInMeters
argument_list|(
name|id
argument_list|()
argument_list|,
name|x
argument_list|()
argument_list|,
name|y
argument_list|()
argument_list|,
name|c
operator|.
name|id
argument_list|()
argument_list|,
name|c
operator|.
name|x
argument_list|()
argument_list|,
name|c
operator|.
name|y
argument_list|()
argument_list|)
else|:
name|Double
operator|.
name|POSITIVE_INFINITY
operator|)
return|;
block|}
specifier|public
name|double
name|distance
parameter_list|(
name|Location
name|location
parameter_list|)
block|{
return|return
name|distance
argument_list|(
operator|new
name|Coordinates
argument_list|(
name|location
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|(
name|hasCoordinates
argument_list|()
condition|?
name|sCDF
operator|.
name|format
argument_list|(
name|iX
argument_list|)
operator|+
literal|","
operator|+
name|sCDF
operator|.
name|format
argument_list|(
name|iY
argument_list|)
else|:
literal|""
operator|)
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|toString
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
specifier|public
class|class
name|LocationMatcher
implements|implements
name|TermMatcher
block|{
specifier|private
name|Location
name|iLocation
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|iFeatureTypes
init|=
literal|null
decl_stmt|;
name|LocationMatcher
parameter_list|(
name|Location
name|location
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|featureTypes
parameter_list|)
block|{
name|iLocation
operator|=
name|location
expr_stmt|;
name|iFeatureTypes
operator|=
name|featureTypes
expr_stmt|;
block|}
specifier|public
name|Location
name|getLocation
parameter_list|()
block|{
return|return
name|iLocation
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|String
name|attr
parameter_list|,
name|String
name|term
parameter_list|)
block|{
if|if
condition|(
name|attr
operator|==
literal|null
operator|||
name|attr
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|term
operator|.
name|isEmpty
argument_list|()
operator|||
name|has
argument_list|(
name|getLocation
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|,
name|term
argument_list|)
operator|||
name|has
argument_list|(
name|getLocation
argument_list|()
operator|.
name|getDisplayName
argument_list|()
argument_list|,
name|term
argument_list|)
return|;
block|}
if|else if
condition|(
literal|"feature"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
operator|(
name|iFeatureTypes
operator|!=
literal|null
operator|&&
name|iFeatureTypes
operator|.
name|contains
argument_list|(
name|attr
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|)
condition|)
block|{
for|for
control|(
name|RoomFeature
name|rf
range|:
name|getLocation
argument_list|()
operator|.
name|getFeatures
argument_list|()
control|)
if|if
condition|(
name|rf
operator|instanceof
name|GlobalRoomFeature
operator|&&
operator|(
name|eq
argument_list|(
name|rf
operator|.
name|getAbbv
argument_list|()
argument_list|,
name|term
argument_list|)
operator|||
name|has
argument_list|(
name|rf
operator|.
name|getLabel
argument_list|()
argument_list|,
name|term
argument_list|)
operator|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
if|else if
condition|(
literal|"group"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
for|for
control|(
name|RoomGroup
name|rg
range|:
name|getLocation
argument_list|()
operator|.
name|getRoomGroups
argument_list|()
control|)
if|if
condition|(
name|rg
operator|.
name|isGlobal
argument_list|()
operator|&&
operator|(
name|eq
argument_list|(
name|rg
operator|.
name|getAbbv
argument_list|()
argument_list|,
name|term
argument_list|)
operator|||
name|has
argument_list|(
name|rg
operator|.
name|getName
argument_list|()
argument_list|,
name|term
argument_list|)
operator|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
if|else if
condition|(
literal|"type"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
name|eq
argument_list|(
name|getLocation
argument_list|()
operator|.
name|getRoomType
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|,
name|term
argument_list|)
operator|||
name|has
argument_list|(
name|getLocation
argument_list|()
operator|.
name|getRoomType
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|,
name|term
argument_list|)
return|;
block|}
if|else if
condition|(
literal|"room"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
name|has
argument_list|(
name|getLocation
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|,
name|term
argument_list|)
operator|||
name|has
argument_list|(
name|getLocation
argument_list|()
operator|.
name|getDisplayName
argument_list|()
argument_list|,
name|term
argument_list|)
return|;
block|}
if|else if
condition|(
literal|"starts"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
name|getLocation
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|term
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|||
operator|(
name|getLocation
argument_list|()
operator|instanceof
name|Room
operator|&&
operator|(
operator|(
name|Room
operator|)
name|getLocation
argument_list|()
operator|)
operator|.
name|getRoomNumber
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|term
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|)
return|;
block|}
if|else if
condition|(
literal|"contains"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
name|getLocation
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|contains
argument_list|(
name|term
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|||
operator|(
name|getLocation
argument_list|()
operator|instanceof
name|Room
operator|&&
operator|(
operator|(
name|Room
operator|)
name|getLocation
argument_list|()
operator|)
operator|.
name|getRoomNumber
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|contains
argument_list|(
name|term
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|)
return|;
block|}
if|else if
condition|(
literal|"building"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"bldg"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
name|getLocation
argument_list|()
operator|instanceof
name|Room
condition|)
block|{
name|Building
name|building
init|=
operator|(
operator|(
name|Room
operator|)
name|getLocation
argument_list|()
operator|)
operator|.
name|getBuilding
argument_list|()
decl_stmt|;
return|return
name|eq
argument_list|(
name|building
operator|.
name|getAbbreviation
argument_list|()
argument_list|,
name|term
argument_list|)
operator|||
name|has
argument_list|(
name|building
operator|.
name|getName
argument_list|()
argument_list|,
name|term
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
if|else if
condition|(
literal|"size"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
name|int
name|min
init|=
literal|0
decl_stmt|,
name|max
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|Size
name|prefix
init|=
name|Size
operator|.
name|eq
decl_stmt|;
name|String
name|number
init|=
name|term
decl_stmt|;
if|if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|"<="
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Size
operator|.
name|le
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|">="
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Size
operator|.
name|ge
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|"<"
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Size
operator|.
name|lt
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|">"
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Size
operator|.
name|gt
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|"="
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Size
operator|.
name|eq
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|int
name|a
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|number
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|prefix
condition|)
block|{
case|case
name|eq
case|:
name|min
operator|=
name|max
operator|=
name|a
expr_stmt|;
break|break;
comment|// = a
case|case
name|le
case|:
name|max
operator|=
name|a
expr_stmt|;
break|break;
comment|//<= a
case|case
name|ge
case|:
name|min
operator|=
name|a
expr_stmt|;
break|break;
comment|//>= a
case|case
name|lt
case|:
name|max
operator|=
name|a
operator|-
literal|1
expr_stmt|;
break|break;
comment|//< a
case|case
name|gt
case|:
name|min
operator|=
name|a
operator|+
literal|1
expr_stmt|;
break|break;
comment|//> a
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|term
operator|.
name|contains
argument_list|(
literal|".."
argument_list|)
condition|)
block|{
try|try
block|{
name|String
name|a
init|=
name|term
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|term
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|b
init|=
name|term
operator|.
name|substring
argument_list|(
name|term
operator|.
name|indexOf
argument_list|(
literal|".."
argument_list|)
operator|+
literal|2
argument_list|)
decl_stmt|;
name|min
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|max
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
block|}
return|return
name|min
operator|<=
name|getLocation
argument_list|()
operator|.
name|getCapacity
argument_list|()
operator|&&
name|getLocation
argument_list|()
operator|.
name|getCapacity
argument_list|()
operator|<=
name|max
return|;
block|}
if|else if
condition|(
literal|"flag"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|&&
literal|"event"
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
condition|)
block|{
return|return
name|getLocation
argument_list|()
operator|.
name|getEventDepartment
argument_list|()
operator|!=
literal|null
operator|&&
name|getLocation
argument_list|()
operator|.
name|getEventDepartment
argument_list|()
operator|.
name|isAllowEvents
argument_list|()
operator|&&
name|getLocation
argument_list|()
operator|.
name|getEffectiveEventStatus
argument_list|()
operator|!=
name|RoomTypeOption
operator|.
name|Status
operator|.
name|NoEventManagement
return|;
block|}
if|else if
condition|(
literal|"department"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"dept"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"event"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"control"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"event"
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
condition|)
return|return
name|getLocation
argument_list|()
operator|.
name|getEventDepartment
argument_list|()
operator|!=
literal|null
operator|&&
name|getLocation
argument_list|()
operator|.
name|getEventDepartment
argument_list|()
operator|.
name|isAllowEvents
argument_list|()
operator|&&
name|getLocation
argument_list|()
operator|.
name|getEffectiveEventStatus
argument_list|()
operator|!=
name|RoomTypeOption
operator|.
name|Status
operator|.
name|NoEventManagement
return|;
if|else if
condition|(
literal|"managed"
operator|.
name|equals
argument_list|(
name|term
argument_list|)
condition|)
return|return
literal|false
return|;
comment|// not supported
else|else
block|{
if|if
condition|(
operator|!
literal|"control"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
if|if
condition|(
name|getLocation
argument_list|()
operator|.
name|getEventDepartment
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
name|eq
argument_list|(
name|getLocation
argument_list|()
operator|.
name|getEventDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
argument_list|,
name|term
argument_list|)
operator|||
name|eq
argument_list|(
name|getLocation
argument_list|()
operator|.
name|getEventDepartment
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
argument_list|,
name|term
argument_list|)
operator|||
name|has
argument_list|(
name|getLocation
argument_list|()
operator|.
name|getEventDepartment
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|term
argument_list|)
operator|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
literal|"event"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
for|for
control|(
name|RoomDept
name|rd
range|:
name|getLocation
argument_list|()
operator|.
name|getRoomDepts
argument_list|()
control|)
block|{
if|if
condition|(
literal|"control"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|&&
operator|!
name|rd
operator|.
name|isControl
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|eq
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
argument_list|,
name|term
argument_list|)
operator|||
name|eq
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
argument_list|,
name|term
argument_list|)
operator|||
name|has
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|term
argument_list|)
operator|||
operator|(
name|rd
operator|.
name|getDepartment
argument_list|()
operator|.
name|isExternalManager
argument_list|()
operator|&&
operator|(
name|eq
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
operator|.
name|getExternalMgrAbbv
argument_list|()
argument_list|,
name|term
argument_list|)
operator|||
name|has
argument_list|(
name|rd
operator|.
name|getDepartment
argument_list|()
operator|.
name|getExternalMgrLabel
argument_list|()
argument_list|,
name|term
argument_list|)
operator|)
operator|)
condition|)
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
literal|"control"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
for|for
control|(
name|ExamType
name|t
range|:
name|getLocation
argument_list|()
operator|.
name|getExamTypes
argument_list|()
control|)
block|{
if|if
condition|(
name|eq
argument_list|(
name|t
operator|.
name|getReference
argument_list|()
argument_list|,
name|term
argument_list|)
operator|||
name|has
argument_list|(
name|t
operator|.
name|getLabel
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
specifier|private
name|boolean
name|eq
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|term
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|name
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|has
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|term
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|eq
argument_list|(
name|name
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
for|for
control|(
name|String
name|t
range|:
name|name
operator|.
name|split
argument_list|(
literal|" |,"
argument_list|)
control|)
if|if
condition|(
name|t
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
block|}
specifier|public
specifier|static
name|String
name|toCommand
parameter_list|(
name|String
name|label
parameter_list|)
block|{
name|String
name|ret
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|word
range|:
name|label
operator|.
name|toLowerCase
argument_list|()
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
control|)
block|{
if|if
condition|(
name|ret
operator|.
name|isEmpty
argument_list|()
operator|||
name|word
operator|.
name|length
argument_list|()
operator|<=
literal|1
condition|)
name|ret
operator|+=
name|word
expr_stmt|;
else|else
name|ret
operator|+=
name|word
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
operator|+
name|word
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|protected
name|boolean
name|checkEventStatus
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|protected
name|boolean
name|showRoomFeature
parameter_list|(
name|RoomFeatureType
name|type
parameter_list|)
block|{
return|return
name|type
operator|==
literal|null
operator|||
name|type
operator|.
name|isShowInEventManagement
argument_list|()
return|;
block|}
specifier|public
name|RoomQuery
name|getQuery
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|options
parameter_list|,
name|EventContext
name|context
parameter_list|)
block|{
name|RoomQuery
name|query
init|=
operator|new
name|RoomQuery
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|types
init|=
operator|(
name|options
operator|==
literal|null
condition|?
literal|null
else|:
name|options
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|types
operator|!=
literal|null
operator|&&
operator|!
name|types
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|type
init|=
literal|""
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|types
control|)
block|{
name|type
operator|+=
operator|(
name|type
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|":Xt"
operator|+
name|id
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"type"
argument_list|,
literal|"Xt"
operator|+
name|id
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
name|query
operator|.
name|addWhere
argument_list|(
literal|"type"
argument_list|,
literal|"l.roomType.label in ("
operator|+
name|type
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|departments
init|=
operator|(
name|options
operator|==
literal|null
condition|?
literal|null
else|:
name|options
operator|.
name|get
argument_list|(
literal|"department"
argument_list|)
operator|)
decl_stmt|;
name|String
name|department
init|=
operator|(
name|departments
operator|==
literal|null
operator|||
name|departments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|departments
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|features
init|=
operator|(
name|options
operator|==
literal|null
condition|?
literal|null
else|:
name|options
operator|.
name|get
argument_list|(
literal|"feature"
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|features
operator|!=
literal|null
operator|&&
operator|!
name|features
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|from
init|=
literal|""
decl_stmt|;
name|String
name|where
init|=
literal|""
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|features
control|)
block|{
if|if
condition|(
name|department
operator|==
literal|null
condition|)
block|{
name|from
operator|+=
operator|(
name|from
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|" "
operator|)
operator|+
literal|"inner join l.features f"
operator|+
name|id
expr_stmt|;
name|where
operator|+=
operator|(
name|where
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|" and "
operator|)
operator|+
literal|" f"
operator|+
name|id
operator|+
literal|".label = :Xf"
operator|+
name|id
operator|+
literal|" and f"
operator|+
name|id
operator|+
literal|".class = GlobalRoomFeature"
expr_stmt|;
block|}
else|else
block|{
name|from
operator|+=
operator|(
name|from
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|" "
operator|)
operator|+
literal|"inner join l.features f"
operator|+
name|id
operator|+
literal|" left outer join f"
operator|+
name|id
operator|+
literal|".department fd"
operator|+
name|id
expr_stmt|;
name|where
operator|+=
operator|(
name|where
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|" and "
operator|)
operator|+
literal|" f"
operator|+
name|id
operator|+
literal|".label = :Xf"
operator|+
name|id
operator|+
literal|" and (f"
operator|+
name|id
operator|+
literal|".class = GlobalRoomFeature or fd"
operator|+
name|id
operator|+
literal|".deptCode = :Xfd)"
expr_stmt|;
block|}
name|query
operator|.
name|addParameter
argument_list|(
literal|"feature"
argument_list|,
literal|"Xf"
operator|+
name|id
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|department
operator|!=
literal|null
condition|)
name|query
operator|.
name|addParameter
argument_list|(
literal|"feature"
argument_list|,
literal|"Xfd"
argument_list|,
name|department
argument_list|)
expr_stmt|;
name|query
operator|.
name|addFrom
argument_list|(
literal|"feature"
argument_list|,
name|from
argument_list|)
expr_stmt|;
name|query
operator|.
name|addWhere
argument_list|(
literal|"feature"
argument_list|,
name|where
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|groups
init|=
operator|(
name|options
operator|==
literal|null
condition|?
literal|null
else|:
name|options
operator|.
name|get
argument_list|(
literal|"group"
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|groups
operator|!=
literal|null
operator|&&
operator|!
name|groups
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|group
init|=
literal|""
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|groups
control|)
block|{
name|group
operator|+=
operator|(
name|group
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|", "
operator|)
operator|+
literal|":Xg"
operator|+
name|id
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"group"
argument_list|,
literal|"Xg"
operator|+
name|id
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
name|query
operator|.
name|addFrom
argument_list|(
literal|"group"
argument_list|,
literal|"inner join l.roomGroups g left outer join g.department gd"
argument_list|)
expr_stmt|;
if|if
condition|(
name|department
operator|==
literal|null
condition|)
name|query
operator|.
name|addWhere
argument_list|(
literal|"group"
argument_list|,
literal|"g.name in ("
operator|+
name|group
operator|+
literal|") and g.global = true"
argument_list|)
expr_stmt|;
else|else
block|{
name|query
operator|.
name|addWhere
argument_list|(
literal|"group"
argument_list|,
literal|"g.name in ("
operator|+
name|group
operator|+
literal|") and (g.global = true or gd.deptCode = :Xgd)"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"group"
argument_list|,
literal|"Xgd"
argument_list|,
name|department
argument_list|)
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|size
init|=
operator|(
name|options
operator|==
literal|null
condition|?
literal|null
else|:
name|options
operator|.
name|get
argument_list|(
literal|"size"
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|size
operator|!=
literal|null
operator|&&
operator|!
name|size
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|term
init|=
name|size
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|min
init|=
literal|0
decl_stmt|,
name|max
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|Size
name|prefix
init|=
name|Size
operator|.
name|eq
decl_stmt|;
name|String
name|number
init|=
name|term
decl_stmt|;
if|if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|"<="
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Size
operator|.
name|le
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|">="
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Size
operator|.
name|ge
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|"<"
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Size
operator|.
name|lt
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|">"
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Size
operator|.
name|gt
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|number
operator|.
name|startsWith
argument_list|(
literal|"="
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|Size
operator|.
name|eq
expr_stmt|;
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|int
name|a
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|number
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|prefix
condition|)
block|{
case|case
name|eq
case|:
name|min
operator|=
name|max
operator|=
name|a
expr_stmt|;
break|break;
comment|// = a
case|case
name|le
case|:
name|max
operator|=
name|a
expr_stmt|;
break|break;
comment|//<= a
case|case
name|ge
case|:
name|min
operator|=
name|a
expr_stmt|;
break|break;
comment|//>= a
case|case
name|lt
case|:
name|max
operator|=
name|a
operator|-
literal|1
expr_stmt|;
break|break;
comment|//< a
case|case
name|gt
case|:
name|min
operator|=
name|a
operator|+
literal|1
expr_stmt|;
break|break;
comment|//> a
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|term
operator|.
name|contains
argument_list|(
literal|".."
argument_list|)
condition|)
block|{
try|try
block|{
name|String
name|a
init|=
name|term
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|term
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|b
init|=
name|term
operator|.
name|substring
argument_list|(
name|term
operator|.
name|indexOf
argument_list|(
literal|".."
argument_list|)
operator|+
literal|2
argument_list|)
decl_stmt|;
name|min
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|max
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
block|}
if|if
condition|(
name|min
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|max
operator|<
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|query
operator|.
name|addWhere
argument_list|(
literal|"size"
argument_list|,
literal|"l.capacity>= :Xmin and l.capacity<= :Xmax"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"size"
argument_list|,
literal|"Xmin"
argument_list|,
name|min
argument_list|)
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"size"
argument_list|,
literal|"Xmax"
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|.
name|addWhere
argument_list|(
literal|"size"
argument_list|,
literal|"l.capacity>= :Xmin"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"size"
argument_list|,
literal|"Xmin"
argument_list|,
name|min
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|max
operator|<
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|query
operator|.
name|addWhere
argument_list|(
literal|"size"
argument_list|,
literal|"l.capacity<= :Xmax"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"size"
argument_list|,
literal|"Xmax"
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|flags
init|=
operator|(
name|options
operator|==
literal|null
condition|?
literal|null
else|:
name|options
operator|.
name|get
argument_list|(
literal|"flag"
argument_list|)
operator|)
decl_stmt|;
name|boolean
name|nearby
init|=
operator|(
name|flags
operator|!=
literal|null
operator|&&
operator|(
name|flags
operator|.
name|contains
argument_list|(
literal|"nearby"
argument_list|)
operator|||
name|flags
operator|.
name|contains
argument_list|(
literal|"Nearby"
argument_list|)
operator|)
operator|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|buildings
init|=
operator|(
name|options
operator|==
literal|null
condition|?
literal|null
else|:
name|options
operator|.
name|get
argument_list|(
literal|"building"
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|buildings
operator|!=
literal|null
operator|&&
operator|!
name|buildings
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|nearby
condition|)
block|{
name|String
name|building
init|=
literal|""
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|buildings
control|)
block|{
name|building
operator|+=
operator|(
name|building
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|", "
operator|)
operator|+
literal|":Xb"
operator|+
name|id
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"building"
argument_list|,
literal|"Xb"
operator|+
name|id
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
name|query
operator|.
name|addWhere
argument_list|(
literal|"building"
argument_list|,
literal|"l.building.abbreviation in ("
operator|+
name|building
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
name|boolean
name|eventRooms
init|=
operator|(
name|flags
operator|!=
literal|null
operator|&&
operator|(
name|flags
operator|.
name|contains
argument_list|(
literal|"event"
argument_list|)
operator|||
name|flags
operator|.
name|contains
argument_list|(
literal|"Event"
argument_list|)
operator|)
operator|)
decl_stmt|;
name|boolean
name|allRooms
init|=
operator|(
name|flags
operator|!=
literal|null
operator|&&
operator|(
name|flags
operator|.
name|contains
argument_list|(
literal|"all"
argument_list|)
operator|||
name|flags
operator|.
name|contains
argument_list|(
literal|"All"
argument_list|)
operator|)
operator|)
decl_stmt|;
if|if
condition|(
name|department
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|users
init|=
operator|(
name|options
operator|==
literal|null
condition|?
literal|null
else|:
name|options
operator|.
name|get
argument_list|(
literal|"user"
argument_list|)
operator|)
decl_stmt|;
name|String
name|user
init|=
operator|(
name|users
operator|==
literal|null
operator|||
name|users
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|users
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
literal|"Managed"
operator|.
name|equalsIgnoreCase
argument_list|(
name|department
argument_list|)
operator|&&
name|user
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|DepartmentIndependent
argument_list|)
condition|)
block|{
if|if
condition|(
name|eventRooms
condition|)
name|query
operator|.
name|addWhere
argument_list|(
literal|"department"
argument_list|,
literal|"l.eventDepartment is not null"
argument_list|)
expr_stmt|;
if|else if
condition|(
operator|!
name|allRooms
condition|)
name|query
operator|.
name|addFrom
argument_list|(
literal|"department"
argument_list|,
literal|"inner join l.roomDepts rd"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|eventRooms
condition|)
block|{
name|query
operator|.
name|addFrom
argument_list|(
literal|"department"
argument_list|,
literal|"inner join l.eventDepartment.timetableManagers m"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addWhere
argument_list|(
literal|"department"
argument_list|,
literal|"m.externalUniqueId = :Xu"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|allRooms
condition|)
block|{
name|query
operator|.
name|addFrom
argument_list|(
literal|"department"
argument_list|,
literal|"left outer join l.eventDepartment.timetableManagers m1 left outer join l.roomDepts rd left outer join rd.department.timetableManagers m2"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addWhere
argument_list|(
literal|"department"
argument_list|,
literal|"m1.externalUniqueId = :Xu or m2.externalUniqueId = :Xu"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|.
name|addFrom
argument_list|(
literal|"department"
argument_list|,
literal|"inner join l.roomDepts rd inner join rd.department.timetableManagers m"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addWhere
argument_list|(
literal|"department"
argument_list|,
literal|"m.externalUniqueId = :Xu"
argument_list|)
expr_stmt|;
block|}
name|query
operator|.
name|addParameter
argument_list|(
literal|"department"
argument_list|,
literal|"Xu"
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|eventRooms
condition|)
block|{
name|query
operator|.
name|addFrom
argument_list|(
literal|"department"
argument_list|,
literal|"left outer join l.examTypes x"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addWhere
argument_list|(
literal|"department"
argument_list|,
literal|"l.eventDepartment.deptCode = :Xd or x.reference = :Xd"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|allRooms
condition|)
block|{
name|query
operator|.
name|addFrom
argument_list|(
literal|"department"
argument_list|,
literal|"left outer join l.examTypes x left outer join l.roomDepts rd left outer join rd.department rdd left outer join l.eventDepartment ed"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addWhere
argument_list|(
literal|"department"
argument_list|,
literal|"rdd.deptCode = :Xd or ed.deptCode = :Xd or x.reference = :Xd"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|.
name|addFrom
argument_list|(
literal|"department"
argument_list|,
literal|"left outer join l.examTypes x left outer join l.roomDepts rd"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addWhere
argument_list|(
literal|"department"
argument_list|,
literal|"rd.department.deptCode = :Xd or x.reference = :Xd"
argument_list|)
expr_stmt|;
block|}
name|query
operator|.
name|addParameter
argument_list|(
literal|"department"
argument_list|,
literal|"Xd"
argument_list|,
name|department
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|eventRooms
condition|)
block|{
if|if
condition|(
name|checkEventStatus
argument_list|()
condition|)
block|{
name|query
operator|.
name|addFrom
argument_list|(
literal|"flag"
argument_list|,
literal|"RoomTypeOption o"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addWhere
argument_list|(
literal|"flag"
argument_list|,
literal|"l.eventDepartment.allowEvents = true and ((l.eventStatus is null and o.status != 0 and o.roomType = l.roomType and o.department = l.eventDepartment) or l.eventStatus != 0)"
argument_list|)
expr_stmt|;
block|}
else|else
name|query
operator|.
name|addWhere
argument_list|(
literal|"flag"
argument_list|,
literal|"l.eventDepartment is not null"
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|ids
init|=
operator|(
name|options
operator|==
literal|null
condition|?
literal|null
else|:
name|options
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|ids
operator|!=
literal|null
operator|&&
operator|!
name|ids
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|list
init|=
literal|""
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|ids
control|)
block|{
name|list
operator|+=
operator|(
name|list
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|", "
operator|)
operator|+
literal|":Xi"
operator|+
name|id
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"id"
argument_list|,
literal|"Xi"
operator|+
name|id
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
name|query
operator|.
name|addWhere
argument_list|(
literal|"id"
argument_list|,
literal|"l.uniqueId in ("
operator|+
name|list
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
return|return
name|query
return|;
block|}
specifier|public
specifier|static
class|class
name|RoomQuery
block|{
specifier|private
name|Long
name|iSessionId
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|iFrom
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|iWhere
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|iParams
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|RoomQuery
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
name|iSessionId
operator|=
name|sessionId
expr_stmt|;
block|}
specifier|public
name|void
name|addFrom
parameter_list|(
name|String
name|option
parameter_list|,
name|String
name|from
parameter_list|)
block|{
name|iFrom
operator|.
name|put
argument_list|(
name|option
argument_list|,
name|from
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addWhere
parameter_list|(
name|String
name|option
parameter_list|,
name|String
name|where
parameter_list|)
block|{
name|iWhere
operator|.
name|put
argument_list|(
name|option
argument_list|,
name|where
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addParameter
parameter_list|(
name|String
name|option
parameter_list|,
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
name|iParams
operator|.
name|get
argument_list|(
name|option
argument_list|)
decl_stmt|;
if|if
condition|(
name|params
operator|==
literal|null
condition|)
block|{
name|params
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|iParams
operator|.
name|put
argument_list|(
name|option
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|params
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getFrom
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|excludeOption
parameter_list|)
block|{
name|String
name|from
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|iFrom
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|excludeOption
operator|!=
literal|null
operator|&&
name|excludeOption
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
continue|continue;
name|from
operator|+=
operator|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"inner join"
argument_list|)
operator|||
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"left outer join"
argument_list|)
operator|||
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"left join fetch"
argument_list|)
condition|?
literal|" "
else|:
literal|", "
operator|)
operator|+
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
return|return
name|from
return|;
block|}
specifier|public
name|String
name|getWhere
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|excludeOption
parameter_list|)
block|{
name|String
name|where
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|iWhere
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|excludeOption
operator|!=
literal|null
operator|&&
name|excludeOption
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
continue|continue;
name|where
operator|+=
literal|" and ("
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|+
literal|")"
expr_stmt|;
block|}
return|return
name|where
return|;
block|}
specifier|public
name|org
operator|.
name|hibernate
operator|.
name|Query
name|setParams
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Query
name|query
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|excludeOption
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|entry
range|:
name|iParams
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|excludeOption
operator|!=
literal|null
operator|&&
name|excludeOption
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
continue|continue;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|param
range|:
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Integer
condition|)
block|{
name|query
operator|.
name|setInteger
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Integer
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Long
condition|)
block|{
name|query
operator|.
name|setLong
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Long
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|String
condition|)
block|{
name|query
operator|.
name|setString
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Boolean
condition|)
block|{
name|query
operator|.
name|setBoolean
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Boolean
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Date
condition|)
block|{
name|query
operator|.
name|setDate
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Date
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|.
name|setString
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
name|param
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|query
return|;
block|}
specifier|public
name|RoomInstance
name|select
parameter_list|(
name|String
name|select
parameter_list|)
block|{
return|return
operator|new
name|RoomInstance
argument_list|(
name|select
argument_list|)
return|;
block|}
specifier|public
name|RoomInstance
name|select
parameter_list|()
block|{
return|return
name|select
argument_list|(
literal|null
argument_list|)
return|;
block|}
specifier|public
class|class
name|RoomInstance
block|{
specifier|private
name|String
name|iSelect
init|=
literal|null
decl_stmt|,
name|iFrom
init|=
literal|null
decl_stmt|,
name|iWhere
init|=
literal|null
decl_stmt|,
name|iOrderBy
init|=
literal|null
decl_stmt|,
name|iGroupBy
init|=
literal|null
decl_stmt|,
name|iType
init|=
literal|"Location"
decl_stmt|;
specifier|private
name|Integer
name|iLimit
init|=
literal|null
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|iExclude
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|iParams
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|RoomInstance
parameter_list|(
name|String
name|select
parameter_list|)
block|{
name|iSelect
operator|=
name|select
expr_stmt|;
block|}
specifier|public
name|RoomInstance
name|from
parameter_list|(
name|String
name|from
parameter_list|)
block|{
name|iFrom
operator|=
name|from
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|RoomInstance
name|where
parameter_list|(
name|String
name|where
parameter_list|)
block|{
if|if
condition|(
name|iWhere
operator|==
literal|null
condition|)
name|iWhere
operator|=
literal|"("
operator|+
name|where
operator|+
literal|")"
expr_stmt|;
else|else
name|iWhere
operator|+=
literal|" and ("
operator|+
name|where
operator|+
literal|")"
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|RoomInstance
name|type
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|iType
operator|=
name|type
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|RoomInstance
name|order
parameter_list|(
name|String
name|orderBy
parameter_list|)
block|{
name|iOrderBy
operator|=
name|orderBy
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|RoomInstance
name|group
parameter_list|(
name|String
name|groupBy
parameter_list|)
block|{
name|iGroupBy
operator|=
name|groupBy
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|RoomInstance
name|exclude
parameter_list|(
name|String
name|excludeOption
parameter_list|)
block|{
if|if
condition|(
name|excludeOption
operator|!=
literal|null
operator|&&
operator|!
name|excludeOption
operator|.
name|isEmpty
argument_list|()
condition|)
name|iExclude
operator|.
name|add
argument_list|(
name|excludeOption
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|RoomInstance
name|set
parameter_list|(
name|String
name|param
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|iParams
operator|.
name|put
argument_list|(
name|param
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|RoomInstance
name|limit
parameter_list|(
name|Integer
name|limit
parameter_list|)
block|{
name|iLimit
operator|=
operator|(
name|limit
operator|==
literal|null
operator|||
name|limit
operator|<=
literal|0
condition|?
literal|null
else|:
name|limit
operator|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|String
name|query
parameter_list|()
block|{
return|return
literal|"select "
operator|+
operator|(
name|iSelect
operator|==
literal|null
condition|?
literal|"distinct l"
else|:
name|iSelect
operator|)
operator|+
literal|" from "
operator|+
name|iType
operator|+
literal|" l "
operator|+
operator|(
name|iFrom
operator|==
literal|null
condition|?
literal|""
else|:
name|iFrom
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"inner join"
argument_list|)
condition|?
literal|" "
operator|+
name|iFrom
else|:
literal|", "
operator|+
name|iFrom
operator|)
operator|+
name|getFrom
argument_list|(
name|iExclude
argument_list|)
operator|+
literal|" where l.session.uniqueId = :sessionId "
operator|+
name|getWhere
argument_list|(
name|iExclude
argument_list|)
operator|+
operator|(
name|iWhere
operator|==
literal|null
condition|?
literal|""
else|:
literal|" and ("
operator|+
name|iWhere
operator|+
literal|")"
operator|)
operator|+
operator|(
name|iGroupBy
operator|==
literal|null
condition|?
literal|""
else|:
literal|" group by "
operator|+
name|iGroupBy
operator|)
operator|+
operator|(
name|iOrderBy
operator|==
literal|null
condition|?
literal|""
else|:
literal|" order by "
operator|+
name|iOrderBy
operator|)
return|;
block|}
specifier|public
name|org
operator|.
name|hibernate
operator|.
name|Query
name|query
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
comment|// System.out.println("Q: " + query());
name|org
operator|.
name|hibernate
operator|.
name|Query
name|query
init|=
name|setParams
argument_list|(
name|hibSession
operator|.
name|createQuery
argument_list|(
name|query
argument_list|()
argument_list|)
argument_list|,
name|iExclude
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|param
range|:
name|iParams
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Integer
condition|)
block|{
name|query
operator|.
name|setInteger
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Integer
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Long
condition|)
block|{
name|query
operator|.
name|setLong
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Long
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|String
condition|)
block|{
name|query
operator|.
name|setString
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Boolean
condition|)
block|{
name|query
operator|.
name|setBoolean
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Boolean
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Date
condition|)
block|{
name|query
operator|.
name|setDate
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Date
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|.
name|setString
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
name|param
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iLimit
operator|!=
literal|null
condition|)
name|query
operator|.
name|setMaxResults
argument_list|(
name|iLimit
argument_list|)
expr_stmt|;
return|return
name|query
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

