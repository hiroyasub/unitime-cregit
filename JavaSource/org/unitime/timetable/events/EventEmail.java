begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|events
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|MessagingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|internet
operator|.
name|InternetAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|fileupload
operator|.
name|FileItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|type
operator|.
name|LongType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|CalendarVTimeZoneGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Email
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|UserProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|events
operator|.
name|EventsExportEventsToICal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|UploadServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|ApprovalStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|ApproveEventRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|ContactInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|EventServiceProviderInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|MeetingInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|MultiMeetingInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|SaveOrApproveEventRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|SaveOrApproveEventRpcRequest
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|SaveOrApproveEventRpcResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Meeting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|NameFormat
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|ICalVersion
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|ICalendar
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|io
operator|.
name|text
operator|.
name|ICalWriter
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|property
operator|.
name|CalendarScale
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|property
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|property
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|freemarker
operator|.
name|template
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|freemarker
operator|.
name|template
operator|.
name|Template
import|;
end_import

begin_import
import|import
name|freemarker
operator|.
name|template
operator|.
name|TemplateException
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|EventEmail
block|{
specifier|protected
specifier|static
name|GwtMessages
name|MESSAGES
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|GwtConstants
name|CONSTANTS
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|Map
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|sMessageId
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Logger
name|sLog
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|EventEmail
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|SaveOrApproveEventRpcRequest
name|iRequest
init|=
literal|null
decl_stmt|;
specifier|private
name|SaveOrApproveEventRpcResponse
name|iResponse
init|=
literal|null
decl_stmt|;
specifier|private
name|DataSource
name|iAttachment
init|=
literal|null
decl_stmt|;
specifier|private
name|InternetAddress
name|iReplyTo
init|=
literal|null
decl_stmt|;
specifier|public
name|EventEmail
parameter_list|(
name|SaveOrApproveEventRpcRequest
name|request
parameter_list|,
name|SaveOrApproveEventRpcResponse
name|response
parameter_list|,
name|DataSource
name|attachment
parameter_list|,
name|InternetAddress
name|replyTo
parameter_list|)
block|{
name|iRequest
operator|=
name|request
expr_stmt|;
name|iResponse
operator|=
name|response
expr_stmt|;
name|iAttachment
operator|=
name|attachment
expr_stmt|;
name|iReplyTo
operator|=
name|replyTo
expr_stmt|;
block|}
specifier|public
name|EventEmail
parameter_list|(
name|SaveOrApproveEventRpcRequest
name|request
parameter_list|,
name|SaveOrApproveEventRpcResponse
name|response
parameter_list|)
block|{
name|this
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|EventEmail
parameter_list|()
block|{
block|}
specifier|public
name|SaveOrApproveEventRpcRequest
name|request
parameter_list|()
block|{
return|return
name|iRequest
return|;
block|}
specifier|public
name|SaveOrApproveEventRpcResponse
name|response
parameter_list|()
block|{
return|return
name|iResponse
return|;
block|}
specifier|public
name|DataSource
name|attachment
parameter_list|()
block|{
return|return
name|iAttachment
return|;
block|}
specifier|public
name|InternetAddress
name|replyTo
parameter_list|()
block|{
return|return
name|iReplyTo
return|;
block|}
specifier|public
name|void
name|send
parameter_list|(
name|SessionContext
name|context
parameter_list|)
throws|throws
name|UnsupportedEncodingException
throws|,
name|MessagingException
block|{
try|try
block|{
if|if
condition|(
operator|!
name|request
argument_list|()
operator|.
name|isEmailConfirmation
argument_list|()
condition|)
return|return;
if|if
condition|(
name|ApplicationProperty
operator|.
name|EmailConfirmationEvents
operator|.
name|isFalse
argument_list|()
condition|)
block|{
name|response
argument_list|()
operator|.
name|info
argument_list|(
name|MESSAGES
operator|.
name|emailDisabled
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|Email
name|email
init|=
name|Email
operator|.
name|createEmail
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
argument_list|()
operator|.
name|hasContact
argument_list|()
operator|&&
name|event
argument_list|()
operator|.
name|getContact
argument_list|()
operator|.
name|getEmail
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|event
argument_list|()
operator|.
name|getContact
argument_list|()
operator|.
name|getEmail
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|email
operator|.
name|addRecipient
argument_list|(
name|event
argument_list|()
operator|.
name|getContact
argument_list|()
operator|.
name|getEmail
argument_list|()
argument_list|,
name|event
argument_list|()
operator|.
name|getContact
argument_list|()
operator|.
name|getName
argument_list|(
name|MESSAGES
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
argument_list|()
operator|.
name|hasAdditionalContacts
argument_list|()
condition|)
block|{
for|for
control|(
name|ContactInterface
name|contact
range|:
name|event
argument_list|()
operator|.
name|getAdditionalContacts
argument_list|()
control|)
block|{
if|if
condition|(
name|contact
operator|.
name|getEmail
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|contact
operator|.
name|getEmail
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|email
operator|.
name|addRecipient
argument_list|(
name|contact
operator|.
name|getEmail
argument_list|()
argument_list|,
name|contact
operator|.
name|getName
argument_list|(
name|MESSAGES
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|event
argument_list|()
operator|.
name|hasSponsor
argument_list|()
operator|&&
name|event
argument_list|()
operator|.
name|getSponsor
argument_list|()
operator|.
name|hasEmail
argument_list|()
condition|)
name|email
operator|.
name|addRecipientCC
argument_list|(
name|event
argument_list|()
operator|.
name|getSponsor
argument_list|()
operator|.
name|getEmail
argument_list|()
argument_list|,
name|event
argument_list|()
operator|.
name|getSponsor
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
argument_list|()
operator|.
name|hasEmail
argument_list|()
condition|)
block|{
name|String
name|suffix
init|=
name|ApplicationProperty
operator|.
name|EmailDefaultAddressSuffix
operator|.
name|value
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|address
range|:
name|event
argument_list|()
operator|.
name|getEmail
argument_list|()
operator|.
name|split
argument_list|(
literal|"[\n,]"
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|address
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|suffix
operator|!=
literal|null
operator|&&
name|address
operator|.
name|indexOf
argument_list|(
literal|'@'
argument_list|)
operator|<
literal|0
condition|)
name|email
operator|.
name|addRecipientCC
argument_list|(
name|address
operator|.
name|trim
argument_list|()
operator|+
name|suffix
argument_list|,
literal|null
argument_list|)
expr_stmt|;
else|else
name|email
operator|.
name|addRecipientCC
argument_list|(
name|address
operator|.
name|trim
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|event
argument_list|()
operator|.
name|hasInstructors
argument_list|()
operator|&&
name|ApplicationProperty
operator|.
name|EmailConfirmationEventInstructors
operator|.
name|isTrue
argument_list|()
condition|)
block|{
for|for
control|(
name|ContactInterface
name|contact
range|:
name|event
argument_list|()
operator|.
name|getInstructors
argument_list|()
control|)
block|{
if|if
condition|(
name|contact
operator|.
name|getEmail
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|contact
operator|.
name|getEmail
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|email
operator|.
name|addRecipientCC
argument_list|(
name|contact
operator|.
name|getEmail
argument_list|()
argument_list|,
name|contact
operator|.
name|getName
argument_list|(
name|MESSAGES
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|event
argument_list|()
operator|.
name|hasCoordinators
argument_list|()
operator|&&
name|ApplicationProperty
operator|.
name|EmailConfirmationEventCoordinators
operator|.
name|isTrue
argument_list|()
condition|)
block|{
for|for
control|(
name|ContactInterface
name|contact
range|:
name|event
argument_list|()
operator|.
name|getCoordinators
argument_list|()
control|)
block|{
if|if
condition|(
name|contact
operator|.
name|getEmail
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|contact
operator|.
name|getEmail
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|email
operator|.
name|addRecipientCC
argument_list|(
name|contact
operator|.
name|getEmail
argument_list|()
argument_list|,
name|contact
operator|.
name|getName
argument_list|(
name|MESSAGES
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|EventServiceProviderInterface
argument_list|>
name|providers
init|=
operator|new
name|TreeSet
argument_list|<
name|EventServiceProviderInterface
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|response
argument_list|()
operator|.
name|hasRemovedServices
argument_list|()
operator|&&
operator|(
name|event
argument_list|()
operator|.
name|hasMeetingsOfStatus
argument_list|(
name|ApprovalStatus
operator|.
name|Approved
argument_list|)
operator|||
name|response
argument_list|()
operator|.
name|hasCancelledMeetings
argument_list|()
operator|)
condition|)
block|{
comment|// service no longer needed and there are approved meetings -> notify
name|providers
operator|.
name|addAll
argument_list|(
name|response
argument_list|()
operator|.
name|getRemovedServices
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|response
argument_list|()
operator|.
name|hasAddedServices
argument_list|()
operator|&&
name|event
argument_list|()
operator|.
name|hasMeetingsOfStatus
argument_list|(
name|ApprovalStatus
operator|.
name|Approved
argument_list|)
condition|)
block|{
comment|// new service and there are approved meetings -> notify
name|providers
operator|.
name|addAll
argument_list|(
name|response
argument_list|()
operator|.
name|getAddedServices
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|event
argument_list|()
operator|.
name|hasRequestedServices
argument_list|()
operator|&&
operator|(
name|request
argument_list|()
operator|.
name|getOperation
argument_list|()
operator|==
name|Operation
operator|.
name|APPROVE
operator|||
name|request
argument_list|()
operator|.
name|getOperation
argument_list|()
operator|==
name|Operation
operator|.
name|CANCEL
operator|)
condition|)
block|{
comment|// meeting approved or cancelled -> notify
name|providers
operator|.
name|addAll
argument_list|(
name|event
argument_list|()
operator|.
name|getRequestedServices
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|event
argument_list|()
operator|.
name|hasRequestedServices
argument_list|()
operator|&&
name|response
argument_list|()
operator|.
name|hasCreatedMeetings
argument_list|()
condition|)
block|{
comment|// new meetings automatically approved -> notify
for|for
control|(
name|MeetingInterface
name|meeting
range|:
name|response
argument_list|()
operator|.
name|getCreatedMeetings
argument_list|()
control|)
block|{
if|if
condition|(
name|meeting
operator|.
name|isApproved
argument_list|()
condition|)
block|{
name|providers
operator|.
name|addAll
argument_list|(
name|event
argument_list|()
operator|.
name|getRequestedServices
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|event
argument_list|()
operator|.
name|hasRequestedServices
argument_list|()
operator|&&
name|response
argument_list|()
operator|.
name|hasCancelledMeetings
argument_list|()
condition|)
block|{
comment|// meetings cancelled -> notify
name|providers
operator|.
name|addAll
argument_list|(
name|event
argument_list|()
operator|.
name|getRequestedServices
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|EventServiceProviderInterface
name|provider
range|:
name|providers
control|)
if|if
condition|(
name|provider
operator|.
name|hasEmail
argument_list|()
condition|)
name|email
operator|.
name|addRecipientCC
argument_list|(
name|provider
operator|.
name|getEmail
argument_list|()
argument_list|,
name|provider
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ApplicationProperty
operator|.
name|EmailConfirmationEventManagers
operator|.
name|isTrue
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|locationIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
argument_list|()
operator|.
name|hasMeetings
argument_list|()
condition|)
block|{
for|for
control|(
name|MeetingInterface
name|m
range|:
name|event
argument_list|()
operator|.
name|getMeetings
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|hasLocation
argument_list|()
condition|)
name|locationIds
operator|.
name|add
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|response
argument_list|()
operator|.
name|hasDeletedMeetings
argument_list|()
condition|)
block|{
for|for
control|(
name|MeetingInterface
name|m
range|:
name|response
argument_list|()
operator|.
name|getDeletedMeetings
argument_list|()
control|)
if|if
condition|(
name|m
operator|.
name|hasLocation
argument_list|()
condition|)
name|locationIds
operator|.
name|add
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|NameFormat
name|nf
init|=
name|NameFormat
operator|.
name|fromReference
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
name|UserProperty
operator|.
name|NameFormat
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|TimetableManager
name|m
range|:
operator|(
name|List
argument_list|<
name|TimetableManager
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct m from Location l inner join l.eventDepartment.timetableManagers m inner join m.managerRoles r where "
operator|+
literal|"l.uniqueId in :locationIds and m.emailAddress is not null and r.receiveEmails = true and :permission in elements (r.role.rights)"
argument_list|)
operator|.
name|setParameterList
argument_list|(
literal|"locationIds"
argument_list|,
name|locationIds
argument_list|,
operator|new
name|LongType
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"permission"
argument_list|,
name|Right
operator|.
name|EventLookupContact
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|email
operator|.
name|addRecipientCC
argument_list|(
name|m
operator|.
name|getEmailAddress
argument_list|()
argument_list|,
name|nf
operator|.
name|format
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|replyTo
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|email
operator|.
name|setReplyTo
argument_list|(
name|replyTo
argument_list|()
operator|.
name|getAddress
argument_list|()
argument_list|,
name|replyTo
argument_list|()
operator|.
name|getPersonal
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|context
operator|!=
literal|null
operator|&&
name|context
operator|.
name|isAuthenticated
argument_list|()
operator|&&
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getEmail
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|email
operator|.
name|setReplyTo
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getEmail
argument_list|()
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|email
operator|.
name|setReplyTo
argument_list|(
name|event
argument_list|()
operator|.
name|getContact
argument_list|()
operator|.
name|getEmail
argument_list|()
argument_list|,
name|event
argument_list|()
operator|.
name|getContact
argument_list|()
operator|.
name|getName
argument_list|(
name|MESSAGES
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|event
argument_list|()
operator|.
name|getId
argument_list|()
operator|!=
literal|null
operator|&&
name|ApplicationProperty
operator|.
name|InboundEmailsEnabled
operator|.
name|isTrue
argument_list|()
operator|&&
name|ApplicationProperty
operator|.
name|InboundEmailsReplyToAddress
operator|.
name|value
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|email
operator|.
name|setSubject
argument_list|(
literal|"[EVENT-"
operator|+
name|Long
operator|.
name|toHexString
argument_list|(
name|event
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
operator|+
literal|"] "
operator|+
name|event
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" ("
operator|+
name|event
argument_list|()
operator|.
name|getType
argument_list|()
operator|.
name|getName
argument_list|(
name|CONSTANTS
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|email
operator|.
name|addReplyTo
argument_list|(
name|ApplicationProperty
operator|.
name|InboundEmailsReplyToAddress
operator|.
name|value
argument_list|()
argument_list|,
name|ApplicationProperty
operator|.
name|InboundEmailsReplyToAddressName
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|email
operator|.
name|setSubject
argument_list|(
name|event
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" ("
operator|+
name|event
argument_list|()
operator|.
name|getType
argument_list|()
operator|.
name|getName
argument_list|(
name|CONSTANTS
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
specifier|final
name|FileItem
name|file
init|=
operator|(
name|FileItem
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
name|UploadServlet
operator|.
name|SESSION_LAST_FILE
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
name|email
operator|.
name|addAttachment
argument_list|(
operator|new
name|DataSource
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|OutputStream
name|getOutputStream
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No output stream."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|file
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|getInputStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|file
operator|.
name|getInputStream
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getContentType
parameter_list|()
block|{
return|return
name|file
operator|.
name|getContentType
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|attachment
argument_list|()
operator|!=
literal|null
condition|)
name|email
operator|.
name|addAttachment
argument_list|(
name|attachment
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ApplicationProperty
operator|.
name|EmailConfirmationIncludeCalendar
operator|.
name|isTrue
argument_list|()
condition|)
block|{
try|try
block|{
specifier|final
name|String
name|ical
init|=
name|icalendar
argument_list|()
decl_stmt|;
if|if
condition|(
name|ical
operator|!=
literal|null
condition|)
block|{
name|email
operator|.
name|addAttachment
argument_list|(
operator|new
name|DataSource
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|OutputStream
name|getOutputStream
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No output stream."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"event.ics"
return|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|getInputStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|ical
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getContentType
parameter_list|()
block|{
return|return
literal|"text/calendar; charset=UTF-8"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Failed to export calendar: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|email
operator|.
name|setHTML
argument_list|(
name|message
argument_list|()
argument_list|)
expr_stmt|;
name|Long
name|eventId
init|=
operator|(
name|response
argument_list|()
operator|.
name|hasEventWithId
argument_list|()
condition|?
name|response
argument_list|()
operator|.
name|getEvent
argument_list|()
operator|.
name|getId
argument_list|()
else|:
name|request
argument_list|()
operator|.
name|getEvent
argument_list|()
operator|.
name|getId
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|eventId
operator|!=
literal|null
condition|)
block|{
name|String
name|messageId
init|=
name|sMessageId
operator|.
name|get
argument_list|(
name|eventId
argument_list|)
decl_stmt|;
if|if
condition|(
name|messageId
operator|!=
literal|null
condition|)
name|email
operator|.
name|setInReplyTo
argument_list|(
name|messageId
argument_list|)
expr_stmt|;
block|}
name|email
operator|.
name|send
argument_list|()
expr_stmt|;
if|if
condition|(
name|eventId
operator|!=
literal|null
condition|)
block|{
name|String
name|messageId
init|=
name|email
operator|.
name|getMessageId
argument_list|()
decl_stmt|;
if|if
condition|(
name|messageId
operator|!=
literal|null
condition|)
name|sMessageId
operator|.
name|put
argument_list|(
name|eventId
argument_list|,
name|messageId
argument_list|)
expr_stmt|;
block|}
name|response
argument_list|()
operator|.
name|info
argument_list|(
name|MESSAGES
operator|.
name|infoConfirmationEmailSent
argument_list|(
name|event
argument_list|()
operator|.
name|hasContact
argument_list|()
condition|?
name|event
argument_list|()
operator|.
name|getContact
argument_list|()
operator|.
name|getName
argument_list|(
name|MESSAGES
argument_list|)
else|:
literal|"?"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|response
argument_list|()
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|failedToSendConfirmationEmail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|warn
argument_list|(
name|MESSAGES
operator|.
name|failedToSendConfirmationEmail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|EventInterface
name|event
parameter_list|()
block|{
return|return
name|response
argument_list|()
operator|.
name|getEvent
argument_list|()
operator|!=
literal|null
condition|?
name|response
argument_list|()
operator|.
name|getEvent
argument_list|()
else|:
name|request
argument_list|()
operator|.
name|getEvent
argument_list|()
return|;
block|}
specifier|private
name|String
name|subject
parameter_list|()
block|{
switch|switch
condition|(
name|request
argument_list|()
operator|.
name|getOperation
argument_list|()
condition|)
block|{
case|case
name|CREATE
case|:
return|return
name|MESSAGES
operator|.
name|emailSubjectCreate
argument_list|(
name|event
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
case|case
name|UPDATE
case|:
return|return
name|MESSAGES
operator|.
name|emailSubjectUpdate
argument_list|(
name|event
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
case|case
name|DELETE
case|:
return|return
name|MESSAGES
operator|.
name|emailSubjectDelete
argument_list|(
name|event
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
case|case
name|APPROVE
case|:
return|return
name|MESSAGES
operator|.
name|emailSubjectApprove
argument_list|(
name|event
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
case|case
name|INQUIRE
case|:
return|return
name|MESSAGES
operator|.
name|emailSubjectInquire
argument_list|(
name|event
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
case|case
name|REJECT
case|:
return|return
name|MESSAGES
operator|.
name|emailSubjectReject
argument_list|(
name|event
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
case|case
name|CANCEL
case|:
return|return
name|MESSAGES
operator|.
name|emailSubjectCancel
argument_list|(
name|event
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
default|default:
return|return
name|MESSAGES
operator|.
name|emailSubjectUpdate
argument_list|(
name|event
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|private
name|String
name|message
parameter_list|()
throws|throws
name|IOException
throws|,
name|TemplateException
block|{
name|Configuration
name|cfg
init|=
operator|new
name|Configuration
argument_list|(
name|Configuration
operator|.
name|VERSION_2_3_0
argument_list|)
decl_stmt|;
name|cfg
operator|.
name|setClassForTemplateLoading
argument_list|(
name|EventEmail
operator|.
name|class
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setLocale
argument_list|(
name|Localization
operator|.
name|getJavaLocale
argument_list|()
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setOutputEncoding
argument_list|(
literal|"utf-8"
argument_list|)
expr_stmt|;
name|Template
name|template
init|=
name|cfg
operator|.
name|getTemplate
argument_list|(
literal|"confirmation.ftl"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|input
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|input
operator|.
name|put
argument_list|(
literal|"msg"
argument_list|,
name|MESSAGES
argument_list|)
expr_stmt|;
name|input
operator|.
name|put
argument_list|(
literal|"const"
argument_list|,
name|CONSTANTS
argument_list|)
expr_stmt|;
name|input
operator|.
name|put
argument_list|(
literal|"subject"
argument_list|,
name|subject
argument_list|()
argument_list|)
expr_stmt|;
name|input
operator|.
name|put
argument_list|(
literal|"event"
argument_list|,
name|event
argument_list|()
argument_list|)
expr_stmt|;
name|input
operator|.
name|put
argument_list|(
literal|"eventGridStartDay"
argument_list|,
name|ApplicationProperty
operator|.
name|EventGridStartDay
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|input
operator|.
name|put
argument_list|(
literal|"operation"
argument_list|,
name|request
argument_list|()
operator|.
name|getOperation
argument_list|()
operator|==
literal|null
condition|?
literal|"NONE"
else|:
name|request
argument_list|()
operator|.
name|getOperation
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
argument_list|()
operator|.
name|hasCreatedMeetings
argument_list|()
condition|)
name|input
operator|.
name|put
argument_list|(
literal|"created"
argument_list|,
name|EventInterface
operator|.
name|getMultiMeetings
argument_list|(
name|response
argument_list|()
operator|.
name|getCreatedMeetings
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
argument_list|()
operator|.
name|hasDeletedMeetings
argument_list|()
condition|)
name|input
operator|.
name|put
argument_list|(
literal|"deleted"
argument_list|,
name|EventInterface
operator|.
name|getMultiMeetings
argument_list|(
name|response
argument_list|()
operator|.
name|getDeletedMeetings
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
argument_list|()
operator|.
name|hasCancelledMeetings
argument_list|()
condition|)
name|input
operator|.
name|put
argument_list|(
literal|"cancelled"
argument_list|,
name|EventInterface
operator|.
name|getMultiMeetings
argument_list|(
name|response
argument_list|()
operator|.
name|getCancelledMeetings
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
argument_list|()
operator|.
name|hasUpdatedMeetings
argument_list|()
condition|)
name|input
operator|.
name|put
argument_list|(
literal|"updated"
argument_list|,
name|EventInterface
operator|.
name|getMultiMeetings
argument_list|(
name|response
argument_list|()
operator|.
name|getUpdatedMeetings
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
argument_list|()
operator|.
name|hasMessage
argument_list|()
condition|)
name|input
operator|.
name|put
argument_list|(
literal|"message"
argument_list|,
name|request
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
argument_list|()
operator|.
name|getEvent
argument_list|()
operator|.
name|getId
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|event
argument_list|()
operator|.
name|hasMeetings
argument_list|()
condition|)
block|{
name|input
operator|.
name|put
argument_list|(
literal|"meetings"
argument_list|,
name|EventInterface
operator|.
name|getMultiMeetings
argument_list|(
name|event
argument_list|()
operator|.
name|getMeetings
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
name|input
operator|.
name|put
argument_list|(
literal|"meetings"
argument_list|,
operator|new
name|TreeSet
argument_list|<
name|MultiMeetingInterface
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|input
operator|.
name|put
argument_list|(
literal|"version"
argument_list|,
name|MESSAGES
operator|.
name|pageVersion
argument_list|(
name|Constants
operator|.
name|getVersion
argument_list|()
argument_list|,
name|Constants
operator|.
name|getReleaseDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|input
operator|.
name|put
argument_list|(
literal|"ts"
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|input
operator|.
name|put
argument_list|(
literal|"link"
argument_list|,
name|ApplicationProperty
operator|.
name|UniTimeUrl
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iRequest
operator|.
name|hasSessionId
argument_list|()
condition|)
block|{
name|Session
name|session
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|iRequest
operator|.
name|getSessionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
name|input
operator|.
name|put
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|input
operator|.
name|put
argument_list|(
literal|"sessionId"
argument_list|,
name|iRequest
operator|.
name|getSessionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|StringWriter
name|s
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|template
operator|.
name|process
argument_list|(
name|input
argument_list|,
operator|new
name|PrintWriter
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|flush
argument_list|()
expr_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|s
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|icalendar
parameter_list|()
throws|throws
name|IOException
block|{
name|ICalendar
name|ical
init|=
operator|new
name|ICalendar
argument_list|()
decl_stmt|;
name|ical
operator|.
name|setVersion
argument_list|(
name|ICalVersion
operator|.
name|V2_0
argument_list|)
expr_stmt|;
name|ical
operator|.
name|setCalendarScale
argument_list|(
name|CalendarScale
operator|.
name|gregorian
argument_list|()
argument_list|)
expr_stmt|;
name|ical
operator|.
name|setMethod
argument_list|(
operator|new
name|Method
argument_list|(
literal|"PUBLISH"
argument_list|)
argument_list|)
expr_stmt|;
name|ical
operator|.
name|setExperimentalProperty
argument_list|(
literal|"X-WR-CALNAME"
argument_list|,
literal|"UniTime Schedule"
argument_list|)
expr_stmt|;
name|ical
operator|.
name|setExperimentalProperty
argument_list|(
literal|"X-WR-TIMEZONE"
argument_list|,
name|TimeZone
operator|.
name|getDefault
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|ical
operator|.
name|setProductId
argument_list|(
literal|"-//UniTime LLC/UniTime "
operator|+
name|Constants
operator|.
name|getVersion
argument_list|()
operator|+
literal|" Events//EN"
argument_list|)
expr_stmt|;
name|boolean
name|exp
init|=
operator|new
name|EventsExportEventsToICal
argument_list|()
operator|.
name|print
argument_list|(
name|ical
argument_list|,
name|response
argument_list|()
operator|.
name|hasEventWithId
argument_list|()
operator|&&
name|response
argument_list|()
operator|.
name|getEvent
argument_list|()
operator|.
name|hasMeetings
argument_list|()
condition|?
name|response
argument_list|()
operator|.
name|getEvent
argument_list|()
else|:
name|request
argument_list|()
operator|.
name|getEvent
argument_list|()
argument_list|,
name|response
argument_list|()
operator|.
name|hasEventWithId
argument_list|()
operator|&&
name|response
argument_list|()
operator|.
name|getEvent
argument_list|()
operator|.
name|hasMeetings
argument_list|()
condition|?
literal|null
else|:
name|Status
operator|.
name|cancelled
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|exp
condition|)
block|{
name|StringWriter
name|ret
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|ICalWriter
name|writer
init|=
operator|new
name|ICalWriter
argument_list|(
name|ret
argument_list|,
name|ICalVersion
operator|.
name|V2_0
argument_list|)
decl_stmt|;
try|try
block|{
name|writer
operator|.
name|getTimezoneInfo
argument_list|()
operator|.
name|setGenerator
argument_list|(
operator|new
name|CalendarVTimeZoneGenerator
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|getTimezoneInfo
argument_list|()
operator|.
name|setDefaultTimeZone
argument_list|(
name|TimeZone
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Failed to set default time zone: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|writer
operator|.
name|write
argument_list|(
name|ical
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|void
name|eventExpired
parameter_list|(
name|Event
name|cancelledEvent
parameter_list|,
name|Set
argument_list|<
name|Meeting
argument_list|>
name|cancelledMeetings
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|ApplicationProperty
operator|.
name|EmailConfirmationEvents
operator|.
name|isFalse
argument_list|()
condition|)
return|return;
name|Session
name|session
init|=
name|cancelledEvent
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
for|for
control|(
name|Meeting
name|m
range|:
name|cancelledEvent
operator|.
name|getMeetings
argument_list|()
control|)
if|if
condition|(
name|m
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|session
operator|=
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getSession
argument_list|()
expr_stmt|;
break|break;
block|}
name|EventInterface
name|event
init|=
name|EventDetailBackend
operator|.
name|getEventDetail
argument_list|(
name|session
argument_list|,
name|cancelledEvent
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ApproveEventRpcRequest
name|request
init|=
operator|new
name|ApproveEventRpcRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setOperation
argument_list|(
name|SaveOrApproveEventRpcRequest
operator|.
name|Operation
operator|.
name|CANCEL
argument_list|)
expr_stmt|;
name|request
operator|.
name|setMessage
argument_list|(
name|MESSAGES
operator|.
name|noteEventExpired
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setEmailConfirmation
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|request
operator|.
name|setSessionId
argument_list|(
name|session
operator|==
literal|null
condition|?
literal|null
else|:
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|SaveOrApproveEventRpcResponse
name|response
init|=
operator|new
name|SaveOrApproveEventRpcResponse
argument_list|()
decl_stmt|;
name|response
operator|.
name|setEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
for|for
control|(
name|Meeting
name|metting
range|:
name|cancelledMeetings
control|)
for|for
control|(
name|MeetingInterface
name|m
range|:
name|event
operator|.
name|getMeetings
argument_list|()
control|)
if|if
condition|(
name|m
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|metting
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
name|response
operator|.
name|addUpdatedMeeting
argument_list|(
name|m
argument_list|)
expr_stmt|;
operator|new
name|EventEmail
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
operator|.
name|send
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|eventUpdated
parameter_list|(
name|Event
name|updatedEvent
parameter_list|,
name|String
name|message
parameter_list|,
name|InternetAddress
name|replyTo
parameter_list|,
name|DataSource
name|attachment
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|ApplicationProperty
operator|.
name|EmailConfirmationEvents
operator|.
name|isFalse
argument_list|()
condition|)
return|return;
name|Session
name|session
init|=
name|updatedEvent
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
for|for
control|(
name|Meeting
name|m
range|:
name|updatedEvent
operator|.
name|getMeetings
argument_list|()
control|)
if|if
condition|(
name|m
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|session
operator|=
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getSession
argument_list|()
expr_stmt|;
break|break;
block|}
name|EventInterface
name|event
init|=
name|EventDetailBackend
operator|.
name|getEventDetail
argument_list|(
name|session
argument_list|,
name|updatedEvent
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ApproveEventRpcRequest
name|request
init|=
operator|new
name|ApproveEventRpcRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setOperation
argument_list|(
name|SaveOrApproveEventRpcRequest
operator|.
name|Operation
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
operator|&&
operator|!
name|message
operator|.
name|isEmpty
argument_list|()
condition|)
name|request
operator|.
name|setMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|request
operator|.
name|setEmailConfirmation
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|request
operator|.
name|setSessionId
argument_list|(
name|session
operator|==
literal|null
condition|?
literal|null
else|:
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|SaveOrApproveEventRpcResponse
name|response
init|=
operator|new
name|SaveOrApproveEventRpcResponse
argument_list|()
decl_stmt|;
name|response
operator|.
name|setEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
operator|new
name|EventEmail
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|attachment
argument_list|,
name|replyTo
argument_list|)
operator|.
name|send
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

