begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.4 (University Timetabling Application)  * Copyright (C) 2012, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|events
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
operator|.
name|HibernateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|events
operator|.
name|UniTimeFilterBox
operator|.
name|FilterRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|events
operator|.
name|UniTimeFilterBox
operator|.
name|FilterRpcResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|events
operator|.
name|UniTimeFilterBox
operator|.
name|FilterRpcResponse
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|TimeSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|EventContact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|FinalExamEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|MidtermExamEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Roles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SpecialEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|EventDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_class
specifier|public
class|class
name|EventFilterBackend
extends|extends
name|FilterBoxBackend
block|{
specifier|private
specifier|static
name|GwtConstants
name|CONSTANTS
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|load
parameter_list|(
name|FilterRpcRequest
name|request
parameter_list|,
name|FilterRpcResponse
name|response
parameter_list|)
block|{
name|String
name|timeFilter
init|=
literal|""
decl_stmt|;
name|Integer
name|after
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"after"
argument_list|)
condition|)
block|{
name|after
operator|=
name|TimeSelector
operator|.
name|TimeUtils
operator|.
name|parseTime
argument_list|(
name|request
operator|.
name|getOption
argument_list|(
literal|"after"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|timeFilter
operator|+=
literal|" and m.stopPeriod> "
operator|+
name|after
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"before"
argument_list|)
condition|)
block|{
name|timeFilter
operator|+=
literal|" and m.startPeriod> "
operator|+
name|TimeSelector
operator|.
name|TimeUtils
operator|.
name|parseTime
argument_list|(
name|request
operator|.
name|getOption
argument_list|(
literal|"before"
argument_list|)
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"from"
argument_list|)
condition|)
block|{
try|try
block|{
name|timeFilter
operator|+=
literal|" and m.meetingDate>= "
operator|+
name|HibernateUtil
operator|.
name|date
argument_list|(
operator|new
name|SimpleDateFormat
argument_list|(
name|CONSTANTS
operator|.
name|eventDateFormat
argument_list|()
argument_list|)
operator|.
name|parse
argument_list|(
name|request
operator|.
name|getOption
argument_list|(
literal|"from"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
block|}
block|}
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"to"
argument_list|)
condition|)
block|{
try|try
block|{
name|timeFilter
operator|+=
literal|" and m.meetingDate<= "
operator|+
name|HibernateUtil
operator|.
name|date
argument_list|(
operator|new
name|SimpleDateFormat
argument_list|(
name|CONSTANTS
operator|.
name|eventDateFormat
argument_list|()
argument_list|)
operator|.
name|parse
argument_list|(
name|request
operator|.
name|getOption
argument_list|(
literal|"to"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
block|}
block|}
name|String
name|dayFilter
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"day"
argument_list|)
condition|)
block|{
name|String
name|dow
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|day
range|:
name|request
operator|.
name|getOptions
argument_list|(
literal|"day"
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|dow
operator|.
name|isEmpty
argument_list|()
condition|)
name|dow
operator|+=
literal|","
expr_stmt|;
if|if
condition|(
name|Constants
operator|.
name|DAY_NAMES_FULL
index|[
name|Constants
operator|.
name|DAY_MON
index|]
operator|.
name|equals
argument_list|(
name|day
argument_list|)
condition|)
name|dow
operator|+=
literal|"2"
expr_stmt|;
if|if
condition|(
name|Constants
operator|.
name|DAY_NAMES_FULL
index|[
name|Constants
operator|.
name|DAY_TUE
index|]
operator|.
name|equals
argument_list|(
name|day
argument_list|)
condition|)
name|dow
operator|+=
literal|"3"
expr_stmt|;
if|if
condition|(
name|Constants
operator|.
name|DAY_NAMES_FULL
index|[
name|Constants
operator|.
name|DAY_WED
index|]
operator|.
name|equals
argument_list|(
name|day
argument_list|)
condition|)
name|dow
operator|+=
literal|"4"
expr_stmt|;
if|if
condition|(
name|Constants
operator|.
name|DAY_NAMES_FULL
index|[
name|Constants
operator|.
name|DAY_THU
index|]
operator|.
name|equals
argument_list|(
name|day
argument_list|)
condition|)
name|dow
operator|+=
literal|"5"
expr_stmt|;
if|if
condition|(
name|Constants
operator|.
name|DAY_NAMES_FULL
index|[
name|Constants
operator|.
name|DAY_FRI
index|]
operator|.
name|equals
argument_list|(
name|day
argument_list|)
condition|)
name|dow
operator|+=
literal|"6"
expr_stmt|;
if|if
condition|(
name|Constants
operator|.
name|DAY_NAMES_FULL
index|[
name|Constants
operator|.
name|DAY_SAT
index|]
operator|.
name|equals
argument_list|(
name|day
argument_list|)
condition|)
name|dow
operator|+=
literal|"7"
expr_stmt|;
if|if
condition|(
name|Constants
operator|.
name|DAY_NAMES_FULL
index|[
name|Constants
operator|.
name|DAY_SUN
index|]
operator|.
name|equals
argument_list|(
name|day
argument_list|)
condition|)
name|dow
operator|+=
literal|"1"
expr_stmt|;
block|}
if|if
condition|(
name|dow
operator|.
name|indexOf
argument_list|(
literal|','
argument_list|)
operator|>=
literal|0
condition|)
name|dayFilter
operator|+=
literal|" and "
operator|+
name|HibernateUtil
operator|.
name|dayOfWeek
argument_list|(
literal|"m.meetingDate"
argument_list|)
operator|+
literal|" in ("
operator|+
name|dow
operator|+
literal|")"
expr_stmt|;
else|else
name|dayFilter
operator|+=
literal|" and "
operator|+
name|HibernateUtil
operator|.
name|dayOfWeek
argument_list|(
literal|"m.meetingDate"
argument_list|)
operator|+
literal|" = "
operator|+
name|dow
expr_stmt|;
block|}
name|String
name|typeFilter
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"type"
argument_list|)
condition|)
block|{
name|String
name|type
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|t
range|:
name|request
operator|.
name|getOptions
argument_list|(
literal|"type"
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|type
operator|.
name|isEmpty
argument_list|()
condition|)
name|type
operator|+=
literal|","
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|equals
argument_list|(
name|Event
operator|.
name|sEventTypesAbbv
index|[
name|Event
operator|.
name|sEventTypeClass
index|]
argument_list|)
condition|)
name|type
operator|+=
name|ClassEvent
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|equals
argument_list|(
name|Event
operator|.
name|sEventTypesAbbv
index|[
name|Event
operator|.
name|sEventTypeCourse
index|]
argument_list|)
condition|)
name|type
operator|+=
name|CourseEvent
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|equals
argument_list|(
name|Event
operator|.
name|sEventTypesAbbv
index|[
name|Event
operator|.
name|sEventTypeSpecial
index|]
argument_list|)
condition|)
name|type
operator|+=
name|SpecialEvent
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|equals
argument_list|(
name|Event
operator|.
name|sEventTypesAbbv
index|[
name|Event
operator|.
name|sEventTypeFinalExam
index|]
argument_list|)
condition|)
name|type
operator|+=
name|FinalExamEvent
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|equals
argument_list|(
name|Event
operator|.
name|sEventTypesAbbv
index|[
name|Event
operator|.
name|sEventTypeMidtermExam
index|]
argument_list|)
condition|)
name|type
operator|+=
name|MidtermExamEvent
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|typeFilter
operator|=
literal|" and e.class in ("
operator|+
name|type
operator|+
literal|")"
expr_stmt|;
block|}
name|String
name|modeFilter
init|=
literal|""
decl_stmt|;
name|String
name|modeWhere
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"mode"
argument_list|)
condition|)
block|{
name|String
name|mode
init|=
name|request
operator|.
name|getOption
argument_list|(
literal|"mode"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"My Events"
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
condition|)
block|{
name|modeFilter
operator|=
literal|" and e.mainContact.externalUniqueId = '"
operator|+
name|request
operator|.
name|getOption
argument_list|(
literal|"user"
argument_list|)
operator|+
literal|"'"
expr_stmt|;
block|}
if|else if
condition|(
literal|"Approved Events"
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
condition|)
block|{
name|modeFilter
operator|=
literal|" and e not in (select distinct x.event from Meeting x where x.approvedDate is null)"
expr_stmt|;
block|}
if|else if
condition|(
literal|"Awaiting Events"
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
condition|)
block|{
name|modeFilter
operator|=
literal|" and m.approvedDate is null"
expr_stmt|;
block|}
if|else if
condition|(
literal|"Awaiting My Approval"
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
condition|)
block|{
name|modeWhere
operator|=
literal|", Location l inner join l.roomDepts rd inner join rd.department.timetableManagers g"
expr_stmt|;
name|modeFilter
operator|=
literal|" and m.approvedDate is null"
operator|+
literal|" and l.session.uniqueId = :sessionId and l.permanentId = m.locationPermanentId and rd.control=true and g.externalUniqueId = '"
operator|+
name|request
operator|.
name|getOption
argument_list|(
literal|"user"
argument_list|)
operator|+
literal|"'"
expr_stmt|;
block|}
if|else if
condition|(
literal|"Conflicting Events"
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
condition|)
block|{
name|modeWhere
operator|=
literal|", Meeting mx"
expr_stmt|;
name|modeFilter
operator|=
literal|" and mx.uniqueId!=m.uniqueId and m.meetingDate=mx.meetingDate and m.startPeriod< mx.stopPeriod and m.stopPeriod> mx.startPeriod and m.locationPermanentId = mx.locationPermanentId"
expr_stmt|;
block|}
block|}
name|String
name|requestedFilter
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"requested"
argument_list|)
condition|)
block|{
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|request
operator|.
name|getOption
argument_list|(
literal|"requested"
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|,
literal|", "
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|token
init|=
name|s
operator|.
name|nextToken
argument_list|()
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
name|requestedFilter
operator|+=
literal|" and (upper(e.mainContact.firstName) like '%"
operator|+
name|token
operator|+
literal|"%' or upper(e.mainContact.middleName) like '%"
operator|+
name|token
operator|+
literal|"%' or upper(e.mainContact.lastName) like '%"
operator|+
name|token
operator|+
literal|"%')"
expr_stmt|;
block|}
block|}
name|String
name|sponsorFilter
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"sponsor"
argument_list|)
condition|)
block|{
name|String
name|sponsor
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|request
operator|.
name|getOptions
argument_list|(
literal|"sponsor"
argument_list|)
control|)
name|sponsor
operator|+=
operator|(
name|sponsor
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|"'"
operator|+
name|s
operator|.
name|replace
argument_list|(
literal|"'"
argument_list|,
literal|"\\'"
argument_list|)
operator|+
literal|"'"
expr_stmt|;
name|sponsorFilter
operator|=
literal|" and e.sponsoringOrganization.name in ("
operator|+
name|sponsor
operator|+
literal|")"
expr_stmt|;
block|}
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|EventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|int
name|total
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select e.class, count(distinct e) from Event e inner join e.meetings m, Location l inner join l.session s "
operator|+
name|modeWhere
operator|+
literal|" where s.uniqueId = :sessionId and m.meetingDate>= s.eventBeginDate and m.meetingDate<= s.eventEndDate and m.locationPermanentId = l.permanentId "
operator|+
name|timeFilter
operator|+
name|dayFilter
operator|+
name|modeFilter
operator|+
name|requestedFilter
operator|+
name|sponsorFilter
operator|+
literal|" group by e.class order by e.class"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|int
name|type
init|=
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|0
index|]
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|int
name|count
init|=
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|1
index|]
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|Entity
name|e
init|=
operator|new
name|Entity
argument_list|(
operator|new
name|Long
argument_list|(
name|type
argument_list|)
argument_list|,
name|Event
operator|.
name|sEventTypesAbbv
index|[
name|type
index|]
argument_list|,
name|Event
operator|.
name|sEventTypesAbbv
index|[
name|type
index|]
argument_list|)
decl_stmt|;
name|e
operator|.
name|setCount
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|response
operator|.
name|add
argument_list|(
literal|"type"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|total
operator|+=
name|count
expr_stmt|;
block|}
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select "
operator|+
name|HibernateUtil
operator|.
name|dayOfWeek
argument_list|(
literal|"m.meetingDate"
argument_list|)
operator|+
literal|", count(distinct e) from Event e inner join e.meetings m, Location l inner join l.session s "
operator|+
name|modeWhere
operator|+
literal|" where s.uniqueId = :sessionId and m.meetingDate>= s.eventBeginDate and m.meetingDate<= s.eventEndDate and m.locationPermanentId = l.permanentId "
operator|+
name|timeFilter
operator|+
name|modeFilter
operator|+
name|requestedFilter
operator|+
name|sponsorFilter
operator|+
name|typeFilter
operator|+
literal|" group by "
operator|+
name|HibernateUtil
operator|.
name|dayOfWeek
argument_list|(
literal|"m.meetingDate"
argument_list|)
operator|+
literal|" order by "
operator|+
name|HibernateUtil
operator|.
name|dayOfWeek
argument_list|(
literal|"m.meetingDate"
argument_list|)
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|int
name|type
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|o
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|day
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
literal|1
case|:
name|day
operator|=
name|Constants
operator|.
name|DAY_NAMES_FULL
index|[
name|Constants
operator|.
name|DAY_SUN
index|]
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|day
operator|=
name|Constants
operator|.
name|DAY_NAMES_FULL
index|[
name|Constants
operator|.
name|DAY_MON
index|]
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|day
operator|=
name|Constants
operator|.
name|DAY_NAMES_FULL
index|[
name|Constants
operator|.
name|DAY_TUE
index|]
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|day
operator|=
name|Constants
operator|.
name|DAY_NAMES_FULL
index|[
name|Constants
operator|.
name|DAY_WED
index|]
expr_stmt|;
break|break;
case|case
literal|5
case|:
name|day
operator|=
name|Constants
operator|.
name|DAY_NAMES_FULL
index|[
name|Constants
operator|.
name|DAY_THU
index|]
expr_stmt|;
break|break;
case|case
literal|6
case|:
name|day
operator|=
name|Constants
operator|.
name|DAY_NAMES_FULL
index|[
name|Constants
operator|.
name|DAY_FRI
index|]
expr_stmt|;
break|break;
case|case
literal|7
case|:
name|day
operator|=
name|Constants
operator|.
name|DAY_NAMES_FULL
index|[
name|Constants
operator|.
name|DAY_SAT
index|]
expr_stmt|;
break|break;
block|}
name|int
name|count
init|=
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|1
index|]
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|Entity
name|e
init|=
operator|new
name|Entity
argument_list|(
operator|new
name|Long
argument_list|(
name|type
argument_list|)
argument_list|,
name|day
argument_list|,
name|day
argument_list|)
decl_stmt|;
name|e
operator|.
name|setCount
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|response
operator|.
name|add
argument_list|(
literal|"day"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|total
operator|+=
name|count
expr_stmt|;
block|}
name|Entity
name|all
init|=
operator|new
name|Entity
argument_list|(
literal|0l
argument_list|,
literal|"All"
argument_list|,
literal|"All Events"
argument_list|)
decl_stmt|;
name|all
operator|.
name|setCount
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select count(distinct e) from Event e inner join e.meetings m, Location l inner join l.session s "
operator|+
literal|"where s.uniqueId = :sessionId and m.meetingDate>= s.eventBeginDate and m.meetingDate<= s.eventEndDate and m.locationPermanentId = l.permanentId "
operator|+
name|timeFilter
operator|+
name|dayFilter
operator|+
name|typeFilter
operator|+
name|sponsorFilter
operator|+
name|requestedFilter
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|add
argument_list|(
literal|"mode"
argument_list|,
name|all
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"user"
argument_list|)
condition|)
block|{
name|int
name|myCnt
init|=
operator|(
operator|(
name|Number
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select count(distinct e) from Event e inner join e.meetings m, Location l inner join l.session s "
operator|+
literal|"where s.uniqueId = :sessionId and m.meetingDate>= s.eventBeginDate and m.meetingDate<= s.eventEndDate and m.locationPermanentId = l.permanentId "
operator|+
literal|"and e.mainContact.externalUniqueId = '"
operator|+
name|request
operator|.
name|getOption
argument_list|(
literal|"user"
argument_list|)
operator|+
literal|"'"
operator|+
name|timeFilter
operator|+
name|dayFilter
operator|+
name|typeFilter
operator|+
name|sponsorFilter
operator|+
name|requestedFilter
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|myCnt
operator|>
literal|0
condition|)
block|{
name|Entity
name|my
init|=
operator|new
name|Entity
argument_list|(
literal|1l
argument_list|,
literal|"My"
argument_list|,
literal|"My Events"
argument_list|)
decl_stmt|;
name|my
operator|.
name|setCount
argument_list|(
name|myCnt
argument_list|)
expr_stmt|;
name|response
operator|.
name|add
argument_list|(
literal|"mode"
argument_list|,
name|my
argument_list|)
expr_stmt|;
block|}
name|String
name|role
init|=
name|request
operator|.
name|getOption
argument_list|(
literal|"role"
argument_list|)
decl_stmt|;
if|if
condition|(
name|role
operator|!=
literal|null
condition|)
block|{
name|int
name|approvedCnt
init|=
operator|(
operator|(
name|Number
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select count(distinct e) from Event e inner join e.meetings m, Location l inner join l.session s "
operator|+
literal|"where s.uniqueId = :sessionId and m.meetingDate>= s.eventBeginDate and m.meetingDate<= s.eventEndDate and m.locationPermanentId = l.permanentId "
operator|+
literal|"and e not in (select distinct x.event from Meeting x where x.approvedDate is null) "
operator|+
name|timeFilter
operator|+
name|dayFilter
operator|+
name|typeFilter
operator|+
name|sponsorFilter
operator|+
name|requestedFilter
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|approvedCnt
operator|>
literal|0
condition|)
block|{
name|Entity
name|approved
init|=
operator|new
name|Entity
argument_list|(
literal|2l
argument_list|,
literal|"Approved"
argument_list|,
literal|"Approved Events"
argument_list|)
decl_stmt|;
name|approved
operator|.
name|setCount
argument_list|(
name|approvedCnt
argument_list|)
expr_stmt|;
name|response
operator|.
name|add
argument_list|(
literal|"mode"
argument_list|,
name|approved
argument_list|)
expr_stmt|;
block|}
name|int
name|awaitingCnt
init|=
operator|(
operator|(
name|Number
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select count(distinct e) from Event e inner join e.meetings m, Location l inner join l.session s "
operator|+
literal|"where s.uniqueId = :sessionId and m.meetingDate>= s.eventBeginDate and m.meetingDate<= s.eventEndDate and m.locationPermanentId = l.permanentId "
operator|+
literal|"and m.approvedDate is null "
operator|+
name|timeFilter
operator|+
name|dayFilter
operator|+
name|typeFilter
operator|+
name|sponsorFilter
operator|+
name|requestedFilter
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|awaitingCnt
operator|>
literal|0
condition|)
block|{
name|Entity
name|awaiting
init|=
operator|new
name|Entity
argument_list|(
literal|2l
argument_list|,
literal|"Awaiting"
argument_list|,
literal|"Awaiting Events"
argument_list|)
decl_stmt|;
name|awaiting
operator|.
name|setCount
argument_list|(
name|awaitingCnt
argument_list|)
expr_stmt|;
name|response
operator|.
name|add
argument_list|(
literal|"mode"
argument_list|,
name|awaiting
argument_list|)
expr_stmt|;
block|}
name|int
name|conflictingCnt
init|=
operator|(
operator|(
name|Number
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select count(distinct e) from Event e inner join e.meetings m, Meeting mx, Location l inner join l.session s "
operator|+
literal|"where s.uniqueId = :sessionId and m.meetingDate>= s.eventBeginDate and m.meetingDate<= s.eventEndDate and m.locationPermanentId = l.permanentId "
operator|+
literal|"and mx.uniqueId!=m.uniqueId and m.meetingDate=mx.meetingDate and m.startPeriod< mx.stopPeriod and m.stopPeriod> mx.startPeriod and "
operator|+
literal|"m.locationPermanentId = mx.locationPermanentId "
operator|+
name|timeFilter
operator|+
name|dayFilter
operator|+
name|typeFilter
operator|+
name|sponsorFilter
operator|+
name|requestedFilter
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|conflictingCnt
operator|>
literal|0
condition|)
block|{
name|Entity
name|conflicting
init|=
operator|new
name|Entity
argument_list|(
literal|2l
argument_list|,
literal|"Conflicting"
argument_list|,
literal|"Conflicting Events"
argument_list|)
decl_stmt|;
name|conflicting
operator|.
name|setCount
argument_list|(
name|conflictingCnt
argument_list|)
expr_stmt|;
name|response
operator|.
name|add
argument_list|(
literal|"mode"
argument_list|,
name|conflicting
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Roles
operator|.
name|EVENT_MGR_ROLE
operator|.
name|equals
argument_list|(
name|role
argument_list|)
condition|)
block|{
name|int
name|myApprovalCnt
init|=
operator|(
operator|(
name|Number
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select count(distinct e) from Event e inner join e.meetings m, Location l inner join l.session s inner join l.roomDepts rd inner join rd.department.timetableManagers g "
operator|+
literal|"where s.uniqueId = :sessionId and m.meetingDate>= s.eventBeginDate and m.meetingDate<= s.eventEndDate and m.locationPermanentId = l.permanentId "
operator|+
literal|"and m.approvedDate is null "
operator|+
literal|"and rd.control=true and g.externalUniqueId = '"
operator|+
name|request
operator|.
name|getOption
argument_list|(
literal|"user"
argument_list|)
operator|+
literal|"' "
operator|+
name|timeFilter
operator|+
name|dayFilter
operator|+
name|typeFilter
operator|+
name|sponsorFilter
operator|+
name|requestedFilter
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|myApprovalCnt
operator|>
literal|0
condition|)
block|{
name|Entity
name|awaiting
init|=
operator|new
name|Entity
argument_list|(
literal|2l
argument_list|,
literal|"My Awaiting"
argument_list|,
literal|"Awaiting My Approval"
argument_list|)
decl_stmt|;
name|awaiting
operator|.
name|setCount
argument_list|(
name|myApprovalCnt
argument_list|)
expr_stmt|;
name|response
operator|.
name|add
argument_list|(
literal|"mode"
argument_list|,
name|awaiting
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|Object
index|[]
name|org
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select o.uniqueId, o.name, count(distinct e) from Event e inner join e.sponsoringOrganization o inner join e.meetings m, Location l inner join l.session s "
operator|+
name|modeWhere
operator|+
literal|" where s.uniqueId = :sessionId and m.meetingDate>= s.eventBeginDate and m.meetingDate<= s.eventEndDate and m.locationPermanentId = l.permanentId "
operator|+
name|timeFilter
operator|+
name|dayFilter
operator|+
name|typeFilter
operator|+
name|requestedFilter
operator|+
name|modeFilter
operator|+
literal|" group by o.uniqueId, o.name order by o.name"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Long
name|id
init|=
operator|(
name|Long
operator|)
name|org
index|[
literal|0
index|]
decl_stmt|;
name|String
name|name
init|=
operator|(
name|String
operator|)
name|org
index|[
literal|1
index|]
decl_stmt|;
name|int
name|count
init|=
operator|(
operator|(
name|Number
operator|)
name|org
index|[
literal|2
index|]
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|Entity
name|sponsor
init|=
operator|new
name|Entity
argument_list|(
name|id
argument_list|,
name|name
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|sponsor
operator|.
name|setCount
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|response
operator|.
name|add
argument_list|(
literal|"sponsor"
argument_list|,
name|sponsor
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|add
argument_list|(
literal|"other"
argument_list|,
operator|new
name|Entity
argument_list|(
literal|0l
argument_list|,
literal|"Conflicts"
argument_list|,
literal|"Display Conflicts"
argument_list|)
argument_list|)
expr_stmt|;
comment|/* 		for (int i = 0; i< Constants.DAY_NAMES_FULL.length; i++) 			response.add("day", new Entity((long)i, Constants.DAY_NAMES_FULL[i], Constants.DAY_NAMES_FULL[i])); 			*/
block|}
annotation|@
name|Override
specifier|public
name|void
name|suggestions
parameter_list|(
name|FilterRpcRequest
name|request
parameter_list|,
name|FilterRpcResponse
name|response
parameter_list|)
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|EventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|String
name|restrictions
init|=
literal|""
decl_stmt|;
name|String
name|restrictionsWhere
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"type"
argument_list|)
condition|)
block|{
name|String
name|type
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|t
range|:
name|request
operator|.
name|getOptions
argument_list|(
literal|"type"
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|type
operator|.
name|isEmpty
argument_list|()
condition|)
name|type
operator|+=
literal|","
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|equals
argument_list|(
name|Event
operator|.
name|sEventTypesAbbv
index|[
name|Event
operator|.
name|sEventTypeClass
index|]
argument_list|)
condition|)
name|type
operator|+=
name|ClassEvent
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|equals
argument_list|(
name|Event
operator|.
name|sEventTypesAbbv
index|[
name|Event
operator|.
name|sEventTypeCourse
index|]
argument_list|)
condition|)
name|type
operator|+=
name|CourseEvent
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|equals
argument_list|(
name|Event
operator|.
name|sEventTypesAbbv
index|[
name|Event
operator|.
name|sEventTypeSpecial
index|]
argument_list|)
condition|)
name|type
operator|+=
name|SpecialEvent
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|equals
argument_list|(
name|Event
operator|.
name|sEventTypesAbbv
index|[
name|Event
operator|.
name|sEventTypeFinalExam
index|]
argument_list|)
condition|)
name|type
operator|+=
name|FinalExamEvent
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|equals
argument_list|(
name|Event
operator|.
name|sEventTypesAbbv
index|[
name|Event
operator|.
name|sEventTypeMidtermExam
index|]
argument_list|)
condition|)
name|type
operator|+=
name|MidtermExamEvent
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|restrictions
operator|+=
literal|" and e.class in ("
operator|+
name|type
operator|+
literal|")"
expr_stmt|;
block|}
name|Integer
name|after
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"after"
argument_list|)
condition|)
block|{
name|after
operator|=
name|TimeSelector
operator|.
name|TimeUtils
operator|.
name|parseTime
argument_list|(
name|request
operator|.
name|getOption
argument_list|(
literal|"after"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|restrictions
operator|+=
literal|" and m.stopPeriod> "
operator|+
name|after
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"before"
argument_list|)
condition|)
block|{
name|restrictions
operator|+=
literal|" and m.startPeriod> "
operator|+
name|TimeSelector
operator|.
name|TimeUtils
operator|.
name|parseTime
argument_list|(
name|request
operator|.
name|getOption
argument_list|(
literal|"before"
argument_list|)
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"day"
argument_list|)
condition|)
block|{
name|String
name|dow
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|day
range|:
name|request
operator|.
name|getOptions
argument_list|(
literal|"day"
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|dow
operator|.
name|isEmpty
argument_list|()
condition|)
name|dow
operator|+=
literal|","
expr_stmt|;
if|if
condition|(
name|Constants
operator|.
name|DAY_NAMES_FULL
index|[
name|Constants
operator|.
name|DAY_MON
index|]
operator|.
name|equals
argument_list|(
name|day
argument_list|)
condition|)
name|dow
operator|+=
literal|"2"
expr_stmt|;
if|if
condition|(
name|Constants
operator|.
name|DAY_NAMES_FULL
index|[
name|Constants
operator|.
name|DAY_TUE
index|]
operator|.
name|equals
argument_list|(
name|day
argument_list|)
condition|)
name|dow
operator|+=
literal|"3"
expr_stmt|;
if|if
condition|(
name|Constants
operator|.
name|DAY_NAMES_FULL
index|[
name|Constants
operator|.
name|DAY_WED
index|]
operator|.
name|equals
argument_list|(
name|day
argument_list|)
condition|)
name|dow
operator|+=
literal|"4"
expr_stmt|;
if|if
condition|(
name|Constants
operator|.
name|DAY_NAMES_FULL
index|[
name|Constants
operator|.
name|DAY_THU
index|]
operator|.
name|equals
argument_list|(
name|day
argument_list|)
condition|)
name|dow
operator|+=
literal|"5"
expr_stmt|;
if|if
condition|(
name|Constants
operator|.
name|DAY_NAMES_FULL
index|[
name|Constants
operator|.
name|DAY_FRI
index|]
operator|.
name|equals
argument_list|(
name|day
argument_list|)
condition|)
name|dow
operator|+=
literal|"6"
expr_stmt|;
if|if
condition|(
name|Constants
operator|.
name|DAY_NAMES_FULL
index|[
name|Constants
operator|.
name|DAY_SAT
index|]
operator|.
name|equals
argument_list|(
name|day
argument_list|)
condition|)
name|dow
operator|+=
literal|"7"
expr_stmt|;
if|if
condition|(
name|Constants
operator|.
name|DAY_NAMES_FULL
index|[
name|Constants
operator|.
name|DAY_SUN
index|]
operator|.
name|equals
argument_list|(
name|day
argument_list|)
condition|)
name|dow
operator|+=
literal|"1"
expr_stmt|;
block|}
if|if
condition|(
name|dow
operator|.
name|indexOf
argument_list|(
literal|','
argument_list|)
operator|>=
literal|0
condition|)
name|restrictions
operator|+=
literal|" and "
operator|+
name|HibernateUtil
operator|.
name|dayOfWeek
argument_list|(
literal|"m.meetingDate"
argument_list|)
operator|+
literal|" in ("
operator|+
name|dow
operator|+
literal|")"
expr_stmt|;
else|else
name|restrictions
operator|+=
literal|" and "
operator|+
name|HibernateUtil
operator|.
name|dayOfWeek
argument_list|(
literal|"m.meetingDate"
argument_list|)
operator|+
literal|" = "
operator|+
name|dow
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"from"
argument_list|)
condition|)
block|{
try|try
block|{
name|restrictions
operator|+=
literal|" and m.meetingDate>= "
operator|+
name|HibernateUtil
operator|.
name|date
argument_list|(
operator|new
name|SimpleDateFormat
argument_list|(
name|CONSTANTS
operator|.
name|eventDateFormat
argument_list|()
argument_list|)
operator|.
name|parse
argument_list|(
name|request
operator|.
name|getOption
argument_list|(
literal|"from"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
block|}
block|}
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"to"
argument_list|)
condition|)
block|{
try|try
block|{
name|restrictions
operator|+=
literal|" and m.meetingDate<= "
operator|+
name|HibernateUtil
operator|.
name|date
argument_list|(
operator|new
name|SimpleDateFormat
argument_list|(
name|CONSTANTS
operator|.
name|eventDateFormat
argument_list|()
argument_list|)
operator|.
name|parse
argument_list|(
name|request
operator|.
name|getOption
argument_list|(
literal|"to"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
block|}
block|}
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"sponsor"
argument_list|)
condition|)
block|{
name|String
name|sponsor
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|request
operator|.
name|getOptions
argument_list|(
literal|"sponsor"
argument_list|)
control|)
name|sponsor
operator|+=
operator|(
name|sponsor
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|"'"
operator|+
name|s
operator|.
name|replace
argument_list|(
literal|"'"
argument_list|,
literal|"\\'"
argument_list|)
operator|+
literal|"'"
expr_stmt|;
name|restrictions
operator|+=
literal|" and e.sponsoringOrganization.name in ("
operator|+
name|sponsor
operator|+
literal|")"
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"mode"
argument_list|)
condition|)
block|{
name|String
name|mode
init|=
name|request
operator|.
name|getOption
argument_list|(
literal|"mode"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"My Events"
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
condition|)
block|{
name|restrictions
operator|+=
literal|" and e.mainContact.externalUniqueId = '"
operator|+
name|request
operator|.
name|getOption
argument_list|(
literal|"user"
argument_list|)
operator|+
literal|"'"
expr_stmt|;
block|}
if|else if
condition|(
literal|"Approved Events"
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
condition|)
block|{
name|restrictions
operator|+=
literal|" and e not in (select distinct x.event from Meeting x where x.approvedDate is null)"
expr_stmt|;
empty_stmt|;
block|}
if|else if
condition|(
literal|"Awaiting Events"
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
condition|)
block|{
name|restrictions
operator|+=
literal|" and m.approvedDate is null"
expr_stmt|;
block|}
if|else if
condition|(
literal|"Awaiting My Approval"
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
condition|)
block|{
name|restrictionsWhere
operator|+=
literal|", Location l inner join l.roomDepts rd inner join rd.department.timetableManagers g"
expr_stmt|;
name|restrictions
operator|=
literal|" and m.approvedDate is null"
operator|+
literal|" and l.session.uniqueId = :sessionId and l.permanentId = m.locationPermanentId and rd.control=true and g.externalUniqueId = '"
operator|+
name|request
operator|.
name|getOption
argument_list|(
literal|"user"
argument_list|)
operator|+
literal|"'"
expr_stmt|;
block|}
if|else if
condition|(
literal|"Conflicting Events"
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
condition|)
block|{
name|restrictionsWhere
operator|+=
literal|", Meeting mx"
expr_stmt|;
name|restrictions
operator|+=
literal|" and mx.uniqueId!=m.uniqueId and m.meetingDate=mx.meetingDate and m.startPeriod< mx.stopPeriod and m.stopPeriod> mx.startPeriod and m.locationPermanentId = mx.locationPermanentId"
expr_stmt|;
block|}
block|}
name|String
name|requested
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"requested"
argument_list|)
condition|)
block|{
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|request
operator|.
name|getOption
argument_list|(
literal|"requested"
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|,
literal|", "
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|token
init|=
name|s
operator|.
name|nextToken
argument_list|()
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
name|requested
operator|+=
literal|" and (upper(e.mainContact.firstName) like '%"
operator|+
name|token
operator|+
literal|"%' or upper(e.mainContact.middleName) like '%"
operator|+
name|token
operator|+
literal|"%' or upper(e.mainContact.lastName) like '%"
operator|+
name|token
operator|+
literal|"%')"
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|Event
argument_list|>
name|events
init|=
operator|(
name|List
argument_list|<
name|Event
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct e from Event e inner join e.meetings m, Location l inner join l.session s "
operator|+
name|restrictionsWhere
operator|+
literal|" where lower(e.eventName) like lower(:query) || '%' "
operator|+
literal|"and s.uniqueId = :sessionId and m.meetingDate>= s.eventBeginDate and m.meetingDate<= s.eventEndDate and m.locationPermanentId = l.permanentId "
operator|+
name|restrictions
operator|+
name|requested
operator|+
literal|" order by e.eventName"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"query"
argument_list|,
name|request
operator|.
name|getText
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|20
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|Event
name|event
range|:
name|events
control|)
name|response
operator|.
name|addSuggestion
argument_list|(
name|event
operator|.
name|getEventName
argument_list|()
argument_list|,
name|event
operator|.
name|getEventName
argument_list|()
argument_list|,
name|event
operator|.
name|getEventTypeLabel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|request
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|response
operator|.
name|getSuggestions
argument_list|()
operator|==
literal|null
operator|||
name|response
operator|.
name|getSuggestions
argument_list|()
operator|.
name|size
argument_list|()
operator|<
literal|20
operator|)
condition|)
block|{
name|String
name|contactFilter
init|=
literal|""
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|request
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
literal|", "
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|token
init|=
name|s
operator|.
name|nextToken
argument_list|()
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
name|contactFilter
operator|+=
literal|" and (upper(c.firstName) like '%"
operator|+
name|token
operator|+
literal|"%' or upper(c.middleName) like '%"
operator|+
name|token
operator|+
literal|"%' or upper(c.lastName) like '%"
operator|+
name|token
operator|+
literal|"%')"
expr_stmt|;
block|}
name|List
argument_list|<
name|EventContact
argument_list|>
name|contacts
init|=
operator|(
name|List
argument_list|<
name|EventContact
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct c from Event e inner join e.meetings m inner join e.mainContact c, Location l inner join l.session s "
operator|+
name|restrictionsWhere
operator|+
literal|" where s.uniqueId = :sessionId and m.meetingDate>= s.eventBeginDate and m.meetingDate<= s.eventEndDate and m.locationPermanentId = l.permanentId "
operator|+
name|restrictions
operator|+
name|contactFilter
operator|+
literal|" order by c.lastName, c.firstName, c.middleName"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|20
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|EventContact
name|contact
range|:
name|contacts
control|)
name|response
operator|.
name|addSuggestion
argument_list|(
name|contact
operator|.
name|getName
argument_list|()
argument_list|,
name|contact
operator|.
name|getName
argument_list|()
argument_list|,
literal|"Requested By"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|enumarate
parameter_list|(
name|FilterRpcRequest
name|request
parameter_list|,
name|FilterRpcResponse
name|response
parameter_list|)
block|{
block|}
block|}
end_class

end_unit

