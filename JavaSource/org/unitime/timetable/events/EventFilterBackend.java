begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.4 - 3.5 (University Timetabling Application)  * Copyright (C) 2012 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|events
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
operator|.
name|HibernateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|TimeSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|EventFilterRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|FilterRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|FilterRpcResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|FilterRpcResponse
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|EventContact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|FinalExamEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|MidtermExamEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SpecialEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|UnavailableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|EventDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|DateUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|GwtRpcImplements
argument_list|(
name|EventFilterRpcRequest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|EventFilterBackend
extends|extends
name|FilterBoxBackend
argument_list|<
name|EventFilterRpcRequest
argument_list|>
block|{
specifier|public
specifier|static
name|GwtConstants
name|CONSTANTS
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|load
parameter_list|(
name|EventFilterRpcRequest
name|request
parameter_list|,
name|FilterRpcResponse
name|response
parameter_list|,
name|EventContext
name|context
parameter_list|)
block|{
name|EventQuery
name|query
init|=
name|getQuery
argument_list|(
name|request
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Localization
operator|.
name|getJavaLocale
argument_list|()
argument_list|)
decl_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Date
name|today
init|=
name|cal
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|EventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|type2count
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|query
operator|.
name|select
argument_list|(
literal|"e.class, count(distinct e)"
argument_list|)
operator|.
name|group
argument_list|(
literal|"e.class"
argument_list|)
operator|.
name|order
argument_list|(
literal|"e.class"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"query"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"type"
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|int
name|type
init|=
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|0
index|]
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|int
name|count
init|=
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|1
index|]
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|type2count
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Event
operator|.
name|sEventTypesAbbv
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Entity
name|e
init|=
operator|new
name|Entity
argument_list|(
operator|new
name|Long
argument_list|(
name|i
argument_list|)
argument_list|,
name|Event
operator|.
name|sEventTypesAbbv
index|[
name|i
index|]
argument_list|,
name|Event
operator|.
name|sEventTypesAbbv
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|Integer
name|count
init|=
name|type2count
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|e
operator|.
name|setCount
argument_list|(
name|count
operator|==
literal|null
condition|?
literal|0
else|:
name|count
argument_list|)
expr_stmt|;
name|response
operator|.
name|add
argument_list|(
literal|"type"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|day2count
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|query
operator|.
name|select
argument_list|(
name|HibernateUtil
operator|.
name|dayOfWeek
argument_list|(
literal|"m.meetingDate"
argument_list|)
operator|+
literal|", count(distinct e)"
argument_list|)
operator|.
name|order
argument_list|(
name|HibernateUtil
operator|.
name|dayOfWeek
argument_list|(
literal|"m.meetingDate"
argument_list|)
argument_list|)
operator|.
name|group
argument_list|(
name|HibernateUtil
operator|.
name|dayOfWeek
argument_list|(
literal|"m.meetingDate"
argument_list|)
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"query"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"day"
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|int
name|type
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|o
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|count
init|=
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|1
index|]
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|day2count
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|DAY_NAMES_FULL
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|day
init|=
name|Constants
operator|.
name|DAY_NAMES_FULL
index|[
name|i
index|]
decl_stmt|;
name|int
name|type
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|i
condition|)
block|{
case|case
name|Constants
operator|.
name|DAY_SUN
case|:
name|type
operator|=
literal|1
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|DAY_MON
case|:
name|type
operator|=
literal|2
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|DAY_TUE
case|:
name|type
operator|=
literal|3
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|DAY_WED
case|:
name|type
operator|=
literal|4
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|DAY_THU
case|:
name|type
operator|=
literal|5
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|DAY_FRI
case|:
name|type
operator|=
literal|6
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|DAY_SAT
case|:
name|type
operator|=
literal|7
expr_stmt|;
break|break;
block|}
name|Integer
name|count
init|=
name|day2count
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|Entity
name|e
init|=
operator|new
name|Entity
argument_list|(
operator|new
name|Long
argument_list|(
name|type
argument_list|)
argument_list|,
name|day
argument_list|,
name|day
argument_list|)
decl_stmt|;
name|e
operator|.
name|setCount
argument_list|(
name|count
operator|==
literal|null
condition|?
literal|0
else|:
name|count
argument_list|)
expr_stmt|;
name|response
operator|.
name|add
argument_list|(
literal|"day"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|Entity
name|all
init|=
operator|new
name|Entity
argument_list|(
literal|0l
argument_list|,
literal|"All"
argument_list|,
literal|"All Events"
argument_list|)
decl_stmt|;
name|all
operator|.
name|setCount
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|query
operator|.
name|select
argument_list|(
literal|"count(distinct e)"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"query"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"mode"
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|add
argument_list|(
literal|"mode"
argument_list|,
name|all
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|isAuthenticated
argument_list|()
operator|&&
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|myCnt
init|=
operator|(
operator|(
name|Number
operator|)
name|query
operator|.
name|select
argument_list|(
literal|"count(distinct e)"
argument_list|)
operator|.
name|where
argument_list|(
literal|"e.mainContact.externalUniqueId = :user and e.class not in (ClassEvent, FinalExamEvent, MidtermExamEvent)"
argument_list|)
operator|.
name|set
argument_list|(
literal|"user"
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalUserId
argument_list|()
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"query"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"mode"
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|Entity
name|my
init|=
operator|new
name|Entity
argument_list|(
literal|1l
argument_list|,
literal|"My"
argument_list|,
literal|"My Events"
argument_list|)
decl_stmt|;
name|my
operator|.
name|setCount
argument_list|(
name|myCnt
argument_list|)
expr_stmt|;
name|response
operator|.
name|add
argument_list|(
literal|"mode"
argument_list|,
name|my
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|HasRole
argument_list|)
condition|)
block|{
name|int
name|approvedCnt
init|=
operator|(
operator|(
name|Number
operator|)
name|query
operator|.
name|select
argument_list|(
literal|"count(distinct e)"
argument_list|)
operator|.
name|where
argument_list|(
literal|"m.approvalStatus = 1"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"query"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"mode"
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|Entity
name|approved
init|=
operator|new
name|Entity
argument_list|(
literal|2l
argument_list|,
literal|"Approved"
argument_list|,
literal|"Approved Events"
argument_list|)
decl_stmt|;
name|approved
operator|.
name|setCount
argument_list|(
name|approvedCnt
argument_list|)
expr_stmt|;
name|response
operator|.
name|add
argument_list|(
literal|"mode"
argument_list|,
name|approved
argument_list|)
expr_stmt|;
name|int
name|notApprovedCnt
init|=
operator|(
operator|(
name|Number
operator|)
name|query
operator|.
name|select
argument_list|(
literal|"count(distinct e)"
argument_list|)
operator|.
name|where
argument_list|(
literal|"m.approvalStatus = 0"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"query"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"mode"
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|Entity
name|notApproved
init|=
operator|new
name|Entity
argument_list|(
literal|3l
argument_list|,
literal|"Unapproved"
argument_list|,
literal|"Not Approved Events"
argument_list|)
decl_stmt|;
name|notApproved
operator|.
name|setCount
argument_list|(
name|notApprovedCnt
argument_list|)
expr_stmt|;
name|response
operator|.
name|add
argument_list|(
literal|"mode"
argument_list|,
name|notApproved
argument_list|)
expr_stmt|;
name|int
name|conflictingCnt
init|=
operator|(
operator|(
name|Number
operator|)
name|query
operator|.
name|select
argument_list|(
literal|"count(distinct e)"
argument_list|)
operator|.
name|from
argument_list|(
literal|"Meeting mx"
argument_list|)
operator|.
name|where
argument_list|(
literal|"mx.uniqueId!=m.uniqueId and m.meetingDate=mx.meetingDate and m.startPeriod< mx.stopPeriod and m.stopPeriod> mx.startPeriod and m.locationPermanentId = mx.locationPermanentId and m.approvalStatus<= 1 and mx.approvalStatus<= 1"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"query"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"mode"
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|Entity
name|conflicting
init|=
operator|new
name|Entity
argument_list|(
literal|5l
argument_list|,
literal|"Conflicting"
argument_list|,
literal|"Conflicting Events"
argument_list|)
decl_stmt|;
name|conflicting
operator|.
name|setCount
argument_list|(
name|conflictingCnt
argument_list|)
expr_stmt|;
name|response
operator|.
name|add
argument_list|(
literal|"mode"
argument_list|,
name|conflicting
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|EventMeetingApprove
argument_list|)
condition|)
block|{
name|int
name|awaitingCnt
init|=
operator|(
operator|(
name|Number
operator|)
name|query
operator|.
name|select
argument_list|(
literal|"count(distinct e)"
argument_list|)
operator|.
name|where
argument_list|(
literal|"m.approvalStatus = 0 and m.meetingDate>= :today"
argument_list|)
operator|.
name|set
argument_list|(
literal|"today"
argument_list|,
name|today
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"query"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"mode"
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|Entity
name|awaiting
init|=
operator|new
name|Entity
argument_list|(
literal|4l
argument_list|,
literal|"Awaiting"
argument_list|,
literal|"Awaiting Events"
argument_list|)
decl_stmt|;
name|awaiting
operator|.
name|setCount
argument_list|(
name|awaitingCnt
argument_list|)
expr_stmt|;
name|response
operator|.
name|add
argument_list|(
literal|"mode"
argument_list|,
name|awaiting
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|EventMeetingApprove
argument_list|)
condition|)
block|{
name|int
name|myApprovalCnt
init|=
operator|(
operator|(
name|Number
operator|)
name|query
operator|.
name|select
argument_list|(
literal|"count(distinct e)"
argument_list|)
operator|.
name|joinWithLocation
argument_list|()
operator|.
name|from
argument_list|(
literal|"inner join l.eventDepartment.timetableManagers g"
argument_list|)
operator|.
name|where
argument_list|(
literal|"m.approvalStatus = 0 and g.externalUniqueId = :user and m.meetingDate>= :today"
argument_list|)
operator|.
name|set
argument_list|(
literal|"user"
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalUserId
argument_list|()
argument_list|)
operator|.
name|set
argument_list|(
literal|"today"
argument_list|,
name|today
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"query"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"mode"
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|Entity
name|myAwaiting
init|=
operator|new
name|Entity
argument_list|(
literal|6l
argument_list|,
literal|"My Awaiting"
argument_list|,
literal|"Awaiting My Approval"
argument_list|)
decl_stmt|;
name|myAwaiting
operator|.
name|setCount
argument_list|(
name|myApprovalCnt
argument_list|)
expr_stmt|;
name|response
operator|.
name|add
argument_list|(
literal|"mode"
argument_list|,
name|myAwaiting
argument_list|)
expr_stmt|;
block|}
name|int
name|rejectedCnt
init|=
operator|(
operator|(
name|Number
operator|)
name|query
operator|.
name|select
argument_list|(
literal|"count(distinct e)"
argument_list|)
operator|.
name|where
argument_list|(
literal|"m.approvalStatus>= 2"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"query"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"mode"
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|Entity
name|rejected
init|=
operator|new
name|Entity
argument_list|(
literal|7l
argument_list|,
literal|"Cancelled"
argument_list|,
literal|"Cancelled / Rejected"
argument_list|)
decl_stmt|;
name|rejected
operator|.
name|setCount
argument_list|(
name|rejectedCnt
argument_list|)
expr_stmt|;
name|response
operator|.
name|add
argument_list|(
literal|"mode"
argument_list|,
name|rejected
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|EventSetExpiration
argument_list|)
condition|)
block|{
name|int
name|expiringCnt
init|=
operator|(
operator|(
name|Number
operator|)
name|query
operator|.
name|select
argument_list|(
literal|"count(distinct e)"
argument_list|)
operator|.
name|where
argument_list|(
literal|"m.approvalStatus = 0 and e.expirationDate is not null"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"query"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"mode"
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|Entity
name|expiring
init|=
operator|new
name|Entity
argument_list|(
literal|8l
argument_list|,
literal|"Expiring"
argument_list|,
literal|"Expiring Events"
argument_list|)
decl_stmt|;
name|expiring
operator|.
name|setCount
argument_list|(
name|expiringCnt
argument_list|)
expr_stmt|;
name|response
operator|.
name|add
argument_list|(
literal|"mode"
argument_list|,
name|expiring
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Object
index|[]
name|org
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|query
operator|.
name|select
argument_list|(
literal|"o.uniqueId, o.name, count(distinct e)"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.sponsoringOrganization o"
argument_list|)
operator|.
name|group
argument_list|(
literal|"o.uniqueId, o.name"
argument_list|)
operator|.
name|order
argument_list|(
literal|"o.name"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"query"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"sponsor"
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Long
name|id
init|=
operator|(
name|Long
operator|)
name|org
index|[
literal|0
index|]
decl_stmt|;
name|String
name|name
init|=
operator|(
name|String
operator|)
name|org
index|[
literal|1
index|]
decl_stmt|;
name|int
name|count
init|=
operator|(
operator|(
name|Number
operator|)
name|org
index|[
literal|2
index|]
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|Entity
name|sponsor
init|=
operator|new
name|Entity
argument_list|(
name|id
argument_list|,
name|name
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|sponsor
operator|.
name|setCount
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|response
operator|.
name|add
argument_list|(
literal|"sponsor"
argument_list|,
name|sponsor
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|EventQuery
name|getQuery
parameter_list|(
name|FilterRpcRequest
name|request
parameter_list|,
name|EventContext
name|context
parameter_list|)
block|{
name|EventQuery
name|query
init|=
operator|new
name|EventQuery
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"flag"
argument_list|)
condition|)
block|{
if|if
condition|(
name|request
operator|.
name|getOption
argument_list|(
literal|"flag"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"All Sessions"
argument_list|)
condition|)
name|query
operator|.
name|checkSession
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Localization
operator|.
name|getJavaLocale
argument_list|()
argument_list|)
decl_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Date
name|today
init|=
name|cal
operator|.
name|getTime
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|HasRole
argument_list|)
condition|)
block|{
name|Session
name|session
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|prohibitedTypes
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|canNoRoleReportClass
argument_list|()
condition|)
name|prohibitedTypes
operator|=
literal|"ClassEvent"
expr_stmt|;
if|if
condition|(
operator|!
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|canNoRoleReportExamFinal
argument_list|()
condition|)
name|prohibitedTypes
operator|=
operator|(
name|prohibitedTypes
operator|==
literal|null
condition|?
literal|"FinalExamEvent"
else|:
name|prohibitedTypes
operator|+
literal|",FinalExamEvent"
operator|)
expr_stmt|;
if|if
condition|(
operator|!
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|canNoRoleReportExamMidterm
argument_list|()
condition|)
name|prohibitedTypes
operator|=
operator|(
name|prohibitedTypes
operator|==
literal|null
condition|?
literal|"MidtermExamEvent"
else|:
name|prohibitedTypes
operator|+
literal|",MidtermExamEvent"
operator|)
expr_stmt|;
if|if
condition|(
name|prohibitedTypes
operator|!=
literal|null
condition|)
name|query
operator|.
name|addWhere
argument_list|(
literal|"xtype"
argument_list|,
literal|"e.class not in ("
operator|+
name|prohibitedTypes
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|getText
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|request
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|query
operator|.
name|addWhere
argument_list|(
literal|"query"
argument_list|,
literal|"lower(e.eventName) like lower(:Xquery) || '%'"
operator|+
operator|(
name|request
operator|.
name|getText
argument_list|()
operator|.
name|length
argument_list|()
operator|>=
literal|2
condition|?
literal|" or lower(e.eventName) like '% ' || lower(:Xquery) || '%'"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"query"
argument_list|,
literal|"Xquery"
argument_list|,
name|request
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"type"
argument_list|)
condition|)
block|{
name|String
name|type
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|t
range|:
name|request
operator|.
name|getOptions
argument_list|(
literal|"type"
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|type
operator|.
name|isEmpty
argument_list|()
condition|)
name|type
operator|+=
literal|","
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|equals
argument_list|(
name|Event
operator|.
name|sEventTypesAbbv
index|[
name|Event
operator|.
name|sEventTypeClass
index|]
argument_list|)
condition|)
name|type
operator|+=
name|ClassEvent
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|equals
argument_list|(
name|Event
operator|.
name|sEventTypesAbbv
index|[
name|Event
operator|.
name|sEventTypeCourse
index|]
argument_list|)
condition|)
name|type
operator|+=
name|CourseEvent
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|equals
argument_list|(
name|Event
operator|.
name|sEventTypesAbbv
index|[
name|Event
operator|.
name|sEventTypeSpecial
index|]
argument_list|)
condition|)
name|type
operator|+=
name|SpecialEvent
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|equals
argument_list|(
name|Event
operator|.
name|sEventTypesAbbv
index|[
name|Event
operator|.
name|sEventTypeFinalExam
index|]
argument_list|)
condition|)
name|type
operator|+=
name|FinalExamEvent
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|equals
argument_list|(
name|Event
operator|.
name|sEventTypesAbbv
index|[
name|Event
operator|.
name|sEventTypeMidtermExam
index|]
argument_list|)
condition|)
name|type
operator|+=
name|MidtermExamEvent
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|equals
argument_list|(
name|Event
operator|.
name|sEventTypesAbbv
index|[
name|Event
operator|.
name|sEventTypeUnavailable
index|]
argument_list|)
condition|)
name|type
operator|+=
name|UnavailableEvent
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|query
operator|.
name|addWhere
argument_list|(
literal|"type"
argument_list|,
literal|"e.class in ("
operator|+
name|type
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
name|Integer
name|after
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"after"
argument_list|)
condition|)
block|{
name|after
operator|=
name|TimeSelector
operator|.
name|TimeUtils
operator|.
name|parseTime
argument_list|(
name|CONSTANTS
argument_list|,
name|request
operator|.
name|getOption
argument_list|(
literal|"after"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|query
operator|.
name|addWhere
argument_list|(
literal|"after"
argument_list|,
literal|"m.stopPeriod> :Xafter"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"after"
argument_list|,
literal|"Xafter"
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"before"
argument_list|)
condition|)
block|{
name|query
operator|.
name|addWhere
argument_list|(
literal|"before"
argument_list|,
literal|"m.startPeriod< :Xbefore"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"before"
argument_list|,
literal|"Xbefore"
argument_list|,
name|TimeSelector
operator|.
name|TimeUtils
operator|.
name|parseTime
argument_list|(
name|CONSTANTS
argument_list|,
name|request
operator|.
name|getOption
argument_list|(
literal|"before"
argument_list|)
argument_list|,
name|after
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"day"
argument_list|)
condition|)
block|{
name|String
name|dow
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|day
range|:
name|request
operator|.
name|getOptions
argument_list|(
literal|"day"
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|dow
operator|.
name|isEmpty
argument_list|()
condition|)
name|dow
operator|+=
literal|","
expr_stmt|;
if|if
condition|(
name|Constants
operator|.
name|DAY_NAMES_FULL
index|[
name|Constants
operator|.
name|DAY_MON
index|]
operator|.
name|equals
argument_list|(
name|day
argument_list|)
condition|)
name|dow
operator|+=
literal|"2"
expr_stmt|;
if|if
condition|(
name|Constants
operator|.
name|DAY_NAMES_FULL
index|[
name|Constants
operator|.
name|DAY_TUE
index|]
operator|.
name|equals
argument_list|(
name|day
argument_list|)
condition|)
name|dow
operator|+=
literal|"3"
expr_stmt|;
if|if
condition|(
name|Constants
operator|.
name|DAY_NAMES_FULL
index|[
name|Constants
operator|.
name|DAY_WED
index|]
operator|.
name|equals
argument_list|(
name|day
argument_list|)
condition|)
name|dow
operator|+=
literal|"4"
expr_stmt|;
if|if
condition|(
name|Constants
operator|.
name|DAY_NAMES_FULL
index|[
name|Constants
operator|.
name|DAY_THU
index|]
operator|.
name|equals
argument_list|(
name|day
argument_list|)
condition|)
name|dow
operator|+=
literal|"5"
expr_stmt|;
if|if
condition|(
name|Constants
operator|.
name|DAY_NAMES_FULL
index|[
name|Constants
operator|.
name|DAY_FRI
index|]
operator|.
name|equals
argument_list|(
name|day
argument_list|)
condition|)
name|dow
operator|+=
literal|"6"
expr_stmt|;
if|if
condition|(
name|Constants
operator|.
name|DAY_NAMES_FULL
index|[
name|Constants
operator|.
name|DAY_SAT
index|]
operator|.
name|equals
argument_list|(
name|day
argument_list|)
condition|)
name|dow
operator|+=
literal|"7"
expr_stmt|;
if|if
condition|(
name|Constants
operator|.
name|DAY_NAMES_FULL
index|[
name|Constants
operator|.
name|DAY_SUN
index|]
operator|.
name|equals
argument_list|(
name|day
argument_list|)
condition|)
name|dow
operator|+=
literal|"1"
expr_stmt|;
block|}
if|if
condition|(
name|dow
operator|.
name|indexOf
argument_list|(
literal|','
argument_list|)
operator|>=
literal|0
condition|)
name|query
operator|.
name|addWhere
argument_list|(
literal|"day"
argument_list|,
name|HibernateUtil
operator|.
name|dayOfWeek
argument_list|(
literal|"m.meetingDate"
argument_list|)
operator|+
literal|" in ("
operator|+
name|dow
operator|+
literal|")"
argument_list|)
expr_stmt|;
else|else
name|query
operator|.
name|addWhere
argument_list|(
literal|"day"
argument_list|,
name|HibernateUtil
operator|.
name|dayOfWeek
argument_list|(
literal|"m.meetingDate"
argument_list|)
operator|+
literal|" = "
operator|+
name|dow
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"from"
argument_list|)
condition|)
block|{
name|Date
name|date
init|=
literal|null
decl_stmt|;
try|try
block|{
name|int
name|dayOfYear
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|request
operator|.
name|getOption
argument_list|(
literal|"from"
argument_list|)
argument_list|)
decl_stmt|;
name|date
operator|=
name|DateUtils
operator|.
name|getDate
argument_list|(
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|getSessionStartYear
argument_list|()
argument_list|,
name|dayOfYear
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|f
parameter_list|)
block|{
try|try
block|{
name|date
operator|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|DATE_EVENT
argument_list|)
operator|.
name|parse
argument_list|(
name|request
operator|.
name|getOption
argument_list|(
literal|"from"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|p
parameter_list|)
block|{
block|}
block|}
if|if
condition|(
name|date
operator|!=
literal|null
condition|)
block|{
name|query
operator|.
name|addParameter
argument_list|(
literal|"from"
argument_list|,
literal|"Xfrom"
argument_list|,
name|date
argument_list|)
expr_stmt|;
name|query
operator|.
name|addWhere
argument_list|(
literal|"from"
argument_list|,
literal|"m.meetingDate>= :Xfrom"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"to"
argument_list|)
condition|)
block|{
name|Date
name|last
init|=
literal|null
decl_stmt|;
try|try
block|{
name|int
name|dayOfYear
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|request
operator|.
name|getOption
argument_list|(
literal|"to"
argument_list|)
argument_list|)
decl_stmt|;
name|last
operator|=
name|DateUtils
operator|.
name|getDate
argument_list|(
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|getSessionStartYear
argument_list|()
argument_list|,
name|dayOfYear
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|f
parameter_list|)
block|{
try|try
block|{
name|last
operator|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|DATE_EVENT
argument_list|)
operator|.
name|parse
argument_list|(
name|request
operator|.
name|getOption
argument_list|(
literal|"to"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|p
parameter_list|)
block|{
block|}
block|}
if|if
condition|(
name|last
operator|!=
literal|null
condition|)
block|{
name|query
operator|.
name|addParameter
argument_list|(
literal|"to"
argument_list|,
literal|"Xto"
argument_list|,
name|last
argument_list|)
expr_stmt|;
name|query
operator|.
name|addWhere
argument_list|(
literal|"to"
argument_list|,
literal|"m.meetingDate<= :Xto"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"dates"
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|Date
argument_list|>
name|dates
init|=
operator|new
name|ArrayList
argument_list|<
name|Date
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|ids
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|d
range|:
name|request
operator|.
name|getOptions
argument_list|(
literal|"dates"
argument_list|)
control|)
block|{
name|Date
name|date
init|=
literal|null
decl_stmt|;
try|try
block|{
name|int
name|dayOfYear
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|date
operator|=
name|DateUtils
operator|.
name|getDate
argument_list|(
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|getSessionStartYear
argument_list|()
argument_list|,
name|dayOfYear
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|f
parameter_list|)
block|{
try|try
block|{
name|date
operator|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|DATE_EVENT
argument_list|)
operator|.
name|parse
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|p
parameter_list|)
block|{
block|}
block|}
if|if
condition|(
name|date
operator|!=
literal|null
condition|)
block|{
name|ids
operator|+=
operator|(
name|ids
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|":Xdate"
operator|+
name|dates
operator|.
name|size
argument_list|()
expr_stmt|;
name|dates
operator|.
name|add
argument_list|(
name|date
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|dates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|query
operator|.
name|addWhere
argument_list|(
literal|"dates"
argument_list|,
literal|"m.meetingDate in ("
operator|+
name|ids
operator|+
literal|")"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dates
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|query
operator|.
name|addParameter
argument_list|(
literal|"dates"
argument_list|,
literal|"Xdate"
operator|+
name|i
argument_list|,
name|dates
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"room"
argument_list|)
condition|)
block|{
name|String
name|ids
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|id
range|:
name|request
operator|.
name|getOptions
argument_list|(
literal|"room"
argument_list|)
control|)
block|{
name|ids
operator|+=
operator|(
name|ids
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
name|id
expr_stmt|;
block|}
name|query
operator|.
name|addWhere
argument_list|(
literal|"room"
argument_list|,
literal|"l.uniqueId in ("
operator|+
name|ids
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasOptions
argument_list|(
literal|"sponsor"
argument_list|)
condition|)
block|{
name|String
name|sponsor
init|=
literal|""
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|request
operator|.
name|getOptions
argument_list|(
literal|"sponsor"
argument_list|)
control|)
block|{
name|sponsor
operator|+=
operator|(
name|sponsor
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|":Xsp"
operator|+
name|id
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"sponsor"
argument_list|,
literal|"Xsp"
operator|+
name|id
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
name|query
operator|.
name|addWhere
argument_list|(
literal|"sponsor"
argument_list|,
literal|"e.sponsoringOrganization.name in ("
operator|+
name|sponsor
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"mode"
argument_list|)
condition|)
block|{
name|String
name|mode
init|=
name|request
operator|.
name|getOption
argument_list|(
literal|"mode"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"My Events"
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
operator|&&
name|context
operator|.
name|isAuthenticated
argument_list|()
condition|)
block|{
name|query
operator|.
name|addWhere
argument_list|(
literal|"mode"
argument_list|,
literal|"e.mainContact.externalUniqueId = :Xowner and e.class not in (ClassEvent, FinalExamEvent, MidtermExamEvent)"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"mode"
argument_list|,
literal|"Xowner"
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalUserId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"Approved Events"
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
condition|)
block|{
name|query
operator|.
name|addWhere
argument_list|(
literal|"mode"
argument_list|,
literal|"m.approvalStatus = 1"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"Not Approved Events"
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
condition|)
block|{
name|query
operator|.
name|addWhere
argument_list|(
literal|"mode"
argument_list|,
literal|"m.approvalStatus = 0"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"Awaiting Events"
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
condition|)
block|{
name|query
operator|.
name|addWhere
argument_list|(
literal|"mode"
argument_list|,
literal|"m.approvalStatus = 0 and m.meetingDate>= :Xtoday"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"mode"
argument_list|,
literal|"Xtoday"
argument_list|,
name|today
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"Awaiting My Approval"
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
operator|&&
name|context
operator|.
name|isAuthenticated
argument_list|()
condition|)
block|{
name|query
operator|.
name|addFrom
argument_list|(
literal|"mode"
argument_list|,
literal|"Location Xl inner join Xl.eventDepartment.timetableManagers Xg"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addWhere
argument_list|(
literal|"mode"
argument_list|,
literal|"m.approvalStatus = 0 and Xl.session.uniqueId = :sessionId and Xl.permanentId = m.locationPermanentId and Xg.externalUniqueId = :Xuser and m.meetingDate>= :Xtoday"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"mode"
argument_list|,
literal|"Xuser"
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalUserId
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"mode"
argument_list|,
literal|"Xtoday"
argument_list|,
name|today
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"Conflicting Events"
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
condition|)
block|{
name|query
operator|.
name|addFrom
argument_list|(
literal|"mode"
argument_list|,
literal|"Meeting Xm"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addWhere
argument_list|(
literal|"mode"
argument_list|,
literal|"Xm.uniqueId != m.uniqueId and m.meetingDate = Xm.meetingDate and m.startPeriod< Xm.stopPeriod and m.stopPeriod> Xm.startPeriod and m.locationPermanentId = Xm.locationPermanentId and m.approvalStatus<= 1 and Xm.approvalStatus<= 1"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"Cancelled / Rejected"
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
condition|)
block|{
name|query
operator|.
name|addWhere
argument_list|(
literal|"mode"
argument_list|,
literal|"m.approvalStatus>= 2"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"Expiring Events"
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
condition|)
block|{
name|query
operator|.
name|addWhere
argument_list|(
literal|"mode"
argument_list|,
literal|"m.approvalStatus = 0 and e.expirationDate is not null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|.
name|addWhere
argument_list|(
literal|"mode"
argument_list|,
literal|"m.approvalStatus<= 1"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|hasOption
argument_list|(
literal|"requested"
argument_list|)
condition|)
name|query
operator|.
name|addWhere
argument_list|(
literal|"mode"
argument_list|,
literal|"m.approvalStatus<= 1"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|hasOption
argument_list|(
literal|"requested"
argument_list|)
condition|)
block|{
name|String
name|requested
init|=
literal|""
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|request
operator|.
name|getOption
argument_list|(
literal|"requested"
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|,
literal|", "
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|token
init|=
name|s
operator|.
name|nextToken
argument_list|()
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
name|requested
operator|+=
operator|(
name|requested
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|" and "
operator|)
operator|+
literal|"(upper(e.mainContact.firstName) like :Xreq"
operator|+
name|id
operator|+
literal|" || '%' or "
operator|+
literal|"upper(e.mainContact.middleName) like :Xreq"
operator|+
name|id
operator|+
literal|" || '%' or upper(e.mainContact.lastName) like :Xreq"
operator|+
name|id
operator|+
literal|" || '%' or upper(e.mainContact.emailAddress) like :Xreq"
operator|+
name|id
operator|+
literal|" || '%')"
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"requested"
argument_list|,
literal|"Xreq"
operator|+
name|id
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|id
operator|>
literal|0
condition|)
block|{
name|requested
operator|=
literal|"("
operator|+
name|requested
operator|+
literal|") or (upper(trim(trailing ' ' from e.mainContact.lastName || ', ' || e.mainContact.firstName || ' ' || e.mainContact.middleName)) = :Xreq)"
expr_stmt|;
name|query
operator|.
name|addParameter
argument_list|(
literal|"requested"
argument_list|,
literal|"Xreq"
argument_list|,
name|request
operator|.
name|getOption
argument_list|(
literal|"requested"
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|.
name|addWhere
argument_list|(
literal|"requested"
argument_list|,
name|requested
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|query
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|suggestions
parameter_list|(
name|EventFilterRpcRequest
name|request
parameter_list|,
name|FilterRpcResponse
name|response
parameter_list|,
name|EventContext
name|context
parameter_list|)
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|EventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|EventQuery
name|query
init|=
name|getQuery
argument_list|(
name|request
argument_list|,
name|context
argument_list|)
decl_stmt|;
for|for
control|(
name|Event
name|event
range|:
operator|(
name|List
argument_list|<
name|Event
argument_list|>
operator|)
name|query
operator|.
name|select
argument_list|(
literal|"distinct e"
argument_list|)
operator|.
name|limit
argument_list|(
literal|20
argument_list|)
operator|.
name|order
argument_list|(
literal|"e.eventName"
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
control|)
name|response
operator|.
name|addSuggestion
argument_list|(
name|event
operator|.
name|getEventName
argument_list|()
argument_list|,
name|event
operator|.
name|getEventName
argument_list|()
argument_list|,
name|event
operator|.
name|getEventTypeLabel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|EventLookupContact
argument_list|)
operator|||
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|EventLookupSchedule
argument_list|)
operator|)
operator|&&
operator|(
operator|!
name|request
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|response
operator|.
name|getSuggestions
argument_list|()
operator|==
literal|null
operator|||
name|response
operator|.
name|getSuggestions
argument_list|()
operator|.
name|size
argument_list|()
operator|<
literal|20
operator|)
operator|)
condition|)
block|{
name|EventQuery
operator|.
name|EventInstance
name|instance
init|=
name|query
operator|.
name|select
argument_list|(
literal|"distinct c"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.mainContact c"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"sponsor"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"requested"
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"query"
argument_list|)
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|request
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
literal|", "
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|token
init|=
name|s
operator|.
name|nextToken
argument_list|()
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
name|instance
operator|.
name|where
argument_list|(
literal|"upper(c.firstName) like :cn"
operator|+
name|id
operator|+
literal|" || '%' or upper(c.middleName) like :cn"
operator|+
name|id
operator|+
literal|" || '%' or upper(c.lastName) like :cn"
operator|+
name|id
operator|+
literal|" || '%' or upper(c.emailAddress) like :cn"
operator|+
name|id
operator|+
literal|" || '%'"
argument_list|)
operator|.
name|set
argument_list|(
literal|"cn"
operator|+
name|id
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|contacts
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|>
literal|0
condition|)
for|for
control|(
name|EventContact
name|contact
range|:
operator|(
name|List
argument_list|<
name|EventContact
argument_list|>
operator|)
name|instance
operator|.
name|limit
argument_list|(
literal|20
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
control|)
if|if
condition|(
name|contacts
operator|.
name|add
argument_list|(
name|contact
operator|.
name|getName
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
name|response
operator|.
name|addSuggestion
argument_list|(
name|contact
operator|.
name|getName
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
name|contact
operator|.
name|getName
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
literal|"Requested By"
argument_list|,
literal|"requested"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|enumarate
parameter_list|(
name|EventFilterRpcRequest
name|request
parameter_list|,
name|FilterRpcResponse
name|response
parameter_list|,
name|EventContext
name|context
parameter_list|)
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|EventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|EventQuery
name|query
init|=
name|getQuery
argument_list|(
name|request
argument_list|,
name|context
argument_list|)
decl_stmt|;
for|for
control|(
name|Event
name|event
range|:
operator|(
name|List
argument_list|<
name|Event
argument_list|>
operator|)
name|query
operator|.
name|select
argument_list|(
literal|"distinct e"
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Entity
name|entity
init|=
operator|new
name|Entity
argument_list|(
name|event
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|event
operator|.
name|getEventTypeAbbv
argument_list|()
argument_list|,
name|event
operator|.
name|getEventName
argument_list|()
argument_list|)
decl_stmt|;
name|response
operator|.
name|addResult
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|EventQuery
block|{
specifier|private
name|Long
name|iSessionId
decl_stmt|;
specifier|private
name|boolean
name|iCheckSession
init|=
literal|true
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|iFrom
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|iWhere
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|iParams
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|EventQuery
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
name|iSessionId
operator|=
name|sessionId
expr_stmt|;
block|}
specifier|public
name|void
name|checkSession
parameter_list|(
name|boolean
name|check
parameter_list|)
block|{
name|iCheckSession
operator|=
name|check
expr_stmt|;
block|}
specifier|public
name|void
name|addFrom
parameter_list|(
name|String
name|option
parameter_list|,
name|String
name|from
parameter_list|)
block|{
name|iFrom
operator|.
name|put
argument_list|(
name|option
argument_list|,
name|from
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addWhere
parameter_list|(
name|String
name|option
parameter_list|,
name|String
name|where
parameter_list|)
block|{
name|iWhere
operator|.
name|put
argument_list|(
name|option
argument_list|,
name|where
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addParameter
parameter_list|(
name|String
name|option
parameter_list|,
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
name|iParams
operator|.
name|get
argument_list|(
name|option
argument_list|)
decl_stmt|;
if|if
condition|(
name|params
operator|==
literal|null
condition|)
block|{
name|params
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|iParams
operator|.
name|put
argument_list|(
name|option
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|params
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getFrom
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|excludeOption
parameter_list|)
block|{
name|String
name|from
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|iFrom
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|excludeOption
operator|!=
literal|null
operator|&&
name|excludeOption
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
continue|continue;
name|from
operator|+=
literal|", "
operator|+
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
return|return
name|from
return|;
block|}
specifier|public
name|String
name|getWhere
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|excludeOption
parameter_list|)
block|{
name|String
name|where
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|iWhere
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|excludeOption
operator|!=
literal|null
operator|&&
name|excludeOption
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
continue|continue;
name|where
operator|+=
literal|" and ("
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|+
literal|")"
expr_stmt|;
block|}
return|return
name|where
return|;
block|}
specifier|public
name|org
operator|.
name|hibernate
operator|.
name|Query
name|setParams
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Query
name|query
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|excludeOption
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|entry
range|:
name|iParams
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|excludeOption
operator|!=
literal|null
operator|&&
name|excludeOption
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
continue|continue;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|param
range|:
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Integer
condition|)
block|{
name|query
operator|.
name|setInteger
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Integer
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Long
condition|)
block|{
name|query
operator|.
name|setLong
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Long
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|String
condition|)
block|{
name|query
operator|.
name|setString
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Boolean
condition|)
block|{
name|query
operator|.
name|setBoolean
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Boolean
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Date
condition|)
block|{
name|query
operator|.
name|setDate
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Date
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|.
name|setString
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
name|param
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|query
return|;
block|}
specifier|public
name|EventInstance
name|select
parameter_list|(
name|String
name|select
parameter_list|)
block|{
return|return
operator|new
name|EventInstance
argument_list|(
name|select
argument_list|,
name|iWhere
operator|.
name|containsKey
argument_list|(
literal|"room"
argument_list|)
argument_list|)
return|;
block|}
specifier|public
class|class
name|EventInstance
block|{
specifier|private
name|String
name|iSelect
init|=
literal|null
decl_stmt|,
name|iFrom
init|=
literal|null
decl_stmt|,
name|iWhere
init|=
literal|null
decl_stmt|,
name|iOrderBy
init|=
literal|null
decl_stmt|,
name|iGroupBy
init|=
literal|null
decl_stmt|,
name|iType
init|=
literal|"Event"
decl_stmt|;
specifier|private
name|Integer
name|iLimit
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iJoinWithLocation
init|=
literal|false
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|iExclude
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|iParams
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|EventInstance
parameter_list|(
name|String
name|select
parameter_list|,
name|boolean
name|joinWithLocation
parameter_list|)
block|{
name|iSelect
operator|=
name|select
expr_stmt|;
name|iJoinWithLocation
operator|=
name|joinWithLocation
expr_stmt|;
block|}
specifier|public
name|EventInstance
name|from
parameter_list|(
name|String
name|from
parameter_list|)
block|{
name|iFrom
operator|=
name|from
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|EventInstance
name|where
parameter_list|(
name|String
name|where
parameter_list|)
block|{
if|if
condition|(
name|iWhere
operator|==
literal|null
condition|)
name|iWhere
operator|=
literal|"("
operator|+
name|where
operator|+
literal|")"
expr_stmt|;
else|else
name|iWhere
operator|+=
literal|" and ("
operator|+
name|where
operator|+
literal|")"
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|EventInstance
name|type
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|iType
operator|=
name|type
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|EventInstance
name|order
parameter_list|(
name|String
name|orderBy
parameter_list|)
block|{
name|iOrderBy
operator|=
name|orderBy
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|EventInstance
name|group
parameter_list|(
name|String
name|groupBy
parameter_list|)
block|{
name|iGroupBy
operator|=
name|groupBy
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|EventInstance
name|exclude
parameter_list|(
name|String
name|excludeOption
parameter_list|)
block|{
name|iExclude
operator|.
name|add
argument_list|(
name|excludeOption
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|EventInstance
name|set
parameter_list|(
name|String
name|param
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|iParams
operator|.
name|put
argument_list|(
name|param
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|EventInstance
name|limit
parameter_list|(
name|Integer
name|limit
parameter_list|)
block|{
name|iLimit
operator|=
operator|(
name|limit
operator|==
literal|null
operator|||
name|limit
operator|<=
literal|0
condition|?
literal|null
else|:
name|limit
operator|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|EventInstance
name|joinWithLocation
parameter_list|()
block|{
name|iJoinWithLocation
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|String
name|query
parameter_list|()
block|{
return|return
literal|"select "
operator|+
operator|(
name|iSelect
operator|==
literal|null
condition|?
literal|"distinct e"
else|:
name|iSelect
operator|)
operator|+
literal|" from "
operator|+
name|iType
operator|+
literal|" e inner join e.meetings m"
operator|+
operator|(
name|iJoinWithLocation
condition|?
literal|", Location l inner join l.session s"
else|:
literal|", Session s"
operator|)
operator|+
operator|(
name|iFrom
operator|==
literal|null
condition|?
literal|""
else|:
name|iFrom
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"inner join"
argument_list|)
condition|?
literal|" "
operator|+
name|iFrom
else|:
literal|", "
operator|+
name|iFrom
operator|)
operator|+
name|getFrom
argument_list|(
name|iExclude
argument_list|)
operator|+
operator|(
name|iCheckSession
condition|?
literal|""
else|:
literal|", Session z"
operator|)
operator|+
literal|" where "
operator|+
operator|(
name|iCheckSession
condition|?
literal|"s.uniqueId = :sessionId and m.meetingDate>= s.eventBeginDate and m.meetingDate<= s.eventEndDate"
else|:
literal|"z.uniqueId = :sessionId and s.academicInitiative = z.academicInitiative"
operator|)
operator|+
operator|(
name|iJoinWithLocation
condition|?
literal|" and m.locationPermanentId = l.permanentId"
else|:
literal|""
operator|)
operator|+
name|getWhere
argument_list|(
name|iExclude
argument_list|)
operator|+
operator|(
name|iWhere
operator|==
literal|null
condition|?
literal|""
else|:
literal|" and ("
operator|+
name|iWhere
operator|+
literal|")"
operator|)
operator|+
operator|(
name|iGroupBy
operator|==
literal|null
condition|?
literal|""
else|:
literal|" group by "
operator|+
name|iGroupBy
operator|)
operator|+
operator|(
name|iOrderBy
operator|==
literal|null
condition|?
literal|""
else|:
literal|" order by "
operator|+
name|iOrderBy
operator|)
return|;
block|}
specifier|public
name|org
operator|.
name|hibernate
operator|.
name|Query
name|query
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|org
operator|.
name|hibernate
operator|.
name|Query
name|query
init|=
name|setParams
argument_list|(
name|hibSession
operator|.
name|createQuery
argument_list|(
name|query
argument_list|()
argument_list|)
argument_list|,
name|iExclude
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|param
range|:
name|iParams
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Integer
condition|)
block|{
name|query
operator|.
name|setInteger
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Integer
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Long
condition|)
block|{
name|query
operator|.
name|setLong
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Long
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|String
condition|)
block|{
name|query
operator|.
name|setString
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Boolean
condition|)
block|{
name|query
operator|.
name|setBoolean
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Boolean
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Date
condition|)
block|{
name|query
operator|.
name|setDate
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|Date
operator|)
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|.
name|setString
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
name|param
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iLimit
operator|!=
literal|null
condition|)
name|query
operator|.
name|setMaxResults
argument_list|(
name|iLimit
argument_list|)
expr_stmt|;
return|return
name|query
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

