begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|events
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcResponseList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|ResourceLookupRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|ResourceInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|ResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Curriculum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumClassification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|EventContact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|NonUniversityLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Room
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|EventDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|GwtRpcImplements
argument_list|(
name|ResourceLookupRpcRequest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|ResourceLookupBackend
extends|extends
name|EventAction
argument_list|<
name|ResourceLookupRpcRequest
argument_list|,
name|GwtRpcResponseList
argument_list|<
name|ResourceInterface
argument_list|>
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|GwtRpcResponseList
argument_list|<
name|ResourceInterface
argument_list|>
name|execute
parameter_list|(
name|ResourceLookupRpcRequest
name|request
parameter_list|,
name|EventContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|getResourceType
argument_list|()
operator|==
name|ResourceType
operator|.
name|PERSON
condition|)
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|hasName
argument_list|()
condition|)
name|request
operator|.
name|setName
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalUserId
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
operator|!
name|request
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|context
operator|.
name|isAuthenticated
argument_list|()
condition|?
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalUserId
argument_list|()
else|:
literal|null
argument_list|)
condition|)
name|context
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|EventLookupSchedule
argument_list|)
expr_stmt|;
block|}
name|GwtRpcResponseList
argument_list|<
name|ResourceInterface
argument_list|>
name|response
init|=
operator|new
name|GwtRpcResponseList
argument_list|<
name|ResourceInterface
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasLimit
argument_list|()
operator|&&
name|request
operator|.
name|getLimit
argument_list|()
operator|==
literal|1
condition|)
block|{
name|response
operator|.
name|add
argument_list|(
name|findResource
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|request
operator|.
name|getResourceType
argument_list|()
argument_list|,
name|request
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|response
operator|.
name|addAll
argument_list|(
name|findResources
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|request
operator|.
name|getResourceType
argument_list|()
argument_list|,
name|request
operator|.
name|getName
argument_list|()
argument_list|,
name|request
operator|.
name|getLimit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|response
return|;
block|}
specifier|public
name|ResourceInterface
name|findResource
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|ResourceType
name|type
parameter_list|,
name|String
name|name
parameter_list|)
block|{
try|try
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|EventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
name|Session
name|academicSession
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|ROOM
case|:
if|if
condition|(
name|ApplicationProperty
operator|.
name|EventRoomTimetableAllRooms
operator|.
name|isTrue
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Room
argument_list|>
name|rooms
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct r from Room r "
operator|+
literal|"where r.session.uniqueId = :sessionId and r.eventDepartment.allowEvents = true and ("
operator|+
literal|"r.buildingAbbv || ' ' || r.roomNumber = :name or r.buildingAbbv || r.roomNumber = :name)"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|academicSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|rooms
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Room
name|room
init|=
name|rooms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ResourceInterface
name|ret
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|ROOM
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setId
argument_list|(
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setAbbreviation
argument_list|(
name|room
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setName
argument_list|(
name|room
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
name|List
argument_list|<
name|NonUniversityLocation
argument_list|>
name|locations
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct l from NonUniversityLocation l "
operator|+
literal|"where l.session.uniqueId = :sessionId and l.name = :name and l.eventDepartment.allowEvents = true"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|academicSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|locations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|NonUniversityLocation
name|location
init|=
name|locations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ResourceInterface
name|ret
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|ROOM
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setId
argument_list|(
name|location
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setAbbreviation
argument_list|(
name|location
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setName
argument_list|(
name|location
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
else|else
block|{
name|List
argument_list|<
name|Room
argument_list|>
name|rooms
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct r from Room r "
operator|+
literal|"where r.session.uniqueId = :sessionId and ("
operator|+
literal|"r.buildingAbbv || ' ' || r.roomNumber = :name or r.buildingAbbv || r.roomNumber = :name)"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|academicSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|rooms
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Room
name|room
init|=
name|rooms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ResourceInterface
name|ret
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|ROOM
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setId
argument_list|(
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setAbbreviation
argument_list|(
name|room
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setName
argument_list|(
name|room
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
name|List
argument_list|<
name|NonUniversityLocation
argument_list|>
name|locations
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct l from NonUniversityLocation l "
operator|+
literal|"where l.session.uniqueId = :sessionId and l.name = :name"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|academicSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|locations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|NonUniversityLocation
name|location
init|=
name|locations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ResourceInterface
name|ret
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|ROOM
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setId
argument_list|(
name|location
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setAbbreviation
argument_list|(
name|location
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setName
argument_list|(
name|location
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
throw|throw
operator|new
name|GwtRpcException
argument_list|(
literal|"Unable to find a "
operator|+
name|type
operator|.
name|getLabel
argument_list|()
operator|+
literal|" named "
operator|+
name|name
operator|+
literal|"."
argument_list|)
throw|;
case|case
name|SUBJECT
case|:
name|List
argument_list|<
name|SubjectArea
argument_list|>
name|subjects
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select s from SubjectArea s where s.session.uniqueId = :sessionId and "
operator|+
literal|"lower(s.subjectAreaAbbreviation) = :name"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|name
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|academicSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|subjects
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|SubjectArea
name|subject
init|=
name|subjects
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ResourceInterface
name|ret
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|SUBJECT
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setId
argument_list|(
name|subject
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setAbbreviation
argument_list|(
name|subject
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setName
argument_list|(
name|subject
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
case|case
name|COURSE
case|:
name|List
argument_list|<
name|CourseOffering
argument_list|>
name|courses
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select c from CourseOffering c inner join c.subjectArea s where s.session.uniqueId = :sessionId and "
operator|+
literal|"lower(s.subjectAreaAbbreviation || ' ' || c.courseNbr) = :name and c.instructionalOffering.notOffered = false"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|name
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|academicSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|courses
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|CourseOffering
name|course
init|=
name|courses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ResourceInterface
name|ret
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|COURSE
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setId
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setAbbreviation
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setName
argument_list|(
name|course
operator|.
name|getTitle
argument_list|()
operator|==
literal|null
condition|?
name|course
operator|.
name|getCourseName
argument_list|()
else|:
name|course
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
throw|throw
operator|new
name|GwtRpcException
argument_list|(
literal|"Unable to find a "
operator|+
name|type
operator|.
name|getLabel
argument_list|()
operator|+
literal|" named "
operator|+
name|name
operator|+
literal|"."
argument_list|)
throw|;
case|case
name|CURRICULUM
case|:
name|List
argument_list|<
name|Curriculum
argument_list|>
name|curricula
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select c from Curriculum c where c.department.session.uniqueId = :sessionId and "
operator|+
literal|"lower(c.abbv) = :name or lower(c.name) = :name"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|name
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|academicSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|curricula
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Curriculum
name|curriculum
init|=
name|curricula
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ResourceInterface
name|ret
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|CURRICULUM
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setId
argument_list|(
name|curriculum
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setAbbreviation
argument_list|(
name|curriculum
operator|.
name|getAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setName
argument_list|(
name|curriculum
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
name|List
argument_list|<
name|CurriculumClassification
argument_list|>
name|classifications
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select f from CurriculumClassification f inner join f.curriculum c where "
operator|+
literal|"c.department.session.uniqueId = :sessionId and ("
operator|+
literal|"lower(c.abbv || '/' || f.name) = :name or lower(c.name || '/' || f.name) = :name or "
operator|+
literal|"lower(c.abbv || '/' || f.academicClassification.code) = :name or lower(c.name || '/' || f.academicClassification.code) = :name or "
operator|+
literal|"lower(c.abbv || '/' || f.academicClassification.name) = :name or lower(c.name || '/' || f.academicClassification.name) = :name or "
operator|+
literal|"lower(c.abbv || ' ' || f.name) = :name or lower(c.name || ' ' || f.name) = :name or "
operator|+
literal|"lower(c.abbv || ' ' || f.academicClassification.code) = :name or lower(c.name || ' ' || f.academicClassification.code) = :name or "
operator|+
literal|"lower(c.abbv || ' ' || f.academicClassification.name) = :name or lower(c.name || ' ' || f.academicClassification.name) = :name or "
operator|+
literal|"lower(c.abbv || f.name) = :name or lower(c.name || f.name) = :name or "
operator|+
literal|"lower(c.abbv || f.academicClassification.code) = :name or lower(c.name || f.academicClassification.code) = :name or "
operator|+
literal|"lower(c.abbv || f.academicClassification.name) = :name or lower(c.name || f.academicClassification.name) = :name)"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|name
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|academicSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|classifications
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|CurriculumClassification
name|classification
init|=
name|classifications
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ResourceInterface
name|ret
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|CURRICULUM
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setId
argument_list|(
name|classification
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setAbbreviation
argument_list|(
name|classification
operator|.
name|getCurriculum
argument_list|()
operator|.
name|getAbbv
argument_list|()
operator|+
literal|" "
operator|+
name|classification
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setName
argument_list|(
name|classification
operator|.
name|getCurriculum
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|classification
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
throw|throw
operator|new
name|GwtRpcException
argument_list|(
literal|"Unable to find a "
operator|+
name|type
operator|.
name|getLabel
argument_list|()
operator|+
literal|" named "
operator|+
name|name
operator|+
literal|"."
argument_list|)
throw|;
case|case
name|DEPARTMENT
case|:
name|List
argument_list|<
name|Department
argument_list|>
name|departments
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select d from Department d where d.session.uniqueId = :sessionId and "
operator|+
literal|"(lower(d.deptCode) = :name or lower(d.abbreviation) = :name)"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|name
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|academicSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|departments
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Department
name|department
init|=
name|departments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ResourceInterface
name|ret
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|DEPARTMENT
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setId
argument_list|(
name|department
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setAbbreviation
argument_list|(
name|department
operator|.
name|getAbbreviation
argument_list|()
operator|==
literal|null
condition|?
name|department
operator|.
name|getDeptCode
argument_list|()
else|:
name|department
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setName
argument_list|(
name|department
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
throw|throw
operator|new
name|GwtRpcException
argument_list|(
literal|"Unable to find a "
operator|+
name|type
operator|.
name|getLabel
argument_list|()
operator|+
literal|" named "
operator|+
name|name
operator|+
literal|"."
argument_list|)
throw|;
case|case
name|PERSON
case|:
name|List
argument_list|<
name|Student
argument_list|>
name|students
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select s from Student s where s.session.uniqueId = :sessionId and "
operator|+
literal|"s.externalUniqueId = :name"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|academicSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|students
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Student
name|student
init|=
name|students
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ResourceInterface
name|ret
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|PERSON
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setId
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setAbbreviation
argument_list|(
name|student
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatShort
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setName
argument_list|(
name|student
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatLastFirstMiddle
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setExternalId
argument_list|(
name|student
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|instructors
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select i from DepartmentalInstructor i where i.department.session.uniqueId = :sessionId and "
operator|+
literal|"i.externalUniqueId = :name"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|academicSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|instructors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|DepartmentalInstructor
name|instructor
init|=
name|instructors
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ResourceInterface
name|ret
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|PERSON
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setId
argument_list|(
name|instructor
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setAbbreviation
argument_list|(
name|instructor
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatShort
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setName
argument_list|(
name|instructor
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatLastFirstMiddle
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setExternalId
argument_list|(
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
name|List
argument_list|<
name|EventContact
argument_list|>
name|contacts
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select c from EventContact c where "
operator|+
literal|"c.externalUniqueId = :name"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|contacts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|EventContact
name|contact
init|=
name|contacts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ResourceInterface
name|ret
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|PERSON
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setId
argument_list|(
name|contact
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setAbbreviation
argument_list|(
name|contact
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setName
argument_list|(
name|contact
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setExternalId
argument_list|(
name|contact
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
name|ResourceInterface
name|ret
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|PERSON
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setExternalId
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setName
argument_list|(
literal|""
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
case|case
name|GROUP
case|:
name|List
argument_list|<
name|StudentGroup
argument_list|>
name|groups
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select g from StudentGroup g where g.session.uniqueId = :sessionId and "
operator|+
literal|"(lower(g.groupName) = :name or lower(g.groupAbbreviation) = :name)"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|name
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|academicSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|groups
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|StudentGroup
name|group
init|=
name|groups
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ret
operator|=
operator|new
name|ResourceInterface
argument_list|()
expr_stmt|;
name|ret
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|GROUP
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setId
argument_list|(
name|group
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setAbbreviation
argument_list|(
name|group
operator|.
name|getGroupAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setName
argument_list|(
name|group
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
throw|throw
operator|new
name|GwtRpcException
argument_list|(
literal|"Unable to find a "
operator|+
name|type
operator|.
name|getLabel
argument_list|()
operator|+
literal|" named "
operator|+
name|name
operator|+
literal|"."
argument_list|)
throw|;
default|default:
throw|throw
operator|new
name|GwtRpcException
argument_list|(
literal|"Resource type "
operator|+
name|type
operator|.
name|getLabel
argument_list|()
operator|+
literal|" not supported."
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|GwtRpcException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GwtRpcException
argument_list|(
literal|"Unable to find a "
operator|+
name|type
operator|.
name|getLabel
argument_list|()
operator|+
literal|" named "
operator|+
name|name
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|ResourceInterface
argument_list|>
name|findResources
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|ResourceType
name|type
parameter_list|,
name|String
name|query
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|query
operator|==
literal|null
condition|)
name|query
operator|=
literal|""
expr_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|EventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
name|Session
name|academicSession
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ResourceInterface
argument_list|>
name|resources
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceInterface
argument_list|>
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|ROOM
case|:
if|if
condition|(
name|ApplicationProperty
operator|.
name|EventRoomTimetableAllRooms
operator|.
name|isTrue
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Room
argument_list|>
name|rooms
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct r from Room r, "
operator|+
literal|"RoomTypeOption o where r.session.uniqueId = :sessionId and "
operator|+
literal|"r.eventDepartment.allowEvents = true and "
operator|+
literal|"o.status != 0 and o.roomType = r.roomType and o.department = r.eventDepartment and ("
operator|+
literal|"lower(r.roomNumber) like :name or lower(r.buildingAbbv || ' ' || r.roomNumber) like :name or lower(r.buildingAbbv || r.roomNumber) like :name) "
operator|+
literal|"order by r.buildingAbbv, r.roomNumber"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|query
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"%"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|academicSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setMaxResults
argument_list|(
name|limit
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|Room
name|room
range|:
name|rooms
control|)
block|{
name|ResourceInterface
name|ret
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|ROOM
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setId
argument_list|(
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setAbbreviation
argument_list|(
name|room
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setName
argument_list|(
name|room
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|room
operator|.
name|getDisplayName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|room
operator|.
name|getDisplayName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ret
operator|.
name|setTitle
argument_list|(
name|room
operator|.
name|getLabel
argument_list|()
operator|+
literal|" - "
operator|+
name|room
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|.
name|setTitle
argument_list|(
name|room
operator|.
name|getLabel
argument_list|()
operator|+
literal|" - "
operator|+
name|room
operator|.
name|getRoomTypeLabel
argument_list|()
operator|+
operator|(
name|room
operator|.
name|getCapacity
argument_list|()
operator|>
literal|1
condition|?
literal|" ("
operator|+
name|room
operator|.
name|getCapacity
argument_list|()
operator|+
literal|" seats)"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
name|resources
operator|.
name|add
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|NonUniversityLocation
argument_list|>
name|locations
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct l from NonUniversityLocation l, "
operator|+
literal|"RoomTypeOption o where l.eventDepartment.allowEvents = true and "
operator|+
literal|"l.session.uniqueId = :sessionId and o.status != 0 and o.roomType = l.roomType and o.department = l.eventDepartment and lower(l.name) like :name "
operator|+
literal|"order by l.name"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|query
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"%"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|academicSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setMaxResults
argument_list|(
name|limit
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|NonUniversityLocation
name|location
range|:
name|locations
control|)
block|{
name|ResourceInterface
name|ret
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|ROOM
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setId
argument_list|(
name|location
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setAbbreviation
argument_list|(
name|location
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setName
argument_list|(
name|location
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|.
name|getDisplayName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|location
operator|.
name|getDisplayName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ret
operator|.
name|setTitle
argument_list|(
name|location
operator|.
name|getLabel
argument_list|()
operator|+
literal|" - "
operator|+
name|location
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|.
name|setTitle
argument_list|(
name|location
operator|.
name|getLabel
argument_list|()
operator|+
literal|" - "
operator|+
name|location
operator|.
name|getRoomTypeLabel
argument_list|()
operator|+
operator|(
name|location
operator|.
name|getCapacity
argument_list|()
operator|>
literal|1
condition|?
literal|" ("
operator|+
name|location
operator|.
name|getCapacity
argument_list|()
operator|+
literal|" seats)"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
name|resources
operator|.
name|add
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|resources
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|>
literal|0
operator|&&
name|resources
operator|.
name|size
argument_list|()
operator|>
name|limit
condition|)
block|{
name|resources
operator|=
operator|new
name|ArrayList
argument_list|<
name|ResourceInterface
argument_list|>
argument_list|(
name|resources
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|limit
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|List
argument_list|<
name|Room
argument_list|>
name|rooms
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct r from Room r "
operator|+
literal|"where r.session.uniqueId = :sessionId and ("
operator|+
literal|"lower(r.roomNumber) like :name or lower(r.buildingAbbv || ' ' || r.roomNumber) like :name or lower(r.buildingAbbv || r.roomNumber) like :name) "
operator|+
literal|"order by r.buildingAbbv, r.roomNumber"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|query
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"%"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|academicSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setMaxResults
argument_list|(
name|limit
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|Room
name|room
range|:
name|rooms
control|)
block|{
name|ResourceInterface
name|ret
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|ROOM
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setId
argument_list|(
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setAbbreviation
argument_list|(
name|room
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setName
argument_list|(
name|room
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|room
operator|.
name|getDisplayName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|room
operator|.
name|getDisplayName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ret
operator|.
name|setTitle
argument_list|(
name|room
operator|.
name|getLabel
argument_list|()
operator|+
literal|" - "
operator|+
name|room
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|.
name|setTitle
argument_list|(
name|room
operator|.
name|getLabel
argument_list|()
operator|+
literal|" - "
operator|+
name|room
operator|.
name|getRoomTypeLabel
argument_list|()
operator|+
operator|(
name|room
operator|.
name|getCapacity
argument_list|()
operator|>
literal|1
condition|?
literal|" ("
operator|+
name|room
operator|.
name|getCapacity
argument_list|()
operator|+
literal|" seats)"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
name|resources
operator|.
name|add
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|NonUniversityLocation
argument_list|>
name|locations
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct l from NonUniversityLocation l where "
operator|+
literal|"l.session.uniqueId = :sessionId and lower(l.name) like :name "
operator|+
literal|"order by l.name"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|query
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"%"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|academicSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setMaxResults
argument_list|(
name|limit
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|NonUniversityLocation
name|location
range|:
name|locations
control|)
block|{
name|ResourceInterface
name|ret
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|ROOM
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setId
argument_list|(
name|location
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setAbbreviation
argument_list|(
name|location
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setName
argument_list|(
name|location
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|.
name|getDisplayName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|location
operator|.
name|getDisplayName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ret
operator|.
name|setTitle
argument_list|(
name|location
operator|.
name|getLabel
argument_list|()
operator|+
literal|" - "
operator|+
name|location
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|.
name|setTitle
argument_list|(
name|location
operator|.
name|getLabel
argument_list|()
operator|+
literal|" - "
operator|+
name|location
operator|.
name|getRoomTypeLabel
argument_list|()
operator|+
operator|(
name|location
operator|.
name|getCapacity
argument_list|()
operator|>
literal|1
condition|?
literal|" ("
operator|+
name|location
operator|.
name|getCapacity
argument_list|()
operator|+
literal|" seats)"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
name|resources
operator|.
name|add
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|resources
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|>
literal|0
operator|&&
name|resources
operator|.
name|size
argument_list|()
operator|>
name|limit
condition|)
block|{
name|resources
operator|=
operator|new
name|ArrayList
argument_list|<
name|ResourceInterface
argument_list|>
argument_list|(
name|resources
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|limit
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|SUBJECT
case|:
name|List
argument_list|<
name|SubjectArea
argument_list|>
name|subjects
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select s from SubjectArea s where s.session.uniqueId = :sessionId and ("
operator|+
literal|"lower(s.subjectAreaAbbreviation) like :name or lower(' ' || s.title) like :title) "
operator|+
literal|"order by s.subjectAreaAbbreviation"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|query
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"%"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"title"
argument_list|,
literal|"% "
operator|+
name|query
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"%"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|academicSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setMaxResults
argument_list|(
name|limit
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|SubjectArea
name|subject
range|:
name|subjects
control|)
block|{
name|ResourceInterface
name|ret
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|SUBJECT
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setId
argument_list|(
name|subject
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setAbbreviation
argument_list|(
name|subject
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setName
argument_list|(
name|subject
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|resources
operator|.
name|add
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|subjects
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
for|for
control|(
name|CourseOffering
name|course
range|:
operator|new
name|TreeSet
argument_list|<
name|CourseOffering
argument_list|>
argument_list|(
name|subjects
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCourseOfferings
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|course
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|isNotOffered
argument_list|()
condition|)
continue|continue;
name|ResourceInterface
name|ret
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|COURSE
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setId
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setAbbreviation
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setName
argument_list|(
name|course
operator|.
name|getTitle
argument_list|()
operator|==
literal|null
condition|?
name|course
operator|.
name|getCourseName
argument_list|()
else|:
name|course
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setTitle
argument_list|(
literal|"&nbsp;&nbsp;&nbsp;&nbsp;"
operator|+
name|course
operator|.
name|getCourseName
argument_list|()
operator|+
operator|(
name|course
operator|.
name|getTitle
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" - "
operator|+
name|course
operator|.
name|getTitle
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|resources
operator|.
name|add
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|subjects
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|CourseOffering
argument_list|>
name|courses
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select c from CourseOffering c inner join c.subjectArea s where s.session.uniqueId = :sessionId and ("
operator|+
literal|"lower(s.subjectAreaAbbreviation || ' ' || c.courseNbr) like :name or lower(' ' || c.title) like :title) and c.instructionalOffering.notOffered = false "
operator|+
literal|"order by s.subjectAreaAbbreviation, c.courseNbr"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|query
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"%"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"title"
argument_list|,
literal|"% "
operator|+
name|query
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"%"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|academicSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setMaxResults
argument_list|(
name|limit
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseOffering
name|course
range|:
name|courses
control|)
block|{
if|if
condition|(
name|course
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|isNotOffered
argument_list|()
condition|)
continue|continue;
name|ResourceInterface
name|ret
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|COURSE
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setId
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setAbbreviation
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setName
argument_list|(
name|course
operator|.
name|getTitle
argument_list|()
operator|==
literal|null
condition|?
name|course
operator|.
name|getCourseName
argument_list|()
else|:
name|course
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|resources
operator|.
name|add
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|COURSE
case|:
name|List
argument_list|<
name|CourseOffering
argument_list|>
name|courses
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select c from CourseOffering c inner join c.subjectArea s where s.session.uniqueId = :sessionId and ("
operator|+
literal|"lower(s.subjectAreaAbbreviation || ' ' || c.courseNbr) like :name or lower(' ' || c.title) like :title) and c.instructionalOffering.notOffered = false "
operator|+
literal|"order by s.subjectAreaAbbreviation, c.courseNbr"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|query
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"%"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"title"
argument_list|,
literal|"% "
operator|+
name|query
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"%"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|academicSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setMaxResults
argument_list|(
name|limit
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseOffering
name|course
range|:
name|courses
control|)
block|{
if|if
condition|(
name|course
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|isNotOffered
argument_list|()
condition|)
continue|continue;
name|ResourceInterface
name|ret
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|COURSE
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setId
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setAbbreviation
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setName
argument_list|(
name|course
operator|.
name|getTitle
argument_list|()
operator|==
literal|null
condition|?
name|course
operator|.
name|getCourseName
argument_list|()
else|:
name|course
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|resources
operator|.
name|add
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CURRICULUM
case|:
name|List
argument_list|<
name|Curriculum
argument_list|>
name|curricula
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select c from Curriculum c where c.department.session.uniqueId = :sessionId and ("
operator|+
literal|"lower(c.abbv) like :name or lower(c.name) like :title) order by c.abbv"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|query
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"%"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"title"
argument_list|,
literal|"%"
operator|+
name|query
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"%"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|academicSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setMaxResults
argument_list|(
name|limit
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|Curriculum
name|curriculum
range|:
name|curricula
control|)
block|{
name|ResourceInterface
name|ret
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|CURRICULUM
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setId
argument_list|(
name|curriculum
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setAbbreviation
argument_list|(
name|curriculum
operator|.
name|getAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setName
argument_list|(
name|curriculum
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|resources
operator|.
name|add
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|curricula
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
for|for
control|(
name|CurriculumClassification
name|classification
range|:
operator|new
name|TreeSet
argument_list|<
name|CurriculumClassification
argument_list|>
argument_list|(
name|curricula
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getClassifications
argument_list|()
argument_list|)
control|)
block|{
name|ResourceInterface
name|ret
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|CURRICULUM
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setId
argument_list|(
name|classification
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setAbbreviation
argument_list|(
name|classification
operator|.
name|getCurriculum
argument_list|()
operator|.
name|getAbbv
argument_list|()
operator|+
literal|" "
operator|+
name|classification
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setName
argument_list|(
name|classification
operator|.
name|getCurriculum
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|classification
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setTitle
argument_list|(
literal|"&nbsp;&nbsp;&nbsp;&nbsp;"
operator|+
name|classification
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
operator|+
literal|" "
operator|+
name|classification
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|resources
operator|.
name|add
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|curricula
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|CurriculumClassification
argument_list|>
name|classifications
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select f from CurriculumClassification f inner join f.curriculum c where "
operator|+
literal|"c.department.session.uniqueId = :sessionId and ("
operator|+
literal|"lower(c.abbv || '/' || f.name) like :name or lower(c.name || '/' || f.name) like :title or "
operator|+
literal|"lower(c.abbv || '/' || f.academicClassification.code) like :name or lower(c.name || '/' || f.academicClassification.code) like :title or "
operator|+
literal|"lower(c.abbv || '/' || f.academicClassification.name) like :name or lower(c.name || '/' || f.academicClassification.name) like :title or "
operator|+
literal|"lower(c.abbv || ' ' || f.name) like :name or lower(c.name || ' ' || f.name) like :title or "
operator|+
literal|"lower(c.abbv || ' ' || f.academicClassification.code) like :name or lower(c.name || ' ' || f.academicClassification.code) like :title or "
operator|+
literal|"lower(c.abbv || ' ' || f.academicClassification.name) like :name or lower(c.name || ' ' || f.academicClassification.name) like :title or "
operator|+
literal|"lower(c.abbv || f.name) like :name or lower(c.name || f.name) like :title or "
operator|+
literal|"lower(c.abbv || f.academicClassification.code) like :name or lower(c.name || f.academicClassification.code) like :title or "
operator|+
literal|"lower(c.abbv || f.academicClassification.name) like :name or lower(c.name || f.academicClassification.name) like :title) "
operator|+
literal|"order by c.abbv, f.academicClassification.code"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|query
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"%"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"title"
argument_list|,
literal|"%"
operator|+
name|query
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"%"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|academicSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setMaxResults
argument_list|(
name|limit
operator|-
name|resources
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|CurriculumClassification
name|classification
range|:
name|classifications
control|)
block|{
name|ResourceInterface
name|ret
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|CURRICULUM
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setId
argument_list|(
name|classification
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setAbbreviation
argument_list|(
name|classification
operator|.
name|getCurriculum
argument_list|()
operator|.
name|getAbbv
argument_list|()
operator|+
literal|" "
operator|+
name|classification
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setName
argument_list|(
name|classification
operator|.
name|getCurriculum
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|classification
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|resources
operator|.
name|add
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|limit
operator|>
literal|0
operator|&&
name|resources
operator|.
name|size
argument_list|()
operator|>
name|limit
condition|)
block|{
name|resources
operator|=
operator|new
name|ArrayList
argument_list|<
name|ResourceInterface
argument_list|>
argument_list|(
name|resources
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|limit
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DEPARTMENT
case|:
name|List
argument_list|<
name|Department
argument_list|>
name|departments
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select d from Department d where d.session.uniqueId = :sessionId and ("
operator|+
literal|"lower(d.deptCode) like :name or lower(d.abbreviation) like :name or lower(d.name) like :title) "
operator|+
literal|"order by d.abbreviation, d.deptCode"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|query
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"%"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"title"
argument_list|,
literal|"%"
operator|+
name|query
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"%"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|academicSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setMaxResults
argument_list|(
name|limit
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|Department
name|department
range|:
name|departments
control|)
block|{
name|ResourceInterface
name|ret
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|DEPARTMENT
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setId
argument_list|(
name|department
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setAbbreviation
argument_list|(
name|department
operator|.
name|getAbbreviation
argument_list|()
operator|==
literal|null
condition|?
name|department
operator|.
name|getDeptCode
argument_list|()
else|:
name|department
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setName
argument_list|(
name|department
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|resources
operator|.
name|add
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|GROUP
case|:
name|List
argument_list|<
name|StudentGroup
argument_list|>
name|groups
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select g from StudentGroup g where g.session.uniqueId = :sessionId and ("
operator|+
literal|"lower(g.groupAbbreviation) like :abbv or lower(g.groupName) like :name) "
operator|+
literal|"order by g.groupAbbreviation, g.groupName"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"abbv"
argument_list|,
name|query
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"%"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
literal|"%"
operator|+
name|query
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"%"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|academicSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setMaxResults
argument_list|(
name|limit
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|StudentGroup
name|group
range|:
name|groups
control|)
block|{
name|ResourceInterface
name|ret
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|GROUP
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setId
argument_list|(
name|group
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setAbbreviation
argument_list|(
name|group
operator|.
name|getGroupAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setName
argument_list|(
name|group
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
name|resources
operator|.
name|add
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|GwtRpcException
argument_list|(
literal|"Resource type "
operator|+
name|type
operator|.
name|getLabel
argument_list|()
operator|+
literal|" not supported."
argument_list|)
throw|;
block|}
if|if
condition|(
name|resources
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
literal|"No "
operator|+
name|type
operator|.
name|getLabel
argument_list|()
operator|+
literal|" "
operator|+
name|query
operator|+
literal|" found."
argument_list|)
throw|;
return|return
name|resources
return|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|GwtRpcException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GwtRpcException
argument_list|(
literal|"Failed to find resources: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

