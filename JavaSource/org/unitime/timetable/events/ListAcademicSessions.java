begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.4 (University Timetabling Application)  * Copyright (C) 2012, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|events
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|events
operator|.
name|AcademicSessionSelectionBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|events
operator|.
name|AcademicSessionSelectionBox
operator|.
name|AcademicSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcResponseList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplementation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_class
specifier|public
class|class
name|ListAcademicSessions
implements|implements
name|GwtRpcImplementation
argument_list|<
name|AcademicSessionSelectionBox
operator|.
name|ListAcademicSessions
argument_list|,
name|GwtRpcResponseList
argument_list|<
name|AcademicSession
argument_list|>
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|GwtRpcResponseList
argument_list|<
name|AcademicSession
argument_list|>
name|execute
parameter_list|(
name|AcademicSessionSelectionBox
operator|.
name|ListAcademicSessions
name|command
parameter_list|,
name|GwtRpcHelper
name|helper
parameter_list|)
block|{
name|GwtRpcResponseList
argument_list|<
name|AcademicSession
argument_list|>
name|ret
init|=
operator|new
name|GwtRpcResponseList
argument_list|<
name|AcademicSession
argument_list|>
argument_list|()
decl_stmt|;
name|Session
name|selected
init|=
operator|(
name|helper
operator|.
name|getUser
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|helper
operator|.
name|getUser
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|selected
operator|==
literal|null
condition|)
name|selected
operator|=
name|Session
operator|.
name|defaultSession
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|Session
argument_list|>
name|sessions
init|=
name|Session
operator|.
name|getAllSessions
argument_list|()
decl_stmt|;
for|for
control|(
name|Session
name|session
range|:
name|sessions
control|)
block|{
name|AcademicSession
name|acadSession
init|=
operator|new
name|AcademicSession
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|session
operator|.
name|getLabel
argument_list|()
argument_list|,
name|session
operator|.
name|equals
argument_list|(
name|selected
argument_list|)
argument_list|)
decl_stmt|;
name|Session
name|prev
init|=
literal|null
decl_stmt|,
name|next
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Session
name|s
range|:
name|sessions
control|)
block|{
if|if
condition|(
name|s
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|||
operator|!
name|s
operator|.
name|getAcademicInitiative
argument_list|()
operator|.
name|equals
argument_list|(
name|session
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|s
operator|.
name|getSessionEndDateTime
argument_list|()
operator|.
name|before
argument_list|(
name|session
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
condition|)
block|{
comment|// before
if|if
condition|(
name|prev
operator|==
literal|null
operator|||
name|prev
operator|.
name|getSessionBeginDateTime
argument_list|()
operator|.
name|before
argument_list|(
name|s
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
condition|)
block|{
name|prev
operator|=
name|s
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|s
operator|.
name|getSessionBeginDateTime
argument_list|()
operator|.
name|after
argument_list|(
name|session
operator|.
name|getSessionEndDateTime
argument_list|()
argument_list|)
condition|)
block|{
comment|// after
if|if
condition|(
name|next
operator|==
literal|null
operator|||
name|next
operator|.
name|getSessionBeginDateTime
argument_list|()
operator|.
name|after
argument_list|(
name|s
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
condition|)
block|{
name|next
operator|=
name|s
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
name|acadSession
operator|.
name|setNextId
argument_list|(
name|next
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|prev
operator|!=
literal|null
condition|)
name|acadSession
operator|.
name|setPreviousId
argument_list|(
name|prev
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|acadSession
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

