begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|events
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplementation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|SponsoringOrganizationInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|PageAccessException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|ContactInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|EventDetailRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|MeetingInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|NoteInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|ResourceInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|ResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|EventContact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|EventNote
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Meeting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RelatedCourseInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Roles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ClassEventDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseEventDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|EventDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExamEventDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_class
specifier|public
class|class
name|EventDetailBackend
implements|implements
name|GwtRpcImplementation
argument_list|<
name|EventDetailRpcRequest
argument_list|,
name|EventInterface
argument_list|>
block|{
specifier|protected
specifier|static
name|GwtMessages
name|MESSAGES
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|EventInterface
name|execute
parameter_list|(
name|EventDetailRpcRequest
name|request
parameter_list|,
name|GwtRpcHelper
name|helper
parameter_list|)
block|{
name|Event
name|event
init|=
name|EventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|request
operator|.
name|getEventId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|==
literal|null
condition|)
throw|throw
operator|new
name|EventException
argument_list|(
literal|"No event with id "
operator|+
name|request
operator|.
name|getEventId
argument_list|()
operator|+
literal|" found."
argument_list|)
throw|;
name|checkAccess
argument_list|(
name|event
argument_list|,
name|helper
argument_list|)
expr_stmt|;
name|EventInterface
name|detail
init|=
name|getEventDetail
argument_list|(
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|)
argument_list|,
name|event
argument_list|)
decl_stmt|;
name|detail
operator|.
name|setCanEdit
argument_list|(
name|canEdit
argument_list|(
name|event
argument_list|,
name|helper
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|detail
return|;
block|}
specifier|public
name|void
name|checkAccess
parameter_list|(
name|Event
name|e
parameter_list|,
name|GwtRpcHelper
name|helper
parameter_list|)
throws|throws
name|PageAccessException
block|{
if|if
condition|(
name|helper
operator|.
name|getUser
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|PageAccessException
argument_list|(
name|helper
operator|.
name|isHttpSessionNew
argument_list|()
condition|?
name|MESSAGES
operator|.
name|authenticationExpired
argument_list|()
else|:
name|MESSAGES
operator|.
name|authenticationRequired
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|helper
operator|.
name|getUser
argument_list|()
operator|.
name|getRole
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|e
operator|.
name|getMainContact
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|helper
operator|.
name|getUser
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getMainContact
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
condition|)
throw|throw
operator|new
name|PageAccessException
argument_list|(
name|MESSAGES
operator|.
name|authenticationInsufficient
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|canEdit
parameter_list|(
name|Event
name|e
parameter_list|,
name|GwtRpcHelper
name|helper
parameter_list|)
block|{
if|if
condition|(
name|helper
operator|.
name|getUser
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|e
operator|.
name|getMainContact
argument_list|()
operator|!=
literal|null
operator|&&
name|helper
operator|.
name|getUser
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getMainContact
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|Roles
operator|.
name|ADMIN_ROLE
operator|.
name|equals
argument_list|(
name|helper
operator|.
name|getUser
argument_list|()
operator|.
name|getRole
argument_list|()
argument_list|)
operator|||
name|Roles
operator|.
name|EVENT_MGR_ROLE
operator|.
name|equals
argument_list|(
name|helper
operator|.
name|getUser
argument_list|()
operator|.
name|getRole
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|EventInterface
name|getEventDetail
parameter_list|(
name|Session
name|session
parameter_list|,
name|Event
name|e
parameter_list|)
throws|throws
name|EventException
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|EventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|boolean
name|suffix
init|=
literal|"true"
operator|.
name|equals
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exam.report.suffix"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
decl_stmt|;
name|Date
name|now
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|EventInterface
name|event
init|=
operator|new
name|EventInterface
argument_list|()
decl_stmt|;
name|event
operator|.
name|setId
argument_list|(
name|e
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setName
argument_list|(
name|e
operator|.
name|getEventName
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setType
argument_list|(
name|EventInterface
operator|.
name|EventType
operator|.
name|values
argument_list|()
index|[
name|e
operator|.
name|getEventType
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|event
operator|.
name|setCanView
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|event
operator|.
name|setEmail
argument_list|(
name|e
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setMaxCapacity
argument_list|(
name|e
operator|.
name|getMaxCapacity
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getMainContact
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ContactInterface
name|contact
init|=
operator|new
name|ContactInterface
argument_list|()
decl_stmt|;
name|contact
operator|.
name|setFirstName
argument_list|(
name|e
operator|.
name|getMainContact
argument_list|()
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setMiddleName
argument_list|(
name|e
operator|.
name|getMainContact
argument_list|()
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setLastName
argument_list|(
name|e
operator|.
name|getMainContact
argument_list|()
operator|.
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setExternalId
argument_list|(
name|e
operator|.
name|getMainContact
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setPhone
argument_list|(
name|e
operator|.
name|getMainContact
argument_list|()
operator|.
name|getPhone
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setEmail
argument_list|(
name|e
operator|.
name|getMainContact
argument_list|()
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setContact
argument_list|(
name|contact
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|EventContact
name|c
range|:
name|e
operator|.
name|getAdditionalContacts
argument_list|()
control|)
block|{
name|ContactInterface
name|contact
init|=
operator|new
name|ContactInterface
argument_list|()
decl_stmt|;
name|contact
operator|.
name|setFirstName
argument_list|(
name|c
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setMiddleName
argument_list|(
name|c
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setLastName
argument_list|(
name|c
operator|.
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setExternalId
argument_list|(
name|c
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setPhone
argument_list|(
name|c
operator|.
name|getPhone
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setEmail
argument_list|(
name|c
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|addAdditionalContact
argument_list|(
name|contact
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|e
operator|.
name|getSponsoringOrganization
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SponsoringOrganizationInterface
name|sponsor
init|=
operator|new
name|SponsoringOrganizationInterface
argument_list|()
decl_stmt|;
name|sponsor
operator|.
name|setEmail
argument_list|(
name|e
operator|.
name|getSponsoringOrganization
argument_list|()
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
name|sponsor
operator|.
name|setName
argument_list|(
name|e
operator|.
name|getSponsoringOrganization
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sponsor
operator|.
name|setUniqueId
argument_list|(
name|e
operator|.
name|getSponsoringOrganization
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setSponsor
argument_list|(
name|sponsor
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Event
operator|.
name|sEventTypeClass
operator|==
name|e
operator|.
name|getEventType
argument_list|()
condition|)
block|{
name|ClassEvent
name|ce
init|=
operator|(
name|e
operator|instanceof
name|ClassEvent
condition|?
operator|(
name|ClassEvent
operator|)
name|e
else|:
name|ClassEventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|e
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
operator|)
decl_stmt|;
name|Class_
name|clazz
init|=
name|ce
operator|.
name|getClazz
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getDisplayInstructor
argument_list|()
condition|)
block|{
for|for
control|(
name|ClassInstructor
name|i
range|:
name|clazz
operator|.
name|getClassInstructors
argument_list|()
control|)
block|{
name|ContactInterface
name|instructor
init|=
operator|new
name|ContactInterface
argument_list|()
decl_stmt|;
name|instructor
operator|.
name|setFirstName
argument_list|(
name|i
operator|.
name|getInstructor
argument_list|()
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setMiddleName
argument_list|(
name|i
operator|.
name|getInstructor
argument_list|()
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setLastName
argument_list|(
name|i
operator|.
name|getInstructor
argument_list|()
operator|.
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setExternalId
argument_list|(
name|i
operator|.
name|getInstructor
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setEmail
argument_list|(
name|i
operator|.
name|getInstructor
argument_list|()
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|addInstructor
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
block|}
block|}
name|CourseOffering
name|courseOffering
init|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
decl_stmt|;
name|event
operator|.
name|addCourseName
argument_list|(
name|courseOffering
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setInstruction
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getDesc
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setInstructionType
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getItype
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|section
init|=
operator|(
name|suffix
operator|&&
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|courseOffering
argument_list|)
operator|!=
literal|null
condition|?
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|courseOffering
argument_list|)
else|:
name|clazz
operator|.
name|getSectionNumberString
argument_list|(
name|hibSession
argument_list|)
operator|)
decl_stmt|;
name|event
operator|.
name|addExternalId
argument_list|(
name|section
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|courseOffering
argument_list|)
operator|==
literal|null
condition|)
block|{
name|event
operator|.
name|setName
argument_list|(
name|clazz
operator|.
name|getClassLabel
argument_list|(
name|courseOffering
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|event
operator|.
name|setName
argument_list|(
name|courseOffering
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|section
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CourseOffering
name|co
range|:
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseOfferings
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|co
operator|.
name|isIsControl
argument_list|()
condition|)
block|{
name|event
operator|.
name|addCourseName
argument_list|(
name|co
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|addExternalId
argument_list|(
name|suffix
operator|&&
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|co
argument_list|)
operator|!=
literal|null
condition|?
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|co
argument_list|)
else|:
name|clazz
operator|.
name|getSectionNumberString
argument_list|(
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|Event
operator|.
name|sEventTypeFinalExam
operator|==
name|e
operator|.
name|getEventType
argument_list|()
operator|||
name|Event
operator|.
name|sEventTypeMidtermExam
operator|==
name|e
operator|.
name|getEventType
argument_list|()
condition|)
block|{
name|ExamEvent
name|xe
init|=
operator|(
name|e
operator|instanceof
name|ExamEvent
condition|?
operator|(
name|ExamEvent
operator|)
name|e
else|:
name|ExamEventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|e
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
operator|)
decl_stmt|;
for|for
control|(
name|DepartmentalInstructor
name|i
range|:
name|xe
operator|.
name|getExam
argument_list|()
operator|.
name|getInstructors
argument_list|()
control|)
block|{
name|ContactInterface
name|instructor
init|=
operator|new
name|ContactInterface
argument_list|()
decl_stmt|;
name|instructor
operator|.
name|setFirstName
argument_list|(
name|i
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setMiddleName
argument_list|(
name|i
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setLastName
argument_list|(
name|i
operator|.
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setExternalId
argument_list|(
name|i
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setEmail
argument_list|(
name|i
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|addInstructor
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ExamOwner
name|owner
range|:
operator|new
name|TreeSet
argument_list|<
name|ExamOwner
argument_list|>
argument_list|(
name|xe
operator|.
name|getExam
argument_list|()
operator|.
name|getOwners
argument_list|()
argument_list|)
control|)
block|{
for|for
control|(
name|CourseOffering
name|course
range|:
name|owner
operator|.
name|getCourse
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseOfferings
argument_list|()
control|)
block|{
name|String
name|courseName
init|=
name|owner
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
decl_stmt|;
name|String
name|label
init|=
name|owner
operator|.
name|getLabel
argument_list|()
decl_stmt|;
if|if
condition|(
name|label
operator|.
name|startsWith
argument_list|(
name|courseName
argument_list|)
condition|)
block|{
name|label
operator|=
name|label
operator|.
name|substring
argument_list|(
name|courseName
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|event
operator|.
name|addCourseName
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|addExternalId
argument_list|(
name|label
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|Event
operator|.
name|sEventTypeCourse
operator|==
name|e
operator|.
name|getEventType
argument_list|()
condition|)
block|{
name|CourseEvent
name|ce
init|=
operator|(
name|e
operator|instanceof
name|CourseEvent
condition|?
operator|(
name|CourseEvent
operator|)
name|e
else|:
name|CourseEventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|e
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
operator|)
decl_stmt|;
for|for
control|(
name|RelatedCourseInfo
name|owner
range|:
operator|new
name|TreeSet
argument_list|<
name|RelatedCourseInfo
argument_list|>
argument_list|(
name|ce
operator|.
name|getRelatedCourses
argument_list|()
argument_list|)
control|)
block|{
for|for
control|(
name|CourseOffering
name|course
range|:
name|owner
operator|.
name|getCourse
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseOfferings
argument_list|()
control|)
block|{
name|String
name|courseName
init|=
name|owner
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
decl_stmt|;
name|String
name|label
init|=
name|owner
operator|.
name|getLabel
argument_list|()
decl_stmt|;
if|if
condition|(
name|label
operator|.
name|startsWith
argument_list|(
name|courseName
argument_list|)
condition|)
block|{
name|label
operator|=
name|label
operator|.
name|substring
argument_list|(
name|courseName
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|event
operator|.
name|addCourseName
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|addExternalId
argument_list|(
name|label
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Meeting
name|m
range|:
name|e
operator|.
name|getMeetings
argument_list|()
control|)
block|{
name|MeetingInterface
name|meeting
init|=
operator|new
name|MeetingInterface
argument_list|()
decl_stmt|;
name|meeting
operator|.
name|setId
argument_list|(
name|m
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setMeetingDate
argument_list|(
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd"
argument_list|)
operator|.
name|format
argument_list|(
name|m
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setDayOfWeek
argument_list|(
name|Constants
operator|.
name|getDayOfWeek
argument_list|(
name|m
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setStartTime
argument_list|(
name|m
operator|.
name|getStartTime
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setStopTime
argument_list|(
name|m
operator|.
name|getStopTime
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|c
operator|.
name|setTime
argument_list|(
name|m
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|dayOfYear
init|=
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|)
decl_stmt|;
name|int
name|sessionYear
init|=
name|session
operator|.
name|getSessionStartYear
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
operator|<
name|sessionYear
condition|)
block|{
name|Calendar
name|x
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|x
operator|.
name|set
argument_list|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
argument_list|,
literal|11
argument_list|,
literal|31
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|dayOfYear
operator|-=
name|x
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
operator|>
name|sessionYear
condition|)
block|{
name|Calendar
name|x
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|x
operator|.
name|set
argument_list|(
name|sessionYear
argument_list|,
literal|11
argument_list|,
literal|31
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|dayOfYear
operator|+=
name|x
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|)
expr_stmt|;
block|}
name|meeting
operator|.
name|setDayOfYear
argument_list|(
name|dayOfYear
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setMeetingTime
argument_list|(
name|m
operator|.
name|startTime
argument_list|()
operator|+
literal|" - "
operator|+
name|m
operator|.
name|stopTime
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setStartSlot
argument_list|(
name|m
operator|.
name|getStartPeriod
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setEndSlot
argument_list|(
name|m
operator|.
name|getStopPeriod
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setPast
argument_list|(
name|m
operator|.
name|getStartTime
argument_list|()
operator|.
name|before
argument_list|(
name|now
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|isApproved
argument_list|()
condition|)
name|meeting
operator|.
name|setApprovalDate
argument_list|(
name|m
operator|.
name|getApprovedDate
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ResourceInterface
name|location
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|location
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|ROOM
argument_list|)
expr_stmt|;
name|location
operator|.
name|setId
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setName
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setHint
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getHtmlHint
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setSize
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setRoomType
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getRoomTypeLabel
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setLocation
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
name|event
operator|.
name|addMeeting
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|EventNote
name|n
range|:
name|e
operator|.
name|getNotes
argument_list|()
control|)
block|{
name|NoteInterface
name|note
init|=
operator|new
name|NoteInterface
argument_list|()
decl_stmt|;
name|note
operator|.
name|setDate
argument_list|(
name|n
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
expr_stmt|;
name|note
operator|.
name|setType
argument_list|(
name|NoteInterface
operator|.
name|NoteType
operator|.
name|values
argument_list|()
index|[
name|n
operator|.
name|getNoteType
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|note
operator|.
name|setMeetings
argument_list|(
name|n
operator|.
name|getMeetingsHtml
argument_list|()
argument_list|)
expr_stmt|;
name|note
operator|.
name|setNote
argument_list|(
name|n
operator|.
name|getTextNote
argument_list|()
argument_list|)
expr_stmt|;
name|note
operator|.
name|setUser
argument_list|(
name|n
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|addNote
argument_list|(
name|note
argument_list|)
expr_stmt|;
block|}
return|return
name|event
return|;
block|}
block|}
end_class

end_unit

