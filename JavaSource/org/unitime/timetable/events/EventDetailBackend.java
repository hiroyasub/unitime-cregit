begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.4 (University Timetabling Application)  * Copyright (C) 2012, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|events
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|RelatedObjectInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|SponsoringOrganizationInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|ContactInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|EventDetailRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|MeetingConglictInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|MeetingInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|NoteInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|ResourceInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|ResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|EventContact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|EventNote
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Meeting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RelatedCourseInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ClassEventDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseEventDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|EventDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExamEventDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|CalendarUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_class
specifier|public
class|class
name|EventDetailBackend
extends|extends
name|EventAction
argument_list|<
name|EventDetailRpcRequest
argument_list|,
name|EventInterface
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|EventInterface
name|execute
parameter_list|(
name|EventDetailRpcRequest
name|request
parameter_list|,
name|GwtRpcHelper
name|helper
parameter_list|,
name|EventRights
name|rights
parameter_list|)
block|{
name|Event
name|event
init|=
name|EventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|request
operator|.
name|getEventId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|==
literal|null
condition|)
throw|throw
operator|new
name|EventException
argument_list|(
literal|"No event with id "
operator|+
name|request
operator|.
name|getEventId
argument_list|()
operator|+
literal|" found."
argument_list|)
throw|;
if|if
condition|(
operator|!
name|rights
operator|.
name|canSee
argument_list|(
name|event
argument_list|)
condition|)
throw|throw
name|rights
operator|.
name|getException
argument_list|()
throw|;
name|EventInterface
name|detail
init|=
name|getEventDetail
argument_list|(
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|)
argument_list|,
name|event
argument_list|,
name|rights
argument_list|)
decl_stmt|;
return|return
name|detail
return|;
block|}
specifier|public
specifier|static
name|EventInterface
name|getEventDetail
parameter_list|(
name|Session
name|session
parameter_list|,
name|Event
name|e
parameter_list|,
name|EventRights
name|rights
parameter_list|)
throws|throws
name|EventException
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|EventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|EventInterface
name|event
init|=
operator|new
name|EventInterface
argument_list|()
decl_stmt|;
name|event
operator|.
name|setId
argument_list|(
name|e
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setName
argument_list|(
name|e
operator|.
name|getEventName
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setType
argument_list|(
name|EventInterface
operator|.
name|EventType
operator|.
name|values
argument_list|()
index|[
name|e
operator|.
name|getEventType
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|event
operator|.
name|setCanView
argument_list|(
name|rights
operator|.
name|canSee
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|event
operator|.
name|setCanEdit
argument_list|(
name|rights
operator|.
name|canEdit
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|event
operator|.
name|setEmail
argument_list|(
name|e
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setMaxCapacity
argument_list|(
name|e
operator|.
name|getMaxCapacity
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getMainContact
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ContactInterface
name|contact
init|=
operator|new
name|ContactInterface
argument_list|()
decl_stmt|;
name|contact
operator|.
name|setFirstName
argument_list|(
name|e
operator|.
name|getMainContact
argument_list|()
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setMiddleName
argument_list|(
name|e
operator|.
name|getMainContact
argument_list|()
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setLastName
argument_list|(
name|e
operator|.
name|getMainContact
argument_list|()
operator|.
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setExternalId
argument_list|(
name|e
operator|.
name|getMainContact
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setPhone
argument_list|(
name|e
operator|.
name|getMainContact
argument_list|()
operator|.
name|getPhone
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setEmail
argument_list|(
name|e
operator|.
name|getMainContact
argument_list|()
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setContact
argument_list|(
name|contact
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|EventContact
name|c
range|:
name|e
operator|.
name|getAdditionalContacts
argument_list|()
control|)
block|{
name|ContactInterface
name|contact
init|=
operator|new
name|ContactInterface
argument_list|()
decl_stmt|;
name|contact
operator|.
name|setFirstName
argument_list|(
name|c
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setMiddleName
argument_list|(
name|c
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setLastName
argument_list|(
name|c
operator|.
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setExternalId
argument_list|(
name|c
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setPhone
argument_list|(
name|c
operator|.
name|getPhone
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setEmail
argument_list|(
name|c
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|addAdditionalContact
argument_list|(
name|contact
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|e
operator|.
name|getSponsoringOrganization
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SponsoringOrganizationInterface
name|sponsor
init|=
operator|new
name|SponsoringOrganizationInterface
argument_list|()
decl_stmt|;
name|sponsor
operator|.
name|setEmail
argument_list|(
name|e
operator|.
name|getSponsoringOrganization
argument_list|()
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
name|sponsor
operator|.
name|setName
argument_list|(
name|e
operator|.
name|getSponsoringOrganization
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sponsor
operator|.
name|setUniqueId
argument_list|(
name|e
operator|.
name|getSponsoringOrganization
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setSponsor
argument_list|(
name|sponsor
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Event
operator|.
name|sEventTypeClass
operator|==
name|e
operator|.
name|getEventType
argument_list|()
condition|)
block|{
name|ClassEvent
name|ce
init|=
operator|(
name|e
operator|instanceof
name|ClassEvent
condition|?
operator|(
name|ClassEvent
operator|)
name|e
else|:
name|ClassEventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|e
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
operator|)
decl_stmt|;
name|Class_
name|clazz
init|=
name|ce
operator|.
name|getClazz
argument_list|()
decl_stmt|;
name|event
operator|.
name|setEnrollment
argument_list|(
name|clazz
operator|.
name|getEnrollment
argument_list|()
argument_list|)
expr_stmt|;
name|RelatedObjectInterface
name|related
init|=
operator|new
name|RelatedObjectInterface
argument_list|()
decl_stmt|;
name|related
operator|.
name|setType
argument_list|(
name|RelatedObjectInterface
operator|.
name|RelatedObjectType
operator|.
name|Class
argument_list|)
expr_stmt|;
name|related
operator|.
name|setUniqueId
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|related
operator|.
name|setName
argument_list|(
name|clazz
operator|.
name|getClassLabel
argument_list|(
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|CourseOffering
name|courseOffering
init|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
decl_stmt|;
name|related
operator|.
name|addCourseName
argument_list|(
name|courseOffering
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|related
operator|.
name|setSectionNumber
argument_list|(
name|clazz
operator|.
name|getSectionNumberString
argument_list|(
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getClassSuffix
argument_list|()
operator|!=
literal|null
condition|)
name|related
operator|.
name|addExternalId
argument_list|(
name|clazz
operator|.
name|getClassSuffix
argument_list|()
argument_list|)
expr_stmt|;
name|related
operator|.
name|setInstruction
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getDesc
argument_list|()
argument_list|)
expr_stmt|;
name|related
operator|.
name|setInstructionType
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getItype
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|CourseOffering
name|co
range|:
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseOfferings
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|co
operator|.
name|isIsControl
argument_list|()
condition|)
block|{
name|related
operator|.
name|addCourseName
argument_list|(
name|co
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|co
argument_list|)
operator|!=
literal|null
condition|)
name|related
operator|.
name|addExternalId
argument_list|(
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|co
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|clazz
operator|.
name|getDisplayInstructor
argument_list|()
condition|)
block|{
for|for
control|(
name|ClassInstructor
name|i
range|:
name|clazz
operator|.
name|getClassInstructors
argument_list|()
control|)
block|{
name|ContactInterface
name|instructor
init|=
operator|new
name|ContactInterface
argument_list|()
decl_stmt|;
name|instructor
operator|.
name|setFirstName
argument_list|(
name|i
operator|.
name|getInstructor
argument_list|()
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setMiddleName
argument_list|(
name|i
operator|.
name|getInstructor
argument_list|()
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setLastName
argument_list|(
name|i
operator|.
name|getInstructor
argument_list|()
operator|.
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setExternalId
argument_list|(
name|i
operator|.
name|getInstructor
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setEmail
argument_list|(
name|i
operator|.
name|getInstructor
argument_list|()
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
name|related
operator|.
name|addInstructor
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
block|}
block|}
name|Assignment
name|assignment
init|=
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|assignment
operator|!=
literal|null
condition|)
block|{
name|TimeLocation
name|time
init|=
name|assignment
operator|.
name|getTimeLocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|time
operator|!=
literal|null
condition|)
block|{
name|related
operator|.
name|setTime
argument_list|(
name|time
operator|.
name|getDayHeader
argument_list|()
operator|+
literal|" "
operator|+
name|time
operator|.
name|getStartTimeHeader
argument_list|()
operator|+
literal|" - "
operator|+
name|time
operator|.
name|getEndTimeHeader
argument_list|()
argument_list|)
expr_stmt|;
name|related
operator|.
name|setDate
argument_list|(
name|time
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Location
name|r
range|:
name|assignment
operator|.
name|getRooms
argument_list|()
control|)
block|{
name|ResourceInterface
name|location
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|location
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|ROOM
argument_list|)
expr_stmt|;
name|location
operator|.
name|setId
argument_list|(
name|r
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setName
argument_list|(
name|r
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setHint
argument_list|(
name|r
operator|.
name|getHtmlHint
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setSize
argument_list|(
name|r
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setRoomType
argument_list|(
name|r
operator|.
name|getRoomTypeLabel
argument_list|()
argument_list|)
expr_stmt|;
name|related
operator|.
name|addLocation
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
block|}
name|event
operator|.
name|addRelatedObject
argument_list|(
name|related
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|Event
operator|.
name|sEventTypeFinalExam
operator|==
name|e
operator|.
name|getEventType
argument_list|()
operator|||
name|Event
operator|.
name|sEventTypeMidtermExam
operator|==
name|e
operator|.
name|getEventType
argument_list|()
condition|)
block|{
name|ExamEvent
name|xe
init|=
operator|(
name|e
operator|instanceof
name|ExamEvent
condition|?
operator|(
name|ExamEvent
operator|)
name|e
else|:
name|ExamEventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|e
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
operator|)
decl_stmt|;
name|event
operator|.
name|setEnrollment
argument_list|(
name|xe
operator|.
name|getExam
argument_list|()
operator|.
name|countStudents
argument_list|()
argument_list|)
expr_stmt|;
name|RelatedObjectInterface
name|related
init|=
operator|new
name|RelatedObjectInterface
argument_list|()
decl_stmt|;
name|related
operator|.
name|setType
argument_list|(
name|RelatedObjectInterface
operator|.
name|RelatedObjectType
operator|.
name|Examination
argument_list|)
expr_stmt|;
name|related
operator|.
name|setUniqueId
argument_list|(
name|xe
operator|.
name|getExam
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|related
operator|.
name|setName
argument_list|(
name|xe
operator|.
name|getExam
argument_list|()
operator|.
name|getName
argument_list|()
operator|==
literal|null
condition|?
name|xe
operator|.
name|getExam
argument_list|()
operator|.
name|generateName
argument_list|()
else|:
name|xe
operator|.
name|getExam
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|related
operator|.
name|addCourseName
argument_list|(
name|related
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|related
operator|.
name|setInstruction
argument_list|(
name|e
operator|.
name|getEventTypeAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|related
operator|.
name|setInstructionType
argument_list|(
name|xe
operator|.
name|getExam
argument_list|()
operator|.
name|getExamType
argument_list|()
argument_list|)
expr_stmt|;
name|related
operator|.
name|setSectionNumber
argument_list|(
name|xe
operator|.
name|getExam
argument_list|()
operator|.
name|getLength
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|xe
operator|.
name|getExam
argument_list|()
operator|.
name|getAssignedPeriod
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ExamPeriod
name|period
init|=
name|xe
operator|.
name|getExam
argument_list|()
operator|.
name|getAssignedPeriod
argument_list|()
decl_stmt|;
name|related
operator|.
name|setDate
argument_list|(
name|period
operator|.
name|getStartDateLabel
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|printOffset
init|=
operator|(
name|xe
operator|.
name|getExam
argument_list|()
operator|.
name|getPrintOffset
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|xe
operator|.
name|getExam
argument_list|()
operator|.
name|getPrintOffset
argument_list|()
operator|)
decl_stmt|;
name|related
operator|.
name|setTime
argument_list|(
name|period
operator|.
name|getStartTimeLabel
argument_list|(
name|printOffset
argument_list|)
operator|+
literal|" - "
operator|+
name|period
operator|.
name|getEndTimeLabel
argument_list|(
name|xe
operator|.
name|getExam
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|,
name|printOffset
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Location
name|r
range|:
name|xe
operator|.
name|getExam
argument_list|()
operator|.
name|getAssignedRooms
argument_list|()
control|)
block|{
name|ResourceInterface
name|location
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|location
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|ROOM
argument_list|)
expr_stmt|;
name|location
operator|.
name|setId
argument_list|(
name|r
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setName
argument_list|(
name|r
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setHint
argument_list|(
name|r
operator|.
name|getHtmlHint
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setSize
argument_list|(
name|r
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setRoomType
argument_list|(
name|r
operator|.
name|getRoomTypeLabel
argument_list|()
argument_list|)
expr_stmt|;
name|related
operator|.
name|addLocation
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|DepartmentalInstructor
name|i
range|:
name|xe
operator|.
name|getExam
argument_list|()
operator|.
name|getInstructors
argument_list|()
control|)
block|{
name|ContactInterface
name|instructor
init|=
operator|new
name|ContactInterface
argument_list|()
decl_stmt|;
name|instructor
operator|.
name|setFirstName
argument_list|(
name|i
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setMiddleName
argument_list|(
name|i
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setLastName
argument_list|(
name|i
operator|.
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setExternalId
argument_list|(
name|i
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setEmail
argument_list|(
name|i
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
name|related
operator|.
name|addInstructor
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
block|}
name|event
operator|.
name|addRelatedObject
argument_list|(
name|related
argument_list|)
expr_stmt|;
for|for
control|(
name|ExamOwner
name|owner
range|:
operator|new
name|TreeSet
argument_list|<
name|ExamOwner
argument_list|>
argument_list|(
name|xe
operator|.
name|getExam
argument_list|()
operator|.
name|getOwners
argument_list|()
argument_list|)
control|)
block|{
name|related
operator|=
operator|new
name|RelatedObjectInterface
argument_list|()
expr_stmt|;
name|related
operator|.
name|setType
argument_list|(
name|RelatedObjectInterface
operator|.
name|RelatedObjectType
operator|.
name|values
argument_list|()
index|[
name|owner
operator|.
name|getOwnerType
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|related
operator|.
name|setUniqueId
argument_list|(
name|owner
operator|.
name|getOwnerId
argument_list|()
argument_list|)
expr_stmt|;
name|related
operator|.
name|setName
argument_list|(
name|owner
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|related
operator|.
name|addCourseName
argument_list|(
name|owner
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|owner
operator|.
name|getOwnerType
argument_list|()
operator|==
name|ExamOwner
operator|.
name|sOwnerTypeClass
condition|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|owner
operator|.
name|getOwnerObject
argument_list|()
decl_stmt|;
name|related
operator|.
name|setSectionNumber
argument_list|(
name|clazz
operator|.
name|getSectionNumberString
argument_list|(
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getClassSuffix
argument_list|()
operator|!=
literal|null
condition|)
name|related
operator|.
name|addExternalId
argument_list|(
name|clazz
operator|.
name|getClassSuffix
argument_list|()
argument_list|)
expr_stmt|;
name|related
operator|.
name|setInstruction
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getDesc
argument_list|()
argument_list|)
expr_stmt|;
name|related
operator|.
name|setInstructionType
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getItype
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|CourseOffering
name|course
range|:
name|owner
operator|.
name|getCourse
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseOfferings
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|course
operator|.
name|isIsControl
argument_list|()
condition|)
block|{
name|related
operator|.
name|addCourseName
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|course
argument_list|)
operator|!=
literal|null
condition|)
name|related
operator|.
name|addExternalId
argument_list|(
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|course
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Assignment
name|assignment
init|=
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|assignment
operator|!=
literal|null
condition|)
block|{
name|TimeLocation
name|time
init|=
name|assignment
operator|.
name|getTimeLocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|time
operator|!=
literal|null
condition|)
block|{
name|related
operator|.
name|setTime
argument_list|(
name|time
operator|.
name|getDayHeader
argument_list|()
operator|+
literal|" "
operator|+
name|time
operator|.
name|getStartTimeHeader
argument_list|()
operator|+
literal|" - "
operator|+
name|time
operator|.
name|getEndTimeHeader
argument_list|()
argument_list|)
expr_stmt|;
name|related
operator|.
name|setDate
argument_list|(
name|time
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Location
name|r
range|:
name|assignment
operator|.
name|getRooms
argument_list|()
control|)
block|{
name|ResourceInterface
name|location
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|location
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|ROOM
argument_list|)
expr_stmt|;
name|location
operator|.
name|setId
argument_list|(
name|r
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setName
argument_list|(
name|r
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setHint
argument_list|(
name|r
operator|.
name|getHtmlHint
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setSize
argument_list|(
name|r
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setRoomType
argument_list|(
name|r
operator|.
name|getRoomTypeLabel
argument_list|()
argument_list|)
expr_stmt|;
name|related
operator|.
name|addLocation
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|owner
operator|.
name|getOwnerType
argument_list|()
operator|==
name|ExamOwner
operator|.
name|sOwnerTypeOffering
condition|)
block|{
for|for
control|(
name|CourseOffering
name|course
range|:
name|owner
operator|.
name|getCourse
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseOfferings
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|course
operator|.
name|isIsControl
argument_list|()
condition|)
block|{
name|related
operator|.
name|addCourseName
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|related
operator|.
name|setInstruction
argument_list|(
name|MESSAGES
operator|.
name|colOffering
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|owner
operator|.
name|getOwnerType
argument_list|()
operator|==
name|ExamOwner
operator|.
name|sOwnerTypeConfig
condition|)
block|{
name|InstrOfferingConfig
name|config
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|owner
operator|.
name|getOwnerObject
argument_list|()
decl_stmt|;
name|related
operator|.
name|setSectionNumber
argument_list|(
name|config
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|related
operator|.
name|setInstruction
argument_list|(
name|MESSAGES
operator|.
name|colConfig
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|related
operator|.
name|setInstruction
argument_list|(
name|MESSAGES
operator|.
name|colCourse
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|event
operator|.
name|addRelatedObject
argument_list|(
name|related
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|Event
operator|.
name|sEventTypeCourse
operator|==
name|e
operator|.
name|getEventType
argument_list|()
condition|)
block|{
name|CourseEvent
name|ce
init|=
operator|(
name|e
operator|instanceof
name|CourseEvent
condition|?
operator|(
name|CourseEvent
operator|)
name|e
else|:
name|CourseEventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|e
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
operator|)
decl_stmt|;
name|event
operator|.
name|setRequiredAttendance
argument_list|(
name|ce
operator|.
name|isReqAttendance
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|enrl
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RelatedCourseInfo
name|owner
range|:
operator|new
name|TreeSet
argument_list|<
name|RelatedCourseInfo
argument_list|>
argument_list|(
name|ce
operator|.
name|getRelatedCourses
argument_list|()
argument_list|)
control|)
block|{
name|RelatedObjectInterface
name|related
init|=
operator|new
name|RelatedObjectInterface
argument_list|()
decl_stmt|;
name|related
operator|.
name|setType
argument_list|(
name|RelatedObjectInterface
operator|.
name|RelatedObjectType
operator|.
name|values
argument_list|()
index|[
name|owner
operator|.
name|getOwnerType
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|related
operator|.
name|setUniqueId
argument_list|(
name|owner
operator|.
name|getOwnerId
argument_list|()
argument_list|)
expr_stmt|;
name|related
operator|.
name|addCourseName
argument_list|(
name|owner
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|related
operator|.
name|setName
argument_list|(
name|owner
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|related
operator|.
name|setSelection
argument_list|(
operator|new
name|long
index|[]
block|{
name|owner
operator|.
name|getCourse
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
block|,
name|owner
operator|.
name|getCourse
argument_list|()
operator|.
name|getUniqueId
argument_list|()
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|owner
operator|.
name|getOwnerType
argument_list|()
operator|==
name|ExamOwner
operator|.
name|sOwnerTypeClass
condition|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|owner
operator|.
name|getOwnerObject
argument_list|()
decl_stmt|;
name|related
operator|.
name|setSelection
argument_list|(
operator|new
name|long
index|[]
block|{
name|owner
operator|.
name|getCourse
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
block|,
name|owner
operator|.
name|getCourse
argument_list|()
operator|.
name|getUniqueId
argument_list|()
block|,
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getUniqueId
argument_list|()
block|,
name|clazz
operator|.
name|getUniqueId
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|related
operator|.
name|setSectionNumber
argument_list|(
name|clazz
operator|.
name|getSectionNumberString
argument_list|(
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getClassSuffix
argument_list|()
operator|!=
literal|null
condition|)
name|related
operator|.
name|addExternalId
argument_list|(
name|clazz
operator|.
name|getClassSuffix
argument_list|()
argument_list|)
expr_stmt|;
name|related
operator|.
name|setInstruction
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getDesc
argument_list|()
argument_list|)
expr_stmt|;
name|related
operator|.
name|setInstructionType
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getItype
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|CourseOffering
name|course
range|:
name|owner
operator|.
name|getCourse
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseOfferings
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|course
operator|.
name|isIsControl
argument_list|()
condition|)
block|{
name|related
operator|.
name|addCourseName
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|course
argument_list|)
operator|!=
literal|null
condition|)
name|related
operator|.
name|addExternalId
argument_list|(
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|course
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Assignment
name|assignment
init|=
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|assignment
operator|!=
literal|null
condition|)
block|{
name|TimeLocation
name|time
init|=
name|assignment
operator|.
name|getTimeLocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|time
operator|!=
literal|null
condition|)
block|{
name|related
operator|.
name|setTime
argument_list|(
name|time
operator|.
name|getDayHeader
argument_list|()
operator|+
literal|" "
operator|+
name|time
operator|.
name|getStartTimeHeader
argument_list|()
operator|+
literal|" - "
operator|+
name|time
operator|.
name|getEndTimeHeader
argument_list|()
argument_list|)
expr_stmt|;
name|related
operator|.
name|setDate
argument_list|(
name|time
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Location
name|r
range|:
name|assignment
operator|.
name|getRooms
argument_list|()
control|)
block|{
name|ResourceInterface
name|location
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|location
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|ROOM
argument_list|)
expr_stmt|;
name|location
operator|.
name|setId
argument_list|(
name|r
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setName
argument_list|(
name|r
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setHint
argument_list|(
name|r
operator|.
name|getHtmlHint
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setSize
argument_list|(
name|r
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setRoomType
argument_list|(
name|r
operator|.
name|getRoomTypeLabel
argument_list|()
argument_list|)
expr_stmt|;
name|related
operator|.
name|addLocation
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|owner
operator|.
name|getOwnerType
argument_list|()
operator|==
name|ExamOwner
operator|.
name|sOwnerTypeOffering
condition|)
block|{
for|for
control|(
name|CourseOffering
name|course
range|:
name|owner
operator|.
name|getCourse
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseOfferings
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|course
operator|.
name|isIsControl
argument_list|()
condition|)
block|{
name|related
operator|.
name|addCourseName
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|related
operator|.
name|setInstruction
argument_list|(
name|MESSAGES
operator|.
name|colOffering
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|owner
operator|.
name|getOwnerType
argument_list|()
operator|==
name|ExamOwner
operator|.
name|sOwnerTypeConfig
condition|)
block|{
name|InstrOfferingConfig
name|config
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|owner
operator|.
name|getOwnerObject
argument_list|()
decl_stmt|;
name|related
operator|.
name|setSelection
argument_list|(
operator|new
name|long
index|[]
block|{
name|owner
operator|.
name|getCourse
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
block|,
name|owner
operator|.
name|getCourse
argument_list|()
operator|.
name|getUniqueId
argument_list|()
block|,
name|config
operator|.
name|getUniqueId
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|related
operator|.
name|setSectionNumber
argument_list|(
name|config
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|related
operator|.
name|setInstruction
argument_list|(
name|MESSAGES
operator|.
name|colConfig
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|related
operator|.
name|setInstruction
argument_list|(
name|MESSAGES
operator|.
name|colCourse
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|event
operator|.
name|addRelatedObject
argument_list|(
name|related
argument_list|)
expr_stmt|;
name|enrl
operator|+=
name|owner
operator|.
name|countStudents
argument_list|()
expr_stmt|;
block|}
name|event
operator|.
name|setEnrollment
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
block|}
comment|// overlaps
name|Map
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Meeting
argument_list|>
argument_list|>
name|overlaps
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Meeting
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|EventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select m.uniqueId, o from Event e inner join e.meetings m, Meeting o "
operator|+
literal|"where e.uniqueId = :eventId and m.uniqueId != o.uniqueId and "
operator|+
literal|"o.startPeriod< m.stopPeriod and o.stopPeriod> m.startPeriod and "
operator|+
literal|"m.locationPermanentId = o.locationPermanentId and m.meetingDate = o.meetingDate"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"eventId"
argument_list|,
name|e
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Long
name|meetingId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Meeting
name|overlap
init|=
operator|(
name|Meeting
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Set
argument_list|<
name|Meeting
argument_list|>
name|overlapsThisMeeting
init|=
name|overlaps
operator|.
name|get
argument_list|(
name|meetingId
argument_list|)
decl_stmt|;
if|if
condition|(
name|overlapsThisMeeting
operator|==
literal|null
condition|)
block|{
name|overlapsThisMeeting
operator|=
operator|new
name|TreeSet
argument_list|<
name|Meeting
argument_list|>
argument_list|()
expr_stmt|;
name|overlaps
operator|.
name|put
argument_list|(
name|meetingId
argument_list|,
name|overlapsThisMeeting
argument_list|)
expr_stmt|;
block|}
name|overlapsThisMeeting
operator|.
name|add
argument_list|(
name|overlap
argument_list|)
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|EventInterface
argument_list|>
name|conflictingEvents
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|EventInterface
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Meeting
name|m
range|:
name|e
operator|.
name|getMeetings
argument_list|()
control|)
block|{
name|MeetingInterface
name|meeting
init|=
operator|new
name|MeetingInterface
argument_list|()
decl_stmt|;
name|meeting
operator|.
name|setId
argument_list|(
name|m
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setMeetingDate
argument_list|(
name|m
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setDayOfWeek
argument_list|(
name|Constants
operator|.
name|getDayOfWeek
argument_list|(
name|m
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setStartTime
argument_list|(
name|m
operator|.
name|getStartTime
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setStopTime
argument_list|(
name|m
operator|.
name|getStopTime
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setDayOfYear
argument_list|(
name|CalendarUtils
operator|.
name|date2dayOfYear
argument_list|(
name|session
operator|.
name|getSessionStartYear
argument_list|()
argument_list|,
name|m
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setStartSlot
argument_list|(
name|m
operator|.
name|getStartPeriod
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setEndSlot
argument_list|(
name|m
operator|.
name|getStopPeriod
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setStartOffset
argument_list|(
name|m
operator|.
name|getStartOffset
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|m
operator|.
name|getStartOffset
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setEndOffset
argument_list|(
name|m
operator|.
name|getStopOffset
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|m
operator|.
name|getStopOffset
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setPast
argument_list|(
name|rights
operator|.
name|isPastOrOutside
argument_list|(
name|m
operator|.
name|getStartTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|isApproved
argument_list|()
condition|)
name|meeting
operator|.
name|setApprovalDate
argument_list|(
name|m
operator|.
name|getApprovedDate
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setCanEdit
argument_list|(
name|rights
operator|.
name|canEdit
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setCanApprove
argument_list|(
name|rights
operator|.
name|canApprove
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ResourceInterface
name|location
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|location
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|ROOM
argument_list|)
expr_stmt|;
name|location
operator|.
name|setId
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setName
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setHint
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getHtmlHint
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setSize
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setRoomType
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getRoomTypeLabel
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setLocation
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Meeting
argument_list|>
name|overlapsThisMeeting
init|=
name|overlaps
operator|.
name|get
argument_list|(
name|m
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|overlapsThisMeeting
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Meeting
name|overlap
range|:
name|overlapsThisMeeting
control|)
block|{
name|MeetingConglictInterface
name|conflict
init|=
operator|new
name|MeetingConglictInterface
argument_list|()
decl_stmt|;
name|conflict
operator|.
name|setEventId
argument_list|(
name|overlap
operator|.
name|getEvent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|conflict
operator|.
name|setName
argument_list|(
name|overlap
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventName
argument_list|()
argument_list|)
expr_stmt|;
name|conflict
operator|.
name|setType
argument_list|(
name|EventInterface
operator|.
name|EventType
operator|.
name|values
argument_list|()
index|[
name|overlap
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventType
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|conflict
operator|.
name|setId
argument_list|(
name|overlap
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|conflict
operator|.
name|setMeetingDate
argument_list|(
name|overlap
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
expr_stmt|;
name|conflict
operator|.
name|setDayOfYear
argument_list|(
name|meeting
operator|.
name|getDayOfYear
argument_list|()
argument_list|)
expr_stmt|;
name|conflict
operator|.
name|setStartSlot
argument_list|(
name|overlap
operator|.
name|getStartPeriod
argument_list|()
argument_list|)
expr_stmt|;
name|conflict
operator|.
name|setEndSlot
argument_list|(
name|overlap
operator|.
name|getStopPeriod
argument_list|()
argument_list|)
expr_stmt|;
name|conflict
operator|.
name|setStartOffset
argument_list|(
name|overlap
operator|.
name|getStartOffset
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|overlap
operator|.
name|getStartOffset
argument_list|()
argument_list|)
expr_stmt|;
name|conflict
operator|.
name|setEndOffset
argument_list|(
name|overlap
operator|.
name|getStopOffset
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|overlap
operator|.
name|getStopOffset
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|overlap
operator|.
name|isApproved
argument_list|()
condition|)
name|conflict
operator|.
name|setApprovalDate
argument_list|(
name|overlap
operator|.
name|getApprovedDate
argument_list|()
argument_list|)
expr_stmt|;
name|conflict
operator|.
name|setLocation
argument_list|(
name|meeting
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|EventInterface
name|confEvent
init|=
name|conflictingEvents
operator|.
name|get
argument_list|(
name|overlap
operator|.
name|getEvent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|confEvent
operator|==
literal|null
condition|)
block|{
name|confEvent
operator|=
operator|new
name|EventInterface
argument_list|()
expr_stmt|;
name|confEvent
operator|.
name|setId
argument_list|(
name|overlap
operator|.
name|getEvent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|confEvent
operator|.
name|setName
argument_list|(
name|overlap
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventName
argument_list|()
argument_list|)
expr_stmt|;
name|confEvent
operator|.
name|setType
argument_list|(
name|EventInterface
operator|.
name|EventType
operator|.
name|values
argument_list|()
index|[
name|overlap
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventType
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|conflictingEvents
operator|.
name|put
argument_list|(
name|overlap
operator|.
name|getEvent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|confEvent
argument_list|)
expr_stmt|;
name|confEvent
operator|.
name|setCanView
argument_list|(
name|rights
operator|.
name|canSee
argument_list|(
name|overlap
operator|.
name|getEvent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|confEvent
operator|.
name|setMaxCapacity
argument_list|(
name|overlap
operator|.
name|getEvent
argument_list|()
operator|.
name|getMaxCapacity
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|overlap
operator|.
name|getEvent
argument_list|()
operator|.
name|getMainContact
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ContactInterface
name|contact
init|=
operator|new
name|ContactInterface
argument_list|()
decl_stmt|;
name|contact
operator|.
name|setFirstName
argument_list|(
name|overlap
operator|.
name|getEvent
argument_list|()
operator|.
name|getMainContact
argument_list|()
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setMiddleName
argument_list|(
name|overlap
operator|.
name|getEvent
argument_list|()
operator|.
name|getMainContact
argument_list|()
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setLastName
argument_list|(
name|overlap
operator|.
name|getEvent
argument_list|()
operator|.
name|getMainContact
argument_list|()
operator|.
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
name|confEvent
operator|.
name|setContact
argument_list|(
name|contact
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|overlap
operator|.
name|getEvent
argument_list|()
operator|.
name|getSponsoringOrganization
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SponsoringOrganizationInterface
name|sponsor
init|=
operator|new
name|SponsoringOrganizationInterface
argument_list|()
decl_stmt|;
name|sponsor
operator|.
name|setEmail
argument_list|(
name|overlap
operator|.
name|getEvent
argument_list|()
operator|.
name|getSponsoringOrganization
argument_list|()
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
name|sponsor
operator|.
name|setName
argument_list|(
name|overlap
operator|.
name|getEvent
argument_list|()
operator|.
name|getSponsoringOrganization
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sponsor
operator|.
name|setUniqueId
argument_list|(
name|overlap
operator|.
name|getEvent
argument_list|()
operator|.
name|getSponsoringOrganization
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|confEvent
operator|.
name|setSponsor
argument_list|(
name|sponsor
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Event
operator|.
name|sEventTypeClass
operator|==
name|overlap
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventType
argument_list|()
condition|)
block|{
name|ClassEvent
name|ce
init|=
name|ClassEventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|overlap
operator|.
name|getEvent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|Class_
name|clazz
init|=
name|ce
operator|.
name|getClazz
argument_list|()
decl_stmt|;
name|confEvent
operator|.
name|setEnrollment
argument_list|(
name|clazz
operator|.
name|getEnrollment
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getDisplayInstructor
argument_list|()
condition|)
block|{
for|for
control|(
name|ClassInstructor
name|i
range|:
name|clazz
operator|.
name|getClassInstructors
argument_list|()
control|)
block|{
name|ContactInterface
name|instructor
init|=
operator|new
name|ContactInterface
argument_list|()
decl_stmt|;
name|instructor
operator|.
name|setFirstName
argument_list|(
name|i
operator|.
name|getInstructor
argument_list|()
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setMiddleName
argument_list|(
name|i
operator|.
name|getInstructor
argument_list|()
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setLastName
argument_list|(
name|i
operator|.
name|getInstructor
argument_list|()
operator|.
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
name|confEvent
operator|.
name|addInstructor
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
block|}
block|}
name|CourseOffering
name|correctedOffering
init|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CourseOffering
argument_list|>
name|courses
init|=
operator|new
name|ArrayList
argument_list|<
name|CourseOffering
argument_list|>
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseOfferings
argument_list|()
argument_list|)
decl_stmt|;
name|confEvent
operator|.
name|addCourseName
argument_list|(
name|correctedOffering
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|confEvent
operator|.
name|setInstruction
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getDesc
argument_list|()
operator|.
name|length
argument_list|()
operator|<=
literal|20
condition|?
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getDesc
argument_list|()
else|:
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|confEvent
operator|.
name|setInstructionType
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getItype
argument_list|()
argument_list|)
expr_stmt|;
name|confEvent
operator|.
name|setSectionNumber
argument_list|(
name|clazz
operator|.
name|getSectionNumberString
argument_list|(
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|correctedOffering
argument_list|)
operator|==
literal|null
condition|)
block|{
name|confEvent
operator|.
name|setName
argument_list|(
name|clazz
operator|.
name|getClassLabel
argument_list|(
name|correctedOffering
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|confEvent
operator|.
name|addExternalId
argument_list|(
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|correctedOffering
argument_list|)
argument_list|)
expr_stmt|;
name|confEvent
operator|.
name|setName
argument_list|(
name|correctedOffering
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|correctedOffering
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CourseOffering
name|co
range|:
name|courses
control|)
block|{
name|confEvent
operator|.
name|addCourseName
argument_list|(
name|co
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getSectionNumberString
argument_list|(
name|hibSession
argument_list|)
operator|!=
literal|null
condition|)
name|confEvent
operator|.
name|addExternalId
argument_list|(
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|co
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|Event
operator|.
name|sEventTypeFinalExam
operator|==
name|overlap
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventType
argument_list|()
operator|||
name|Event
operator|.
name|sEventTypeMidtermExam
operator|==
name|overlap
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventType
argument_list|()
condition|)
block|{
name|ExamEvent
name|xe
init|=
name|ExamEventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|overlap
operator|.
name|getEvent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|confEvent
operator|.
name|setEnrollment
argument_list|(
name|xe
operator|.
name|getExam
argument_list|()
operator|.
name|countStudents
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|DepartmentalInstructor
name|i
range|:
name|xe
operator|.
name|getExam
argument_list|()
operator|.
name|getInstructors
argument_list|()
control|)
block|{
name|ContactInterface
name|instructor
init|=
operator|new
name|ContactInterface
argument_list|()
decl_stmt|;
name|instructor
operator|.
name|setFirstName
argument_list|(
name|i
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setMiddleName
argument_list|(
name|i
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setLastName
argument_list|(
name|i
operator|.
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
name|confEvent
operator|.
name|addInstructor
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ExamOwner
name|owner
range|:
operator|new
name|TreeSet
argument_list|<
name|ExamOwner
argument_list|>
argument_list|(
name|xe
operator|.
name|getExam
argument_list|()
operator|.
name|getOwners
argument_list|()
argument_list|)
control|)
block|{
for|for
control|(
name|CourseOffering
name|course
range|:
name|owner
operator|.
name|getCourse
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseOfferings
argument_list|()
control|)
block|{
name|String
name|courseName
init|=
name|owner
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
decl_stmt|;
name|String
name|label
init|=
name|owner
operator|.
name|getLabel
argument_list|()
decl_stmt|;
if|if
condition|(
name|label
operator|.
name|startsWith
argument_list|(
name|courseName
argument_list|)
condition|)
block|{
name|label
operator|=
name|label
operator|.
name|substring
argument_list|(
name|courseName
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|confEvent
operator|.
name|addCourseName
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|confEvent
operator|.
name|addExternalId
argument_list|(
name|label
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|Event
operator|.
name|sEventTypeCourse
operator|==
name|overlap
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventType
argument_list|()
condition|)
block|{
name|CourseEvent
name|ce
init|=
name|CourseEventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|overlap
operator|.
name|getEvent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|confEvent
operator|.
name|setRequiredAttendance
argument_list|(
name|ce
operator|.
name|isReqAttendance
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|enrl
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RelatedCourseInfo
name|owner
range|:
name|ce
operator|.
name|getRelatedCourses
argument_list|()
control|)
block|{
name|enrl
operator|+=
name|owner
operator|.
name|countStudents
argument_list|()
expr_stmt|;
for|for
control|(
name|CourseOffering
name|course
range|:
name|owner
operator|.
name|getCourse
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseOfferings
argument_list|()
control|)
block|{
name|String
name|courseName
init|=
name|owner
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
decl_stmt|;
name|String
name|label
init|=
name|owner
operator|.
name|getLabel
argument_list|()
decl_stmt|;
if|if
condition|(
name|label
operator|.
name|startsWith
argument_list|(
name|courseName
argument_list|)
condition|)
block|{
name|label
operator|=
name|label
operator|.
name|substring
argument_list|(
name|courseName
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|confEvent
operator|.
name|addCourseName
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|confEvent
operator|.
name|addExternalId
argument_list|(
name|label
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|confEvent
operator|.
name|setEnrollment
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
block|}
block|}
name|confEvent
operator|.
name|addMeeting
argument_list|(
name|conflict
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|addConflict
argument_list|(
name|conflict
argument_list|)
expr_stmt|;
block|}
block|}
name|event
operator|.
name|addMeeting
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|EventInterface
name|confEvent
range|:
name|conflictingEvents
operator|.
name|values
argument_list|()
control|)
name|event
operator|.
name|addConflict
argument_list|(
name|confEvent
argument_list|)
expr_stmt|;
for|for
control|(
name|EventNote
name|n
range|:
name|e
operator|.
name|getNotes
argument_list|()
control|)
block|{
name|NoteInterface
name|note
init|=
operator|new
name|NoteInterface
argument_list|()
decl_stmt|;
name|note
operator|.
name|setDate
argument_list|(
name|n
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
expr_stmt|;
name|note
operator|.
name|setType
argument_list|(
name|NoteInterface
operator|.
name|NoteType
operator|.
name|values
argument_list|()
index|[
name|n
operator|.
name|getNoteType
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|note
operator|.
name|setMeetings
argument_list|(
name|n
operator|.
name|getMeetingsHtml
argument_list|()
argument_list|)
expr_stmt|;
name|note
operator|.
name|setNote
argument_list|(
name|n
operator|.
name|getTextNote
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|n
operator|.
name|getTextNote
argument_list|()
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|"<br>"
argument_list|)
argument_list|)
expr_stmt|;
name|note
operator|.
name|setUser
argument_list|(
name|n
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|addNote
argument_list|(
name|note
argument_list|)
expr_stmt|;
block|}
return|return
name|event
return|;
block|}
block|}
end_class

end_unit

