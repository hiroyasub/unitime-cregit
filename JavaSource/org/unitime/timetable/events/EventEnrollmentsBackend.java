begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|events
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcResponseList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|ApprovalStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|MeetingInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|RelatedObjectInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|Conflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|Enrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|EventEnrollmentsRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicAreaClassification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseDemand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Meeting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PosMajor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentAccomodation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentClassEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Event
operator|.
name|MultiMeeting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ClassEventDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|Class_DAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseEventDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|EventDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExamEventDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|GwtRpcImplements
argument_list|(
name|EventEnrollmentsRpcRequest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|EventEnrollmentsBackend
extends|extends
name|EventAction
argument_list|<
name|EventEnrollmentsRpcRequest
argument_list|,
name|GwtRpcResponseList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|GwtRpcResponseList
argument_list|<
name|Enrollment
argument_list|>
name|execute
parameter_list|(
name|EventEnrollmentsRpcRequest
name|request
parameter_list|,
name|EventContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|hasRelatedObjects
argument_list|()
condition|)
block|{
name|context
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|EventAddCourseRelated
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|Meeting
argument_list|>
argument_list|>
name|conflicts
init|=
literal|null
decl_stmt|;
name|HashSet
argument_list|<
name|StudentClassEnrollment
argument_list|>
name|enrollments
init|=
operator|new
name|HashSet
argument_list|<
name|StudentClassEnrollment
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RelatedObjectInterface
name|related
range|:
name|request
operator|.
name|getRelatedObjects
argument_list|()
control|)
block|{
name|enrollments
operator|.
name|addAll
argument_list|(
name|getStudentClassEnrollments
argument_list|(
name|related
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|hasMeetings
argument_list|()
condition|)
block|{
name|conflicts
operator|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|Meeting
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|MeetingInterface
name|meeting
range|:
name|request
operator|.
name|getMeetings
argument_list|()
control|)
if|if
condition|(
name|meeting
operator|.
name|getApprovalStatus
argument_list|()
operator|==
name|ApprovalStatus
operator|.
name|Approved
operator|||
name|meeting
operator|.
name|getApprovalStatus
argument_list|()
operator|==
name|ApprovalStatus
operator|.
name|Pending
condition|)
name|computeConflicts
argument_list|(
name|conflicts
argument_list|,
name|meeting
argument_list|,
name|related
argument_list|,
name|request
operator|.
name|getEventId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|convert
argument_list|(
name|enrollments
argument_list|,
name|conflicts
argument_list|,
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|EnrollmentsShowExternalId
argument_list|)
argument_list|,
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|CourseRequests
argument_list|)
argument_list|,
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|SchedulingAssistant
argument_list|)
argument_list|)
return|;
block|}
if|else if
condition|(
name|request
operator|.
name|hasEventId
argument_list|()
condition|)
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|EventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Event
name|event
init|=
name|EventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|request
operator|.
name|getEventId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|request
operator|.
name|getEventId
argument_list|()
operator|<
literal|0
condition|)
block|{
name|Class_
name|clazz
init|=
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
operator|-
name|request
operator|.
name|getEventId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|checkPermission
argument_list|(
name|clazz
argument_list|,
name|Right
operator|.
name|ClassDetail
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|StudentClassEnrollment
argument_list|>
name|enrollments
init|=
name|clazz
operator|.
name|getStudentEnrollments
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollments
operator|==
literal|null
operator|||
name|enrollments
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
return|return
name|convert
argument_list|(
name|enrollments
argument_list|,
literal|null
argument_list|,
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|EnrollmentsShowExternalId
argument_list|)
argument_list|,
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|CourseRequests
argument_list|)
argument_list|,
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|SchedulingAssistant
argument_list|)
argument_list|)
return|;
block|}
block|}
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|errorBadEventId
argument_list|()
argument_list|)
throw|;
block|}
name|context
operator|.
name|checkPermission
argument_list|(
name|event
argument_list|,
name|Right
operator|.
name|EventDetail
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|StudentClassEnrollment
argument_list|>
name|enrollments
init|=
name|event
operator|.
name|getStudentClassEnrollments
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollments
operator|==
literal|null
operator|||
name|enrollments
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|Event
operator|.
name|sEventTypeClass
operator|==
name|event
operator|.
name|getEventType
argument_list|()
condition|)
block|{
return|return
name|convert
argument_list|(
name|enrollments
argument_list|,
name|computeConflicts
argument_list|(
name|event
operator|instanceof
name|ClassEvent
condition|?
operator|(
name|ClassEvent
operator|)
name|event
else|:
name|ClassEventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|event
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
argument_list|)
argument_list|,
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|EnrollmentsShowExternalId
argument_list|)
argument_list|,
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|CourseRequests
argument_list|)
argument_list|,
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|SchedulingAssistant
argument_list|)
argument_list|)
return|;
block|}
if|else if
condition|(
name|Event
operator|.
name|sEventTypeFinalExam
operator|==
name|event
operator|.
name|getEventType
argument_list|()
operator|||
name|Event
operator|.
name|sEventTypeMidtermExam
operator|==
name|event
operator|.
name|getEventType
argument_list|()
condition|)
block|{
return|return
name|convert
argument_list|(
name|enrollments
argument_list|,
name|computeConflicts
argument_list|(
name|event
operator|instanceof
name|ExamEvent
condition|?
operator|(
name|ExamEvent
operator|)
name|event
else|:
name|ExamEventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|event
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
argument_list|)
argument_list|,
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|EnrollmentsShowExternalId
argument_list|)
argument_list|,
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|CourseRequests
argument_list|)
argument_list|,
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|SchedulingAssistant
argument_list|)
argument_list|)
return|;
block|}
if|else  if
condition|(
name|Event
operator|.
name|sEventTypeCourse
operator|==
name|event
operator|.
name|getEventType
argument_list|()
condition|)
block|{
return|return
name|convert
argument_list|(
name|enrollments
argument_list|,
name|computeConflicts
argument_list|(
name|event
operator|instanceof
name|CourseEvent
condition|?
operator|(
name|CourseEvent
operator|)
name|event
else|:
name|CourseEventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|event
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
argument_list|)
argument_list|,
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|EnrollmentsShowExternalId
argument_list|)
argument_list|,
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|CourseRequests
argument_list|)
argument_list|,
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|SchedulingAssistant
argument_list|)
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|Collection
argument_list|<
name|StudentClassEnrollment
argument_list|>
name|getStudentClassEnrollments
parameter_list|(
name|RelatedObjectInterface
name|relatedObject
parameter_list|)
block|{
switch|switch
condition|(
name|relatedObject
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|Class
case|:
return|return
name|EventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct e from StudentClassEnrollment e, StudentClassEnrollment f where f.clazz.uniqueId = :classId"
operator|+
literal|" and e.courseOffering.instructionalOffering = f.courseOffering.instructionalOffering and e.student = f.student"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"classId"
argument_list|,
name|relatedObject
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
case|case
name|Config
case|:
return|return
name|EventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct e from StudentClassEnrollment e, StudentClassEnrollment f where f.clazz.schedulingSubpart.instrOfferingConfig.uniqueId = :configId"
operator|+
literal|" and e.courseOffering.instructionalOffering = f.courseOffering.instructionalOffering and e.student = f.student"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"configId"
argument_list|,
name|relatedObject
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
case|case
name|Course
case|:
return|return
name|EventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select e from StudentClassEnrollment e where e.courseOffering.uniqueId = :courseId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"courseId"
argument_list|,
name|relatedObject
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
case|case
name|Offering
case|:
return|return
name|EventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select e from StudentClassEnrollment e where e.courseOffering.instructionalOffering.uniqueId = :offeringId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"offeringId"
argument_list|,
name|relatedObject
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
default|default :
throw|throw
operator|new
name|GwtRpcException
argument_list|(
literal|"Unsupported related object type "
operator|+
name|relatedObject
operator|.
name|getType
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|void
name|computeConflicts
parameter_list|(
name|Map
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|Meeting
argument_list|>
argument_list|>
name|conflicts
parameter_list|,
name|MeetingInterface
name|meeting
parameter_list|,
name|RelatedObjectInterface
name|relatedObject
parameter_list|,
name|Long
name|eventId
parameter_list|)
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|EventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|relatedObject
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|Class
case|:
comment|// class events
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select s1.student.uniqueId, m1"
operator|+
literal|" from StudentClassEnrollment s1, ClassEvent e1 inner join e1.meetings m1, StudentClassEnrollment s2"
operator|+
literal|" where s2.clazz.uniqueId = :classId and e1.clazz = s1.clazz and s1.student = s2.student"
operator|+
literal|" and m1.meetingDate = :meetingDate and m1.startPeriod< :stopPeriod and :startPeriod< m1.stopPeriod"
argument_list|)
operator|.
name|setDate
argument_list|(
literal|"meetingDate"
argument_list|,
name|meeting
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"startPeriod"
argument_list|,
name|meeting
operator|.
name|getStartSlot
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"stopPeriod"
argument_list|,
name|meeting
operator|.
name|getEndSlot
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"classId"
argument_list|,
name|relatedObject
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Meeting
name|conflictingMeeting
init|=
operator|(
name|Meeting
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|List
argument_list|<
name|Meeting
argument_list|>
name|meetings
init|=
name|conflicts
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|meetings
operator|==
literal|null
condition|)
block|{
name|meetings
operator|=
operator|new
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
argument_list|()
expr_stmt|;
name|conflicts
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|meetings
argument_list|)
expr_stmt|;
block|}
name|meetings
operator|.
name|add
argument_list|(
name|conflictingMeeting
argument_list|)
expr_stmt|;
block|}
comment|// exam events
for|for
control|(
name|int
name|t1
init|=
literal|0
init|;
name|t1
operator|<
name|ExamOwner
operator|.
name|sOwnerTypes
operator|.
name|length
condition|;
name|t1
operator|++
control|)
block|{
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select s1.student.uniqueId, m1"
operator|+
literal|" from StudentClassEnrollment s1, ExamEvent e1 inner join e1.meetings m1 inner join e1.exam.owners o1, StudentClassEnrollment s2"
operator|+
literal|" where s2.clazz.uniqueId = :classId and s1.student = s2.student"
operator|+
name|where
argument_list|(
name|t1
argument_list|,
literal|1
argument_list|)
operator|+
literal|" and m1.meetingDate = :meetingDate and m1.startPeriod< :stopPeriod and :startPeriod< m1.stopPeriod"
argument_list|)
operator|.
name|setDate
argument_list|(
literal|"meetingDate"
argument_list|,
name|meeting
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"startPeriod"
argument_list|,
name|meeting
operator|.
name|getStartSlot
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"stopPeriod"
argument_list|,
name|meeting
operator|.
name|getEndSlot
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"classId"
argument_list|,
name|relatedObject
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Meeting
name|conflictingMeeting
init|=
operator|(
name|Meeting
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|List
argument_list|<
name|Meeting
argument_list|>
name|meetings
init|=
name|conflicts
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|meetings
operator|==
literal|null
condition|)
block|{
name|meetings
operator|=
operator|new
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
argument_list|()
expr_stmt|;
name|conflicts
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|meetings
argument_list|)
expr_stmt|;
block|}
name|meetings
operator|.
name|add
argument_list|(
name|conflictingMeeting
argument_list|)
expr_stmt|;
block|}
block|}
comment|// course events
for|for
control|(
name|int
name|t1
init|=
literal|0
init|;
name|t1
operator|<
name|ExamOwner
operator|.
name|sOwnerTypes
operator|.
name|length
condition|;
name|t1
operator|++
control|)
block|{
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select s1.student.uniqueId, m1"
operator|+
literal|" from StudentClassEnrollment s1, CourseEvent e1 inner join e1.meetings m1 inner join e1.relatedCourses o1, StudentClassEnrollment s2"
operator|+
literal|" where s2.clazz.uniqueId = :classId and e1.uniqueId != :eventId and s1.student = s2.student"
operator|+
name|where
argument_list|(
name|t1
argument_list|,
literal|1
argument_list|)
operator|+
literal|" and m1.meetingDate = :meetingDate and m1.startPeriod< :stopPeriod and :startPeriod< m1.stopPeriod and e1.reqAttendance = true and m1.approvalStatus = 1"
argument_list|)
operator|.
name|setDate
argument_list|(
literal|"meetingDate"
argument_list|,
name|meeting
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"startPeriod"
argument_list|,
name|meeting
operator|.
name|getStartSlot
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"stopPeriod"
argument_list|,
name|meeting
operator|.
name|getEndSlot
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"classId"
argument_list|,
name|relatedObject
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"eventId"
argument_list|,
name|eventId
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|eventId
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Meeting
name|conflictingMeeting
init|=
operator|(
name|Meeting
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|List
argument_list|<
name|Meeting
argument_list|>
name|meetings
init|=
name|conflicts
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|meetings
operator|==
literal|null
condition|)
block|{
name|meetings
operator|=
operator|new
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
argument_list|()
expr_stmt|;
name|conflicts
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|meetings
argument_list|)
expr_stmt|;
block|}
name|meetings
operator|.
name|add
argument_list|(
name|conflictingMeeting
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|Config
case|:
comment|// class events
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select s1.student.uniqueId, m1"
operator|+
literal|" from StudentClassEnrollment s1, ClassEvent e1 inner join e1.meetings m1, StudentClassEnrollment s2"
operator|+
literal|" where s2.clazz.schedulingSubpart.instrOfferingConfig.uniqueId = :configId and e1.clazz = s1.clazz and s1.student = s2.student"
operator|+
literal|" and m1.meetingDate = :meetingDate and m1.startPeriod< :stopPeriod and :startPeriod< m1.stopPeriod"
argument_list|)
operator|.
name|setDate
argument_list|(
literal|"meetingDate"
argument_list|,
name|meeting
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"startPeriod"
argument_list|,
name|meeting
operator|.
name|getStartSlot
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"stopPeriod"
argument_list|,
name|meeting
operator|.
name|getEndSlot
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"configId"
argument_list|,
name|relatedObject
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Meeting
name|conflictingMeeting
init|=
operator|(
name|Meeting
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|List
argument_list|<
name|Meeting
argument_list|>
name|meetings
init|=
name|conflicts
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|meetings
operator|==
literal|null
condition|)
block|{
name|meetings
operator|=
operator|new
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
argument_list|()
expr_stmt|;
name|conflicts
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|meetings
argument_list|)
expr_stmt|;
block|}
name|meetings
operator|.
name|add
argument_list|(
name|conflictingMeeting
argument_list|)
expr_stmt|;
block|}
comment|// exam events
for|for
control|(
name|int
name|t1
init|=
literal|0
init|;
name|t1
operator|<
name|ExamOwner
operator|.
name|sOwnerTypes
operator|.
name|length
condition|;
name|t1
operator|++
control|)
block|{
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select s1.student.uniqueId, m1"
operator|+
literal|" from StudentClassEnrollment s1, ExamEvent e1 inner join e1.meetings m1 inner join e1.exam.owners o1, StudentClassEnrollment s2"
operator|+
literal|" where s2.clazz.schedulingSubpart.instrOfferingConfig.uniqueId = :configId and s1.student = s2.student"
operator|+
name|where
argument_list|(
name|t1
argument_list|,
literal|1
argument_list|)
operator|+
literal|" and m1.meetingDate = :meetingDate and m1.startPeriod< :stopPeriod and :startPeriod< m1.stopPeriod"
argument_list|)
operator|.
name|setDate
argument_list|(
literal|"meetingDate"
argument_list|,
name|meeting
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"startPeriod"
argument_list|,
name|meeting
operator|.
name|getStartSlot
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"stopPeriod"
argument_list|,
name|meeting
operator|.
name|getEndSlot
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"configId"
argument_list|,
name|relatedObject
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Meeting
name|conflictingMeeting
init|=
operator|(
name|Meeting
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|List
argument_list|<
name|Meeting
argument_list|>
name|meetings
init|=
name|conflicts
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|meetings
operator|==
literal|null
condition|)
block|{
name|meetings
operator|=
operator|new
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
argument_list|()
expr_stmt|;
name|conflicts
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|meetings
argument_list|)
expr_stmt|;
block|}
name|meetings
operator|.
name|add
argument_list|(
name|conflictingMeeting
argument_list|)
expr_stmt|;
block|}
block|}
comment|// course events
for|for
control|(
name|int
name|t1
init|=
literal|0
init|;
name|t1
operator|<
name|ExamOwner
operator|.
name|sOwnerTypes
operator|.
name|length
condition|;
name|t1
operator|++
control|)
block|{
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select s1.student.uniqueId, m1"
operator|+
literal|" from StudentClassEnrollment s1, CourseEvent e1 inner join e1.meetings m1 inner join e1.relatedCourses o1, StudentClassEnrollment s2"
operator|+
literal|" where s2.clazz.schedulingSubpart.instrOfferingConfig.uniqueId = :configId and e1.uniqueId != :eventId and s1.student = s2.student"
operator|+
name|where
argument_list|(
name|t1
argument_list|,
literal|1
argument_list|)
operator|+
literal|" and m1.meetingDate = :meetingDate and m1.startPeriod< :stopPeriod and :startPeriod< m1.stopPeriod and e1.reqAttendance = true and m1.approvalStatus = 1"
argument_list|)
operator|.
name|setDate
argument_list|(
literal|"meetingDate"
argument_list|,
name|meeting
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"startPeriod"
argument_list|,
name|meeting
operator|.
name|getStartSlot
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"stopPeriod"
argument_list|,
name|meeting
operator|.
name|getEndSlot
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"configId"
argument_list|,
name|relatedObject
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"eventId"
argument_list|,
name|eventId
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|eventId
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Meeting
name|conflictingMeeting
init|=
operator|(
name|Meeting
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|List
argument_list|<
name|Meeting
argument_list|>
name|meetings
init|=
name|conflicts
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|meetings
operator|==
literal|null
condition|)
block|{
name|meetings
operator|=
operator|new
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
argument_list|()
expr_stmt|;
name|conflicts
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|meetings
argument_list|)
expr_stmt|;
block|}
name|meetings
operator|.
name|add
argument_list|(
name|conflictingMeeting
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|Course
case|:
comment|// class events
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select s1.student.uniqueId, m1"
operator|+
literal|" from StudentClassEnrollment s1, ClassEvent e1 inner join e1.meetings m1, StudentClassEnrollment s2"
operator|+
literal|" where s2.courseOffering.uniqueId = :courseId and e1.clazz = s1.clazz and s1.student = s2.student"
operator|+
literal|" and m1.meetingDate = :meetingDate and m1.startPeriod< :stopPeriod and :startPeriod< m1.stopPeriod"
argument_list|)
operator|.
name|setDate
argument_list|(
literal|"meetingDate"
argument_list|,
name|meeting
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"startPeriod"
argument_list|,
name|meeting
operator|.
name|getStartSlot
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"stopPeriod"
argument_list|,
name|meeting
operator|.
name|getEndSlot
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"courseId"
argument_list|,
name|relatedObject
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Meeting
name|conflictingMeeting
init|=
operator|(
name|Meeting
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|List
argument_list|<
name|Meeting
argument_list|>
name|meetings
init|=
name|conflicts
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|meetings
operator|==
literal|null
condition|)
block|{
name|meetings
operator|=
operator|new
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
argument_list|()
expr_stmt|;
name|conflicts
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|meetings
argument_list|)
expr_stmt|;
block|}
name|meetings
operator|.
name|add
argument_list|(
name|conflictingMeeting
argument_list|)
expr_stmt|;
block|}
comment|// exam events
for|for
control|(
name|int
name|t1
init|=
literal|0
init|;
name|t1
operator|<
name|ExamOwner
operator|.
name|sOwnerTypes
operator|.
name|length
condition|;
name|t1
operator|++
control|)
block|{
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select s1.student.uniqueId, m1"
operator|+
literal|" from StudentClassEnrollment s1, ExamEvent e1 inner join e1.meetings m1 inner join e1.exam.owners o1, StudentClassEnrollment s2"
operator|+
literal|" where s2.courseOffering.uniqueId = :courseId and s1.student = s2.student"
operator|+
name|where
argument_list|(
name|t1
argument_list|,
literal|1
argument_list|)
operator|+
literal|" and m1.meetingDate = :meetingDate and m1.startPeriod< :stopPeriod and :startPeriod< m1.stopPeriod"
argument_list|)
operator|.
name|setDate
argument_list|(
literal|"meetingDate"
argument_list|,
name|meeting
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"startPeriod"
argument_list|,
name|meeting
operator|.
name|getStartSlot
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"stopPeriod"
argument_list|,
name|meeting
operator|.
name|getEndSlot
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"courseId"
argument_list|,
name|relatedObject
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Meeting
name|conflictingMeeting
init|=
operator|(
name|Meeting
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|List
argument_list|<
name|Meeting
argument_list|>
name|meetings
init|=
name|conflicts
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|meetings
operator|==
literal|null
condition|)
block|{
name|meetings
operator|=
operator|new
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
argument_list|()
expr_stmt|;
name|conflicts
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|meetings
argument_list|)
expr_stmt|;
block|}
name|meetings
operator|.
name|add
argument_list|(
name|conflictingMeeting
argument_list|)
expr_stmt|;
block|}
block|}
comment|// course events
for|for
control|(
name|int
name|t1
init|=
literal|0
init|;
name|t1
operator|<
name|ExamOwner
operator|.
name|sOwnerTypes
operator|.
name|length
condition|;
name|t1
operator|++
control|)
block|{
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select s1.student.uniqueId, m1"
operator|+
literal|" from StudentClassEnrollment s1, CourseEvent e1 inner join e1.meetings m1 inner join e1.relatedCourses o1, StudentClassEnrollment s2"
operator|+
literal|" where s2.courseOffering.uniqueId = :courseId and e1.uniqueId != :eventId and s1.student = s2.student"
operator|+
name|where
argument_list|(
name|t1
argument_list|,
literal|1
argument_list|)
operator|+
literal|" and m1.meetingDate = :meetingDate and m1.startPeriod< :stopPeriod and :startPeriod< m1.stopPeriod and e1.reqAttendance = true and m1.approvalStatus = 1"
argument_list|)
operator|.
name|setDate
argument_list|(
literal|"meetingDate"
argument_list|,
name|meeting
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"startPeriod"
argument_list|,
name|meeting
operator|.
name|getStartSlot
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"stopPeriod"
argument_list|,
name|meeting
operator|.
name|getEndSlot
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"courseId"
argument_list|,
name|relatedObject
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"eventId"
argument_list|,
name|eventId
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|eventId
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Meeting
name|conflictingMeeting
init|=
operator|(
name|Meeting
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|List
argument_list|<
name|Meeting
argument_list|>
name|meetings
init|=
name|conflicts
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|meetings
operator|==
literal|null
condition|)
block|{
name|meetings
operator|=
operator|new
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
argument_list|()
expr_stmt|;
name|conflicts
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|meetings
argument_list|)
expr_stmt|;
block|}
name|meetings
operator|.
name|add
argument_list|(
name|conflictingMeeting
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|Offering
case|:
comment|// class events
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select s1.student.uniqueId, m1"
operator|+
literal|" from StudentClassEnrollment s1, ClassEvent e1 inner join e1.meetings m1, StudentClassEnrollment s2"
operator|+
literal|" where s2.courseOffering.instructionalOffering.uniqueId = :offeringId and e1.clazz = s1.clazz and s1.student = s2.student"
operator|+
literal|" and m1.meetingDate = :meetingDate and m1.startPeriod< :stopPeriod and :startPeriod< m1.stopPeriod"
argument_list|)
operator|.
name|setDate
argument_list|(
literal|"meetingDate"
argument_list|,
name|meeting
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"startPeriod"
argument_list|,
name|meeting
operator|.
name|getStartSlot
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"stopPeriod"
argument_list|,
name|meeting
operator|.
name|getEndSlot
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"offeringId"
argument_list|,
name|relatedObject
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Meeting
name|conflictingMeeting
init|=
operator|(
name|Meeting
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|List
argument_list|<
name|Meeting
argument_list|>
name|meetings
init|=
name|conflicts
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|meetings
operator|==
literal|null
condition|)
block|{
name|meetings
operator|=
operator|new
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
argument_list|()
expr_stmt|;
name|conflicts
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|meetings
argument_list|)
expr_stmt|;
block|}
name|meetings
operator|.
name|add
argument_list|(
name|conflictingMeeting
argument_list|)
expr_stmt|;
block|}
comment|// exam events
for|for
control|(
name|int
name|t1
init|=
literal|0
init|;
name|t1
operator|<
name|ExamOwner
operator|.
name|sOwnerTypes
operator|.
name|length
condition|;
name|t1
operator|++
control|)
block|{
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select s1.student.uniqueId, m1"
operator|+
literal|" from StudentClassEnrollment s1, ExamEvent e1 inner join e1.meetings m1 inner join e1.exam.owners o1, StudentClassEnrollment s2"
operator|+
literal|" where s2.courseOffering.instructionalOffering.uniqueId = :offeringId and s1.student = s2.student"
operator|+
name|where
argument_list|(
name|t1
argument_list|,
literal|1
argument_list|)
operator|+
literal|" and m1.meetingDate = :meetingDate and m1.startPeriod< :stopPeriod and :startPeriod< m1.stopPeriod"
argument_list|)
operator|.
name|setDate
argument_list|(
literal|"meetingDate"
argument_list|,
name|meeting
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"startPeriod"
argument_list|,
name|meeting
operator|.
name|getStartSlot
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"stopPeriod"
argument_list|,
name|meeting
operator|.
name|getEndSlot
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"offeringId"
argument_list|,
name|relatedObject
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Meeting
name|conflictingMeeting
init|=
operator|(
name|Meeting
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|List
argument_list|<
name|Meeting
argument_list|>
name|meetings
init|=
name|conflicts
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|meetings
operator|==
literal|null
condition|)
block|{
name|meetings
operator|=
operator|new
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
argument_list|()
expr_stmt|;
name|conflicts
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|meetings
argument_list|)
expr_stmt|;
block|}
name|meetings
operator|.
name|add
argument_list|(
name|conflictingMeeting
argument_list|)
expr_stmt|;
block|}
block|}
comment|// course events
for|for
control|(
name|int
name|t1
init|=
literal|0
init|;
name|t1
operator|<
name|ExamOwner
operator|.
name|sOwnerTypes
operator|.
name|length
condition|;
name|t1
operator|++
control|)
block|{
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select s1.student.uniqueId, m1"
operator|+
literal|" from StudentClassEnrollment s1, CourseEvent e1 inner join e1.meetings m1 inner join e1.relatedCourses o1, StudentClassEnrollment s2"
operator|+
literal|" where s2.courseOffering.instructionalOffering.uniqueId = :offeringId and e1.uniqueId != :eventId and s1.student = s2.student"
operator|+
name|where
argument_list|(
name|t1
argument_list|,
literal|1
argument_list|)
operator|+
literal|" and m1.meetingDate = :meetingDate and m1.startPeriod< :stopPeriod and :startPeriod< m1.stopPeriod and e1.reqAttendance = true and m1.approvalStatus = 1"
argument_list|)
operator|.
name|setDate
argument_list|(
literal|"meetingDate"
argument_list|,
name|meeting
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"startPeriod"
argument_list|,
name|meeting
operator|.
name|getStartSlot
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"stopPeriod"
argument_list|,
name|meeting
operator|.
name|getEndSlot
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"offeringId"
argument_list|,
name|relatedObject
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"eventId"
argument_list|,
name|eventId
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|eventId
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Meeting
name|conflictingMeeting
init|=
operator|(
name|Meeting
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|List
argument_list|<
name|Meeting
argument_list|>
name|meetings
init|=
name|conflicts
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|meetings
operator|==
literal|null
condition|)
block|{
name|meetings
operator|=
operator|new
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
argument_list|()
expr_stmt|;
name|conflicts
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|meetings
argument_list|)
expr_stmt|;
block|}
name|meetings
operator|.
name|add
argument_list|(
name|conflictingMeeting
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
block|}
specifier|public
specifier|static
name|GwtRpcResponseList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
name|convert
parameter_list|(
name|Collection
argument_list|<
name|StudentClassEnrollment
argument_list|>
name|enrollments
parameter_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|Meeting
argument_list|>
argument_list|>
name|conflicts
parameter_list|,
name|boolean
name|canShowExtId
parameter_list|,
name|boolean
name|canRegister
parameter_list|,
name|boolean
name|canUseAssistant
parameter_list|)
block|{
name|GwtRpcResponseList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
name|converted
init|=
operator|new
name|GwtRpcResponseList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|approvedBy2name
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
name|student2enrollment
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StudentClassEnrollment
name|enrollment
range|:
name|enrollments
control|)
block|{
name|ClassAssignmentInterface
operator|.
name|Enrollment
name|enrl
init|=
name|student2enrollment
operator|.
name|get
argument_list|(
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|enrl
operator|==
literal|null
condition|)
block|{
name|ClassAssignmentInterface
operator|.
name|Student
name|st
init|=
operator|new
name|ClassAssignmentInterface
operator|.
name|Student
argument_list|()
decl_stmt|;
name|st
operator|.
name|setId
argument_list|(
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|setExternalId
argument_list|(
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|setCanShowExternalId
argument_list|(
name|canShowExtId
argument_list|)
expr_stmt|;
name|st
operator|.
name|setCanRegister
argument_list|(
name|canRegister
argument_list|)
expr_stmt|;
name|st
operator|.
name|setCanUseAssistant
argument_list|(
name|canUseAssistant
argument_list|)
expr_stmt|;
name|st
operator|.
name|setName
argument_list|(
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|(
name|ApplicationProperty
operator|.
name|OnlineSchedulingStudentNameFormat
operator|.
name|value
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|AcademicAreaClassification
name|ac
range|:
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getAcademicAreaClassifications
argument_list|()
control|)
block|{
name|st
operator|.
name|addArea
argument_list|(
name|ac
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|addClassification
argument_list|(
name|ac
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PosMajor
name|m
range|:
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getPosMajors
argument_list|()
control|)
block|{
name|st
operator|.
name|addMajor
argument_list|(
name|m
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|StudentGroup
name|g
range|:
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getGroups
argument_list|()
control|)
block|{
name|st
operator|.
name|addGroup
argument_list|(
name|g
operator|.
name|getGroupAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|StudentAccomodation
name|a
range|:
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getAccomodations
argument_list|()
control|)
block|{
name|st
operator|.
name|addAccommodation
argument_list|(
name|a
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|enrl
operator|=
operator|new
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|()
expr_stmt|;
name|enrl
operator|.
name|setStudent
argument_list|(
name|st
argument_list|)
expr_stmt|;
name|enrl
operator|.
name|setEnrolledDate
argument_list|(
name|enrollment
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|CourseAssignment
name|c
init|=
operator|new
name|CourseAssignment
argument_list|()
decl_stmt|;
name|c
operator|.
name|setCourseId
argument_list|(
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setSubject
argument_list|(
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setCourseNbr
argument_list|(
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|enrl
operator|.
name|setCourse
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|student2enrollment
operator|.
name|put
argument_list|(
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|enrl
argument_list|)
expr_stmt|;
if|if
condition|(
name|enrollment
operator|.
name|getCourseRequest
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|enrl
operator|.
name|setPriority
argument_list|(
literal|1
operator|+
name|enrollment
operator|.
name|getCourseRequest
argument_list|()
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|enrollment
operator|.
name|getCourseRequest
argument_list|()
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getCourseRequests
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|CourseRequest
name|first
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CourseRequest
name|r
range|:
name|enrollment
operator|.
name|getCourseRequest
argument_list|()
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getCourseRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|first
operator|==
literal|null
operator|||
name|r
operator|.
name|getOrder
argument_list|()
operator|.
name|compareTo
argument_list|(
name|first
operator|.
name|getOrder
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
name|first
operator|=
name|r
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|first
operator|.
name|equals
argument_list|(
name|enrollment
operator|.
name|getCourseRequest
argument_list|()
argument_list|)
condition|)
name|enrl
operator|.
name|setAlternative
argument_list|(
name|first
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|enrollment
operator|.
name|getCourseRequest
argument_list|()
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|isAlternative
argument_list|()
condition|)
block|{
name|CourseDemand
name|first
init|=
name|enrollment
operator|.
name|getCourseRequest
argument_list|()
operator|.
name|getCourseDemand
argument_list|()
decl_stmt|;
name|demands
label|:
for|for
control|(
name|CourseDemand
name|cd
range|:
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getCourseDemands
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|cd
operator|.
name|isAlternative
argument_list|()
operator|&&
name|cd
operator|.
name|getPriority
argument_list|()
operator|.
name|compareTo
argument_list|(
name|first
operator|.
name|getPriority
argument_list|()
argument_list|)
operator|<
literal|0
operator|&&
operator|!
name|cd
operator|.
name|getCourseRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|CourseRequest
name|cr
range|:
name|cd
operator|.
name|getCourseRequests
argument_list|()
control|)
if|if
condition|(
name|cr
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue
name|demands
continue|;
name|first
operator|=
name|cd
expr_stmt|;
block|}
block|}
name|CourseRequest
name|alt
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CourseRequest
name|r
range|:
name|first
operator|.
name|getCourseRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|alt
operator|==
literal|null
operator|||
name|r
operator|.
name|getOrder
argument_list|()
operator|.
name|compareTo
argument_list|(
name|alt
operator|.
name|getOrder
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
name|alt
operator|=
name|r
expr_stmt|;
block|}
name|enrl
operator|.
name|setAlternative
argument_list|(
name|alt
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|enrl
operator|.
name|setRequestedDate
argument_list|(
name|enrollment
operator|.
name|getCourseRequest
argument_list|()
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|enrl
operator|.
name|setApprovedDate
argument_list|(
name|enrollment
operator|.
name|getApprovedDate
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|enrollment
operator|.
name|getApprovedBy
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|name
init|=
name|approvedBy2name
operator|.
name|get
argument_list|(
name|enrollment
operator|.
name|getApprovedBy
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|TimetableManager
name|mgr
init|=
operator|(
name|TimetableManager
operator|)
name|EventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from TimetableManager where externalUniqueId = :externalId"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"externalId"
argument_list|,
name|enrollment
operator|.
name|getApprovedBy
argument_list|()
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|mgr
operator|!=
literal|null
condition|)
block|{
name|name
operator|=
name|mgr
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|DepartmentalInstructor
name|instr
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|EventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from DepartmentalInstructor where externalUniqueId = :externalId and department.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"externalId"
argument_list|,
name|enrollment
operator|.
name|getApprovedBy
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|instr
operator|!=
literal|null
condition|)
name|name
operator|=
name|instr
operator|.
name|nameLastNameFirst
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
name|approvedBy2name
operator|.
name|put
argument_list|(
name|enrollment
operator|.
name|getApprovedBy
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
name|enrl
operator|.
name|setApprovedBy
argument_list|(
name|name
operator|==
literal|null
condition|?
name|enrollment
operator|.
name|getApprovedBy
argument_list|()
else|:
name|name
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|enrl
operator|.
name|setPriority
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Meeting
argument_list|>
name|conf
init|=
operator|(
name|conflicts
operator|==
literal|null
condition|?
literal|null
else|:
name|conflicts
operator|.
name|get
argument_list|(
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|conf
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|Event
argument_list|,
name|TreeSet
argument_list|<
name|Meeting
argument_list|>
argument_list|>
name|events
init|=
operator|new
name|HashMap
argument_list|<
name|Event
argument_list|,
name|TreeSet
argument_list|<
name|Meeting
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Meeting
name|m
range|:
name|conf
control|)
block|{
name|TreeSet
argument_list|<
name|Meeting
argument_list|>
name|ms
init|=
name|events
operator|.
name|get
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ms
operator|==
literal|null
condition|)
block|{
name|ms
operator|=
operator|new
name|TreeSet
argument_list|<
name|Meeting
argument_list|>
argument_list|()
expr_stmt|;
name|events
operator|.
name|put
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
argument_list|,
name|ms
argument_list|)
expr_stmt|;
block|}
name|ms
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Event
name|confEvent
range|:
operator|new
name|TreeSet
argument_list|<
name|Event
argument_list|>
argument_list|(
name|events
operator|.
name|keySet
argument_list|()
argument_list|)
control|)
block|{
name|Conflict
name|conflict
init|=
operator|new
name|Conflict
argument_list|()
decl_stmt|;
name|conflict
operator|.
name|setName
argument_list|(
name|confEvent
operator|.
name|getEventName
argument_list|()
argument_list|)
expr_stmt|;
name|conflict
operator|.
name|setType
argument_list|(
name|confEvent
operator|.
name|getEventTypeAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|lastDate
init|=
literal|null
decl_stmt|,
name|lastTime
init|=
literal|null
decl_stmt|,
name|lastRoom
init|=
literal|null
decl_stmt|;
for|for
control|(
name|MultiMeeting
name|mm
range|:
name|Event
operator|.
name|getMultiMeetings
argument_list|(
name|events
operator|.
name|get
argument_list|(
name|confEvent
argument_list|)
argument_list|)
control|)
block|{
name|String
name|date
init|=
name|getDateFormat
argument_list|()
operator|.
name|format
argument_list|(
name|mm
operator|.
name|getMeetings
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
operator|+
operator|(
name|mm
operator|.
name|getMeetings
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|?
literal|""
else|:
literal|" - "
operator|+
name|getDateFormat
argument_list|()
operator|.
name|format
argument_list|(
name|mm
operator|.
name|getMeetings
argument_list|()
operator|.
name|last
argument_list|()
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|lastDate
operator|==
literal|null
condition|)
block|{
name|conflict
operator|.
name|setDate
argument_list|(
name|date
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|lastDate
operator|.
name|equals
argument_list|(
name|date
argument_list|)
condition|)
block|{
name|conflict
operator|.
name|setDate
argument_list|(
name|conflict
operator|.
name|getDate
argument_list|()
operator|+
literal|"<br>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|conflict
operator|.
name|setDate
argument_list|(
name|conflict
operator|.
name|getDate
argument_list|()
operator|+
literal|"<br>"
operator|+
name|date
argument_list|)
expr_stmt|;
block|}
name|lastDate
operator|=
name|date
expr_stmt|;
name|String
name|time
init|=
name|mm
operator|.
name|getDays
argument_list|(
name|CONSTANTS
operator|.
name|days
argument_list|()
argument_list|,
name|CONSTANTS
operator|.
name|shortDays
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|mm
operator|.
name|getMeetings
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|isAllDay
argument_list|()
condition|?
literal|"All Day"
else|:
name|mm
operator|.
name|getMeetings
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|startTime
argument_list|()
operator|+
literal|" - "
operator|+
name|mm
operator|.
name|getMeetings
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|stopTime
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|lastTime
operator|==
literal|null
condition|)
block|{
name|conflict
operator|.
name|setTime
argument_list|(
name|time
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|lastTime
operator|.
name|equals
argument_list|(
name|time
argument_list|)
condition|)
block|{
name|conflict
operator|.
name|setTime
argument_list|(
name|conflict
operator|.
name|getTime
argument_list|()
operator|+
literal|"<br>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|conflict
operator|.
name|setTime
argument_list|(
name|conflict
operator|.
name|getTime
argument_list|()
operator|+
literal|"<br>"
operator|+
name|time
argument_list|)
expr_stmt|;
block|}
name|lastTime
operator|=
name|time
expr_stmt|;
name|String
name|room
init|=
operator|(
name|mm
operator|.
name|getMeetings
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|mm
operator|.
name|getMeetings
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|lastRoom
operator|==
literal|null
condition|)
block|{
name|conflict
operator|.
name|setRoom
argument_list|(
name|room
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|lastRoom
operator|.
name|equals
argument_list|(
name|room
argument_list|)
condition|)
block|{
name|conflict
operator|.
name|setRoom
argument_list|(
name|conflict
operator|.
name|getRoom
argument_list|()
operator|+
literal|"<br>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|conflict
operator|.
name|setRoom
argument_list|(
name|conflict
operator|.
name|getRoom
argument_list|()
operator|+
literal|"<br>"
operator|+
name|room
argument_list|)
expr_stmt|;
block|}
name|lastRoom
operator|=
name|room
expr_stmt|;
block|}
name|enrl
operator|.
name|addConflict
argument_list|(
name|conflict
argument_list|)
expr_stmt|;
block|}
block|}
name|converted
operator|.
name|add
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
block|}
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|c
init|=
name|enrl
operator|.
name|getCourse
argument_list|()
operator|.
name|addClassAssignment
argument_list|()
decl_stmt|;
name|c
operator|.
name|setClassId
argument_list|(
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setSection
argument_list|(
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassSuffix
argument_list|(
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getSection
argument_list|()
operator|==
literal|null
condition|)
name|c
operator|.
name|setSection
argument_list|(
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getSectionNumberString
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setClassNumber
argument_list|(
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getSectionNumberString
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setSubpart
argument_list|(
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|converted
return|;
block|}
specifier|private
specifier|static
name|String
name|where
parameter_list|(
name|int
name|type
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|ExamOwner
operator|.
name|sOwnerTypeClass
case|:
return|return
literal|" and o"
operator|+
name|idx
operator|+
literal|".ownerType = "
operator|+
name|type
operator|+
literal|" and o"
operator|+
name|idx
operator|+
literal|".ownerId = s"
operator|+
name|idx
operator|+
literal|".clazz.uniqueId"
return|;
case|case
name|ExamOwner
operator|.
name|sOwnerTypeConfig
case|:
return|return
literal|" and o"
operator|+
name|idx
operator|+
literal|".ownerType = "
operator|+
name|type
operator|+
literal|" and o"
operator|+
name|idx
operator|+
literal|".ownerId = s"
operator|+
name|idx
operator|+
literal|".clazz.schedulingSubpart.instrOfferingConfig.uniqueId"
return|;
case|case
name|ExamOwner
operator|.
name|sOwnerTypeCourse
case|:
return|return
literal|" and o"
operator|+
name|idx
operator|+
literal|".ownerType = "
operator|+
name|type
operator|+
literal|" and o"
operator|+
name|idx
operator|+
literal|".ownerId = s"
operator|+
name|idx
operator|+
literal|".courseOffering.uniqueId"
return|;
case|case
name|ExamOwner
operator|.
name|sOwnerTypeOffering
case|:
return|return
literal|" and o"
operator|+
name|idx
operator|+
literal|".ownerType = "
operator|+
name|type
operator|+
literal|" and o"
operator|+
name|idx
operator|+
literal|".ownerId = s"
operator|+
name|idx
operator|+
literal|".courseOffering.instructionalOffering.uniqueId"
return|;
default|default:
return|return
literal|""
return|;
block|}
block|}
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|Meeting
argument_list|>
argument_list|>
name|computeConflicts
parameter_list|(
name|ClassEvent
name|event
parameter_list|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|Meeting
argument_list|>
argument_list|>
name|conflicts
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|Meeting
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|EventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
comment|// class events
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select s1.student.uniqueId, m1"
operator|+
literal|" from StudentClassEnrollment s1, ClassEvent e1 inner join e1.meetings m1, ClassEvent e2 inner join e2.meetings m2, StudentClassEnrollment s2"
operator|+
literal|" where e2.uniqueId = :eventId and e1.uniqueId != e2.uniqueId and e1.clazz = s1.clazz and e2.clazz = s2.clazz and s1.student = s2.student"
operator|+
literal|" and m1.meetingDate = m2.meetingDate and m1.startPeriod< m2.stopPeriod and m2.startPeriod< m1.stopPeriod"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"eventId"
argument_list|,
name|event
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Meeting
name|meeting
init|=
operator|(
name|Meeting
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|List
argument_list|<
name|Meeting
argument_list|>
name|meetings
init|=
name|conflicts
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|meetings
operator|==
literal|null
condition|)
block|{
name|meetings
operator|=
operator|new
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
argument_list|()
expr_stmt|;
name|conflicts
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|meetings
argument_list|)
expr_stmt|;
block|}
name|meetings
operator|.
name|add
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
block|}
comment|// examination events
for|for
control|(
name|int
name|t1
init|=
literal|0
init|;
name|t1
operator|<
name|ExamOwner
operator|.
name|sOwnerTypes
operator|.
name|length
condition|;
name|t1
operator|++
control|)
block|{
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select s1.student.uniqueId, m1"
operator|+
literal|" from StudentClassEnrollment s1, ExamEvent e1 inner join e1.meetings m1 inner join e1.exam.owners o1, ClassEvent e2 inner join e2.meetings m2, StudentClassEnrollment s2"
operator|+
literal|" where e2.uniqueId = :eventId and e1.uniqueId != e2.uniqueId and e2.clazz = s2.clazz and s1.student = s2.student"
operator|+
name|where
argument_list|(
name|t1
argument_list|,
literal|1
argument_list|)
operator|+
literal|" and m1.meetingDate = m2.meetingDate and m1.startPeriod< m2.stopPeriod and m2.startPeriod< m1.stopPeriod"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"eventId"
argument_list|,
name|event
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Meeting
name|meeting
init|=
operator|(
name|Meeting
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|List
argument_list|<
name|Meeting
argument_list|>
name|meetings
init|=
name|conflicts
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|meetings
operator|==
literal|null
condition|)
block|{
name|meetings
operator|=
operator|new
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
argument_list|()
expr_stmt|;
name|conflicts
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|meetings
argument_list|)
expr_stmt|;
block|}
name|meetings
operator|.
name|add
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
block|}
block|}
comment|// course events
for|for
control|(
name|int
name|t1
init|=
literal|0
init|;
name|t1
operator|<
name|ExamOwner
operator|.
name|sOwnerTypes
operator|.
name|length
condition|;
name|t1
operator|++
control|)
block|{
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select s1.student.uniqueId, m1"
operator|+
literal|" from StudentClassEnrollment s1, CourseEvent e1 inner join e1.meetings m1 inner join e1.relatedCourses o1, ClassEvent e2 inner join e2.meetings m2, StudentClassEnrollment s2"
operator|+
literal|" where e2.uniqueId = :eventId and e1.uniqueId != e2.uniqueId and e2.clazz = s2.clazz and s1.student = s2.student"
operator|+
name|where
argument_list|(
name|t1
argument_list|,
literal|1
argument_list|)
operator|+
literal|" and m1.meetingDate = m2.meetingDate and m1.startPeriod< m2.stopPeriod and m2.startPeriod< m1.stopPeriod and e1.reqAttendance = true and m1.approvalStatus = 1"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"eventId"
argument_list|,
name|event
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Meeting
name|meeting
init|=
operator|(
name|Meeting
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|List
argument_list|<
name|Meeting
argument_list|>
name|meetings
init|=
name|conflicts
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|meetings
operator|==
literal|null
condition|)
block|{
name|meetings
operator|=
operator|new
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
argument_list|()
expr_stmt|;
name|conflicts
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|meetings
argument_list|)
expr_stmt|;
block|}
name|meetings
operator|.
name|add
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|conflicts
return|;
block|}
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|Meeting
argument_list|>
argument_list|>
name|computeConflicts
parameter_list|(
name|ExamEvent
name|event
parameter_list|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|Meeting
argument_list|>
argument_list|>
name|conflicts
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|Meeting
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|EventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
comment|// class events
for|for
control|(
name|int
name|t2
init|=
literal|0
init|;
name|t2
operator|<
name|ExamOwner
operator|.
name|sOwnerTypes
operator|.
name|length
condition|;
name|t2
operator|++
control|)
block|{
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select s1.student.uniqueId, m1"
operator|+
literal|" from StudentClassEnrollment s1, ClassEvent e1 inner join e1.meetings m1, ExamEvent e2 inner join e2.meetings m2 inner join e2.exam.owners o2, StudentClassEnrollment s2"
operator|+
literal|" where e2.uniqueId = :eventId and e1.uniqueId != e2.uniqueId and e1.clazz = s1.clazz and s1.student = s2.student"
operator|+
name|where
argument_list|(
name|t2
argument_list|,
literal|2
argument_list|)
operator|+
literal|" and m1.meetingDate = m2.meetingDate and m1.startPeriod< m2.stopPeriod and m2.startPeriod< m1.stopPeriod"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"eventId"
argument_list|,
name|event
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Meeting
name|meeting
init|=
operator|(
name|Meeting
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|List
argument_list|<
name|Meeting
argument_list|>
name|meetings
init|=
name|conflicts
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|meetings
operator|==
literal|null
condition|)
block|{
name|meetings
operator|=
operator|new
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
argument_list|()
expr_stmt|;
name|conflicts
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|meetings
argument_list|)
expr_stmt|;
block|}
name|meetings
operator|.
name|add
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
block|}
block|}
comment|// examination events
for|for
control|(
name|int
name|t1
init|=
literal|0
init|;
name|t1
operator|<
name|ExamOwner
operator|.
name|sOwnerTypes
operator|.
name|length
condition|;
name|t1
operator|++
control|)
block|{
for|for
control|(
name|int
name|t2
init|=
literal|0
init|;
name|t2
operator|<
name|ExamOwner
operator|.
name|sOwnerTypes
operator|.
name|length
condition|;
name|t2
operator|++
control|)
block|{
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select s1.student.uniqueId, m1"
operator|+
literal|" from StudentClassEnrollment s1, ExamEvent e1 inner join e1.meetings m1 inner join e1.exam.owners o1, ExamEvent e2 inner join e2.meetings m2 inner join e2.exam.owners o2, StudentClassEnrollment s2"
operator|+
literal|" where e2.uniqueId = :eventId and e1.uniqueId != e2.uniqueId and s1.student = s2.student"
operator|+
name|where
argument_list|(
name|t1
argument_list|,
literal|1
argument_list|)
operator|+
name|where
argument_list|(
name|t2
argument_list|,
literal|2
argument_list|)
operator|+
literal|" and m1.meetingDate = m2.meetingDate and m1.startPeriod< m2.stopPeriod and m2.startPeriod< m1.stopPeriod"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"eventId"
argument_list|,
name|event
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Meeting
name|meeting
init|=
operator|(
name|Meeting
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|List
argument_list|<
name|Meeting
argument_list|>
name|meetings
init|=
name|conflicts
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|meetings
operator|==
literal|null
condition|)
block|{
name|meetings
operator|=
operator|new
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
argument_list|()
expr_stmt|;
name|conflicts
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|meetings
argument_list|)
expr_stmt|;
block|}
name|meetings
operator|.
name|add
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// course events
for|for
control|(
name|int
name|t1
init|=
literal|0
init|;
name|t1
operator|<
name|ExamOwner
operator|.
name|sOwnerTypes
operator|.
name|length
condition|;
name|t1
operator|++
control|)
block|{
for|for
control|(
name|int
name|t2
init|=
literal|0
init|;
name|t2
operator|<
name|ExamOwner
operator|.
name|sOwnerTypes
operator|.
name|length
condition|;
name|t2
operator|++
control|)
block|{
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select s1.student.uniqueId, m1"
operator|+
literal|" from StudentClassEnrollment s1, CourseEvent e1 inner join e1.meetings m1 inner join e1.relatedCourses o1, ExamEvent e2 inner join e2.meetings m2 inner join e2.exam.owners o2, StudentClassEnrollment s2"
operator|+
literal|" where e2.uniqueId = :eventId and e1.uniqueId != e2.uniqueId and s1.student = s2.student"
operator|+
name|where
argument_list|(
name|t1
argument_list|,
literal|1
argument_list|)
operator|+
name|where
argument_list|(
name|t2
argument_list|,
literal|2
argument_list|)
operator|+
literal|" and m1.meetingDate = m2.meetingDate and m1.startPeriod< m2.stopPeriod and m2.startPeriod< m1.stopPeriod and e1.reqAttendance = true and m1.approvalStatus = 1"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"eventId"
argument_list|,
name|event
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Meeting
name|meeting
init|=
operator|(
name|Meeting
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|List
argument_list|<
name|Meeting
argument_list|>
name|meetings
init|=
name|conflicts
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|meetings
operator|==
literal|null
condition|)
block|{
name|meetings
operator|=
operator|new
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
argument_list|()
expr_stmt|;
name|conflicts
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|meetings
argument_list|)
expr_stmt|;
block|}
name|meetings
operator|.
name|add
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|conflicts
return|;
block|}
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|Meeting
argument_list|>
argument_list|>
name|computeConflicts
parameter_list|(
name|CourseEvent
name|event
parameter_list|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|Meeting
argument_list|>
argument_list|>
name|conflicts
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|Meeting
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|EventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
comment|// class events
for|for
control|(
name|int
name|t2
init|=
literal|0
init|;
name|t2
operator|<
name|ExamOwner
operator|.
name|sOwnerTypes
operator|.
name|length
condition|;
name|t2
operator|++
control|)
block|{
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select s1.student.uniqueId, m1"
operator|+
literal|" from StudentClassEnrollment s1, ClassEvent e1 inner join e1.meetings m1, CourseEvent e2 inner join e2.meetings m2 inner join e2.relatedCourses o2, StudentClassEnrollment s2"
operator|+
literal|" where e2.uniqueId = :eventId and e1.uniqueId != e2.uniqueId and e1.clazz = s1.clazz and s1.student = s2.student"
operator|+
name|where
argument_list|(
name|t2
argument_list|,
literal|2
argument_list|)
operator|+
literal|" and m1.meetingDate = m2.meetingDate and m1.startPeriod< m2.stopPeriod and m2.startPeriod< m1.stopPeriod and m2.approvalStatus<= 1"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"eventId"
argument_list|,
name|event
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Meeting
name|meeting
init|=
operator|(
name|Meeting
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|List
argument_list|<
name|Meeting
argument_list|>
name|meetings
init|=
name|conflicts
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|meetings
operator|==
literal|null
condition|)
block|{
name|meetings
operator|=
operator|new
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
argument_list|()
expr_stmt|;
name|conflicts
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|meetings
argument_list|)
expr_stmt|;
block|}
name|meetings
operator|.
name|add
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
block|}
block|}
comment|// examination events
for|for
control|(
name|int
name|t1
init|=
literal|0
init|;
name|t1
operator|<
name|ExamOwner
operator|.
name|sOwnerTypes
operator|.
name|length
condition|;
name|t1
operator|++
control|)
block|{
for|for
control|(
name|int
name|t2
init|=
literal|0
init|;
name|t2
operator|<
name|ExamOwner
operator|.
name|sOwnerTypes
operator|.
name|length
condition|;
name|t2
operator|++
control|)
block|{
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select s1.student.uniqueId, m1"
operator|+
literal|" from StudentClassEnrollment s1, ExamEvent e1 inner join e1.meetings m1 inner join e1.exam.owners o1, CourseEvent e2 inner join e2.meetings m2 inner join e2.relatedCourses o2, StudentClassEnrollment s2"
operator|+
literal|" where e2.uniqueId = :eventId and e1.uniqueId != e2.uniqueId and s1.student = s2.student"
operator|+
name|where
argument_list|(
name|t1
argument_list|,
literal|1
argument_list|)
operator|+
name|where
argument_list|(
name|t2
argument_list|,
literal|2
argument_list|)
operator|+
literal|" and m1.meetingDate = m2.meetingDate and m1.startPeriod< m2.stopPeriod and m2.startPeriod< m1.stopPeriod and m2.approvalStatus<= 1"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"eventId"
argument_list|,
name|event
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Meeting
name|meeting
init|=
operator|(
name|Meeting
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|List
argument_list|<
name|Meeting
argument_list|>
name|meetings
init|=
name|conflicts
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|meetings
operator|==
literal|null
condition|)
block|{
name|meetings
operator|=
operator|new
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
argument_list|()
expr_stmt|;
name|conflicts
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|meetings
argument_list|)
expr_stmt|;
block|}
name|meetings
operator|.
name|add
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// course events
for|for
control|(
name|int
name|t1
init|=
literal|0
init|;
name|t1
operator|<
name|ExamOwner
operator|.
name|sOwnerTypes
operator|.
name|length
condition|;
name|t1
operator|++
control|)
block|{
for|for
control|(
name|int
name|t2
init|=
literal|0
init|;
name|t2
operator|<
name|ExamOwner
operator|.
name|sOwnerTypes
operator|.
name|length
condition|;
name|t2
operator|++
control|)
block|{
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select s1.student.uniqueId, m1"
operator|+
literal|" from StudentClassEnrollment s1, CourseEvent e1 inner join e1.meetings m1 inner join e1.relatedCourses o1, CourseEvent e2 inner join e2.meetings m2 inner join e2.relatedCourses o2, StudentClassEnrollment s2"
operator|+
literal|" where e2.uniqueId = :eventId and e1.uniqueId != e2.uniqueId and s1.student = s2.student"
operator|+
name|where
argument_list|(
name|t1
argument_list|,
literal|1
argument_list|)
operator|+
name|where
argument_list|(
name|t2
argument_list|,
literal|2
argument_list|)
operator|+
literal|" and m1.meetingDate = m2.meetingDate and m1.startPeriod< m2.stopPeriod and m2.startPeriod< m1.stopPeriod and e1.reqAttendance = true and m1.approvalStatus = 1 and m2.approvalStatus<= 1"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"eventId"
argument_list|,
name|event
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Meeting
name|meeting
init|=
operator|(
name|Meeting
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|List
argument_list|<
name|Meeting
argument_list|>
name|meetings
init|=
name|conflicts
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|meetings
operator|==
literal|null
condition|)
block|{
name|meetings
operator|=
operator|new
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
argument_list|()
expr_stmt|;
name|conflicts
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|meetings
argument_list|)
expr_stmt|;
block|}
name|meetings
operator|.
name|add
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|conflicts
return|;
block|}
block|}
end_class

end_unit

