begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.4 (University Timetabling Application)  * Copyright (C) 2012, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|events
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcResponseList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|ContactInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|EventFilterRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|MeetingConflictInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|MeetingInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|EventLookupRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|NoteInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|ResourceInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|ResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|SponsoringOrganizationInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|EventContact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|EventNote
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Meeting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RelatedCourseInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ClassEventDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseEventDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|EventDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExamEventDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|CalendarUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_class
annotation|@
name|Service
argument_list|(
literal|"org.unitime.timetable.gwt.shared.EventInterface$EventLookupRpcRequest"
argument_list|)
specifier|public
class|class
name|EventLookupBackend
extends|extends
name|EventAction
argument_list|<
name|EventLookupRpcRequest
argument_list|,
name|GwtRpcResponseList
argument_list|<
name|EventInterface
argument_list|>
argument_list|>
block|{
specifier|private
specifier|static
name|Logger
name|sLog
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|EventLookupBackend
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|GwtRpcResponseList
argument_list|<
name|EventInterface
argument_list|>
name|execute
parameter_list|(
name|EventLookupRpcRequest
name|request
parameter_list|,
name|EventContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|getResourceType
argument_list|()
operator|==
name|ResourceType
operator|.
name|PERSON
condition|)
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|hasResourceExternalId
argument_list|()
condition|)
name|request
operator|.
name|setResourceExternalId
argument_list|(
name|context
operator|.
name|isAuthenticated
argument_list|()
condition|?
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalUserId
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
if|else if
condition|(
operator|!
name|request
operator|.
name|getResourceExternalId
argument_list|()
operator|.
name|equals
argument_list|(
name|context
operator|.
name|isAuthenticated
argument_list|()
condition|?
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalUserId
argument_list|()
else|:
literal|null
argument_list|)
condition|)
name|context
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|EventLookupSchedule
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|getEventFilter
argument_list|()
operator|==
literal|null
condition|)
block|{
name|EventFilterRpcRequest
name|eventFilter
init|=
operator|new
name|EventFilterRpcRequest
argument_list|()
decl_stmt|;
name|eventFilter
operator|.
name|setSessionId
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setEventFilter
argument_list|(
name|eventFilter
argument_list|)
expr_stmt|;
block|}
return|return
name|findEvents
argument_list|(
name|request
argument_list|,
name|context
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|hasChild
parameter_list|(
name|Set
argument_list|<
name|Long
argument_list|>
name|restrictions
parameter_list|,
name|Class_
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|restrictions
operator|.
name|contains
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
for|for
control|(
name|Class_
name|child
range|:
name|clazz
operator|.
name|getChildClasses
argument_list|()
control|)
if|if
condition|(
name|hasChild
argument_list|(
name|restrictions
argument_list|,
name|child
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|hasClassRestrictionChild
parameter_list|(
name|Set
argument_list|<
name|Long
argument_list|>
name|restrictions
parameter_list|,
name|SchedulingSubpart
name|subpart
parameter_list|)
block|{
for|for
control|(
name|Class_
name|other
range|:
name|subpart
operator|.
name|getClasses
argument_list|()
control|)
if|if
condition|(
name|restrictions
operator|.
name|contains
argument_list|(
name|other
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
for|for
control|(
name|SchedulingSubpart
name|child
range|:
name|subpart
operator|.
name|getChildSubparts
argument_list|()
control|)
if|if
condition|(
name|hasClassRestrictionChild
argument_list|(
name|restrictions
argument_list|,
name|child
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|hasClassRestriction
parameter_list|(
name|Set
argument_list|<
name|Long
argument_list|>
name|restrictions
parameter_list|,
name|Class_
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|restrictions
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
name|SchedulingSubpart
name|parent
init|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getParentSubpart
argument_list|()
decl_stmt|;
while|while
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Class_
name|other
range|:
name|parent
operator|.
name|getClasses
argument_list|()
control|)
if|if
condition|(
name|restrictions
operator|.
name|contains
argument_list|(
name|other
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
name|parent
operator|=
name|parent
operator|.
name|getParentSubpart
argument_list|()
expr_stmt|;
block|}
return|return
name|hasClassRestrictionChild
argument_list|(
name|restrictions
argument_list|,
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|hide
parameter_list|(
name|Set
argument_list|<
name|Long
argument_list|>
index|[]
name|restrictions
parameter_list|,
name|Class_
name|clazz
parameter_list|)
block|{
comment|// check configs
if|if
condition|(
operator|!
name|restrictions
index|[
literal|0
index|]
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|restrictions
index|[
literal|0
index|]
operator|.
name|contains
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
comment|// check classes
if|if
condition|(
name|hasClassRestriction
argument_list|(
name|restrictions
index|[
literal|1
index|]
argument_list|,
name|clazz
argument_list|)
condition|)
block|{
name|Class_
name|parent
init|=
name|clazz
decl_stmt|;
while|while
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|restrictions
index|[
literal|1
index|]
operator|.
name|contains
argument_list|(
name|parent
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
name|parent
operator|=
name|parent
operator|.
name|getParentClass
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Class_
name|child
range|:
name|clazz
operator|.
name|getChildClasses
argument_list|()
control|)
if|if
condition|(
name|hasChild
argument_list|(
name|restrictions
index|[
literal|1
index|]
argument_list|,
name|child
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|GwtRpcResponseList
argument_list|<
name|EventInterface
argument_list|>
name|findEvents
parameter_list|(
name|EventLookupRpcRequest
name|request
parameter_list|,
name|EventContext
name|context
parameter_list|)
throws|throws
name|EventException
block|{
try|try
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|EventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|Double
argument_list|>
name|distances
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Double
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getRoomFilter
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|request
operator|.
name|getRoomFilter
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Location
name|location
range|:
operator|new
name|RoomFilterBackend
argument_list|()
operator|.
name|locations
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|request
operator|.
name|getRoomFilter
argument_list|()
argument_list|,
literal|1000
argument_list|,
name|distances
argument_list|)
control|)
block|{
name|request
operator|.
name|getEventFilter
argument_list|()
operator|.
name|addOption
argument_list|(
literal|"room"
argument_list|,
name|location
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|request
operator|.
name|getResourceType
argument_list|()
operator|==
name|ResourceType
operator|.
name|ROOM
operator|&&
name|request
operator|.
name|getEventFilter
argument_list|()
operator|.
name|hasOptions
argument_list|(
literal|"type"
argument_list|)
operator|&&
operator|!
name|request
operator|.
name|getEventFilter
argument_list|()
operator|.
name|getOptions
argument_list|(
literal|"type"
argument_list|)
operator|.
name|contains
argument_list|(
name|Event
operator|.
name|sEventTypesAbbv
index|[
name|Event
operator|.
name|sEventTypeUnavailable
index|]
argument_list|)
condition|)
block|{
name|request
operator|.
name|getEventFilter
argument_list|()
operator|.
name|addOption
argument_list|(
literal|"type"
argument_list|,
name|Event
operator|.
name|sEventTypesAbbv
index|[
name|Event
operator|.
name|sEventTypeUnavailable
index|]
argument_list|)
expr_stmt|;
block|}
name|EventFilterBackend
operator|.
name|EventQuery
name|query
init|=
name|EventFilterBackend
operator|.
name|getQuery
argument_list|(
name|request
operator|.
name|getEventFilter
argument_list|()
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|int
name|limit
init|=
name|request
operator|.
name|getLimit
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Meeting
argument_list|>
name|meetings
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
index|[]
argument_list|>
name|restrictions
init|=
literal|null
decl_stmt|;
name|Session
name|session
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Long
argument_list|>
name|curriculumCourses
init|=
literal|null
decl_stmt|;
name|Department
name|department
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|request
operator|.
name|getResourceType
argument_list|()
condition|)
block|{
case|case
name|ROOM
case|:
if|if
condition|(
name|request
operator|.
name|getResourceId
argument_list|()
operator|==
literal|null
condition|)
name|meetings
operator|=
operator|(
name|List
argument_list|<
name|Meeting
argument_list|>
operator|)
name|query
operator|.
name|select
argument_list|(
literal|"distinct m"
argument_list|)
operator|.
name|limit
argument_list|(
literal|1
operator|+
name|limit
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
else|else
name|meetings
operator|=
operator|(
name|List
argument_list|<
name|Meeting
argument_list|>
operator|)
name|query
operator|.
name|select
argument_list|(
literal|"distinct m"
argument_list|)
operator|.
name|joinWithLocation
argument_list|()
operator|.
name|where
argument_list|(
literal|"l.uniqueId = :resourceId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|limit
argument_list|(
literal|1
operator|+
name|limit
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
break|break;
case|case
name|SUBJECT
case|:
case|case
name|COURSE
case|:
name|String
name|resourceCheck
init|=
operator|(
name|request
operator|.
name|getResourceType
argument_list|()
operator|==
name|ResourceType
operator|.
name|SUBJECT
condition|?
literal|"co.subjectArea.uniqueId = :resourceId"
else|:
literal|"co.uniqueId = :resourceId"
operator|)
decl_stmt|;
name|meetings
operator|=
operator|new
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|limit
operator|<=
literal|0
operator|||
name|meetings
operator|.
name|size
argument_list|()
operator|<
name|limit
condition|)
name|meetings
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m"
argument_list|)
operator|.
name|type
argument_list|(
literal|"ClassEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.clazz.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co"
argument_list|)
operator|.
name|where
argument_list|(
name|resourceCheck
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|limit
argument_list|(
name|limit
operator|<=
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|+
name|limit
operator|-
name|meetings
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|<=
literal|0
operator|||
name|meetings
operator|.
name|size
argument_list|()
operator|<
name|limit
condition|)
name|meetings
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m"
argument_list|)
operator|.
name|type
argument_list|(
literal|"CourseEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.relatedCourses o, CourseOffering co"
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = co.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeCourse
argument_list|)
operator|.
name|where
argument_list|(
name|resourceCheck
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|limit
argument_list|(
name|limit
operator|<=
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|+
name|limit
operator|-
name|meetings
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|<=
literal|0
operator|||
name|meetings
operator|.
name|size
argument_list|()
operator|<
name|limit
condition|)
name|meetings
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m"
argument_list|)
operator|.
name|type
argument_list|(
literal|"CourseEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.relatedCourses o, CourseOffering co"
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = co.instructionalOffering.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeOffering
argument_list|)
operator|.
name|where
argument_list|(
name|resourceCheck
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|limit
argument_list|(
name|limit
operator|<=
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|+
name|limit
operator|-
name|meetings
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|<=
literal|0
operator|||
name|meetings
operator|.
name|size
argument_list|()
operator|<
name|limit
condition|)
name|meetings
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m"
argument_list|)
operator|.
name|type
argument_list|(
literal|"CourseEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.relatedCourses o, Class_ c inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co"
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = c.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeClass
argument_list|)
operator|.
name|where
argument_list|(
name|resourceCheck
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|limit
argument_list|(
name|limit
operator|<=
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|+
name|limit
operator|-
name|meetings
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|<=
literal|0
operator|||
name|meetings
operator|.
name|size
argument_list|()
operator|<
name|limit
condition|)
name|meetings
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m"
argument_list|)
operator|.
name|type
argument_list|(
literal|"CourseEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.relatedCourses o, CourseOffering co inner join co.instructionalOffering.instrOfferingConfigs cfg"
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = cfg.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeConfig
argument_list|)
operator|.
name|where
argument_list|(
name|resourceCheck
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|limit
argument_list|(
name|limit
operator|<=
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|+
name|limit
operator|-
name|meetings
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|<=
literal|0
operator|||
name|meetings
operator|.
name|size
argument_list|()
operator|<
name|limit
condition|)
name|meetings
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m"
argument_list|)
operator|.
name|type
argument_list|(
literal|"ExamEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.exam.owners o, CourseOffering co"
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = co.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeCourse
argument_list|)
operator|.
name|where
argument_list|(
name|resourceCheck
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|limit
argument_list|(
name|limit
operator|<=
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|+
name|limit
operator|-
name|meetings
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|<=
literal|0
operator|||
name|meetings
operator|.
name|size
argument_list|()
operator|<
name|limit
condition|)
name|meetings
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m"
argument_list|)
operator|.
name|type
argument_list|(
literal|"ExamEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.exam.owners o, CourseOffering co"
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = co.instructionalOffering.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeOffering
argument_list|)
operator|.
name|where
argument_list|(
name|resourceCheck
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|limit
argument_list|(
name|limit
operator|<=
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|+
name|limit
operator|-
name|meetings
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|<=
literal|0
operator|||
name|meetings
operator|.
name|size
argument_list|()
operator|<
name|limit
condition|)
name|meetings
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m"
argument_list|)
operator|.
name|type
argument_list|(
literal|"ExamEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.exam.owners o, Class_ c inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co"
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = c.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeClass
argument_list|)
operator|.
name|where
argument_list|(
name|resourceCheck
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|limit
argument_list|(
name|limit
operator|<=
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|+
name|limit
operator|-
name|meetings
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|<=
literal|0
operator|||
name|meetings
operator|.
name|size
argument_list|()
operator|<
name|limit
condition|)
name|meetings
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m"
argument_list|)
operator|.
name|type
argument_list|(
literal|"ExamEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.exam.owners o, CourseOffering co inner join co.instructionalOffering.instrOfferingConfigs cfg"
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = cfg.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeConfig
argument_list|)
operator|.
name|where
argument_list|(
name|resourceCheck
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|limit
argument_list|(
name|limit
operator|<=
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|+
name|limit
operator|-
name|meetings
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|CURRICULUM
case|:
name|curriculumCourses
operator|=
operator|(
name|List
argument_list|<
name|Long
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select cc.course.uniqueId from CurriculumCourse cc where cc.classification.curriculum.uniqueId = :resourceId or cc.classification.uniqueId = :resourceId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
name|meetings
operator|=
operator|new
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|limit
operator|<=
literal|0
operator|||
name|meetings
operator|.
name|size
argument_list|()
operator|<
name|limit
condition|)
name|meetings
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m"
argument_list|)
operator|.
name|type
argument_list|(
literal|"ClassEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.clazz.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co, CurriculumCourse cc"
argument_list|)
operator|.
name|where
argument_list|(
literal|"co = cc.course"
argument_list|)
operator|.
name|where
argument_list|(
literal|"cc.classification.curriculum.uniqueId = :resourceId or cc.classification.uniqueId = :resourceId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|limit
argument_list|(
name|limit
operator|<=
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|+
name|limit
operator|-
name|meetings
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|restrictions
operator|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
index|[]
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct cc.course.instructionalOffering.uniqueId, g.uniqueId, z.uniqueId "
operator|+
literal|"from CurriculumReservation r left outer join r.configurations g left outer join r.classes z "
operator|+
literal|"left outer join r.majors rm left outer join r.classifications rc, "
operator|+
literal|"CurriculumCourse cc inner join cc.classification.curriculum.majors cm "
operator|+
literal|"where (cc.classification.curriculum.uniqueId = :resourceId or cc.classification.uniqueId = :resourceId) "
operator|+
literal|"and cc.course.instructionalOffering = r.instructionalOffering and r.area = cc.classification.curriculum.academicArea "
operator|+
literal|"and (rm is null or rm = cm) and (rc is null or rc = cc.classification.academicClassification)"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Long
name|offeringId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Long
name|configId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Long
name|clazzId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|2
index|]
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
index|[]
name|r
init|=
name|restrictions
operator|.
name|get
argument_list|(
name|offeringId
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|r
operator|=
operator|new
name|Set
index|[]
block|{
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
block|,
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
block|}
expr_stmt|;
name|restrictions
operator|.
name|put
argument_list|(
name|offeringId
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configId
operator|!=
literal|null
condition|)
name|r
index|[
literal|0
index|]
operator|.
name|add
argument_list|(
name|configId
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazzId
operator|!=
literal|null
condition|)
name|r
index|[
literal|1
index|]
operator|.
name|add
argument_list|(
name|clazzId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|limit
operator|<=
literal|0
operator|||
name|meetings
operator|.
name|size
argument_list|()
operator|<
name|limit
condition|)
name|meetings
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m"
argument_list|)
operator|.
name|type
argument_list|(
literal|"ExamEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.exam.owners o, CourseOffering co, CurriculumCourse cc"
argument_list|)
operator|.
name|where
argument_list|(
literal|"co = cc.course"
argument_list|)
operator|.
name|where
argument_list|(
literal|"cc.classification.curriculum.uniqueId = :resourceId or cc.classification.uniqueId = :resourceId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = co.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeCourse
argument_list|)
operator|.
name|limit
argument_list|(
name|limit
operator|<=
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|+
name|limit
operator|-
name|meetings
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|<=
literal|0
operator|||
name|meetings
operator|.
name|size
argument_list|()
operator|<
name|limit
condition|)
name|meetings
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m"
argument_list|)
operator|.
name|type
argument_list|(
literal|"ExamEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.exam.owners o, CourseOffering co, CurriculumCourse cc"
argument_list|)
operator|.
name|where
argument_list|(
literal|"co = cc.course"
argument_list|)
operator|.
name|where
argument_list|(
literal|"cc.classification.curriculum.uniqueId = :resourceId or cc.classification.uniqueId = :resourceId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = co.instructionalOffering.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeOffering
argument_list|)
operator|.
name|limit
argument_list|(
name|limit
operator|<=
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|+
name|limit
operator|-
name|meetings
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|<=
literal|0
operator|||
name|meetings
operator|.
name|size
argument_list|()
operator|<
name|limit
condition|)
name|meetings
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m"
argument_list|)
operator|.
name|type
argument_list|(
literal|"ExamEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.exam.owners o, Class_ c inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co, CurriculumCourse cc"
argument_list|)
operator|.
name|where
argument_list|(
literal|"co = cc.course"
argument_list|)
operator|.
name|where
argument_list|(
literal|"cc.classification.curriculum.uniqueId = :resourceId or cc.classification.uniqueId = :resourceId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = c.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeClass
argument_list|)
operator|.
name|limit
argument_list|(
name|limit
operator|<=
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|+
name|limit
operator|-
name|meetings
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|<=
literal|0
operator|||
name|meetings
operator|.
name|size
argument_list|()
operator|<
name|limit
condition|)
name|meetings
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m"
argument_list|)
operator|.
name|type
argument_list|(
literal|"ExamEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.exam.owners o, CourseOffering co inner join co.instructionalOffering.instrOfferingConfigs cfg, CurriculumCourse cc"
argument_list|)
operator|.
name|where
argument_list|(
literal|"co = cc.course"
argument_list|)
operator|.
name|where
argument_list|(
literal|"cc.classification.curriculum.uniqueId = :resourceId or cc.classification.uniqueId = :resourceId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = cfg.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeConfig
argument_list|)
operator|.
name|limit
argument_list|(
name|limit
operator|<=
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|+
name|limit
operator|-
name|meetings
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|<=
literal|0
operator|||
name|meetings
operator|.
name|size
argument_list|()
operator|<
name|limit
condition|)
name|meetings
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m"
argument_list|)
operator|.
name|type
argument_list|(
literal|"CourseEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.relatedCourses o, CourseOffering co, CurriculumCourse cc"
argument_list|)
operator|.
name|where
argument_list|(
literal|"co = cc.course"
argument_list|)
operator|.
name|where
argument_list|(
literal|"cc.classification.curriculum.uniqueId = :resourceId or cc.classification.uniqueId = :resourceId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = co.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeCourse
argument_list|)
operator|.
name|limit
argument_list|(
name|limit
operator|<=
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|+
name|limit
operator|-
name|meetings
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|<=
literal|0
operator|||
name|meetings
operator|.
name|size
argument_list|()
operator|<
name|limit
condition|)
name|meetings
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m"
argument_list|)
operator|.
name|type
argument_list|(
literal|"CourseEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.relatedCourses o, CourseOffering co, CurriculumCourse cc"
argument_list|)
operator|.
name|where
argument_list|(
literal|"co = cc.course"
argument_list|)
operator|.
name|where
argument_list|(
literal|"cc.classification.curriculum.uniqueId = :resourceId or cc.classification.uniqueId = :resourceId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = co.instructionalOffering.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeOffering
argument_list|)
operator|.
name|limit
argument_list|(
name|limit
operator|<=
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|+
name|limit
operator|-
name|meetings
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|<=
literal|0
operator|||
name|meetings
operator|.
name|size
argument_list|()
operator|<
name|limit
condition|)
name|meetings
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m"
argument_list|)
operator|.
name|type
argument_list|(
literal|"CourseEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.relatedCourses o, Class_ c inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co, CurriculumCourse cc"
argument_list|)
operator|.
name|where
argument_list|(
literal|"co = cc.course"
argument_list|)
operator|.
name|where
argument_list|(
literal|"cc.classification.curriculum.uniqueId = :resourceId or cc.classification.uniqueId = :resourceId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = c.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeClass
argument_list|)
operator|.
name|limit
argument_list|(
name|limit
operator|<=
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|+
name|limit
operator|-
name|meetings
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|<=
literal|0
operator|||
name|meetings
operator|.
name|size
argument_list|()
operator|<
name|limit
condition|)
name|meetings
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m"
argument_list|)
operator|.
name|type
argument_list|(
literal|"CourseEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.relatedCourses o, CourseOffering co inner join co.instructionalOffering.instrOfferingConfigs cfg, CurriculumCourse cc"
argument_list|)
operator|.
name|where
argument_list|(
literal|"co = cc.course"
argument_list|)
operator|.
name|where
argument_list|(
literal|"cc.classification.curriculum.uniqueId = :resourceId or cc.classification.uniqueId = :resourceId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = cfg.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeConfig
argument_list|)
operator|.
name|limit
argument_list|(
name|limit
operator|<=
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|+
name|limit
operator|-
name|meetings
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DEPARTMENT
case|:
name|department
operator|=
name|DepartmentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|department
operator|.
name|isExternalManager
argument_list|()
condition|)
block|{
name|meetings
operator|=
operator|(
name|List
argument_list|<
name|Meeting
argument_list|>
operator|)
name|query
operator|.
name|select
argument_list|(
literal|"distinct m"
argument_list|)
operator|.
name|type
argument_list|(
literal|"ClassEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.clazz.managingDept d"
argument_list|)
operator|.
name|where
argument_list|(
literal|"d.uniqueId = :resourceId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|limit
argument_list|(
literal|1
operator|+
name|limit
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|meetings
operator|=
operator|(
name|List
argument_list|<
name|Meeting
argument_list|>
operator|)
name|query
operator|.
name|select
argument_list|(
literal|"distinct m"
argument_list|)
operator|.
name|type
argument_list|(
literal|"ClassEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.clazz.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co inner join co.subjectArea.department d"
argument_list|)
operator|.
name|where
argument_list|(
literal|"d.uniqueId = :resourceId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|limit
argument_list|(
literal|1
operator|+
name|limit
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
if|if
condition|(
name|limit
operator|<=
literal|0
operator|||
name|meetings
operator|.
name|size
argument_list|()
operator|<
name|limit
condition|)
name|meetings
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m"
argument_list|)
operator|.
name|type
argument_list|(
literal|"ExamEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.exam.owners o, CourseOffering co inner join co.subjectArea.department d"
argument_list|)
operator|.
name|where
argument_list|(
literal|"d.uniqueId = :resourceId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = co.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeCourse
argument_list|)
operator|.
name|limit
argument_list|(
name|limit
operator|<=
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|+
name|limit
operator|-
name|meetings
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|<=
literal|0
operator|||
name|meetings
operator|.
name|size
argument_list|()
operator|<
name|limit
condition|)
name|meetings
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m"
argument_list|)
operator|.
name|type
argument_list|(
literal|"ExamEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.exam.owners o, CourseOffering co inner join co.subjectArea.department d"
argument_list|)
operator|.
name|where
argument_list|(
literal|"d.uniqueId = :resourceId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = co.instructionalOffering.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeOffering
argument_list|)
operator|.
name|limit
argument_list|(
name|limit
operator|<=
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|+
name|limit
operator|-
name|meetings
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|<=
literal|0
operator|||
name|meetings
operator|.
name|size
argument_list|()
operator|<
name|limit
condition|)
name|meetings
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m"
argument_list|)
operator|.
name|type
argument_list|(
literal|"ExamEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.exam.owners o, Class_ c inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co inner join co.subjectArea.department d"
argument_list|)
operator|.
name|where
argument_list|(
literal|"d.uniqueId = :resourceId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = c.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeClass
argument_list|)
operator|.
name|limit
argument_list|(
name|limit
operator|<=
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|+
name|limit
operator|-
name|meetings
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|<=
literal|0
operator|||
name|meetings
operator|.
name|size
argument_list|()
operator|<
name|limit
condition|)
name|meetings
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m"
argument_list|)
operator|.
name|type
argument_list|(
literal|"ExamEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.exam.owners o, CourseOffering co inner join co.instructionalOffering.instrOfferingConfigs cfg inner join co.subjectArea.department d"
argument_list|)
operator|.
name|where
argument_list|(
literal|"d.uniqueId = :resourceId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = cfg.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeConfig
argument_list|)
operator|.
name|limit
argument_list|(
name|limit
operator|<=
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|+
name|limit
operator|-
name|meetings
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|<=
literal|0
operator|||
name|meetings
operator|.
name|size
argument_list|()
operator|<
name|limit
condition|)
name|meetings
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m"
argument_list|)
operator|.
name|type
argument_list|(
literal|"CourseEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.relatedCourses o, CourseOffering co inner join co.subjectArea.department d"
argument_list|)
operator|.
name|where
argument_list|(
literal|"d.uniqueId = :resourceId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = co.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeCourse
argument_list|)
operator|.
name|limit
argument_list|(
name|limit
operator|<=
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|+
name|limit
operator|-
name|meetings
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|<=
literal|0
operator|||
name|meetings
operator|.
name|size
argument_list|()
operator|<
name|limit
condition|)
name|meetings
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m"
argument_list|)
operator|.
name|type
argument_list|(
literal|"CourseEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.relatedCourses o, CourseOffering co inner join co.subjectArea.department d"
argument_list|)
operator|.
name|where
argument_list|(
literal|"d.uniqueId = :resourceId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = co.instructionalOffering.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeOffering
argument_list|)
operator|.
name|limit
argument_list|(
name|limit
operator|<=
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|+
name|limit
operator|-
name|meetings
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|<=
literal|0
operator|||
name|meetings
operator|.
name|size
argument_list|()
operator|<
name|limit
condition|)
name|meetings
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m"
argument_list|)
operator|.
name|type
argument_list|(
literal|"CourseEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.relatedCourses o, Class_ c inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co inner join co.subjectArea.department d"
argument_list|)
operator|.
name|where
argument_list|(
literal|"d.uniqueId = :resourceId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = c.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeClass
argument_list|)
operator|.
name|limit
argument_list|(
name|limit
operator|<=
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|+
name|limit
operator|-
name|meetings
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|<=
literal|0
operator|||
name|meetings
operator|.
name|size
argument_list|()
operator|<
name|limit
condition|)
name|meetings
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m"
argument_list|)
operator|.
name|type
argument_list|(
literal|"CourseEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.relatedCourses o, CourseOffering co inner join co.instructionalOffering.instrOfferingConfigs cfg inner join co.subjectArea.department d"
argument_list|)
operator|.
name|where
argument_list|(
literal|"d.uniqueId = :resourceId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = cfg.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeConfig
argument_list|)
operator|.
name|limit
argument_list|(
name|limit
operator|<=
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|+
name|limit
operator|-
name|meetings
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PERSON
case|:
name|boolean
name|overrideStatus
init|=
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|EventLookupSchedule
argument_list|)
decl_stmt|;
name|boolean
name|canViewFinalExams
init|=
name|overrideStatus
operator|||
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|canNoRoleReportExamFinal
argument_list|()
decl_stmt|;
name|boolean
name|canViewMidtermExams
init|=
name|overrideStatus
operator|||
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|canNoRoleReportExamMidterm
argument_list|()
decl_stmt|;
name|boolean
name|canViewClasses
init|=
name|overrideStatus
operator|||
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|canNoRoleReportClass
argument_list|()
decl_stmt|;
name|curriculumCourses
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|curriculumCourses
operator|.
name|addAll
argument_list|(
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select e.courseOffering.uniqueId from StudentClassEnrollment e where e.student.session.uniqueId = :sessionId and e.student.externalUniqueId = :externalId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"externalId"
argument_list|,
name|request
operator|.
name|getResourceExternalId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|curriculumCourses
operator|.
name|addAll
argument_list|(
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select o.course.uniqueId from Exam x inner join x.owners o inner join x.instructors i where x.session.uniqueId = :sessionId and i.externalUniqueId = :externalId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"externalId"
argument_list|,
name|request
operator|.
name|getResourceExternalId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|meetings
operator|=
operator|new
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|canViewClasses
condition|)
block|{
if|if
condition|(
name|limit
operator|<=
literal|0
operator|||
name|meetings
operator|.
name|size
argument_list|()
operator|<
name|limit
condition|)
name|meetings
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m"
argument_list|)
operator|.
name|type
argument_list|(
literal|"ClassEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.clazz.studentEnrollments enrl"
argument_list|)
operator|.
name|where
argument_list|(
literal|"enrl.student.externalUniqueId = :externalId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"externalId"
argument_list|,
name|request
operator|.
name|getResourceExternalId
argument_list|()
argument_list|)
operator|.
name|limit
argument_list|(
name|limit
operator|<=
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|+
name|limit
operator|-
name|meetings
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|<=
literal|0
operator|||
name|meetings
operator|.
name|size
argument_list|()
operator|<
name|limit
condition|)
name|meetings
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m"
argument_list|)
operator|.
name|type
argument_list|(
literal|"ClassEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.clazz.classInstructors ci"
argument_list|)
operator|.
name|where
argument_list|(
literal|"ci.instructor.externalUniqueId = :externalId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"externalId"
argument_list|,
name|request
operator|.
name|getResourceExternalId
argument_list|()
argument_list|)
operator|.
name|limit
argument_list|(
name|limit
operator|<=
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|+
name|limit
operator|-
name|meetings
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|canViewFinalExams
operator|||
name|canViewMidtermExams
condition|)
block|{
name|String
name|table
init|=
operator|(
name|canViewFinalExams
condition|?
name|canViewMidtermExams
condition|?
literal|"ExamEvent"
else|:
literal|"FinalExamEvent"
else|:
literal|"MidtermExamEvent"
operator|)
decl_stmt|;
if|if
condition|(
name|limit
operator|<=
literal|0
operator|||
name|meetings
operator|.
name|size
argument_list|()
operator|<
name|limit
condition|)
name|meetings
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m"
argument_list|)
operator|.
name|type
argument_list|(
name|table
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.exam.owners o, StudentClassEnrollment enrl inner join enrl.courseOffering co"
argument_list|)
operator|.
name|where
argument_list|(
literal|"enrl.student.externalUniqueId = :externalId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"externalId"
argument_list|,
name|request
operator|.
name|getResourceExternalId
argument_list|()
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = co.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeCourse
argument_list|)
operator|.
name|limit
argument_list|(
name|limit
operator|<=
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|+
name|limit
operator|-
name|meetings
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|<=
literal|0
operator|||
name|meetings
operator|.
name|size
argument_list|()
operator|<
name|limit
condition|)
name|meetings
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m"
argument_list|)
operator|.
name|type
argument_list|(
name|table
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.exam.owners o, StudentClassEnrollment enrl inner join enrl.courseOffering co"
argument_list|)
operator|.
name|where
argument_list|(
literal|"enrl.student.externalUniqueId = :externalId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"externalId"
argument_list|,
name|request
operator|.
name|getResourceExternalId
argument_list|()
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = co.instructionalOffering.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeOffering
argument_list|)
operator|.
name|limit
argument_list|(
name|limit
operator|<=
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|+
name|limit
operator|-
name|meetings
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|<=
literal|0
operator|||
name|meetings
operator|.
name|size
argument_list|()
operator|<
name|limit
condition|)
name|meetings
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m"
argument_list|)
operator|.
name|type
argument_list|(
name|table
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.exam.owners o, StudentClassEnrollment enrl inner join enrl.clazz c inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co"
argument_list|)
operator|.
name|where
argument_list|(
literal|"enrl.student.externalUniqueId = :externalId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"externalId"
argument_list|,
name|request
operator|.
name|getResourceExternalId
argument_list|()
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = c.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeClass
argument_list|)
operator|.
name|limit
argument_list|(
name|limit
operator|<=
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|+
name|limit
operator|-
name|meetings
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|<=
literal|0
operator|||
name|meetings
operator|.
name|size
argument_list|()
operator|<
name|limit
condition|)
name|meetings
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m"
argument_list|)
operator|.
name|type
argument_list|(
name|table
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.exam.owners o, StudentClassEnrollment enrl inner join enrl.clazz c inner join c.schedulingSubpart.instrOfferingConfig cfg"
argument_list|)
operator|.
name|where
argument_list|(
literal|"enrl.student.externalUniqueId = :externalId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"externalId"
argument_list|,
name|request
operator|.
name|getResourceExternalId
argument_list|()
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = cfg.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeConfig
argument_list|)
operator|.
name|limit
argument_list|(
name|limit
operator|<=
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|+
name|limit
operator|-
name|meetings
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|<=
literal|0
operator|||
name|meetings
operator|.
name|size
argument_list|()
operator|<
name|limit
condition|)
name|meetings
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m"
argument_list|)
operator|.
name|type
argument_list|(
name|table
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.exam.instructors i"
argument_list|)
operator|.
name|where
argument_list|(
literal|"i.externalUniqueId = :externalId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"externalId"
argument_list|,
name|request
operator|.
name|getResourceExternalId
argument_list|()
argument_list|)
operator|.
name|limit
argument_list|(
name|limit
operator|<=
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|+
name|limit
operator|-
name|meetings
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|limit
operator|<=
literal|0
operator|||
name|meetings
operator|.
name|size
argument_list|()
operator|<
name|limit
condition|)
name|meetings
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m"
argument_list|)
operator|.
name|type
argument_list|(
literal|"CourseEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.relatedCourses o, StudentClassEnrollment enrl inner join enrl.courseOffering co"
argument_list|)
operator|.
name|where
argument_list|(
literal|"enrl.student.externalUniqueId = :externalId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"externalId"
argument_list|,
name|request
operator|.
name|getResourceExternalId
argument_list|()
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = co.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeCourse
argument_list|)
operator|.
name|limit
argument_list|(
name|limit
operator|<=
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|+
name|limit
operator|-
name|meetings
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|<=
literal|0
operator|||
name|meetings
operator|.
name|size
argument_list|()
operator|<
name|limit
condition|)
name|meetings
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m"
argument_list|)
operator|.
name|type
argument_list|(
literal|"CourseEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.relatedCourses o, StudentClassEnrollment enrl inner join enrl.courseOffering co"
argument_list|)
operator|.
name|where
argument_list|(
literal|"enrl.student.externalUniqueId = :externalId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"externalId"
argument_list|,
name|request
operator|.
name|getResourceExternalId
argument_list|()
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = co.instructionalOffering.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeOffering
argument_list|)
operator|.
name|limit
argument_list|(
name|limit
operator|<=
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|+
name|limit
operator|-
name|meetings
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|<=
literal|0
operator|||
name|meetings
operator|.
name|size
argument_list|()
operator|<
name|limit
condition|)
name|meetings
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m"
argument_list|)
operator|.
name|type
argument_list|(
literal|"CourseEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.relatedCourses o, StudentClassEnrollment enrl inner join enrl.clazz c inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co"
argument_list|)
operator|.
name|where
argument_list|(
literal|"enrl.student.externalUniqueId = :externalId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"externalId"
argument_list|,
name|request
operator|.
name|getResourceExternalId
argument_list|()
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = c.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeClass
argument_list|)
operator|.
name|limit
argument_list|(
name|limit
operator|<=
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|+
name|limit
operator|-
name|meetings
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|<=
literal|0
operator|||
name|meetings
operator|.
name|size
argument_list|()
operator|<
name|limit
condition|)
name|meetings
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m"
argument_list|)
operator|.
name|type
argument_list|(
literal|"CourseEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.relatedCourses o, StudentClassEnrollment enrl inner join enrl.clazz c inner join c.schedulingSubpart.instrOfferingConfig cfg"
argument_list|)
operator|.
name|where
argument_list|(
literal|"enrl.student.externalUniqueId = :externalId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"externalId"
argument_list|,
name|request
operator|.
name|getResourceExternalId
argument_list|()
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = cfg.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeConfig
argument_list|)
operator|.
name|limit
argument_list|(
name|limit
operator|<=
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|+
name|limit
operator|-
name|meetings
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|<=
literal|0
operator|||
name|meetings
operator|.
name|size
argument_list|()
operator|<
name|limit
condition|)
name|meetings
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m"
argument_list|)
operator|.
name|type
argument_list|(
literal|"CourseEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.relatedCourses o, ClassInstructor ci inner join ci.classInstructing c inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co"
argument_list|)
operator|.
name|where
argument_list|(
literal|"ci.instructor.externalUniqueId = :externalId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"externalId"
argument_list|,
name|request
operator|.
name|getResourceExternalId
argument_list|()
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = co.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeCourse
argument_list|)
operator|.
name|limit
argument_list|(
name|limit
operator|<=
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|+
name|limit
operator|-
name|meetings
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|<=
literal|0
operator|||
name|meetings
operator|.
name|size
argument_list|()
operator|<
name|limit
condition|)
name|meetings
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m"
argument_list|)
operator|.
name|type
argument_list|(
literal|"CourseEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.relatedCourses o, ClassInstructor ci inner join ci.classInstructing c inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co"
argument_list|)
operator|.
name|where
argument_list|(
literal|"ci.instructor.externalUniqueId = :externalId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"externalId"
argument_list|,
name|request
operator|.
name|getResourceExternalId
argument_list|()
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = co.instructionalOffering.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeOffering
argument_list|)
operator|.
name|limit
argument_list|(
name|limit
operator|<=
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|+
name|limit
operator|-
name|meetings
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|<=
literal|0
operator|||
name|meetings
operator|.
name|size
argument_list|()
operator|<
name|limit
condition|)
name|meetings
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m"
argument_list|)
operator|.
name|type
argument_list|(
literal|"CourseEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.relatedCourses o, ClassInstructor ci inner join ci.classInstructing c inner join c.schedulingSubpart.instrOfferingConfig cfg"
argument_list|)
operator|.
name|where
argument_list|(
literal|"ci.instructor.externalUniqueId = :externalId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"externalId"
argument_list|,
name|request
operator|.
name|getResourceExternalId
argument_list|()
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = cfg.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeConfig
argument_list|)
operator|.
name|limit
argument_list|(
name|limit
operator|<=
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|+
name|limit
operator|-
name|meetings
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|<=
literal|0
operator|||
name|meetings
operator|.
name|size
argument_list|()
operator|<
name|limit
condition|)
name|meetings
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m"
argument_list|)
operator|.
name|type
argument_list|(
literal|"CourseEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.relatedCourses o, ClassInstructor ci inner join ci.classInstructing c"
argument_list|)
operator|.
name|where
argument_list|(
literal|"ci.instructor.externalUniqueId = :externalId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"externalId"
argument_list|,
name|request
operator|.
name|getResourceExternalId
argument_list|()
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = c.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeClass
argument_list|)
operator|.
name|limit
argument_list|(
name|limit
operator|<=
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|+
name|limit
operator|-
name|meetings
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|<=
literal|0
operator|||
name|meetings
operator|.
name|size
argument_list|()
operator|<
name|limit
condition|)
name|meetings
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m"
argument_list|)
operator|.
name|where
argument_list|(
literal|"e.class in (CourseEvent, SpecialEvent, UnavailableEvent)"
argument_list|)
operator|.
name|where
argument_list|(
literal|"e.mainContact.externalUniqueId = :externalId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"externalId"
argument_list|,
name|request
operator|.
name|getResourceExternalId
argument_list|()
argument_list|)
operator|.
name|limit
argument_list|(
name|limit
operator|<=
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|+
name|limit
operator|-
name|meetings
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|<=
literal|0
operator|||
name|meetings
operator|.
name|size
argument_list|()
operator|<
name|limit
condition|)
name|meetings
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join m.event.additionalContacts c"
argument_list|)
operator|.
name|where
argument_list|(
literal|"c.externalUniqueId = :externalId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"externalId"
argument_list|,
name|request
operator|.
name|getResourceExternalId
argument_list|()
argument_list|)
operator|.
name|limit
argument_list|(
name|limit
operator|<=
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|+
name|limit
operator|-
name|meetings
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|<=
literal|0
operator|||
name|meetings
operator|.
name|size
argument_list|()
operator|<
name|limit
condition|)
name|meetings
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m"
argument_list|)
operator|.
name|from
argument_list|(
literal|"EventContact c"
argument_list|)
operator|.
name|where
argument_list|(
literal|"c.externalUniqueId = :externalId"
argument_list|)
operator|.
name|where
argument_list|(
literal|"c.emailAddress is not null"
argument_list|)
operator|.
name|where
argument_list|(
literal|"lower(m.event.email) like '%' || lower(c.emailAddress) || '%'"
argument_list|)
operator|.
name|set
argument_list|(
literal|"externalId"
argument_list|,
name|request
operator|.
name|getResourceExternalId
argument_list|()
argument_list|)
operator|.
name|limit
argument_list|(
name|limit
operator|<=
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|+
name|limit
operator|-
name|meetings
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|EventException
argument_list|(
literal|"Resource type "
operator|+
name|request
operator|.
name|getResourceType
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|" not supported."
argument_list|)
throw|;
block|}
name|GwtRpcResponseList
argument_list|<
name|EventInterface
argument_list|>
name|ret
init|=
operator|new
name|GwtRpcResponseList
argument_list|<
name|EventInterface
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|EventInterface
argument_list|>
name|events
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|EventInterface
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Location
argument_list|>
argument_list|>
name|unavailableLocations
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Location
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Meeting
name|m
range|:
name|meetings
control|)
block|{
name|EventInterface
name|event
init|=
name|events
operator|.
name|get
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|==
literal|null
condition|)
block|{
name|event
operator|=
operator|new
name|EventInterface
argument_list|()
expr_stmt|;
name|event
operator|.
name|setId
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setName
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventName
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setType
argument_list|(
name|EventInterface
operator|.
name|EventType
operator|.
name|values
argument_list|()
index|[
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventType
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|events
operator|.
name|put
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|event
operator|.
name|setCanView
argument_list|(
name|context
operator|.
name|hasPermission
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
argument_list|,
name|Right
operator|.
name|EventDetail
argument_list|)
argument_list|)
expr_stmt|;
name|event
operator|.
name|setMaxCapacity
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getMaxCapacity
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getMainContact
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ContactInterface
name|contact
init|=
operator|new
name|ContactInterface
argument_list|()
decl_stmt|;
name|contact
operator|.
name|setFirstName
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getMainContact
argument_list|()
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setMiddleName
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getMainContact
argument_list|()
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setLastName
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getMainContact
argument_list|()
operator|.
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setEmail
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getMainContact
argument_list|()
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setContact
argument_list|(
name|contact
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|EventContact
name|additional
range|:
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getAdditionalContacts
argument_list|()
control|)
block|{
name|ContactInterface
name|contact
init|=
operator|new
name|ContactInterface
argument_list|()
decl_stmt|;
name|contact
operator|.
name|setFirstName
argument_list|(
name|additional
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setMiddleName
argument_list|(
name|additional
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setLastName
argument_list|(
name|additional
operator|.
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setEmail
argument_list|(
name|additional
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|addAdditionalContact
argument_list|(
name|contact
argument_list|)
expr_stmt|;
block|}
name|event
operator|.
name|setEmail
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getSponsoringOrganization
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SponsoringOrganizationInterface
name|sponsor
init|=
operator|new
name|SponsoringOrganizationInterface
argument_list|()
decl_stmt|;
name|sponsor
operator|.
name|setEmail
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getSponsoringOrganization
argument_list|()
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
name|sponsor
operator|.
name|setName
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getSponsoringOrganization
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sponsor
operator|.
name|setUniqueId
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getSponsoringOrganization
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setSponsor
argument_list|(
name|sponsor
argument_list|)
expr_stmt|;
block|}
name|String
name|note
init|=
literal|null
decl_stmt|;
for|for
control|(
name|EventNote
name|n
range|:
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getNotes
argument_list|()
control|)
block|{
if|if
condition|(
name|n
operator|.
name|getTextNote
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|n
operator|.
name|getTextNote
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|note
operator|=
operator|(
name|note
operator|==
literal|null
condition|?
literal|""
else|:
name|note
operator|+
literal|"n"
operator|)
operator|+
name|n
operator|.
name|getTextNote
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|Event
operator|.
name|sEventTypeClass
operator|==
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventType
argument_list|()
condition|)
block|{
name|ClassEvent
name|ce
init|=
name|ClassEventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|Class_
name|clazz
init|=
name|ce
operator|.
name|getClazz
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
index|[]
name|r
init|=
operator|(
name|restrictions
operator|==
literal|null
condition|?
literal|null
else|:
name|restrictions
operator|.
name|get
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
operator|&&
name|hide
argument_list|(
name|r
argument_list|,
name|clazz
argument_list|)
condition|)
continue|continue;
name|event
operator|.
name|setEnrollment
argument_list|(
name|clazz
operator|.
name|getEnrollment
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getDisplayInstructor
argument_list|()
condition|)
block|{
for|for
control|(
name|ClassInstructor
name|i
range|:
name|clazz
operator|.
name|getClassInstructors
argument_list|()
control|)
block|{
name|ContactInterface
name|instructor
init|=
operator|new
name|ContactInterface
argument_list|()
decl_stmt|;
name|instructor
operator|.
name|setFirstName
argument_list|(
name|i
operator|.
name|getInstructor
argument_list|()
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setMiddleName
argument_list|(
name|i
operator|.
name|getInstructor
argument_list|()
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setLastName
argument_list|(
name|i
operator|.
name|getInstructor
argument_list|()
operator|.
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setEmail
argument_list|(
name|i
operator|.
name|getInstructor
argument_list|()
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|addInstructor
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
block|}
block|}
name|CourseOffering
name|correctedOffering
init|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CourseOffering
argument_list|>
name|courses
init|=
operator|new
name|ArrayList
argument_list|<
name|CourseOffering
argument_list|>
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseOfferings
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|request
operator|.
name|getResourceType
argument_list|()
condition|)
block|{
comment|/* 				    		case SUBJECT: 			    				for (Iterator<CourseOffering> i = courses.iterator(); i.hasNext(); ) { 			    					CourseOffering co = i.next(); 			    					if (co.getSubjectArea().getUniqueId().equals(request.getResourceId())) { 			    						if (!correctedOffering.getSubjectArea().getUniqueId().equals(request.getResourceId())) 			    							correctedOffering = co; 			    					} else { 			    						i.remove(); 			    					} 			    				} 				    			break; 				    		case COURSE: 			    				for (Iterator<CourseOffering> i = courses.iterator(); i.hasNext(); ) { 			    					CourseOffering co = i.next(); 			    					if (co.getUniqueId().equals(request.getResourceId())) { 			    						if (!correctedOffering.getUniqueId().equals(request.getResourceId())) 			    							correctedOffering = co; 			    					} else { 			    						i.remove(); 			    					} 			    				} 				    			break; 				    		case DEPARTMENT: 				    			if (department.isExternalManager()) break; 			    				for (Iterator<CourseOffering> i = courses.iterator(); i.hasNext(); ) { 			    					CourseOffering co = i.next(); 			    					if (co.getSubjectArea().getDepartment().getUniqueId().equals(request.getResourceId())) { 			    						if (!correctedOffering.getSubjectArea().getDepartment().getUniqueId().equals(request.getResourceId())) 			    							correctedOffering = co; 			    					} else { 			    						i.remove(); 			    					} 			    				} 				    			break; 				    		*/
case|case
name|CURRICULUM
case|:
case|case
name|PERSON
case|:
for|for
control|(
name|Iterator
argument_list|<
name|CourseOffering
argument_list|>
name|i
init|=
name|courses
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOffering
name|co
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|curriculumCourses
operator|.
name|contains
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|curriculumCourses
operator|.
name|contains
argument_list|(
name|correctedOffering
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
name|correctedOffering
operator|=
name|co
expr_stmt|;
block|}
else|else
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
block|}
name|courses
operator|.
name|remove
argument_list|(
name|correctedOffering
argument_list|)
expr_stmt|;
name|event
operator|.
name|addCourseName
argument_list|(
name|correctedOffering
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|addCourseTitle
argument_list|(
name|correctedOffering
operator|.
name|getTitle
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|correctedOffering
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setInstruction
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getDesc
argument_list|()
operator|.
name|length
argument_list|()
operator|<=
literal|20
condition|?
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getDesc
argument_list|()
else|:
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setInstructionType
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getItype
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setSectionNumber
argument_list|(
name|clazz
operator|.
name|getSectionNumberString
argument_list|(
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|correctedOffering
argument_list|)
operator|==
literal|null
condition|)
block|{
name|event
operator|.
name|setName
argument_list|(
name|clazz
operator|.
name|getClassLabel
argument_list|(
name|correctedOffering
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|event
operator|.
name|addExternalId
argument_list|(
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|correctedOffering
argument_list|)
argument_list|)
expr_stmt|;
name|event
operator|.
name|setName
argument_list|(
name|correctedOffering
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|correctedOffering
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CourseOffering
name|co
range|:
name|courses
control|)
block|{
name|event
operator|.
name|addCourseName
argument_list|(
name|co
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|addCourseTitle
argument_list|(
name|co
operator|.
name|getTitle
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|co
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|co
argument_list|)
operator|!=
literal|null
condition|)
name|event
operator|.
name|addExternalId
argument_list|(
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|co
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|note
operator|=
name|correctedOffering
operator|.
name|getScheduleBookNote
argument_list|()
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getSchedulePrintNote
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|clazz
operator|.
name|getSchedulePrintNote
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|note
operator|=
operator|(
name|note
operator|==
literal|null
operator|||
name|note
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
name|note
operator|+
literal|"\n"
operator|)
operator|+
name|clazz
operator|.
name|getSchedulePrintNote
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|Event
operator|.
name|sEventTypeFinalExam
operator|==
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventType
argument_list|()
operator|||
name|Event
operator|.
name|sEventTypeMidtermExam
operator|==
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventType
argument_list|()
condition|)
block|{
name|ExamEvent
name|xe
init|=
name|ExamEventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|event
operator|.
name|setEnrollment
argument_list|(
name|xe
operator|.
name|getExam
argument_list|()
operator|.
name|countStudents
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|DepartmentalInstructor
name|i
range|:
name|xe
operator|.
name|getExam
argument_list|()
operator|.
name|getInstructors
argument_list|()
control|)
block|{
name|ContactInterface
name|instructor
init|=
operator|new
name|ContactInterface
argument_list|()
decl_stmt|;
name|instructor
operator|.
name|setFirstName
argument_list|(
name|i
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setMiddleName
argument_list|(
name|i
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setLastName
argument_list|(
name|i
operator|.
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setEmail
argument_list|(
name|i
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|addInstructor
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
block|}
name|String
name|name
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ExamOwner
name|owner
range|:
operator|new
name|TreeSet
argument_list|<
name|ExamOwner
argument_list|>
argument_list|(
name|xe
operator|.
name|getExam
argument_list|()
operator|.
name|getOwners
argument_list|()
argument_list|)
control|)
block|{
name|TreeSet
argument_list|<
name|CourseOffering
argument_list|>
name|courses
init|=
operator|new
name|TreeSet
argument_list|<
name|CourseOffering
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|owner
operator|.
name|getOwnerType
argument_list|()
operator|==
name|ExamOwner
operator|.
name|sOwnerTypeCourse
operator|||
name|request
operator|.
name|getResourceType
argument_list|()
operator|==
name|ResourceType
operator|.
name|ROOM
condition|)
block|{
name|courses
operator|.
name|add
argument_list|(
name|owner
operator|.
name|getCourse
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|courses
operator|.
name|addAll
argument_list|(
name|owner
operator|.
name|getCourse
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseOfferings
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|courses
label|:
for|for
control|(
name|CourseOffering
name|course
range|:
name|courses
control|)
block|{
switch|switch
condition|(
name|request
operator|.
name|getResourceType
argument_list|()
condition|)
block|{
comment|/* 						    		case SUBJECT: 						    			if (!course.getSubjectArea().getUniqueId().equals(request.getResourceId())) continue courses; 						    			break; 						    		case COURSE: 						    			if (!course.getUniqueId().equals(request.getResourceId())) continue courses; 						    			break; 						    		case DEPARTMENT: 						    			if (department.isExternalManager()) break courses; 						    			if (!course.getSubjectArea().getDepartment().getUniqueId().equals(request.getResourceId())) continue courses; 						    			break; 						    		*/
case|case
name|CURRICULUM
case|:
case|case
name|PERSON
case|:
if|if
condition|(
operator|!
name|curriculumCourses
operator|.
name|contains
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue
name|courses
continue|;
break|break;
block|}
name|event
operator|.
name|addCourseName
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|addCourseTitle
argument_list|(
name|course
operator|.
name|getTitle
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|course
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|name
operator|=
name|course
operator|.
name|getCourseName
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|owner
operator|.
name|getOwnerType
argument_list|()
condition|)
block|{
case|case
name|ExamOwner
operator|.
name|sOwnerTypeClass
case|:
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|owner
operator|.
name|getOwnerObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|course
argument_list|)
operator|==
literal|null
condition|)
block|{
name|event
operator|.
name|addExternalId
argument_list|(
name|clazz
operator|.
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
operator|+
literal|" "
operator|+
name|clazz
operator|.
name|getSectionNumberString
argument_list|(
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|name
operator|=
name|course
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|clazz
operator|.
name|getClassLabel
argument_list|(
name|course
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|event
operator|.
name|addExternalId
argument_list|(
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|course
argument_list|)
argument_list|)
expr_stmt|;
name|name
operator|=
name|course
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|course
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ExamOwner
operator|.
name|sOwnerTypeConfig
case|:
name|InstrOfferingConfig
name|config
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|owner
operator|.
name|getOwnerObject
argument_list|()
decl_stmt|;
name|event
operator|.
name|addExternalId
argument_list|(
literal|"["
operator|+
name|config
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
break|break;
case|case
name|ExamOwner
operator|.
name|sOwnerTypeCourse
case|:
name|event
operator|.
name|addExternalId
argument_list|(
name|MESSAGES
operator|.
name|colCourse
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|ExamOwner
operator|.
name|sOwnerTypeOffering
case|:
name|event
operator|.
name|addExternalId
argument_list|(
name|MESSAGES
operator|.
name|colOffering
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|event
operator|.
name|hasCourseNames
argument_list|()
operator|&&
name|event
operator|.
name|getCourseNames
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
operator|(
name|request
operator|.
name|getResourceType
argument_list|()
operator|==
name|ResourceType
operator|.
name|PERSON
operator|||
name|request
operator|.
name|getResourceType
argument_list|()
operator|==
name|ResourceType
operator|.
name|CURRICULUM
operator|)
condition|)
name|event
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|Event
operator|.
name|sEventTypeCourse
operator|==
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventType
argument_list|()
condition|)
block|{
name|CourseEvent
name|ce
init|=
name|CourseEventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|event
operator|.
name|setRequiredAttendance
argument_list|(
name|ce
operator|.
name|isReqAttendance
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|enrl
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RelatedCourseInfo
name|owner
range|:
name|ce
operator|.
name|getRelatedCourses
argument_list|()
control|)
block|{
name|enrl
operator|+=
name|owner
operator|.
name|countStudents
argument_list|()
expr_stmt|;
name|TreeSet
argument_list|<
name|CourseOffering
argument_list|>
name|courses
init|=
operator|new
name|TreeSet
argument_list|<
name|CourseOffering
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|owner
operator|.
name|getOwnerType
argument_list|()
operator|==
name|ExamOwner
operator|.
name|sOwnerTypeCourse
operator|||
name|request
operator|.
name|getResourceType
argument_list|()
operator|==
name|ResourceType
operator|.
name|ROOM
condition|)
block|{
name|courses
operator|.
name|add
argument_list|(
name|owner
operator|.
name|getCourse
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|courses
operator|.
name|addAll
argument_list|(
name|owner
operator|.
name|getCourse
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseOfferings
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|courses
label|:
for|for
control|(
name|CourseOffering
name|course
range|:
name|courses
control|)
block|{
switch|switch
condition|(
name|request
operator|.
name|getResourceType
argument_list|()
condition|)
block|{
comment|/* 						    		case SUBJECT: 						    			if (!course.getSubjectArea().getUniqueId().equals(request.getResourceId())) continue courses; 						    			break; 						    		case COURSE: 						    			if (!course.getUniqueId().equals(request.getResourceId())) continue courses; 						    			break; 						    		case DEPARTMENT: 						    			if (department.isExternalManager()) break courses; 						    			if (!course.getSubjectArea().getDepartment().getUniqueId().equals(request.getResourceId())) continue courses; 						    			break; 						    		*/
case|case
name|CURRICULUM
case|:
case|case
name|PERSON
case|:
if|if
condition|(
operator|!
name|curriculumCourses
operator|.
name|contains
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue
name|courses
continue|;
break|break;
block|}
name|event
operator|.
name|addCourseName
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|addCourseTitle
argument_list|(
name|course
operator|.
name|getTitle
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|course
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|owner
operator|.
name|getOwnerType
argument_list|()
condition|)
block|{
case|case
name|ExamOwner
operator|.
name|sOwnerTypeClass
case|:
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|owner
operator|.
name|getOwnerObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|course
argument_list|)
operator|==
literal|null
condition|)
block|{
name|event
operator|.
name|addExternalId
argument_list|(
name|clazz
operator|.
name|getClassLabel
argument_list|(
name|course
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|event
operator|.
name|addExternalId
argument_list|(
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|course
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ExamOwner
operator|.
name|sOwnerTypeConfig
case|:
name|InstrOfferingConfig
name|config
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|owner
operator|.
name|getOwnerObject
argument_list|()
decl_stmt|;
name|event
operator|.
name|addExternalId
argument_list|(
literal|"["
operator|+
name|config
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
break|break;
case|case
name|ExamOwner
operator|.
name|sOwnerTypeCourse
case|:
name|event
operator|.
name|addExternalId
argument_list|(
name|MESSAGES
operator|.
name|colCourse
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|ExamOwner
operator|.
name|sOwnerTypeOffering
case|:
name|event
operator|.
name|addExternalId
argument_list|(
name|MESSAGES
operator|.
name|colOffering
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
name|event
operator|.
name|setEnrollment
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|note
operator|!=
literal|null
operator|&&
operator|!
name|note
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|NoteInterface
name|n
init|=
operator|new
name|NoteInterface
argument_list|()
decl_stmt|;
name|n
operator|.
name|setNote
argument_list|(
name|note
argument_list|)
expr_stmt|;
name|event
operator|.
name|addNote
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
name|MeetingInterface
name|meeting
init|=
operator|new
name|MeetingInterface
argument_list|()
decl_stmt|;
name|meeting
operator|.
name|setId
argument_list|(
name|m
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setMeetingDate
argument_list|(
name|m
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setDayOfWeek
argument_list|(
name|Constants
operator|.
name|getDayOfWeek
argument_list|(
name|m
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setStartTime
argument_list|(
name|m
operator|.
name|getStartTime
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setStopTime
argument_list|(
name|m
operator|.
name|getStopTime
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setDayOfYear
argument_list|(
name|CalendarUtils
operator|.
name|date2dayOfYear
argument_list|(
name|session
operator|.
name|getSessionStartYear
argument_list|()
argument_list|,
name|m
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setStartSlot
argument_list|(
name|m
operator|.
name|getStartPeriod
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setEndSlot
argument_list|(
name|m
operator|.
name|getStopPeriod
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setStartOffset
argument_list|(
name|m
operator|.
name|getStartOffset
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|m
operator|.
name|getStartOffset
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setEndOffset
argument_list|(
name|m
operator|.
name|getStopOffset
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|m
operator|.
name|getStopOffset
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setPast
argument_list|(
name|context
operator|.
name|isPastOrOutside
argument_list|(
name|m
operator|.
name|getStartTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setCanEdit
argument_list|(
name|context
operator|.
name|hasPermission
argument_list|(
name|m
argument_list|,
name|Right
operator|.
name|EventMeetingEdit
argument_list|)
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setCanInquire
argument_list|(
name|context
operator|.
name|hasPermission
argument_list|(
name|m
argument_list|,
name|Right
operator|.
name|EventMeetingInquire
argument_list|)
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setCanApprove
argument_list|(
name|context
operator|.
name|hasPermission
argument_list|(
name|m
argument_list|,
name|Right
operator|.
name|EventMeetingApprove
argument_list|)
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setCanDelete
argument_list|(
name|context
operator|.
name|hasPermission
argument_list|(
name|m
argument_list|,
name|Right
operator|.
name|EventMeetingDelete
argument_list|)
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setCanCancel
argument_list|(
name|context
operator|.
name|hasPermission
argument_list|(
name|m
argument_list|,
name|Right
operator|.
name|EventMeetingCancel
argument_list|)
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setApprovalDate
argument_list|(
name|m
operator|.
name|getApprovalDate
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setApprovalStatus
argument_list|(
name|m
operator|.
name|getApprovalStatus
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ResourceInterface
name|location
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|location
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|ROOM
argument_list|)
expr_stmt|;
name|location
operator|.
name|setId
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setName
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setSize
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setDistance
argument_list|(
name|distances
operator|.
name|get
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|location
operator|.
name|setRoomType
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getRoomTypeLabel
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setBreakTime
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getEffectiveBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setMessage
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getEventMessage
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setLocation
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|getEventFilter
argument_list|()
operator|.
name|hasOptions
argument_list|(
literal|"flag"
argument_list|)
operator|&&
name|request
operator|.
name|getEventFilter
argument_list|()
operator|.
name|getOptions
argument_list|(
literal|"flag"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Conflicts"
argument_list|)
condition|)
block|{
if|if
condition|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getEventAvailability
argument_list|()
operator|!=
literal|null
operator|&&
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getEventAvailability
argument_list|()
operator|.
name|length
argument_list|()
operator|==
name|Constants
operator|.
name|SLOTS_PER_DAY
operator|*
name|Constants
operator|.
name|DAY_CODES
operator|.
name|length
condition|)
block|{
name|check
label|:
for|for
control|(
name|int
name|slot
init|=
name|meeting
operator|.
name|getStartSlot
argument_list|()
init|;
name|slot
operator|<
name|meeting
operator|.
name|getEndSlot
argument_list|()
condition|;
name|slot
operator|++
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getEventAvailability
argument_list|()
operator|.
name|charAt
argument_list|(
name|meeting
operator|.
name|getDayOfWeek
argument_list|()
operator|*
name|Constants
operator|.
name|SLOTS_PER_DAY
operator|+
name|slot
argument_list|)
operator|==
literal|'1'
condition|)
block|{
name|Set
argument_list|<
name|Location
argument_list|>
name|locations
init|=
name|unavailableLocations
operator|.
name|get
argument_list|(
name|event
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|locations
operator|==
literal|null
condition|)
block|{
name|locations
operator|=
operator|new
name|HashSet
argument_list|<
name|Location
argument_list|>
argument_list|()
expr_stmt|;
name|unavailableLocations
operator|.
name|put
argument_list|(
name|event
operator|.
name|getId
argument_list|()
argument_list|,
name|locations
argument_list|)
expr_stmt|;
block|}
name|locations
operator|.
name|add
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
break|break
name|check
break|;
block|}
block|}
block|}
block|}
name|event
operator|.
name|addMeeting
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|getEventFilter
argument_list|()
operator|.
name|hasOptions
argument_list|(
literal|"flag"
argument_list|)
operator|&&
name|request
operator|.
name|getEventFilter
argument_list|()
operator|.
name|getOptions
argument_list|(
literal|"flag"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Conflicts"
argument_list|)
condition|)
block|{
name|request
operator|.
name|getEventFilter
argument_list|()
operator|.
name|setOption
argument_list|(
literal|"mode"
argument_list|,
literal|"Conflicting Events"
argument_list|)
expr_stmt|;
name|query
operator|=
name|EventFilterBackend
operator|.
name|getQuery
argument_list|(
name|request
operator|.
name|getEventFilter
argument_list|()
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|conflicts
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|request
operator|.
name|getResourceType
argument_list|()
condition|)
block|{
case|case
name|ROOM
case|:
if|if
condition|(
name|request
operator|.
name|getResourceId
argument_list|()
operator|==
literal|null
condition|)
name|conflicts
operator|=
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|query
operator|.
name|select
argument_list|(
literal|"distinct m.event.uniqueId, Xm"
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
else|else
name|conflicts
operator|=
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|query
operator|.
name|select
argument_list|(
literal|"distinct m.event.uniqueId, Xm"
argument_list|)
operator|.
name|joinWithLocation
argument_list|()
operator|.
name|where
argument_list|(
literal|"l.uniqueId = :resourceId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
break|break;
case|case
name|SUBJECT
case|:
case|case
name|COURSE
case|:
name|String
name|resourceCheck
init|=
operator|(
name|request
operator|.
name|getResourceType
argument_list|()
operator|==
name|ResourceType
operator|.
name|SUBJECT
condition|?
literal|"co.subjectArea.uniqueId = :resourceId"
else|:
literal|"co.uniqueId = :resourceId"
operator|)
decl_stmt|;
name|conflicts
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
expr_stmt|;
name|conflicts
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m.event.uniqueId, Xm"
argument_list|)
operator|.
name|type
argument_list|(
literal|"ClassEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.clazz.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co"
argument_list|)
operator|.
name|where
argument_list|(
name|resourceCheck
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|conflicts
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m.event.uniqueId, Xm"
argument_list|)
operator|.
name|type
argument_list|(
literal|"CourseEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.relatedCourses o, CourseOffering co"
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = co.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeCourse
argument_list|)
operator|.
name|where
argument_list|(
name|resourceCheck
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|conflicts
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m.event.uniqueId, Xm"
argument_list|)
operator|.
name|type
argument_list|(
literal|"CourseEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.relatedCourses o, CourseOffering co"
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = co.instructionalOffering.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeOffering
argument_list|)
operator|.
name|where
argument_list|(
name|resourceCheck
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|conflicts
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m.event.uniqueId, Xm"
argument_list|)
operator|.
name|type
argument_list|(
literal|"CourseEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.relatedCourses o, Class_ c inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co"
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = c.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeClass
argument_list|)
operator|.
name|where
argument_list|(
name|resourceCheck
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|conflicts
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m.event.uniqueId, Xm"
argument_list|)
operator|.
name|type
argument_list|(
literal|"CourseEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.relatedCourses o, CourseOffering co inner join co.instructionalOffering.instrOfferingConfigs cfg"
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = cfg.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeConfig
argument_list|)
operator|.
name|where
argument_list|(
name|resourceCheck
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|conflicts
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m.event.uniqueId, Xm"
argument_list|)
operator|.
name|type
argument_list|(
literal|"ExamEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.exam.owners o, CourseOffering co"
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = co.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeCourse
argument_list|)
operator|.
name|where
argument_list|(
name|resourceCheck
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|conflicts
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m.event.uniqueId, Xm"
argument_list|)
operator|.
name|type
argument_list|(
literal|"ExamEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.exam.owners o, CourseOffering co"
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = co.instructionalOffering.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeOffering
argument_list|)
operator|.
name|where
argument_list|(
name|resourceCheck
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|conflicts
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m.event.uniqueId, Xm"
argument_list|)
operator|.
name|type
argument_list|(
literal|"ExamEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.exam.owners o, Class_ c inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co"
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = c.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeClass
argument_list|)
operator|.
name|where
argument_list|(
name|resourceCheck
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|conflicts
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m.event.uniqueId, Xm"
argument_list|)
operator|.
name|type
argument_list|(
literal|"ExamEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.exam.owners o, CourseOffering co inner join co.instructionalOffering.instrOfferingConfigs cfg"
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = cfg.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeConfig
argument_list|)
operator|.
name|where
argument_list|(
name|resourceCheck
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|CURRICULUM
case|:
name|conflicts
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
expr_stmt|;
name|conflicts
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m.event.uniqueId, Xm"
argument_list|)
operator|.
name|type
argument_list|(
literal|"ClassEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.clazz.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co, CurriculumCourse cc"
argument_list|)
operator|.
name|where
argument_list|(
literal|"co = cc.course"
argument_list|)
operator|.
name|where
argument_list|(
literal|"cc.classification.curriculum.uniqueId = :resourceId or cc.classification.uniqueId = :resourceId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|conflicts
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m.event.uniqueId, Xm"
argument_list|)
operator|.
name|type
argument_list|(
literal|"ExamEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.exam.owners o, CourseOffering co, CurriculumCourse cc"
argument_list|)
operator|.
name|where
argument_list|(
literal|"co = cc.course"
argument_list|)
operator|.
name|where
argument_list|(
literal|"cc.classification.curriculum.uniqueId = :resourceId or cc.classification.uniqueId = :resourceId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = co.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeCourse
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|conflicts
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m.event.uniqueId, Xm"
argument_list|)
operator|.
name|type
argument_list|(
literal|"ExamEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.exam.owners o, CourseOffering co, CurriculumCourse cc"
argument_list|)
operator|.
name|where
argument_list|(
literal|"co = cc.course"
argument_list|)
operator|.
name|where
argument_list|(
literal|"cc.classification.curriculum.uniqueId = :resourceId or cc.classification.uniqueId = :resourceId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = co.instructionalOffering.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeOffering
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|conflicts
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m.event.uniqueId, Xm"
argument_list|)
operator|.
name|type
argument_list|(
literal|"ExamEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.exam.owners o, Class_ c inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co, CurriculumCourse cc"
argument_list|)
operator|.
name|where
argument_list|(
literal|"co = cc.course"
argument_list|)
operator|.
name|where
argument_list|(
literal|"cc.classification.curriculum.uniqueId = :resourceId or cc.classification.uniqueId = :resourceId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = c.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeClass
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|conflicts
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m.event.uniqueId, Xm"
argument_list|)
operator|.
name|type
argument_list|(
literal|"ExamEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.exam.owners o, CourseOffering co inner join co.instructionalOffering.instrOfferingConfigs cfg, CurriculumCourse cc"
argument_list|)
operator|.
name|where
argument_list|(
literal|"co = cc.course"
argument_list|)
operator|.
name|where
argument_list|(
literal|"cc.classification.curriculum.uniqueId = :resourceId or cc.classification.uniqueId = :resourceId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = cfg.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeConfig
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|conflicts
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m.event.uniqueId, Xm"
argument_list|)
operator|.
name|type
argument_list|(
literal|"CourseEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.relatedCourses o, CourseOffering co, CurriculumCourse cc"
argument_list|)
operator|.
name|where
argument_list|(
literal|"co = cc.course"
argument_list|)
operator|.
name|where
argument_list|(
literal|"cc.classification.curriculum.uniqueId = :resourceId or cc.classification.uniqueId = :resourceId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = co.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeCourse
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|conflicts
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m.event.uniqueId, Xm"
argument_list|)
operator|.
name|type
argument_list|(
literal|"CourseEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.relatedCourses o, CourseOffering co, CurriculumCourse cc"
argument_list|)
operator|.
name|where
argument_list|(
literal|"co = cc.course"
argument_list|)
operator|.
name|where
argument_list|(
literal|"cc.classification.curriculum.uniqueId = :resourceId or cc.classification.uniqueId = :resourceId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = co.instructionalOffering.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeOffering
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|conflicts
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m.event.uniqueId, Xm"
argument_list|)
operator|.
name|type
argument_list|(
literal|"CourseEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.relatedCourses o, Class_ c inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co, CurriculumCourse cc"
argument_list|)
operator|.
name|where
argument_list|(
literal|"co = cc.course"
argument_list|)
operator|.
name|where
argument_list|(
literal|"cc.classification.curriculum.uniqueId = :resourceId or cc.classification.uniqueId = :resourceId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = c.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeClass
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|conflicts
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m.event.uniqueId, Xm"
argument_list|)
operator|.
name|type
argument_list|(
literal|"CourseEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.relatedCourses o, CourseOffering co inner join co.instructionalOffering.instrOfferingConfigs cfg, CurriculumCourse cc"
argument_list|)
operator|.
name|where
argument_list|(
literal|"co = cc.course"
argument_list|)
operator|.
name|where
argument_list|(
literal|"cc.classification.curriculum.uniqueId = :resourceId or cc.classification.uniqueId = :resourceId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = cfg.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeConfig
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DEPARTMENT
case|:
if|if
condition|(
name|department
operator|.
name|isExternalManager
argument_list|()
condition|)
block|{
name|conflicts
operator|=
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|query
operator|.
name|select
argument_list|(
literal|"distinct m.event.uniqueId, Xm"
argument_list|)
operator|.
name|type
argument_list|(
literal|"ClassEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.clazz.managingDept d"
argument_list|)
operator|.
name|where
argument_list|(
literal|"d.uniqueId = :resourceId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|conflicts
operator|=
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|query
operator|.
name|select
argument_list|(
literal|"distinct m.event.uniqueId, Xm"
argument_list|)
operator|.
name|type
argument_list|(
literal|"ClassEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.clazz.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co inner join co.subjectArea.department d"
argument_list|)
operator|.
name|where
argument_list|(
literal|"d.uniqueId = :resourceId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
name|conflicts
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m.event.uniqueId, Xm"
argument_list|)
operator|.
name|type
argument_list|(
literal|"ExamEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.exam.owners o, CourseOffering co inner join co.subjectArea.department d"
argument_list|)
operator|.
name|where
argument_list|(
literal|"d.uniqueId = :resourceId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = co.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeCourse
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|conflicts
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m.event.uniqueId, Xm"
argument_list|)
operator|.
name|type
argument_list|(
literal|"ExamEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.exam.owners o, CourseOffering co inner join co.subjectArea.department d"
argument_list|)
operator|.
name|where
argument_list|(
literal|"d.uniqueId = :resourceId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = co.instructionalOffering.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeOffering
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|conflicts
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m.event.uniqueId, Xm"
argument_list|)
operator|.
name|type
argument_list|(
literal|"ExamEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.exam.owners o, Class_ c inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co inner join co.subjectArea.department d"
argument_list|)
operator|.
name|where
argument_list|(
literal|"d.uniqueId = :resourceId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = c.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeClass
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|conflicts
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m.event.uniqueId, Xm"
argument_list|)
operator|.
name|type
argument_list|(
literal|"ExamEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.exam.owners o, CourseOffering co inner join co.instructionalOffering.instrOfferingConfigs cfg inner join co.subjectArea.department d"
argument_list|)
operator|.
name|where
argument_list|(
literal|"d.uniqueId = :resourceId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = cfg.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeConfig
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|conflicts
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m.event.uniqueId, Xm"
argument_list|)
operator|.
name|type
argument_list|(
literal|"CourseEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.relatedCourses o, CourseOffering co inner join co.subjectArea.department d"
argument_list|)
operator|.
name|where
argument_list|(
literal|"d.uniqueId = :resourceId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = co.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeCourse
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|conflicts
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m.event.uniqueId, Xm"
argument_list|)
operator|.
name|type
argument_list|(
literal|"CourseEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.relatedCourses o, CourseOffering co inner join co.subjectArea.department d"
argument_list|)
operator|.
name|where
argument_list|(
literal|"d.uniqueId = :resourceId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = co.instructionalOffering.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeOffering
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|conflicts
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m.event.uniqueId, Xm"
argument_list|)
operator|.
name|type
argument_list|(
literal|"CourseEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.relatedCourses o, Class_ c inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co inner join co.subjectArea.department d"
argument_list|)
operator|.
name|where
argument_list|(
literal|"d.uniqueId = :resourceId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = c.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeClass
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|conflicts
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|select
argument_list|(
literal|"distinct m.event.uniqueId, Xm"
argument_list|)
operator|.
name|type
argument_list|(
literal|"CourseEvent"
argument_list|)
operator|.
name|from
argument_list|(
literal|"inner join e.relatedCourses o, CourseOffering co inner join co.instructionalOffering.instrOfferingConfigs cfg inner join co.subjectArea.department d"
argument_list|)
operator|.
name|where
argument_list|(
literal|"d.uniqueId = :resourceId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|where
argument_list|(
literal|"o.ownerType = :type and o.ownerId = cfg.uniqueId"
argument_list|)
operator|.
name|set
argument_list|(
literal|"type"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeConfig
argument_list|)
operator|.
name|query
argument_list|(
name|hibSession
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
if|if
condition|(
name|conflicts
operator|!=
literal|null
condition|)
block|{
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|EventInterface
argument_list|>
name|conflictingEvents
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|EventInterface
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
name|conflicts
control|)
block|{
name|EventInterface
name|parent
init|=
name|events
operator|.
name|get
argument_list|(
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
continue|continue;
name|Meeting
name|m
init|=
operator|(
name|Meeting
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|EventInterface
name|event
init|=
name|conflictingEvents
operator|.
name|get
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|==
literal|null
condition|)
block|{
name|event
operator|=
operator|new
name|EventInterface
argument_list|()
expr_stmt|;
name|event
operator|.
name|setId
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setName
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventName
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setType
argument_list|(
name|EventInterface
operator|.
name|EventType
operator|.
name|values
argument_list|()
index|[
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventType
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|conflictingEvents
operator|.
name|put
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|event
operator|.
name|setCanView
argument_list|(
name|context
operator|.
name|hasPermission
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
argument_list|,
name|Right
operator|.
name|EventDetail
argument_list|)
argument_list|)
expr_stmt|;
name|event
operator|.
name|setMaxCapacity
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getMaxCapacity
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getMainContact
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ContactInterface
name|contact
init|=
operator|new
name|ContactInterface
argument_list|()
decl_stmt|;
name|contact
operator|.
name|setFirstName
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getMainContact
argument_list|()
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setMiddleName
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getMainContact
argument_list|()
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setLastName
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getMainContact
argument_list|()
operator|.
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setEmail
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getMainContact
argument_list|()
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setContact
argument_list|(
name|contact
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|EventContact
name|additional
range|:
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getAdditionalContacts
argument_list|()
control|)
block|{
name|ContactInterface
name|contact
init|=
operator|new
name|ContactInterface
argument_list|()
decl_stmt|;
name|contact
operator|.
name|setFirstName
argument_list|(
name|additional
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setMiddleName
argument_list|(
name|additional
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setLastName
argument_list|(
name|additional
operator|.
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setEmail
argument_list|(
name|additional
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|addAdditionalContact
argument_list|(
name|contact
argument_list|)
expr_stmt|;
block|}
name|event
operator|.
name|setEmail
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getSponsoringOrganization
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SponsoringOrganizationInterface
name|sponsor
init|=
operator|new
name|SponsoringOrganizationInterface
argument_list|()
decl_stmt|;
name|sponsor
operator|.
name|setEmail
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getSponsoringOrganization
argument_list|()
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
name|sponsor
operator|.
name|setName
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getSponsoringOrganization
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sponsor
operator|.
name|setUniqueId
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getSponsoringOrganization
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setSponsor
argument_list|(
name|sponsor
argument_list|)
expr_stmt|;
block|}
name|String
name|note
init|=
literal|null
decl_stmt|;
for|for
control|(
name|EventNote
name|n
range|:
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getNotes
argument_list|()
control|)
block|{
if|if
condition|(
name|n
operator|.
name|getTextNote
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|n
operator|.
name|getTextNote
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|note
operator|=
operator|(
name|note
operator|==
literal|null
condition|?
literal|""
else|:
name|note
operator|+
literal|"n"
operator|)
operator|+
name|n
operator|.
name|getTextNote
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|Event
operator|.
name|sEventTypeClass
operator|==
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventType
argument_list|()
condition|)
block|{
name|ClassEvent
name|ce
init|=
name|ClassEventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|Class_
name|clazz
init|=
name|ce
operator|.
name|getClazz
argument_list|()
decl_stmt|;
name|event
operator|.
name|setEnrollment
argument_list|(
name|clazz
operator|.
name|getEnrollment
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getDisplayInstructor
argument_list|()
condition|)
block|{
for|for
control|(
name|ClassInstructor
name|i
range|:
name|clazz
operator|.
name|getClassInstructors
argument_list|()
control|)
block|{
name|ContactInterface
name|instructor
init|=
operator|new
name|ContactInterface
argument_list|()
decl_stmt|;
name|instructor
operator|.
name|setFirstName
argument_list|(
name|i
operator|.
name|getInstructor
argument_list|()
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setMiddleName
argument_list|(
name|i
operator|.
name|getInstructor
argument_list|()
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setLastName
argument_list|(
name|i
operator|.
name|getInstructor
argument_list|()
operator|.
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setEmail
argument_list|(
name|i
operator|.
name|getInstructor
argument_list|()
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|addInstructor
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
block|}
block|}
name|CourseOffering
name|correctedOffering
init|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CourseOffering
argument_list|>
name|courses
init|=
operator|new
name|ArrayList
argument_list|<
name|CourseOffering
argument_list|>
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseOfferings
argument_list|()
argument_list|)
decl_stmt|;
comment|/* 						    		switch (request.getResourceType()) { 						    		case SUBJECT: 					    				for (Iterator<CourseOffering> i = courses.iterator(); i.hasNext(); ) { 					    					CourseOffering co = i.next(); 					    					if (co.getSubjectArea().getUniqueId().equals(request.getResourceId())) { 					    						if (!correctedOffering.getSubjectArea().getUniqueId().equals(request.getResourceId())) 					    							correctedOffering = co; 					    					} else { 					    						i.remove(); 					    					} 					    				} 						    			break; 						    		case COURSE: 					    				for (Iterator<CourseOffering> i = courses.iterator(); i.hasNext(); ) { 					    					CourseOffering co = i.next(); 					    					if (co.getUniqueId().equals(request.getResourceId())) { 					    						if (!correctedOffering.getUniqueId().equals(request.getResourceId())) 					    							correctedOffering = co; 					    					} else { 					    						i.remove(); 					    					} 					    				} 						    			break; 						    		case DEPARTMENT: 						    			if (department.isExternalManager()) break; 					    				for (Iterator<CourseOffering> i = courses.iterator(); i.hasNext(); ) { 					    					CourseOffering co = i.next(); 					    					if (co.getSubjectArea().getDepartment().getUniqueId().equals(request.getResourceId())) { 					    						if (!correctedOffering.getSubjectArea().getDepartment().getUniqueId().equals(request.getResourceId())) 					    							correctedOffering = co; 					    					} else { 					    						i.remove(); 					    					} 					    				} 						    			break; 						    		case CURRICULUM: 					    				for (Iterator<CourseOffering> i = courses.iterator(); i.hasNext(); ) { 					    					CourseOffering co = i.next(); 					    					if (curriculumCourses.contains(co.getUniqueId())) { 					    						if (!curriculumCourses.contains(correctedOffering.getUniqueId())) 					    							correctedOffering = co; 					    					} else { 					    						i.remove(); 					    					} 					    				} 						    			break; 						    		} 						    		*/
name|courses
operator|.
name|remove
argument_list|(
name|correctedOffering
argument_list|)
expr_stmt|;
name|event
operator|.
name|addCourseName
argument_list|(
name|correctedOffering
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|addCourseTitle
argument_list|(
name|correctedOffering
operator|.
name|getTitle
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|correctedOffering
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setInstruction
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getDesc
argument_list|()
operator|.
name|length
argument_list|()
operator|<=
literal|20
condition|?
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getDesc
argument_list|()
else|:
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setInstructionType
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getItype
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setSectionNumber
argument_list|(
name|clazz
operator|.
name|getSectionNumberString
argument_list|(
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|correctedOffering
argument_list|)
operator|==
literal|null
condition|)
block|{
name|event
operator|.
name|setName
argument_list|(
name|clazz
operator|.
name|getClassLabel
argument_list|(
name|correctedOffering
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|event
operator|.
name|addExternalId
argument_list|(
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|correctedOffering
argument_list|)
argument_list|)
expr_stmt|;
name|event
operator|.
name|setName
argument_list|(
name|correctedOffering
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|correctedOffering
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CourseOffering
name|co
range|:
name|courses
control|)
block|{
name|event
operator|.
name|addCourseName
argument_list|(
name|co
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|addCourseTitle
argument_list|(
name|co
operator|.
name|getTitle
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|co
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|co
argument_list|)
operator|!=
literal|null
condition|)
name|event
operator|.
name|addExternalId
argument_list|(
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|co
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|note
operator|=
name|correctedOffering
operator|.
name|getScheduleBookNote
argument_list|()
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getSchedulePrintNote
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|clazz
operator|.
name|getSchedulePrintNote
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|note
operator|=
operator|(
name|note
operator|==
literal|null
operator|||
name|note
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
name|note
operator|+
literal|"\n"
operator|)
operator|+
name|clazz
operator|.
name|getSchedulePrintNote
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|Event
operator|.
name|sEventTypeFinalExam
operator|==
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventType
argument_list|()
operator|||
name|Event
operator|.
name|sEventTypeMidtermExam
operator|==
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventType
argument_list|()
condition|)
block|{
name|ExamEvent
name|xe
init|=
name|ExamEventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|event
operator|.
name|setEnrollment
argument_list|(
name|xe
operator|.
name|getExam
argument_list|()
operator|.
name|countStudents
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|DepartmentalInstructor
name|i
range|:
name|xe
operator|.
name|getExam
argument_list|()
operator|.
name|getInstructors
argument_list|()
control|)
block|{
name|ContactInterface
name|instructor
init|=
operator|new
name|ContactInterface
argument_list|()
decl_stmt|;
name|instructor
operator|.
name|setFirstName
argument_list|(
name|i
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setMiddleName
argument_list|(
name|i
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setLastName
argument_list|(
name|i
operator|.
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setEmail
argument_list|(
name|i
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|addInstructor
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ExamOwner
name|owner
range|:
operator|new
name|TreeSet
argument_list|<
name|ExamOwner
argument_list|>
argument_list|(
name|xe
operator|.
name|getExam
argument_list|()
operator|.
name|getOwners
argument_list|()
argument_list|)
control|)
block|{
comment|/* courses: */
for|for
control|(
name|CourseOffering
name|course
range|:
name|owner
operator|.
name|getCourse
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseOfferings
argument_list|()
control|)
block|{
comment|/* 								    		switch (request.getResourceType()) { 								    		case SUBJECT: 								    			if (!course.getSubjectArea().getUniqueId().equals(request.getResourceId())) continue courses; 								    			break; 								    		case COURSE: 								    			if (!course.getUniqueId().equals(request.getResourceId())) continue courses; 								    			break; 								    		case DEPARTMENT: 								    			if (department.isExternalManager()) break courses; 								    			if (!course.getSubjectArea().getDepartment().getUniqueId().equals(request.getResourceId())) continue courses; 								    			break; 								    		case CURRICULUM: 								    			if (!curriculumCourses.contains(course.getUniqueId())) continue courses; 								    			break; 								    		} 								    		*/
name|String
name|courseName
init|=
name|owner
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
decl_stmt|;
name|String
name|label
init|=
name|owner
operator|.
name|getLabel
argument_list|()
decl_stmt|;
if|if
condition|(
name|label
operator|.
name|startsWith
argument_list|(
name|courseName
argument_list|)
condition|)
block|{
name|label
operator|=
name|label
operator|.
name|substring
argument_list|(
name|courseName
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|event
operator|.
name|addCourseName
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|addCourseTitle
argument_list|(
name|course
operator|.
name|getTitle
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|course
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|addExternalId
argument_list|(
name|label
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|event
operator|.
name|hasCourseNames
argument_list|()
operator|&&
name|event
operator|.
name|getCourseNames
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
operator|(
name|request
operator|.
name|getResourceType
argument_list|()
operator|==
name|ResourceType
operator|.
name|PERSON
operator|||
name|request
operator|.
name|getResourceType
argument_list|()
operator|==
name|ResourceType
operator|.
name|CURRICULUM
operator|)
condition|)
name|event
operator|.
name|setName
argument_list|(
operator|(
name|event
operator|.
name|getCourseNames
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|+
literal|" "
operator|+
name|event
operator|.
name|getExternalIds
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|Event
operator|.
name|sEventTypeCourse
operator|==
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventType
argument_list|()
condition|)
block|{
name|CourseEvent
name|ce
init|=
name|CourseEventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|event
operator|.
name|setRequiredAttendance
argument_list|(
name|ce
operator|.
name|isReqAttendance
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|enrl
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RelatedCourseInfo
name|owner
range|:
name|ce
operator|.
name|getRelatedCourses
argument_list|()
control|)
block|{
name|enrl
operator|+=
name|owner
operator|.
name|countStudents
argument_list|()
expr_stmt|;
comment|/* courses: */
for|for
control|(
name|CourseOffering
name|course
range|:
name|owner
operator|.
name|getCourse
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseOfferings
argument_list|()
control|)
block|{
comment|/* 								    		switch (request.getResourceType()) { 								    		case SUBJECT: 								    			if (!course.getSubjectArea().getUniqueId().equals(request.getResourceId())) continue courses; 								    			break; 								    		case COURSE: 								    			if (!course.getUniqueId().equals(request.getResourceId())) continue courses; 								    			break; 								    		case DEPARTMENT: 								    			if (department.isExternalManager()) break courses; 								    			if (!course.getSubjectArea().getDepartment().getUniqueId().equals(request.getResourceId())) continue courses; 								    			break; 								    		case CURRICULUM: 								    			if (!curriculumCourses.contains(course.getUniqueId())) continue courses; 								    			break; 								    		} 								    		*/
name|String
name|courseName
init|=
name|owner
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
decl_stmt|;
name|String
name|label
init|=
name|owner
operator|.
name|getLabel
argument_list|()
decl_stmt|;
if|if
condition|(
name|label
operator|.
name|startsWith
argument_list|(
name|courseName
argument_list|)
condition|)
block|{
name|label
operator|=
name|label
operator|.
name|substring
argument_list|(
name|courseName
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|event
operator|.
name|addCourseName
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|addCourseTitle
argument_list|(
name|course
operator|.
name|getTitle
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|course
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|addExternalId
argument_list|(
name|label
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|event
operator|.
name|setEnrollment
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|note
operator|!=
literal|null
operator|&&
operator|!
name|note
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|NoteInterface
name|n
init|=
operator|new
name|NoteInterface
argument_list|()
decl_stmt|;
name|n
operator|.
name|setNote
argument_list|(
name|note
argument_list|)
expr_stmt|;
name|event
operator|.
name|addNote
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
block|}
name|MeetingInterface
name|meeting
init|=
operator|new
name|MeetingInterface
argument_list|()
decl_stmt|;
name|meeting
operator|.
name|setId
argument_list|(
name|m
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setMeetingDate
argument_list|(
name|m
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setDayOfWeek
argument_list|(
name|Constants
operator|.
name|getDayOfWeek
argument_list|(
name|m
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setStartTime
argument_list|(
name|m
operator|.
name|getStartTime
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setStopTime
argument_list|(
name|m
operator|.
name|getStopTime
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setDayOfYear
argument_list|(
name|CalendarUtils
operator|.
name|date2dayOfYear
argument_list|(
name|session
operator|.
name|getSessionStartYear
argument_list|()
argument_list|,
name|m
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setStartSlot
argument_list|(
name|m
operator|.
name|getStartPeriod
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setEndSlot
argument_list|(
name|m
operator|.
name|getStopPeriod
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setStartOffset
argument_list|(
name|m
operator|.
name|getStartOffset
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|m
operator|.
name|getStartOffset
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setEndOffset
argument_list|(
name|m
operator|.
name|getStopOffset
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|m
operator|.
name|getStopOffset
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setPast
argument_list|(
name|context
operator|.
name|isPastOrOutside
argument_list|(
name|m
operator|.
name|getStartTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setApprovalDate
argument_list|(
name|m
operator|.
name|getApprovalDate
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setApprovalStatus
argument_list|(
name|m
operator|.
name|getApprovalStatus
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ResourceInterface
name|location
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|location
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|ROOM
argument_list|)
expr_stmt|;
name|location
operator|.
name|setId
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setName
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setSize
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setRoomType
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getRoomTypeLabel
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setBreakTime
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getEffectiveBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setMessage
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getEventMessage
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setLocation
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
name|event
operator|.
name|addMeeting
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
name|parent
operator|.
name|addConflict
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Location
argument_list|>
argument_list|>
name|entry
range|:
name|unavailableLocations
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|EventInterface
name|parent
init|=
name|events
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|Location
name|location
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|EventInterface
name|unavailability
init|=
name|generateUnavailabilityEvent
argument_list|(
name|location
argument_list|,
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|unavailability
operator|!=
literal|null
condition|)
name|parent
operator|.
name|addConflict
argument_list|(
name|unavailability
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Retrieve arrange hours classes
if|if
condition|(
operator|(
operator|!
name|request
operator|.
name|getEventFilter
argument_list|()
operator|.
name|hasOptions
argument_list|(
literal|"type"
argument_list|)
operator|||
name|request
operator|.
name|getEventFilter
argument_list|()
operator|.
name|getOptions
argument_list|(
literal|"type"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Class"
argument_list|)
operator|)
operator|&&
operator|!
name|request
operator|.
name|getEventFilter
argument_list|()
operator|.
name|hasOptions
argument_list|(
literal|"from"
argument_list|)
operator|&&
operator|!
name|request
operator|.
name|getEventFilter
argument_list|()
operator|.
name|hasOptions
argument_list|(
literal|"to"
argument_list|)
operator|&&
operator|!
name|request
operator|.
name|getEventFilter
argument_list|()
operator|.
name|hasOptions
argument_list|(
literal|"requested"
argument_list|)
operator|&&
operator|!
name|request
operator|.
name|getEventFilter
argument_list|()
operator|.
name|hasOptions
argument_list|(
literal|"day"
argument_list|)
operator|&&
operator|!
name|request
operator|.
name|getEventFilter
argument_list|()
operator|.
name|hasOptions
argument_list|(
literal|"after"
argument_list|)
operator|&&
operator|!
name|request
operator|.
name|getEventFilter
argument_list|()
operator|.
name|hasOptions
argument_list|(
literal|"before"
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|Class_
argument_list|>
name|arrageHourClasses
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|request
operator|.
name|getResourceType
argument_list|()
condition|)
block|{
case|case
name|SUBJECT
case|:
case|case
name|COURSE
case|:
name|arrageHourClasses
operator|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select c from Class_ c inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co where c.committedAssignment is null and "
operator|+
operator|(
name|request
operator|.
name|getResourceType
argument_list|()
operator|==
name|ResourceType
operator|.
name|SUBJECT
condition|?
literal|"co.subjectArea.uniqueId = :resourceId"
else|:
literal|"co.uniqueId = :resourceId"
operator|)
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
break|break;
case|case
name|DEPARTMENT
case|:
name|arrageHourClasses
operator|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select c from Class_ c inner join c.managingDept d where c.committedAssignment is null and d.uniqueId = :resourceId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
break|break;
case|case
name|CURRICULUM
case|:
name|arrageHourClasses
operator|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select c from Class_ c inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co, CurriculumCourse cc "
operator|+
literal|"where c.committedAssignment is null and co = cc.course and (cc.classification.curriculum.uniqueId = :resourceId or cc.classification.uniqueId = :resourceId)"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"resourceId"
argument_list|,
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
break|break;
case|case
name|PERSON
case|:
name|arrageHourClasses
operator|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select c from StudentClassEnrollment e inner join e.clazz c where c.committedAssignment is null and e.student.session.uniqueId = :sessionId and e.student.externalUniqueId = :externalId"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"externalId"
argument_list|,
name|request
operator|.
name|getResourceExternalId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
name|arrageHourClasses
operator|.
name|addAll
argument_list|(
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select c from ClassInstructor ci inner join ci.classInstructing c where c.committedAssignment is null and ci.instructor.department.session.uniqueId = :sessionId and  ci.instructor.externalUniqueId = :externalId"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"externalId"
argument_list|,
name|request
operator|.
name|getResourceExternalId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|arrageHourClasses
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Class_
name|clazz
range|:
name|arrageHourClasses
control|)
block|{
name|EventInterface
name|event
init|=
operator|new
name|EventInterface
argument_list|()
decl_stmt|;
name|event
operator|.
name|setId
argument_list|(
operator|-
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setName
argument_list|(
name|clazz
operator|.
name|getClassLabel
argument_list|(
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|event
operator|.
name|setType
argument_list|(
name|EventInterface
operator|.
name|EventType
operator|.
name|Class
argument_list|)
expr_stmt|;
name|event
operator|.
name|setCanView
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|event
operator|.
name|setMaxCapacity
argument_list|(
name|clazz
operator|.
name|getExpectedCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setEnrollment
argument_list|(
name|clazz
operator|.
name|getEnrollment
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getDisplayInstructor
argument_list|()
condition|)
block|{
for|for
control|(
name|ClassInstructor
name|i
range|:
name|clazz
operator|.
name|getClassInstructors
argument_list|()
control|)
block|{
name|ContactInterface
name|instructor
init|=
operator|new
name|ContactInterface
argument_list|()
decl_stmt|;
name|instructor
operator|.
name|setFirstName
argument_list|(
name|i
operator|.
name|getInstructor
argument_list|()
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setMiddleName
argument_list|(
name|i
operator|.
name|getInstructor
argument_list|()
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setLastName
argument_list|(
name|i
operator|.
name|getInstructor
argument_list|()
operator|.
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setEmail
argument_list|(
name|i
operator|.
name|getInstructor
argument_list|()
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|addInstructor
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
block|}
block|}
name|CourseOffering
name|correctedOffering
init|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CourseOffering
argument_list|>
name|courses
init|=
operator|new
name|ArrayList
argument_list|<
name|CourseOffering
argument_list|>
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseOfferings
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|request
operator|.
name|getResourceType
argument_list|()
condition|)
block|{
case|case
name|CURRICULUM
case|:
case|case
name|PERSON
case|:
for|for
control|(
name|Iterator
argument_list|<
name|CourseOffering
argument_list|>
name|i
init|=
name|courses
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOffering
name|co
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|curriculumCourses
operator|.
name|contains
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|curriculumCourses
operator|.
name|contains
argument_list|(
name|correctedOffering
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
name|correctedOffering
operator|=
name|co
expr_stmt|;
block|}
else|else
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
block|}
name|courses
operator|.
name|remove
argument_list|(
name|correctedOffering
argument_list|)
expr_stmt|;
name|event
operator|.
name|addCourseName
argument_list|(
name|correctedOffering
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|addCourseTitle
argument_list|(
name|correctedOffering
operator|.
name|getTitle
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|correctedOffering
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setInstruction
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getDesc
argument_list|()
operator|.
name|length
argument_list|()
operator|<=
literal|20
condition|?
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getDesc
argument_list|()
else|:
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setInstructionType
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getItype
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setSectionNumber
argument_list|(
name|clazz
operator|.
name|getSectionNumberString
argument_list|(
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|correctedOffering
argument_list|)
operator|==
literal|null
condition|)
block|{
name|event
operator|.
name|setName
argument_list|(
name|clazz
operator|.
name|getClassLabel
argument_list|(
name|correctedOffering
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|event
operator|.
name|addExternalId
argument_list|(
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|correctedOffering
argument_list|)
argument_list|)
expr_stmt|;
name|event
operator|.
name|setName
argument_list|(
name|correctedOffering
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|correctedOffering
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CourseOffering
name|co
range|:
name|courses
control|)
block|{
name|event
operator|.
name|addCourseName
argument_list|(
name|co
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|addCourseTitle
argument_list|(
name|co
operator|.
name|getTitle
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|co
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|co
argument_list|)
operator|!=
literal|null
condition|)
name|event
operator|.
name|addExternalId
argument_list|(
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|co
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|RoomPref
name|rp
range|:
operator|(
name|Set
argument_list|<
name|RoomPref
argument_list|>
operator|)
name|clazz
operator|.
name|effectivePreferences
argument_list|(
name|RoomPref
operator|.
name|class
argument_list|)
control|)
block|{
if|if
condition|(
name|request
operator|.
name|getEventFilter
argument_list|()
operator|.
name|hasOptions
argument_list|(
literal|"room"
argument_list|)
operator|&&
operator|!
name|request
operator|.
name|getEventFilter
argument_list|()
operator|.
name|getOptions
argument_list|(
literal|"room"
argument_list|)
operator|.
name|contains
argument_list|(
name|rp
operator|.
name|getRoom
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
continue|continue;
name|MeetingInterface
name|meeting
init|=
operator|new
name|MeetingInterface
argument_list|()
decl_stmt|;
name|meeting
operator|.
name|setPast
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ResourceInterface
name|location
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|location
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|ROOM
argument_list|)
expr_stmt|;
name|location
operator|.
name|setId
argument_list|(
name|rp
operator|.
name|getRoom
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setName
argument_list|(
name|rp
operator|.
name|getRoom
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setSize
argument_list|(
name|rp
operator|.
name|getRoom
argument_list|()
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setDistance
argument_list|(
name|distances
operator|.
name|get
argument_list|(
name|rp
operator|.
name|getRoom
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|location
operator|.
name|setRoomType
argument_list|(
name|rp
operator|.
name|getRoom
argument_list|()
operator|.
name|getRoomTypeLabel
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setBreakTime
argument_list|(
name|rp
operator|.
name|getRoom
argument_list|()
operator|.
name|getEffectiveBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setMessage
argument_list|(
name|rp
operator|.
name|getRoom
argument_list|()
operator|.
name|getEventMessage
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setLocation
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|event
operator|.
name|addMeeting
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|event
operator|.
name|hasMeetings
argument_list|()
condition|)
block|{
if|if
condition|(
name|request
operator|.
name|getEventFilter
argument_list|()
operator|.
name|hasOptions
argument_list|(
literal|"room"
argument_list|)
condition|)
continue|continue;
name|MeetingInterface
name|meeting
init|=
operator|new
name|MeetingInterface
argument_list|()
decl_stmt|;
name|meeting
operator|.
name|setPast
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|event
operator|.
name|addMeeting
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|getEventFilter
argument_list|()
operator|.
name|hasText
argument_list|()
operator|&&
operator|!
name|event
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|request
operator|.
name|getEventFilter
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
condition|)
continue|continue;
name|ret
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Retrieve room unavailabilities
if|if
condition|(
name|request
operator|.
name|getResourceType
argument_list|()
operator|==
name|ResourceType
operator|.
name|ROOM
condition|)
block|{
for|for
control|(
name|Location
name|location
range|:
operator|new
name|RoomFilterBackend
argument_list|()
operator|.
name|locations
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|request
operator|.
name|getRoomFilter
argument_list|()
argument_list|,
literal|1000
argument_list|,
name|distances
argument_list|)
control|)
block|{
name|EventInterface
name|unavailability
init|=
name|generateUnavailabilityEvent
argument_list|(
name|location
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|unavailability
operator|!=
literal|null
condition|)
name|ret
operator|.
name|add
argument_list|(
name|unavailability
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|EventException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Unable to find events for "
operator|+
name|request
operator|.
name|getResourceType
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|" "
operator|+
name|request
operator|.
name|getResourceId
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EventException
argument_list|(
literal|"Unable to find events for "
operator|+
name|request
operator|.
name|getResourceType
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|" "
operator|+
name|request
operator|.
name|getResourceId
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|EventInterface
name|generateUnavailabilityEvent
parameter_list|(
name|Location
name|location
parameter_list|,
name|EventInterface
name|parent
parameter_list|)
block|{
name|TreeSet
argument_list|<
name|MeetingInterface
argument_list|>
name|meetings
init|=
name|generateUnavailabilityMeetings
argument_list|(
name|location
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|meetings
operator|==
literal|null
operator|||
name|meetings
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
name|EventInterface
name|event
init|=
operator|new
name|EventInterface
argument_list|()
decl_stmt|;
name|event
operator|.
name|setId
argument_list|(
operator|-
name|location
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setName
argument_list|(
name|MESSAGES
operator|.
name|unavailableEventDefaultName
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setType
argument_list|(
name|EventInterface
operator|.
name|EventType
operator|.
name|Unavailabile
argument_list|)
expr_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
name|event
operator|.
name|setMeetings
argument_list|(
name|meetings
argument_list|)
expr_stmt|;
else|else
for|for
control|(
name|MeetingInterface
name|m
range|:
name|meetings
control|)
if|if
condition|(
name|parent
operator|.
name|inConflict
argument_list|(
name|m
argument_list|)
condition|)
name|event
operator|.
name|addMeeting
argument_list|(
name|m
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|.
name|getNote
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|location
operator|.
name|getNote
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|NoteInterface
name|n
init|=
operator|new
name|NoteInterface
argument_list|()
decl_stmt|;
name|n
operator|.
name|setNote
argument_list|(
name|location
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|addNote
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
return|return
name|event
return|;
block|}
specifier|public
specifier|static
name|TreeSet
argument_list|<
name|MeetingInterface
argument_list|>
name|generateUnavailabilityMeetings
parameter_list|(
name|Location
name|location
parameter_list|,
name|boolean
name|conflict
parameter_list|)
block|{
if|if
condition|(
name|location
operator|.
name|getEventAvailability
argument_list|()
operator|==
literal|null
operator|||
name|location
operator|.
name|getEventAvailability
argument_list|()
operator|.
name|length
argument_list|()
operator|!=
name|Constants
operator|.
name|SLOTS_PER_DAY
operator|*
name|Constants
operator|.
name|DAY_CODES
operator|.
name|length
condition|)
return|return
literal|null
return|;
name|TreeSet
argument_list|<
name|MeetingInterface
argument_list|>
name|ret
init|=
operator|new
name|TreeSet
argument_list|<
name|MeetingInterface
argument_list|>
argument_list|()
decl_stmt|;
name|ResourceInterface
name|resource
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|resource
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|ROOM
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setId
argument_list|(
name|location
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setName
argument_list|(
name|location
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setSize
argument_list|(
name|location
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setRoomType
argument_list|(
name|location
operator|.
name|getRoomTypeLabel
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setBreakTime
argument_list|(
name|location
operator|.
name|getEffectiveBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setMessage
argument_list|(
name|location
operator|.
name|getEventMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Calendar
name|calendar
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|day
init|=
literal|0
init|;
name|day
operator|<
name|Constants
operator|.
name|DAY_CODES
operator|.
name|length
condition|;
name|day
operator|++
control|)
for|for
control|(
name|int
name|startTime
init|=
literal|0
init|;
name|startTime
operator|<
name|Constants
operator|.
name|SLOTS_PER_DAY
condition|;
control|)
block|{
if|if
condition|(
name|location
operator|.
name|getEventAvailability
argument_list|()
operator|.
name|charAt
argument_list|(
name|day
operator|*
name|Constants
operator|.
name|SLOTS_PER_DAY
operator|+
name|startTime
argument_list|)
operator|!=
literal|'1'
condition|)
block|{
name|startTime
operator|++
expr_stmt|;
continue|continue;
block|}
name|int
name|endTime
init|=
name|startTime
operator|+
literal|1
decl_stmt|;
while|while
condition|(
name|endTime
operator|<
name|Constants
operator|.
name|SLOTS_PER_DAY
operator|&&
name|location
operator|.
name|getEventAvailability
argument_list|()
operator|.
name|charAt
argument_list|(
name|day
operator|*
name|Constants
operator|.
name|SLOTS_PER_DAY
operator|+
name|endTime
argument_list|)
operator|==
literal|'1'
condition|)
name|endTime
operator|++
expr_stmt|;
name|calendar
operator|.
name|setTime
argument_list|(
name|location
operator|.
name|getSession
argument_list|()
operator|.
name|getEventBeginDate
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|dayOfYear
init|=
name|CalendarUtils
operator|.
name|date2dayOfYear
argument_list|(
name|location
operator|.
name|getSession
argument_list|()
operator|.
name|getSessionStartYear
argument_list|()
argument_list|,
name|calendar
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
do|do
block|{
name|int
name|dayOfWeek
init|=
operator|-
literal|1
decl_stmt|;
switch|switch
condition|(
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
name|dayOfWeek
operator|=
name|Constants
operator|.
name|DAY_MON
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
name|dayOfWeek
operator|=
name|Constants
operator|.
name|DAY_TUE
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
name|dayOfWeek
operator|=
name|Constants
operator|.
name|DAY_WED
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
name|dayOfWeek
operator|=
name|Constants
operator|.
name|DAY_THU
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
name|dayOfWeek
operator|=
name|Constants
operator|.
name|DAY_FRI
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
name|dayOfWeek
operator|=
name|Constants
operator|.
name|DAY_SAT
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
name|dayOfWeek
operator|=
name|Constants
operator|.
name|DAY_SUN
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|day
operator|==
name|dayOfWeek
condition|)
block|{
name|MeetingInterface
name|m
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|conflict
condition|)
block|{
name|MeetingConflictInterface
name|c
init|=
operator|new
name|MeetingConflictInterface
argument_list|()
decl_stmt|;
name|c
operator|.
name|setName
argument_list|(
name|MESSAGES
operator|.
name|unavailableEventDefaultName
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setType
argument_list|(
name|EventInterface
operator|.
name|EventType
operator|.
name|Unavailabile
argument_list|)
expr_stmt|;
name|m
operator|=
name|c
expr_stmt|;
block|}
else|else
block|{
name|m
operator|=
operator|new
name|MeetingInterface
argument_list|()
expr_stmt|;
block|}
name|m
operator|.
name|setStartSlot
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
name|m
operator|.
name|setEndSlot
argument_list|(
name|endTime
argument_list|)
expr_stmt|;
name|m
operator|.
name|setDayOfWeek
argument_list|(
name|dayOfWeek
argument_list|)
expr_stmt|;
name|m
operator|.
name|setMeetingDate
argument_list|(
name|calendar
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setDayOfYear
argument_list|(
name|dayOfYear
argument_list|)
expr_stmt|;
name|m
operator|.
name|setLocation
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
name|calendar
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|dayOfYear
operator|++
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|calendar
operator|.
name|getTime
argument_list|()
operator|.
name|after
argument_list|(
name|location
operator|.
name|getSession
argument_list|()
operator|.
name|getEventEndDate
argument_list|()
argument_list|)
condition|)
do|;
name|startTime
operator|=
name|endTime
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

