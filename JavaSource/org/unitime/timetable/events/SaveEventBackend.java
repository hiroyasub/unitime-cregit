begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|events
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|internet
operator|.
name|AddressException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|internet
operator|.
name|InternetAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|fileupload
operator|.
name|FileItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|UploadServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|ApprovalStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|MeetingConflictInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|NoteInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|RelatedObjectInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|ContactInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|EventServiceProviderInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|MeetingInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|ResourceInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|ResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|SaveEventRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|SaveOrApproveEventRpcResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|EventContact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|EventNote
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|EventServiceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Meeting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Meeting
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RelatedCourseInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SpecialEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|UnavailableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|Class_DAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|EventDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|EventServiceProviderDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstrOfferingConfigDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstructionalOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|LocationDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SponsoringOrganizationDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|CalendarUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|GwtRpcImplements
argument_list|(
name|SaveEventRpcRequest
operator|.
name|class
argument_list|)
specifier|public
class|class
name|SaveEventBackend
extends|extends
name|EventAction
argument_list|<
name|SaveEventRpcRequest
argument_list|,
name|SaveOrApproveEventRpcResponse
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|SaveOrApproveEventRpcResponse
name|execute
parameter_list|(
name|SaveEventRpcRequest
name|request
parameter_list|,
name|EventContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|hasContact
argument_list|()
operator|&&
operator|(
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|getContact
argument_list|()
operator|.
name|getExternalId
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|getContact
argument_list|()
operator|.
name|getExternalId
argument_list|()
operator|.
name|equals
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalUserId
argument_list|()
argument_list|)
operator|)
condition|)
block|{
switch|switch
condition|(
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|Special
case|:
case|case
name|Course
case|:
case|case
name|Unavailabile
case|:
name|context
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|EventLookupContact
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// new even
switch|switch
condition|(
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|Special
case|:
name|context
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|EventAddSpecial
argument_list|)
expr_stmt|;
break|break;
case|case
name|Course
case|:
name|context
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|EventAddCourseRelated
argument_list|)
expr_stmt|;
break|break;
case|case
name|Unavailabile
case|:
name|context
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|EventAddUnavailable
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
name|context
operator|.
name|getException
argument_list|()
throw|;
block|}
block|}
else|else
block|{
comment|// existing event
name|context
operator|.
name|checkPermission
argument_list|(
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
literal|"Event"
argument_list|,
name|Right
operator|.
name|EventEdit
argument_list|)
expr_stmt|;
block|}
comment|// Check main contact email
if|if
condition|(
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|hasContact
argument_list|()
operator|&&
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|getContact
argument_list|()
operator|.
name|hasEmail
argument_list|()
condition|)
block|{
try|try
block|{
operator|new
name|InternetAddress
argument_list|(
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|getContact
argument_list|()
operator|.
name|getEmail
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AddressException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|badEmailAddress
argument_list|(
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|getContact
argument_list|()
operator|.
name|getEmail
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|// Check additional emails
if|if
condition|(
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|hasEmail
argument_list|()
condition|)
block|{
name|String
name|suffix
init|=
name|ApplicationProperty
operator|.
name|EmailDefaultAddressSuffix
operator|.
name|value
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|address
range|:
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|getEmail
argument_list|()
operator|.
name|split
argument_list|(
literal|"[\n,]"
argument_list|)
control|)
block|{
name|String
name|email
init|=
name|address
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|email
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|suffix
operator|!=
literal|null
operator|&&
name|email
operator|.
name|indexOf
argument_list|(
literal|'@'
argument_list|)
operator|<
literal|0
condition|)
name|email
operator|+=
name|suffix
expr_stmt|;
try|try
block|{
operator|new
name|InternetAddress
argument_list|(
name|email
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AddressException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|badEmailAddress
argument_list|(
name|address
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Transaction
name|tx
init|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
try|try
block|{
name|Session
name|session
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|Date
name|now
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|Event
name|event
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|getId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|event
operator|=
name|EventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|Special
case|:
name|event
operator|=
operator|new
name|SpecialEvent
argument_list|()
expr_stmt|;
break|break;
case|case
name|Course
case|:
name|event
operator|=
operator|new
name|CourseEvent
argument_list|()
expr_stmt|;
break|break;
case|case
name|Unavailabile
case|:
name|event
operator|=
operator|new
name|UnavailableEvent
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|failedSaveEventWrongType
argument_list|(
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|getType
argument_list|()
operator|.
name|getName
argument_list|(
name|CONSTANTS
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|SaveOrApproveEventRpcResponse
name|response
init|=
operator|new
name|SaveOrApproveEventRpcResponse
argument_list|()
decl_stmt|;
name|event
operator|.
name|setEventName
argument_list|(
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|getEventName
argument_list|()
operator|==
literal|null
operator|||
name|event
operator|.
name|getEventName
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|EventType
operator|.
name|Unavailabile
condition|)
name|event
operator|.
name|setEventName
argument_list|(
name|MESSAGES
operator|.
name|unavailableEventDefaultName
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setEmail
argument_list|(
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|EventSetExpiration
argument_list|)
operator|||
name|event
operator|.
name|getExpirationDate
argument_list|()
operator|!=
literal|null
condition|)
name|event
operator|.
name|setExpirationDate
argument_list|(
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|getExpirationDate
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setSponsoringOrganization
argument_list|(
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|hasSponsor
argument_list|()
condition|?
name|SponsoringOrganizationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|getSponsor
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|instanceof
name|UnavailableEvent
condition|)
block|{
block|}
if|else if
condition|(
name|event
operator|instanceof
name|SpecialEvent
condition|)
block|{
name|event
operator|.
name|setMinCapacity
argument_list|(
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|getMaxCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setMaxCapacity
argument_list|(
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|getMaxCapacity
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|getAdditionalContacts
argument_list|()
operator|==
literal|null
condition|)
block|{
name|event
operator|.
name|setAdditionalContacts
argument_list|(
operator|new
name|HashSet
argument_list|<
name|EventContact
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|EventLookupContact
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|EventContact
argument_list|>
name|existingContacts
init|=
operator|new
name|HashSet
argument_list|<
name|EventContact
argument_list|>
argument_list|(
name|event
operator|.
name|getAdditionalContacts
argument_list|()
argument_list|)
decl_stmt|;
name|event
operator|.
name|getAdditionalContacts
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|hasAdditionalContacts
argument_list|()
condition|)
for|for
control|(
name|ContactInterface
name|c
range|:
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|getAdditionalContacts
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getExternalId
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|EventContact
name|contact
init|=
literal|null
decl_stmt|;
for|for
control|(
name|EventContact
name|x
range|:
name|existingContacts
control|)
if|if
condition|(
name|c
operator|.
name|getExternalId
argument_list|()
operator|.
name|equals
argument_list|(
name|x
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|contact
operator|=
name|x
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|contact
operator|==
literal|null
condition|)
block|{
name|contact
operator|=
operator|(
name|EventContact
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from EventContact where externalUniqueId = :externalId"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"externalId"
argument_list|,
name|c
operator|.
name|getExternalId
argument_list|()
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|contact
operator|==
literal|null
condition|)
block|{
name|contact
operator|=
operator|new
name|EventContact
argument_list|()
expr_stmt|;
name|contact
operator|.
name|setExternalUniqueId
argument_list|(
name|c
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setFirstName
argument_list|(
name|c
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setMiddleName
argument_list|(
name|c
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setLastName
argument_list|(
name|c
operator|.
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setAcademicTitle
argument_list|(
name|c
operator|.
name|getAcademicTitle
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setEmailAddress
argument_list|(
name|c
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setPhone
argument_list|(
name|c
operator|.
name|getPhone
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|contact
argument_list|)
expr_stmt|;
block|}
name|event
operator|.
name|getAdditionalContacts
argument_list|()
operator|.
name|add
argument_list|(
name|contact
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|event
operator|.
name|getRequestedServices
argument_list|()
operator|==
literal|null
condition|)
block|{
name|event
operator|.
name|setRequestedServices
argument_list|(
operator|new
name|HashSet
argument_list|<
name|EventServiceProvider
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|EventServiceProvider
argument_list|>
name|services
init|=
operator|new
name|HashSet
argument_list|<
name|EventServiceProvider
argument_list|>
argument_list|(
name|event
operator|.
name|getRequestedServices
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|hasRequestedServices
argument_list|()
condition|)
block|{
name|providers
label|:
for|for
control|(
name|EventServiceProviderInterface
name|provider
range|:
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|getRequestedServices
argument_list|()
control|)
block|{
if|if
condition|(
name|provider
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|Iterator
argument_list|<
name|EventServiceProvider
argument_list|>
name|i
init|=
name|services
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|EventServiceProvider
name|p
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|provider
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
continue|continue
name|providers
continue|;
block|}
block|}
name|EventServiceProvider
name|p
init|=
name|EventServiceProviderDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|provider
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|event
operator|.
name|getRequestedServices
argument_list|()
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|response
operator|.
name|addService
argument_list|(
name|provider
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|EventServiceProvider
name|p
range|:
name|services
control|)
block|{
name|EventServiceProviderInterface
name|provider
init|=
operator|new
name|EventServiceProviderInterface
argument_list|()
decl_stmt|;
name|provider
operator|.
name|setId
argument_list|(
name|p
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|provider
operator|.
name|setReference
argument_list|(
name|p
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
name|provider
operator|.
name|setLabel
argument_list|(
name|p
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|provider
operator|.
name|setMessage
argument_list|(
name|p
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|provider
operator|.
name|setEmail
argument_list|(
name|p
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|removeService
argument_list|(
name|provider
argument_list|)
expr_stmt|;
name|event
operator|.
name|getRequestedServices
argument_list|()
operator|.
name|remove
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|EventContact
name|main
init|=
name|event
operator|.
name|getMainContact
argument_list|()
decl_stmt|;
if|if
condition|(
name|main
operator|==
literal|null
operator|||
name|main
operator|.
name|getExternalUniqueId
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|main
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|getContact
argument_list|()
operator|.
name|getExternalId
argument_list|()
argument_list|)
condition|)
block|{
name|main
operator|=
operator|(
name|EventContact
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from EventContact where externalUniqueId = :externalId"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"externalId"
argument_list|,
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|getContact
argument_list|()
operator|.
name|getExternalId
argument_list|()
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
expr_stmt|;
if|if
condition|(
name|main
operator|==
literal|null
condition|)
block|{
name|main
operator|=
operator|new
name|EventContact
argument_list|()
expr_stmt|;
name|main
operator|.
name|setExternalUniqueId
argument_list|(
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|getContact
argument_list|()
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|main
operator|.
name|setFirstName
argument_list|(
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|getContact
argument_list|()
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
name|main
operator|.
name|setMiddleName
argument_list|(
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|getContact
argument_list|()
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
name|main
operator|.
name|setLastName
argument_list|(
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|getContact
argument_list|()
operator|.
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
name|main
operator|.
name|setAcademicTitle
argument_list|(
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|getContact
argument_list|()
operator|.
name|getAcademicTitle
argument_list|()
argument_list|)
expr_stmt|;
name|main
operator|.
name|setEmailAddress
argument_list|(
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|getContact
argument_list|()
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
name|main
operator|.
name|setPhone
argument_list|(
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|getContact
argument_list|()
operator|.
name|getPhone
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|main
argument_list|)
expr_stmt|;
name|event
operator|.
name|setMainContact
argument_list|(
name|main
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|getNotes
argument_list|()
operator|==
literal|null
condition|)
name|event
operator|.
name|setNotes
argument_list|(
operator|new
name|HashSet
argument_list|<
name|EventNote
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|getMeetings
argument_list|()
operator|==
literal|null
condition|)
name|event
operator|.
name|setMeetings
argument_list|(
operator|new
name|HashSet
argument_list|<
name|Meeting
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Meeting
argument_list|>
name|remove
init|=
operator|new
name|HashSet
argument_list|<
name|Meeting
argument_list|>
argument_list|(
name|event
operator|.
name|getMeetings
argument_list|()
argument_list|)
decl_stmt|;
name|TreeSet
argument_list|<
name|Meeting
argument_list|>
name|createdMeetings
init|=
operator|new
name|TreeSet
argument_list|<
name|Meeting
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Meeting
argument_list|>
name|cancelledMeetings
init|=
operator|new
name|TreeSet
argument_list|<
name|Meeting
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Meeting
argument_list|>
name|updatedMeetings
init|=
operator|new
name|TreeSet
argument_list|<
name|Meeting
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|updateMeetingContacts
init|=
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|EventCanEditMeetingContacts
argument_list|)
decl_stmt|;
for|for
control|(
name|MeetingInterface
name|m
range|:
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|getMeetings
argument_list|()
control|)
block|{
name|Meeting
name|meeting
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|getApprovalStatus
argument_list|()
operator|==
name|ApprovalStatus
operator|.
name|Deleted
condition|)
block|{
if|if
condition|(
operator|!
name|context
operator|.
name|hasPermission
argument_list|(
name|meeting
argument_list|,
name|Right
operator|.
name|EventMeetingDelete
argument_list|)
operator|&&
name|context
operator|.
name|hasPermission
argument_list|(
name|meeting
argument_list|,
name|Right
operator|.
name|EventMeetingCancel
argument_list|)
condition|)
block|{
comment|// Cannot delete, but can cancel --> cancel the meeting instead
name|m
operator|.
name|setApprovalStatus
argument_list|(
name|ApprovalStatus
operator|.
name|Cancelled
argument_list|)
expr_stmt|;
block|}
else|else
block|{
continue|continue;
block|}
block|}
if|if
condition|(
name|m
operator|.
name|getId
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|Iterator
argument_list|<
name|Meeting
argument_list|>
name|i
init|=
name|remove
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Meeting
name|x
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|x
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|meeting
operator|=
name|x
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|meeting
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|m
operator|.
name|getApprovalStatus
argument_list|()
operator|.
name|ordinal
argument_list|()
operator|!=
name|meeting
operator|.
name|getApprovalStatus
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|m
operator|.
name|getApprovalStatus
argument_list|()
condition|)
block|{
case|case
name|Cancelled
case|:
switch|switch
condition|(
name|meeting
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventType
argument_list|()
condition|)
block|{
case|case
name|Event
operator|.
name|sEventTypeFinalExam
case|:
case|case
name|Event
operator|.
name|sEventTypeMidtermExam
case|:
if|if
condition|(
operator|!
name|context
operator|.
name|hasPermission
argument_list|(
name|meeting
argument_list|,
name|Right
operator|.
name|EventMeetingCancelExam
argument_list|)
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|failedApproveEventNoRightsToCancel
argument_list|(
name|toString
argument_list|(
name|meeting
argument_list|)
argument_list|)
argument_list|)
throw|;
break|break;
case|case
name|Event
operator|.
name|sEventTypeClass
case|:
if|if
condition|(
operator|!
name|context
operator|.
name|hasPermission
argument_list|(
name|meeting
argument_list|,
name|Right
operator|.
name|EventMeetingCancelClass
argument_list|)
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|failedApproveEventNoRightsToCancel
argument_list|(
name|toString
argument_list|(
name|meeting
argument_list|)
argument_list|)
argument_list|)
throw|;
break|break;
default|default:
if|if
condition|(
operator|!
name|context
operator|.
name|hasPermission
argument_list|(
name|meeting
argument_list|,
name|Right
operator|.
name|EventMeetingCancel
argument_list|)
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|failedApproveEventNoRightsToCancel
argument_list|(
name|toString
argument_list|(
name|meeting
argument_list|)
argument_list|)
argument_list|)
throw|;
break|break;
block|}
name|meeting
operator|.
name|setStatus
argument_list|(
name|Meeting
operator|.
name|Status
operator|.
name|CANCELLED
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setApprovalDate
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|update
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
name|cancelledMeetings
operator|.
name|add
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
name|response
operator|.
name|addCancelledMeeting
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|m
operator|.
name|getStartOffset
argument_list|()
operator|!=
operator|(
name|meeting
operator|.
name|getStartOffset
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|meeting
operator|.
name|getStartOffset
argument_list|()
operator|)
operator|||
name|m
operator|.
name|getEndOffset
argument_list|()
operator|!=
operator|(
name|meeting
operator|.
name|getStopOffset
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|meeting
operator|.
name|getStopOffset
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|context
operator|.
name|hasPermission
argument_list|(
name|meeting
argument_list|,
name|Right
operator|.
name|EventMeetingEdit
argument_list|)
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|failedSaveEventCanNotEditMeeting
argument_list|(
name|toString
argument_list|(
name|meeting
argument_list|)
argument_list|)
argument_list|)
throw|;
name|meeting
operator|.
name|setStartOffset
argument_list|(
name|m
operator|.
name|getStartOffset
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setStopOffset
argument_list|(
name|m
operator|.
name|getEndOffset
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|update
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
name|response
operator|.
name|addUpdatedMeeting
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|updatedMeetings
operator|.
name|add
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|response
operator|.
name|addCreatedMeeting
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|meeting
operator|=
operator|new
name|Meeting
argument_list|()
expr_stmt|;
name|meeting
operator|.
name|setEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|Location
name|location
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|hasLocation
argument_list|()
condition|)
block|{
if|if
condition|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getId
argument_list|()
operator|!=
literal|null
condition|)
name|location
operator|=
name|LocationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
if|else if
condition|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
name|location
operator|=
name|Location
operator|.
name|findByName
argument_list|(
name|hibSession
argument_list|,
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|location
operator|==
literal|null
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|failedSaveEventNoLocation
argument_list|(
name|toString
argument_list|(
name|m
argument_list|)
argument_list|)
argument_list|)
throw|;
name|meeting
operator|.
name|setLocationPermanentId
argument_list|(
name|location
operator|.
name|getPermanentId
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setStatus
argument_list|(
name|Meeting
operator|.
name|Status
operator|.
name|PENDING
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setApprovalDate
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|EventLocation
argument_list|)
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|failedSaveEventWrongLocation
argument_list|(
name|m
operator|.
name|getLocationName
argument_list|()
argument_list|)
argument_list|)
throw|;
if|if
condition|(
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|EventType
operator|.
name|Unavailabile
operator|&&
operator|!
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|EventLocationUnavailable
argument_list|)
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|failedSaveCannotMakeUnavailable
argument_list|(
name|m
operator|.
name|getLocationName
argument_list|()
argument_list|)
argument_list|)
throw|;
if|if
condition|(
name|m
operator|.
name|getApprovalStatus
argument_list|()
operator|==
name|ApprovalStatus
operator|.
name|Approved
operator|&&
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|EventLocationApprove
argument_list|)
condition|)
block|{
name|meeting
operator|.
name|setStatus
argument_list|(
name|Meeting
operator|.
name|Status
operator|.
name|APPROVED
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setApprovalDate
argument_list|(
name|now
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|location
operator|.
name|getEffectiveEventStatus
argument_list|()
operator|.
name|isAutomaticApproval
argument_list|()
condition|)
block|{
name|meeting
operator|.
name|setStatus
argument_list|(
name|Meeting
operator|.
name|Status
operator|.
name|APPROVED
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setApprovalDate
argument_list|(
name|now
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|.
name|isPastOrOutside
argument_list|(
name|m
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|failedSaveEventPastOrOutside
argument_list|(
name|getDateFormat
argument_list|()
operator|.
name|format
argument_list|(
name|m
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
argument_list|)
argument_list|)
throw|;
if|if
condition|(
operator|!
name|context
operator|.
name|hasPermission
argument_list|(
name|location
argument_list|,
name|Right
operator|.
name|EventLocationOverbook
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|MeetingConflictInterface
argument_list|>
name|conflicts
init|=
name|computeConflicts
argument_list|(
name|hibSession
argument_list|,
name|m
argument_list|,
name|event
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|conflicts
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|failedSaveEventConflict
argument_list|(
name|toString
argument_list|(
name|m
argument_list|)
argument_list|,
name|toString
argument_list|(
name|conflicts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
name|m
operator|.
name|setApprovalDate
argument_list|(
name|meeting
operator|.
name|getApprovalDate
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setApprovalStatus
argument_list|(
name|meeting
operator|.
name|getApprovalStatus
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setStartPeriod
argument_list|(
name|m
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setStopPeriod
argument_list|(
name|m
operator|.
name|getEndSlot
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setStartOffset
argument_list|(
name|m
operator|.
name|getStartOffset
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setStopOffset
argument_list|(
name|m
operator|.
name|getEndOffset
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setClassCanOverride
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setMeetingDate
argument_list|(
name|m
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|getMeetings
argument_list|()
operator|.
name|add
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
name|createdMeetings
operator|.
name|add
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
block|}
comment|// automatic approval
if|if
condition|(
name|meeting
operator|.
name|getApprovalDate
argument_list|()
operator|==
literal|null
condition|)
block|{
switch|switch
condition|(
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|Unavailabile
case|:
case|case
name|Class
case|:
case|case
name|FinalExam
case|:
case|case
name|MidtermExam
case|:
name|meeting
operator|.
name|setStatus
argument_list|(
name|Meeting
operator|.
name|Status
operator|.
name|APPROVED
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setApprovalDate
argument_list|(
name|now
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|updateMeetingContacts
condition|)
block|{
if|if
condition|(
name|meeting
operator|.
name|getMeetingContacts
argument_list|()
operator|==
literal|null
condition|)
name|meeting
operator|.
name|setMeetingContacts
argument_list|(
operator|new
name|HashSet
argument_list|<
name|EventContact
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|EventContact
argument_list|>
name|existingContacts
init|=
operator|new
name|HashSet
argument_list|<
name|EventContact
argument_list|>
argument_list|(
name|meeting
operator|.
name|getMeetingContacts
argument_list|()
argument_list|)
decl_stmt|;
name|meeting
operator|.
name|getMeetingContacts
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|hasMeetingContacts
argument_list|()
condition|)
block|{
for|for
control|(
name|ContactInterface
name|c
range|:
name|m
operator|.
name|getMeetingContacts
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getExternalId
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|EventContact
name|contact
init|=
literal|null
decl_stmt|;
for|for
control|(
name|EventContact
name|x
range|:
name|existingContacts
control|)
if|if
condition|(
name|c
operator|.
name|getExternalId
argument_list|()
operator|.
name|equals
argument_list|(
name|x
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|contact
operator|=
name|x
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|contact
operator|==
literal|null
condition|)
block|{
name|contact
operator|=
operator|(
name|EventContact
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from EventContact where externalUniqueId = :externalId"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"externalId"
argument_list|,
name|c
operator|.
name|getExternalId
argument_list|()
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|contact
operator|==
literal|null
condition|)
block|{
name|contact
operator|=
operator|new
name|EventContact
argument_list|()
expr_stmt|;
name|contact
operator|.
name|setExternalUniqueId
argument_list|(
name|c
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setFirstName
argument_list|(
name|c
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setMiddleName
argument_list|(
name|c
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setLastName
argument_list|(
name|c
operator|.
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setAcademicTitle
argument_list|(
name|c
operator|.
name|getAcademicTitle
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setEmailAddress
argument_list|(
name|c
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setPhone
argument_list|(
name|c
operator|.
name|getPhone
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|contact
argument_list|)
expr_stmt|;
block|}
name|meeting
operator|.
name|getMeetingContacts
argument_list|()
operator|.
name|add
argument_list|(
name|contact
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|remove
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Meeting
argument_list|>
name|i
init|=
name|remove
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Meeting
name|m
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|context
operator|.
name|hasPermission
argument_list|(
name|m
argument_list|,
name|Right
operator|.
name|EventMeetingDelete
argument_list|)
condition|)
block|{
if|if
condition|(
name|m
operator|.
name|getStatus
argument_list|()
operator|==
name|Status
operator|.
name|CANCELLED
operator|||
name|m
operator|.
name|getStatus
argument_list|()
operator|==
name|Status
operator|.
name|REJECTED
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
continue|continue;
block|}
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|failedSaveEventCanNotDeleteMeeting
argument_list|(
name|toString
argument_list|(
name|m
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
name|MeetingInterface
name|meeting
init|=
operator|new
name|MeetingInterface
argument_list|()
decl_stmt|;
name|meeting
operator|.
name|setId
argument_list|(
name|m
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setMeetingDate
argument_list|(
name|m
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setDayOfWeek
argument_list|(
name|Constants
operator|.
name|getDayOfWeek
argument_list|(
name|m
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setStartTime
argument_list|(
name|m
operator|.
name|getStartTime
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setStopTime
argument_list|(
name|m
operator|.
name|getStopTime
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setDayOfYear
argument_list|(
name|CalendarUtils
operator|.
name|date2dayOfYear
argument_list|(
name|session
operator|.
name|getSessionStartYear
argument_list|()
argument_list|,
name|m
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setStartSlot
argument_list|(
name|m
operator|.
name|getStartPeriod
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setEndSlot
argument_list|(
name|m
operator|.
name|getStopPeriod
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setStartOffset
argument_list|(
name|m
operator|.
name|getStartOffset
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|m
operator|.
name|getStartOffset
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setEndOffset
argument_list|(
name|m
operator|.
name|getStopOffset
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|m
operator|.
name|getStopOffset
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setPast
argument_list|(
name|context
operator|.
name|isPastOrOutside
argument_list|(
name|m
operator|.
name|getStartTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setApprovalDate
argument_list|(
name|m
operator|.
name|getApprovalDate
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setApprovalStatus
argument_list|(
name|m
operator|.
name|getApprovalStatus
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ResourceInterface
name|location
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|location
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|ROOM
argument_list|)
expr_stmt|;
name|location
operator|.
name|setId
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setName
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setSize
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setRoomType
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getRoomTypeLabel
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setBreakTime
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getEffectiveBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setMessage
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getEventMessage
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setIgnoreRoomCheck
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|isIgnoreRoomCheck
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setDisplayName
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setLocation
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|addDeletedMeeting
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
block|}
name|event
operator|.
name|getMeetings
argument_list|()
operator|.
name|removeAll
argument_list|(
name|remove
argument_list|)
expr_stmt|;
block|}
name|EventInterface
operator|.
name|DateFormatter
name|df
init|=
operator|new
name|EventInterface
operator|.
name|DateFormatter
argument_list|()
block|{
name|Formats
operator|.
name|Format
argument_list|<
name|Date
argument_list|>
name|dfShort
init|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|DATE_EVENT_SHORT
argument_list|)
decl_stmt|;
name|Formats
operator|.
name|Format
argument_list|<
name|Date
argument_list|>
name|dfLong
init|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|DATE_EVENT_LONG
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|formatFirstDate
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
return|return
name|dfShort
operator|.
name|format
argument_list|(
name|date
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|formatLastDate
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
return|return
name|dfLong
operator|.
name|format
argument_list|(
name|date
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|FileItem
name|attachment
init|=
operator|(
name|FileItem
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
name|UploadServlet
operator|.
name|SESSION_LAST_FILE
argument_list|)
decl_stmt|;
name|boolean
name|attached
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|hasCreatedMeetings
argument_list|()
condition|)
block|{
name|EventNote
name|note
init|=
operator|new
name|EventNote
argument_list|()
decl_stmt|;
name|note
operator|.
name|setEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|note
operator|.
name|setNoteType
argument_list|(
name|event
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|?
name|EventNote
operator|.
name|sEventNoteTypeCreateEvent
else|:
name|EventNote
operator|.
name|sEventNoteTypeAddMeetings
argument_list|)
expr_stmt|;
name|note
operator|.
name|setTimeStamp
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|note
operator|.
name|setUser
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getTrueName
argument_list|()
argument_list|)
expr_stmt|;
name|note
operator|.
name|setUserId
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getTrueExternalUserId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|hasMessage
argument_list|()
condition|)
name|note
operator|.
name|setTextNote
argument_list|(
name|request
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|note
operator|.
name|setMeetings
argument_list|(
name|EventInterface
operator|.
name|toString
argument_list|(
name|response
operator|.
name|getCreatedMeetings
argument_list|()
argument_list|,
name|CONSTANTS
argument_list|,
literal|"\n"
argument_list|,
name|df
argument_list|)
argument_list|)
expr_stmt|;
name|note
operator|.
name|setAffectedMeetings
argument_list|(
name|createdMeetings
argument_list|)
expr_stmt|;
name|event
operator|.
name|getNotes
argument_list|()
operator|.
name|add
argument_list|(
name|note
argument_list|)
expr_stmt|;
name|NoteInterface
name|n
init|=
operator|new
name|NoteInterface
argument_list|()
decl_stmt|;
name|n
operator|.
name|setDate
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|n
operator|.
name|setMeetings
argument_list|(
name|note
operator|.
name|getMeetings
argument_list|()
argument_list|)
expr_stmt|;
name|n
operator|.
name|setUser
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getTrueName
argument_list|()
argument_list|)
expr_stmt|;
name|n
operator|.
name|setType
argument_list|(
name|NoteInterface
operator|.
name|NoteType
operator|.
name|values
argument_list|()
index|[
name|note
operator|.
name|getNoteType
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|n
operator|.
name|setNote
argument_list|(
name|note
operator|.
name|getTextNote
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|attachment
operator|!=
literal|null
condition|)
block|{
name|note
operator|.
name|setAttachedName
argument_list|(
name|attachment
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|note
operator|.
name|setAttachedFile
argument_list|(
name|attachment
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|note
operator|.
name|setAttachedContentType
argument_list|(
name|attachment
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|attached
operator|=
literal|true
expr_stmt|;
name|n
operator|.
name|setAttachment
argument_list|(
name|attachment
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|addNote
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|response
operator|.
name|hasUpdatedMeetings
argument_list|()
operator|||
operator|(
operator|!
name|response
operator|.
name|hasCreatedMeetings
argument_list|()
operator|&&
operator|!
name|response
operator|.
name|hasDeletedMeetings
argument_list|()
operator|&&
operator|!
name|response
operator|.
name|hasCancelledMeetings
argument_list|()
operator|)
condition|)
block|{
name|EventNote
name|note
init|=
operator|new
name|EventNote
argument_list|()
decl_stmt|;
name|note
operator|.
name|setEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|note
operator|.
name|setNoteType
argument_list|(
name|EventNote
operator|.
name|sEventNoteTypeEditEvent
argument_list|)
expr_stmt|;
name|note
operator|.
name|setTimeStamp
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|note
operator|.
name|setUser
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getTrueName
argument_list|()
argument_list|)
expr_stmt|;
name|note
operator|.
name|setUserId
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getTrueExternalUserId
argument_list|()
argument_list|)
expr_stmt|;
name|note
operator|.
name|setAffectedMeetings
argument_list|(
name|updatedMeetings
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|hasMessage
argument_list|()
condition|)
name|note
operator|.
name|setTextNote
argument_list|(
name|request
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|hasUpdatedMeetings
argument_list|()
condition|)
name|note
operator|.
name|setMeetings
argument_list|(
name|EventInterface
operator|.
name|toString
argument_list|(
name|response
operator|.
name|getUpdatedMeetings
argument_list|()
argument_list|,
name|CONSTANTS
argument_list|,
literal|"\n"
argument_list|,
name|df
argument_list|)
argument_list|)
expr_stmt|;
name|event
operator|.
name|getNotes
argument_list|()
operator|.
name|add
argument_list|(
name|note
argument_list|)
expr_stmt|;
name|NoteInterface
name|n
init|=
operator|new
name|NoteInterface
argument_list|()
decl_stmt|;
name|n
operator|.
name|setDate
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|n
operator|.
name|setMeetings
argument_list|(
name|note
operator|.
name|getMeetings
argument_list|()
argument_list|)
expr_stmt|;
name|n
operator|.
name|setUser
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getTrueName
argument_list|()
argument_list|)
expr_stmt|;
name|n
operator|.
name|setType
argument_list|(
name|NoteInterface
operator|.
name|NoteType
operator|.
name|values
argument_list|()
index|[
name|note
operator|.
name|getNoteType
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|n
operator|.
name|setNote
argument_list|(
name|note
operator|.
name|getTextNote
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|attachment
operator|!=
literal|null
operator|&&
operator|!
name|attached
condition|)
block|{
name|note
operator|.
name|setAttachedName
argument_list|(
name|attachment
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|note
operator|.
name|setAttachedFile
argument_list|(
name|attachment
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|note
operator|.
name|setAttachedContentType
argument_list|(
name|attachment
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|attached
operator|=
literal|true
expr_stmt|;
name|n
operator|.
name|setAttachment
argument_list|(
name|attachment
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|addNote
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|response
operator|.
name|hasDeletedMeetings
argument_list|()
condition|)
block|{
name|EventNote
name|note
init|=
operator|new
name|EventNote
argument_list|()
decl_stmt|;
name|note
operator|.
name|setEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|note
operator|.
name|setNoteType
argument_list|(
name|EventNote
operator|.
name|sEventNoteTypeDeletion
argument_list|)
expr_stmt|;
name|note
operator|.
name|setTimeStamp
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|note
operator|.
name|setUser
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getTrueName
argument_list|()
argument_list|)
expr_stmt|;
name|note
operator|.
name|setUserId
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getTrueExternalUserId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|hasMessage
argument_list|()
condition|)
name|note
operator|.
name|setTextNote
argument_list|(
name|request
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|note
operator|.
name|setMeetings
argument_list|(
name|EventInterface
operator|.
name|toString
argument_list|(
name|response
operator|.
name|getDeletedMeetings
argument_list|()
argument_list|,
name|CONSTANTS
argument_list|,
literal|"\n"
argument_list|,
name|df
argument_list|)
argument_list|)
expr_stmt|;
name|event
operator|.
name|getNotes
argument_list|()
operator|.
name|add
argument_list|(
name|note
argument_list|)
expr_stmt|;
name|NoteInterface
name|n
init|=
operator|new
name|NoteInterface
argument_list|()
decl_stmt|;
name|n
operator|.
name|setDate
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|n
operator|.
name|setMeetings
argument_list|(
name|note
operator|.
name|getMeetings
argument_list|()
argument_list|)
expr_stmt|;
name|n
operator|.
name|setUser
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getTrueName
argument_list|()
argument_list|)
expr_stmt|;
name|n
operator|.
name|setType
argument_list|(
name|NoteInterface
operator|.
name|NoteType
operator|.
name|values
argument_list|()
index|[
name|note
operator|.
name|getNoteType
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|n
operator|.
name|setNote
argument_list|(
name|note
operator|.
name|getTextNote
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|attachment
operator|!=
literal|null
operator|&&
operator|!
name|attached
condition|)
block|{
name|note
operator|.
name|setAttachedName
argument_list|(
name|attachment
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|note
operator|.
name|setAttachedFile
argument_list|(
name|attachment
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|note
operator|.
name|setAttachedContentType
argument_list|(
name|attachment
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|attached
operator|=
literal|true
expr_stmt|;
name|n
operator|.
name|setAttachment
argument_list|(
name|attachment
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|addNote
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|response
operator|.
name|hasCancelledMeetings
argument_list|()
condition|)
block|{
name|EventNote
name|note
init|=
operator|new
name|EventNote
argument_list|()
decl_stmt|;
name|note
operator|.
name|setEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|note
operator|.
name|setNoteType
argument_list|(
name|EventNote
operator|.
name|sEventNoteTypeCancel
argument_list|)
expr_stmt|;
name|note
operator|.
name|setTimeStamp
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|note
operator|.
name|setUser
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getTrueName
argument_list|()
argument_list|)
expr_stmt|;
name|note
operator|.
name|setUserId
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getTrueExternalUserId
argument_list|()
argument_list|)
expr_stmt|;
name|note
operator|.
name|setAffectedMeetings
argument_list|(
name|cancelledMeetings
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|hasMessage
argument_list|()
condition|)
name|note
operator|.
name|setTextNote
argument_list|(
name|request
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|note
operator|.
name|setMeetings
argument_list|(
name|EventInterface
operator|.
name|toString
argument_list|(
name|response
operator|.
name|getCancelledMeetings
argument_list|()
argument_list|,
name|CONSTANTS
argument_list|,
literal|"\n"
argument_list|,
name|df
argument_list|)
argument_list|)
expr_stmt|;
name|event
operator|.
name|getNotes
argument_list|()
operator|.
name|add
argument_list|(
name|note
argument_list|)
expr_stmt|;
name|NoteInterface
name|n
init|=
operator|new
name|NoteInterface
argument_list|()
decl_stmt|;
name|n
operator|.
name|setDate
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|n
operator|.
name|setMeetings
argument_list|(
name|note
operator|.
name|getMeetings
argument_list|()
argument_list|)
expr_stmt|;
name|n
operator|.
name|setUser
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getTrueName
argument_list|()
argument_list|)
expr_stmt|;
name|n
operator|.
name|setType
argument_list|(
name|NoteInterface
operator|.
name|NoteType
operator|.
name|values
argument_list|()
index|[
name|note
operator|.
name|getNoteType
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|n
operator|.
name|setNote
argument_list|(
name|note
operator|.
name|getTextNote
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|attachment
operator|!=
literal|null
operator|&&
operator|!
name|attached
condition|)
block|{
name|note
operator|.
name|setAttachedName
argument_list|(
name|attachment
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|note
operator|.
name|setAttachedFile
argument_list|(
name|attachment
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|note
operator|.
name|setAttachedContentType
argument_list|(
name|attachment
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|attached
operator|=
literal|true
expr_stmt|;
name|n
operator|.
name|setAttachment
argument_list|(
name|attachment
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|addNote
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|EventType
operator|.
name|Course
condition|)
block|{
name|CourseEvent
name|ce
init|=
operator|(
name|CourseEvent
operator|)
name|event
decl_stmt|;
name|ce
operator|.
name|setReqAttendance
argument_list|(
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|hasRequiredAttendance
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ce
operator|.
name|getRelatedCourses
argument_list|()
operator|==
literal|null
condition|)
name|ce
operator|.
name|setRelatedCourses
argument_list|(
operator|new
name|HashSet
argument_list|<
name|RelatedCourseInfo
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|ce
operator|.
name|getRelatedCourses
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|hasRelatedObjects
argument_list|()
condition|)
for|for
control|(
name|RelatedObjectInterface
name|r
range|:
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|getRelatedObjects
argument_list|()
control|)
block|{
name|RelatedCourseInfo
name|related
init|=
operator|new
name|RelatedCourseInfo
argument_list|()
decl_stmt|;
name|related
operator|.
name|setEvent
argument_list|(
name|ce
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|getSelection
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|related
operator|.
name|setOwnerId
argument_list|(
name|r
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|related
operator|.
name|setOwnerType
argument_list|(
name|r
operator|.
name|getType
argument_list|()
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|related
operator|.
name|setCourse
argument_list|(
name|CourseOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|r
operator|.
name|getSelection
argument_list|()
index|[
literal|1
index|]
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|r
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|Course
case|:
name|related
operator|.
name|setOwner
argument_list|(
name|CourseOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|r
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Class
case|:
name|related
operator|.
name|setOwner
argument_list|(
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|r
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Config
case|:
name|related
operator|.
name|setOwner
argument_list|(
name|InstrOfferingConfigDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|r
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Offering
case|:
name|related
operator|.
name|setOwner
argument_list|(
name|InstructionalOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|r
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|ce
operator|.
name|getRelatedCourses
argument_list|()
operator|.
name|add
argument_list|(
name|related
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|event
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|hibSession
operator|.
name|save
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|response
operator|.
name|setEvent
argument_list|(
name|EventDetailBackend
operator|.
name|getEventDetail
argument_list|(
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
argument_list|,
name|event
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|event
operator|.
name|getMeetings
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|response
operator|.
name|setEvent
argument_list|(
name|EventDetailBackend
operator|.
name|getEventDetail
argument_list|(
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
argument_list|,
name|event
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|getEvent
argument_list|()
operator|.
name|setId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hibSession
operator|.
name|update
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|response
operator|.
name|setEvent
argument_list|(
name|EventDetailBackend
operator|.
name|getEventDetail
argument_list|(
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
argument_list|,
name|event
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
operator|new
name|EventEmail
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
operator|.
name|send
argument_list|(
name|context
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
if|if
condition|(
name|ex
operator|instanceof
name|GwtRpcException
condition|)
throw|throw
operator|(
name|GwtRpcException
operator|)
name|ex
throw|;
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|MeetingConflictInterface
argument_list|>
name|computeConflicts
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|MeetingInterface
name|meeting
parameter_list|,
name|Long
name|eventId
parameter_list|)
block|{
name|List
argument_list|<
name|MeetingConflictInterface
argument_list|>
name|conflicts
init|=
operator|new
name|ArrayList
argument_list|<
name|EventInterface
operator|.
name|MeetingConflictInterface
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Meeting
name|m
range|:
operator|(
name|List
argument_list|<
name|Meeting
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select m from Meeting m, Location l "
operator|+
literal|"where m.startPeriod< :stopTime and m.stopPeriod> :startTime and l.ignoreRoomCheck = false and "
operator|+
literal|"m.locationPermanentId = l.permanentId and l.uniqueId = :locationdId and m.meetingDate = :meetingDate and m.uniqueId != :meetingId and m.event.uniqueId != :eventId and m.approvalStatus<= 1"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"startTime"
argument_list|,
name|meeting
operator|.
name|getStartSlot
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"stopTime"
argument_list|,
name|meeting
operator|.
name|getEndSlot
argument_list|()
argument_list|)
operator|.
name|setDate
argument_list|(
literal|"meetingDate"
argument_list|,
name|meeting
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"locationdId"
argument_list|,
name|meeting
operator|.
name|getLocation
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"meetingId"
argument_list|,
name|meeting
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|meeting
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"eventId"
argument_list|,
name|eventId
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|eventId
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|MeetingConflictInterface
name|conflict
init|=
operator|new
name|MeetingConflictInterface
argument_list|()
decl_stmt|;
name|conflict
operator|.
name|setEventId
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|conflict
operator|.
name|setName
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventName
argument_list|()
argument_list|)
expr_stmt|;
name|conflict
operator|.
name|setType
argument_list|(
name|EventInterface
operator|.
name|EventType
operator|.
name|values
argument_list|()
index|[
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventType
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|conflict
operator|.
name|setId
argument_list|(
name|m
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|conflict
operator|.
name|setMeetingDate
argument_list|(
name|m
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
expr_stmt|;
name|conflict
operator|.
name|setDayOfYear
argument_list|(
name|meeting
operator|.
name|getDayOfYear
argument_list|()
argument_list|)
expr_stmt|;
name|conflict
operator|.
name|setStartSlot
argument_list|(
name|m
operator|.
name|getStartPeriod
argument_list|()
argument_list|)
expr_stmt|;
name|conflict
operator|.
name|setEndSlot
argument_list|(
name|m
operator|.
name|getStopPeriod
argument_list|()
argument_list|)
expr_stmt|;
name|conflict
operator|.
name|setStartOffset
argument_list|(
name|m
operator|.
name|getStartOffset
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|m
operator|.
name|getStartOffset
argument_list|()
argument_list|)
expr_stmt|;
name|conflict
operator|.
name|setEndOffset
argument_list|(
name|m
operator|.
name|getStopOffset
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|m
operator|.
name|getStopOffset
argument_list|()
argument_list|)
expr_stmt|;
name|conflict
operator|.
name|setApprovalDate
argument_list|(
name|m
operator|.
name|getApprovalDate
argument_list|()
argument_list|)
expr_stmt|;
name|conflict
operator|.
name|setApprovalStatus
argument_list|(
name|m
operator|.
name|getApprovalStatus
argument_list|()
argument_list|)
expr_stmt|;
name|conflicts
operator|.
name|add
argument_list|(
name|conflict
argument_list|)
expr_stmt|;
block|}
return|return
name|conflicts
return|;
block|}
block|}
end_class

end_unit

