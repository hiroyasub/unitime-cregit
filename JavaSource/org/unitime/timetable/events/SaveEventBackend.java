begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.4 (University Timetabling Application)  * Copyright (C) 2012, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|events
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|LookupServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|RelatedObjectInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|PersonInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|EventDetailRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|ContactInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|EventRoomAvailabilityRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|EventRoomAvailabilityRpcResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|MeetingInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|SaveEventRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|EventContact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|EventNote
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Meeting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RelatedCourseInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SpecialEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|EventDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|LocationDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SponsoringOrganizationDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|EventEmail
import|;
end_import

begin_class
specifier|public
class|class
name|SaveEventBackend
extends|extends
name|EventAction
argument_list|<
name|SaveEventRpcRequest
argument_list|,
name|EventInterface
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|EventInterface
name|execute
parameter_list|(
name|SaveEventRpcRequest
name|request
parameter_list|,
name|GwtRpcHelper
name|helper
parameter_list|,
name|EventRights
name|rights
parameter_list|)
block|{
if|if
condition|(
operator|!
name|rights
operator|.
name|canAddEvent
argument_list|(
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|,
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|hasContact
argument_list|()
condition|?
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|getContact
argument_list|()
operator|.
name|getExternalId
argument_list|()
else|:
literal|null
argument_list|)
condition|)
throw|throw
name|rights
operator|.
name|getException
argument_list|()
throw|;
name|EventEmail
operator|.
name|Result
name|result
init|=
name|save
argument_list|(
name|request
operator|.
name|getEvent
argument_list|()
argument_list|,
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|helper
argument_list|,
name|rights
argument_list|)
decl_stmt|;
name|EventInterface
name|event
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|hasMeetings
argument_list|()
condition|)
block|{
name|event
operator|=
operator|new
name|EventDetailBackend
argument_list|()
operator|.
name|execute
argument_list|(
name|EventDetailRpcRequest
operator|.
name|requestEventDetails
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|request
operator|.
name|getEvent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|helper
argument_list|,
name|rights
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|event
operator|=
name|request
operator|.
name|getEvent
argument_list|()
expr_stmt|;
block|}
name|event
operator|.
name|setMessage
argument_list|(
operator|(
name|result
operator|.
name|isWarning
argument_list|()
condition|?
literal|"WARN:"
else|:
literal|""
operator|)
operator|+
name|result
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|event
return|;
block|}
specifier|protected
name|EventEmail
operator|.
name|Result
name|save
parameter_list|(
name|EventInterface
name|e
parameter_list|,
name|Long
name|sessionId
parameter_list|,
name|GwtRpcHelper
name|helper
parameter_list|,
name|EventRights
name|rights
parameter_list|)
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Transaction
name|tx
init|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
try|try
block|{
name|EventRoomAvailabilityRpcResponse
name|availability
init|=
operator|new
name|EventRoomAvailabilityBackend
argument_list|()
operator|.
name|execute
argument_list|(
name|EventRoomAvailabilityRpcRequest
operator|.
name|checkAvailability
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|MeetingInterface
argument_list|>
argument_list|(
name|e
operator|.
name|getMeetings
argument_list|()
argument_list|)
argument_list|,
name|sessionId
argument_list|)
argument_list|,
name|helper
argument_list|,
name|rights
argument_list|)
decl_stmt|;
name|TimetableManager
name|manager
init|=
name|TimetableManager
operator|.
name|getManager
argument_list|(
name|helper
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
name|Date
name|now
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|String
name|uname
init|=
name|helper
operator|.
name|getUser
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|getUser
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getContact
argument_list|()
operator|.
name|getExternalId
argument_list|()
argument_list|)
condition|)
block|{
name|uname
operator|=
name|e
operator|.
name|getContact
argument_list|()
operator|.
name|getShortName
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|manager
operator|!=
literal|null
condition|)
block|{
name|uname
operator|=
name|manager
operator|.
name|getShortName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|PersonInterface
argument_list|>
name|people
init|=
operator|new
name|LookupServlet
argument_list|()
operator|.
name|lookupPeople
argument_list|(
name|helper
operator|.
name|getUser
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|"mustHaveExternalId,session="
operator|+
name|sessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|people
operator|!=
literal|null
condition|)
for|for
control|(
name|PersonInterface
name|p
range|:
name|people
control|)
block|{
if|if
condition|(
name|helper
operator|.
name|getUser
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|uname
operator|=
name|p
operator|.
name|getShortName
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
name|Event
name|event
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|event
operator|=
name|EventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|e
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|e
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|Special
case|:
name|event
operator|=
operator|new
name|SpecialEvent
argument_list|()
expr_stmt|;
break|break;
case|case
name|Course
case|:
name|event
operator|=
operator|new
name|CourseEvent
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|failedSaveEventWrongType
argument_list|(
name|e
operator|.
name|getType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|event
operator|.
name|setEventName
argument_list|(
name|e
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setEmail
argument_list|(
name|e
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setSponsoringOrganization
argument_list|(
name|e
operator|.
name|hasSponsor
argument_list|()
condition|?
name|SponsoringOrganizationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|e
operator|.
name|getSponsor
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|instanceof
name|SpecialEvent
condition|)
block|{
name|event
operator|.
name|setMinCapacity
argument_list|(
name|e
operator|.
name|getMaxCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setMaxCapacity
argument_list|(
name|e
operator|.
name|getMaxCapacity
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|getAdditionalContacts
argument_list|()
operator|==
literal|null
condition|)
block|{
name|event
operator|.
name|setAdditionalContacts
argument_list|(
operator|new
name|HashSet
argument_list|<
name|EventContact
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rights
operator|.
name|canLookupContacts
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|EventContact
argument_list|>
name|existingContacts
init|=
operator|new
name|HashSet
argument_list|<
name|EventContact
argument_list|>
argument_list|(
name|event
operator|.
name|getAdditionalContacts
argument_list|()
argument_list|)
decl_stmt|;
name|event
operator|.
name|getAdditionalContacts
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|hasAdditionalContacts
argument_list|()
condition|)
for|for
control|(
name|ContactInterface
name|c
range|:
name|e
operator|.
name|getAdditionalContacts
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getExternalId
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|EventContact
name|contact
init|=
literal|null
decl_stmt|;
for|for
control|(
name|EventContact
name|x
range|:
name|existingContacts
control|)
if|if
condition|(
name|c
operator|.
name|getExternalId
argument_list|()
operator|.
name|equals
argument_list|(
name|x
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|contact
operator|=
name|x
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|contact
operator|==
literal|null
condition|)
block|{
name|contact
operator|=
operator|(
name|EventContact
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from EventContact where externalUniqueId = :externalId"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"externalId"
argument_list|,
name|c
operator|.
name|getExternalId
argument_list|()
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|contact
operator|==
literal|null
condition|)
block|{
name|contact
operator|=
operator|new
name|EventContact
argument_list|()
expr_stmt|;
name|contact
operator|.
name|setExternalUniqueId
argument_list|(
name|c
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setFirstName
argument_list|(
name|c
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setMiddleName
argument_list|(
name|c
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setLastName
argument_list|(
name|c
operator|.
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setEmailAddress
argument_list|(
name|c
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setPhone
argument_list|(
name|c
operator|.
name|getPhone
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|contact
argument_list|)
expr_stmt|;
block|}
name|event
operator|.
name|getAdditionalContacts
argument_list|()
operator|.
name|add
argument_list|(
name|contact
argument_list|)
expr_stmt|;
block|}
block|}
name|EventContact
name|main
init|=
name|event
operator|.
name|getMainContact
argument_list|()
decl_stmt|;
if|if
condition|(
name|main
operator|==
literal|null
operator|||
operator|!
name|main
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getContact
argument_list|()
operator|.
name|getExternalId
argument_list|()
argument_list|)
condition|)
block|{
name|main
operator|=
operator|(
name|EventContact
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from EventContact where externalUniqueId = :externalId"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"externalId"
argument_list|,
name|e
operator|.
name|getContact
argument_list|()
operator|.
name|getExternalId
argument_list|()
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
expr_stmt|;
if|if
condition|(
name|main
operator|==
literal|null
condition|)
block|{
name|main
operator|=
operator|new
name|EventContact
argument_list|()
expr_stmt|;
name|main
operator|.
name|setExternalUniqueId
argument_list|(
name|e
operator|.
name|getContact
argument_list|()
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|main
operator|.
name|setFirstName
argument_list|(
name|e
operator|.
name|getContact
argument_list|()
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
name|main
operator|.
name|setMiddleName
argument_list|(
name|e
operator|.
name|getContact
argument_list|()
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
name|main
operator|.
name|setLastName
argument_list|(
name|e
operator|.
name|getContact
argument_list|()
operator|.
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
name|main
operator|.
name|setEmailAddress
argument_list|(
name|e
operator|.
name|getContact
argument_list|()
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
name|main
operator|.
name|setPhone
argument_list|(
name|e
operator|.
name|getContact
argument_list|()
operator|.
name|getPhone
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|main
argument_list|)
expr_stmt|;
name|event
operator|.
name|setMainContact
argument_list|(
name|main
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|getNotes
argument_list|()
operator|==
literal|null
condition|)
name|event
operator|.
name|setNotes
argument_list|(
operator|new
name|HashSet
argument_list|<
name|EventNote
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|getMeetings
argument_list|()
operator|==
literal|null
condition|)
name|event
operator|.
name|setMeetings
argument_list|(
operator|new
name|HashSet
argument_list|<
name|Meeting
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Meeting
argument_list|>
name|remove
init|=
operator|new
name|HashSet
argument_list|<
name|Meeting
argument_list|>
argument_list|(
name|event
operator|.
name|getMeetings
argument_list|()
argument_list|)
decl_stmt|;
name|TreeSet
argument_list|<
name|Meeting
argument_list|>
name|created
init|=
operator|new
name|TreeSet
argument_list|<
name|Meeting
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|MeetingInterface
name|m
range|:
name|e
operator|.
name|getMeetings
argument_list|()
control|)
block|{
name|Meeting
name|meeting
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|getId
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|Iterator
argument_list|<
name|Meeting
argument_list|>
name|i
init|=
name|remove
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Meeting
name|x
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|x
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|meeting
operator|=
name|x
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|meeting
operator|!=
literal|null
condition|)
block|{
name|meeting
operator|.
name|setStartOffset
argument_list|(
name|m
operator|.
name|getStartOffset
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setStopOffset
argument_list|(
name|m
operator|.
name|getEndOffset
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|update
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|meeting
operator|=
operator|new
name|Meeting
argument_list|()
expr_stmt|;
name|meeting
operator|.
name|setEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|Location
name|location
init|=
operator|(
name|m
operator|.
name|hasLocation
argument_list|()
condition|?
name|LocationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
else|:
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|location
operator|==
literal|null
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|failedSaveEventNoLocation
argument_list|(
name|toString
argument_list|(
name|m
argument_list|)
argument_list|)
argument_list|)
throw|;
name|meeting
operator|.
name|setLocationPermanentId
argument_list|(
name|location
operator|.
name|getPermanentId
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setApprovedDate
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|rights
operator|.
name|canCreate
argument_list|(
name|location
argument_list|)
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|failedSaveEventWrongLocation
argument_list|(
name|m
operator|.
name|getLocationName
argument_list|()
argument_list|)
argument_list|)
throw|;
if|if
condition|(
name|rights
operator|.
name|canApprove
argument_list|(
name|location
argument_list|)
condition|)
name|meeting
operator|.
name|setApprovedDate
argument_list|(
name|now
argument_list|)
expr_stmt|;
if|if
condition|(
name|rights
operator|.
name|isPastOrOutside
argument_list|(
name|m
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|failedSaveEventPastOrOutside
argument_list|(
name|sMeetingDateFormat
operator|.
name|format
argument_list|(
name|m
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
argument_list|)
argument_list|)
throw|;
if|if
condition|(
operator|!
name|rights
operator|.
name|canOverbook
argument_list|(
name|location
argument_list|)
condition|)
for|for
control|(
name|MeetingInterface
name|x
range|:
name|availability
operator|.
name|getMeetings
argument_list|()
control|)
block|{
if|if
condition|(
name|x
operator|.
name|equals
argument_list|(
name|m
argument_list|)
operator|&&
name|x
operator|.
name|hasConflicts
argument_list|()
condition|)
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|MESSAGES
operator|.
name|failedSaveEventConflict
argument_list|(
name|toString
argument_list|(
name|m
argument_list|)
argument_list|,
name|toString
argument_list|(
name|x
operator|.
name|getConflicts
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
name|meeting
operator|.
name|setStartPeriod
argument_list|(
name|m
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setStopPeriod
argument_list|(
name|m
operator|.
name|getEndSlot
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setStartOffset
argument_list|(
name|m
operator|.
name|getStartOffset
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setStopOffset
argument_list|(
name|m
operator|.
name|getEndOffset
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setClassCanOverride
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setMeetingDate
argument_list|(
name|m
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|getMeetings
argument_list|()
operator|.
name|add
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
name|created
operator|.
name|add
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|created
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|EventNote
name|note
init|=
operator|new
name|EventNote
argument_list|()
decl_stmt|;
name|note
operator|.
name|setEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|note
operator|.
name|setNoteType
argument_list|(
name|event
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|?
name|EventNote
operator|.
name|sEventNoteTypeCreateEvent
else|:
name|EventNote
operator|.
name|sEventNoteTypeAddMeetings
argument_list|)
expr_stmt|;
name|note
operator|.
name|setTimeStamp
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|note
operator|.
name|setUser
argument_list|(
name|uname
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|hasNotes
argument_list|()
operator|&&
name|e
operator|.
name|getNotes
argument_list|()
operator|.
name|last
argument_list|()
operator|.
name|getDate
argument_list|()
operator|==
literal|null
condition|)
name|note
operator|.
name|setTextNote
argument_list|(
name|e
operator|.
name|getNotes
argument_list|()
operator|.
name|last
argument_list|()
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|note
operator|.
name|setMeetingCollection
argument_list|(
name|created
argument_list|)
expr_stmt|;
name|event
operator|.
name|getNotes
argument_list|()
operator|.
name|add
argument_list|(
name|note
argument_list|)
expr_stmt|;
block|}
name|TreeSet
argument_list|<
name|Meeting
argument_list|>
name|deleted
init|=
operator|new
name|TreeSet
argument_list|<
name|Meeting
argument_list|>
argument_list|(
name|remove
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|remove
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|EventNote
name|note
init|=
operator|new
name|EventNote
argument_list|()
decl_stmt|;
name|note
operator|.
name|setEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|note
operator|.
name|setNoteType
argument_list|(
name|EventNote
operator|.
name|sEventNoteTypeDeletion
argument_list|)
expr_stmt|;
name|note
operator|.
name|setTimeStamp
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|note
operator|.
name|setUser
argument_list|(
name|uname
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|hasNotes
argument_list|()
operator|&&
name|e
operator|.
name|getNotes
argument_list|()
operator|.
name|last
argument_list|()
operator|.
name|getDate
argument_list|()
operator|==
literal|null
condition|)
name|note
operator|.
name|setTextNote
argument_list|(
name|e
operator|.
name|getNotes
argument_list|()
operator|.
name|last
argument_list|()
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|getNotes
argument_list|()
operator|.
name|add
argument_list|(
name|note
argument_list|)
expr_stmt|;
name|note
operator|.
name|setMeetingCollection
argument_list|(
name|deleted
argument_list|)
expr_stmt|;
name|event
operator|.
name|getMeetings
argument_list|()
operator|.
name|removeAll
argument_list|(
name|remove
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|created
operator|.
name|isEmpty
argument_list|()
operator|&&
name|remove
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|EventNote
name|note
init|=
operator|new
name|EventNote
argument_list|()
decl_stmt|;
name|note
operator|.
name|setEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|note
operator|.
name|setNoteType
argument_list|(
name|event
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|?
name|EventNote
operator|.
name|sEventNoteTypeCreateEvent
else|:
name|EventNote
operator|.
name|sEventNoteTypeEditEvent
argument_list|)
expr_stmt|;
name|note
operator|.
name|setTimeStamp
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|note
operator|.
name|setUser
argument_list|(
name|uname
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|hasNotes
argument_list|()
operator|&&
name|e
operator|.
name|getNotes
argument_list|()
operator|.
name|last
argument_list|()
operator|.
name|getDate
argument_list|()
operator|==
literal|null
condition|)
name|note
operator|.
name|setTextNote
argument_list|(
name|e
operator|.
name|getNotes
argument_list|()
operator|.
name|last
argument_list|()
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|getNotes
argument_list|()
operator|.
name|add
argument_list|(
name|note
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Meeting
argument_list|>
name|i
init|=
name|remove
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Meeting
name|x
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|e
operator|.
name|getType
argument_list|()
operator|==
name|EventType
operator|.
name|Course
condition|)
block|{
name|CourseEvent
name|ce
init|=
operator|(
name|CourseEvent
operator|)
name|event
decl_stmt|;
name|ce
operator|.
name|setReqAttendance
argument_list|(
name|e
operator|.
name|hasRequiredAttendance
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ce
operator|.
name|getRelatedCourses
argument_list|()
operator|==
literal|null
condition|)
name|ce
operator|.
name|setRelatedCourses
argument_list|(
operator|new
name|HashSet
argument_list|<
name|RelatedCourseInfo
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|ce
operator|.
name|getRelatedCourses
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|hasRelatedObjects
argument_list|()
condition|)
for|for
control|(
name|RelatedObjectInterface
name|r
range|:
name|e
operator|.
name|getRelatedObjects
argument_list|()
control|)
block|{
name|RelatedCourseInfo
name|related
init|=
operator|new
name|RelatedCourseInfo
argument_list|()
decl_stmt|;
name|related
operator|.
name|setEvent
argument_list|(
name|ce
argument_list|)
expr_stmt|;
name|related
operator|.
name|setOwnerId
argument_list|(
name|r
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|related
operator|.
name|setOwnerType
argument_list|(
name|r
operator|.
name|getType
argument_list|()
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|related
operator|.
name|setCourse
argument_list|(
name|CourseOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|r
operator|.
name|getSelection
argument_list|()
index|[
literal|1
index|]
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|ce
operator|.
name|getRelatedCourses
argument_list|()
operator|.
name|add
argument_list|(
name|related
argument_list|)
expr_stmt|;
block|}
block|}
name|Long
name|eventId
init|=
name|event
operator|.
name|getUniqueId
argument_list|()
decl_stmt|;
if|if
condition|(
name|eventId
operator|==
literal|null
condition|)
block|{
name|eventId
operator|=
operator|(
name|Long
operator|)
name|hibSession
operator|.
name|save
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|event
operator|.
name|getMeetings
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|hibSession
operator|.
name|delete
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hibSession
operator|.
name|update
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
name|EventEmail
operator|.
name|Result
name|result
init|=
operator|new
name|EventEmail
argument_list|(
name|event
argument_list|,
operator|(
name|e
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|?
name|EventEmail
operator|.
name|sActionCreate
else|:
operator|!
name|created
operator|.
name|isEmpty
argument_list|()
condition|?
name|EventEmail
operator|.
name|sActionAddMeeting
else|:
operator|!
name|deleted
operator|.
name|isEmpty
argument_list|()
condition|?
name|EventEmail
operator|.
name|sActionDelete
else|:
name|EventEmail
operator|.
name|sActionUpdate
operator|)
argument_list|,
name|Event
operator|.
name|getMultiMeetings
argument_list|(
name|created
argument_list|)
argument_list|,
name|Event
operator|.
name|getMultiMeetings
argument_list|(
name|deleted
argument_list|)
argument_list|,
operator|(
name|e
operator|.
name|hasNotes
argument_list|()
operator|&&
name|e
operator|.
name|getNotes
argument_list|()
operator|.
name|last
argument_list|()
operator|.
name|getDate
argument_list|()
operator|!=
literal|null
condition|?
name|e
operator|.
name|getNotes
argument_list|()
operator|.
name|last
argument_list|()
operator|.
name|getNote
argument_list|()
else|:
literal|null
operator|)
argument_list|,
literal|null
argument_list|)
operator|.
name|send
argument_list|(
name|helper
operator|.
name|getRequestUrl
argument_list|()
argument_list|)
decl_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|e
operator|.
name|setId
argument_list|(
name|eventId
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
if|if
condition|(
name|ex
operator|instanceof
name|GwtRpcException
condition|)
throw|throw
operator|(
name|GwtRpcException
operator|)
name|ex
throw|;
throw|throw
operator|new
name|GwtRpcException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

