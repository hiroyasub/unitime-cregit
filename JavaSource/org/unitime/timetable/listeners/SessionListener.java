begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|listeners
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSessionEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSessionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|MessageResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|MessageResourcesFactory
import|;
end_import

begin_comment
comment|/**  * Utility class to determine start and end of http sessions  * @author Heston Fernandes  */
end_comment

begin_class
specifier|public
class|class
name|SessionListener
implements|implements
name|HttpSessionListener
block|{
specifier|private
specifier|static
name|int
name|activeSessions
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
name|HashMap
name|sessions
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|/**      * Listener Event when session is created      */
specifier|public
name|void
name|sessionCreated
parameter_list|(
name|HttpSessionEvent
name|se
parameter_list|)
block|{
name|HttpSession
name|session
init|=
name|se
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|sessions
operator|.
name|put
argument_list|(
name|session
operator|.
name|getId
argument_list|()
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|activeSessions
operator|++
expr_stmt|;
name|Debug
operator|.
name|info
argument_list|(
literal|"TT Session started ... "
operator|+
name|session
operator|.
name|getId
argument_list|()
operator|+
literal|" "
operator|+
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Listener Event when session is destroyed      */
specifier|public
name|void
name|sessionDestroyed
parameter_list|(
name|HttpSessionEvent
name|se
parameter_list|)
block|{
name|HttpSession
name|session
init|=
name|se
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|sessions
operator|.
name|remove
argument_list|(
name|session
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|activeSessions
operator|>
literal|0
condition|)
block|{
name|activeSessions
operator|--
expr_stmt|;
block|}
name|Debug
operator|.
name|info
argument_list|(
literal|"TT Session ended ... "
operator|+
name|session
operator|.
name|getId
argument_list|()
operator|+
literal|" "
operator|+
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|Debug
operator|.
name|info
argument_list|(
literal|"    - TT Session time ... "
operator|+
operator|(
operator|(
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
operator|-
name|session
operator|.
name|getCreationTime
argument_list|()
operator|)
operator|/
operator|(
literal|1000
operator|*
literal|60
operator|)
operator|)
operator|+
literal|" minutes"
argument_list|)
expr_stmt|;
name|session
operator|.
name|invalidate
argument_list|()
expr_stmt|;
block|}
comment|/**      * Count of Active Sessions      * @return Count of Active Sessions      */
specifier|public
specifier|static
name|int
name|getActiveSessions
parameter_list|()
block|{
return|return
name|activeSessions
return|;
block|}
comment|/** 	 * Map of active sessions 	 * @return Map of active sessions 	 */
specifier|public
specifier|static
name|HashMap
name|getSessions
parameter_list|()
block|{
return|return
name|sessions
return|;
block|}
specifier|public
specifier|static
name|void
name|reloadMessageResources
parameter_list|(
name|String
name|resourceFile
parameter_list|)
block|{
if|if
condition|(
name|sessions
operator|!=
literal|null
operator|&&
name|sessions
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|sessions
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|HttpSession
name|session
init|=
operator|(
name|HttpSession
operator|)
name|sessions
operator|.
name|get
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|struts
operator|.
name|util
operator|.
name|MessageResourcesFactory
name|mrf
init|=
name|MessageResourcesFactory
operator|.
name|createFactory
argument_list|()
decl_stmt|;
name|MessageResources
name|mr
init|=
operator|new
name|MessageResources
argument_list|(
operator|(
name|MessageResourcesFactory
operator|)
name|mrf
argument_list|,
name|resourceFile
argument_list|)
decl_stmt|;
name|session
operator|.
name|getServletContext
argument_list|()
operator|.
name|setAttribute
argument_list|(
name|Globals
operator|.
name|MESSAGES_KEY
argument_list|,
name|mr
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

