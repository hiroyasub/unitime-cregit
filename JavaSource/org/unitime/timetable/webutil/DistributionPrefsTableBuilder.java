begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|Web
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|WebTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Roles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|ClassComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|ClassInstructorComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SubjectAreaDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|TimetableManagerDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|PdfEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|PdfFont
import|;
end_import

begin_import
import|import
name|com
operator|.
name|itextpdf
operator|.
name|text
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|com
operator|.
name|itextpdf
operator|.
name|text
operator|.
name|Paragraph
import|;
end_import

begin_import
import|import
name|com
operator|.
name|itextpdf
operator|.
name|text
operator|.
name|Rectangle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|itextpdf
operator|.
name|text
operator|.
name|pdf
operator|.
name|PdfPTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|itextpdf
operator|.
name|text
operator|.
name|pdf
operator|.
name|PdfWriter
import|;
end_import

begin_comment
comment|/**  * Builds HTML tables for distribution preferences  *   * @author Heston Fernandes  */
end_comment

begin_class
specifier|public
class|class
name|DistributionPrefsTableBuilder
block|{
specifier|public
name|String
name|getAllDistPrefsTableForCurrentUser
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|String
name|subjectAreaId
parameter_list|,
name|String
name|courseNbr
parameter_list|)
throws|throws
name|Exception
block|{
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|boolean
name|isAdmin
init|=
name|user
operator|.
name|getCurrentRole
argument_list|()
operator|.
name|equals
argument_list|(
name|Roles
operator|.
name|ADMIN_ROLE
argument_list|)
decl_stmt|;
name|boolean
name|isViewAll
init|=
name|user
operator|.
name|getCurrentRole
argument_list|()
operator|.
name|equals
argument_list|(
name|Roles
operator|.
name|VIEW_ALL_ROLE
argument_list|)
operator|||
name|user
operator|.
name|getCurrentRole
argument_list|()
operator|.
name|equals
argument_list|(
name|Roles
operator|.
name|EXAM_MGR_ROLE
argument_list|)
decl_stmt|;
if|if
condition|(
name|subjectAreaId
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|BLANK_OPTION_VALUE
argument_list|)
condition|)
return|return
literal|""
return|;
if|if
condition|(
name|subjectAreaId
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|ALL_OPTION_VALUE
argument_list|)
condition|)
name|subjectAreaId
operator|=
literal|null
expr_stmt|;
name|String
name|ownerId
init|=
operator|(
name|String
operator|)
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|TMTBL_MGR_ID_ATTR_NAME
argument_list|)
decl_stmt|;
name|TimetableManager
name|manager
init|=
operator|new
name|TimetableManagerDAO
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|ownerId
argument_list|)
argument_list|)
decl_stmt|;
name|Long
name|subjAreaId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|subjectAreaId
operator|!=
literal|null
operator|&&
name|subjectAreaId
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|subjAreaId
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|subjectAreaId
argument_list|)
expr_stmt|;
block|}
name|Collection
name|prefs
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|isAdmin
operator|||
name|isViewAll
condition|)
block|{
name|prefs
operator|.
name|addAll
argument_list|(
name|DistributionPref
operator|.
name|getPreferences
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|subjAreaId
argument_list|,
operator|(
name|courseNbr
operator|==
literal|null
operator|||
name|courseNbr
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|null
else|:
name|courseNbr
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|addAll
argument_list|(
name|DistributionPref
operator|.
name|getInstructorPreferences
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|subjAreaId
argument_list|,
operator|(
name|courseNbr
operator|==
literal|null
operator|||
name|courseNbr
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|null
else|:
name|courseNbr
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|manager
operator|.
name|departmentsForSession
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|d
init|=
operator|(
name|Department
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|prefs
operator|.
name|addAll
argument_list|(
name|DistributionPref
operator|.
name|getPreferences
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|d
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|subjAreaId
argument_list|,
operator|(
name|courseNbr
operator|==
literal|null
operator|||
name|courseNbr
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|null
else|:
name|courseNbr
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|addAll
argument_list|(
name|DistributionPref
operator|.
name|getInstructorPreferences
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|d
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|subjAreaId
argument_list|,
operator|(
name|courseNbr
operator|==
literal|null
operator|||
name|courseNbr
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|null
else|:
name|courseNbr
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|toHtmlTable
argument_list|(
name|request
argument_list|,
name|session
argument_list|,
operator|(
name|isAdmin
operator|||
name|isViewAll
condition|?
literal|null
else|:
name|manager
operator|)
argument_list|,
operator|(
name|isAdmin
operator|||
name|isViewAll
condition|?
literal|null
else|:
name|manager
operator|.
name|departmentsForSession
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|)
argument_list|,
name|prefs
argument_list|,
operator|!
name|isViewAll
argument_list|,
operator|!
name|isViewAll
argument_list|)
return|;
block|}
specifier|public
name|File
name|getAllDistPrefsTableForCurrentUserAsPdf
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|String
name|subjectAreaId
parameter_list|,
name|String
name|courseNbr
parameter_list|)
throws|throws
name|Exception
block|{
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|boolean
name|isAdmin
init|=
name|user
operator|.
name|getCurrentRole
argument_list|()
operator|.
name|equals
argument_list|(
name|Roles
operator|.
name|ADMIN_ROLE
argument_list|)
decl_stmt|;
name|boolean
name|isViewAll
init|=
name|user
operator|.
name|getCurrentRole
argument_list|()
operator|.
name|equals
argument_list|(
name|Roles
operator|.
name|VIEW_ALL_ROLE
argument_list|)
operator|||
name|user
operator|.
name|getCurrentRole
argument_list|()
operator|.
name|equals
argument_list|(
name|Roles
operator|.
name|EXAM_MGR_ROLE
argument_list|)
decl_stmt|;
if|if
condition|(
name|subjectAreaId
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|BLANK_OPTION_VALUE
argument_list|)
condition|)
name|subjectAreaId
operator|=
literal|null
expr_stmt|;
if|else if
condition|(
name|subjectAreaId
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|ALL_OPTION_VALUE
argument_list|)
condition|)
name|subjectAreaId
operator|=
literal|null
expr_stmt|;
name|String
name|ownerId
init|=
operator|(
name|String
operator|)
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|TMTBL_MGR_ID_ATTR_NAME
argument_list|)
decl_stmt|;
name|TimetableManager
name|manager
init|=
operator|new
name|TimetableManagerDAO
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|ownerId
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|title
init|=
literal|null
decl_stmt|;
name|Long
name|subjAreaId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|subjectAreaId
operator|!=
literal|null
operator|&&
name|subjectAreaId
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|subjAreaId
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|subjectAreaId
argument_list|)
expr_stmt|;
name|SubjectArea
name|area
init|=
operator|(
operator|new
name|SubjectAreaDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|subjAreaId
argument_list|)
decl_stmt|;
name|title
operator|=
name|area
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
operator|(
name|courseNbr
operator|==
literal|null
condition|?
literal|""
else|:
literal|" "
operator|+
name|courseNbr
operator|)
expr_stmt|;
block|}
name|Collection
name|prefs
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|isAdmin
operator|||
name|isViewAll
condition|)
block|{
name|prefs
operator|.
name|addAll
argument_list|(
name|DistributionPref
operator|.
name|getPreferences
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|subjAreaId
argument_list|,
operator|(
name|courseNbr
operator|==
literal|null
operator|||
name|courseNbr
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|null
else|:
name|courseNbr
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|addAll
argument_list|(
name|DistributionPref
operator|.
name|getInstructorPreferences
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|subjAreaId
argument_list|,
operator|(
name|courseNbr
operator|==
literal|null
operator|||
name|courseNbr
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|null
else|:
name|courseNbr
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|manager
operator|.
name|departmentsForSession
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|d
init|=
operator|(
name|Department
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|prefs
operator|.
name|addAll
argument_list|(
name|DistributionPref
operator|.
name|getPreferences
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|d
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|subjAreaId
argument_list|,
operator|(
name|courseNbr
operator|==
literal|null
operator|||
name|courseNbr
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|null
else|:
name|courseNbr
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|addAll
argument_list|(
name|DistributionPref
operator|.
name|getInstructorPreferences
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|d
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|subjAreaId
argument_list|,
operator|(
name|courseNbr
operator|==
literal|null
operator|||
name|courseNbr
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|null
else|:
name|courseNbr
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|title
operator|==
literal|null
condition|)
name|title
operator|=
name|session
operator|.
name|getLabel
argument_list|()
operator|+
literal|" Distribution Preferences"
expr_stmt|;
else|else
name|title
operator|+=
literal|" - "
operator|+
name|session
operator|.
name|getLabel
argument_list|()
operator|+
literal|" Distribution Preferences"
expr_stmt|;
return|return
name|toPdfTable
argument_list|(
name|request
argument_list|,
name|session
argument_list|,
operator|(
name|isAdmin
operator|||
name|isViewAll
condition|?
literal|null
else|:
name|manager
operator|)
argument_list|,
operator|(
name|isAdmin
operator|||
name|isViewAll
condition|?
literal|null
else|:
name|manager
operator|.
name|departmentsForSession
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|)
argument_list|,
name|prefs
argument_list|,
name|title
argument_list|)
return|;
block|}
specifier|public
name|String
name|getDistPrefsTableForClass
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|Class_
name|clazz
parameter_list|,
name|boolean
name|editable
parameter_list|)
block|{
if|if
condition|(
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Set
name|prefs
init|=
name|clazz
operator|.
name|effectiveDistributionPreferences
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|//DistributionPref.getPreferences(clazz.getSessionId(), clazz.getManagingDept().getUniqueId(), false, clazz.getUniqueId());
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|leadInstructors
init|=
name|clazz
operator|.
name|getLeadInstructors
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|leadInstructors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|DepartmentalInstructor
name|instructor
range|:
name|leadInstructors
control|)
block|{
name|prefs
operator|.
name|addAll
argument_list|(
name|instructor
operator|.
name|getDistributionPreferences
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Vector
name|depts
init|=
operator|new
name|Vector
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|depts
operator|.
name|addElement
argument_list|(
name|clazz
operator|.
name|getManagingDept
argument_list|()
argument_list|)
expr_stmt|;
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|isAdmin
init|=
name|user
operator|.
name|getCurrentRole
argument_list|()
operator|.
name|equals
argument_list|(
name|Roles
operator|.
name|ADMIN_ROLE
argument_list|)
decl_stmt|;
name|String
name|ownerId
init|=
operator|(
name|String
operator|)
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|TMTBL_MGR_ID_ATTR_NAME
argument_list|)
decl_stmt|;
name|TimetableManager
name|manager
init|=
operator|new
name|TimetableManagerDAO
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|ownerId
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|toHtmlTable
argument_list|(
name|request
argument_list|,
name|clazz
operator|.
name|getSession
argument_list|()
argument_list|,
operator|(
name|isAdmin
condition|?
literal|null
else|:
name|manager
operator|)
argument_list|,
name|depts
argument_list|,
name|prefs
argument_list|,
name|editable
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
name|String
name|getDistPrefsTableForExam
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|Exam
name|exam
parameter_list|,
name|boolean
name|editable
parameter_list|)
block|{
name|Set
name|prefs
init|=
name|exam
operator|.
name|effectivePreferences
argument_list|(
name|DistributionPref
operator|.
name|class
argument_list|)
decl_stmt|;
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|isAdmin
init|=
name|user
operator|.
name|getCurrentRole
argument_list|()
operator|.
name|equals
argument_list|(
name|Roles
operator|.
name|ADMIN_ROLE
argument_list|)
decl_stmt|;
name|String
name|ownerId
init|=
operator|(
name|String
operator|)
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|TMTBL_MGR_ID_ATTR_NAME
argument_list|)
decl_stmt|;
name|TimetableManager
name|manager
init|=
operator|new
name|TimetableManagerDAO
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|ownerId
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|toHtmlTable
argument_list|(
name|request
argument_list|,
name|exam
operator|.
name|getSession
argument_list|()
argument_list|,
operator|(
name|isAdmin
condition|?
literal|null
else|:
name|manager
operator|)
argument_list|,
literal|null
argument_list|,
name|prefs
argument_list|,
name|editable
argument_list|,
name|editable
argument_list|)
return|;
block|}
specifier|public
name|String
name|getDistPrefsTableForSchedulingSubpart
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|SchedulingSubpart
name|subpart
parameter_list|,
name|boolean
name|editable
parameter_list|)
block|{
if|if
condition|(
name|subpart
operator|.
name|getManagingDept
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
comment|// Collection prefs = DistributionPref.getPreferences(subpart.getSessionId(), subpart.getManagingDept().getUniqueId(), false, subpart.getUniqueId());
name|Set
name|leadInstructors
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|Set
name|prefs
init|=
name|subpart
operator|.
name|getDistributionPreferences
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|subpart
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|prefs
operator|.
name|addAll
argument_list|(
name|clazz
operator|.
name|getDistributionPreferences
argument_list|()
argument_list|)
expr_stmt|;
name|leadInstructors
operator|.
name|addAll
argument_list|(
name|clazz
operator|.
name|getLeadInstructors
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|leadInstructors
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentalInstructor
name|instructor
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|prefs
operator|.
name|addAll
argument_list|(
name|instructor
operator|.
name|getDistributionPreferences
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|isAdmin
init|=
name|user
operator|.
name|getCurrentRole
argument_list|()
operator|.
name|equals
argument_list|(
name|Roles
operator|.
name|ADMIN_ROLE
argument_list|)
decl_stmt|;
name|String
name|ownerId
init|=
operator|(
name|String
operator|)
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|TMTBL_MGR_ID_ATTR_NAME
argument_list|)
decl_stmt|;
name|TimetableManager
name|manager
init|=
operator|new
name|TimetableManagerDAO
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|ownerId
argument_list|)
argument_list|)
decl_stmt|;
name|Vector
name|depts
init|=
operator|new
name|Vector
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|depts
operator|.
name|addElement
argument_list|(
name|subpart
operator|.
name|getManagingDept
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|toHtmlTable
argument_list|(
name|request
argument_list|,
name|subpart
operator|.
name|getSession
argument_list|()
argument_list|,
operator|(
name|isAdmin
condition|?
literal|null
else|:
name|manager
operator|)
argument_list|,
name|depts
argument_list|,
name|prefs
argument_list|,
name|editable
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
name|String
name|getDistPrefsTableForInstructionalOffering
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|InstructionalOffering
name|instructionalOffering
parameter_list|,
name|boolean
name|editable
parameter_list|)
throws|throws
name|Exception
block|{
comment|//Collection prefs = DistributionPref.getPreferences(instructionalOffering.getSessionId(), null, false, new Long(instructionalOffering.getUniqueId().intValue()));
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|isAdmin
init|=
name|user
operator|.
name|getCurrentRole
argument_list|()
operator|.
name|equals
argument_list|(
name|Roles
operator|.
name|ADMIN_ROLE
argument_list|)
decl_stmt|;
name|String
name|ownerId
init|=
operator|(
name|String
operator|)
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|TMTBL_MGR_ID_ATTR_NAME
argument_list|)
decl_stmt|;
name|TimetableManager
name|manager
init|=
operator|new
name|TimetableManagerDAO
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|ownerId
argument_list|)
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Set
name|leadInstructors
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|Set
name|prefs
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|instructionalOffering
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|config
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|config
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|subpart
init|=
operator|(
name|SchedulingSubpart
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|prefs
operator|.
name|addAll
argument_list|(
name|subpart
operator|.
name|getDistributionPreferences
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|k
init|=
name|subpart
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
name|prefs
operator|.
name|addAll
argument_list|(
name|clazz
operator|.
name|getDistributionPreferences
argument_list|()
argument_list|)
expr_stmt|;
name|leadInstructors
operator|.
name|addAll
argument_list|(
name|clazz
operator|.
name|getLeadInstructors
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|leadInstructors
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentalInstructor
name|instructor
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|prefs
operator|.
name|addAll
argument_list|(
name|instructor
operator|.
name|getDistributionPreferences
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|toHtmlTable
argument_list|(
name|request
argument_list|,
name|instructionalOffering
operator|.
name|getSession
argument_list|()
argument_list|,
operator|(
name|isAdmin
condition|?
literal|null
else|:
name|manager
operator|)
argument_list|,
operator|(
name|isAdmin
condition|?
literal|null
else|:
name|manager
operator|.
name|departmentsForSession
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|)
argument_list|,
name|prefs
argument_list|,
name|editable
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Build a html table with the list representing distribution prefs       * @param distPrefs      * @param ordCol      * @param editable      * @return      */
specifier|public
name|String
name|toHtmlTable
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|Session
name|session
parameter_list|,
name|TimetableManager
name|manager
parameter_list|,
name|Collection
name|departments
parameter_list|,
name|Collection
name|distPrefs
parameter_list|,
name|boolean
name|editable
parameter_list|,
name|boolean
name|showAddButton
parameter_list|)
block|{
name|String
name|title
init|=
literal|"Distribution Preferences"
decl_stmt|;
name|String
name|backType
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"backType"
argument_list|)
decl_stmt|;
name|String
name|backId
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"backId"
argument_list|)
decl_stmt|;
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|instructorFormat
init|=
name|Settings
operator|.
name|getSettingValue
argument_list|(
name|user
argument_list|,
name|Constants
operator|.
name|SETTINGS_INSTRUCTOR_NAME_FORMAT
argument_list|)
decl_stmt|;
if|if
condition|(
name|showAddButton
condition|)
block|{
name|title
operator|=
literal|"<table width='100%'><tr><td width='100%'>"
operator|+
literal|"<DIV class=\"WelcomeRowHeadNoLine\">Distribution Preferences</DIV>"
operator|+
literal|"</td><td style='padding-bottom: 2px'>"
operator|+
literal|"<input type=\"submit\" name=\"op\" class=\"btn\" accesskey='A' title='Add New Distribution Preference (Alt+A)' value=\"Add Distribution Preference\">"
operator|+
literal|"</td></tr></table>"
expr_stmt|;
block|}
name|WebTable
operator|.
name|setOrder
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
literal|"distPrefsTable.ord"
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
literal|"order"
argument_list|)
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|WebTable
name|tbl
init|=
operator|new
name|WebTable
argument_list|(
literal|4
argument_list|,
name|title
argument_list|,
literal|"distributionPrefs.do?order=%%"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|" Type "
block|,
literal|" Structure "
block|,
literal|" Owner "
block|,
literal|" Class "
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
decl_stmt|;
name|int
name|nrPrefs
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i1
init|=
name|distPrefs
operator|.
name|iterator
argument_list|()
init|;
name|i1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionPref
name|dp
init|=
operator|(
name|DistributionPref
operator|)
name|i1
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|prefEditable
init|=
name|editable
decl_stmt|;
if|if
condition|(
name|departments
operator|!=
literal|null
condition|)
block|{
name|boolean
name|visible
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|i2
init|=
name|departments
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|department
init|=
operator|(
name|Department
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|dp
operator|.
name|isVisible
argument_list|(
name|session
argument_list|,
name|department
argument_list|)
condition|)
block|{
name|visible
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|visible
condition|)
continue|continue;
block|}
name|nrPrefs
operator|++
expr_stmt|;
name|String
name|objStr
init|=
literal|""
decl_stmt|;
name|PreferenceGroup
name|pg
init|=
name|dp
operator|.
name|getOwner
argument_list|()
decl_stmt|;
name|String
name|ownerType
init|=
literal|"Unknown"
decl_stmt|;
if|if
condition|(
name|pg
operator|instanceof
name|Department
condition|)
block|{
name|Department
name|d
init|=
operator|(
name|Department
operator|)
name|pg
decl_stmt|;
name|ownerType
operator|=
name|d
operator|.
name|getManagingDeptAbbv
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i2
init|=
name|dp
operator|.
name|getOrderedSetOfDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|dO
init|=
operator|(
name|DistributionObject
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
name|objStr
operator|+=
name|dO
operator|.
name|preferenceText
argument_list|()
expr_stmt|;
if|if
condition|(
name|i2
operator|.
name|hasNext
argument_list|()
condition|)
name|objStr
operator|+=
literal|"<BR>"
expr_stmt|;
block|}
name|String
name|groupingText
init|=
name|dp
operator|.
name|getGroupingName
argument_list|()
decl_stmt|;
name|Comparable
name|groupingCmp
init|=
operator|(
name|dp
operator|.
name|getGrouping
argument_list|()
operator|==
literal|null
condition|?
literal|"0"
else|:
name|dp
operator|.
name|getGrouping
argument_list|()
operator|.
name|toString
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|pg
operator|instanceof
name|DepartmentalInstructor
condition|)
block|{
name|DepartmentalInstructor
name|instructor
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|pg
decl_stmt|;
name|ownerType
operator|=
name|instructor
operator|.
name|getDepartment
argument_list|()
operator|.
name|getManagingDeptAbbv
argument_list|()
expr_stmt|;
name|TreeSet
name|classes
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|ClassInstructorComparator
argument_list|(
operator|new
name|ClassComparator
argument_list|(
name|ClassComparator
operator|.
name|COMPARE_BY_HIERARCHY
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|classes
operator|.
name|addAll
argument_list|(
name|instructor
operator|.
name|getClasses
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|allExternallyManaged
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Iterator
name|i2
init|=
name|classes
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|clazz
init|=
operator|(
name|ClassInstructor
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|clazz
operator|.
name|isLead
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|allExternallyManaged
operator|&&
operator|!
name|clazz
operator|.
name|getClassInstructing
argument_list|()
operator|.
name|getManagingDept
argument_list|()
operator|.
name|isExternalManager
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
name|allExternallyManaged
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|objStr
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|objStr
operator|+=
literal|"<BR>"
expr_stmt|;
name|objStr
operator|+=
name|clazz
operator|.
name|getClassInstructing
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|groupingText
operator|=
literal|"Instructor "
operator|+
name|instructor
operator|.
name|getName
argument_list|(
name|instructorFormat
argument_list|)
expr_stmt|;
name|groupingCmp
operator|=
name|instructor
operator|.
name|getName
argument_list|(
name|instructorFormat
argument_list|)
expr_stmt|;
comment|//prefEditable = false;
if|if
condition|(
name|allExternallyManaged
condition|)
continue|continue;
block|}
name|String
name|distType
init|=
name|dp
operator|.
name|getDistributionType
argument_list|()
operator|.
name|getLabel
argument_list|()
decl_stmt|;
name|String
name|prefLevel
init|=
name|dp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefName
argument_list|()
decl_stmt|;
name|String
name|prefColor
init|=
name|dp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|prefcolor
argument_list|()
decl_stmt|;
if|if
condition|(
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|dp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
name|prefColor
operator|=
literal|"gray"
expr_stmt|;
name|String
name|onClick
init|=
literal|null
decl_stmt|;
name|boolean
name|gray
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|prefEditable
condition|)
block|{
if|if
condition|(
name|manager
operator|==
literal|null
operator|||
name|dp
operator|.
name|isEditable
argument_list|(
name|session
argument_list|,
name|manager
argument_list|)
condition|)
block|{
if|if
condition|(
name|pg
operator|instanceof
name|DepartmentalInstructor
condition|)
block|{
name|onClick
operator|=
literal|"onClick=\"document.location='instructorDetail.do"
operator|+
literal|"?instructorId="
operator|+
name|dp
operator|.
name|getOwner
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"&op=Show%20Instructor%20Preferences'\""
expr_stmt|;
block|}
else|else
block|{
name|onClick
operator|=
literal|"onClick=\"document.location='distributionPrefs.do"
operator|+
literal|"?dp="
operator|+
name|dp
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"&op=view'\""
expr_stmt|;
block|}
block|}
comment|//else gray = true;
block|}
name|boolean
name|back
init|=
literal|"PreferenceGroup"
operator|.
name|equals
argument_list|(
name|backType
argument_list|)
operator|&&
name|dp
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|backId
argument_list|)
decl_stmt|;
name|tbl
operator|.
name|addLine
argument_list|(
name|onClick
argument_list|,
operator|new
name|String
index|[]
block|{
operator|(
name|back
condition|?
literal|"<A name=\"back\"</A>"
else|:
literal|""
operator|)
operator|+
operator|(
name|gray
condition|?
literal|"<span style='color:gray;'>"
else|:
literal|"<span style='color:"
operator|+
name|prefColor
operator|+
literal|";font-weight:bold;' title='"
operator|+
name|prefLevel
operator|+
literal|" "
operator|+
name|distType
operator|+
literal|"'>"
operator|)
operator|+
name|distType
operator|+
literal|"</span>"
block|,
operator|(
name|gray
condition|?
literal|"<span style='color:gray;'>"
else|:
literal|""
operator|)
operator|+
name|groupingText
operator|+
operator|(
name|gray
condition|?
literal|"</span>"
else|:
literal|""
operator|)
block|,
operator|(
name|gray
condition|?
literal|"<span style='color:gray;'>"
else|:
literal|""
operator|)
operator|+
name|ownerType
operator|+
operator|(
name|gray
condition|?
literal|"</span>"
else|:
literal|""
operator|)
block|,
operator|(
name|gray
condition|?
literal|"<span style='color:gray;'>"
else|:
literal|""
operator|)
operator|+
name|objStr
operator|+
operator|(
name|gray
condition|?
literal|"</span>"
else|:
literal|""
operator|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|distType
block|,
name|groupingCmp
block|,
name|ownerType
block|,
name|objStr
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nrPrefs
operator|==
literal|0
condition|)
name|tbl
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"No preferences found"
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|tbl
operator|.
name|printTable
argument_list|(
name|WebTable
operator|.
name|getOrder
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
literal|"distPrefsTable.ord"
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|File
name|toPdfTable
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|Session
name|session
parameter_list|,
name|TimetableManager
name|manager
parameter_list|,
name|Collection
name|departments
parameter_list|,
name|Collection
name|distPrefs
parameter_list|,
name|String
name|title
parameter_list|)
block|{
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|instructorFormat
init|=
name|Settings
operator|.
name|getSettingValue
argument_list|(
name|user
argument_list|,
name|Constants
operator|.
name|SETTINGS_INSTRUCTOR_NAME_FORMAT
argument_list|)
decl_stmt|;
name|PdfWebTable
name|tbl
init|=
operator|new
name|PdfWebTable
argument_list|(
literal|5
argument_list|,
name|title
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Preference"
block|,
literal|"Type"
block|,
literal|"Structure"
block|,
literal|"Owner"
block|,
literal|"Class"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
decl_stmt|;
name|int
name|nrPrefs
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i1
init|=
name|distPrefs
operator|.
name|iterator
argument_list|()
init|;
name|i1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionPref
name|dp
init|=
operator|(
name|DistributionPref
operator|)
name|i1
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|departments
operator|!=
literal|null
condition|)
block|{
name|boolean
name|visible
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|i2
init|=
name|departments
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|department
init|=
operator|(
name|Department
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|dp
operator|.
name|isVisible
argument_list|(
name|session
argument_list|,
name|department
argument_list|)
condition|)
block|{
name|visible
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|visible
condition|)
continue|continue;
block|}
name|nrPrefs
operator|++
expr_stmt|;
name|String
name|objStr
init|=
literal|""
decl_stmt|;
name|PreferenceGroup
name|pg
init|=
name|dp
operator|.
name|getOwner
argument_list|()
decl_stmt|;
name|String
name|ownerType
init|=
literal|"Unknown"
decl_stmt|;
if|if
condition|(
name|pg
operator|instanceof
name|Department
condition|)
block|{
name|Department
name|d
init|=
operator|(
name|Department
operator|)
name|pg
decl_stmt|;
name|ownerType
operator|=
name|d
operator|.
name|getShortLabel
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i2
init|=
name|dp
operator|.
name|getOrderedSetOfDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|dO
init|=
operator|(
name|DistributionObject
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
name|objStr
operator|+=
name|dO
operator|.
name|preferenceText
argument_list|()
expr_stmt|;
if|if
condition|(
name|i2
operator|.
name|hasNext
argument_list|()
condition|)
name|objStr
operator|+=
literal|"\n"
expr_stmt|;
block|}
name|String
name|groupingText
init|=
name|dp
operator|.
name|getGroupingName
argument_list|()
decl_stmt|;
name|Comparable
name|groupingCmp
init|=
operator|(
name|dp
operator|.
name|getGrouping
argument_list|()
operator|==
literal|null
condition|?
literal|"0"
else|:
name|dp
operator|.
name|getGrouping
argument_list|()
operator|.
name|toString
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|pg
operator|instanceof
name|DepartmentalInstructor
condition|)
block|{
name|DepartmentalInstructor
name|instructor
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|pg
decl_stmt|;
name|Department
name|d
init|=
name|instructor
operator|.
name|getDepartment
argument_list|()
decl_stmt|;
name|ownerType
operator|=
name|d
operator|.
name|getShortLabel
argument_list|()
expr_stmt|;
name|TreeSet
name|classes
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|ClassInstructorComparator
argument_list|(
operator|new
name|ClassComparator
argument_list|(
name|ClassComparator
operator|.
name|COMPARE_BY_HIERARCHY
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|classes
operator|.
name|addAll
argument_list|(
name|instructor
operator|.
name|getClasses
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i2
init|=
name|classes
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|clazz
init|=
operator|(
name|ClassInstructor
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|clazz
operator|.
name|isLead
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|objStr
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|objStr
operator|+=
literal|"\n"
expr_stmt|;
name|objStr
operator|+=
name|clazz
operator|.
name|getClassInstructing
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|groupingText
operator|=
literal|"Instructor "
operator|+
name|instructor
operator|.
name|getName
argument_list|(
name|instructorFormat
argument_list|)
expr_stmt|;
name|groupingCmp
operator|=
name|instructor
operator|.
name|getName
argument_list|(
name|instructorFormat
argument_list|)
expr_stmt|;
block|}
name|String
name|distType
init|=
name|dp
operator|.
name|getDistributionType
argument_list|()
operator|.
name|getLabel
argument_list|()
decl_stmt|;
name|String
name|prefLevel
init|=
name|dp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefName
argument_list|()
decl_stmt|;
name|String
name|onClick
init|=
literal|null
decl_stmt|;
name|tbl
operator|.
name|addLine
argument_list|(
name|onClick
argument_list|,
operator|new
name|String
index|[]
block|{
name|prefLevel
block|,
name|distType
block|,
name|groupingText
block|,
name|ownerType
block|,
name|objStr
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|prefLevel
block|,
name|distType
block|,
name|groupingCmp
block|,
name|ownerType
block|,
name|objStr
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nrPrefs
operator|==
literal|0
condition|)
name|tbl
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"No preferences found"
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|FileOutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|File
name|file
init|=
name|ApplicationProperties
operator|.
name|getTempFile
argument_list|(
literal|"distpref"
argument_list|,
literal|"pdf"
argument_list|)
decl_stmt|;
name|int
name|ord
init|=
name|WebTable
operator|.
name|getOrder
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|,
literal|"distPrefsTable.ord"
argument_list|)
decl_stmt|;
name|ord
operator|=
operator|(
name|ord
operator|>
literal|0
condition|?
literal|1
else|:
operator|-
literal|1
operator|)
operator|*
operator|(
literal|1
operator|+
name|Math
operator|.
name|abs
argument_list|(
name|ord
argument_list|)
operator|)
expr_stmt|;
name|PdfPTable
name|table
init|=
name|tbl
operator|.
name|printPdfTable
argument_list|(
name|ord
argument_list|)
decl_stmt|;
name|float
name|width
init|=
name|tbl
operator|.
name|getWidth
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|(
operator|new
name|Rectangle
argument_list|(
literal|60f
operator|+
name|width
argument_list|,
literal|60f
operator|+
literal|1.30f
operator|*
name|width
argument_list|)
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|)
decl_stmt|;
name|out
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|PdfWriter
name|iWriter
init|=
name|PdfWriter
operator|.
name|getInstance
argument_list|(
name|doc
argument_list|,
name|out
argument_list|)
decl_stmt|;
name|iWriter
operator|.
name|setPageEvent
argument_list|(
operator|new
name|PdfEventHandler
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|open
argument_list|()
expr_stmt|;
if|if
condition|(
name|tbl
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Paragraph
argument_list|(
name|tbl
operator|.
name|getName
argument_list|()
argument_list|,
name|PdfFont
operator|.
name|getBigFont
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|doc
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|file
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

