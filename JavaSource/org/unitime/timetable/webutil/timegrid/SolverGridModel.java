begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|timegrid
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CurriculumDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|DepartmentSpreadConstraint
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|DiscouragedRoomConstraint
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|GroupConstraint
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|InstructorConstraint
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|RoomConstraint
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|criteria
operator|.
name|TooBigRooms
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Lecture
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Placement
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|RoomSharingModel
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|model
operator|.
name|Constraint
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|solver
operator|.
name|Solver
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|SolverGridModel
extends|extends
name|TimetableGridModel
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|transient
name|Long
name|iRoomId
init|=
literal|null
decl_stmt|;
specifier|public
name|SolverGridModel
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|SolverGridModel
parameter_list|(
name|Solver
name|solver
parameter_list|,
name|RoomConstraint
name|room
parameter_list|,
name|int
name|firstDay
parameter_list|,
name|int
name|bgMode
parameter_list|,
name|boolean
name|showEvents
parameter_list|)
block|{
name|super
argument_list|(
name|sResourceTypeRoom
argument_list|,
name|room
operator|.
name|getResourceId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|room
operator|instanceof
name|DiscouragedRoomConstraint
condition|)
name|setName
argument_list|(
literal|"<span style='color:"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
operator|+
literal|"'>"
operator|+
name|room
operator|.
name|getRoomName
argument_list|()
operator|+
literal|"</span>"
argument_list|)
expr_stmt|;
else|else
name|setName
argument_list|(
name|room
operator|.
name|getRoomName
argument_list|()
argument_list|)
expr_stmt|;
name|setSize
argument_list|(
name|room
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|setType
argument_list|(
name|room
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|setFirstDay
argument_list|(
name|firstDay
argument_list|)
expr_stmt|;
name|iRoomId
operator|=
name|room
operator|.
name|getResourceId
argument_list|()
expr_stmt|;
if|if
condition|(
name|firstDay
operator|<
literal|0
condition|)
block|{
name|Vector
name|placements
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|Lecture
name|lecture
range|:
name|room
operator|.
name|assignedVariables
argument_list|()
control|)
block|{
name|Placement
name|placement
init|=
operator|(
name|Placement
operator|)
name|lecture
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|placement
operator|.
name|hasRoomLocation
argument_list|(
name|iRoomId
argument_list|)
condition|)
name|placements
operator|.
name|add
argument_list|(
name|placement
argument_list|)
expr_stmt|;
block|}
name|init
argument_list|(
name|solver
argument_list|,
name|placements
argument_list|,
name|bgMode
argument_list|,
name|firstDay
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|init
argument_list|(
name|solver
argument_list|,
name|room
operator|.
name|getResourceOfWeek
argument_list|(
name|firstDay
argument_list|)
argument_list|,
name|bgMode
argument_list|)
expr_stmt|;
block|}
name|HashSet
name|deptIds
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|String
name|deptIdsStr
init|=
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"General.DepartmentIds"
argument_list|)
decl_stmt|;
if|if
condition|(
name|deptIdsStr
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|StringTokenizer
name|stk
init|=
operator|new
name|StringTokenizer
argument_list|(
name|deptIdsStr
argument_list|,
literal|","
argument_list|)
init|;
name|stk
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|deptIds
operator|.
name|add
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|stk
operator|.
name|nextToken
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|HashSet
name|done
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|RoomSharingModel
name|sharing
init|=
name|room
operator|.
name|getSharingModel
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|DAY_CODES
operator|.
name|length
condition|;
name|i
operator|++
control|)
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|Constants
operator|.
name|SLOTS_PER_DAY
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|sharing
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sharing
operator|.
name|isNotAvailable
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
condition|)
block|{
name|setAvailable
argument_list|(
name|i
argument_list|,
name|j
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Long
name|dept
init|=
name|sharing
operator|.
name|getDepartmentId
argument_list|(
name|i
operator|*
name|Constants
operator|.
name|SLOTS_PER_DAY
operator|+
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|dept
operator|!=
literal|null
operator|&&
operator|!
name|deptIds
operator|.
name|contains
argument_list|(
name|dept
argument_list|)
condition|)
block|{
name|setAvailable
argument_list|(
name|i
argument_list|,
name|j
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|List
argument_list|<
name|Placement
argument_list|>
name|placements
init|=
operator|(
name|room
operator|.
name|getAvailableArray
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|room
operator|.
name|getAvailableArray
argument_list|()
index|[
name|i
operator|*
name|Constants
operator|.
name|SLOTS_PER_DAY
operator|+
name|j
index|]
operator|)
decl_stmt|;
if|if
condition|(
name|placements
operator|!=
literal|null
operator|&&
operator|!
name|placements
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Placement
name|p
range|:
name|placements
control|)
block|{
if|if
condition|(
operator|(
name|showEvents
operator|||
name|p
operator|.
name|getAssignmentId
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
name|done
operator|.
name|add
argument_list|(
name|p
argument_list|)
condition|)
name|init
argument_list|(
name|solver
argument_list|,
name|p
argument_list|,
name|sBgModeNotAvailable
argument_list|,
name|firstDay
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|SolverGridModel
parameter_list|(
name|Solver
name|solver
parameter_list|,
name|InstructorConstraint
name|instructor
parameter_list|,
name|int
name|firstDay
parameter_list|,
name|int
name|bgMode
parameter_list|)
block|{
name|super
argument_list|(
name|sResourceTypeInstructor
argument_list|,
name|instructor
operator|.
name|getResourceId
argument_list|()
argument_list|)
expr_stmt|;
name|setName
argument_list|(
name|instructor
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|setType
argument_list|(
name|instructor
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|setFirstDay
argument_list|(
name|firstDay
argument_list|)
expr_stmt|;
if|if
condition|(
name|firstDay
operator|<
literal|0
condition|)
block|{
name|Vector
name|placements
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|Lecture
name|lecture
range|:
name|instructor
operator|.
name|assignedVariables
argument_list|()
control|)
block|{
name|placements
operator|.
name|add
argument_list|(
name|lecture
operator|.
name|getAssignment
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|init
argument_list|(
name|solver
argument_list|,
name|placements
argument_list|,
name|bgMode
argument_list|,
name|firstDay
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|init
argument_list|(
name|solver
argument_list|,
name|instructor
operator|.
name|getResourceOfWeek
argument_list|(
name|firstDay
argument_list|)
argument_list|,
name|bgMode
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|instructor
operator|.
name|getUnavailabilities
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Placement
name|p
range|:
name|instructor
operator|.
name|getUnavailabilities
argument_list|()
control|)
block|{
name|init
argument_list|(
name|solver
argument_list|,
name|p
argument_list|,
name|sBgModeNotAvailable
argument_list|,
name|firstDay
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|SolverGridModel
parameter_list|(
name|Solver
name|solver
parameter_list|,
name|DepartmentSpreadConstraint
name|dept
parameter_list|,
name|int
name|firstDay
parameter_list|,
name|int
name|bgMode
parameter_list|)
block|{
name|super
argument_list|(
name|sResourceTypeInstructor
argument_list|,
name|dept
operator|.
name|getDepartmentId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|setName
argument_list|(
name|dept
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|setSize
argument_list|(
name|dept
operator|.
name|variables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|setFirstDay
argument_list|(
name|firstDay
argument_list|)
expr_stmt|;
name|Vector
name|placements
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|Lecture
name|lecture
range|:
name|dept
operator|.
name|assignedVariables
argument_list|()
control|)
block|{
name|Placement
name|placement
init|=
operator|(
name|Placement
operator|)
name|lecture
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
name|placements
operator|.
name|add
argument_list|(
name|placement
argument_list|)
expr_stmt|;
block|}
name|init
argument_list|(
name|solver
argument_list|,
name|placements
argument_list|,
name|bgMode
argument_list|,
name|firstDay
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SolverGridModel
parameter_list|(
name|Solver
name|solver
parameter_list|,
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|Student
argument_list|>
name|students
parameter_list|,
name|int
name|firstDay
parameter_list|,
name|int
name|bgMode
parameter_list|)
block|{
name|super
argument_list|(
name|sResourceTypeCurriculum
argument_list|,
operator|-
literal|1l
argument_list|)
expr_stmt|;
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|setFirstDay
argument_list|(
name|firstDay
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|groups
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|CurriculumDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c.course.instructionalOffering.uniqueId, g.name from CurriculumCourse c inner join c.groups g where "
operator|+
literal|"c.classification.curriculum.abbv || ' ' || c.classification.academicClassification.code = :name and "
operator|+
literal|"c.classification.curriculum.department.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyLong
argument_list|(
literal|"General.SessionId"
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Long
name|courseId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|String
name|group
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|String
name|old
init|=
name|groups
operator|.
name|get
argument_list|(
name|courseId
argument_list|)
decl_stmt|;
name|groups
operator|.
name|put
argument_list|(
name|courseId
argument_list|,
operator|(
name|old
operator|==
literal|null
condition|?
literal|""
else|:
name|old
operator|+
literal|", "
operator|)
operator|+
name|group
argument_list|)
expr_stmt|;
block|}
name|double
name|size
init|=
literal|0
decl_stmt|;
name|Hashtable
argument_list|<
name|Placement
argument_list|,
name|Double
argument_list|>
name|placements
init|=
operator|new
name|Hashtable
argument_list|<
name|Placement
argument_list|,
name|Double
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Student
name|student
range|:
name|students
control|)
block|{
name|int
name|cnt
init|=
literal|0
decl_stmt|;
name|double
name|w
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Lecture
name|lecture
range|:
name|student
operator|.
name|getLectures
argument_list|()
control|)
block|{
name|w
operator|+=
name|student
operator|.
name|getOfferingWeight
argument_list|(
name|lecture
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|cnt
operator|++
expr_stmt|;
if|if
condition|(
name|lecture
operator|.
name|getAssignment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Double
name|old
init|=
name|placements
operator|.
name|get
argument_list|(
name|lecture
operator|.
name|getAssignment
argument_list|()
argument_list|)
decl_stmt|;
name|placements
operator|.
name|put
argument_list|(
name|lecture
operator|.
name|getAssignment
argument_list|()
argument_list|,
name|student
operator|.
name|getOfferingWeight
argument_list|(
name|lecture
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|+
operator|(
name|old
operator|==
literal|null
condition|?
literal|0
else|:
name|old
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|student
operator|.
name|getCommitedPlacements
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|Placement
name|placement
range|:
name|student
operator|.
name|getCommitedPlacements
argument_list|()
control|)
block|{
name|w
operator|+=
name|student
operator|.
name|getOfferingWeight
argument_list|(
name|placement
operator|.
name|variable
argument_list|()
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|cnt
operator|++
expr_stmt|;
name|Double
name|old
init|=
name|placements
operator|.
name|get
argument_list|(
name|placement
argument_list|)
decl_stmt|;
name|placements
operator|.
name|put
argument_list|(
name|placement
argument_list|,
name|student
operator|.
name|getOfferingWeight
argument_list|(
name|placement
operator|.
name|variable
argument_list|()
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|+
operator|(
name|old
operator|==
literal|null
condition|?
literal|0
else|:
name|old
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cnt
operator|>
literal|0
condition|)
name|size
operator|+=
name|w
operator|/
name|cnt
expr_stmt|;
block|}
name|setSize
argument_list|(
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|size
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Placement
argument_list|,
name|Double
argument_list|>
name|entry
range|:
name|placements
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|TimetableGridCell
name|cell
init|=
name|init
argument_list|(
name|solver
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|variable
argument_list|()
operator|.
name|isCommitted
argument_list|()
condition|?
name|sBgModeNotAvailable
else|:
name|bgMode
operator|)
argument_list|,
name|firstDay
argument_list|)
decl_stmt|;
name|String
name|group
init|=
operator|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|variable
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|groups
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|variable
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getOfferingId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
while|while
condition|(
name|cell
operator|!=
literal|null
condition|)
block|{
name|cell
operator|.
name|setRoomName
argument_list|(
name|cell
operator|.
name|getRoomName
argument_list|()
operator|+
literal|" ("
operator|+
name|Math
operator|.
name|round
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|+
operator|(
name|group
operator|==
literal|null
condition|?
literal|""
else|:
literal|", "
operator|+
name|group
operator|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|cell
operator|=
name|cell
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|init
parameter_list|(
name|Solver
name|solver
parameter_list|,
name|Placement
index|[]
name|resource
parameter_list|,
name|int
name|bgMode
parameter_list|)
block|{
name|Hashtable
name|processed
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|DAY_CODES
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|Constants
operator|.
name|SLOTS_PER_DAY
condition|;
name|j
operator|++
control|)
block|{
name|Placement
name|placement
init|=
name|resource
index|[
name|i
operator|*
name|Constants
operator|.
name|SLOTS_PER_DAY
operator|+
name|j
index|]
decl_stmt|;
if|if
condition|(
name|placement
operator|==
literal|null
condition|)
continue|continue;
name|Lecture
name|lecture
init|=
operator|(
name|Lecture
operator|)
name|placement
operator|.
name|variable
argument_list|()
decl_stmt|;
if|if
condition|(
name|lecture
operator|.
name|isCommitted
argument_list|()
condition|)
continue|continue;
name|TimetableGridCell
name|cell
init|=
operator|(
name|TimetableGridCell
operator|)
name|processed
operator|.
name|get
argument_list|(
name|lecture
argument_list|)
decl_stmt|;
if|if
condition|(
name|cell
operator|==
literal|null
condition|)
name|cell
operator|=
name|createCell
argument_list|(
name|solver
argument_list|,
name|i
argument_list|,
name|j
argument_list|,
name|lecture
argument_list|,
name|placement
argument_list|,
name|bgMode
argument_list|)
expr_stmt|;
else|else
name|cell
operator|=
name|cell
operator|.
name|copyCell
argument_list|(
name|i
argument_list|,
name|cell
operator|.
name|getMeetingNumber
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|processed
operator|.
name|put
argument_list|(
name|lecture
argument_list|,
name|cell
argument_list|)
expr_stmt|;
name|addCell
argument_list|(
name|i
argument_list|,
name|j
argument_list|,
name|cell
argument_list|)
expr_stmt|;
name|j
operator|+=
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getNrSlotsPerMeeting
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|init
parameter_list|(
name|Solver
name|solver
parameter_list|,
name|Collection
argument_list|<
name|Placement
argument_list|>
name|placements
parameter_list|,
name|int
name|bgMode
parameter_list|,
name|int
name|firstDay
parameter_list|)
block|{
for|for
control|(
name|Placement
name|placement
range|:
name|placements
control|)
block|{
if|if
condition|(
name|placement
operator|.
name|variable
argument_list|()
operator|.
name|isCommitted
argument_list|()
condition|)
continue|continue;
name|init
argument_list|(
name|solver
argument_list|,
name|placement
argument_list|,
name|bgMode
argument_list|,
name|firstDay
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|TimetableGridCell
name|init
parameter_list|(
name|Solver
name|solver
parameter_list|,
name|Placement
name|placement
parameter_list|,
name|int
name|bgMode
parameter_list|,
name|int
name|firstDay
parameter_list|)
block|{
name|TimetableGridCell
name|cell
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|Integer
argument_list|>
name|f
init|=
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getStartSlots
argument_list|()
init|;
name|f
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|int
name|slot
init|=
name|f
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|firstDay
operator|>=
literal|0
operator|&&
operator|!
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getWeekCode
argument_list|()
operator|.
name|get
argument_list|(
name|firstDay
operator|+
operator|(
name|slot
operator|/
name|Constants
operator|.
name|SLOTS_PER_DAY
operator|)
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|cell
operator|==
literal|null
condition|)
block|{
name|cell
operator|=
name|createCell
argument_list|(
name|solver
argument_list|,
name|slot
operator|/
name|Constants
operator|.
name|SLOTS_PER_DAY
argument_list|,
name|slot
operator|%
name|Constants
operator|.
name|SLOTS_PER_DAY
argument_list|,
operator|(
name|Lecture
operator|)
name|placement
operator|.
name|variable
argument_list|()
argument_list|,
name|placement
argument_list|,
name|bgMode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cell
operator|=
name|cell
operator|.
name|copyCell
argument_list|(
name|slot
operator|/
name|Constants
operator|.
name|SLOTS_PER_DAY
argument_list|,
name|cell
operator|.
name|getMeetingNumber
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|addCell
argument_list|(
name|slot
argument_list|,
name|cell
argument_list|)
expr_stmt|;
block|}
return|return
name|cell
return|;
block|}
specifier|public
specifier|static
name|String
name|hardConflicts2pref
parameter_list|(
name|Lecture
name|lecture
parameter_list|,
name|Placement
name|placement
parameter_list|)
block|{
if|if
condition|(
name|lecture
operator|.
name|isCommitted
argument_list|()
condition|)
return|return
name|PreferenceLevel
operator|.
name|sRequired
return|;
if|if
condition|(
name|placement
operator|==
literal|null
condition|)
block|{
name|boolean
name|hasNoConf
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Placement
name|p
range|:
name|lecture
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|.
name|isHard
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|lecture
operator|.
name|getModel
argument_list|()
operator|.
name|conflictValues
argument_list|(
name|p
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|hasNoConf
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|lecture
operator|.
name|nrTimeLocations
argument_list|()
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|lecture
operator|.
name|nrRoomLocations
argument_list|()
operator|==
literal|1
condition|)
return|return
name|PreferenceLevel
operator|.
name|sRequired
return|;
else|else
return|return
operator|(
name|hasNoConf
condition|?
name|PreferenceLevel
operator|.
name|sDiscouraged
else|:
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
operator|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|lecture
operator|.
name|nrRoomLocations
argument_list|()
operator|==
literal|1
condition|)
return|return
operator|(
name|hasNoConf
condition|?
name|PreferenceLevel
operator|.
name|sStronglyPreferred
else|:
name|PreferenceLevel
operator|.
name|sNeutral
operator|)
return|;
else|else
return|return
operator|(
name|hasNoConf
condition|?
name|PreferenceLevel
operator|.
name|sStronglyPreferred
else|:
name|PreferenceLevel
operator|.
name|sPreferred
operator|)
return|;
block|}
block|}
if|if
condition|(
name|lecture
operator|.
name|values
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
return|return
name|PreferenceLevel
operator|.
name|sRequired
return|;
name|boolean
name|hasTime
init|=
literal|false
decl_stmt|;
name|boolean
name|hasRoom
init|=
literal|false
decl_stmt|;
name|boolean
name|hasTimeNoConf
init|=
literal|false
decl_stmt|;
name|boolean
name|hasRoomNoConf
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Placement
name|p
range|:
name|lecture
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|.
name|equals
argument_list|(
name|placement
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|p
operator|.
name|isHard
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|p
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|equals
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
argument_list|)
condition|)
block|{
name|hasTime
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|hasTimeNoConf
condition|)
block|{
name|Set
name|conf
init|=
name|lecture
operator|.
name|getModel
argument_list|()
operator|.
name|conflictValues
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|isEmpty
argument_list|()
operator|||
operator|(
name|conf
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|conf
operator|.
name|contains
argument_list|(
name|placement
argument_list|)
operator|)
condition|)
name|hasTimeNoConf
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|p
operator|.
name|sameRooms
argument_list|(
name|placement
argument_list|)
condition|)
block|{
name|hasRoom
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|hasRoomNoConf
condition|)
block|{
name|Set
name|conf
init|=
name|lecture
operator|.
name|getModel
argument_list|()
operator|.
name|conflictValues
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|isEmpty
argument_list|()
operator|||
operator|(
name|conf
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|conf
operator|.
name|contains
argument_list|(
name|placement
argument_list|)
operator|)
condition|)
name|hasRoomNoConf
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|hasRoomNoConf
operator|&&
name|hasTimeNoConf
condition|)
break|break;
block|}
if|if
condition|(
name|hasTimeNoConf
condition|)
return|return
name|PreferenceLevel
operator|.
name|sStronglyPreferred
return|;
if|if
condition|(
name|hasTime
operator|&&
name|hasRoomNoConf
condition|)
return|return
name|PreferenceLevel
operator|.
name|sPreferred
return|;
if|if
condition|(
name|hasTime
condition|)
return|return
name|PreferenceLevel
operator|.
name|sNeutral
return|;
if|if
condition|(
name|hasRoomNoConf
condition|)
return|return
name|PreferenceLevel
operator|.
name|sDiscouraged
return|;
if|if
condition|(
name|hasRoom
condition|)
return|return
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
return|;
return|return
name|PreferenceLevel
operator|.
name|sRequired
return|;
block|}
specifier|private
name|TimetableGridCell
name|createCell
parameter_list|(
name|Solver
name|solver
parameter_list|,
name|int
name|day
parameter_list|,
name|int
name|slot
parameter_list|,
name|Lecture
name|lecture
parameter_list|,
name|Placement
name|placement
parameter_list|,
name|int
name|bgMode
parameter_list|)
block|{
name|String
name|name
init|=
name|lecture
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|title
init|=
literal|""
decl_stmt|;
name|int
name|length
init|=
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getNrSlotsPerMeeting
argument_list|()
decl_stmt|;
name|int
name|nrMeetings
init|=
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getNrMeetings
argument_list|()
decl_stmt|;
name|String
name|shortComment
init|=
literal|null
decl_stmt|;
name|String
name|shortCommentNoColor
init|=
literal|null
decl_stmt|;
name|String
name|onClick
init|=
literal|"showGwtDialog('Suggestions', 'suggestions.do?id="
operator|+
name|lecture
operator|.
name|getClassId
argument_list|()
operator|+
literal|"&op=Reset','900','90%');"
decl_stmt|;
name|String
name|background
init|=
name|TimetableGridCell
operator|.
name|sBgColorNeutral
decl_stmt|;
name|DecimalFormat
name|df
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0.0"
argument_list|)
decl_stmt|;
if|if
condition|(
name|bgMode
operator|==
name|sBgModeNotAvailable
condition|)
name|background
operator|=
name|TimetableGridCell
operator|.
name|sBgColorNotAvailable
expr_stmt|;
name|int
name|studConf
init|=
name|lecture
operator|.
name|countStudentConflicts
argument_list|(
name|placement
argument_list|)
operator|+
name|lecture
operator|.
name|getCommitedConflicts
argument_list|(
name|placement
argument_list|)
decl_stmt|;
name|double
name|penalty
init|=
literal|0.0
decl_stmt|;
if|if
condition|(
name|solver
operator|.
name|getPerturbationsCounter
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|penalty
operator|=
name|solver
operator|.
name|getPerturbationsCounter
argument_list|()
operator|.
name|getPerturbationPenalty
argument_list|(
name|solver
operator|.
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|,
name|placement
argument_list|,
operator|new
name|Vector
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|DepartmentSpreadConstraint
name|deptConstraint
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Constraint
name|c
range|:
name|lecture
operator|.
name|constraints
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|instanceof
name|DepartmentSpreadConstraint
condition|)
block|{
name|deptConstraint
operator|=
operator|(
name|DepartmentSpreadConstraint
operator|)
name|c
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|bgMode
operator|==
name|sBgModeTimePref
condition|)
block|{
name|int
name|pref
init|=
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getPreference
argument_list|()
decl_stmt|;
if|if
condition|(
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|int2prolog
argument_list|(
name|pref
argument_list|)
argument_list|)
operator|&&
name|lecture
operator|.
name|nrTimeLocations
argument_list|()
operator|==
literal|1
condition|)
name|pref
operator|=
name|PreferenceLevel
operator|.
name|sIntLevelRequired
expr_stmt|;
name|background
operator|=
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|pref
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|bgMode
operator|==
name|sBgModeRoomPref
condition|)
block|{
name|int
name|pref
init|=
operator|(
name|iRoomId
operator|==
literal|null
condition|?
name|placement
operator|.
name|getRoomPreference
argument_list|()
else|:
name|placement
operator|.
name|getRoomLocation
argument_list|(
name|iRoomId
argument_list|)
operator|.
name|getPreference
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|int2prolog
argument_list|(
name|pref
argument_list|)
argument_list|)
operator|&&
name|lecture
operator|.
name|nrRoomLocations
argument_list|()
operator|==
name|lecture
operator|.
name|getNrRooms
argument_list|()
condition|)
name|pref
operator|=
name|PreferenceLevel
operator|.
name|sIntLevelRequired
expr_stmt|;
name|background
operator|=
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|pref
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|bgMode
operator|==
name|sBgModeStudentConf
condition|)
block|{
name|background
operator|=
name|TimetableGridCell
operator|.
name|conflicts2color
argument_list|(
name|studConf
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|bgMode
operator|==
name|sBgModeInstructorBtbPref
condition|)
block|{
name|int
name|pref
init|=
literal|0
decl_stmt|;
for|for
control|(
name|InstructorConstraint
name|ic
range|:
name|lecture
operator|.
name|getInstructorConstraints
argument_list|()
control|)
block|{
name|pref
operator|+=
name|ic
operator|.
name|getPreferenceCombination
argument_list|(
name|placement
argument_list|)
expr_stmt|;
block|}
name|background
operator|=
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|pref
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|bgMode
operator|==
name|sBgModePerturbations
condition|)
block|{
name|String
name|pref
init|=
name|PreferenceLevel
operator|.
name|sNeutral
decl_stmt|;
if|if
condition|(
name|lecture
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|placement
operator|.
name|equals
argument_list|(
name|lecture
operator|.
name|getInitialAssignment
argument_list|()
argument_list|)
condition|)
name|pref
operator|=
name|PreferenceLevel
operator|.
name|sStronglyPreferred
expr_stmt|;
if|else if
condition|(
name|placement
operator|.
name|sameTime
argument_list|(
operator|(
name|Placement
operator|)
name|lecture
operator|.
name|getInitialAssignment
argument_list|()
argument_list|)
condition|)
name|pref
operator|=
name|PreferenceLevel
operator|.
name|sDiscouraged
expr_stmt|;
if|else if
condition|(
name|placement
operator|.
name|sameRooms
argument_list|(
operator|(
name|Placement
operator|)
name|lecture
operator|.
name|getInitialAssignment
argument_list|()
argument_list|)
condition|)
name|pref
operator|=
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
expr_stmt|;
else|else
name|pref
operator|=
name|PreferenceLevel
operator|.
name|sProhibited
expr_stmt|;
block|}
name|background
operator|=
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|pref
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|bgMode
operator|==
name|sBgModePerturbationPenalty
condition|)
block|{
name|background
operator|=
name|TimetableGridCell
operator|.
name|conflicts2color
argument_list|(
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|penalty
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|bgMode
operator|==
name|sBgModeHardConflicts
condition|)
block|{
name|background
operator|=
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|hardConflicts2pref
argument_list|(
name|lecture
argument_list|,
name|placement
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|bgMode
operator|==
name|sBgModeDepartmentalBalancing
condition|)
block|{
if|if
condition|(
name|deptConstraint
operator|!=
literal|null
condition|)
name|background
operator|=
name|TimetableGridCell
operator|.
name|conflicts2colorFast
argument_list|(
name|deptConstraint
operator|.
name|getMaxPenalty
argument_list|(
name|placement
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|bgMode
operator|==
name|sBgModeTooBigRooms
condition|)
block|{
name|long
name|minRoomSize
init|=
name|lecture
operator|.
name|minRoomSize
argument_list|()
decl_stmt|;
name|int
name|roomSize
init|=
name|placement
operator|.
name|getRoomSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|roomSize
operator|<
name|lecture
operator|.
name|minRoomSize
argument_list|()
condition|)
name|background
operator|=
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
expr_stmt|;
else|else
name|background
operator|=
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|TooBigRooms
operator|.
name|getTooBigRoomPreference
argument_list|(
name|placement
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|lecture
operator|.
name|getNrRooms
argument_list|()
operator|>
literal|0
condition|)
block|{
name|shortComment
operator|=
literal|"<span style='color:rgb(200,200,200)'>"
operator|+
operator|(
name|lecture
operator|.
name|nrRoomLocations
argument_list|()
operator|==
literal|1
condition|?
literal|"<u>"
else|:
literal|""
operator|)
operator|+
name|lecture
operator|.
name|minRoomUse
argument_list|()
operator|+
operator|(
name|lecture
operator|.
name|maxRoomUse
argument_list|()
operator|!=
name|lecture
operator|.
name|minRoomUse
argument_list|()
condition|?
literal|" - "
operator|+
name|lecture
operator|.
name|maxRoomUse
argument_list|()
else|:
literal|""
operator|)
operator|+
literal|" / "
operator|+
name|minRoomSize
operator|+
literal|" / "
operator|+
name|roomSize
operator|+
operator|(
name|lecture
operator|.
name|nrRoomLocations
argument_list|()
operator|==
literal|1
condition|?
literal|"</u>"
else|:
literal|""
operator|)
operator|+
literal|"</span>"
expr_stmt|;
name|shortCommentNoColor
operator|=
name|lecture
operator|.
name|minRoomUse
argument_list|()
operator|+
operator|(
name|lecture
operator|.
name|maxRoomUse
argument_list|()
operator|!=
name|lecture
operator|.
name|minRoomUse
argument_list|()
condition|?
literal|" - "
operator|+
name|lecture
operator|.
name|maxRoomUse
argument_list|()
else|:
literal|""
operator|)
operator|+
literal|" / "
operator|+
name|minRoomSize
operator|+
literal|" / "
operator|+
name|roomSize
expr_stmt|;
block|}
block|}
if|if
condition|(
name|bgMode
operator|!=
name|sBgModeNotAvailable
condition|)
block|{
name|int
name|roomPref
init|=
operator|(
name|iRoomId
operator|==
literal|null
condition|?
name|placement
operator|.
name|getRoomPreference
argument_list|()
else|:
name|placement
operator|.
name|getRoomLocation
argument_list|(
name|iRoomId
argument_list|)
operator|.
name|getPreference
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|shortComment
operator|==
literal|null
condition|)
name|shortComment
operator|=
literal|"<span style='color:rgb(200,200,200)'>"
operator|+
operator|(
name|lecture
operator|.
name|getBestTimePreference
argument_list|()
operator|<
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getNormalizedPreference
argument_list|()
condition|?
literal|"<span style='color:red'>"
operator|+
operator|(
name|int
operator|)
operator|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getNormalizedPreference
argument_list|()
operator|-
name|lecture
operator|.
name|getBestTimePreference
argument_list|()
operator|)
operator|+
literal|"</span>"
else|:
literal|""
operator|+
operator|(
name|int
operator|)
operator|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getNormalizedPreference
argument_list|()
operator|-
name|lecture
operator|.
name|getBestTimePreference
argument_list|()
operator|)
operator|)
operator|+
literal|", "
operator|+
operator|(
name|studConf
operator|>
literal|0
condition|?
literal|"<span style='color:rgb(20,130,10)'>"
operator|+
name|studConf
operator|+
literal|"</span>"
else|:
literal|""
operator|+
name|studConf
operator|)
operator|+
literal|", "
operator|+
operator|(
name|lecture
operator|.
name|getBestRoomPreference
argument_list|()
operator|<
name|roomPref
condition|?
literal|"<span style='color:blue'>"
operator|+
operator|(
name|roomPref
operator|-
name|lecture
operator|.
name|getBestRoomPreference
argument_list|()
operator|)
operator|+
literal|"</span>"
else|:
literal|""
operator|+
operator|(
name|roomPref
operator|-
name|lecture
operator|.
name|getBestRoomPreference
argument_list|()
operator|)
operator|)
operator|+
literal|"</span>"
expr_stmt|;
if|if
condition|(
name|shortCommentNoColor
operator|==
literal|null
condition|)
name|shortCommentNoColor
operator|=
operator|(
name|int
operator|)
operator|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getNormalizedPreference
argument_list|()
operator|-
name|lecture
operator|.
name|getBestTimePreference
argument_list|()
operator|)
operator|+
literal|", "
operator|+
name|studConf
operator|+
literal|", "
operator|+
operator|(
name|roomPref
operator|-
name|lecture
operator|.
name|getBestRoomPreference
argument_list|()
operator|)
expr_stmt|;
name|int
name|btbInstrPref
init|=
literal|0
decl_stmt|;
for|for
control|(
name|InstructorConstraint
name|ic
range|:
name|lecture
operator|.
name|getInstructorConstraints
argument_list|()
control|)
block|{
name|btbInstrPref
operator|+=
name|ic
operator|.
name|getPreferenceCombination
argument_list|(
name|placement
argument_list|)
expr_stmt|;
block|}
name|title
operator|=
literal|"Time preference: "
operator|+
operator|(
name|int
operator|)
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getNormalizedPreference
argument_list|()
operator|+
literal|"<br>"
operator|+
literal|"Student conflicts: "
operator|+
operator|(
name|lecture
operator|.
name|countStudentConflicts
argument_list|(
name|placement
argument_list|)
operator|+
name|lecture
operator|.
name|getCommitedConflicts
argument_list|(
name|placement
argument_list|)
operator|)
operator|+
literal|" [committed:"
operator|+
operator|(
name|lecture
operator|.
name|countCommittedStudentConflicts
argument_list|(
name|placement
argument_list|)
operator|+
name|lecture
operator|.
name|getCommitedConflicts
argument_list|(
name|placement
argument_list|)
operator|)
operator|+
literal|", distance:"
operator|+
name|lecture
operator|.
name|countDistanceStudentConflicts
argument_list|(
name|placement
argument_list|)
operator|+
literal|", hard:"
operator|+
name|lecture
operator|.
name|countHardStudentConflicts
argument_list|(
name|placement
argument_list|)
operator|+
literal|"]<br>"
operator|+
literal|"Room preference: "
operator|+
name|roomPref
operator|+
operator|(
name|lecture
operator|.
name|getInstructorConstraints
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"<br>Back-to-back instructor pref.: "
operator|+
name|btbInstrPref
operator|)
operator|+
operator|(
name|lecture
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
condition|?
literal|"<br>Initial assignment: "
operator|+
operator|(
name|lecture
operator|.
name|getInitialAssignment
argument_list|()
operator|.
name|equals
argument_list|(
name|placement
argument_list|)
condition|?
literal|"<i>current assignment</i>"
else|:
name|lecture
operator|.
name|getInitialAssignment
argument_list|()
operator|.
name|getName
argument_list|()
operator|)
else|:
literal|""
operator|)
operator|+
operator|(
name|lecture
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
condition|?
literal|"<br>Perturbation penalty: "
operator|+
name|df
operator|.
name|format
argument_list|(
name|penalty
argument_list|)
else|:
literal|""
operator|)
operator|+
operator|(
name|deptConstraint
operator|==
literal|null
condition|?
literal|""
else|:
literal|"<br>Department balance: "
operator|+
name|deptConstraint
operator|.
name|getMaxPenalty
argument_list|(
name|placement
argument_list|)
operator|)
expr_stmt|;
name|int
name|gcPref
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Constraint
name|c
range|:
name|lecture
operator|.
name|constraints
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|c
operator|instanceof
name|GroupConstraint
operator|)
condition|)
continue|continue;
name|GroupConstraint
name|gc
init|=
operator|(
name|GroupConstraint
operator|)
name|c
decl_stmt|;
if|if
condition|(
name|gc
operator|.
name|isHard
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|gc
operator|.
name|getPreference
argument_list|()
operator|>
literal|0
operator|&&
name|gc
operator|.
name|getCurrentPreference
argument_list|()
operator|==
literal|0
condition|)
continue|continue;
if|if
condition|(
name|gc
operator|.
name|getPreference
argument_list|()
operator|<
literal|0
operator|&&
name|gc
operator|.
name|getCurrentPreference
argument_list|()
operator|<
literal|0
condition|)
continue|continue;
name|gcPref
operator|=
name|Math
operator|.
name|max
argument_list|(
name|gcPref
argument_list|,
name|Math
operator|.
name|abs
argument_list|(
name|gc
operator|.
name|getPreference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|title
operator|=
name|title
operator|+
literal|"<br>Distribution preference: "
operator|+
name|gcPref
expr_stmt|;
if|if
condition|(
name|bgMode
operator|==
name|sBgModeDistributionConstPref
condition|)
name|background
operator|=
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|gcPref
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|TimetableGridCell
argument_list|(
name|day
argument_list|,
name|slot
argument_list|,
name|placement
operator|.
name|getId
argument_list|()
argument_list|,
operator|(
name|iRoomId
operator|==
literal|null
condition|?
literal|0
else|:
name|iRoomId
operator|)
argument_list|,
name|placement
operator|.
name|getRoomName
argument_list|(
literal|","
argument_list|)
argument_list|,
name|name
argument_list|,
name|shortComment
argument_list|,
name|shortCommentNoColor
argument_list|,
operator|(
name|bgMode
operator|==
name|sBgModeNotAvailable
condition|?
literal|null
else|:
name|onClick
operator|)
argument_list|,
name|title
argument_list|,
name|background
argument_list|,
name|length
argument_list|,
literal|0
argument_list|,
name|nrMeetings
argument_list|,
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|,
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getWeekCode
argument_list|()
argument_list|,
name|lecture
operator|.
name|getInstructorName
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

