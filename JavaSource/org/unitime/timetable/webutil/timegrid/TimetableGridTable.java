begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|timegrid
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|jsp
operator|.
name|JspWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|Web
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|Query
operator|.
name|TermMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|RoomAvailabilityInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|UserData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverPredefinedSetting
operator|.
name|IdValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SolutionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|SolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|WebSolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|DateUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|RoomAvailability
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|TimetableGridTable
block|{
specifier|private
specifier|static
name|SimpleDateFormat
name|sDF
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd/yy"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|int
name|sNrSlotsPerPeriod
init|=
literal|6
decl_stmt|;
comment|// Group slots into 30 minute periods.
specifier|public
specifier|static
specifier|final
name|int
name|sDaysAll
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sDaysAllExceptSat
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sDaysMon
init|=
literal|2
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sDaysTue
init|=
literal|3
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sDaysWed
init|=
literal|4
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sDaysThu
init|=
literal|5
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sDaysFri
init|=
literal|6
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sDaysSat
init|=
literal|7
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sDaysSun
init|=
literal|8
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sDaysMonThu
init|=
literal|9
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sDaysFriSat
init|=
literal|10
decl_stmt|;
specifier|public
specifier|static
name|String
index|[]
name|sDays
init|=
operator|new
name|String
index|[]
block|{
literal|"All"
block|,
literal|"All except Weekend"
block|,
literal|"Monday"
block|,
literal|"Tuesday"
block|,
literal|"Wednesday"
block|,
literal|"Thursday"
block|,
literal|"Friday"
block|,
literal|"Saturday"
block|,
literal|"Sunday"
block|,
literal|"Monday - Thursday"
block|,
literal|"Friday& Saturday"
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sDispModeInRow
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sDispModePerWeekHorizontal
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sDispModePerWeekVertical
init|=
literal|2
decl_stmt|;
specifier|public
specifier|static
name|String
index|[]
name|sDispModes
init|=
operator|new
name|String
index|[]
block|{
literal|"In Row [horizontal]"
block|,
literal|"Per Week [horizontal]"
block|,
literal|"Per Week [vertical]"
block|, 	}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sOrderByNameAsc
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sOrderByNameDesc
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sOrderBySizeAsc
init|=
literal|2
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sOrderBySizeDesc
init|=
literal|3
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sOrderByTypeAsc
init|=
literal|4
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sOrderByTypeDesc
init|=
literal|5
decl_stmt|;
specifier|public
specifier|static
name|String
index|[]
name|sOrderBy
init|=
operator|new
name|String
index|[]
block|{
literal|"Name [asc]"
block|,
literal|"Name [desc]"
block|,
literal|"Size [asc]"
block|,
literal|"Size [desc]"
block|,
literal|"Type [asc]"
block|,
literal|"Type [desc]"
block|}
decl_stmt|;
specifier|private
name|int
name|iDays
init|=
name|sDaysAllExceptSat
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sDayModeDay
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sDayModeEvening
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sDayModeDayEvening
init|=
literal|2
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sDayModeAll
init|=
literal|3
decl_stmt|;
specifier|public
specifier|static
name|String
index|[]
name|sDayMode
init|=
operator|new
name|String
index|[]
block|{
literal|"Daytime"
block|,
literal|"Evening"
block|,
literal|"Daytime& Evening"
block|,
literal|"All"
block|}
decl_stmt|;
specifier|private
name|int
name|iDayMode
init|=
name|sDayModeDay
decl_stmt|;
specifier|private
name|int
name|iDispMode
init|=
name|sDispModePerWeekHorizontal
decl_stmt|;
specifier|private
name|int
name|iBgMode
init|=
name|TimetableGridModel
operator|.
name|sBgModeNone
decl_stmt|;
name|Vector
name|iModels
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
specifier|private
name|int
name|iResourceType
init|=
name|TimetableGridModel
operator|.
name|sResourceTypeRoom
decl_stmt|;
specifier|private
name|String
name|iFindStr
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|iOrderBy
init|=
name|sOrderByNameAsc
decl_stmt|;
specifier|private
name|int
name|iWeek
init|=
operator|-
literal|100
decl_stmt|;
specifier|private
name|boolean
name|iShowUselessTimes
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|iShowInstructors
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|iShowEvents
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|iShowComments
init|=
literal|false
decl_stmt|;
specifier|private
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|Query
name|iQuery
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iDefaultDatePatternName
init|=
literal|null
decl_stmt|;
specifier|public
name|Vector
name|models
parameter_list|()
block|{
return|return
name|iModels
return|;
block|}
specifier|public
name|void
name|setDays
parameter_list|(
name|int
name|days
parameter_list|)
block|{
name|iDays
operator|=
name|days
expr_stmt|;
block|}
specifier|public
name|int
name|getDays
parameter_list|()
block|{
return|return
name|iDays
return|;
block|}
specifier|public
name|void
name|setDayMode
parameter_list|(
name|int
name|dayMode
parameter_list|)
block|{
name|iDayMode
operator|=
name|dayMode
expr_stmt|;
block|}
specifier|public
name|int
name|getDayMode
parameter_list|()
block|{
return|return
name|iDayMode
return|;
block|}
specifier|public
name|void
name|setDispMode
parameter_list|(
name|int
name|dispMode
parameter_list|)
block|{
name|iDispMode
operator|=
name|dispMode
expr_stmt|;
block|}
specifier|public
name|int
name|getDispMode
parameter_list|()
block|{
return|return
name|iDispMode
return|;
block|}
specifier|public
name|void
name|setBgMode
parameter_list|(
name|int
name|bgMode
parameter_list|)
block|{
name|iBgMode
operator|=
name|bgMode
expr_stmt|;
block|}
specifier|public
name|int
name|getBgMode
parameter_list|()
block|{
return|return
name|iBgMode
return|;
block|}
specifier|public
name|int
name|getResourceType
parameter_list|()
block|{
return|return
name|iResourceType
return|;
block|}
specifier|public
name|void
name|setResourceType
parameter_list|(
name|int
name|resourceType
parameter_list|)
block|{
name|iResourceType
operator|=
name|resourceType
expr_stmt|;
block|}
specifier|public
name|String
name|getFindString
parameter_list|()
block|{
return|return
name|iFindStr
return|;
block|}
specifier|public
name|void
name|setFindString
parameter_list|(
name|String
name|findSrt
parameter_list|)
block|{
name|iFindStr
operator|=
name|findSrt
expr_stmt|;
name|iQuery
operator|=
operator|(
name|findSrt
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|Query
argument_list|(
name|findSrt
argument_list|)
operator|)
expr_stmt|;
block|}
specifier|public
name|int
name|getOrderBy
parameter_list|()
block|{
return|return
name|iOrderBy
return|;
block|}
specifier|public
name|void
name|setOrderBy
parameter_list|(
name|int
name|orderBy
parameter_list|)
block|{
name|iOrderBy
operator|=
name|orderBy
expr_stmt|;
block|}
specifier|public
name|int
name|getWeek
parameter_list|()
block|{
return|return
name|iWeek
return|;
block|}
specifier|public
name|void
name|setWeek
parameter_list|(
name|int
name|week
parameter_list|)
block|{
name|iWeek
operator|=
name|week
expr_stmt|;
block|}
specifier|public
name|boolean
name|getShowUselessTimes
parameter_list|()
block|{
return|return
name|iShowUselessTimes
return|;
block|}
specifier|public
name|void
name|setShowUselessTimes
parameter_list|(
name|boolean
name|showUselessTimes
parameter_list|)
block|{
name|iShowUselessTimes
operator|=
name|showUselessTimes
expr_stmt|;
block|}
specifier|public
name|boolean
name|getShowInstructors
parameter_list|()
block|{
return|return
name|iShowInstructors
return|;
block|}
specifier|public
name|void
name|setShowInstructors
parameter_list|(
name|boolean
name|showInstructors
parameter_list|)
block|{
name|iShowInstructors
operator|=
name|showInstructors
expr_stmt|;
block|}
specifier|public
name|boolean
name|getShowComments
parameter_list|()
block|{
return|return
name|iShowComments
return|;
block|}
specifier|public
name|void
name|setShowComments
parameter_list|(
name|boolean
name|showComments
parameter_list|)
block|{
name|iShowComments
operator|=
name|showComments
expr_stmt|;
block|}
specifier|public
name|boolean
name|getShowEvents
parameter_list|()
block|{
return|return
name|iShowEvents
return|;
block|}
specifier|public
name|void
name|setShowEvents
parameter_list|(
name|boolean
name|showEvents
parameter_list|)
block|{
name|iShowEvents
operator|=
name|showEvents
expr_stmt|;
block|}
specifier|public
name|Vector
name|getWeeks
parameter_list|(
name|HttpSession
name|httpSession
parameter_list|)
throws|throws
name|Exception
block|{
name|Vector
name|weeks
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|weeks
operator|.
name|addElement
argument_list|(
operator|new
name|IdValue
argument_list|(
operator|new
name|Long
argument_list|(
operator|-
literal|100
argument_list|)
argument_list|,
literal|"All weeks"
argument_list|)
argument_list|)
expr_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|Web
operator|.
name|getUser
argument_list|(
name|httpSession
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|startWeek
init|=
name|DateUtils
operator|.
name|getWeek
argument_list|(
name|session
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
operator|-
operator|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.session.nrExcessDays"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
operator|/
literal|7
operator|)
decl_stmt|;
name|Calendar
name|endCal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|endCal
operator|.
name|setTime
argument_list|(
name|session
operator|.
name|getSessionEndDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|endCal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.session.nrExcessDays"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|week
init|=
name|startWeek
decl_stmt|;
while|while
condition|(
name|DateUtils
operator|.
name|getStartDate
argument_list|(
name|session
operator|.
name|getSessionStartYear
argument_list|()
argument_list|,
name|week
argument_list|)
operator|.
name|compareTo
argument_list|(
name|endCal
operator|.
name|getTime
argument_list|()
argument_list|)
operator|<=
literal|0
condition|)
block|{
name|weeks
operator|.
name|addElement
argument_list|(
operator|new
name|IdValue
argument_list|(
operator|new
name|Long
argument_list|(
name|week
argument_list|)
argument_list|,
name|sDF
operator|.
name|format
argument_list|(
name|DateUtils
operator|.
name|getStartDate
argument_list|(
name|session
operator|.
name|getSessionStartYear
argument_list|()
argument_list|,
name|week
argument_list|)
argument_list|)
operator|+
literal|" - "
operator|+
name|sDF
operator|.
name|format
argument_list|(
name|DateUtils
operator|.
name|getEndDate
argument_list|(
name|session
operator|.
name|getSessionStartYear
argument_list|()
argument_list|,
name|week
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|week
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|iWeek
operator|<
name|startWeek
operator|||
name|iWeek
operator|>=
name|week
condition|)
name|iWeek
operator|=
operator|-
literal|100
expr_stmt|;
return|return
name|weeks
return|;
block|}
specifier|public
name|TimetableGridTable
parameter_list|()
block|{
block|}
specifier|public
name|void
name|load
parameter_list|(
name|HttpSession
name|httpSession
parameter_list|)
block|{
name|setDays
argument_list|(
name|UserData
operator|.
name|getPropertyInt
argument_list|(
name|httpSession
argument_list|,
literal|"TimetableGridTable.days"
argument_list|,
name|getDays
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|setDayMode
argument_list|(
name|UserData
operator|.
name|getPropertyInt
argument_list|(
name|httpSession
argument_list|,
literal|"TimetableGridTable.dayMode"
argument_list|,
name|getDayMode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|setBgMode
argument_list|(
name|UserData
operator|.
name|getPropertyInt
argument_list|(
name|httpSession
argument_list|,
literal|"TimetableGridTable.bgMode"
argument_list|,
name|getBgMode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|setFindString
argument_list|(
name|UserData
operator|.
name|getProperty
argument_list|(
name|httpSession
argument_list|,
literal|"TimetableGridTable.findString"
argument_list|,
name|getFindString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|setOrderBy
argument_list|(
name|UserData
operator|.
name|getPropertyInt
argument_list|(
name|httpSession
argument_list|,
literal|"TimetableGridTable.orderBy"
argument_list|,
name|getOrderBy
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|setDispMode
argument_list|(
name|UserData
operator|.
name|getPropertyInt
argument_list|(
name|httpSession
argument_list|,
literal|"TimetableGridTable.dispMode"
argument_list|,
name|getDispMode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|setResourceType
argument_list|(
name|UserData
operator|.
name|getPropertyInt
argument_list|(
name|httpSession
argument_list|,
literal|"TimetableGridTable.resourceType"
argument_list|,
name|getResourceType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|setShowUselessTimes
argument_list|(
name|UserData
operator|.
name|getPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"TimetableGridTable.showUselessTimes"
argument_list|,
name|getShowUselessTimes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|setWeek
argument_list|(
name|UserData
operator|.
name|getPropertyInt
argument_list|(
name|httpSession
argument_list|,
literal|"TimetableGridTable.week"
argument_list|,
name|getWeek
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|save
parameter_list|(
name|HttpSession
name|httpSession
parameter_list|)
block|{
name|UserData
operator|.
name|setPropertyInt
argument_list|(
name|httpSession
argument_list|,
literal|"TimetableGridTable.days"
argument_list|,
name|getDays
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setPropertyInt
argument_list|(
name|httpSession
argument_list|,
literal|"TimetableGridTable.dayMode"
argument_list|,
name|getDayMode
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setPropertyInt
argument_list|(
name|httpSession
argument_list|,
literal|"TimetableGridTable.bgMode"
argument_list|,
name|getBgMode
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setProperty
argument_list|(
name|httpSession
argument_list|,
literal|"TimetableGridTable.findString"
argument_list|,
name|getFindString
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setPropertyInt
argument_list|(
name|httpSession
argument_list|,
literal|"TimetableGridTable.orderBy"
argument_list|,
name|getOrderBy
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setPropertyInt
argument_list|(
name|httpSession
argument_list|,
literal|"TimetableGridTable.dispMode"
argument_list|,
name|getDispMode
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setPropertyInt
argument_list|(
name|httpSession
argument_list|,
literal|"TimetableGridTable.resourceType"
argument_list|,
name|getResourceType
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setPropertyBoolean
argument_list|(
name|httpSession
argument_list|,
literal|"TimetableGridTable.showUselessTimes"
argument_list|,
name|getShowUselessTimes
argument_list|()
argument_list|)
expr_stmt|;
name|UserData
operator|.
name|setPropertyInt
argument_list|(
name|httpSession
argument_list|,
literal|"TimetableGridTable.week"
argument_list|,
name|getWeek
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|printToHtml
parameter_list|(
name|JspWriter
name|jsp
parameter_list|)
block|{
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
name|jsp
argument_list|)
decl_stmt|;
name|printToHtml
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|printToHtml
parameter_list|(
name|PrintWriter
name|out
parameter_list|)
block|{
name|sNrSlotsPerPeriod
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.timeGrid.slotsPerPeriod"
argument_list|,
literal|"6"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<table border='0' cellpadding='2' cellspacing='0'>"
argument_list|)
expr_stmt|;
name|int
name|rowNumber
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|models
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
name|rowNumber
operator|++
control|)
block|{
name|printToHtml
argument_list|(
name|out
argument_list|,
operator|(
name|TimetableGridModel
operator|)
name|e
operator|.
name|nextElement
argument_list|()
argument_list|,
name|rowNumber
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"</table>"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isDispModePerWeekVertical
parameter_list|()
block|{
return|return
name|iDispMode
operator|==
name|sDispModePerWeekVertical
return|;
block|}
specifier|public
name|boolean
name|isDispModePerWeekHorizontal
parameter_list|()
block|{
return|return
name|iDispMode
operator|==
name|sDispModePerWeekHorizontal
return|;
block|}
specifier|public
name|boolean
name|isDispModePerWeek
parameter_list|()
block|{
return|return
name|isDispModePerWeekHorizontal
argument_list|()
operator|||
name|isDispModePerWeekVertical
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isDispModeInRow
parameter_list|()
block|{
return|return
name|iDispMode
operator|==
name|sDispModeInRow
return|;
block|}
specifier|public
name|int
name|startDay
parameter_list|()
block|{
switch|switch
condition|(
name|iDays
condition|)
block|{
case|case
name|sDaysAll
case|:
return|return
literal|0
return|;
case|case
name|sDaysAllExceptSat
case|:
return|return
literal|0
return|;
case|case
name|sDaysMon
case|:
return|return
literal|0
return|;
case|case
name|sDaysTue
case|:
return|return
literal|1
return|;
case|case
name|sDaysWed
case|:
return|return
literal|2
return|;
case|case
name|sDaysThu
case|:
return|return
literal|3
return|;
case|case
name|sDaysFri
case|:
return|return
literal|4
return|;
case|case
name|sDaysSat
case|:
return|return
literal|5
return|;
case|case
name|sDaysSun
case|:
return|return
literal|6
return|;
case|case
name|sDaysMonThu
case|:
return|return
literal|0
return|;
case|case
name|sDaysFriSat
case|:
return|return
literal|4
return|;
default|default :
return|return
literal|0
return|;
block|}
block|}
specifier|public
name|int
name|endDay
parameter_list|()
block|{
switch|switch
condition|(
name|iDays
condition|)
block|{
case|case
name|sDaysAll
case|:
return|return
literal|6
return|;
case|case
name|sDaysAllExceptSat
case|:
return|return
literal|4
return|;
case|case
name|sDaysMon
case|:
return|return
literal|0
return|;
case|case
name|sDaysTue
case|:
return|return
literal|1
return|;
case|case
name|sDaysWed
case|:
return|return
literal|2
return|;
case|case
name|sDaysThu
case|:
return|return
literal|3
return|;
case|case
name|sDaysFri
case|:
return|return
literal|4
return|;
case|case
name|sDaysSat
case|:
return|return
literal|5
return|;
case|case
name|sDaysSun
case|:
return|return
literal|6
return|;
case|case
name|sDaysMonThu
case|:
return|return
literal|3
return|;
case|case
name|sDaysFriSat
case|:
return|return
literal|5
return|;
default|default :
return|return
literal|4
return|;
block|}
block|}
comment|/* 	public int nrSlotsPerDay() { 		return lastSlot() - firstSlot() + 1;  	} 	*/
specifier|public
name|int
name|firstSlot
parameter_list|()
block|{
switch|switch
condition|(
name|iDayMode
condition|)
block|{
case|case
name|sDayModeDay
case|:
case|case
name|sDayModeDayEvening
case|:
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.timeGrid.firstDaySlot"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|Constants
operator|.
name|DAY_SLOTS_FIRST
argument_list|)
argument_list|)
argument_list|)
return|;
case|case
name|sDayModeEvening
case|:
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.timeGrid.lastDaySlot"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|Constants
operator|.
name|DAY_SLOTS_LAST
argument_list|)
argument_list|)
argument_list|)
operator|+
literal|1
return|;
case|case
name|sDayModeAll
case|:
default|default :
return|return
literal|0
return|;
block|}
block|}
specifier|public
name|int
name|lastSlot
parameter_list|()
block|{
switch|switch
condition|(
name|iDayMode
condition|)
block|{
case|case
name|sDayModeDay
case|:
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.timeGrid.lastDaySlot"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|Constants
operator|.
name|DAY_SLOTS_LAST
argument_list|)
argument_list|)
argument_list|)
return|;
case|case
name|sDayModeDayEvening
case|:
case|case
name|sDayModeEvening
case|:
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.timeGrid.lastEveningSlot"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|Constants
operator|.
name|EVENING_SLOTS_LAST
argument_list|)
argument_list|)
argument_list|)
return|;
case|case
name|sDayModeAll
case|:
default|default :
return|return
name|Constants
operator|.
name|SLOTS_PER_DAY
operator|-
literal|1
return|;
block|}
block|}
specifier|public
name|void
name|printHeader
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|TimetableGridModel
name|model
parameter_list|,
name|int
name|rowNumber
parameter_list|)
block|{
name|String
name|sfx2
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|isDispModePerWeekVertical
argument_list|()
condition|)
name|sfx2
operator|+=
literal|"Vertical"
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr valign='top'>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<th class='Timetable"
operator|+
operator|(
name|rowNumber
operator|==
literal|0
condition|?
literal|"Head"
else|:
literal|""
operator|)
operator|+
literal|"Cell"
operator|+
name|sfx2
operator|+
literal|"'>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|isDispModePerWeek
argument_list|()
condition|)
name|out
operator|.
name|println
argument_list|(
name|model
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|model
operator|.
name|getSize
argument_list|()
operator|>
literal|0
condition|?
literal|" ("
operator|+
name|model
operator|.
name|getSize
argument_list|()
operator|+
literal|")"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</th>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|isDispModePerWeekVertical
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|day
init|=
name|startDay
argument_list|()
init|;
name|day
operator|<=
name|endDay
argument_list|()
condition|;
name|day
operator|++
control|)
block|{
name|boolean
name|eol
init|=
operator|(
name|day
operator|==
name|endDay
argument_list|()
operator|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<th colspan='"
operator|+
operator|(
literal|1
operator|+
name|model
operator|.
name|getMaxIdxForDay
argument_list|(
name|day
argument_list|,
name|firstSlot
argument_list|()
argument_list|,
name|lastSlot
argument_list|()
argument_list|)
operator|)
operator|+
literal|"'class='TimetableHeadCellVertical"
operator|+
operator|(
name|eol
condition|?
literal|"EOL"
else|:
literal|""
operator|)
operator|+
literal|"'>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|Constants
operator|.
name|DAY_NAME
index|[
name|day
index|]
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</th>"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//isDispModeInRow() || isDispModePerWeekVertical()
for|for
control|(
name|int
name|day
init|=
name|startDay
argument_list|()
init|;
operator|(
name|isDispModeInRow
argument_list|()
operator|&&
name|day
operator|<=
name|endDay
argument_list|()
operator|)
operator|||
operator|(
name|isDispModePerWeek
argument_list|()
operator|&&
name|day
operator|==
name|startDay
argument_list|()
operator|)
condition|;
name|day
operator|++
control|)
block|{
for|for
control|(
name|int
name|slot
init|=
name|firstSlot
argument_list|()
init|;
name|slot
operator|<=
name|lastSlot
argument_list|()
condition|;
name|slot
operator|+=
name|sNrSlotsPerPeriod
control|)
block|{
name|int
name|time
init|=
name|slot
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
decl_stmt|;
name|boolean
name|eod
init|=
operator|(
name|slot
operator|+
name|sNrSlotsPerPeriod
operator|-
literal|1
operator|==
name|lastSlot
argument_list|()
operator|)
decl_stmt|;
name|boolean
name|eol
init|=
operator|(
name|eod
operator|&&
operator|(
name|isDispModePerWeek
argument_list|()
operator|||
name|day
operator|==
name|endDay
argument_list|()
operator|)
operator|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<th colspan='"
operator|+
name|sNrSlotsPerPeriod
operator|+
literal|"' class='Timetable"
operator|+
operator|(
name|rowNumber
operator|==
literal|0
condition|?
literal|"Head"
else|:
literal|""
operator|)
operator|+
literal|"Cell"
operator|+
operator|(
name|eol
condition|?
literal|"EOL"
else|:
name|eod
condition|?
literal|"EOD"
else|:
literal|""
operator|)
operator|+
literal|"'>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|isDispModeInRow
argument_list|()
condition|)
name|out
operator|.
name|println
argument_list|(
name|Constants
operator|.
name|DAY_NAME
index|[
name|day
index|]
operator|+
literal|"<br>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|Constants
operator|.
name|toTime
argument_list|(
name|time
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</th>"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|out
operator|.
name|println
argument_list|(
literal|"</tr>"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|getMouseOverAndMouseOut
parameter_list|(
name|StringBuffer
name|onMouseOver
parameter_list|,
name|StringBuffer
name|onMouseOut
parameter_list|,
name|StringBuffer
name|onClick
parameter_list|,
name|TimetableGridCell
name|cell
parameter_list|,
name|String
name|bgColor
parameter_list|)
block|{
if|if
condition|(
name|cell
operator|==
literal|null
condition|)
return|return;
name|onMouseOver
operator|.
name|append
argument_list|(
literal|" onmouseover=\""
argument_list|)
expr_stmt|;
name|onMouseOut
operator|.
name|append
argument_list|(
literal|" onmouseout=\""
argument_list|)
expr_stmt|;
if|if
condition|(
name|isDispModePerWeek
argument_list|()
operator|&&
name|cell
operator|.
name|getAssignmentId
argument_list|()
operator|>=
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cell
operator|.
name|getNrMeetings
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|onMouseOver
operator|.
name|append
argument_list|(
literal|"if (document.getElementById('"
operator|+
name|cell
operator|.
name|getAssignmentId
argument_list|()
operator|+
literal|"."
operator|+
name|cell
operator|.
name|getRoomId
argument_list|()
operator|+
literal|"."
operator|+
name|i
operator|+
literal|"')!=null) document.getElementById('"
operator|+
name|cell
operator|.
name|getAssignmentId
argument_list|()
operator|+
literal|"."
operator|+
name|cell
operator|.
name|getRoomId
argument_list|()
operator|+
literal|"."
operator|+
name|i
operator|+
literal|"').style.backgroundColor='rgb(223,231,242)';"
argument_list|)
expr_stmt|;
name|onMouseOut
operator|.
name|append
argument_list|(
literal|"if (document.getElementById('"
operator|+
name|cell
operator|.
name|getAssignmentId
argument_list|()
operator|+
literal|"."
operator|+
name|cell
operator|.
name|getRoomId
argument_list|()
operator|+
literal|"."
operator|+
name|i
operator|+
literal|"')!=null) document.getElementById('"
operator|+
name|cell
operator|.
name|getAssignmentId
argument_list|()
operator|+
literal|"."
operator|+
name|cell
operator|.
name|getRoomId
argument_list|()
operator|+
literal|"."
operator|+
name|i
operator|+
literal|"').style.backgroundColor='"
operator|+
operator|(
name|bgColor
operator|==
literal|null
condition|?
literal|"transparent"
else|:
name|bgColor
operator|)
operator|+
literal|"';"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|onMouseOver
operator|.
name|append
argument_list|(
literal|"this.style.backgroundColor='rgb(223,231,242)';"
argument_list|)
expr_stmt|;
name|onMouseOut
operator|.
name|append
argument_list|(
literal|"this.style.backgroundColor='"
operator|+
operator|(
name|bgColor
operator|==
literal|null
condition|?
literal|"transparent"
else|:
name|bgColor
operator|)
operator|+
literal|"';"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cell
operator|.
name|getOnClick
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|cell
operator|.
name|getOnClick
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|onMouseOver
operator|.
name|append
argument_list|(
literal|"this.style.cursor='hand';this.style.cursor='pointer';"
argument_list|)
expr_stmt|;
name|onClick
operator|.
name|append
argument_list|(
literal|" onclick=\"hideGwtHint();"
argument_list|)
expr_stmt|;
if|if
condition|(
name|isDispModePerWeek
argument_list|()
operator|&&
name|cell
operator|.
name|getAssignmentId
argument_list|()
operator|>=
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cell
operator|.
name|getNrMeetings
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|onClick
operator|.
name|append
argument_list|(
literal|"if (document.getElementById('"
operator|+
name|cell
operator|.
name|getAssignmentId
argument_list|()
operator|+
literal|"."
operator|+
name|cell
operator|.
name|getRoomId
argument_list|()
operator|+
literal|"."
operator|+
name|i
operator|+
literal|"')!=null) document.getElementById('"
operator|+
name|cell
operator|.
name|getAssignmentId
argument_list|()
operator|+
literal|"."
operator|+
name|cell
operator|.
name|getRoomId
argument_list|()
operator|+
literal|"."
operator|+
name|i
operator|+
literal|"').style.backgroundColor='"
operator|+
operator|(
name|bgColor
operator|==
literal|null
condition|?
literal|"transparent"
else|:
name|bgColor
operator|)
operator|+
literal|"';"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|onClick
operator|.
name|append
argument_list|(
literal|"this.style.backgroundColor='"
operator|+
operator|(
name|bgColor
operator|==
literal|null
condition|?
literal|"transparent"
else|:
name|bgColor
operator|)
operator|+
literal|"';"
argument_list|)
expr_stmt|;
block|}
name|onClick
operator|.
name|append
argument_list|(
name|cell
operator|.
name|getOnClick
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cell
operator|.
name|getTitle
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|cell
operator|.
name|getTitle
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|onMouseOver
operator|.
name|append
argument_list|(
literal|"showGwtHint(this,'"
operator|+
name|cell
operator|.
name|getTitle
argument_list|()
operator|+
literal|"');"
argument_list|)
expr_stmt|;
name|onMouseOut
operator|.
name|append
argument_list|(
literal|"hideGwtHint();"
argument_list|)
expr_stmt|;
block|}
name|onMouseOver
operator|.
name|append
argument_list|(
literal|"\" "
argument_list|)
expr_stmt|;
name|onMouseOut
operator|.
name|append
argument_list|(
literal|"\" "
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|printToHtml
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|TimetableGridModel
name|model
parameter_list|,
name|int
name|rowNumber
parameter_list|)
block|{
name|model
operator|.
name|clearRendered
argument_list|()
expr_stmt|;
if|if
condition|(
name|isDispModePerWeek
argument_list|()
operator|||
name|rowNumber
operator|%
literal|10
operator|==
literal|0
condition|)
name|printHeader
argument_list|(
name|out
argument_list|,
name|model
argument_list|,
name|rowNumber
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr valign='top'>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|isDispModeInRow
argument_list|()
condition|)
block|{
name|int
name|maxIdx
init|=
name|model
operator|.
name|getMaxIdx
argument_list|(
name|startDay
argument_list|()
argument_list|,
name|endDay
argument_list|()
argument_list|,
name|firstSlot
argument_list|()
argument_list|,
name|lastSlot
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<th rowspan='"
operator|+
operator|(
literal|1
operator|+
name|maxIdx
operator|)
operator|+
literal|"' class='Timetable"
operator|+
operator|(
name|rowNumber
operator|%
literal|10
operator|==
literal|0
condition|?
literal|"Head"
else|:
literal|""
operator|)
operator|+
literal|"Cell'>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|model
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|model
operator|.
name|getSize
argument_list|()
operator|>
literal|0
condition|?
literal|" ("
operator|+
name|model
operator|.
name|getSize
argument_list|()
operator|+
literal|")"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</th>"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<=
name|maxIdx
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
name|out
operator|.
name|println
argument_list|(
literal|"</tr><tr valign='top'>"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|day
init|=
name|startDay
argument_list|()
init|;
name|day
operator|<=
name|endDay
argument_list|()
condition|;
name|day
operator|++
control|)
block|{
for|for
control|(
name|int
name|slot
init|=
name|firstSlot
argument_list|()
init|;
name|slot
operator|<=
name|lastSlot
argument_list|()
condition|;
name|slot
operator|++
control|)
block|{
name|int
name|slotsToEnd
init|=
name|lastSlot
argument_list|()
operator|-
name|slot
operator|+
literal|1
decl_stmt|;
name|TimetableGridCell
name|cell
init|=
name|model
operator|.
name|getCell
argument_list|(
name|day
argument_list|,
name|slot
argument_list|,
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|cell
operator|==
literal|null
operator|&&
name|model
operator|.
name|isRendered
argument_list|(
name|day
argument_list|,
name|slot
argument_list|,
name|idx
argument_list|)
condition|)
continue|continue;
name|int
name|length
init|=
operator|(
name|cell
operator|==
literal|null
condition|?
literal|1
else|:
name|cell
operator|.
name|getLength
argument_list|()
operator|+
name|cell
operator|.
name|getSlot
argument_list|()
operator|-
name|slot
operator|)
decl_stmt|;
name|int
name|colSpan
init|=
operator|(
name|cell
operator|==
literal|null
condition|?
literal|1
else|:
name|Math
operator|.
name|min
argument_list|(
name|length
argument_list|,
name|slotsToEnd
argument_list|)
operator|)
decl_stmt|;
name|int
name|rowSpan
init|=
operator|(
name|getResourceType
argument_list|()
operator|==
name|TimetableGridModel
operator|.
name|sResourceTypeDepartment
operator|&&
name|cell
operator|!=
literal|null
condition|?
literal|1
else|:
name|model
operator|.
name|getDepth
argument_list|(
name|day
argument_list|,
name|slot
argument_list|,
name|idx
argument_list|,
name|maxIdx
argument_list|,
name|colSpan
argument_list|)
operator|)
decl_stmt|;
name|model
operator|.
name|setRendered
argument_list|(
name|day
argument_list|,
name|slot
argument_list|,
name|idx
argument_list|,
name|rowSpan
argument_list|,
name|colSpan
argument_list|)
expr_stmt|;
if|if
condition|(
name|cell
operator|==
literal|null
condition|)
block|{
name|String
name|bgColor
init|=
name|model
operator|.
name|getBackground
argument_list|(
name|day
argument_list|,
name|slot
argument_list|)
decl_stmt|;
if|if
condition|(
name|bgColor
operator|==
literal|null
operator|&&
operator|!
name|model
operator|.
name|isAvailable
argument_list|(
name|day
argument_list|,
name|slot
argument_list|)
condition|)
name|bgColor
operator|=
name|TimetableGridCell
operator|.
name|sBgColorNotAvailable
expr_stmt|;
name|boolean
name|eod
init|=
operator|(
name|slot
operator|==
name|lastSlot
argument_list|()
operator|)
decl_stmt|;
name|boolean
name|eol
init|=
operator|(
name|eod
operator|&&
operator|(
name|isDispModePerWeek
argument_list|()
operator|||
name|day
operator|==
name|endDay
argument_list|()
operator|)
operator|)
decl_stmt|;
name|boolean
name|first
init|=
operator|(
name|slot
operator|==
name|firstSlot
argument_list|()
operator|||
name|model
operator|.
name|getCell
argument_list|(
name|day
argument_list|,
name|slot
operator|-
literal|1
argument_list|,
name|idx
argument_list|)
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|in
init|=
operator|!
name|first
operator|&&
operator|!
name|eod
operator|&&
operator|!
name|eol
operator|&&
operator|(
name|model
operator|.
name|getCell
argument_list|(
name|day
argument_list|,
name|slot
operator|+
literal|1
argument_list|,
name|idx
argument_list|)
operator|==
literal|null
operator|||
name|model
operator|.
name|getCell
argument_list|(
name|day
argument_list|,
name|slot
operator|-
literal|1
argument_list|,
name|idx
argument_list|)
operator|==
literal|null
operator|)
operator|&&
operator|(
operator|(
operator|(
name|slot
operator|-
name|firstSlot
argument_list|()
operator|)
operator|%
name|sNrSlotsPerPeriod
operator|)
operator|!=
literal|0
operator|)
decl_stmt|;
name|boolean
name|inEod
init|=
name|eod
operator|&&
name|model
operator|.
name|getCell
argument_list|(
name|day
argument_list|,
name|slot
operator|-
literal|1
argument_list|,
name|idx
argument_list|)
operator|==
literal|null
decl_stmt|;
name|boolean
name|inEol
init|=
name|eol
operator|&&
name|model
operator|.
name|getCell
argument_list|(
name|day
argument_list|,
name|slot
operator|-
literal|1
argument_list|,
name|idx
argument_list|)
operator|==
literal|null
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td class='TimetableCell"
operator|+
operator|(
name|first
condition|?
literal|"First"
else|:
name|in
condition|?
literal|"In"
else|:
name|inEol
condition|?
literal|"InEOL"
else|:
name|inEod
condition|?
literal|"InEOD"
else|:
name|eol
condition|?
literal|"EOL"
else|:
name|eod
condition|?
literal|"EOD"
else|:
literal|""
operator|)
operator|+
literal|"' rowSpan='"
operator|+
name|rowSpan
operator|+
literal|"' colSpan='"
operator|+
name|colSpan
operator|+
literal|"' "
operator|+
operator|(
name|bgColor
operator|==
literal|null
condition|?
literal|""
else|:
literal|"style='background-color:"
operator|+
name|bgColor
operator|+
literal|"'"
operator|)
operator|+
literal|">&nbsp;</td>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|bgColor
init|=
name|cell
operator|.
name|getBackground
argument_list|()
decl_stmt|;
if|if
condition|(
name|getBgMode
argument_list|()
operator|==
name|TimetableGridModel
operator|.
name|sBgModeNone
operator|&&
operator|!
name|TimetableGridCell
operator|.
name|sBgColorNotAvailable
operator|.
name|equals
argument_list|(
name|bgColor
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
operator|!
name|model
operator|.
name|isAvailable
argument_list|(
name|day
argument_list|,
name|slot
operator|+
name|i
argument_list|)
condition|)
block|{
name|bgColor
operator|=
name|TimetableGridCell
operator|.
name|sBgColorNotAvailableButAssigned
expr_stmt|;
break|break;
block|}
block|}
name|boolean
name|eod
init|=
operator|(
name|slot
operator|+
name|length
operator|>
name|lastSlot
argument_list|()
operator|)
decl_stmt|;
name|boolean
name|eol
init|=
operator|(
name|eod
operator|&&
operator|(
name|isDispModePerWeek
argument_list|()
operator|||
name|day
operator|==
name|endDay
argument_list|()
operator|)
operator|)
decl_stmt|;
name|StringBuffer
name|onMouseOver
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|StringBuffer
name|onMouseOut
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|StringBuffer
name|onClick
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|getMouseOverAndMouseOut
argument_list|(
name|onMouseOver
argument_list|,
name|onMouseOut
argument_list|,
name|onClick
argument_list|,
name|cell
argument_list|,
name|bgColor
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td nowrap "
operator|+
operator|(
name|bgColor
operator|==
literal|null
condition|?
literal|""
else|:
literal|"style='background-color:"
operator|+
name|bgColor
operator|+
literal|"' "
operator|)
operator|+
literal|" class='TimetableCell"
operator|+
operator|(
name|eol
condition|?
literal|"EOL"
else|:
name|eod
condition|?
literal|"EOD"
else|:
literal|""
operator|)
operator|+
literal|"' "
operator|+
literal|"align='center' "
operator|+
literal|"colspan='"
operator|+
name|colSpan
operator|+
literal|"' rowSpan='"
operator|+
name|rowSpan
operator|+
literal|"' "
operator|+
operator|(
name|cell
operator|.
name|getAssignmentId
argument_list|()
operator|>=
literal|0
condition|?
literal|"id='"
operator|+
name|cell
operator|.
name|getAssignmentId
argument_list|()
operator|+
literal|"."
operator|+
name|cell
operator|.
name|getRoomId
argument_list|()
operator|+
literal|"."
operator|+
name|cell
operator|.
name|getMeetingNumber
argument_list|()
operator|+
literal|"' "
else|:
literal|""
operator|)
operator|+
name|onClick
operator|+
name|onMouseOver
operator|+
name|onMouseOut
operator|+
comment|//(cell.getTitle()==null?"":"title=\""+cell.getTitle()+"\" ")+
literal|">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|cell
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|getResourceType
argument_list|()
operator|!=
name|TimetableGridModel
operator|.
name|sResourceTypeRoom
condition|)
name|out
operator|.
name|print
argument_list|(
literal|"<BR>"
operator|+
name|cell
operator|.
name|getRoomName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|getResourceType
argument_list|()
operator|!=
name|TimetableGridModel
operator|.
name|sResourceTypeInstructor
operator|&&
name|iShowInstructors
condition|)
name|out
operator|.
name|print
argument_list|(
literal|"<BR>"
operator|+
name|cell
operator|.
name|getInstructor
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iShowComments
condition|)
name|out
operator|.
name|print
argument_list|(
name|cell
operator|.
name|getShortComment
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|"<BR>"
operator|+
name|cell
operator|.
name|getShortComment
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iWeek
operator|==
operator|-
literal|100
operator|&&
name|cell
operator|.
name|hasDays
argument_list|()
operator|&&
operator|!
name|cell
operator|.
name|getDays
argument_list|()
operator|.
name|equals
argument_list|(
name|iDefaultDatePatternName
argument_list|)
condition|)
name|out
operator|.
name|print
argument_list|(
literal|"<BR>"
operator|+
name|cell
operator|.
name|getDays
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</td>"
argument_list|)
expr_stmt|;
name|slot
operator|+=
name|length
operator|-
literal|1
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|else  if
condition|(
name|isDispModePerWeekHorizontal
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|day
init|=
name|startDay
argument_list|()
init|;
name|day
operator|<=
name|endDay
argument_list|()
condition|;
name|day
operator|++
control|)
block|{
if|if
condition|(
name|day
operator|>
name|startDay
argument_list|()
condition|)
name|out
operator|.
name|println
argument_list|(
literal|"</tr><tr valign='top'>"
argument_list|)
expr_stmt|;
name|int
name|maxIdx
init|=
name|model
operator|.
name|getMaxIdxForDay
argument_list|(
name|day
argument_list|,
name|firstSlot
argument_list|()
argument_list|,
name|lastSlot
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<th rowspan='"
operator|+
operator|(
literal|1
operator|+
name|maxIdx
operator|)
operator|+
literal|"' class='TimetableCell'>"
operator|+
name|Constants
operator|.
name|DAY_NAME
index|[
name|day
index|]
operator|+
literal|"</th>"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<=
name|maxIdx
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
name|out
operator|.
name|println
argument_list|(
literal|"</tr><tr valign='top'>"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|slot
init|=
name|firstSlot
argument_list|()
init|;
name|slot
operator|<=
name|lastSlot
argument_list|()
condition|;
name|slot
operator|++
control|)
block|{
name|int
name|slotsToEnd
init|=
name|lastSlot
argument_list|()
operator|-
name|slot
operator|+
literal|1
decl_stmt|;
name|TimetableGridCell
name|cell
init|=
name|model
operator|.
name|getCell
argument_list|(
name|day
argument_list|,
name|slot
argument_list|,
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|cell
operator|==
literal|null
operator|&&
name|model
operator|.
name|isRendered
argument_list|(
name|day
argument_list|,
name|slot
argument_list|,
name|idx
argument_list|)
condition|)
continue|continue;
name|int
name|length
init|=
operator|(
name|cell
operator|==
literal|null
condition|?
literal|1
else|:
name|cell
operator|.
name|getLength
argument_list|()
operator|+
name|cell
operator|.
name|getSlot
argument_list|()
operator|-
name|slot
operator|)
decl_stmt|;
name|int
name|colSpan
init|=
operator|(
name|cell
operator|==
literal|null
condition|?
literal|1
else|:
name|Math
operator|.
name|min
argument_list|(
name|length
argument_list|,
name|slotsToEnd
argument_list|)
operator|)
decl_stmt|;
name|int
name|rowSpan
init|=
operator|(
name|getResourceType
argument_list|()
operator|==
name|TimetableGridModel
operator|.
name|sResourceTypeDepartment
operator|&&
name|cell
operator|!=
literal|null
condition|?
literal|1
else|:
name|model
operator|.
name|getDepth
argument_list|(
name|day
argument_list|,
name|slot
argument_list|,
name|idx
argument_list|,
name|maxIdx
argument_list|,
name|colSpan
argument_list|)
operator|)
decl_stmt|;
name|model
operator|.
name|setRendered
argument_list|(
name|day
argument_list|,
name|slot
argument_list|,
name|idx
argument_list|,
name|rowSpan
argument_list|,
name|colSpan
argument_list|)
expr_stmt|;
if|if
condition|(
name|cell
operator|==
literal|null
condition|)
block|{
name|String
name|bgColor
init|=
name|model
operator|.
name|getBackground
argument_list|(
name|day
argument_list|,
name|slot
argument_list|)
decl_stmt|;
if|if
condition|(
name|bgColor
operator|==
literal|null
operator|&&
operator|!
name|model
operator|.
name|isAvailable
argument_list|(
name|day
argument_list|,
name|slot
argument_list|)
condition|)
name|bgColor
operator|=
name|TimetableGridCell
operator|.
name|sBgColorNotAvailable
expr_stmt|;
name|boolean
name|eod
init|=
operator|(
name|slot
operator|==
name|lastSlot
argument_list|()
operator|)
decl_stmt|;
name|boolean
name|eol
init|=
operator|(
name|eod
operator|&&
operator|(
name|isDispModePerWeek
argument_list|()
operator|||
name|day
operator|==
name|endDay
argument_list|()
operator|)
operator|)
decl_stmt|;
name|boolean
name|first
init|=
operator|(
name|slot
operator|==
name|firstSlot
argument_list|()
operator|||
name|model
operator|.
name|getCell
argument_list|(
name|day
argument_list|,
name|slot
operator|-
literal|1
argument_list|,
name|idx
argument_list|)
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|in
init|=
operator|!
name|first
operator|&&
operator|!
name|eod
operator|&&
operator|!
name|eol
operator|&&
operator|(
name|model
operator|.
name|getCell
argument_list|(
name|day
argument_list|,
name|slot
operator|+
literal|1
argument_list|,
name|idx
argument_list|)
operator|==
literal|null
operator|||
name|model
operator|.
name|getCell
argument_list|(
name|day
argument_list|,
name|slot
operator|-
literal|1
argument_list|,
name|idx
argument_list|)
operator|==
literal|null
operator|)
operator|&&
operator|(
operator|(
operator|(
name|slot
operator|-
name|firstSlot
argument_list|()
operator|)
operator|%
name|sNrSlotsPerPeriod
operator|)
operator|!=
literal|0
operator|)
decl_stmt|;
name|boolean
name|inEod
init|=
name|eod
operator|&&
name|model
operator|.
name|getCell
argument_list|(
name|day
argument_list|,
name|slot
operator|-
literal|1
argument_list|,
name|idx
argument_list|)
operator|==
literal|null
decl_stmt|;
name|boolean
name|inEol
init|=
name|eol
operator|&&
name|model
operator|.
name|getCell
argument_list|(
name|day
argument_list|,
name|slot
operator|-
literal|1
argument_list|,
name|idx
argument_list|)
operator|==
literal|null
decl_stmt|;
comment|//boolean last = !eod&& !eol&& model.getCell(day,slot+1,idx)!=null;
name|out
operator|.
name|println
argument_list|(
literal|"<td class='TimetableCell"
operator|+
operator|(
name|first
condition|?
literal|"First"
else|:
name|in
condition|?
literal|"In"
else|:
name|inEol
condition|?
literal|"InEOL"
else|:
name|inEod
condition|?
literal|"InEOD"
else|:
name|eol
condition|?
literal|"EOL"
else|:
name|eod
condition|?
literal|"EOD"
else|:
literal|""
operator|)
operator|+
literal|"' rowSpan='"
operator|+
name|rowSpan
operator|+
literal|"' colSpan='"
operator|+
name|colSpan
operator|+
literal|"' "
operator|+
operator|(
name|bgColor
operator|==
literal|null
condition|?
literal|""
else|:
literal|"style='background-color:"
operator|+
name|bgColor
operator|+
literal|"'"
operator|)
operator|+
literal|">&nbsp;</td>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|bgColor
init|=
name|cell
operator|.
name|getBackground
argument_list|()
decl_stmt|;
if|if
condition|(
name|getBgMode
argument_list|()
operator|==
name|TimetableGridModel
operator|.
name|sBgModeNone
operator|&&
operator|!
name|TimetableGridCell
operator|.
name|sBgColorNotAvailable
operator|.
name|equals
argument_list|(
name|bgColor
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
operator|!
name|model
operator|.
name|isAvailable
argument_list|(
name|day
argument_list|,
name|slot
operator|+
name|i
argument_list|)
condition|)
block|{
name|bgColor
operator|=
name|TimetableGridCell
operator|.
name|sBgColorNotAvailableButAssigned
expr_stmt|;
break|break;
block|}
block|}
name|boolean
name|eod
init|=
operator|(
name|slot
operator|+
name|length
operator|>
name|lastSlot
argument_list|()
operator|)
decl_stmt|;
name|boolean
name|eol
init|=
operator|(
name|eod
operator|&&
operator|(
name|isDispModePerWeek
argument_list|()
operator|||
name|day
operator|==
name|endDay
argument_list|()
operator|)
operator|)
decl_stmt|;
name|StringBuffer
name|onMouseOver
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|StringBuffer
name|onMouseOut
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|StringBuffer
name|onClick
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|getMouseOverAndMouseOut
argument_list|(
name|onMouseOver
argument_list|,
name|onMouseOut
argument_list|,
name|onClick
argument_list|,
name|cell
argument_list|,
name|bgColor
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td nowrap "
operator|+
operator|(
name|bgColor
operator|==
literal|null
condition|?
literal|""
else|:
literal|"style='background-color:"
operator|+
name|bgColor
operator|+
literal|"' "
operator|)
operator|+
literal|" class='TimetableCell"
operator|+
operator|(
name|eol
condition|?
literal|"EOL"
else|:
name|eod
condition|?
literal|"EOD"
else|:
literal|""
operator|)
operator|+
literal|"' "
operator|+
literal|"align='center' "
operator|+
literal|"colspan='"
operator|+
name|colSpan
operator|+
literal|"' rowSpan='"
operator|+
name|rowSpan
operator|+
literal|"' "
operator|+
operator|(
name|cell
operator|.
name|getAssignmentId
argument_list|()
operator|>=
literal|0
condition|?
literal|"id='"
operator|+
name|cell
operator|.
name|getAssignmentId
argument_list|()
operator|+
literal|"."
operator|+
name|cell
operator|.
name|getRoomId
argument_list|()
operator|+
literal|"."
operator|+
name|cell
operator|.
name|getMeetingNumber
argument_list|()
operator|+
literal|"' "
else|:
literal|""
operator|)
operator|+
name|onClick
operator|+
name|onMouseOver
operator|+
name|onMouseOut
operator|+
comment|//(cell.getTitle()==null?"":"title=\""+cell.getTitle()+"\" ")+
literal|">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|cell
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|getResourceType
argument_list|()
operator|!=
name|TimetableGridModel
operator|.
name|sResourceTypeRoom
condition|)
name|out
operator|.
name|print
argument_list|(
literal|"<BR>"
operator|+
name|cell
operator|.
name|getRoomName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|getResourceType
argument_list|()
operator|!=
name|TimetableGridModel
operator|.
name|sResourceTypeInstructor
operator|&&
name|iShowInstructors
condition|)
name|out
operator|.
name|print
argument_list|(
literal|"<BR>"
operator|+
name|cell
operator|.
name|getInstructor
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iShowComments
condition|)
name|out
operator|.
name|print
argument_list|(
name|cell
operator|.
name|getShortComment
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|"<BR>"
operator|+
name|cell
operator|.
name|getShortComment
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iWeek
operator|==
operator|-
literal|100
operator|&&
name|cell
operator|.
name|hasDays
argument_list|()
operator|&&
operator|!
name|cell
operator|.
name|getDays
argument_list|()
operator|.
name|equals
argument_list|(
name|iDefaultDatePatternName
argument_list|)
condition|)
name|out
operator|.
name|print
argument_list|(
literal|"<BR>"
operator|+
name|cell
operator|.
name|getDays
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</td>"
argument_list|)
expr_stmt|;
name|slot
operator|+=
name|length
operator|-
literal|1
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
else|else
block|{
comment|//isDispModePerWeekVertical
comment|//FIXME time goes for half-hours (only every sNrSlotsPerPeriod-th slot is checked)
name|int
name|step
init|=
name|sNrSlotsPerPeriod
decl_stmt|;
for|for
control|(
name|int
name|slot
init|=
name|firstSlot
argument_list|()
init|;
name|slot
operator|<=
name|lastSlot
argument_list|()
condition|;
name|slot
operator|+=
name|step
control|)
block|{
name|int
name|time
init|=
name|slot
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
decl_stmt|;
name|int
name|slotsToEnd
init|=
name|lastSlot
argument_list|()
operator|-
name|slot
operator|+
literal|1
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|slot
operator|-
name|firstSlot
argument_list|()
operator|)
operator|%
name|sNrSlotsPerPeriod
operator|)
operator|==
literal|0
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<th class='TimetableHeadCell"
operator|+
operator|(
name|slot
operator|==
name|firstSlot
argument_list|()
condition|?
literal|""
else|:
literal|"In"
operator|)
operator|+
literal|"Vertical'>"
operator|+
name|Constants
operator|.
name|toTime
argument_list|(
name|time
argument_list|)
operator|+
literal|"</th>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<th class='TimetableHeadCellInVertical'>&nbsp;</th>"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|day
init|=
name|startDay
argument_list|()
init|;
name|day
operator|<=
name|endDay
argument_list|()
condition|;
name|day
operator|++
control|)
block|{
name|int
name|maxIdx
init|=
name|model
operator|.
name|getMaxIdxForDay
argument_list|(
name|day
argument_list|,
name|firstSlot
argument_list|()
argument_list|,
name|lastSlot
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<=
name|maxIdx
condition|;
name|idx
operator|++
control|)
block|{
name|TimetableGridCell
name|cell
init|=
name|model
operator|.
name|getCell
argument_list|(
name|day
argument_list|,
name|slot
argument_list|,
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|model
operator|.
name|isRendered
argument_list|(
name|day
argument_list|,
name|slot
argument_list|,
name|idx
argument_list|)
condition|)
continue|continue;
name|int
name|rowSpan
init|=
operator|(
name|cell
operator|==
literal|null
condition|?
literal|1
else|:
name|Math
operator|.
name|min
argument_list|(
name|cell
operator|.
name|getLength
argument_list|()
operator|+
name|cell
operator|.
name|getSlot
argument_list|()
operator|-
name|slot
argument_list|,
name|slotsToEnd
argument_list|)
operator|)
decl_stmt|;
name|int
name|colSpan
init|=
operator|(
name|getResourceType
argument_list|()
operator|==
name|TimetableGridModel
operator|.
name|sResourceTypeDepartment
operator|&&
name|cell
operator|!=
literal|null
condition|?
literal|1
else|:
name|model
operator|.
name|getDepth
argument_list|(
name|day
argument_list|,
name|slot
argument_list|,
name|idx
argument_list|,
name|maxIdx
argument_list|,
name|rowSpan
argument_list|)
operator|)
decl_stmt|;
name|model
operator|.
name|setRendered
argument_list|(
name|day
argument_list|,
name|slot
argument_list|,
name|idx
argument_list|,
name|colSpan
argument_list|,
name|rowSpan
argument_list|)
expr_stmt|;
name|int
name|rowSpanDivStep
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
operator|(
operator|(
name|double
operator|)
name|rowSpan
operator|)
operator|/
name|step
argument_list|)
decl_stmt|;
if|if
condition|(
name|cell
operator|==
literal|null
condition|)
block|{
name|String
name|bgColor
init|=
name|model
operator|.
name|getBackground
argument_list|(
name|day
argument_list|,
name|slot
argument_list|)
decl_stmt|;
if|if
condition|(
name|bgColor
operator|==
literal|null
operator|&&
operator|!
name|model
operator|.
name|isAvailable
argument_list|(
name|day
argument_list|,
name|slot
argument_list|)
condition|)
name|bgColor
operator|=
name|TimetableGridCell
operator|.
name|sBgColorNotAvailable
expr_stmt|;
name|boolean
name|eol
init|=
operator|(
name|day
operator|==
name|endDay
argument_list|()
operator|&&
operator|(
name|idx
operator|+
name|colSpan
operator|-
literal|1
operator|)
operator|==
name|maxIdx
operator|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td class='TimetableCell"
operator|+
operator|(
name|slot
operator|==
name|firstSlot
argument_list|()
condition|?
literal|""
else|:
literal|"In"
operator|)
operator|+
literal|"Vertical"
operator|+
operator|(
name|eol
condition|?
literal|"EOL"
else|:
literal|""
operator|)
operator|+
literal|"' rowSpan='"
operator|+
name|rowSpanDivStep
operator|+
literal|"' colSpan='"
operator|+
name|colSpan
operator|+
literal|"' "
operator|+
operator|(
name|bgColor
operator|==
literal|null
condition|?
literal|""
else|:
literal|"style='background-color:"
operator|+
name|bgColor
operator|+
literal|"'"
operator|)
operator|+
literal|">&nbsp;</td>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|bgColor
init|=
name|cell
operator|.
name|getBackground
argument_list|()
decl_stmt|;
if|if
condition|(
name|getBgMode
argument_list|()
operator|==
name|TimetableGridModel
operator|.
name|sBgModeNone
operator|&&
operator|!
name|TimetableGridCell
operator|.
name|sBgColorNotAvailable
operator|.
name|equals
argument_list|(
name|bgColor
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cell
operator|.
name|getLength
argument_list|()
operator|+
name|cell
operator|.
name|getSlot
argument_list|()
operator|-
name|slot
condition|;
name|i
operator|++
control|)
if|if
condition|(
operator|!
name|model
operator|.
name|isAvailable
argument_list|(
name|day
argument_list|,
name|slot
operator|+
name|i
argument_list|)
condition|)
block|{
name|bgColor
operator|=
name|TimetableGridCell
operator|.
name|sBgColorNotAvailableButAssigned
expr_stmt|;
break|break;
block|}
block|}
name|StringBuffer
name|onMouseOver
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|StringBuffer
name|onMouseOut
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|StringBuffer
name|onClick
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|getMouseOverAndMouseOut
argument_list|(
name|onMouseOver
argument_list|,
name|onMouseOut
argument_list|,
name|onClick
argument_list|,
name|cell
argument_list|,
name|bgColor
argument_list|)
expr_stmt|;
name|boolean
name|eol
init|=
operator|(
name|day
operator|==
name|endDay
argument_list|()
operator|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td nowrap "
operator|+
operator|(
name|bgColor
operator|==
literal|null
condition|?
literal|""
else|:
literal|"style='background-color:"
operator|+
name|bgColor
operator|+
literal|"' "
operator|)
operator|+
literal|"class='TimetableCell"
operator|+
operator|(
name|slot
operator|==
name|firstSlot
argument_list|()
condition|?
literal|""
else|:
literal|"In"
operator|)
operator|+
literal|"Vertical"
operator|+
operator|(
name|eol
condition|?
literal|"EOL"
else|:
literal|""
operator|)
operator|+
literal|"' align='center' "
operator|+
literal|"colspan='"
operator|+
name|colSpan
operator|+
literal|"' rowSpan='"
operator|+
name|rowSpanDivStep
operator|+
literal|"' "
operator|+
operator|(
name|cell
operator|.
name|getAssignmentId
argument_list|()
operator|>=
literal|0
condition|?
literal|"id='"
operator|+
name|cell
operator|.
name|getAssignmentId
argument_list|()
operator|+
literal|"."
operator|+
name|cell
operator|.
name|getRoomId
argument_list|()
operator|+
literal|"."
operator|+
name|cell
operator|.
name|getMeetingNumber
argument_list|()
operator|+
literal|"' "
else|:
literal|""
operator|)
operator|+
name|onClick
operator|+
name|onMouseOver
operator|+
name|onMouseOut
operator|+
comment|//(cell.getTitle()==null?"":"title=\""+cell.getTitle()+"\" ")+
literal|">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|cell
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|getResourceType
argument_list|()
operator|!=
name|TimetableGridModel
operator|.
name|sResourceTypeRoom
condition|)
name|out
operator|.
name|print
argument_list|(
literal|"<BR>"
operator|+
name|cell
operator|.
name|getRoomName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|getResourceType
argument_list|()
operator|!=
name|TimetableGridModel
operator|.
name|sResourceTypeInstructor
operator|&&
name|iShowInstructors
condition|)
name|out
operator|.
name|print
argument_list|(
literal|"<BR>"
operator|+
name|cell
operator|.
name|getInstructor
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iShowComments
condition|)
name|out
operator|.
name|print
argument_list|(
name|cell
operator|.
name|getShortComment
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|"<BR>"
operator|+
name|cell
operator|.
name|getShortComment
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iWeek
operator|==
operator|-
literal|100
operator|&&
name|cell
operator|.
name|hasDays
argument_list|()
operator|&&
operator|!
name|cell
operator|.
name|getDays
argument_list|()
operator|.
name|equals
argument_list|(
name|iDefaultDatePatternName
argument_list|)
condition|)
name|out
operator|.
name|print
argument_list|(
literal|"<BR>"
operator|+
name|cell
operator|.
name|getDays
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</td>"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|out
operator|.
name|println
argument_list|(
literal|"</tr><tr valign='top'>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|slot
operator|==
name|lastSlot
argument_list|()
condition|)
name|out
operator|.
name|println
argument_list|(
literal|"<td>&nbsp;</td>"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|boolean
name|match
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|iQuery
operator|==
literal|null
operator|||
name|iQuery
operator|.
name|match
argument_list|(
operator|new
name|TermMatcher
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|String
name|attr
parameter_list|,
name|String
name|term
parameter_list|)
block|{
if|if
condition|(
name|term
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|attr
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|name
argument_list|,
literal|" ,"
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|token
init|=
name|s
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|term
operator|.
name|equalsIgnoreCase
argument_list|(
name|token
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
if|else if
condition|(
literal|"regex"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"regexp"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"re"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
name|name
operator|.
name|matches
argument_list|(
name|term
argument_list|)
return|;
block|}
if|else if
condition|(
literal|"find"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
name|name
operator|.
name|toLowerCase
argument_list|()
operator|.
name|indexOf
argument_list|(
name|term
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|>=
literal|0
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|)
return|;
comment|/* 		if (getFindString()==null || getFindString().trim().length()==0) return true; 		StringTokenizer stk = new StringTokenizer(getFindString().toUpperCase()," ,"); 		String n = name.toUpperCase(); 		while (stk.hasMoreTokens()) { 			String token = stk.nextToken().trim(); 			if (token.length()==0) continue; 			if (n.indexOf(token)<0) return false; 		} 		return true;*/
block|}
specifier|private
name|void
name|showUselessTimesIfDesired
parameter_list|()
block|{
if|if
condition|(
name|iShowUselessTimes
operator|&&
name|iModels
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Enumeration
name|e
init|=
name|iModels
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
operator|(
operator|(
name|TimetableGridModel
operator|)
name|e
operator|.
name|nextElement
argument_list|()
operator|)
operator|.
name|initBgModeUselessSlots
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getDefaultDatePatternName
parameter_list|()
block|{
return|return
name|iDefaultDatePatternName
return|;
block|}
specifier|public
name|boolean
name|reload
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|iModels
operator|!=
literal|null
condition|)
name|iModels
operator|.
name|clear
argument_list|()
expr_stmt|;
name|HttpSession
name|session
init|=
name|request
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Session
name|acadSession
init|=
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|Web
operator|.
name|getUser
argument_list|(
name|session
argument_list|)
argument_list|)
decl_stmt|;
name|DatePattern
name|defaultDatePattern
init|=
name|acadSession
operator|.
name|getDefaultDatePatternNotNull
argument_list|()
decl_stmt|;
name|iDefaultDatePatternName
operator|=
operator|(
name|defaultDatePattern
operator|==
literal|null
condition|?
literal|null
else|:
name|defaultDatePattern
operator|.
name|getName
argument_list|()
operator|)
expr_stmt|;
name|SolverProxy
name|solver
init|=
name|WebSolver
operator|.
name|getSolver
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|int
name|startDay
init|=
operator|(
name|getWeek
argument_list|()
operator|==
operator|-
literal|100
condition|?
operator|-
literal|1
else|:
name|DateUtils
operator|.
name|getFirstDayOfWeek
argument_list|(
name|acadSession
operator|.
name|getSessionStartYear
argument_list|()
argument_list|,
name|getWeek
argument_list|()
argument_list|)
operator|-
name|acadSession
operator|.
name|getDayOfYear
argument_list|(
literal|1
argument_list|,
name|acadSession
operator|.
name|getPatternStartMonth
argument_list|()
argument_list|)
operator|-
literal|1
operator|)
decl_stmt|;
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
block|{
name|iModels
operator|=
name|solver
operator|.
name|getTimetableGridTables
argument_list|(
name|getFindString
argument_list|()
argument_list|,
name|getResourceType
argument_list|()
argument_list|,
name|startDay
argument_list|,
name|getBgMode
argument_list|()
argument_list|,
name|getShowEvents
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|iModels
argument_list|,
operator|new
name|TimetableGridModelComparator
argument_list|()
argument_list|)
expr_stmt|;
name|showUselessTimesIfDesired
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
name|String
name|solutionIdsStr
init|=
operator|(
name|String
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"Solver.selectedSolutionId"
argument_list|)
decl_stmt|;
if|if
condition|(
name|solutionIdsStr
operator|==
literal|null
operator|||
name|solutionIdsStr
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|false
return|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|SolutionDAO
name|dao
init|=
operator|new
name|SolutionDAO
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|dao
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|hibSession
operator|.
name|getTransaction
argument_list|()
operator|.
name|isActive
argument_list|()
condition|)
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|getResourceType
argument_list|()
operator|==
name|TimetableGridModel
operator|.
name|sResourceTypeRoom
condition|)
block|{
if|if
condition|(
name|RoomAvailability
operator|.
name|getInstance
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Calendar
name|startDateCal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|startDateCal
operator|.
name|setTime
argument_list|(
name|DateUtils
operator|.
name|getDate
argument_list|(
literal|1
argument_list|,
name|acadSession
operator|.
name|getStartMonth
argument_list|()
argument_list|,
name|acadSession
operator|.
name|getSessionStartYear
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|startDateCal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|startDateCal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|startDateCal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Calendar
name|endDateCal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|endDateCal
operator|.
name|setTime
argument_list|(
name|DateUtils
operator|.
name|getDate
argument_list|(
literal|0
argument_list|,
name|acadSession
operator|.
name|getEndMonth
argument_list|()
operator|+
literal|1
argument_list|,
name|acadSession
operator|.
name|getSessionStartYear
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|endDateCal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
literal|23
argument_list|)
expr_stmt|;
name|endDateCal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|59
argument_list|)
expr_stmt|;
name|endDateCal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|59
argument_list|)
expr_stmt|;
name|RoomAvailability
operator|.
name|getInstance
argument_list|()
operator|.
name|activate
argument_list|(
name|acadSession
argument_list|,
name|startDateCal
operator|.
name|getTime
argument_list|()
argument_list|,
name|endDateCal
operator|.
name|getTime
argument_list|()
argument_list|,
name|RoomAvailabilityInterface
operator|.
name|sClassType
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|RoomAvailability
operator|.
name|setAvailabilityWarning
argument_list|(
name|request
argument_list|,
name|acadSession
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|Query
name|q
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct r from "
operator|+
literal|"Location as r inner join r.assignments as a where "
operator|+
literal|"a.solution.uniqueId in ("
operator|+
name|solutionIdsStr
operator|+
literal|")"
argument_list|)
decl_stmt|;
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|q
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|room
init|=
operator|(
name|Location
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|match
argument_list|(
name|room
operator|.
name|getLabel
argument_list|()
argument_list|)
condition|)
continue|continue;
name|iModels
operator|.
name|add
argument_list|(
operator|new
name|SolutionGridModel
argument_list|(
name|solutionIdsStr
argument_list|,
name|room
argument_list|,
name|hibSession
argument_list|,
name|startDay
argument_list|,
name|getBgMode
argument_list|()
argument_list|,
name|getShowEvents
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|getResourceType
argument_list|()
operator|==
name|TimetableGridModel
operator|.
name|sResourceTypeInstructor
condition|)
block|{
name|String
name|instructorNameFormat
init|=
name|Settings
operator|.
name|getSettingValue
argument_list|(
name|Web
operator|.
name|getUser
argument_list|(
name|session
argument_list|)
argument_list|,
name|Constants
operator|.
name|SETTINGS_INSTRUCTOR_NAME_FORMAT
argument_list|)
decl_stmt|;
name|Query
name|q
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct i from "
operator|+
literal|"DepartmentalInstructor as i inner join i.assignments as a where "
operator|+
literal|"a.solution.uniqueId in ("
operator|+
name|solutionIdsStr
operator|+
literal|")"
argument_list|)
decl_stmt|;
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|HashSet
name|puids
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|q
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentalInstructor
name|instructor
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
operator|(
name|instructor
operator|.
name|getLastName
argument_list|()
operator|+
literal|", "
operator|+
name|instructor
operator|.
name|getFirstName
argument_list|()
operator|+
literal|" "
operator|+
name|instructor
operator|.
name|getMiddleName
argument_list|()
operator|)
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|match
argument_list|(
name|name
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
operator|==
literal|null
operator|||
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|length
argument_list|()
operator|<=
literal|0
operator|||
name|puids
operator|.
name|add
argument_list|(
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|SolutionGridModel
name|m
init|=
operator|new
name|SolutionGridModel
argument_list|(
name|solutionIdsStr
argument_list|,
name|instructor
argument_list|,
name|hibSession
argument_list|,
name|startDay
argument_list|,
name|getBgMode
argument_list|()
argument_list|)
decl_stmt|;
name|m
operator|.
name|setName
argument_list|(
name|instructor
operator|.
name|getName
argument_list|(
name|instructorNameFormat
argument_list|)
argument_list|)
expr_stmt|;
name|iModels
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|getResourceType
argument_list|()
operator|==
name|TimetableGridModel
operator|.
name|sResourceTypeDepartment
condition|)
block|{
name|Query
name|q
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct d from "
operator|+
literal|"Assignment a inner join a.clazz.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings as o inner join o.subjectArea.department as d where "
operator|+
literal|"a.solution.uniqueId in ("
operator|+
name|solutionIdsStr
operator|+
literal|") and o.isControl=true"
argument_list|)
decl_stmt|;
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|q
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|dept
init|=
operator|(
name|Department
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|dept
operator|.
name|getAbbreviation
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|match
argument_list|(
name|name
argument_list|)
condition|)
continue|continue;
name|iModels
operator|.
name|add
argument_list|(
operator|new
name|SolutionGridModel
argument_list|(
name|solutionIdsStr
argument_list|,
name|dept
argument_list|,
name|hibSession
argument_list|,
name|startDay
argument_list|,
name|getBgMode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|iModels
argument_list|,
operator|new
name|TimetableGridModelComparator
argument_list|()
argument_list|)
expr_stmt|;
name|showUselessTimesIfDesired
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
class|class
name|TimetableGridModelComparator
implements|implements
name|Comparator
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
name|TimetableGridModel
name|m1
init|=
operator|(
name|TimetableGridModel
operator|)
name|o1
decl_stmt|;
name|TimetableGridModel
name|m2
init|=
operator|(
name|TimetableGridModel
operator|)
name|o2
decl_stmt|;
switch|switch
condition|(
name|getOrderBy
argument_list|()
condition|)
block|{
case|case
name|sOrderByNameAsc
case|:
return|return
name|m1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|m2
operator|.
name|getName
argument_list|()
argument_list|)
return|;
case|case
name|sOrderByNameDesc
case|:
return|return
name|m2
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|m1
operator|.
name|getName
argument_list|()
argument_list|)
return|;
case|case
name|sOrderBySizeAsc
case|:
return|return
name|Double
operator|.
name|compare
argument_list|(
name|m1
operator|.
name|getSize
argument_list|()
argument_list|,
name|m2
operator|.
name|getSize
argument_list|()
argument_list|)
return|;
case|case
name|sOrderBySizeDesc
case|:
return|return
name|Double
operator|.
name|compare
argument_list|(
name|m2
operator|.
name|getSize
argument_list|()
argument_list|,
name|m1
operator|.
name|getSize
argument_list|()
argument_list|)
return|;
case|case
name|sOrderByTypeAsc
case|:
if|if
condition|(
name|m1
operator|.
name|getType
argument_list|()
operator|!=
literal|null
operator|&&
name|m2
operator|.
name|getType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|cmp
init|=
name|m1
operator|.
name|getType
argument_list|()
operator|.
name|compareTo
argument_list|(
name|m2
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
return|return
name|m1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|m2
operator|.
name|getName
argument_list|()
argument_list|)
return|;
case|case
name|sOrderByTypeDesc
case|:
if|if
condition|(
name|m1
operator|.
name|getType
argument_list|()
operator|!=
literal|null
operator|&&
name|m2
operator|.
name|getType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|cmp
init|=
name|m2
operator|.
name|getType
argument_list|()
operator|.
name|compareTo
argument_list|(
name|m1
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
return|return
name|m2
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|m1
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
specifier|public
name|void
name|printLegend
parameter_list|(
name|JspWriter
name|jsp
parameter_list|)
block|{
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
name|jsp
argument_list|)
decl_stmt|;
name|printLegend
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|printLegend
parameter_list|(
name|PrintWriter
name|out
parameter_list|)
block|{
if|if
condition|(
name|iBgMode
operator|!=
name|TimetableGridModel
operator|.
name|sBgModeNone
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td colspan='2'>Assigned classes:</td></tr>"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iBgMode
operator|==
name|TimetableGridModel
operator|.
name|sBgModeTimePref
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width='40' style='background-color:"
operator|+
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Required time</td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width='40' style='background-color:"
operator|+
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyPreferred
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Strongly preferred time</td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width='40' style='background-color:"
operator|+
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sPreferred
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Preferred time</td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width='40' style='background-color:"
operator|+
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>No time preference</td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width='40' style='background-color:"
operator|+
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sDiscouraged
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Discouraged time</td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width='40' style='background-color:"
operator|+
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Strongly discouraged time</td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width='40' style='background-color:"
operator|+
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Prohibited time</td><td></td></tr>"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|iBgMode
operator|==
name|TimetableGridModel
operator|.
name|sBgModeRoomPref
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width='40' style='background-color:"
operator|+
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Required room</td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width='40' style='background-color:"
operator|+
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyPreferred
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Strongly preferred room</td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width='40' style='background-color:"
operator|+
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sPreferred
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Preferred room</td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width='40' style='background-color:"
operator|+
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>No room preference</td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width='40' style='background-color:"
operator|+
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sDiscouraged
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Discouraged room</td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width='40' style='background-color:"
operator|+
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Strongly discouraged room</td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width='40' style='background-color:"
operator|+
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Prohibited room</td><td></td></tr>"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|iBgMode
operator|==
name|TimetableGridModel
operator|.
name|sBgModeStudentConf
condition|)
block|{
for|for
control|(
name|int
name|nrConflicts
init|=
literal|0
init|;
name|nrConflicts
operator|<=
literal|15
condition|;
name|nrConflicts
operator|++
control|)
block|{
name|String
name|color
init|=
name|TimetableGridCell
operator|.
name|conflicts2color
argument_list|(
name|nrConflicts
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width='40' style='background-color:"
operator|+
name|color
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>"
operator|+
name|nrConflicts
operator|+
literal|" "
operator|+
operator|(
name|nrConflicts
operator|==
literal|15
condition|?
literal|"or more "
else|:
literal|""
operator|)
operator|+
literal|"student conflicts</td><td></td></tr>"
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|iBgMode
operator|==
name|TimetableGridModel
operator|.
name|sBgModeInstructorBtbPref
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td idth=40 style='background-color:"
operator|+
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>No instructor back-to-back preference<i>(distance=0)</i></td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width='40' style='background-color:"
operator|+
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sDiscouraged
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Discouraged back-to-back<i>(0&lt;distance&lt;=5)</i></td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width='40' style='background-color:"
operator|+
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Strongly discouraged back-to-back<i>(5&lt;distance&lt;=20)</i></td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width='40' style='background-color:"
operator|+
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Prohibited back-to-back<i>(20&lt;distance)</i></td><td></td></tr>"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|iBgMode
operator|==
name|TimetableGridModel
operator|.
name|sBgModeDistributionConstPref
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width='40' style='background-color:"
operator|+
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>No violated constraint<i>(distance=0)</i></td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width='40' style='background-color:"
operator|+
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sDiscouraged
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Discouraged/preferred constraint violated</td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width='40' style='background-color:"
operator|+
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Strongly discouraged/preferred constraint violated</i></td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width='40' style='background-color:"
operator|+
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Required/prohibited constraint violated</i></td><td></td></tr>"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|iBgMode
operator|==
name|TimetableGridModel
operator|.
name|sBgModePerturbations
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width='40' style='background-color:"
operator|+
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyPreferred
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>No change</td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width='40' style='background-color:"
operator|+
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>No initial assignment</td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width='40' style='background-color:"
operator|+
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sDiscouraged
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Room changed</td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width='40' style='background-color:"
operator|+
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Time changed</i></td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width='40' style='background-color:"
operator|+
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Both time and room changed</i></td><td></td></tr>"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|iBgMode
operator|==
name|TimetableGridModel
operator|.
name|sBgModePerturbationPenalty
condition|)
block|{
for|for
control|(
name|int
name|nrConflicts
init|=
literal|0
init|;
name|nrConflicts
operator|<=
literal|15
condition|;
name|nrConflicts
operator|++
control|)
block|{
name|String
name|color
init|=
name|TimetableGridCell
operator|.
name|conflicts2color
argument_list|(
name|nrConflicts
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width='40' style='background-color:"
operator|+
name|color
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>"
operator|+
operator|(
name|nrConflicts
operator|==
literal|0
condition|?
literal|"Zero perturbation penalty"
else|:
name|nrConflicts
operator|==
literal|15
condition|?
literal|"Perturbation penalty above 15"
else|:
literal|"Perturbation penalty below or equal to "
operator|+
name|nrConflicts
operator|)
operator|+
literal|"</td><td></td></tr>"
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|iBgMode
operator|==
name|TimetableGridModel
operator|.
name|sBgModeHardConflicts
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width='40' style='background-color:"
operator|+
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Required time and room</td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width='40' style='background-color:"
operator|+
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyPreferred
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Can be moved in room with no hard conflict</td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width='40' style='background-color:"
operator|+
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sPreferred
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Can be moved in room (but there is a hard conflict), can be moved in time with no conflict</td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width='40' style='background-color:"
operator|+
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Can be moved in room (but there is a hard conflict)</td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width='40' style='background-color:"
operator|+
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sDiscouraged
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Can be moved in time with no hard conflict, cannot be moved in room</td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width='40' style='background-color:"
operator|+
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Can be moved in time (but there is a hard conflict), cannot be moved in room</td><td></td></tr>"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|iBgMode
operator|==
name|TimetableGridModel
operator|.
name|sBgModeDepartmentalBalancing
condition|)
block|{
for|for
control|(
name|int
name|nrConflicts
init|=
literal|0
init|;
name|nrConflicts
operator|<=
literal|3
condition|;
name|nrConflicts
operator|++
control|)
block|{
name|String
name|color
init|=
name|TimetableGridCell
operator|.
name|conflicts2colorFast
argument_list|(
name|nrConflicts
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width='40' style='background-color:"
operator|+
name|color
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>"
operator|+
operator|(
name|nrConflicts
operator|==
literal|0
condition|?
literal|"Zero penalty"
else|:
name|nrConflicts
operator|==
literal|3
condition|?
literal|"Penalty equal or above 3"
else|:
literal|"Penalty equal to "
operator|+
name|nrConflicts
operator|)
operator|+
literal|"</td><td></td></tr>"
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|iBgMode
operator|==
name|TimetableGridModel
operator|.
name|sBgModeTooBigRooms
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width='40' style='background-color:"
operator|+
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Assigned room is smaller than room limit of a class</td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width='40' style='background-color:"
operator|+
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Assigned room is not more than 25% bigger than the smallest avaialable room</td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width='40' style='background-color:"
operator|+
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sDiscouraged
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Assigned room is not more than 50% bigger than the smallest avaialable room</td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width='40' style='background-color:"
operator|+
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Assigned room is more than 50% bigger than the smallest avaialable room</td><td></td></tr>"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td colspan='2'>Free times:</td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width='40' style='background-color:"
operator|+
name|TimetableGridCell
operator|.
name|sBgColorNotAvailable
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Time not available</td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width='40' style='background-color:"
operator|+
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>No preference</td><td></td></tr>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iShowUselessTimes
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width='40' style='background-color:"
operator|+
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sDiscouraged
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Standard (MWF or TTh) time pattern is broken (time cannot be used for MW, WF, MF or TTh class)</td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width='40' style='background-color:"
operator|+
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Useless half-hour</td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width='40' style='background-color:"
operator|+
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Useless half-hour and broken standard time pattern</td><td></td></tr>"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

