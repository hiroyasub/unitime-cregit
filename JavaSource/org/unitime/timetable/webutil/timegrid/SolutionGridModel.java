begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.0 (University Course Timetabling& Student Sectioning Application)  * Copyright (C) 2007, UniTime.org, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|timegrid
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|preference
operator|.
name|PreferenceCombination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|Web
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExactTimeMins
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomSharingModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Solution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SolutionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|AssignmentPreferenceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|GroupConstraintInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|DateUtils
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|SolutionGridModel
extends|extends
name|TimetableGridModel
block|{
specifier|private
specifier|transient
name|Long
name|iRoomId
init|=
literal|null
decl_stmt|;
specifier|private
specifier|transient
name|int
name|iStartDay
init|=
literal|0
decl_stmt|;
specifier|private
specifier|transient
name|int
name|iEndDay
init|=
literal|0
decl_stmt|;
specifier|public
name|SolutionGridModel
parameter_list|(
name|String
name|solutionIdsStr
parameter_list|,
name|Location
name|room
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|int
name|firstDay
parameter_list|,
name|int
name|bgMode
parameter_list|)
block|{
name|super
argument_list|(
name|sResourceTypeRoom
argument_list|,
name|room
operator|.
name|getUniqueId
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|setName
argument_list|(
name|room
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|setSize
argument_list|(
name|room
operator|.
name|getCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|iRoomId
operator|=
name|room
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|Solution
name|firstSolution
init|=
literal|null
decl_stmt|;
name|String
name|ownerIds
init|=
literal|""
decl_stmt|;
name|HashSet
name|deptIds
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|solutionIdsStr
argument_list|,
literal|","
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|Long
name|solutionId
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|s
operator|.
name|nextToken
argument_list|()
argument_list|)
decl_stmt|;
name|Solution
name|solution
init|=
operator|(
operator|new
name|SolutionDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|solutionId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|solution
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|firstSolution
operator|==
literal|null
condition|)
name|firstSolution
operator|=
name|solution
expr_stmt|;
if|if
condition|(
name|ownerIds
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|ownerIds
operator|+=
literal|","
expr_stmt|;
name|ownerIds
operator|+=
name|solution
operator|.
name|getOwner
argument_list|()
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|solution
operator|.
name|getOwner
argument_list|()
operator|.
name|getDepartments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|d
init|=
operator|(
name|Department
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|deptIds
operator|.
name|add
argument_list|(
name|d
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|iStartDay
operator|=
name|DateUtils
operator|.
name|getDayOfYear
argument_list|(
name|firstSolution
operator|.
name|getSession
argument_list|()
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|iEndDay
operator|=
name|DateUtils
operator|.
name|getDayOfYear
argument_list|(
name|firstSolution
operator|.
name|getSession
argument_list|()
operator|.
name|getSessionEndDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|Query
name|q
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct a from Assignment as a inner join a.rooms as r where a.solution.uniqueId in ("
operator|+
name|solutionIdsStr
operator|+
literal|") and r.uniqueId=:resourceId"
argument_list|)
decl_stmt|;
name|q
operator|.
name|setInteger
argument_list|(
literal|"resourceId"
argument_list|,
name|room
operator|.
name|getUniqueId
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|init
argument_list|(
name|q
operator|.
name|list
argument_list|()
argument_list|,
name|hibSession
argument_list|,
name|firstDay
argument_list|,
name|bgMode
argument_list|)
expr_stmt|;
name|q
operator|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct a from Room r inner join r.assignments as a "
operator|+
literal|"where r.uniqueId=:roomId and a.solution.commited=true and a.solution.owner.session.uniqueId=:sessionId and a.solution.owner.uniqueId not in ("
operator|+
name|ownerIds
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|q
operator|.
name|setInteger
argument_list|(
literal|"roomId"
argument_list|,
name|room
operator|.
name|getUniqueId
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|room
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
name|commitedAssignments
init|=
name|q
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|x
init|=
name|commitedAssignments
operator|.
name|iterator
argument_list|()
init|;
name|x
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Assignment
name|a
init|=
operator|(
name|Assignment
operator|)
name|x
operator|.
name|next
argument_list|()
decl_stmt|;
name|init
argument_list|(
name|a
argument_list|,
name|hibSession
argument_list|,
name|firstDay
argument_list|,
name|sBgModeNotAvailable
argument_list|)
expr_stmt|;
comment|/* 			int days = a.getDays().intValue(); 			int startSlot = a.getStartSlot().intValue(); 			int length = a.getTimePattern().getSlotsPerMtg().intValue(); 			if (a.getTimePattern().getType().intValue()==TimePattern.sTypeExactTime) { 				length = TimePatternModel.getExactSlotsPerMtg(days, a.getClazz().getSchedulingSubpart().getMinutesPerWk().intValue()); 			} 			for (int i=0;i<Constants.DAY_CODES.length;i++) { 				if ((Constants.DAY_CODES[i]&days)==0) continue; 				for (int j=startSlot;j<startSlot+length;j++) 					setAvailable(i,j,false); 			} 			*/
block|}
name|RoomSharingModel
name|sharing
init|=
name|room
operator|.
name|getRoomSharingModel
argument_list|()
decl_stmt|;
if|if
condition|(
name|sharing
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|DAY_CODES
operator|.
name|length
condition|;
name|i
operator|++
control|)
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|Constants
operator|.
name|SLOTS_PER_DAY
operator|/
literal|6
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|sharing
operator|.
name|isFreeForAll
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|sharing
operator|.
name|isNotAvailable
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
literal|6
condition|;
name|x
operator|++
control|)
name|setAvailable
argument_list|(
name|i
argument_list|,
literal|6
operator|*
name|j
operator|+
name|x
argument_list|,
literal|false
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|Long
name|dept
init|=
name|sharing
operator|.
name|getDepartmentId
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|dept
operator|!=
literal|null
operator|&&
operator|!
name|deptIds
operator|.
name|contains
argument_list|(
name|dept
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
literal|6
condition|;
name|x
operator|++
control|)
name|setAvailable
argument_list|(
name|i
argument_list|,
literal|6
operator|*
name|j
operator|+
name|x
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|setType
argument_list|(
name|room
operator|.
name|getSchedulingRoomTypeInteger
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SolutionGridModel
parameter_list|(
name|String
name|solutionIdsStr
parameter_list|,
name|DepartmentalInstructor
name|instructor
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|int
name|firstDay
parameter_list|,
name|int
name|bgMode
parameter_list|)
block|{
name|super
argument_list|(
name|sResourceTypeInstructor
argument_list|,
name|instructor
operator|.
name|getUniqueId
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|setName
argument_list|(
name|instructor
operator|.
name|getLastName
argument_list|()
operator|+
literal|", "
operator|+
name|instructor
operator|.
name|getFirstName
argument_list|()
operator|+
operator|(
name|instructor
operator|.
name|getMiddleName
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" "
operator|+
name|instructor
operator|.
name|getMiddleName
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|Solution
name|firstSolution
init|=
literal|null
decl_stmt|;
name|String
name|ownerIds
init|=
literal|""
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|solutionIdsStr
argument_list|,
literal|","
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|Long
name|solutionId
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|s
operator|.
name|nextToken
argument_list|()
argument_list|)
decl_stmt|;
name|Solution
name|solution
init|=
operator|(
operator|new
name|SolutionDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|solutionId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|solution
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|firstSolution
operator|==
literal|null
condition|)
name|firstSolution
operator|=
name|solution
expr_stmt|;
if|if
condition|(
name|ownerIds
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|ownerIds
operator|+=
literal|","
expr_stmt|;
name|ownerIds
operator|+=
name|solution
operator|.
name|getOwner
argument_list|()
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
block|}
name|iStartDay
operator|=
name|DateUtils
operator|.
name|getDayOfYear
argument_list|(
name|firstSolution
operator|.
name|getSession
argument_list|()
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|iEndDay
operator|=
name|DateUtils
operator|.
name|getDayOfYear
argument_list|(
name|firstSolution
operator|.
name|getSession
argument_list|()
operator|.
name|getSessionEndDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|List
name|commitedAssignments
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Query
name|q
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct a from Assignment as a inner join a.instructors as i where a.solution.uniqueId in ("
operator|+
name|solutionIdsStr
operator|+
literal|") and i.externalUniqueId=:puid"
argument_list|)
decl_stmt|;
name|q
operator|.
name|setString
argument_list|(
literal|"puid"
argument_list|,
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|init
argument_list|(
name|q
operator|.
name|list
argument_list|()
argument_list|,
name|hibSession
argument_list|,
name|firstDay
argument_list|,
name|bgMode
argument_list|)
expr_stmt|;
name|q
operator|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct a from DepartmentalInstructor i inner join i.assignments as a "
operator|+
literal|"where i.externalUniqueId=:puid and a.solution.commited=true and a.solution.owner.session.uniqueId=:sessionId and a.solution.owner.uniqueId not in ("
operator|+
name|ownerIds
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|q
operator|.
name|setString
argument_list|(
literal|"puid"
argument_list|,
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|instructor
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|commitedAssignments
operator|=
name|q
operator|.
name|list
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Query
name|q
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct a from Assignment as a inner join a.instructors as i where a.solution.uniqueId in ("
operator|+
name|solutionIdsStr
operator|+
literal|") and i.uniqueId=:resourceId"
argument_list|)
decl_stmt|;
name|q
operator|.
name|setInteger
argument_list|(
literal|"resourceId"
argument_list|,
name|instructor
operator|.
name|getUniqueId
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|init
argument_list|(
name|q
operator|.
name|list
argument_list|()
argument_list|,
name|hibSession
argument_list|,
name|firstDay
argument_list|,
name|bgMode
argument_list|)
expr_stmt|;
name|q
operator|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct a from DepartmentalInstructor i inner join i.assignments as a "
operator|+
literal|"where i.uniqueId=:instructorId and a.solution.commited=true and a.solution.owner.session.uniqueId=:sessionId and a.solution.owner.uniqueId not in ("
operator|+
name|ownerIds
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|q
operator|.
name|setInteger
argument_list|(
literal|"instructorId"
argument_list|,
name|instructor
operator|.
name|getUniqueId
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|instructor
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|commitedAssignments
operator|=
name|q
operator|.
name|list
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|x
init|=
name|commitedAssignments
operator|.
name|iterator
argument_list|()
init|;
name|x
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Assignment
name|a
init|=
operator|(
name|Assignment
operator|)
name|x
operator|.
name|next
argument_list|()
decl_stmt|;
name|init
argument_list|(
name|a
argument_list|,
name|hibSession
argument_list|,
name|firstDay
argument_list|,
name|sBgModeNotAvailable
argument_list|)
expr_stmt|;
comment|/* 			int days = a.getDays().intValue(); 			int startSlot = a.getStartSlot().intValue(); 			int length = a.getTimePattern().getSlotsPerMtg().intValue();  			if (a.getTimePattern().getType().intValue()==TimePattern.sTypeExactTime) { 				length = TimePatternModel.getExactSlotsPerMtg(days, a.getClazz().getSchedulingSubpart().getMinutesPerWk().intValue()); 			} 			for (int i=0;i<Constants.DAY_CODES.length;i++) { 				if ((Constants.DAY_CODES[i]&days)==0) continue; 				for (int j=startSlot;j<startSlot+length;j++) 					setAvailable(i,j,false); 			} 			*/
block|}
if|if
condition|(
name|instructor
operator|.
name|getPositionType
argument_list|()
operator|!=
literal|null
condition|)
name|setType
argument_list|(
name|instructor
operator|.
name|getPositionType
argument_list|()
operator|.
name|getSortOrder
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SolutionGridModel
parameter_list|(
name|String
name|solutionIdsStr
parameter_list|,
name|Department
name|dept
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|int
name|firstDay
parameter_list|,
name|int
name|bgMode
parameter_list|)
block|{
name|super
argument_list|(
name|sResourceTypeInstructor
argument_list|,
name|dept
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|setName
argument_list|(
name|dept
operator|.
name|getShortLabel
argument_list|()
argument_list|)
expr_stmt|;
name|Solution
name|firstSolution
init|=
literal|null
decl_stmt|;
name|String
name|ownerIds
init|=
literal|""
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|solutionIdsStr
argument_list|,
literal|","
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|Long
name|solutionId
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|s
operator|.
name|nextToken
argument_list|()
argument_list|)
decl_stmt|;
name|Solution
name|solution
init|=
operator|(
operator|new
name|SolutionDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|solutionId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|solution
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|firstSolution
operator|==
literal|null
condition|)
name|firstSolution
operator|=
name|solution
expr_stmt|;
if|if
condition|(
name|ownerIds
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|ownerIds
operator|+=
literal|","
expr_stmt|;
name|ownerIds
operator|+=
name|solution
operator|.
name|getOwner
argument_list|()
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
block|}
name|iStartDay
operator|=
name|DateUtils
operator|.
name|getDayOfYear
argument_list|(
name|firstSolution
operator|.
name|getSession
argument_list|()
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|iEndDay
operator|=
name|DateUtils
operator|.
name|getDayOfYear
argument_list|(
name|firstSolution
operator|.
name|getSession
argument_list|()
operator|.
name|getSessionEndDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|Query
name|q
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct a from Assignment as a inner join a.clazz.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings as o inner join o.subjectArea.department as d where "
operator|+
literal|"a.solution.uniqueId in ("
operator|+
name|solutionIdsStr
operator|+
literal|") and d.uniqueId=:resourceId and "
operator|+
literal|"o.isControl=true"
argument_list|)
decl_stmt|;
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|q
operator|.
name|setLong
argument_list|(
literal|"resourceId"
argument_list|,
name|dept
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|List
name|a
init|=
name|q
operator|.
name|list
argument_list|()
decl_stmt|;
name|setSize
argument_list|(
name|a
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|init
argument_list|(
name|a
argument_list|,
name|hibSession
argument_list|,
name|firstDay
argument_list|,
name|bgMode
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|init
parameter_list|(
name|List
name|assignments
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|int
name|firstDay
parameter_list|,
name|int
name|bgMode
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|assignments
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Assignment
name|assignment
init|=
operator|(
name|Assignment
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|init
argument_list|(
name|assignment
argument_list|,
name|hibSession
argument_list|,
name|firstDay
argument_list|,
name|bgMode
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|init
parameter_list|(
name|Assignment
name|assignment
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|int
name|firstDay
parameter_list|,
name|int
name|bgMode
parameter_list|)
block|{
name|TimetableGridCell
name|cell
init|=
literal|null
decl_stmt|;
name|int
name|days
init|=
name|assignment
operator|.
name|getDays
argument_list|()
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|int
name|start
init|=
name|assignment
operator|.
name|getStartSlot
argument_list|()
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|BitSet
name|weekCode
init|=
operator|(
name|assignment
operator|.
name|getDatePattern
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|assignment
operator|.
name|getDatePattern
argument_list|()
operator|.
name|getPatternBitSet
argument_list|()
operator|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|Constants
operator|.
name|DAY_CODES
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|Constants
operator|.
name|DAY_CODES
index|[
name|j
index|]
operator|&
name|days
operator|)
operator|==
literal|0
condition|)
continue|continue;
if|if
condition|(
name|firstDay
operator|>=
literal|0
condition|)
block|{
name|int
name|day
init|=
name|firstDay
operator|+
name|j
decl_stmt|;
if|if
condition|(
operator|!
name|weekCode
operator|.
name|get
argument_list|(
name|day
argument_list|)
condition|)
continue|continue;
block|}
if|if
condition|(
name|cell
operator|==
literal|null
condition|)
name|cell
operator|=
name|createCell
argument_list|(
name|j
argument_list|,
name|start
argument_list|,
name|hibSession
argument_list|,
name|assignment
argument_list|,
name|bgMode
argument_list|)
expr_stmt|;
else|else
name|cell
operator|=
name|cell
operator|.
name|copyCell
argument_list|(
name|j
argument_list|,
name|cell
operator|.
name|getMeetingNumber
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|addCell
argument_list|(
name|j
argument_list|,
name|start
argument_list|,
name|cell
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|String
name|hardConflicts2pref
parameter_list|(
name|AssignmentPreferenceInfo
name|assignmentInfo
parameter_list|)
block|{
if|if
condition|(
name|assignmentInfo
operator|==
literal|null
condition|)
return|return
name|PreferenceLevel
operator|.
name|sNeutral
return|;
name|String
name|pref
init|=
name|PreferenceLevel
operator|.
name|sNeutral
decl_stmt|;
if|if
condition|(
name|assignmentInfo
operator|.
name|getNrRoomLocations
argument_list|()
operator|==
literal|1
operator|&&
name|assignmentInfo
operator|.
name|getNrTimeLocations
argument_list|()
operator|==
literal|1
condition|)
name|pref
operator|=
name|PreferenceLevel
operator|.
name|sRequired
expr_stmt|;
if|else if
condition|(
name|assignmentInfo
operator|.
name|getNrSameTimePlacementsNoConf
argument_list|()
operator|>
literal|0
condition|)
name|pref
operator|=
name|PreferenceLevel
operator|.
name|sStronglyPreferred
expr_stmt|;
if|else if
condition|(
name|assignmentInfo
operator|.
name|getNrTimeLocations
argument_list|()
operator|>
literal|1
operator|&&
name|assignmentInfo
operator|.
name|getNrSameRoomPlacementsNoConf
argument_list|()
operator|>
literal|0
condition|)
name|pref
operator|=
name|PreferenceLevel
operator|.
name|sProhibited
expr_stmt|;
if|else if
condition|(
name|assignmentInfo
operator|.
name|getNrTimeLocations
argument_list|()
operator|>
literal|1
condition|)
name|pref
operator|=
name|PreferenceLevel
operator|.
name|sNeutral
expr_stmt|;
if|else if
condition|(
name|assignmentInfo
operator|.
name|getNrSameRoomPlacementsNoConf
argument_list|()
operator|>
literal|0
condition|)
name|pref
operator|=
name|PreferenceLevel
operator|.
name|sDiscouraged
expr_stmt|;
if|else if
condition|(
name|assignmentInfo
operator|.
name|getNrRoomLocations
argument_list|()
operator|>
literal|1
condition|)
name|pref
operator|=
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
expr_stmt|;
else|else
name|pref
operator|=
name|PreferenceLevel
operator|.
name|sRequired
expr_stmt|;
return|return
name|pref
return|;
block|}
specifier|private
name|TimetableGridCell
name|createCell
parameter_list|(
name|int
name|day
parameter_list|,
name|int
name|slot
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Assignment
name|assignment
parameter_list|,
name|int
name|bgMode
parameter_list|)
block|{
name|String
name|name
init|=
name|assignment
operator|.
name|getClassName
argument_list|()
decl_stmt|;
name|String
name|title
init|=
literal|""
decl_stmt|;
name|int
name|length
init|=
name|assignment
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getSlotsPerMtg
argument_list|()
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|int
name|nrMeetings
init|=
name|assignment
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getNrMeetings
argument_list|()
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|assignment
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getType
argument_list|()
operator|.
name|intValue
argument_list|()
operator|==
name|TimePattern
operator|.
name|sTypeExactTime
condition|)
block|{
name|length
operator|=
name|ExactTimeMins
operator|.
name|getNrSlotsPerMtg
argument_list|(
name|assignment
operator|.
name|getDays
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|assignment
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|nrMeetings
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|NR_DAYS
condition|;
name|i
operator|++
control|)
if|if
condition|(
operator|(
name|assignment
operator|.
name|getDays
argument_list|()
operator|.
name|intValue
argument_list|()
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|i
index|]
operator|)
operator|!=
literal|0
condition|)
name|nrMeetings
operator|++
expr_stmt|;
block|}
name|String
name|shortComment
init|=
literal|null
decl_stmt|;
name|String
name|shortCommentNoColor
init|=
literal|null
decl_stmt|;
name|String
name|onClick
init|=
literal|"window.open('suggestions.do?id="
operator|+
name|assignment
operator|.
name|getClassId
argument_list|()
operator|+
literal|"&op=Reset','suggestions','width=1000,height=600,resizable=yes,scrollbars=yes,toolbar=no,location=no,directories=no,status=yes,menubar=no,copyhistory=no');"
decl_stmt|;
name|String
name|background
init|=
literal|null
decl_stmt|;
name|StringBuffer
name|roomName
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|assignment
operator|.
name|getRooms
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|r
init|=
operator|(
name|Location
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|roomName
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|roomName
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|roomName
operator|.
name|append
argument_list|(
name|r
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bgMode
operator|==
name|sBgModeNone
condition|)
name|background
operator|=
name|TimetableGridCell
operator|.
name|sBgColorNeutral
expr_stmt|;
if|if
condition|(
name|bgMode
operator|==
name|sBgModeNotAvailable
condition|)
name|background
operator|=
name|TimetableGridCell
operator|.
name|sBgColorNotAvailable
expr_stmt|;
name|AssignmentPreferenceInfo
name|assignmentInfo
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|bgMode
operator|!=
name|sBgModeNotAvailable
condition|)
block|{
try|try
block|{
name|assignmentInfo
operator|=
operator|(
name|AssignmentPreferenceInfo
operator|)
name|assignment
operator|.
name|getAssignmentInfo
argument_list|(
literal|"AssignmentInfo"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|assignmentInfo
operator|!=
literal|null
condition|)
block|{
name|int
name|roomPref
init|=
operator|(
name|iRoomId
operator|==
literal|null
condition|?
name|assignmentInfo
operator|.
name|combineRoomPreference
argument_list|()
else|:
name|assignmentInfo
operator|.
name|getRoomPreference
argument_list|(
name|iRoomId
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|bgMode
operator|==
name|sBgModeTimePref
condition|)
block|{
name|background
operator|=
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|assignmentInfo
operator|.
name|getTimePreference
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|bgMode
operator|==
name|sBgModeRoomPref
condition|)
block|{
name|background
operator|=
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|roomPref
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|bgMode
operator|==
name|sBgModeStudentConf
condition|)
block|{
name|background
operator|=
name|TimetableGridCell
operator|.
name|conflicts2color
argument_list|(
name|assignmentInfo
operator|.
name|getNrStudentConflicts
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|bgMode
operator|==
name|sBgModeInstructorBtbPref
condition|)
block|{
name|background
operator|=
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|assignmentInfo
operator|.
name|getBtbInstructorPreference
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|bgMode
operator|==
name|sBgModePerturbations
condition|)
block|{
name|String
name|pref
init|=
name|PreferenceLevel
operator|.
name|sNeutral
decl_stmt|;
if|if
condition|(
name|assignmentInfo
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|assignmentInfo
operator|.
name|getIsInitial
argument_list|()
condition|)
name|pref
operator|=
name|PreferenceLevel
operator|.
name|sStronglyPreferred
expr_stmt|;
if|else if
condition|(
name|assignmentInfo
operator|.
name|getHasInitialSameTime
argument_list|()
condition|)
name|pref
operator|=
name|PreferenceLevel
operator|.
name|sDiscouraged
expr_stmt|;
if|else if
condition|(
name|assignmentInfo
operator|.
name|getHasInitialSameRoom
argument_list|()
condition|)
name|pref
operator|=
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
expr_stmt|;
else|else
name|pref
operator|=
name|PreferenceLevel
operator|.
name|sProhibited
expr_stmt|;
block|}
name|background
operator|=
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|pref
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|bgMode
operator|==
name|sBgModePerturbationPenalty
condition|)
block|{
name|background
operator|=
name|TimetableGridCell
operator|.
name|conflicts2color
argument_list|(
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|assignmentInfo
operator|.
name|getPerturbationPenalty
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|bgMode
operator|==
name|sBgModeHardConflicts
condition|)
block|{
name|background
operator|=
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|hardConflicts2pref
argument_list|(
name|assignmentInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|bgMode
operator|==
name|sBgModeDepartmentalBalancing
condition|)
block|{
name|background
operator|=
name|TimetableGridCell
operator|.
name|conflicts2colorFast
argument_list|(
operator|(
name|int
operator|)
name|assignmentInfo
operator|.
name|getMaxDeptBalancPenalty
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|bgMode
operator|==
name|sBgModeTooBigRooms
condition|)
block|{
comment|//FIXME: this needs to be changed to reflect the new maxLimit/room ratio model
name|int
name|roomCap
init|=
name|assignment
operator|.
name|getClazz
argument_list|()
operator|.
name|getMinRoomLimit
argument_list|()
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|long
name|minRoomSize
init|=
name|assignmentInfo
operator|.
name|getMinRoomSize
argument_list|()
decl_stmt|;
name|int
name|roomSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|assignment
operator|.
name|getRooms
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|r
init|=
operator|(
name|Location
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|roomSize
operator|+=
name|r
operator|.
name|getCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|roomSize
operator|<
name|roomCap
condition|)
name|background
operator|=
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
expr_stmt|;
else|else
name|background
operator|=
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|assignmentInfo
operator|.
name|getTooBigRoomPreference
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|assignment
operator|.
name|getRooms
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|shortComment
operator|=
literal|"<span style='color:rgb(200,200,200)'>"
operator|+
operator|(
name|assignmentInfo
operator|.
name|getNrRoomLocations
argument_list|()
operator|==
literal|1
condition|?
literal|"<u>"
else|:
literal|""
operator|)
operator|+
name|roomCap
operator|+
literal|" / "
operator|+
name|minRoomSize
operator|+
literal|" / "
operator|+
name|roomSize
operator|+
operator|(
name|assignmentInfo
operator|.
name|getNrRoomLocations
argument_list|()
operator|==
literal|1
condition|?
literal|"</u>"
else|:
literal|""
operator|)
operator|+
literal|"</span>"
expr_stmt|;
name|shortCommentNoColor
operator|=
name|roomCap
operator|+
literal|" / "
operator|+
name|minRoomSize
operator|+
literal|" / "
operator|+
name|roomSize
expr_stmt|;
block|}
block|}
if|if
condition|(
name|shortComment
operator|==
literal|null
condition|)
name|shortComment
operator|=
literal|"<span style='color:rgb(200,200,200)'>"
operator|+
operator|(
name|assignmentInfo
operator|.
name|getBestNormalizedTimePreference
argument_list|()
operator|<
name|assignmentInfo
operator|.
name|getNormalizedTimePreference
argument_list|()
condition|?
literal|"<span style='color:red'>"
operator|+
operator|(
name|int
operator|)
operator|(
name|assignmentInfo
operator|.
name|getNormalizedTimePreference
argument_list|()
operator|-
name|assignmentInfo
operator|.
name|getBestNormalizedTimePreference
argument_list|()
operator|)
operator|+
literal|"</span>"
else|:
literal|""
operator|+
operator|(
name|int
operator|)
operator|(
name|assignmentInfo
operator|.
name|getNormalizedTimePreference
argument_list|()
operator|-
name|assignmentInfo
operator|.
name|getBestNormalizedTimePreference
argument_list|()
operator|)
operator|)
operator|+
literal|", "
operator|+
operator|(
name|assignmentInfo
operator|.
name|getNrStudentConflicts
argument_list|()
operator|>
literal|0
condition|?
literal|"<span style='color:rgb(20,130,10)'>"
operator|+
name|assignmentInfo
operator|.
name|getNrStudentConflicts
argument_list|()
operator|+
literal|"</span>"
else|:
literal|""
operator|+
name|assignmentInfo
operator|.
name|getNrStudentConflicts
argument_list|()
operator|)
operator|+
literal|", "
operator|+
operator|(
name|assignmentInfo
operator|.
name|getBestRoomPreference
argument_list|()
operator|<
name|roomPref
condition|?
literal|"<span style='color:blue'>"
operator|+
operator|(
name|roomPref
operator|-
name|assignmentInfo
operator|.
name|getBestRoomPreference
argument_list|()
operator|)
operator|+
literal|"</span>"
else|:
literal|""
operator|+
operator|(
name|roomPref
operator|-
name|assignmentInfo
operator|.
name|getBestRoomPreference
argument_list|()
operator|)
operator|)
operator|+
literal|"</span>"
expr_stmt|;
if|if
condition|(
name|shortCommentNoColor
operator|==
literal|null
condition|)
name|shortCommentNoColor
operator|=
operator|(
name|int
operator|)
operator|(
name|assignmentInfo
operator|.
name|getNormalizedTimePreference
argument_list|()
operator|-
name|assignmentInfo
operator|.
name|getBestNormalizedTimePreference
argument_list|()
operator|)
operator|+
literal|", "
operator|+
name|assignmentInfo
operator|.
name|getNrStudentConflicts
argument_list|()
operator|+
literal|", "
operator|+
operator|(
name|roomPref
operator|-
name|assignmentInfo
operator|.
name|getBestRoomPreference
argument_list|()
operator|)
expr_stmt|;
name|title
operator|=
literal|"timePref:"
operator|+
operator|(
name|int
operator|)
name|assignmentInfo
operator|.
name|getNormalizedTimePreference
argument_list|()
operator|+
literal|", "
operator|+
literal|"studConf:"
operator|+
name|assignmentInfo
operator|.
name|getNrStudentConflicts
argument_list|()
operator|+
literal|", "
operator|+
literal|"roomPref:"
operator|+
name|roomPref
operator|+
literal|", "
operator|+
literal|"btbInstrPref:"
operator|+
name|assignmentInfo
operator|.
name|getBtbInstructorPreference
argument_list|()
operator|+
literal|", "
operator|+
operator|(
name|assignmentInfo
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
condition|?
literal|"initial:"
operator|+
operator|(
name|assignmentInfo
operator|.
name|getIsInitial
argument_list|()
condition|?
literal|"this one"
else|:
name|assignmentInfo
operator|.
name|getInitialAssignment
argument_list|()
operator|)
operator|+
literal|", "
else|:
literal|""
operator|)
operator|+
operator|(
name|assignmentInfo
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
condition|?
literal|"pert:"
operator|+
name|Web
operator|.
name|format
argument_list|(
name|assignmentInfo
operator|.
name|getPerturbationPenalty
argument_list|()
argument_list|)
operator|+
literal|", "
else|:
literal|""
operator|)
operator|+
literal|"noConfPlacements:"
operator|+
name|assignmentInfo
operator|.
name|getNrPlacementsNoConf
argument_list|()
operator|+
literal|", "
operator|+
literal|"deptBal:"
operator|+
name|assignmentInfo
operator|.
name|getDeptBalancPenalty
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|bgMode
operator|==
name|sBgModeDistributionConstPref
condition|)
block|{
name|Vector
name|constraintInfos
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
try|try
block|{
name|constraintInfos
operator|=
name|assignment
operator|.
name|getConstraintInfos
argument_list|(
literal|"DistributionInfo"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|constraintInfos
operator|!=
literal|null
condition|)
block|{
name|PreferenceCombination
name|pref
init|=
name|PreferenceCombination
operator|.
name|getDefault
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|constraintInfos
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|GroupConstraintInfo
name|gcInfo
init|=
operator|(
name|GroupConstraintInfo
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|gcInfo
operator|.
name|isSatisfied
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|gcInfo
operator|.
name|getPreference
argument_list|()
argument_list|)
operator|||
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|gcInfo
operator|.
name|getPreference
argument_list|()
argument_list|)
condition|)
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
expr_stmt|;
name|pref
operator|.
name|addPreferenceInt
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2int
argument_list|(
name|gcInfo
operator|.
name|getPreference
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|title
operator|=
name|title
operator|+
literal|", distrPref:"
operator|+
name|pref
operator|.
name|getPreferenceProlog
argument_list|()
expr_stmt|;
name|background
operator|=
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|pref
operator|.
name|getPreferenceProlog
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|TimetableGridCell
argument_list|(
name|day
argument_list|,
name|slot
argument_list|,
name|assignment
operator|.
name|getUniqueId
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
operator|(
name|iRoomId
operator|==
literal|null
condition|?
literal|0
else|:
name|iRoomId
operator|.
name|intValue
argument_list|()
operator|)
argument_list|,
name|roomName
operator|.
name|toString
argument_list|()
argument_list|,
name|name
argument_list|,
name|shortComment
argument_list|,
name|shortCommentNoColor
argument_list|,
operator|(
name|bgMode
operator|==
name|sBgModeNotAvailable
condition|?
literal|null
else|:
name|onClick
operator|)
argument_list|,
name|title
argument_list|,
name|background
argument_list|,
name|length
argument_list|,
literal|0
argument_list|,
name|nrMeetings
argument_list|,
name|assignment
operator|.
name|getDatePattern
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|assignment
operator|.
name|getDatePattern
argument_list|()
operator|.
name|getPatternBitSet
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

