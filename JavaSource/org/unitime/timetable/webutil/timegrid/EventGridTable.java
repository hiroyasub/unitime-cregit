begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|timegrid
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|jsp
operator|.
name|JspWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|EventGridForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Meeting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|MeetingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_class
specifier|public
class|class
name|EventGridTable
block|{
specifier|protected
name|TreeSet
argument_list|<
name|TableModel
argument_list|>
name|iModel
init|=
literal|null
decl_stmt|;
specifier|protected
name|Vector
argument_list|<
name|Date
argument_list|>
name|iDates
decl_stmt|;
specifier|protected
name|int
name|iStep
init|=
literal|3
decl_stmt|;
specifier|protected
name|int
name|iStartSlot
decl_stmt|,
name|iEndSlot
decl_stmt|;
specifier|public
name|EventGridTable
parameter_list|(
name|EventGridForm
name|form
parameter_list|)
block|{
if|if
condition|(
name|form
operator|.
name|getStartTime
argument_list|()
operator|>=
name|form
operator|.
name|getStopTime
argument_list|()
condition|)
return|return;
name|iDates
operator|=
operator|new
name|Vector
argument_list|(
name|form
operator|.
name|getMeetingDates
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iDates
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|iModel
operator|=
operator|new
name|TreeSet
argument_list|()
expr_stmt|;
name|iStartSlot
operator|=
name|form
operator|.
name|getStartTime
argument_list|()
expr_stmt|;
name|iEndSlot
operator|=
name|form
operator|.
name|getStopTime
argument_list|()
expr_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|Location
argument_list|>
name|e
init|=
name|form
operator|.
name|getPossibleLocations
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Location
name|location
init|=
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|iModel
operator|.
name|add
argument_list|(
operator|new
name|TableModel
argument_list|(
name|location
argument_list|,
name|form
operator|.
name|isAdmin
argument_list|()
operator|||
name|location
operator|.
name|getRoomType
argument_list|()
operator|.
name|getOption
argument_list|(
name|location
operator|.
name|getSession
argument_list|()
argument_list|)
operator|.
name|canScheduleEvents
argument_list|()
argument_list|,
name|form
operator|.
name|getMode
argument_list|()
argument_list|,
name|form
operator|.
name|isAdmin
argument_list|()
operator|||
operator|(
name|form
operator|.
name|getManagingDepartments
argument_list|()
operator|!=
literal|null
operator|&&
name|form
operator|.
name|getManagingDepartments
argument_list|()
operator|.
name|contains
argument_list|(
name|location
operator|.
name|getControllingDepartment
argument_list|()
argument_list|)
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|printTable
parameter_list|(
name|JspWriter
name|out
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|iModel
operator|==
literal|null
operator|||
name|iModel
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|out
operator|.
name|println
argument_list|(
literal|"<table border='0' cellpadding='2' cellspacing='0'>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iDates
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
for|for
control|(
name|TableModel
name|m
range|:
name|iModel
control|)
block|{
name|boolean
name|split
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Date
name|date
range|:
name|iDates
control|)
if|if
condition|(
name|m
operator|.
name|getColSpan
argument_list|(
name|date
argument_list|)
operator|>
literal|1
condition|)
name|split
operator|=
literal|true
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr valign='top' align='center'>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td class='TimetableHeadCell"
operator|+
operator|(
name|split
condition|?
literal|"EOD"
else|:
literal|""
operator|)
operator|+
literal|"'><b>"
operator|+
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|"</b><br><i>("
operator|+
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getCapacity
argument_list|()
operator|+
literal|" seats)</i></td>"
argument_list|)
expr_stmt|;
name|DateFormat
name|df1
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"EEEE"
argument_list|)
decl_stmt|;
name|DateFormat
name|df2
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MMM dd, yyyy"
argument_list|)
decl_stmt|;
name|DateFormat
name|df3
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd"
argument_list|)
decl_stmt|;
for|for
control|(
name|Date
name|date
range|:
name|iDates
control|)
block|{
name|boolean
name|last
init|=
name|iDates
operator|.
name|lastElement
argument_list|()
operator|.
name|equals
argument_list|(
name|date
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td colspan='"
operator|+
name|m
operator|.
name|getColSpan
argument_list|(
name|date
argument_list|)
operator|+
literal|"' class='TimetableHeadCell"
operator|+
operator|(
name|last
condition|?
literal|"EOL"
else|:
name|split
condition|?
literal|"EOD"
else|:
literal|""
operator|)
operator|+
literal|"' id='b"
operator|+
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"."
operator|+
name|iDates
operator|.
name|indexOf
argument_list|(
name|date
argument_list|)
operator|+
literal|"'><b>"
operator|+
name|df1
operator|.
name|format
argument_list|(
name|date
argument_list|)
operator|+
literal|"<br>"
operator|+
name|df2
operator|.
name|format
argument_list|(
name|date
argument_list|)
operator|+
literal|"</b></td>"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"</tr>"
argument_list|)
expr_stmt|;
name|HashSet
argument_list|<
name|Meeting
argument_list|>
name|rendered
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|int
name|lastCol
init|=
operator|(
name|iEndSlot
operator|-
name|iStartSlot
operator|)
operator|/
name|iStep
decl_stmt|;
name|TreeSet
argument_list|<
name|Integer
argument_list|>
name|aboveBlank
init|=
operator|new
name|TreeSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|lastCol
condition|;
name|col
operator|++
control|)
block|{
name|int
name|start
init|=
name|iStartSlot
operator|+
name|col
operator|*
name|iStep
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr valign='top' align='center'><td class='TimetableCell"
operator|+
operator|(
name|split
condition|?
literal|"EOD"
else|:
literal|""
operator|)
operator|+
literal|"' id='a"
operator|+
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"."
operator|+
name|col
operator|+
literal|"'>"
argument_list|)
expr_stmt|;
name|int
name|min
init|=
name|start
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
decl_stmt|;
name|int
name|startHour
init|=
name|min
operator|/
literal|60
decl_stmt|;
name|int
name|startMin
init|=
name|min
operator|%
literal|60
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<b>"
operator|+
operator|(
name|startHour
operator|>
literal|12
condition|?
name|startHour
operator|-
literal|12
else|:
name|startHour
operator|)
operator|+
literal|":"
operator|+
operator|(
name|startMin
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|startMin
operator|+
operator|(
name|startHour
operator|>=
literal|12
condition|?
literal|"p"
else|:
literal|"a"
operator|)
operator|+
literal|"</b>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</td>"
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|Integer
argument_list|>
name|blank
init|=
operator|new
name|TreeSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iDates
operator|.
name|size
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|boolean
name|last
init|=
operator|(
name|row
operator|+
literal|1
operator|==
name|iDates
operator|.
name|size
argument_list|()
operator|)
decl_stmt|;
name|Date
name|date
init|=
name|iDates
operator|.
name|elementAt
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|TableCell
name|cell
init|=
name|m
operator|.
name|getTable
argument_list|()
index|[
name|row
index|]
index|[
name|col
index|]
decl_stmt|;
name|int
name|span
init|=
name|m
operator|.
name|getColSpan
argument_list|(
name|date
argument_list|)
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|TreeSet
argument_list|<
name|Integer
argument_list|>
name|cols
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|span
condition|;
name|i
operator|++
control|)
name|cols
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|MeetingCell
argument_list|>
name|todo
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|MeetingCell
name|mc
range|:
name|cell
operator|.
name|getMeetings
argument_list|()
control|)
block|{
name|Meeting
name|meeting
init|=
name|mc
operator|.
name|getMeeting
argument_list|()
decl_stmt|;
if|if
condition|(
name|rendered
operator|.
name|add
argument_list|(
name|meeting
argument_list|)
condition|)
block|{
name|todo
operator|.
name|add
argument_list|(
name|mc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|idx
operator|++
expr_stmt|;
name|cols
operator|.
name|remove
argument_list|(
name|mc
operator|.
name|getCol
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|MeetingCell
name|mc
range|:
name|todo
control|)
block|{
name|Meeting
name|meeting
init|=
name|mc
operator|.
name|getMeeting
argument_list|()
decl_stmt|;
name|int
name|mcol
init|=
name|cols
operator|.
name|first
argument_list|()
decl_stmt|;
name|cols
operator|.
name|remove
argument_list|(
name|mcol
argument_list|)
expr_stmt|;
name|mc
operator|.
name|setCol
argument_list|(
name|mcol
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td rowspan='"
operator|+
name|mc
operator|.
name|getLength
argument_list|()
operator|+
literal|"' nowrap class='TimetableCell"
operator|+
operator|(
name|mcol
operator|+
literal|1
operator|==
name|span
condition|?
operator|(
name|last
condition|?
literal|"EOL"
else|:
name|split
condition|?
literal|"EOD"
else|:
literal|""
operator|)
else|:
literal|""
operator|)
operator|+
literal|"' "
operator|+
operator|(
name|aboveBlank
operator|.
name|contains
argument_list|(
name|mcol
argument_list|)
condition|?
literal|"style='border-top:#646464 1px solid;'"
else|:
literal|""
operator|)
operator|+
literal|" onMouseOver=\"evOver(this,event,"
operator|+
name|meeting
operator|.
name|getEvent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|","
operator|+
name|meeting
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|");\""
operator|+
literal|" onMouseOut=\"evOut(this,event,"
operator|+
name|meeting
operator|.
name|getEvent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|","
operator|+
name|meeting
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|");\""
operator|+
literal|" onClick=\"evClick(this,event,"
operator|+
name|meeting
operator|.
name|getEvent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|","
operator|+
name|meeting
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|");\""
operator|+
literal|" title=\""
operator|+
name|df3
operator|.
name|format
argument_list|(
name|iDates
operator|.
name|elementAt
argument_list|(
name|row
argument_list|)
argument_list|)
operator|+
literal|" "
operator|+
name|meeting
operator|.
name|startTime
argument_list|()
operator|+
literal|" - "
operator|+
name|meeting
operator|.
name|stopTime
argument_list|()
operator|+
literal|" "
operator|+
name|meeting
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventName
argument_list|()
operator|+
literal|" ("
operator|+
name|meeting
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventTypeLabel
argument_list|()
operator|+
literal|")"
operator|+
literal|"\""
operator|+
literal|"><a name='A"
operator|+
name|meeting
operator|.
name|getEvent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"'>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|mc
operator|.
name|getLength
argument_list|()
operator|>=
literal|2
condition|)
name|out
operator|.
name|println
argument_list|(
name|meeting
operator|.
name|startTime
argument_list|()
operator|+
literal|" - "
operator|+
name|meeting
operator|.
name|stopTime
argument_list|()
operator|+
literal|"<br>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|meeting
operator|.
name|getApprovedDate
argument_list|()
operator|!=
literal|null
condition|)
name|out
operator|.
name|println
argument_list|(
literal|"<b>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|meeting
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|meeting
operator|.
name|getApprovedDate
argument_list|()
operator|!=
literal|null
condition|)
name|out
operator|.
name|println
argument_list|(
literal|"</b>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|mc
operator|.
name|getLength
argument_list|()
operator|>=
literal|3
condition|)
name|out
operator|.
name|println
argument_list|(
literal|"<br><i>"
operator|+
name|meeting
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventTypeLabel
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"Event"
argument_list|,
literal|""
argument_list|)
operator|+
literal|"</i>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</a></td>"
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
name|boolean
name|isAvailable
init|=
operator|(
name|idx
operator|==
literal|0
operator|)
decl_stmt|;
name|int
name|prev
init|=
operator|-
literal|2
decl_stmt|;
while|while
condition|(
name|idx
operator|<
name|span
condition|)
block|{
name|int
name|mcol
init|=
name|cols
operator|.
name|first
argument_list|()
decl_stmt|;
name|cols
operator|.
name|remove
argument_list|(
name|mcol
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isAvailable
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<td class='TimetableCell"
operator|+
operator|(
name|mcol
operator|+
literal|1
operator|==
name|span
condition|?
operator|(
name|last
condition|?
literal|"EOL"
else|:
name|split
condition|?
literal|"EOD"
else|:
literal|""
operator|)
else|:
literal|""
operator|)
operator|+
literal|"' style='background-color:#E0E0E0;"
operator|+
operator|(
name|col
operator|+
literal|1
operator|<
name|lastCol
operator|&&
operator|!
name|m
operator|.
name|getTable
argument_list|()
index|[
name|row
index|]
index|[
name|col
operator|+
literal|1
index|]
operator|.
name|getMeetings
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"border-bottom:none;"
else|:
literal|""
operator|)
operator|+
operator|(
name|prev
operator|+
literal|1
operator|==
name|mcol
condition|?
literal|"border-left:none;"
else|:
literal|""
operator|)
operator|+
literal|"'>&nbsp;</td>"
argument_list|)
expr_stmt|;
name|blank
operator|.
name|add
argument_list|(
name|mcol
argument_list|)
expr_stmt|;
name|prev
operator|=
name|mcol
expr_stmt|;
block|}
if|else if
condition|(
name|m
operator|.
name|isEditable
argument_list|()
operator|&&
name|cell
operator|.
name|isEditable
argument_list|()
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<td colspan='"
operator|+
name|span
operator|+
literal|"' class='TimetableCell"
operator|+
operator|(
name|last
condition|?
literal|"EOL"
else|:
name|split
condition|?
literal|"EOD"
else|:
literal|""
operator|)
operator|+
literal|"'"
operator|+
literal|" onMouseOver=\"avOver(this,event,"
operator|+
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|","
operator|+
name|row
operator|+
literal|","
operator|+
name|col
operator|+
literal|");\" "
operator|+
literal|" onMouseOut=\"avOut(this,event,"
operator|+
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|","
operator|+
name|row
operator|+
literal|","
operator|+
name|col
operator|+
literal|");\" "
operator|+
literal|" onMouseDown=\"avDown(this,event,"
operator|+
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|","
operator|+
name|row
operator|+
literal|","
operator|+
name|col
operator|+
literal|"); return false;\" "
operator|+
literal|" onMouseUp=\"avUp(this,event,"
operator|+
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|","
operator|+
name|row
operator|+
literal|","
operator|+
name|col
operator|+
literal|");\" "
operator|+
literal|" onClick=\"avClick(this,event,"
operator|+
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|","
operator|+
name|row
operator|+
literal|","
operator|+
name|col
operator|+
literal|");\""
operator|+
literal|" onSelectStart=\"return false;\" "
operator|+
literal|" id='d"
operator|+
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"."
operator|+
name|row
operator|+
literal|"."
operator|+
name|col
operator|+
literal|"'>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<input type='checkbox' name='select' value='"
operator|+
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|":"
operator|+
name|date
operator|.
name|getTime
argument_list|()
operator|+
literal|":"
operator|+
name|start
operator|+
literal|":"
operator|+
operator|(
name|start
operator|+
name|iStep
operator|)
operator|+
literal|"' id='c"
operator|+
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"."
operator|+
name|row
operator|+
literal|"."
operator|+
name|col
operator|+
literal|"' style='display:none;'>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"&nbsp;"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</td>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<td colspan='"
operator|+
name|span
operator|+
literal|"' class='TimetableCell"
operator|+
operator|(
name|last
condition|?
literal|"EOL"
else|:
name|split
condition|?
literal|"EOD"
else|:
literal|""
operator|)
operator|+
literal|"' style='background-color:#E0E0E0;'>"
operator|+
literal|"&nbsp;</td>"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isAvailable
condition|)
break|break;
name|idx
operator|++
expr_stmt|;
block|}
block|}
name|aboveBlank
operator|=
name|blank
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</tr>"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|Date
name|date
init|=
name|iDates
operator|.
name|firstElement
argument_list|()
decl_stmt|;
name|boolean
name|split
init|=
literal|false
decl_stmt|;
for|for
control|(
name|TableModel
name|m
range|:
name|iModel
control|)
if|if
condition|(
name|m
operator|.
name|getColSpan
argument_list|(
name|date
argument_list|)
operator|>
literal|1
condition|)
name|split
operator|=
literal|true
expr_stmt|;
name|DateFormat
name|df1
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"EEEE"
argument_list|)
decl_stmt|;
name|DateFormat
name|df2
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MMM dd, yyyy"
argument_list|)
decl_stmt|;
name|DateFormat
name|df3
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd"
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr valign='top' align='center'>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td class='TimetableHeadCell"
operator|+
operator|(
name|split
condition|?
literal|"EOD"
else|:
literal|""
operator|)
operator|+
literal|"'><b>"
operator|+
name|df1
operator|.
name|format
argument_list|(
name|date
argument_list|)
operator|+
literal|"<br>"
operator|+
name|df2
operator|.
name|format
argument_list|(
name|date
argument_list|)
operator|+
literal|"</b></td>"
argument_list|)
expr_stmt|;
name|int
name|row
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TableModel
name|m
range|:
name|iModel
control|)
block|{
name|boolean
name|last
init|=
name|iModel
operator|.
name|last
argument_list|()
operator|.
name|equals
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td colspan='"
operator|+
name|m
operator|.
name|getColSpan
argument_list|(
name|date
argument_list|)
operator|+
literal|"' class='TimetableHeadCell"
operator|+
operator|(
name|last
condition|?
literal|"EOL"
else|:
name|split
condition|?
literal|"EOD"
else|:
literal|""
operator|)
operator|+
literal|"' id='b0."
operator|+
name|row
operator|+
literal|"'><b>"
operator|+
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|"</b><br><i>("
operator|+
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getCapacity
argument_list|()
operator|+
literal|" seats)</i></td>"
argument_list|)
expr_stmt|;
name|row
operator|++
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"</tr>"
argument_list|)
expr_stmt|;
name|HashSet
argument_list|<
name|Meeting
argument_list|>
name|rendered
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|int
name|lastCol
init|=
operator|(
name|iEndSlot
operator|-
name|iStartSlot
operator|)
operator|/
name|iStep
decl_stmt|;
name|TreeSet
argument_list|<
name|Integer
argument_list|>
name|aboveBlank
init|=
operator|new
name|TreeSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|lastCol
condition|;
name|col
operator|++
control|)
block|{
name|int
name|start
init|=
name|iStartSlot
operator|+
name|col
operator|*
name|iStep
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr valign='top' align='center'><td class='TimetableCell"
operator|+
operator|(
name|split
condition|?
literal|"EOD"
else|:
literal|""
operator|)
operator|+
literal|"' id='a0."
operator|+
name|col
operator|+
literal|"'>"
argument_list|)
expr_stmt|;
name|int
name|min
init|=
name|start
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
decl_stmt|;
name|int
name|startHour
init|=
name|min
operator|/
literal|60
decl_stmt|;
name|int
name|startMin
init|=
name|min
operator|%
literal|60
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<b>"
operator|+
operator|(
name|startHour
operator|>
literal|12
condition|?
name|startHour
operator|-
literal|12
else|:
name|startHour
operator|)
operator|+
literal|":"
operator|+
operator|(
name|startMin
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|startMin
operator|+
operator|(
name|startHour
operator|>=
literal|12
condition|?
literal|"p"
else|:
literal|"a"
operator|)
operator|+
literal|"</b>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</td>"
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|Integer
argument_list|>
name|blank
init|=
operator|new
name|TreeSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|row
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|TableModel
name|m
range|:
name|iModel
control|)
block|{
name|TableCell
name|cell
init|=
name|m
operator|.
name|getTable
argument_list|()
index|[
literal|0
index|]
index|[
name|col
index|]
decl_stmt|;
name|boolean
name|last
init|=
name|m
operator|.
name|equals
argument_list|(
name|iModel
operator|.
name|last
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|span
init|=
name|m
operator|.
name|getColSpan
argument_list|(
name|date
argument_list|)
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|TreeSet
argument_list|<
name|Integer
argument_list|>
name|cols
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|span
condition|;
name|i
operator|++
control|)
name|cols
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|MeetingCell
argument_list|>
name|todo
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|MeetingCell
name|mc
range|:
name|cell
operator|.
name|getMeetings
argument_list|()
control|)
block|{
name|Meeting
name|meeting
init|=
name|mc
operator|.
name|getMeeting
argument_list|()
decl_stmt|;
if|if
condition|(
name|rendered
operator|.
name|add
argument_list|(
name|meeting
argument_list|)
condition|)
block|{
name|todo
operator|.
name|add
argument_list|(
name|mc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|idx
operator|++
expr_stmt|;
name|cols
operator|.
name|remove
argument_list|(
name|mc
operator|.
name|getCol
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|MeetingCell
name|mc
range|:
name|todo
control|)
block|{
name|Meeting
name|meeting
init|=
name|mc
operator|.
name|getMeeting
argument_list|()
decl_stmt|;
name|int
name|mcol
init|=
name|cols
operator|.
name|first
argument_list|()
decl_stmt|;
name|cols
operator|.
name|remove
argument_list|(
name|mcol
argument_list|)
expr_stmt|;
name|mc
operator|.
name|setCol
argument_list|(
name|mcol
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td rowspan='"
operator|+
name|mc
operator|.
name|getLength
argument_list|()
operator|+
literal|"' nowrap class='TimetableCell"
operator|+
operator|(
name|mcol
operator|+
literal|1
operator|==
name|span
condition|?
operator|(
name|last
condition|?
literal|"EOL"
else|:
name|split
condition|?
literal|"EOD"
else|:
literal|""
operator|)
else|:
literal|""
operator|)
operator|+
literal|"' "
operator|+
operator|(
name|aboveBlank
operator|.
name|contains
argument_list|(
name|mcol
argument_list|)
condition|?
literal|"style='border-top:#646464 1px solid;'"
else|:
literal|""
operator|)
operator|+
literal|" onMouseOver=\"evOver(this,event,"
operator|+
name|meeting
operator|.
name|getEvent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|","
operator|+
name|meeting
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|");\""
operator|+
literal|" onMouseOut=\"evOut(this,event,"
operator|+
name|meeting
operator|.
name|getEvent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|","
operator|+
name|meeting
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|");\""
operator|+
literal|" onClick=\"evClick(this,event,"
operator|+
name|meeting
operator|.
name|getEvent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|","
operator|+
name|meeting
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|");\""
operator|+
literal|" title=\""
operator|+
name|df3
operator|.
name|format
argument_list|(
name|date
argument_list|)
operator|+
literal|" "
operator|+
name|meeting
operator|.
name|startTime
argument_list|()
operator|+
literal|" - "
operator|+
name|meeting
operator|.
name|stopTime
argument_list|()
operator|+
literal|" "
operator|+
name|meeting
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventName
argument_list|()
operator|+
literal|" ("
operator|+
name|meeting
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventTypeLabel
argument_list|()
operator|+
literal|")"
operator|+
literal|"\""
operator|+
literal|"><a name='A"
operator|+
name|meeting
operator|.
name|getEvent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"'>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|mc
operator|.
name|getLength
argument_list|()
operator|>=
literal|2
condition|)
name|out
operator|.
name|println
argument_list|(
name|meeting
operator|.
name|startTime
argument_list|()
operator|+
literal|" - "
operator|+
name|meeting
operator|.
name|stopTime
argument_list|()
operator|+
literal|"<br>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|meeting
operator|.
name|getApprovedDate
argument_list|()
operator|!=
literal|null
condition|)
name|out
operator|.
name|println
argument_list|(
literal|"<b>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|meeting
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|meeting
operator|.
name|getApprovedDate
argument_list|()
operator|!=
literal|null
condition|)
name|out
operator|.
name|println
argument_list|(
literal|"</b>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|mc
operator|.
name|getLength
argument_list|()
operator|>=
literal|3
condition|)
name|out
operator|.
name|println
argument_list|(
literal|"<br><i>"
operator|+
name|meeting
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventTypeLabel
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"Event"
argument_list|,
literal|""
argument_list|)
operator|+
literal|"</i>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</a></td>"
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
name|boolean
name|isAvailable
init|=
operator|(
name|idx
operator|==
literal|0
operator|)
decl_stmt|;
name|int
name|prev
init|=
operator|-
literal|2
decl_stmt|;
while|while
condition|(
name|idx
operator|<
name|span
condition|)
block|{
name|int
name|mcol
init|=
name|cols
operator|.
name|first
argument_list|()
decl_stmt|;
name|cols
operator|.
name|remove
argument_list|(
name|mcol
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isAvailable
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<td class='TimetableCell"
operator|+
operator|(
name|mcol
operator|+
literal|1
operator|==
name|span
condition|?
operator|(
name|last
condition|?
literal|"EOL"
else|:
name|split
condition|?
literal|"EOD"
else|:
literal|""
operator|)
else|:
literal|""
operator|)
operator|+
literal|"' style='background-color:#E0E0E0;"
operator|+
operator|(
name|col
operator|+
literal|1
operator|<
name|lastCol
operator|&&
operator|!
name|m
operator|.
name|getTable
argument_list|()
index|[
literal|0
index|]
index|[
name|col
operator|+
literal|1
index|]
operator|.
name|getMeetings
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"border-bottom:none;"
else|:
literal|""
operator|)
operator|+
operator|(
name|prev
operator|+
literal|1
operator|==
name|mcol
condition|?
literal|"border-left:none;"
else|:
literal|""
operator|)
operator|+
literal|"'>&nbsp;</td>"
argument_list|)
expr_stmt|;
name|blank
operator|.
name|add
argument_list|(
name|mcol
argument_list|)
expr_stmt|;
name|prev
operator|=
name|mcol
expr_stmt|;
block|}
if|else if
condition|(
name|m
operator|.
name|isEditable
argument_list|()
operator|&&
name|cell
operator|.
name|isEditable
argument_list|()
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<td colspan='"
operator|+
name|span
operator|+
literal|"' class='TimetableCell"
operator|+
operator|(
name|last
condition|?
literal|"EOL"
else|:
name|split
condition|?
literal|"EOD"
else|:
literal|""
operator|)
operator|+
literal|"'"
operator|+
literal|" onMouseOver=\"avOver(this,event,0,"
operator|+
name|row
operator|+
literal|","
operator|+
name|col
operator|+
literal|");\" "
operator|+
literal|" onMouseOut=\"avOut(this,event,0,"
operator|+
name|row
operator|+
literal|","
operator|+
name|col
operator|+
literal|");\" "
operator|+
literal|" onMouseDown=\"avDown(this,event,0,"
operator|+
name|row
operator|+
literal|","
operator|+
name|col
operator|+
literal|"); return false;\" "
operator|+
literal|" onMouseUp=\"avUp(this,event,0,"
operator|+
name|row
operator|+
literal|","
operator|+
name|col
operator|+
literal|");\" "
operator|+
literal|" onClick=\"avClick(this,event,0,"
operator|+
name|row
operator|+
literal|","
operator|+
name|col
operator|+
literal|");\""
operator|+
literal|" onSelectStart=\"return false;\" "
operator|+
literal|" id='d0."
operator|+
name|row
operator|+
literal|"."
operator|+
name|col
operator|+
literal|"'>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<input type='checkbox' name='select' value='"
operator|+
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|":"
operator|+
name|date
operator|.
name|getTime
argument_list|()
operator|+
literal|":"
operator|+
name|start
operator|+
literal|":"
operator|+
operator|(
name|start
operator|+
name|iStep
operator|)
operator|+
literal|"' id='c0."
operator|+
name|row
operator|+
literal|"."
operator|+
name|col
operator|+
literal|"' style='display:none;'>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"&nbsp;"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</td>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<td colspan='"
operator|+
name|span
operator|+
literal|"' class='TimetableCell"
operator|+
operator|(
name|last
condition|?
literal|"EOL"
else|:
name|split
condition|?
literal|"EOD"
else|:
literal|""
operator|)
operator|+
literal|"' style='background-color:#E0E0E0;'>"
operator|+
literal|"&nbsp;</td>"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isAvailable
condition|)
break|break;
name|idx
operator|++
expr_stmt|;
block|}
name|row
operator|++
expr_stmt|;
block|}
name|aboveBlank
operator|=
name|blank
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</tr>"
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|println
argument_list|(
literal|"</table>"
argument_list|)
expr_stmt|;
block|}
specifier|public
class|class
name|TableModel
implements|implements
name|Comparable
argument_list|<
name|TableModel
argument_list|>
block|{
specifier|private
name|Location
name|iLocation
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Meeting
argument_list|>
name|iMeetings
init|=
literal|null
decl_stmt|;
specifier|private
name|TableCell
index|[]
index|[]
name|iTable
decl_stmt|;
specifier|private
name|boolean
name|iEdit
decl_stmt|;
specifier|public
name|TableModel
parameter_list|(
name|Location
name|location
parameter_list|,
name|boolean
name|edit
parameter_list|,
name|String
name|mode
parameter_list|,
name|boolean
name|manager
parameter_list|)
block|{
name|iEdit
operator|=
name|edit
expr_stmt|;
name|iLocation
operator|=
name|location
expr_stmt|;
name|String
name|q
init|=
literal|"select m from Meeting m where "
operator|+
literal|"m.locationPermanentId = :locationId and "
operator|+
literal|"m.startPeriod< :endSlot and :startSlot< m.stopPeriod and "
operator|+
literal|"m.meetingDate in ("
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Date
name|date
range|:
name|iDates
control|)
block|{
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
name|q
operator|+=
literal|","
expr_stmt|;
name|q
operator|+=
literal|":d"
operator|+
operator|(
name|idx
operator|++
operator|)
expr_stmt|;
block|}
name|q
operator|+=
literal|")"
expr_stmt|;
name|Query
name|query
init|=
name|MeetingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|query
operator|.
name|setLong
argument_list|(
literal|"locationId"
argument_list|,
name|iLocation
operator|.
name|getPermanentId
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|.
name|setInteger
argument_list|(
literal|"startSlot"
argument_list|,
name|iStartSlot
argument_list|)
expr_stmt|;
name|query
operator|.
name|setInteger
argument_list|(
literal|"endSlot"
argument_list|,
name|iEndSlot
argument_list|)
expr_stmt|;
name|idx
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|Date
name|date
range|:
name|iDates
control|)
block|{
name|query
operator|.
name|setDate
argument_list|(
literal|"d"
operator|+
operator|(
name|idx
operator|++
operator|)
argument_list|,
name|date
argument_list|)
expr_stmt|;
block|}
name|iMeetings
operator|=
name|query
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
name|iTable
operator|=
operator|new
name|TableCell
index|[
name|iDates
operator|.
name|size
argument_list|()
index|]
index|[
operator|(
name|iEndSlot
operator|-
name|iStartSlot
operator|)
operator|/
name|iStep
index|]
expr_stmt|;
name|Date
name|now
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iTable
operator|.
name|length
condition|;
name|row
operator|++
control|)
block|{
name|Date
name|date
init|=
name|iDates
operator|.
name|elementAt
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|boolean
name|cellEdit
init|=
operator|!
name|date
operator|.
name|before
argument_list|(
name|now
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|iTable
index|[
name|row
index|]
operator|.
name|length
condition|;
name|col
operator|++
control|)
block|{
name|iTable
index|[
name|row
index|]
index|[
name|col
index|]
operator|=
operator|new
name|TableCell
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|cellEdit
condition|)
name|iTable
index|[
name|row
index|]
index|[
name|col
index|]
operator|.
name|setEditable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Meeting
name|meeting
range|:
name|iMeetings
control|)
block|{
name|TableCell
index|[]
name|row
init|=
name|iTable
index|[
name|iDates
operator|.
name|indexOf
argument_list|(
operator|new
name|Date
argument_list|(
name|meeting
operator|.
name|getMeetingDate
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
index|]
decl_stmt|;
name|boolean
name|skip
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|EventGridForm
operator|.
name|sModeApproved
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
operator|&&
name|meeting
operator|.
name|getApprovedDate
argument_list|()
operator|==
literal|null
condition|)
block|{
name|skip
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|EventGridForm
operator|.
name|sModeWaiting
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
operator|&&
name|meeting
operator|.
name|getApprovedDate
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|skip
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|skip
condition|)
block|{
if|if
condition|(
operator|!
name|manager
condition|)
block|{
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|row
operator|.
name|length
condition|;
name|col
operator|++
control|)
block|{
name|int
name|start
init|=
name|iStartSlot
operator|+
name|col
operator|*
name|iStep
decl_stmt|;
if|if
condition|(
name|meeting
operator|.
name|getStartPeriod
argument_list|()
operator|<
name|start
operator|+
name|iStep
operator|&&
name|start
operator|<
name|meeting
operator|.
name|getStopPeriod
argument_list|()
condition|)
block|{
name|row
index|[
name|col
index|]
operator|.
name|setEditable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
continue|continue;
block|}
name|MeetingCell
name|mc
init|=
operator|new
name|MeetingCell
argument_list|(
name|meeting
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|row
operator|.
name|length
condition|;
name|col
operator|++
control|)
block|{
name|int
name|start
init|=
name|iStartSlot
operator|+
name|col
operator|*
name|iStep
decl_stmt|;
if|if
condition|(
name|meeting
operator|.
name|getStartPeriod
argument_list|()
operator|<
name|start
operator|+
name|iStep
operator|&&
name|start
operator|<
name|meeting
operator|.
name|getStopPeriod
argument_list|()
condition|)
block|{
name|row
index|[
name|col
index|]
operator|.
name|addMeeting
argument_list|(
name|mc
argument_list|)
expr_stmt|;
name|mc
operator|.
name|setLength
argument_list|(
name|mc
operator|.
name|getLength
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|mc
operator|.
name|getStart
argument_list|()
operator|<
literal|0
condition|)
block|{
name|mc
operator|.
name|setStart
argument_list|(
name|start
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iTable
operator|.
name|length
condition|;
name|row
operator|++
control|)
block|{
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|iTable
index|[
name|row
index|]
operator|.
name|length
condition|;
name|col
operator|++
control|)
block|{
name|iTable
index|[
name|row
index|]
index|[
name|col
index|]
operator|.
name|checkMeetings
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|boolean
name|isEditable
parameter_list|()
block|{
return|return
name|iEdit
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|TableModel
name|t
parameter_list|)
block|{
return|return
name|iLocation
operator|.
name|compareTo
argument_list|(
name|t
operator|.
name|iLocation
argument_list|)
return|;
block|}
specifier|public
name|int
name|getColSpan
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
name|TableCell
index|[]
name|row
init|=
name|iTable
index|[
name|iDates
operator|.
name|indexOf
argument_list|(
name|date
argument_list|)
index|]
decl_stmt|;
name|int
name|max
init|=
literal|1
decl_stmt|;
for|for
control|(
name|TableCell
name|cell
range|:
name|row
control|)
block|{
name|max
operator|=
name|Math
operator|.
name|max
argument_list|(
name|max
argument_list|,
name|cell
operator|.
name|getMeetings
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|max
return|;
block|}
specifier|public
name|Location
name|getLocation
parameter_list|()
block|{
return|return
name|iLocation
return|;
block|}
specifier|public
name|TableCell
index|[]
index|[]
name|getTable
parameter_list|()
block|{
return|return
name|iTable
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TableCell
block|{
specifier|private
name|boolean
name|iEdit
init|=
literal|true
decl_stmt|;
specifier|public
name|TreeSet
argument_list|<
name|MeetingCell
argument_list|>
name|iMeetingCells
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
specifier|public
name|TreeSet
argument_list|<
name|MeetingCell
argument_list|>
name|getMeetings
parameter_list|()
block|{
return|return
name|iMeetingCells
return|;
block|}
specifier|public
name|boolean
name|addMeeting
parameter_list|(
name|MeetingCell
name|meeting
parameter_list|)
block|{
return|return
name|iMeetingCells
operator|.
name|add
argument_list|(
name|meeting
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isEditable
parameter_list|()
block|{
return|return
name|iEdit
return|;
block|}
specifier|public
name|void
name|setEditable
parameter_list|(
name|boolean
name|edit
parameter_list|)
block|{
name|iEdit
operator|=
name|edit
expr_stmt|;
block|}
specifier|public
name|void
name|checkMeetings
parameter_list|()
block|{
if|if
condition|(
name|iMeetingCells
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
return|return;
name|Vector
argument_list|<
name|MeetingCell
argument_list|>
name|bad
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|Comparator
argument_list|<
name|MeetingCell
argument_list|>
name|cmp
init|=
operator|new
name|Comparator
argument_list|<
name|MeetingCell
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|MeetingCell
name|m1
parameter_list|,
name|MeetingCell
name|m2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|m1
operator|.
name|getMeeting
argument_list|()
operator|.
name|getStartPeriod
argument_list|()
operator|.
name|compareTo
argument_list|(
name|m2
operator|.
name|getMeeting
argument_list|()
operator|.
name|getStartPeriod
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|m1
operator|.
name|getMeeting
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|m2
operator|.
name|getMeeting
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
for|for
control|(
name|MeetingCell
name|m1
range|:
name|iMeetingCells
control|)
block|{
for|for
control|(
name|MeetingCell
name|m2
range|:
name|iMeetingCells
control|)
block|{
if|if
condition|(
name|cmp
operator|.
name|compare
argument_list|(
name|m1
argument_list|,
name|m2
argument_list|)
operator|>=
literal|0
condition|)
continue|continue;
if|if
condition|(
operator|!
name|m1
operator|.
name|getMeeting
argument_list|()
operator|.
name|overlaps
argument_list|(
name|m2
operator|.
name|getMeeting
argument_list|()
argument_list|)
condition|)
block|{
name|bad
operator|.
name|add
argument_list|(
name|m2
operator|.
name|getLength
argument_list|()
operator|==
literal|1
condition|?
name|m1
else|:
name|m2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|MeetingCell
name|m
range|:
name|bad
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getLength
argument_list|()
operator|<=
literal|1
condition|)
continue|continue;
name|iMeetingCells
operator|.
name|remove
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|m
operator|.
name|setLength
argument_list|(
name|m
operator|.
name|getLength
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|MeetingCell
implements|implements
name|Comparable
argument_list|<
name|MeetingCell
argument_list|>
block|{
specifier|private
name|Meeting
name|iMeeting
decl_stmt|;
specifier|private
name|int
name|iStart
init|=
operator|-
literal|1
decl_stmt|,
name|iLength
init|=
literal|0
decl_stmt|,
name|iCol
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|int
name|iPrinted
init|=
literal|0
decl_stmt|;
specifier|private
name|boolean
name|iEdit
init|=
literal|false
decl_stmt|;
specifier|public
name|MeetingCell
parameter_list|(
name|Meeting
name|meeting
parameter_list|)
block|{
name|iMeeting
operator|=
name|meeting
expr_stmt|;
block|}
specifier|public
name|Meeting
name|getMeeting
parameter_list|()
block|{
return|return
name|iMeeting
return|;
block|}
specifier|public
name|int
name|getStart
parameter_list|()
block|{
return|return
name|iStart
return|;
block|}
specifier|public
name|void
name|setStart
parameter_list|(
name|int
name|start
parameter_list|)
block|{
name|iStart
operator|=
name|start
expr_stmt|;
block|}
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|iLength
return|;
block|}
specifier|public
name|void
name|setLength
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|iLength
operator|=
name|length
expr_stmt|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|MeetingCell
name|mc
parameter_list|)
block|{
name|int
name|cmp
init|=
name|getMeeting
argument_list|()
operator|.
name|getStartTime
argument_list|()
operator|.
name|compareTo
argument_list|(
name|mc
operator|.
name|getMeeting
argument_list|()
operator|.
name|getStartTime
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|getMeeting
argument_list|()
operator|.
name|getStopTime
argument_list|()
operator|.
name|compareTo
argument_list|(
name|mc
operator|.
name|getMeeting
argument_list|()
operator|.
name|getStopTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|getMeeting
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|mc
operator|.
name|getMeeting
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|getCol
parameter_list|()
block|{
return|return
name|iCol
return|;
block|}
specifier|public
name|void
name|setCol
parameter_list|(
name|int
name|col
parameter_list|)
block|{
name|iCol
operator|=
name|col
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd"
argument_list|)
operator|.
name|format
argument_list|(
name|getMeeting
argument_list|()
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|getMeeting
argument_list|()
operator|.
name|startTime
argument_list|()
operator|+
literal|" - "
operator|+
name|getMeeting
argument_list|()
operator|.
name|stopTime
argument_list|()
operator|+
literal|" "
operator|+
name|getMeeting
argument_list|()
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventName
argument_list|()
operator|+
literal|" ("
operator|+
name|getMeeting
argument_list|()
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventTypeLabel
argument_list|()
operator|+
literal|")"
return|;
block|}
specifier|public
name|int
name|getPrinted
parameter_list|()
block|{
return|return
name|iPrinted
return|;
block|}
specifier|public
name|void
name|setPrinted
parameter_list|(
name|int
name|printed
parameter_list|)
block|{
name|iPrinted
operator|=
name|printed
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

