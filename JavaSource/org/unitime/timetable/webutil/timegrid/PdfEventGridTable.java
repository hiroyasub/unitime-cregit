begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|timegrid
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|EventGridForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Meeting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ClassEventDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|PdfEventHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Chunk
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|DocumentException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|FontFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Paragraph
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Rectangle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|pdf
operator|.
name|PdfPCell
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|pdf
operator|.
name|PdfPTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|pdf
operator|.
name|PdfWriter
import|;
end_import

begin_class
specifier|public
class|class
name|PdfEventGridTable
extends|extends
name|EventGridTable
block|{
specifier|private
name|PdfWriter
name|iWriter
init|=
literal|null
decl_stmt|;
specifier|private
name|Document
name|iDocument
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|Color
name|sBorderColor
init|=
operator|new
name|Color
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Color
name|sNotAvailableColor
init|=
operator|new
name|Color
argument_list|(
literal|224
argument_list|,
literal|224
argument_list|,
literal|224
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|int
name|sDefaultNumberOfColumns
init|=
literal|10
decl_stmt|;
specifier|public
name|PdfEventGridTable
parameter_list|(
name|EventGridForm
name|form
parameter_list|)
block|{
name|super
argument_list|(
name|form
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|export
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|iModel
operator|==
literal|null
operator|||
name|iModel
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|FileOutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|iDocument
operator|=
operator|new
name|Document
argument_list|(
operator|new
name|Rectangle
argument_list|(
literal|1100f
argument_list|,
literal|750f
argument_list|)
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|iWriter
operator|=
name|PdfEventHandler
operator|.
name|initFooter
argument_list|(
name|iDocument
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|iDocument
operator|.
name|open
argument_list|()
expr_stmt|;
name|printTable
argument_list|()
expr_stmt|;
name|iDocument
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
block|}
block|}
block|}
specifier|public
name|int
name|getNrColumns
parameter_list|()
block|{
name|int
name|nrCols
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|iDates
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
for|for
control|(
name|TableModel
name|m
range|:
name|iModel
control|)
block|{
name|int
name|nrColsThisModel
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Date
name|date
range|:
name|iDates
control|)
name|nrColsThisModel
operator|+=
name|m
operator|.
name|getColSpan
argument_list|(
name|date
argument_list|)
expr_stmt|;
name|nrCols
operator|=
name|Math
operator|.
name|max
argument_list|(
name|nrColsThisModel
argument_list|,
name|nrCols
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Date
name|date
init|=
name|iDates
operator|.
name|firstElement
argument_list|()
decl_stmt|;
for|for
control|(
name|TableModel
name|m
range|:
name|iModel
control|)
name|nrCols
operator|+=
name|m
operator|.
name|getColSpan
argument_list|(
name|date
argument_list|)
expr_stmt|;
block|}
return|return
literal|1
operator|+
name|nrCols
return|;
block|}
specifier|public
name|void
name|printTable
parameter_list|()
throws|throws
name|IOException
throws|,
name|DocumentException
block|{
name|DateFormat
name|df1
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"EEEE"
argument_list|)
decl_stmt|;
name|DateFormat
name|df2
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MMM dd, yyyy"
argument_list|)
decl_stmt|;
name|DateFormat
name|df3
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd"
argument_list|)
decl_stmt|;
if|if
condition|(
name|iDates
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
for|for
control|(
name|TableModel
name|m
range|:
name|iModel
control|)
block|{
name|int
name|nrCols
init|=
literal|0
decl_stmt|;
name|boolean
name|split
init|=
literal|false
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|int
name|firstColSpan
init|=
name|sDefaultNumberOfColumns
decl_stmt|;
for|for
control|(
name|Date
name|date
range|:
name|iDates
control|)
block|{
name|int
name|colSpan
init|=
name|m
operator|.
name|getColSpan
argument_list|(
name|date
argument_list|)
decl_stmt|;
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|colSpan
operator|>
name|sDefaultNumberOfColumns
condition|)
block|{
name|firstColSpan
operator|=
name|colSpan
expr_stmt|;
block|}
block|}
name|nrCols
operator|+=
name|colSpan
expr_stmt|;
if|if
condition|(
name|colSpan
operator|>
literal|1
condition|)
name|split
operator|=
literal|true
expr_stmt|;
block|}
name|MyTable
name|table
init|=
operator|new
name|MyTable
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|"\n("
operator|+
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getCapacity
argument_list|()
operator|+
literal|")\n"
operator|+
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getRoomTypeLabel
argument_list|()
argument_list|,
name|firstColSpan
argument_list|)
decl_stmt|;
for|for
control|(
name|Date
name|date
range|:
name|iDates
control|)
name|table
operator|.
name|addColumn
argument_list|(
name|m
operator|.
name|getColSpan
argument_list|(
name|date
argument_list|)
argument_list|,
name|df1
operator|.
name|format
argument_list|(
name|date
argument_list|)
operator|+
literal|"\n"
operator|+
name|df2
operator|.
name|format
argument_list|(
name|date
argument_list|)
argument_list|,
name|split
argument_list|)
expr_stmt|;
name|table
operator|.
name|newLine
argument_list|()
expr_stmt|;
name|int
name|lastCol
init|=
operator|(
name|iEndSlot
operator|-
name|iStartSlot
operator|)
operator|/
name|iStep
decl_stmt|;
name|TreeSet
argument_list|<
name|Integer
argument_list|>
name|aboveBlank
init|=
operator|new
name|TreeSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|lastCol
condition|;
name|col
operator|++
control|)
block|{
name|int
name|start
init|=
name|iStartSlot
operator|+
name|col
operator|*
name|iStep
decl_stmt|;
name|table
operator|.
name|addRow
argument_list|(
name|Constants
operator|.
name|toTime
argument_list|(
name|start
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
argument_list|)
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|Integer
argument_list|>
name|blank
init|=
operator|new
name|TreeSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|mcol
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iDates
operator|.
name|size
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Date
name|date
init|=
name|iDates
operator|.
name|elementAt
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|TableCell
name|cell
init|=
name|m
operator|.
name|getTable
argument_list|()
index|[
name|row
index|]
index|[
name|col
index|]
decl_stmt|;
name|int
name|span
init|=
name|m
operator|.
name|getColSpan
argument_list|(
name|date
argument_list|)
decl_stmt|;
name|MeetingCell
index|[]
name|content
init|=
operator|new
name|MeetingCell
index|[
name|span
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|content
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|content
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
name|Queue
argument_list|<
name|MeetingCell
argument_list|>
name|notAssigned
init|=
operator|new
name|LinkedList
argument_list|<
name|MeetingCell
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|MeetingCell
name|mc
range|:
name|cell
operator|.
name|getMeetings
argument_list|()
control|)
block|{
if|if
condition|(
name|mc
operator|.
name|getCol
argument_list|()
operator|>=
literal|0
operator|&&
name|content
index|[
name|mc
operator|.
name|getCol
argument_list|()
index|]
operator|==
literal|null
condition|)
block|{
name|content
index|[
name|mc
operator|.
name|getCol
argument_list|()
index|]
operator|=
name|mc
expr_stmt|;
block|}
else|else
block|{
name|notAssigned
operator|.
name|offer
argument_list|(
name|mc
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|content
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
name|MeetingCell
name|mc
init|=
operator|(
name|content
index|[
name|idx
index|]
operator|==
literal|null
condition|?
name|notAssigned
operator|.
name|poll
argument_list|()
else|:
name|content
index|[
name|idx
index|]
operator|)
decl_stmt|;
if|if
condition|(
name|mc
operator|!=
literal|null
condition|)
block|{
name|mc
operator|.
name|setCol
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|Meeting
name|meeting
init|=
name|mc
operator|.
name|getMeeting
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|mc
operator|.
name|getPrinted
argument_list|()
decl_stmt|;
name|mc
operator|.
name|setPrinted
argument_list|(
name|line
operator|+
literal|1
argument_list|)
expr_stmt|;
name|boolean
name|last
init|=
operator|(
name|line
operator|+
literal|1
operator|==
name|mc
operator|.
name|getLength
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|line
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|last
condition|)
name|table
operator|.
name|addCell
argument_list|(
operator|!
name|last
argument_list|,
name|aboveBlank
operator|.
name|contains
argument_list|(
name|mcol
argument_list|)
argument_list|,
name|idx
operator|==
literal|0
operator|&&
name|split
argument_list|,
operator|(
name|meeting
operator|.
name|isAllDay
argument_list|()
condition|?
literal|"All Day"
else|:
name|meeting
operator|.
name|startTime
argument_list|()
operator|+
literal|" - "
operator|+
name|meeting
operator|.
name|stopTime
argument_list|()
operator|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
else|else
name|table
operator|.
name|addCell
argument_list|(
operator|!
name|last
argument_list|,
name|aboveBlank
operator|.
name|contains
argument_list|(
name|mcol
argument_list|)
argument_list|,
name|idx
operator|==
literal|0
operator|&&
name|split
argument_list|,
name|meeting
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventName
argument_list|()
argument_list|,
name|meeting
operator|.
name|getApprovedDate
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|line
operator|==
literal|1
condition|)
block|{
name|table
operator|.
name|addCell
argument_list|(
operator|!
name|last
argument_list|,
name|aboveBlank
operator|.
name|contains
argument_list|(
name|mcol
argument_list|)
argument_list|,
name|idx
operator|==
literal|0
operator|&&
name|split
argument_list|,
name|meeting
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventName
argument_list|()
argument_list|,
name|meeting
operator|.
name|getApprovedDate
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|line
operator|==
literal|2
condition|)
block|{
name|table
operator|.
name|addCell
argument_list|(
operator|!
name|last
argument_list|,
name|aboveBlank
operator|.
name|contains
argument_list|(
name|mcol
argument_list|)
argument_list|,
name|idx
operator|==
literal|0
operator|&&
name|split
argument_list|,
name|meeting
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventTypeAbbv
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|line
operator|==
literal|3
condition|)
block|{
if|if
condition|(
name|meeting
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventType
argument_list|()
operator|==
name|Event
operator|.
name|sEventTypeClass
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|ClassEvent
name|ce
init|=
operator|new
name|ClassEventDAO
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|meeting
operator|.
name|getEvent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|ce
operator|.
name|getClazz
argument_list|()
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|null
condition|?
literal|"0"
else|:
name|ce
operator|.
name|getClazz
argument_list|()
operator|.
name|getEnrollment
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" enrl, "
argument_list|)
operator|.
name|append
argument_list|(
name|ce
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassLimit
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" limit"
argument_list|)
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
operator|!
name|last
argument_list|,
name|aboveBlank
operator|.
name|contains
argument_list|(
name|mcol
argument_list|)
argument_list|,
name|idx
operator|==
literal|0
operator|&&
name|split
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|meeting
operator|.
name|getEvent
argument_list|()
operator|.
name|getMinCapacity
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|meeting
operator|.
name|getEvent
argument_list|()
operator|.
name|eventCapacityDisplayString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" expect attend"
argument_list|)
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
operator|!
name|last
argument_list|,
name|aboveBlank
operator|.
name|contains
argument_list|(
name|mcol
argument_list|)
argument_list|,
name|idx
operator|==
literal|0
operator|&&
name|split
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|table
operator|.
name|addCell
argument_list|(
operator|!
name|last
argument_list|,
name|aboveBlank
operator|.
name|contains
argument_list|(
name|mcol
argument_list|)
argument_list|,
name|idx
operator|==
literal|0
operator|&&
name|split
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|table
operator|.
name|addCell
argument_list|(
operator|!
name|last
argument_list|,
name|aboveBlank
operator|.
name|contains
argument_list|(
name|mcol
argument_list|)
argument_list|,
name|idx
operator|==
literal|0
operator|&&
name|split
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|cell
operator|.
name|getMeetings
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|table
operator|.
name|addEmptyCell
argument_list|(
literal|false
argument_list|,
operator|(
name|idx
operator|+
literal|1
operator|<
name|content
operator|.
name|length
operator|&&
name|content
index|[
name|idx
operator|+
literal|1
index|]
operator|==
literal|null
operator|)
argument_list|,
name|idx
operator|==
literal|0
operator|&&
name|split
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|table
operator|.
name|addEmptyCell
argument_list|(
name|col
operator|+
literal|1
operator|<
name|lastCol
operator|&&
operator|!
name|m
operator|.
name|getTable
argument_list|()
index|[
name|row
index|]
index|[
name|col
operator|+
literal|1
index|]
operator|.
name|getMeetings
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
operator|(
name|idx
operator|+
literal|1
operator|<
name|content
operator|.
name|length
operator|&&
name|content
index|[
name|idx
operator|+
literal|1
index|]
operator|==
literal|null
operator|)
argument_list|,
name|idx
operator|==
literal|0
operator|&&
name|split
argument_list|,
name|sNotAvailableColor
argument_list|)
expr_stmt|;
name|blank
operator|.
name|add
argument_list|(
name|mcol
argument_list|)
expr_stmt|;
block|}
block|}
name|mcol
operator|++
expr_stmt|;
block|}
block|}
name|aboveBlank
operator|=
name|blank
expr_stmt|;
name|table
operator|.
name|newLine
argument_list|()
expr_stmt|;
block|}
name|table
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|Date
name|date
init|=
name|iDates
operator|.
name|firstElement
argument_list|()
decl_stmt|;
name|boolean
name|split
init|=
literal|false
decl_stmt|;
name|int
name|nrCols
init|=
literal|0
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|int
name|firstColSpan
init|=
name|sDefaultNumberOfColumns
decl_stmt|;
for|for
control|(
name|TableModel
name|m
range|:
name|iModel
control|)
block|{
name|int
name|colSpan
init|=
name|m
operator|.
name|getColSpan
argument_list|(
name|date
argument_list|)
decl_stmt|;
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|colSpan
operator|>
name|sDefaultNumberOfColumns
condition|)
block|{
name|firstColSpan
operator|=
name|colSpan
expr_stmt|;
block|}
block|}
name|nrCols
operator|+=
name|colSpan
expr_stmt|;
if|if
condition|(
name|colSpan
operator|>
literal|1
condition|)
name|split
operator|=
literal|true
expr_stmt|;
block|}
name|MyTable
name|table
init|=
operator|new
name|MyTable
argument_list|(
name|df1
operator|.
name|format
argument_list|(
name|date
argument_list|)
operator|+
literal|"\n"
operator|+
name|df2
operator|.
name|format
argument_list|(
name|date
argument_list|)
argument_list|,
name|firstColSpan
argument_list|)
decl_stmt|;
for|for
control|(
name|TableModel
name|m
range|:
name|iModel
control|)
name|table
operator|.
name|addColumn
argument_list|(
name|m
operator|.
name|getColSpan
argument_list|(
name|date
argument_list|)
argument_list|,
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|"\n("
operator|+
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getCapacity
argument_list|()
operator|+
literal|" seats)\n"
operator|+
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getRoomTypeLabel
argument_list|()
argument_list|,
name|split
argument_list|)
expr_stmt|;
name|table
operator|.
name|newLine
argument_list|()
expr_stmt|;
name|HashSet
argument_list|<
name|Meeting
argument_list|>
name|rendered
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|int
name|lastCol
init|=
operator|(
name|iEndSlot
operator|-
name|iStartSlot
operator|)
operator|/
name|iStep
decl_stmt|;
name|TreeSet
argument_list|<
name|Integer
argument_list|>
name|aboveBlank
init|=
operator|new
name|TreeSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|lastCol
condition|;
name|col
operator|++
control|)
block|{
name|int
name|start
init|=
name|iStartSlot
operator|+
name|col
operator|*
name|iStep
decl_stmt|;
name|table
operator|.
name|addRow
argument_list|(
name|Constants
operator|.
name|toTime
argument_list|(
name|start
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
argument_list|)
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|Integer
argument_list|>
name|blank
init|=
operator|new
name|TreeSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TableModel
name|m
range|:
name|iModel
control|)
block|{
name|TableCell
name|cell
init|=
name|m
operator|.
name|getTable
argument_list|()
index|[
literal|0
index|]
index|[
name|col
index|]
decl_stmt|;
name|int
name|span
init|=
name|m
operator|.
name|getColSpan
argument_list|(
name|date
argument_list|)
decl_stmt|;
name|MeetingCell
index|[]
name|content
init|=
operator|new
name|MeetingCell
index|[
name|span
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|content
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|content
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
name|Queue
argument_list|<
name|MeetingCell
argument_list|>
name|notAssigned
init|=
operator|new
name|LinkedList
argument_list|<
name|MeetingCell
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|MeetingCell
name|mc
range|:
name|cell
operator|.
name|getMeetings
argument_list|()
control|)
block|{
if|if
condition|(
name|mc
operator|.
name|getCol
argument_list|()
operator|>=
literal|0
operator|&&
name|content
index|[
name|mc
operator|.
name|getCol
argument_list|()
index|]
operator|==
literal|null
condition|)
block|{
name|content
index|[
name|mc
operator|.
name|getCol
argument_list|()
index|]
operator|=
name|mc
expr_stmt|;
block|}
else|else
block|{
name|notAssigned
operator|.
name|offer
argument_list|(
name|mc
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|content
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
name|MeetingCell
name|mc
init|=
operator|(
name|content
index|[
name|idx
index|]
operator|==
literal|null
condition|?
name|notAssigned
operator|.
name|poll
argument_list|()
else|:
name|content
index|[
name|idx
index|]
operator|)
decl_stmt|;
if|if
condition|(
name|mc
operator|!=
literal|null
condition|)
block|{
name|mc
operator|.
name|setCol
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|Meeting
name|meeting
init|=
name|mc
operator|.
name|getMeeting
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|mc
operator|.
name|getPrinted
argument_list|()
decl_stmt|;
name|mc
operator|.
name|setPrinted
argument_list|(
name|line
operator|+
literal|1
argument_list|)
expr_stmt|;
name|boolean
name|last
init|=
operator|(
name|line
operator|+
literal|1
operator|==
name|mc
operator|.
name|getLength
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|line
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|last
condition|)
name|table
operator|.
name|addCell
argument_list|(
operator|!
name|last
argument_list|,
name|aboveBlank
operator|.
name|contains
argument_list|(
name|idx
argument_list|)
argument_list|,
name|idx
operator|==
literal|0
operator|&&
name|split
argument_list|,
operator|(
name|meeting
operator|.
name|isAllDay
argument_list|()
condition|?
literal|"All Day"
else|:
name|meeting
operator|.
name|startTime
argument_list|()
operator|+
literal|" - "
operator|+
name|meeting
operator|.
name|stopTime
argument_list|()
operator|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
else|else
name|table
operator|.
name|addCell
argument_list|(
operator|!
name|last
argument_list|,
name|aboveBlank
operator|.
name|contains
argument_list|(
name|idx
argument_list|)
argument_list|,
name|idx
operator|==
literal|0
operator|&&
name|split
argument_list|,
name|meeting
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventName
argument_list|()
argument_list|,
name|meeting
operator|.
name|getApprovedDate
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|line
operator|==
literal|1
condition|)
block|{
name|table
operator|.
name|addCell
argument_list|(
operator|!
name|last
argument_list|,
name|aboveBlank
operator|.
name|contains
argument_list|(
name|idx
argument_list|)
argument_list|,
name|idx
operator|==
literal|0
operator|&&
name|split
argument_list|,
name|meeting
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventName
argument_list|()
argument_list|,
name|meeting
operator|.
name|getApprovedDate
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|line
operator|==
literal|2
condition|)
block|{
name|table
operator|.
name|addCell
argument_list|(
operator|!
name|last
argument_list|,
name|aboveBlank
operator|.
name|contains
argument_list|(
name|idx
argument_list|)
argument_list|,
name|idx
operator|==
literal|0
operator|&&
name|split
argument_list|,
name|meeting
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventTypeAbbv
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|table
operator|.
name|addCell
argument_list|(
operator|!
name|last
argument_list|,
name|aboveBlank
operator|.
name|contains
argument_list|(
name|idx
argument_list|)
argument_list|,
name|idx
operator|==
literal|0
operator|&&
name|split
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|cell
operator|.
name|getMeetings
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|table
operator|.
name|addEmptyCell
argument_list|(
literal|false
argument_list|,
name|idx
operator|+
literal|1
operator|<
name|content
operator|.
name|length
operator|&&
name|content
index|[
name|idx
operator|+
literal|1
index|]
operator|==
literal|null
argument_list|,
name|idx
operator|==
literal|0
operator|&&
name|split
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//available
block|}
else|else
block|{
name|table
operator|.
name|addEmptyCell
argument_list|(
name|col
operator|+
literal|1
operator|<
name|lastCol
operator|&&
operator|!
name|m
operator|.
name|getTable
argument_list|()
index|[
literal|0
index|]
index|[
name|col
operator|+
literal|1
index|]
operator|.
name|getMeetings
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|idx
operator|+
literal|1
operator|<
name|content
operator|.
name|length
operator|&&
name|content
index|[
name|idx
operator|+
literal|1
index|]
operator|==
literal|null
argument_list|,
name|idx
operator|==
literal|0
operator|&&
name|split
argument_list|,
name|sNotAvailableColor
argument_list|)
expr_stmt|;
name|blank
operator|.
name|add
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|aboveBlank
operator|=
name|blank
expr_stmt|;
name|table
operator|.
name|newLine
argument_list|()
expr_stmt|;
block|}
name|table
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
class|class
name|MyTable
block|{
specifier|private
name|PdfPTable
name|iTable
init|=
literal|null
decl_stmt|;
specifier|private
name|MyTable
name|iNext
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|iNrCols
init|=
literal|0
decl_stmt|;
specifier|private
name|String
name|iName
decl_stmt|;
specifier|private
name|int
name|iIndex
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|iMaxNrCols
init|=
literal|0
decl_stmt|;
specifier|public
name|MyTable
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|iName
operator|=
name|name
expr_stmt|;
name|iTable
operator|=
operator|new
name|PdfPTable
argument_list|(
name|sDefaultNumberOfColumns
operator|+
literal|1
argument_list|)
expr_stmt|;
name|iMaxNrCols
operator|=
name|sDefaultNumberOfColumns
expr_stmt|;
name|iTable
operator|.
name|setWidthPercentage
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getDefaultCell
argument_list|()
operator|.
name|setPadding
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getDefaultCell
argument_list|()
operator|.
name|setBorderWidth
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|setSplitRows
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|setSpacingBefore
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|setKeepTogether
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|setHeaderRows
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|PdfPCell
name|c
init|=
name|createCell
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
name|iName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MyTable
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|iName
operator|=
name|name
expr_stmt|;
name|iTable
operator|=
operator|new
name|PdfPTable
argument_list|(
name|size
operator|+
literal|1
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|setWidthPercentage
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getDefaultCell
argument_list|()
operator|.
name|setPadding
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getDefaultCell
argument_list|()
operator|.
name|setBorderWidth
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|setSplitRows
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|setSpacingBefore
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|setKeepTogether
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|setHeaderRows
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|iMaxNrCols
operator|=
name|size
expr_stmt|;
name|PdfPCell
name|c
init|=
name|createCell
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
name|iName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addColumn
parameter_list|(
name|int
name|colSpan
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|left
parameter_list|)
block|{
if|if
condition|(
name|iNext
operator|==
literal|null
operator|&&
name|iNrCols
operator|+
name|colSpan
operator|<=
name|iMaxNrCols
condition|)
block|{
name|iNrCols
operator|+=
name|colSpan
expr_stmt|;
name|PdfPCell
name|c
init|=
name|createCell
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
operator|(
name|left
condition|?
literal|1
else|:
literal|0
operator|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|c
operator|.
name|setColspan
argument_list|(
name|colSpan
argument_list|)
expr_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
name|name
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|iNext
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|colSpan
operator|>
name|iMaxNrCols
condition|)
name|iNext
operator|=
operator|new
name|MyTable
argument_list|(
name|iName
argument_list|,
name|colSpan
argument_list|)
expr_stmt|;
else|else
name|iNext
operator|=
operator|new
name|MyTable
argument_list|(
name|iName
argument_list|)
expr_stmt|;
block|}
name|iNext
operator|.
name|addColumn
argument_list|(
name|colSpan
argument_list|,
name|name
argument_list|,
name|left
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addRow
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|PdfPCell
name|c
init|=
name|createCell
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
name|name
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|iIndex
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|iNext
operator|!=
literal|null
condition|)
name|iNext
operator|.
name|addRow
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addEmptyCell
parameter_list|(
name|boolean
name|hMiddle
parameter_list|,
name|boolean
name|vMiddle
parameter_list|,
name|boolean
name|left
parameter_list|,
name|Color
name|color
parameter_list|)
block|{
if|if
condition|(
name|iIndex
operator|<
name|iNrCols
condition|)
block|{
name|PdfPCell
name|c
init|=
name|createCell
argument_list|(
literal|0
argument_list|,
operator|(
name|hMiddle
condition|?
literal|0
else|:
literal|1
operator|)
argument_list|,
operator|(
name|left
condition|?
literal|1
else|:
literal|0
operator|)
argument_list|,
operator|(
name|vMiddle
condition|?
literal|0
else|:
literal|1
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|color
operator|!=
literal|null
condition|)
name|c
operator|.
name|setBackgroundColor
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|iIndex
operator|++
expr_stmt|;
block|}
if|else if
condition|(
name|iNext
operator|!=
literal|null
condition|)
name|iNext
operator|.
name|addEmptyCell
argument_list|(
name|hMiddle
argument_list|,
name|vMiddle
argument_list|,
name|left
argument_list|,
name|color
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addCell
parameter_list|(
name|boolean
name|middle
parameter_list|,
name|boolean
name|top
parameter_list|,
name|boolean
name|left
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|bold
parameter_list|)
block|{
name|addCell
argument_list|(
name|middle
argument_list|,
name|top
argument_list|,
name|left
argument_list|,
name|name
argument_list|,
name|bold
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addCell
parameter_list|(
name|boolean
name|middle
parameter_list|,
name|boolean
name|top
parameter_list|,
name|boolean
name|left
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|bold
parameter_list|,
name|Color
name|color
parameter_list|)
block|{
if|if
condition|(
name|iIndex
operator|<
name|iNrCols
condition|)
block|{
name|PdfPCell
name|c
init|=
name|createCell
argument_list|(
operator|(
name|top
condition|?
literal|1
else|:
literal|0
operator|)
argument_list|,
operator|(
name|middle
condition|?
literal|0
else|:
literal|1
operator|)
argument_list|,
operator|(
name|left
condition|?
literal|1
else|:
literal|0
operator|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
name|addText
argument_list|(
name|c
argument_list|,
name|name
argument_list|,
name|bold
argument_list|)
expr_stmt|;
if|if
condition|(
name|color
operator|!=
literal|null
condition|)
name|c
operator|.
name|setBackgroundColor
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|iIndex
operator|++
expr_stmt|;
block|}
if|else if
condition|(
name|iNext
operator|!=
literal|null
condition|)
name|iNext
operator|.
name|addCell
argument_list|(
name|middle
argument_list|,
name|top
argument_list|,
name|left
argument_list|,
name|name
argument_list|,
name|bold
argument_list|,
name|color
argument_list|)
expr_stmt|;
block|}
specifier|private
name|PdfPCell
name|createCell
parameter_list|(
name|int
name|top
parameter_list|,
name|int
name|bottom
parameter_list|,
name|int
name|left
parameter_list|,
name|int
name|right
parameter_list|)
block|{
name|PdfPCell
name|cell
init|=
operator|new
name|PdfPCell
argument_list|()
decl_stmt|;
name|cell
operator|.
name|setBorderColor
argument_list|(
name|sBorderColor
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setPadding
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setBorderWidth
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setVerticalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_TOP
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setHorizontalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_CENTER
argument_list|)
expr_stmt|;
comment|//cell.setNoWrap(true);
name|cell
operator|.
name|setBorderWidthTop
argument_list|(
name|top
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setBorderWidthBottom
argument_list|(
name|bottom
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setBorderWidthLeft
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setBorderWidthRight
argument_list|(
name|right
argument_list|)
expr_stmt|;
return|return
name|cell
return|;
block|}
specifier|private
name|void
name|addText
parameter_list|(
name|PdfPCell
name|cell
parameter_list|,
name|String
name|text
parameter_list|,
name|boolean
name|bold
parameter_list|)
block|{
if|if
condition|(
name|text
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|cell
operator|.
name|getPhrase
argument_list|()
operator|==
literal|null
condition|)
block|{
name|cell
operator|.
name|setPhrase
argument_list|(
operator|new
name|Paragraph
argument_list|(
name|text
argument_list|,
name|FontFactory
operator|.
name|getFont
argument_list|(
name|bold
condition|?
name|FontFactory
operator|.
name|HELVETICA_BOLD
else|:
name|FontFactory
operator|.
name|HELVETICA
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setVerticalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_TOP
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setHorizontalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_CENTER
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cell
operator|.
name|getPhrase
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Chunk
argument_list|(
literal|"\n"
operator|+
name|text
argument_list|,
name|FontFactory
operator|.
name|getFont
argument_list|(
name|bold
condition|?
name|FontFactory
operator|.
name|HELVETICA_BOLD
else|:
name|FontFactory
operator|.
name|HELVETICA
argument_list|,
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|newLine
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
name|iNrCols
init|;
name|i
operator|<
name|iMaxNrCols
condition|;
name|i
operator|++
control|)
name|iTable
operator|.
name|addCell
argument_list|(
name|createCell
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iNext
operator|!=
literal|null
condition|)
name|iNext
operator|.
name|newLine
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|flush
parameter_list|()
throws|throws
name|DocumentException
block|{
name|iDocument
operator|.
name|add
argument_list|(
name|iTable
argument_list|)
expr_stmt|;
if|if
condition|(
name|iNext
operator|!=
literal|null
condition|)
name|iNext
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

