begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|timegrid
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|PdfEventHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|itextpdf
operator|.
name|text
operator|.
name|BaseColor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|itextpdf
operator|.
name|text
operator|.
name|Chunk
import|;
end_import

begin_import
import|import
name|com
operator|.
name|itextpdf
operator|.
name|text
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|com
operator|.
name|itextpdf
operator|.
name|text
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|itextpdf
operator|.
name|text
operator|.
name|FontFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|itextpdf
operator|.
name|text
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|com
operator|.
name|itextpdf
operator|.
name|text
operator|.
name|Paragraph
import|;
end_import

begin_import
import|import
name|com
operator|.
name|itextpdf
operator|.
name|text
operator|.
name|Rectangle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|itextpdf
operator|.
name|text
operator|.
name|pdf
operator|.
name|BaseFont
import|;
end_import

begin_import
import|import
name|com
operator|.
name|itextpdf
operator|.
name|text
operator|.
name|pdf
operator|.
name|PdfPCell
import|;
end_import

begin_import
import|import
name|com
operator|.
name|itextpdf
operator|.
name|text
operator|.
name|pdf
operator|.
name|PdfPTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|itextpdf
operator|.
name|text
operator|.
name|pdf
operator|.
name|PdfTemplate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|itextpdf
operator|.
name|text
operator|.
name|pdf
operator|.
name|PdfWriter
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|PdfTimetableGridTable
block|{
specifier|private
name|TimetableGridTable
name|iTable
init|=
literal|null
decl_stmt|;
specifier|private
name|PdfWriter
name|iWriter
init|=
literal|null
decl_stmt|;
specifier|private
name|Document
name|iDocument
init|=
literal|null
decl_stmt|;
specifier|private
name|PdfPTable
name|iPdfTable
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|iDay
init|=
literal|0
decl_stmt|;
specifier|protected
name|PdfTimetableGridTable
parameter_list|(
name|TimetableGridTable
name|table
parameter_list|)
block|{
name|iTable
operator|=
name|table
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|export2Pdf
parameter_list|(
name|TimetableGridTable
name|table
parameter_list|,
name|File
name|file
parameter_list|)
throws|throws
name|Exception
block|{
name|PdfTimetableGridTable
name|x
init|=
operator|new
name|PdfTimetableGridTable
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|x
operator|.
name|export
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|export
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|Exception
block|{
name|FileOutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|int
name|nrCols
init|=
name|getNrColumns
argument_list|()
decl_stmt|;
name|iDocument
operator|=
operator|(
name|iTable
operator|.
name|isDispModePerWeekVertical
argument_list|()
condition|?
operator|new
name|Document
argument_list|(
operator|new
name|Rectangle
argument_list|(
literal|60.0f
operator|+
literal|7.0f
operator|*
name|nrCols
argument_list|,
literal|60.0f
operator|+
literal|9.3f
operator|*
name|nrCols
argument_list|)
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|)
else|:
operator|new
name|Document
argument_list|(
operator|new
name|Rectangle
argument_list|(
literal|60.0f
operator|+
literal|10.0f
operator|*
name|nrCols
argument_list|,
literal|60.0f
operator|+
literal|7.5f
operator|*
name|nrCols
argument_list|)
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|)
operator|)
expr_stmt|;
name|out
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|iWriter
operator|=
name|PdfEventHandler
operator|.
name|initFooter
argument_list|(
name|iDocument
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|iDocument
operator|.
name|open
argument_list|()
expr_stmt|;
if|if
condition|(
name|iTable
operator|.
name|isDispModeInRow
argument_list|()
condition|)
block|{
for|for
control|(
name|iDay
operator|=
name|iTable
operator|.
name|startDay
argument_list|()
init|;
name|iDay
operator|<=
name|iTable
operator|.
name|endDay
argument_list|()
condition|;
name|iDay
operator|++
control|)
block|{
name|int
name|rowNumber
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|iTable
operator|.
name|models
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
name|rowNumber
operator|++
control|)
block|{
name|printToPdf
argument_list|(
operator|(
name|TimetableGridModel
operator|)
name|e
operator|.
name|nextElement
argument_list|()
argument_list|,
name|rowNumber
argument_list|)
expr_stmt|;
block|}
name|flushTable
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|rowNumber
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|iTable
operator|.
name|models
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
name|rowNumber
operator|++
control|)
block|{
name|printToPdf
argument_list|(
operator|(
name|TimetableGridModel
operator|)
name|e
operator|.
name|nextElement
argument_list|()
argument_list|,
name|rowNumber
argument_list|)
expr_stmt|;
block|}
block|}
name|printLegend
argument_list|()
expr_stmt|;
name|iDocument
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
block|}
block|}
block|}
specifier|public
name|int
name|getNrColumns
parameter_list|()
block|{
return|return
literal|12
operator|+
operator|(
literal|1
operator|+
name|iTable
operator|.
name|lastSlot
argument_list|()
operator|-
name|iTable
operator|.
name|firstSlot
argument_list|()
operator|)
return|;
comment|/* 		int nrCols = (iTable.isDispModePerWeekVertical()?1:12); 		if (iTable.isDispModePerWeekVertical()) { 			for (int day=iTable.startDay(); day<=iTable.endDay(); day++)  				nrCols++; 		} else {//isDispModeInRow() || isDispModePerWeekVertical() 			for (int day=iTable.startDay();(iTable.isDispModeInRow()&& day<=iTable.endDay()) || (iTable.isDispModePerWeek()&& day==iTable.startDay());day++) { 				for (int slot=iTable.firstSlot();slot<=iTable.lastSlot();slot+=TimetableGridTable.sNrSlotsPerPeriod) { 					nrCols+=TimetableGridTable.sNrSlotsPerPeriod; 				} 			} 		} 		return nrCols; 		*/
block|}
specifier|private
specifier|static
name|BaseColor
name|sBorderColor
init|=
operator|new
name|BaseColor
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|)
decl_stmt|;
specifier|public
name|PdfPCell
name|createCell
parameter_list|()
block|{
name|PdfPCell
name|cell
init|=
operator|new
name|PdfPCell
argument_list|()
decl_stmt|;
name|cell
operator|.
name|setBorderColor
argument_list|(
name|sBorderColor
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setPadding
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setBorderWidth
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setVerticalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_TOP
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setHorizontalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_CENTER
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setBorderWidthTop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setBorderWidthBottom
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setBorderWidthLeft
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setBorderWidthRight
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|cell
return|;
block|}
specifier|public
name|PdfPCell
name|createCellNoBorder
parameter_list|()
block|{
name|PdfPCell
name|cell
init|=
operator|new
name|PdfPCell
argument_list|()
decl_stmt|;
name|cell
operator|.
name|setBorderColor
argument_list|(
name|sBorderColor
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setPadding
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setBorderWidth
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setVerticalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_TOP
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setHorizontalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_CENTER
argument_list|)
expr_stmt|;
return|return
name|cell
return|;
block|}
specifier|public
name|void
name|addText
parameter_list|(
name|PdfPCell
name|cell
parameter_list|,
name|String
name|text
parameter_list|)
block|{
if|if
condition|(
name|text
operator|==
literal|null
condition|)
return|return;
name|addText
argument_list|(
name|cell
argument_list|,
name|text
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addText
parameter_list|(
name|PdfPCell
name|cell
parameter_list|,
name|String
name|text
parameter_list|,
name|boolean
name|bold
parameter_list|)
block|{
if|if
condition|(
name|text
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|text
operator|.
name|indexOf
argument_list|(
literal|"<span"
argument_list|)
operator|>=
literal|0
condition|)
name|text
operator|=
name|text
operator|.
name|replaceAll
argument_list|(
literal|"</span>"
argument_list|,
literal|""
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"<span .*>"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|cell
operator|.
name|getPhrase
argument_list|()
operator|==
literal|null
condition|)
block|{
name|cell
operator|.
name|setPhrase
argument_list|(
operator|new
name|Paragraph
argument_list|(
name|text
argument_list|,
name|FontFactory
operator|.
name|getFont
argument_list|(
name|bold
condition|?
name|FontFactory
operator|.
name|HELVETICA_BOLD
else|:
name|FontFactory
operator|.
name|HELVETICA
argument_list|,
literal|12
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setVerticalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_TOP
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setHorizontalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_CENTER
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cell
operator|.
name|getPhrase
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Chunk
argument_list|(
literal|"\n"
operator|+
name|text
argument_list|,
name|FontFactory
operator|.
name|getFont
argument_list|(
name|bold
condition|?
name|FontFactory
operator|.
name|HELVETICA_BOLD
else|:
name|FontFactory
operator|.
name|HELVETICA
argument_list|,
literal|12
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addTextVertical
parameter_list|(
name|PdfPCell
name|cell
parameter_list|,
name|String
name|text
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|text
operator|==
literal|null
condition|)
return|return;
name|addTextVertical
argument_list|(
name|cell
argument_list|,
name|text
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addTextVertical
parameter_list|(
name|PdfPCell
name|cell
parameter_list|,
name|String
name|text
parameter_list|,
name|boolean
name|bold
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|text
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|text
operator|.
name|indexOf
argument_list|(
literal|"<span"
argument_list|)
operator|>=
literal|0
condition|)
name|text
operator|=
name|text
operator|.
name|replaceAll
argument_list|(
literal|"</span>"
argument_list|,
literal|""
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"<span .*>"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|BaseFont
name|bf
init|=
name|BaseFont
operator|.
name|createFont
argument_list|(
operator|(
name|bold
condition|?
literal|"Helvetica-Bold"
else|:
literal|"Helvetica"
operator|)
argument_list|,
literal|"winansi"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|float
name|size
init|=
literal|12
decl_stmt|;
name|float
name|width
init|=
name|bf
operator|.
name|getWidthPoint
argument_list|(
name|text
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|PdfTemplate
name|template
init|=
name|iWriter
operator|.
name|getDirectContent
argument_list|()
operator|.
name|createTemplate
argument_list|(
literal|2
operator|*
name|size
operator|+
literal|4
argument_list|,
name|width
argument_list|)
decl_stmt|;
name|template
operator|.
name|beginText
argument_list|()
expr_stmt|;
name|template
operator|.
name|setColorFill
argument_list|(
name|BaseColor
operator|.
name|BLACK
argument_list|)
expr_stmt|;
name|template
operator|.
name|setFontAndSize
argument_list|(
name|bf
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|template
operator|.
name|setTextMatrix
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|template
operator|.
name|showText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|template
operator|.
name|endText
argument_list|()
expr_stmt|;
name|template
operator|.
name|setWidth
argument_list|(
name|width
argument_list|)
expr_stmt|;
name|template
operator|.
name|setHeight
argument_list|(
name|size
operator|+
literal|2
argument_list|)
expr_stmt|;
comment|//make an Image object from the template
name|Image
name|img
init|=
name|Image
operator|.
name|getInstance
argument_list|(
name|template
argument_list|)
decl_stmt|;
name|img
operator|.
name|setRotationDegrees
argument_list|(
literal|270
argument_list|)
expr_stmt|;
comment|//embed the image in a Chunk
name|Chunk
name|ck
init|=
operator|new
name|Chunk
argument_list|(
name|img
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|cell
operator|.
name|getPhrase
argument_list|()
operator|==
literal|null
condition|)
block|{
name|cell
operator|.
name|setPhrase
argument_list|(
operator|new
name|Paragraph
argument_list|(
name|ck
argument_list|)
argument_list|)
expr_stmt|;
comment|//,FontFactory.getFont(bold?FontFactory.HELVETICA_BOLD:FontFactory.HELVETICA, 12)));
name|cell
operator|.
name|setVerticalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_MIDDLE
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setHorizontalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cell
operator|.
name|getPhrase
argument_list|()
operator|.
name|add
argument_list|(
name|ck
argument_list|)
expr_stmt|;
comment|//new Chunk("\n"+text,FontFactory.getFont(bold?FontFactory.HELVETICA_BOLD:FontFactory.HELVETICA, 12)));
block|}
block|}
specifier|public
name|void
name|printHeader
parameter_list|(
name|TimetableGridModel
name|model
parameter_list|,
name|int
name|rowNumber
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|iTable
operator|.
name|isDispModePerWeekVertical
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|slot
init|=
name|iTable
operator|.
name|lastSlot
argument_list|()
init|;
name|slot
operator|>=
name|iTable
operator|.
name|firstSlot
argument_list|()
condition|;
name|slot
operator|-=
name|TimetableGridTable
operator|.
name|sNrSlotsPerPeriod
control|)
block|{
name|int
name|time
init|=
operator|(
name|slot
operator|-
name|TimetableGridTable
operator|.
name|sNrSlotsPerPeriod
operator|+
literal|1
operator|)
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
decl_stmt|;
name|PdfPCell
name|c
init|=
name|createCell
argument_list|()
decl_stmt|;
name|c
operator|.
name|setColspan
argument_list|(
name|TimetableGridTable
operator|.
name|sNrSlotsPerPeriod
argument_list|)
expr_stmt|;
if|if
condition|(
name|slot
operator|<
name|iTable
operator|.
name|lastSlot
argument_list|()
condition|)
name|c
operator|.
name|setBorderWidthLeft
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|addTextVertical
argument_list|(
name|c
argument_list|,
name|Constants
operator|.
name|toTime
argument_list|(
name|time
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|PdfPCell
name|c
init|=
name|createCell
argument_list|()
decl_stmt|;
name|c
operator|.
name|setColspan
argument_list|(
literal|12
argument_list|)
expr_stmt|;
name|c
operator|.
name|setBorderWidthLeft
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|addTextVertical
argument_list|(
name|c
argument_list|,
name|model
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|model
operator|.
name|getSize
argument_list|()
operator|>
literal|0
condition|?
literal|" ("
operator|+
name|model
operator|.
name|getSize
argument_list|()
operator|+
literal|")"
else|:
literal|""
operator|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PdfPCell
name|c
init|=
name|createCell
argument_list|()
decl_stmt|;
name|c
operator|.
name|setColspan
argument_list|(
literal|12
argument_list|)
expr_stmt|;
if|if
condition|(
name|iTable
operator|.
name|isDispModeInRow
argument_list|()
condition|)
name|addText
argument_list|(
name|c
argument_list|,
name|Constants
operator|.
name|DAY_NAME
index|[
name|iDay
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
else|else
name|addText
argument_list|(
name|c
argument_list|,
name|model
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|model
operator|.
name|getSize
argument_list|()
operator|>
literal|0
condition|?
literal|" ("
operator|+
name|model
operator|.
name|getSize
argument_list|()
operator|+
literal|")"
else|:
literal|""
operator|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|slot
init|=
name|iTable
operator|.
name|firstSlot
argument_list|()
init|;
name|slot
operator|<=
name|iTable
operator|.
name|lastSlot
argument_list|()
condition|;
name|slot
operator|+=
name|TimetableGridTable
operator|.
name|sNrSlotsPerPeriod
control|)
block|{
name|int
name|time
init|=
name|slot
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
decl_stmt|;
name|c
operator|=
name|createCell
argument_list|()
expr_stmt|;
name|c
operator|.
name|setBorderWidthLeft
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|c
operator|.
name|setColspan
argument_list|(
name|TimetableGridTable
operator|.
name|sNrSlotsPerPeriod
argument_list|)
expr_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
name|Constants
operator|.
name|toTime
argument_list|(
name|time
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
name|iPdfTable
operator|.
name|setHeaderRows
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|BaseColor
name|getColor
parameter_list|(
name|String
name|rgbColor
parameter_list|)
block|{
name|StringTokenizer
name|x
init|=
operator|new
name|StringTokenizer
argument_list|(
name|rgbColor
operator|.
name|substring
argument_list|(
literal|"rgb("
operator|.
name|length
argument_list|()
argument_list|,
name|rgbColor
operator|.
name|length
argument_list|()
operator|-
literal|")"
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
literal|","
argument_list|)
decl_stmt|;
return|return
operator|new
name|BaseColor
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|x
operator|.
name|nextToken
argument_list|()
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|x
operator|.
name|nextToken
argument_list|()
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|x
operator|.
name|nextToken
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|void
name|createTable
parameter_list|()
block|{
name|iPdfTable
operator|=
operator|new
name|PdfPTable
argument_list|(
name|getNrColumns
argument_list|()
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|setWidthPercentage
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|getDefaultCell
argument_list|()
operator|.
name|setPadding
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|getDefaultCell
argument_list|()
operator|.
name|setBorderWidth
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|setSplitRows
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|setSpacingBefore
argument_list|(
literal|10
argument_list|)
expr_stmt|;
if|if
condition|(
name|iTable
operator|.
name|isDispModePerWeek
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|setKeepTogether
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|flushTable
parameter_list|()
throws|throws
name|Exception
block|{
name|iDocument
operator|.
name|add
argument_list|(
name|iPdfTable
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|printToPdf
parameter_list|(
name|TimetableGridModel
name|model
parameter_list|,
name|int
name|rowNumber
parameter_list|)
throws|throws
name|Exception
block|{
name|model
operator|.
name|clearRendered
argument_list|()
expr_stmt|;
if|if
condition|(
name|iTable
operator|.
name|isDispModePerWeek
argument_list|()
condition|)
block|{
name|createTable
argument_list|()
expr_stmt|;
name|printHeader
argument_list|(
name|model
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|rowNumber
operator|==
literal|0
condition|)
block|{
name|createTable
argument_list|()
expr_stmt|;
name|printHeader
argument_list|(
name|model
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iTable
operator|.
name|isDispModeInRow
argument_list|()
condition|)
block|{
name|int
name|maxIdx
init|=
name|model
operator|.
name|getMaxIdxForDay
argument_list|(
name|iDay
argument_list|,
name|iTable
operator|.
name|firstSlot
argument_list|()
argument_list|,
name|iTable
operator|.
name|lastSlot
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<=
name|maxIdx
condition|;
name|idx
operator|++
control|)
block|{
name|PdfPCell
name|c
init|=
name|createCell
argument_list|()
decl_stmt|;
name|c
operator|.
name|setBorderWidthTop
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|==
literal|0
condition|)
name|addText
argument_list|(
name|c
argument_list|,
name|model
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|model
operator|.
name|getSize
argument_list|()
operator|>
literal|0
condition|?
literal|" ("
operator|+
name|model
operator|.
name|getSize
argument_list|()
operator|+
literal|")"
else|:
literal|""
operator|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|c
operator|.
name|setBorderWidthBottom
argument_list|(
name|idx
operator|==
name|maxIdx
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|c
operator|.
name|setColspan
argument_list|(
literal|12
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|slot
init|=
name|iTable
operator|.
name|firstSlot
argument_list|()
init|;
name|slot
operator|<=
name|iTable
operator|.
name|lastSlot
argument_list|()
condition|;
name|slot
operator|++
control|)
block|{
name|int
name|slotsToEnd
init|=
name|iTable
operator|.
name|lastSlot
argument_list|()
operator|-
name|slot
operator|+
literal|1
decl_stmt|;
name|TimetableGridCell
name|cell
init|=
name|model
operator|.
name|getCell
argument_list|(
name|iDay
argument_list|,
name|slot
argument_list|,
name|idx
argument_list|)
decl_stmt|;
name|int
name|length
init|=
operator|(
name|cell
operator|==
literal|null
condition|?
literal|1
else|:
name|cell
operator|.
name|getLength
argument_list|()
operator|+
name|cell
operator|.
name|getSlot
argument_list|()
operator|-
name|slot
operator|)
decl_stmt|;
name|int
name|colSpan
init|=
operator|(
name|cell
operator|==
literal|null
condition|?
literal|1
else|:
name|Math
operator|.
name|min
argument_list|(
name|length
argument_list|,
name|slotsToEnd
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|cell
operator|==
literal|null
condition|)
block|{
name|String
name|bgColor
init|=
name|model
operator|.
name|getBackground
argument_list|(
name|iDay
argument_list|,
name|slot
argument_list|)
decl_stmt|;
if|if
condition|(
name|bgColor
operator|==
literal|null
operator|&&
operator|!
name|model
operator|.
name|isAvailable
argument_list|(
name|iDay
argument_list|,
name|slot
argument_list|)
condition|)
name|bgColor
operator|=
name|TimetableGridCell
operator|.
name|sBgColorNotAvailable
expr_stmt|;
name|c
operator|=
name|createCell
argument_list|()
expr_stmt|;
name|c
operator|.
name|setBorderWidthTop
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|c
operator|.
name|setBorderWidthBottom
argument_list|(
name|idx
operator|==
name|maxIdx
condition|?
literal|1
else|:
name|model
operator|.
name|getCell
argument_list|(
name|iDay
argument_list|,
name|slot
argument_list|,
name|idx
operator|+
literal|1
argument_list|)
operator|!=
literal|null
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|c
operator|.
name|setBorderWidthLeft
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|boolean
name|eod
init|=
operator|(
name|slot
operator|==
name|iTable
operator|.
name|lastSlot
argument_list|()
operator|)
decl_stmt|;
name|boolean
name|in
init|=
operator|!
name|eod
operator|&&
name|model
operator|.
name|getCell
argument_list|(
name|iDay
argument_list|,
name|slot
operator|+
literal|1
argument_list|,
name|idx
argument_list|)
operator|==
literal|null
operator|&&
operator|(
operator|(
name|slot
operator|+
literal|1
operator|-
name|iTable
operator|.
name|firstSlot
argument_list|()
operator|)
operator|%
name|TimetableGridTable
operator|.
name|sNrSlotsPerPeriod
operator|)
operator|!=
literal|0
decl_stmt|;
name|c
operator|.
name|setBorderWidthRight
argument_list|(
name|eod
operator|||
operator|!
name|in
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|c
operator|.
name|setColspan
argument_list|(
name|colSpan
argument_list|)
expr_stmt|;
if|if
condition|(
name|bgColor
operator|!=
literal|null
condition|)
name|c
operator|.
name|setBackgroundColor
argument_list|(
name|getColor
argument_list|(
name|bgColor
argument_list|)
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|bgColor
init|=
name|cell
operator|.
name|getBackground
argument_list|()
decl_stmt|;
if|if
condition|(
name|iTable
operator|.
name|getBgMode
argument_list|()
operator|==
name|TimetableGridModel
operator|.
name|sBgModeNone
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
operator|!
name|model
operator|.
name|isAvailable
argument_list|(
name|iDay
argument_list|,
name|slot
operator|+
name|i
argument_list|)
condition|)
block|{
name|bgColor
operator|=
name|TimetableGridCell
operator|.
name|sBgColorNotAvailableButAssigned
expr_stmt|;
break|break;
block|}
block|}
name|c
operator|=
name|createCell
argument_list|()
expr_stmt|;
name|c
operator|.
name|setBorderWidthTop
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|c
operator|.
name|setBorderWidthLeft
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|c
operator|.
name|setColspan
argument_list|(
name|colSpan
argument_list|)
expr_stmt|;
name|c
operator|.
name|setBackgroundColor
argument_list|(
name|getColor
argument_list|(
name|bgColor
argument_list|)
argument_list|)
expr_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
name|cell
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iTable
operator|.
name|getResourceType
argument_list|()
operator|!=
name|TimetableGridModel
operator|.
name|sResourceTypeRoom
condition|)
name|addText
argument_list|(
name|c
argument_list|,
name|cell
operator|.
name|getRoomName
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|iTable
operator|.
name|getResourceType
argument_list|()
operator|!=
name|TimetableGridModel
operator|.
name|sResourceTypeInstructor
operator|&&
name|iTable
operator|.
name|getShowInstructors
argument_list|()
condition|)
name|addText
argument_list|(
name|c
argument_list|,
name|cell
operator|.
name|getInstructor
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|addText
argument_list|(
name|c
argument_list|,
name|cell
operator|.
name|getShortCommentNoColors
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|cell
operator|.
name|getShortCommentNoColors
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iTable
operator|.
name|getWeek
argument_list|()
operator|==
operator|-
literal|100
operator|&&
name|cell
operator|.
name|hasDays
argument_list|()
operator|&&
operator|!
name|cell
operator|.
name|getDays
argument_list|()
operator|.
name|equals
argument_list|(
name|iTable
operator|.
name|getDefaultDatePatternName
argument_list|()
argument_list|)
condition|)
name|addText
argument_list|(
name|c
argument_list|,
name|cell
operator|.
name|getDays
argument_list|()
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|slot
operator|+=
name|length
operator|-
literal|1
expr_stmt|;
block|}
block|}
block|}
block|}
if|else  if
condition|(
name|iTable
operator|.
name|isDispModePerWeekHorizontal
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|day
init|=
name|iTable
operator|.
name|startDay
argument_list|()
init|;
name|day
operator|<=
name|iTable
operator|.
name|endDay
argument_list|()
condition|;
name|day
operator|++
control|)
block|{
name|int
name|maxIdx
init|=
name|model
operator|.
name|getMaxIdxForDay
argument_list|(
name|day
argument_list|,
name|iTable
operator|.
name|firstSlot
argument_list|()
argument_list|,
name|iTable
operator|.
name|lastSlot
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<=
name|maxIdx
condition|;
name|idx
operator|++
control|)
block|{
name|PdfPCell
name|c
init|=
name|createCell
argument_list|()
decl_stmt|;
name|c
operator|.
name|setBorderWidthTop
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|==
literal|0
condition|)
name|addText
argument_list|(
name|c
argument_list|,
name|Constants
operator|.
name|DAY_NAME
index|[
name|day
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|c
operator|.
name|setBorderWidthBottom
argument_list|(
name|idx
operator|==
name|maxIdx
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|c
operator|.
name|setColspan
argument_list|(
literal|12
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|slot
init|=
name|iTable
operator|.
name|firstSlot
argument_list|()
init|;
name|slot
operator|<=
name|iTable
operator|.
name|lastSlot
argument_list|()
condition|;
name|slot
operator|++
control|)
block|{
name|int
name|slotsToEnd
init|=
name|iTable
operator|.
name|lastSlot
argument_list|()
operator|-
name|slot
operator|+
literal|1
decl_stmt|;
name|TimetableGridCell
name|cell
init|=
name|model
operator|.
name|getCell
argument_list|(
name|day
argument_list|,
name|slot
argument_list|,
name|idx
argument_list|)
decl_stmt|;
name|int
name|length
init|=
operator|(
name|cell
operator|==
literal|null
condition|?
literal|1
else|:
name|cell
operator|.
name|getLength
argument_list|()
operator|+
name|cell
operator|.
name|getSlot
argument_list|()
operator|-
name|slot
operator|)
decl_stmt|;
name|int
name|colSpan
init|=
operator|(
name|cell
operator|==
literal|null
condition|?
literal|1
else|:
name|Math
operator|.
name|min
argument_list|(
name|length
argument_list|,
name|slotsToEnd
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|cell
operator|==
literal|null
condition|)
block|{
name|String
name|bgColor
init|=
name|model
operator|.
name|getBackground
argument_list|(
name|day
argument_list|,
name|slot
argument_list|)
decl_stmt|;
if|if
condition|(
name|bgColor
operator|==
literal|null
operator|&&
operator|!
name|model
operator|.
name|isAvailable
argument_list|(
name|day
argument_list|,
name|slot
argument_list|)
condition|)
name|bgColor
operator|=
name|TimetableGridCell
operator|.
name|sBgColorNotAvailable
expr_stmt|;
name|c
operator|=
name|createCell
argument_list|()
expr_stmt|;
name|c
operator|.
name|setBorderWidthTop
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|c
operator|.
name|setBorderWidthBottom
argument_list|(
name|idx
operator|==
name|maxIdx
condition|?
literal|1
else|:
name|model
operator|.
name|getCell
argument_list|(
name|day
argument_list|,
name|slot
argument_list|,
name|idx
operator|+
literal|1
argument_list|)
operator|!=
literal|null
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|c
operator|.
name|setBorderWidthLeft
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|boolean
name|eod
init|=
operator|(
name|slot
operator|==
name|iTable
operator|.
name|lastSlot
argument_list|()
operator|)
decl_stmt|;
name|boolean
name|in
init|=
operator|!
name|eod
operator|&&
name|model
operator|.
name|getCell
argument_list|(
name|day
argument_list|,
name|slot
operator|+
literal|1
argument_list|,
name|idx
argument_list|)
operator|==
literal|null
operator|&&
operator|(
operator|(
name|slot
operator|+
literal|1
operator|-
name|iTable
operator|.
name|firstSlot
argument_list|()
operator|)
operator|%
name|TimetableGridTable
operator|.
name|sNrSlotsPerPeriod
operator|)
operator|!=
literal|0
decl_stmt|;
name|c
operator|.
name|setBorderWidthRight
argument_list|(
name|eod
operator|||
operator|!
name|in
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|bgColor
init|=
name|cell
operator|.
name|getBackground
argument_list|()
decl_stmt|;
if|if
condition|(
name|iTable
operator|.
name|getBgMode
argument_list|()
operator|==
name|TimetableGridModel
operator|.
name|sBgModeNone
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
operator|!
name|model
operator|.
name|isAvailable
argument_list|(
name|day
argument_list|,
name|slot
operator|+
name|i
argument_list|)
condition|)
block|{
name|bgColor
operator|=
name|TimetableGridCell
operator|.
name|sBgColorNotAvailableButAssigned
expr_stmt|;
break|break;
block|}
block|}
name|c
operator|=
name|createCell
argument_list|()
expr_stmt|;
name|c
operator|.
name|setBorderWidthTop
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|c
operator|.
name|setBorderWidthLeft
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|c
operator|.
name|setColspan
argument_list|(
name|colSpan
argument_list|)
expr_stmt|;
if|if
condition|(
name|bgColor
operator|!=
literal|null
condition|)
name|c
operator|.
name|setBackgroundColor
argument_list|(
name|getColor
argument_list|(
name|bgColor
argument_list|)
argument_list|)
expr_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
name|cell
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iTable
operator|.
name|getResourceType
argument_list|()
operator|!=
name|TimetableGridModel
operator|.
name|sResourceTypeRoom
condition|)
name|addText
argument_list|(
name|c
argument_list|,
name|cell
operator|.
name|getRoomName
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|iTable
operator|.
name|getResourceType
argument_list|()
operator|!=
name|TimetableGridModel
operator|.
name|sResourceTypeInstructor
operator|&&
name|iTable
operator|.
name|getShowInstructors
argument_list|()
condition|)
name|addText
argument_list|(
name|c
argument_list|,
name|cell
operator|.
name|getInstructor
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|addText
argument_list|(
name|c
argument_list|,
name|cell
operator|.
name|getShortCommentNoColors
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|cell
operator|.
name|getShortCommentNoColors
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iTable
operator|.
name|getWeek
argument_list|()
operator|==
operator|-
literal|100
operator|&&
name|cell
operator|.
name|hasDays
argument_list|()
operator|&&
operator|!
name|cell
operator|.
name|getDays
argument_list|()
operator|.
name|equals
argument_list|(
name|iTable
operator|.
name|getDefaultDatePatternName
argument_list|()
argument_list|)
condition|)
name|addText
argument_list|(
name|c
argument_list|,
name|cell
operator|.
name|getDays
argument_list|()
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|slot
operator|+=
name|length
operator|-
literal|1
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
else|else
block|{
comment|//isDispModePerWeekVertical
for|for
control|(
name|int
name|day
init|=
name|iTable
operator|.
name|startDay
argument_list|()
init|;
name|day
operator|<=
name|iTable
operator|.
name|endDay
argument_list|()
condition|;
name|day
operator|++
control|)
block|{
name|int
name|maxIdx
init|=
name|model
operator|.
name|getMaxIdxForDay
argument_list|(
name|day
argument_list|,
name|iTable
operator|.
name|firstSlot
argument_list|()
argument_list|,
name|iTable
operator|.
name|lastSlot
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<=
name|maxIdx
condition|;
name|idx
operator|++
control|)
block|{
name|PdfPCell
name|c
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|slot
init|=
name|iTable
operator|.
name|lastSlot
argument_list|()
init|;
name|slot
operator|>=
name|iTable
operator|.
name|firstSlot
argument_list|()
condition|;
name|slot
operator|--
control|)
block|{
name|int
name|slotsToEnd
init|=
name|slot
operator|+
literal|1
operator|-
name|iTable
operator|.
name|firstSlot
argument_list|()
decl_stmt|;
name|TimetableGridCell
name|cell
init|=
name|model
operator|.
name|getCell
argument_list|(
name|day
argument_list|,
name|slot
argument_list|,
name|idx
argument_list|)
decl_stmt|;
name|int
name|length
init|=
operator|(
name|cell
operator|==
literal|null
condition|?
literal|1
else|:
literal|1
operator|+
name|slot
operator|-
name|cell
operator|.
name|getSlot
argument_list|()
operator|)
decl_stmt|;
name|int
name|colSpan
init|=
operator|(
name|cell
operator|==
literal|null
condition|?
literal|1
else|:
name|Math
operator|.
name|min
argument_list|(
name|length
argument_list|,
name|slotsToEnd
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|cell
operator|==
literal|null
condition|)
block|{
name|String
name|bgColor
init|=
name|model
operator|.
name|getBackground
argument_list|(
name|day
argument_list|,
name|slot
argument_list|)
decl_stmt|;
if|if
condition|(
name|bgColor
operator|==
literal|null
operator|&&
operator|!
name|model
operator|.
name|isAvailable
argument_list|(
name|day
argument_list|,
name|slot
argument_list|)
condition|)
name|bgColor
operator|=
name|TimetableGridCell
operator|.
name|sBgColorNotAvailable
expr_stmt|;
name|c
operator|=
name|createCell
argument_list|()
expr_stmt|;
name|c
operator|.
name|setBorderWidthTop
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|c
operator|.
name|setMinimumHeight
argument_list|(
literal|100f
argument_list|)
expr_stmt|;
name|c
operator|.
name|setBorderWidthBottom
argument_list|(
name|idx
operator|==
name|maxIdx
condition|?
literal|1
else|:
name|model
operator|.
name|getCell
argument_list|(
name|day
argument_list|,
name|slot
argument_list|,
name|idx
operator|+
literal|1
argument_list|)
operator|!=
literal|null
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|c
operator|.
name|setBorderWidthLeft
argument_list|(
name|slot
operator|==
name|iTable
operator|.
name|lastSlot
argument_list|()
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|boolean
name|eod
init|=
operator|(
name|slot
operator|==
name|iTable
operator|.
name|firstSlot
argument_list|()
operator|)
decl_stmt|;
name|boolean
name|in
init|=
operator|!
name|eod
operator|&&
name|model
operator|.
name|getCell
argument_list|(
name|day
argument_list|,
name|slot
operator|-
literal|1
argument_list|,
name|idx
argument_list|)
operator|==
literal|null
operator|&&
operator|(
operator|(
name|slot
operator|-
name|iTable
operator|.
name|firstSlot
argument_list|()
operator|)
operator|%
name|TimetableGridTable
operator|.
name|sNrSlotsPerPeriod
operator|)
operator|!=
literal|0
decl_stmt|;
name|c
operator|.
name|setBorderWidthRight
argument_list|(
name|eod
operator|||
operator|!
name|in
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|bgColor
init|=
name|cell
operator|.
name|getBackground
argument_list|()
decl_stmt|;
if|if
condition|(
name|iTable
operator|.
name|getBgMode
argument_list|()
operator|==
name|TimetableGridModel
operator|.
name|sBgModeNone
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
operator|!
name|model
operator|.
name|isAvailable
argument_list|(
name|day
argument_list|,
name|slot
operator|-
name|i
argument_list|)
condition|)
block|{
name|bgColor
operator|=
name|TimetableGridCell
operator|.
name|sBgColorNotAvailableButAssigned
expr_stmt|;
break|break;
block|}
block|}
name|c
operator|=
name|createCell
argument_list|()
expr_stmt|;
name|c
operator|.
name|setBorderWidthTop
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|c
operator|.
name|setBorderWidthLeft
argument_list|(
name|slot
operator|==
name|iTable
operator|.
name|lastSlot
argument_list|()
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|c
operator|.
name|setColspan
argument_list|(
name|colSpan
argument_list|)
expr_stmt|;
if|if
condition|(
name|bgColor
operator|!=
literal|null
condition|)
name|c
operator|.
name|setBackgroundColor
argument_list|(
name|getColor
argument_list|(
name|bgColor
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iTable
operator|.
name|getWeek
argument_list|()
operator|==
operator|-
literal|100
operator|&&
name|cell
operator|.
name|hasDays
argument_list|()
operator|&&
operator|!
name|cell
operator|.
name|getDays
argument_list|()
operator|.
name|equals
argument_list|(
name|iTable
operator|.
name|getDefaultDatePatternName
argument_list|()
argument_list|)
condition|)
name|addTextVertical
argument_list|(
name|c
argument_list|,
name|cell
operator|.
name|getDays
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iTable
operator|.
name|getResourceType
argument_list|()
operator|!=
name|TimetableGridModel
operator|.
name|sResourceTypeRoom
condition|)
name|addTextVertical
argument_list|(
name|c
argument_list|,
name|cell
operator|.
name|getRoomName
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|iTable
operator|.
name|getResourceType
argument_list|()
operator|!=
name|TimetableGridModel
operator|.
name|sResourceTypeInstructor
operator|&&
name|iTable
operator|.
name|getShowInstructors
argument_list|()
condition|)
name|addTextVertical
argument_list|(
name|c
argument_list|,
name|cell
operator|.
name|getInstructor
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|addTextVertical
argument_list|(
name|c
argument_list|,
name|cell
operator|.
name|getShortCommentNoColors
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|cell
operator|.
name|getShortCommentNoColors
argument_list|()
argument_list|)
expr_stmt|;
name|addTextVertical
argument_list|(
name|c
argument_list|,
name|cell
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|slot
operator|-=
name|length
operator|-
literal|1
expr_stmt|;
block|}
block|}
name|c
operator|=
name|createCell
argument_list|()
expr_stmt|;
name|c
operator|.
name|setBorderWidthTop
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|c
operator|.
name|setBorderWidthLeft
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|==
literal|0
condition|)
name|addTextVertical
argument_list|(
name|c
argument_list|,
name|Constants
operator|.
name|DAY_NAME
index|[
name|day
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|c
operator|.
name|setBorderWidthBottom
argument_list|(
name|idx
operator|==
name|maxIdx
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|c
operator|.
name|setColspan
argument_list|(
literal|12
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* 			int step = TimetableGridTable.sNrSlotsPerPeriod; 			for (int slot=iTable.firstSlot();slot<=iTable.lastSlot();slot+=step) { 				int time = slot * Constants.SLOT_LENGTH_MIN + Constants.FIRST_SLOT_TIME_MIN;                 int slotsToEnd = iTable.lastSlot()-slot+1;                 if ((slot%TimetableGridTable.sNrSlotsPerPeriod) == 0) {     				c = createCell("TimetableHeadCell"+(slot==iTable.firstSlot()?"":"In")+"Vertical");     				addText(c, Constants.toTime(time), true);     				iPdfTable.addCell(c);                 } else {                 	c = createCell("TimetableHeadCellInVertical");                 	iPdfTable.addCell(c);                 }                 for (int day=iTable.startDay();day<=iTable.endDay();day++) {                 	int maxIdx = model.getMaxIdxForDay(day,iTable.firstSlot(),iTable.lastSlot());                 	for (int idx=0;idx<=maxIdx;idx++) {                     	TimetableGridCell cell = model.getCell(day,slot, idx);                     	if (model.isRendered(day,slot,idx)) continue; 						int rowSpan = (cell==null?1:Math.min(cell.getLength()+cell.getSlot()-slot,slotsToEnd)); 						int colSpan = (iTable.getResourceType()==TimetableGridModel.sResourceTypeDepartment&& cell!=null?1:model.getDepth(day,slot,idx,maxIdx,rowSpan));  						model.setRendered(day,slot,idx,colSpan,rowSpan); 						int rowSpanDivStep = (int)Math.ceil(((double)rowSpan)/step);                     	                     	if (cell==null) { 							String bgColor = model.getBackground(day,slot); 							if (bgColor==null&& !model.isAvailable(day,slot)) 								bgColor=TimetableGridCell.sBgColorNotAvailable;                             boolean eol = (day==iTable.endDay()&& (idx+colSpan-1)==maxIdx); 							c = createCell("TimetableCell"+(slot==iTable.firstSlot()?"":"In")+"Vertical"+(eol?"EOL":"")); 							c.setColspan(colSpan); 							//c.setRowspan(rowSpanDivStep); 							if (bgColor!=null) 								c.setBackgroundColor(getColor(bgColor)); 							iPdfTable.addCell(c);                     	} else {                     		String bgColor = cell.getBackground();                     		if (iTable.getBgMode()==TimetableGridModel.sBgModeNone) {                         		for (int i=0;i<cell.getLength();i++)                         			if (!model.isAvailable(day,slot+i)) {                         				bgColor = TimetableGridCell.sBgColorNotAvailableButAssigned;                         				break;                         			}                     		}                     		boolean eol = (day==iTable.endDay());                     		c = createCell("TimetableCell"+(slot==iTable.firstSlot()?"":"In")+"Vertical" + (eol?"EOL":"")); 							c.setColspan(colSpan); 							//c.setRowspan(rowSpanDivStep); 							if (bgColor!=null) 								c.setBackgroundColor(getColor(bgColor)); 							addText(c, cell.getName()); 							if (iTable.getResourceType()!=TimetableGridModel.sResourceTypeRoom) 								addText(c, cell.getRoomName()); 							else 								addText(c, cell.getShortComment()==null?"":cell.getShortComment()); 							if (iTable.getWeek()==-100&& cell.hasDays()&& !cell.getDays().equals(iTable.getDefaultDatePatternName())) 								addText(c, cell.getDays()); 							iPdfTable.addCell(c);                     	}                     }                 } 			} 			*/
block|}
if|if
condition|(
name|iTable
operator|.
name|isDispModePerWeek
argument_list|()
condition|)
block|{
name|flushTable
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addLegendRow
parameter_list|(
name|String
name|color
parameter_list|,
name|String
name|text
parameter_list|)
block|{
name|PdfPCell
name|c
init|=
name|createCellNoBorder
argument_list|()
decl_stmt|;
name|c
operator|.
name|setBorderWidth
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|c
operator|.
name|setBackgroundColor
argument_list|(
name|getColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|=
name|createCellNoBorder
argument_list|()
expr_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
literal|"  "
operator|+
name|text
argument_list|)
expr_stmt|;
name|c
operator|.
name|setHorizontalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|printLegend
parameter_list|()
throws|throws
name|Exception
block|{
name|iPdfTable
operator|=
operator|new
name|PdfPTable
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|setWidths
argument_list|(
operator|new
name|float
index|[]
block|{
literal|10f
block|,
literal|200f
block|}
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|getDefaultCell
argument_list|()
operator|.
name|setPadding
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|getDefaultCell
argument_list|()
operator|.
name|setBorderWidth
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|setHorizontalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|setSplitRows
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|setSpacingBefore
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|setKeepTogether
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|iTable
operator|.
name|getBgMode
argument_list|()
operator|!=
name|TimetableGridModel
operator|.
name|sBgModeNone
condition|)
block|{
name|PdfPCell
name|c
init|=
name|createCellNoBorder
argument_list|()
decl_stmt|;
name|c
operator|.
name|setColspan
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
literal|"Assigned classes:"
argument_list|)
expr_stmt|;
name|c
operator|.
name|setHorizontalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iTable
operator|.
name|getBgMode
argument_list|()
operator|==
name|TimetableGridModel
operator|.
name|sBgModeTimePref
condition|)
block|{
name|addLegendRow
argument_list|(
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
argument_list|,
literal|"Required time"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyPreferred
argument_list|)
argument_list|,
literal|"Strongly preferred time"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sPreferred
argument_list|)
argument_list|,
literal|"Preferred time"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
argument_list|,
literal|"No time preference"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sDiscouraged
argument_list|)
argument_list|,
literal|"Discouraged time"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
argument_list|,
literal|"Strongly discouraged time"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
argument_list|,
literal|"Prohibited time"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|iTable
operator|.
name|getBgMode
argument_list|()
operator|==
name|TimetableGridModel
operator|.
name|sBgModeRoomPref
condition|)
block|{
name|addLegendRow
argument_list|(
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
argument_list|,
literal|"Required room"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyPreferred
argument_list|)
argument_list|,
literal|"Strongly preferred room"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sPreferred
argument_list|)
argument_list|,
literal|"Preferred room"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
argument_list|,
literal|"No room preference"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sDiscouraged
argument_list|)
argument_list|,
literal|"Discouraged room"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
argument_list|,
literal|"Strongly discouraged room"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
argument_list|,
literal|"Prohibited room"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|iTable
operator|.
name|getBgMode
argument_list|()
operator|==
name|TimetableGridModel
operator|.
name|sBgModeStudentConf
condition|)
block|{
for|for
control|(
name|int
name|nrConflicts
init|=
literal|0
init|;
name|nrConflicts
operator|<=
literal|15
condition|;
name|nrConflicts
operator|++
control|)
block|{
name|String
name|color
init|=
name|TimetableGridCell
operator|.
name|conflicts2color
argument_list|(
name|nrConflicts
argument_list|)
decl_stmt|;
name|addLegendRow
argument_list|(
name|color
argument_list|,
literal|""
operator|+
name|nrConflicts
operator|+
literal|" "
operator|+
operator|(
name|nrConflicts
operator|==
literal|15
condition|?
literal|"or more "
else|:
literal|""
operator|)
operator|+
literal|"student conflicts"
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|iTable
operator|.
name|getBgMode
argument_list|()
operator|==
name|TimetableGridModel
operator|.
name|sBgModeInstructorBtbPref
condition|)
block|{
name|addLegendRow
argument_list|(
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
argument_list|,
literal|"No instructor back-to-back preference (distance=0)"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sDiscouraged
argument_list|)
argument_list|,
literal|"Discouraged back-to-back (0<distance<=5)"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
argument_list|,
literal|"Strongly discouraged back-to-back (5<distance<=20)"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
argument_list|,
literal|"Prohibited back-to-back (20<distance)"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|iTable
operator|.
name|getBgMode
argument_list|()
operator|==
name|TimetableGridModel
operator|.
name|sBgModeDistributionConstPref
condition|)
block|{
name|addLegendRow
argument_list|(
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
argument_list|,
literal|"No violated constraint(distance=0)"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sDiscouraged
argument_list|)
argument_list|,
literal|"Discouraged/preferred constraint violated"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
argument_list|,
literal|"Strongly discouraged/preferred constraint violated"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
argument_list|,
literal|"Required/prohibited constraint violated"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|iTable
operator|.
name|getBgMode
argument_list|()
operator|==
name|TimetableGridModel
operator|.
name|sBgModePerturbations
condition|)
block|{
name|addLegendRow
argument_list|(
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyPreferred
argument_list|)
argument_list|,
literal|"No change"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
argument_list|,
literal|"No initial assignment"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sDiscouraged
argument_list|)
argument_list|,
literal|"Room changed"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
argument_list|,
literal|"Time changed"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
argument_list|,
literal|"Both time and room changed"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|iTable
operator|.
name|getBgMode
argument_list|()
operator|==
name|TimetableGridModel
operator|.
name|sBgModePerturbationPenalty
condition|)
block|{
for|for
control|(
name|int
name|nrConflicts
init|=
literal|0
init|;
name|nrConflicts
operator|<=
literal|15
condition|;
name|nrConflicts
operator|++
control|)
block|{
name|String
name|color
init|=
name|TimetableGridCell
operator|.
name|conflicts2color
argument_list|(
name|nrConflicts
argument_list|)
decl_stmt|;
name|addLegendRow
argument_list|(
name|color
argument_list|,
literal|""
operator|+
operator|(
name|nrConflicts
operator|==
literal|0
condition|?
literal|"Zero perturbation penalty"
else|:
name|nrConflicts
operator|==
literal|15
condition|?
literal|"Perturbation penalty above 15"
else|:
literal|"Perturbation penalty below or equal to "
operator|+
name|nrConflicts
operator|)
operator|+
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|iTable
operator|.
name|getBgMode
argument_list|()
operator|==
name|TimetableGridModel
operator|.
name|sBgModeHardConflicts
condition|)
block|{
name|addLegendRow
argument_list|(
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
argument_list|,
literal|"Required time and room"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyPreferred
argument_list|)
argument_list|,
literal|"Can be moved in room with no hard conflict"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sPreferred
argument_list|)
argument_list|,
literal|"Can be moved in room (but there is a hard conflict), can be moved in time with no conflict"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
argument_list|,
literal|"Can be moved in room (but there is a hard conflict)"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sDiscouraged
argument_list|)
argument_list|,
literal|"Can be moved in time with no hard conflict, cannot be moved in room"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
argument_list|,
literal|"Can be moved in time (but there is a hard conflict), cannot be moved in room"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|iTable
operator|.
name|getBgMode
argument_list|()
operator|==
name|TimetableGridModel
operator|.
name|sBgModeDepartmentalBalancing
condition|)
block|{
for|for
control|(
name|int
name|nrConflicts
init|=
literal|0
init|;
name|nrConflicts
operator|<=
literal|3
condition|;
name|nrConflicts
operator|++
control|)
block|{
name|String
name|color
init|=
name|TimetableGridCell
operator|.
name|conflicts2colorFast
argument_list|(
name|nrConflicts
argument_list|)
decl_stmt|;
name|addLegendRow
argument_list|(
name|color
argument_list|,
literal|""
operator|+
operator|(
name|nrConflicts
operator|==
literal|0
condition|?
literal|"Zero penalty"
else|:
name|nrConflicts
operator|==
literal|3
condition|?
literal|"Penalty equal or above 3"
else|:
literal|"Penalty equal to "
operator|+
name|nrConflicts
operator|)
operator|+
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|iTable
operator|.
name|getBgMode
argument_list|()
operator|==
name|TimetableGridModel
operator|.
name|sBgModeTooBigRooms
condition|)
block|{
name|addLegendRow
argument_list|(
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
argument_list|,
literal|"Assigned room is smaller than room limit of a class"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
argument_list|,
literal|"Assigned room is not more than 25% bigger than the smallest avaialable room"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sDiscouraged
argument_list|)
argument_list|,
literal|"Assigned room is not more than 50% bigger than the smallest avaialable room"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
argument_list|,
literal|"Assigned room is more than 50% bigger than the smallest avaialable room"
argument_list|)
expr_stmt|;
block|}
name|PdfPCell
name|c
init|=
name|createCellNoBorder
argument_list|()
decl_stmt|;
name|c
operator|.
name|setColspan
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
literal|"Free times:"
argument_list|)
expr_stmt|;
name|c
operator|.
name|setHorizontalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|TimetableGridCell
operator|.
name|sBgColorNotAvailable
argument_list|,
literal|"Time not available"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
argument_list|,
literal|"No preference"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iTable
operator|.
name|getShowUselessTimes
argument_list|()
condition|)
block|{
name|addLegendRow
argument_list|(
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sDiscouraged
argument_list|)
argument_list|,
literal|"Standard (MWF or TTh) time pattern is broken (time cannot be used for MW, WF, MF or TTh class)"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
argument_list|,
literal|"Useless half-hour"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|TimetableGridCell
operator|.
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
argument_list|,
literal|"Useless half-hour and broken standard time pattern"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iTable
operator|.
name|isDispModePerWeekVertical
argument_list|()
condition|)
name|iDocument
operator|.
name|newPage
argument_list|()
expr_stmt|;
name|iDocument
operator|.
name|add
argument_list|(
name|iPdfTable
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

