begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|timegrid
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|ExamGridForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|PdfEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|PdfFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|timegrid
operator|.
name|ExamGridTable
operator|.
name|ExamGridModel
operator|.
name|ExamGridCell
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Chunk
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|PageSize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Paragraph
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Rectangle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|pdf
operator|.
name|PdfPCell
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|pdf
operator|.
name|PdfPTable
import|;
end_import

begin_class
specifier|public
class|class
name|PdfExamGridTable
extends|extends
name|ExamGridTable
block|{
specifier|private
name|Document
name|iDocument
init|=
literal|null
decl_stmt|;
specifier|private
name|PdfPTable
name|iPdfTable
init|=
literal|null
decl_stmt|;
specifier|public
name|PdfExamGridTable
parameter_list|(
name|ExamGridForm
name|form
parameter_list|,
name|HttpSession
name|session
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|form
argument_list|,
name|session
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|export
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|Exception
block|{
name|FileOutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|int
name|nrCols
init|=
name|getNrColumns
argument_list|()
decl_stmt|;
name|iDocument
operator|=
operator|(
name|iForm
operator|.
name|getDispMode
argument_list|()
operator|==
name|sDispModeInRowHorizontal
operator|||
name|iForm
operator|.
name|getDispMode
argument_list|()
operator|==
name|sDispModeInRowVertical
condition|?
operator|new
name|Document
argument_list|(
operator|new
name|Rectangle
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|PageSize
operator|.
name|LETTER
operator|.
name|getWidth
argument_list|()
argument_list|,
literal|60.0f
operator|+
literal|100.0f
operator|*
name|nrCols
argument_list|)
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|PageSize
operator|.
name|LETTER
operator|.
name|getHeight
argument_list|()
argument_list|,
literal|60.0f
operator|+
literal|150f
operator|*
name|nrCols
argument_list|)
argument_list|)
operator|.
name|rotate
argument_list|()
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|)
else|:
operator|new
name|Document
argument_list|(
operator|new
name|Rectangle
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|PageSize
operator|.
name|LETTER
operator|.
name|getWidth
argument_list|()
argument_list|,
literal|60.0f
operator|+
literal|100.0f
operator|*
name|nrCols
argument_list|)
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|PageSize
operator|.
name|LETTER
operator|.
name|getHeight
argument_list|()
argument_list|,
literal|60.0f
operator|+
literal|150f
operator|*
name|nrCols
argument_list|)
argument_list|)
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|)
operator|)
expr_stmt|;
name|out
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|PdfEventHandler
operator|.
name|initFooter
argument_list|(
name|iDocument
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|iDocument
operator|.
name|open
argument_list|()
expr_stmt|;
name|printTable
argument_list|()
expr_stmt|;
name|printLegend
argument_list|()
expr_stmt|;
name|iDocument
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
block|}
block|}
block|}
specifier|public
name|int
name|getNrColumns
parameter_list|()
block|{
if|if
condition|(
name|iForm
operator|.
name|getDispMode
argument_list|()
operator|==
name|sDispModeInRowHorizontal
condition|)
block|{
return|return
literal|1
operator|+
name|days
argument_list|()
operator|.
name|size
argument_list|()
operator|*
name|slots
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
if|else if
condition|(
name|iForm
operator|.
name|getDispMode
argument_list|()
operator|==
name|sDispModeInRowVertical
condition|)
block|{
return|return
literal|1
operator|+
name|models
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
if|else if
condition|(
name|iForm
operator|.
name|getDispMode
argument_list|()
operator|==
name|sDispModePerDayHorizontal
condition|)
block|{
return|return
literal|1
operator|+
name|slots
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
if|else if
condition|(
name|iForm
operator|.
name|getDispMode
argument_list|()
operator|==
name|sDispModePerDayVertical
condition|)
block|{
return|return
literal|1
operator|+
name|days
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
if|else if
condition|(
name|iForm
operator|.
name|getDispMode
argument_list|()
operator|==
name|sDispModePerWeekHorizontal
condition|)
block|{
return|return
literal|1
operator|+
name|weeks
argument_list|()
operator|.
name|size
argument_list|()
operator|*
name|slots
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
if|else if
condition|(
name|iForm
operator|.
name|getDispMode
argument_list|()
operator|==
name|sDispModePerWeekVertical
condition|)
block|{
return|return
literal|1
operator|+
name|daysOfWeek
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
specifier|private
specifier|static
name|Color
name|sBorderColor
init|=
operator|new
name|Color
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|)
decl_stmt|;
specifier|public
name|PdfPCell
name|createCell
parameter_list|()
block|{
name|PdfPCell
name|cell
init|=
operator|new
name|PdfPCell
argument_list|()
decl_stmt|;
name|cell
operator|.
name|setBorderColor
argument_list|(
name|sBorderColor
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setPadding
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setBorderWidth
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setVerticalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_TOP
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setHorizontalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_CENTER
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setBorderWidthTop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setBorderWidthBottom
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setBorderWidthLeft
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setBorderWidthRight
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|cell
return|;
block|}
specifier|public
name|PdfPCell
name|createCellNoBorder
parameter_list|()
block|{
name|PdfPCell
name|cell
init|=
operator|new
name|PdfPCell
argument_list|()
decl_stmt|;
name|cell
operator|.
name|setBorderColor
argument_list|(
name|sBorderColor
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setPadding
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setBorderWidth
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setVerticalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_TOP
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setHorizontalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_CENTER
argument_list|)
expr_stmt|;
return|return
name|cell
return|;
block|}
specifier|public
name|void
name|addText
parameter_list|(
name|PdfPCell
name|cell
parameter_list|,
name|String
name|text
parameter_list|)
block|{
if|if
condition|(
name|text
operator|==
literal|null
condition|)
return|return;
name|addText
argument_list|(
name|cell
argument_list|,
name|text
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addText
parameter_list|(
name|PdfPCell
name|cell
parameter_list|,
name|String
name|text
parameter_list|,
name|boolean
name|bold
parameter_list|)
block|{
if|if
condition|(
name|text
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|text
operator|.
name|indexOf
argument_list|(
literal|"<span"
argument_list|)
operator|>=
literal|0
condition|)
name|text
operator|=
name|text
operator|.
name|replaceAll
argument_list|(
literal|"</span>"
argument_list|,
literal|""
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"<span .*>"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|text
operator|=
name|text
operator|.
name|replaceAll
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
name|text
operator|=
name|text
operator|.
name|replaceAll
argument_list|(
literal|"<BR>"
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|cell
operator|.
name|getPhrase
argument_list|()
operator|==
literal|null
condition|)
block|{
name|cell
operator|.
name|setPhrase
argument_list|(
operator|new
name|Paragraph
argument_list|(
name|text
argument_list|,
name|PdfFont
operator|.
name|getFont
argument_list|(
name|bold
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setVerticalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_TOP
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setHorizontalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_CENTER
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cell
operator|.
name|getPhrase
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Chunk
argument_list|(
literal|"\n"
operator|+
name|text
argument_list|,
name|PdfFont
operator|.
name|getFont
argument_list|(
name|bold
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|printHeaderCell
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|vertical
parameter_list|,
name|boolean
name|eod
parameter_list|,
name|boolean
name|eol
parameter_list|)
block|{
name|PdfPCell
name|c
init|=
name|createCell
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|eol
operator|&&
operator|!
name|eod
condition|)
name|c
operator|.
name|setBorderWidthRight
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|c
operator|.
name|setBorderWidthLeft
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|c
operator|.
name|setBorderWidthTop
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|c
operator|.
name|setBorderWidthBottom
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addText
argument_list|(
name|c
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|printHeader
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|vertical
init|=
name|isVertical
argument_list|()
decl_stmt|;
name|printHeaderCell
argument_list|(
name|name
argument_list|,
name|vertical
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|Integer
argument_list|>
name|days
init|=
name|days
argument_list|()
decl_stmt|,
name|slots
init|=
name|slots
argument_list|()
decl_stmt|,
name|weeks
init|=
name|weeks
argument_list|()
decl_stmt|,
name|daysOfWeek
init|=
name|daysOfWeek
argument_list|()
decl_stmt|;
if|if
condition|(
name|iForm
operator|.
name|getDispMode
argument_list|()
operator|==
name|sDispModeInRowHorizontal
condition|)
block|{
for|for
control|(
name|Integer
name|day
range|:
name|days
control|)
block|{
for|for
control|(
name|Integer
name|slot
range|:
name|slots
argument_list|()
control|)
block|{
name|boolean
name|eod
init|=
operator|(
name|slot
operator|==
name|slots
operator|.
name|last
argument_list|()
operator|)
decl_stmt|;
name|boolean
name|eol
init|=
operator|(
name|eod
operator|&&
name|day
operator|==
name|days
operator|.
name|last
argument_list|()
operator|)
decl_stmt|;
name|printHeaderCell
argument_list|(
name|getDayName
argument_list|(
name|day
argument_list|)
operator|+
literal|"<br>"
operator|+
name|getSlotName
argument_list|(
name|slot
argument_list|)
argument_list|,
name|vertical
argument_list|,
name|eod
argument_list|,
name|eol
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|iForm
operator|.
name|getDispMode
argument_list|()
operator|==
name|sDispModeInRowVertical
condition|)
block|{
for|for
control|(
name|ExamGridModel
name|m
range|:
name|models
argument_list|()
control|)
block|{
name|boolean
name|eol
init|=
name|m
operator|.
name|equals
argument_list|(
name|models
argument_list|()
operator|.
name|lastElement
argument_list|()
argument_list|)
decl_stmt|;
name|printHeaderCell
argument_list|(
name|m
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|m
operator|.
name|getSize
argument_list|()
operator|>
literal|0
condition|?
literal|" ("
operator|+
name|m
operator|.
name|getSize
argument_list|()
operator|+
literal|")"
else|:
literal|""
operator|)
argument_list|,
name|vertical
argument_list|,
literal|false
argument_list|,
name|eol
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|iForm
operator|.
name|getDispMode
argument_list|()
operator|==
name|sDispModePerDayHorizontal
condition|)
block|{
for|for
control|(
name|Integer
name|slot
range|:
name|slots
argument_list|()
control|)
block|{
name|boolean
name|eol
init|=
operator|(
name|slot
operator|==
name|slots
operator|.
name|last
argument_list|()
operator|)
decl_stmt|;
name|printHeaderCell
argument_list|(
name|getSlotName
argument_list|(
name|slot
argument_list|)
operator|+
literal|"<br> "
argument_list|,
name|vertical
argument_list|,
literal|false
argument_list|,
name|eol
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|iForm
operator|.
name|getDispMode
argument_list|()
operator|==
name|sDispModePerDayVertical
condition|)
block|{
for|for
control|(
name|Integer
name|day
range|:
name|days
control|)
block|{
name|boolean
name|eol
init|=
operator|(
name|day
operator|==
name|days
operator|.
name|last
argument_list|()
operator|)
decl_stmt|;
name|printHeaderCell
argument_list|(
name|getDayName
argument_list|(
name|day
argument_list|)
operator|+
literal|"<br> "
argument_list|,
name|vertical
argument_list|,
literal|false
argument_list|,
name|eol
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|iForm
operator|.
name|getDispMode
argument_list|()
operator|==
name|sDispModePerWeekHorizontal
condition|)
block|{
for|for
control|(
name|Integer
name|week
range|:
name|weeks
control|)
block|{
for|for
control|(
name|Integer
name|slot
range|:
name|slots
control|)
block|{
name|boolean
name|eod
init|=
operator|(
name|slot
operator|==
name|slots
operator|.
name|last
argument_list|()
operator|)
decl_stmt|;
name|boolean
name|eol
init|=
name|eod
operator|&&
operator|(
name|week
operator|==
name|weeks
operator|.
name|last
argument_list|()
operator|)
decl_stmt|;
name|printHeaderCell
argument_list|(
name|getWeekName
argument_list|(
name|week
argument_list|)
operator|+
literal|"<br>"
operator|+
name|getSlotName
argument_list|(
name|slot
argument_list|)
argument_list|,
name|vertical
argument_list|,
name|eod
argument_list|,
name|eol
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|iForm
operator|.
name|getDispMode
argument_list|()
operator|==
name|sDispModePerWeekVertical
condition|)
block|{
for|for
control|(
name|Integer
name|dow
range|:
name|daysOfWeek
control|)
block|{
name|boolean
name|eol
init|=
operator|(
name|dow
operator|==
name|daysOfWeek
operator|.
name|last
argument_list|()
operator|)
decl_stmt|;
name|printHeaderCell
argument_list|(
name|getDayOfWeekName
argument_list|(
name|dow
argument_list|)
operator|+
literal|"<br> "
argument_list|,
name|vertical
argument_list|,
literal|false
argument_list|,
name|eol
argument_list|)
expr_stmt|;
block|}
block|}
name|iPdfTable
operator|.
name|setHeaderRows
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Color
name|getColor
parameter_list|(
name|String
name|rgbColor
parameter_list|)
block|{
name|StringTokenizer
name|x
init|=
operator|new
name|StringTokenizer
argument_list|(
name|rgbColor
operator|.
name|substring
argument_list|(
literal|"rgb("
operator|.
name|length
argument_list|()
argument_list|,
name|rgbColor
operator|.
name|length
argument_list|()
operator|-
literal|")"
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
literal|","
argument_list|)
decl_stmt|;
return|return
operator|new
name|Color
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|x
operator|.
name|nextToken
argument_list|()
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|x
operator|.
name|nextToken
argument_list|()
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|x
operator|.
name|nextToken
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|void
name|createTable
parameter_list|(
name|boolean
name|keepTogether
parameter_list|)
block|{
name|iPdfTable
operator|=
operator|new
name|PdfPTable
argument_list|(
name|getNrColumns
argument_list|()
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|setWidthPercentage
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|getDefaultCell
argument_list|()
operator|.
name|setPadding
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|getDefaultCell
argument_list|()
operator|.
name|setBorderWidth
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|setSplitRows
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|setSpacingBefore
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|setKeepTogether
argument_list|(
name|keepTogether
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|flushTable
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|iPdfTable
operator|!=
literal|null
condition|)
name|iDocument
operator|.
name|add
argument_list|(
name|iPdfTable
argument_list|)
expr_stmt|;
name|iPdfTable
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|void
name|printCell
parameter_list|(
name|ExamGridModel
name|model
parameter_list|,
name|int
name|day
parameter_list|,
name|int
name|slot
parameter_list|,
name|int
name|idx
parameter_list|,
name|int
name|maxIdx
parameter_list|,
name|boolean
name|head
parameter_list|,
name|boolean
name|vertical
parameter_list|,
name|boolean
name|in
parameter_list|,
name|boolean
name|eod
parameter_list|,
name|boolean
name|eol
parameter_list|)
block|{
name|ExamPeriod
name|period
init|=
name|getPeriod
argument_list|(
name|day
argument_list|,
name|slot
argument_list|)
decl_stmt|;
name|ExamGridCell
name|cell
init|=
name|model
operator|.
name|getAssignment
argument_list|(
name|period
argument_list|,
name|idx
argument_list|)
decl_stmt|;
name|PdfPCell
name|c
init|=
name|createCell
argument_list|()
decl_stmt|;
name|c
operator|.
name|setBorderWidthTop
argument_list|(
name|head
operator|||
operator|(
operator|!
name|in
operator|&&
operator|!
name|vertical
operator|)
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|c
operator|.
name|setBorderWidthRight
argument_list|(
name|eod
operator|||
name|eol
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|cell
operator|==
literal|null
condition|)
block|{
name|String
name|bgColor
init|=
name|model
operator|.
name|getBackground
argument_list|(
name|period
argument_list|)
decl_stmt|;
if|if
condition|(
name|bgColor
operator|==
literal|null
operator|&&
operator|!
name|model
operator|.
name|isAvailable
argument_list|(
name|period
argument_list|)
condition|)
name|bgColor
operator|=
name|sBgColorNotAvailable
expr_stmt|;
if|if
condition|(
name|period
operator|==
literal|null
condition|)
name|bgColor
operator|=
name|sBgColorNotAvailable
expr_stmt|;
if|if
condition|(
name|bgColor
operator|!=
literal|null
condition|)
name|c
operator|.
name|setBackgroundColor
argument_list|(
name|getColor
argument_list|(
name|bgColor
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|setBorderWidthBottom
argument_list|(
name|idx
operator|<
name|maxIdx
condition|?
literal|0
else|:
literal|1
argument_list|)
expr_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|bgColor
init|=
name|cell
operator|.
name|getBackground
argument_list|()
decl_stmt|;
if|if
condition|(
name|iForm
operator|.
name|getBackground
argument_list|()
operator|==
name|sBgNone
operator|&&
operator|!
name|sBgColorNotAvailable
operator|.
name|equals
argument_list|(
name|bgColor
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|model
operator|.
name|isAvailable
argument_list|(
name|period
argument_list|)
condition|)
name|bgColor
operator|=
name|sBgColorNotAvailableButAssigned
expr_stmt|;
block|}
if|if
condition|(
name|bgColor
operator|!=
literal|null
condition|)
name|c
operator|.
name|setBackgroundColor
argument_list|(
name|getColor
argument_list|(
name|bgColor
argument_list|)
argument_list|)
expr_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
name|cell
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iForm
operator|.
name|getResource
argument_list|()
operator|!=
name|sResourceRoom
condition|)
name|addText
argument_list|(
name|c
argument_list|,
name|cell
operator|.
name|getRoomName
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|addText
argument_list|(
name|c
argument_list|,
name|cell
operator|.
name|getShortCommentNoColors
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|cell
operator|.
name|getShortCommentNoColors
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|printRowHeaderCell
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|idx
parameter_list|,
name|int
name|maxIdx
parameter_list|,
name|boolean
name|vertical
parameter_list|,
name|boolean
name|head
parameter_list|,
name|boolean
name|in
parameter_list|)
block|{
name|PdfPCell
name|c
init|=
name|createCell
argument_list|()
decl_stmt|;
name|c
operator|.
name|setBorderWidthTop
argument_list|(
name|idx
operator|==
literal|0
operator|&&
operator|(
name|head
operator|||
operator|(
operator|!
name|in
operator|&&
operator|!
name|vertical
operator|)
operator|)
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|c
operator|.
name|setBorderWidthBottom
argument_list|(
name|idx
operator|<
name|maxIdx
condition|?
literal|0
else|:
literal|1
argument_list|)
expr_stmt|;
name|c
operator|.
name|setBorderWidthRight
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|==
literal|0
condition|)
name|addText
argument_list|(
name|c
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|printTable
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|vertical
init|=
name|isVertical
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|Integer
argument_list|>
name|days
init|=
name|days
argument_list|()
decl_stmt|,
name|slots
init|=
name|slots
argument_list|()
decl_stmt|,
name|weeks
init|=
name|weeks
argument_list|()
decl_stmt|,
name|daysOfWeek
init|=
name|daysOfWeek
argument_list|()
decl_stmt|;
name|int
name|rowNumber
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|iForm
operator|.
name|getDispMode
argument_list|()
operator|==
name|sDispModeInRowVertical
condition|)
block|{
name|int
name|globalMaxIdx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Integer
name|day
range|:
name|days
control|)
for|for
control|(
name|Integer
name|slot
range|:
name|slots
control|)
block|{
name|globalMaxIdx
operator|=
name|Math
operator|.
name|max
argument_list|(
name|globalMaxIdx
argument_list|,
name|getMaxIdx
argument_list|(
name|day
argument_list|,
name|slot
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|week
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|Integer
name|day
range|:
name|days
control|)
block|{
name|boolean
name|head
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|week
operator|!=
name|getWeek
argument_list|(
name|day
argument_list|)
condition|)
block|{
name|week
operator|=
name|getWeek
argument_list|(
name|day
argument_list|)
expr_stmt|;
name|head
operator|=
literal|true
expr_stmt|;
name|flushTable
argument_list|()
expr_stmt|;
name|createTable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|printHeader
argument_list|(
name|getWeekName
argument_list|(
name|week
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Integer
name|slot
range|:
name|slots
control|)
block|{
if|if
condition|(
name|getPeriod
argument_list|(
name|day
argument_list|,
name|slot
argument_list|)
operator|==
literal|null
condition|)
continue|continue;
name|int
name|maxIdx
init|=
name|getMaxIdx
argument_list|(
name|day
argument_list|,
name|slot
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<=
name|maxIdx
condition|;
name|idx
operator|++
control|)
block|{
name|printRowHeaderCell
argument_list|(
name|getDayName
argument_list|(
name|day
argument_list|)
operator|+
literal|"<br>"
operator|+
name|getSlotName
argument_list|(
name|slot
argument_list|)
argument_list|,
name|idx
argument_list|,
name|maxIdx
argument_list|,
name|vertical
argument_list|,
name|head
operator|&&
name|slot
operator|==
name|slots
operator|.
name|first
argument_list|()
argument_list|,
name|globalMaxIdx
operator|==
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|ExamGridModel
name|model
range|:
name|models
argument_list|()
control|)
block|{
name|printCell
argument_list|(
name|model
argument_list|,
name|day
argument_list|,
name|slot
argument_list|,
name|idx
argument_list|,
name|maxIdx
argument_list|,
name|head
operator|&&
name|slot
operator|==
name|slots
operator|.
name|first
argument_list|()
operator|&&
name|idx
operator|==
literal|0
argument_list|,
name|vertical
argument_list|,
name|globalMaxIdx
operator|==
literal|0
operator|||
name|idx
operator|>
literal|0
argument_list|,
literal|false
argument_list|,
name|model
operator|.
name|equals
argument_list|(
name|models
argument_list|()
operator|.
name|lastElement
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|rowNumber
operator|++
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|int
name|tmx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ExamGridModel
name|m
range|:
name|models
argument_list|()
control|)
name|tmx
operator|=
name|Math
operator|.
name|max
argument_list|(
name|tmx
argument_list|,
name|getMaxIdx
argument_list|(
name|m
argument_list|,
name|days
operator|.
name|first
argument_list|()
argument_list|,
name|days
operator|.
name|last
argument_list|()
argument_list|,
name|slots
operator|.
name|first
argument_list|()
argument_list|,
name|slots
operator|.
name|last
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ExamGridModel
name|model
range|:
name|models
argument_list|()
control|)
block|{
if|if
condition|(
name|iForm
operator|.
name|getDispMode
argument_list|()
operator|==
name|sDispModeInRowHorizontal
condition|)
block|{
if|if
condition|(
name|rowNumber
operator|==
literal|0
condition|)
block|{
name|createTable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|printHeader
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|int
name|maxIdx
init|=
name|getMaxIdx
argument_list|(
name|model
argument_list|,
name|days
operator|.
name|first
argument_list|()
argument_list|,
name|days
operator|.
name|last
argument_list|()
argument_list|,
name|slots
operator|.
name|first
argument_list|()
argument_list|,
name|slots
operator|.
name|last
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<=
name|maxIdx
condition|;
name|idx
operator|++
control|)
block|{
name|printRowHeaderCell
argument_list|(
name|model
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|model
operator|.
name|getSize
argument_list|()
operator|>
literal|0
condition|?
literal|" ("
operator|+
name|model
operator|.
name|getSize
argument_list|()
operator|+
literal|")"
else|:
literal|""
operator|)
operator|+
literal|"<br> "
argument_list|,
name|idx
argument_list|,
name|maxIdx
argument_list|,
name|vertical
argument_list|,
operator|(
name|rowNumber
operator|%
literal|10
operator|==
literal|0
operator|)
argument_list|,
name|tmx
operator|==
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|Integer
name|day
range|:
name|days
control|)
block|{
for|for
control|(
name|Integer
name|slot
range|:
name|slots
control|)
block|{
name|boolean
name|eod
init|=
operator|(
name|slot
operator|==
name|slots
operator|.
name|last
argument_list|()
operator|)
decl_stmt|;
name|boolean
name|eol
init|=
operator|(
name|eod
operator|&&
name|day
operator|==
name|days
operator|.
name|last
argument_list|()
operator|)
decl_stmt|;
name|printCell
argument_list|(
name|model
argument_list|,
name|day
argument_list|,
name|slot
argument_list|,
name|idx
argument_list|,
name|maxIdx
argument_list|,
name|rowNumber
operator|%
literal|10
operator|==
literal|0
operator|&&
name|idx
operator|==
literal|0
argument_list|,
name|vertical
argument_list|,
name|tmx
operator|==
literal|0
operator|||
name|idx
operator|>
literal|0
argument_list|,
name|eod
argument_list|,
name|eol
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|else if
condition|(
name|iForm
operator|.
name|getDispMode
argument_list|()
operator|==
name|sDispModePerDayVertical
condition|)
block|{
name|flushTable
argument_list|()
expr_stmt|;
name|createTable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|printHeader
argument_list|(
name|getModelName
argument_list|(
name|model
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|gmx
init|=
name|getMaxIdx
argument_list|(
name|model
argument_list|,
name|days
operator|.
name|first
argument_list|()
argument_list|,
name|days
operator|.
name|last
argument_list|()
argument_list|,
name|slots
operator|.
name|first
argument_list|()
argument_list|,
name|slots
operator|.
name|last
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Integer
name|slot
range|:
name|slots
control|)
block|{
name|int
name|maxIdx
init|=
name|getMaxIdx
argument_list|(
name|model
argument_list|,
name|days
operator|.
name|first
argument_list|()
argument_list|,
name|days
operator|.
name|last
argument_list|()
argument_list|,
name|slot
argument_list|,
name|slot
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<=
name|maxIdx
condition|;
name|idx
operator|++
control|)
block|{
name|printRowHeaderCell
argument_list|(
name|getSlotName
argument_list|(
name|slot
argument_list|)
operator|+
literal|"<br> "
argument_list|,
name|idx
argument_list|,
name|maxIdx
argument_list|,
name|vertical
argument_list|,
name|slot
operator|==
name|slots
operator|.
name|first
argument_list|()
argument_list|,
name|gmx
operator|==
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|Integer
name|day
range|:
name|days
control|)
block|{
name|printCell
argument_list|(
name|model
argument_list|,
name|day
argument_list|,
name|slot
argument_list|,
name|idx
argument_list|,
name|maxIdx
argument_list|,
name|slot
operator|==
name|slots
operator|.
name|first
argument_list|()
operator|&&
name|idx
operator|==
literal|0
argument_list|,
name|vertical
argument_list|,
name|gmx
operator|==
literal|0
operator|||
name|idx
operator|>
literal|0
argument_list|,
literal|false
argument_list|,
operator|(
name|day
operator|==
name|days
operator|.
name|last
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|else if
condition|(
name|iForm
operator|.
name|getDispMode
argument_list|()
operator|==
name|sDispModePerDayHorizontal
condition|)
block|{
name|flushTable
argument_list|()
expr_stmt|;
name|createTable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|printHeader
argument_list|(
name|getModelName
argument_list|(
name|model
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|gmx
init|=
name|getMaxIdx
argument_list|(
name|model
argument_list|,
name|days
operator|.
name|first
argument_list|()
argument_list|,
name|days
operator|.
name|last
argument_list|()
argument_list|,
name|slots
operator|.
name|first
argument_list|()
argument_list|,
name|slots
operator|.
name|last
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Integer
name|day
range|:
name|days
control|)
block|{
name|int
name|maxIdx
init|=
name|getMaxIdx
argument_list|(
name|model
argument_list|,
name|day
argument_list|,
name|day
argument_list|,
name|slots
operator|.
name|first
argument_list|()
argument_list|,
name|slots
operator|.
name|last
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<=
name|maxIdx
condition|;
name|idx
operator|++
control|)
block|{
name|printRowHeaderCell
argument_list|(
name|getDayName
argument_list|(
name|day
argument_list|)
operator|+
literal|"<br> "
argument_list|,
name|idx
argument_list|,
name|maxIdx
argument_list|,
name|vertical
argument_list|,
name|day
operator|==
name|days
operator|.
name|first
argument_list|()
argument_list|,
name|gmx
operator|==
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|Integer
name|slot
range|:
name|slots
control|)
block|{
name|printCell
argument_list|(
name|model
argument_list|,
name|day
argument_list|,
name|slot
argument_list|,
name|idx
argument_list|,
name|maxIdx
argument_list|,
name|day
operator|==
name|days
operator|.
name|first
argument_list|()
operator|&&
name|idx
operator|==
literal|0
argument_list|,
name|vertical
argument_list|,
name|gmx
operator|==
literal|0
operator|||
name|idx
operator|>
literal|0
argument_list|,
literal|false
argument_list|,
operator|(
name|slot
operator|==
name|slots
operator|.
name|last
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|else if
condition|(
name|iForm
operator|.
name|getDispMode
argument_list|()
operator|==
name|sDispModePerWeekHorizontal
condition|)
block|{
name|flushTable
argument_list|()
expr_stmt|;
name|createTable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|printHeader
argument_list|(
name|getModelName
argument_list|(
name|model
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|gmx
init|=
name|getMaxIdx
argument_list|(
name|model
argument_list|,
name|days
operator|.
name|first
argument_list|()
argument_list|,
name|days
operator|.
name|last
argument_list|()
argument_list|,
name|slots
operator|.
name|first
argument_list|()
argument_list|,
name|slots
operator|.
name|last
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Integer
name|dow
range|:
name|daysOfWeek
argument_list|()
control|)
block|{
name|int
name|maxIdx
init|=
name|getMaxIdx
argument_list|(
name|model
argument_list|,
name|dow
argument_list|,
name|slots
operator|.
name|first
argument_list|()
argument_list|,
name|slots
operator|.
name|last
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<=
name|maxIdx
condition|;
name|idx
operator|++
control|)
block|{
name|printRowHeaderCell
argument_list|(
name|getDayOfWeekName
argument_list|(
name|dow
argument_list|)
operator|+
literal|"<br> "
argument_list|,
name|idx
argument_list|,
name|maxIdx
argument_list|,
name|vertical
argument_list|,
name|dow
operator|==
name|daysOfWeek
operator|.
name|first
argument_list|()
argument_list|,
name|gmx
operator|==
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|Integer
name|week
range|:
name|weeks
control|)
block|{
for|for
control|(
name|Integer
name|slot
range|:
name|slots
control|)
block|{
name|printCell
argument_list|(
name|model
argument_list|,
name|getDay
argument_list|(
name|week
argument_list|,
name|dow
argument_list|)
argument_list|,
name|slot
argument_list|,
name|idx
argument_list|,
name|maxIdx
argument_list|,
name|dow
operator|==
name|daysOfWeek
operator|.
name|first
argument_list|()
operator|&&
name|idx
operator|==
literal|0
argument_list|,
name|vertical
argument_list|,
name|gmx
operator|==
literal|0
operator|||
name|idx
operator|>
literal|0
argument_list|,
operator|(
name|slot
operator|==
name|slots
operator|.
name|last
argument_list|()
operator|)
argument_list|,
operator|(
name|slot
operator|==
name|slots
operator|.
name|last
argument_list|()
operator|&&
name|week
operator|==
name|weeks
operator|.
name|last
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|else if
condition|(
name|iForm
operator|.
name|getDispMode
argument_list|()
operator|==
name|sDispModePerWeekVertical
condition|)
block|{
name|flushTable
argument_list|()
expr_stmt|;
name|createTable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|printHeader
argument_list|(
name|getModelName
argument_list|(
name|model
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|gmx
init|=
name|getMaxIdx
argument_list|(
name|model
argument_list|,
name|days
operator|.
name|first
argument_list|()
argument_list|,
name|days
operator|.
name|last
argument_list|()
argument_list|,
name|slots
operator|.
name|first
argument_list|()
argument_list|,
name|slots
operator|.
name|last
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Integer
name|week
range|:
name|weeks
control|)
block|{
for|for
control|(
name|Integer
name|slot
range|:
name|slots
control|)
block|{
name|int
name|maxIdx
init|=
name|getMaxIdx
argument_list|(
name|model
argument_list|,
name|week
argument_list|,
name|slot
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<=
name|maxIdx
condition|;
name|idx
operator|++
control|)
block|{
name|printRowHeaderCell
argument_list|(
name|getWeekName
argument_list|(
name|week
argument_list|)
operator|+
literal|"<br>"
operator|+
name|getSlotName
argument_list|(
name|slot
argument_list|)
argument_list|,
name|idx
argument_list|,
name|maxIdx
argument_list|,
name|vertical
argument_list|,
name|slot
operator|==
name|slots
operator|.
name|first
argument_list|()
argument_list|,
name|gmx
operator|==
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|Integer
name|dow
range|:
name|daysOfWeek
control|)
block|{
name|printCell
argument_list|(
name|model
argument_list|,
name|getDay
argument_list|(
name|week
argument_list|,
name|dow
argument_list|)
argument_list|,
name|slot
argument_list|,
name|idx
argument_list|,
name|maxIdx
argument_list|,
name|slot
operator|==
name|slots
operator|.
name|first
argument_list|()
operator|&&
name|idx
operator|==
literal|0
argument_list|,
name|vertical
argument_list|,
name|gmx
operator|==
literal|0
operator|||
name|idx
operator|>
literal|0
argument_list|,
literal|false
argument_list|,
operator|(
name|dow
operator|==
name|daysOfWeek
operator|.
name|last
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|rowNumber
operator|++
expr_stmt|;
block|}
block|}
name|flushTable
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|addLegendRow
parameter_list|(
name|String
name|color
parameter_list|,
name|String
name|text
parameter_list|)
block|{
name|PdfPCell
name|c
init|=
name|createCellNoBorder
argument_list|()
decl_stmt|;
name|c
operator|.
name|setBorderWidth
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|c
operator|.
name|setBackgroundColor
argument_list|(
name|getColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|=
name|createCellNoBorder
argument_list|()
expr_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
literal|"  "
operator|+
name|text
argument_list|)
expr_stmt|;
name|c
operator|.
name|setHorizontalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|printLegend
parameter_list|()
throws|throws
name|Exception
block|{
name|iPdfTable
operator|=
operator|new
name|PdfPTable
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|setWidths
argument_list|(
operator|new
name|float
index|[]
block|{
literal|10f
block|,
literal|200f
block|}
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|getDefaultCell
argument_list|()
operator|.
name|setPadding
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|getDefaultCell
argument_list|()
operator|.
name|setBorderWidth
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|setHorizontalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|setSplitRows
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|setSpacingBefore
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|setKeepTogether
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|iForm
operator|.
name|getBackground
argument_list|()
operator|!=
name|sBgNone
condition|)
block|{
name|PdfPCell
name|c
init|=
name|createCellNoBorder
argument_list|()
decl_stmt|;
name|c
operator|.
name|setColspan
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
literal|"Assigned examinations:"
argument_list|)
expr_stmt|;
name|c
operator|.
name|setHorizontalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iForm
operator|.
name|getBackground
argument_list|()
operator|==
name|sBgPeriodPref
condition|)
block|{
name|addLegendRow
argument_list|(
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
argument_list|,
literal|"Required period"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyPreferred
argument_list|)
argument_list|,
literal|"Strongly preferred period"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sPreferred
argument_list|)
argument_list|,
literal|"Preferred period"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
argument_list|,
literal|"No period preference"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sDiscouraged
argument_list|)
argument_list|,
literal|"Discouraged period"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
argument_list|,
literal|"Strongly discouraged period"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
argument_list|,
literal|"Prohibited period"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|iForm
operator|.
name|getBackground
argument_list|()
operator|==
name|sBgRoomPref
condition|)
block|{
name|addLegendRow
argument_list|(
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
argument_list|,
literal|"Required room"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyPreferred
argument_list|)
argument_list|,
literal|"Strongly preferred room"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sPreferred
argument_list|)
argument_list|,
literal|"Preferred room"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
argument_list|,
literal|"No room preference"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sDiscouraged
argument_list|)
argument_list|,
literal|"Discouraged room"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
argument_list|,
literal|"Strongly discouraged room"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
argument_list|,
literal|"Prohibited room"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|iForm
operator|.
name|getBackground
argument_list|()
operator|==
name|sBgInstructorConfs
condition|)
block|{
name|addLegendRow
argument_list|(
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
argument_list|,
literal|"No instructor conflict"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sDiscouraged
argument_list|)
argument_list|,
literal|"One or more instructor back-to-back conflicts"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
argument_list|,
literal|"One or more instructor three or more exams a day conflicts"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
argument_list|,
literal|"One or more instructor direct conflicts"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|iForm
operator|.
name|getBackground
argument_list|()
operator|==
name|sBgStudentConfs
condition|)
block|{
name|addLegendRow
argument_list|(
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
argument_list|,
literal|"No student conflict"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sDiscouraged
argument_list|)
argument_list|,
literal|"One or more student back-to-back conflicts"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
argument_list|,
literal|"One or more student three or more exams a day student conflicts"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
argument_list|,
literal|"One or more student direct conflicts"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|iForm
operator|.
name|getBackground
argument_list|()
operator|==
name|sBgDirectInstructorConfs
condition|)
block|{
for|for
control|(
name|int
name|nrConflicts
init|=
literal|0
init|;
name|nrConflicts
operator|<=
literal|6
condition|;
name|nrConflicts
operator|++
control|)
block|{
name|String
name|color
init|=
name|lessConflicts2color
argument_list|(
name|nrConflicts
argument_list|)
decl_stmt|;
name|addLegendRow
argument_list|(
name|color
argument_list|,
literal|""
operator|+
name|nrConflicts
operator|+
literal|" "
operator|+
operator|(
name|nrConflicts
operator|==
literal|6
condition|?
literal|"or more "
else|:
literal|""
operator|)
operator|+
literal|"instructor direct conflicts"
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|iForm
operator|.
name|getBackground
argument_list|()
operator|==
name|sBgMoreThanTwoADayInstructorConfs
condition|)
block|{
for|for
control|(
name|int
name|nrConflicts
init|=
literal|0
init|;
name|nrConflicts
operator|<=
literal|15
condition|;
name|nrConflicts
operator|++
control|)
block|{
name|String
name|color
init|=
name|conflicts2color
argument_list|(
name|nrConflicts
argument_list|)
decl_stmt|;
name|addLegendRow
argument_list|(
name|color
argument_list|,
literal|""
operator|+
name|nrConflicts
operator|+
literal|" "
operator|+
operator|(
name|nrConflicts
operator|==
literal|15
condition|?
literal|"or more "
else|:
literal|""
operator|)
operator|+
literal|"instructor more than two exams a day conflicts"
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|iForm
operator|.
name|getBackground
argument_list|()
operator|==
name|sBgBackToBackInstructorConfs
condition|)
block|{
for|for
control|(
name|int
name|nrConflicts
init|=
literal|0
init|;
name|nrConflicts
operator|<=
literal|15
condition|;
name|nrConflicts
operator|++
control|)
block|{
name|String
name|color
init|=
name|conflicts2color
argument_list|(
name|nrConflicts
argument_list|)
decl_stmt|;
name|addLegendRow
argument_list|(
name|color
argument_list|,
literal|""
operator|+
name|nrConflicts
operator|+
literal|" "
operator|+
operator|(
name|nrConflicts
operator|==
literal|15
condition|?
literal|"or more "
else|:
literal|""
operator|)
operator|+
literal|"instructor back to back conflicts"
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|iForm
operator|.
name|getBackground
argument_list|()
operator|==
name|sBgDirectStudentConfs
condition|)
block|{
for|for
control|(
name|int
name|nrConflicts
init|=
literal|0
init|;
name|nrConflicts
operator|<=
literal|6
condition|;
name|nrConflicts
operator|++
control|)
block|{
name|String
name|color
init|=
name|lessConflicts2color
argument_list|(
name|nrConflicts
argument_list|)
decl_stmt|;
name|addLegendRow
argument_list|(
name|color
argument_list|,
literal|""
operator|+
name|nrConflicts
operator|+
literal|" "
operator|+
operator|(
name|nrConflicts
operator|==
literal|6
condition|?
literal|"or more "
else|:
literal|""
operator|)
operator|+
literal|"student direct conflicts"
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|iForm
operator|.
name|getBackground
argument_list|()
operator|==
name|sBgMoreThanTwoADayStudentConfs
condition|)
block|{
for|for
control|(
name|int
name|nrConflicts
init|=
literal|0
init|;
name|nrConflicts
operator|<=
literal|15
condition|;
name|nrConflicts
operator|++
control|)
block|{
name|String
name|color
init|=
name|conflicts2color
argument_list|(
name|nrConflicts
argument_list|)
decl_stmt|;
name|addLegendRow
argument_list|(
name|color
argument_list|,
literal|""
operator|+
name|nrConflicts
operator|+
literal|" "
operator|+
operator|(
name|nrConflicts
operator|==
literal|15
condition|?
literal|"or more "
else|:
literal|""
operator|)
operator|+
literal|"student more than two exams a day conflicts"
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|iForm
operator|.
name|getBackground
argument_list|()
operator|==
name|sBgBackToBackStudentConfs
condition|)
block|{
for|for
control|(
name|int
name|nrConflicts
init|=
literal|0
init|;
name|nrConflicts
operator|<=
literal|15
condition|;
name|nrConflicts
operator|++
control|)
block|{
name|String
name|color
init|=
name|conflicts2color
argument_list|(
name|nrConflicts
argument_list|)
decl_stmt|;
name|addLegendRow
argument_list|(
name|color
argument_list|,
literal|""
operator|+
name|nrConflicts
operator|+
literal|" "
operator|+
operator|(
name|nrConflicts
operator|==
literal|15
condition|?
literal|"or more "
else|:
literal|""
operator|)
operator|+
literal|"student back to back conflicts"
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|iForm
operator|.
name|getBackground
argument_list|()
operator|==
name|sBgDistPref
condition|)
block|{
name|addLegendRow
argument_list|(
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
argument_list|,
literal|"No violated constraint<i>(distance=0)</i>"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sDiscouraged
argument_list|)
argument_list|,
literal|"Discouraged/preferred constraint violated"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
argument_list|,
literal|"Strongly discouraged/preferred constraint violated</i>"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
argument_list|,
literal|"Required/prohibited constraint violated</i>"
argument_list|)
expr_stmt|;
block|}
name|PdfPCell
name|c
init|=
name|createCellNoBorder
argument_list|()
decl_stmt|;
name|c
operator|.
name|setColspan
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
literal|"Free times:"
argument_list|)
expr_stmt|;
name|c
operator|.
name|setHorizontalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|sBgColorNotAvailable
argument_list|,
literal|"Period not available"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iForm
operator|.
name|getBgPreferences
argument_list|()
operator|&&
name|iForm
operator|.
name|getBackground
argument_list|()
operator|==
name|sBgPeriodPref
condition|)
block|{
name|addLegendRow
argument_list|(
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyPreferred
argument_list|)
argument_list|,
literal|"Strongly preferred period"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sPreferred
argument_list|)
argument_list|,
literal|"Preferred period"
argument_list|)
expr_stmt|;
block|}
name|addLegendRow
argument_list|(
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
argument_list|,
literal|"No period preference"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iForm
operator|.
name|getBgPreferences
argument_list|()
operator|&&
name|iForm
operator|.
name|getBackground
argument_list|()
operator|==
name|sBgPeriodPref
condition|)
block|{
name|addLegendRow
argument_list|(
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sDiscouraged
argument_list|)
argument_list|,
literal|"Discouraged period"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
argument_list|,
literal|"Strongly discouraged period"
argument_list|)
expr_stmt|;
name|addLegendRow
argument_list|(
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
argument_list|,
literal|"Prohibited period"
argument_list|)
expr_stmt|;
block|}
name|iDocument
operator|.
name|add
argument_list|(
name|iPdfTable
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

