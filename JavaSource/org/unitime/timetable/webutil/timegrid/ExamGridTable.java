begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.1 (University Timetabling Application)  * Copyright (C) 2008, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|timegrid
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|jsp
operator|.
name|JspWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|Web
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|ExamGridForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|RoomAvailabilityInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|RoomAvailabilityInterface
operator|.
name|TimeBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|WebSolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ExamSolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignmentInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamRoomInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamInfo
operator|.
name|ExamInstructorInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|RoomAvailability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|timegrid
operator|.
name|ExamGridTable
operator|.
name|ExamGridModel
operator|.
name|ExamGridCell
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ExamGridTable
block|{
specifier|public
specifier|static
name|SimpleDateFormat
name|sDF
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"EEE MM/dd"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sResourceRoom
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sResourceInstructor
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sResourceSubject
init|=
literal|2
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|sResources
init|=
operator|new
name|String
index|[]
block|{
literal|"Room"
block|,
literal|"Instructor"
block|,
literal|"Subject Area"
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sBgNone
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sBgStudentConfs
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sBgDirectStudentConfs
init|=
literal|2
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sBgMoreThanTwoADayStudentConfs
init|=
literal|3
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sBgBackToBackStudentConfs
init|=
literal|4
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sBgInstructorConfs
init|=
literal|5
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sBgDirectInstructorConfs
init|=
literal|6
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sBgMoreThanTwoADayInstructorConfs
init|=
literal|7
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sBgBackToBackInstructorConfs
init|=
literal|8
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sBgPeriodPref
init|=
literal|9
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sBgRoomPref
init|=
literal|10
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sBgDistPref
init|=
literal|11
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|sBackgrounds
init|=
operator|new
name|String
index|[]
block|{
literal|"No Background"
block|,
literal|"Student Conflicts"
block|,
literal|"Student Direct Conflicts"
block|,
literal|"Student>2 A Day Conlicts"
block|,
literal|"Student Back-To-Back Conlicts"
block|,
literal|"Instructor Conflicts"
block|,
literal|"Instructor Direct Conflicts"
block|,
literal|"Instructor>2 A Day Conlicts"
block|,
literal|"Instructor Back-To-Back Conlicts"
block|,
literal|"Period Preferences"
block|,
literal|"Room Preferences"
block|,
literal|"Distribution Preferences"
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sDispModeInRowHorizontal
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sDispModeInRowVertical
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sDispModePerDayHorizontal
init|=
literal|2
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sDispModePerDayVertical
init|=
literal|3
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sDispModePerWeekHorizontal
init|=
literal|4
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sDispModePerWeekVertical
init|=
literal|5
decl_stmt|;
specifier|public
specifier|static
name|String
index|[]
name|sDispModes
init|=
operator|new
name|String
index|[]
block|{
literal|"In Row [horizontal]"
block|,
literal|"In Row [vertical]"
block|,
literal|"Per Day [horizontal]"
block|,
literal|"Per Day [vertical]"
block|,
literal|"Per Week [horizontal]"
block|,
literal|"Per Week [vertical]"
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sOrderByNameAsc
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sOrderByNameDesc
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sOrderBySizeAsc
init|=
literal|2
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|sOrderBySizeDesc
init|=
literal|3
decl_stmt|;
specifier|public
specifier|static
name|String
index|[]
name|sOrders
init|=
operator|new
name|String
index|[]
block|{
literal|"name [asc]"
block|,
literal|"name [desc]"
block|,
literal|"size [asc]"
block|,
literal|"size [desc]"
block|}
decl_stmt|;
specifier|public
specifier|static
name|String
name|sBgColorEmpty
init|=
literal|"rgb(255,255,255)"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sBgColorRequired
init|=
literal|"rgb(80,80,200)"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sBgColorStronglyPreferred
init|=
literal|"rgb(40,180,60)"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sBgColorPreferred
init|=
literal|"rgb(170,240,60)"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sBgColorNeutral
init|=
literal|"rgb(240,240,240)"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sBgColorDiscouraged
init|=
literal|"rgb(240,210,60)"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sBgColorStronglyDiscouraged
init|=
literal|"rgb(240,120,60)"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sBgColorProhibited
init|=
literal|"rgb(220,50,40)"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sBgColorNotAvailable
init|=
literal|"rgb(200,200,200)"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sBgColorNotAvailableButAssigned
init|=
name|sBgColorProhibited
decl_stmt|;
name|Vector
argument_list|<
name|ExamGridModel
argument_list|>
name|iModels
init|=
operator|new
name|Vector
argument_list|<
name|ExamGridModel
argument_list|>
argument_list|()
decl_stmt|;
name|ExamGridForm
name|iForm
init|=
literal|null
decl_stmt|;
name|TreeSet
argument_list|<
name|Integer
argument_list|>
name|iDates
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|Integer
argument_list|>
name|iStartsSlots
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Integer
argument_list|,
name|Hashtable
argument_list|<
name|Integer
argument_list|,
name|ExamPeriod
argument_list|>
argument_list|>
name|iPeriods
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
specifier|public
name|ExamGridTable
parameter_list|(
name|ExamGridForm
name|form
parameter_list|,
name|HttpSession
name|session
parameter_list|)
throws|throws
name|Exception
block|{
name|iForm
operator|=
name|form
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iForm
operator|.
name|getPeriods
argument_list|(
name|iForm
operator|.
name|getExamType
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamPeriod
name|period
init|=
operator|(
name|ExamPeriod
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|iDates
operator|.
name|add
argument_list|(
name|period
operator|.
name|getDateOffset
argument_list|()
argument_list|)
expr_stmt|;
name|iStartsSlots
operator|.
name|add
argument_list|(
name|period
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|Integer
argument_list|,
name|ExamPeriod
argument_list|>
name|periodsThisDay
init|=
name|iPeriods
operator|.
name|get
argument_list|(
name|period
operator|.
name|getDateOffset
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|periodsThisDay
operator|==
literal|null
condition|)
block|{
name|periodsThisDay
operator|=
operator|new
name|Hashtable
argument_list|<
name|Integer
argument_list|,
name|ExamPeriod
argument_list|>
argument_list|()
expr_stmt|;
name|iPeriods
operator|.
name|put
argument_list|(
name|period
operator|.
name|getDateOffset
argument_list|()
argument_list|,
name|periodsThisDay
argument_list|)
expr_stmt|;
block|}
name|periodsThisDay
operator|.
name|put
argument_list|(
name|period
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|period
argument_list|)
expr_stmt|;
block|}
name|ExamSolverProxy
name|solver
init|=
name|WebSolver
operator|.
name|getExamSolver
argument_list|(
name|session
argument_list|)
decl_stmt|;
if|if
condition|(
name|iForm
operator|.
name|getResource
argument_list|()
operator|==
name|sResourceRoom
condition|)
block|{
name|Date
index|[]
name|bounds
init|=
name|ExamPeriod
operator|.
name|getBounds
argument_list|(
name|form
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|form
operator|.
name|getExamBeginDate
argument_list|()
argument_list|,
name|form
operator|.
name|getExamType
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|Location
operator|.
name|findAllExamLocations
argument_list|(
name|iForm
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|iForm
operator|.
name|getExamType
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|location
init|=
operator|(
name|Location
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|match
argument_list|(
name|location
operator|.
name|getLabel
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|solver
operator|!=
literal|null
operator|&&
name|solver
operator|.
name|getExamType
argument_list|()
operator|==
name|iForm
operator|.
name|getExamType
argument_list|()
condition|)
name|iModels
operator|.
name|add
argument_list|(
operator|new
name|RoomExamGridModel
argument_list|(
name|location
argument_list|,
name|solver
operator|.
name|getAssignedExamsOfRoom
argument_list|(
name|location
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|,
name|bounds
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|iModels
operator|.
name|add
argument_list|(
operator|new
name|RoomExamGridModel
argument_list|(
name|location
argument_list|,
name|Exam
operator|.
name|findAssignedExamsOfLocation
argument_list|(
name|location
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|iForm
operator|.
name|getExamType
argument_list|()
argument_list|)
argument_list|,
name|bounds
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|iForm
operator|.
name|getResource
argument_list|()
operator|==
name|sResourceInstructor
condition|)
block|{
name|String
name|instructorNameFormat
init|=
name|Settings
operator|.
name|getSettingValue
argument_list|(
name|Web
operator|.
name|getUser
argument_list|(
name|session
argument_list|)
argument_list|,
name|Constants
operator|.
name|SETTINGS_INSTRUCTOR_NAME_FORMAT
argument_list|)
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|ExamGridModel
argument_list|>
name|models
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|ExamGridModel
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|DepartmentalInstructor
operator|.
name|findAllExamInstructors
argument_list|(
name|iForm
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|iForm
operator|.
name|getExamType
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentalInstructor
name|instructor
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|match
argument_list|(
name|instructor
operator|.
name|getName
argument_list|(
name|instructorNameFormat
argument_list|)
argument_list|)
condition|)
block|{
name|Collection
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|assignments
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|solver
operator|!=
literal|null
operator|&&
name|solver
operator|.
name|getExamType
argument_list|()
operator|==
name|iForm
operator|.
name|getExamType
argument_list|()
condition|)
name|assignments
operator|=
name|solver
operator|.
name|getAssignedExamsOfInstructor
argument_list|(
name|instructor
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|assignments
operator|=
name|Exam
operator|.
name|findAssignedExamsOfInstructor
argument_list|(
name|instructor
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|iForm
operator|.
name|getExamType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|iModels
operator|.
name|add
argument_list|(
operator|new
name|ExamGridModel
argument_list|(
name|instructor
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|instructor
operator|.
name|getName
argument_list|(
name|instructorNameFormat
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
name|assignments
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ExamGridModel
name|m
init|=
name|models
operator|.
name|get
argument_list|(
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
name|m
operator|=
operator|new
name|ExamGridModel
argument_list|(
name|instructor
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|instructor
operator|.
name|getName
argument_list|(
name|instructorNameFormat
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
name|assignments
argument_list|)
expr_stmt|;
name|iModels
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|models
operator|.
name|put
argument_list|(
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
else|else
name|m
operator|.
name|addAssignments
argument_list|(
name|assignments
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|else if
condition|(
name|iForm
operator|.
name|getResource
argument_list|()
operator|==
name|sResourceSubject
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|SubjectArea
operator|.
name|getSubjectAreaList
argument_list|(
name|iForm
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SubjectArea
name|subject
init|=
operator|(
name|SubjectArea
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|match
argument_list|(
name|subject
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|solver
operator|!=
literal|null
operator|&&
name|solver
operator|.
name|getExamType
argument_list|()
operator|==
name|iForm
operator|.
name|getExamType
argument_list|()
condition|)
name|iModels
operator|.
name|add
argument_list|(
operator|new
name|ExamGridModel
argument_list|(
name|subject
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|subject
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
name|solver
operator|.
name|getAssignedExams
argument_list|(
name|subject
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|iModels
operator|.
name|add
argument_list|(
operator|new
name|ExamGridModel
argument_list|(
name|subject
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|subject
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
name|Exam
operator|.
name|findAssignedExams
argument_list|(
name|iForm
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|subject
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|iForm
operator|.
name|getExamType
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|iModels
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ExamPeriod
name|getPeriod
parameter_list|(
name|int
name|day
parameter_list|,
name|Integer
name|time
parameter_list|)
block|{
if|if
condition|(
name|time
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Hashtable
argument_list|<
name|Integer
argument_list|,
name|ExamPeriod
argument_list|>
name|periods
init|=
name|iPeriods
operator|.
name|get
argument_list|(
name|day
argument_list|)
decl_stmt|;
return|return
operator|(
name|periods
operator|==
literal|null
condition|?
literal|null
else|:
name|periods
operator|.
name|get
argument_list|(
name|time
argument_list|)
operator|)
return|;
block|}
specifier|public
name|void
name|printToHtml
parameter_list|(
name|JspWriter
name|jsp
parameter_list|)
block|{
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
name|jsp
argument_list|)
decl_stmt|;
name|printToHtml
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|getMaxIdx
parameter_list|(
name|ExamGridModel
name|model
parameter_list|,
name|int
name|startDay
parameter_list|,
name|int
name|endDay
parameter_list|,
name|int
name|firstSlot
parameter_list|,
name|int
name|lastSlot
parameter_list|)
block|{
name|int
name|max
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iForm
operator|.
name|getPeriods
argument_list|(
name|iForm
operator|.
name|getExamType
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamPeriod
name|period
init|=
operator|(
name|ExamPeriod
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|period
operator|.
name|getDateOffset
argument_list|()
operator|<
name|startDay
operator|||
name|period
operator|.
name|getDateOffset
argument_list|()
operator|>
name|endDay
condition|)
continue|continue;
if|if
condition|(
name|period
operator|.
name|getStartSlot
argument_list|()
operator|<
name|firstSlot
operator|||
name|period
operator|.
name|getStartSlot
argument_list|()
operator|>
name|lastSlot
condition|)
continue|continue;
name|max
operator|=
name|Math
operator|.
name|max
argument_list|(
name|max
argument_list|,
name|model
operator|.
name|getAssignments
argument_list|(
name|period
argument_list|)
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|max
return|;
block|}
specifier|public
name|int
name|getMaxIdx
parameter_list|(
name|ExamGridModel
name|model
parameter_list|,
name|int
name|dayOfWeek
parameter_list|,
name|int
name|firstSlot
parameter_list|,
name|int
name|lastSlot
parameter_list|)
block|{
name|int
name|max
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iForm
operator|.
name|getPeriods
argument_list|(
name|iForm
operator|.
name|getExamType
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamPeriod
name|period
init|=
operator|(
name|ExamPeriod
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|getDayOfWeek
argument_list|(
name|period
operator|.
name|getDateOffset
argument_list|()
argument_list|)
operator|!=
name|dayOfWeek
condition|)
continue|continue;
if|if
condition|(
name|period
operator|.
name|getStartSlot
argument_list|()
operator|<
name|firstSlot
operator|||
name|period
operator|.
name|getStartSlot
argument_list|()
operator|>
name|lastSlot
condition|)
continue|continue;
name|max
operator|=
name|Math
operator|.
name|max
argument_list|(
name|max
argument_list|,
name|model
operator|.
name|getAssignments
argument_list|(
name|period
argument_list|)
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|max
return|;
block|}
specifier|public
name|int
name|getMaxIdx
parameter_list|(
name|ExamGridModel
name|model
parameter_list|,
name|int
name|week
parameter_list|,
name|int
name|slot
parameter_list|)
block|{
name|int
name|max
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iForm
operator|.
name|getPeriods
argument_list|(
name|iForm
operator|.
name|getExamType
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamPeriod
name|period
init|=
operator|(
name|ExamPeriod
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|getWeek
argument_list|(
name|period
operator|.
name|getDateOffset
argument_list|()
argument_list|)
operator|!=
name|week
condition|)
continue|continue;
if|if
condition|(
name|period
operator|.
name|getStartSlot
argument_list|()
operator|!=
name|slot
condition|)
continue|continue;
name|max
operator|=
name|Math
operator|.
name|max
argument_list|(
name|max
argument_list|,
name|model
operator|.
name|getAssignments
argument_list|(
name|period
argument_list|)
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|max
return|;
block|}
specifier|public
name|int
name|getMaxIdx
parameter_list|(
name|int
name|day
parameter_list|,
name|int
name|time
parameter_list|)
block|{
name|int
name|max
init|=
literal|0
decl_stmt|;
name|ExamPeriod
name|period
init|=
name|getPeriod
argument_list|(
name|day
argument_list|,
name|time
argument_list|)
decl_stmt|;
if|if
condition|(
name|period
operator|==
literal|null
condition|)
return|return
name|max
return|;
for|for
control|(
name|ExamGridModel
name|model
range|:
name|models
argument_list|()
control|)
block|{
name|max
operator|=
name|Math
operator|.
name|max
argument_list|(
name|max
argument_list|,
name|model
operator|.
name|getAssignments
argument_list|(
name|period
argument_list|)
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|max
return|;
block|}
specifier|public
name|String
name|getDayName
parameter_list|(
name|int
name|day
parameter_list|)
block|{
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|c
operator|.
name|setTime
argument_list|(
name|iForm
operator|.
name|getExamBeginDate
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|day
argument_list|)
expr_stmt|;
return|return
name|sDF
operator|.
name|format
argument_list|(
name|c
operator|.
name|getTime
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|getDayOfWeekName
parameter_list|(
name|int
name|dayOfWeek
parameter_list|)
block|{
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|,
name|dayOfWeek
argument_list|)
expr_stmt|;
return|return
operator|new
name|SimpleDateFormat
argument_list|(
literal|"EEE"
argument_list|)
operator|.
name|format
argument_list|(
name|c
operator|.
name|getTime
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|getWeekName
parameter_list|(
name|int
name|week
parameter_list|)
block|{
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|c
operator|.
name|setTime
argument_list|(
name|iForm
operator|.
name|getSessionBeginDate
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setLenient
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|c
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|WEEK_OF_YEAR
argument_list|,
name|week
operator|-
literal|1
argument_list|)
expr_stmt|;
name|SimpleDateFormat
name|df
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd"
argument_list|)
decl_stmt|;
while|while
condition|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
operator|!=
name|Calendar
operator|.
name|MONDAY
condition|)
name|c
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|String
name|first
init|=
name|df
operator|.
name|format
argument_list|(
name|c
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
operator|!=
name|Calendar
operator|.
name|SUNDAY
condition|)
name|c
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|String
name|end
init|=
name|df
operator|.
name|format
argument_list|(
name|c
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
return|return
literal|"Week "
operator|+
name|week
operator|+
literal|"<br>"
operator|+
name|first
operator|+
literal|" - "
operator|+
name|end
return|;
block|}
specifier|public
name|String
name|getSlotName
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
return|return
name|Constants
operator|.
name|toTime
argument_list|(
name|slot
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
argument_list|)
return|;
block|}
specifier|public
name|void
name|printHeaderCell
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|vertical
parameter_list|,
name|boolean
name|eod
parameter_list|,
name|boolean
name|eol
parameter_list|)
block|{
name|String
name|style
init|=
literal|"TimetableHead"
operator|+
literal|"Cell"
operator|+
operator|(
name|eol
condition|?
literal|"EOL"
else|:
name|eod
condition|?
literal|"EOD"
else|:
literal|""
operator|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<th nowrap width='130' height='40' class='"
operator|+
name|style
operator|+
literal|"'>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|name
operator|==
literal|null
condition|?
literal|""
else|:
name|name
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</th>"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isVertical
parameter_list|()
block|{
return|return
operator|(
name|iForm
operator|.
name|getDispMode
argument_list|()
operator|==
name|sDispModeInRowVertical
operator|||
name|iForm
operator|.
name|getDispMode
argument_list|()
operator|==
name|sDispModePerDayVertical
operator|||
name|iForm
operator|.
name|getDispMode
argument_list|()
operator|==
name|sDispModePerWeekVertical
operator|)
return|;
block|}
specifier|public
name|void
name|printHeader
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<tr valign='top'>"
argument_list|)
expr_stmt|;
name|boolean
name|vertical
init|=
name|isVertical
argument_list|()
decl_stmt|;
name|printHeaderCell
argument_list|(
name|out
argument_list|,
name|name
argument_list|,
name|vertical
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|Integer
argument_list|>
name|days
init|=
name|days
argument_list|()
decl_stmt|,
name|slots
init|=
name|slots
argument_list|()
decl_stmt|,
name|weeks
init|=
name|weeks
argument_list|()
decl_stmt|,
name|daysOfWeek
init|=
name|daysOfWeek
argument_list|()
decl_stmt|;
if|if
condition|(
name|iForm
operator|.
name|getDispMode
argument_list|()
operator|==
name|sDispModeInRowHorizontal
condition|)
block|{
for|for
control|(
name|Integer
name|day
range|:
name|days
control|)
block|{
for|for
control|(
name|Integer
name|slot
range|:
name|slots
argument_list|()
control|)
block|{
name|boolean
name|eod
init|=
operator|(
name|slot
operator|==
name|slots
operator|.
name|last
argument_list|()
operator|)
decl_stmt|;
name|boolean
name|eol
init|=
operator|(
name|eod
operator|&&
name|day
operator|==
name|days
operator|.
name|last
argument_list|()
operator|)
decl_stmt|;
name|printHeaderCell
argument_list|(
name|out
argument_list|,
name|getDayName
argument_list|(
name|day
argument_list|)
operator|+
literal|"<br>"
operator|+
name|getSlotName
argument_list|(
name|slot
argument_list|)
argument_list|,
name|vertical
argument_list|,
name|eod
argument_list|,
name|eol
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|iForm
operator|.
name|getDispMode
argument_list|()
operator|==
name|sDispModeInRowVertical
condition|)
block|{
for|for
control|(
name|ExamGridModel
name|m
range|:
name|models
argument_list|()
control|)
block|{
name|boolean
name|eol
init|=
name|m
operator|.
name|equals
argument_list|(
name|models
argument_list|()
operator|.
name|lastElement
argument_list|()
argument_list|)
decl_stmt|;
name|printHeaderCell
argument_list|(
name|out
argument_list|,
name|m
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|m
operator|.
name|getSize
argument_list|()
operator|>
literal|0
condition|?
literal|" ("
operator|+
name|m
operator|.
name|getSize
argument_list|()
operator|+
literal|")"
else|:
literal|""
operator|)
argument_list|,
name|vertical
argument_list|,
literal|false
argument_list|,
name|eol
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|iForm
operator|.
name|getDispMode
argument_list|()
operator|==
name|sDispModePerDayHorizontal
condition|)
block|{
for|for
control|(
name|Integer
name|slot
range|:
name|slots
argument_list|()
control|)
block|{
name|boolean
name|eol
init|=
operator|(
name|slot
operator|==
name|slots
operator|.
name|last
argument_list|()
operator|)
decl_stmt|;
name|printHeaderCell
argument_list|(
name|out
argument_list|,
name|getSlotName
argument_list|(
name|slot
argument_list|)
argument_list|,
name|vertical
argument_list|,
literal|false
argument_list|,
name|eol
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|iForm
operator|.
name|getDispMode
argument_list|()
operator|==
name|sDispModePerDayVertical
condition|)
block|{
for|for
control|(
name|Integer
name|day
range|:
name|days
control|)
block|{
name|boolean
name|eol
init|=
operator|(
name|day
operator|==
name|days
operator|.
name|last
argument_list|()
operator|)
decl_stmt|;
name|printHeaderCell
argument_list|(
name|out
argument_list|,
name|getDayName
argument_list|(
name|day
argument_list|)
argument_list|,
name|vertical
argument_list|,
literal|false
argument_list|,
name|eol
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|iForm
operator|.
name|getDispMode
argument_list|()
operator|==
name|sDispModePerWeekHorizontal
condition|)
block|{
for|for
control|(
name|Integer
name|week
range|:
name|weeks
control|)
block|{
for|for
control|(
name|Integer
name|slot
range|:
name|slots
control|)
block|{
name|boolean
name|eod
init|=
operator|(
name|slot
operator|==
name|slots
operator|.
name|last
argument_list|()
operator|)
decl_stmt|;
name|boolean
name|eol
init|=
name|eod
operator|&&
operator|(
name|week
operator|==
name|weeks
operator|.
name|last
argument_list|()
operator|)
decl_stmt|;
name|printHeaderCell
argument_list|(
name|out
argument_list|,
name|getWeekName
argument_list|(
name|week
argument_list|)
operator|+
literal|"<br>"
operator|+
name|getSlotName
argument_list|(
name|slot
argument_list|)
argument_list|,
name|vertical
argument_list|,
name|eod
argument_list|,
name|eol
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|iForm
operator|.
name|getDispMode
argument_list|()
operator|==
name|sDispModePerWeekVertical
condition|)
block|{
for|for
control|(
name|Integer
name|dow
range|:
name|daysOfWeek
control|)
block|{
name|boolean
name|eol
init|=
operator|(
name|dow
operator|==
name|daysOfWeek
operator|.
name|last
argument_list|()
operator|)
decl_stmt|;
name|printHeaderCell
argument_list|(
name|out
argument_list|,
name|getDayOfWeekName
argument_list|(
name|dow
argument_list|)
argument_list|,
name|vertical
argument_list|,
literal|false
argument_list|,
name|eol
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|println
argument_list|(
literal|"</tr>"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|getMouseOverAndMouseOut
parameter_list|(
name|StringBuffer
name|onMouseOver
parameter_list|,
name|StringBuffer
name|onMouseOut
parameter_list|,
name|ExamGridCell
name|cell
parameter_list|,
name|String
name|bgColor
parameter_list|,
name|boolean
name|changeMouse
parameter_list|)
block|{
if|if
condition|(
name|cell
operator|==
literal|null
condition|)
return|return;
name|ExamAssignmentInfo
name|info
init|=
name|cell
operator|.
name|getInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
condition|)
return|return;
name|onMouseOver
operator|.
name|append
argument_list|(
literal|" onmouseover=\""
argument_list|)
expr_stmt|;
name|onMouseOut
operator|.
name|append
argument_list|(
literal|" onmouseout=\""
argument_list|)
expr_stmt|;
if|if
condition|(
name|iForm
operator|.
name|getResource
argument_list|()
operator|==
name|sResourceRoom
condition|)
block|{
for|for
control|(
name|ExamRoomInfo
name|room
range|:
name|info
operator|.
name|getRooms
argument_list|()
control|)
block|{
name|Long
name|roomId
init|=
name|room
operator|.
name|getLocationId
argument_list|()
decl_stmt|;
name|onMouseOver
operator|.
name|append
argument_list|(
literal|"if (document.getElementById('"
operator|+
name|info
operator|.
name|getExamId
argument_list|()
operator|+
literal|"."
operator|+
name|roomId
operator|+
literal|"')!=null) document.getElementById('"
operator|+
name|info
operator|.
name|getExamId
argument_list|()
operator|+
literal|"."
operator|+
name|roomId
operator|+
literal|"').style.backgroundColor='rgb(223,231,242)';"
argument_list|)
expr_stmt|;
name|onMouseOut
operator|.
name|append
argument_list|(
literal|"if (document.getElementById('"
operator|+
name|info
operator|.
name|getExamId
argument_list|()
operator|+
literal|"."
operator|+
name|roomId
operator|+
literal|"')!=null) document.getElementById('"
operator|+
name|info
operator|.
name|getExamId
argument_list|()
operator|+
literal|"."
operator|+
name|roomId
operator|+
literal|"').style.backgroundColor='"
operator|+
operator|(
name|bgColor
operator|==
literal|null
condition|?
literal|"transparent"
else|:
name|bgColor
operator|)
operator|+
literal|"';"
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|iForm
operator|.
name|getResource
argument_list|()
operator|==
name|sResourceInstructor
condition|)
block|{
for|for
control|(
name|Enumeration
name|e
init|=
name|info
operator|.
name|getInstructors
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Long
name|instructorId
init|=
operator|(
operator|(
name|ExamInstructorInfo
operator|)
name|e
operator|.
name|nextElement
argument_list|()
operator|)
operator|.
name|getId
argument_list|()
decl_stmt|;
name|onMouseOver
operator|.
name|append
argument_list|(
literal|"if (document.getElementById('"
operator|+
name|info
operator|.
name|getExamId
argument_list|()
operator|+
literal|"."
operator|+
name|instructorId
operator|+
literal|"')!=null) document.getElementById('"
operator|+
name|info
operator|.
name|getExamId
argument_list|()
operator|+
literal|"."
operator|+
name|instructorId
operator|+
literal|"').style.backgroundColor='rgb(223,231,242)';"
argument_list|)
expr_stmt|;
name|onMouseOut
operator|.
name|append
argument_list|(
literal|"if (document.getElementById('"
operator|+
name|info
operator|.
name|getExamId
argument_list|()
operator|+
literal|"."
operator|+
name|instructorId
operator|+
literal|"')!=null) document.getElementById('"
operator|+
name|info
operator|.
name|getExamId
argument_list|()
operator|+
literal|"."
operator|+
name|instructorId
operator|+
literal|"').style.backgroundColor='"
operator|+
operator|(
name|bgColor
operator|==
literal|null
condition|?
literal|"transparent"
else|:
name|bgColor
operator|)
operator|+
literal|"';"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|onMouseOver
operator|.
name|append
argument_list|(
literal|"if (document.getElementById('"
operator|+
name|info
operator|.
name|getExamId
argument_list|()
operator|+
literal|"')!=null) document.getElementById('"
operator|+
name|info
operator|.
name|getExamId
argument_list|()
operator|+
literal|"').style.backgroundColor='rgb(223,231,242)';"
argument_list|)
expr_stmt|;
name|onMouseOut
operator|.
name|append
argument_list|(
literal|"if (document.getElementById('"
operator|+
name|info
operator|.
name|getExamId
argument_list|()
operator|+
literal|"')!=null) document.getElementById('"
operator|+
name|info
operator|.
name|getExamId
argument_list|()
operator|+
literal|"').style.backgroundColor='"
operator|+
operator|(
name|bgColor
operator|==
literal|null
condition|?
literal|"transparent"
else|:
name|bgColor
operator|)
operator|+
literal|"';"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|changeMouse
condition|)
name|onMouseOver
operator|.
name|append
argument_list|(
literal|"this.style.cursor='hand';this.style.cursor='pointer';"
argument_list|)
expr_stmt|;
name|onMouseOver
operator|.
name|append
argument_list|(
literal|"\" "
argument_list|)
expr_stmt|;
name|onMouseOut
operator|.
name|append
argument_list|(
literal|"\" "
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getWeek
parameter_list|(
name|int
name|day
parameter_list|)
block|{
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|iForm
operator|.
name|getExamBeginDate
argument_list|()
argument_list|)
expr_stmt|;
name|cal
operator|.
name|setLenient
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|day
argument_list|)
expr_stmt|;
return|return
literal|1
operator|+
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|WEEK_OF_YEAR
argument_list|)
operator|-
name|iForm
operator|.
name|getSessionBeginWeek
argument_list|()
return|;
block|}
specifier|public
name|int
name|getDayOfWeek
parameter_list|(
name|int
name|day
parameter_list|)
block|{
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|iForm
operator|.
name|getExamBeginDate
argument_list|()
argument_list|)
expr_stmt|;
name|cal
operator|.
name|setLenient
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|day
argument_list|)
expr_stmt|;
return|return
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
return|;
block|}
specifier|public
name|int
name|getDay
parameter_list|(
name|int
name|week
parameter_list|,
name|int
name|dayOfWeek
parameter_list|)
block|{
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|c
operator|.
name|setTime
argument_list|(
name|iForm
operator|.
name|getSessionBeginDate
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setLenient
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|c
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|WEEK_OF_YEAR
argument_list|,
name|week
operator|-
literal|1
argument_list|)
expr_stmt|;
name|c
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|,
name|dayOfWeek
operator|-
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
argument_list|)
expr_stmt|;
name|Calendar
name|ec
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|ec
operator|.
name|setTime
argument_list|(
name|iForm
operator|.
name|getExamBeginDate
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|)
operator|-
name|ec
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|)
return|;
block|}
specifier|public
name|TreeSet
argument_list|<
name|Integer
argument_list|>
name|days
parameter_list|()
block|{
if|if
condition|(
name|iForm
operator|.
name|isAllDates
argument_list|(
name|iForm
operator|.
name|getExamType
argument_list|()
argument_list|)
condition|)
return|return
name|iDates
return|;
name|TreeSet
argument_list|<
name|Integer
argument_list|>
name|days
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|iForm
operator|.
name|getDate
argument_list|(
name|iForm
operator|.
name|getExamType
argument_list|()
argument_list|)
operator|>
literal|500
condition|)
block|{
for|for
control|(
name|Integer
name|day
range|:
name|iDates
control|)
block|{
if|if
condition|(
literal|1000
operator|+
name|getWeek
argument_list|(
name|day
argument_list|)
operator|==
name|iForm
operator|.
name|getDate
argument_list|(
name|iForm
operator|.
name|getExamType
argument_list|()
argument_list|)
condition|)
name|days
operator|.
name|add
argument_list|(
name|day
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|days
operator|.
name|add
argument_list|(
name|iForm
operator|.
name|getDate
argument_list|(
name|iForm
operator|.
name|getExamType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|days
return|;
block|}
specifier|public
name|TreeSet
argument_list|<
name|Integer
argument_list|>
name|daysOfWeek
parameter_list|()
block|{
name|TreeSet
argument_list|<
name|Integer
argument_list|>
name|daysOfWeek
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|day
range|:
name|days
argument_list|()
control|)
block|{
name|daysOfWeek
operator|.
name|add
argument_list|(
name|getDayOfWeek
argument_list|(
name|day
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|daysOfWeek
return|;
block|}
specifier|public
name|TreeSet
argument_list|<
name|Integer
argument_list|>
name|weeks
parameter_list|()
block|{
name|TreeSet
argument_list|<
name|Integer
argument_list|>
name|weeks
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|day
range|:
name|days
argument_list|()
control|)
block|{
name|weeks
operator|.
name|add
argument_list|(
name|getWeek
argument_list|(
name|day
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|weeks
return|;
block|}
specifier|public
name|TreeSet
argument_list|<
name|Integer
argument_list|>
name|days
parameter_list|(
name|int
name|week
parameter_list|)
block|{
name|TreeSet
argument_list|<
name|Integer
argument_list|>
name|days
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|day
range|:
name|days
argument_list|()
control|)
block|{
if|if
condition|(
name|getWeek
argument_list|(
name|day
argument_list|)
operator|==
name|week
condition|)
name|days
operator|.
name|add
argument_list|(
name|day
argument_list|)
expr_stmt|;
block|}
return|return
name|days
return|;
block|}
specifier|public
name|TreeSet
argument_list|<
name|Integer
argument_list|>
name|slots
parameter_list|()
block|{
name|TreeSet
argument_list|<
name|Integer
argument_list|>
name|slots
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|slot
range|:
name|iStartsSlots
control|)
block|{
if|if
condition|(
name|slot
operator|<
name|iForm
operator|.
name|getStartTime
argument_list|(
name|iForm
operator|.
name|getExamType
argument_list|()
argument_list|)
operator|||
name|slot
operator|>
name|iForm
operator|.
name|getEndTime
argument_list|(
name|iForm
operator|.
name|getExamType
argument_list|()
argument_list|)
condition|)
continue|continue;
name|slots
operator|.
name|add
argument_list|(
name|slot
argument_list|)
expr_stmt|;
block|}
return|return
name|slots
return|;
block|}
specifier|public
name|Integer
name|prev
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
name|Integer
name|prev
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Integer
name|s
range|:
name|iStartsSlots
control|)
block|{
if|if
condition|(
name|s
operator|<
name|iForm
operator|.
name|getStartTime
argument_list|(
name|iForm
operator|.
name|getExamType
argument_list|()
argument_list|)
operator|||
name|s
operator|>=
name|slot
condition|)
continue|continue;
if|if
condition|(
name|prev
operator|==
literal|null
condition|)
name|prev
operator|=
name|s
expr_stmt|;
else|else
name|prev
operator|=
name|Math
operator|.
name|max
argument_list|(
name|prev
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
return|return
name|prev
return|;
block|}
specifier|public
name|Integer
name|next
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
name|Integer
name|next
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Integer
name|s
range|:
name|iStartsSlots
control|)
block|{
if|if
condition|(
name|s
operator|<=
name|slot
operator|||
name|s
operator|>
name|iForm
operator|.
name|getEndTime
argument_list|(
name|iForm
operator|.
name|getExamType
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|next
operator|==
literal|null
condition|)
name|next
operator|=
name|s
expr_stmt|;
else|else
name|next
operator|=
name|Math
operator|.
name|min
argument_list|(
name|next
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
return|return
name|next
return|;
block|}
specifier|public
name|void
name|printCell
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|ExamGridModel
name|model
parameter_list|,
name|int
name|day
parameter_list|,
name|int
name|slot
parameter_list|,
name|int
name|idx
parameter_list|,
name|int
name|maxIdx
parameter_list|,
name|boolean
name|head
parameter_list|,
name|boolean
name|vertical
parameter_list|,
name|boolean
name|in
parameter_list|,
name|boolean
name|eod
parameter_list|,
name|boolean
name|eol
parameter_list|)
block|{
name|ExamPeriod
name|period
init|=
name|getPeriod
argument_list|(
name|day
argument_list|,
name|slot
argument_list|)
decl_stmt|;
name|ExamGridCell
name|cell
init|=
name|model
operator|.
name|getAssignment
argument_list|(
name|period
argument_list|,
name|idx
argument_list|)
decl_stmt|;
name|String
name|style
init|=
literal|"Timetable"
operator|+
operator|(
name|head
operator|||
operator|(
operator|!
name|in
operator|&&
operator|!
name|vertical
operator|)
condition|?
literal|"Head"
else|:
literal|""
operator|)
operator|+
literal|"Cell"
operator|+
operator|(
operator|!
name|head
operator|&&
name|in
operator|&&
name|vertical
condition|?
literal|"In"
else|:
literal|""
operator|)
operator|+
operator|(
name|vertical
condition|?
literal|"Vertical"
else|:
literal|""
operator|)
operator|+
operator|(
name|eol
condition|?
literal|"EOL"
else|:
name|eod
condition|?
literal|"EOD"
else|:
literal|""
operator|)
decl_stmt|;
if|if
condition|(
name|cell
operator|==
literal|null
condition|)
block|{
name|String
name|bgColor
init|=
name|model
operator|.
name|getBackground
argument_list|(
name|period
argument_list|)
decl_stmt|;
if|if
condition|(
name|bgColor
operator|==
literal|null
operator|&&
operator|!
name|model
operator|.
name|isAvailable
argument_list|(
name|period
argument_list|)
condition|)
name|bgColor
operator|=
name|sBgColorNotAvailable
expr_stmt|;
if|if
condition|(
name|period
operator|==
literal|null
condition|)
name|bgColor
operator|=
name|sBgColorNotAvailable
expr_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
operator|&&
name|model
operator|.
name|getAssignment
argument_list|(
name|day
argument_list|,
name|slot
argument_list|,
name|idx
operator|-
literal|1
argument_list|)
operator|==
literal|null
condition|)
return|return;
name|int
name|rowspan
init|=
literal|1
operator|+
name|maxIdx
operator|-
name|idx
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td rowspan='"
operator|+
name|rowspan
operator|+
literal|"' class='"
operator|+
name|style
operator|+
literal|"' "
operator|+
operator|(
name|bgColor
operator|==
literal|null
condition|?
literal|""
else|:
literal|"style='background-color:"
operator|+
name|bgColor
operator|+
literal|"'"
operator|)
operator|+
literal|">&nbsp;</td>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|bgColor
init|=
name|cell
operator|.
name|getBackground
argument_list|()
decl_stmt|;
if|if
condition|(
name|iForm
operator|.
name|getBackground
argument_list|()
operator|==
name|sBgNone
operator|&&
operator|!
name|sBgColorNotAvailable
operator|.
name|equals
argument_list|(
name|bgColor
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|model
operator|.
name|isAvailable
argument_list|(
name|period
argument_list|)
condition|)
name|bgColor
operator|=
name|sBgColorNotAvailableButAssigned
expr_stmt|;
block|}
name|StringBuffer
name|onMouseOver
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|StringBuffer
name|onMouseOut
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|getMouseOverAndMouseOut
argument_list|(
name|onMouseOver
argument_list|,
name|onMouseOut
argument_list|,
name|cell
argument_list|,
name|bgColor
argument_list|,
name|cell
operator|.
name|getOnClick
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td nowrap "
operator|+
operator|(
name|bgColor
operator|==
literal|null
condition|?
literal|""
else|:
literal|"style='background-color:"
operator|+
name|bgColor
operator|+
literal|"' "
operator|)
operator|+
literal|" class='"
operator|+
name|style
operator|+
literal|"' align='center' "
operator|+
operator|(
name|cell
operator|.
name|getOnClick
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|"onclick=\""
operator|+
name|cell
operator|.
name|getOnClick
argument_list|()
operator|+
literal|"\" "
operator|)
operator|+
operator|(
name|cell
operator|.
name|getId
argument_list|()
operator|!=
literal|null
condition|?
literal|"id='"
operator|+
name|cell
operator|.
name|getId
argument_list|()
operator|+
literal|"' "
else|:
literal|""
operator|)
operator|+
name|onMouseOver
operator|+
name|onMouseOut
operator|+
operator|(
name|cell
operator|.
name|getTitle
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|"title=\""
operator|+
name|cell
operator|.
name|getTitle
argument_list|()
operator|+
literal|"\" "
operator|)
operator|+
literal|">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|cell
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iForm
operator|.
name|getResource
argument_list|()
operator|!=
name|sResourceRoom
condition|)
name|out
operator|.
name|print
argument_list|(
literal|"<BR>"
operator|+
name|cell
operator|.
name|getRoomName
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|out
operator|.
name|print
argument_list|(
name|cell
operator|.
name|getShortComment
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|"<BR>"
operator|+
name|cell
operator|.
name|getShortComment
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</td>"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getModelName
parameter_list|(
name|ExamGridModel
name|model
parameter_list|)
block|{
return|return
name|model
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|model
operator|.
name|getSize
argument_list|()
operator|>
literal|0
condition|?
literal|" ("
operator|+
name|model
operator|.
name|getSize
argument_list|()
operator|+
literal|")"
else|:
literal|""
operator|)
return|;
block|}
specifier|public
name|void
name|printRowHeaderCell
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|maxIdx
parameter_list|,
name|boolean
name|vertical
parameter_list|,
name|boolean
name|head
parameter_list|,
name|boolean
name|in
parameter_list|)
block|{
name|String
name|style
init|=
literal|"Timetable"
operator|+
operator|(
name|head
operator|||
operator|(
operator|!
name|in
operator|&&
operator|!
name|vertical
operator|)
condition|?
literal|"Head"
else|:
literal|""
operator|)
operator|+
literal|"Cell"
operator|+
operator|(
operator|!
name|head
operator|&&
name|in
operator|&&
name|vertical
condition|?
literal|"In"
else|:
literal|""
operator|)
operator|+
operator|(
name|vertical
condition|?
literal|"Vertical"
else|:
literal|""
operator|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<th nowrap width='130' height='40' rowspan='"
operator|+
operator|(
literal|1
operator|+
name|maxIdx
operator|)
operator|+
literal|"' class='"
operator|+
name|style
operator|+
literal|"'>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</th>"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|printToHtml
parameter_list|(
name|PrintWriter
name|out
parameter_list|)
block|{
name|boolean
name|vertical
init|=
name|isVertical
argument_list|()
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<table border='0' cellpadding='2' cellspacing='0'>"
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|Integer
argument_list|>
name|days
init|=
name|days
argument_list|()
decl_stmt|,
name|slots
init|=
name|slots
argument_list|()
decl_stmt|,
name|weeks
init|=
name|weeks
argument_list|()
decl_stmt|,
name|daysOfWeek
init|=
name|daysOfWeek
argument_list|()
decl_stmt|;
name|int
name|rowNumber
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|iForm
operator|.
name|getDispMode
argument_list|()
operator|==
name|sDispModeInRowVertical
condition|)
block|{
name|int
name|globalMaxIdx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Integer
name|day
range|:
name|days
control|)
for|for
control|(
name|Integer
name|slot
range|:
name|slots
control|)
block|{
name|globalMaxIdx
operator|=
name|Math
operator|.
name|max
argument_list|(
name|globalMaxIdx
argument_list|,
name|getMaxIdx
argument_list|(
name|day
argument_list|,
name|slot
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|week
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|Integer
name|day
range|:
name|days
control|)
block|{
name|boolean
name|head
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|week
operator|!=
name|getWeek
argument_list|(
name|day
argument_list|)
condition|)
block|{
name|week
operator|=
name|getWeek
argument_list|(
name|day
argument_list|)
expr_stmt|;
name|head
operator|=
literal|true
expr_stmt|;
name|printHeader
argument_list|(
name|out
argument_list|,
name|getWeekName
argument_list|(
name|week
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Integer
name|slot
range|:
name|slots
control|)
block|{
if|if
condition|(
name|getPeriod
argument_list|(
name|day
argument_list|,
name|slot
argument_list|)
operator|==
literal|null
condition|)
continue|continue;
name|out
operator|.
name|println
argument_list|(
literal|"<tr valign='top'>"
argument_list|)
expr_stmt|;
name|int
name|maxIdx
init|=
name|getMaxIdx
argument_list|(
name|day
argument_list|,
name|slot
argument_list|)
decl_stmt|;
name|printRowHeaderCell
argument_list|(
name|out
argument_list|,
name|getDayName
argument_list|(
name|day
argument_list|)
operator|+
literal|"<br>"
operator|+
name|getSlotName
argument_list|(
name|slot
argument_list|)
argument_list|,
name|maxIdx
argument_list|,
name|vertical
argument_list|,
name|head
operator|&&
name|slot
operator|==
name|slots
operator|.
name|first
argument_list|()
argument_list|,
name|globalMaxIdx
operator|==
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<=
name|maxIdx
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
name|out
operator|.
name|println
argument_list|(
literal|"</tr><tr valign='top'>"
argument_list|)
expr_stmt|;
name|boolean
name|eod
init|=
operator|(
name|slot
operator|==
name|slots
operator|.
name|last
argument_list|()
operator|)
decl_stmt|;
name|boolean
name|eol
init|=
operator|(
name|eod
operator|&&
name|day
operator|==
name|days
operator|.
name|last
argument_list|()
operator|)
decl_stmt|;
for|for
control|(
name|ExamGridModel
name|model
range|:
name|models
argument_list|()
control|)
block|{
name|printCell
argument_list|(
name|out
argument_list|,
name|model
argument_list|,
name|day
argument_list|,
name|slot
argument_list|,
name|idx
argument_list|,
name|maxIdx
argument_list|,
name|head
operator|&&
name|slot
operator|==
name|slots
operator|.
name|first
argument_list|()
operator|&&
name|idx
operator|==
literal|0
argument_list|,
name|vertical
argument_list|,
name|globalMaxIdx
operator|==
literal|0
operator|||
name|idx
operator|>
literal|0
argument_list|,
literal|false
argument_list|,
name|model
operator|.
name|equals
argument_list|(
name|models
argument_list|()
operator|.
name|lastElement
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|println
argument_list|(
literal|"</tr>"
argument_list|)
expr_stmt|;
name|rowNumber
operator|++
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|int
name|tmx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ExamGridModel
name|m
range|:
name|models
argument_list|()
control|)
name|tmx
operator|=
name|Math
operator|.
name|max
argument_list|(
name|tmx
argument_list|,
name|getMaxIdx
argument_list|(
name|m
argument_list|,
name|days
operator|.
name|first
argument_list|()
argument_list|,
name|days
operator|.
name|last
argument_list|()
argument_list|,
name|slots
operator|.
name|first
argument_list|()
argument_list|,
name|slots
operator|.
name|last
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ExamGridModel
name|model
range|:
name|models
argument_list|()
control|)
block|{
if|if
condition|(
name|iForm
operator|.
name|getDispMode
argument_list|()
operator|==
name|sDispModeInRowHorizontal
condition|)
block|{
if|if
condition|(
name|rowNumber
operator|%
literal|10
operator|==
literal|0
condition|)
name|printHeader
argument_list|(
name|out
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|int
name|maxIdx
init|=
name|getMaxIdx
argument_list|(
name|model
argument_list|,
name|days
operator|.
name|first
argument_list|()
argument_list|,
name|days
operator|.
name|last
argument_list|()
argument_list|,
name|slots
operator|.
name|first
argument_list|()
argument_list|,
name|slots
operator|.
name|last
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr valign='top'>"
argument_list|)
expr_stmt|;
name|printRowHeaderCell
argument_list|(
name|out
argument_list|,
name|model
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|model
operator|.
name|getSize
argument_list|()
operator|>
literal|0
condition|?
literal|" ("
operator|+
name|model
operator|.
name|getSize
argument_list|()
operator|+
literal|")"
else|:
literal|""
operator|)
argument_list|,
name|maxIdx
argument_list|,
name|vertical
argument_list|,
operator|(
name|rowNumber
operator|%
literal|10
operator|==
literal|0
operator|)
argument_list|,
name|tmx
operator|==
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<=
name|maxIdx
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
name|out
operator|.
name|println
argument_list|(
literal|"</tr><tr valign='top'>"
argument_list|)
expr_stmt|;
for|for
control|(
name|Integer
name|day
range|:
name|days
control|)
block|{
for|for
control|(
name|Integer
name|slot
range|:
name|slots
control|)
block|{
name|boolean
name|eod
init|=
operator|(
name|slot
operator|==
name|slots
operator|.
name|last
argument_list|()
operator|)
decl_stmt|;
name|boolean
name|eol
init|=
operator|(
name|eod
operator|&&
name|day
operator|==
name|days
operator|.
name|last
argument_list|()
operator|)
decl_stmt|;
name|printCell
argument_list|(
name|out
argument_list|,
name|model
argument_list|,
name|day
argument_list|,
name|slot
argument_list|,
name|idx
argument_list|,
name|maxIdx
argument_list|,
name|rowNumber
operator|%
literal|10
operator|==
literal|0
operator|&&
name|idx
operator|==
literal|0
argument_list|,
name|vertical
argument_list|,
name|tmx
operator|==
literal|0
operator|||
name|idx
operator|>
literal|0
argument_list|,
name|eod
argument_list|,
name|eol
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|out
operator|.
name|println
argument_list|(
literal|"</tr>"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|iForm
operator|.
name|getDispMode
argument_list|()
operator|==
name|sDispModePerDayVertical
condition|)
block|{
name|printHeader
argument_list|(
name|out
argument_list|,
name|getModelName
argument_list|(
name|model
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|gmx
init|=
name|getMaxIdx
argument_list|(
name|model
argument_list|,
name|days
operator|.
name|first
argument_list|()
argument_list|,
name|days
operator|.
name|last
argument_list|()
argument_list|,
name|slots
operator|.
name|first
argument_list|()
argument_list|,
name|slots
operator|.
name|last
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Integer
name|slot
range|:
name|slots
control|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<tr valign='top'>"
argument_list|)
expr_stmt|;
name|int
name|maxIdx
init|=
name|getMaxIdx
argument_list|(
name|model
argument_list|,
name|days
operator|.
name|first
argument_list|()
argument_list|,
name|days
operator|.
name|last
argument_list|()
argument_list|,
name|slot
argument_list|,
name|slot
argument_list|)
decl_stmt|;
name|printRowHeaderCell
argument_list|(
name|out
argument_list|,
name|getSlotName
argument_list|(
name|slot
argument_list|)
argument_list|,
name|maxIdx
argument_list|,
name|vertical
argument_list|,
name|slot
operator|==
name|slots
operator|.
name|first
argument_list|()
argument_list|,
name|gmx
operator|==
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<=
name|maxIdx
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
name|out
operator|.
name|println
argument_list|(
literal|"</tr><tr valign='top'>"
argument_list|)
expr_stmt|;
for|for
control|(
name|Integer
name|day
range|:
name|days
control|)
block|{
name|printCell
argument_list|(
name|out
argument_list|,
name|model
argument_list|,
name|day
argument_list|,
name|slot
argument_list|,
name|idx
argument_list|,
name|maxIdx
argument_list|,
name|slot
operator|==
name|slots
operator|.
name|first
argument_list|()
operator|&&
name|idx
operator|==
literal|0
argument_list|,
name|vertical
argument_list|,
name|gmx
operator|==
literal|0
operator|||
name|idx
operator|>
literal|0
argument_list|,
literal|false
argument_list|,
operator|(
name|day
operator|==
name|days
operator|.
name|last
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|println
argument_list|(
literal|"</tr>"
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|iForm
operator|.
name|getDispMode
argument_list|()
operator|==
name|sDispModePerDayHorizontal
condition|)
block|{
name|printHeader
argument_list|(
name|out
argument_list|,
name|getModelName
argument_list|(
name|model
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|gmx
init|=
name|getMaxIdx
argument_list|(
name|model
argument_list|,
name|days
operator|.
name|first
argument_list|()
argument_list|,
name|days
operator|.
name|last
argument_list|()
argument_list|,
name|slots
operator|.
name|first
argument_list|()
argument_list|,
name|slots
operator|.
name|last
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Integer
name|day
range|:
name|days
control|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<tr valign='top'>"
argument_list|)
expr_stmt|;
name|int
name|maxIdx
init|=
name|getMaxIdx
argument_list|(
name|model
argument_list|,
name|day
argument_list|,
name|day
argument_list|,
name|slots
operator|.
name|first
argument_list|()
argument_list|,
name|slots
operator|.
name|last
argument_list|()
argument_list|)
decl_stmt|;
name|printRowHeaderCell
argument_list|(
name|out
argument_list|,
name|getDayName
argument_list|(
name|day
argument_list|)
argument_list|,
name|maxIdx
argument_list|,
name|vertical
argument_list|,
name|day
operator|==
name|days
operator|.
name|first
argument_list|()
argument_list|,
name|gmx
operator|==
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<=
name|maxIdx
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
name|out
operator|.
name|println
argument_list|(
literal|"</tr><tr valign='top'>"
argument_list|)
expr_stmt|;
for|for
control|(
name|Integer
name|slot
range|:
name|slots
control|)
block|{
name|printCell
argument_list|(
name|out
argument_list|,
name|model
argument_list|,
name|day
argument_list|,
name|slot
argument_list|,
name|idx
argument_list|,
name|maxIdx
argument_list|,
name|day
operator|==
name|days
operator|.
name|first
argument_list|()
operator|&&
name|idx
operator|==
literal|0
argument_list|,
name|vertical
argument_list|,
name|gmx
operator|==
literal|0
operator|||
name|idx
operator|>
literal|0
argument_list|,
literal|false
argument_list|,
operator|(
name|slot
operator|==
name|slots
operator|.
name|last
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|println
argument_list|(
literal|"</tr>"
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|iForm
operator|.
name|getDispMode
argument_list|()
operator|==
name|sDispModePerWeekHorizontal
condition|)
block|{
name|printHeader
argument_list|(
name|out
argument_list|,
name|getModelName
argument_list|(
name|model
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|gmx
init|=
name|getMaxIdx
argument_list|(
name|model
argument_list|,
name|days
operator|.
name|first
argument_list|()
argument_list|,
name|days
operator|.
name|last
argument_list|()
argument_list|,
name|slots
operator|.
name|first
argument_list|()
argument_list|,
name|slots
operator|.
name|last
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Integer
name|dow
range|:
name|daysOfWeek
argument_list|()
control|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<tr valign='top'>"
argument_list|)
expr_stmt|;
name|int
name|maxIdx
init|=
name|getMaxIdx
argument_list|(
name|model
argument_list|,
name|dow
argument_list|,
name|slots
operator|.
name|first
argument_list|()
argument_list|,
name|slots
operator|.
name|last
argument_list|()
argument_list|)
decl_stmt|;
name|printRowHeaderCell
argument_list|(
name|out
argument_list|,
name|getDayOfWeekName
argument_list|(
name|dow
argument_list|)
argument_list|,
name|maxIdx
argument_list|,
name|vertical
argument_list|,
name|dow
operator|==
name|daysOfWeek
operator|.
name|first
argument_list|()
argument_list|,
name|gmx
operator|==
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<=
name|maxIdx
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
name|out
operator|.
name|println
argument_list|(
literal|"</tr><tr valign='top'>"
argument_list|)
expr_stmt|;
for|for
control|(
name|Integer
name|week
range|:
name|weeks
control|)
block|{
for|for
control|(
name|Integer
name|slot
range|:
name|slots
control|)
block|{
name|printCell
argument_list|(
name|out
argument_list|,
name|model
argument_list|,
name|getDay
argument_list|(
name|week
argument_list|,
name|dow
argument_list|)
argument_list|,
name|slot
argument_list|,
name|idx
argument_list|,
name|maxIdx
argument_list|,
name|dow
operator|==
name|daysOfWeek
operator|.
name|first
argument_list|()
operator|&&
name|idx
operator|==
literal|0
argument_list|,
name|vertical
argument_list|,
name|gmx
operator|==
literal|0
operator|||
name|idx
operator|>
literal|0
argument_list|,
operator|(
name|slot
operator|==
name|slots
operator|.
name|last
argument_list|()
operator|)
argument_list|,
operator|(
name|slot
operator|==
name|slots
operator|.
name|last
argument_list|()
operator|&&
name|week
operator|==
name|weeks
operator|.
name|last
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|out
operator|.
name|println
argument_list|(
literal|"</tr>"
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|iForm
operator|.
name|getDispMode
argument_list|()
operator|==
name|sDispModePerWeekVertical
condition|)
block|{
name|printHeader
argument_list|(
name|out
argument_list|,
name|getModelName
argument_list|(
name|model
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|gmx
init|=
name|getMaxIdx
argument_list|(
name|model
argument_list|,
name|days
operator|.
name|first
argument_list|()
argument_list|,
name|days
operator|.
name|last
argument_list|()
argument_list|,
name|slots
operator|.
name|first
argument_list|()
argument_list|,
name|slots
operator|.
name|last
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Integer
name|week
range|:
name|weeks
control|)
block|{
for|for
control|(
name|Integer
name|slot
range|:
name|slots
control|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<tr valign='top'>"
argument_list|)
expr_stmt|;
name|int
name|maxIdx
init|=
name|getMaxIdx
argument_list|(
name|model
argument_list|,
name|week
argument_list|,
name|slot
argument_list|)
decl_stmt|;
name|printRowHeaderCell
argument_list|(
name|out
argument_list|,
name|getWeekName
argument_list|(
name|week
argument_list|)
operator|+
literal|"<br>"
operator|+
name|getSlotName
argument_list|(
name|slot
argument_list|)
argument_list|,
name|maxIdx
argument_list|,
name|vertical
argument_list|,
name|slot
operator|==
name|slots
operator|.
name|first
argument_list|()
argument_list|,
name|gmx
operator|==
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<=
name|maxIdx
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
name|out
operator|.
name|println
argument_list|(
literal|"</tr><tr valign='top'>"
argument_list|)
expr_stmt|;
for|for
control|(
name|Integer
name|dow
range|:
name|daysOfWeek
control|)
block|{
name|printCell
argument_list|(
name|out
argument_list|,
name|model
argument_list|,
name|getDay
argument_list|(
name|week
argument_list|,
name|dow
argument_list|)
argument_list|,
name|slot
argument_list|,
name|idx
argument_list|,
name|maxIdx
argument_list|,
name|slot
operator|==
name|slots
operator|.
name|first
argument_list|()
operator|&&
name|idx
operator|==
literal|0
argument_list|,
name|vertical
argument_list|,
name|gmx
operator|==
literal|0
operator|||
name|idx
operator|>
literal|0
argument_list|,
literal|false
argument_list|,
operator|(
name|dow
operator|==
name|daysOfWeek
operator|.
name|last
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|println
argument_list|(
literal|"</tr>"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|rowNumber
operator|++
expr_stmt|;
block|}
block|}
name|out
operator|.
name|println
argument_list|(
literal|"</table>"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|match
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|iForm
operator|.
name|getFilter
argument_list|()
operator|==
literal|null
operator|||
name|iForm
operator|.
name|getFilter
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|true
return|;
name|String
name|n
init|=
name|name
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
name|StringTokenizer
name|stk1
init|=
operator|new
name|StringTokenizer
argument_list|(
name|iForm
operator|.
name|getFilter
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|,
literal|";"
argument_list|)
decl_stmt|;
while|while
condition|(
name|stk1
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|StringTokenizer
name|stk2
init|=
operator|new
name|StringTokenizer
argument_list|(
name|stk1
operator|.
name|nextToken
argument_list|()
argument_list|,
literal|" ,"
argument_list|)
decl_stmt|;
name|boolean
name|match
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|match
operator|&&
name|stk2
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|token
init|=
name|stk2
operator|.
name|nextToken
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
continue|continue;
if|if
condition|(
name|n
operator|.
name|indexOf
argument_list|(
name|token
argument_list|)
operator|<
literal|0
condition|)
name|match
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|match
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|printLegend
parameter_list|(
name|JspWriter
name|jsp
parameter_list|)
block|{
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
name|jsp
argument_list|)
decl_stmt|;
name|printLegend
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|printLegend
parameter_list|(
name|PrintWriter
name|out
parameter_list|)
block|{
if|if
condition|(
name|iForm
operator|.
name|getBackground
argument_list|()
operator|!=
name|sBgNone
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td colspan='2'>Assigned examinations:</td></tr>"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iForm
operator|.
name|getBackground
argument_list|()
operator|==
name|sBgPeriodPref
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width=40 style='background-color:"
operator|+
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Required period</td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width=40 style='background-color:"
operator|+
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyPreferred
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Strongly preferred period</td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width=40 style='background-color:"
operator|+
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sPreferred
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Preferred period</td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width=40 style='background-color:"
operator|+
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>No period preference</td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width=40 style='background-color:"
operator|+
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sDiscouraged
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Discouraged period</td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width=40 style='background-color:"
operator|+
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Strongly discouraged period</td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width=40 style='background-color:"
operator|+
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Prohibited period</td><td></td></tr>"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|iForm
operator|.
name|getBackground
argument_list|()
operator|==
name|sBgRoomPref
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width=40 style='background-color:"
operator|+
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Required room</td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width=40 style='background-color:"
operator|+
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyPreferred
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Strongly preferred room</td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width=40 style='background-color:"
operator|+
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sPreferred
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Preferred room</td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width=40 style='background-color:"
operator|+
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>No room preference</td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width=40 style='background-color:"
operator|+
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sDiscouraged
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Discouraged room</td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width=40 style='background-color:"
operator|+
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Strongly discouraged room</td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width=40 style='background-color:"
operator|+
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Prohibited room</td><td></td></tr>"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|iForm
operator|.
name|getBackground
argument_list|()
operator|==
name|sBgInstructorConfs
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width=40 style='background-color:"
operator|+
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>No instructor conflict</td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width=40 style='background-color:"
operator|+
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sDiscouraged
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>One or more instructor back-to-back conflicts</td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width=40 style='background-color:"
operator|+
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>One or more instructor three or more exams a day conflicts</td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width=40 style='background-color:"
operator|+
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>One or more instructor direct conflicts</td><td></td></tr>"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|iForm
operator|.
name|getBackground
argument_list|()
operator|==
name|sBgStudentConfs
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width=40 style='background-color:"
operator|+
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>No student conflict</td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width=40 style='background-color:"
operator|+
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sDiscouraged
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>One or more student back-to-back conflicts</td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width=40 style='background-color:"
operator|+
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>One or more student three or more exams a day student conflicts</td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width=40 style='background-color:"
operator|+
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>One or more student direct conflicts</td><td></td></tr>"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|iForm
operator|.
name|getBackground
argument_list|()
operator|==
name|sBgDirectInstructorConfs
condition|)
block|{
for|for
control|(
name|int
name|nrConflicts
init|=
literal|0
init|;
name|nrConflicts
operator|<=
literal|6
condition|;
name|nrConflicts
operator|++
control|)
block|{
name|String
name|color
init|=
name|lessConflicts2color
argument_list|(
name|nrConflicts
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width=40 style='background-color:"
operator|+
name|color
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>"
operator|+
name|nrConflicts
operator|+
literal|" "
operator|+
operator|(
name|nrConflicts
operator|==
literal|6
condition|?
literal|"or more "
else|:
literal|""
operator|)
operator|+
literal|"instructor direct conflicts</td><td></td></tr>"
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|iForm
operator|.
name|getBackground
argument_list|()
operator|==
name|sBgMoreThanTwoADayInstructorConfs
condition|)
block|{
for|for
control|(
name|int
name|nrConflicts
init|=
literal|0
init|;
name|nrConflicts
operator|<=
literal|15
condition|;
name|nrConflicts
operator|++
control|)
block|{
name|String
name|color
init|=
name|conflicts2color
argument_list|(
name|nrConflicts
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width=40 style='background-color:"
operator|+
name|color
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>"
operator|+
name|nrConflicts
operator|+
literal|" "
operator|+
operator|(
name|nrConflicts
operator|==
literal|15
condition|?
literal|"or more "
else|:
literal|""
operator|)
operator|+
literal|"instructor more than two exams a day conflicts</td><td></td></tr>"
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|iForm
operator|.
name|getBackground
argument_list|()
operator|==
name|sBgBackToBackInstructorConfs
condition|)
block|{
for|for
control|(
name|int
name|nrConflicts
init|=
literal|0
init|;
name|nrConflicts
operator|<=
literal|15
condition|;
name|nrConflicts
operator|++
control|)
block|{
name|String
name|color
init|=
name|conflicts2color
argument_list|(
name|nrConflicts
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width=40 style='background-color:"
operator|+
name|color
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>"
operator|+
name|nrConflicts
operator|+
literal|" "
operator|+
operator|(
name|nrConflicts
operator|==
literal|15
condition|?
literal|"or more "
else|:
literal|""
operator|)
operator|+
literal|"instructor back to back conflicts</td><td></td></tr>"
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|iForm
operator|.
name|getBackground
argument_list|()
operator|==
name|sBgDirectStudentConfs
condition|)
block|{
for|for
control|(
name|int
name|nrConflicts
init|=
literal|0
init|;
name|nrConflicts
operator|<=
literal|6
condition|;
name|nrConflicts
operator|++
control|)
block|{
name|String
name|color
init|=
name|lessConflicts2color
argument_list|(
name|nrConflicts
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width=40 style='background-color:"
operator|+
name|color
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>"
operator|+
name|nrConflicts
operator|+
literal|" "
operator|+
operator|(
name|nrConflicts
operator|==
literal|6
condition|?
literal|"or more "
else|:
literal|""
operator|)
operator|+
literal|"student direct conflicts</td><td></td></tr>"
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|iForm
operator|.
name|getBackground
argument_list|()
operator|==
name|sBgMoreThanTwoADayStudentConfs
condition|)
block|{
for|for
control|(
name|int
name|nrConflicts
init|=
literal|0
init|;
name|nrConflicts
operator|<=
literal|15
condition|;
name|nrConflicts
operator|++
control|)
block|{
name|String
name|color
init|=
name|conflicts2color
argument_list|(
name|nrConflicts
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width=40 style='background-color:"
operator|+
name|color
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>"
operator|+
name|nrConflicts
operator|+
literal|" "
operator|+
operator|(
name|nrConflicts
operator|==
literal|15
condition|?
literal|"or more "
else|:
literal|""
operator|)
operator|+
literal|"student more than two exams a day conflicts</td><td></td></tr>"
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|iForm
operator|.
name|getBackground
argument_list|()
operator|==
name|sBgBackToBackStudentConfs
condition|)
block|{
for|for
control|(
name|int
name|nrConflicts
init|=
literal|0
init|;
name|nrConflicts
operator|<=
literal|15
condition|;
name|nrConflicts
operator|++
control|)
block|{
name|String
name|color
init|=
name|conflicts2color
argument_list|(
name|nrConflicts
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width=40 style='background-color:"
operator|+
name|color
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>"
operator|+
name|nrConflicts
operator|+
literal|" "
operator|+
operator|(
name|nrConflicts
operator|==
literal|15
condition|?
literal|"or more "
else|:
literal|""
operator|)
operator|+
literal|"student back to back conflicts</td><td></td></tr>"
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|iForm
operator|.
name|getBackground
argument_list|()
operator|==
name|sBgDistPref
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width=40 style='background-color:"
operator|+
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>No violated constraint<i>(distance=0)</i></td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width=40 style='background-color:"
operator|+
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sDiscouraged
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Discouraged/preferred constraint violated</td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width=40 style='background-color:"
operator|+
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Strongly discouraged/preferred constraint violated</i></td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width=40 style='background-color:"
operator|+
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Required/prohibited constraint violated</i></td><td></td></tr>"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td colspan='2'>Free times:</td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width=40 style='background-color:"
operator|+
name|sBgColorNotAvailable
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Period not available</td><td></td></tr>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iForm
operator|.
name|getBgPreferences
argument_list|()
operator|&&
name|iForm
operator|.
name|getBackground
argument_list|()
operator|==
name|sBgPeriodPref
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width=40 style='background-color:"
operator|+
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyPreferred
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Strongly preferred period</td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width=40 style='background-color:"
operator|+
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sPreferred
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Preferred period</td><td></td></tr>"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width=40 style='background-color:"
operator|+
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>No period preference</td><td></td></tr>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iForm
operator|.
name|getBgPreferences
argument_list|()
operator|&&
name|iForm
operator|.
name|getBackground
argument_list|()
operator|==
name|sBgPeriodPref
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width=40 style='background-color:"
operator|+
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sDiscouraged
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Discouraged period</td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width=40 style='background-color:"
operator|+
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Strongly discouraged period</td><td></td></tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<tr><td width=40 style='background-color:"
operator|+
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
operator|+
literal|";border:1px solid rgb(0,0,0)'>&nbsp;</td><td>Prohibited period</td><td></td></tr>"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|String
name|pref2color
parameter_list|(
name|String
name|pref
parameter_list|)
block|{
if|if
condition|(
name|pref
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|PreferenceLevel
operator|.
name|prolog2bgColor
argument_list|(
name|pref
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|pref2color
parameter_list|(
name|int
name|pref
parameter_list|)
block|{
return|return
name|PreferenceLevel
operator|.
name|prolog2bgColor
argument_list|(
name|PreferenceLevel
operator|.
name|int2prolog
argument_list|(
name|pref
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|conflicts2color
parameter_list|(
name|int
name|nrConflicts
parameter_list|)
block|{
if|if
condition|(
name|nrConflicts
operator|>
literal|15
condition|)
name|nrConflicts
operator|=
literal|15
expr_stmt|;
name|String
name|color
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|nrConflicts
operator|==
literal|0
condition|)
block|{
name|color
operator|=
literal|"rgb(240,240,240)"
expr_stmt|;
block|}
if|else if
condition|(
name|nrConflicts
operator|<
literal|5
condition|)
block|{
name|color
operator|=
literal|"rgb(240,"
operator|+
operator|(
literal|240
operator|-
operator|(
literal|30
operator|*
name|nrConflicts
operator|/
literal|5
operator|)
operator|)
operator|+
literal|","
operator|+
operator|(
literal|240
operator|-
operator|(
literal|180
operator|*
name|nrConflicts
operator|/
literal|5
operator|)
operator|)
operator|+
literal|")"
expr_stmt|;
block|}
if|else if
condition|(
name|nrConflicts
operator|<
literal|10
condition|)
block|{
name|color
operator|=
literal|"rgb(240,"
operator|+
operator|(
literal|210
operator|-
operator|(
literal|90
operator|*
operator|(
name|nrConflicts
operator|-
literal|5
operator|)
operator|/
literal|5
operator|)
operator|)
operator|+
literal|",60)"
expr_stmt|;
block|}
else|else
block|{
name|color
operator|=
literal|"rgb("
operator|+
operator|(
literal|240
operator|-
operator|(
literal|20
operator|*
operator|(
name|nrConflicts
operator|-
literal|10
operator|)
operator|/
literal|5
operator|)
operator|)
operator|+
literal|","
operator|+
operator|(
literal|120
operator|-
operator|(
literal|70
operator|*
operator|(
name|nrConflicts
operator|-
literal|10
operator|)
operator|/
literal|5
operator|)
operator|)
operator|+
literal|","
operator|+
operator|(
literal|60
operator|-
operator|(
literal|20
operator|*
operator|(
name|nrConflicts
operator|-
literal|10
operator|)
operator|/
literal|5
operator|)
operator|)
operator|+
literal|")"
expr_stmt|;
block|}
return|return
name|color
return|;
block|}
specifier|public
specifier|static
name|String
name|lessConflicts2color
parameter_list|(
name|int
name|nrConflicts
parameter_list|)
block|{
if|if
condition|(
name|nrConflicts
operator|>
literal|6
condition|)
name|nrConflicts
operator|=
literal|6
expr_stmt|;
name|String
name|color
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|nrConflicts
operator|==
literal|0
condition|)
block|{
name|color
operator|=
literal|"rgb(240,240,240)"
expr_stmt|;
block|}
if|else if
condition|(
name|nrConflicts
operator|<
literal|2
condition|)
block|{
name|color
operator|=
literal|"rgb(240,"
operator|+
operator|(
literal|240
operator|-
operator|(
literal|30
operator|*
name|nrConflicts
operator|/
literal|2
operator|)
operator|)
operator|+
literal|","
operator|+
operator|(
literal|240
operator|-
operator|(
literal|180
operator|*
name|nrConflicts
operator|/
literal|2
operator|)
operator|)
operator|+
literal|")"
expr_stmt|;
block|}
if|else if
condition|(
name|nrConflicts
operator|<
literal|4
condition|)
block|{
name|color
operator|=
literal|"rgb(240,"
operator|+
operator|(
literal|210
operator|-
operator|(
literal|90
operator|*
operator|(
name|nrConflicts
operator|-
literal|2
operator|)
operator|/
literal|2
operator|)
operator|)
operator|+
literal|",60)"
expr_stmt|;
block|}
else|else
block|{
name|color
operator|=
literal|"rgb("
operator|+
operator|(
literal|240
operator|-
operator|(
literal|20
operator|*
operator|(
name|nrConflicts
operator|-
literal|4
operator|)
operator|/
literal|2
operator|)
operator|)
operator|+
literal|","
operator|+
operator|(
literal|120
operator|-
operator|(
literal|70
operator|*
operator|(
name|nrConflicts
operator|-
literal|4
operator|)
operator|/
literal|2
operator|)
operator|)
operator|+
literal|","
operator|+
operator|(
literal|60
operator|-
operator|(
literal|20
operator|*
operator|(
name|nrConflicts
operator|-
literal|4
operator|)
operator|/
literal|2
operator|)
operator|)
operator|+
literal|")"
expr_stmt|;
block|}
return|return
name|color
return|;
block|}
specifier|public
class|class
name|ExamGridModel
implements|implements
name|Comparable
argument_list|<
name|ExamGridModel
argument_list|>
block|{
specifier|private
name|Long
name|iId
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iName
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|iSize
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|iNrAssignments
init|=
literal|0
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|ExamPeriod
argument_list|,
name|Vector
argument_list|<
name|ExamAssignmentInfo
argument_list|>
argument_list|>
name|iAssignments
init|=
operator|new
name|Hashtable
argument_list|<
name|ExamPeriod
argument_list|,
name|Vector
argument_list|<
name|ExamAssignmentInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|ExamGridModel
parameter_list|(
name|Long
name|id
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|size
parameter_list|,
name|Collection
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|assignments
parameter_list|)
block|{
name|iId
operator|=
name|id
expr_stmt|;
name|iName
operator|=
name|name
expr_stmt|;
name|iSize
operator|=
name|size
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|assignments
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamAssignmentInfo
name|exam
init|=
operator|(
name|ExamAssignmentInfo
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Vector
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|a
init|=
name|iAssignments
operator|.
name|get
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
name|a
operator|=
operator|new
name|Vector
argument_list|<
name|ExamAssignmentInfo
argument_list|>
argument_list|()
expr_stmt|;
name|iAssignments
operator|.
name|put
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
name|a
operator|.
name|add
argument_list|(
name|exam
argument_list|)
expr_stmt|;
name|iNrAssignments
operator|++
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addAssignments
parameter_list|(
name|Collection
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|assignments
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|assignments
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamAssignmentInfo
name|exam
init|=
operator|(
name|ExamAssignmentInfo
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Vector
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|a
init|=
name|iAssignments
operator|.
name|get
argument_list|(
name|exam
operator|.
name|getPeriodId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
name|a
operator|=
operator|new
name|Vector
argument_list|<
name|ExamAssignmentInfo
argument_list|>
argument_list|()
expr_stmt|;
name|iAssignments
operator|.
name|put
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
name|a
operator|.
name|add
argument_list|(
name|exam
argument_list|)
expr_stmt|;
name|iNrAssignments
operator|++
expr_stmt|;
block|}
block|}
specifier|public
name|Long
name|getId
parameter_list|()
block|{
return|return
name|iId
return|;
block|}
specifier|public
name|int
name|getSize
parameter_list|()
block|{
if|if
condition|(
name|iSize
operator|<
literal|0
condition|)
return|return
name|iNrAssignments
return|;
return|return
name|iSize
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
specifier|public
name|Vector
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|getAssignments
parameter_list|(
name|ExamPeriod
name|period
parameter_list|)
block|{
if|if
condition|(
name|period
operator|==
literal|null
condition|)
return|return
operator|new
name|Vector
argument_list|<
name|ExamAssignmentInfo
argument_list|>
argument_list|()
return|;
name|Vector
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|ret
init|=
name|iAssignments
operator|.
name|get
argument_list|(
name|period
argument_list|)
decl_stmt|;
return|return
operator|(
name|ret
operator|==
literal|null
condition|?
operator|new
name|Vector
argument_list|<
name|ExamAssignmentInfo
argument_list|>
argument_list|()
else|:
name|ret
operator|)
return|;
block|}
specifier|public
name|ExamGridCell
name|getAssignment
parameter_list|(
name|int
name|day
parameter_list|,
name|int
name|slot
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
return|return
name|getAssignment
argument_list|(
name|getPeriod
argument_list|(
name|day
argument_list|,
name|slot
argument_list|)
argument_list|,
name|idx
argument_list|)
return|;
block|}
specifier|public
name|ExamGridCell
name|getAssignment
parameter_list|(
name|ExamPeriod
name|period
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
if|if
condition|(
name|period
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Vector
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|assignments
init|=
name|iAssignments
operator|.
name|get
argument_list|(
name|period
argument_list|)
decl_stmt|;
if|if
condition|(
name|assignments
operator|==
literal|null
operator|||
name|assignments
operator|.
name|size
argument_list|()
operator|<=
name|idx
condition|)
return|return
literal|null
return|;
name|ExamAssignmentInfo
name|info
init|=
name|assignments
operator|.
name|elementAt
argument_list|(
name|idx
argument_list|)
decl_stmt|;
return|return
name|info
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|ExamGridCell
argument_list|(
name|info
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isAvailable
parameter_list|(
name|ExamPeriod
name|period
parameter_list|)
block|{
return|return
name|period
operator|!=
literal|null
operator|&&
operator|!
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|period
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|getBackground
parameter_list|(
name|ExamPeriod
name|period
parameter_list|)
block|{
if|if
condition|(
name|period
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|iForm
operator|.
name|getBgPreferences
argument_list|()
operator|&&
name|iForm
operator|.
name|getBackground
argument_list|()
operator|==
name|sBgPeriodPref
condition|)
block|{
if|if
condition|(
name|period
operator|.
name|getPrefLevel
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|period
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
return|return
name|pref2color
argument_list|(
name|period
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|ExamGridModel
name|model
parameter_list|)
block|{
switch|switch
condition|(
name|iForm
operator|.
name|getOrder
argument_list|()
condition|)
block|{
case|case
name|sOrderByNameAsc
case|:
return|return
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|model
operator|.
name|getName
argument_list|()
argument_list|)
return|;
case|case
name|sOrderByNameDesc
case|:
return|return
operator|-
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|model
operator|.
name|getName
argument_list|()
argument_list|)
return|;
case|case
name|sOrderBySizeAsc
case|:
return|return
name|Double
operator|.
name|compare
argument_list|(
name|getSize
argument_list|()
argument_list|,
name|model
operator|.
name|getSize
argument_list|()
argument_list|)
return|;
case|case
name|sOrderBySizeDesc
case|:
return|return
operator|-
name|Double
operator|.
name|compare
argument_list|(
name|getSize
argument_list|()
argument_list|,
name|model
operator|.
name|getSize
argument_list|()
argument_list|)
return|;
block|}
return|return
name|getId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|model
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
class|class
name|ExamGridCell
block|{
specifier|private
name|ExamAssignmentInfo
name|iInfo
init|=
literal|null
decl_stmt|;
specifier|public
name|ExamGridCell
parameter_list|()
block|{
block|}
specifier|public
name|ExamGridCell
parameter_list|(
name|ExamAssignmentInfo
name|info
parameter_list|)
block|{
name|iInfo
operator|=
name|info
expr_stmt|;
block|}
specifier|private
name|ExamAssignmentInfo
name|getInfo
parameter_list|()
block|{
return|return
name|iInfo
return|;
block|}
specifier|public
name|String
name|getBackground
parameter_list|()
block|{
switch|switch
condition|(
name|iForm
operator|.
name|getBackground
argument_list|()
condition|)
block|{
case|case
name|sBgPeriodPref
case|:
return|return
name|pref2color
argument_list|(
name|getInfo
argument_list|()
operator|.
name|getPeriodPref
argument_list|()
argument_list|)
return|;
case|case
name|sBgRoomPref
case|:
if|if
condition|(
name|iForm
operator|.
name|getResource
argument_list|()
operator|==
name|sResourceRoom
condition|)
return|return
name|pref2color
argument_list|(
name|getInfo
argument_list|()
operator|.
name|getRoomPref
argument_list|(
name|ExamGridModel
operator|.
name|this
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
return|;
else|else
return|return
name|pref2color
argument_list|(
name|getInfo
argument_list|()
operator|.
name|getRoomPref
argument_list|()
argument_list|)
return|;
case|case
name|sBgDistPref
case|:
return|return
name|pref2color
argument_list|(
name|getInfo
argument_list|()
operator|.
name|getDistributionPref
argument_list|()
argument_list|)
return|;
case|case
name|sBgStudentConfs
case|:
if|if
condition|(
name|getInfo
argument_list|()
operator|.
name|getNrDirectConflicts
argument_list|()
operator|>
literal|0
condition|)
return|return
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
return|;
if|if
condition|(
name|getInfo
argument_list|()
operator|.
name|getNrMoreThanTwoConflicts
argument_list|()
operator|>
literal|0
condition|)
return|return
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
return|;
if|if
condition|(
name|getInfo
argument_list|()
operator|.
name|getNrBackToBackConflicts
argument_list|()
operator|>
literal|0
condition|)
return|return
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sDiscouraged
argument_list|)
return|;
return|return
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
return|;
case|case
name|sBgDirectStudentConfs
case|:
return|return
name|lessConflicts2color
argument_list|(
name|getInfo
argument_list|()
operator|.
name|getNrDirectConflicts
argument_list|()
argument_list|)
return|;
case|case
name|sBgMoreThanTwoADayStudentConfs
case|:
return|return
name|conflicts2color
argument_list|(
name|getInfo
argument_list|()
operator|.
name|getNrMoreThanTwoConflicts
argument_list|()
argument_list|)
return|;
case|case
name|sBgBackToBackStudentConfs
case|:
return|return
name|conflicts2color
argument_list|(
name|getInfo
argument_list|()
operator|.
name|getNrBackToBackConflicts
argument_list|()
argument_list|)
return|;
case|case
name|sBgInstructorConfs
case|:
if|if
condition|(
name|getInfo
argument_list|()
operator|.
name|getNrInstructorDirectConflicts
argument_list|()
operator|>
literal|0
condition|)
return|return
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
return|;
if|if
condition|(
name|getInfo
argument_list|()
operator|.
name|getNrInstructorMoreThanTwoConflicts
argument_list|()
operator|>
literal|0
condition|)
return|return
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
return|;
if|if
condition|(
name|getInfo
argument_list|()
operator|.
name|getNrInstructorBackToBackConflicts
argument_list|()
operator|>
literal|0
condition|)
return|return
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sDiscouraged
argument_list|)
return|;
return|return
name|pref2color
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
return|;
case|case
name|sBgDirectInstructorConfs
case|:
return|return
name|lessConflicts2color
argument_list|(
name|getInfo
argument_list|()
operator|.
name|getNrInstructorDirectConflicts
argument_list|()
argument_list|)
return|;
case|case
name|sBgMoreThanTwoADayInstructorConfs
case|:
return|return
name|conflicts2color
argument_list|(
name|getInfo
argument_list|()
operator|.
name|getNrInstructorMoreThanTwoConflicts
argument_list|()
argument_list|)
return|;
case|case
name|sBgBackToBackInstructorConfs
case|:
return|return
name|conflicts2color
argument_list|(
name|getInfo
argument_list|()
operator|.
name|getNrInstructorBackToBackConflicts
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|getOnClick
parameter_list|()
block|{
return|return
literal|"window.open('examInfo.do?examId="
operator|+
name|getInfo
argument_list|()
operator|.
name|getExamId
argument_list|()
operator|+
literal|"','exams','width=1000,height=600,resizable=yes,scrollbars=yes,toolbar=no,location=no,directories=no,status=yes,menubar=no,copyhistory=no').focus();"
return|;
block|}
specifier|public
name|String
name|getId
parameter_list|()
block|{
name|String
name|id
init|=
name|getInfo
argument_list|()
operator|.
name|getExamId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|iForm
operator|.
name|getResource
argument_list|()
operator|==
name|sResourceRoom
operator|||
name|iForm
operator|.
name|getResource
argument_list|()
operator|==
name|sResourceInstructor
condition|)
name|id
operator|+=
literal|"."
operator|+
name|ExamGridModel
operator|.
name|this
operator|.
name|getId
argument_list|()
expr_stmt|;
return|return
name|id
return|;
block|}
specifier|public
name|String
name|getTitle
parameter_list|()
block|{
return|return
name|getInfo
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
operator|(
name|iForm
operator|.
name|getShowSections
argument_list|()
condition|?
name|getInfo
argument_list|()
operator|.
name|getSectionName
argument_list|(
literal|"<br>"
argument_list|)
else|:
name|getInfo
argument_list|()
operator|.
name|getExamName
argument_list|()
operator|)
return|;
block|}
specifier|public
name|String
name|getRoomName
parameter_list|()
block|{
return|return
name|getInfo
argument_list|()
operator|.
name|getRoomsName
argument_list|(
literal|","
argument_list|)
return|;
block|}
specifier|public
name|String
name|getShortComment
parameter_list|()
block|{
name|int
name|dc
init|=
name|getInfo
argument_list|()
operator|.
name|getNrDirectConflicts
argument_list|()
decl_stmt|;
name|int
name|m2d
init|=
name|getInfo
argument_list|()
operator|.
name|getNrMoreThanTwoConflicts
argument_list|()
decl_stmt|;
name|int
name|btb
init|=
name|getInfo
argument_list|()
operator|.
name|getNrBackToBackConflicts
argument_list|()
decl_stmt|;
return|return
literal|"<font color='"
operator|+
operator|(
name|dc
operator|>
literal|0
condition|?
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"P"
argument_list|)
else|:
literal|"gray"
operator|)
operator|+
literal|"'>"
operator|+
name|dc
operator|+
literal|"</font>, "
operator|+
literal|"<font color='"
operator|+
operator|(
name|m2d
operator|>
literal|0
condition|?
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"2"
argument_list|)
else|:
literal|"gray"
operator|)
operator|+
literal|"'>"
operator|+
name|m2d
operator|+
literal|"</font>, "
operator|+
literal|"<font color='"
operator|+
operator|(
name|btb
operator|>
literal|0
condition|?
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"1"
argument_list|)
else|:
literal|"gray"
operator|)
operator|+
literal|"'>"
operator|+
name|btb
operator|+
literal|"</font>"
return|;
block|}
specifier|public
name|String
name|getShortCommentNoColors
parameter_list|()
block|{
name|int
name|dc
init|=
name|getInfo
argument_list|()
operator|.
name|getNrDirectConflicts
argument_list|()
decl_stmt|;
name|int
name|m2d
init|=
name|getInfo
argument_list|()
operator|.
name|getNrMoreThanTwoConflicts
argument_list|()
decl_stmt|;
name|int
name|btb
init|=
name|getInfo
argument_list|()
operator|.
name|getNrBackToBackConflicts
argument_list|()
decl_stmt|;
return|return
name|dc
operator|+
literal|", "
operator|+
name|m2d
operator|+
literal|", "
operator|+
name|btb
return|;
block|}
block|}
specifier|public
class|class
name|BlockGridCell
extends|extends
name|ExamGridCell
block|{
specifier|private
name|TimeBlock
name|iBlock
init|=
literal|null
decl_stmt|;
specifier|public
name|BlockGridCell
parameter_list|(
name|TimeBlock
name|block
parameter_list|)
block|{
name|iBlock
operator|=
name|block
expr_stmt|;
block|}
specifier|public
name|String
name|getBackground
parameter_list|()
block|{
return|return
name|sBgColorNotAvailable
return|;
block|}
specifier|public
name|String
name|getOnClick
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|getTitle
parameter_list|()
block|{
return|return
name|iBlock
operator|.
name|getEventName
argument_list|()
operator|+
literal|" ("
operator|+
name|iBlock
operator|.
name|getEventType
argument_list|()
operator|+
literal|")"
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iBlock
operator|.
name|getEventName
argument_list|()
return|;
block|}
specifier|public
name|String
name|getRoomName
parameter_list|()
block|{
return|return
name|iBlock
operator|.
name|getEventType
argument_list|()
return|;
block|}
specifier|public
name|String
name|getShortComment
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
specifier|public
name|String
name|getShortCommentNoColors
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
block|}
block|}
specifier|public
class|class
name|RoomExamGridModel
extends|extends
name|ExamGridModel
block|{
specifier|private
name|Hashtable
name|iExamPrefs
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|TimeBlock
argument_list|>
name|iUnavailabilities
init|=
literal|null
decl_stmt|;
name|RoomExamGridModel
parameter_list|(
name|Location
name|location
parameter_list|,
name|Collection
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|assignments
parameter_list|,
name|Date
index|[]
name|bounds
parameter_list|)
block|{
name|super
argument_list|(
name|location
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|location
operator|.
name|getLabel
argument_list|()
argument_list|,
name|location
operator|.
name|getCapacity
argument_list|()
argument_list|,
name|assignments
argument_list|)
expr_stmt|;
name|iExamPrefs
operator|=
name|location
operator|.
name|getExamPreferences
argument_list|(
name|iForm
operator|.
name|getExamType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|RoomAvailability
operator|.
name|getInstance
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|iUnavailabilities
operator|=
name|RoomAvailability
operator|.
name|getInstance
argument_list|()
operator|.
name|getRoomAvailability
argument_list|(
name|location
argument_list|,
name|bounds
index|[
literal|0
index|]
argument_list|,
name|bounds
index|[
literal|1
index|]
argument_list|,
operator|new
name|String
index|[]
block|{
operator|(
name|iForm
operator|.
name|getExamType
argument_list|()
operator|==
name|Exam
operator|.
name|sExamTypeFinal
condition|?
name|RoomAvailabilityInterface
operator|.
name|sFinalExamType
else|:
name|RoomAvailabilityInterface
operator|.
name|sMidtermExamType
operator|)
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|TimeBlock
name|getBlock
parameter_list|(
name|ExamPeriod
name|period
parameter_list|)
block|{
if|if
condition|(
name|period
operator|==
literal|null
operator|||
name|iUnavailabilities
operator|==
literal|null
operator|||
name|iUnavailabilities
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
for|for
control|(
name|TimeBlock
name|block
range|:
name|iUnavailabilities
control|)
if|if
condition|(
name|period
operator|.
name|overlap
argument_list|(
name|block
argument_list|)
condition|)
return|return
name|block
return|;
return|return
literal|null
return|;
block|}
specifier|public
name|PreferenceLevel
name|getPreference
parameter_list|(
name|ExamPeriod
name|period
parameter_list|)
block|{
return|return
operator|(
name|iExamPrefs
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|PreferenceLevel
operator|)
name|iExamPrefs
operator|.
name|get
argument_list|(
name|period
argument_list|)
operator|)
return|;
block|}
specifier|public
name|boolean
name|isAvailable
parameter_list|(
name|ExamPeriod
name|period
parameter_list|)
block|{
if|if
condition|(
operator|!
name|super
operator|.
name|isAvailable
argument_list|(
name|period
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getBlock
argument_list|(
name|period
argument_list|)
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
name|PreferenceLevel
name|pref
init|=
name|getPreference
argument_list|(
name|period
argument_list|)
decl_stmt|;
return|return
operator|(
name|pref
operator|==
literal|null
operator|||
operator|!
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|)
return|;
block|}
specifier|public
name|String
name|getBackground
parameter_list|(
name|ExamPeriod
name|period
parameter_list|)
block|{
if|if
condition|(
name|period
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|iForm
operator|.
name|getBgPreferences
argument_list|()
operator|&&
name|iForm
operator|.
name|getBackground
argument_list|()
operator|==
name|sBgPeriodPref
condition|)
block|{
name|PreferenceLevel
name|pref
init|=
name|getPreference
argument_list|(
name|period
argument_list|)
decl_stmt|;
if|if
condition|(
name|pref
operator|!=
literal|null
operator|&&
operator|!
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
return|return
name|pref2color
argument_list|(
name|pref
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
return|;
if|if
condition|(
name|period
operator|.
name|getPrefLevel
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|period
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
return|return
name|pref2color
argument_list|(
name|period
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|ExamGridCell
name|getAssignment
parameter_list|(
name|ExamPeriod
name|period
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
name|ExamGridCell
name|cell
init|=
name|super
operator|.
name|getAssignment
argument_list|(
name|period
argument_list|,
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|cell
operator|!=
literal|null
condition|)
return|return
name|cell
return|;
if|if
condition|(
name|idx
operator|==
name|getAssignments
argument_list|(
name|period
argument_list|)
operator|.
name|size
argument_list|()
condition|)
block|{
name|TimeBlock
name|block
init|=
name|getBlock
argument_list|(
name|period
argument_list|)
decl_stmt|;
if|if
condition|(
name|block
operator|!=
literal|null
condition|)
return|return
operator|new
name|BlockGridCell
argument_list|(
name|block
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|Vector
argument_list|<
name|ExamGridModel
argument_list|>
name|models
parameter_list|()
block|{
return|return
name|iModels
return|;
block|}
specifier|public
name|ExamGridForm
name|getForm
parameter_list|()
block|{
return|return
name|iForm
return|;
block|}
block|}
end_class

end_unit

