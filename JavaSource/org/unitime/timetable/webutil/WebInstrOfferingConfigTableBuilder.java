begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.0 (University Course Timetabling& Student Sectioning Application)  * Copyright (C) 2007, UniTime.org, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|jsp
operator|.
name|JspWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|htmlgen
operator|.
name|TableCell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|htmlgen
operator|.
name|TableStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|ClassListForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|UserData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|ClassComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|InstrOfferingConfigComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstrOfferingConfigDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstructionalOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|CachedClassAssignmentProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ClassAssignmentProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ExamAssignmentProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_class
specifier|public
class|class
name|WebInstrOfferingConfigTableBuilder
extends|extends
name|WebInstructionalOfferingTableBuilder
block|{
specifier|private
specifier|static
name|String
index|[]
name|COLUMNS
init|=
block|{
name|LABEL
block|,
name|DIV_SEC
block|,
name|MIN_PER_WK
block|,
name|LIMIT
block|,
name|ROOM_RATIO
block|,
name|MANAGER
block|,
name|DATE_PATTERN
block|,
name|TIME_PATTERN
block|,
name|PREFERENCES
block|,
name|INSTRUCTOR
block|,
name|TIMETABLE
block|,
name|SCHEDULING_SUBPART_CREDIT
block|}
decl_stmt|;
specifier|public
name|WebInstrOfferingConfigTableBuilder
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|buttonsTable
parameter_list|(
name|InstrOfferingConfig
name|ioc
parameter_list|,
name|boolean
name|isEditable
parameter_list|,
name|boolean
name|isFullyEditable
parameter_list|,
name|boolean
name|isLimitedEditable
parameter_list|,
name|boolean
name|isExtManaged
parameter_list|)
block|{
name|StringBuffer
name|btnTable
init|=
operator|new
name|StringBuffer
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|btnTable
operator|.
name|append
argument_list|(
literal|"<table class='BottomBorder' width='100%'><tr><td width='100%' nowrap>"
argument_list|)
expr_stmt|;
name|btnTable
operator|.
name|append
argument_list|(
literal|"<DIV class='WelcomeRowHeadNoLine'>"
argument_list|)
expr_stmt|;
name|String
name|configName
init|=
name|ioc
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|configName
operator|==
literal|null
operator|||
name|configName
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|configName
operator|=
name|ioc
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|btnTable
operator|.
name|append
argument_list|(
literal|"Configuration "
operator|+
name|configName
argument_list|)
expr_stmt|;
name|btnTable
operator|.
name|append
argument_list|(
literal|"</DIV>"
argument_list|)
expr_stmt|;
name|btnTable
operator|.
name|append
argument_list|(
literal|"</td><td style='padding-bottom: 3px' nowrap>"
argument_list|)
expr_stmt|;
name|boolean
name|notOffered
init|=
name|ioc
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|isNotOffered
argument_list|()
operator|.
name|booleanValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|notOffered
operator|&&
operator|(
name|isEditable
operator|||
name|isLimitedEditable
operator|||
name|isExtManaged
operator|)
condition|)
block|{
name|btnTable
operator|.
name|append
argument_list|(
literal|"<table border='0' align='right' cellspacing='1' cellpadding='0'>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|isEditable
condition|)
block|{
name|btnTable
operator|.
name|append
argument_list|(
literal|"<td>"
argument_list|)
expr_stmt|;
name|btnTable
operator|.
name|append
argument_list|(
literal|"<form method='post' action='instructionalOfferingConfigEdit.do' class='FormWithNoPadding'>"
argument_list|)
expr_stmt|;
name|btnTable
operator|.
name|append
argument_list|(
literal|"<input type='hidden' name='configId' value='"
operator|+
name|ioc
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"'>"
argument_list|)
expr_stmt|;
name|btnTable
operator|.
name|append
argument_list|(
literal|"<input type='submit' name='op' value='Edit Configuration' title='Set Up Configuration' class='btn'>"
argument_list|)
expr_stmt|;
name|btnTable
operator|.
name|append
argument_list|(
literal|"</form>"
argument_list|)
expr_stmt|;
name|btnTable
operator|.
name|append
argument_list|(
literal|"</td>"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|isEditable
operator|||
name|isExtManaged
operator|)
operator|&&
name|ioc
operator|.
name|hasClasses
argument_list|()
operator|&&
operator|!
name|ioc
operator|.
name|isUnlimitedEnrollment
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|btnTable
operator|.
name|append
argument_list|(
literal|"<td>"
argument_list|)
expr_stmt|;
name|btnTable
operator|.
name|append
argument_list|(
literal|"<form method='post' action='instructionalOfferingModify.do' class='FormWithNoPadding'>"
argument_list|)
expr_stmt|;
name|btnTable
operator|.
name|append
argument_list|(
literal|"<input type='hidden' name='uid' value='"
operator|+
name|ioc
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"'>"
argument_list|)
expr_stmt|;
name|btnTable
operator|.
name|append
argument_list|(
literal|"<input type='submit' name='op' value='Class Setup' title='Multiple Class Setup' class='btn'> "
argument_list|)
expr_stmt|;
name|btnTable
operator|.
name|append
argument_list|(
literal|"</form>"
argument_list|)
expr_stmt|;
name|btnTable
operator|.
name|append
argument_list|(
literal|"</td>"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ioc
operator|.
name|hasClasses
argument_list|()
operator|&&
name|isLimitedEditable
condition|)
block|{
name|btnTable
operator|.
name|append
argument_list|(
literal|"<td>"
argument_list|)
expr_stmt|;
name|btnTable
operator|.
name|append
argument_list|(
literal|"<form method='post' action='classInstructorAssignment.do' class='FormWithNoPadding'>"
argument_list|)
expr_stmt|;
name|btnTable
operator|.
name|append
argument_list|(
literal|"<input type='hidden' name='uid' value='"
operator|+
name|ioc
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"'>"
argument_list|)
expr_stmt|;
name|btnTable
operator|.
name|append
argument_list|(
literal|"<input type='submit' name='op' value='Assign Instructors' title='Class Instructor Assignment' class='btn'> "
argument_list|)
expr_stmt|;
name|btnTable
operator|.
name|append
argument_list|(
literal|"</form>"
argument_list|)
expr_stmt|;
name|btnTable
operator|.
name|append
argument_list|(
literal|"</td>"
argument_list|)
expr_stmt|;
block|}
comment|/* 	        if (isFullyEditable) { //config is editable PLUS all subparts are editable as well 		        btnTable.append("<td>"); 		        btnTable.append("<form method='post' action='instructionalOfferingConfigEdit.do' class='FormWithNoPadding'>"); 		        btnTable.append("<input type='hidden' name='configId' value='" + ioc.getUniqueId().toString() + "'>"); 		        btnTable.append("<input type='submit' name='op' value='Duplicate' title='Copy as a new Configuration' class='btn'>"); 		        btnTable.append("</form>"); 		        btnTable.append("</td>"); 	        }             */
comment|//TODO Reservations - functionality to be made visible later
comment|/* 	        if (isEditable) { 	        	btnTable.append("<td>"); 	        	btnTable.append("<form method='post' action='reservationAdd.do' class='FormWithNoPadding'>"); 	        	btnTable.append("<input type='hidden' name='ownerId' value='" + ioc.getUniqueId().toString() + "'>"); 	        	btnTable.append("<input type='hidden' name='ownerClassId' value='" + Constants.RESV_OWNER_CONFIG + "'>"); 	        	btnTable.append("<input type='submit' name='op' value='Reservations' title='Manage Reservations' class='btn'> "); 	        	btnTable.append("</form>"); 	        	btnTable.append("</td>"); 	        } 	        */
name|btnTable
operator|.
name|append
argument_list|(
literal|"</tr>"
argument_list|)
expr_stmt|;
name|btnTable
operator|.
name|append
argument_list|(
literal|"</table>"
argument_list|)
expr_stmt|;
block|}
name|btnTable
operator|.
name|append
argument_list|(
literal|"</td></tr></table>"
argument_list|)
expr_stmt|;
return|return
operator|(
name|btnTable
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|public
name|void
name|htmlTableForInstructionalOfferingConfig
parameter_list|(
name|Vector
name|subpartIds
parameter_list|,
name|ClassAssignmentProxy
name|classAssignment
parameter_list|,
name|ExamAssignmentProxy
name|examAssignment
parameter_list|,
name|Long
name|instrOfferingConfigId
parameter_list|,
name|User
name|user
parameter_list|,
name|JspWriter
name|outputStream
parameter_list|)
block|{
if|if
condition|(
name|instrOfferingConfigId
operator|!=
literal|null
operator|&&
name|user
operator|!=
literal|null
condition|)
block|{
name|InstrOfferingConfigDAO
name|iocDao
init|=
operator|new
name|InstrOfferingConfigDAO
argument_list|()
decl_stmt|;
name|InstrOfferingConfig
name|ioc
init|=
name|iocDao
operator|.
name|get
argument_list|(
name|instrOfferingConfigId
argument_list|)
decl_stmt|;
name|this
operator|.
name|htmlTableForInstructionalOfferingConfig
argument_list|(
name|subpartIds
argument_list|,
name|classAssignment
argument_list|,
name|examAssignment
argument_list|,
name|ioc
argument_list|,
name|user
argument_list|,
name|outputStream
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|htmlTableForInstructionalOfferingConfig
parameter_list|(
name|Vector
name|subpartIds
parameter_list|,
name|ClassAssignmentProxy
name|classAssignment
parameter_list|,
name|ExamAssignmentProxy
name|examAssignment
parameter_list|,
name|InstrOfferingConfig
name|ioc
parameter_list|,
name|User
name|user
parameter_list|,
name|JspWriter
name|outputStream
parameter_list|)
block|{
if|if
condition|(
literal|"yes"
operator|.
name|equals
argument_list|(
name|Settings
operator|.
name|getSettingValue
argument_list|(
name|user
argument_list|,
name|Constants
operator|.
name|SETTINGS_KEEP_SORT
argument_list|)
argument_list|)
condition|)
block|{
name|setClassComparator
argument_list|(
operator|new
name|ClassComparator
argument_list|(
name|UserData
operator|.
name|getProperty
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|,
literal|"InstructionalOfferingList.sortBy"
argument_list|,
name|ClassListForm
operator|.
name|sSortByName
argument_list|)
argument_list|,
name|classAssignment
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ioc
operator|!=
literal|null
operator|&&
name|user
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|setDisplayDistributionPrefs
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|isShowTimetable
argument_list|()
condition|)
block|{
name|boolean
name|hasTimetable
init|=
literal|false
decl_stmt|;
try|try
block|{
name|TimetableManager
name|manager
init|=
name|TimetableManager
operator|.
name|getManager
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|manager
operator|!=
literal|null
operator|&&
name|manager
operator|.
name|canSeeTimetable
argument_list|(
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
argument_list|,
name|user
argument_list|)
operator|&&
name|classAssignment
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|classAssignment
operator|instanceof
name|CachedClassAssignmentProxy
condition|)
block|{
name|Vector
name|allClasses
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|k
init|=
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
operator|!
name|hasTimetable
operator|&&
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|ss
init|=
operator|(
name|SchedulingSubpart
operator|)
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|l
init|=
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|l
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|l
operator|.
name|next
argument_list|()
decl_stmt|;
name|allClasses
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
block|}
operator|(
operator|(
name|CachedClassAssignmentProxy
operator|)
name|classAssignment
operator|)
operator|.
name|setCache
argument_list|(
name|allClasses
argument_list|)
expr_stmt|;
name|hasTimetable
operator|=
operator|!
name|classAssignment
operator|.
name|getAssignmentTable
argument_list|(
name|allClasses
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Iterator
name|k
init|=
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
operator|!
name|hasTimetable
operator|&&
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|ss
init|=
operator|(
name|SchedulingSubpart
operator|)
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|l
init|=
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|l
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|l
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|classAssignment
operator|.
name|getAssignment
argument_list|(
name|clazz
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|hasTimetable
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|setDisplayTimetable
argument_list|(
name|hasTimetable
argument_list|)
expr_stmt|;
block|}
name|boolean
name|isEditable
init|=
name|ioc
operator|.
name|isEditableBy
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|boolean
name|isFullyEditable
init|=
name|ioc
operator|.
name|isEditableBy
argument_list|(
name|user
argument_list|)
decl_stmt|;
comment|//config is editable PLUS all subparts are editable as well
name|boolean
name|isExtManaged
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|isEditable
condition|)
block|{
name|isExtManaged
operator|=
name|ioc
operator|.
name|hasExternallyManagedSubparts
argument_list|(
name|user
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|boolean
name|isLimitedEditable
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|ioc
operator|.
name|hasClasses
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|ss
init|=
operator|(
name|SchedulingSubpart
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|isLimitedEditable
argument_list|(
name|user
argument_list|)
condition|)
block|{
name|isLimitedEditable
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ss
operator|.
name|isEditableBy
argument_list|(
name|user
argument_list|)
condition|)
name|isFullyEditable
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|getDisplayConfigOpButtons
argument_list|()
condition|)
block|{
try|try
block|{
name|outputStream
operator|.
name|write
argument_list|(
name|this
operator|.
name|buttonsTable
argument_list|(
name|ioc
argument_list|,
name|isEditable
argument_list|,
name|isFullyEditable
argument_list|,
name|isLimitedEditable
argument_list|,
name|isExtManaged
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
block|}
block|}
name|setVisibleColumns
argument_list|(
name|COLUMNS
argument_list|)
expr_stmt|;
name|TableStream
name|configTable
init|=
name|this
operator|.
name|initTable
argument_list|(
name|outputStream
argument_list|)
decl_stmt|;
name|this
operator|.
name|buildConfigRow
argument_list|(
name|subpartIds
argument_list|,
name|classAssignment
argument_list|,
name|examAssignment
argument_list|,
name|configTable
argument_list|,
name|ioc
argument_list|,
name|user
argument_list|,
operator|!
name|getDisplayConfigOpButtons
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|configTable
operator|.
name|tableComplete
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|htmlConfigTablesForInstructionalOffering
parameter_list|(
name|HttpSession
name|session
parameter_list|,
name|ClassAssignmentProxy
name|classAssignment
parameter_list|,
name|ExamAssignmentProxy
name|examAssignment
parameter_list|,
name|Long
name|instructionalOffering
parameter_list|,
name|User
name|user
parameter_list|,
name|JspWriter
name|outputStream
parameter_list|,
name|String
name|backType
parameter_list|,
name|String
name|backId
parameter_list|)
block|{
name|setBackType
argument_list|(
name|backType
argument_list|)
expr_stmt|;
name|setBackId
argument_list|(
name|backId
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"yes"
operator|.
name|equals
argument_list|(
name|Settings
operator|.
name|getSettingValue
argument_list|(
name|user
argument_list|,
name|Constants
operator|.
name|SETTINGS_KEEP_SORT
argument_list|)
argument_list|)
condition|)
block|{
name|setClassComparator
argument_list|(
operator|new
name|ClassComparator
argument_list|(
name|UserData
operator|.
name|getProperty
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|,
literal|"InstructionalOfferingList.sortBy"
argument_list|,
name|ClassListForm
operator|.
name|sSortByName
argument_list|)
argument_list|,
name|classAssignment
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|instructionalOffering
operator|!=
literal|null
operator|&&
name|user
operator|!=
literal|null
condition|)
block|{
name|InstructionalOfferingDAO
name|iDao
init|=
operator|new
name|InstructionalOfferingDAO
argument_list|()
decl_stmt|;
name|InstructionalOffering
name|io
init|=
name|iDao
operator|.
name|get
argument_list|(
name|instructionalOffering
argument_list|)
decl_stmt|;
name|setUserSettings
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|Vector
name|subpartIds
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
if|if
condition|(
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|TreeSet
name|configs
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|InstrOfferingConfigComparator
argument_list|(
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|configs
operator|.
name|addAll
argument_list|(
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
argument_list|)
expr_stmt|;
name|InstrOfferingConfig
name|ioc
init|=
literal|null
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|configs
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|ioc
operator|=
operator|(
name|InstrOfferingConfig
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
operator|&&
name|getDisplayConfigOpButtons
argument_list|()
condition|)
block|{
try|try
block|{
name|outputStream
operator|.
name|println
argument_list|(
literal|"<br>"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
block|}
block|}
name|this
operator|.
name|htmlTableForInstructionalOfferingConfig
argument_list|(
name|subpartIds
argument_list|,
name|classAssignment
argument_list|,
name|examAssignment
argument_list|,
name|ioc
argument_list|,
name|user
argument_list|,
name|outputStream
argument_list|)
expr_stmt|;
block|}
block|}
name|Navigation
operator|.
name|set
argument_list|(
name|session
argument_list|,
name|Navigation
operator|.
name|sSchedulingSubpartLevel
argument_list|,
name|subpartIds
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|TableCell
name|buildPrefGroupLabel
parameter_list|(
name|PreferenceGroup
name|prefGroup
parameter_list|,
name|String
name|indentSpaces
parameter_list|,
name|boolean
name|isEditable
parameter_list|,
name|String
name|prevLabel
parameter_list|)
block|{
name|TableCell
name|cell
init|=
name|super
operator|.
name|buildPrefGroupLabel
argument_list|(
name|prefGroup
argument_list|,
name|indentSpaces
argument_list|,
name|isEditable
argument_list|,
name|prevLabel
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"PreferenceGroup"
operator|.
name|equals
argument_list|(
name|getBackType
argument_list|()
argument_list|)
operator|&&
name|prefGroup
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|getBackId
argument_list|()
argument_list|)
condition|)
name|cell
operator|.
name|addContent
argument_list|(
literal|"<A name=\"back\"></A>"
argument_list|)
expr_stmt|;
return|return
name|cell
return|;
block|}
block|}
end_class

end_unit

