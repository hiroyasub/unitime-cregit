begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|WebTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|PdfEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|PdfFont
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Chunk
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Font
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|PageSize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Paragraph
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Rectangle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|pdf
operator|.
name|PdfPCell
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|pdf
operator|.
name|PdfPTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|pdf
operator|.
name|PdfWriter
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|PdfWebTable
extends|extends
name|WebTable
block|{
specifier|private
name|Hashtable
name|iImages
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
specifier|public
name|void
name|addImage
parameter_list|(
name|String
name|name
parameter_list|,
name|java
operator|.
name|awt
operator|.
name|Image
name|image
parameter_list|)
block|{
name|iImages
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|image
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PdfWebTable
parameter_list|(
name|int
name|columns
parameter_list|,
name|String
name|name
parameter_list|,
name|String
index|[]
name|headers
parameter_list|,
name|String
index|[]
name|align
parameter_list|,
name|boolean
index|[]
name|asc
parameter_list|)
block|{
name|this
argument_list|(
name|columns
argument_list|,
name|name
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|,
name|align
argument_list|,
name|asc
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PdfWebTable
parameter_list|(
name|int
name|columns
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|ref
parameter_list|,
name|String
index|[]
name|headers
parameter_list|,
name|String
index|[]
name|align
parameter_list|,
name|boolean
index|[]
name|asc
parameter_list|)
block|{
name|super
argument_list|(
name|columns
argument_list|,
name|name
argument_list|,
name|ref
argument_list|,
name|headers
argument_list|,
name|align
argument_list|,
name|asc
argument_list|)
expr_stmt|;
block|}
specifier|private
name|PdfPCell
name|createCell
parameter_list|()
block|{
name|PdfPCell
name|cell
init|=
operator|new
name|PdfPCell
argument_list|()
decl_stmt|;
name|cell
operator|.
name|setBorderColor
argument_list|(
name|Color
operator|.
name|BLACK
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setPadding
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setBorderWidth
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setVerticalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_TOP
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setHorizontalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_CENTER
argument_list|)
expr_stmt|;
return|return
name|cell
return|;
block|}
specifier|private
name|float
name|addImage
parameter_list|(
name|PdfPCell
name|cell
parameter_list|,
name|String
name|name
parameter_list|)
block|{
try|try
block|{
name|java
operator|.
name|awt
operator|.
name|Image
name|awtImage
init|=
operator|(
name|java
operator|.
name|awt
operator|.
name|Image
operator|)
name|iImages
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|awtImage
operator|==
literal|null
condition|)
return|return
literal|0
return|;
name|Image
name|img
init|=
name|Image
operator|.
name|getInstance
argument_list|(
name|awtImage
argument_list|,
name|Color
operator|.
name|WHITE
argument_list|)
decl_stmt|;
name|Chunk
name|ck
init|=
operator|new
name|Chunk
argument_list|(
name|img
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|cell
operator|.
name|getPhrase
argument_list|()
operator|==
literal|null
condition|)
block|{
name|cell
operator|.
name|setPhrase
argument_list|(
operator|new
name|Paragraph
argument_list|(
name|ck
argument_list|)
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setVerticalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_TOP
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setHorizontalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_CENTER
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cell
operator|.
name|getPhrase
argument_list|()
operator|.
name|add
argument_list|(
name|ck
argument_list|)
expr_stmt|;
block|}
return|return
name|awtImage
operator|.
name|getWidth
argument_list|(
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
block|}
specifier|public
specifier|static
name|float
name|getWidth
parameter_list|(
name|String
name|text
parameter_list|,
name|boolean
name|bold
parameter_list|,
name|boolean
name|italic
parameter_list|)
block|{
name|Font
name|font
init|=
name|PdfFont
operator|.
name|getFont
argument_list|(
name|bold
argument_list|,
name|italic
argument_list|)
decl_stmt|;
name|float
name|width
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|text
operator|.
name|indexOf
argument_list|(
literal|'\n'
argument_list|)
operator|>=
literal|0
condition|)
block|{
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|text
argument_list|,
literal|"\n"
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
name|width
operator|=
name|Math
operator|.
name|max
argument_list|(
name|width
argument_list|,
name|font
operator|.
name|getBaseFont
argument_list|()
operator|.
name|getWidthPoint
argument_list|(
name|s
operator|.
name|nextToken
argument_list|()
argument_list|,
name|font
operator|.
name|getSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
name|width
operator|=
name|Math
operator|.
name|max
argument_list|(
name|width
argument_list|,
name|font
operator|.
name|getBaseFont
argument_list|()
operator|.
name|getWidthPoint
argument_list|(
name|text
argument_list|,
name|font
operator|.
name|getSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|width
return|;
block|}
specifier|public
specifier|static
name|float
name|getWidthOfLastLine
parameter_list|(
name|String
name|text
parameter_list|,
name|boolean
name|bold
parameter_list|,
name|boolean
name|italic
parameter_list|)
block|{
name|Font
name|font
init|=
name|PdfFont
operator|.
name|getFont
argument_list|(
name|bold
argument_list|,
name|italic
argument_list|)
decl_stmt|;
name|float
name|width
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|text
operator|.
name|indexOf
argument_list|(
literal|'\n'
argument_list|)
operator|>=
literal|0
condition|)
block|{
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|text
argument_list|,
literal|"\n"
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
name|width
operator|=
name|font
operator|.
name|getBaseFont
argument_list|()
operator|.
name|getWidthPoint
argument_list|(
name|s
operator|.
name|nextToken
argument_list|()
argument_list|,
name|font
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
name|width
operator|=
name|Math
operator|.
name|max
argument_list|(
name|width
argument_list|,
name|font
operator|.
name|getBaseFont
argument_list|()
operator|.
name|getWidthPoint
argument_list|(
name|text
argument_list|,
name|font
operator|.
name|getSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|width
return|;
block|}
specifier|private
name|float
name|addText
parameter_list|(
name|PdfPCell
name|cell
parameter_list|,
name|String
name|text
parameter_list|,
name|boolean
name|bold
parameter_list|,
name|boolean
name|italic
parameter_list|,
name|boolean
name|underline
parameter_list|,
name|Color
name|color
parameter_list|,
name|Color
name|bgColor
parameter_list|)
block|{
name|Font
name|font
init|=
name|PdfFont
operator|.
name|getFont
argument_list|(
name|bold
argument_list|,
name|italic
argument_list|,
name|underline
argument_list|,
name|color
argument_list|)
decl_stmt|;
name|Chunk
name|chunk
init|=
operator|new
name|Chunk
argument_list|(
name|text
argument_list|,
name|font
argument_list|)
decl_stmt|;
if|if
condition|(
name|bgColor
operator|!=
literal|null
condition|)
name|chunk
operator|.
name|setBackground
argument_list|(
name|bgColor
argument_list|)
expr_stmt|;
if|if
condition|(
name|cell
operator|.
name|getPhrase
argument_list|()
operator|==
literal|null
condition|)
block|{
name|cell
operator|.
name|setPhrase
argument_list|(
operator|new
name|Paragraph
argument_list|(
name|chunk
argument_list|)
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setVerticalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_TOP
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setHorizontalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_CENTER
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cell
operator|.
name|getPhrase
argument_list|()
operator|.
name|add
argument_list|(
name|chunk
argument_list|)
expr_stmt|;
block|}
name|float
name|width
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|text
operator|.
name|indexOf
argument_list|(
literal|'\n'
argument_list|)
operator|>=
literal|0
condition|)
block|{
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|text
argument_list|,
literal|"\n"
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
name|width
operator|=
name|Math
operator|.
name|max
argument_list|(
name|width
argument_list|,
name|font
operator|.
name|getBaseFont
argument_list|()
operator|.
name|getWidthPoint
argument_list|(
name|s
operator|.
name|nextToken
argument_list|()
argument_list|,
name|font
operator|.
name|getSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
name|width
operator|=
name|Math
operator|.
name|max
argument_list|(
name|width
argument_list|,
name|font
operator|.
name|getBaseFont
argument_list|()
operator|.
name|getWidthPoint
argument_list|(
name|text
argument_list|,
name|font
operator|.
name|getSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|width
return|;
block|}
specifier|private
name|float
name|addText
parameter_list|(
name|PdfPCell
name|cell
parameter_list|,
name|String
name|text
parameter_list|,
name|boolean
name|bold
parameter_list|,
name|boolean
name|italic
parameter_list|,
name|boolean
name|underline
parameter_list|,
name|Color
name|color
parameter_list|,
name|boolean
name|borderTop
parameter_list|,
name|boolean
name|borderBottom
parameter_list|,
name|boolean
name|borderLeft
parameter_list|,
name|boolean
name|borderRight
parameter_list|,
name|Color
name|borderColor
parameter_list|,
name|Color
name|bgColor
parameter_list|)
block|{
name|cell
operator|.
name|setBorderWidth
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|borderTop
condition|)
block|{
name|cell
operator|.
name|setBorder
argument_list|(
name|PdfPCell
operator|.
name|TOP
argument_list|)
expr_stmt|;
if|if
condition|(
name|borderColor
operator|==
literal|null
condition|)
name|cell
operator|.
name|setBorderColorTop
argument_list|(
name|Color
operator|.
name|BLACK
argument_list|)
expr_stmt|;
else|else
name|cell
operator|.
name|setBorderColorTop
argument_list|(
name|borderColor
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|borderBottom
condition|)
block|{
name|cell
operator|.
name|setBorder
argument_list|(
name|PdfPCell
operator|.
name|BOTTOM
argument_list|)
expr_stmt|;
if|if
condition|(
name|borderColor
operator|==
literal|null
condition|)
name|cell
operator|.
name|setBorderColorBottom
argument_list|(
name|Color
operator|.
name|BLACK
argument_list|)
expr_stmt|;
else|else
name|cell
operator|.
name|setBorderColorBottom
argument_list|(
name|borderColor
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|borderLeft
condition|)
block|{
name|cell
operator|.
name|setBorder
argument_list|(
name|PdfPCell
operator|.
name|LEFT
argument_list|)
expr_stmt|;
if|if
condition|(
name|borderColor
operator|==
literal|null
condition|)
name|cell
operator|.
name|setBorderColorLeft
argument_list|(
name|Color
operator|.
name|BLACK
argument_list|)
expr_stmt|;
else|else
name|cell
operator|.
name|setBorderColorLeft
argument_list|(
name|borderColor
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|borderRight
condition|)
block|{
name|cell
operator|.
name|setBorder
argument_list|(
name|PdfPCell
operator|.
name|RIGHT
argument_list|)
expr_stmt|;
if|if
condition|(
name|borderColor
operator|==
literal|null
condition|)
name|cell
operator|.
name|setBorderColorRight
argument_list|(
name|Color
operator|.
name|BLACK
argument_list|)
expr_stmt|;
else|else
name|cell
operator|.
name|setBorderColorRight
argument_list|(
name|borderColor
argument_list|)
expr_stmt|;
block|}
return|return
name|addText
argument_list|(
name|cell
argument_list|,
name|text
argument_list|,
name|bold
argument_list|,
name|italic
argument_list|,
name|underline
argument_list|,
name|color
argument_list|,
name|bgColor
argument_list|)
return|;
block|}
specifier|private
name|float
name|addText
parameter_list|(
name|PdfPCell
name|cell
parameter_list|,
name|String
name|text
parameter_list|,
name|boolean
name|bold
parameter_list|,
name|boolean
name|italic
parameter_list|,
name|boolean
name|underline
parameter_list|,
name|Color
name|color
parameter_list|,
name|boolean
name|border
parameter_list|,
name|Color
name|borderColor
parameter_list|,
name|Color
name|bgColor
parameter_list|)
block|{
if|if
condition|(
name|border
condition|)
block|{
name|cell
operator|.
name|setBorderWidth
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setBorder
argument_list|(
name|PdfPCell
operator|.
name|RIGHT
operator||
name|PdfPCell
operator|.
name|LEFT
operator||
name|PdfPCell
operator|.
name|TOP
operator||
name|PdfPCell
operator|.
name|BOTTOM
argument_list|)
expr_stmt|;
if|if
condition|(
name|borderColor
operator|==
literal|null
condition|)
name|cell
operator|.
name|setBorderColor
argument_list|(
name|Color
operator|.
name|BLACK
argument_list|)
expr_stmt|;
else|else
name|cell
operator|.
name|setBorderColor
argument_list|(
name|borderColor
argument_list|)
expr_stmt|;
block|}
return|return
name|addText
argument_list|(
name|cell
argument_list|,
name|text
argument_list|,
name|bold
argument_list|,
name|italic
argument_list|,
name|underline
argument_list|,
name|color
argument_list|,
name|bgColor
argument_list|)
return|;
block|}
specifier|private
name|float
name|addText
parameter_list|(
name|PdfPCell
name|cell
parameter_list|,
name|String
name|text
parameter_list|,
name|boolean
name|bold
parameter_list|)
block|{
if|if
condition|(
name|text
operator|==
literal|null
condition|)
return|return
name|addText
argument_list|(
name|cell
argument_list|,
literal|""
argument_list|,
name|bold
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Color
operator|.
name|BLACK
argument_list|,
literal|null
argument_list|)
return|;
if|if
condition|(
name|text
operator|.
name|indexOf
argument_list|(
literal|"@@"
argument_list|)
operator|<
literal|0
condition|)
return|return
name|addText
argument_list|(
name|cell
argument_list|,
name|text
argument_list|,
name|bold
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Color
operator|.
name|BLACK
argument_list|,
literal|null
argument_list|)
return|;
name|Color
name|color
init|=
name|Color
operator|.
name|BLACK
decl_stmt|;
name|Color
name|bcolor
init|=
name|Color
operator|.
name|BLACK
decl_stmt|;
name|Color
name|bgColor
init|=
literal|null
decl_stmt|;
name|boolean
name|bd
init|=
name|bold
decl_stmt|,
name|it
init|=
literal|false
decl_stmt|,
name|un
init|=
literal|false
decl_stmt|;
name|boolean
name|ba
init|=
literal|false
decl_stmt|,
name|bt
init|=
literal|false
decl_stmt|,
name|bb
init|=
literal|false
decl_stmt|,
name|bl
init|=
literal|false
decl_stmt|,
name|br
init|=
literal|false
decl_stmt|;
name|float
name|maxWidth
init|=
literal|0
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|text
argument_list|,
literal|"\n"
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|line
init|=
name|s
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|float
name|width
init|=
literal|0
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|idx
init|=
name|line
operator|.
name|indexOf
argument_list|(
literal|"@@"
argument_list|,
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|ba
condition|)
block|{
name|width
operator|+=
name|addText
argument_list|(
name|cell
argument_list|,
operator|(
operator|!
name|first
operator|&&
name|pos
operator|==
literal|0
condition|?
literal|"\n"
else|:
literal|""
operator|)
operator|+
name|line
operator|.
name|substring
argument_list|(
name|pos
argument_list|)
argument_list|,
name|bd
argument_list|,
name|it
argument_list|,
name|un
argument_list|,
name|color
argument_list|,
literal|true
argument_list|,
name|bcolor
argument_list|,
name|bgColor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|bt
operator|||
name|bb
operator|||
name|bl
operator|||
name|br
condition|)
block|{
name|width
operator|+=
name|addText
argument_list|(
name|cell
argument_list|,
operator|(
operator|!
name|first
operator|&&
name|pos
operator|==
literal|0
condition|?
literal|"\n"
else|:
literal|""
operator|)
operator|+
name|line
operator|.
name|substring
argument_list|(
name|pos
argument_list|)
argument_list|,
name|bd
argument_list|,
name|it
argument_list|,
name|un
argument_list|,
name|color
argument_list|,
name|bt
argument_list|,
name|bb
argument_list|,
name|bl
argument_list|,
name|br
argument_list|,
name|bcolor
argument_list|,
name|bgColor
argument_list|)
expr_stmt|;
block|}
else|else
name|width
operator|+=
name|addText
argument_list|(
name|cell
argument_list|,
operator|(
operator|!
name|first
operator|&&
name|pos
operator|==
literal|0
condition|?
literal|"\n"
else|:
literal|""
operator|)
operator|+
name|line
operator|.
name|substring
argument_list|(
name|pos
argument_list|)
argument_list|,
name|bd
argument_list|,
name|it
argument_list|,
name|un
argument_list|,
name|color
argument_list|,
name|bgColor
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
else|else
block|{
if|if
condition|(
name|ba
condition|)
block|{
name|width
operator|+=
name|addText
argument_list|(
name|cell
argument_list|,
operator|(
operator|!
name|first
operator|&&
name|pos
operator|==
literal|0
condition|?
literal|"\n"
else|:
literal|""
operator|)
operator|+
name|line
operator|.
name|substring
argument_list|(
name|pos
argument_list|,
name|idx
argument_list|)
argument_list|,
name|bd
argument_list|,
name|it
argument_list|,
name|un
argument_list|,
name|color
argument_list|,
literal|true
argument_list|,
name|bcolor
argument_list|,
name|bgColor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|bt
operator|||
name|bb
operator|||
name|bl
operator|||
name|br
condition|)
block|{
name|width
operator|+=
name|addText
argument_list|(
name|cell
argument_list|,
operator|(
operator|!
name|first
operator|&&
name|pos
operator|==
literal|0
condition|?
literal|"\n"
else|:
literal|""
operator|)
operator|+
name|line
operator|.
name|substring
argument_list|(
name|pos
argument_list|,
name|idx
argument_list|)
argument_list|,
name|bd
argument_list|,
name|it
argument_list|,
name|un
argument_list|,
name|color
argument_list|,
name|bt
argument_list|,
name|bb
argument_list|,
name|bl
argument_list|,
name|br
argument_list|,
name|bcolor
argument_list|,
name|bgColor
argument_list|)
expr_stmt|;
block|}
else|else
name|width
operator|+=
name|addText
argument_list|(
name|cell
argument_list|,
operator|(
operator|!
name|first
operator|&&
name|pos
operator|==
literal|0
condition|?
literal|"\n"
else|:
literal|""
operator|)
operator|+
name|line
operator|.
name|substring
argument_list|(
name|pos
argument_list|,
name|idx
argument_list|)
argument_list|,
name|bd
argument_list|,
name|it
argument_list|,
name|un
argument_list|,
name|color
argument_list|,
name|bgColor
argument_list|)
expr_stmt|;
block|}
name|pos
operator|=
name|idx
expr_stmt|;
block|}
name|pos
operator|+=
literal|2
expr_stmt|;
comment|//for @@
name|String
name|cmd
init|=
name|line
operator|.
name|substring
argument_list|(
name|pos
argument_list|,
name|line
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|,
name|pos
argument_list|)
argument_list|)
decl_stmt|;
name|pos
operator|+=
name|cmd
operator|.
name|length
argument_list|()
operator|+
literal|1
expr_stmt|;
if|if
condition|(
literal|"BOLD"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
name|bd
operator|=
literal|true
expr_stmt|;
if|if
condition|(
literal|"END_BOLD"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
name|bd
operator|=
literal|false
expr_stmt|;
if|if
condition|(
literal|"ITALIC"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
name|it
operator|=
literal|true
expr_stmt|;
if|if
condition|(
literal|"END_ITALIC"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
name|it
operator|=
literal|false
expr_stmt|;
if|if
condition|(
literal|"UNDERLINE"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
name|un
operator|=
literal|true
expr_stmt|;
if|if
condition|(
literal|"END_UNDERLINE"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
name|un
operator|=
literal|false
expr_stmt|;
if|if
condition|(
literal|"COLOR"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|String
name|hex
init|=
name|line
operator|.
name|substring
argument_list|(
name|pos
argument_list|,
name|line
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|,
name|pos
argument_list|)
argument_list|)
decl_stmt|;
name|pos
operator|+=
name|hex
operator|.
name|length
argument_list|()
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|hex
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
name|hex
operator|=
name|hex
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|color
operator|=
operator|new
name|Color
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|hex
argument_list|,
literal|16
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"END_COLOR"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|color
operator|=
name|Color
operator|.
name|BLACK
expr_stmt|;
block|}
if|if
condition|(
literal|"BGCOLOR"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|String
name|hex
init|=
name|line
operator|.
name|substring
argument_list|(
name|pos
argument_list|,
name|line
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|,
name|pos
argument_list|)
argument_list|)
decl_stmt|;
name|pos
operator|+=
name|hex
operator|.
name|length
argument_list|()
operator|+
literal|1
expr_stmt|;
name|bgColor
operator|=
operator|new
name|Color
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|hex
argument_list|,
literal|16
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"END_BGCOLOR"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|bgColor
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
literal|"IMAGE"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|line
operator|.
name|substring
argument_list|(
name|pos
argument_list|,
name|line
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|,
name|pos
argument_list|)
argument_list|)
decl_stmt|;
name|pos
operator|+=
name|name
operator|.
name|length
argument_list|()
operator|+
literal|1
expr_stmt|;
name|width
operator|+=
name|addImage
argument_list|(
name|cell
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"BORDER_ALL"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"BORDER_TOP"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"BORDER_BOTTOM"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"BORDER_LEFT"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"BORDER_RIGHT"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|String
name|hex
init|=
name|line
operator|.
name|substring
argument_list|(
name|pos
argument_list|,
name|line
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|,
name|pos
argument_list|)
argument_list|)
decl_stmt|;
name|pos
operator|+=
name|hex
operator|.
name|length
argument_list|()
operator|+
literal|1
expr_stmt|;
name|bcolor
operator|=
operator|new
name|Color
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|hex
argument_list|,
literal|16
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"BORDER_ALL"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|ba
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
literal|"BORDER_TOP"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|bt
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
literal|"BORDER_BOTTOM"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|bb
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
literal|"BORDER_LEFT"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|bl
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
literal|"BORDER_RIGHT"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|br
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
literal|"NO_WRAP"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|cell
operator|.
name|setNoWrap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|maxWidth
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxWidth
argument_list|,
name|width
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|maxWidth
return|;
block|}
specifier|private
name|float
index|[]
name|widths
init|=
literal|null
decl_stmt|;
comment|/** 	 * Prints pdf table. By default does not split table across 	 * page boundaries 	 * @param ordCol 	 * @return 	 */
specifier|public
name|PdfPTable
name|printPdfTable
parameter_list|(
name|int
name|ordCol
parameter_list|)
block|{
return|return
name|printPdfTable
argument_list|(
name|ordCol
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/** 	 * Prints pdf table. By default does not split table across 	 * page boundaries  	 * @param ordCol 	 * @param keepTogether true does not split table across pages 	 * @return 	 */
specifier|public
name|PdfPTable
name|printPdfTable
parameter_list|(
name|int
name|ordCol
parameter_list|,
name|boolean
name|keepTogether
parameter_list|)
block|{
name|PdfPTable
name|table
init|=
operator|new
name|PdfPTable
argument_list|(
name|getNrColumns
argument_list|()
argument_list|)
decl_stmt|;
name|table
operator|.
name|setWidthPercentage
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|table
operator|.
name|getDefaultCell
argument_list|()
operator|.
name|setPadding
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|table
operator|.
name|getDefaultCell
argument_list|()
operator|.
name|setBorderWidth
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|table
operator|.
name|setSplitRows
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|table
operator|.
name|setKeepTogether
argument_list|(
name|keepTogether
argument_list|)
expr_stmt|;
name|boolean
name|asc
init|=
operator|(
name|ordCol
operator|==
literal|0
operator|||
name|iAsc
operator|==
literal|null
operator|||
name|iAsc
operator|.
name|length
operator|<=
name|Math
operator|.
name|abs
argument_list|(
name|ordCol
argument_list|)
operator|-
literal|1
condition|?
literal|true
else|:
name|iAsc
index|[
name|Math
operator|.
name|abs
argument_list|(
name|ordCol
argument_list|)
operator|-
literal|1
index|]
operator|)
decl_stmt|;
if|if
condition|(
name|ordCol
operator|<
literal|0
condition|)
name|asc
operator|=
operator|!
name|asc
expr_stmt|;
name|widths
operator|=
operator|new
name|float
index|[
name|iColumns
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iColumns
condition|;
name|i
operator|++
control|)
name|widths
index|[
name|i
index|]
operator|=
literal|0f
expr_stmt|;
name|String
name|lastLine
index|[]
init|=
operator|new
name|String
index|[
name|Math
operator|.
name|max
argument_list|(
name|iColumns
argument_list|,
operator|(
name|iHeaders
operator|==
literal|null
condition|?
literal|0
else|:
name|iHeaders
operator|.
name|length
operator|)
argument_list|)
index|]
decl_stmt|;
if|if
condition|(
name|iHeaders
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iColumns
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|isFiltered
argument_list|(
name|i
argument_list|)
condition|)
continue|continue;
name|PdfPCell
name|c
init|=
name|createCell
argument_list|()
decl_stmt|;
name|c
operator|.
name|setBorderWidthBottom
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|float
name|width
init|=
name|addText
argument_list|(
name|c
argument_list|,
name|iHeaders
index|[
name|i
index|]
operator|==
literal|null
condition|?
literal|""
else|:
name|iHeaders
index|[
name|i
index|]
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|widths
index|[
name|i
index|]
operator|=
name|Math
operator|.
name|max
argument_list|(
name|widths
index|[
name|i
index|]
argument_list|,
name|width
argument_list|)
expr_stmt|;
name|String
name|align
init|=
operator|(
name|iAlign
operator|!=
literal|null
condition|?
name|iAlign
index|[
name|i
index|]
else|:
literal|"left"
operator|)
decl_stmt|;
if|if
condition|(
literal|"left"
operator|.
name|equals
argument_list|(
name|align
argument_list|)
condition|)
name|c
operator|.
name|setHorizontalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"right"
operator|.
name|equals
argument_list|(
name|align
argument_list|)
condition|)
name|c
operator|.
name|setHorizontalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"center"
operator|.
name|equals
argument_list|(
name|align
argument_list|)
condition|)
name|c
operator|.
name|setHorizontalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_CENTER
argument_list|)
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|setHeaderRows
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ordCol
operator|!=
literal|0
condition|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|iLines
argument_list|,
operator|new
name|WebTableComparator
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|ordCol
argument_list|)
operator|-
literal|1
argument_list|,
name|asc
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|el
init|=
literal|0
init|;
name|el
operator|<
name|iLines
operator|.
name|size
argument_list|()
condition|;
name|el
operator|++
control|)
block|{
name|WebTableLine
name|wtline
init|=
operator|(
name|WebTableLine
operator|)
name|iLines
operator|.
name|elementAt
argument_list|(
name|el
argument_list|)
decl_stmt|;
name|String
index|[]
name|line
init|=
name|wtline
operator|.
name|getLine
argument_list|()
decl_stmt|;
name|boolean
name|blank
init|=
name|iBlankWhenSame
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iColumns
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|isFiltered
argument_list|(
name|i
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|blank
operator|&&
name|line
index|[
name|i
index|]
operator|!=
literal|null
operator|&&
operator|!
name|line
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|lastLine
index|[
name|i
index|]
argument_list|)
condition|)
name|blank
operator|=
literal|false
expr_stmt|;
name|PdfPCell
name|c
init|=
name|createCell
argument_list|()
decl_stmt|;
name|float
name|width
init|=
name|addText
argument_list|(
name|c
argument_list|,
name|blank
operator|||
name|line
index|[
name|i
index|]
operator|==
literal|null
condition|?
literal|""
else|:
name|line
index|[
name|i
index|]
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|widths
index|[
name|i
index|]
operator|=
name|Math
operator|.
name|max
argument_list|(
name|widths
index|[
name|i
index|]
argument_list|,
name|width
argument_list|)
expr_stmt|;
name|String
name|align
init|=
operator|(
name|iAlign
operator|!=
literal|null
condition|?
name|iAlign
index|[
name|i
index|]
else|:
literal|"left"
operator|)
decl_stmt|;
if|if
condition|(
literal|"left"
operator|.
name|equals
argument_list|(
name|align
argument_list|)
condition|)
name|c
operator|.
name|setHorizontalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"right"
operator|.
name|equals
argument_list|(
name|align
argument_list|)
condition|)
name|c
operator|.
name|setHorizontalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"center"
operator|.
name|equals
argument_list|(
name|align
argument_list|)
condition|)
name|c
operator|.
name|setHorizontalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_CENTER
argument_list|)
expr_stmt|;
name|applyPdfStyle
argument_list|(
name|c
argument_list|,
name|wtline
argument_list|,
operator|(
name|el
operator|+
literal|1
operator|<
name|iLines
operator|.
name|size
argument_list|()
condition|?
operator|(
name|WebTableLine
operator|)
name|iLines
operator|.
name|elementAt
argument_list|(
name|el
operator|+
literal|1
argument_list|)
else|:
literal|null
operator|)
argument_list|,
name|ordCol
argument_list|)
expr_stmt|;
name|table
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|lastLine
index|[
name|i
index|]
operator|=
name|line
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
try|try
block|{
if|if
condition|(
name|getNrFilteredColumns
argument_list|()
operator|<
literal|0
condition|)
block|{
name|table
operator|.
name|setWidths
argument_list|(
name|widths
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|float
index|[]
name|x
init|=
operator|new
name|float
index|[
name|getNrColumns
argument_list|()
index|]
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iColumns
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|isFiltered
argument_list|(
name|i
argument_list|)
condition|)
continue|continue;
name|x
index|[
name|idx
operator|++
index|]
operator|=
name|widths
index|[
name|i
index|]
expr_stmt|;
block|}
name|table
operator|.
name|setWidths
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
name|table
return|;
block|}
specifier|public
name|float
name|getWidth
parameter_list|()
block|{
name|float
name|totalWidth
init|=
literal|0f
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|widths
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|totalWidth
operator|+=
literal|25f
operator|+
name|widths
index|[
name|i
index|]
expr_stmt|;
name|totalWidth
operator|=
name|Math
operator|.
name|max
argument_list|(
name|PageSize
operator|.
name|LETTER
operator|.
name|getHeight
argument_list|()
argument_list|,
name|totalWidth
argument_list|)
expr_stmt|;
return|return
name|totalWidth
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
specifier|public
name|void
name|exportPdf
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|int
name|ordCol
parameter_list|)
throws|throws
name|Exception
block|{
name|PdfPTable
name|table
init|=
name|printPdfTable
argument_list|(
name|ordCol
argument_list|)
decl_stmt|;
name|float
name|width
init|=
name|getWidth
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|(
operator|new
name|Rectangle
argument_list|(
literal|60f
operator|+
name|width
argument_list|,
literal|60f
operator|+
literal|0.75f
operator|*
name|width
argument_list|)
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|)
decl_stmt|;
name|PdfWriter
name|iWriter
init|=
name|PdfWriter
operator|.
name|getInstance
argument_list|(
name|doc
argument_list|,
name|out
argument_list|)
decl_stmt|;
name|iWriter
operator|.
name|setPageEvent
argument_list|(
operator|new
name|PdfEventHandler
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|open
argument_list|()
expr_stmt|;
if|if
condition|(
name|iName
operator|!=
literal|null
condition|)
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Paragraph
argument_list|(
name|iName
argument_list|,
name|PdfFont
operator|.
name|getBigFont
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|doc
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|applyPdfStyle
parameter_list|(
name|PdfPCell
name|cell
parameter_list|,
name|WebTableLine
name|currentLine
parameter_list|,
name|WebTableLine
name|nextLine
parameter_list|,
name|int
name|order
parameter_list|)
block|{
if|if
condition|(
name|iWebTableTweakStyle
operator|==
literal|null
operator|||
operator|!
operator|(
name|iWebTableTweakStyle
operator|instanceof
name|PdfWebTableTweakStyle
operator|)
condition|)
return|return;
operator|(
operator|(
name|PdfWebTableTweakStyle
operator|)
name|iWebTableTweakStyle
operator|)
operator|.
name|applyPdfStyle
argument_list|(
name|cell
argument_list|,
name|currentLine
argument_list|,
name|nextLine
argument_list|,
name|order
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
interface|interface
name|PdfWebTableTweakStyle
extends|extends
name|WebTableTweakStyle
block|{
specifier|public
name|void
name|applyPdfStyle
parameter_list|(
name|PdfPCell
name|cell
parameter_list|,
name|WebTableLine
name|currentLine
parameter_list|,
name|WebTableLine
name|nextLine
parameter_list|,
name|int
name|orderBy
parameter_list|)
function_decl|;
block|}
block|}
end_class

end_unit

