begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|WebTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcadAreaReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOfferingReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|IndividualReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PosReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Reservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentGroupReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|ClassComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|CourseOfferingComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|InstructionalOfferingComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|SchedulingSubpartComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstructionalOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  * Builds HTML tables for Reservations  *   * @author Heston Fernandes  */
end_comment

begin_class
specifier|public
class|class
name|ReservationsTableBuilder
block|{
specifier|private
specifier|final
name|String
name|colorIncrease
init|=
literal|"#339933"
decl_stmt|;
specifier|private
specifier|final
name|String
name|colorDecrease
init|=
literal|"#CC3333"
decl_stmt|;
specifier|protected
name|WebTable
name|individualResvTbl
init|=
literal|null
decl_stmt|;
specifier|protected
name|WebTable
name|stuGroupResvTbl
init|=
literal|null
decl_stmt|;
specifier|protected
name|WebTable
name|acadAreaResvTbl
init|=
literal|null
decl_stmt|;
specifier|protected
name|WebTable
name|posResvTbl
init|=
literal|null
decl_stmt|;
specifier|protected
name|WebTable
name|courseOffrResvTbl
init|=
literal|null
decl_stmt|;
specifier|protected
name|int
name|irTotal
init|=
literal|0
decl_stmt|;
specifier|protected
name|int
index|[]
name|sgrTotals
init|=
literal|null
decl_stmt|;
specifier|protected
name|int
index|[]
name|aarTotals
init|=
literal|null
decl_stmt|;
specifier|protected
name|int
index|[]
name|prTotals
init|=
literal|null
decl_stmt|;
specifier|protected
name|int
index|[]
name|corTotals
init|=
literal|null
decl_stmt|;
comment|/**      * Set all tables to null      */
specifier|protected
name|void
name|reset
parameter_list|()
block|{
name|individualResvTbl
operator|=
literal|null
expr_stmt|;
name|stuGroupResvTbl
operator|=
literal|null
expr_stmt|;
name|acadAreaResvTbl
operator|=
literal|null
expr_stmt|;
name|posResvTbl
operator|=
literal|null
expr_stmt|;
name|courseOffrResvTbl
operator|=
literal|null
expr_stmt|;
name|irTotal
operator|=
literal|0
expr_stmt|;
name|sgrTotals
operator|=
literal|null
expr_stmt|;
name|aarTotals
operator|=
literal|null
expr_stmt|;
name|prTotals
operator|=
literal|null
expr_stmt|;
name|corTotals
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Add to Individual Reservation Table      * @param resv      * @param onClick      */
specifier|private
name|void
name|buildIndividualResvRow
parameter_list|(
name|IndividualReservation
name|resv
parameter_list|,
name|String
name|onClick
parameter_list|)
block|{
if|if
condition|(
name|individualResvTbl
operator|==
literal|null
condition|)
block|{
name|irTotal
operator|=
literal|0
expr_stmt|;
name|individualResvTbl
operator|=
operator|new
name|WebTable
argument_list|(
literal|5
argument_list|,
literal|""
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"<u>Individual</u>"
block|,
literal|"Type"
block|,
literal|"Priority"
block|,
literal|"Expiration Date"
block|,
literal|"Add Student Over The Limit"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"center"
block|,
literal|"center"
block|,
literal|"center"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
expr_stmt|;
comment|//individualResvTbl.enableHR("#EFEFEF");
block|}
name|String
name|overLimit
init|=
name|resv
operator|.
name|isOverLimit
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"<IMG src='images/tick.gif' border='0' alt='Student can be added over the limit', title='Student can be added over the limit'"
else|:
literal|"&nbsp;"
decl_stmt|;
name|individualResvTbl
operator|.
name|addLine
argument_list|(
name|onClick
argument_list|,
operator|new
name|String
index|[]
block|{
name|resv
operator|.
name|getExternalUniqueId
argument_list|()
block|,
name|resv
operator|.
name|getReservationType
argument_list|()
operator|.
name|getLabel
argument_list|()
block|,
name|resv
operator|.
name|getPriority
argument_list|()
operator|.
name|toString
argument_list|()
block|,
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd/yyyy"
argument_list|)
operator|.
name|format
argument_list|(
name|resv
operator|.
name|getExpirationDate
argument_list|()
argument_list|)
block|,
name|overLimit
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|resv
operator|.
name|getExternalUniqueId
argument_list|()
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
argument_list|)
expr_stmt|;
operator|++
name|irTotal
expr_stmt|;
block|}
comment|/**      * Add to Student Group Reservation Table      * @param resv      * @param onClick      */
specifier|private
name|void
name|buildStuGroupResvRow
parameter_list|(
name|StudentGroupReservation
name|resv
parameter_list|,
name|String
name|onClick
parameter_list|)
block|{
if|if
condition|(
name|stuGroupResvTbl
operator|==
literal|null
condition|)
block|{
name|sgrTotals
operator|=
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
expr_stmt|;
name|stuGroupResvTbl
operator|=
operator|new
name|WebTable
argument_list|(
literal|6
argument_list|,
literal|""
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"<u>Student Group</u>"
block|,
literal|"Type"
block|,
literal|"Priority"
block|,
literal|"Reserved"
block|,
literal|"Projected"
block|,
literal|"Last Term"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"center"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
expr_stmt|;
comment|//stuGroupResvTbl.enableHR("#EFEFEF");
block|}
name|stuGroupResvTbl
operator|.
name|addLine
argument_list|(
name|onClick
argument_list|,
operator|new
name|String
index|[]
block|{
name|resv
operator|.
name|getStudentGroup
argument_list|()
operator|.
name|getGroupName
argument_list|()
block|,
name|resv
operator|.
name|getReservationType
argument_list|()
operator|.
name|getLabel
argument_list|()
block|,
name|resv
operator|.
name|getPriority
argument_list|()
operator|.
name|toString
argument_list|()
block|,
name|resv
operator|.
name|getReserved
argument_list|()
operator|.
name|toString
argument_list|()
block|,
name|resv
operator|.
name|getProjectedEnrollment
argument_list|()
operator|!=
literal|null
condition|?
name|resv
operator|.
name|getProjectedEnrollment
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|"&nbsp;"
block|,
name|resv
operator|.
name|getPriorEnrollment
argument_list|()
operator|!=
literal|null
condition|?
name|resv
operator|.
name|getPriorEnrollment
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|"&nbsp;"
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|resv
operator|.
name|getStudentGroup
argument_list|()
operator|.
name|getGroupName
argument_list|()
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
argument_list|)
expr_stmt|;
name|sgrTotals
index|[
literal|0
index|]
operator|+=
name|resv
operator|.
name|getReserved
argument_list|()
operator|.
name|intValue
argument_list|()
expr_stmt|;
name|sgrTotals
index|[
literal|1
index|]
operator|+=
name|resv
operator|.
name|getProjectedEnrollment
argument_list|()
operator|!=
literal|null
condition|?
name|resv
operator|.
name|getProjectedEnrollment
argument_list|()
operator|.
name|intValue
argument_list|()
else|:
literal|0
expr_stmt|;
name|sgrTotals
index|[
literal|2
index|]
operator|+=
name|resv
operator|.
name|getPriorEnrollment
argument_list|()
operator|!=
literal|null
condition|?
name|resv
operator|.
name|getPriorEnrollment
argument_list|()
operator|.
name|intValue
argument_list|()
else|:
literal|0
expr_stmt|;
block|}
comment|/**      * Add to Academic Area Reservation Table      * @param resv      * @param onClick      */
specifier|private
name|void
name|buildAcadAreaResvRow
parameter_list|(
name|AcadAreaReservation
name|resv
parameter_list|,
name|String
name|onClick
parameter_list|)
block|{
if|if
condition|(
name|acadAreaResvTbl
operator|==
literal|null
condition|)
block|{
name|aarTotals
operator|=
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
expr_stmt|;
name|acadAreaResvTbl
operator|=
operator|new
name|WebTable
argument_list|(
literal|8
argument_list|,
literal|""
argument_list|,
comment|//new String[] {"<u>Academic Area</u>", "<u>Class</u>", "Type", "Priority", "Reserved", "Projected", "Last Term"},
comment|//TODO Reservations Bypass to be removed later
operator|new
name|String
index|[]
block|{
literal|"<u>Academic Area</u>"
block|,
literal|"&nbsp;"
block|,
literal|"Type"
block|,
literal|"&nbsp;"
block|,
literal|"Reserved"
block|,
literal|"Requested"
block|,
literal|"Projected"
block|,
literal|"Last Term"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"center"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
expr_stmt|;
comment|//acadAreaResvTbl.enableHR("#EFEFEF");
block|}
name|String
name|acadArea
init|=
operator|(
operator|(
name|AcadAreaReservation
operator|)
name|resv
operator|)
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getShortTitle
argument_list|()
decl_stmt|;
name|String
name|acadClassification
init|=
name|resv
operator|.
name|getAcademicClassification
argument_list|()
operator|!=
literal|null
condition|?
name|resv
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getName
argument_list|()
else|:
literal|"&nbsp;"
decl_stmt|;
name|acadAreaResvTbl
operator|.
name|addLine
argument_list|(
name|onClick
argument_list|,
operator|new
name|String
index|[]
block|{
name|acadArea
block|,
comment|//TODO Reservations Bypass to be removed later
comment|//acadClassification,
literal|"&nbsp;"
block|,
name|resv
operator|.
name|getReservationType
argument_list|()
operator|.
name|getLabel
argument_list|()
block|,
comment|//resv.getPriority().toString(),
literal|"&nbsp;"
block|,
name|getResvString
argument_list|(
name|resv
operator|.
name|getRequested
argument_list|()
argument_list|,
name|resv
operator|.
name|getReserved
argument_list|()
argument_list|)
block|,
name|resv
operator|.
name|getRequested
argument_list|()
operator|!=
literal|null
condition|?
name|resv
operator|.
name|getRequested
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|"-"
block|,
name|resv
operator|.
name|getProjectedEnrollment
argument_list|()
operator|!=
literal|null
condition|?
name|resv
operator|.
name|getProjectedEnrollment
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|"-"
block|,
name|resv
operator|.
name|getPriorEnrollment
argument_list|()
operator|!=
literal|null
condition|?
name|resv
operator|.
name|getPriorEnrollment
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|"-"
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|acadArea
block|,
name|acadClassification
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
argument_list|)
expr_stmt|;
name|aarTotals
index|[
literal|0
index|]
operator|+=
name|resv
operator|.
name|getReserved
argument_list|()
operator|.
name|intValue
argument_list|()
expr_stmt|;
name|aarTotals
index|[
literal|1
index|]
operator|+=
name|resv
operator|.
name|getProjectedEnrollment
argument_list|()
operator|!=
literal|null
condition|?
name|resv
operator|.
name|getProjectedEnrollment
argument_list|()
operator|.
name|intValue
argument_list|()
else|:
literal|0
expr_stmt|;
name|aarTotals
index|[
literal|2
index|]
operator|+=
name|resv
operator|.
name|getPriorEnrollment
argument_list|()
operator|!=
literal|null
condition|?
name|resv
operator|.
name|getPriorEnrollment
argument_list|()
operator|.
name|intValue
argument_list|()
else|:
literal|0
expr_stmt|;
name|aarTotals
index|[
literal|3
index|]
operator|+=
name|resv
operator|.
name|getRequested
argument_list|()
operator|!=
literal|null
condition|?
name|resv
operator|.
name|getRequested
argument_list|()
operator|.
name|intValue
argument_list|()
else|:
literal|0
expr_stmt|;
block|}
comment|/**      * Add to POS Reservation Table      * @param resv      * @param onClick      */
specifier|private
name|void
name|buildPosResvRow
parameter_list|(
name|PosReservation
name|resv
parameter_list|,
name|String
name|onClick
parameter_list|)
block|{
if|if
condition|(
name|posResvTbl
operator|==
literal|null
condition|)
block|{
name|prTotals
operator|=
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
expr_stmt|;
name|posResvTbl
operator|=
operator|new
name|WebTable
argument_list|(
literal|7
argument_list|,
literal|""
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"<u>POS Major</u>"
block|,
literal|"<u>Class</u>"
block|,
literal|"Type"
block|,
literal|"Priority"
block|,
literal|"Reserved"
block|,
literal|"Projected"
block|,
literal|"Last Term"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"center"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
expr_stmt|;
comment|//posResvTbl.enableHR("#EFEFEF");
block|}
name|String
name|posMajor
init|=
operator|(
operator|(
name|PosReservation
operator|)
name|resv
operator|)
operator|.
name|getPosMajor
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|acadClassification
init|=
name|resv
operator|.
name|getAcademicClassification
argument_list|()
operator|!=
literal|null
condition|?
name|resv
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getName
argument_list|()
else|:
literal|"&nbsp;"
decl_stmt|;
name|posResvTbl
operator|.
name|addLine
argument_list|(
name|onClick
argument_list|,
operator|new
name|String
index|[]
block|{
name|posMajor
block|,
name|acadClassification
block|,
name|resv
operator|.
name|getReservationType
argument_list|()
operator|.
name|getLabel
argument_list|()
block|,
name|resv
operator|.
name|getPriority
argument_list|()
operator|.
name|toString
argument_list|()
block|,
name|resv
operator|.
name|getReserved
argument_list|()
operator|.
name|toString
argument_list|()
block|,
name|resv
operator|.
name|getProjectedEnrollment
argument_list|()
operator|!=
literal|null
condition|?
name|resv
operator|.
name|getProjectedEnrollment
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|"&nbsp;"
block|,
name|resv
operator|.
name|getPriorEnrollment
argument_list|()
operator|!=
literal|null
condition|?
name|resv
operator|.
name|getPriorEnrollment
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|"&nbsp;"
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|posMajor
block|,
name|acadClassification
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
argument_list|)
expr_stmt|;
name|prTotals
index|[
literal|0
index|]
operator|+=
name|resv
operator|.
name|getReserved
argument_list|()
operator|.
name|intValue
argument_list|()
expr_stmt|;
name|prTotals
index|[
literal|1
index|]
operator|+=
name|resv
operator|.
name|getProjectedEnrollment
argument_list|()
operator|!=
literal|null
condition|?
name|resv
operator|.
name|getProjectedEnrollment
argument_list|()
operator|.
name|intValue
argument_list|()
else|:
literal|0
expr_stmt|;
name|prTotals
index|[
literal|2
index|]
operator|+=
name|resv
operator|.
name|getPriorEnrollment
argument_list|()
operator|!=
literal|null
condition|?
name|resv
operator|.
name|getPriorEnrollment
argument_list|()
operator|.
name|intValue
argument_list|()
else|:
literal|0
expr_stmt|;
block|}
comment|/**      * Add to Course Offering Reservation Table      * @param resv      * @param onClick      */
specifier|private
name|void
name|buildCourseOffrResvRow
parameter_list|(
name|CourseOfferingReservation
name|resv
parameter_list|,
name|String
name|onClick
parameter_list|)
block|{
name|boolean
name|clsOwner
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|resv
operator|.
name|getOwnerClassId
argument_list|()
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|RESV_OWNER_CLASS
argument_list|)
condition|)
name|clsOwner
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|courseOffrResvTbl
operator|==
literal|null
condition|)
block|{
name|corTotals
operator|=
name|clsOwner
condition|?
literal|null
else|:
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
expr_stmt|;
name|courseOffrResvTbl
operator|=
operator|new
name|WebTable
argument_list|(
literal|7
argument_list|,
literal|""
argument_list|,
comment|//new String[] {"<u>Course Offering</u>", "Type", "Priority", "Reserved", "Projected", "Last Term"},
comment|//TODO Reservations Bypass to be removed later
comment|//new String[] {"<u>Course</u>", clsOwner ? "&nbsp;": "Type", "&nbsp;", clsOwner ? "&nbsp;": "Reserved", clsOwner ? "&nbsp;": "Projected", clsOwner ? "&nbsp;": "Last Term"},
name|clsOwner
condition|?
literal|null
else|:
operator|new
name|String
index|[]
block|{
literal|"<u>Course</u>"
block|,
literal|"&nbsp;"
block|,
literal|"&nbsp;"
block|,
literal|"Reserved"
block|,
literal|"&nbsp;"
block|,
literal|"Projected"
block|,
literal|"Last Term"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"center"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
expr_stmt|;
comment|//courseOffrResvTbl.enableHR("#EFEFEF");
block|}
name|courseOffrResvTbl
operator|.
name|addLine
argument_list|(
name|onClick
argument_list|,
operator|new
name|String
index|[]
block|{
name|resv
operator|.
name|getCourseName
argument_list|()
block|,
literal|"&nbsp;"
block|,
comment|//TODO Reservations Bypass to be removed later
comment|//resv.getPriority().toString(),
literal|"&nbsp;"
block|,
name|clsOwner
condition|?
literal|"&nbsp;"
else|:
name|resv
operator|.
name|getReserved
argument_list|()
operator|.
name|toString
argument_list|()
block|,
literal|"&nbsp;"
block|,
comment|//clsOwner ? "&nbsp;": ( resv.getRequested()!=null ? resv.getRequested().toString() : "-" ),
name|clsOwner
condition|?
literal|"&nbsp;"
else|:
operator|(
name|resv
operator|.
name|getProjectedEnrollment
argument_list|()
operator|!=
literal|null
condition|?
name|resv
operator|.
name|getProjectedEnrollment
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|"-"
operator|)
block|,
name|clsOwner
condition|?
literal|"&nbsp;"
else|:
operator|(
name|resv
operator|.
name|getPriorEnrollment
argument_list|()
operator|!=
literal|null
condition|?
name|resv
operator|.
name|getPriorEnrollment
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|"-"
operator|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|resv
operator|.
name|getCourseName
argument_list|()
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|corTotals
operator|!=
literal|null
condition|)
block|{
name|corTotals
index|[
literal|0
index|]
operator|+=
name|resv
operator|.
name|getReserved
argument_list|()
operator|.
name|intValue
argument_list|()
expr_stmt|;
name|corTotals
index|[
literal|1
index|]
operator|+=
name|resv
operator|.
name|getProjectedEnrollment
argument_list|()
operator|!=
literal|null
condition|?
name|resv
operator|.
name|getProjectedEnrollment
argument_list|()
operator|.
name|intValue
argument_list|()
else|:
literal|0
expr_stmt|;
name|corTotals
index|[
literal|2
index|]
operator|+=
name|resv
operator|.
name|getPriorEnrollment
argument_list|()
operator|!=
literal|null
condition|?
name|resv
operator|.
name|getPriorEnrollment
argument_list|()
operator|.
name|intValue
argument_list|()
else|:
literal|0
expr_stmt|;
name|corTotals
index|[
literal|3
index|]
operator|+=
name|resv
operator|.
name|getRequested
argument_list|()
operator|!=
literal|null
condition|?
name|resv
operator|.
name|getRequested
argument_list|()
operator|.
name|intValue
argument_list|()
else|:
literal|0
expr_stmt|;
block|}
block|}
comment|/**      * Color format reservation total      * @param oRequest      * @param oReserved      * @return      */
specifier|private
name|String
name|getResvString
parameter_list|(
name|Integer
name|oRequest
parameter_list|,
name|Integer
name|oReserved
parameter_list|)
block|{
name|String
name|ret
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|oRequest
operator|!=
literal|null
condition|)
block|{
name|int
name|res
init|=
name|oReserved
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|int
name|req
init|=
name|oRequest
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|res
operator|<
name|req
condition|)
name|ret
operator|=
literal|"<font color='"
operator|+
name|colorDecrease
operator|+
literal|"'>"
operator|+
name|res
operator|+
literal|"</font>"
expr_stmt|;
if|else if
condition|(
name|res
operator|>
name|req
condition|)
name|ret
operator|=
literal|"<font color='"
operator|+
name|colorIncrease
operator|+
literal|"'>"
operator|+
name|res
operator|+
literal|"</font>"
expr_stmt|;
else|else
name|ret
operator|=
literal|""
operator|+
name|res
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
literal|"<font color='"
operator|+
name|colorIncrease
operator|+
literal|"'>"
operator|+
name|oReserved
operator|.
name|toString
argument_list|()
operator|+
literal|"</font>"
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**      * Add total row to the individual reservation tables      */
specifier|private
name|void
name|buildTotals
parameter_list|()
block|{
if|if
condition|(
name|individualResvTbl
operator|!=
literal|null
operator|&&
name|irTotal
operator|>
literal|0
condition|)
block|{
name|individualResvTbl
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"<b><u>Total:</u></b>"
operator|+
name|irTotal
block|,
literal|"&nbsp;"
block|,
literal|"&nbsp;"
block|,
literal|"&nbsp;"
block|,
literal|"&nbsp;"
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|acadAreaResvTbl
operator|!=
literal|null
operator|&&
name|aarTotals
operator|!=
literal|null
condition|)
block|{
name|acadAreaResvTbl
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"&nbsp;"
block|,
literal|"&nbsp;"
block|,
literal|"&nbsp;"
block|,
literal|"&nbsp;"
block|,
literal|"<DIV class='rowTotal'>"
operator|+
name|getResvString
argument_list|(
operator|new
name|Integer
argument_list|(
name|aarTotals
index|[
literal|3
index|]
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
name|aarTotals
index|[
literal|0
index|]
argument_list|)
argument_list|)
operator|+
literal|"</DIV>"
block|,
literal|"<DIV class='rowTotal'>"
operator|+
name|aarTotals
index|[
literal|3
index|]
operator|+
literal|"</DIV>"
block|,
literal|"<DIV class='rowTotal'>"
operator|+
name|aarTotals
index|[
literal|1
index|]
operator|+
literal|"</DIV>"
block|,
literal|"<DIV class='rowTotal'>"
operator|+
name|aarTotals
index|[
literal|2
index|]
operator|+
literal|"</DIV>"
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|courseOffrResvTbl
operator|!=
literal|null
operator|&&
name|corTotals
operator|!=
literal|null
condition|)
block|{
name|courseOffrResvTbl
operator|.
name|addLine
argument_list|(
comment|//                    null, new String[] { "&nbsp;", "&nbsp;", "&nbsp;", "<DIV class='rowTotal'>"+getResvString(new Integer(corTotals[3]), new Integer(corTotals[0]))+"</DIV>", "<DIV class='rowTotal'>"+corTotals[3]+"</DIV>", "<DIV class='rowTotal'>"+corTotals[1]+"</DIV>", "<DIV class='rowTotal'>"+corTotals[2]+"</DIV>" }, null );
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"&nbsp;"
block|,
literal|"&nbsp;"
block|,
literal|"&nbsp;"
block|,
literal|"<DIV class='rowTotal'>"
operator|+
operator|new
name|Integer
argument_list|(
name|corTotals
index|[
literal|0
index|]
argument_list|)
operator|+
literal|"</DIV>"
block|,
literal|"&nbsp;"
block|,
literal|"<DIV class='rowTotal'>"
operator|+
name|corTotals
index|[
literal|1
index|]
operator|+
literal|"</DIV>"
block|,
literal|"<DIV class='rowTotal'>"
operator|+
name|corTotals
index|[
literal|2
index|]
operator|+
literal|"</DIV>"
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|posResvTbl
operator|!=
literal|null
operator|&&
name|prTotals
operator|!=
literal|null
condition|)
block|{
name|posResvTbl
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"&nbsp;"
block|,
literal|"&nbsp;"
block|,
literal|"&nbsp;"
block|,
literal|"&nbsp;"
block|,
literal|"<DIV class='rowTotal'>"
operator|+
name|prTotals
index|[
literal|0
index|]
operator|+
literal|"</DIV>"
block|,
literal|"<DIV class='rowTotal'>"
operator|+
name|prTotals
index|[
literal|1
index|]
operator|+
literal|"</DIV>"
block|,
literal|"<DIV class='rowTotal'>"
operator|+
name|prTotals
index|[
literal|2
index|]
operator|+
literal|"</DIV>"
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stuGroupResvTbl
operator|!=
literal|null
operator|&&
name|sgrTotals
operator|!=
literal|null
condition|)
block|{
name|stuGroupResvTbl
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"&nbsp;"
block|,
literal|"&nbsp;"
block|,
literal|"&nbsp;"
block|,
literal|"&nbsp;"
block|,
literal|"<DIV class='rowTotal'>"
operator|+
name|sgrTotals
index|[
literal|0
index|]
operator|+
literal|"</DIV>"
block|,
literal|"<DIV class='rowTotal'>"
operator|+
name|sgrTotals
index|[
literal|1
index|]
operator|+
literal|"</DIV>"
block|,
literal|"<DIV class='rowTotal'>"
operator|+
name|sgrTotals
index|[
literal|2
index|]
operator|+
literal|"</DIV>"
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Enclose passed paramter in TABLE tags      * @param str      * @param style      * @param width      * @param align defaults to left      * @param onClick      * @return      */
specifier|public
name|String
name|createTable
parameter_list|(
name|String
name|str
parameter_list|,
name|String
name|style
parameter_list|,
name|String
name|width
parameter_list|,
name|String
name|align
parameter_list|)
block|{
if|if
condition|(
name|style
operator|!=
literal|null
operator|&&
name|style
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|style
operator|=
literal|"style='"
operator|+
name|style
operator|+
literal|"'"
expr_stmt|;
else|else
name|style
operator|=
literal|""
expr_stmt|;
if|if
condition|(
name|width
operator|!=
literal|null
operator|&&
name|width
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|width
operator|=
literal|"width='"
operator|+
name|width
operator|+
literal|"'"
expr_stmt|;
else|else
name|width
operator|=
literal|""
expr_stmt|;
if|if
condition|(
name|align
operator|==
literal|null
operator|||
name|align
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|align
operator|=
literal|"left"
expr_stmt|;
return|return
literal|"<TABLE border='0' "
operator|+
name|width
operator|+
literal|" align='"
operator|+
name|align
operator|+
literal|"' "
operator|+
name|style
operator|+
literal|" cellpadding='2' cellspacing='0'>"
operator|+
name|str
operator|+
literal|"</TABLE>"
return|;
block|}
comment|/**      * Generate html table for reservations given a collection of reservations      * @param reservations      * @param displayHeader Display Table Header      * @param isEditable      * @return html for reservations if exist, null otherwise      */
specifier|public
name|String
name|htmlTableForReservations
parameter_list|(
name|Collection
name|reservations
parameter_list|,
name|boolean
name|displayHeader
parameter_list|,
name|boolean
name|isEditable
parameter_list|,
name|boolean
name|isLimitedEditable
parameter_list|)
block|{
name|String
name|ownerId
init|=
literal|null
decl_stmt|;
name|String
name|ownerClassId
init|=
literal|null
decl_stmt|;
name|String
name|onClick
init|=
literal|null
decl_stmt|;
name|String
name|endOnClick
init|=
literal|null
decl_stmt|;
name|String
name|ocAcadArea
init|=
literal|null
decl_stmt|;
name|String
name|ocPos
init|=
literal|null
decl_stmt|;
name|String
name|ocStuGrp
init|=
literal|null
decl_stmt|;
name|String
name|ocCourse
init|=
literal|null
decl_stmt|;
name|String
name|ocIndiv
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|reservations
operator|==
literal|null
operator|||
name|reservations
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|null
return|;
comment|// Build sub tables
for|for
control|(
name|Iterator
name|i
init|=
name|reservations
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Reservation
name|resv
init|=
operator|(
name|Reservation
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ownerId
operator|==
literal|null
condition|)
block|{
name|ownerId
operator|=
name|resv
operator|.
name|getOwner
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ownerClassId
operator|=
name|resv
operator|.
name|getOwnerClassId
argument_list|()
expr_stmt|;
if|if
condition|(
name|isEditable
operator|||
operator|(
name|isLimitedEditable
operator|&&
name|resv
operator|instanceof
name|AcadAreaReservation
operator|)
condition|)
block|{
name|onClick
operator|=
literal|"onClick=\"document.location='reservationEdit.do"
operator|+
literal|"?op=Submit&addBlankRow=false&ownerId="
operator|+
name|ownerId
operator|+
literal|"&ownerType="
operator|+
name|ownerClassId
operator|+
literal|"&reservationClass="
expr_stmt|;
name|endOnClick
operator|=
literal|"';\""
expr_stmt|;
name|ocIndiv
operator|=
operator|(
name|onClick
operator|!=
literal|null
condition|?
name|onClick
operator|+
name|Constants
operator|.
name|RESV_INDIVIDUAL
operator|+
name|endOnClick
else|:
literal|null
operator|)
expr_stmt|;
name|ocCourse
operator|=
operator|(
name|onClick
operator|!=
literal|null
condition|?
name|onClick
operator|+
name|Constants
operator|.
name|RESV_COURSE
operator|+
name|endOnClick
else|:
literal|null
operator|)
expr_stmt|;
name|ocAcadArea
operator|=
operator|(
name|onClick
operator|!=
literal|null
condition|?
name|onClick
operator|+
name|Constants
operator|.
name|RESV_ACAD_AREA
operator|+
name|endOnClick
else|:
literal|null
operator|)
expr_stmt|;
name|ocPos
operator|=
operator|(
name|onClick
operator|!=
literal|null
condition|?
name|onClick
operator|+
name|Constants
operator|.
name|RESV_POS
operator|+
name|endOnClick
else|:
literal|null
operator|)
expr_stmt|;
name|ocStuGrp
operator|=
operator|(
name|onClick
operator|!=
literal|null
condition|?
name|onClick
operator|+
name|Constants
operator|.
name|RESV_STU_GROUP
operator|+
name|endOnClick
else|:
literal|null
operator|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|resv
operator|instanceof
name|IndividualReservation
condition|)
block|{
name|buildIndividualResvRow
argument_list|(
operator|(
name|IndividualReservation
operator|)
name|resv
argument_list|,
name|ocIndiv
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resv
operator|instanceof
name|StudentGroupReservation
condition|)
block|{
name|buildStuGroupResvRow
argument_list|(
operator|(
name|StudentGroupReservation
operator|)
name|resv
argument_list|,
name|ocStuGrp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resv
operator|instanceof
name|AcadAreaReservation
condition|)
block|{
name|buildAcadAreaResvRow
argument_list|(
operator|(
name|AcadAreaReservation
operator|)
name|resv
argument_list|,
name|ocAcadArea
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resv
operator|instanceof
name|PosReservation
condition|)
block|{
name|buildPosResvRow
argument_list|(
operator|(
name|PosReservation
operator|)
name|resv
argument_list|,
name|ocPos
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resv
operator|instanceof
name|CourseOfferingReservation
condition|)
block|{
name|buildCourseOffrResvRow
argument_list|(
operator|(
name|CourseOfferingReservation
operator|)
name|resv
argument_list|,
name|ocCourse
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Create Total row
name|buildTotals
argument_list|()
expr_stmt|;
comment|// Build main table
name|String
name|header
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|displayHeader
condition|)
name|header
operator|=
literal|"Reservations"
expr_stmt|;
name|WebTable
name|mainTbl
init|=
operator|new
name|WebTable
argument_list|(
literal|1
argument_list|,
name|header
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Add each reservation table as a row to the main table
if|if
condition|(
name|individualResvTbl
operator|!=
literal|null
condition|)
block|{
name|mainTbl
operator|.
name|addLine
argument_list|(
name|ocIndiv
argument_list|,
operator|new
name|String
index|[]
block|{
name|createTable
argument_list|(
name|individualResvTbl
operator|.
name|printTable
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"margin:0;"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|courseOffrResvTbl
operator|!=
literal|null
condition|)
block|{
name|mainTbl
operator|.
name|addLine
argument_list|(
name|ocCourse
argument_list|,
operator|new
name|String
index|[]
block|{
name|createTable
argument_list|(
name|courseOffrResvTbl
operator|.
name|printTable
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"margin:0;"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|acadAreaResvTbl
operator|!=
literal|null
condition|)
block|{
name|mainTbl
operator|.
name|addLine
argument_list|(
name|ocAcadArea
argument_list|,
operator|new
name|String
index|[]
block|{
name|createTable
argument_list|(
name|acadAreaResvTbl
operator|.
name|printTable
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"margin:0;"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|posResvTbl
operator|!=
literal|null
condition|)
block|{
name|mainTbl
operator|.
name|addLine
argument_list|(
name|ocPos
argument_list|,
operator|new
name|String
index|[]
block|{
name|createTable
argument_list|(
name|posResvTbl
operator|.
name|printTable
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"margin:0;"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stuGroupResvTbl
operator|!=
literal|null
condition|)
block|{
name|mainTbl
operator|.
name|addLine
argument_list|(
name|ocStuGrp
argument_list|,
operator|new
name|String
index|[]
block|{
name|createTable
argument_list|(
name|stuGroupResvTbl
operator|.
name|printTable
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"margin:0;"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|reset
argument_list|()
expr_stmt|;
return|return
name|mainTbl
operator|.
name|printTable
argument_list|()
return|;
block|}
comment|/**      * Generate html table for reservations given a subject area and course number (optional)      * @param user      * @param subjectAreaId      * @param courseNbr      * @param displayIo flag indicating whether IO reservations are to be displayed      * @param displayConfig flag indicating whether Config reservations are to be displayed      * @param displayClass flag indicating whether Class reservations are to be displayed      * @param displayCourse flag indicating whether Course Offering reservations are to be displayed      * @param includeIndividual include individual reservations      * @param includeStuGroup include student group reservations      * @param includeAcadArea include academic area reservations      * @param includePos include pos reservations      * @param includeCourse include course reservations      * @return      */
specifier|public
name|String
name|htmlTableForSubjectArea
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|subjectAreaId
parameter_list|,
name|String
name|courseNbr
parameter_list|,
name|boolean
name|displayIo
parameter_list|,
name|boolean
name|displayConfig
parameter_list|,
name|boolean
name|displayClass
parameter_list|,
name|boolean
name|displayCourse
parameter_list|,
name|boolean
name|includeIndividual
parameter_list|,
name|boolean
name|includeStuGroup
parameter_list|,
name|boolean
name|includeAcadArea
parameter_list|,
name|boolean
name|includePos
parameter_list|,
name|boolean
name|includeCourse
parameter_list|)
block|{
comment|//Build Main Table
name|WebTable
name|mainTbl
init|=
operator|new
name|WebTable
argument_list|(
literal|1
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|//mainTbl.enableHR("#ABABAB");
name|mainTbl
operator|.
name|setSuppressRowHighlight
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|subjectAreaId
operator|==
literal|null
operator|||
name|subjectAreaId
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|mainTbl
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Invalid Subject Area"
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|mainTbl
operator|.
name|printTable
argument_list|()
return|;
block|}
name|Set
name|instrOfferings
init|=
name|getInstructionalOfferings
argument_list|(
name|subjectAreaId
argument_list|,
name|courseNbr
argument_list|)
decl_stmt|;
if|if
condition|(
name|instrOfferings
operator|==
literal|null
operator|||
name|instrOfferings
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Iterate through instr offerings, configs and classes
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|iterIo
init|=
name|instrOfferings
operator|.
name|iterator
argument_list|()
init|;
name|iterIo
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstructionalOffering
name|io
init|=
operator|(
name|InstructionalOffering
operator|)
name|iterIo
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|htmlTableForInstructionalOffering
argument_list|(
name|user
argument_list|,
name|io
argument_list|,
name|mainTbl
argument_list|,
name|displayIo
argument_list|,
name|displayConfig
argument_list|,
name|displayClass
argument_list|,
name|displayCourse
argument_list|,
literal|true
argument_list|,
name|includeIndividual
argument_list|,
name|includeStuGroup
argument_list|,
name|includeAcadArea
argument_list|,
name|includePos
argument_list|,
name|includeCourse
argument_list|)
condition|)
name|found
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
return|return
literal|null
return|;
block|}
name|reset
argument_list|()
expr_stmt|;
return|return
name|mainTbl
operator|.
name|printTable
argument_list|()
return|;
block|}
comment|/**      * Build reservations table for an instructional offering      * Includes all config and class reservations as well      * @param user      * @param io      * @param table WebTable object      * @param displayIo flag indicating whether IO reservations are to be displayed      * @param displayConfig flag indicating whether Config reservations are to be displayed      * @param displayClass flag indicating whether Class reservations are to be displayed      * @param displayCourse flag indicating whether Course Offering reservations are to be displayed      * @param displayIoHeader flag indicating whether Instructional Offering label is displayed      * @param includeIndividual include individual reservations      * @param includeStuGroup include student group reservations      * @param includeAcadArea include academic area reservations      * @param includePos include pos reservations      * @param includeCourse include course reservations      * @return      */
specifier|private
name|boolean
name|htmlTableForInstructionalOffering
parameter_list|(
name|User
name|user
parameter_list|,
name|InstructionalOffering
name|io
parameter_list|,
name|WebTable
name|table
parameter_list|,
name|boolean
name|displayIo
parameter_list|,
name|boolean
name|displayConfig
parameter_list|,
name|boolean
name|displayClass
parameter_list|,
name|boolean
name|displayCourse
parameter_list|,
name|boolean
name|displayIoHeader
parameter_list|,
name|boolean
name|includeIndividual
parameter_list|,
name|boolean
name|includeStuGroup
parameter_list|,
name|boolean
name|includeAcadArea
parameter_list|,
name|boolean
name|includePos
parameter_list|,
name|boolean
name|includeCourse
parameter_list|)
block|{
name|WebTable
name|ioTbl
init|=
operator|new
name|WebTable
argument_list|(
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ioTbl
operator|.
name|setSuppressRowHighlight
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
name|boolean
name|ioHeader
init|=
literal|false
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|String
name|ioResvTbl
init|=
literal|null
decl_stmt|;
name|Collection
name|ioResvs
init|=
name|io
operator|.
name|getReservations
argument_list|(
name|includeIndividual
argument_list|,
name|includeStuGroup
argument_list|,
name|includeAcadArea
argument_list|,
name|includePos
argument_list|,
name|includeCourse
argument_list|)
decl_stmt|;
if|if
condition|(
name|displayIo
condition|)
name|ioResvTbl
operator|=
name|htmlTableForReservations
argument_list|(
name|ioResvs
argument_list|,
literal|false
argument_list|,
name|io
operator|.
name|isEditableBy
argument_list|(
name|user
argument_list|)
argument_list|,
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|isLimitedEditableBy
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ioResvTbl
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|displayIoHeader
condition|)
name|ioTbl
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"<A name='"
operator|+
name|io
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"'><FONT class='ReservationRowHead'>"
operator|+
name|io
operator|.
name|getCourseNameWithTitle
argument_list|()
operator|+
literal|"<FONT class='resvIoOfferLimit'>("
operator|+
operator|(
name|io
operator|.
name|getLimit
argument_list|()
operator|!=
literal|null
condition|?
name|io
operator|.
name|getLimit
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|"limit not available"
operator|)
operator|+
literal|")</FONT></FONT></A>"
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Create Total row
name|buildTotals
argument_list|()
expr_stmt|;
name|ioTbl
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|createTable
argument_list|(
name|ioResvTbl
argument_list|,
literal|"margin:0;"
argument_list|,
literal|"100%"
argument_list|,
literal|null
argument_list|)
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ioHeader
operator|=
literal|true
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
block|}
comment|//TODO Reservations functionality to be removed later
if|if
condition|(
name|displayCourse
condition|)
block|{
comment|// Loop through Course Offering
name|Vector
name|courseOfferings
init|=
operator|new
name|Vector
argument_list|(
name|io
operator|.
name|getCourseOfferings
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|courseOfferings
argument_list|,
operator|new
name|CourseOfferingComparator
argument_list|(
name|CourseOfferingComparator
operator|.
name|COMPARE_BY_SUBJ_CRS
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|iterCourses
init|=
name|courseOfferings
operator|.
name|iterator
argument_list|()
init|;
name|iterCourses
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|reset
argument_list|()
expr_stmt|;
name|CourseOffering
name|co
init|=
operator|(
name|CourseOffering
operator|)
name|iterCourses
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|coResvTbl
init|=
literal|null
decl_stmt|;
name|coResvTbl
operator|=
name|htmlTableForReservations
argument_list|(
name|co
operator|.
name|effectiveReservations
argument_list|(
name|includeAcadArea
argument_list|)
argument_list|,
literal|false
argument_list|,
name|co
operator|.
name|isEditableBy
argument_list|(
name|user
argument_list|)
argument_list|,
name|co
operator|.
name|isLimitedEditableBy
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|coResvTbl
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|ioHeader
condition|)
block|{
if|if
condition|(
name|displayIoHeader
condition|)
name|ioTbl
operator|.
name|addLine
argument_list|(
literal|""
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"<A name='"
operator|+
name|io
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"'><FONT class='ReservationRowHead'>"
operator|+
name|io
operator|.
name|getCourseNameWithTitle
argument_list|()
operator|+
literal|"<FONT class='resvIoOfferLimit'>("
operator|+
operator|(
name|io
operator|.
name|getLimit
argument_list|()
operator|!=
literal|null
condition|?
name|io
operator|.
name|getLimit
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|"limit not available"
operator|)
operator|+
literal|")</FONT></FONT></A>"
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ioHeader
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|io
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|String
name|courseResvLimit
init|=
literal|""
decl_stmt|;
name|Collection
name|ioResvs2
init|=
name|io
operator|.
name|getReservations
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|ioResvs2
operator|!=
literal|null
operator|&&
name|ioResvs2
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Iterator
name|it1
init|=
name|ioResvs2
operator|.
name|iterator
argument_list|()
init|;
name|it1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|o
init|=
name|it1
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|CourseOfferingReservation
condition|)
block|{
name|CourseOfferingReservation
name|cor
init|=
operator|(
name|CourseOfferingReservation
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|cor
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|equals
argument_list|(
name|co
argument_list|)
condition|)
block|{
name|courseResvLimit
operator|=
name|cor
operator|.
name|getReserved
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
name|ioTbl
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"<FONT class='ReservationRowHead' style='margin-left:15px;'>"
operator|+
name|co
operator|.
name|getCourseName
argument_list|()
operator|+
literal|"<FONT class='resvIoOfferLimit'>("
operator|+
name|courseResvLimit
operator|+
literal|")</FONT></FONT>"
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// Create Total row
name|buildTotals
argument_list|()
expr_stmt|;
name|ioTbl
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|createTable
argument_list|(
name|coResvTbl
argument_list|,
literal|"margin-left:15px;"
argument_list|,
literal|"100%"
argument_list|,
literal|null
argument_list|)
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
comment|// End Bypass
comment|// Check if filter set for displaying config and class reservations
if|if
condition|(
name|displayConfig
operator|||
name|displayClass
condition|)
block|{
name|reset
argument_list|()
expr_stmt|;
name|boolean
name|cfgHeader
init|=
literal|false
decl_stmt|;
name|Set
name|configs
init|=
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iterCfg
init|=
name|configs
operator|.
name|iterator
argument_list|()
init|;
name|iterCfg
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|config
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|iterCfg
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|cfgResvTbl
init|=
literal|null
decl_stmt|;
name|cfgHeader
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|displayConfig
condition|)
name|cfgResvTbl
operator|=
name|htmlTableForReservations
argument_list|(
name|config
operator|.
name|getReservations
argument_list|(
name|includeIndividual
argument_list|,
name|includeStuGroup
argument_list|,
name|includeAcadArea
argument_list|,
name|includePos
argument_list|,
name|includeCourse
argument_list|)
argument_list|,
literal|false
argument_list|,
name|config
operator|.
name|isEditableBy
argument_list|(
name|user
argument_list|)
argument_list|,
name|config
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|isLimitedEditableBy
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cfgResvTbl
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|ioHeader
condition|)
block|{
if|if
condition|(
name|displayIoHeader
condition|)
name|ioTbl
operator|.
name|addLine
argument_list|(
literal|""
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"<A name='"
operator|+
name|io
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"'><FONT class='ReservationRowHead'>"
operator|+
name|io
operator|.
name|getCourseNameWithTitle
argument_list|()
operator|+
literal|"<FONT class='resvIoOfferLimit'>("
operator|+
operator|(
name|io
operator|.
name|getLimit
argument_list|()
operator|!=
literal|null
condition|?
name|io
operator|.
name|getLimit
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|"limit not available"
operator|)
operator|+
literal|")</FONT></FONT></A>"
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ioHeader
operator|=
literal|true
expr_stmt|;
block|}
name|ioTbl
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"<FONT class='ReservationRowHead' style='margin-left:30px;'>Configuration "
operator|+
name|config
operator|.
name|getName
argument_list|()
operator|+
literal|"</FONT>"
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Create Total row
name|buildTotals
argument_list|()
expr_stmt|;
name|ioTbl
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|createTable
argument_list|(
name|cfgResvTbl
argument_list|,
literal|"margin-left:30px;"
argument_list|,
literal|"100%"
argument_list|,
literal|null
argument_list|)
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|cfgHeader
operator|=
literal|true
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
block|}
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|displayClass
condition|)
continue|continue;
name|Vector
name|subparts
init|=
operator|new
name|Vector
argument_list|(
name|config
operator|.
name|getSchedulingSubparts
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|subparts
argument_list|,
operator|new
name|SchedulingSubpartComparator
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|iterSubpart
init|=
name|subparts
operator|.
name|iterator
argument_list|()
init|;
name|iterSubpart
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|subpart
init|=
operator|(
name|SchedulingSubpart
operator|)
name|iterSubpart
operator|.
name|next
argument_list|()
decl_stmt|;
name|Vector
name|classes
init|=
operator|new
name|Vector
argument_list|(
name|subpart
operator|.
name|getClasses
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|classes
argument_list|,
operator|new
name|ClassComparator
argument_list|(
name|ClassComparator
operator|.
name|COMPARE_BY_ITYPE
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|iterClasses
init|=
name|classes
operator|.
name|iterator
argument_list|()
init|;
name|iterClasses
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|cls
init|=
operator|(
name|Class_
operator|)
name|iterClasses
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|clsResvTbl
init|=
name|htmlTableForReservations
argument_list|(
name|cls
operator|.
name|getReservations
argument_list|(
name|includeIndividual
argument_list|,
name|includeStuGroup
argument_list|,
name|includeAcadArea
argument_list|,
name|includePos
argument_list|,
name|includeCourse
argument_list|)
argument_list|,
literal|false
argument_list|,
name|cls
operator|.
name|isEditableBy
argument_list|(
name|user
argument_list|)
argument_list|,
name|cls
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|isLimitedEditableBy
argument_list|(
name|user
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|clsResvTbl
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|ioHeader
condition|)
block|{
if|if
condition|(
name|displayIoHeader
condition|)
name|ioTbl
operator|.
name|addLine
argument_list|(
literal|""
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"<A name='"
operator|+
name|io
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"'><FONT class='ReservationRowHead'>"
operator|+
name|io
operator|.
name|getCourseNameWithTitle
argument_list|()
operator|+
literal|"<FONT class='resvIoOfferLimit'>("
operator|+
operator|(
name|io
operator|.
name|getLimit
argument_list|()
operator|!=
literal|null
condition|?
name|io
operator|.
name|getLimit
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|"limit not available"
operator|)
operator|+
literal|")</FONT></FONT></A>"
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ioHeader
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|cfgHeader
operator|&&
name|configs
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|ioTbl
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"<FONT class='ReservationRowHead' style='margin-left:30px;'>Configuration "
operator|+
name|config
operator|.
name|getName
argument_list|()
operator|+
literal|"</FONT>"
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|cfgHeader
operator|=
literal|true
expr_stmt|;
block|}
comment|// Create Total row
name|buildTotals
argument_list|()
expr_stmt|;
name|ioTbl
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"<FONT class='ReservationRowHead' style='margin-left:45px;'>"
operator|+
name|cls
operator|.
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
operator|+
literal|" "
operator|+
name|cls
operator|.
name|getSectionNumberString
argument_list|()
operator|+
literal|"</FONT>"
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ioTbl
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|createTable
argument_list|(
name|clsResvTbl
argument_list|,
literal|"margin-left:45px;"
argument_list|,
literal|"100%"
argument_list|,
literal|null
argument_list|)
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|ioHeader
condition|)
block|{
name|table
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|createTable
argument_list|(
name|ioTbl
operator|.
name|printTable
argument_list|()
argument_list|,
literal|"margin:0;"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|found
return|;
block|}
comment|/**      * Build reservations table for an instructional offering      * Includes all config and class reservations as well      * @param user      * @param io      * @param displayIo flag indicating whether IO reservations are to be displayed      * @param displayConfig flag indicating whether Config reservations are to be displayed      * @param displayClass flag indicating whether Class reservations are to be displayed      * @param displayCourse flag indicating whether Course Offering reservations are to be displayed      * @param includeIndividual include individual reservations      * @param includeStuGroup include student group reservations      * @param includeAcadArea include academic area reservations      * @param includePos include pos reservations      * @param includeCourse include course reservations      * @return null if no reservations found, reservations table html string otherwise      */
specifier|public
name|String
name|htmlTableForInstructionalOffering
parameter_list|(
name|User
name|user
parameter_list|,
name|InstructionalOffering
name|io
parameter_list|,
name|boolean
name|displayIo
parameter_list|,
name|boolean
name|displayConfig
parameter_list|,
name|boolean
name|displayClass
parameter_list|,
name|boolean
name|displayCourse
parameter_list|,
name|boolean
name|includeIndividual
parameter_list|,
name|boolean
name|includeStuGroup
parameter_list|,
name|boolean
name|includeAcadArea
parameter_list|,
name|boolean
name|includePos
parameter_list|,
name|boolean
name|includeCourse
parameter_list|)
block|{
comment|//Build Main Table
name|WebTable
name|mainTbl
init|=
operator|new
name|WebTable
argument_list|(
literal|1
argument_list|,
literal|"Reservations"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|//mainTbl.enableHR("#ABABAB");
name|mainTbl
operator|.
name|setSuppressRowHighlight
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|boolean
name|found
init|=
name|htmlTableForInstructionalOffering
argument_list|(
name|user
argument_list|,
name|io
argument_list|,
name|mainTbl
argument_list|,
name|displayIo
argument_list|,
name|displayConfig
argument_list|,
name|displayClass
argument_list|,
name|displayCourse
argument_list|,
literal|false
argument_list|,
name|includeIndividual
argument_list|,
name|includeStuGroup
argument_list|,
name|includeAcadArea
argument_list|,
name|includePos
argument_list|,
name|includeCourse
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|found
condition|)
return|return
literal|null
return|;
name|reset
argument_list|()
expr_stmt|;
return|return
name|mainTbl
operator|.
name|printTable
argument_list|()
return|;
block|}
comment|/** 	 * Retrieves the instr offering for a given subject area and course number pattern 	 * @param subjectAreaId 	 * @param courseNbr 	 * @return null if none found 	 */
specifier|protected
name|Set
name|getInstructionalOfferings
parameter_list|(
name|String
name|subjectAreaId
parameter_list|,
name|String
name|courseNbr
parameter_list|)
block|{
name|Set
name|instrOfferings
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
operator|(
operator|new
name|InstructionalOfferingDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|StringBuffer
name|query
init|=
operator|new
name|StringBuffer
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"select distinct io "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|" from InstructionalOffering as io inner join io.courseOfferings as co  "
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|" where io.notOffered=0 and co.subjectArea.uniqueId = :subjectAreaId "
argument_list|)
expr_stmt|;
if|if
condition|(
name|courseNbr
operator|!=
literal|null
operator|&&
name|courseNbr
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|" and co.courseNbr "
argument_list|)
expr_stmt|;
if|if
condition|(
name|courseNbr
operator|.
name|indexOf
argument_list|(
literal|'*'
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|" like "
argument_list|)
expr_stmt|;
name|courseNbr
operator|=
name|courseNbr
operator|.
name|replace
argument_list|(
literal|'*'
argument_list|,
literal|'%'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|.
name|append
argument_list|(
literal|" = "
argument_list|)
expr_stmt|;
block|}
name|query
operator|.
name|append
argument_list|(
literal|":courseNbr"
argument_list|)
expr_stmt|;
block|}
name|Query
name|q
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|q
operator|.
name|setInteger
argument_list|(
literal|"subjectAreaId"
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|subjectAreaId
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|courseNbr
operator|!=
literal|null
operator|&&
name|courseNbr
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|q
operator|.
name|setString
argument_list|(
literal|"courseNbr"
argument_list|,
name|courseNbr
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|q
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
name|l
init|=
name|q
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
operator|&&
name|l
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|instrOfferings
operator|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|InstructionalOfferingComparator
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|subjectAreaId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|instrOfferings
operator|.
name|addAll
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
return|return
name|instrOfferings
return|;
block|}
specifier|protected
name|void
name|finalize
parameter_list|()
throws|throws
name|Throwable
block|{
name|reset
argument_list|()
expr_stmt|;
name|super
operator|.
name|finalize
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

