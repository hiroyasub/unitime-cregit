begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|WebTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|messages
operator|.
name|CourseMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|CommonValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|UserProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|BuildingPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructorAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructorAttributeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructorCoursePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeaturePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomGroupPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|ClassComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|ClassInstructorComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_comment
comment|/**  * @author Heston Fernandes, Tomas Muller, Zuzana Mullerova  */
end_comment

begin_class
specifier|public
class|class
name|InstructorListBuilder
block|{
specifier|protected
specifier|final
specifier|static
name|CourseMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|CourseMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|String
name|htmlTableForInstructor
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|String
name|deptId
parameter_list|,
name|int
name|order
parameter_list|,
name|String
name|backId
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|timeVertical
init|=
name|RequiredTimeTable
operator|.
name|getTimeGridVertical
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|gridAsText
init|=
name|RequiredTimeTable
operator|.
name|getTimeGridAsText
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|timeGridSize
init|=
name|RequiredTimeTable
operator|.
name|getTimeGridSize
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
comment|// Loop through Instructor class
name|List
name|list
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|deptId
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|ALL_OPTION_VALUE
argument_list|)
condition|)
name|list
operator|=
name|DepartmentalInstructor
operator|.
name|findInstructorsForSession
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|list
operator|=
name|DepartmentalInstructor
operator|.
name|findInstructorsForDepartment
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|deptId
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
operator|||
name|list
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|boolean
name|hasCoursePrefs
init|=
literal|false
decl_stmt|;
name|boolean
name|hasTeachPref
init|=
literal|false
decl_stmt|;
name|boolean
name|hasMaxLoad
init|=
literal|false
decl_stmt|;
name|TreeSet
argument_list|<
name|InstructorAttributeType
argument_list|>
name|attributeTypes
init|=
operator|new
name|TreeSet
argument_list|<
name|InstructorAttributeType
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|InstructorAttributeType
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|InstructorAttributeType
name|o1
parameter_list|,
name|InstructorAttributeType
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|getReference
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getReference
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|list
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentalInstructor
name|di
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|di
operator|.
name|getPreferences
argument_list|(
name|InstructorCoursePref
operator|.
name|class
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
name|hasCoursePrefs
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|di
operator|.
name|getMaxLoad
argument_list|()
operator|!=
literal|null
operator|&&
name|di
operator|.
name|getMaxLoad
argument_list|()
operator|>
literal|0f
condition|)
name|hasMaxLoad
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|di
operator|.
name|getTeachingPreference
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|di
operator|.
name|getTeachingPreference
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
name|hasTeachPref
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|InstructorAttribute
name|at
range|:
name|di
operator|.
name|getAttributes
argument_list|()
control|)
if|if
condition|(
name|at
operator|.
name|getType
argument_list|()
operator|!=
literal|null
condition|)
name|attributeTypes
operator|.
name|add
argument_list|(
name|at
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|fixedHeaders1
init|=
operator|new
name|String
index|[]
block|{
name|MSG
operator|.
name|columnExternalId
argument_list|()
block|,
name|MSG
operator|.
name|columnInstructorName
argument_list|()
block|,
name|MSG
operator|.
name|columnInstructorPosition
argument_list|()
block|,
name|MSG
operator|.
name|columnInstructorNote
argument_list|()
block|,
name|MSG
operator|.
name|columnPreferences
argument_list|()
operator|+
literal|"<BR>"
operator|+
name|MSG
operator|.
name|columnTimePref
argument_list|()
block|,
literal|"<BR>"
operator|+
name|MSG
operator|.
name|columnRoomPref
argument_list|()
block|,
literal|"<BR>"
operator|+
name|MSG
operator|.
name|columnDistributionPref
argument_list|()
block|}
decl_stmt|;
name|String
index|[]
name|fixedHeaders2
init|=
operator|new
name|String
index|[]
block|{
name|MSG
operator|.
name|columnInstructorClassAssignments
argument_list|()
block|,
name|MSG
operator|.
name|columnInstructorExamAssignments
argument_list|()
block|,
name|MSG
operator|.
name|columnInstructorIgnoreTooFar
argument_list|()
block|}
decl_stmt|;
name|String
index|[]
name|headers
init|=
operator|new
name|String
index|[
name|fixedHeaders1
operator|.
name|length
operator|+
operator|(
name|hasCoursePrefs
condition|?
literal|1
else|:
literal|0
operator|)
operator|+
operator|(
name|hasTeachPref
condition|?
literal|1
else|:
literal|0
operator|)
operator|+
operator|(
name|hasMaxLoad
condition|?
literal|1
else|:
literal|0
operator|)
operator|+
name|attributeTypes
operator|.
name|size
argument_list|()
operator|+
name|fixedHeaders2
operator|.
name|length
index|]
decl_stmt|;
name|String
index|[]
name|aligns
init|=
operator|new
name|String
index|[
name|headers
operator|.
name|length
index|]
decl_stmt|;
name|boolean
index|[]
name|asc
init|=
operator|new
name|boolean
index|[
name|headers
operator|.
name|length
index|]
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|h
range|:
name|fixedHeaders1
control|)
block|{
name|headers
index|[
name|idx
index|]
operator|=
name|h
expr_stmt|;
name|aligns
index|[
name|idx
index|]
operator|=
literal|"left"
expr_stmt|;
name|asc
index|[
name|idx
index|]
operator|=
literal|true
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|hasCoursePrefs
condition|)
block|{
name|headers
index|[
name|idx
index|]
operator|=
literal|"<BR>"
operator|+
name|MSG
operator|.
name|columnCoursePref
argument_list|()
expr_stmt|;
name|aligns
index|[
name|idx
index|]
operator|=
literal|"left"
expr_stmt|;
name|asc
index|[
name|idx
index|]
operator|=
literal|true
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|hasTeachPref
condition|)
block|{
name|headers
index|[
name|idx
index|]
operator|=
name|MSG
operator|.
name|columnTeachingPreference
argument_list|()
expr_stmt|;
name|aligns
index|[
name|idx
index|]
operator|=
literal|"left"
expr_stmt|;
name|asc
index|[
name|idx
index|]
operator|=
literal|true
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|hasMaxLoad
condition|)
block|{
name|headers
index|[
name|idx
index|]
operator|=
name|MSG
operator|.
name|columnMaxTeachingLoad
argument_list|()
expr_stmt|;
name|aligns
index|[
name|idx
index|]
operator|=
literal|"left"
expr_stmt|;
name|asc
index|[
name|idx
index|]
operator|=
literal|true
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
for|for
control|(
name|InstructorAttributeType
name|at
range|:
name|attributeTypes
control|)
block|{
name|headers
index|[
name|idx
index|]
operator|=
name|at
operator|.
name|getReference
argument_list|()
expr_stmt|;
name|aligns
index|[
name|idx
index|]
operator|=
literal|"left"
expr_stmt|;
name|asc
index|[
name|idx
index|]
operator|=
literal|true
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
for|for
control|(
name|String
name|h
range|:
name|fixedHeaders2
control|)
block|{
name|headers
index|[
name|idx
index|]
operator|=
name|h
expr_stmt|;
name|aligns
index|[
name|idx
index|]
operator|=
literal|"left"
expr_stmt|;
name|asc
index|[
name|idx
index|]
operator|=
literal|true
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
comment|// Create new table
name|WebTable
name|webTable
init|=
operator|new
name|WebTable
argument_list|(
name|headers
operator|.
name|length
argument_list|,
literal|""
argument_list|,
literal|"instructorList.do?order=%%&deptId="
operator|+
name|deptId
argument_list|,
name|headers
argument_list|,
name|aligns
argument_list|,
name|asc
argument_list|)
decl_stmt|;
name|webTable
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap;"
argument_list|)
expr_stmt|;
name|webTable
operator|.
name|enableHR
argument_list|(
literal|"#9CB0CE"
argument_list|)
expr_stmt|;
name|String
name|instructorNameFormat
init|=
name|UserProperty
operator|.
name|NameFormat
operator|.
name|get
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|instructorSortOrder
init|=
name|UserProperty
operator|.
name|SortNames
operator|.
name|get
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|list
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentalInstructor
name|di
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
index|[]
name|line
init|=
operator|new
name|String
index|[
name|headers
operator|.
name|length
index|]
decl_stmt|;
name|Comparable
index|[]
name|cmp
init|=
operator|new
name|Comparable
index|[
name|headers
operator|.
name|length
index|]
decl_stmt|;
name|idx
operator|=
literal|0
expr_stmt|;
comment|// puid
if|if
condition|(
name|di
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
name|di
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|line
index|[
name|idx
index|]
operator|=
name|di
operator|.
name|getExternalUniqueId
argument_list|()
expr_stmt|;
name|cmp
index|[
name|idx
index|]
operator|=
name|di
operator|.
name|getExternalUniqueId
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|line
index|[
name|idx
index|]
operator|=
literal|"<center><img src='images/error.png' border='0' alt='"
operator|+
name|MSG
operator|.
name|altNotAvailableExternalId
argument_list|()
operator|+
literal|"' title='"
operator|+
name|MSG
operator|.
name|titleInstructorExternalIdNotSupplied
argument_list|()
operator|+
literal|"'></center>"
expr_stmt|;
name|cmp
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
comment|// instructor name
name|line
index|[
name|idx
index|]
operator|=
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|di
operator|.
name|getName
argument_list|(
name|instructorNameFormat
argument_list|)
argument_list|,
literal|"-"
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|CommonValues
operator|.
name|SortAsDisplayed
operator|.
name|eq
argument_list|(
name|instructorSortOrder
argument_list|)
condition|)
name|cmp
index|[
name|idx
index|]
operator|=
name|line
index|[
name|idx
index|]
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
else|else
name|cmp
index|[
name|idx
index|]
operator|=
name|di
operator|.
name|nameLastNameFirst
argument_list|()
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|idx
operator|++
expr_stmt|;
comment|// position
if|if
condition|(
name|di
operator|.
name|getPositionType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|line
index|[
name|idx
index|]
operator|=
name|di
operator|.
name|getPositionType
argument_list|()
operator|.
name|getLabel
argument_list|()
expr_stmt|;
name|cmp
index|[
name|idx
index|]
operator|=
name|di
operator|.
name|getPositionType
argument_list|()
operator|.
name|getSortOrder
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|line
index|[
name|idx
index|]
operator|=
name|MSG
operator|.
name|instructorPositionNotSpecified
argument_list|()
expr_stmt|;
name|cmp
index|[
name|idx
index|]
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
comment|// note
if|if
condition|(
name|di
operator|.
name|getNote
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|line
index|[
name|idx
index|]
operator|=
name|di
operator|.
name|getNote
argument_list|()
expr_stmt|;
name|cmp
index|[
name|idx
index|]
operator|=
name|di
operator|.
name|getNote
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|line
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
name|cmp
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
comment|// time preference
name|StringBuffer
name|timePref
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|di
operator|.
name|getTimePreferences
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|di
operator|.
name|getTimePreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePref
name|tp
init|=
operator|(
name|TimePref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|RequiredTimeTable
name|rtt
init|=
name|tp
operator|.
name|getRequiredTimeTable
argument_list|()
decl_stmt|;
if|if
condition|(
name|gridAsText
condition|)
block|{
name|timePref
operator|.
name|append
argument_list|(
literal|"<span onmouseover=\"showGwtInstructorAvailabilityHint(this, '"
operator|+
name|di
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"');\" onmouseout=\"hideGwtInstructorAvailabilityHint();\">"
operator|+
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|", "
argument_list|,
literal|"<br>"
argument_list|)
operator|+
literal|"</span>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|setDefaultSelection
argument_list|(
name|timeGridSize
argument_list|)
expr_stmt|;
name|timePref
operator|.
name|append
argument_list|(
literal|"<img border='0' onmouseover=\"showGwtInstructorAvailabilityHint(this, '"
operator|+
name|di
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"');\" onmouseout=\"hideGwtInstructorAvailabilityHint();\" "
operator|+
literal|"src='pattern?v="
operator|+
operator|(
name|timeVertical
condition|?
literal|1
else|:
literal|0
operator|)
operator|+
literal|"&s="
operator|+
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|getDefaultSelection
argument_list|()
operator|+
literal|"&p="
operator|+
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|getPreferences
argument_list|()
operator|+
literal|"' title='"
operator|+
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"'>&nbsp;"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|line
index|[
name|idx
index|]
operator|=
name|timePref
operator|.
name|toString
argument_list|()
expr_stmt|;
name|idx
operator|++
expr_stmt|;
comment|// room preferences
name|line
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
name|String
name|x
init|=
name|di
operator|.
name|getEffectivePrefHtmlForPrefType
argument_list|(
name|RoomPref
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|!=
literal|null
operator|&&
operator|!
name|x
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|line
index|[
name|idx
index|]
operator|+=
name|x
expr_stmt|;
block|}
name|x
operator|=
name|di
operator|.
name|getEffectivePrefHtmlForPrefType
argument_list|(
name|BuildingPref
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|x
operator|!=
literal|null
operator|&&
operator|!
name|x
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|line
index|[
name|idx
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|line
index|[
name|idx
index|]
operator|+=
literal|"<br>"
expr_stmt|;
name|line
index|[
name|idx
index|]
operator|+=
name|x
expr_stmt|;
block|}
name|x
operator|=
name|di
operator|.
name|getEffectivePrefHtmlForPrefType
argument_list|(
name|RoomFeaturePref
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|x
operator|!=
literal|null
operator|&&
operator|!
name|x
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|line
index|[
name|idx
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|line
index|[
name|idx
index|]
operator|+=
literal|"<br>"
expr_stmt|;
name|line
index|[
name|idx
index|]
operator|+=
name|x
expr_stmt|;
block|}
name|x
operator|=
name|di
operator|.
name|getEffectivePrefHtmlForPrefType
argument_list|(
name|RoomGroupPref
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|x
operator|!=
literal|null
operator|&&
operator|!
name|x
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|line
index|[
name|idx
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|line
index|[
name|idx
index|]
operator|+=
literal|"<br>"
expr_stmt|;
name|line
index|[
name|idx
index|]
operator|+=
name|x
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
comment|// distribution preferences
name|line
index|[
name|idx
index|]
operator|=
name|di
operator|.
name|getEffectivePrefHtmlForPrefType
argument_list|(
name|DistributionPref
operator|.
name|class
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
comment|// course preferences
if|if
condition|(
name|hasCoursePrefs
condition|)
block|{
name|line
index|[
name|idx
index|]
operator|=
name|di
operator|.
name|getEffectivePrefHtmlForPrefType
argument_list|(
name|InstructorCoursePref
operator|.
name|class
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
comment|// teaching preferences
if|if
condition|(
name|hasTeachPref
condition|)
block|{
name|PreferenceLevel
name|pref
init|=
name|di
operator|.
name|getTeachingPreference
argument_list|()
decl_stmt|;
if|if
condition|(
name|pref
operator|==
literal|null
condition|)
name|pref
operator|=
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
expr_stmt|;
name|line
index|[
name|idx
index|]
operator|=
literal|"<span style='font-weight:bold; color:"
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|pref
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|+
literal|";' title='"
operator|+
name|pref
operator|.
name|getPrefName
argument_list|()
operator|+
literal|"'>"
operator|+
name|pref
operator|.
name|getPrefName
argument_list|()
operator|+
literal|"</span>"
expr_stmt|;
name|cmp
index|[
name|idx
index|]
operator|=
name|pref
operator|.
name|getPrefId
argument_list|()
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
comment|// max load
if|if
condition|(
name|hasMaxLoad
condition|)
block|{
if|if
condition|(
name|di
operator|.
name|getMaxLoad
argument_list|()
operator|==
literal|null
condition|)
block|{
name|line
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
name|cmp
index|[
name|idx
index|]
operator|=
literal|0f
expr_stmt|;
block|}
else|else
block|{
name|line
index|[
name|idx
index|]
operator|=
name|Formats
operator|.
name|getNumberFormat
argument_list|(
literal|"0.##"
argument_list|)
operator|.
name|format
argument_list|(
name|di
operator|.
name|getMaxLoad
argument_list|()
argument_list|)
expr_stmt|;
name|cmp
index|[
name|idx
index|]
operator|=
name|di
operator|.
name|getMaxLoad
argument_list|()
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
block|}
for|for
control|(
name|InstructorAttributeType
name|at
range|:
name|attributeTypes
control|)
block|{
name|line
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
for|for
control|(
name|InstructorAttribute
name|a
range|:
name|di
operator|.
name|getAttributes
argument_list|(
name|at
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|line
index|[
name|idx
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|line
index|[
name|idx
index|]
operator|+=
literal|"<br>"
expr_stmt|;
block|}
name|line
index|[
name|idx
index|]
operator|+=
literal|"<span title='"
operator|+
name|a
operator|.
name|getName
argument_list|()
operator|+
literal|"'>"
operator|+
name|a
operator|.
name|getCode
argument_list|()
operator|+
literal|"</span>"
expr_stmt|;
block|}
name|cmp
index|[
name|idx
index|]
operator|=
name|line
index|[
name|idx
index|]
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
name|TreeSet
name|classes
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|ClassInstructorComparator
argument_list|(
operator|new
name|ClassComparator
argument_list|(
name|ClassComparator
operator|.
name|COMPARE_BY_LABEL
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|classes
operator|.
name|addAll
argument_list|(
name|di
operator|.
name|getClasses
argument_list|()
argument_list|)
expr_stmt|;
name|line
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|classes
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|ci
init|=
operator|(
name|ClassInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Class_
name|c
init|=
name|ci
operator|.
name|getClassInstructing
argument_list|()
decl_stmt|;
name|String
name|className
init|=
name|c
operator|.
name|getClassLabel
argument_list|()
decl_stmt|;
name|String
name|title
init|=
name|className
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|isCancelled
argument_list|()
condition|)
name|title
operator|=
name|MSG
operator|.
name|classNoteCancelled
argument_list|(
name|c
operator|.
name|getClassLabel
argument_list|()
argument_list|)
expr_stmt|;
name|title
operator|+=
literal|" ("
operator|+
name|ci
operator|.
name|getPercentShare
argument_list|()
operator|+
literal|"%"
operator|+
operator|(
name|ci
operator|.
name|isLead
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|", "
operator|+
name|MSG
operator|.
name|titleCheckConflicts
argument_list|()
else|:
literal|""
operator|)
operator|+
literal|")"
expr_stmt|;
if|if
condition|(
operator|!
name|c
operator|.
name|isDisplayInstructor
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|title
operator|+=
literal|" - "
operator|+
name|MSG
operator|.
name|titleDoNotDisplayInstructor
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
name|line
index|[
name|idx
index|]
operator|+=
literal|"<span style='color: gray; text-decoration: line-through;"
operator|+
operator|(
name|ci
operator|.
name|isLead
argument_list|()
condition|?
literal|"font-weight:bold;"
else|:
literal|""
operator|)
operator|+
operator|(
name|c
operator|.
name|isDisplayInstructor
argument_list|()
condition|?
literal|""
else|:
literal|"font-style:italic;"
operator|)
operator|+
literal|"' title='"
operator|+
name|title
operator|+
literal|"'>"
expr_stmt|;
block|}
if|else if
condition|(
name|ci
operator|.
name|isLead
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|line
index|[
name|idx
index|]
operator|+=
literal|"<span style='font-weight:bold;"
operator|+
operator|(
name|c
operator|.
name|isDisplayInstructor
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|""
else|:
literal|"font-style:italic;"
operator|)
operator|+
literal|"' title='"
operator|+
name|title
operator|+
literal|"'>"
expr_stmt|;
block|}
else|else
block|{
name|line
index|[
name|idx
index|]
operator|+=
literal|"<span title='"
operator|+
name|title
operator|+
literal|"'>"
expr_stmt|;
block|}
name|line
index|[
name|idx
index|]
operator|+=
name|className
expr_stmt|;
name|line
index|[
name|idx
index|]
operator|+=
literal|"</span>"
expr_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|line
index|[
name|idx
index|]
operator|+=
literal|"<br>"
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
name|TreeSet
name|exams
init|=
operator|new
name|TreeSet
argument_list|(
name|di
operator|.
name|getExams
argument_list|()
argument_list|)
decl_stmt|;
name|line
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exams
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|context
operator|.
name|hasPermission
argument_list|(
name|exam
argument_list|,
name|Right
operator|.
name|ExaminationView
argument_list|)
condition|)
continue|continue;
name|String
name|examName
init|=
name|exam
operator|.
name|getLabel
argument_list|()
decl_stmt|;
if|if
condition|(
name|exam
operator|.
name|getExamType
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|ExamType
operator|.
name|sExamTypeMidterm
condition|)
block|{
name|line
index|[
name|idx
index|]
operator|+=
literal|"<span title='"
operator|+
name|examName
operator|+
literal|" "
operator|+
name|MSG
operator|.
name|titleMidtermExamination
argument_list|()
operator|+
literal|"'>"
operator|+
name|examName
operator|+
literal|"</span>"
expr_stmt|;
block|}
else|else
block|{
name|line
index|[
name|idx
index|]
operator|+=
literal|"<span style='font-weight:bold;' title='"
operator|+
name|examName
operator|+
literal|" "
operator|+
name|MSG
operator|.
name|titleFinalExamination
argument_list|()
operator|+
literal|"'>"
operator|+
name|examName
operator|+
literal|"</span>"
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|line
index|[
name|idx
index|]
operator|+=
literal|"<br>"
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
if|if
condition|(
name|di
operator|.
name|isIgnoreToFar
argument_list|()
operator|==
literal|null
condition|?
literal|false
else|:
name|di
operator|.
name|isIgnoreToFar
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|line
index|[
name|idx
index|]
operator|=
literal|"<img border='0' title='"
operator|+
name|MSG
operator|.
name|titleIgnoreTooFarDistances
argument_list|()
operator|+
literal|"' alt='true' align='absmiddle' src='images/accept.png'>"
expr_stmt|;
name|cmp
index|[
name|idx
index|]
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|line
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
name|cmp
index|[
name|idx
index|]
operator|=
literal|false
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
name|boolean
name|back
init|=
name|di
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|backId
argument_list|)
decl_stmt|;
if|if
condition|(
name|back
condition|)
name|line
index|[
literal|0
index|]
operator|=
literal|"<A name=\"back\"></A>"
operator|+
name|line
index|[
literal|0
index|]
expr_stmt|;
comment|// Add to web table
name|webTable
operator|.
name|addLine
argument_list|(
literal|"onClick=\"document.location='instructorDetail.do?instructorId="
operator|+
name|di
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"&deptId="
operator|+
name|deptId
operator|+
literal|"';\""
argument_list|,
name|line
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
block|}
name|String
name|tblData
init|=
name|webTable
operator|.
name|printTable
argument_list|(
name|order
argument_list|)
decl_stmt|;
return|return
name|tblData
return|;
block|}
block|}
specifier|public
name|PdfWebTable
name|pdfTableForInstructor
parameter_list|(
name|SessionContext
name|context
parameter_list|,
name|String
name|deptId
parameter_list|,
name|boolean
name|canHaveImages
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|timeVertical
init|=
name|RequiredTimeTable
operator|.
name|getTimeGridVertical
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|gridAsText
init|=
name|RequiredTimeTable
operator|.
name|getTimeGridAsText
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|timeGridSize
init|=
name|RequiredTimeTable
operator|.
name|getTimeGridSize
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
comment|// Loop through Instructor class
name|List
name|list
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|deptId
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|ALL_OPTION_VALUE
argument_list|)
condition|)
name|list
operator|=
name|DepartmentalInstructor
operator|.
name|findInstructorsForSession
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|list
operator|=
name|DepartmentalInstructor
operator|.
name|findInstructorsForDepartment
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|deptId
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
operator|||
name|list
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|null
return|;
name|boolean
name|hasCoursePrefs
init|=
literal|false
decl_stmt|;
name|boolean
name|hasTeachPref
init|=
literal|false
decl_stmt|;
name|boolean
name|hasMaxLoad
init|=
literal|false
decl_stmt|;
name|TreeSet
argument_list|<
name|InstructorAttributeType
argument_list|>
name|attributeTypes
init|=
operator|new
name|TreeSet
argument_list|<
name|InstructorAttributeType
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|InstructorAttributeType
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|InstructorAttributeType
name|o1
parameter_list|,
name|InstructorAttributeType
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|getReference
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getReference
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|list
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentalInstructor
name|di
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|di
operator|.
name|getPreferences
argument_list|(
name|InstructorCoursePref
operator|.
name|class
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
name|hasCoursePrefs
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|di
operator|.
name|getMaxLoad
argument_list|()
operator|!=
literal|null
operator|&&
name|di
operator|.
name|getMaxLoad
argument_list|()
operator|>
literal|0f
condition|)
name|hasMaxLoad
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|di
operator|.
name|getTeachingPreference
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|di
operator|.
name|getTeachingPreference
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
name|hasTeachPref
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|InstructorAttribute
name|at
range|:
name|di
operator|.
name|getAttributes
argument_list|()
control|)
if|if
condition|(
name|at
operator|.
name|getType
argument_list|()
operator|!=
literal|null
condition|)
name|attributeTypes
operator|.
name|add
argument_list|(
name|at
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|fixedHeaders1
init|=
operator|new
name|String
index|[]
block|{
name|MSG
operator|.
name|columnExternalId
argument_list|()
block|,
name|MSG
operator|.
name|columnInstructorName
argument_list|()
block|,
name|MSG
operator|.
name|columnInstructorPosition
argument_list|()
block|,
name|MSG
operator|.
name|columnInstructorNote
argument_list|()
block|,
name|MSG
operator|.
name|columnPreferences
argument_list|()
operator|+
literal|"\n"
operator|+
name|MSG
operator|.
name|columnTimePref
argument_list|()
block|,
literal|"\n"
operator|+
name|MSG
operator|.
name|columnRoomPref
argument_list|()
block|,
literal|"\n"
operator|+
name|MSG
operator|.
name|columnDistributionPref
argument_list|()
block|}
decl_stmt|;
name|String
index|[]
name|fixedHeaders2
init|=
operator|new
name|String
index|[]
block|{
name|MSG
operator|.
name|columnInstructorClassAssignmentsPDF
argument_list|()
block|,
name|MSG
operator|.
name|columnInstructorExamAssignmentsPDF
argument_list|()
block|,
name|MSG
operator|.
name|columnInstructorIgnoreTooFarPDF
argument_list|()
block|}
decl_stmt|;
name|String
index|[]
name|headers
init|=
operator|new
name|String
index|[
name|fixedHeaders1
operator|.
name|length
operator|+
operator|(
name|hasCoursePrefs
condition|?
literal|1
else|:
literal|0
operator|)
operator|+
operator|(
name|hasTeachPref
condition|?
literal|1
else|:
literal|0
operator|)
operator|+
operator|(
name|hasMaxLoad
condition|?
literal|1
else|:
literal|0
operator|)
operator|+
name|attributeTypes
operator|.
name|size
argument_list|()
operator|+
name|fixedHeaders2
operator|.
name|length
index|]
decl_stmt|;
name|String
index|[]
name|aligns
init|=
operator|new
name|String
index|[
name|headers
operator|.
name|length
index|]
decl_stmt|;
name|boolean
index|[]
name|asc
init|=
operator|new
name|boolean
index|[
name|headers
operator|.
name|length
index|]
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|h
range|:
name|fixedHeaders1
control|)
block|{
name|headers
index|[
name|idx
index|]
operator|=
name|h
expr_stmt|;
name|aligns
index|[
name|idx
index|]
operator|=
literal|"left"
expr_stmt|;
name|asc
index|[
name|idx
index|]
operator|=
literal|true
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|hasCoursePrefs
condition|)
block|{
name|headers
index|[
name|idx
index|]
operator|=
literal|"\n"
operator|+
name|MSG
operator|.
name|columnCoursePref
argument_list|()
expr_stmt|;
name|aligns
index|[
name|idx
index|]
operator|=
literal|"left"
expr_stmt|;
name|asc
index|[
name|idx
index|]
operator|=
literal|true
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|hasTeachPref
condition|)
block|{
name|headers
index|[
name|idx
index|]
operator|=
name|MSG
operator|.
name|columnTeachingPreferencePDF
argument_list|()
expr_stmt|;
name|aligns
index|[
name|idx
index|]
operator|=
literal|"left"
expr_stmt|;
name|asc
index|[
name|idx
index|]
operator|=
literal|true
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|hasMaxLoad
condition|)
block|{
name|headers
index|[
name|idx
index|]
operator|=
name|MSG
operator|.
name|columnMaxTeachingLoadPDF
argument_list|()
expr_stmt|;
name|aligns
index|[
name|idx
index|]
operator|=
literal|"left"
expr_stmt|;
name|asc
index|[
name|idx
index|]
operator|=
literal|true
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
for|for
control|(
name|InstructorAttributeType
name|at
range|:
name|attributeTypes
control|)
block|{
name|headers
index|[
name|idx
index|]
operator|=
name|at
operator|.
name|getReference
argument_list|()
expr_stmt|;
name|aligns
index|[
name|idx
index|]
operator|=
literal|"left"
expr_stmt|;
name|asc
index|[
name|idx
index|]
operator|=
literal|true
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
for|for
control|(
name|String
name|h
range|:
name|fixedHeaders2
control|)
block|{
name|headers
index|[
name|idx
index|]
operator|=
name|h
expr_stmt|;
name|aligns
index|[
name|idx
index|]
operator|=
literal|"left"
expr_stmt|;
name|asc
index|[
name|idx
index|]
operator|=
literal|true
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
comment|// Create new table
name|PdfWebTable
name|webTable
init|=
operator|new
name|PdfWebTable
argument_list|(
name|headers
operator|.
name|length
argument_list|,
name|MSG
operator|.
name|sectionTitleInstructorList
argument_list|()
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|,
name|aligns
argument_list|,
name|asc
argument_list|)
decl_stmt|;
name|String
name|instructorNameFormat
init|=
name|UserProperty
operator|.
name|NameFormat
operator|.
name|get
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|instructorSortOrder
init|=
name|UserProperty
operator|.
name|SortNames
operator|.
name|get
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|list
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentalInstructor
name|di
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
index|[]
name|line
init|=
operator|new
name|String
index|[
name|headers
operator|.
name|length
index|]
decl_stmt|;
name|Comparable
index|[]
name|cmp
init|=
operator|new
name|Comparable
index|[
name|headers
operator|.
name|length
index|]
decl_stmt|;
name|idx
operator|=
literal|0
expr_stmt|;
comment|// puid
if|if
condition|(
name|di
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
name|di
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|line
index|[
name|idx
index|]
operator|=
name|di
operator|.
name|getExternalUniqueId
argument_list|()
expr_stmt|;
name|cmp
index|[
name|idx
index|]
operator|=
name|di
operator|.
name|getExternalUniqueId
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|line
index|[
name|idx
index|]
operator|=
literal|"@@ITALIC "
operator|+
name|MSG
operator|.
name|instructorExternalIdNotSpecified
argument_list|()
expr_stmt|;
name|cmp
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
comment|// instructor name
name|line
index|[
name|idx
index|]
operator|=
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|di
operator|.
name|getName
argument_list|(
name|instructorNameFormat
argument_list|)
argument_list|,
literal|"-"
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|CommonValues
operator|.
name|SortAsDisplayed
operator|.
name|eq
argument_list|(
name|instructorSortOrder
argument_list|)
condition|)
name|cmp
index|[
name|idx
index|]
operator|=
name|line
index|[
name|idx
index|]
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
else|else
name|cmp
index|[
name|idx
index|]
operator|=
name|di
operator|.
name|nameLastNameFirst
argument_list|()
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|idx
operator|++
expr_stmt|;
comment|// position
if|if
condition|(
name|di
operator|.
name|getPositionType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|line
index|[
name|idx
index|]
operator|=
name|di
operator|.
name|getPositionType
argument_list|()
operator|.
name|getLabel
argument_list|()
expr_stmt|;
name|cmp
index|[
name|idx
index|]
operator|=
name|di
operator|.
name|getPositionType
argument_list|()
operator|.
name|getSortOrder
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|line
index|[
name|idx
index|]
operator|=
literal|"@@ITALIC "
operator|+
name|MSG
operator|.
name|instructorPositionNotSpecified
argument_list|()
expr_stmt|;
name|cmp
index|[
name|idx
index|]
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
comment|// note
if|if
condition|(
name|di
operator|.
name|getNote
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|line
index|[
name|idx
index|]
operator|=
name|di
operator|.
name|getNote
argument_list|()
expr_stmt|;
name|cmp
index|[
name|idx
index|]
operator|=
name|di
operator|.
name|getNote
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|line
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
name|cmp
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
comment|// time preference
name|StringBuffer
name|timePref
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|di
operator|.
name|getTimePreferences
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|di
operator|.
name|getTimePreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePref
name|tp
init|=
operator|(
name|TimePref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|RequiredTimeTable
name|rtt
init|=
name|tp
operator|.
name|getRequiredTimeTable
argument_list|()
decl_stmt|;
if|if
condition|(
name|gridAsText
operator|||
operator|!
name|canHaveImages
condition|)
block|{
name|timePref
operator|.
name|append
argument_list|(
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|", "
argument_list|,
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|setDefaultSelection
argument_list|(
name|timeGridSize
argument_list|)
expr_stmt|;
name|Image
name|image
init|=
name|rtt
operator|.
name|createBufferedImage
argument_list|(
name|timeVertical
argument_list|)
decl_stmt|;
if|if
condition|(
name|image
operator|!=
literal|null
condition|)
block|{
name|webTable
operator|.
name|addImage
argument_list|(
name|tp
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|image
argument_list|)
expr_stmt|;
name|timePref
operator|.
name|append
argument_list|(
literal|"@@IMAGE "
operator|+
name|tp
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
else|else
name|timePref
operator|.
name|append
argument_list|(
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|", "
argument_list|,
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|timePref
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|line
index|[
name|idx
index|]
operator|=
name|timePref
operator|.
name|toString
argument_list|()
expr_stmt|;
name|idx
operator|++
expr_stmt|;
comment|// room preferences
name|line
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|di
operator|.
name|effectivePreferences
argument_list|(
name|RoomPref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomPref
name|rp
init|=
operator|(
name|RoomPref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|line
index|[
name|idx
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|line
index|[
name|idx
index|]
operator|+=
literal|"\n"
expr_stmt|;
name|line
index|[
name|idx
index|]
operator|+=
literal|"@@COLOR "
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|rp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|rp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
name|rp
operator|.
name|getRoom
argument_list|()
operator|.
name|getLabel
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|di
operator|.
name|effectivePreferences
argument_list|(
name|BuildingPref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BuildingPref
name|bp
init|=
operator|(
name|BuildingPref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|line
index|[
name|idx
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|line
index|[
name|idx
index|]
operator|+=
literal|"\n"
expr_stmt|;
name|line
index|[
name|idx
index|]
operator|+=
literal|"@@COLOR "
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|bp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|bp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
name|bp
operator|.
name|getBuilding
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|di
operator|.
name|effectivePreferences
argument_list|(
name|RoomFeaturePref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomFeaturePref
name|rfp
init|=
operator|(
name|RoomFeaturePref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|line
index|[
name|idx
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|line
index|[
name|idx
index|]
operator|+=
literal|"\n"
expr_stmt|;
name|line
index|[
name|idx
index|]
operator|+=
literal|"@@COLOR "
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|rfp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|rfp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
name|rfp
operator|.
name|getRoomFeature
argument_list|()
operator|.
name|getLabel
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|di
operator|.
name|effectivePreferences
argument_list|(
name|RoomGroupPref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomGroupPref
name|rgp
init|=
operator|(
name|RoomGroupPref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|line
index|[
name|idx
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|line
index|[
name|idx
index|]
operator|+=
literal|"\n"
expr_stmt|;
name|line
index|[
name|idx
index|]
operator|+=
literal|"@@COLOR "
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|rgp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|rgp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
name|rgp
operator|.
name|getRoomGroup
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
comment|// distribution preferences
name|line
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|di
operator|.
name|effectivePreferences
argument_list|(
name|DistributionPref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionPref
name|dp
init|=
operator|(
name|DistributionPref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|line
index|[
name|idx
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|line
index|[
name|idx
index|]
operator|+=
literal|"\n"
expr_stmt|;
name|line
index|[
name|idx
index|]
operator|+=
literal|"@@COLOR "
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|dp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|dp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
name|dp
operator|.
name|getDistributionType
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
comment|// course preferences
if|if
condition|(
name|hasCoursePrefs
condition|)
block|{
name|line
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|di
operator|.
name|effectivePreferences
argument_list|(
name|InstructorCoursePref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstructorCoursePref
name|dp
init|=
operator|(
name|InstructorCoursePref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|line
index|[
name|idx
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|line
index|[
name|idx
index|]
operator|+=
literal|"\n"
expr_stmt|;
name|line
index|[
name|idx
index|]
operator|+=
literal|"@@COLOR "
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|dp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|dp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
name|dp
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
block|}
comment|// teaching preferences
if|if
condition|(
name|hasTeachPref
condition|)
block|{
name|PreferenceLevel
name|pref
init|=
name|di
operator|.
name|getTeachingPreference
argument_list|()
decl_stmt|;
if|if
condition|(
name|pref
operator|==
literal|null
condition|)
name|pref
operator|=
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
expr_stmt|;
name|line
index|[
name|idx
index|]
operator|=
literal|"@@COLOR "
operator|+
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|pref
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|pref
operator|.
name|getPrefName
argument_list|()
expr_stmt|;
name|cmp
index|[
name|idx
index|]
operator|=
name|pref
operator|.
name|getPrefId
argument_list|()
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
comment|// max load
if|if
condition|(
name|hasMaxLoad
condition|)
block|{
if|if
condition|(
name|di
operator|.
name|getMaxLoad
argument_list|()
operator|==
literal|null
condition|)
block|{
name|line
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
name|cmp
index|[
name|idx
index|]
operator|=
literal|0f
expr_stmt|;
block|}
else|else
block|{
name|line
index|[
name|idx
index|]
operator|=
name|Formats
operator|.
name|getNumberFormat
argument_list|(
literal|"0.##"
argument_list|)
operator|.
name|format
argument_list|(
name|di
operator|.
name|getMaxLoad
argument_list|()
argument_list|)
expr_stmt|;
name|cmp
index|[
name|idx
index|]
operator|=
name|di
operator|.
name|getMaxLoad
argument_list|()
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
block|}
for|for
control|(
name|InstructorAttributeType
name|at
range|:
name|attributeTypes
control|)
block|{
name|line
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
for|for
control|(
name|InstructorAttribute
name|a
range|:
name|di
operator|.
name|getAttributes
argument_list|(
name|at
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|line
index|[
name|idx
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|line
index|[
name|idx
index|]
operator|+=
literal|"\n"
expr_stmt|;
block|}
name|line
index|[
name|idx
index|]
operator|+=
name|a
operator|.
name|getCode
argument_list|()
expr_stmt|;
block|}
name|cmp
index|[
name|idx
index|]
operator|=
name|line
index|[
name|idx
index|]
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
name|TreeSet
name|classes
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|ClassInstructorComparator
argument_list|(
operator|new
name|ClassComparator
argument_list|(
name|ClassComparator
operator|.
name|COMPARE_BY_LABEL
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|classes
operator|.
name|addAll
argument_list|(
name|di
operator|.
name|getClasses
argument_list|()
argument_list|)
expr_stmt|;
name|line
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|classes
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|ci
init|=
operator|(
name|ClassInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Class_
name|c
init|=
name|ci
operator|.
name|getClassInstructing
argument_list|()
decl_stmt|;
name|String
name|className
init|=
name|c
operator|.
name|getClassLabel
argument_list|()
decl_stmt|;
if|if
condition|(
name|ci
operator|.
name|isLead
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
name|line
index|[
name|idx
index|]
operator|+=
literal|"@@BOLD "
expr_stmt|;
if|if
condition|(
operator|!
name|c
operator|.
name|isDisplayInstructor
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
name|line
index|[
name|idx
index|]
operator|+=
literal|"@@ITALIC "
expr_stmt|;
name|line
index|[
name|idx
index|]
operator|+=
name|className
expr_stmt|;
if|if
condition|(
operator|!
name|c
operator|.
name|isDisplayInstructor
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
name|line
index|[
name|idx
index|]
operator|+=
literal|"@@END_ITALIC "
expr_stmt|;
if|if
condition|(
name|ci
operator|.
name|isLead
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
name|line
index|[
name|idx
index|]
operator|+=
literal|"@@END_BOLD "
expr_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|line
index|[
name|idx
index|]
operator|+=
literal|"\n"
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
name|TreeSet
name|exams
init|=
operator|new
name|TreeSet
argument_list|(
name|di
operator|.
name|getExams
argument_list|()
argument_list|)
decl_stmt|;
name|line
index|[
name|idx
index|]
operator|=
literal|""
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exams
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|context
operator|.
name|hasPermission
argument_list|(
name|exam
argument_list|,
name|Right
operator|.
name|ExaminationView
argument_list|)
condition|)
continue|continue;
name|String
name|examName
init|=
name|exam
operator|.
name|getLabel
argument_list|()
decl_stmt|;
if|if
condition|(
name|exam
operator|.
name|getExamType
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|ExamType
operator|.
name|sExamTypeMidterm
condition|)
block|{
name|line
index|[
name|idx
index|]
operator|+=
name|examName
expr_stmt|;
block|}
else|else
block|{
name|line
index|[
name|idx
index|]
operator|+=
literal|"@@BOLD "
operator|+
name|examName
operator|+
literal|"@@END_BOLD "
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|line
index|[
name|idx
index|]
operator|+=
literal|"\n"
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
if|if
condition|(
name|di
operator|.
name|isIgnoreToFar
argument_list|()
operator|==
literal|null
condition|?
literal|false
else|:
name|di
operator|.
name|isIgnoreToFar
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|line
index|[
name|idx
index|]
operator|=
literal|"@@ITALIC "
operator|+
name|MSG
operator|.
name|yes
argument_list|()
expr_stmt|;
name|cmp
index|[
name|idx
index|]
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|line
index|[
name|idx
index|]
operator|=
literal|"@@ITALIC "
operator|+
name|MSG
operator|.
name|no
argument_list|()
expr_stmt|;
name|cmp
index|[
name|idx
index|]
operator|=
literal|false
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
comment|// Add to web table
name|webTable
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
name|line
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
block|}
return|return
name|webTable
return|;
block|}
block|}
end_class

end_unit

