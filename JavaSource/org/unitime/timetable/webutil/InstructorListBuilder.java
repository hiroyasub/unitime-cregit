begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|Web
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|WebTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|messages
operator|.
name|CourseMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|BuildingPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Designator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeaturePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomGroupPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|ClassComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|ClassInstructorComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  * @author Heston Fernandes  */
end_comment

begin_class
specifier|public
class|class
name|InstructorListBuilder
block|{
specifier|protected
specifier|final
specifier|static
name|CourseMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|CourseMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|String
name|htmlTableForInstructor
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|String
name|deptId
parameter_list|,
name|int
name|order
parameter_list|,
name|String
name|backId
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|cols
init|=
literal|11
decl_stmt|;
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|Long
name|sessionId
init|=
operator|(
name|Long
operator|)
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|SESSION_ID_ATTR_NAME
argument_list|)
decl_stmt|;
name|boolean
name|timeVertical
init|=
name|RequiredTimeTable
operator|.
name|getTimeGridVertical
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|boolean
name|gridAsText
init|=
name|RequiredTimeTable
operator|.
name|getTimeGridAsText
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|String
name|timeGridSize
init|=
name|RequiredTimeTable
operator|.
name|getTimeGridSize
argument_list|(
name|user
argument_list|)
decl_stmt|;
comment|// Create new table
name|WebTable
name|webTable
init|=
operator|new
name|WebTable
argument_list|(
name|cols
argument_list|,
literal|""
argument_list|,
literal|"instructorList.do?order=%%&deptId="
operator|+
name|deptId
argument_list|,
operator|new
name|String
index|[]
block|{
name|MSG
operator|.
name|columnExternalId
argument_list|()
block|,
name|MSG
operator|.
name|columnInstructorName
argument_list|()
block|,
name|MSG
operator|.
name|columnInstructorPosition
argument_list|()
block|,
name|MSG
operator|.
name|columnInstructorDesignatorNr
argument_list|()
block|,
name|MSG
operator|.
name|columnInstructorNote
argument_list|()
block|,
name|MSG
operator|.
name|columnPreferences
argument_list|()
operator|+
literal|"<BR>"
operator|+
name|MSG
operator|.
name|columnTimePref
argument_list|()
block|,
literal|"<BR>"
operator|+
name|MSG
operator|.
name|columnRoomPref
argument_list|()
block|,
literal|"<BR>"
operator|+
name|MSG
operator|.
name|columnDistributionPref
argument_list|()
block|,
name|MSG
operator|.
name|columnInstructorClassAssignments
argument_list|()
block|,
name|MSG
operator|.
name|columnInstructorExamAssignments
argument_list|()
block|,
name|MSG
operator|.
name|columnInstructorIgnoreTooFar
argument_list|()
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"right"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
decl_stmt|;
name|webTable
operator|.
name|setRowStyle
argument_list|(
literal|"white-space:nowrap;"
argument_list|)
expr_stmt|;
name|webTable
operator|.
name|enableHR
argument_list|(
literal|"#9CB0CE"
argument_list|)
expr_stmt|;
comment|// Loop through Instructor class
name|List
name|list
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|deptId
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|ALL_OPTION_VALUE
argument_list|)
condition|)
name|list
operator|=
name|DepartmentalInstructor
operator|.
name|getInstructorByDept
argument_list|(
name|sessionId
argument_list|,
literal|null
argument_list|)
expr_stmt|;
else|else
name|list
operator|=
name|DepartmentalInstructor
operator|.
name|getInstructorByDept
argument_list|(
name|sessionId
argument_list|,
operator|new
name|Long
argument_list|(
name|deptId
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
operator|||
name|list
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|String
name|instructorNameFormat
init|=
name|Settings
operator|.
name|getSettingValue
argument_list|(
name|user
argument_list|,
name|Constants
operator|.
name|SETTINGS_INSTRUCTOR_NAME_FORMAT
argument_list|)
decl_stmt|;
name|String
name|instructorSortOrder
init|=
name|Settings
operator|.
name|getSettingValue
argument_list|(
name|user
argument_list|,
name|Constants
operator|.
name|SETTINGS_INSTRUCTOR_SORT
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|list
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentalInstructor
name|di
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
comment|//puid
name|String
name|puid
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|di
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
name|di
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|puid
operator|=
name|di
operator|.
name|getExternalUniqueId
argument_list|()
expr_stmt|;
else|else
name|puid
operator|=
literal|"<center><IMG src='images/Error16.jpg' border='0' alt='"
operator|+
name|MSG
operator|.
name|altNotAvailableExternalId
argument_list|()
operator|+
literal|"' title='"
operator|+
name|MSG
operator|.
name|titleInstructorExternalIdNotSupplied
argument_list|()
operator|+
literal|"'></center>"
expr_stmt|;
comment|//get instructor name
name|String
name|name
init|=
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|di
operator|.
name|getName
argument_list|(
name|instructorNameFormat
argument_list|)
argument_list|,
literal|"-"
operator|.
name|toCharArray
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|nameOrd
init|=
name|di
operator|.
name|nameLastNameFirst
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|instructorSortOrder
operator|!=
literal|null
operator|&&
name|instructorSortOrder
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|SETTINGS_INSTRUCTOR_SORT_NATURAL
argument_list|)
condition|)
name|nameOrd
operator|=
name|name
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
comment|// position
name|String
name|posType
init|=
name|MSG
operator|.
name|instructorPositionNotSpecified
argument_list|()
decl_stmt|;
if|if
condition|(
name|di
operator|.
name|getPositionType
argument_list|()
operator|!=
literal|null
condition|)
name|posType
operator|=
name|di
operator|.
name|getPositionType
argument_list|()
operator|.
name|getLabel
argument_list|()
expr_stmt|;
name|StringBuffer
name|designator
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|di
operator|.
name|getDesignatorSubjectAreas
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|di
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSubjectAreas
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Designator
name|des
init|=
operator|(
name|Designator
operator|)
name|di
operator|.
name|getDesignatorSubjectAreas
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|designator
operator|.
name|append
argument_list|(
name|des
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|lastCode
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|(
operator|new
name|TreeSet
argument_list|(
name|di
operator|.
name|getDesignatorSubjectAreas
argument_list|()
argument_list|)
operator|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Designator
name|des
init|=
operator|(
name|Designator
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastCode
operator|==
literal|null
condition|)
block|{
name|designator
operator|.
name|append
argument_list|(
name|des
operator|.
name|getCode
argument_list|()
operator|+
literal|" ("
operator|+
name|des
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|lastCode
operator|.
name|equals
argument_list|(
name|des
operator|.
name|getCode
argument_list|()
argument_list|)
condition|)
block|{
name|designator
operator|.
name|append
argument_list|(
literal|", "
operator|+
name|des
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|designator
operator|.
name|append
argument_list|(
literal|")<br>"
operator|+
name|des
operator|.
name|getCode
argument_list|()
operator|+
literal|" ("
operator|+
name|des
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|lastCode
operator|=
name|des
operator|.
name|getCode
argument_list|()
expr_stmt|;
block|}
name|designator
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* 				//get departments 				StringBuffer deptFte = new StringBuffer(); 				deptFte.append(percentFormatter.format(di.getFte()==null?0.0:di.getFte().doubleValue())); 				*/
comment|/* 				 * The following piece of code increases response time by a large factor (minutes instead of seconds) 				 * For now just display FTE for current department instead of displaying FTE for other departments 				 */
comment|/* 				List all = DepartmentalInstructor.getAllForInstructor(di); 				TreeSet sortedAll = new TreeSet(all); 				for (Iterator iterInstDept = sortedAll.iterator(); iterInstDept.hasNext();) { 					DepartmentalInstructor anotherDi = (DepartmentalInstructor) iterInstDept.next(); 					Department d = anotherDi.getDepartment(); 					if (d != null) { 						if (deptFte.length()> 0 ) { 							deptFte.append("<br>"); 						} 					    deptFte.append(d.getAbbreviation()); 						if (anotherDi.getFte() != null&& anotherDi.getFte().intValue() != 1) { 							deptFte.append(" (" + percentFormatter.format(anotherDi.getFte().doubleValue()) + ")"); 						} 					} 				} 				*/
comment|// note
name|String
name|note
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|di
operator|.
name|getNote
argument_list|()
operator|!=
literal|null
condition|)
name|note
operator|=
name|di
operator|.
name|getNote
argument_list|()
expr_stmt|;
comment|//get room preferences
name|String
name|rmPref
init|=
literal|""
decl_stmt|;
name|String
name|x
init|=
name|di
operator|.
name|getEffectivePrefHtmlForPrefType
argument_list|(
name|RoomPref
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|!=
literal|null
operator|&&
name|x
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|rmPref
operator|+=
name|x
expr_stmt|;
block|}
name|x
operator|=
name|di
operator|.
name|getEffectivePrefHtmlForPrefType
argument_list|(
name|BuildingPref
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|x
operator|!=
literal|null
operator|&&
name|x
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|rmPref
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|rmPref
operator|+=
literal|"<br>"
expr_stmt|;
name|rmPref
operator|+=
name|x
expr_stmt|;
block|}
name|x
operator|=
name|di
operator|.
name|getEffectivePrefHtmlForPrefType
argument_list|(
name|RoomFeaturePref
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|x
operator|!=
literal|null
operator|&&
name|x
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|rmPref
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|rmPref
operator|+=
literal|"<br>"
expr_stmt|;
name|rmPref
operator|+=
name|x
expr_stmt|;
block|}
name|x
operator|=
name|di
operator|.
name|getEffectivePrefHtmlForPrefType
argument_list|(
name|RoomGroupPref
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|x
operator|!=
literal|null
operator|&&
name|x
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|rmPref
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|rmPref
operator|+=
literal|"<br>"
expr_stmt|;
name|rmPref
operator|+=
name|x
expr_stmt|;
block|}
comment|//get time preference
name|StringBuffer
name|timePref
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|di
operator|.
name|getTimePreferences
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|di
operator|.
name|getTimePreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePref
name|tp
init|=
operator|(
name|TimePref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|RequiredTimeTable
name|rtt
init|=
name|tp
operator|.
name|getRequiredTimeTable
argument_list|()
decl_stmt|;
if|if
condition|(
name|gridAsText
condition|)
block|{
name|timePref
operator|.
name|append
argument_list|(
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|", "
argument_list|,
literal|"<br>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|setDefaultSelection
argument_list|(
name|timeGridSize
argument_list|)
expr_stmt|;
name|timePref
operator|.
name|append
argument_list|(
literal|"<img border='0' src='pattern?v="
operator|+
operator|(
name|timeVertical
condition|?
literal|1
else|:
literal|0
operator|)
operator|+
literal|"&s="
operator|+
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|getDefaultSelection
argument_list|()
operator|+
literal|"&p="
operator|+
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|getPreferences
argument_list|()
operator|+
literal|"' title='"
operator|+
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"'>&nbsp;"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|String
name|distPref
init|=
name|di
operator|.
name|getEffectivePrefHtmlForPrefType
argument_list|(
name|DistributionPref
operator|.
name|class
argument_list|)
decl_stmt|;
name|TreeSet
name|classes
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|ClassInstructorComparator
argument_list|(
operator|new
name|ClassComparator
argument_list|(
name|ClassComparator
operator|.
name|COMPARE_BY_LABEL
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|classes
operator|.
name|addAll
argument_list|(
name|di
operator|.
name|getClasses
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|classesStr
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|classes
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|ci
init|=
operator|(
name|ClassInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Class_
name|c
init|=
name|ci
operator|.
name|getClassInstructing
argument_list|()
decl_stmt|;
name|String
name|className
init|=
name|c
operator|.
name|getClassLabel
argument_list|()
decl_stmt|;
name|String
name|title
init|=
name|className
decl_stmt|;
name|title
operator|+=
literal|" ("
operator|+
name|ci
operator|.
name|getPercentShare
argument_list|()
operator|+
literal|"%"
operator|+
operator|(
name|ci
operator|.
name|isLead
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|", "
operator|+
name|MSG
operator|.
name|titleCheckConflicts
argument_list|()
else|:
literal|""
operator|)
operator|+
literal|")"
expr_stmt|;
if|if
condition|(
operator|!
name|c
operator|.
name|isDisplayInstructor
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|title
operator|+=
literal|" - "
operator|+
name|MSG
operator|.
name|titleDoNotDisplayInstructor
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ci
operator|.
name|isLead
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|classesStr
operator|+=
literal|"<span style='font-weight:bold;"
operator|+
operator|(
name|c
operator|.
name|isDisplayInstructor
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|""
else|:
literal|"font-style:italic;"
operator|)
operator|+
literal|"' title='"
operator|+
name|title
operator|+
literal|"'>"
expr_stmt|;
block|}
else|else
block|{
name|classesStr
operator|+=
literal|"<span title='"
operator|+
name|title
operator|+
literal|"'>"
expr_stmt|;
block|}
name|classesStr
operator|+=
name|className
expr_stmt|;
name|classesStr
operator|+=
literal|"</span>"
expr_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|classesStr
operator|+=
literal|"<br>"
expr_stmt|;
block|}
name|TreeSet
name|exams
init|=
operator|new
name|TreeSet
argument_list|(
name|di
operator|.
name|getExams
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|examsStr
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exams
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|examName
init|=
name|exam
operator|.
name|getLabel
argument_list|()
decl_stmt|;
if|if
condition|(
name|exam
operator|.
name|getExamType
argument_list|()
operator|==
name|Exam
operator|.
name|sExamTypeMidterm
condition|)
block|{
name|examsStr
operator|+=
literal|"<span title='"
operator|+
name|examName
operator|+
literal|" "
operator|+
name|MSG
operator|.
name|titleMidtermExamination
argument_list|()
operator|+
literal|"'>"
operator|+
name|examName
operator|+
literal|"</span>"
expr_stmt|;
block|}
else|else
block|{
name|examsStr
operator|+=
literal|"<span style='font-weight:bold;' title='"
operator|+
name|examName
operator|+
literal|" "
operator|+
name|MSG
operator|.
name|titleFinalExamination
argument_list|()
operator|+
literal|"'>"
operator|+
name|examName
operator|+
literal|"</span>"
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|examsStr
operator|+=
literal|"<br>"
expr_stmt|;
block|}
name|boolean
name|back
init|=
name|di
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|backId
argument_list|)
decl_stmt|;
name|boolean
name|itf
init|=
operator|(
name|di
operator|.
name|isIgnoreToFar
argument_list|()
operator|==
literal|null
condition|?
literal|false
else|:
name|di
operator|.
name|isIgnoreToFar
argument_list|()
operator|.
name|booleanValue
argument_list|()
operator|)
decl_stmt|;
comment|// Add to web table
name|webTable
operator|.
name|addLine
argument_list|(
literal|"onClick=\"document.location='instructorDetail.do?instructorId="
operator|+
name|di
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"&deptId="
operator|+
name|deptId
operator|+
literal|"';\""
argument_list|,
operator|new
name|String
index|[]
block|{
operator|(
name|back
condition|?
literal|"<A name=\"back\"></A>"
else|:
literal|""
operator|)
operator|+
name|puid
block|,
name|name
block|,
name|putSpace
argument_list|(
name|posType
argument_list|)
block|,
name|putSpace
argument_list|(
name|designator
operator|.
name|toString
argument_list|()
argument_list|)
block|,
name|putSpace
argument_list|(
name|note
argument_list|)
block|,
name|putSpace
argument_list|(
name|timePref
operator|.
name|toString
argument_list|()
argument_list|)
block|,
name|putSpace
argument_list|(
name|rmPref
argument_list|)
block|,
name|putSpace
argument_list|(
name|distPref
argument_list|)
block|,
name|putSpace
argument_list|(
name|classesStr
argument_list|)
block|,
name|putSpace
argument_list|(
name|examsStr
argument_list|)
block|,
operator|(
name|itf
condition|?
literal|"<IMG border='0' title='"
operator|+
name|MSG
operator|.
name|titleIgnoreTooFarDistances
argument_list|()
operator|+
literal|"' alt='true' align='absmiddle' src='images/tick.gif'>"
else|:
literal|"&nbsp;"
operator|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|puid
block|,
name|nameOrd
block|,
name|posType
block|,
name|designator
operator|.
name|toString
argument_list|()
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
operator|new
name|Integer
argument_list|(
name|itf
condition|?
literal|0
else|:
literal|1
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
name|String
name|tblData
init|=
name|webTable
operator|.
name|printTable
argument_list|(
name|order
argument_list|)
decl_stmt|;
return|return
name|tblData
return|;
block|}
block|}
specifier|public
name|void
name|pdfTableForInstructor
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|String
name|deptId
parameter_list|,
name|int
name|order
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|cols
init|=
literal|10
decl_stmt|;
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|Long
name|sessionId
init|=
operator|(
name|Long
operator|)
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|SESSION_ID_ATTR_NAME
argument_list|)
decl_stmt|;
name|boolean
name|timeVertical
init|=
name|RequiredTimeTable
operator|.
name|getTimeGridVertical
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|boolean
name|gridAsText
init|=
name|RequiredTimeTable
operator|.
name|getTimeGridAsText
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|String
name|timeGridSize
init|=
name|RequiredTimeTable
operator|.
name|getTimeGridSize
argument_list|(
name|user
argument_list|)
decl_stmt|;
comment|// Create new table
name|PdfWebTable
name|webTable
init|=
operator|new
name|PdfWebTable
argument_list|(
name|cols
argument_list|,
name|MSG
operator|.
name|sectionTitleInstructorList
argument_list|()
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|MSG
operator|.
name|columnExternalId
argument_list|()
block|,
name|MSG
operator|.
name|columnInstructorName
argument_list|()
block|,
name|MSG
operator|.
name|columnInstructorPosition
argument_list|()
block|,
name|MSG
operator|.
name|columnInstructorDesignatorNr
argument_list|()
block|,
name|MSG
operator|.
name|columnInstructorNote
argument_list|()
block|,
name|MSG
operator|.
name|columnPreferences
argument_list|()
operator|+
literal|"\n"
operator|+
name|MSG
operator|.
name|columnTimePref
argument_list|()
block|,
literal|"\n"
operator|+
name|MSG
operator|.
name|columnRoomPref
argument_list|()
block|,
literal|"\n"
operator|+
name|MSG
operator|.
name|columnDistributionPref
argument_list|()
block|,
name|MSG
operator|.
name|columnInstructorClassAssignmentsPDF
argument_list|()
block|,
name|MSG
operator|.
name|columnInstructorExamAssignmentsPDF
argument_list|()
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
decl_stmt|;
comment|// Loop through Instructor class
name|List
name|list
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|deptId
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|ALL_OPTION_VALUE
argument_list|)
condition|)
name|list
operator|=
name|DepartmentalInstructor
operator|.
name|getInstructorByDept
argument_list|(
name|sessionId
argument_list|,
literal|null
argument_list|)
expr_stmt|;
else|else
name|list
operator|=
name|DepartmentalInstructor
operator|.
name|getInstructorByDept
argument_list|(
name|sessionId
argument_list|,
operator|new
name|Long
argument_list|(
name|deptId
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
operator|||
name|list
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return ;
name|String
name|instructorNameFormat
init|=
name|Settings
operator|.
name|getSettingValue
argument_list|(
name|user
argument_list|,
name|Constants
operator|.
name|SETTINGS_INSTRUCTOR_NAME_FORMAT
argument_list|)
decl_stmt|;
name|String
name|instructorSortOrder
init|=
name|Settings
operator|.
name|getSettingValue
argument_list|(
name|user
argument_list|,
name|Constants
operator|.
name|SETTINGS_INSTRUCTOR_SORT
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|list
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentalInstructor
name|di
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
comment|//puid
name|String
name|puid
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|di
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
name|di
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|puid
operator|=
name|di
operator|.
name|getExternalUniqueId
argument_list|()
expr_stmt|;
else|else
name|puid
operator|=
literal|"@@ITALIC "
operator|+
name|MSG
operator|.
name|instructorExternalIdNotSpecified
argument_list|()
expr_stmt|;
comment|//get instructor name
name|String
name|name
init|=
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|di
operator|.
name|getName
argument_list|(
name|instructorNameFormat
argument_list|)
argument_list|,
literal|"-"
operator|.
name|toCharArray
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|nameOrd
init|=
name|di
operator|.
name|nameLastNameFirst
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|instructorSortOrder
operator|!=
literal|null
operator|&&
name|instructorSortOrder
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|SETTINGS_INSTRUCTOR_SORT_NATURAL
argument_list|)
condition|)
name|nameOrd
operator|=
name|name
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
comment|// position
name|String
name|posType
init|=
literal|"@@ITALIC "
operator|+
name|MSG
operator|.
name|instructorPositionNotSpecified
argument_list|()
decl_stmt|;
if|if
condition|(
name|di
operator|.
name|getPositionType
argument_list|()
operator|!=
literal|null
condition|)
name|posType
operator|=
name|di
operator|.
name|getPositionType
argument_list|()
operator|.
name|getLabel
argument_list|()
expr_stmt|;
name|StringBuffer
name|designator
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|di
operator|.
name|getDesignatorSubjectAreas
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|di
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSubjectAreas
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Designator
name|des
init|=
operator|(
name|Designator
operator|)
name|di
operator|.
name|getDesignatorSubjectAreas
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|designator
operator|.
name|append
argument_list|(
name|des
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|lastCode
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|(
operator|new
name|TreeSet
argument_list|(
name|di
operator|.
name|getDesignatorSubjectAreas
argument_list|()
argument_list|)
operator|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Designator
name|des
init|=
operator|(
name|Designator
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastCode
operator|==
literal|null
condition|)
block|{
name|designator
operator|.
name|append
argument_list|(
name|des
operator|.
name|getCode
argument_list|()
operator|+
literal|" ("
operator|+
name|des
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|lastCode
operator|.
name|equals
argument_list|(
name|des
operator|.
name|getCode
argument_list|()
argument_list|)
condition|)
block|{
name|designator
operator|.
name|append
argument_list|(
literal|", "
operator|+
name|des
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|designator
operator|.
name|append
argument_list|(
literal|")<br>"
operator|+
name|des
operator|.
name|getCode
argument_list|()
operator|+
literal|" ("
operator|+
name|des
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|lastCode
operator|=
name|des
operator|.
name|getCode
argument_list|()
expr_stmt|;
block|}
name|designator
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* 			//get departments 			StringBuffer deptFte = new StringBuffer(); 			deptFte.append(percentFormatter.format(di.getFte()==null?0.0:di.getFte().doubleValue())); 			*/
comment|// note
name|String
name|note
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|di
operator|.
name|getNote
argument_list|()
operator|!=
literal|null
condition|)
name|note
operator|=
name|di
operator|.
name|getNote
argument_list|()
expr_stmt|;
comment|//get room preferences
name|String
name|rmPref
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|di
operator|.
name|effectivePreferences
argument_list|(
name|RoomPref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomPref
name|rp
init|=
operator|(
name|RoomPref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|rmPref
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|rmPref
operator|+=
literal|"\n"
expr_stmt|;
name|rmPref
operator|+=
name|PreferenceLevel
operator|.
name|prolog2abbv
argument_list|(
name|rp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|rp
operator|.
name|getRoom
argument_list|()
operator|.
name|getLabel
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|di
operator|.
name|effectivePreferences
argument_list|(
name|BuildingPref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BuildingPref
name|bp
init|=
operator|(
name|BuildingPref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|rmPref
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|rmPref
operator|+=
literal|"\n"
expr_stmt|;
name|rmPref
operator|+=
name|PreferenceLevel
operator|.
name|prolog2abbv
argument_list|(
name|bp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|bp
operator|.
name|getBuilding
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|di
operator|.
name|effectivePreferences
argument_list|(
name|RoomFeaturePref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomFeaturePref
name|rfp
init|=
operator|(
name|RoomFeaturePref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|rmPref
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|rmPref
operator|+=
literal|"\n"
expr_stmt|;
name|rmPref
operator|+=
name|PreferenceLevel
operator|.
name|prolog2abbv
argument_list|(
name|rfp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|rfp
operator|.
name|getRoomFeature
argument_list|()
operator|.
name|getLabel
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|di
operator|.
name|effectivePreferences
argument_list|(
name|RoomGroupPref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomGroupPref
name|rgp
init|=
operator|(
name|RoomGroupPref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|rmPref
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|rmPref
operator|+=
literal|"\n"
expr_stmt|;
name|rmPref
operator|+=
name|PreferenceLevel
operator|.
name|prolog2abbv
argument_list|(
name|rgp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|rgp
operator|.
name|getRoomGroup
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
comment|//get time preference
name|StringBuffer
name|timePref
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|di
operator|.
name|getTimePreferences
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|di
operator|.
name|getTimePreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePref
name|tp
init|=
operator|(
name|TimePref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|RequiredTimeTable
name|rtt
init|=
name|tp
operator|.
name|getRequiredTimeTable
argument_list|()
decl_stmt|;
if|if
condition|(
name|gridAsText
condition|)
block|{
name|timePref
operator|.
name|append
argument_list|(
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|", "
argument_list|,
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|setDefaultSelection
argument_list|(
name|timeGridSize
argument_list|)
expr_stmt|;
name|Image
name|image
init|=
name|rtt
operator|.
name|createBufferedImage
argument_list|(
name|timeVertical
argument_list|)
decl_stmt|;
if|if
condition|(
name|image
operator|!=
literal|null
condition|)
block|{
name|webTable
operator|.
name|addImage
argument_list|(
name|tp
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|image
argument_list|)
expr_stmt|;
name|timePref
operator|.
name|append
argument_list|(
literal|"@@IMAGE "
operator|+
name|tp
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
else|else
name|timePref
operator|.
name|append
argument_list|(
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|", "
argument_list|,
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|timePref
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|String
name|distPref
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|di
operator|.
name|effectivePreferences
argument_list|(
name|DistributionPref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionPref
name|dp
init|=
operator|(
name|DistributionPref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|distPref
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|distPref
operator|+=
literal|"\n"
expr_stmt|;
name|distPref
operator|+=
name|PreferenceLevel
operator|.
name|prolog2abbv
argument_list|(
name|dp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|dp
operator|.
name|getDistributionType
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
expr_stmt|;
block|}
name|TreeSet
name|classes
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|ClassInstructorComparator
argument_list|(
operator|new
name|ClassComparator
argument_list|(
name|ClassComparator
operator|.
name|COMPARE_BY_LABEL
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|classes
operator|.
name|addAll
argument_list|(
name|di
operator|.
name|getClasses
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|classesStr
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|classes
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|ci
init|=
operator|(
name|ClassInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Class_
name|c
init|=
name|ci
operator|.
name|getClassInstructing
argument_list|()
decl_stmt|;
name|String
name|className
init|=
name|c
operator|.
name|getClassLabel
argument_list|()
decl_stmt|;
if|if
condition|(
name|ci
operator|.
name|isLead
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
name|classesStr
operator|+=
literal|"@@BOLD "
expr_stmt|;
if|if
condition|(
operator|!
name|c
operator|.
name|isDisplayInstructor
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
name|classesStr
operator|+=
literal|"@@ITALIC "
expr_stmt|;
name|classesStr
operator|+=
name|className
expr_stmt|;
if|if
condition|(
operator|!
name|c
operator|.
name|isDisplayInstructor
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
name|classesStr
operator|+=
literal|"@@END_ITALIC "
expr_stmt|;
if|if
condition|(
name|ci
operator|.
name|isLead
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
name|classesStr
operator|+=
literal|"@@END_BOLD "
expr_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|classesStr
operator|+=
literal|"\n"
expr_stmt|;
block|}
name|TreeSet
name|exams
init|=
operator|new
name|TreeSet
argument_list|(
name|di
operator|.
name|getExams
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|examsStr
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exams
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|examName
init|=
name|exam
operator|.
name|getLabel
argument_list|()
decl_stmt|;
if|if
condition|(
name|exam
operator|.
name|getExamType
argument_list|()
operator|==
name|Exam
operator|.
name|sExamTypeMidterm
condition|)
block|{
name|examsStr
operator|+=
name|examName
expr_stmt|;
block|}
else|else
block|{
name|examsStr
operator|+=
literal|"@@BOLD "
operator|+
name|examName
operator|+
literal|"@@END_BOLD "
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|examsStr
operator|+=
literal|"\n"
expr_stmt|;
block|}
comment|// Add to web table
name|webTable
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|puid
block|,
name|name
block|,
name|posType
block|,
name|designator
operator|.
name|toString
argument_list|()
block|,
name|note
block|,
name|timePref
operator|.
name|toString
argument_list|()
block|,
name|rmPref
block|,
name|distPref
block|,
name|classesStr
block|,
name|examsStr
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|puid
block|,
name|nameOrd
block|,
name|posType
block|,
name|designator
operator|.
name|toString
argument_list|()
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
block|}
name|File
name|file
init|=
name|ApplicationProperties
operator|.
name|getTempFile
argument_list|(
literal|"instructors"
argument_list|,
literal|"pdf"
argument_list|)
decl_stmt|;
name|webTable
operator|.
name|exportPdf
argument_list|(
name|file
argument_list|,
name|order
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|REQUEST_OPEN_URL
argument_list|,
literal|"temp/"
operator|+
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Puts a space&nbsp; if string is of 0 length      * @param string      * @return      */
specifier|private
name|String
name|putSpace
parameter_list|(
name|String
name|str
parameter_list|)
block|{
if|if
condition|(
name|str
operator|==
literal|null
operator|||
name|str
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|"&nbsp;"
return|;
return|return
name|str
return|;
block|}
block|}
end_class

end_unit

