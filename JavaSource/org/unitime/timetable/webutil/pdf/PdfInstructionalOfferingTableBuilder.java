begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|pdf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|CommonValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|UserProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|InstructionalOfferingListForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|BuildingPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassDurationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePatternPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructorAttributePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructorCoursePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Preference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeaturePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomGroupPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SectioningInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentClassEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|ClassCourseComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|InstrOfferingConfigComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|InstructorComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|SchedulingSubpartComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstructionalOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SubjectAreaDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|CachedClassAssignmentProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ClassAssignmentProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ExamAssignmentProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|AssignmentPreferenceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|PdfEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|PdfFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|duration
operator|.
name|DurationModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|RequiredTimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|WebInstructionalOfferingTableBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Chunk
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|PageSize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Paragraph
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Rectangle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|pdf
operator|.
name|PdfPCell
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|pdf
operator|.
name|PdfPTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|pdf
operator|.
name|PdfWriter
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller, Stephanie Schluttenhofer  */
end_comment

begin_class
specifier|public
class|class
name|PdfInstructionalOfferingTableBuilder
extends|extends
name|WebInstructionalOfferingTableBuilder
block|{
specifier|protected
name|PdfWriter
name|iWriter
init|=
literal|null
decl_stmt|;
specifier|protected
name|Document
name|iDocument
init|=
literal|null
decl_stmt|;
specifier|protected
name|PdfPTable
name|iPdfTable
init|=
literal|null
decl_stmt|;
specifier|protected
specifier|static
name|String
name|indent
init|=
literal|"    "
decl_stmt|;
specifier|protected
specifier|static
name|String
name|LABEL
init|=
literal|" "
decl_stmt|;
specifier|public
name|PdfInstructionalOfferingTableBuilder
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|protected
specifier|static
name|Color
name|sBorderColor
init|=
name|Color
operator|.
name|BLACK
decl_stmt|;
specifier|protected
specifier|static
name|Color
name|sBgColorClass
init|=
name|Color
operator|.
name|WHITE
decl_stmt|;
specifier|protected
specifier|static
name|Color
name|sBgColorSubpart
init|=
operator|new
name|Color
argument_list|(
literal|225
argument_list|,
literal|225
argument_list|,
literal|225
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|Color
name|sBgColorConfig
init|=
operator|new
name|Color
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|,
literal|200
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|Color
name|sBgColorOffering
init|=
operator|new
name|Color
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|,
literal|200
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|Color
name|sBgColorHeader
init|=
name|Color
operator|.
name|WHITE
decl_stmt|;
specifier|protected
name|Color
name|iBgColor
init|=
name|Color
operator|.
name|WHITE
decl_stmt|;
specifier|protected
name|Color
name|sEnableColor
init|=
name|Color
operator|.
name|BLACK
decl_stmt|;
specifier|protected
name|Color
name|sDisableColor
init|=
name|Color
operator|.
name|GRAY
decl_stmt|;
specifier|public
name|PdfPCell
name|createCell
parameter_list|()
block|{
name|PdfPCell
name|cell
init|=
operator|new
name|PdfPCell
argument_list|()
decl_stmt|;
name|cell
operator|.
name|setBorderColor
argument_list|(
name|sBorderColor
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setPadding
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setBorderWidth
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setVerticalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_TOP
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setHorizontalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_CENTER
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setBackgroundColor
argument_list|(
name|iBgColor
argument_list|)
expr_stmt|;
return|return
name|cell
return|;
block|}
specifier|public
name|void
name|addText
parameter_list|(
name|PdfPCell
name|cell
parameter_list|,
name|String
name|text
parameter_list|)
block|{
name|addText
argument_list|(
name|cell
argument_list|,
name|text
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|,
name|sEnableColor
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addText
parameter_list|(
name|PdfPCell
name|cell
parameter_list|,
name|String
name|text
parameter_list|,
name|boolean
name|bold
parameter_list|,
name|int
name|orientation
parameter_list|)
block|{
name|addText
argument_list|(
name|cell
argument_list|,
name|text
argument_list|,
name|bold
argument_list|,
literal|false
argument_list|,
name|orientation
argument_list|,
name|sEnableColor
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addText
parameter_list|(
name|PdfPCell
name|cell
parameter_list|,
name|String
name|text
parameter_list|,
name|int
name|orientation
parameter_list|)
block|{
name|addText
argument_list|(
name|cell
argument_list|,
name|text
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|orientation
argument_list|,
name|sEnableColor
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addText
parameter_list|(
name|PdfPCell
name|cell
parameter_list|,
name|String
name|text
parameter_list|,
name|boolean
name|bold
parameter_list|,
name|boolean
name|italic
parameter_list|,
name|int
name|orientation
parameter_list|,
name|Color
name|color
parameter_list|,
name|boolean
name|newLine
parameter_list|)
block|{
if|if
condition|(
name|text
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|cell
operator|.
name|getPhrase
argument_list|()
operator|==
literal|null
condition|)
block|{
name|Chunk
name|ch
init|=
operator|new
name|Chunk
argument_list|(
name|text
argument_list|,
name|PdfFont
operator|.
name|getFont
argument_list|(
name|bold
argument_list|,
name|italic
argument_list|,
name|color
argument_list|)
argument_list|)
decl_stmt|;
name|cell
operator|.
name|setPhrase
argument_list|(
operator|new
name|Paragraph
argument_list|(
name|ch
argument_list|)
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setVerticalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_TOP
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setHorizontalAlignment
argument_list|(
name|orientation
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cell
operator|.
name|getPhrase
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Chunk
argument_list|(
operator|(
name|newLine
condition|?
literal|"\n"
else|:
literal|""
operator|)
operator|+
name|text
argument_list|,
name|PdfFont
operator|.
name|getFont
argument_list|(
name|bold
argument_list|,
name|italic
argument_list|,
name|color
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getNrColumns
parameter_list|()
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|isShowLabel
argument_list|()
condition|)
name|ret
operator|+=
literal|1
expr_stmt|;
if|if
condition|(
name|isShowDivSec
argument_list|()
condition|)
name|ret
operator|+=
literal|1
expr_stmt|;
if|if
condition|(
name|isShowDemand
argument_list|()
condition|)
name|ret
operator|+=
literal|1
expr_stmt|;
if|if
condition|(
name|isShowProjectedDemand
argument_list|()
condition|)
name|ret
operator|+=
literal|1
expr_stmt|;
if|if
condition|(
name|isShowLimit
argument_list|()
condition|)
name|ret
operator|+=
literal|1
expr_stmt|;
if|if
condition|(
name|isShowRoomRatio
argument_list|()
condition|)
name|ret
operator|+=
literal|1
expr_stmt|;
if|if
condition|(
name|isShowManager
argument_list|()
condition|)
name|ret
operator|+=
literal|1
expr_stmt|;
if|if
condition|(
name|isShowDatePattern
argument_list|()
condition|)
name|ret
operator|+=
literal|1
expr_stmt|;
if|if
condition|(
name|isShowMinPerWk
argument_list|()
condition|)
name|ret
operator|+=
literal|1
expr_stmt|;
if|if
condition|(
name|isShowTimePattern
argument_list|()
condition|)
name|ret
operator|+=
literal|1
expr_stmt|;
if|if
condition|(
name|isShowPreferences
argument_list|()
condition|)
name|ret
operator|+=
name|getPreferenceColumns
argument_list|()
expr_stmt|;
if|if
condition|(
name|isShowInstructor
argument_list|()
condition|)
name|ret
operator|+=
literal|1
expr_stmt|;
if|if
condition|(
name|getDisplayTimetable
argument_list|()
operator|&&
name|isShowTimetable
argument_list|()
condition|)
name|ret
operator|+=
literal|3
expr_stmt|;
if|if
condition|(
name|isShowTitle
argument_list|()
condition|)
name|ret
operator|+=
literal|1
expr_stmt|;
if|if
condition|(
name|isShowCredit
argument_list|()
condition|)
name|ret
operator|+=
literal|1
expr_stmt|;
if|if
condition|(
name|isShowSubpartCredit
argument_list|()
condition|)
name|ret
operator|+=
literal|1
expr_stmt|;
if|if
condition|(
name|isShowConsent
argument_list|()
condition|)
name|ret
operator|+=
literal|1
expr_stmt|;
if|if
condition|(
name|isShowSchedulePrintNote
argument_list|()
condition|)
name|ret
operator|+=
literal|1
expr_stmt|;
if|if
condition|(
name|isShowNote
argument_list|()
condition|)
name|ret
operator|+=
literal|1
expr_stmt|;
if|if
condition|(
name|isShowExam
argument_list|()
condition|)
block|{
if|if
condition|(
name|isShowExamName
argument_list|()
condition|)
name|ret
operator|+=
literal|1
expr_stmt|;
if|if
condition|(
name|isShowExamTimetable
argument_list|()
condition|)
name|ret
operator|+=
literal|2
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|float
index|[]
name|getWidths
parameter_list|()
block|{
name|float
index|[]
name|width
init|=
operator|new
name|float
index|[
name|getNrColumns
argument_list|()
index|]
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|isShowLabel
argument_list|()
condition|)
name|width
index|[
name|idx
operator|++
index|]
operator|=
literal|175f
expr_stmt|;
if|if
condition|(
name|isShowDivSec
argument_list|()
condition|)
name|width
index|[
name|idx
operator|++
index|]
operator|=
literal|80f
expr_stmt|;
if|if
condition|(
name|isShowDemand
argument_list|()
condition|)
name|width
index|[
name|idx
operator|++
index|]
operator|=
literal|60f
expr_stmt|;
if|if
condition|(
name|isShowProjectedDemand
argument_list|()
condition|)
name|width
index|[
name|idx
operator|++
index|]
operator|=
literal|65f
expr_stmt|;
if|if
condition|(
name|isShowLimit
argument_list|()
condition|)
name|width
index|[
name|idx
operator|++
index|]
operator|=
literal|50f
expr_stmt|;
if|if
condition|(
name|isShowRoomRatio
argument_list|()
condition|)
name|width
index|[
name|idx
operator|++
index|]
operator|=
literal|50f
expr_stmt|;
if|if
condition|(
name|isShowManager
argument_list|()
condition|)
name|width
index|[
name|idx
operator|++
index|]
operator|=
literal|75f
expr_stmt|;
if|if
condition|(
name|isShowDatePattern
argument_list|()
condition|)
name|width
index|[
name|idx
operator|++
index|]
operator|=
literal|100f
expr_stmt|;
if|if
condition|(
name|isShowMinPerWk
argument_list|()
condition|)
name|width
index|[
name|idx
operator|++
index|]
operator|=
literal|60f
expr_stmt|;
if|if
condition|(
name|isShowTimePattern
argument_list|()
condition|)
name|width
index|[
name|idx
operator|++
index|]
operator|=
literal|80f
expr_stmt|;
if|if
condition|(
name|isShowPreferences
argument_list|()
condition|)
block|{
if|if
condition|(
name|getGridAsText
argument_list|()
condition|)
block|{
name|width
index|[
name|idx
operator|++
index|]
operator|=
literal|200f
expr_stmt|;
block|}
else|else
block|{
name|width
index|[
name|idx
operator|++
index|]
operator|=
literal|100f
expr_stmt|;
block|}
name|width
index|[
name|idx
operator|++
index|]
operator|=
literal|150f
expr_stmt|;
if|if
condition|(
name|getDisplayDistributionPrefs
argument_list|()
condition|)
block|{
name|width
index|[
name|idx
operator|++
index|]
operator|=
literal|200f
expr_stmt|;
block|}
if|if
condition|(
name|getDisplayInstructorPrefs
argument_list|()
condition|)
block|{
name|width
index|[
name|idx
operator|++
index|]
operator|=
literal|150f
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isShowInstructor
argument_list|()
condition|)
name|width
index|[
name|idx
operator|++
index|]
operator|=
literal|200f
expr_stmt|;
if|if
condition|(
name|getDisplayTimetable
argument_list|()
operator|&&
name|isShowTimetable
argument_list|()
condition|)
block|{
name|width
index|[
name|idx
operator|++
index|]
operator|=
literal|130f
expr_stmt|;
name|width
index|[
name|idx
operator|++
index|]
operator|=
literal|100f
expr_stmt|;
name|width
index|[
name|idx
operator|++
index|]
operator|=
literal|70f
expr_stmt|;
block|}
if|if
condition|(
name|isShowTitle
argument_list|()
condition|)
name|width
index|[
name|idx
operator|++
index|]
operator|=
literal|200f
expr_stmt|;
if|if
condition|(
name|isShowCredit
argument_list|()
condition|)
name|width
index|[
name|idx
operator|++
index|]
operator|=
literal|100f
expr_stmt|;
if|if
condition|(
name|isShowSubpartCredit
argument_list|()
condition|)
name|width
index|[
name|idx
operator|++
index|]
operator|=
literal|100f
expr_stmt|;
if|if
condition|(
name|isShowConsent
argument_list|()
condition|)
name|width
index|[
name|idx
operator|++
index|]
operator|=
literal|100f
expr_stmt|;
if|if
condition|(
name|isShowSchedulePrintNote
argument_list|()
condition|)
name|width
index|[
name|idx
operator|++
index|]
operator|=
literal|150f
expr_stmt|;
if|if
condition|(
name|isShowNote
argument_list|()
condition|)
name|width
index|[
name|idx
operator|++
index|]
operator|=
literal|300f
expr_stmt|;
if|if
condition|(
name|isShowExam
argument_list|()
condition|)
block|{
if|if
condition|(
name|isShowExamName
argument_list|()
condition|)
name|width
index|[
name|idx
operator|++
index|]
operator|=
literal|120f
expr_stmt|;
if|if
condition|(
name|isShowExamTimetable
argument_list|()
condition|)
block|{
name|width
index|[
name|idx
operator|++
index|]
operator|=
literal|120f
expr_stmt|;
name|width
index|[
name|idx
operator|++
index|]
operator|=
literal|80f
expr_stmt|;
block|}
block|}
return|return
name|width
return|;
block|}
specifier|protected
name|void
name|pdfBuildTableHeader
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
name|iBgColor
operator|=
name|sBgColorHeader
expr_stmt|;
comment|//first line
if|if
condition|(
name|isShowLabel
argument_list|()
condition|)
block|{
name|PdfPCell
name|c
init|=
name|createCell
argument_list|()
decl_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
name|LABEL
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowDivSec
argument_list|()
condition|)
block|{
name|PdfPCell
name|c
init|=
name|createCell
argument_list|()
decl_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
name|MSG
operator|.
name|columnExternalId
argument_list|()
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowDemand
argument_list|()
condition|)
block|{
name|PdfPCell
name|c
init|=
name|createCell
argument_list|()
decl_stmt|;
if|if
condition|(
name|StudentClassEnrollment
operator|.
name|sessionHasEnrollments
argument_list|(
name|sessionId
argument_list|)
condition|)
block|{
name|addText
argument_list|(
name|c
argument_list|,
name|MSG
operator|.
name|columnDemand
argument_list|()
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addText
argument_list|(
name|c
argument_list|,
name|MSG
operator|.
name|columnLastDemand
argument_list|()
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
block|}
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowProjectedDemand
argument_list|()
condition|)
block|{
name|PdfPCell
name|c
init|=
name|createCell
argument_list|()
decl_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
name|MSG
operator|.
name|columnProjectedDemand
argument_list|()
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowLimit
argument_list|()
condition|)
block|{
name|PdfPCell
name|c
init|=
name|createCell
argument_list|()
decl_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
name|MSG
operator|.
name|columnLimit
argument_list|()
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowRoomRatio
argument_list|()
condition|)
block|{
name|PdfPCell
name|c
init|=
name|createCell
argument_list|()
decl_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
name|MSG
operator|.
name|columnRoomRatio
argument_list|()
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowManager
argument_list|()
condition|)
block|{
name|PdfPCell
name|c
init|=
name|createCell
argument_list|()
decl_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
name|MSG
operator|.
name|columnManager
argument_list|()
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowDatePattern
argument_list|()
condition|)
block|{
name|PdfPCell
name|c
init|=
name|createCell
argument_list|()
decl_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
name|MSG
operator|.
name|columnDatePattern
argument_list|()
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowMinPerWk
argument_list|()
condition|)
block|{
name|PdfPCell
name|c
init|=
name|createCell
argument_list|()
decl_stmt|;
name|ClassDurationType
name|dtype
init|=
name|ClassDurationType
operator|.
name|findDefaultType
argument_list|(
name|sessionId
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
name|dtype
operator|==
literal|null
condition|?
name|MSG
operator|.
name|columnMinPerWk
argument_list|()
else|:
name|dtype
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowTimePattern
argument_list|()
condition|)
block|{
name|PdfPCell
name|c
init|=
name|createCell
argument_list|()
decl_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
name|MSG
operator|.
name|columnTimePattern
argument_list|()
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowPreferences
argument_list|()
condition|)
block|{
name|PdfPCell
name|c
init|=
name|createCell
argument_list|()
decl_stmt|;
name|c
operator|.
name|setColspan
argument_list|(
name|getPreferenceColumns
argument_list|()
argument_list|)
expr_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
literal|"----"
operator|+
name|MSG
operator|.
name|columnPreferences
argument_list|()
operator|+
literal|"----"
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_CENTER
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowInstructor
argument_list|()
condition|)
block|{
name|PdfPCell
name|c
init|=
name|createCell
argument_list|()
decl_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
name|MSG
operator|.
name|columnInstructor
argument_list|()
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getDisplayTimetable
argument_list|()
operator|&&
name|isShowTimetable
argument_list|()
condition|)
block|{
name|PdfPCell
name|c
init|=
name|createCell
argument_list|()
decl_stmt|;
name|c
operator|.
name|setColspan
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
literal|"--------"
operator|+
name|MSG
operator|.
name|columnTimetable
argument_list|()
operator|+
literal|"--------"
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_CENTER
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowTitle
argument_list|()
condition|)
block|{
name|PdfPCell
name|c
init|=
name|createCell
argument_list|()
decl_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
name|MSG
operator|.
name|columnTitle
argument_list|()
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowCredit
argument_list|()
condition|)
block|{
name|PdfPCell
name|c
init|=
name|createCell
argument_list|()
decl_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
name|MSG
operator|.
name|columnOfferingCredit
argument_list|()
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowSubpartCredit
argument_list|()
condition|)
block|{
name|PdfPCell
name|c
init|=
name|createCell
argument_list|()
decl_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
name|MSG
operator|.
name|columnSubpartCredit
argument_list|()
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowConsent
argument_list|()
condition|)
block|{
name|PdfPCell
name|c
init|=
name|createCell
argument_list|()
decl_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
name|MSG
operator|.
name|columnConsent
argument_list|()
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_CENTER
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowSchedulePrintNote
argument_list|()
condition|)
block|{
name|PdfPCell
name|c
init|=
name|createCell
argument_list|()
decl_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
name|MSG
operator|.
name|columnSchedulePrintNote
argument_list|()
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowNote
argument_list|()
condition|)
block|{
name|PdfPCell
name|c
init|=
name|createCell
argument_list|()
decl_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
name|MSG
operator|.
name|columnNote
argument_list|()
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowExam
argument_list|()
condition|)
block|{
name|PdfPCell
name|c
init|=
name|createCell
argument_list|()
decl_stmt|;
name|c
operator|.
name|setColspan
argument_list|(
operator|(
name|isShowExamName
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
operator|+
operator|(
name|isShowExamTimetable
argument_list|()
condition|?
literal|2
else|:
literal|0
operator|)
argument_list|)
expr_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
literal|"--------"
operator|+
name|MSG
operator|.
name|columnExam
argument_list|()
operator|+
literal|"--------"
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_CENTER
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
comment|//second line
if|if
condition|(
name|isShowLabel
argument_list|()
condition|)
block|{
name|PdfPCell
name|c
init|=
name|createCell
argument_list|()
decl_stmt|;
name|c
operator|.
name|setBorderWidthBottom
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowDivSec
argument_list|()
condition|)
block|{
name|PdfPCell
name|c
init|=
name|createCell
argument_list|()
decl_stmt|;
name|c
operator|.
name|setBorderWidthBottom
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowDemand
argument_list|()
condition|)
block|{
name|PdfPCell
name|c
init|=
name|createCell
argument_list|()
decl_stmt|;
name|c
operator|.
name|setBorderWidthBottom
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowProjectedDemand
argument_list|()
condition|)
block|{
name|PdfPCell
name|c
init|=
name|createCell
argument_list|()
decl_stmt|;
name|c
operator|.
name|setBorderWidthBottom
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowLimit
argument_list|()
condition|)
block|{
name|PdfPCell
name|c
init|=
name|createCell
argument_list|()
decl_stmt|;
name|c
operator|.
name|setBorderWidthBottom
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowRoomRatio
argument_list|()
condition|)
block|{
name|PdfPCell
name|c
init|=
name|createCell
argument_list|()
decl_stmt|;
name|c
operator|.
name|setBorderWidthBottom
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowManager
argument_list|()
condition|)
block|{
name|PdfPCell
name|c
init|=
name|createCell
argument_list|()
decl_stmt|;
name|c
operator|.
name|setBorderWidthBottom
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowDatePattern
argument_list|()
condition|)
block|{
name|PdfPCell
name|c
init|=
name|createCell
argument_list|()
decl_stmt|;
name|c
operator|.
name|setBorderWidthBottom
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowMinPerWk
argument_list|()
condition|)
block|{
name|PdfPCell
name|c
init|=
name|createCell
argument_list|()
decl_stmt|;
name|c
operator|.
name|setBorderWidthBottom
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowTimePattern
argument_list|()
condition|)
block|{
name|PdfPCell
name|c
init|=
name|createCell
argument_list|()
decl_stmt|;
name|c
operator|.
name|setBorderWidthBottom
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowPreferences
argument_list|()
condition|)
block|{
name|PdfPCell
name|c1
init|=
name|createCell
argument_list|()
decl_stmt|;
name|c1
operator|.
name|setBorderWidthBottom
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|addText
argument_list|(
name|c1
argument_list|,
name|MSG
operator|.
name|columnTimePref
argument_list|()
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|PdfPCell
name|c2
init|=
name|createCell
argument_list|()
decl_stmt|;
name|c2
operator|.
name|setBorderWidthBottom
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|addText
argument_list|(
name|c2
argument_list|,
name|MSG
operator|.
name|columnAllRoomPref
argument_list|()
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c2
argument_list|)
expr_stmt|;
if|if
condition|(
name|getDisplayDistributionPrefs
argument_list|()
condition|)
block|{
name|PdfPCell
name|c3
init|=
name|createCell
argument_list|()
decl_stmt|;
name|c3
operator|.
name|setBorderWidthBottom
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|addText
argument_list|(
name|c3
argument_list|,
name|MSG
operator|.
name|columnDistributionPref
argument_list|()
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c3
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getDisplayInstructorPrefs
argument_list|()
condition|)
block|{
name|PdfPCell
name|c4
init|=
name|createCell
argument_list|()
decl_stmt|;
name|c4
operator|.
name|setBorderWidthBottom
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|addText
argument_list|(
name|c4
argument_list|,
name|MSG
operator|.
name|columnInstructorAttributePref
argument_list|()
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c4
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isShowInstructor
argument_list|()
condition|)
block|{
name|PdfPCell
name|c
init|=
name|createCell
argument_list|()
decl_stmt|;
name|c
operator|.
name|setBorderWidthBottom
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getDisplayTimetable
argument_list|()
operator|&&
name|isShowTimetable
argument_list|()
condition|)
block|{
name|PdfPCell
name|c1
init|=
name|createCell
argument_list|()
decl_stmt|;
name|c1
operator|.
name|setBorderWidthBottom
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|addText
argument_list|(
name|c1
argument_list|,
name|MSG
operator|.
name|columnAssignedTime
argument_list|()
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|PdfPCell
name|c2
init|=
name|createCell
argument_list|()
decl_stmt|;
name|c2
operator|.
name|setBorderWidthBottom
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|addText
argument_list|(
name|c2
argument_list|,
name|MSG
operator|.
name|columnAssignedRoom
argument_list|()
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c2
argument_list|)
expr_stmt|;
name|PdfPCell
name|c3
init|=
name|createCell
argument_list|()
decl_stmt|;
name|c3
operator|.
name|setBorderWidthBottom
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|addText
argument_list|(
name|c3
argument_list|,
name|MSG
operator|.
name|columnAssignedRoomCapacity
argument_list|()
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c3
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowTitle
argument_list|()
condition|)
block|{
name|PdfPCell
name|c
init|=
name|createCell
argument_list|()
decl_stmt|;
name|c
operator|.
name|setBorderWidthBottom
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowCredit
argument_list|()
condition|)
block|{
name|PdfPCell
name|c
init|=
name|createCell
argument_list|()
decl_stmt|;
name|c
operator|.
name|setBorderWidthBottom
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowSubpartCredit
argument_list|()
condition|)
block|{
name|PdfPCell
name|c
init|=
name|createCell
argument_list|()
decl_stmt|;
name|c
operator|.
name|setBorderWidthBottom
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowConsent
argument_list|()
condition|)
block|{
name|PdfPCell
name|c
init|=
name|createCell
argument_list|()
decl_stmt|;
name|c
operator|.
name|setBorderWidthBottom
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowSchedulePrintNote
argument_list|()
condition|)
block|{
name|PdfPCell
name|c
init|=
name|createCell
argument_list|()
decl_stmt|;
name|c
operator|.
name|setBorderWidthBottom
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowNote
argument_list|()
condition|)
block|{
name|PdfPCell
name|c
init|=
name|createCell
argument_list|()
decl_stmt|;
name|c
operator|.
name|setBorderWidthBottom
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowExam
argument_list|()
condition|)
block|{
if|if
condition|(
name|isShowExamName
argument_list|()
condition|)
block|{
name|PdfPCell
name|c
init|=
name|createCell
argument_list|()
decl_stmt|;
name|c
operator|.
name|setBorderWidthBottom
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
name|MSG
operator|.
name|columnExamName
argument_list|()
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowExamTimetable
argument_list|()
condition|)
block|{
name|PdfPCell
name|c
init|=
name|createCell
argument_list|()
decl_stmt|;
name|c
operator|.
name|setBorderWidthBottom
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
name|MSG
operator|.
name|columnExamPeriod
argument_list|()
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|=
name|createCell
argument_list|()
expr_stmt|;
name|c
operator|.
name|setBorderWidthBottom
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
name|MSG
operator|.
name|columnExamRoom
argument_list|()
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
name|iPdfTable
operator|.
name|setHeaderRows
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
specifier|private
name|PdfPCell
name|pdfSubjectAndCourseInfo
parameter_list|(
name|InstructionalOffering
name|io
parameter_list|,
name|CourseOffering
name|co
parameter_list|)
block|{
name|PdfPCell
name|cell
init|=
name|createCell
argument_list|()
decl_stmt|;
name|addText
argument_list|(
name|cell
argument_list|,
operator|(
name|co
operator|!=
literal|null
condition|?
name|co
operator|.
name|getSubjectAreaAbbv
argument_list|()
operator|+
literal|" "
operator|+
name|co
operator|.
name|getCourseNbr
argument_list|()
else|:
literal|""
operator|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|,
operator|(
name|co
operator|.
name|isIsControl
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
name|sEnableColor
else|:
name|sDisableColor
operator|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|InstructionalMethod
name|im
init|=
operator|(
name|co
operator|!=
literal|null
operator|&&
name|co
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|?
name|co
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getInstructionalMethod
argument_list|()
else|:
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|im
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|co
operator|.
name|getCourseType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addText
argument_list|(
name|cell
argument_list|,
literal|" ("
operator|+
name|co
operator|.
name|getCourseType
argument_list|()
operator|.
name|getReference
argument_list|()
operator|+
literal|", "
operator|+
name|im
operator|.
name|getReference
argument_list|()
operator|+
literal|")"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|,
operator|(
name|co
operator|.
name|isIsControl
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
name|sEnableColor
else|:
name|sDisableColor
operator|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addText
argument_list|(
name|cell
argument_list|,
literal|" ("
operator|+
name|im
operator|.
name|getReference
argument_list|()
operator|+
literal|")"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|,
operator|(
name|co
operator|.
name|isIsControl
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
name|sEnableColor
else|:
name|sDisableColor
operator|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|co
operator|.
name|getCourseType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addText
argument_list|(
name|cell
argument_list|,
literal|" ("
operator|+
name|co
operator|.
name|getCourseType
argument_list|()
operator|.
name|getReference
argument_list|()
operator|+
literal|")"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|,
operator|(
name|co
operator|.
name|isIsControl
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
name|sEnableColor
else|:
name|sDisableColor
operator|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|it
init|=
name|io
operator|.
name|courseOfferingsMinusSortCourseOfferingForSubjectArea
argument_list|(
name|co
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOffering
name|tempCo
init|=
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|addText
argument_list|(
name|cell
argument_list|,
name|indent
operator|+
literal|""
operator|+
name|tempCo
operator|.
name|getSubjectAreaAbbv
argument_list|()
operator|+
literal|" "
operator|+
name|tempCo
operator|.
name|getCourseNbr
argument_list|()
operator|+
literal|" "
operator|+
operator|(
name|tempCo
operator|.
name|getCourseType
argument_list|()
operator|!=
literal|null
condition|?
literal|" ("
operator|+
name|tempCo
operator|.
name|getCourseType
argument_list|()
operator|.
name|getReference
argument_list|()
operator|+
literal|")"
else|:
literal|""
operator|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|,
name|sDisableColor
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|cell
return|;
block|}
specifier|protected
name|PdfPCell
name|pdfBuildPrefGroupLabel
parameter_list|(
name|CourseOffering
name|co
parameter_list|,
name|PreferenceGroup
name|prefGroup
parameter_list|,
name|String
name|indentSpaces
parameter_list|,
name|boolean
name|isEditable
parameter_list|,
name|String
name|prevLabel
parameter_list|)
block|{
name|Color
name|color
init|=
operator|(
name|isEditable
condition|?
name|sEnableColor
else|:
name|sDisableColor
operator|)
decl_stmt|;
name|String
name|label
init|=
name|prefGroup
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefGroup
operator|instanceof
name|Class_
condition|)
block|{
name|Class_
name|aClass
init|=
operator|(
name|Class_
operator|)
name|prefGroup
decl_stmt|;
name|label
operator|=
name|aClass
operator|.
name|getClassLabel
argument_list|(
name|co
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|prevLabel
operator|!=
literal|null
operator|&&
name|label
operator|.
name|equals
argument_list|(
name|prevLabel
argument_list|)
condition|)
block|{
name|label
operator|=
literal|""
expr_stmt|;
block|}
name|PdfPCell
name|cell
init|=
name|createCell
argument_list|()
decl_stmt|;
name|addText
argument_list|(
name|cell
argument_list|,
name|indentSpaces
operator|+
name|label
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|,
name|color
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|cell
return|;
block|}
specifier|protected
name|PdfPCell
name|pdfBuildDatePatternCell
parameter_list|(
name|ClassAssignmentProxy
name|classAssignment
parameter_list|,
name|PreferenceGroup
name|prefGroup
parameter_list|,
name|boolean
name|isEditable
parameter_list|)
block|{
name|Assignment
name|a
init|=
literal|null
decl_stmt|;
name|AssignmentPreferenceInfo
name|p
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|getDisplayTimetable
argument_list|()
operator|&&
name|isShowTimetable
argument_list|()
operator|&&
name|classAssignment
operator|!=
literal|null
operator|&&
name|prefGroup
operator|instanceof
name|Class_
condition|)
block|{
try|try
block|{
name|a
operator|=
name|classAssignment
operator|.
name|getAssignment
argument_list|(
operator|(
name|Class_
operator|)
name|prefGroup
argument_list|)
expr_stmt|;
name|p
operator|=
name|classAssignment
operator|.
name|getAssignmentInfo
argument_list|(
operator|(
name|Class_
operator|)
name|prefGroup
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|DatePattern
name|dp
init|=
operator|(
name|a
operator|!=
literal|null
condition|?
name|a
operator|.
name|getDatePattern
argument_list|()
else|:
name|prefGroup
operator|.
name|effectiveDatePattern
argument_list|()
operator|)
decl_stmt|;
name|PdfPCell
name|cell
init|=
name|createCell
argument_list|()
decl_stmt|;
if|if
condition|(
name|dp
operator|!=
literal|null
condition|)
block|{
name|Color
name|color
init|=
operator|(
name|isEditable
condition|?
name|sEnableColor
else|:
name|sDisableColor
operator|)
decl_stmt|;
name|addText
argument_list|(
name|cell
argument_list|,
name|dp
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_CENTER
argument_list|,
name|color
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|dp
operator|.
name|getType
argument_list|()
operator|==
name|DatePattern
operator|.
name|sTypePatternSet
operator|&&
name|isEditable
condition|)
block|{
name|boolean
name|hasReq
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|prefGroup
operator|.
name|effectivePreferences
argument_list|(
name|DatePatternPref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|pref
init|=
operator|(
name|Preference
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
block|{
name|hasReq
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|prefGroup
operator|.
name|effectivePreferences
argument_list|(
name|DatePatternPref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|pref
init|=
operator|(
name|Preference
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|hasReq
operator|||
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
name|addText
argument_list|(
name|cell
argument_list|,
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
name|pref
operator|.
name|preferenceText
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_CENTER
argument_list|,
operator|(
operator|!
name|isEditable
condition|?
name|color
else|:
name|p
operator|==
literal|null
condition|?
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|awtPrefcolor
argument_list|()
else|:
name|PreferenceLevel
operator|.
name|int2awtColor
argument_list|(
name|p
operator|.
name|getDatePatternPref
argument_list|()
argument_list|,
name|color
argument_list|)
operator|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|cell
return|;
block|}
specifier|private
name|PdfPCell
name|pdfBuildTimePatternCell
parameter_list|(
name|PreferenceGroup
name|prefGroup
parameter_list|,
name|boolean
name|isEditable
parameter_list|)
block|{
name|Color
name|color
init|=
operator|(
name|isEditable
condition|?
name|sEnableColor
else|:
name|sDisableColor
operator|)
decl_stmt|;
name|PdfPCell
name|cell
init|=
name|createCell
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|prefGroup
operator|.
name|effectiveTimePatterns
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePattern
name|tp
init|=
operator|(
name|TimePattern
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|addText
argument_list|(
name|cell
argument_list|,
name|tp
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_CENTER
argument_list|,
name|color
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|prefGroup
operator|instanceof
name|Class_
operator|&&
name|prefGroup
operator|.
name|effectiveTimePatterns
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|prefGroup
decl_stmt|;
name|DurationModel
name|dm
init|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getDurationModel
argument_list|()
decl_stmt|;
name|Integer
name|ah
init|=
name|dm
operator|.
name|getArrangedHours
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
argument_list|,
name|clazz
operator|.
name|effectiveDatePattern
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ah
operator|==
literal|null
condition|)
block|{
name|addText
argument_list|(
name|cell
argument_list|,
literal|"Arr Hrs"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_CENTER
argument_list|,
name|color
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addText
argument_list|(
name|cell
argument_list|,
literal|"Arr "
operator|+
name|ah
operator|+
literal|" Hrs"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_CENTER
argument_list|,
name|color
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|cell
return|;
block|}
specifier|private
name|PdfPCell
name|pdfBuildTimePrefCell
parameter_list|(
name|ClassAssignmentProxy
name|classAssignment
parameter_list|,
name|PreferenceGroup
name|prefGroup
parameter_list|,
name|boolean
name|isEditable
parameter_list|)
block|{
name|Color
name|color
init|=
operator|(
name|isEditable
condition|?
name|sEnableColor
else|:
name|sDisableColor
operator|)
decl_stmt|;
name|Assignment
name|a
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|getDisplayTimetable
argument_list|()
operator|&&
name|isShowTimetable
argument_list|()
operator|&&
name|classAssignment
operator|!=
literal|null
operator|&&
name|prefGroup
operator|instanceof
name|Class_
condition|)
block|{
try|try
block|{
name|a
operator|=
name|classAssignment
operator|.
name|getAssignment
argument_list|(
operator|(
name|Class_
operator|)
name|prefGroup
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|PdfPCell
name|cell
init|=
name|createCell
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|prefGroup
operator|.
name|effectivePreferences
argument_list|(
name|TimePref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePref
name|tp
init|=
operator|(
name|TimePref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|RequiredTimeTable
name|rtt
init|=
name|tp
operator|.
name|getRequiredTimeTable
argument_list|(
name|a
operator|==
literal|null
condition|?
literal|null
else|:
name|a
operator|.
name|getTimeLocation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|getGridAsText
argument_list|()
condition|)
block|{
name|addText
argument_list|(
name|cell
argument_list|,
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|", "
argument_list|,
literal|"\n"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|,
name|color
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|setDefaultSelection
argument_list|(
name|getDefaultTimeGridSize
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|isExactTime
argument_list|()
condition|)
block|{
name|addText
argument_list|(
name|cell
argument_list|,
name|rtt
operator|.
name|exactTime
argument_list|(
literal|false
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|,
name|color
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|java
operator|.
name|awt
operator|.
name|Image
name|awtImage
init|=
name|rtt
operator|.
name|createBufferedImage
argument_list|(
name|getTimeVertival
argument_list|()
argument_list|)
decl_stmt|;
name|Image
name|img
init|=
name|Image
operator|.
name|getInstance
argument_list|(
name|awtImage
argument_list|,
name|Color
operator|.
name|WHITE
argument_list|)
decl_stmt|;
name|Chunk
name|ck
init|=
operator|new
name|Chunk
argument_list|(
name|img
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|cell
operator|.
name|getPhrase
argument_list|()
operator|==
literal|null
condition|)
block|{
name|cell
operator|.
name|setPhrase
argument_list|(
operator|new
name|Paragraph
argument_list|(
name|ck
argument_list|)
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setVerticalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_TOP
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setHorizontalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cell
operator|.
name|getPhrase
argument_list|()
operator|.
name|add
argument_list|(
name|ck
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|cell
return|;
block|}
specifier|private
name|PdfPCell
name|pdfBuildPreferenceCell
parameter_list|(
name|ClassAssignmentProxy
name|classAssignment
parameter_list|,
name|PreferenceGroup
name|prefGroup
parameter_list|,
name|Class
name|prefType
parameter_list|,
name|boolean
name|isEditable
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isEditable
condition|)
return|return
name|createCell
argument_list|()
return|;
name|Color
name|color
init|=
operator|(
name|isEditable
condition|?
name|sEnableColor
else|:
name|sDisableColor
operator|)
decl_stmt|;
if|if
condition|(
name|TimePref
operator|.
name|class
operator|.
name|equals
argument_list|(
name|prefType
argument_list|)
condition|)
block|{
return|return
name|pdfBuildTimePrefCell
argument_list|(
name|classAssignment
argument_list|,
name|prefGroup
argument_list|,
name|isEditable
argument_list|)
return|;
block|}
if|else if
condition|(
name|DistributionPref
operator|.
name|class
operator|.
name|equals
argument_list|(
name|prefType
argument_list|)
condition|)
block|{
name|PdfPCell
name|cell
init|=
name|createCell
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|prefGroup
operator|.
name|effectivePreferences
argument_list|(
name|prefType
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionPref
name|pref
init|=
operator|(
name|DistributionPref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|addText
argument_list|(
name|cell
argument_list|,
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
name|pref
operator|.
name|preferenceText
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|" ("
argument_list|,
literal|", "
argument_list|,
literal|")"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"&lt;"
argument_list|,
literal|"<"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"&gt;"
argument_list|,
literal|">"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|,
operator|(
operator|!
name|isEditable
condition|?
name|color
else|:
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|awtPrefcolor
argument_list|()
operator|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|cell
return|;
block|}
else|else
block|{
name|PdfPCell
name|cell
init|=
name|createCell
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|prefGroup
operator|.
name|effectivePreferences
argument_list|(
name|prefType
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|pref
init|=
operator|(
name|Preference
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|addText
argument_list|(
name|cell
argument_list|,
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
name|pref
operator|.
name|preferenceText
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|,
operator|(
operator|!
name|isEditable
condition|?
name|color
else|:
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|awtPrefcolor
argument_list|()
operator|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|cell
return|;
block|}
block|}
specifier|private
name|PdfPCell
name|pdfBuildPreferenceCell
parameter_list|(
name|ClassAssignmentProxy
name|classAssignment
parameter_list|,
name|PreferenceGroup
name|prefGroup
parameter_list|,
name|Class
index|[]
name|prefTypes
parameter_list|,
name|boolean
name|isEditable
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isEditable
condition|)
return|return
name|createCell
argument_list|()
return|;
name|Color
name|color
init|=
operator|(
name|isEditable
condition|?
name|sEnableColor
else|:
name|sDisableColor
operator|)
decl_stmt|;
name|PdfPCell
name|cell
init|=
name|createCell
argument_list|()
decl_stmt|;
name|boolean
name|noRoomPrefs
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|prefGroup
operator|instanceof
name|Class_
operator|&&
operator|(
operator|(
name|Class_
operator|)
name|prefGroup
operator|)
operator|.
name|getNbrRooms
argument_list|()
operator|.
name|intValue
argument_list|()
operator|==
literal|0
condition|)
block|{
name|noRoomPrefs
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|prefGroup
operator|instanceof
name|SchedulingSubpart
operator|&&
operator|(
operator|(
name|SchedulingSubpart
operator|)
name|prefGroup
operator|)
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|isUnlimitedEnrollment
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
name|noRoomPrefs
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|prefTypes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Class
name|prefType
init|=
name|prefTypes
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|noRoomPrefs
condition|)
block|{
if|if
condition|(
comment|//prefType.equals(RoomPref.class) ||
name|prefType
operator|.
name|equals
argument_list|(
name|RoomGroupPref
operator|.
name|class
argument_list|)
operator|||
name|prefType
operator|.
name|equals
argument_list|(
name|RoomFeaturePref
operator|.
name|class
argument_list|)
operator|||
name|prefType
operator|.
name|equals
argument_list|(
name|BuildingPref
operator|.
name|class
argument_list|)
condition|)
continue|continue;
block|}
for|for
control|(
name|Iterator
name|j
init|=
name|prefGroup
operator|.
name|effectivePreferences
argument_list|(
name|prefType
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|pref
init|=
operator|(
name|Preference
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|addText
argument_list|(
name|cell
argument_list|,
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
name|pref
operator|.
name|preferenceText
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|,
operator|(
operator|!
name|isEditable
condition|?
name|color
else|:
name|pref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|awtPrefcolor
argument_list|()
operator|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|noRoomPrefs
operator|&&
name|cell
operator|.
name|getPhrase
argument_list|()
operator|==
literal|null
condition|)
name|addText
argument_list|(
name|cell
argument_list|,
literal|"N/A"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|,
name|color
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|cell
return|;
block|}
specifier|private
name|PdfPCell
name|pdfBuildPrefGroupDemand
parameter_list|(
name|PreferenceGroup
name|prefGroup
parameter_list|,
name|boolean
name|isEditable
parameter_list|)
block|{
if|if
condition|(
name|prefGroup
operator|instanceof
name|Class_
condition|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|prefGroup
decl_stmt|;
if|if
condition|(
name|StudentClassEnrollment
operator|.
name|sessionHasEnrollments
argument_list|(
name|c
operator|.
name|getSessionId
argument_list|()
argument_list|)
condition|)
block|{
name|PdfPCell
name|tc
init|=
name|createCell
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addText
argument_list|(
name|tc
argument_list|,
name|c
operator|.
name|getEnrollment
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addText
argument_list|(
name|tc
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
block|}
name|tc
operator|.
name|setHorizontalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
return|return
operator|(
name|tc
operator|)
return|;
block|}
block|}
return|return
name|createCell
argument_list|()
return|;
block|}
specifier|private
name|PdfPCell
name|pdfBuildPrefGroupProjectedDemand
parameter_list|(
name|PreferenceGroup
name|prefGroup
parameter_list|,
name|boolean
name|isEditable
parameter_list|)
block|{
name|PdfPCell
name|cell
init|=
name|createCell
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefGroup
operator|instanceof
name|Class_
condition|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|prefGroup
decl_stmt|;
name|SectioningInfo
name|i
init|=
name|c
operator|.
name|getSectioningInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|!=
literal|null
operator|&&
name|i
operator|.
name|getNbrExpectedStudents
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addText
argument_list|(
name|cell
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|Math
operator|.
name|round
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|0.0
argument_list|,
name|c
operator|.
name|getEnrollment
argument_list|()
operator|+
name|i
operator|.
name|getNbrExpectedStudents
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setHorizontalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|cell
return|;
block|}
specifier|private
name|PdfPCell
name|pdfBuildLimit
parameter_list|(
name|ClassAssignmentProxy
name|classAssignment
parameter_list|,
name|PreferenceGroup
name|prefGroup
parameter_list|,
name|boolean
name|isEditable
parameter_list|)
block|{
name|Color
name|color
init|=
operator|(
name|isEditable
condition|?
name|sEnableColor
else|:
name|sDisableColor
operator|)
decl_stmt|;
name|PdfPCell
name|cell
init|=
name|createCell
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefGroup
operator|instanceof
name|SchedulingSubpart
condition|)
block|{
name|SchedulingSubpart
name|ss
init|=
operator|(
name|SchedulingSubpart
operator|)
name|prefGroup
decl_stmt|;
name|boolean
name|unlimited
init|=
name|ss
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|isUnlimitedEnrollment
argument_list|()
operator|.
name|booleanValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|unlimited
condition|)
block|{
name|int
name|limit
init|=
operator|(
name|ss
operator|.
name|getLimit
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|ss
operator|.
name|getLimit
argument_list|()
operator|.
name|intValue
argument_list|()
operator|)
decl_stmt|;
name|int
name|maxExpCap
init|=
name|ss
operator|.
name|getMaxExpectedCapacity
argument_list|()
decl_stmt|;
if|if
condition|(
name|limit
operator|==
name|maxExpCap
condition|)
name|addText
argument_list|(
name|cell
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|limit
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_RIGHT
argument_list|,
name|color
argument_list|,
literal|true
argument_list|)
expr_stmt|;
else|else
name|addText
argument_list|(
name|cell
argument_list|,
name|limit
operator|+
literal|"-"
operator|+
name|maxExpCap
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_RIGHT
argument_list|,
name|color
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|prefGroup
operator|instanceof
name|Class_
condition|)
block|{
name|Class_
name|aClass
init|=
operator|(
name|Class_
operator|)
name|prefGroup
decl_stmt|;
name|boolean
name|unlimited
init|=
name|aClass
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|isUnlimitedEnrollment
argument_list|()
operator|.
name|booleanValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|unlimited
condition|)
block|{
name|String
name|limitString
init|=
literal|null
decl_stmt|;
name|Assignment
name|a
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|classAssignment
operator|!=
literal|null
condition|)
name|a
operator|=
name|classAssignment
operator|.
name|getAssignment
argument_list|(
name|aClass
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|aClass
operator|.
name|getExpectedCapacity
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|limitString
operator|=
name|aClass
operator|.
name|getExpectedCapacity
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|aClass
operator|.
name|getMaxExpectedCapacity
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|aClass
operator|.
name|getMaxExpectedCapacity
argument_list|()
operator|.
name|equals
argument_list|(
name|aClass
operator|.
name|getExpectedCapacity
argument_list|()
argument_list|)
condition|)
block|{
name|limitString
operator|=
name|limitString
operator|+
literal|"-"
operator|+
name|aClass
operator|.
name|getMaxExpectedCapacity
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|limitString
operator|=
literal|"0"
expr_stmt|;
if|if
condition|(
name|aClass
operator|.
name|getMaxExpectedCapacity
argument_list|()
operator|!=
literal|null
operator|&&
name|aClass
operator|.
name|getMaxExpectedCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|limitString
operator|=
name|limitString
operator|+
literal|"-"
operator|+
name|aClass
operator|.
name|getMaxExpectedCapacity
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|limitString
operator|=
literal|""
operator|+
name|aClass
operator|.
name|getClassLimit
argument_list|(
name|classAssignment
argument_list|)
expr_stmt|;
block|}
name|addText
argument_list|(
name|cell
argument_list|,
name|limitString
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_RIGHT
argument_list|,
name|color
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|cell
return|;
block|}
specifier|private
name|PdfPCell
name|pdfBuildDivisionSection
parameter_list|(
name|CourseOffering
name|co
parameter_list|,
name|PreferenceGroup
name|prefGroup
parameter_list|,
name|boolean
name|isEditable
parameter_list|)
block|{
name|Color
name|color
init|=
operator|(
name|isEditable
condition|?
name|sEnableColor
else|:
name|sDisableColor
operator|)
decl_stmt|;
name|PdfPCell
name|cell
init|=
name|createCell
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefGroup
operator|instanceof
name|Class_
condition|)
block|{
name|Class_
name|aClass
init|=
operator|(
name|Class_
operator|)
name|prefGroup
decl_stmt|;
comment|// String divSec = aClass.getDivSecNumber();
name|String
name|divSec
init|=
name|aClass
operator|.
name|getClassSuffix
argument_list|(
name|co
argument_list|)
decl_stmt|;
if|if
condition|(
name|divSec
operator|!=
literal|null
condition|)
name|addText
argument_list|(
name|cell
argument_list|,
name|divSec
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_RIGHT
argument_list|,
name|color
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|cell
return|;
block|}
specifier|protected
name|PdfPCell
name|pdfBuildInstructor
parameter_list|(
name|PreferenceGroup
name|prefGroup
parameter_list|,
name|boolean
name|isEditable
parameter_list|)
block|{
name|Color
name|color
init|=
operator|(
name|isEditable
condition|?
name|sEnableColor
else|:
name|sDisableColor
operator|)
decl_stmt|;
name|PdfPCell
name|cell
init|=
name|createCell
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefGroup
operator|instanceof
name|Class_
condition|)
block|{
name|Class_
name|aClass
init|=
operator|(
name|Class_
operator|)
name|prefGroup
decl_stmt|;
name|TreeSet
name|sortedInstructors
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|InstructorComparator
argument_list|()
argument_list|)
decl_stmt|;
name|sortedInstructors
operator|.
name|addAll
argument_list|(
name|aClass
operator|.
name|getClassInstructors
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|sortedInstructors
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|ci
init|=
operator|(
name|ClassInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|label
init|=
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getName
argument_list|(
name|getInstructorNameFormat
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|italic
init|=
operator|!
name|aClass
operator|.
name|isDisplayInstructor
argument_list|()
operator|.
name|booleanValue
argument_list|()
decl_stmt|;
name|boolean
name|bold
init|=
name|ci
operator|.
name|isLead
argument_list|()
operator|.
name|booleanValue
argument_list|()
decl_stmt|;
name|addText
argument_list|(
name|cell
argument_list|,
name|label
argument_list|,
name|bold
argument_list|,
name|italic
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|,
name|color
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|prefGroup
operator|instanceof
name|SchedulingSubpart
operator|&&
name|isShowInstructorAssignment
argument_list|()
operator|&&
operator|(
operator|(
name|SchedulingSubpart
operator|)
name|prefGroup
operator|)
operator|.
name|getTeachingLoad
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SchedulingSubpart
name|ss
init|=
operator|(
name|SchedulingSubpart
operator|)
name|prefGroup
decl_stmt|;
name|addText
argument_list|(
name|cell
argument_list|,
name|Formats
operator|.
name|getNumberFormat
argument_list|(
literal|"0.##"
argument_list|)
operator|.
name|format
argument_list|(
name|ss
operator|.
name|getTeachingLoad
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|MSG
operator|.
name|teachingLoadUnits
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isShowPreferences
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|prefGroup
operator|.
name|effectivePreferences
argument_list|(
name|InstructorCoursePref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstructorCoursePref
name|p
init|=
operator|(
name|InstructorCoursePref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|addText
argument_list|(
name|cell
argument_list|,
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
operator|(
operator|(
name|DepartmentalInstructor
operator|)
name|p
operator|.
name|getOwner
argument_list|()
operator|)
operator|.
name|getName
argument_list|(
name|getInstructorNameFormat
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|,
operator|(
operator|!
name|isEditable
condition|?
name|color
else|:
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|awtPrefcolor
argument_list|()
operator|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|cell
return|;
block|}
specifier|private
name|PdfPCell
name|pdfBuildCredit
parameter_list|(
name|PreferenceGroup
name|prefGroup
parameter_list|,
name|boolean
name|isEditable
parameter_list|)
block|{
name|Color
name|color
init|=
operator|(
name|isEditable
condition|?
name|sEnableColor
else|:
name|sDisableColor
operator|)
decl_stmt|;
name|PdfPCell
name|cell
init|=
name|createCell
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefGroup
operator|instanceof
name|SchedulingSubpart
condition|)
block|{
name|SchedulingSubpart
name|ss
init|=
operator|(
name|SchedulingSubpart
operator|)
name|prefGroup
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|getCredit
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addText
argument_list|(
name|cell
argument_list|,
name|ss
operator|.
name|getCredit
argument_list|()
operator|.
name|creditAbbv
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|,
name|color
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|cell
return|;
block|}
specifier|private
name|PdfPCell
name|pdfBuildSchedulePrintNote
parameter_list|(
name|PreferenceGroup
name|prefGroup
parameter_list|,
name|boolean
name|isEditable
parameter_list|,
name|UserContext
name|user
parameter_list|)
block|{
name|Color
name|color
init|=
operator|(
name|isEditable
condition|?
name|sEnableColor
else|:
name|sDisableColor
operator|)
decl_stmt|;
name|PdfPCell
name|cell
init|=
name|createCell
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefGroup
operator|instanceof
name|Class_
condition|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|prefGroup
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getSchedulePrintNote
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|c
operator|.
name|getSchedulePrintNote
argument_list|()
operator|.
name|length
argument_list|()
operator|<=
literal|20
operator|||
name|user
operator|==
literal|null
operator|||
name|CommonValues
operator|.
name|NoteAsFullText
operator|.
name|eq
argument_list|(
name|user
operator|.
name|getProperty
argument_list|(
name|UserProperty
operator|.
name|SchedulePrintNoteDisplay
argument_list|)
argument_list|)
condition|)
block|{
name|addText
argument_list|(
name|cell
argument_list|,
name|c
operator|.
name|getSchedulePrintNote
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|,
name|color
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addText
argument_list|(
name|cell
argument_list|,
name|c
operator|.
name|getSchedulePrintNote
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|20
argument_list|)
operator|+
literal|"..."
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|,
name|color
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|cell
return|;
block|}
specifier|private
name|PdfPCell
name|pdfBuildSchedulePrintNote
parameter_list|(
name|InstructionalOffering
name|io
parameter_list|,
name|boolean
name|isEditable
parameter_list|,
name|UserContext
name|user
parameter_list|)
block|{
name|Color
name|color
init|=
operator|(
name|isEditable
condition|?
name|sEnableColor
else|:
name|sDisableColor
operator|)
decl_stmt|;
name|PdfPCell
name|cell
init|=
name|createCell
argument_list|()
decl_stmt|;
name|StringBuffer
name|note
init|=
operator|new
name|StringBuffer
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|Set
name|s
init|=
name|io
operator|.
name|getCourseOfferings
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|s
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOffering
name|coI
init|=
operator|(
name|CourseOffering
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|coI
operator|.
name|getScheduleBookNote
argument_list|()
operator|!=
literal|null
operator|&&
name|coI
operator|.
name|getScheduleBookNote
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|note
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|note
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|coI
operator|.
name|getScheduleBookNote
argument_list|()
operator|.
name|length
argument_list|()
operator|<=
literal|20
operator|||
name|Constants
operator|.
name|showCrsOffrAsFullText
argument_list|(
name|user
argument_list|)
condition|)
block|{
name|note
operator|.
name|append
argument_list|(
name|coI
operator|.
name|getScheduleBookNote
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|note
operator|.
name|append
argument_list|(
name|coI
operator|.
name|getScheduleBookNote
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|20
argument_list|)
operator|+
literal|"..."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|addText
argument_list|(
name|cell
argument_list|,
name|note
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|,
name|color
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
operator|(
name|cell
operator|)
return|;
block|}
specifier|private
name|PdfPCell
name|pdfBuildNote
parameter_list|(
name|PreferenceGroup
name|prefGroup
parameter_list|,
name|boolean
name|isEditable
parameter_list|,
name|UserContext
name|user
parameter_list|)
block|{
name|Color
name|color
init|=
operator|(
name|isEditable
condition|?
name|sEnableColor
else|:
name|sDisableColor
operator|)
decl_stmt|;
name|PdfPCell
name|cell
init|=
name|createCell
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefGroup
operator|instanceof
name|Class_
condition|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|prefGroup
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getNotes
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|c
operator|.
name|getNotes
argument_list|()
operator|.
name|length
argument_list|()
operator|<=
literal|30
operator|||
name|user
operator|==
literal|null
operator|||
name|CommonValues
operator|.
name|NoteAsFullText
operator|.
name|eq
argument_list|(
name|user
operator|.
name|getProperty
argument_list|(
name|UserProperty
operator|.
name|ManagerNoteDisplay
argument_list|)
argument_list|)
condition|)
block|{
name|addText
argument_list|(
name|cell
argument_list|,
name|c
operator|.
name|getNotes
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|,
name|color
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addText
argument_list|(
name|cell
argument_list|,
name|c
operator|.
name|getNotes
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|30
argument_list|)
operator|+
literal|"..."
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|,
name|color
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|cell
return|;
block|}
specifier|private
name|PdfPCell
name|pdfBuildManager
parameter_list|(
name|PreferenceGroup
name|prefGroup
parameter_list|,
name|boolean
name|isEditable
parameter_list|)
block|{
name|Color
name|color
init|=
operator|(
name|isEditable
condition|?
name|sEnableColor
else|:
name|sDisableColor
operator|)
decl_stmt|;
name|PdfPCell
name|cell
init|=
name|createCell
argument_list|()
decl_stmt|;
name|Department
name|managingDept
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|prefGroup
operator|instanceof
name|Class_
condition|)
block|{
name|managingDept
operator|=
operator|(
operator|(
name|Class_
operator|)
name|prefGroup
operator|)
operator|.
name|getManagingDept
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|prefGroup
operator|instanceof
name|SchedulingSubpart
condition|)
block|{
name|managingDept
operator|=
operator|(
operator|(
name|SchedulingSubpart
operator|)
name|prefGroup
operator|)
operator|.
name|getManagingDept
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|managingDept
operator|!=
literal|null
condition|)
block|{
name|addText
argument_list|(
name|cell
argument_list|,
name|managingDept
operator|.
name|getShortLabel
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|,
name|color
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|cell
return|;
block|}
specifier|private
name|PdfPCell
name|pdfBuildMinPerWeek
parameter_list|(
name|PreferenceGroup
name|prefGroup
parameter_list|,
name|boolean
name|isEditable
parameter_list|)
block|{
name|Color
name|color
init|=
operator|(
name|isEditable
condition|?
name|sEnableColor
else|:
name|sDisableColor
operator|)
decl_stmt|;
name|PdfPCell
name|cell
init|=
name|createCell
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefGroup
operator|instanceof
name|Class_
condition|)
block|{
name|Class_
name|aClass
init|=
operator|(
name|Class_
operator|)
name|prefGroup
decl_stmt|;
name|String
name|suffix
init|=
literal|""
decl_stmt|;
name|ClassDurationType
name|dtype
init|=
name|aClass
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getEffectiveDurationType
argument_list|()
decl_stmt|;
if|if
condition|(
name|dtype
operator|!=
literal|null
operator|&&
operator|!
name|dtype
operator|.
name|equals
argument_list|(
name|aClass
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getDefaultClassDurationType
argument_list|()
argument_list|)
condition|)
block|{
name|suffix
operator|=
literal|" "
operator|+
name|dtype
operator|.
name|getAbbreviation
argument_list|()
expr_stmt|;
block|}
name|addText
argument_list|(
name|cell
argument_list|,
name|aClass
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
operator|+
name|suffix
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_RIGHT
argument_list|,
name|color
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|prefGroup
operator|instanceof
name|SchedulingSubpart
condition|)
block|{
name|SchedulingSubpart
name|aSchedulingSubpart
init|=
operator|(
name|SchedulingSubpart
operator|)
name|prefGroup
decl_stmt|;
name|String
name|suffix
init|=
literal|""
decl_stmt|;
name|ClassDurationType
name|dtype
init|=
name|aSchedulingSubpart
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getEffectiveDurationType
argument_list|()
decl_stmt|;
if|if
condition|(
name|dtype
operator|!=
literal|null
operator|&&
operator|!
name|dtype
operator|.
name|equals
argument_list|(
name|aSchedulingSubpart
operator|.
name|getSession
argument_list|()
operator|.
name|getDefaultClassDurationType
argument_list|()
argument_list|)
condition|)
block|{
name|suffix
operator|=
literal|" "
operator|+
name|dtype
operator|.
name|getAbbreviation
argument_list|()
expr_stmt|;
block|}
name|addText
argument_list|(
name|cell
argument_list|,
name|aSchedulingSubpart
operator|.
name|getMinutesPerWk
argument_list|()
operator|+
name|suffix
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_RIGHT
argument_list|,
name|color
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|cell
return|;
block|}
specifier|private
name|PdfPCell
name|pdfBuildRoomLimit
parameter_list|(
name|PreferenceGroup
name|prefGroup
parameter_list|,
name|boolean
name|isEditable
parameter_list|,
name|boolean
name|classLimitDisplayed
parameter_list|)
block|{
name|Color
name|color
init|=
operator|(
name|isEditable
condition|?
name|sEnableColor
else|:
name|sDisableColor
operator|)
decl_stmt|;
name|PdfPCell
name|cell
init|=
name|createCell
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefGroup
operator|instanceof
name|Class_
condition|)
block|{
name|Class_
name|aClass
init|=
operator|(
name|Class_
operator|)
name|prefGroup
decl_stmt|;
if|if
condition|(
name|aClass
operator|.
name|getNbrRooms
argument_list|()
operator|!=
literal|null
operator|&&
name|aClass
operator|.
name|getNbrRooms
argument_list|()
operator|.
name|intValue
argument_list|()
operator|!=
literal|1
condition|)
block|{
if|if
condition|(
name|aClass
operator|.
name|getNbrRooms
argument_list|()
operator|.
name|intValue
argument_list|()
operator|==
literal|0
condition|)
name|addText
argument_list|(
name|cell
argument_list|,
literal|"N/A"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_RIGHT
argument_list|,
name|color
argument_list|,
literal|true
argument_list|)
expr_stmt|;
else|else
block|{
name|String
name|text
init|=
name|aClass
operator|.
name|getNbrRooms
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|text
operator|+=
literal|" at "
expr_stmt|;
if|if
condition|(
name|aClass
operator|.
name|getRoomRatio
argument_list|()
operator|!=
literal|null
condition|)
name|text
operator|+=
name|sRoomRatioFormat
operator|.
name|format
argument_list|(
name|aClass
operator|.
name|getRoomRatio
argument_list|()
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|text
operator|+=
literal|"0"
expr_stmt|;
name|addText
argument_list|(
name|cell
argument_list|,
name|text
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_RIGHT
argument_list|,
name|color
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|aClass
operator|.
name|getRoomRatio
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|classLimitDisplayed
operator|&&
name|aClass
operator|.
name|getRoomRatio
argument_list|()
operator|.
name|equals
argument_list|(
operator|new
name|Float
argument_list|(
literal|1.0
argument_list|)
argument_list|)
condition|)
block|{
name|addText
argument_list|(
name|cell
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_RIGHT
argument_list|,
name|color
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addText
argument_list|(
name|cell
argument_list|,
name|sRoomRatioFormat
operator|.
name|format
argument_list|(
name|aClass
operator|.
name|getRoomRatio
argument_list|()
operator|.
name|floatValue
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_RIGHT
argument_list|,
name|color
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|aClass
operator|.
name|getExpectedCapacity
argument_list|()
operator|==
literal|null
condition|)
block|{
name|addText
argument_list|(
name|cell
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_RIGHT
argument_list|,
name|color
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addText
argument_list|(
name|cell
argument_list|,
literal|"0"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_RIGHT
argument_list|,
name|color
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|cell
return|;
block|}
specifier|private
name|PdfPCell
name|pdfBuildAssignedTime
parameter_list|(
name|ClassAssignmentProxy
name|classAssignment
parameter_list|,
name|PreferenceGroup
name|prefGroup
parameter_list|,
name|boolean
name|isEditable
parameter_list|)
block|{
name|Color
name|color
init|=
operator|(
name|isEditable
condition|?
name|sEnableColor
else|:
name|sDisableColor
operator|)
decl_stmt|;
name|PdfPCell
name|cell
init|=
name|createCell
argument_list|()
decl_stmt|;
if|if
condition|(
name|classAssignment
operator|!=
literal|null
operator|&&
name|prefGroup
operator|instanceof
name|Class_
condition|)
block|{
name|Class_
name|aClass
init|=
operator|(
name|Class_
operator|)
name|prefGroup
decl_stmt|;
name|Assignment
name|a
init|=
literal|null
decl_stmt|;
name|AssignmentPreferenceInfo
name|p
init|=
literal|null
decl_stmt|;
try|try
block|{
name|a
operator|=
name|classAssignment
operator|.
name|getAssignment
argument_list|(
name|aClass
argument_list|)
expr_stmt|;
name|p
operator|=
name|classAssignment
operator|.
name|getAssignmentInfo
argument_list|(
operator|(
name|Class_
operator|)
name|prefGroup
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|a
operator|!=
literal|null
condition|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|Enumeration
argument_list|<
name|Integer
argument_list|>
name|e
init|=
name|a
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDays
argument_list|()
decl_stmt|;
while|while
condition|(
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|CONSTANTS
operator|.
name|shortDays
argument_list|()
index|[
name|e
operator|.
name|nextElement
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|a
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getStartTimeHeader
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|a
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getEndTimeHeader
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addText
argument_list|(
name|cell
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|,
operator|(
name|p
operator|==
literal|null
operator|||
operator|!
name|isEditable
condition|?
name|color
else|:
name|PreferenceLevel
operator|.
name|int2awtColor
argument_list|(
name|p
operator|.
name|getTimePreference
argument_list|()
argument_list|,
name|color
argument_list|)
operator|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|cell
return|;
block|}
specifier|private
name|PdfPCell
name|pdfBuildAssignedRoom
parameter_list|(
name|ClassAssignmentProxy
name|classAssignment
parameter_list|,
name|PreferenceGroup
name|prefGroup
parameter_list|,
name|boolean
name|isEditable
parameter_list|)
block|{
name|Color
name|color
init|=
operator|(
name|isEditable
condition|?
name|sEnableColor
else|:
name|sDisableColor
operator|)
decl_stmt|;
name|PdfPCell
name|cell
init|=
name|createCell
argument_list|()
decl_stmt|;
if|if
condition|(
name|classAssignment
operator|!=
literal|null
operator|&&
name|prefGroup
operator|instanceof
name|Class_
condition|)
block|{
name|Class_
name|aClass
init|=
operator|(
name|Class_
operator|)
name|prefGroup
decl_stmt|;
name|Assignment
name|a
init|=
literal|null
decl_stmt|;
name|AssignmentPreferenceInfo
name|p
init|=
literal|null
decl_stmt|;
try|try
block|{
name|a
operator|=
name|classAssignment
operator|.
name|getAssignment
argument_list|(
name|aClass
argument_list|)
expr_stmt|;
name|p
operator|=
name|classAssignment
operator|.
name|getAssignmentInfo
argument_list|(
operator|(
name|Class_
operator|)
name|prefGroup
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|a
operator|!=
literal|null
condition|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|Iterator
name|it2
init|=
name|a
operator|.
name|getRooms
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Location
name|room
init|=
operator|(
name|Location
operator|)
name|it2
operator|.
name|next
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|room
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|it2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
name|addText
argument_list|(
name|cell
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|,
operator|(
name|p
operator|==
literal|null
operator|||
operator|!
name|isEditable
condition|?
name|color
else|:
name|PreferenceLevel
operator|.
name|int2awtColor
argument_list|(
name|p
operator|.
name|getTimePreference
argument_list|()
argument_list|,
name|color
argument_list|)
operator|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|cell
return|;
block|}
specifier|private
name|PdfPCell
name|pdfBuildAssignedRoomCapacity
parameter_list|(
name|ClassAssignmentProxy
name|classAssignment
parameter_list|,
name|PreferenceGroup
name|prefGroup
parameter_list|,
name|boolean
name|isEditable
parameter_list|)
block|{
name|Color
name|color
init|=
operator|(
name|isEditable
condition|?
name|sEnableColor
else|:
name|sDisableColor
operator|)
decl_stmt|;
name|PdfPCell
name|cell
init|=
name|createCell
argument_list|()
decl_stmt|;
if|if
condition|(
name|classAssignment
operator|!=
literal|null
operator|&&
name|prefGroup
operator|instanceof
name|Class_
condition|)
block|{
name|Class_
name|aClass
init|=
operator|(
name|Class_
operator|)
name|prefGroup
decl_stmt|;
name|Assignment
name|a
init|=
literal|null
decl_stmt|;
try|try
block|{
name|a
operator|=
name|classAssignment
operator|.
name|getAssignment
argument_list|(
name|aClass
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|a
operator|!=
literal|null
condition|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|Iterator
name|it2
init|=
name|a
operator|.
name|getRooms
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
operator|(
operator|(
name|Location
operator|)
name|it2
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|it2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
name|addText
argument_list|(
name|cell
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|,
name|color
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|cell
return|;
block|}
specifier|private
name|PdfPCell
name|pdfBuildExamName
parameter_list|(
name|TreeSet
name|exams
parameter_list|,
name|boolean
name|isEditable
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exams
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|exam
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|Color
name|color
init|=
operator|(
name|isEditable
condition|?
name|sEnableColor
else|:
name|sDisableColor
operator|)
decl_stmt|;
name|PdfPCell
name|cell
init|=
name|createCell
argument_list|()
decl_stmt|;
name|addText
argument_list|(
name|cell
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|,
name|color
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|cell
return|;
block|}
specifier|private
name|PdfPCell
name|pdfBuildExamPeriod
parameter_list|(
name|ExamAssignmentProxy
name|examAssignment
parameter_list|,
name|TreeSet
name|exams
parameter_list|,
name|boolean
name|isEditable
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exams
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|examAssignment
operator|!=
literal|null
operator|&&
name|examAssignment
operator|.
name|getExamTypeId
argument_list|()
operator|.
name|equals
argument_list|(
name|exam
operator|.
name|getExamType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|ExamAssignment
name|ea
init|=
name|examAssignment
operator|.
name|getAssignment
argument_list|(
name|exam
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ea
operator|==
literal|null
operator|&&
operator|!
name|isShowExamName
argument_list|()
condition|)
continue|continue;
name|sb
operator|.
name|append
argument_list|(
name|ea
operator|==
literal|null
condition|?
literal|""
else|:
name|ea
operator|.
name|getPeriodAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
operator|==
literal|null
operator|&&
operator|!
name|isShowExamName
argument_list|()
condition|)
continue|continue;
name|sb
operator|.
name|append
argument_list|(
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|Color
name|color
init|=
operator|(
name|isEditable
condition|?
name|sEnableColor
else|:
name|sDisableColor
operator|)
decl_stmt|;
name|PdfPCell
name|cell
init|=
name|createCell
argument_list|()
decl_stmt|;
name|addText
argument_list|(
name|cell
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|,
name|color
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|cell
return|;
block|}
specifier|private
name|PdfPCell
name|pdfBuildExamRoom
parameter_list|(
name|ExamAssignmentProxy
name|examAssignment
parameter_list|,
name|TreeSet
name|exams
parameter_list|,
name|boolean
name|isEditable
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exams
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|examAssignment
operator|!=
literal|null
operator|&&
name|examAssignment
operator|.
name|getExamTypeId
argument_list|()
operator|.
name|equals
argument_list|(
name|exam
operator|.
name|getExamType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|ExamAssignment
name|ea
init|=
name|examAssignment
operator|.
name|getAssignment
argument_list|(
name|exam
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ea
operator|==
literal|null
operator|&&
operator|!
name|isShowExamName
argument_list|()
condition|)
continue|continue;
name|sb
operator|.
name|append
argument_list|(
name|ea
operator|==
literal|null
condition|?
literal|""
else|:
name|ea
operator|.
name|getRoomsName
argument_list|(
literal|", "
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
operator|==
literal|null
operator|&&
operator|!
name|isShowExamName
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|Iterator
name|j
init|=
operator|new
name|TreeSet
argument_list|(
name|exam
operator|.
name|getAssignedRooms
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|location
init|=
operator|(
name|Location
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|location
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|j
operator|.
name|hasNext
argument_list|()
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|Color
name|color
init|=
operator|(
name|isEditable
condition|?
name|sEnableColor
else|:
name|sDisableColor
operator|)
decl_stmt|;
name|PdfPCell
name|cell
init|=
name|createCell
argument_list|()
decl_stmt|;
name|addText
argument_list|(
name|cell
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|,
name|color
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|cell
return|;
block|}
comment|//NOTE: if changing column order column order must be changed in
comment|//		buildTableHeader, addInstrOffrRowsToTable, buildClassOrSubpartRow, and buildConfigRow
specifier|protected
name|void
name|pdfBuildClassOrSubpartRow
parameter_list|(
name|ClassAssignmentProxy
name|classAssignment
parameter_list|,
name|ExamAssignmentProxy
name|examAssignment
parameter_list|,
name|CourseOffering
name|co
parameter_list|,
name|PreferenceGroup
name|prefGroup
parameter_list|,
name|String
name|indentSpaces
parameter_list|,
name|boolean
name|isEditable
parameter_list|,
name|String
name|prevLabel
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
name|boolean
name|classLimitDisplayed
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|isShowLabel
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildPrefGroupLabel
argument_list|(
name|co
argument_list|,
name|prefGroup
argument_list|,
name|indentSpaces
argument_list|,
name|isEditable
argument_list|,
name|prevLabel
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowDivSec
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildDivisionSection
argument_list|(
name|co
argument_list|,
name|prefGroup
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowDemand
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildPrefGroupDemand
argument_list|(
name|prefGroup
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowProjectedDemand
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildPrefGroupProjectedDemand
argument_list|(
name|prefGroup
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowLimit
argument_list|()
condition|)
block|{
name|classLimitDisplayed
operator|=
literal|true
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildLimit
argument_list|(
name|classAssignment
argument_list|,
name|prefGroup
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowRoomRatio
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildRoomLimit
argument_list|(
name|prefGroup
argument_list|,
name|isEditable
argument_list|,
name|classLimitDisplayed
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowManager
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildManager
argument_list|(
name|prefGroup
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowDatePattern
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildDatePatternCell
argument_list|(
name|classAssignment
argument_list|,
name|prefGroup
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowMinPerWk
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildMinPerWeek
argument_list|(
name|prefGroup
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowTimePattern
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildTimePatternCell
argument_list|(
name|prefGroup
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowPreferences
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildPreferenceCell
argument_list|(
name|classAssignment
argument_list|,
name|prefGroup
argument_list|,
name|TimePref
operator|.
name|class
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildPreferenceCell
argument_list|(
name|classAssignment
argument_list|,
name|prefGroup
argument_list|,
operator|new
name|Class
index|[]
block|{
name|RoomPref
operator|.
name|class
block|,
name|BuildingPref
operator|.
name|class
block|,
name|RoomFeaturePref
operator|.
name|class
block|,
name|RoomGroupPref
operator|.
name|class
block|}
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|getDisplayDistributionPrefs
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildPreferenceCell
argument_list|(
name|classAssignment
argument_list|,
name|prefGroup
argument_list|,
name|DistributionPref
operator|.
name|class
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getDisplayInstructorPrefs
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildPreferenceCell
argument_list|(
name|classAssignment
argument_list|,
name|prefGroup
argument_list|,
name|InstructorAttributePref
operator|.
name|class
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isShowInstructor
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildInstructor
argument_list|(
name|prefGroup
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getDisplayTimetable
argument_list|()
operator|&&
name|isShowTimetable
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildAssignedTime
argument_list|(
name|classAssignment
argument_list|,
name|prefGroup
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildAssignedRoom
argument_list|(
name|classAssignment
argument_list|,
name|prefGroup
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildAssignedRoomCapacity
argument_list|(
name|classAssignment
argument_list|,
name|prefGroup
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowTitle
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|createCell
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowCredit
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|createCell
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowSubpartCredit
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildCredit
argument_list|(
name|prefGroup
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowConsent
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|createCell
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowSchedulePrintNote
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildSchedulePrintNote
argument_list|(
name|prefGroup
argument_list|,
name|isEditable
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowNote
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildNote
argument_list|(
name|prefGroup
argument_list|,
name|isEditable
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowExam
argument_list|()
condition|)
block|{
name|TreeSet
name|exams
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefGroup
operator|instanceof
name|Class_
condition|)
block|{
name|exams
operator|=
name|getExams
argument_list|(
operator|(
name|Class_
operator|)
name|prefGroup
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Exam
argument_list|>
name|i
init|=
name|exams
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
operator|!
name|context
operator|.
name|hasPermission
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|,
name|Right
operator|.
name|ExaminationView
argument_list|)
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isShowExamName
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildExamName
argument_list|(
name|exams
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowExamTimetable
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildExamPeriod
argument_list|(
name|examAssignment
argument_list|,
name|exams
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildExamRoom
argument_list|(
name|examAssignment
argument_list|,
name|exams
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|pdfBuildSchedulingSubpartRow
parameter_list|(
name|ClassAssignmentProxy
name|classAssignment
parameter_list|,
name|ExamAssignmentProxy
name|examAssignment
parameter_list|,
name|CourseOffering
name|co
parameter_list|,
name|SchedulingSubpart
name|ss
parameter_list|,
name|String
name|indentSpaces
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
name|boolean
name|isEditable
init|=
name|context
operator|.
name|hasPermission
argument_list|(
name|ss
argument_list|,
name|Right
operator|.
name|SchedulingSubpartDetail
argument_list|)
decl_stmt|;
name|iBgColor
operator|=
name|sBgColorSubpart
expr_stmt|;
name|pdfBuildClassOrSubpartRow
argument_list|(
name|classAssignment
argument_list|,
name|examAssignment
argument_list|,
name|co
argument_list|,
name|ss
argument_list|,
name|indentSpaces
argument_list|,
name|isEditable
argument_list|,
literal|null
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|pdfBuildSchedulingSubpartRows
parameter_list|(
name|Vector
name|subpartIds
parameter_list|,
name|ClassAssignmentProxy
name|classAssignment
parameter_list|,
name|ExamAssignmentProxy
name|examAssignment
parameter_list|,
name|CourseOffering
name|co
parameter_list|,
name|SchedulingSubpart
name|ss
parameter_list|,
name|String
name|indentSpaces
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|subpartIds
operator|!=
literal|null
condition|)
name|subpartIds
operator|.
name|add
argument_list|(
name|ss
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|pdfBuildSchedulingSubpartRow
argument_list|(
name|classAssignment
argument_list|,
name|examAssignment
argument_list|,
name|co
argument_list|,
name|ss
argument_list|,
name|indentSpaces
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|Set
name|childSubparts
init|=
name|ss
operator|.
name|getChildSubparts
argument_list|()
decl_stmt|;
if|if
condition|(
name|childSubparts
operator|!=
literal|null
operator|&&
operator|!
name|childSubparts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ArrayList
name|childSubpartList
init|=
operator|new
name|ArrayList
argument_list|(
name|childSubparts
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|childSubpartList
argument_list|,
operator|new
name|SchedulingSubpartComparator
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
name|it
init|=
name|childSubpartList
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|SchedulingSubpart
name|child
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|child
operator|=
operator|(
name|SchedulingSubpart
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|pdfBuildSchedulingSubpartRows
argument_list|(
name|subpartIds
argument_list|,
name|classAssignment
argument_list|,
name|examAssignment
argument_list|,
name|co
argument_list|,
name|child
argument_list|,
name|indentSpaces
operator|+
name|indent
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|pdfBuildClassRow
parameter_list|(
name|ClassAssignmentProxy
name|classAssignment
parameter_list|,
name|ExamAssignmentProxy
name|examAssignment
parameter_list|,
name|int
name|ct
parameter_list|,
name|CourseOffering
name|co
parameter_list|,
name|Class_
name|aClass
parameter_list|,
name|String
name|indentSpaces
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|String
name|prevLabel
parameter_list|)
block|{
name|boolean
name|isEditable
init|=
name|context
operator|.
name|hasPermission
argument_list|(
name|aClass
argument_list|,
name|Right
operator|.
name|ClassDetail
argument_list|)
decl_stmt|;
name|iBgColor
operator|=
name|sBgColorClass
expr_stmt|;
name|pdfBuildClassOrSubpartRow
argument_list|(
name|classAssignment
argument_list|,
name|examAssignment
argument_list|,
name|co
argument_list|,
name|aClass
argument_list|,
name|indentSpaces
argument_list|,
name|isEditable
operator|&&
operator|!
name|aClass
operator|.
name|isCancelled
argument_list|()
argument_list|,
name|prevLabel
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|pdfBuildClassRows
parameter_list|(
name|ClassAssignmentProxy
name|classAssignment
parameter_list|,
name|ExamAssignmentProxy
name|examAssignment
parameter_list|,
name|int
name|ct
parameter_list|,
name|CourseOffering
name|co
parameter_list|,
name|Class_
name|aClass
parameter_list|,
name|String
name|indentSpaces
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|String
name|prevLabel
parameter_list|)
block|{
name|pdfBuildClassRow
argument_list|(
name|classAssignment
argument_list|,
name|examAssignment
argument_list|,
name|ct
argument_list|,
name|co
argument_list|,
name|aClass
argument_list|,
name|indentSpaces
argument_list|,
name|context
argument_list|,
name|prevLabel
argument_list|)
expr_stmt|;
name|Set
name|childClasses
init|=
name|aClass
operator|.
name|getChildClasses
argument_list|()
decl_stmt|;
if|if
condition|(
name|childClasses
operator|!=
literal|null
operator|&&
operator|!
name|childClasses
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ArrayList
name|childClassesList
init|=
operator|new
name|ArrayList
argument_list|(
name|childClasses
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|childClassesList
argument_list|,
name|getClassComparator
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
name|it
init|=
name|childClassesList
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Class_
name|child
init|=
literal|null
decl_stmt|;
name|String
name|previousLabel
init|=
name|aClass
operator|.
name|htmlLabel
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|child
operator|=
operator|(
name|Class_
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|pdfBuildClassRows
argument_list|(
name|classAssignment
argument_list|,
name|examAssignment
argument_list|,
name|ct
argument_list|,
name|co
argument_list|,
name|child
argument_list|,
name|indentSpaces
operator|+
name|indent
argument_list|,
name|context
argument_list|,
name|previousLabel
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|pdfBuildConfigRow
parameter_list|(
name|Vector
name|subpartIds
parameter_list|,
name|ClassAssignmentProxy
name|classAssignment
parameter_list|,
name|ExamAssignmentProxy
name|examAssignment
parameter_list|,
name|CourseOffering
name|co
parameter_list|,
name|InstrOfferingConfig
name|ioc
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|boolean
name|printConfigLine
parameter_list|)
block|{
name|iBgColor
operator|=
name|sBgColorConfig
expr_stmt|;
name|boolean
name|isEditable
init|=
name|context
operator|.
name|hasPermission
argument_list|(
name|ioc
operator|.
name|getInstructionalOffering
argument_list|()
argument_list|,
name|Right
operator|.
name|InstructionalOfferingDetail
argument_list|)
decl_stmt|;
name|Color
name|color
init|=
operator|(
name|isEditable
condition|?
name|sEnableColor
else|:
name|sDisableColor
operator|)
decl_stmt|;
name|String
name|configName
init|=
name|ioc
operator|.
name|getName
argument_list|()
decl_stmt|;
name|boolean
name|unlimited
init|=
name|ioc
operator|.
name|isUnlimitedEnrollment
argument_list|()
operator|.
name|booleanValue
argument_list|()
decl_stmt|;
name|boolean
name|hasConfig
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|printConfigLine
condition|)
block|{
if|if
condition|(
name|isShowLabel
argument_list|()
condition|)
block|{
if|if
condition|(
name|configName
operator|==
literal|null
operator|||
name|configName
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|configName
operator|=
name|ioc
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|PdfPCell
name|cell
init|=
name|createCell
argument_list|()
decl_stmt|;
name|addText
argument_list|(
name|cell
argument_list|,
name|indent
operator|+
operator|(
name|ioc
operator|.
name|getInstructionalMethod
argument_list|()
operator|==
literal|null
condition|?
name|MSG
operator|.
name|labelConfiguration
argument_list|(
name|configName
argument_list|)
else|:
name|MSG
operator|.
name|labelConfigurationWithInstructionalMethod
argument_list|(
name|configName
argument_list|,
name|ioc
operator|.
name|getInstructionalMethod
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
operator|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|,
name|color
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowDivSec
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|createCell
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowDemand
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|createCell
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowProjectedDemand
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|createCell
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowLimit
argument_list|()
condition|)
block|{
name|PdfPCell
name|cell
init|=
name|createCell
argument_list|()
decl_stmt|;
name|addText
argument_list|(
name|cell
argument_list|,
operator|(
name|unlimited
condition|?
literal|"inf"
else|:
name|ioc
operator|.
name|getLimit
argument_list|()
operator|.
name|toString
argument_list|()
operator|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_RIGHT
argument_list|,
name|color
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowRoomRatio
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|createCell
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowManager
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|createCell
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowDatePattern
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|createCell
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowMinPerWk
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|createCell
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowTimePattern
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|createCell
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowPreferences
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|getPreferenceColumns
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|createCell
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isShowInstructor
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|createCell
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getDisplayTimetable
argument_list|()
operator|&&
name|isShowTimetable
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|createCell
argument_list|()
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|createCell
argument_list|()
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|createCell
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowTitle
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|createCell
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowCredit
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|createCell
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowSubpartCredit
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|createCell
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowConsent
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|createCell
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowSchedulePrintNote
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|createCell
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowNote
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|createCell
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowExam
argument_list|()
condition|)
block|{
name|TreeSet
name|exams
init|=
operator|new
name|TreeSet
argument_list|(
name|Exam
operator|.
name|findAll
argument_list|(
name|ExamOwner
operator|.
name|sOwnerTypeConfig
argument_list|,
name|ioc
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|isShowExamName
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildExamName
argument_list|(
name|exams
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Exam
argument_list|>
name|i
init|=
name|exams
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
operator|!
name|context
operator|.
name|hasPermission
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|,
name|Right
operator|.
name|ExaminationView
argument_list|)
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isShowExamTimetable
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildExamPeriod
argument_list|(
name|examAssignment
argument_list|,
name|exams
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildExamRoom
argument_list|(
name|examAssignment
argument_list|,
name|exams
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|hasConfig
operator|=
literal|true
expr_stmt|;
block|}
name|ArrayList
name|subpartList
init|=
operator|new
name|ArrayList
argument_list|(
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|subpartList
argument_list|,
operator|new
name|SchedulingSubpartComparator
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
name|it
init|=
name|subpartList
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|SchedulingSubpart
name|ss
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ss
operator|=
operator|(
name|SchedulingSubpart
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|ss
operator|.
name|getParentSubpart
argument_list|()
operator|==
literal|null
condition|)
block|{
name|pdfBuildSchedulingSubpartRows
argument_list|(
name|subpartIds
argument_list|,
name|classAssignment
argument_list|,
name|examAssignment
argument_list|,
name|co
argument_list|,
name|ss
argument_list|,
operator|(
name|hasConfig
condition|?
name|indent
operator|+
name|indent
else|:
name|indent
operator|)
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
block|}
name|it
operator|=
name|subpartList
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|int
name|ct
init|=
literal|0
decl_stmt|;
name|String
name|prevLabel
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ss
operator|=
operator|(
name|SchedulingSubpart
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|ss
operator|.
name|getParentSubpart
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|ss
operator|.
name|getClasses
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Vector
name|classes
init|=
operator|new
name|Vector
argument_list|(
name|ss
operator|.
name|getClasses
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|classes
argument_list|,
name|getClassComparator
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
name|cIt
init|=
name|classes
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Class_
name|c
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|cIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|c
operator|=
operator|(
name|Class_
operator|)
name|cIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|pdfBuildClassRows
argument_list|(
name|classAssignment
argument_list|,
name|examAssignment
argument_list|,
operator|++
name|ct
argument_list|,
name|co
argument_list|,
name|c
argument_list|,
name|indent
argument_list|,
name|context
argument_list|,
name|prevLabel
argument_list|)
expr_stmt|;
name|prevLabel
operator|=
name|c
operator|.
name|htmlLabel
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|void
name|pdfBuildConfigRows
parameter_list|(
name|ClassAssignmentProxy
name|classAssignment
parameter_list|,
name|ExamAssignmentProxy
name|examAssignment
parameter_list|,
name|CourseOffering
name|co
parameter_list|,
name|Set
name|instrOfferingConfigs
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|boolean
name|printConfigLine
parameter_list|)
block|{
name|Iterator
name|it
init|=
name|instrOfferingConfigs
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|InstrOfferingConfig
name|ioc
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ioc
operator|=
operator|(
name|InstrOfferingConfig
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|pdfBuildConfigRow
argument_list|(
literal|null
argument_list|,
name|classAssignment
argument_list|,
name|examAssignment
argument_list|,
name|co
argument_list|,
name|ioc
argument_list|,
name|context
argument_list|,
name|printConfigLine
operator|&&
name|instrOfferingConfigs
operator|.
name|size
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|pdfAddInstrOffrRowsToTable
parameter_list|(
name|ClassAssignmentProxy
name|classAssignment
parameter_list|,
name|ExamAssignmentProxy
name|examAssignment
parameter_list|,
name|InstructionalOffering
name|io
parameter_list|,
name|Long
name|subjectAreaId
parameter_list|,
name|SessionContext
name|context
parameter_list|)
block|{
name|iBgColor
operator|=
name|sBgColorOffering
expr_stmt|;
name|CourseOffering
name|co
init|=
name|io
operator|.
name|findSortCourseOfferingForSubjectArea
argument_list|(
name|subjectAreaId
argument_list|)
decl_stmt|;
name|boolean
name|isEditable
init|=
name|context
operator|.
name|hasPermission
argument_list|(
name|co
operator|.
name|getInstructionalOffering
argument_list|()
argument_list|,
name|Right
operator|.
name|InstructionalOfferingDetail
argument_list|)
decl_stmt|;
name|boolean
name|isManagedAs
init|=
operator|!
name|co
operator|.
name|isIsControl
argument_list|()
operator|.
name|booleanValue
argument_list|()
decl_stmt|;
name|Color
name|color
init|=
operator|(
name|isEditable
condition|?
name|sEnableColor
else|:
name|sDisableColor
operator|)
decl_stmt|;
if|if
condition|(
name|isShowLabel
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfSubjectAndCourseInfo
argument_list|(
name|io
argument_list|,
name|co
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowDivSec
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|createCell
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowDemand
argument_list|()
condition|)
block|{
name|PdfPCell
name|cell
init|=
name|createCell
argument_list|()
decl_stmt|;
if|if
condition|(
name|StudentClassEnrollment
operator|.
name|sessionHasEnrollments
argument_list|(
name|io
operator|.
name|getSessionId
argument_list|()
argument_list|)
condition|)
block|{
name|addText
argument_list|(
name|cell
argument_list|,
operator|(
name|io
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
condition|?
name|io
operator|.
name|getEnrollment
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|"0"
operator|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_RIGHT
argument_list|,
operator|(
name|co
operator|.
name|isIsControl
argument_list|()
condition|?
name|color
else|:
name|sDisableColor
operator|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addText
argument_list|(
name|cell
argument_list|,
operator|(
name|io
operator|.
name|getDemand
argument_list|()
operator|!=
literal|null
condition|?
name|io
operator|.
name|getDemand
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|"0"
operator|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_RIGHT
argument_list|,
operator|(
name|co
operator|.
name|isIsControl
argument_list|()
condition|?
name|color
else|:
name|sDisableColor
operator|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowProjectedDemand
argument_list|()
condition|)
block|{
name|PdfPCell
name|cell
init|=
name|createCell
argument_list|()
decl_stmt|;
name|addText
argument_list|(
name|cell
argument_list|,
operator|(
name|io
operator|.
name|getProjectedDemand
argument_list|()
operator|!=
literal|null
condition|?
name|io
operator|.
name|getProjectedDemand
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|"0"
operator|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_RIGHT
argument_list|,
operator|(
name|co
operator|.
name|isIsControl
argument_list|()
condition|?
name|color
else|:
name|sDisableColor
operator|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowLimit
argument_list|()
condition|)
block|{
name|boolean
name|unlimited
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|x
init|=
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
operator|!
name|unlimited
operator|&&
name|x
operator|.
name|hasNext
argument_list|()
condition|;
control|)
if|if
condition|(
operator|(
operator|(
operator|(
name|InstrOfferingConfig
operator|)
name|x
operator|.
name|next
argument_list|()
operator|)
operator|)
operator|.
name|isUnlimitedEnrollment
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
name|unlimited
operator|=
literal|true
expr_stmt|;
name|PdfPCell
name|cell
init|=
name|createCell
argument_list|()
decl_stmt|;
name|addText
argument_list|(
name|cell
argument_list|,
operator|(
name|unlimited
condition|?
literal|"inf"
else|:
name|io
operator|.
name|getLimit
argument_list|()
operator|==
literal|null
condition|?
literal|"0"
else|:
name|io
operator|.
name|getLimit
argument_list|()
operator|.
name|toString
argument_list|()
operator|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_RIGHT
argument_list|,
operator|(
name|co
operator|.
name|isIsControl
argument_list|()
condition|?
name|color
else|:
name|sDisableColor
operator|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
name|int
name|emptyCels
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|isShowRoomRatio
argument_list|()
condition|)
block|{
name|emptyCels
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|isShowManager
argument_list|()
condition|)
block|{
name|emptyCels
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|isShowDatePattern
argument_list|()
condition|)
block|{
name|emptyCels
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|isShowMinPerWk
argument_list|()
condition|)
block|{
name|emptyCels
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|isShowTimePattern
argument_list|()
condition|)
block|{
name|emptyCels
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|isShowPreferences
argument_list|()
condition|)
block|{
name|emptyCels
operator|+=
name|getPreferenceColumns
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isShowInstructor
argument_list|()
condition|)
block|{
name|emptyCels
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|getDisplayTimetable
argument_list|()
operator|&&
name|isShowTimetable
argument_list|()
condition|)
block|{
name|emptyCels
operator|+=
literal|3
expr_stmt|;
block|}
if|if
condition|(
name|emptyCels
operator|>
literal|0
condition|)
block|{
name|PdfPCell
name|managedCell
init|=
name|createCell
argument_list|()
decl_stmt|;
if|if
condition|(
name|isManagedAs
condition|)
block|{
if|if
condition|(
operator|!
name|isShowTitle
argument_list|()
condition|)
block|{
if|if
condition|(
name|co
operator|.
name|getTitle
argument_list|()
operator|!=
literal|null
operator|&&
name|co
operator|.
name|getTitle
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|addText
argument_list|(
name|managedCell
argument_list|,
literal|"     "
operator|+
name|co
operator|.
name|getTitle
argument_list|()
operator|+
literal|" ("
operator|+
name|MSG
operator|.
name|crossListManagedAs
argument_list|(
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|)
operator|+
literal|")"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|,
name|sDisableColor
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addText
argument_list|(
name|managedCell
argument_list|,
literal|"     "
operator|+
name|MSG
operator|.
name|crossListManagedAs
argument_list|(
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|,
name|sDisableColor
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|it
init|=
name|io
operator|.
name|courseOfferingsMinusSortCourseOfferingForSubjectArea
argument_list|(
name|co
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOffering
name|x
init|=
operator|(
name|CourseOffering
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|addText
argument_list|(
name|managedCell
argument_list|,
operator|(
name|x
operator|.
name|getTitle
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|"     "
operator|+
name|x
operator|.
name|getTitle
argument_list|()
operator|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|,
name|sDisableColor
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|addText
argument_list|(
name|managedCell
argument_list|,
literal|"     "
operator|+
name|MSG
operator|.
name|crossListManagedAs
argument_list|(
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|,
name|sDisableColor
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|isShowTitle
argument_list|()
condition|)
block|{
name|addText
argument_list|(
name|managedCell
argument_list|,
operator|(
name|co
operator|.
name|getTitle
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|"      "
operator|+
name|co
operator|.
name|getTitle
argument_list|()
operator|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|,
name|color
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|io
operator|.
name|courseOfferingsMinusSortCourseOfferingForSubjectArea
argument_list|(
name|co
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOffering
name|x
init|=
operator|(
name|CourseOffering
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|addText
argument_list|(
name|managedCell
argument_list|,
operator|(
name|x
operator|.
name|getTitle
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|"      "
operator|+
name|x
operator|.
name|getTitle
argument_list|()
operator|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|,
name|sDisableColor
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|managedCell
operator|.
name|setColspan
argument_list|(
name|emptyCels
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|managedCell
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowTitle
argument_list|()
condition|)
block|{
name|PdfPCell
name|titleCell
init|=
name|createCell
argument_list|()
decl_stmt|;
name|addText
argument_list|(
name|titleCell
argument_list|,
operator|(
name|co
operator|.
name|getTitle
argument_list|()
operator|!=
literal|null
condition|?
literal|"      "
operator|+
name|co
operator|.
name|getTitle
argument_list|()
else|:
literal|""
operator|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|,
name|color
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|io
operator|.
name|courseOfferingsMinusSortCourseOfferingForSubjectArea
argument_list|(
name|co
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOffering
name|x
init|=
operator|(
name|CourseOffering
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|addText
argument_list|(
name|titleCell
argument_list|,
operator|(
name|x
operator|.
name|getTitle
argument_list|()
operator|!=
literal|null
condition|?
literal|"      "
operator|+
name|x
operator|.
name|getTitle
argument_list|()
else|:
literal|""
operator|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|,
name|sDisableColor
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|titleCell
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowCredit
argument_list|()
condition|)
block|{
name|PdfPCell
name|cell
init|=
name|createCell
argument_list|()
decl_stmt|;
name|addText
argument_list|(
name|cell
argument_list|,
operator|(
name|co
operator|.
name|getCredit
argument_list|()
operator|!=
literal|null
condition|?
name|co
operator|.
name|getCredit
argument_list|()
operator|.
name|creditAbbv
argument_list|()
else|:
literal|""
operator|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|,
name|isManagedAs
condition|?
name|sDisableColor
else|:
name|color
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|io
operator|.
name|courseOfferingsMinusSortCourseOfferingForSubjectArea
argument_list|(
name|co
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOffering
name|x
init|=
operator|(
name|CourseOffering
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|addText
argument_list|(
name|cell
argument_list|,
operator|(
name|x
operator|.
name|getCredit
argument_list|()
operator|!=
literal|null
condition|?
name|x
operator|.
name|getCredit
argument_list|()
operator|.
name|creditAbbv
argument_list|()
else|:
literal|""
operator|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|,
name|sDisableColor
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowSubpartCredit
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|createCell
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowConsent
argument_list|()
condition|)
block|{
name|PdfPCell
name|cell
init|=
name|createCell
argument_list|()
decl_stmt|;
name|addText
argument_list|(
name|cell
argument_list|,
name|co
operator|.
name|getConsentType
argument_list|()
operator|!=
literal|null
condition|?
name|co
operator|.
name|getConsentType
argument_list|()
operator|.
name|getAbbv
argument_list|()
else|:
name|MSG
operator|.
name|noConsentRequired
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|,
name|isManagedAs
condition|?
name|sDisableColor
else|:
name|color
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|io
operator|.
name|courseOfferingsMinusSortCourseOfferingForSubjectArea
argument_list|(
name|co
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOffering
name|x
init|=
operator|(
name|CourseOffering
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|addText
argument_list|(
name|cell
argument_list|,
operator|(
name|x
operator|.
name|getConsentType
argument_list|()
operator|!=
literal|null
condition|?
name|x
operator|.
name|getConsentType
argument_list|()
operator|.
name|getAbbv
argument_list|()
else|:
name|MSG
operator|.
name|noConsentRequired
argument_list|()
operator|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|,
name|sDisableColor
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowSchedulePrintNote
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildSchedulePrintNote
argument_list|(
name|io
argument_list|,
name|isEditable
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowNote
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|createCell
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowExam
argument_list|()
condition|)
block|{
name|TreeSet
name|exams
init|=
operator|new
name|TreeSet
argument_list|(
name|Exam
operator|.
name|findAll
argument_list|(
name|ExamOwner
operator|.
name|sOwnerTypeOffering
argument_list|,
name|io
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|io
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOffering
name|cox
init|=
operator|(
name|CourseOffering
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|exams
operator|.
name|addAll
argument_list|(
name|Exam
operator|.
name|findAll
argument_list|(
name|ExamOwner
operator|.
name|sOwnerTypeCourse
argument_list|,
name|cox
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|ioc
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|exams
operator|.
name|addAll
argument_list|(
name|Exam
operator|.
name|findAll
argument_list|(
name|ExamOwner
operator|.
name|sOwnerTypeConfig
argument_list|,
name|ioc
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Exam
argument_list|>
name|i
init|=
name|exams
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
operator|!
name|context
operator|.
name|hasPermission
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|,
name|Right
operator|.
name|ExaminationView
argument_list|)
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isShowExamName
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildExamName
argument_list|(
name|exams
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowExamTimetable
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildExamPeriod
argument_list|(
name|examAssignment
argument_list|,
name|exams
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildExamRoom
argument_list|(
name|examAssignment
argument_list|,
name|exams
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|!=
literal|null
operator|&
operator|!
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|TreeSet
name|configs
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|InstrOfferingConfigComparator
argument_list|(
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|configs
operator|.
name|addAll
argument_list|(
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
argument_list|)
expr_stmt|;
name|pdfBuildConfigRows
argument_list|(
name|classAssignment
argument_list|,
name|examAssignment
argument_list|,
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
argument_list|,
name|configs
argument_list|,
name|context
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|pdfTableForInstructionalOffering
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|ClassAssignmentProxy
name|classAssignment
parameter_list|,
name|ExamAssignmentProxy
name|examAssignment
parameter_list|,
name|Long
name|instructionalOfferingId
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|Comparator
name|classComparator
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|instructionalOfferingId
operator|!=
literal|null
operator|&&
name|context
operator|!=
literal|null
condition|)
block|{
name|InstructionalOfferingDAO
name|idao
init|=
operator|new
name|InstructionalOfferingDAO
argument_list|()
decl_stmt|;
name|InstructionalOffering
name|io
init|=
name|idao
operator|.
name|get
argument_list|(
name|instructionalOfferingId
argument_list|)
decl_stmt|;
name|Long
name|subjectAreaId
init|=
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
decl_stmt|;
comment|// Get Configuration
name|TreeSet
name|ts
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
name|ts
operator|.
name|add
argument_list|(
name|io
argument_list|)
expr_stmt|;
name|WebInstructionalOfferingTableBuilder
name|iotbl
init|=
operator|new
name|WebInstructionalOfferingTableBuilder
argument_list|()
decl_stmt|;
name|iotbl
operator|.
name|setDisplayDistributionPrefs
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setVisibleColumns
argument_list|(
name|COLUMNS
argument_list|)
expr_stmt|;
name|iDocument
operator|=
operator|new
name|Document
argument_list|(
name|PageSize
operator|.
name|A4
argument_list|,
literal|30f
argument_list|,
literal|30f
argument_list|,
literal|30f
argument_list|,
literal|30f
argument_list|)
expr_stmt|;
name|iWriter
operator|=
name|PdfEventHandler
operator|.
name|initFooter
argument_list|(
name|iDocument
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|pdfTableForInstructionalOfferings
argument_list|(
name|out
argument_list|,
name|classAssignment
argument_list|,
name|examAssignment
argument_list|,
name|ts
argument_list|,
name|subjectAreaId
argument_list|,
name|context
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|classComparator
argument_list|)
expr_stmt|;
name|iDocument
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|pdfTableForInstructionalOfferings
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|ClassAssignmentProxy
name|classAssignment
parameter_list|,
name|ExamAssignmentProxy
name|examAssignment
parameter_list|,
name|InstructionalOfferingListForm
name|form
parameter_list|,
name|String
index|[]
name|subjectAreaIds
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|boolean
name|displayHeader
parameter_list|,
name|boolean
name|allCoursesAreGiven
parameter_list|)
throws|throws
name|Exception
block|{
name|setVisibleColumns
argument_list|(
name|form
argument_list|)
expr_stmt|;
name|iDocument
operator|=
operator|new
name|Document
argument_list|(
name|PageSize
operator|.
name|A4
argument_list|,
literal|30f
argument_list|,
literal|30f
argument_list|,
literal|30f
argument_list|,
literal|30f
argument_list|)
expr_stmt|;
name|iWriter
operator|=
name|PdfEventHandler
operator|.
name|initFooter
argument_list|(
name|iDocument
argument_list|,
name|out
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|subjectAreaId
range|:
name|subjectAreaIds
control|)
block|{
name|pdfTableForInstructionalOfferings
argument_list|(
name|out
argument_list|,
name|classAssignment
argument_list|,
name|examAssignment
argument_list|,
name|form
operator|.
name|getInstructionalOfferings
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|subjectAreaId
argument_list|)
argument_list|)
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|subjectAreaId
argument_list|)
argument_list|,
name|context
argument_list|,
name|displayHeader
argument_list|,
name|allCoursesAreGiven
argument_list|,
operator|new
name|ClassCourseComparator
argument_list|(
name|form
operator|.
name|getSortBy
argument_list|()
argument_list|,
name|classAssignment
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iDocument
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|pdfTableForInstructionalOfferings
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|ClassAssignmentProxy
name|classAssignment
parameter_list|,
name|ExamAssignmentProxy
name|examAssignment
parameter_list|,
name|TreeSet
name|insructionalOfferings
parameter_list|,
name|Long
name|subjectAreaId
parameter_list|,
name|SessionContext
name|context
parameter_list|,
name|boolean
name|displayHeader
parameter_list|,
name|boolean
name|allCoursesAreGiven
parameter_list|,
name|Comparator
name|classComparator
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|insructionalOfferings
operator|==
literal|null
condition|)
return|return;
name|SubjectArea
name|subjectArea
init|=
name|SubjectAreaDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|subjectAreaId
argument_list|)
decl_stmt|;
if|if
condition|(
name|classComparator
operator|!=
literal|null
condition|)
name|setClassComparator
argument_list|(
name|classComparator
argument_list|)
expr_stmt|;
if|if
condition|(
name|isShowTimetable
argument_list|()
condition|)
block|{
name|boolean
name|hasTimetable
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|ClassAssignments
argument_list|)
operator|&&
name|classAssignment
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|classAssignment
operator|instanceof
name|CachedClassAssignmentProxy
condition|)
block|{
name|Vector
name|allClasses
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|insructionalOfferings
operator|.
name|iterator
argument_list|()
init|;
operator|!
name|hasTimetable
operator|&&
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstructionalOffering
name|io
init|=
operator|(
name|InstructionalOffering
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
operator|!
name|hasTimetable
operator|&&
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|ioc
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|k
init|=
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
operator|!
name|hasTimetable
operator|&&
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|ss
init|=
operator|(
name|SchedulingSubpart
operator|)
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|l
init|=
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|l
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|l
operator|.
name|next
argument_list|()
decl_stmt|;
name|allClasses
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
operator|(
operator|(
name|CachedClassAssignmentProxy
operator|)
name|classAssignment
operator|)
operator|.
name|setCache
argument_list|(
name|allClasses
argument_list|)
expr_stmt|;
name|hasTimetable
operator|=
operator|!
name|classAssignment
operator|.
name|getAssignmentTable
argument_list|(
name|allClasses
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|insructionalOfferings
operator|.
name|iterator
argument_list|()
init|;
operator|!
name|hasTimetable
operator|&&
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstructionalOffering
name|io
init|=
operator|(
name|InstructionalOffering
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
operator|!
name|hasTimetable
operator|&&
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|ioc
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|k
init|=
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
operator|!
name|hasTimetable
operator|&&
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|ss
init|=
operator|(
name|SchedulingSubpart
operator|)
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|l
init|=
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|l
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|l
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|classAssignment
operator|.
name|getAssignment
argument_list|(
name|clazz
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|hasTimetable
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
name|setDisplayTimetable
argument_list|(
name|hasTimetable
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowExam
argument_list|()
condition|)
name|setShowExamTimetable
argument_list|(
name|examAssignment
operator|!=
literal|null
operator|||
name|Exam
operator|.
name|hasTimetable
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ArrayList
name|notOfferedOfferings
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|ArrayList
name|offeredOfferings
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|ArrayList
name|offeringIds
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Iterator
name|it
init|=
name|insructionalOfferings
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|InstructionalOffering
name|io
init|=
literal|null
decl_stmt|;
name|boolean
name|hasOfferedCourses
init|=
literal|false
decl_stmt|;
name|boolean
name|hasNotOfferedCourses
init|=
literal|false
decl_stmt|;
name|setUserSettings
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|io
operator|=
operator|(
name|InstructionalOffering
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|io
operator|.
name|isNotOffered
argument_list|()
operator|==
literal|null
operator|||
name|io
operator|.
name|isNotOffered
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|hasNotOfferedCourses
operator|=
literal|true
expr_stmt|;
name|notOfferedOfferings
operator|.
name|add
argument_list|(
name|io
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hasOfferedCourses
operator|=
literal|true
expr_stmt|;
name|offeredOfferings
operator|.
name|add
argument_list|(
name|io
argument_list|)
expr_stmt|;
block|}
block|}
name|float
index|[]
name|widths
init|=
name|getWidths
argument_list|()
decl_stmt|;
name|float
name|totalWidth
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|widths
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|totalWidth
operator|+=
name|widths
index|[
name|i
index|]
expr_stmt|;
name|iDocument
operator|.
name|setPageSize
argument_list|(
operator|new
name|Rectangle
argument_list|(
literal|60f
operator|+
name|totalWidth
argument_list|,
literal|60f
operator|+
literal|0.77f
operator|*
name|totalWidth
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasOfferedCourses
operator|||
name|allCoursesAreGiven
condition|)
block|{
name|iPdfTable
operator|=
operator|new
name|PdfPTable
argument_list|(
name|getWidths
argument_list|()
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|setWidthPercentage
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|getDefaultCell
argument_list|()
operator|.
name|setPadding
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|getDefaultCell
argument_list|()
operator|.
name|setBorderWidth
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|setSplitRows
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|displayHeader
condition|)
block|{
if|if
condition|(
operator|!
name|iDocument
operator|.
name|isOpen
argument_list|()
condition|)
name|iDocument
operator|.
name|open
argument_list|()
expr_stmt|;
else|else
name|iDocument
operator|.
name|newPage
argument_list|()
expr_stmt|;
name|iDocument
operator|.
name|add
argument_list|(
operator|new
name|Paragraph
argument_list|(
name|MSG
operator|.
name|labelOfferedCourses
argument_list|(
name|subjectArea
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
argument_list|,
name|PdfFont
operator|.
name|getBigFont
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|pdfBuildTableHeader
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasOfferedCourses
condition|)
block|{
name|it
operator|=
name|offeredOfferings
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|io
operator|=
operator|(
name|InstructionalOffering
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|offeringIds
operator|.
name|add
argument_list|(
name|io
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|pdfAddInstrOffrRowsToTable
argument_list|(
name|classAssignment
argument_list|,
name|examAssignment
argument_list|,
name|io
argument_list|,
name|subjectAreaId
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|displayHeader
condition|)
name|iDocument
operator|.
name|add
argument_list|(
operator|new
name|Paragraph
argument_list|(
name|MSG
operator|.
name|errorNoCoursesOffered
argument_list|(
name|subjectArea
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
argument_list|,
name|PdfFont
operator|.
name|getFont
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|Color
operator|.
name|RED
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iDocument
operator|.
name|add
argument_list|(
name|iPdfTable
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasNotOfferedCourses
operator|||
name|allCoursesAreGiven
condition|)
block|{
name|iPdfTable
operator|=
operator|new
name|PdfPTable
argument_list|(
name|getWidths
argument_list|()
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|setWidthPercentage
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|getDefaultCell
argument_list|()
operator|.
name|setPadding
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|getDefaultCell
argument_list|()
operator|.
name|setBorderWidth
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|setSplitRows
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|displayHeader
condition|)
block|{
name|iDocument
operator|.
name|newPage
argument_list|()
expr_stmt|;
name|iDocument
operator|.
name|add
argument_list|(
operator|new
name|Paragraph
argument_list|(
name|MSG
operator|.
name|labelNotOfferedCourses
argument_list|(
name|subjectArea
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
argument_list|,
name|PdfFont
operator|.
name|getBigFont
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|pdfBuildTableHeader
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasNotOfferedCourses
condition|)
block|{
name|it
operator|=
name|notOfferedOfferings
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|io
operator|=
operator|(
name|InstructionalOffering
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|offeringIds
operator|.
name|add
argument_list|(
name|io
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|pdfAddInstrOffrRowsToTable
argument_list|(
name|classAssignment
argument_list|,
name|examAssignment
argument_list|,
name|io
argument_list|,
name|subjectAreaId
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|displayHeader
condition|)
name|iDocument
operator|.
name|add
argument_list|(
operator|new
name|Paragraph
argument_list|(
name|MSG
operator|.
name|errorAllCoursesOffered
argument_list|(
name|subjectArea
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
argument_list|,
name|PdfFont
operator|.
name|getFont
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iDocument
operator|.
name|add
argument_list|(
name|iPdfTable
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

