begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.1 (University Timetabling Application)  * Copyright (C) 2008, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|pdf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcadAreaReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOfferingReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|IndividualReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PosReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Reservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentGroupReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|ClassComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|CourseOfferingComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|SchedulingSubpartComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|PdfEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|PdfWebTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|ReservationsTableBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Chunk
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Font
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|FontFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Graphic
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|PageSize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Paragraph
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|pdf
operator|.
name|PdfWriter
import|;
end_import

begin_comment
comment|/**  * Exports reservations to PDF   *   * @author Heston Fernandes  */
end_comment

begin_class
specifier|public
class|class
name|PdfReservationsTableBuilder
extends|extends
name|ReservationsTableBuilder
block|{
comment|/** Pdf document objects **/
specifier|private
name|Document
name|pdfDoc
init|=
literal|null
decl_stmt|;
specifier|private
name|PdfWriter
name|pdfWriter
init|=
literal|null
decl_stmt|;
comment|/** Colors to indicate and increase/decrease in actual reserved from requested **/
specifier|private
specifier|final
name|String
name|colorIncrease
init|=
literal|"339933"
decl_stmt|;
specifier|private
specifier|final
name|String
name|colorDecrease
init|=
literal|"CC3333"
decl_stmt|;
comment|/** Header Labels **/
specifier|final
name|String
name|headerF
init|=
literal|"@@ITALIC @@COLOR ABABAB "
decl_stmt|;
specifier|final
name|String
name|headerE
init|=
literal|" @@END_ITALIC "
decl_stmt|;
specifier|final
name|String
name|LBL_RESERVED
init|=
name|headerF
operator|+
literal|"Resv"
operator|+
name|headerE
decl_stmt|;
specifier|final
name|String
name|LBL_PROJECTED
init|=
name|headerF
operator|+
literal|"Proj"
operator|+
name|headerE
decl_stmt|;
specifier|final
name|String
name|LBL_REQUESTED
init|=
name|headerF
operator|+
literal|"Req"
operator|+
name|headerE
decl_stmt|;
specifier|final
name|String
name|LBL_LAST_TERM
init|=
name|headerF
operator|+
literal|"L Term"
operator|+
name|headerE
decl_stmt|;
specifier|final
name|String
name|LBL_PRIORITY
init|=
name|headerF
operator|+
literal|"Priority"
operator|+
name|headerE
decl_stmt|;
specifier|final
name|String
name|LBL_TYPE
init|=
name|headerF
operator|+
literal|"Type"
operator|+
name|headerE
decl_stmt|;
specifier|final
name|String
name|LBL_EXPDATE
init|=
name|headerF
operator|+
literal|"Exp Date"
operator|+
name|headerE
decl_stmt|;
specifier|final
name|String
name|LBL_OVERLIMIT
init|=
name|headerF
operator|+
literal|"Over Limit"
operator|+
name|headerE
decl_stmt|;
specifier|final
name|String
name|LBL_CLASSIF
init|=
literal|"Acad Class"
decl_stmt|;
comment|/**      * Generate pdf for reservations given a subject area and course number (optional)      * @request request object      * @param user      * @param subjectAreaId      * @param courseNbr      * @param displayIo flag indicating whether IO reservations are to be displayed      * @param displayConfig flag indicating whether Config reservations are to be displayed      * @param displayClass flag indicating whether Class reservations are to be displayed      * @param displayCourse flag indicating whether Course Offering reservations are to be displayed      * @param includeIndividual include individual reservations      * @param includeStuGroup include student group reservations      * @param includeAcadArea include academic area reservations      * @param includePos include pos reservations      * @param includeCourse include course reservations      * @return      */
specifier|public
name|boolean
name|pdfTableForSubjectArea
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|User
name|user
parameter_list|,
name|String
name|subjectAreaId
parameter_list|,
name|String
name|courseNbr
parameter_list|,
name|boolean
name|displayIo
parameter_list|,
name|boolean
name|displayConfig
parameter_list|,
name|boolean
name|displayClass
parameter_list|,
name|boolean
name|displayCourse
parameter_list|,
name|boolean
name|includeIndividual
parameter_list|,
name|boolean
name|includeStuGroup
parameter_list|,
name|boolean
name|includeAcadArea
parameter_list|,
name|boolean
name|includePos
parameter_list|,
name|boolean
name|includeCourse
parameter_list|)
throws|throws
name|Exception
block|{
name|FileOutputStream
name|out
init|=
literal|null
decl_stmt|;
name|boolean
name|result
init|=
literal|false
decl_stmt|;
try|try
block|{
comment|// Open pdf file
name|File
name|file
init|=
name|ApplicationProperties
operator|.
name|getTempFile
argument_list|(
literal|"reservation"
argument_list|,
literal|"pdf"
argument_list|)
decl_stmt|;
name|out
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
comment|// Create document with letter size pages
name|pdfDoc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|pdfDoc
operator|.
name|setPageSize
argument_list|(
name|PageSize
operator|.
name|LETTER
argument_list|)
expr_stmt|;
comment|// Create writer instance
name|pdfWriter
operator|=
name|PdfEventHandler
operator|.
name|initFooter
argument_list|(
name|pdfDoc
argument_list|,
name|out
argument_list|)
expr_stmt|;
comment|// Set metadata
name|pdfDoc
operator|.
name|addTitle
argument_list|(
literal|"Reservations"
argument_list|)
expr_stmt|;
name|pdfDoc
operator|.
name|addSubject
argument_list|(
literal|"Timetabling"
argument_list|)
expr_stmt|;
name|pdfDoc
operator|.
name|addCreator
argument_list|(
literal|"Timeatbling Web Application"
argument_list|)
expr_stmt|;
comment|// Open document
name|pdfDoc
operator|.
name|open
argument_list|()
expr_stmt|;
name|this
operator|.
name|pdfDoc
operator|.
name|add
argument_list|(
operator|new
name|Paragraph
argument_list|(
literal|"Reservations\n"
argument_list|,
name|FontFactory
operator|.
name|getFont
argument_list|(
name|FontFactory
operator|.
name|HELVETICA_BOLD
argument_list|,
literal|16
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Set
name|instrOfferings
init|=
name|super
operator|.
name|getInstructionalOfferings
argument_list|(
name|subjectAreaId
argument_list|,
name|courseNbr
argument_list|)
decl_stmt|;
if|if
condition|(
name|instrOfferings
operator|==
literal|null
operator|||
name|instrOfferings
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|this
operator|.
name|pdfDoc
operator|.
name|add
argument_list|(
operator|new
name|Paragraph
argument_list|(
literal|"There are no reservations for this subject area / course number."
argument_list|,
name|FontFactory
operator|.
name|getFont
argument_list|(
name|FontFactory
operator|.
name|HELVETICA
argument_list|,
literal|12
argument_list|,
name|Font
operator|.
name|BOLD
argument_list|,
name|Color
operator|.
name|RED
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// Iterate through instr offerings, configs and classes
for|for
control|(
name|Iterator
name|iterIo
init|=
name|instrOfferings
operator|.
name|iterator
argument_list|()
init|;
name|iterIo
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstructionalOffering
name|io
init|=
operator|(
name|InstructionalOffering
operator|)
name|iterIo
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|pdfTableForInstructionalOffering
argument_list|(
name|user
argument_list|,
name|io
argument_list|,
name|displayIo
argument_list|,
name|displayConfig
argument_list|,
name|displayClass
argument_list|,
name|displayCourse
argument_list|,
literal|true
argument_list|,
name|includeIndividual
argument_list|,
name|includeStuGroup
argument_list|,
name|includeAcadArea
argument_list|,
name|includePos
argument_list|,
name|includeCourse
argument_list|)
condition|)
block|{
name|result
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|reset
argument_list|()
expr_stmt|;
name|result
operator|=
literal|true
expr_stmt|;
block|}
comment|// Close pdf document
name|pdfDoc
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Set pdf name file as attribute
name|request
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|REQUEST_OPEN_URL
argument_list|,
literal|"temp/"
operator|+
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
block|}
block|}
block|}
comment|/**      * Build reservations table for an instructional offering      * Includes all config and class reservations as well      * @param user      * @param io      * @param displayIo flag indicating whether IO reservations are to be displayed      * @param displayConfig flag indicating whether Config reservations are to be displayed      * @param displayClass flag indicating whether Class reservations are to be displayed      * @param displayCourse flag indicating whether Course Offering reservations are to be displayed      * @param displayIoHeader flag indicating whether Instructional Offering label is displayed      * @param includeIndividual include individual reservations      * @param includeStuGroup include student group reservations      * @param includeAcadArea include academic area reservations      * @param includePos include pos reservations      * @param includeCourse include course reservations      * @return      */
specifier|private
name|boolean
name|pdfTableForInstructionalOffering
parameter_list|(
name|User
name|user
parameter_list|,
name|InstructionalOffering
name|io
parameter_list|,
name|boolean
name|displayIo
parameter_list|,
name|boolean
name|displayConfig
parameter_list|,
name|boolean
name|displayClass
parameter_list|,
name|boolean
name|displayCourse
parameter_list|,
name|boolean
name|displayIoHeader
parameter_list|,
name|boolean
name|includeIndividual
parameter_list|,
name|boolean
name|includeStuGroup
parameter_list|,
name|boolean
name|includeAcadArea
parameter_list|,
name|boolean
name|includePos
parameter_list|,
name|boolean
name|includeCourse
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|ioIndent
init|=
literal|0
decl_stmt|;
name|int
name|crsIndent
init|=
literal|15
decl_stmt|;
name|int
name|cfgIndent
init|=
literal|30
decl_stmt|;
name|int
name|clsIndent
init|=
literal|45
decl_stmt|;
name|reset
argument_list|()
expr_stmt|;
name|boolean
name|ioHeader
init|=
literal|false
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|Collection
name|ioResvs
init|=
name|io
operator|.
name|getReservations
argument_list|(
name|includeIndividual
argument_list|,
name|includeStuGroup
argument_list|,
name|includeAcadArea
argument_list|,
name|includePos
argument_list|,
name|includeCourse
argument_list|)
decl_stmt|;
if|if
condition|(
name|ioResvs
operator|!=
literal|null
operator|&&
name|ioResvs
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|displayIoHeader
condition|)
block|{
name|pdfDoc
operator|.
name|add
argument_list|(
name|getHeader
argument_list|(
name|io
operator|.
name|getCourseNameWithTitle
argument_list|()
argument_list|,
name|io
operator|.
name|getLimit
argument_list|()
argument_list|,
name|ioIndent
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Generate pdf table
name|pdfTableForReservations
argument_list|(
name|ioResvs
argument_list|,
name|crsIndent
argument_list|)
expr_stmt|;
comment|// Create Total row
comment|//pdfBuildTotals();
name|ioHeader
operator|=
literal|true
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
block|}
comment|//TODO Reservations functionality to be removed later
if|if
condition|(
name|displayCourse
condition|)
block|{
comment|// Loop through Course Offering
name|Vector
name|courseOfferings
init|=
operator|new
name|Vector
argument_list|(
name|io
operator|.
name|getCourseOfferings
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|courseOfferings
argument_list|,
operator|new
name|CourseOfferingComparator
argument_list|(
name|CourseOfferingComparator
operator|.
name|COMPARE_BY_SUBJ_CRS
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|iterCourses
init|=
name|courseOfferings
operator|.
name|iterator
argument_list|()
init|;
name|iterCourses
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|reset
argument_list|()
expr_stmt|;
name|CourseOffering
name|co
init|=
operator|(
name|CourseOffering
operator|)
name|iterCourses
operator|.
name|next
argument_list|()
decl_stmt|;
name|Collection
name|coResvs
init|=
name|co
operator|.
name|effectiveReservations
argument_list|(
name|includeAcadArea
argument_list|)
decl_stmt|;
if|if
condition|(
name|coResvs
operator|!=
literal|null
operator|&&
name|coResvs
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|ioHeader
condition|)
block|{
if|if
condition|(
name|displayIoHeader
condition|)
name|pdfDoc
operator|.
name|add
argument_list|(
name|getHeader
argument_list|(
name|io
operator|.
name|getCourseNameWithTitle
argument_list|()
argument_list|,
name|io
operator|.
name|getLimit
argument_list|()
argument_list|,
name|ioIndent
argument_list|)
argument_list|)
expr_stmt|;
name|ioHeader
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|io
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|Integer
name|courseResvLimit
init|=
literal|null
decl_stmt|;
name|Collection
name|ioResvs2
init|=
name|io
operator|.
name|getReservations
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|ioResvs2
operator|!=
literal|null
operator|&&
name|ioResvs2
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Iterator
name|it1
init|=
name|ioResvs2
operator|.
name|iterator
argument_list|()
init|;
name|it1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|o
init|=
name|it1
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|CourseOfferingReservation
condition|)
block|{
name|CourseOfferingReservation
name|cor
init|=
operator|(
name|CourseOfferingReservation
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|cor
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|equals
argument_list|(
name|co
argument_list|)
condition|)
block|{
name|courseResvLimit
operator|=
name|cor
operator|.
name|getReserved
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
name|pdfDoc
operator|.
name|add
argument_list|(
name|getHeader
argument_list|(
name|co
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|courseResvLimit
argument_list|,
name|crsIndent
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|pdfTableForReservations
argument_list|(
name|coResvs
argument_list|,
name|crsIndent
argument_list|)
expr_stmt|;
comment|// Create Total row
comment|//pdfBuildTotals();
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
comment|// End Bypass
comment|// Check if filter set for displaying config and class reservations
if|if
condition|(
name|displayConfig
operator|||
name|displayClass
condition|)
block|{
name|reset
argument_list|()
expr_stmt|;
name|boolean
name|cfgHeader
init|=
literal|false
decl_stmt|;
name|Set
name|configs
init|=
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iterCfg
init|=
name|configs
operator|.
name|iterator
argument_list|()
init|;
name|iterCfg
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|config
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|iterCfg
operator|.
name|next
argument_list|()
decl_stmt|;
name|cfgHeader
operator|=
literal|false
expr_stmt|;
name|Collection
name|cfgResvs
init|=
name|config
operator|.
name|getReservations
argument_list|(
name|includeIndividual
argument_list|,
name|includeStuGroup
argument_list|,
name|includeAcadArea
argument_list|,
name|includePos
argument_list|,
name|includeCourse
argument_list|)
decl_stmt|;
if|if
condition|(
name|displayConfig
operator|&&
name|cfgResvs
operator|!=
literal|null
operator|&&
name|cfgResvs
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|ioHeader
condition|)
block|{
if|if
condition|(
name|displayIoHeader
condition|)
name|pdfDoc
operator|.
name|add
argument_list|(
name|getHeader
argument_list|(
name|io
operator|.
name|getCourseNameWithTitle
argument_list|()
argument_list|,
name|io
operator|.
name|getLimit
argument_list|()
argument_list|,
name|ioIndent
argument_list|)
argument_list|)
expr_stmt|;
name|ioHeader
operator|=
literal|true
expr_stmt|;
block|}
name|pdfDoc
operator|.
name|add
argument_list|(
name|getHeader
argument_list|(
literal|"Configuration "
operator|+
name|config
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|cfgIndent
argument_list|)
argument_list|)
expr_stmt|;
name|pdfTableForReservations
argument_list|(
name|cfgResvs
argument_list|,
name|cfgIndent
argument_list|)
expr_stmt|;
comment|// Create Total row
comment|//pdfBuildTotals();
name|cfgHeader
operator|=
literal|true
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
block|}
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|displayClass
condition|)
continue|continue;
name|Vector
name|subparts
init|=
operator|new
name|Vector
argument_list|(
name|config
operator|.
name|getSchedulingSubparts
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|subparts
argument_list|,
operator|new
name|SchedulingSubpartComparator
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|iterSubpart
init|=
name|subparts
operator|.
name|iterator
argument_list|()
init|;
name|iterSubpart
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|subpart
init|=
operator|(
name|SchedulingSubpart
operator|)
name|iterSubpart
operator|.
name|next
argument_list|()
decl_stmt|;
name|Vector
name|classes
init|=
operator|new
name|Vector
argument_list|(
name|subpart
operator|.
name|getClasses
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|classes
argument_list|,
operator|new
name|ClassComparator
argument_list|(
name|ClassComparator
operator|.
name|COMPARE_BY_ITYPE
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|iterClasses
init|=
name|classes
operator|.
name|iterator
argument_list|()
init|;
name|iterClasses
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|cls
init|=
operator|(
name|Class_
operator|)
name|iterClasses
operator|.
name|next
argument_list|()
decl_stmt|;
name|Collection
name|clsResvs
init|=
name|cls
operator|.
name|getReservations
argument_list|(
name|includeIndividual
argument_list|,
name|includeStuGroup
argument_list|,
name|includeAcadArea
argument_list|,
name|includePos
argument_list|,
name|includeCourse
argument_list|)
decl_stmt|;
if|if
condition|(
name|clsResvs
operator|!=
literal|null
operator|&&
name|clsResvs
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|ioHeader
condition|)
block|{
if|if
condition|(
name|displayIoHeader
condition|)
name|pdfDoc
operator|.
name|add
argument_list|(
name|getHeader
argument_list|(
name|io
operator|.
name|getCourseNameWithTitle
argument_list|()
argument_list|,
name|io
operator|.
name|getLimit
argument_list|()
argument_list|,
name|ioIndent
argument_list|)
argument_list|)
expr_stmt|;
name|ioHeader
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|cfgHeader
operator|&&
name|configs
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|pdfDoc
operator|.
name|add
argument_list|(
name|getHeader
argument_list|(
literal|"Configuration "
operator|+
name|config
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|Integer
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|cfgIndent
argument_list|)
argument_list|)
expr_stmt|;
name|cfgHeader
operator|=
literal|true
expr_stmt|;
block|}
name|pdfDoc
operator|.
name|add
argument_list|(
name|getHeader
argument_list|(
name|cls
operator|.
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
operator|+
literal|" "
operator|+
name|cls
operator|.
name|getSectionNumberString
argument_list|()
argument_list|,
operator|new
name|Integer
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|clsIndent
operator|+
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|pdfTableForReservations
argument_list|(
name|clsResvs
argument_list|,
name|clsIndent
argument_list|)
expr_stmt|;
comment|// Create Total row
comment|//pdfBuildTotals();
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|found
condition|)
block|{
name|Graphic
name|g
init|=
operator|new
name|Graphic
argument_list|()
decl_stmt|;
name|g
operator|.
name|setHorizontalLine
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|,
operator|new
name|Color
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|,
literal|200
argument_list|)
argument_list|)
expr_stmt|;
name|Paragraph
name|p1
init|=
operator|new
name|Paragraph
argument_list|()
decl_stmt|;
name|p1
operator|.
name|setIndentationLeft
argument_list|(
operator|-
literal|20
argument_list|)
expr_stmt|;
name|p1
operator|.
name|add
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|p1
operator|.
name|add
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|p1
operator|.
name|add
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|pdfDoc
operator|.
name|add
argument_list|(
name|p1
argument_list|)
expr_stmt|;
block|}
return|return
name|found
return|;
block|}
comment|/**      * Generate pdf table for reservations      * @param reservations      * @param margin margin to indent tables      */
specifier|public
name|void
name|pdfTableForReservations
parameter_list|(
name|Collection
name|reservations
parameter_list|,
name|int
name|margin
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|reservations
operator|==
literal|null
operator|||
name|reservations
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return;
comment|// Build sub tables
for|for
control|(
name|Iterator
name|i
init|=
name|reservations
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Reservation
name|resv
init|=
operator|(
name|Reservation
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|resv
operator|instanceof
name|IndividualReservation
condition|)
block|{
name|pdfBuildIndividualResvRow
argument_list|(
operator|(
name|IndividualReservation
operator|)
name|resv
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resv
operator|instanceof
name|StudentGroupReservation
condition|)
block|{
name|pdfBuildStuGroupResvRow
argument_list|(
operator|(
name|StudentGroupReservation
operator|)
name|resv
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resv
operator|instanceof
name|AcadAreaReservation
condition|)
block|{
name|pdfBuildAcadAreaResvRow
argument_list|(
operator|(
name|AcadAreaReservation
operator|)
name|resv
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resv
operator|instanceof
name|PosReservation
condition|)
block|{
name|pdfBuildPosResvRow
argument_list|(
operator|(
name|PosReservation
operator|)
name|resv
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resv
operator|instanceof
name|CourseOfferingReservation
condition|)
block|{
name|pdfBuildCourseOffrResvRow
argument_list|(
operator|(
name|CourseOfferingReservation
operator|)
name|resv
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Create Total row
name|pdfBuildTotals
argument_list|()
expr_stmt|;
name|Paragraph
name|p
init|=
literal|null
decl_stmt|;
comment|// Add each reservation table
if|if
condition|(
name|individualResvTbl
operator|!=
literal|null
condition|)
block|{
name|p
operator|=
operator|new
name|Paragraph
argument_list|()
expr_stmt|;
name|p
operator|.
name|setIndentationLeft
argument_list|(
name|margin
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
operator|(
operator|(
name|PdfWebTable
operator|)
name|individualResvTbl
operator|)
operator|.
name|printPdfTable
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|pdfDoc
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|courseOffrResvTbl
operator|!=
literal|null
condition|)
block|{
name|p
operator|=
operator|new
name|Paragraph
argument_list|()
expr_stmt|;
name|p
operator|.
name|setIndentationLeft
argument_list|(
name|margin
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
operator|(
operator|(
name|PdfWebTable
operator|)
name|courseOffrResvTbl
operator|)
operator|.
name|printPdfTable
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|pdfDoc
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|acadAreaResvTbl
operator|!=
literal|null
condition|)
block|{
name|p
operator|=
operator|new
name|Paragraph
argument_list|()
expr_stmt|;
name|p
operator|.
name|setIndentationLeft
argument_list|(
name|margin
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
operator|(
operator|(
name|PdfWebTable
operator|)
name|acadAreaResvTbl
operator|)
operator|.
name|printPdfTable
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|pdfDoc
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|posResvTbl
operator|!=
literal|null
condition|)
block|{
name|p
operator|=
operator|new
name|Paragraph
argument_list|()
expr_stmt|;
name|p
operator|.
name|setIndentationLeft
argument_list|(
name|margin
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
operator|(
operator|(
name|PdfWebTable
operator|)
name|posResvTbl
operator|)
operator|.
name|printPdfTable
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|pdfDoc
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stuGroupResvTbl
operator|!=
literal|null
condition|)
block|{
name|p
operator|=
operator|new
name|Paragraph
argument_list|()
expr_stmt|;
name|p
operator|.
name|setIndentationLeft
argument_list|(
name|margin
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
operator|(
operator|(
name|PdfWebTable
operator|)
name|stuGroupResvTbl
operator|)
operator|.
name|printPdfTable
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|pdfDoc
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|reset
argument_list|()
expr_stmt|;
return|return;
block|}
comment|/**      * Add to Individual Reservation Table      * @param resv      */
specifier|private
name|void
name|pdfBuildIndividualResvRow
parameter_list|(
name|IndividualReservation
name|resv
parameter_list|)
block|{
if|if
condition|(
name|individualResvTbl
operator|==
literal|null
condition|)
block|{
name|irTotal
operator|=
literal|0
expr_stmt|;
name|individualResvTbl
operator|=
operator|new
name|PdfWebTable
argument_list|(
literal|5
argument_list|,
literal|""
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Individual"
block|,
name|nowrap
argument_list|(
name|LBL_TYPE
argument_list|)
block|,
name|nowrap
argument_list|(
name|LBL_PRIORITY
argument_list|)
block|,
name|nowrap
argument_list|(
name|LBL_EXPDATE
argument_list|)
block|,
name|nowrap
argument_list|(
name|LBL_OVERLIMIT
argument_list|)
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"center"
block|,
literal|"center"
block|,
literal|"center"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
expr_stmt|;
block|}
name|String
name|overLimit
init|=
name|resv
operator|.
name|isOverLimit
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"Yes"
else|:
literal|" "
decl_stmt|;
name|individualResvTbl
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|resv
operator|.
name|getExternalUniqueId
argument_list|()
block|,
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|resv
operator|.
name|getReservationType
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
block|,
name|resv
operator|.
name|getPriority
argument_list|()
operator|.
name|toString
argument_list|()
block|,
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd/yyyy"
argument_list|)
operator|.
name|format
argument_list|(
name|resv
operator|.
name|getExpirationDate
argument_list|()
argument_list|)
block|,
name|overLimit
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|resv
operator|.
name|getExternalUniqueId
argument_list|()
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
argument_list|)
expr_stmt|;
operator|++
name|irTotal
expr_stmt|;
block|}
comment|/**      * Add to Student Group Reservation Table      * @param resv      */
specifier|private
name|void
name|pdfBuildStuGroupResvRow
parameter_list|(
name|StudentGroupReservation
name|resv
parameter_list|)
block|{
if|if
condition|(
name|stuGroupResvTbl
operator|==
literal|null
condition|)
block|{
name|sgrTotals
operator|=
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
expr_stmt|;
name|stuGroupResvTbl
operator|=
operator|new
name|PdfWebTable
argument_list|(
literal|6
argument_list|,
literal|""
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Student Group"
block|,
name|nowrap
argument_list|(
name|LBL_TYPE
argument_list|)
block|,
name|nowrap
argument_list|(
name|LBL_PRIORITY
argument_list|)
block|,
name|nowrap
argument_list|(
name|LBL_RESERVED
argument_list|)
block|,
name|nowrap
argument_list|(
name|LBL_PROJECTED
argument_list|)
block|,
name|nowrap
argument_list|(
name|LBL_LAST_TERM
argument_list|)
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"center"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
expr_stmt|;
block|}
name|stuGroupResvTbl
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|resv
operator|.
name|getStudentGroup
argument_list|()
operator|.
name|getGroupName
argument_list|()
block|,
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|resv
operator|.
name|getReservationType
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
block|,
name|resv
operator|.
name|getPriority
argument_list|()
operator|.
name|toString
argument_list|()
block|,
name|resv
operator|.
name|getReserved
argument_list|()
operator|.
name|toString
argument_list|()
block|,
name|resv
operator|.
name|getProjectedEnrollment
argument_list|()
operator|!=
literal|null
condition|?
name|resv
operator|.
name|getProjectedEnrollment
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|" "
block|,
name|resv
operator|.
name|getPriorEnrollment
argument_list|()
operator|!=
literal|null
condition|?
name|resv
operator|.
name|getPriorEnrollment
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|" "
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|resv
operator|.
name|getStudentGroup
argument_list|()
operator|.
name|getGroupName
argument_list|()
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
argument_list|)
expr_stmt|;
name|sgrTotals
index|[
literal|0
index|]
operator|+=
name|resv
operator|.
name|getReserved
argument_list|()
operator|.
name|intValue
argument_list|()
expr_stmt|;
name|sgrTotals
index|[
literal|1
index|]
operator|+=
name|resv
operator|.
name|getProjectedEnrollment
argument_list|()
operator|!=
literal|null
condition|?
name|resv
operator|.
name|getProjectedEnrollment
argument_list|()
operator|.
name|intValue
argument_list|()
else|:
literal|0
expr_stmt|;
name|sgrTotals
index|[
literal|2
index|]
operator|+=
name|resv
operator|.
name|getPriorEnrollment
argument_list|()
operator|!=
literal|null
condition|?
name|resv
operator|.
name|getPriorEnrollment
argument_list|()
operator|.
name|intValue
argument_list|()
else|:
literal|0
expr_stmt|;
block|}
comment|/**      * Add to Academic Area Reservation Table      * @param resv      */
specifier|private
name|void
name|pdfBuildAcadAreaResvRow
parameter_list|(
name|AcadAreaReservation
name|resv
parameter_list|)
block|{
if|if
condition|(
name|acadAreaResvTbl
operator|==
literal|null
condition|)
block|{
name|aarTotals
operator|=
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
expr_stmt|;
name|acadAreaResvTbl
operator|=
operator|new
name|PdfWebTable
argument_list|(
literal|8
argument_list|,
literal|""
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Academic Area"
block|,
literal|" "
block|,
name|nowrap
argument_list|(
name|LBL_TYPE
argument_list|)
block|,
literal|" "
block|,
name|nowrap
argument_list|(
name|LBL_RESERVED
argument_list|)
block|,
name|nowrap
argument_list|(
name|LBL_REQUESTED
argument_list|)
block|,
name|nowrap
argument_list|(
name|LBL_PROJECTED
argument_list|)
block|,
name|nowrap
argument_list|(
name|LBL_LAST_TERM
argument_list|)
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"center"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
expr_stmt|;
block|}
name|String
name|acadArea
init|=
operator|(
operator|(
name|AcadAreaReservation
operator|)
name|resv
operator|)
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getShortTitle
argument_list|()
decl_stmt|;
name|String
name|acadClassification
init|=
name|resv
operator|.
name|getAcademicClassification
argument_list|()
operator|!=
literal|null
condition|?
name|resv
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getName
argument_list|()
else|:
literal|" "
decl_stmt|;
name|acadAreaResvTbl
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|acadArea
block|,
literal|" "
block|,
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|resv
operator|.
name|getReservationType
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
block|,
literal|" "
block|,
name|getResvString
argument_list|(
name|resv
operator|.
name|getRequested
argument_list|()
argument_list|,
name|resv
operator|.
name|getReserved
argument_list|()
argument_list|)
block|,
name|resv
operator|.
name|getRequested
argument_list|()
operator|!=
literal|null
condition|?
name|resv
operator|.
name|getRequested
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|"-"
block|,
name|resv
operator|.
name|getProjectedEnrollment
argument_list|()
operator|!=
literal|null
condition|?
name|resv
operator|.
name|getProjectedEnrollment
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|"-"
block|,
name|resv
operator|.
name|getPriorEnrollment
argument_list|()
operator|!=
literal|null
condition|?
name|resv
operator|.
name|getPriorEnrollment
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|"-"
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|acadArea
block|,
name|acadClassification
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
argument_list|)
expr_stmt|;
name|aarTotals
index|[
literal|0
index|]
operator|+=
name|resv
operator|.
name|getReserved
argument_list|()
operator|.
name|intValue
argument_list|()
expr_stmt|;
name|aarTotals
index|[
literal|1
index|]
operator|+=
name|resv
operator|.
name|getProjectedEnrollment
argument_list|()
operator|!=
literal|null
condition|?
name|resv
operator|.
name|getProjectedEnrollment
argument_list|()
operator|.
name|intValue
argument_list|()
else|:
literal|0
expr_stmt|;
name|aarTotals
index|[
literal|2
index|]
operator|+=
name|resv
operator|.
name|getPriorEnrollment
argument_list|()
operator|!=
literal|null
condition|?
name|resv
operator|.
name|getPriorEnrollment
argument_list|()
operator|.
name|intValue
argument_list|()
else|:
literal|0
expr_stmt|;
name|aarTotals
index|[
literal|3
index|]
operator|+=
name|resv
operator|.
name|getRequested
argument_list|()
operator|!=
literal|null
condition|?
name|resv
operator|.
name|getRequested
argument_list|()
operator|.
name|intValue
argument_list|()
else|:
literal|0
expr_stmt|;
block|}
comment|/**      * Add to POS Reservation Table      * @param resv      */
specifier|private
name|void
name|pdfBuildPosResvRow
parameter_list|(
name|PosReservation
name|resv
parameter_list|)
block|{
if|if
condition|(
name|posResvTbl
operator|==
literal|null
condition|)
block|{
name|prTotals
operator|=
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
expr_stmt|;
name|posResvTbl
operator|=
operator|new
name|PdfWebTable
argument_list|(
literal|7
argument_list|,
literal|""
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"POS Major"
block|,
name|LBL_CLASSIF
block|,
name|nowrap
argument_list|(
name|LBL_TYPE
argument_list|)
block|,
name|nowrap
argument_list|(
name|LBL_PRIORITY
argument_list|)
block|,
name|nowrap
argument_list|(
name|LBL_RESERVED
argument_list|)
block|,
name|nowrap
argument_list|(
name|LBL_PROJECTED
argument_list|)
block|,
name|nowrap
argument_list|(
name|LBL_LAST_TERM
argument_list|)
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"center"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
expr_stmt|;
block|}
name|String
name|posMajor
init|=
operator|(
operator|(
name|PosReservation
operator|)
name|resv
operator|)
operator|.
name|getPosMajor
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|acadClassification
init|=
name|resv
operator|.
name|getAcademicClassification
argument_list|()
operator|!=
literal|null
condition|?
name|resv
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getName
argument_list|()
else|:
literal|" "
decl_stmt|;
name|posResvTbl
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|posMajor
block|,
name|acadClassification
block|,
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|resv
operator|.
name|getReservationType
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
block|,
name|resv
operator|.
name|getPriority
argument_list|()
operator|.
name|toString
argument_list|()
block|,
name|resv
operator|.
name|getReserved
argument_list|()
operator|.
name|toString
argument_list|()
block|,
name|resv
operator|.
name|getProjectedEnrollment
argument_list|()
operator|!=
literal|null
condition|?
name|resv
operator|.
name|getProjectedEnrollment
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|" "
block|,
name|resv
operator|.
name|getPriorEnrollment
argument_list|()
operator|!=
literal|null
condition|?
name|resv
operator|.
name|getPriorEnrollment
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|" "
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|posMajor
block|,
name|acadClassification
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
argument_list|)
expr_stmt|;
name|prTotals
index|[
literal|0
index|]
operator|+=
name|resv
operator|.
name|getReserved
argument_list|()
operator|.
name|intValue
argument_list|()
expr_stmt|;
name|prTotals
index|[
literal|1
index|]
operator|+=
name|resv
operator|.
name|getProjectedEnrollment
argument_list|()
operator|!=
literal|null
condition|?
name|resv
operator|.
name|getProjectedEnrollment
argument_list|()
operator|.
name|intValue
argument_list|()
else|:
literal|0
expr_stmt|;
name|prTotals
index|[
literal|2
index|]
operator|+=
name|resv
operator|.
name|getPriorEnrollment
argument_list|()
operator|!=
literal|null
condition|?
name|resv
operator|.
name|getPriorEnrollment
argument_list|()
operator|.
name|intValue
argument_list|()
else|:
literal|0
expr_stmt|;
block|}
comment|/**      * Add to Course Offering Reservation Table      * @param resv      */
specifier|private
name|void
name|pdfBuildCourseOffrResvRow
parameter_list|(
name|CourseOfferingReservation
name|resv
parameter_list|)
block|{
name|boolean
name|clsOwner
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|resv
operator|.
name|getOwnerClassId
argument_list|()
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|RESV_OWNER_CLASS
argument_list|)
condition|)
name|clsOwner
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|courseOffrResvTbl
operator|==
literal|null
condition|)
block|{
name|corTotals
operator|=
name|clsOwner
condition|?
literal|null
else|:
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
expr_stmt|;
name|courseOffrResvTbl
operator|=
operator|new
name|PdfWebTable
argument_list|(
literal|7
argument_list|,
literal|""
argument_list|,
name|clsOwner
condition|?
literal|null
else|:
operator|new
name|String
index|[]
block|{
literal|"Course"
block|,
literal|" "
block|,
literal|" "
block|,
name|nowrap
argument_list|(
name|LBL_RESERVED
argument_list|)
block|,
name|nowrap
argument_list|(
name|LBL_REQUESTED
argument_list|)
block|,
name|nowrap
argument_list|(
name|LBL_PROJECTED
argument_list|)
block|,
name|nowrap
argument_list|(
name|LBL_LAST_TERM
argument_list|)
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"center"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|,
literal|"right"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
expr_stmt|;
block|}
name|courseOffrResvTbl
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|resv
operator|.
name|getCourseName
argument_list|()
block|,
literal|" "
block|,
literal|" "
block|,
name|clsOwner
condition|?
literal|" "
else|:
name|getResvString
argument_list|(
name|resv
operator|.
name|getRequested
argument_list|()
argument_list|,
name|resv
operator|.
name|getReserved
argument_list|()
argument_list|)
block|,
name|clsOwner
condition|?
literal|" "
else|:
operator|(
name|resv
operator|.
name|getRequested
argument_list|()
operator|!=
literal|null
condition|?
name|resv
operator|.
name|getRequested
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|"-"
operator|)
block|,
name|clsOwner
condition|?
literal|" "
else|:
operator|(
name|resv
operator|.
name|getProjectedEnrollment
argument_list|()
operator|!=
literal|null
condition|?
name|resv
operator|.
name|getProjectedEnrollment
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|"-"
operator|)
block|,
name|clsOwner
condition|?
literal|" "
else|:
operator|(
name|resv
operator|.
name|getPriorEnrollment
argument_list|()
operator|!=
literal|null
condition|?
name|resv
operator|.
name|getPriorEnrollment
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|"-"
operator|)
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|resv
operator|.
name|getCourseName
argument_list|()
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|corTotals
operator|!=
literal|null
condition|)
block|{
name|corTotals
index|[
literal|0
index|]
operator|+=
name|resv
operator|.
name|getReserved
argument_list|()
operator|.
name|intValue
argument_list|()
expr_stmt|;
name|corTotals
index|[
literal|1
index|]
operator|+=
name|resv
operator|.
name|getProjectedEnrollment
argument_list|()
operator|!=
literal|null
condition|?
name|resv
operator|.
name|getProjectedEnrollment
argument_list|()
operator|.
name|intValue
argument_list|()
else|:
literal|0
expr_stmt|;
name|corTotals
index|[
literal|2
index|]
operator|+=
name|resv
operator|.
name|getPriorEnrollment
argument_list|()
operator|!=
literal|null
condition|?
name|resv
operator|.
name|getPriorEnrollment
argument_list|()
operator|.
name|intValue
argument_list|()
else|:
literal|0
expr_stmt|;
name|corTotals
index|[
literal|3
index|]
operator|+=
name|resv
operator|.
name|getRequested
argument_list|()
operator|!=
literal|null
condition|?
name|resv
operator|.
name|getRequested
argument_list|()
operator|.
name|intValue
argument_list|()
else|:
literal|0
expr_stmt|;
block|}
block|}
comment|/**      * Add total row to the individual reservation tables      */
specifier|private
name|void
name|pdfBuildTotals
parameter_list|()
block|{
if|if
condition|(
name|individualResvTbl
operator|!=
literal|null
operator|&&
name|irTotal
operator|>
literal|0
condition|)
block|{
name|individualResvTbl
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|bold
argument_list|(
name|underline
argument_list|(
literal|"Total:"
argument_list|)
argument_list|)
operator|+
name|irTotal
block|,
literal|" "
block|,
literal|" "
block|,
literal|" "
block|,
literal|" "
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|acadAreaResvTbl
operator|!=
literal|null
operator|&&
name|aarTotals
operator|!=
literal|null
condition|)
block|{
name|acadAreaResvTbl
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|" "
block|,
literal|" "
block|,
literal|" "
block|,
literal|" "
block|,
literal|"@@BORDER_TOP 666666 "
operator|+
name|bold
argument_list|(
name|getResvString
argument_list|(
operator|new
name|Integer
argument_list|(
name|aarTotals
index|[
literal|3
index|]
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
name|aarTotals
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
block|,
literal|"@@BORDER_TOP 666666 "
operator|+
name|bold
argument_list|(
literal|""
operator|+
name|aarTotals
index|[
literal|3
index|]
argument_list|)
block|,
literal|"@@BORDER_TOP 666666 "
operator|+
name|bold
argument_list|(
literal|""
operator|+
name|aarTotals
index|[
literal|1
index|]
argument_list|)
block|,
literal|"@@BORDER_TOP 666666 "
operator|+
name|bold
argument_list|(
literal|""
operator|+
name|aarTotals
index|[
literal|2
index|]
argument_list|)
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|courseOffrResvTbl
operator|!=
literal|null
operator|&&
name|corTotals
operator|!=
literal|null
condition|)
block|{
name|courseOffrResvTbl
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|" "
block|,
literal|" "
block|,
literal|" "
block|,
literal|"@@BORDER_TOP 666666 "
operator|+
name|bold
argument_list|(
name|getResvString
argument_list|(
operator|new
name|Integer
argument_list|(
name|corTotals
index|[
literal|3
index|]
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
name|corTotals
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
block|,
literal|"@@BORDER_TOP 666666 "
operator|+
name|bold
argument_list|(
literal|""
operator|+
name|corTotals
index|[
literal|3
index|]
argument_list|)
block|,
literal|"@@BORDER_TOP 666666 "
operator|+
name|bold
argument_list|(
literal|""
operator|+
name|corTotals
index|[
literal|1
index|]
argument_list|)
block|,
literal|"@@BORDER_TOP 666666 "
operator|+
name|bold
argument_list|(
literal|""
operator|+
name|corTotals
index|[
literal|2
index|]
argument_list|)
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|posResvTbl
operator|!=
literal|null
operator|&&
name|prTotals
operator|!=
literal|null
condition|)
block|{
name|posResvTbl
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|" "
block|,
literal|" "
block|,
literal|" "
block|,
literal|" "
block|,
literal|"@@BORDER_TOP 666666 "
operator|+
name|bold
argument_list|(
literal|""
operator|+
name|prTotals
index|[
literal|0
index|]
argument_list|)
block|,
literal|"@@BORDER_TOP 666666 "
operator|+
name|bold
argument_list|(
literal|""
operator|+
name|prTotals
index|[
literal|1
index|]
argument_list|)
block|,
literal|"@@BORDER_TOP 666666 "
operator|+
name|bold
argument_list|(
literal|""
operator|+
name|prTotals
index|[
literal|2
index|]
argument_list|)
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stuGroupResvTbl
operator|!=
literal|null
operator|&&
name|sgrTotals
operator|!=
literal|null
condition|)
block|{
name|stuGroupResvTbl
operator|.
name|addLine
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|" "
block|,
literal|" "
block|,
literal|" "
block|,
literal|" "
block|,
literal|"@@BORDER_TOP 666666 "
operator|+
name|bold
argument_list|(
literal|""
operator|+
name|sgrTotals
index|[
literal|0
index|]
argument_list|)
block|,
literal|"@@BORDER_TOP 666666 "
operator|+
name|bold
argument_list|(
literal|""
operator|+
name|sgrTotals
index|[
literal|1
index|]
argument_list|)
block|,
literal|"@@BORDER_TOP 666666 "
operator|+
name|bold
argument_list|(
literal|""
operator|+
name|sgrTotals
index|[
literal|2
index|]
argument_list|)
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Color format reservation total      * @param oRequest      * @param oReserved      * @return      */
specifier|private
name|String
name|getResvString
parameter_list|(
name|Integer
name|oRequest
parameter_list|,
name|Integer
name|oReserved
parameter_list|)
block|{
name|String
name|ret
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|oRequest
operator|!=
literal|null
condition|)
block|{
name|int
name|res
init|=
name|oReserved
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|int
name|req
init|=
name|oRequest
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|res
operator|<
name|req
condition|)
name|ret
operator|=
name|color
argument_list|(
literal|""
operator|+
name|res
argument_list|,
name|colorDecrease
argument_list|)
expr_stmt|;
if|else              	if
condition|(
name|res
operator|>
name|req
condition|)
name|ret
operator|=
name|color
argument_list|(
literal|""
operator|+
name|res
argument_list|,
name|colorIncrease
argument_list|)
expr_stmt|;
else|else
name|ret
operator|=
literal|""
operator|+
name|res
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|color
argument_list|(
name|oReserved
operator|.
name|toString
argument_list|()
argument_list|,
name|colorIncrease
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**      * Format header with offering/course limit       * @param name header string      * @param limit null if no offering/course limit      * @param indent margin to indent header      * @return      */
specifier|private
name|Paragraph
name|getHeader
parameter_list|(
name|String
name|name
parameter_list|,
name|Integer
name|limit
parameter_list|,
name|int
name|indent
parameter_list|)
block|{
name|String
name|limitStr
init|=
literal|" "
decl_stmt|;
if|if
condition|(
name|limit
operator|==
literal|null
condition|)
block|{
name|limitStr
operator|=
literal|" ( limit not available )"
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|limit
operator|.
name|intValue
argument_list|()
operator|>=
literal|0
condition|)
name|limitStr
operator|=
literal|" ( "
operator|+
name|limit
operator|.
name|toString
argument_list|()
operator|+
literal|" )"
expr_stmt|;
block|}
name|Font
name|black
init|=
name|FontFactory
operator|.
name|getFont
argument_list|(
name|FontFactory
operator|.
name|HELVETICA
argument_list|,
name|Font
operator|.
name|DEFAULTSIZE
argument_list|,
name|Font
operator|.
name|BOLD
argument_list|,
operator|new
name|Color
argument_list|(
literal|0x00
argument_list|,
literal|0x00
argument_list|,
literal|0x00
argument_list|)
argument_list|)
decl_stmt|;
name|Chunk
name|c1
init|=
operator|new
name|Chunk
argument_list|(
name|name
argument_list|,
name|black
argument_list|)
decl_stmt|;
name|Font
name|navyBlue
init|=
name|FontFactory
operator|.
name|getFont
argument_list|(
name|FontFactory
operator|.
name|HELVETICA
argument_list|,
name|Font
operator|.
name|DEFAULTSIZE
argument_list|,
name|Font
operator|.
name|BOLD
argument_list|,
operator|new
name|Color
argument_list|(
literal|0x00
argument_list|,
literal|0x00
argument_list|,
literal|0x80
argument_list|)
argument_list|)
decl_stmt|;
name|Chunk
name|c2
init|=
operator|new
name|Chunk
argument_list|(
name|limitStr
argument_list|,
name|navyBlue
argument_list|)
decl_stmt|;
name|Paragraph
name|p
init|=
operator|new
name|Paragraph
argument_list|(
name|c1
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c2
argument_list|)
expr_stmt|;
name|p
operator|.
name|setIndentationLeft
argument_list|(
name|indent
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
comment|/**      * Add bold tag for PdfWebTable to parse      * @param str      * @return      */
specifier|private
name|String
name|bold
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
literal|"@@BOLD "
operator|+
name|str
operator|+
literal|" @@END_BOLD "
return|;
block|}
comment|/**      * Add underline tag for PdfWebTable to parse      * @param str      * @return      */
specifier|private
name|String
name|underline
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
literal|"@@UNDERLINE "
operator|+
name|str
operator|+
literal|" @@END_UNDERLINE "
return|;
block|}
comment|/**      * Add color tag for PdfWebTable to parse      * @param str      * @return      */
specifier|private
name|String
name|color
parameter_list|(
name|String
name|str
parameter_list|,
name|String
name|color
parameter_list|)
block|{
return|return
literal|"@@COLOR "
operator|+
name|color
operator|+
literal|" "
operator|+
name|str
operator|+
literal|" @@END_COLOR "
return|;
block|}
comment|/**      * Add nowrap tag for PdfWebTable to parse      * @param str      * @return      */
specifier|private
name|String
name|nowrap
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
literal|"@@NO_WRAP "
operator|+
name|str
return|;
block|}
comment|/**      * reset variables      */
specifier|protected
name|void
name|reset
parameter_list|()
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

