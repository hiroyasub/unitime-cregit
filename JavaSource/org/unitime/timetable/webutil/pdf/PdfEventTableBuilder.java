begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|pdf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|jsp
operator|.
name|JspWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|htmlgen
operator|.
name|TableStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|EventListForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|MeetingListForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Meeting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RelatedCourseInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Event
operator|.
name|MultiMeeting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ClassEventDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseEventDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExamEventDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|PdfEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|PdfFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|WebEventTableBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Chunk
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|PageSize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Paragraph
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|pdf
operator|.
name|PdfPCell
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|pdf
operator|.
name|PdfPTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|pdf
operator|.
name|PdfWriter
import|;
end_import

begin_class
specifier|public
class|class
name|PdfEventTableBuilder
extends|extends
name|WebEventTableBuilder
block|{
specifier|protected
name|PdfWriter
name|iWriter
init|=
literal|null
decl_stmt|;
specifier|protected
name|Document
name|iDocument
init|=
literal|null
decl_stmt|;
specifier|protected
name|PdfPTable
name|iPdfTable
init|=
literal|null
decl_stmt|;
specifier|protected
name|Color
name|iBgColor
init|=
name|Color
operator|.
name|WHITE
decl_stmt|;
specifier|protected
name|boolean
name|iUnderline
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|iOverline
init|=
literal|false
decl_stmt|;
specifier|protected
name|Color
name|iTextColor
init|=
name|Color
operator|.
name|BLACK
decl_stmt|;
specifier|protected
name|boolean
name|iTextItalic
init|=
literal|false
decl_stmt|;
specifier|public
name|PdfEventTableBuilder
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|getMaxResults
parameter_list|()
block|{
return|return
literal|1500
return|;
block|}
specifier|public
name|PdfPCell
name|createCell
parameter_list|()
block|{
name|PdfPCell
name|cell
init|=
operator|new
name|PdfPCell
argument_list|()
decl_stmt|;
name|cell
operator|.
name|setBorderColor
argument_list|(
name|Color
operator|.
name|BLACK
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setPadding
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setBorderWidth
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setVerticalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_TOP
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setHorizontalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_CENTER
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setBackgroundColor
argument_list|(
name|iBgColor
argument_list|)
expr_stmt|;
if|if
condition|(
name|iUnderline
condition|)
name|cell
operator|.
name|setBorderWidthBottom
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|iOverline
condition|)
name|cell
operator|.
name|setBorderWidthTop
argument_list|(
literal|0.5f
argument_list|)
expr_stmt|;
return|return
name|cell
return|;
block|}
specifier|public
name|void
name|addText
parameter_list|(
name|PdfPCell
name|cell
parameter_list|,
name|String
name|text
parameter_list|)
block|{
name|addText
argument_list|(
name|cell
argument_list|,
name|text
argument_list|,
literal|false
argument_list|,
name|iTextItalic
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|,
name|iTextColor
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addText
parameter_list|(
name|PdfPCell
name|cell
parameter_list|,
name|String
name|text
parameter_list|,
name|boolean
name|bold
parameter_list|,
name|int
name|orientation
parameter_list|)
block|{
name|addText
argument_list|(
name|cell
argument_list|,
name|text
argument_list|,
name|bold
argument_list|,
name|iTextItalic
argument_list|,
name|orientation
argument_list|,
name|iTextColor
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addText
parameter_list|(
name|PdfPCell
name|cell
parameter_list|,
name|String
name|text
parameter_list|,
name|int
name|orientation
parameter_list|)
block|{
name|addText
argument_list|(
name|cell
argument_list|,
name|text
argument_list|,
literal|false
argument_list|,
name|iTextItalic
argument_list|,
name|orientation
argument_list|,
name|iTextColor
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addText
parameter_list|(
name|PdfPCell
name|cell
parameter_list|,
name|String
name|text
parameter_list|,
name|boolean
name|bold
parameter_list|,
name|boolean
name|italic
parameter_list|,
name|int
name|orientation
parameter_list|,
name|Color
name|color
parameter_list|,
name|boolean
name|newLine
parameter_list|)
block|{
if|if
condition|(
name|text
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|cell
operator|.
name|getPhrase
argument_list|()
operator|==
literal|null
condition|)
block|{
name|Chunk
name|ch
init|=
operator|new
name|Chunk
argument_list|(
name|text
argument_list|,
name|PdfFont
operator|.
name|getSmallFont
argument_list|(
name|bold
argument_list|,
name|italic
argument_list|,
name|color
argument_list|)
argument_list|)
decl_stmt|;
name|cell
operator|.
name|setPhrase
argument_list|(
operator|new
name|Paragraph
argument_list|(
name|ch
argument_list|)
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setVerticalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_TOP
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setHorizontalAlignment
argument_list|(
name|orientation
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cell
operator|.
name|getPhrase
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Chunk
argument_list|(
operator|(
name|newLine
condition|?
literal|"\n"
else|:
literal|""
operator|)
operator|+
name|text
argument_list|,
name|PdfFont
operator|.
name|getSmallFont
argument_list|(
name|bold
argument_list|,
name|italic
argument_list|,
name|color
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|float
index|[]
name|getWidths
parameter_list|(
name|boolean
name|events
parameter_list|,
name|boolean
name|mainContact
parameter_list|)
block|{
if|if
condition|(
name|events
condition|)
block|{
if|if
condition|(
name|mainContact
condition|)
return|return
operator|new
name|float
index|[]
block|{
literal|200
block|,
literal|90
block|,
literal|80
block|,
literal|100
block|,
literal|100
block|,
literal|120
block|}
return|;
else|else
return|return
operator|new
name|float
index|[]
block|{
literal|200
block|,
literal|90
block|,
literal|80
block|,
literal|100
block|,
literal|100
block|}
return|;
block|}
else|else
block|{
if|if
condition|(
name|mainContact
condition|)
return|return
operator|new
name|float
index|[]
block|{
literal|150
block|,
literal|85
block|,
literal|50
block|,
literal|50
block|,
literal|100
block|,
literal|110
block|,
literal|90
block|,
literal|80
block|,
literal|120
block|,
literal|75
block|}
return|;
return|return
operator|new
name|float
index|[]
block|{
literal|200
block|,
literal|85
block|,
literal|75
block|,
literal|50
block|,
literal|150
block|,
literal|100
block|,
literal|100
block|,
literal|100
block|}
return|;
block|}
block|}
specifier|protected
name|void
name|pdfBuildTableHeader
parameter_list|(
name|boolean
name|events
parameter_list|,
name|boolean
name|mainContact
parameter_list|,
name|int
name|numEventsOrMeetings
parameter_list|)
block|{
if|if
condition|(
name|events
condition|)
block|{
name|PdfPCell
name|c
decl_stmt|;
if|if
condition|(
name|numEventsOrMeetings
operator|>
name|getMaxResults
argument_list|()
condition|)
block|{
name|c
operator|=
name|createCell
argument_list|()
expr_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
literal|"**Warning: More than "
operator|+
name|getMaxResults
argument_list|()
operator|+
literal|" events match your search criteria. Only the first "
operator|+
name|getMaxResults
argument_list|()
operator|+
literal|" events are displayed. Please, redefine the search criteria in your filter."
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|c
operator|.
name|setColspan
argument_list|(
name|mainContact
condition|?
literal|6
else|:
literal|5
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|iBgColor
operator|=
operator|new
name|Color
argument_list|(
literal|224
argument_list|,
literal|224
argument_list|,
literal|224
argument_list|)
expr_stmt|;
comment|//first line
name|c
operator|=
name|createCell
argument_list|()
expr_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
name|LABEL
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|=
name|createCell
argument_list|()
expr_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
name|ENROLLMENT
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|=
name|createCell
argument_list|()
expr_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
name|EVENT_CAPACITY
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|=
name|createCell
argument_list|()
expr_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
name|SPONSORING_ORG
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|=
name|createCell
argument_list|()
expr_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
name|EVENT_TYPE
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|mainContact
condition|)
block|{
name|c
operator|=
name|createCell
argument_list|()
expr_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
name|MAIN_CONTACT
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
comment|//second line
name|iBgColor
operator|=
operator|new
name|Color
argument_list|(
literal|244
argument_list|,
literal|244
argument_list|,
literal|244
argument_list|)
expr_stmt|;
name|iUnderline
operator|=
literal|true
expr_stmt|;
name|c
operator|=
name|createCell
argument_list|()
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|=
name|createCell
argument_list|()
expr_stmt|;
name|c
operator|.
name|setColspan
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
name|MEETING_DATE
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|=
name|createCell
argument_list|()
expr_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
name|MEETING_TIME
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|=
name|createCell
argument_list|()
expr_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
name|MEETING_LOCATION
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|mainContact
condition|)
block|{
name|c
operator|=
name|createCell
argument_list|()
expr_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
name|APPROVED_DATE
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numEventsOrMeetings
operator|<=
name|getMaxResults
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|setHeaderRows
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iPdfTable
operator|.
name|setHeaderRows
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|PdfPCell
name|c
decl_stmt|;
if|if
condition|(
name|numEventsOrMeetings
operator|>
name|getMaxResults
argument_list|()
condition|)
block|{
name|c
operator|=
name|createCell
argument_list|()
expr_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
literal|"**Warning: More than "
operator|+
name|getMaxResults
argument_list|()
operator|+
literal|" meetings match your search criteria. Only the first "
operator|+
name|getMaxResults
argument_list|()
operator|+
literal|" meetings are displayed. Please, redefine the search criteria in your filter."
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|c
operator|.
name|setColspan
argument_list|(
name|mainContact
condition|?
literal|10
else|:
literal|9
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|iBgColor
operator|=
operator|new
name|Color
argument_list|(
literal|224
argument_list|,
literal|224
argument_list|,
literal|224
argument_list|)
expr_stmt|;
comment|//first line
name|iUnderline
operator|=
literal|true
expr_stmt|;
name|c
operator|=
name|createCell
argument_list|()
expr_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
name|LABEL
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|=
name|createCell
argument_list|()
expr_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
name|EVENT_TYPE
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|=
name|createCell
argument_list|()
expr_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
operator|(
name|mainContact
condition|?
literal|"Enrl."
else|:
name|ENROLLMENT
operator|)
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|=
name|createCell
argument_list|()
expr_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
operator|(
name|mainContact
condition|?
literal|"Cap."
else|:
name|EVENT_CAPACITY
operator|)
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|=
name|createCell
argument_list|()
expr_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
name|SPONSORING_ORG
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|=
name|createCell
argument_list|()
expr_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
name|MEETING_DATE
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|=
name|createCell
argument_list|()
expr_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
name|MEETING_TIME
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|=
name|createCell
argument_list|()
expr_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
name|MEETING_LOCATION
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|mainContact
condition|)
block|{
name|c
operator|=
name|createCell
argument_list|()
expr_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
name|MAIN_CONTACT
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|=
name|createCell
argument_list|()
expr_stmt|;
name|addText
argument_list|(
name|c
argument_list|,
name|APPROVED_DATE
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numEventsOrMeetings
operator|<=
name|getMaxResults
argument_list|()
condition|)
block|{
name|iPdfTable
operator|.
name|setHeaderRows
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iPdfTable
operator|.
name|setHeaderRows
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
name|iBgColor
operator|=
name|Color
operator|.
name|WHITE
expr_stmt|;
name|iUnderline
operator|=
literal|false
expr_stmt|;
block|}
specifier|private
name|PdfPCell
name|pdfBuildEventName
parameter_list|(
name|Event
name|e
parameter_list|)
block|{
name|PdfPCell
name|cell
init|=
name|createCell
argument_list|()
decl_stmt|;
name|addText
argument_list|(
name|cell
argument_list|,
name|e
operator|.
name|getEventName
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|e
operator|.
name|getEventName
argument_list|()
argument_list|,
literal|true
argument_list|,
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
return|return
name|cell
return|;
block|}
specifier|private
name|PdfPCell
name|pdfBuildEventCapacity
parameter_list|(
name|Event
name|e
parameter_list|)
block|{
name|PdfPCell
name|cell
init|=
name|createCell
argument_list|()
decl_stmt|;
name|int
name|minCap
init|=
operator|(
name|e
operator|.
name|getMinCapacity
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|e
operator|.
name|getMinCapacity
argument_list|()
operator|)
decl_stmt|;
name|int
name|maxCap
init|=
operator|(
name|e
operator|.
name|getMaxCapacity
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|e
operator|.
name|getMaxCapacity
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|minCap
operator|==
operator|-
literal|1
condition|)
block|{
block|}
else|else
block|{
if|if
condition|(
name|maxCap
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|maxCap
operator|!=
name|minCap
condition|)
block|{
name|addText
argument_list|(
name|cell
argument_list|,
name|minCap
operator|+
literal|"-"
operator|+
name|maxCap
argument_list|,
name|Element
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addText
argument_list|(
name|cell
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|minCap
argument_list|)
argument_list|,
name|Element
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|cell
return|;
block|}
specifier|private
name|PdfPCell
name|pdfBuildEventEnrollment
parameter_list|(
name|Event
name|e
parameter_list|)
block|{
name|PdfPCell
name|cell
init|=
name|createCell
argument_list|()
decl_stmt|;
if|if
condition|(
name|Event
operator|.
name|sEventTypeClass
operator|==
name|e
operator|.
name|getEventType
argument_list|()
condition|)
block|{
name|ClassEvent
name|ce
init|=
operator|new
name|ClassEventDAO
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|e
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ce
operator|.
name|getClazz
argument_list|()
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addText
argument_list|(
name|cell
argument_list|,
name|ce
operator|.
name|getClazz
argument_list|()
operator|.
name|getEnrollment
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|Element
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addText
argument_list|(
name|cell
argument_list|,
literal|"0"
argument_list|,
name|Element
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|Event
operator|.
name|sEventTypeFinalExam
operator|==
name|e
operator|.
name|getEventType
argument_list|()
operator|||
name|Event
operator|.
name|sEventTypeMidtermExam
operator|==
name|e
operator|.
name|getEventType
argument_list|()
condition|)
block|{
name|ExamEvent
name|ee
init|=
operator|new
name|ExamEventDAO
argument_list|()
operator|.
name|get
argument_list|(
name|e
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|addText
argument_list|(
name|cell
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|ee
operator|.
name|getExam
argument_list|()
operator|.
name|countStudents
argument_list|()
argument_list|)
argument_list|,
name|Element
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|Event
operator|.
name|sEventTypeCourse
operator|==
name|e
operator|.
name|getEventType
argument_list|()
condition|)
block|{
name|CourseEvent
name|ce
init|=
operator|new
name|CourseEventDAO
argument_list|()
operator|.
name|get
argument_list|(
name|e
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|enrl
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RelatedCourseInfo
name|rci
range|:
name|ce
operator|.
name|getRelatedCourses
argument_list|()
control|)
name|enrl
operator|+=
name|rci
operator|.
name|countStudents
argument_list|()
expr_stmt|;
name|addText
argument_list|(
name|cell
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|enrl
argument_list|)
argument_list|,
name|Element
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|cell
operator|)
return|;
block|}
specifier|private
name|PdfPCell
name|pdfBuildSponsoringOrg
parameter_list|(
name|Event
name|e
parameter_list|)
block|{
name|PdfPCell
name|cell
init|=
name|createCell
argument_list|()
decl_stmt|;
name|addText
argument_list|(
name|cell
argument_list|,
name|e
operator|.
name|getSponsoringOrganization
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|e
operator|.
name|getSponsoringOrganization
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|cell
return|;
block|}
specifier|private
name|PdfPCell
name|pdfBuildEventTypeAbbv
parameter_list|(
name|Event
name|e
parameter_list|)
block|{
name|PdfPCell
name|cell
init|=
name|createCell
argument_list|()
decl_stmt|;
name|addText
argument_list|(
name|cell
argument_list|,
name|e
operator|.
name|getEventTypeAbbv
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|cell
return|;
block|}
specifier|private
name|PdfPCell
name|pdfBuildMainContactName
parameter_list|(
name|Event
name|e
parameter_list|)
block|{
name|PdfPCell
name|cell
init|=
name|createCell
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getMainContact
argument_list|()
operator|!=
literal|null
condition|)
name|addText
argument_list|(
name|cell
argument_list|,
operator|(
name|e
operator|.
name|getMainContact
argument_list|()
operator|.
name|getLastName
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
operator|(
name|e
operator|.
name|getMainContact
argument_list|()
operator|.
name|getLastName
argument_list|()
operator|+
literal|", "
operator|)
operator|)
operator|+
operator|(
name|e
operator|.
name|getMainContact
argument_list|()
operator|.
name|getFirstName
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|e
operator|.
name|getMainContact
argument_list|()
operator|.
name|getFirstName
argument_list|()
operator|)
argument_list|)
expr_stmt|;
return|return
name|cell
return|;
block|}
specifier|private
name|PdfPCell
name|pdfBuildEmptyMeetingInfo
parameter_list|()
block|{
name|PdfPCell
name|cell
init|=
name|createCell
argument_list|()
decl_stmt|;
return|return
name|cell
return|;
block|}
specifier|private
name|PdfPCell
name|pdfBuildDate
parameter_list|(
name|Meeting
name|m
parameter_list|)
block|{
name|PdfPCell
name|cell
init|=
name|createCell
argument_list|()
decl_stmt|;
name|addText
argument_list|(
name|cell
argument_list|,
name|sDateFormat
operator|.
name|format
argument_list|(
name|m
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|cell
return|;
block|}
specifier|private
name|PdfPCell
name|pdfBuildDate
parameter_list|(
name|MultiMeeting
name|m
parameter_list|)
block|{
name|PdfPCell
name|cell
init|=
name|createCell
argument_list|()
decl_stmt|;
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|c
operator|.
name|setTime
argument_list|(
name|m
operator|.
name|getMeetings
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|y1
init|=
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
decl_stmt|;
name|c
operator|.
name|setTime
argument_list|(
name|m
operator|.
name|getMeetings
argument_list|()
operator|.
name|last
argument_list|()
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|y2
init|=
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
decl_stmt|;
name|addText
argument_list|(
name|cell
argument_list|,
name|m
operator|.
name|getDays
argument_list|()
operator|+
literal|" "
operator|+
operator|(
name|y1
operator|==
name|y2
condition|?
name|sDateFormatM1
else|:
name|sDateFormatM2
operator|)
operator|.
name|format
argument_list|(
name|m
operator|.
name|getMeetings
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
operator|+
literal|" - "
operator|+
name|sDateFormatM2
operator|.
name|format
argument_list|(
name|m
operator|.
name|getMeetings
argument_list|()
operator|.
name|last
argument_list|()
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|cell
return|;
block|}
specifier|private
name|PdfPCell
name|pdfBuildTime
parameter_list|(
name|Meeting
name|m
parameter_list|)
block|{
name|PdfPCell
name|cell
init|=
name|createCell
argument_list|()
decl_stmt|;
name|addText
argument_list|(
name|cell
argument_list|,
name|m
operator|.
name|isAllDay
argument_list|()
condition|?
literal|"All Day"
else|:
name|Constants
operator|.
name|toTime
argument_list|(
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|m
operator|.
name|getStartPeriod
argument_list|()
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|+
operator|(
name|m
operator|.
name|getStartOffset
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|m
operator|.
name|getStartOffset
argument_list|()
operator|)
argument_list|)
operator|+
literal|" - "
operator|+
name|Constants
operator|.
name|toTime
argument_list|(
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|m
operator|.
name|getStopPeriod
argument_list|()
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|+
operator|(
name|m
operator|.
name|getStopOffset
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|m
operator|.
name|getStopOffset
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|cell
return|;
block|}
specifier|private
name|PdfPCell
name|pdfBuildLocation
parameter_list|(
name|Meeting
name|m
parameter_list|)
block|{
name|PdfPCell
name|cell
init|=
name|createCell
argument_list|()
decl_stmt|;
name|addText
argument_list|(
name|cell
argument_list|,
name|m
operator|.
name|getLocation
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|cell
return|;
block|}
specifier|private
name|PdfPCell
name|pdfBuildApproved
parameter_list|(
name|Meeting
name|m
parameter_list|)
block|{
name|PdfPCell
name|cell
init|=
name|createCell
argument_list|()
decl_stmt|;
name|SimpleDateFormat
name|df
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd/yy"
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|addText
argument_list|(
name|cell
argument_list|,
name|m
operator|.
name|getApprovedDate
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|df
operator|.
name|format
argument_list|(
name|m
operator|.
name|getApprovedDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|cell
return|;
block|}
specifier|private
name|PdfPCell
name|pdfBuildApproved
parameter_list|(
name|MultiMeeting
name|mm
parameter_list|)
block|{
name|PdfPCell
name|cell
init|=
name|createCell
argument_list|()
decl_stmt|;
name|SimpleDateFormat
name|df
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd/yy"
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|Date
name|approvalDate
init|=
literal|null
decl_stmt|;
comment|//latest approval date
for|for
control|(
name|Meeting
name|m
range|:
name|mm
operator|.
name|getMeetings
argument_list|()
control|)
if|if
condition|(
name|approvalDate
operator|==
literal|null
operator|||
name|approvalDate
operator|.
name|compareTo
argument_list|(
name|m
operator|.
name|getApprovedDate
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
name|approvalDate
operator|=
name|m
operator|.
name|getApprovedDate
argument_list|()
expr_stmt|;
name|addText
argument_list|(
name|cell
argument_list|,
name|approvalDate
operator|==
literal|null
condition|?
literal|""
else|:
name|df
operator|.
name|format
argument_list|(
name|approvalDate
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|cell
return|;
block|}
specifier|private
name|void
name|pdfAddEventsRowsToTable
parameter_list|(
name|Event
name|e
parameter_list|,
name|boolean
name|mainContact
parameter_list|,
name|TreeSet
argument_list|<
name|MultiMeeting
argument_list|>
name|meetings
parameter_list|)
block|{
name|boolean
name|allPast
init|=
literal|true
decl_stmt|;
for|for
control|(
name|MultiMeeting
name|meeting
range|:
name|meetings
control|)
block|{
if|if
condition|(
operator|!
name|meeting
operator|.
name|isPast
argument_list|()
condition|)
block|{
name|allPast
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|allPast
condition|)
block|{
name|iTextColor
operator|=
name|Color
operator|.
name|GRAY
expr_stmt|;
name|iTextItalic
operator|=
literal|true
expr_stmt|;
block|}
name|iBgColor
operator|=
operator|new
name|Color
argument_list|(
literal|223
argument_list|,
literal|231
argument_list|,
literal|242
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildEventName
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildEventEnrollment
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildEventCapacity
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildSponsoringOrg
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildEventTypeAbbv
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|mainContact
condition|)
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildMainContactName
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|iTextColor
operator|=
name|Color
operator|.
name|BLACK
expr_stmt|;
name|iTextItalic
operator|=
literal|false
expr_stmt|;
name|iBgColor
operator|=
name|Color
operator|.
name|WHITE
expr_stmt|;
block|}
specifier|private
name|void
name|pdfAddMeetingRowsToTable
parameter_list|(
name|MultiMeeting
name|mm
parameter_list|,
name|boolean
name|mainContact
parameter_list|,
name|boolean
name|printOverlaps
parameter_list|)
block|{
name|Meeting
name|m
init|=
name|mm
operator|.
name|getMeetings
argument_list|()
operator|.
name|first
argument_list|()
decl_stmt|;
if|if
condition|(
name|mm
operator|.
name|isPast
argument_list|()
condition|)
block|{
name|iTextColor
operator|=
name|Color
operator|.
name|GRAY
expr_stmt|;
name|iTextItalic
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|m
operator|.
name|isApproved
argument_list|()
condition|)
block|{
comment|//bgColor = "#DDFFDD";
block|}
else|else
block|{
name|iBgColor
operator|=
operator|new
name|Color
argument_list|(
literal|255
argument_list|,
literal|255
argument_list|,
literal|221
argument_list|)
expr_stmt|;
block|}
block|}
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildEmptyMeetingInfo
argument_list|()
argument_list|)
expr_stmt|;
name|PdfPCell
name|cell
init|=
name|mm
operator|.
name|getMeetings
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|?
name|pdfBuildDate
argument_list|(
name|m
argument_list|)
else|:
name|pdfBuildDate
argument_list|(
name|mm
argument_list|)
decl_stmt|;
name|cell
operator|.
name|setColspan
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|cell
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildTime
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildLocation
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|mainContact
condition|)
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|mm
operator|.
name|getMeetings
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|?
name|pdfBuildApproved
argument_list|(
name|m
argument_list|)
else|:
name|pdfBuildApproved
argument_list|(
name|mm
argument_list|)
argument_list|)
expr_stmt|;
name|iTextColor
operator|=
name|Color
operator|.
name|BLACK
expr_stmt|;
name|iTextItalic
operator|=
literal|false
expr_stmt|;
name|iBgColor
operator|=
name|Color
operator|.
name|WHITE
expr_stmt|;
if|if
condition|(
name|printOverlaps
condition|)
block|{
name|TreeSet
argument_list|<
name|Meeting
argument_list|>
name|overlaps
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Meeting
name|mx
range|:
name|mm
operator|.
name|getMeetings
argument_list|()
control|)
block|{
name|overlaps
operator|.
name|addAll
argument_list|(
name|mx
operator|.
name|getTimeRoomOverlaps
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|overlaps
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|MultiMeeting
name|o
range|:
name|Event
operator|.
name|getMultiMeetings
argument_list|(
name|overlaps
argument_list|)
control|)
name|pdfAddOverlappingMeetingToTable
argument_list|(
name|o
argument_list|,
name|mainContact
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|pdfAddOverlappingMeetingToTable
parameter_list|(
name|MultiMeeting
name|mm
parameter_list|,
name|boolean
name|mainContact
parameter_list|)
block|{
name|Meeting
name|m
init|=
name|mm
operator|.
name|getMeetings
argument_list|()
operator|.
name|first
argument_list|()
decl_stmt|;
if|if
condition|(
name|mm
operator|.
name|isPast
argument_list|()
condition|)
block|{
name|iTextColor
operator|=
name|Color
operator|.
name|GRAY
expr_stmt|;
name|iTextItalic
operator|=
literal|true
expr_stmt|;
block|}
name|iBgColor
operator|=
operator|new
name|Color
argument_list|(
literal|255
argument_list|,
literal|215
argument_list|,
literal|215
argument_list|)
expr_stmt|;
name|PdfPCell
name|cell
init|=
name|createCell
argument_list|()
decl_stmt|;
name|addText
argument_list|(
name|cell
argument_list|,
literal|"   Conf/w "
operator|+
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventName
argument_list|()
operator|+
literal|" ("
operator|+
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventTypeAbbv
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|cell
argument_list|)
expr_stmt|;
name|cell
operator|=
operator|(
name|mm
operator|.
name|getMeetings
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|?
name|pdfBuildDate
argument_list|(
name|m
argument_list|)
else|:
name|pdfBuildDate
argument_list|(
name|mm
argument_list|)
operator|)
expr_stmt|;
name|cell
operator|.
name|setColspan
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|cell
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildTime
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildLocation
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|mainContact
condition|)
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|mm
operator|.
name|getMeetings
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|?
name|pdfBuildApproved
argument_list|(
name|m
argument_list|)
else|:
name|pdfBuildApproved
argument_list|(
name|mm
argument_list|)
argument_list|)
expr_stmt|;
name|iTextColor
operator|=
name|Color
operator|.
name|BLACK
expr_stmt|;
name|iTextItalic
operator|=
literal|false
expr_stmt|;
name|iBgColor
operator|=
name|Color
operator|.
name|WHITE
expr_stmt|;
block|}
specifier|private
name|void
name|pdfAddMeetingRowsToTable
parameter_list|(
name|Meeting
name|m
parameter_list|,
name|boolean
name|mainContact
parameter_list|,
name|Event
name|lastEvent
parameter_list|,
name|Date
name|now
parameter_list|,
name|boolean
name|line
parameter_list|,
name|boolean
name|printOverlaps
parameter_list|)
block|{
if|if
condition|(
name|m
operator|.
name|getStartTime
argument_list|()
operator|.
name|before
argument_list|(
name|now
argument_list|)
condition|)
block|{
name|iTextColor
operator|=
name|Color
operator|.
name|GRAY
expr_stmt|;
name|iTextItalic
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|m
operator|.
name|isApproved
argument_list|()
condition|)
block|{
comment|//bgColor = "#DDFFDD";
block|}
else|else
block|{
name|iBgColor
operator|=
operator|new
name|Color
argument_list|(
literal|255
argument_list|,
literal|255
argument_list|,
literal|221
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|line
operator|&&
name|lastEvent
operator|!=
literal|null
operator|&&
operator|!
name|lastEvent
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|iOverline
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|lastEvent
operator|!=
literal|null
operator|&&
name|lastEvent
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|PdfPCell
name|cell
init|=
name|createCell
argument_list|()
decl_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|cell
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|cell
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|cell
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|cell
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildEventName
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildEventTypeAbbv
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildEventEnrollment
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildEventCapacity
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildSponsoringOrg
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildDate
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildTime
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildLocation
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|mainContact
condition|)
block|{
if|if
condition|(
name|lastEvent
operator|!=
literal|null
operator|&&
name|lastEvent
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|PdfPCell
name|cell
init|=
name|createCell
argument_list|()
decl_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildMainContactName
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildApproved
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iTextColor
operator|=
name|Color
operator|.
name|BLACK
expr_stmt|;
name|iTextItalic
operator|=
literal|false
expr_stmt|;
name|iBgColor
operator|=
name|Color
operator|.
name|WHITE
expr_stmt|;
name|iOverline
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|printOverlaps
condition|)
block|{
name|TreeSet
argument_list|<
name|Meeting
argument_list|>
name|overlaps
init|=
operator|new
name|TreeSet
argument_list|(
name|m
operator|.
name|getTimeRoomOverlaps
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|overlaps
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Meeting
name|o
range|:
name|overlaps
control|)
name|pdfAddOverlappingMeetingToTable
argument_list|(
name|o
argument_list|,
name|mainContact
argument_list|,
name|now
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|pdfAddOverlappingMeetingToTable
parameter_list|(
name|Meeting
name|m
parameter_list|,
name|boolean
name|mainContact
parameter_list|,
name|Date
name|now
parameter_list|)
block|{
if|if
condition|(
name|m
operator|.
name|getStartTime
argument_list|()
operator|.
name|before
argument_list|(
name|now
argument_list|)
condition|)
block|{
name|iTextColor
operator|=
name|Color
operator|.
name|GRAY
expr_stmt|;
name|iTextItalic
operator|=
literal|true
expr_stmt|;
block|}
name|iBgColor
operator|=
operator|new
name|Color
argument_list|(
literal|255
argument_list|,
literal|215
argument_list|,
literal|215
argument_list|)
expr_stmt|;
name|PdfPCell
name|cell
init|=
name|createCell
argument_list|()
decl_stmt|;
name|addText
argument_list|(
name|cell
argument_list|,
literal|"   Conf/w "
operator|+
operator|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventName
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventName
argument_list|()
operator|)
operator|+
literal|" ("
operator|+
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventTypeAbbv
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setColspan
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|cell
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildEventEnrollment
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildEventCapacity
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildSponsoringOrg
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildDate
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildTime
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildLocation
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|mainContact
condition|)
block|{
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildMainContactName
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|addCell
argument_list|(
name|pdfBuildApproved
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iTextColor
operator|=
name|Color
operator|.
name|BLACK
expr_stmt|;
name|iTextItalic
operator|=
literal|false
expr_stmt|;
name|iBgColor
operator|=
name|Color
operator|.
name|WHITE
expr_stmt|;
block|}
specifier|public
name|File
name|pdfTableForEvents
parameter_list|(
name|EventListForm
name|form
parameter_list|)
block|{
name|List
name|events
init|=
name|loadEvents
argument_list|(
name|form
argument_list|)
decl_stmt|;
if|if
condition|(
name|events
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
name|boolean
name|mainContact
init|=
name|form
operator|.
name|isAdmin
argument_list|()
operator|||
name|form
operator|.
name|isEventManager
argument_list|()
decl_stmt|;
name|FileOutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|File
name|file
init|=
name|ApplicationProperties
operator|.
name|getTempFile
argument_list|(
literal|"events"
argument_list|,
literal|"pdf"
argument_list|)
decl_stmt|;
name|iDocument
operator|=
operator|new
name|Document
argument_list|(
name|PageSize
operator|.
name|LETTER
argument_list|,
literal|15
argument_list|,
literal|15
argument_list|,
literal|15
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|iWriter
operator|=
name|PdfEventHandler
operator|.
name|initFooter
argument_list|(
name|iDocument
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|iDocument
operator|.
name|open
argument_list|()
expr_stmt|;
name|iPdfTable
operator|=
operator|new
name|PdfPTable
argument_list|(
name|getWidths
argument_list|(
literal|true
argument_list|,
name|mainContact
argument_list|)
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|setWidthPercentage
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|getDefaultCell
argument_list|()
operator|.
name|setPadding
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|getDefaultCell
argument_list|()
operator|.
name|setBorderWidth
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|setSplitRows
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|pdfBuildTableHeader
argument_list|(
literal|true
argument_list|,
name|mainContact
argument_list|,
name|events
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|events
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Event
name|event
init|=
operator|(
name|Event
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|form
operator|.
name|getMode
argument_list|()
operator|==
name|EventListForm
operator|.
name|sModeEvents4Approval
condition|)
block|{
name|boolean
name|myApproval
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|event
operator|.
name|getMeetings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Meeting
name|m
init|=
operator|(
name|Meeting
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|getApprovedDate
argument_list|()
operator|==
literal|null
operator|&&
name|m
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
operator|&&
name|form
operator|.
name|getManagingDepartments
argument_list|()
operator|.
name|contains
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getControllingDepartment
argument_list|()
argument_list|)
condition|)
block|{
name|myApproval
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|myApproval
condition|)
continue|continue;
block|}
name|TreeSet
argument_list|<
name|MultiMeeting
argument_list|>
name|meetings
init|=
name|event
operator|.
name|getMultiMeetings
argument_list|()
decl_stmt|;
name|pdfAddEventsRowsToTable
argument_list|(
name|event
argument_list|,
name|mainContact
argument_list|,
name|meetings
argument_list|)
expr_stmt|;
for|for
control|(
name|MultiMeeting
name|meeting
range|:
name|meetings
control|)
name|pdfAddMeetingRowsToTable
argument_list|(
name|meeting
argument_list|,
name|mainContact
argument_list|,
name|form
operator|.
name|getDispConflicts
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iDocument
operator|.
name|add
argument_list|(
name|iPdfTable
argument_list|)
expr_stmt|;
name|iDocument
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|file
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|File
name|pdfTableForMeetings
parameter_list|(
name|MeetingListForm
name|form
parameter_list|)
block|{
name|List
name|meetings
init|=
name|loadMeetings
argument_list|(
name|form
argument_list|)
decl_stmt|;
if|if
condition|(
name|meetings
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
name|boolean
name|mainContact
init|=
name|form
operator|.
name|isAdmin
argument_list|()
operator|||
name|form
operator|.
name|isEventManager
argument_list|()
decl_stmt|;
name|FileOutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|File
name|file
init|=
name|ApplicationProperties
operator|.
name|getTempFile
argument_list|(
literal|"meetings"
argument_list|,
literal|"pdf"
argument_list|)
decl_stmt|;
name|float
index|[]
name|widths
init|=
name|getWidths
argument_list|(
literal|false
argument_list|,
name|mainContact
argument_list|)
decl_stmt|;
name|iDocument
operator|=
operator|new
name|Document
argument_list|(
name|PageSize
operator|.
name|LETTER
operator|.
name|rotate
argument_list|()
argument_list|,
literal|15
argument_list|,
literal|15
argument_list|,
literal|15
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|iWriter
operator|=
name|PdfEventHandler
operator|.
name|initFooter
argument_list|(
name|iDocument
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|iDocument
operator|.
name|open
argument_list|()
expr_stmt|;
name|iPdfTable
operator|=
operator|new
name|PdfPTable
argument_list|(
name|widths
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|setWidthPercentage
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|getDefaultCell
argument_list|()
operator|.
name|setPadding
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|getDefaultCell
argument_list|()
operator|.
name|setBorderWidth
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|iPdfTable
operator|.
name|setSplitRows
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|pdfBuildTableHeader
argument_list|(
literal|false
argument_list|,
name|mainContact
argument_list|,
name|meetings
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Event
name|lastEvent
init|=
literal|null
decl_stmt|;
name|Date
name|now
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|boolean
name|line
init|=
name|MeetingListForm
operator|.
name|sOrderByName
operator|.
name|equals
argument_list|(
name|form
operator|.
name|getOrderBy
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|meetings
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Meeting
name|meeting
init|=
operator|(
name|Meeting
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|pdfAddMeetingRowsToTable
argument_list|(
name|meeting
argument_list|,
name|mainContact
argument_list|,
name|lastEvent
argument_list|,
name|now
argument_list|,
name|line
argument_list|,
name|form
operator|.
name|getDispConflicts
argument_list|()
argument_list|)
expr_stmt|;
name|lastEvent
operator|=
name|meeting
operator|.
name|getEvent
argument_list|()
expr_stmt|;
block|}
name|iDocument
operator|.
name|add
argument_list|(
name|iPdfTable
argument_list|)
expr_stmt|;
name|iDocument
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|file
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|TableStream
name|initTable
parameter_list|(
name|JspWriter
name|outputStream
parameter_list|)
block|{
name|TableStream
name|table
init|=
operator|new
name|TableStream
argument_list|(
name|outputStream
argument_list|)
decl_stmt|;
name|table
operator|.
name|setWidth
argument_list|(
literal|"100%"
argument_list|)
expr_stmt|;
name|table
operator|.
name|setBorder
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|table
operator|.
name|setCellSpacing
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|table
operator|.
name|setCellPadding
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|table
operator|.
name|tableDefComplete
argument_list|()
expr_stmt|;
return|return
operator|(
name|table
operator|)
return|;
block|}
block|}
end_class

end_unit

