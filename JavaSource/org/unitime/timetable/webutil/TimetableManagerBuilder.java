begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|criterion
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|Web
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ManagerRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Roles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|RolesComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|TimetableManagerDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  * Build list of Managers for the currently selected academic session  *   * @author Heston Fernandes  */
end_comment

begin_class
specifier|public
class|class
name|TimetableManagerBuilder
block|{
specifier|public
name|PdfWebTable
name|getManagersTable
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|boolean
name|images
parameter_list|,
name|boolean
name|html
parameter_list|)
block|{
name|int
name|cols
init|=
literal|7
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
literal|null
decl_stmt|;
name|Session
name|session
init|=
literal|null
decl_stmt|;
try|try
block|{
name|session
operator|=
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|dispLastChanges
init|=
operator|(
operator|!
literal|"no"
operator|.
name|equals
argument_list|(
name|Settings
operator|.
name|getSettingValue
argument_list|(
name|user
argument_list|,
name|Constants
operator|.
name|SETTINGS_DISP_LAST_CHANGES
argument_list|)
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|dispLastChanges
condition|)
name|cols
operator|++
expr_stmt|;
comment|// Create new table
name|PdfWebTable
name|webTable
init|=
operator|new
name|PdfWebTable
argument_list|(
name|cols
argument_list|,
operator|(
name|html
condition|?
literal|""
else|:
literal|"Manager List - "
operator|+
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|ACAD_YRTERM_LABEL_ATTR_NAME
argument_list|)
operator|)
argument_list|,
literal|"timetableManagerList.do?order=%%"
argument_list|,
operator|(
name|dispLastChanges
condition|?
operator|new
name|String
index|[]
block|{
literal|"Roles"
block|,
literal|"External ID"
block|,
literal|"Name"
block|,
literal|"Email Address"
block|,
literal|"Department"
block|,
literal|"Subject Area"
block|,
literal|"Solver Group"
block|,
literal|"Last Change"
block|}
else|:
operator|new
name|String
index|[]
block|{
literal|"Roles"
block|,
literal|"External ID"
block|,
literal|"Name"
block|,
literal|"Email Address"
block|,
literal|"Department"
block|,
literal|"Subject Area"
block|,
literal|"Solver Group"
block|}
operator|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|,
literal|"left"
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|false
block|}
argument_list|)
decl_stmt|;
name|webTable
operator|.
name|enableHR
argument_list|(
literal|"#EFEFEF"
argument_list|)
expr_stmt|;
name|webTable
operator|.
name|setRowStyle
argument_list|(
literal|"white-space: nowrap"
argument_list|)
expr_stmt|;
name|TimetableManagerDAO
name|empDao
init|=
operator|new
name|TimetableManagerDAO
argument_list|()
decl_stmt|;
name|hibSession
operator|=
name|empDao
operator|.
name|getSession
argument_list|()
expr_stmt|;
name|List
name|empList
init|=
name|hibSession
operator|.
name|createCriteria
argument_list|(
name|TimetableManager
operator|.
name|class
argument_list|)
operator|.
name|addOrder
argument_list|(
name|Order
operator|.
name|asc
argument_list|(
literal|"managerRoles"
argument_list|)
argument_list|)
operator|.
name|addOrder
argument_list|(
name|Order
operator|.
name|asc
argument_list|(
literal|"lastName"
argument_list|)
argument_list|)
operator|.
name|addOrder
argument_list|(
name|Order
operator|.
name|asc
argument_list|(
literal|"firstName"
argument_list|)
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|Iterator
name|iterEmp
init|=
name|empList
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterEmp
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|TimetableManager
name|manager
init|=
operator|(
name|TimetableManager
operator|)
name|iterEmp
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|puid
init|=
name|manager
operator|.
name|getExternalUniqueId
argument_list|()
decl_stmt|;
name|String
name|middleName
init|=
name|manager
operator|.
name|getMiddleName
argument_list|()
decl_stmt|;
name|String
name|email
init|=
name|manager
operator|.
name|getEmailAddress
argument_list|()
operator|!=
literal|null
condition|?
name|manager
operator|.
name|getEmailAddress
argument_list|()
else|:
literal|" "
decl_stmt|;
name|String
name|fullName
init|=
literal|""
decl_stmt|;
name|String
name|subjectList
init|=
literal|""
decl_stmt|;
name|String
name|roleStr
init|=
literal|""
decl_stmt|;
name|String
name|deptStr
init|=
literal|""
decl_stmt|;
name|Set
name|depts
init|=
name|manager
operator|.
name|getDepartments
argument_list|()
decl_stmt|;
name|Set
name|mgrRolesSet
init|=
name|manager
operator|.
name|getManagerRoles
argument_list|()
decl_stmt|;
name|String
name|onClick
init|=
literal|"onClick=\"document.location='timetableManagerEdit.do?op=Edit&id="
operator|+
name|manager
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"';\""
decl_stmt|;
comment|// Construct Full Name
if|if
condition|(
name|middleName
operator|==
literal|null
operator|||
name|middleName
operator|.
name|equals
argument_list|(
literal|"null"
argument_list|)
operator|||
name|middleName
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|fullName
operator|=
name|manager
operator|.
name|getLastName
argument_list|()
operator|+
literal|", "
operator|+
name|manager
operator|.
name|getFirstName
argument_list|()
operator|+
literal|" "
expr_stmt|;
else|else
block|{
name|String
name|mn
init|=
literal|""
decl_stmt|;
name|StringTokenizer
name|strTok
init|=
operator|new
name|StringTokenizer
argument_list|(
name|middleName
argument_list|,
literal|" "
argument_list|)
decl_stmt|;
while|while
condition|(
name|strTok
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|mn
operator|+=
name|strTok
operator|.
name|nextToken
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|+
literal|" "
expr_stmt|;
block|}
name|fullName
operator|=
name|manager
operator|.
name|getLastName
argument_list|()
operator|+
literal|", "
operator|+
name|manager
operator|.
name|getFirstName
argument_list|()
operator|+
literal|" "
operator|+
name|mn
expr_stmt|;
block|}
comment|// Determine role type
name|String
name|roleOrd
init|=
literal|""
decl_stmt|;
name|ArrayList
name|mgrRoles
init|=
operator|new
name|ArrayList
argument_list|(
name|mgrRolesSet
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|mgrRoles
argument_list|,
operator|new
name|RolesComparator
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|mgrRoles
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ManagerRole
name|mgrRole
init|=
operator|(
name|ManagerRole
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|roleRef
init|=
name|mgrRole
operator|.
name|getRole
argument_list|()
operator|.
name|getReference
argument_list|()
decl_stmt|;
name|String
name|title
init|=
name|roleRef
decl_stmt|;
name|boolean
name|receivesEmail
init|=
operator|(
name|mgrRole
operator|.
name|isReceiveEmails
argument_list|()
operator|==
literal|null
condition|?
literal|false
else|:
name|mgrRole
operator|.
name|isReceiveEmails
argument_list|()
operator|.
name|booleanValue
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|images
operator|&&
name|html
condition|)
block|{
name|String
name|border
init|=
literal|"0"
decl_stmt|;
if|if
condition|(
name|mgrRoles
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|&&
name|mgrRole
operator|.
name|isPrimary
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|border
operator|=
literal|"1"
expr_stmt|;
name|title
operator|+=
literal|" - Primary Role"
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|receivesEmail
condition|)
block|{
name|title
operator|+=
literal|", * No Email for this Role"
expr_stmt|;
name|border
operator|=
literal|"1"
expr_stmt|;
block|}
name|roleStr
operator|+=
literal|"<IMG height='25' width='25' border='"
operator|+
name|border
operator|+
literal|"'"
operator|+
literal|"src='"
operator|+
name|request
operator|.
name|getContextPath
argument_list|()
operator|+
literal|"/images/"
operator|+
name|Roles
operator|.
name|getRoleIcon
argument_list|(
name|roleRef
argument_list|)
operator|+
literal|"' "
operator|+
literal|"title='"
operator|+
name|title
operator|+
literal|"' "
operator|+
literal|"alt='"
operator|+
name|title
operator|+
literal|"' "
operator|+
literal|"align='middle'>"
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|roleStr
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|roleStr
operator|+=
literal|","
operator|+
operator|(
name|html
condition|?
literal|"<br>"
else|:
literal|"\n"
operator|)
expr_stmt|;
if|if
condition|(
name|mgrRoles
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|&&
name|mgrRole
operator|.
name|isPrimary
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|roleStr
operator|+=
operator|(
name|html
condition|?
literal|"<span title='"
operator|+
name|roleRef
operator|+
literal|" - Primary Role"
operator|+
operator|(
name|receivesEmail
condition|?
literal|""
else|:
literal|", * No Email for this Role"
operator|)
operator|+
literal|"' style='font-weight:bold;'>"
operator|+
name|roleRef
operator|+
operator|(
name|receivesEmail
condition|?
literal|""
else|:
literal|"*"
operator|)
operator|+
literal|"</span>"
else|:
literal|"@@BOLD "
operator|+
name|roleRef
operator|+
operator|(
name|receivesEmail
condition|?
literal|""
else|:
literal|"*"
operator|)
operator|+
literal|"@@END_BOLD "
operator|)
expr_stmt|;
block|}
else|else
block|{
name|roleStr
operator|+=
operator|(
name|html
condition|?
operator|(
operator|!
name|receivesEmail
condition|?
literal|"<span title='"
operator|+
name|roleRef
operator|+
operator|(
name|receivesEmail
condition|?
literal|""
else|:
literal|", * No Email for this Role"
operator|)
operator|+
literal|"' style='font-weight:normal;'>"
operator|+
name|roleRef
operator|+
operator|(
name|receivesEmail
condition|?
literal|""
else|:
literal|"*"
operator|)
operator|+
literal|"</span>"
else|:
name|roleRef
operator|)
else|:
name|roleRef
operator|+
operator|(
name|receivesEmail
condition|?
literal|""
else|:
literal|"*"
operator|)
operator|)
expr_stmt|;
block|}
block|}
name|roleOrd
operator|+=
name|title
expr_stmt|;
block|}
comment|/* 		    if (manager.isExternalManager()) {                 if (images&& html)                     roleStr += "<IMG height='25' width='25' src='" + request.getContextPath() + "/images/ext-mgr-icon.gif' alt='External Manager' title='External Manager' border='0' align='middle'>";                 else                     roleStr += ","+(html?"<br>":"\n")+"External Manager"; 		    } 		    */
name|Long
name|currentAcadSession
init|=
operator|(
name|Long
operator|)
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|SESSION_ID_ATTR_NAME
argument_list|)
decl_stmt|;
comment|// Departments
for|for
control|(
name|Iterator
name|di
init|=
name|depts
operator|.
name|iterator
argument_list|()
init|;
name|di
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|dept
init|=
operator|(
name|Department
operator|)
name|di
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|dept
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|currentAcadSession
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|deptStr
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|deptStr
operator|+=
literal|", "
operator|+
operator|(
name|html
condition|?
literal|"<br>"
else|:
literal|"\n"
operator|)
expr_stmt|;
name|deptStr
operator|+=
operator|(
name|html
condition|?
literal|"<span title='"
operator|+
name|dept
operator|.
name|getHtmlTitle
argument_list|()
operator|+
literal|"'>"
operator|+
operator|(
name|dept
operator|.
name|isExternalManager
argument_list|()
condition|?
literal|"<b>"
else|:
literal|""
operator|)
operator|+
name|dept
operator|.
name|getDeptCode
argument_list|()
operator|+
operator|(
name|dept
operator|.
name|getAbbreviation
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|": "
operator|+
name|dept
operator|.
name|getAbbreviation
argument_list|()
operator|.
name|trim
argument_list|()
operator|)
operator|+
operator|(
name|dept
operator|.
name|isExternalManager
argument_list|()
condition|?
literal|"</b>"
else|:
literal|""
operator|)
operator|+
literal|"</span>"
else|:
operator|(
name|dept
operator|.
name|isExternalManager
argument_list|()
condition|?
literal|"@@BOLD "
else|:
literal|""
operator|)
operator|+
name|dept
operator|.
name|getDeptCode
argument_list|()
operator|+
operator|(
name|dept
operator|.
name|getAbbreviation
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|": "
operator|+
name|dept
operator|.
name|getAbbreviation
argument_list|()
operator|.
name|trim
argument_list|()
operator|)
operator|+
operator|(
name|dept
operator|.
name|isExternalManager
argument_list|()
condition|?
literal|"@@END_BOLD "
else|:
literal|""
operator|)
operator|)
expr_stmt|;
comment|// Construct SubjectArea List
name|Set
name|saList
init|=
name|dept
operator|.
name|getSubjectAreas
argument_list|()
decl_stmt|;
if|if
condition|(
name|saList
operator|!=
literal|null
operator|&&
name|saList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Iterator
name|si
init|=
name|saList
operator|.
name|iterator
argument_list|()
init|;
name|si
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SubjectArea
name|sa
init|=
operator|(
name|SubjectArea
operator|)
name|si
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|subjectList
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|subjectList
operator|+=
literal|","
operator|+
operator|(
name|html
condition|?
literal|"<br>"
else|:
literal|"\n"
operator|)
expr_stmt|;
name|subjectList
operator|+=
operator|(
name|html
condition|?
literal|"<span title='"
operator|+
name|sa
operator|.
name|getLongTitle
argument_list|()
operator|+
literal|"'>"
operator|+
name|sa
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|.
name|trim
argument_list|()
operator|+
literal|"</span>"
else|:
name|sa
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|.
name|trim
argument_list|()
operator|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|html
operator|&&
name|deptStr
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|deptStr
operator|=
literal|"&nbsp;"
expr_stmt|;
if|if
condition|(
name|html
operator|&&
name|subjectList
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|subjectList
operator|=
literal|"&nbsp;"
expr_stmt|;
name|String
name|solverGroupStr
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|manager
operator|.
name|getSolverGroups
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SolverGroup
name|sg
init|=
operator|(
name|SolverGroup
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|sg
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|currentAcadSession
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|solverGroupStr
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|solverGroupStr
operator|+=
literal|","
operator|+
operator|(
name|html
condition|?
literal|"<br>"
else|:
literal|"\n"
operator|)
expr_stmt|;
name|solverGroupStr
operator|+=
operator|(
name|html
condition|?
literal|"<span title='"
operator|+
name|sg
operator|.
name|getName
argument_list|()
operator|+
literal|"'>"
operator|+
name|sg
operator|.
name|getAbbv
argument_list|()
operator|+
literal|"</span>"
else|:
name|sg
operator|.
name|getAbbv
argument_list|()
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|html
operator|&&
name|solverGroupStr
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|solverGroupStr
operator|=
literal|"&nbsp;"
expr_stmt|;
name|String
name|lastChangeStr
init|=
literal|null
decl_stmt|;
name|Long
name|lastChangeCmp
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|dispLastChanges
condition|)
block|{
name|List
name|changes
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
name|changes
operator|=
name|ChangeLog
operator|.
name|findLastNChanges
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|manager
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ChangeLog
name|lastChange
init|=
operator|(
name|changes
operator|==
literal|null
operator|||
name|changes
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|(
name|ChangeLog
operator|)
name|changes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|html
condition|)
name|lastChangeStr
operator|=
operator|(
name|lastChange
operator|==
literal|null
condition|?
literal|"&nbsp;"
else|:
literal|"<span title='"
operator|+
name|lastChange
operator|.
name|getLabel
argument_list|()
operator|+
literal|"'>"
operator|+
name|lastChange
operator|.
name|getSourceTitle
argument_list|()
operator|+
literal|" ("
operator|+
name|lastChange
operator|.
name|getOperationTitle
argument_list|()
operator|+
literal|") on "
operator|+
name|ChangeLog
operator|.
name|sDFdate
operator|.
name|format
argument_list|(
name|lastChange
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
operator|+
literal|"</span>"
operator|)
expr_stmt|;
else|else
name|lastChangeStr
operator|=
operator|(
name|lastChange
operator|==
literal|null
condition|?
literal|""
else|:
name|lastChange
operator|.
name|getSourceTitle
argument_list|()
operator|+
literal|" ("
operator|+
name|lastChange
operator|.
name|getOperationTitle
argument_list|()
operator|+
literal|") on "
operator|+
name|ChangeLog
operator|.
name|sDFdate
operator|.
name|format
argument_list|(
name|lastChange
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
operator|)
expr_stmt|;
name|lastChangeCmp
operator|=
operator|new
name|Long
argument_list|(
name|lastChange
operator|==
literal|null
condition|?
literal|0
else|:
name|lastChange
operator|.
name|getTimeStamp
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Add to web table
name|webTable
operator|.
name|addLine
argument_list|(
name|onClick
argument_list|,
operator|new
name|String
index|[]
block|{
name|roleStr
block|,
operator|(
name|html
condition|?
literal|"<A name='"
operator|+
name|manager
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"'>"
operator|+
name|puid
operator|+
literal|"&nbsp;</A>"
else|:
name|puid
operator|)
block|,
name|fullName
block|,
name|email
block|,
name|deptStr
block|,
name|subjectList
block|,
name|solverGroupStr
block|,
name|lastChangeStr
block|}
argument_list|,
operator|new
name|Comparable
index|[]
block|{
name|roleOrd
block|,
name|puid
block|,
name|fullName
block|,
name|email
block|,
name|deptStr
block|,
name|subjectList
block|,
name|solverGroupStr
block|,
name|lastChangeCmp
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|webTable
return|;
block|}
block|}
end_class

end_unit

