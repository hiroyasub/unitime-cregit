begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.0 (University Course Timetabling& Student Sectioning Application)  * Copyright (C) 2007, UniTime.org, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Graphics2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|BufferedImage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|WritableRaster
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/** This class provides a time pattern HTML table.  *  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|RequiredTimeTable
block|{
specifier|private
specifier|static
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
name|sTimeFormat
init|=
operator|new
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
argument_list|(
literal|"h:mm"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|String
name|getTimeGridSize
parameter_list|(
name|User
name|user
parameter_list|)
block|{
return|return
name|Settings
operator|.
name|getSettingValue
argument_list|(
name|user
argument_list|,
name|Constants
operator|.
name|SETTINGS_TIME_GRID_SIZE
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|getTimeGridVertical
parameter_list|(
name|User
name|user
parameter_list|)
block|{
return|return
name|Constants
operator|.
name|SETTINGS_TIME_GRID_ORIENTATION_VERTICAL
operator|.
name|equalsIgnoreCase
argument_list|(
name|Settings
operator|.
name|getSettingValue
argument_list|(
name|user
argument_list|,
name|Constants
operator|.
name|SETTINGS_TIME_GRID_ORIENTATION
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|getTimeGridAsText
parameter_list|(
name|User
name|user
parameter_list|)
block|{
return|return
name|Constants
operator|.
name|SETTINGS_TIME_GRID_TEXT
operator|.
name|equalsIgnoreCase
argument_list|(
name|Settings
operator|.
name|getSettingValue
argument_list|(
name|user
argument_list|,
name|Constants
operator|.
name|SETTINGS_TIME_GRID_ORIENTATION
argument_list|)
argument_list|)
return|;
block|}
comment|/** model */
specifier|private
name|RequiredTimeTableModel
name|iModel
init|=
literal|null
decl_stmt|;
comment|/** table name -- for distinguish two tables in one page */
specifier|private
name|String
name|iName
init|=
literal|"rtt"
decl_stmt|;
comment|/** Constructor from time pattern */
specifier|public
name|RequiredTimeTable
parameter_list|(
name|RequiredTimeTableModel
name|model
parameter_list|)
block|{
name|iModel
operator|=
name|model
expr_stmt|;
block|}
comment|/** sets table's name */
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|iName
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|print
parameter_list|(
name|boolean
name|timeVertical
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|print
argument_list|(
literal|true
argument_list|,
name|timeVertical
argument_list|)
return|;
block|}
specifier|public
name|String
name|exactTime
parameter_list|(
name|boolean
name|editable
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|int
name|days
init|=
literal|0
decl_stmt|;
name|int
name|hour
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|min
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|morn
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|days
operator|=
name|getModel
argument_list|()
operator|.
name|getExactDays
argument_list|()
expr_stmt|;
name|int
name|startSlot
init|=
name|getModel
argument_list|()
operator|.
name|getExactStartSlot
argument_list|()
decl_stmt|;
name|int
name|startMin
init|=
name|startSlot
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
decl_stmt|;
if|if
condition|(
name|startMin
operator|>=
literal|0
condition|)
block|{
name|min
operator|=
name|startMin
operator|%
literal|60
expr_stmt|;
name|int
name|startHour
init|=
name|startMin
operator|/
literal|60
decl_stmt|;
name|morn
operator|=
operator|(
name|startHour
operator|<
literal|12
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
name|hour
operator|=
name|startHour
operator|%
literal|12
expr_stmt|;
if|if
condition|(
name|hour
operator|==
literal|0
condition|)
name|hour
operator|=
literal|12
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|editable
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|DAY_CODES
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<input type='checkbox' name='"
operator|+
name|iName
operator|+
literal|"_d"
operator|+
name|i
operator|+
literal|"' "
operator|+
operator|(
operator|(
name|days
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|i
index|]
operator|)
operator|!=
literal|0
condition|?
literal|"checked"
else|:
literal|""
operator|)
operator|+
literal|" "
operator|+
literal|"/>"
operator|+
name|Constants
operator|.
name|DAY_NAME
index|[
name|i
index|]
operator|+
literal|"&nbsp;&nbsp;\n"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<select name='"
operator|+
name|iName
operator|+
literal|"_hour' "
operator|+
literal|">\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<option value=''></option>\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|12
condition|;
name|i
operator|++
control|)
name|sb
operator|.
name|append
argument_list|(
literal|"<option value='"
operator|+
name|i
operator|+
literal|"' "
operator|+
operator|(
name|i
operator|==
name|hour
condition|?
literal|"selected"
else|:
literal|""
operator|)
operator|+
literal|">"
operator|+
name|i
operator|+
literal|"</option>\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</select> :<select name='"
operator|+
name|iName
operator|+
literal|"_min' "
operator|+
literal|">\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<option value=''></option>\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|60
condition|;
name|i
operator|+=
literal|5
control|)
name|sb
operator|.
name|append
argument_list|(
literal|"<option value='"
operator|+
name|i
operator|+
literal|"' "
operator|+
operator|(
name|i
operator|==
name|min
condition|?
literal|"selected"
else|:
literal|""
operator|)
operator|+
literal|">"
operator|+
operator|(
name|i
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|i
operator|+
literal|"</option>\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</select><select name='"
operator|+
name|iName
operator|+
literal|"_morn' "
operator|+
literal|">\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<option value=''></option>\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<option value='1' "
operator|+
operator|(
name|morn
operator|==
literal|1
condition|?
literal|"selected"
else|:
literal|""
operator|)
operator|+
literal|">am</option>\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<option value='0' "
operator|+
operator|(
name|morn
operator|==
literal|0
condition|?
literal|"selected"
else|:
literal|""
operator|)
operator|+
literal|">pm</option>\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</select>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|nrDays
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|DAY_CODES
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|days
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|i
index|]
operator|)
operator|!=
literal|0
condition|)
name|nrDays
operator|++
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|DAY_CODES
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|days
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|i
index|]
operator|)
operator|!=
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
name|nrDays
operator|==
literal|1
condition|?
name|Constants
operator|.
name|DAY_NAME
index|[
name|i
index|]
else|:
name|Constants
operator|.
name|DAY_NAMES_SHORT
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|" "
operator|+
name|hour
operator|+
literal|":"
operator|+
operator|(
name|min
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|min
operator|+
operator|(
name|morn
operator|==
literal|1
condition|?
literal|"a"
else|:
literal|"p"
operator|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|print
parameter_list|(
name|boolean
name|editable
parameter_list|,
name|boolean
name|timeVertical
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|print
argument_list|(
name|editable
argument_list|,
name|timeVertical
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
name|String
name|getDays
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"["
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getModel
argument_list|()
operator|.
name|getNrDays
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"'"
operator|+
name|getModel
argument_list|()
operator|.
name|getDayHeader
argument_list|(
name|i
argument_list|)
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|getStartTimes
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"["
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getModel
argument_list|()
operator|.
name|getNrTimes
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"'"
operator|+
name|getModel
argument_list|()
operator|.
name|getStartTime
argument_list|(
name|i
argument_list|)
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|getEndTimes
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"["
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getModel
argument_list|()
operator|.
name|getNrTimes
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"'"
operator|+
name|getModel
argument_list|()
operator|.
name|getEndTime
argument_list|(
name|i
argument_list|)
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|getPreferences
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"["
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
name|getModel
argument_list|()
operator|.
name|getNrDays
argument_list|()
condition|;
name|d
operator|++
control|)
block|{
if|if
condition|(
name|d
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
name|getModel
argument_list|()
operator|.
name|getNrTimes
argument_list|()
condition|;
name|t
operator|++
control|)
block|{
if|if
condition|(
name|t
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"'"
operator|+
name|getModel
argument_list|()
operator|.
name|getPreference
argument_list|(
name|d
argument_list|,
name|t
argument_list|)
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|getTexts
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"["
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
name|getModel
argument_list|()
operator|.
name|getNrDays
argument_list|()
condition|;
name|d
operator|++
control|)
block|{
if|if
condition|(
name|d
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
name|getModel
argument_list|()
operator|.
name|getNrTimes
argument_list|()
condition|;
name|t
operator|++
control|)
block|{
if|if
condition|(
name|t
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"'"
operator|+
name|getModel
argument_list|()
operator|.
name|getFieldText
argument_list|(
name|d
argument_list|,
name|t
argument_list|)
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|getBorders
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"["
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
name|getModel
argument_list|()
operator|.
name|getNrDays
argument_list|()
condition|;
name|d
operator|++
control|)
block|{
if|if
condition|(
name|d
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
name|getModel
argument_list|()
operator|.
name|getNrTimes
argument_list|()
condition|;
name|t
operator|++
control|)
block|{
if|if
condition|(
name|t
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|Color
name|borderColor
init|=
name|getModel
argument_list|()
operator|.
name|getBorder
argument_list|(
name|d
argument_list|,
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|borderColor
operator|==
literal|null
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
else|else
name|sb
operator|.
name|append
argument_list|(
literal|"'rgb("
operator|+
name|borderColor
operator|.
name|getRed
argument_list|()
operator|+
literal|","
operator|+
name|borderColor
operator|.
name|getGreen
argument_list|()
operator|+
literal|","
operator|+
name|borderColor
operator|.
name|getBlue
argument_list|()
operator|+
literal|") 2px solid'"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|getEditables
parameter_list|(
name|boolean
name|editable
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"["
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
name|getModel
argument_list|()
operator|.
name|getNrDays
argument_list|()
condition|;
name|d
operator|++
control|)
block|{
if|if
condition|(
name|d
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
name|getModel
argument_list|()
operator|.
name|getNrTimes
argument_list|()
condition|;
name|t
operator|++
control|)
block|{
if|if
condition|(
name|t
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|editable
operator|&&
name|getModel
argument_list|()
operator|.
name|isEditable
argument_list|(
name|d
argument_list|,
name|t
argument_list|)
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|getPreferenceNames
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"["
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getModel
argument_list|()
operator|.
name|getPreferenceNames
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"'"
operator|+
name|getModel
argument_list|()
operator|.
name|getPreferenceNames
argument_list|()
index|[
name|i
index|]
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|getPreferenceColors
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"["
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getModel
argument_list|()
operator|.
name|getPreferenceNames
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|Color
name|color
init|=
name|getModel
argument_list|()
operator|.
name|getPreferenceColor
argument_list|(
name|getModel
argument_list|()
operator|.
name|getPreferenceNames
argument_list|()
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"'rgb("
operator|+
name|color
operator|.
name|getRed
argument_list|()
operator|+
literal|","
operator|+
name|color
operator|.
name|getGreen
argument_list|()
operator|+
literal|","
operator|+
name|color
operator|.
name|getBlue
argument_list|()
operator|+
literal|")'"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|getPreferenceTexts
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"["
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getModel
argument_list|()
operator|.
name|getPreferenceNames
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"'"
operator|+
name|getModel
argument_list|()
operator|.
name|getPreferenceText
argument_list|(
name|getModel
argument_list|()
operator|.
name|getPreferenceNames
argument_list|()
index|[
name|i
index|]
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"'"
argument_list|,
literal|"&#39;"
argument_list|)
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|getPreferenceEnables
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"["
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getModel
argument_list|()
operator|.
name|getPreferenceNames
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getModel
argument_list|()
operator|.
name|isPreferenceEnabled
argument_list|(
name|getModel
argument_list|()
operator|.
name|getPreferenceNames
argument_list|()
index|[
name|i
index|]
argument_list|)
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|getSelections
parameter_list|()
block|{
if|if
condition|(
name|getModel
argument_list|()
operator|.
name|getNrSelections
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|"null"
return|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"["
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getModel
argument_list|()
operator|.
name|getNrSelections
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
name|int
index|[]
name|limits
init|=
name|getModel
argument_list|()
operator|.
name|getSelectionLimits
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"'"
operator|+
name|getModel
argument_list|()
operator|.
name|getSelectionName
argument_list|(
name|i
argument_list|)
operator|+
literal|"',["
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|limits
index|[
literal|0
index|]
operator|+
literal|","
operator|+
name|limits
index|[
literal|1
index|]
operator|+
literal|","
operator|+
name|limits
index|[
literal|2
index|]
operator|+
literal|","
operator|+
name|limits
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"]]"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|print
parameter_list|(
name|boolean
name|editable
parameter_list|,
name|boolean
name|timeVertical
parameter_list|,
name|boolean
name|showLegend
parameter_list|,
name|boolean
name|showTexts
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
if|if
condition|(
name|getModel
argument_list|()
operator|.
name|isExactTime
argument_list|()
condition|)
block|{
return|return
name|exactTime
argument_list|(
name|editable
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|"<script language=\"javascript\">\n"
operator|+
literal|"tpGenerate(\n\t"
operator|+
literal|"'"
operator|+
name|iName
operator|+
literal|"',\n\t"
operator|+
operator|(
name|timeVertical
condition|?
literal|"false"
else|:
literal|"true"
operator|)
operator|+
literal|",\n\t"
operator|+
operator|(
name|getModel
argument_list|()
operator|.
name|getName
argument_list|()
operator|==
literal|null
condition|?
literal|"null"
else|:
literal|"'"
operator|+
name|getModel
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
operator|)
operator|+
literal|",\n\t"
operator|+
name|getModel
argument_list|()
operator|.
name|getNrTimes
argument_list|()
operator|+
literal|",\n\t"
operator|+
name|getModel
argument_list|()
operator|.
name|getNrDays
argument_list|()
operator|+
literal|",\n\t"
operator|+
name|getDays
argument_list|()
operator|+
literal|",\n\t"
operator|+
name|getStartTimes
argument_list|()
operator|+
literal|",\n\t"
operator|+
name|getEndTimes
argument_list|()
operator|+
literal|",\n\t"
operator|+
operator|(
name|showTexts
condition|?
name|getTexts
argument_list|()
else|:
literal|"null"
operator|)
operator|+
literal|",\n\t"
operator|+
name|getPreferences
argument_list|()
operator|+
literal|",\n\t"
operator|+
name|getBorders
argument_list|()
operator|+
literal|",\n\t"
operator|+
name|getEditables
argument_list|(
name|editable
argument_list|)
operator|+
literal|",\n\t"
operator|+
name|getPreferenceNames
argument_list|()
operator|+
literal|",\n\t"
operator|+
name|getPreferenceColors
argument_list|()
operator|+
literal|",\n\t"
operator|+
name|getPreferenceTexts
argument_list|()
operator|+
literal|",\n\t"
operator|+
name|getPreferenceEnables
argument_list|()
operator|+
literal|",\n\t"
operator|+
name|getSelections
argument_list|()
operator|+
literal|",\n\t"
operator|+
name|getModel
argument_list|()
operator|.
name|getDefaultSelection
argument_list|()
operator|+
literal|",\n\t"
operator|+
literal|"'"
operator|+
name|getModel
argument_list|()
operator|.
name|getDefaultPreference
argument_list|()
operator|+
literal|"',\n\t"
operator|+
operator|(
name|getModel
argument_list|()
operator|.
name|getPreferenceCheck
argument_list|()
operator|==
literal|null
condition|?
literal|"null"
else|:
literal|"\""
operator|+
name|getModel
argument_list|()
operator|.
name|getPreferenceCheck
argument_list|()
operator|+
literal|"\""
operator|)
operator|+
literal|", \n\t"
operator|+
name|showLegend
operator|+
literal|");\n"
operator|+
literal|"</script>"
return|;
block|}
block|}
comment|/** update table content from given request */
specifier|public
name|void
name|update
parameter_list|(
name|ServletRequest
name|request
parameter_list|)
block|{
if|if
condition|(
name|getModel
argument_list|()
operator|.
name|isExactTime
argument_list|()
condition|)
block|{
name|int
name|dayCode
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|DAY_CODES
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
name|iName
operator|+
literal|"_d"
operator|+
name|i
argument_list|)
operator|!=
literal|null
condition|)
name|dayCode
operator|+=
name|Constants
operator|.
name|DAY_CODES
index|[
name|i
index|]
expr_stmt|;
block|}
name|int
name|startSlot
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
name|iName
operator|+
literal|"_hour"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|int
name|hour
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
name|iName
operator|+
literal|"_hour"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|hour
operator|==
literal|12
condition|)
name|hour
operator|=
literal|0
expr_stmt|;
name|int
name|min
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
name|iName
operator|+
literal|"_min"
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|morn
init|=
operator|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
name|iName
operator|+
literal|"_morn"
argument_list|)
argument_list|)
operator|==
literal|1
operator|)
decl_stmt|;
name|int
name|startTime
init|=
operator|(
operator|(
name|hour
operator|+
operator|(
name|morn
condition|?
literal|0
else|:
literal|12
operator|)
operator|)
operator|%
literal|24
operator|)
operator|*
literal|60
operator|+
name|min
decl_stmt|;
name|startSlot
operator|=
operator|(
name|startTime
operator|-
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|)
operator|/
name|Constants
operator|.
name|SLOT_LENGTH_MIN
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|getModel
argument_list|()
operator|.
name|setExactDays
argument_list|(
name|dayCode
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|setExactStartSlot
argument_list|(
name|startSlot
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
name|getModel
argument_list|()
operator|.
name|getNrDays
argument_list|()
condition|;
name|d
operator|++
control|)
block|{
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
name|getModel
argument_list|()
operator|.
name|getNrTimes
argument_list|()
condition|;
name|t
operator|++
control|)
block|{
name|String
name|prefStr
init|=
name|request
operator|.
name|getParameter
argument_list|(
name|iName
operator|+
literal|"_req_"
operator|+
name|d
operator|+
literal|"_"
operator|+
name|t
argument_list|)
decl_stmt|;
name|iModel
operator|.
name|setPreference
argument_list|(
name|d
argument_list|,
name|t
argument_list|,
operator|(
name|prefStr
operator|==
literal|null
condition|?
name|getModel
argument_list|()
operator|.
name|getDefaultPreference
argument_list|()
else|:
name|prefStr
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|RequiredTimeTableModel
name|getModel
parameter_list|()
block|{
return|return
name|iModel
return|;
block|}
comment|/** Draw vertical dotted line */
specifier|private
specifier|static
name|void
name|drawVline
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y1
parameter_list|,
name|int
name|y2
parameter_list|,
name|int
name|dy1
parameter_list|,
name|int
name|dy2
parameter_list|,
name|Graphics2D
name|g
parameter_list|)
block|{
for|for
control|(
name|int
name|v
init|=
name|y1
init|;
name|v
operator|<=
name|y2
condition|;
name|v
operator|+=
operator|(
name|dy1
operator|+
name|dy2
operator|)
control|)
name|g
operator|.
name|drawLine
argument_list|(
name|x
argument_list|,
name|v
argument_list|,
name|x
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|y2
argument_list|,
name|v
operator|+
name|dy1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Draw horizontal dotted line */
specifier|private
specifier|static
name|void
name|drawHline
parameter_list|(
name|int
name|x1
parameter_list|,
name|int
name|x2
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|dx1
parameter_list|,
name|int
name|dx2
parameter_list|,
name|Graphics2D
name|g
parameter_list|)
block|{
for|for
control|(
name|int
name|h
init|=
name|x1
init|;
name|h
operator|<=
name|x2
condition|;
name|h
operator|+=
operator|(
name|dx1
operator|+
name|dx2
operator|)
control|)
name|g
operator|.
name|drawLine
argument_list|(
name|h
argument_list|,
name|y
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|x2
argument_list|,
name|h
operator|+
name|dx1
argument_list|)
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
comment|/** put pixel */
specifier|private
name|void
name|putPixel
parameter_list|(
name|WritableRaster
name|raster
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|Color
name|color
parameter_list|)
block|{
comment|//Debug.log("setPixel("+x+","+y+","+color+")");
name|raster
operator|.
name|setPixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
operator|new
name|int
index|[]
block|{
name|color
operator|.
name|getRed
argument_list|()
block|,
name|color
operator|.
name|getGreen
argument_list|()
block|,
name|color
operator|.
name|getBlue
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
comment|/** draw horizontal line */
specifier|private
name|void
name|drawHline
parameter_list|(
name|WritableRaster
name|raster
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|width
parameter_list|,
name|Color
name|color
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|width
condition|;
name|i
operator|++
control|)
name|putPixel
argument_list|(
name|raster
argument_list|,
name|x
operator|+
name|i
argument_list|,
name|y
argument_list|,
name|color
argument_list|)
expr_stmt|;
block|}
comment|/** draw vertical line */
specifier|private
name|void
name|drawVline
parameter_list|(
name|WritableRaster
name|raster
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|width
parameter_list|,
name|Color
name|color
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|width
condition|;
name|i
operator|++
control|)
name|putPixel
argument_list|(
name|raster
argument_list|,
name|x
argument_list|,
name|y
operator|+
name|i
argument_list|,
name|color
argument_list|)
expr_stmt|;
block|}
comment|/** fill rectangle  */
specifier|private
name|void
name|fillRect
parameter_list|(
name|WritableRaster
name|raster
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|Color
name|color
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|width
condition|;
name|i
operator|++
control|)
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|height
condition|;
name|j
operator|++
control|)
name|putPixel
argument_list|(
name|raster
argument_list|,
name|x
operator|+
name|i
argument_list|,
name|y
operator|+
name|j
argument_list|,
name|color
argument_list|)
expr_stmt|;
block|}
specifier|public
name|BufferedImage
name|createBufferedImage
parameter_list|(
name|boolean
name|timeVertical
parameter_list|)
block|{
if|if
condition|(
name|getModel
argument_list|()
operator|.
name|isExactTime
argument_list|()
condition|)
return|return
literal|null
return|;
name|int
index|[]
name|limit
init|=
name|getModel
argument_list|()
operator|.
name|getSelectionLimits
argument_list|(
name|getModel
argument_list|()
operator|.
name|getDefaultSelection
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|minTime
init|=
name|limit
index|[
literal|0
index|]
decl_stmt|,
name|maxTime
init|=
name|limit
index|[
literal|1
index|]
decl_stmt|,
name|minDay
init|=
name|limit
index|[
literal|2
index|]
decl_stmt|,
name|maxDay
init|=
name|limit
index|[
literal|3
index|]
decl_stmt|;
name|int
name|lineWidth
init|=
literal|1
decl_stmt|;
name|int
name|cellWidth
init|=
literal|5
decl_stmt|;
name|Vector
name|slotsToHighlight
init|=
literal|null
decl_stmt|;
name|Vector
name|slotsToHighlightRed
init|=
literal|null
decl_stmt|;
name|long
name|slotNum
init|=
literal|0
decl_stmt|;
name|long
name|slotNumRed
init|=
literal|0
decl_stmt|;
name|int
name|cellsAcross
decl_stmt|;
name|int
name|cellsDown
decl_stmt|;
name|int
name|cellX
init|=
literal|0
decl_stmt|;
name|int
name|cellY
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|timeVertical
condition|)
block|{
name|cellsAcross
operator|=
name|maxDay
operator|-
name|minDay
operator|+
literal|1
expr_stmt|;
name|cellsDown
operator|=
name|maxTime
operator|-
name|minTime
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
name|cellsAcross
operator|=
name|maxTime
operator|-
name|minTime
operator|+
literal|1
expr_stmt|;
name|cellsDown
operator|=
name|maxDay
operator|-
name|minDay
operator|+
literal|1
expr_stmt|;
block|}
name|BufferedImage
name|image
init|=
operator|new
name|BufferedImage
argument_list|(
operator|(
operator|(
name|cellsAcross
operator|*
name|cellWidth
operator|)
operator|+
operator|(
name|cellsAcross
operator|)
operator|+
literal|1
operator|)
operator|*
name|lineWidth
argument_list|,
operator|(
name|cellsDown
operator|*
name|cellWidth
operator|)
operator|+
operator|(
operator|(
name|cellsDown
operator|+
literal|1
operator|)
operator|*
name|lineWidth
operator|)
argument_list|,
name|BufferedImage
operator|.
name|TYPE_INT_RGB
argument_list|)
decl_stmt|;
name|WritableRaster
name|raster
init|=
name|image
operator|.
name|getRaster
argument_list|()
decl_stmt|;
name|int
name|width
init|=
name|image
operator|.
name|getWidth
argument_list|()
decl_stmt|;
name|int
name|height
init|=
name|image
operator|.
name|getHeight
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|cellY2
init|=
literal|0
init|;
name|cellY2
operator|<
operator|(
name|cellsDown
operator|+
literal|1
operator|)
condition|;
name|cellY2
operator|++
control|)
block|{
name|drawHline
argument_list|(
name|raster
argument_list|,
literal|0
argument_list|,
name|cellY2
operator|*
operator|(
name|cellWidth
operator|+
name|lineWidth
operator|)
argument_list|,
name|width
argument_list|,
name|Color
operator|.
name|darkGray
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|cellX2
init|=
literal|0
init|;
name|cellX2
operator|<
operator|(
name|cellsAcross
operator|+
literal|1
operator|)
condition|;
name|cellX2
operator|++
control|)
block|{
name|drawVline
argument_list|(
name|raster
argument_list|,
name|cellX2
operator|*
operator|(
name|cellWidth
operator|+
name|lineWidth
operator|)
argument_list|,
literal|0
argument_list|,
name|height
argument_list|,
name|Color
operator|.
name|darkGray
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|day
init|=
name|minDay
init|;
name|day
operator|<=
name|maxDay
condition|;
name|day
operator|++
control|)
block|{
if|if
condition|(
name|timeVertical
condition|)
name|cellX
operator|=
name|day
operator|-
name|minDay
expr_stmt|;
else|else
name|cellY
operator|=
name|day
operator|-
name|minDay
expr_stmt|;
for|for
control|(
name|int
name|time
init|=
name|minTime
init|;
name|time
operator|<=
name|maxTime
condition|;
name|time
operator|++
control|)
block|{
if|if
condition|(
name|timeVertical
condition|)
name|cellY
operator|=
name|time
operator|-
name|minTime
expr_stmt|;
else|else
name|cellX
operator|=
name|time
operator|-
name|minTime
expr_stmt|;
name|String
name|pref
init|=
name|iModel
operator|.
name|getPreference
argument_list|(
name|day
argument_list|,
name|time
argument_list|)
decl_stmt|;
if|if
condition|(
name|pref
operator|==
literal|null
condition|)
name|pref
operator|=
name|PreferenceLevel
operator|.
name|sNeutral
expr_stmt|;
name|Color
name|color
init|=
name|iModel
operator|.
name|getPreferenceColor
argument_list|(
name|pref
argument_list|)
decl_stmt|;
name|Color
name|borderColor
init|=
name|iModel
operator|.
name|getBorder
argument_list|(
name|day
argument_list|,
name|time
argument_list|)
decl_stmt|;
if|if
condition|(
name|borderColor
operator|!=
literal|null
condition|)
block|{
name|fillRect
argument_list|(
name|raster
argument_list|,
name|cellX
operator|*
operator|(
name|cellWidth
operator|+
name|lineWidth
operator|)
argument_list|,
name|cellY
operator|*
operator|(
name|cellWidth
operator|+
name|lineWidth
operator|)
argument_list|,
name|cellWidth
operator|+
literal|2
argument_list|,
name|cellWidth
operator|+
literal|2
argument_list|,
name|borderColor
argument_list|)
expr_stmt|;
name|fillRect
argument_list|(
name|raster
argument_list|,
operator|(
name|cellX
operator|*
operator|(
name|cellWidth
operator|+
name|lineWidth
operator|)
operator|)
operator|+
literal|2
argument_list|,
operator|(
name|cellY
operator|*
operator|(
name|cellWidth
operator|+
name|lineWidth
operator|)
operator|)
operator|+
literal|2
argument_list|,
name|cellWidth
operator|-
literal|2
argument_list|,
name|cellWidth
operator|-
literal|2
argument_list|,
name|color
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fillRect
argument_list|(
name|raster
argument_list|,
operator|(
name|cellX
operator|*
operator|(
name|cellWidth
operator|+
name|lineWidth
operator|)
operator|)
operator|+
literal|1
argument_list|,
operator|(
name|cellY
operator|*
operator|(
name|cellWidth
operator|+
name|lineWidth
operator|)
operator|)
operator|+
literal|1
argument_list|,
name|cellWidth
argument_list|,
name|cellWidth
argument_list|,
name|color
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|image
return|;
block|}
comment|/** create a table image -- returns appropriate file (table is not created when the file already exists -- cache) */
specifier|public
name|File
name|createImage
parameter_list|(
name|boolean
name|timeVertical
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
if|if
condition|(
name|getModel
argument_list|()
operator|.
name|isExactTime
argument_list|()
condition|)
return|return
literal|null
return|;
name|char
name|axisId
decl_stmt|;
if|if
condition|(
name|timeVertical
condition|)
block|{
name|axisId
operator|=
literal|'V'
expr_stmt|;
block|}
else|else
block|{
name|axisId
operator|=
literal|'H'
expr_stmt|;
block|}
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|ApplicationProperties
operator|.
name|getTempFolder
argument_list|()
argument_list|,
name|getModel
argument_list|()
operator|.
name|getFileName
argument_list|()
operator|+
name|axisId
operator|+
literal|".png"
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|file
return|;
block|}
name|file
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|createNewFile
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Unable to write file "
operator|+
name|file
argument_list|)
expr_stmt|;
name|file
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"temp"
argument_list|,
literal|".PNG"
argument_list|,
name|ApplicationProperties
operator|.
name|getTempFolder
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Unable to write file "
operator|+
name|file
argument_list|)
expr_stmt|;
name|file
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"temp"
argument_list|,
literal|".PNG"
argument_list|,
name|ApplicationProperties
operator|.
name|getTempFolder
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//       Debug.log("Writing image " + file + " ...");
name|javax
operator|.
name|imageio
operator|.
name|ImageIO
operator|.
name|write
argument_list|(
name|createBufferedImage
argument_list|(
name|timeVertical
argument_list|)
argument_list|,
literal|"PNG"
argument_list|,
name|file
argument_list|)
expr_stmt|;
return|return
name|file
return|;
block|}
block|}
end_class

end_unit

