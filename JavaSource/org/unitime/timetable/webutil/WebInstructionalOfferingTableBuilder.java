begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.1 (University Timetabling Application)  * Copyright (C) 2008-2009, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|jsp
operator|.
name|JspWriter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
operator|.
name|IntEnumeration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|htmlgen
operator|.
name|TableCell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|htmlgen
operator|.
name|TableHeaderCell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|htmlgen
operator|.
name|TableRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|htmlgen
operator|.
name|TableStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|InstructionalOfferingListForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|InstructionalOfferingListFormInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|BuildingPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeaturePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomGroupPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentClassEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|ClassComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|InstrOfferingConfigComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|SchedulingSubpartComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstructionalOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|CachedClassAssignmentProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ClassAssignmentProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ExamAssignmentProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|AssignmentPreferenceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  * @author Stephanie Schluttenhofer  */
end_comment

begin_class
specifier|public
class|class
name|WebInstructionalOfferingTableBuilder
block|{
specifier|protected
specifier|static
name|SimpleDateFormat
name|sDateFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd"
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|DecimalFormat
name|sRoomRatioFormat
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0.00"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|String
name|indent
init|=
literal|"&nbsp;&nbsp;&nbsp;&nbsp;"
decl_stmt|;
specifier|protected
specifier|static
name|String
name|oddRowBGColor
init|=
literal|"#DFE7F2"
decl_stmt|;
specifier|protected
specifier|static
name|String
name|oddRowBGColorChild
init|=
literal|"#EFEFEF"
decl_stmt|;
specifier|protected
specifier|static
name|String
name|oddRowMouseOverBGColor
init|=
literal|"#8EACD0"
decl_stmt|;
specifier|protected
specifier|static
name|String
name|evenRowMouseOverBGColor
init|=
literal|"#8EACD0"
decl_stmt|;
specifier|protected
name|String
name|disabledColor
init|=
literal|"gray"
decl_stmt|;
specifier|protected
specifier|static
name|String
name|formName
init|=
literal|"instructionalOfferingListForm"
decl_stmt|;
comment|//available columns for table
specifier|protected
specifier|static
name|String
name|LABEL
init|=
literal|"&nbsp;"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DIV_SEC
init|=
literal|"External Id"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEMAND
init|=
literal|"Enrollment"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROJECTED_DEMAND
init|=
literal|"Projected Demand"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|LIMIT
init|=
literal|"Limit"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ROOM_RATIO
init|=
literal|"Room Ratio"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MIN_PER_WK
init|=
literal|"Mins Per Week"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MANAGER
init|=
literal|"Manager"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DATE_PATTERN
init|=
literal|"Date Pattern"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TIME_PATTERN
init|=
literal|"Time Pattern"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|INSTRUCTOR
init|=
literal|"Instructor"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PREFERENCES
init|=
literal|"Preferences"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TIMETABLE
init|=
literal|"Timetable"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CREDIT
init|=
literal|"Offering Credit"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SCHEDULING_SUBPART_CREDIT
init|=
literal|"Subpart Credit"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SCHEDULE_PRINT_NOTE_FILTER
init|=
literal|"Schedule of Classes Notes"
decl_stmt|;
specifier|public
specifier|static
name|String
name|SCHEDULE_PRINT_NOTE
init|=
literal|"Schedule of Classes Notes"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NOTE
init|=
literal|"Note to Schedule Manager"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TITLE
init|=
literal|"Title"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CONSENT
init|=
literal|"Consent"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DESIGNATOR_REQ
init|=
literal|"Designator Required"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|EXAM
init|=
literal|"Examination"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|EXAM_NAME
init|=
literal|"Name"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|EXAM_PER
init|=
literal|"Period"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|EXAM_ROOM
init|=
literal|"Room"
decl_stmt|;
comment|// Preference Labels
specifier|protected
specifier|static
name|String
name|TIME
init|=
literal|"Time"
decl_stmt|;
specifier|protected
specifier|static
name|String
name|ROOMGR
init|=
literal|"Room&nbsp;Group"
decl_stmt|;
specifier|protected
specifier|static
name|String
name|BLDG
init|=
literal|"Bldg"
decl_stmt|;
specifier|protected
specifier|static
name|String
name|ROOM
init|=
literal|"Room"
decl_stmt|;
specifier|protected
specifier|static
name|String
name|FEATURES
init|=
literal|"Features"
decl_stmt|;
specifier|protected
specifier|static
name|String
name|DISTRIBUTION
init|=
literal|"Distribution"
decl_stmt|;
specifier|protected
specifier|static
name|String
name|ALL_ROOM
init|=
literal|"Room"
decl_stmt|;
comment|// Timetable Labels
specifier|protected
specifier|static
name|String
name|ASSIGNED_TIME
init|=
literal|"Time"
decl_stmt|;
specifier|protected
specifier|static
name|String
name|ASSIGNED_ROOM
init|=
literal|"Room"
decl_stmt|;
specifier|protected
specifier|static
name|String
name|ASSIGNED_ROOM_CAPACITY
init|=
literal|"Room Cap"
decl_stmt|;
specifier|protected
specifier|static
name|String
index|[]
name|COLUMNS
init|=
block|{
name|LABEL
block|,
name|TITLE
block|,
name|DIV_SEC
block|,
name|DEMAND
block|,
name|PROJECTED_DEMAND
block|,
name|CONSENT
block|,
name|DESIGNATOR_REQ
block|,
name|MIN_PER_WK
block|,
name|LIMIT
block|,
name|ROOM_RATIO
block|,
name|MANAGER
block|,
name|DATE_PATTERN
block|,
name|TIME_PATTERN
block|,
name|PREFERENCES
block|,
name|INSTRUCTOR
block|,
name|TIMETABLE
block|,
name|CREDIT
block|,
name|SCHEDULING_SUBPART_CREDIT
block|,
name|SCHEDULE_PRINT_NOTE
block|,
name|NOTE
block|,
name|EXAM
block|}
decl_stmt|;
comment|//set to false for old behaviour
specifier|protected
specifier|static
specifier|final
name|boolean
name|sAggregateRoomPrefs
init|=
literal|true
decl_stmt|;
specifier|protected
specifier|static
name|String
index|[]
name|PREFERENCE_COLUMN_ORDER
init|=
operator|(
name|sAggregateRoomPrefs
condition|?
operator|new
name|String
index|[]
block|{
name|TIME
block|,
name|ALL_ROOM
block|,
name|DISTRIBUTION
block|}
else|:
operator|new
name|String
index|[]
block|{
name|TIME
block|,
name|ROOMGR
block|,
name|BLDG
block|,
name|ROOM
block|,
name|FEATURES
block|,
name|DISTRIBUTION
block|}
operator|)
decl_stmt|;
specifier|protected
specifier|static
name|String
index|[]
name|TIMETABLE_COLUMN_ORDER
init|=
block|{
name|ASSIGNED_TIME
block|,
name|ASSIGNED_ROOM
block|,
name|ASSIGNED_ROOM_CAPACITY
block|}
decl_stmt|;
specifier|private
name|boolean
name|showLabel
decl_stmt|;
specifier|private
name|boolean
name|showDivSec
decl_stmt|;
specifier|private
name|boolean
name|showDemand
decl_stmt|;
specifier|private
name|boolean
name|showProjectedDemand
decl_stmt|;
specifier|private
name|boolean
name|showMinPerWk
decl_stmt|;
specifier|private
name|boolean
name|showLimit
decl_stmt|;
specifier|private
name|boolean
name|showRoomRatio
decl_stmt|;
specifier|private
name|boolean
name|showManager
decl_stmt|;
specifier|private
name|boolean
name|showDatePattern
decl_stmt|;
specifier|private
name|boolean
name|showTimePattern
decl_stmt|;
specifier|private
name|boolean
name|showPreferences
decl_stmt|;
specifier|private
name|boolean
name|showInstructor
decl_stmt|;
specifier|private
name|boolean
name|showTimetable
decl_stmt|;
specifier|private
name|boolean
name|showCredit
decl_stmt|;
specifier|private
name|boolean
name|showSubpartCredit
decl_stmt|;
specifier|private
name|boolean
name|showSchedulePrintNote
decl_stmt|;
specifier|private
name|boolean
name|showNote
decl_stmt|;
specifier|private
name|boolean
name|showTitle
decl_stmt|;
specifier|private
name|boolean
name|showConsent
decl_stmt|;
specifier|private
name|boolean
name|showDesignatorRequired
decl_stmt|;
specifier|private
name|boolean
name|showExam
decl_stmt|;
specifier|private
name|boolean
name|showExamName
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|showExamTimetable
decl_stmt|;
specifier|private
name|boolean
name|iDisplayDistributionPrefs
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|iDisplayTimetable
init|=
literal|true
decl_stmt|;
specifier|private
name|String
name|iBackType
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iBackId
init|=
literal|null
decl_stmt|;
specifier|private
name|Comparator
name|iClassComparator
init|=
operator|new
name|ClassComparator
argument_list|(
name|ClassComparator
operator|.
name|COMPARE_BY_ITYPE
argument_list|)
decl_stmt|;
comment|// Set whether edit/modify config buttons are displayed
specifier|private
name|boolean
name|displayConfigOpButtons
init|=
literal|false
decl_stmt|;
specifier|public
name|void
name|setDisplayConfigOpButtons
parameter_list|(
name|boolean
name|displayConfigOpButtons
parameter_list|)
block|{
name|this
operator|.
name|displayConfigOpButtons
operator|=
name|displayConfigOpButtons
expr_stmt|;
block|}
specifier|public
name|boolean
name|getDisplayConfigOpButtons
parameter_list|()
block|{
return|return
name|this
operator|.
name|displayConfigOpButtons
return|;
block|}
specifier|public
name|void
name|setDisplayDistributionPrefs
parameter_list|(
name|boolean
name|displayDistributionPrefs
parameter_list|)
block|{
name|iDisplayDistributionPrefs
operator|=
name|displayDistributionPrefs
expr_stmt|;
block|}
specifier|public
name|boolean
name|getDisplayDistributionPrefs
parameter_list|()
block|{
return|return
name|iDisplayDistributionPrefs
return|;
block|}
specifier|public
name|void
name|setDisplayTimetable
parameter_list|(
name|boolean
name|displayTimetable
parameter_list|)
block|{
name|iDisplayTimetable
operator|=
name|displayTimetable
expr_stmt|;
block|}
specifier|public
name|boolean
name|getDisplayTimetable
parameter_list|()
block|{
return|return
name|iDisplayTimetable
return|;
block|}
specifier|private
name|boolean
name|iTimeVertical
init|=
literal|false
decl_stmt|;
specifier|public
name|void
name|setTimeVertival
parameter_list|(
name|boolean
name|timeVertical
parameter_list|)
block|{
name|iTimeVertical
operator|=
name|timeVertical
expr_stmt|;
block|}
specifier|public
name|boolean
name|getTimeVertival
parameter_list|()
block|{
return|return
name|iTimeVertical
return|;
block|}
specifier|private
name|boolean
name|iGridAsText
init|=
literal|false
decl_stmt|;
specifier|public
name|void
name|setGridAsText
parameter_list|(
name|boolean
name|gridAsText
parameter_list|)
block|{
name|iGridAsText
operator|=
name|gridAsText
expr_stmt|;
block|}
specifier|public
name|boolean
name|getGridAsText
parameter_list|()
block|{
return|return
name|iGridAsText
return|;
block|}
specifier|public
name|String
name|iInstructorNameFormat
init|=
literal|"last-first"
decl_stmt|;
specifier|public
name|void
name|setInstructorNameFormat
parameter_list|(
name|String
name|instructorNameFormat
parameter_list|)
block|{
name|iInstructorNameFormat
operator|=
name|instructorNameFormat
expr_stmt|;
block|}
specifier|public
name|String
name|getInstructorNameFormat
parameter_list|()
block|{
return|return
name|iInstructorNameFormat
return|;
block|}
specifier|public
name|String
name|iDefaultTimeGridSize
init|=
literal|null
decl_stmt|;
specifier|public
name|void
name|setDefaultTimeGridSize
parameter_list|(
name|String
name|defaultTimeGridSize
parameter_list|)
block|{
name|iDefaultTimeGridSize
operator|=
name|defaultTimeGridSize
expr_stmt|;
block|}
specifier|public
name|String
name|getDefaultTimeGridSize
parameter_list|()
block|{
return|return
name|iDefaultTimeGridSize
return|;
block|}
specifier|public
name|void
name|setUserSettings
parameter_list|(
name|User
name|user
parameter_list|)
block|{
name|setTimeVertival
argument_list|(
name|RequiredTimeTable
operator|.
name|getTimeGridVertical
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|setGridAsText
argument_list|(
name|RequiredTimeTable
operator|.
name|getTimeGridAsText
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|setInstructorNameFormat
argument_list|(
name|Settings
operator|.
name|getSettingValue
argument_list|(
name|user
argument_list|,
name|Constants
operator|.
name|SETTINGS_INSTRUCTOR_NAME_FORMAT
argument_list|)
argument_list|)
expr_stmt|;
name|setDefaultTimeGridSize
argument_list|(
name|RequiredTimeTable
operator|.
name|getTimeGridSize
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isShowConsent
parameter_list|()
block|{
return|return
name|showConsent
return|;
block|}
specifier|public
name|void
name|setShowConsent
parameter_list|(
name|boolean
name|showConsent
parameter_list|)
block|{
name|this
operator|.
name|showConsent
operator|=
name|showConsent
expr_stmt|;
block|}
specifier|public
name|boolean
name|isShowDesignatorRequired
parameter_list|()
block|{
return|return
name|showDesignatorRequired
return|;
block|}
specifier|public
name|void
name|setShowDesignatorRequired
parameter_list|(
name|boolean
name|showDesignatorRequired
parameter_list|)
block|{
name|this
operator|.
name|showDesignatorRequired
operator|=
name|showDesignatorRequired
expr_stmt|;
block|}
specifier|public
name|boolean
name|isShowTitle
parameter_list|()
block|{
return|return
name|showTitle
return|;
block|}
specifier|public
name|void
name|setShowTitle
parameter_list|(
name|boolean
name|showTitle
parameter_list|)
block|{
name|this
operator|.
name|showTitle
operator|=
name|showTitle
expr_stmt|;
block|}
specifier|public
name|boolean
name|isShowExam
parameter_list|()
block|{
return|return
name|showExam
return|;
block|}
specifier|public
name|void
name|setShowExam
parameter_list|(
name|boolean
name|showExam
parameter_list|)
block|{
name|this
operator|.
name|showExam
operator|=
name|showExam
expr_stmt|;
block|}
specifier|public
name|boolean
name|isShowExamName
parameter_list|()
block|{
return|return
name|showExamName
return|;
block|}
specifier|public
name|void
name|setShowExamName
parameter_list|(
name|boolean
name|showExamName
parameter_list|)
block|{
name|this
operator|.
name|showExamName
operator|=
name|showExamName
expr_stmt|;
block|}
specifier|public
name|boolean
name|isShowExamTimetable
parameter_list|()
block|{
return|return
name|showExamTimetable
return|;
block|}
specifier|public
name|void
name|setShowExamTimetable
parameter_list|(
name|boolean
name|showExamTimetable
parameter_list|)
block|{
name|this
operator|.
name|showExamTimetable
operator|=
name|showExamTimetable
expr_stmt|;
block|}
comment|/**      *       */
specifier|public
name|WebInstructionalOfferingTableBuilder
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|String
name|getRowMouseOver
parameter_list|(
name|boolean
name|isHeaderRow
parameter_list|,
name|boolean
name|isControl
parameter_list|)
block|{
return|return
operator|(
literal|"this.style.backgroundColor='"
operator|+
operator|(
name|isHeaderRow
condition|?
name|oddRowMouseOverBGColor
else|:
name|evenRowMouseOverBGColor
operator|)
operator|+
literal|"';this.style.cursor='"
operator|+
operator|(
name|isControl
condition|?
literal|"hand"
else|:
literal|"default"
operator|)
operator|+
literal|"';this.style.cursor='"
operator|+
operator|(
name|isControl
condition|?
literal|"pointer"
else|:
literal|"default"
operator|)
operator|+
literal|"';"
operator|)
return|;
block|}
specifier|protected
name|String
name|getRowMouseOut
parameter_list|(
name|boolean
name|isHeaderRow
parameter_list|)
block|{
return|return
operator|(
literal|"this.style.backgroundColor='"
operator|+
operator|(
name|isHeaderRow
condition|?
name|oddRowBGColor
else|:
literal|"transparent"
operator|)
operator|+
literal|"';"
operator|)
return|;
block|}
specifier|protected
name|String
name|getRowMouseOut
parameter_list|(
name|boolean
name|isHeaderRow
parameter_list|,
name|int
name|ct
parameter_list|)
block|{
return|return
operator|(
literal|"this.style.backgroundColor='"
operator|+
operator|(
name|isHeaderRow
condition|?
name|oddRowBGColor
else|:
operator|(
operator|(
name|ct
operator|%
literal|2
operator|==
literal|1
operator|)
condition|?
name|oddRowBGColorChild
else|:
literal|"transparent"
operator|)
operator|)
operator|+
literal|"';"
operator|)
return|;
block|}
specifier|protected
name|TableRow
name|initRow
parameter_list|(
name|boolean
name|isHeaderRow
parameter_list|)
block|{
name|TableRow
name|row
init|=
operator|new
name|TableRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|isHeaderRow
condition|)
block|{
name|row
operator|.
name|setBgColor
argument_list|(
name|oddRowBGColor
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|row
operator|)
return|;
block|}
specifier|protected
name|TableHeaderCell
name|headerCell
parameter_list|(
name|String
name|content
parameter_list|,
name|int
name|rowSpan
parameter_list|,
name|int
name|colSpan
parameter_list|)
block|{
name|TableHeaderCell
name|cell
init|=
operator|new
name|TableHeaderCell
argument_list|()
decl_stmt|;
name|cell
operator|.
name|setRowSpan
argument_list|(
name|rowSpan
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setColSpan
argument_list|(
name|colSpan
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setAlign
argument_list|(
literal|"left"
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setValign
argument_list|(
literal|"bottom"
argument_list|)
expr_stmt|;
name|cell
operator|.
name|addContent
argument_list|(
literal|"<font size=\"-1\">"
argument_list|)
expr_stmt|;
name|cell
operator|.
name|addContent
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|cell
operator|.
name|addContent
argument_list|(
literal|"</font>"
argument_list|)
expr_stmt|;
return|return
operator|(
name|cell
operator|)
return|;
block|}
specifier|private
name|TableCell
name|initCell
parameter_list|(
name|boolean
name|isEditable
parameter_list|,
name|String
name|onClick
parameter_list|)
block|{
return|return
operator|(
name|initCell
argument_list|(
name|isEditable
argument_list|,
name|onClick
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
operator|)
return|;
block|}
specifier|private
name|TableCell
name|initCell
parameter_list|(
name|boolean
name|isEditable
parameter_list|,
name|String
name|onClick
parameter_list|,
name|int
name|cols
parameter_list|)
block|{
return|return
operator|(
name|initCell
argument_list|(
name|isEditable
argument_list|,
name|onClick
argument_list|,
name|cols
argument_list|,
literal|false
argument_list|)
operator|)
return|;
block|}
specifier|private
name|TableCell
name|initCell
parameter_list|(
name|boolean
name|isEditable
parameter_list|,
name|String
name|onClick
parameter_list|,
name|int
name|cols
parameter_list|,
name|boolean
name|nowrap
parameter_list|)
block|{
name|TableCell
name|cell
init|=
operator|new
name|TableCell
argument_list|()
decl_stmt|;
name|cell
operator|.
name|setValign
argument_list|(
literal|"top"
argument_list|)
expr_stmt|;
if|if
condition|(
name|cols
operator|>
literal|1
condition|)
block|{
name|cell
operator|.
name|setColSpan
argument_list|(
name|cols
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nowrap
condition|)
block|{
name|cell
operator|.
name|setNoWrap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|onClick
operator|!=
literal|null
operator|&&
name|onClick
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|cell
operator|.
name|setOnClick
argument_list|(
name|onClick
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isEditable
condition|)
block|{
name|cell
operator|.
name|addContent
argument_list|(
literal|"<font color="
operator|+
name|disabledColor
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|cell
operator|)
return|;
block|}
specifier|private
name|void
name|endCell
parameter_list|(
name|TableCell
name|cell
parameter_list|,
name|boolean
name|isEditable
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isEditable
condition|)
block|{
name|cell
operator|.
name|addContent
argument_list|(
literal|"</font>"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|TableCell
name|initNormalCell
parameter_list|(
name|String
name|text
parameter_list|,
name|boolean
name|isEditable
parameter_list|)
block|{
return|return
operator|(
name|initColSpanCell
argument_list|(
name|text
argument_list|,
name|isEditable
argument_list|,
literal|1
argument_list|)
operator|)
return|;
block|}
specifier|private
name|TableCell
name|initColSpanCell
parameter_list|(
name|String
name|text
parameter_list|,
name|boolean
name|isEditable
parameter_list|,
name|int
name|cols
parameter_list|)
block|{
name|TableCell
name|cell
init|=
name|initCell
argument_list|(
name|isEditable
argument_list|,
literal|null
argument_list|,
name|cols
argument_list|)
decl_stmt|;
name|cell
operator|.
name|addContent
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|endCell
argument_list|(
name|cell
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
return|return
operator|(
name|cell
operator|)
return|;
block|}
comment|//NOTE: if changing column order column order must be changed in
comment|//		buildTableHeader, addInstrOffrRowsToTable, buildClassOrSubpartRow, and buildConfigRow
specifier|protected
name|void
name|buildTableHeader
parameter_list|(
name|TableStream
name|table
parameter_list|,
name|Long
name|sessionId
parameter_list|)
block|{
name|TableRow
name|row
init|=
operator|new
name|TableRow
argument_list|()
decl_stmt|;
name|TableRow
name|row2
init|=
operator|new
name|TableRow
argument_list|()
decl_stmt|;
name|TableHeaderCell
name|cell
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isShowLabel
argument_list|()
condition|)
block|{
name|cell
operator|=
name|this
operator|.
name|headerCell
argument_list|(
name|LABEL
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cell
operator|.
name|addContent
argument_list|(
literal|"<hr>"
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowDivSec
argument_list|()
condition|)
block|{
name|cell
operator|=
name|this
operator|.
name|headerCell
argument_list|(
name|DIV_SEC
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cell
operator|.
name|addContent
argument_list|(
literal|"<hr>"
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowDemand
argument_list|()
condition|)
block|{
if|if
condition|(
name|StudentClassEnrollment
operator|.
name|sessionHasEnrollments
argument_list|(
name|sessionId
argument_list|)
condition|)
block|{
name|cell
operator|=
name|this
operator|.
name|headerCell
argument_list|(
name|DEMAND
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cell
operator|=
name|this
operator|.
name|headerCell
argument_list|(
operator|(
literal|"Last "
operator|+
name|DEMAND
operator|)
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|cell
operator|.
name|addContent
argument_list|(
literal|"<hr>"
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowProjectedDemand
argument_list|()
condition|)
block|{
name|cell
operator|=
name|this
operator|.
name|headerCell
argument_list|(
name|PROJECTED_DEMAND
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cell
operator|.
name|addContent
argument_list|(
literal|"<hr>"
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowLimit
argument_list|()
condition|)
block|{
name|cell
operator|=
name|this
operator|.
name|headerCell
argument_list|(
name|LIMIT
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cell
operator|.
name|addContent
argument_list|(
literal|"<hr>"
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowRoomRatio
argument_list|()
condition|)
block|{
name|cell
operator|=
name|this
operator|.
name|headerCell
argument_list|(
name|ROOM_RATIO
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cell
operator|.
name|addContent
argument_list|(
literal|"<hr>"
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowManager
argument_list|()
condition|)
block|{
name|cell
operator|=
name|this
operator|.
name|headerCell
argument_list|(
name|MANAGER
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cell
operator|.
name|addContent
argument_list|(
literal|"<hr>"
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowDatePattern
argument_list|()
condition|)
block|{
name|cell
operator|=
name|this
operator|.
name|headerCell
argument_list|(
name|DATE_PATTERN
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cell
operator|.
name|addContent
argument_list|(
literal|"<hr>"
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowMinPerWk
argument_list|()
condition|)
block|{
name|cell
operator|=
name|this
operator|.
name|headerCell
argument_list|(
name|MIN_PER_WK
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cell
operator|.
name|addContent
argument_list|(
literal|"<hr>"
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowTimePattern
argument_list|()
condition|)
block|{
name|cell
operator|=
name|this
operator|.
name|headerCell
argument_list|(
name|TIME_PATTERN
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cell
operator|.
name|addContent
argument_list|(
literal|"<hr>"
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowPreferences
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
literal|"----"
operator|+
name|PREFERENCES
operator|+
literal|"----"
argument_list|,
literal|1
argument_list|,
name|PREFERENCE_COLUMN_ORDER
operator|.
name|length
operator|+
operator|(
name|iDisplayDistributionPrefs
condition|?
literal|0
else|:
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|PREFERENCE_COLUMN_ORDER
operator|.
name|length
operator|+
operator|(
name|iDisplayDistributionPrefs
condition|?
literal|0
else|:
operator|-
literal|1
operator|)
condition|;
name|j
operator|++
control|)
block|{
name|row2
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
name|PREFERENCE_COLUMN_ORDER
index|[
name|j
index|]
operator|+
literal|"<hr>"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isShowInstructor
argument_list|()
condition|)
block|{
name|cell
operator|=
name|this
operator|.
name|headerCell
argument_list|(
name|INSTRUCTOR
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cell
operator|.
name|addContent
argument_list|(
literal|"<hr>"
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getDisplayTimetable
argument_list|()
operator|&&
name|isShowTimetable
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|headerCell
argument_list|(
literal|"--------"
operator|+
name|TIMETABLE
operator|+
literal|"--------"
argument_list|,
literal|1
argument_list|,
name|TIMETABLE_COLUMN_ORDER
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|TIMETABLE_COLUMN_ORDER
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|cell
operator|=
name|headerCell
argument_list|(
name|TIMETABLE_COLUMN_ORDER
index|[
name|j
index|]
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cell
operator|.
name|addContent
argument_list|(
literal|"<hr>"
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setNoWrap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|row2
operator|.
name|addContent
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isShowTitle
argument_list|()
condition|)
block|{
name|cell
operator|=
name|this
operator|.
name|headerCell
argument_list|(
name|TITLE
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cell
operator|.
name|addContent
argument_list|(
literal|"<hr>"
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowCredit
argument_list|()
condition|)
block|{
name|cell
operator|=
name|this
operator|.
name|headerCell
argument_list|(
name|CREDIT
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cell
operator|.
name|addContent
argument_list|(
literal|"<hr>"
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowSubpartCredit
argument_list|()
condition|)
block|{
name|cell
operator|=
name|this
operator|.
name|headerCell
argument_list|(
name|SCHEDULING_SUBPART_CREDIT
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cell
operator|.
name|addContent
argument_list|(
literal|"<hr>"
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowConsent
argument_list|()
condition|)
block|{
name|cell
operator|=
name|this
operator|.
name|headerCell
argument_list|(
name|CONSENT
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cell
operator|.
name|addContent
argument_list|(
literal|"<hr>"
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowDesignatorRequired
argument_list|()
condition|)
block|{
name|cell
operator|=
name|this
operator|.
name|headerCell
argument_list|(
name|DESIGNATOR_REQ
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cell
operator|.
name|addContent
argument_list|(
literal|"<hr>"
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowSchedulePrintNote
argument_list|()
condition|)
block|{
name|cell
operator|=
name|this
operator|.
name|headerCell
argument_list|(
name|this
operator|.
name|getSchedulePrintNoteLabel
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cell
operator|.
name|addContent
argument_list|(
literal|"<hr>"
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowNote
argument_list|()
condition|)
block|{
name|cell
operator|=
name|this
operator|.
name|headerCell
argument_list|(
name|NOTE
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cell
operator|.
name|addContent
argument_list|(
literal|"<hr>"
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowExam
argument_list|()
condition|)
block|{
name|cell
operator|=
name|headerCell
argument_list|(
literal|"-----------"
operator|+
name|EXAM
operator|+
literal|"--------"
argument_list|,
literal|1
argument_list|,
operator|(
name|isShowExamName
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
operator|+
operator|(
name|isShowExamTimetable
argument_list|()
condition|?
literal|2
else|:
literal|0
operator|)
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setNoWrap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|)
expr_stmt|;
if|if
condition|(
name|isShowExamName
argument_list|()
condition|)
block|{
name|cell
operator|=
name|headerCell
argument_list|(
name|EXAM_NAME
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cell
operator|.
name|addContent
argument_list|(
literal|"<hr>"
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setNoWrap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|row2
operator|.
name|addContent
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowExamTimetable
argument_list|()
condition|)
block|{
name|cell
operator|=
name|headerCell
argument_list|(
name|EXAM_PER
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cell
operator|.
name|addContent
argument_list|(
literal|"<hr>"
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setNoWrap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|row2
operator|.
name|addContent
argument_list|(
name|cell
argument_list|)
expr_stmt|;
name|cell
operator|=
name|headerCell
argument_list|(
name|EXAM_ROOM
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cell
operator|.
name|addContent
argument_list|(
literal|"<hr>"
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setNoWrap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|row2
operator|.
name|addContent
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
block|}
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row2
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|String
name|getSchedulePrintNoteLabel
parameter_list|()
block|{
return|return
operator|(
name|SCHEDULE_PRINT_NOTE
operator|)
return|;
block|}
specifier|private
name|String
name|subjectOnClickAction
parameter_list|(
name|Long
name|instrOfferingId
parameter_list|)
block|{
return|return
operator|(
literal|"document.location='instructionalOfferingDetail.do?op=view&io="
operator|+
name|instrOfferingId
operator|+
literal|"';"
operator|)
return|;
block|}
specifier|private
name|TableCell
name|subjectAndCourseInfo
parameter_list|(
name|InstructionalOffering
name|io
parameter_list|,
name|CourseOffering
name|co
parameter_list|)
block|{
name|TableCell
name|cell
init|=
name|this
operator|.
name|initCell
argument_list|(
name|co
operator|.
name|isIsControl
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"InstructionalOffering"
operator|.
name|equals
argument_list|(
name|getBackType
argument_list|()
argument_list|)
operator|&&
name|io
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|getBackId
argument_list|()
argument_list|)
condition|)
name|cell
operator|.
name|addContent
argument_list|(
literal|"<A name=\"back\"></A>"
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"PreferenceGroup"
operator|.
name|equals
argument_list|(
name|getBackType
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|ioc
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|ss
init|=
operator|(
name|SchedulingSubpart
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|getBackId
argument_list|()
argument_list|)
condition|)
name|cell
operator|.
name|addContent
argument_list|(
literal|"<A name=\"back\"></A>"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|k
init|=
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|getBackId
argument_list|()
argument_list|)
condition|)
name|cell
operator|.
name|addContent
argument_list|(
literal|"<A name=\"back\"></A>"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|cell
operator|.
name|addContent
argument_list|(
literal|"<A name=\"A"
operator|+
name|io
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"\"></A>"
argument_list|)
expr_stmt|;
name|cell
operator|.
name|addContent
argument_list|(
literal|"<A name=\"A"
operator|+
name|co
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"\"></A>"
argument_list|)
expr_stmt|;
name|cell
operator|.
name|addContent
argument_list|(
name|co
operator|!=
literal|null
condition|?
operator|(
literal|"<span title='"
operator|+
name|co
operator|.
name|getCourseNameWithTitle
argument_list|()
operator|+
literal|"'><b>"
operator|+
name|co
operator|.
name|getSubjectAreaAbbv
argument_list|()
operator|+
literal|"</b>"
operator|)
else|:
literal|""
argument_list|)
expr_stmt|;
name|cell
operator|.
name|addContent
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|cell
operator|.
name|addContent
argument_list|(
name|co
operator|!=
literal|null
condition|?
operator|(
literal|"<b>"
operator|+
name|co
operator|.
name|getCourseNbr
argument_list|()
operator|+
literal|"</b></span>"
operator|)
else|:
literal|""
argument_list|)
expr_stmt|;
name|Iterator
name|it
init|=
name|io
operator|.
name|courseOfferingsMinusSortCourseOfferingForSubjectArea
argument_list|(
name|co
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|StringBuffer
name|addlCos
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|CourseOffering
name|tempCo
init|=
literal|null
decl_stmt|;
name|addlCos
operator|.
name|append
argument_list|(
literal|"<font color='"
operator|+
name|disabledColor
operator|+
literal|"'>"
argument_list|)
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|tempCo
operator|=
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|addlCos
operator|.
name|append
argument_list|(
literal|"<br>"
argument_list|)
expr_stmt|;
name|addlCos
operator|.
name|append
argument_list|(
name|indent
argument_list|)
expr_stmt|;
comment|//addlCos.append("<A href=\"courseOfferingEdit.do?co=" + tempCo.getUniqueId() + "\">");
name|addlCos
operator|.
name|append
argument_list|(
literal|"<span title='"
operator|+
name|tempCo
operator|.
name|getCourseNameWithTitle
argument_list|()
operator|+
literal|"'>"
argument_list|)
expr_stmt|;
name|addlCos
operator|.
name|append
argument_list|(
name|tempCo
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|addlCos
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|addlCos
operator|.
name|append
argument_list|(
name|tempCo
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|addlCos
operator|.
name|append
argument_list|(
literal|"</span>"
argument_list|)
expr_stmt|;
comment|//addlCos.append("</A>");
block|}
name|addlCos
operator|.
name|append
argument_list|(
literal|"</font>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|tempCo
operator|!=
literal|null
condition|)
block|{
name|cell
operator|.
name|addContent
argument_list|(
name|addlCos
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|endCell
argument_list|(
name|cell
argument_list|,
name|co
operator|.
name|isIsControl
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|cell
operator|)
return|;
block|}
specifier|protected
name|TableCell
name|buildPrefGroupLabel
parameter_list|(
name|PreferenceGroup
name|prefGroup
parameter_list|,
name|String
name|indentSpaces
parameter_list|,
name|boolean
name|isEditable
parameter_list|,
name|String
name|prevLabel
parameter_list|)
block|{
name|TableCell
name|cell
init|=
name|initNormalCell
argument_list|(
name|indentSpaces
argument_list|,
name|isEditable
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isEditable
condition|)
block|{
name|cell
operator|.
name|addContent
argument_list|(
literal|"<font color='"
operator|+
name|disabledColor
operator|+
literal|"'>"
argument_list|)
expr_stmt|;
block|}
name|cell
operator|.
name|addContent
argument_list|(
literal|"<A name=\"A"
operator|+
name|prefGroup
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"\"></A>"
argument_list|)
expr_stmt|;
name|String
name|label
init|=
name|prefGroup
operator|.
name|htmlLabel
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefGroup
operator|instanceof
name|Class_
condition|)
block|{
name|Class_
name|aClass
init|=
operator|(
name|Class_
operator|)
name|prefGroup
decl_stmt|;
if|if
condition|(
operator|!
name|aClass
operator|.
name|isDisplayInScheduleBook
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|cell
operator|.
name|setTitle
argument_list|(
name|aClass
operator|.
name|getClassLabelWithTitle
argument_list|()
operator|+
literal|" - Do Not Display In Schedule Book."
argument_list|)
expr_stmt|;
name|label
operator|=
literal|"<i>"
operator|+
name|label
operator|+
literal|"</i>"
expr_stmt|;
block|}
else|else
block|{
name|cell
operator|.
name|setTitle
argument_list|(
name|aClass
operator|.
name|getClassLabelWithTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|prevLabel
operator|!=
literal|null
operator|&&
name|label
operator|.
name|equals
argument_list|(
name|prevLabel
argument_list|)
condition|)
block|{
name|label
operator|=
literal|"&nbsp;"
expr_stmt|;
block|}
name|cell
operator|.
name|addContent
argument_list|(
name|label
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setNoWrap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isEditable
condition|)
block|{
name|cell
operator|.
name|addContent
argument_list|(
literal|"</font>"
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|cell
operator|)
return|;
block|}
specifier|private
name|TableCell
name|buildDatePatternCell
parameter_list|(
name|PreferenceGroup
name|prefGroup
parameter_list|,
name|boolean
name|isEditable
parameter_list|)
block|{
name|DatePattern
name|dp
init|=
name|prefGroup
operator|.
name|effectiveDatePattern
argument_list|()
decl_stmt|;
name|TableCell
name|cell
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|dp
operator|==
literal|null
condition|)
block|{
name|cell
operator|=
name|initNormalCell
argument_list|(
literal|""
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cell
operator|=
name|initNormalCell
argument_list|(
literal|"<div title='"
operator|+
name|sDateFormat
operator|.
name|format
argument_list|(
name|dp
operator|.
name|getStartDate
argument_list|()
argument_list|)
operator|+
literal|" - "
operator|+
name|sDateFormat
operator|.
name|format
argument_list|(
name|dp
operator|.
name|getEndDate
argument_list|()
argument_list|)
operator|+
literal|"'>"
operator|+
name|dp
operator|.
name|getName
argument_list|()
operator|+
literal|"</div>"
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
block|}
name|cell
operator|.
name|setAlign
argument_list|(
literal|"center"
argument_list|)
expr_stmt|;
return|return
operator|(
name|cell
operator|)
return|;
block|}
specifier|private
name|TableCell
name|buildTimePatternCell
parameter_list|(
name|PreferenceGroup
name|prefGroup
parameter_list|,
name|boolean
name|isEditable
parameter_list|)
block|{
name|TableCell
name|cell
init|=
name|initNormalCell
argument_list|(
name|prefGroup
operator|.
name|effectiveTimePatternHtml
argument_list|()
argument_list|,
name|isEditable
argument_list|)
decl_stmt|;
name|cell
operator|.
name|setAlign
argument_list|(
literal|"center"
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setNoWrap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|(
name|cell
operator|)
return|;
block|}
specifier|private
name|TableCell
name|buildTimePrefCell
parameter_list|(
name|ClassAssignmentProxy
name|classAssignment
parameter_list|,
name|PreferenceGroup
name|prefGroup
parameter_list|,
name|boolean
name|isEditable
parameter_list|)
block|{
name|Assignment
name|a
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|getDisplayTimetable
argument_list|()
operator|&&
name|isShowTimetable
argument_list|()
operator|&&
name|classAssignment
operator|!=
literal|null
operator|&&
name|prefGroup
operator|instanceof
name|Class_
condition|)
block|{
try|try
block|{
name|a
operator|=
name|classAssignment
operator|.
name|getAssignment
argument_list|(
operator|(
name|Class_
operator|)
name|prefGroup
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|TableCell
name|cell
init|=
name|initNormalCell
argument_list|(
name|prefGroup
operator|.
name|getEffectivePrefHtmlForPrefType
argument_list|(
name|a
argument_list|,
name|TimePref
operator|.
name|class
argument_list|,
name|getTimeVertival
argument_list|()
argument_list|,
name|getGridAsText
argument_list|()
argument_list|,
name|getDefaultTimeGridSize
argument_list|()
argument_list|)
argument_list|,
name|isEditable
argument_list|)
decl_stmt|;
name|cell
operator|.
name|setNoWrap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|(
name|cell
operator|)
return|;
block|}
specifier|private
name|TableCell
name|buildPreferenceCell
parameter_list|(
name|ClassAssignmentProxy
name|classAssignment
parameter_list|,
name|PreferenceGroup
name|prefGroup
parameter_list|,
name|Class
name|prefType
parameter_list|,
name|boolean
name|isEditable
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isEditable
condition|)
return|return
name|initNormalCell
argument_list|(
literal|""
argument_list|,
literal|false
argument_list|)
return|;
if|if
condition|(
name|TimePref
operator|.
name|class
operator|.
name|equals
argument_list|(
name|prefType
argument_list|)
condition|)
block|{
return|return
operator|(
name|buildTimePrefCell
argument_list|(
name|classAssignment
argument_list|,
name|prefGroup
argument_list|,
name|isEditable
argument_list|)
operator|)
return|;
block|}
else|else
block|{
name|TableCell
name|cell
init|=
name|this
operator|.
name|initNormalCell
argument_list|(
name|prefGroup
operator|.
name|getEffectivePrefHtmlForPrefType
argument_list|(
name|prefType
argument_list|)
argument_list|,
name|isEditable
argument_list|)
decl_stmt|;
name|cell
operator|.
name|setNoWrap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|(
name|cell
operator|)
return|;
block|}
block|}
specifier|private
name|TableCell
name|buildPreferenceCell
parameter_list|(
name|ClassAssignmentProxy
name|classAssignment
parameter_list|,
name|PreferenceGroup
name|prefGroup
parameter_list|,
name|Class
index|[]
name|prefTypes
parameter_list|,
name|boolean
name|isEditable
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isEditable
condition|)
return|return
name|initNormalCell
argument_list|(
literal|""
argument_list|,
literal|false
argument_list|)
return|;
name|StringBuffer
name|pref
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|boolean
name|noRoomPrefs
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|prefGroup
operator|instanceof
name|Class_
operator|&&
operator|(
operator|(
name|Class_
operator|)
name|prefGroup
operator|)
operator|.
name|getNbrRooms
argument_list|()
operator|.
name|intValue
argument_list|()
operator|==
literal|0
condition|)
block|{
name|noRoomPrefs
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|prefGroup
operator|instanceof
name|SchedulingSubpart
operator|&&
operator|(
operator|(
name|SchedulingSubpart
operator|)
name|prefGroup
operator|)
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|isUnlimitedEnrollment
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
name|noRoomPrefs
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|prefTypes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Class
name|prefType
init|=
name|prefTypes
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|noRoomPrefs
condition|)
block|{
if|if
condition|(
comment|//prefType.equals(RoomPref.class) ||
name|prefType
operator|.
name|equals
argument_list|(
name|RoomGroupPref
operator|.
name|class
argument_list|)
operator|||
name|prefType
operator|.
name|equals
argument_list|(
name|RoomFeaturePref
operator|.
name|class
argument_list|)
operator|||
name|prefType
operator|.
name|equals
argument_list|(
name|BuildingPref
operator|.
name|class
argument_list|)
condition|)
continue|continue;
block|}
name|String
name|x
init|=
name|prefGroup
operator|.
name|getEffectivePrefHtmlForPrefType
argument_list|(
name|prefType
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|!=
literal|null
operator|&&
name|x
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|pref
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|pref
operator|.
name|append
argument_list|(
literal|"<BR>"
argument_list|)
expr_stmt|;
name|pref
operator|.
name|append
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
block|}
name|TableCell
name|cell
init|=
name|this
operator|.
name|initNormalCell
argument_list|(
name|noRoomPrefs
operator|&&
name|pref
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|"<i>N/A</i>"
else|:
name|pref
operator|.
name|toString
argument_list|()
argument_list|,
name|isEditable
argument_list|)
decl_stmt|;
name|cell
operator|.
name|setNoWrap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|(
name|cell
operator|)
return|;
block|}
specifier|private
name|TableCell
name|buildPrefGroupDemand
parameter_list|(
name|PreferenceGroup
name|prefGroup
parameter_list|,
name|boolean
name|isEditable
parameter_list|)
block|{
if|if
condition|(
name|prefGroup
operator|instanceof
name|Class_
condition|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|prefGroup
decl_stmt|;
if|if
condition|(
name|StudentClassEnrollment
operator|.
name|sessionHasEnrollments
argument_list|(
name|c
operator|.
name|getSessionId
argument_list|()
argument_list|)
condition|)
block|{
name|TableCell
name|tc
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tc
operator|=
name|this
operator|.
name|initNormalCell
argument_list|(
name|c
operator|.
name|getEnrollment
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tc
operator|=
name|this
operator|.
name|initNormalCell
argument_list|(
literal|"0"
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
block|}
name|tc
operator|.
name|setAlign
argument_list|(
literal|"right"
argument_list|)
expr_stmt|;
return|return
operator|(
name|tc
operator|)
return|;
block|}
block|}
return|return
operator|(
name|this
operator|.
name|initNormalCell
argument_list|(
literal|"&nbsp;"
argument_list|,
name|isEditable
argument_list|)
operator|)
return|;
block|}
specifier|private
name|TableCell
name|buildPrefGroupProjectedDemand
parameter_list|(
name|PreferenceGroup
name|prefGroup
parameter_list|,
name|boolean
name|isEditable
parameter_list|)
block|{
return|return
operator|(
name|this
operator|.
name|initNormalCell
argument_list|(
literal|"&nbsp;"
argument_list|,
name|isEditable
argument_list|)
operator|)
return|;
block|}
specifier|private
name|TableCell
name|buildLimit
parameter_list|(
name|ClassAssignmentProxy
name|classAssignment
parameter_list|,
name|PreferenceGroup
name|prefGroup
parameter_list|,
name|boolean
name|isEditable
parameter_list|)
block|{
name|TableCell
name|cell
init|=
literal|null
decl_stmt|;
name|boolean
name|nowrap
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|prefGroup
operator|instanceof
name|SchedulingSubpart
condition|)
block|{
name|SchedulingSubpart
name|ss
init|=
operator|(
name|SchedulingSubpart
operator|)
name|prefGroup
decl_stmt|;
name|boolean
name|unlimited
init|=
name|ss
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|isUnlimitedEnrollment
argument_list|()
operator|.
name|booleanValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|unlimited
condition|)
block|{
name|int
name|limit
init|=
operator|(
name|ss
operator|.
name|getLimit
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|ss
operator|.
name|getLimit
argument_list|()
operator|.
name|intValue
argument_list|()
operator|)
decl_stmt|;
name|int
name|maxExpCap
init|=
name|ss
operator|.
name|getMaxExpectedCapacity
argument_list|()
decl_stmt|;
if|if
condition|(
name|limit
operator|==
name|maxExpCap
condition|)
name|cell
operator|=
name|initNormalCell
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|limit
argument_list|)
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
else|else
block|{
name|cell
operator|=
name|initNormalCell
argument_list|(
name|limit
operator|+
literal|"-"
operator|+
name|maxExpCap
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
name|nowrap
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|cell
operator|=
name|initNormalCell
argument_list|(
literal|"&nbsp;"
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|prefGroup
operator|instanceof
name|Class_
condition|)
block|{
name|Class_
name|aClass
init|=
operator|(
name|Class_
operator|)
name|prefGroup
decl_stmt|;
name|boolean
name|unlimited
init|=
name|aClass
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|isUnlimitedEnrollment
argument_list|()
operator|.
name|booleanValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|unlimited
condition|)
block|{
name|String
name|limitString
init|=
literal|null
decl_stmt|;
name|Assignment
name|a
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|classAssignment
operator|!=
literal|null
condition|)
name|a
operator|=
name|classAssignment
operator|.
name|getAssignment
argument_list|(
name|aClass
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|aClass
operator|.
name|getExpectedCapacity
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|limitString
operator|=
name|aClass
operator|.
name|getExpectedCapacity
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|aClass
operator|.
name|getMaxExpectedCapacity
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|aClass
operator|.
name|getMaxExpectedCapacity
argument_list|()
operator|.
name|equals
argument_list|(
name|aClass
operator|.
name|getExpectedCapacity
argument_list|()
argument_list|)
condition|)
block|{
name|limitString
operator|=
name|limitString
operator|+
literal|"-"
operator|+
name|aClass
operator|.
name|getMaxExpectedCapacity
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|nowrap
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|limitString
operator|=
literal|"0"
expr_stmt|;
if|if
condition|(
name|aClass
operator|.
name|getMaxExpectedCapacity
argument_list|()
operator|!=
literal|null
operator|&&
name|aClass
operator|.
name|getMaxExpectedCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|limitString
operator|=
name|limitString
operator|+
literal|"-"
operator|+
name|aClass
operator|.
name|getMaxExpectedCapacity
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|nowrap
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|limitString
operator|=
literal|""
operator|+
name|aClass
operator|.
name|getClassLimit
argument_list|(
name|classAssignment
argument_list|)
expr_stmt|;
if|if
condition|(
name|aClass
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|String
name|title
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|aClass
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOffering
name|offering
init|=
operator|(
name|CourseOffering
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|limitThisOffering
init|=
name|aClass
operator|.
name|getClassLimit
argument_list|(
name|classAssignment
argument_list|,
name|offering
argument_list|)
decl_stmt|;
if|if
condition|(
name|limitThisOffering
operator|<=
literal|0
condition|)
continue|continue;
if|if
condition|(
name|title
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|title
operator|+=
literal|", "
expr_stmt|;
name|title
operator|+=
name|limitThisOffering
operator|+
literal|" ("
operator|+
name|offering
operator|.
name|getCourseName
argument_list|()
operator|+
literal|")"
expr_stmt|;
block|}
name|limitString
operator|=
literal|"<span title='"
operator|+
name|title
operator|+
literal|"'>"
operator|+
name|limitString
operator|+
literal|"</span>"
expr_stmt|;
block|}
block|}
name|cell
operator|=
name|initNormalCell
argument_list|(
name|limitString
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
if|if
condition|(
name|nowrap
condition|)
name|cell
operator|.
name|setNoWrap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cell
operator|=
name|initNormalCell
argument_list|(
literal|"<font size=\"+1\">&infin;</font>"
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|cell
operator|=
name|this
operator|.
name|initNormalCell
argument_list|(
literal|"&nbsp;"
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
block|}
name|cell
operator|.
name|setAlign
argument_list|(
literal|"right"
argument_list|)
expr_stmt|;
return|return
operator|(
name|cell
operator|)
return|;
block|}
specifier|private
name|TableCell
name|buildDivisionSection
parameter_list|(
name|PreferenceGroup
name|prefGroup
parameter_list|,
name|boolean
name|isEditable
parameter_list|)
block|{
name|TableCell
name|cell
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|prefGroup
operator|instanceof
name|Class_
condition|)
block|{
name|Class_
name|aClass
init|=
operator|(
name|Class_
operator|)
name|prefGroup
decl_stmt|;
name|String
name|divSec
init|=
name|aClass
operator|.
name|getDivSecNumber
argument_list|()
decl_stmt|;
name|cell
operator|=
name|initNormalCell
argument_list|(
operator|(
name|divSec
operator|==
literal|null
condition|?
literal|"&nbsp;"
else|:
name|divSec
operator|)
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setAlign
argument_list|(
literal|"right"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cell
operator|=
name|this
operator|.
name|initNormalCell
argument_list|(
literal|"&nbsp;"
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
block|}
name|cell
operator|.
name|setNoWrap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|(
name|cell
operator|)
return|;
block|}
specifier|private
name|TableCell
name|buildInstructor
parameter_list|(
name|PreferenceGroup
name|prefGroup
parameter_list|,
name|boolean
name|isEditable
parameter_list|)
block|{
name|TableCell
name|cell
init|=
name|this
operator|.
name|initNormalCell
argument_list|(
literal|""
argument_list|,
name|isEditable
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefGroup
operator|instanceof
name|Class_
condition|)
block|{
name|Class_
name|aClass
init|=
operator|(
name|Class_
operator|)
name|prefGroup
decl_stmt|;
name|String
name|label
init|=
name|aClass
operator|.
name|instructorHtml
argument_list|(
name|getInstructorNameFormat
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|aClass
operator|.
name|isDisplayInstructor
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|label
operator|=
literal|"<i>"
operator|+
name|label
operator|+
literal|"</i>"
expr_stmt|;
block|}
name|cell
operator|.
name|addContent
argument_list|(
name|label
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setAlign
argument_list|(
literal|"left"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cell
operator|.
name|addContent
argument_list|(
literal|"&nbsp; "
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|cell
operator|)
return|;
block|}
specifier|private
name|TableCell
name|buildCredit
parameter_list|(
name|PreferenceGroup
name|prefGroup
parameter_list|,
name|boolean
name|isEditable
parameter_list|)
block|{
name|TableCell
name|cell
init|=
name|this
operator|.
name|initNormalCell
argument_list|(
literal|""
argument_list|,
name|isEditable
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefGroup
operator|instanceof
name|SchedulingSubpart
condition|)
block|{
name|SchedulingSubpart
name|ss
init|=
operator|(
name|SchedulingSubpart
operator|)
name|prefGroup
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|getCredit
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cell
operator|.
name|addContent
argument_list|(
literal|"<span title='"
operator|+
name|ss
operator|.
name|getCredit
argument_list|()
operator|.
name|creditText
argument_list|()
operator|+
literal|"'>"
operator|+
name|ss
operator|.
name|getCredit
argument_list|()
operator|.
name|creditAbbv
argument_list|()
operator|+
literal|"</span>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cell
operator|.
name|addContent
argument_list|(
literal|"&nbsp; "
argument_list|)
expr_stmt|;
block|}
name|cell
operator|.
name|setAlign
argument_list|(
literal|"left"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cell
operator|.
name|addContent
argument_list|(
literal|"&nbsp; "
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|cell
operator|)
return|;
block|}
specifier|private
name|TableCell
name|buildSchedulePrintNote
parameter_list|(
name|PreferenceGroup
name|prefGroup
parameter_list|,
name|boolean
name|isEditable
parameter_list|,
name|User
name|user
parameter_list|)
block|{
name|TableCell
name|cell
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|prefGroup
operator|instanceof
name|Class_
condition|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|prefGroup
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getSchedulePrintNote
argument_list|()
operator|!=
literal|null
operator|&&
name|c
operator|.
name|getSchedulePrintNote
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|String
name|note
init|=
operator|(
name|c
operator|.
name|getSchedulePrintNote
argument_list|()
operator|.
name|length
argument_list|()
operator|<=
literal|20
condition|?
name|c
operator|.
name|getSchedulePrintNote
argument_list|()
else|:
name|c
operator|.
name|getSchedulePrintNote
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|20
argument_list|)
operator|+
literal|"..."
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|Constants
operator|.
name|showPrintNoteAsShortenedText
argument_list|(
name|user
argument_list|)
operator|&&
operator|!
name|Constants
operator|.
name|showPrintNoteAsFullText
argument_list|(
name|user
argument_list|)
condition|)
block|{
name|cell
operator|=
name|initNormalCell
argument_list|(
literal|"<IMG border='0' alt='Has Schedule Print Note' title='"
operator|+
name|note
operator|+
literal|"' align='absmiddle' src='images/Notes.png'>"
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setAlign
argument_list|(
literal|"center"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|Constants
operator|.
name|showPrintNoteAsShortenedText
argument_list|(
name|user
argument_list|)
condition|)
block|{
name|cell
operator|=
name|initNormalCell
argument_list|(
name|note
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setAlign
argument_list|(
literal|"left"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|Constants
operator|.
name|showPrintNoteAsFullText
argument_list|(
name|user
argument_list|)
condition|)
block|{
name|cell
operator|=
name|initNormalCell
argument_list|(
name|c
operator|.
name|getSchedulePrintNote
argument_list|()
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setAlign
argument_list|(
literal|"left"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|cell
operator|=
name|this
operator|.
name|initNormalCell
argument_list|(
literal|"&nbsp;"
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|cell
operator|=
name|this
operator|.
name|initNormalCell
argument_list|(
literal|"&nbsp;"
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|cell
operator|)
return|;
block|}
specifier|private
name|TableCell
name|buildExamName
parameter_list|(
name|TreeSet
name|exams
parameter_list|,
name|boolean
name|isEditable
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exams
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<span "
operator|+
operator|(
name|Exam
operator|.
name|sExamTypeFinal
operator|==
name|exam
operator|.
name|getExamType
argument_list|()
condition|?
literal|"style='font-weight:bold;' "
else|:
literal|""
operator|)
operator|+
literal|"title='"
operator|+
name|exam
operator|.
name|getLabel
argument_list|()
operator|+
literal|" "
operator|+
name|Exam
operator|.
name|sExamTypes
index|[
name|exam
operator|.
name|getExamType
argument_list|()
index|]
operator|+
literal|" Examination'>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|exam
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|Exam
operator|.
name|sExamTypeFinal
operator|==
name|exam
operator|.
name|getExamType
argument_list|()
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"</span>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"<br>"
argument_list|)
expr_stmt|;
block|}
name|TableCell
name|cell
init|=
name|this
operator|.
name|initNormalCell
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|isEditable
argument_list|)
decl_stmt|;
name|cell
operator|.
name|setAlign
argument_list|(
literal|"left"
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setNoWrap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|(
name|cell
operator|)
return|;
block|}
specifier|private
name|TableCell
name|buildExamPeriod
parameter_list|(
name|ExamAssignmentProxy
name|examAssignment
parameter_list|,
name|TreeSet
name|exams
parameter_list|,
name|boolean
name|isEditable
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exams
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<span "
operator|+
operator|(
name|Exam
operator|.
name|sExamTypeFinal
operator|==
name|exam
operator|.
name|getExamType
argument_list|()
condition|?
literal|"style='font-weight:bold;' "
else|:
literal|""
operator|)
operator|+
literal|"title='"
operator|+
name|exam
operator|.
name|getLabel
argument_list|()
operator|+
literal|" "
operator|+
name|Exam
operator|.
name|sExamTypes
index|[
name|exam
operator|.
name|getExamType
argument_list|()
index|]
operator|+
literal|" Examination'>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|examAssignment
operator|!=
literal|null
operator|&&
name|examAssignment
operator|.
name|getExamType
argument_list|()
operator|==
name|exam
operator|.
name|getExamType
argument_list|()
condition|)
block|{
name|ExamAssignment
name|ea
init|=
name|examAssignment
operator|.
name|getAssignment
argument_list|(
name|exam
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ea
operator|==
literal|null
operator|&&
operator|!
name|isShowExamName
argument_list|()
condition|)
continue|continue;
name|sb
operator|.
name|append
argument_list|(
name|ea
operator|==
literal|null
condition|?
literal|""
else|:
name|ea
operator|.
name|getPeriodAbbreviationWithPref
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
operator|==
literal|null
operator|&&
operator|!
name|isShowExamName
argument_list|()
condition|)
continue|continue;
name|sb
operator|.
name|append
argument_list|(
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Exam
operator|.
name|sExamTypeFinal
operator|==
name|exam
operator|.
name|getExamType
argument_list|()
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"</span>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"<br>"
argument_list|)
expr_stmt|;
block|}
name|TableCell
name|cell
init|=
name|this
operator|.
name|initNormalCell
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|isEditable
argument_list|)
decl_stmt|;
name|cell
operator|.
name|setAlign
argument_list|(
literal|"left"
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setNoWrap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|(
name|cell
operator|)
return|;
block|}
specifier|private
name|TableCell
name|buildExamRoom
parameter_list|(
name|ExamAssignmentProxy
name|examAssignment
parameter_list|,
name|TreeSet
name|exams
parameter_list|,
name|boolean
name|isEditable
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exams
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<span "
operator|+
operator|(
name|Exam
operator|.
name|sExamTypeFinal
operator|==
name|exam
operator|.
name|getExamType
argument_list|()
condition|?
literal|"style='font-weight:bold;' "
else|:
literal|""
operator|)
operator|+
literal|"title='"
operator|+
name|exam
operator|.
name|getLabel
argument_list|()
operator|+
literal|" "
operator|+
name|Exam
operator|.
name|sExamTypes
index|[
name|exam
operator|.
name|getExamType
argument_list|()
index|]
operator|+
literal|" Examination'>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|examAssignment
operator|!=
literal|null
operator|&&
name|examAssignment
operator|.
name|getExamType
argument_list|()
operator|==
name|exam
operator|.
name|getExamType
argument_list|()
condition|)
block|{
name|ExamAssignment
name|ea
init|=
name|examAssignment
operator|.
name|getAssignment
argument_list|(
name|exam
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ea
operator|==
literal|null
operator|&&
operator|!
name|isShowExamName
argument_list|()
condition|)
continue|continue;
name|sb
operator|.
name|append
argument_list|(
name|ea
operator|==
literal|null
condition|?
literal|""
else|:
name|ea
operator|.
name|getRoomsNameWithPref
argument_list|(
literal|", "
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
operator|==
literal|null
operator|&&
operator|!
name|isShowExamName
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|Iterator
name|j
init|=
operator|new
name|TreeSet
argument_list|(
name|exam
operator|.
name|getAssignedRooms
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|location
init|=
operator|(
name|Location
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|location
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|j
operator|.
name|hasNext
argument_list|()
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|Exam
operator|.
name|sExamTypeFinal
operator|==
name|exam
operator|.
name|getExamType
argument_list|()
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"</span>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"<br>"
argument_list|)
expr_stmt|;
block|}
name|TableCell
name|cell
init|=
name|this
operator|.
name|initNormalCell
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|isEditable
argument_list|)
decl_stmt|;
name|cell
operator|.
name|setAlign
argument_list|(
literal|"left"
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setNoWrap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|(
name|cell
operator|)
return|;
block|}
specifier|protected
name|TreeSet
name|getExams
parameter_list|(
name|Class_
name|clazz
parameter_list|)
block|{
return|return
operator|new
name|TreeSet
argument_list|(
name|Exam
operator|.
name|findAll
argument_list|(
name|ExamOwner
operator|.
name|sOwnerTypeClass
argument_list|,
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|TableCell
name|buildSchedulePrintNote
parameter_list|(
name|InstructionalOffering
name|io
parameter_list|,
name|boolean
name|isEditable
parameter_list|,
name|User
name|user
parameter_list|)
block|{
name|TableCell
name|cell
init|=
literal|null
decl_stmt|;
name|StringBuffer
name|note
init|=
operator|new
name|StringBuffer
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|Set
name|s
init|=
name|io
operator|.
name|getCourseOfferings
argument_list|()
decl_stmt|;
name|boolean
name|hasNote
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|s
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|crsNote
init|=
literal|null
decl_stmt|;
name|CourseOffering
name|coI
init|=
operator|(
name|CourseOffering
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|coI
operator|.
name|getScheduleBookNote
argument_list|()
operator|!=
literal|null
operator|&&
name|coI
operator|.
name|getScheduleBookNote
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|hasNote
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|note
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|note
operator|.
name|append
argument_list|(
literal|"<br>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|Constants
operator|.
name|showCrsOffrAsFullText
argument_list|(
name|user
argument_list|)
condition|)
block|{
name|note
operator|.
name|append
argument_list|(
name|coI
operator|.
name|getScheduleBookNote
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|coI
operator|.
name|getScheduleBookNote
argument_list|()
operator|.
name|length
argument_list|()
operator|<=
literal|20
condition|)
block|{
name|note
operator|.
name|append
argument_list|(
name|coI
operator|.
name|getScheduleBookNote
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|note
operator|.
name|append
argument_list|(
name|coI
operator|.
name|getScheduleBookNote
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|20
argument_list|)
operator|+
literal|"..."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|hasNote
condition|)
block|{
if|if
condition|(
operator|!
name|Constants
operator|.
name|showCrsOffrAsShortenedText
argument_list|(
name|user
argument_list|)
operator|&&
operator|!
name|Constants
operator|.
name|showCrsOffrAsFullText
argument_list|(
name|user
argument_list|)
condition|)
block|{
name|cell
operator|=
name|initNormalCell
argument_list|(
literal|"<IMG border='0' alt='Has Course Offering Note' title='"
operator|+
name|note
operator|+
literal|"' align='absmiddle' src='images/Notes.png'>"
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setAlign
argument_list|(
literal|"center"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|note
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|note
operator|.
name|append
argument_list|(
literal|"&nbsp;"
argument_list|)
expr_stmt|;
block|}
name|cell
operator|=
name|initNormalCell
argument_list|(
name|note
operator|.
name|toString
argument_list|()
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setAlign
argument_list|(
literal|"left"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|cell
operator|=
name|this
operator|.
name|initNormalCell
argument_list|(
literal|"&nbsp;"
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|cell
operator|)
return|;
block|}
specifier|private
name|TableCell
name|buildNote
parameter_list|(
name|PreferenceGroup
name|prefGroup
parameter_list|,
name|boolean
name|isEditable
parameter_list|,
name|User
name|user
parameter_list|)
block|{
name|TableCell
name|cell
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|prefGroup
operator|instanceof
name|Class_
condition|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|prefGroup
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getNotes
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|note
init|=
operator|(
name|c
operator|.
name|getNotes
argument_list|()
operator|.
name|length
argument_list|()
operator|<=
literal|20
condition|?
name|c
operator|.
name|getNotes
argument_list|()
else|:
name|c
operator|.
name|getNotes
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|20
argument_list|)
operator|+
literal|"..."
operator|)
decl_stmt|;
if|if
condition|(
name|Constants
operator|.
name|showMgrNoteShortenedText
argument_list|(
name|user
argument_list|)
condition|)
block|{
name|cell
operator|=
name|initNormalCell
argument_list|(
name|note
operator|.
name|replaceAll
argument_list|(
literal|"\n"
argument_list|,
literal|"<br>"
argument_list|)
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setAlign
argument_list|(
literal|"left"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|Constants
operator|.
name|showMgrNoteFullText
argument_list|(
name|user
argument_list|)
condition|)
block|{
name|cell
operator|=
name|initNormalCell
argument_list|(
name|c
operator|.
name|getNotes
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\n"
argument_list|,
literal|"<br>"
argument_list|)
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setAlign
argument_list|(
literal|"left"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cell
operator|=
name|initNormalCell
argument_list|(
literal|"<IMG border='0' alt='Has Note to Mgr' title='"
operator|+
name|note
operator|+
literal|"' align='absmiddle' src='images/Notes.png'>"
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setAlign
argument_list|(
literal|"center"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|cell
operator|=
name|this
operator|.
name|initNormalCell
argument_list|(
literal|"&nbsp;"
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|cell
operator|=
name|this
operator|.
name|initNormalCell
argument_list|(
literal|"&nbsp;"
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|cell
operator|)
return|;
block|}
specifier|private
name|TableCell
name|buildManager
parameter_list|(
name|PreferenceGroup
name|prefGroup
parameter_list|,
name|boolean
name|isEditable
parameter_list|)
block|{
name|TableCell
name|cell
init|=
literal|null
decl_stmt|;
name|Department
name|managingDept
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|prefGroup
operator|instanceof
name|Class_
condition|)
block|{
name|managingDept
operator|=
operator|(
operator|(
name|Class_
operator|)
name|prefGroup
operator|)
operator|.
name|getManagingDept
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|prefGroup
operator|instanceof
name|SchedulingSubpart
condition|)
block|{
name|managingDept
operator|=
operator|(
operator|(
name|SchedulingSubpart
operator|)
name|prefGroup
operator|)
operator|.
name|getManagingDept
argument_list|()
expr_stmt|;
block|}
name|cell
operator|=
name|initNormalCell
argument_list|(
name|managingDept
operator|==
literal|null
condition|?
literal|"&nbsp;"
else|:
name|managingDept
operator|.
name|getManagingDeptAbbv
argument_list|()
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
return|return
operator|(
name|cell
operator|)
return|;
block|}
specifier|private
name|TableCell
name|buildMinPerWeek
parameter_list|(
name|PreferenceGroup
name|prefGroup
parameter_list|,
name|boolean
name|isEditable
parameter_list|)
block|{
name|TableCell
name|cell
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|prefGroup
operator|instanceof
name|Class_
condition|)
block|{
name|Class_
name|aClass
init|=
operator|(
name|Class_
operator|)
name|prefGroup
decl_stmt|;
name|cell
operator|=
name|initNormalCell
argument_list|(
name|aClass
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setAlign
argument_list|(
literal|"right"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|prefGroup
operator|instanceof
name|SchedulingSubpart
condition|)
block|{
name|SchedulingSubpart
name|aSchedulingSubpart
init|=
operator|(
name|SchedulingSubpart
operator|)
name|prefGroup
decl_stmt|;
name|cell
operator|=
name|initNormalCell
argument_list|(
name|aSchedulingSubpart
operator|.
name|getMinutesPerWk
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setAlign
argument_list|(
literal|"right"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cell
operator|=
name|this
operator|.
name|initNormalCell
argument_list|(
literal|"&nbsp;"
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|cell
operator|)
return|;
block|}
specifier|private
name|TableCell
name|buildRoomLimit
parameter_list|(
name|PreferenceGroup
name|prefGroup
parameter_list|,
name|boolean
name|isEditable
parameter_list|,
name|boolean
name|classLimitDisplayed
parameter_list|)
block|{
name|TableCell
name|cell
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|prefGroup
operator|instanceof
name|Class_
condition|)
block|{
name|Class_
name|aClass
init|=
operator|(
name|Class_
operator|)
name|prefGroup
decl_stmt|;
if|if
condition|(
name|aClass
operator|.
name|getNbrRooms
argument_list|()
operator|!=
literal|null
operator|&&
name|aClass
operator|.
name|getNbrRooms
argument_list|()
operator|.
name|intValue
argument_list|()
operator|!=
literal|1
condition|)
block|{
if|if
condition|(
name|aClass
operator|.
name|getNbrRooms
argument_list|()
operator|.
name|intValue
argument_list|()
operator|==
literal|0
condition|)
name|cell
operator|=
name|initNormalCell
argument_list|(
literal|"<i>N/A</i>"
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
else|else
block|{
name|String
name|text
init|=
name|aClass
operator|.
name|getNbrRooms
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|text
operator|+=
literal|" at "
expr_stmt|;
if|if
condition|(
name|aClass
operator|.
name|getRoomRatio
argument_list|()
operator|!=
literal|null
condition|)
name|text
operator|+=
name|sRoomRatioFormat
operator|.
name|format
argument_list|(
name|aClass
operator|.
name|getRoomRatio
argument_list|()
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|text
operator|+=
literal|"0"
expr_stmt|;
name|cell
operator|=
name|initNormalCell
argument_list|(
name|text
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setNoWrap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|aClass
operator|.
name|getRoomRatio
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|classLimitDisplayed
operator|&&
name|aClass
operator|.
name|getRoomRatio
argument_list|()
operator|.
name|equals
argument_list|(
operator|new
name|Float
argument_list|(
literal|1.0
argument_list|)
argument_list|)
condition|)
block|{
name|cell
operator|=
name|initNormalCell
argument_list|(
literal|"&nbsp;"
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cell
operator|=
name|initNormalCell
argument_list|(
name|sRoomRatioFormat
operator|.
name|format
argument_list|(
name|aClass
operator|.
name|getRoomRatio
argument_list|()
operator|.
name|floatValue
argument_list|()
argument_list|)
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|aClass
operator|.
name|getExpectedCapacity
argument_list|()
operator|==
literal|null
condition|)
block|{
name|cell
operator|=
name|initNormalCell
argument_list|(
literal|"&nbsp;"
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cell
operator|=
name|initNormalCell
argument_list|(
literal|"0"
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|cell
operator|.
name|setAlign
argument_list|(
literal|"right"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cell
operator|=
name|this
operator|.
name|initNormalCell
argument_list|(
literal|"&nbsp;"
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|cell
operator|)
return|;
block|}
specifier|private
name|TableCell
name|buildAssignedTime
parameter_list|(
name|ClassAssignmentProxy
name|classAssignment
parameter_list|,
name|PreferenceGroup
name|prefGroup
parameter_list|,
name|boolean
name|isEditable
parameter_list|)
block|{
name|TableCell
name|cell
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|classAssignment
operator|!=
literal|null
operator|&&
name|prefGroup
operator|instanceof
name|Class_
condition|)
block|{
name|Class_
name|aClass
init|=
operator|(
name|Class_
operator|)
name|prefGroup
decl_stmt|;
name|Assignment
name|a
init|=
literal|null
decl_stmt|;
name|AssignmentPreferenceInfo
name|info
init|=
literal|null
decl_stmt|;
try|try
block|{
name|a
operator|=
name|classAssignment
operator|.
name|getAssignment
argument_list|(
name|aClass
argument_list|)
expr_stmt|;
name|info
operator|=
name|classAssignment
operator|.
name|getAssignmentInfo
argument_list|(
name|aClass
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|a
operator|!=
literal|null
condition|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<font color='"
operator|+
operator|(
name|isEditable
condition|?
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
name|info
operator|.
name|getTimePreference
argument_list|()
argument_list|)
else|:
name|disabledColor
operator|)
operator|+
literal|"'>"
argument_list|)
expr_stmt|;
block|}
name|IntEnumeration
name|e
init|=
name|a
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDays
argument_list|()
decl_stmt|;
while|while
condition|(
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|DAY_NAMES_SHORT
index|[
operator|(
name|int
operator|)
name|e
operator|.
name|nextInt
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|a
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getStartTimeHeader
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|a
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getEndTimeHeader
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"</font>"
argument_list|)
expr_stmt|;
name|cell
operator|=
name|initNormalCell
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cell
operator|=
name|initNormalCell
argument_list|(
literal|"&nbsp;"
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
block|}
name|cell
operator|.
name|setAlign
argument_list|(
literal|"left"
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setNoWrap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cell
operator|=
name|this
operator|.
name|initNormalCell
argument_list|(
literal|"&nbsp;"
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|cell
operator|)
return|;
block|}
specifier|private
name|TableCell
name|buildAssignedRoom
parameter_list|(
name|ClassAssignmentProxy
name|classAssignment
parameter_list|,
name|PreferenceGroup
name|prefGroup
parameter_list|,
name|boolean
name|isEditable
parameter_list|)
block|{
name|TableCell
name|cell
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|classAssignment
operator|!=
literal|null
operator|&&
name|prefGroup
operator|instanceof
name|Class_
condition|)
block|{
name|Class_
name|aClass
init|=
operator|(
name|Class_
operator|)
name|prefGroup
decl_stmt|;
name|Assignment
name|a
init|=
literal|null
decl_stmt|;
name|AssignmentPreferenceInfo
name|info
init|=
literal|null
decl_stmt|;
try|try
block|{
name|a
operator|=
name|classAssignment
operator|.
name|getAssignment
argument_list|(
name|aClass
argument_list|)
expr_stmt|;
name|info
operator|=
name|classAssignment
operator|.
name|getAssignmentInfo
argument_list|(
name|aClass
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|a
operator|!=
literal|null
condition|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|Iterator
name|it2
init|=
name|a
operator|.
name|getRooms
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Location
name|room
init|=
operator|(
name|Location
operator|)
name|it2
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"<font color='"
operator|+
operator|(
name|isEditable
condition|?
name|PreferenceLevel
operator|.
name|int2color
argument_list|(
name|info
operator|.
name|getRoomPreference
argument_list|(
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
else|:
name|disabledColor
operator|)
operator|+
literal|"'>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|room
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"</font>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|it2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<BR>"
argument_list|)
expr_stmt|;
block|}
block|}
name|cell
operator|=
name|initNormalCell
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cell
operator|=
name|initNormalCell
argument_list|(
literal|"&nbsp;"
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
block|}
name|cell
operator|.
name|setAlign
argument_list|(
literal|"left"
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setNoWrap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cell
operator|=
name|this
operator|.
name|initNormalCell
argument_list|(
literal|"&nbsp;"
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|cell
operator|)
return|;
block|}
specifier|private
name|TableCell
name|buildAssignedRoomCapacity
parameter_list|(
name|ClassAssignmentProxy
name|classAssignment
parameter_list|,
name|PreferenceGroup
name|prefGroup
parameter_list|,
name|boolean
name|isEditable
parameter_list|)
block|{
name|TableCell
name|cell
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|classAssignment
operator|!=
literal|null
operator|&&
name|prefGroup
operator|instanceof
name|Class_
condition|)
block|{
name|Class_
name|aClass
init|=
operator|(
name|Class_
operator|)
name|prefGroup
decl_stmt|;
name|Assignment
name|a
init|=
literal|null
decl_stmt|;
try|try
block|{
name|a
operator|=
name|classAssignment
operator|.
name|getAssignment
argument_list|(
name|aClass
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|a
operator|!=
literal|null
condition|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|Iterator
name|it2
init|=
name|a
operator|.
name|getRooms
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
operator|(
operator|(
name|Location
operator|)
name|it2
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|it2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<BR>"
argument_list|)
expr_stmt|;
block|}
block|}
name|cell
operator|=
name|initNormalCell
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cell
operator|=
name|initNormalCell
argument_list|(
literal|"&nbsp;"
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
block|}
name|cell
operator|.
name|setAlign
argument_list|(
literal|"right"
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setNoWrap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cell
operator|=
name|this
operator|.
name|initNormalCell
argument_list|(
literal|"&nbsp;"
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|cell
operator|)
return|;
block|}
comment|//NOTE: if changing column order column order must be changed in
comment|//		buildTableHeader, addInstrOffrRowsToTable, buildClassOrSubpartRow, and buildConfigRow
specifier|protected
name|void
name|buildClassOrSubpartRow
parameter_list|(
name|ClassAssignmentProxy
name|classAssignment
parameter_list|,
name|ExamAssignmentProxy
name|examAssignment
parameter_list|,
name|TableRow
name|row
parameter_list|,
name|PreferenceGroup
name|prefGroup
parameter_list|,
name|String
name|indentSpaces
parameter_list|,
name|boolean
name|isEditable
parameter_list|,
name|String
name|prevLabel
parameter_list|,
name|User
name|user
parameter_list|)
block|{
name|boolean
name|classLimitDisplayed
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|isShowLabel
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|this
operator|.
name|buildPrefGroupLabel
argument_list|(
name|prefGroup
argument_list|,
name|indentSpaces
argument_list|,
name|isEditable
argument_list|,
name|prevLabel
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowDivSec
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|this
operator|.
name|buildDivisionSection
argument_list|(
name|prefGroup
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowDemand
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|this
operator|.
name|buildPrefGroupDemand
argument_list|(
name|prefGroup
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowProjectedDemand
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|this
operator|.
name|buildPrefGroupProjectedDemand
argument_list|(
name|prefGroup
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowLimit
argument_list|()
condition|)
block|{
name|classLimitDisplayed
operator|=
literal|true
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|this
operator|.
name|buildLimit
argument_list|(
name|classAssignment
argument_list|,
name|prefGroup
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowRoomRatio
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|this
operator|.
name|buildRoomLimit
argument_list|(
name|prefGroup
argument_list|,
name|isEditable
argument_list|,
name|classLimitDisplayed
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowManager
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|this
operator|.
name|buildManager
argument_list|(
name|prefGroup
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowDatePattern
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|this
operator|.
name|buildDatePatternCell
argument_list|(
name|prefGroup
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowMinPerWk
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|this
operator|.
name|buildMinPerWeek
argument_list|(
name|prefGroup
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowTimePattern
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|this
operator|.
name|buildTimePatternCell
argument_list|(
name|prefGroup
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowPreferences
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|PREFERENCE_COLUMN_ORDER
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|PREFERENCE_COLUMN_ORDER
index|[
name|j
index|]
operator|.
name|equals
argument_list|(
name|TIME
argument_list|)
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|this
operator|.
name|buildPreferenceCell
argument_list|(
name|classAssignment
argument_list|,
name|prefGroup
argument_list|,
name|TimePref
operator|.
name|class
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|sAggregateRoomPrefs
operator|&&
name|PREFERENCE_COLUMN_ORDER
index|[
name|j
index|]
operator|.
name|equals
argument_list|(
name|ALL_ROOM
argument_list|)
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|this
operator|.
name|buildPreferenceCell
argument_list|(
name|classAssignment
argument_list|,
name|prefGroup
argument_list|,
operator|new
name|Class
index|[]
block|{
name|RoomPref
operator|.
name|class
block|,
name|BuildingPref
operator|.
name|class
block|,
name|RoomFeaturePref
operator|.
name|class
block|,
name|RoomGroupPref
operator|.
name|class
block|}
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|PREFERENCE_COLUMN_ORDER
index|[
name|j
index|]
operator|.
name|equals
argument_list|(
name|ROOM
argument_list|)
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|this
operator|.
name|buildPreferenceCell
argument_list|(
name|classAssignment
argument_list|,
name|prefGroup
argument_list|,
name|RoomPref
operator|.
name|class
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|PREFERENCE_COLUMN_ORDER
index|[
name|j
index|]
operator|.
name|equals
argument_list|(
name|BLDG
argument_list|)
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|this
operator|.
name|buildPreferenceCell
argument_list|(
name|classAssignment
argument_list|,
name|prefGroup
argument_list|,
name|BuildingPref
operator|.
name|class
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|PREFERENCE_COLUMN_ORDER
index|[
name|j
index|]
operator|.
name|equals
argument_list|(
name|FEATURES
argument_list|)
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|this
operator|.
name|buildPreferenceCell
argument_list|(
name|classAssignment
argument_list|,
name|prefGroup
argument_list|,
name|RoomFeaturePref
operator|.
name|class
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|iDisplayDistributionPrefs
operator|&&
name|PREFERENCE_COLUMN_ORDER
index|[
name|j
index|]
operator|.
name|equals
argument_list|(
name|DISTRIBUTION
argument_list|)
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|this
operator|.
name|buildPreferenceCell
argument_list|(
name|classAssignment
argument_list|,
name|prefGroup
argument_list|,
name|DistributionPref
operator|.
name|class
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|PREFERENCE_COLUMN_ORDER
index|[
name|j
index|]
operator|.
name|equals
argument_list|(
name|ROOMGR
argument_list|)
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|this
operator|.
name|buildPreferenceCell
argument_list|(
name|classAssignment
argument_list|,
name|prefGroup
argument_list|,
name|RoomGroupPref
operator|.
name|class
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|isShowInstructor
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|this
operator|.
name|buildInstructor
argument_list|(
name|prefGroup
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getDisplayTimetable
argument_list|()
operator|&&
name|isShowTimetable
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|TIMETABLE_COLUMN_ORDER
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|TIMETABLE_COLUMN_ORDER
index|[
name|j
index|]
operator|.
name|equals
argument_list|(
name|ASSIGNED_TIME
argument_list|)
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|this
operator|.
name|buildAssignedTime
argument_list|(
name|classAssignment
argument_list|,
name|prefGroup
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|TIMETABLE_COLUMN_ORDER
index|[
name|j
index|]
operator|.
name|equals
argument_list|(
name|ASSIGNED_ROOM
argument_list|)
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|this
operator|.
name|buildAssignedRoom
argument_list|(
name|classAssignment
argument_list|,
name|prefGroup
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|TIMETABLE_COLUMN_ORDER
index|[
name|j
index|]
operator|.
name|equals
argument_list|(
name|ASSIGNED_ROOM_CAPACITY
argument_list|)
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|this
operator|.
name|buildAssignedRoomCapacity
argument_list|(
name|classAssignment
argument_list|,
name|prefGroup
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|isShowTitle
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|this
operator|.
name|initNormalCell
argument_list|(
literal|"&nbsp;"
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowCredit
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|this
operator|.
name|initNormalCell
argument_list|(
literal|"&nbsp;"
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowSubpartCredit
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|this
operator|.
name|buildCredit
argument_list|(
name|prefGroup
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowConsent
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|this
operator|.
name|initNormalCell
argument_list|(
literal|"&nbsp;"
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowDesignatorRequired
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|this
operator|.
name|initNormalCell
argument_list|(
literal|"&nbsp;"
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowSchedulePrintNote
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|this
operator|.
name|buildSchedulePrintNote
argument_list|(
name|prefGroup
argument_list|,
name|isEditable
argument_list|,
name|user
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowNote
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|this
operator|.
name|buildNote
argument_list|(
name|prefGroup
argument_list|,
name|isEditable
argument_list|,
name|user
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowExam
argument_list|()
condition|)
block|{
if|if
condition|(
name|prefGroup
operator|instanceof
name|Class_
condition|)
block|{
name|TreeSet
name|exams
init|=
name|getExams
argument_list|(
operator|(
name|Class_
operator|)
name|prefGroup
argument_list|)
decl_stmt|;
if|if
condition|(
name|isShowExamName
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|this
operator|.
name|buildExamName
argument_list|(
name|exams
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowExamTimetable
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|this
operator|.
name|buildExamPeriod
argument_list|(
name|examAssignment
argument_list|,
name|exams
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|this
operator|.
name|buildExamRoom
argument_list|(
name|examAssignment
argument_list|,
name|exams
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|isShowExamName
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|this
operator|.
name|initNormalCell
argument_list|(
literal|"&nbsp;"
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowExamTimetable
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|this
operator|.
name|initNormalCell
argument_list|(
literal|"&nbsp;"
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|this
operator|.
name|initNormalCell
argument_list|(
literal|"&nbsp;"
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|buildSchedulingSubpartRow
parameter_list|(
name|ClassAssignmentProxy
name|classAssignment
parameter_list|,
name|ExamAssignmentProxy
name|examAssignment
parameter_list|,
name|TableStream
name|table
parameter_list|,
name|SchedulingSubpart
name|ss
parameter_list|,
name|String
name|indentSpaces
parameter_list|,
name|User
name|user
parameter_list|)
block|{
name|boolean
name|isHeaderRow
init|=
literal|true
decl_stmt|;
name|TableRow
name|row
init|=
name|this
operator|.
name|initRow
argument_list|(
name|isHeaderRow
argument_list|)
decl_stmt|;
name|boolean
name|isEditable
init|=
name|ss
operator|.
name|isViewableBy
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|boolean
name|isOffered
init|=
operator|!
name|ss
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|isNotOffered
argument_list|()
operator|.
name|booleanValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|isOffered
condition|)
name|row
operator|.
name|setOnMouseOver
argument_list|(
name|this
operator|.
name|getRowMouseOver
argument_list|(
name|isHeaderRow
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isEditable
operator|&&
name|isOffered
condition|)
block|{
name|row
operator|.
name|setOnClick
argument_list|(
literal|"document.location='schedulingSubpartDetail.do?ssuid="
operator|+
name|ss
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isOffered
condition|)
name|row
operator|.
name|setOnMouseOut
argument_list|(
name|this
operator|.
name|getRowMouseOut
argument_list|(
name|isHeaderRow
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|buildClassOrSubpartRow
argument_list|(
name|classAssignment
argument_list|,
name|examAssignment
argument_list|,
name|row
argument_list|,
name|ss
argument_list|,
name|indentSpaces
argument_list|,
name|isEditable
argument_list|,
literal|null
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|buildSchedulingSubpartRows
parameter_list|(
name|Vector
name|subpartIds
parameter_list|,
name|ClassAssignmentProxy
name|classAssignment
parameter_list|,
name|ExamAssignmentProxy
name|examAssignment
parameter_list|,
name|TableStream
name|table
parameter_list|,
name|SchedulingSubpart
name|ss
parameter_list|,
name|String
name|indentSpaces
parameter_list|,
name|User
name|user
parameter_list|)
block|{
if|if
condition|(
name|subpartIds
operator|!=
literal|null
condition|)
name|subpartIds
operator|.
name|add
argument_list|(
name|ss
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|buildSchedulingSubpartRow
argument_list|(
name|classAssignment
argument_list|,
name|examAssignment
argument_list|,
name|table
argument_list|,
name|ss
argument_list|,
name|indentSpaces
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|Set
name|childSubparts
init|=
name|ss
operator|.
name|getChildSubparts
argument_list|()
decl_stmt|;
if|if
condition|(
name|childSubparts
operator|!=
literal|null
operator|&&
operator|!
name|childSubparts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ArrayList
name|childSubpartList
init|=
operator|new
name|ArrayList
argument_list|(
name|childSubparts
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|childSubpartList
argument_list|,
operator|new
name|SchedulingSubpartComparator
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
name|it
init|=
name|childSubpartList
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|SchedulingSubpart
name|child
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|child
operator|=
operator|(
name|SchedulingSubpart
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|buildSchedulingSubpartRows
argument_list|(
name|subpartIds
argument_list|,
name|classAssignment
argument_list|,
name|examAssignment
argument_list|,
name|table
argument_list|,
name|child
argument_list|,
name|indentSpaces
operator|+
name|indent
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|buildClassRow
parameter_list|(
name|ClassAssignmentProxy
name|classAssignment
parameter_list|,
name|ExamAssignmentProxy
name|examAssignment
parameter_list|,
name|int
name|ct
parameter_list|,
name|TableStream
name|table
parameter_list|,
name|Class_
name|aClass
parameter_list|,
name|String
name|indentSpaces
parameter_list|,
name|User
name|user
parameter_list|,
name|String
name|prevLabel
parameter_list|)
block|{
name|boolean
name|isHeaderRow
init|=
literal|false
decl_stmt|;
name|boolean
name|isEditable
init|=
name|aClass
operator|.
name|isViewableBy
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|TableRow
name|row
init|=
name|this
operator|.
name|initRow
argument_list|(
name|isHeaderRow
argument_list|)
decl_stmt|;
name|row
operator|.
name|setOnMouseOver
argument_list|(
name|this
operator|.
name|getRowMouseOver
argument_list|(
name|isHeaderRow
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|setOnMouseOut
argument_list|(
name|this
operator|.
name|getRowMouseOut
argument_list|(
name|isHeaderRow
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isEditable
condition|)
block|{
name|row
operator|.
name|setOnClick
argument_list|(
literal|"document.location='classDetail.do?cid="
operator|+
name|aClass
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"&sec="
operator|+
name|aClass
operator|.
name|getSectionNumberString
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|buildClassOrSubpartRow
argument_list|(
name|classAssignment
argument_list|,
name|examAssignment
argument_list|,
name|row
argument_list|,
name|aClass
argument_list|,
name|indentSpaces
argument_list|,
name|isEditable
argument_list|,
name|prevLabel
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|buildClassRows
parameter_list|(
name|ClassAssignmentProxy
name|classAssignment
parameter_list|,
name|ExamAssignmentProxy
name|examAssignment
parameter_list|,
name|int
name|ct
parameter_list|,
name|TableStream
name|table
parameter_list|,
name|Class_
name|aClass
parameter_list|,
name|String
name|indentSpaces
parameter_list|,
name|User
name|user
parameter_list|,
name|String
name|prevLabel
parameter_list|)
block|{
name|buildClassRow
argument_list|(
name|classAssignment
argument_list|,
name|examAssignment
argument_list|,
name|ct
argument_list|,
name|table
argument_list|,
name|aClass
argument_list|,
name|indentSpaces
argument_list|,
name|user
argument_list|,
name|prevLabel
argument_list|)
expr_stmt|;
name|Set
name|childClasses
init|=
name|aClass
operator|.
name|getChildClasses
argument_list|()
decl_stmt|;
if|if
condition|(
name|childClasses
operator|!=
literal|null
operator|&&
operator|!
name|childClasses
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ArrayList
name|childClassesList
init|=
operator|new
name|ArrayList
argument_list|(
name|childClasses
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|childClassesList
argument_list|,
name|iClassComparator
argument_list|)
expr_stmt|;
name|Iterator
name|it
init|=
name|childClassesList
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Class_
name|child
init|=
literal|null
decl_stmt|;
name|String
name|previousLabel
init|=
name|aClass
operator|.
name|htmlLabel
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|child
operator|=
operator|(
name|Class_
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|buildClassRows
argument_list|(
name|classAssignment
argument_list|,
name|examAssignment
argument_list|,
name|ct
argument_list|,
name|table
argument_list|,
name|child
argument_list|,
name|indentSpaces
operator|+
name|indent
argument_list|,
name|user
argument_list|,
name|previousLabel
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//NOTE: if changing column order column order must be changed in
comment|//		buildTableHeader, addInstrOffrRowsToTable, buildClassOrSubpartRow, and buildConfigRow
specifier|protected
name|void
name|buildConfigRow
parameter_list|(
name|Vector
name|subpartIds
parameter_list|,
name|ClassAssignmentProxy
name|classAssignment
parameter_list|,
name|ExamAssignmentProxy
name|examAssignment
parameter_list|,
name|TableStream
name|table
parameter_list|,
name|InstrOfferingConfig
name|ioc
parameter_list|,
name|User
name|user
parameter_list|,
name|boolean
name|printConfigLine
parameter_list|,
name|boolean
name|printConfigReservation
parameter_list|)
block|{
name|boolean
name|isHeaderRow
init|=
literal|true
decl_stmt|;
name|boolean
name|isEditable
init|=
name|ioc
operator|.
name|isViewableBy
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|String
name|configName
init|=
name|ioc
operator|.
name|getName
argument_list|()
decl_stmt|;
name|boolean
name|unlimited
init|=
name|ioc
operator|.
name|isUnlimitedEnrollment
argument_list|()
operator|.
name|booleanValue
argument_list|()
decl_stmt|;
name|boolean
name|hasConfig
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|printConfigLine
condition|)
block|{
name|TableRow
name|row
init|=
name|this
operator|.
name|initRow
argument_list|(
name|isHeaderRow
argument_list|)
decl_stmt|;
name|TableCell
name|cell
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isShowLabel
argument_list|()
condition|)
block|{
if|if
condition|(
name|configName
operator|==
literal|null
operator|||
name|configName
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|configName
operator|=
name|ioc
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
comment|/*         	    cell = this.initNormalCell(         	            indent + "<u>Configuration</u>:<font class='configTitle'>" + configName + "</font> ",          	            isEditable);         	    */
name|cell
operator|=
name|this
operator|.
name|initNormalCell
argument_list|(
name|indent
operator|+
literal|"Configuration "
operator|+
name|configName
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setNoWrap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowDivSec
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|initNormalCell
argument_list|(
literal|""
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowDemand
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|initNormalCell
argument_list|(
literal|""
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowProjectedDemand
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|initNormalCell
argument_list|(
literal|""
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowLimit
argument_list|()
condition|)
block|{
name|cell
operator|=
name|this
operator|.
name|initNormalCell
argument_list|(
operator|(
name|unlimited
condition|?
literal|"<font size=\"+1\">&infin;</font>"
else|:
name|ioc
operator|.
name|getLimit
argument_list|()
operator|.
name|toString
argument_list|()
operator|)
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setAlign
argument_list|(
literal|"right"
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowRoomRatio
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|initNormalCell
argument_list|(
literal|""
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowManager
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|initNormalCell
argument_list|(
literal|""
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowDatePattern
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|initNormalCell
argument_list|(
literal|""
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowMinPerWk
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|initNormalCell
argument_list|(
literal|""
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowTimePattern
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|initNormalCell
argument_list|(
literal|""
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowPreferences
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|PREFERENCE_COLUMN_ORDER
operator|.
name|length
operator|+
operator|(
name|iDisplayDistributionPrefs
condition|?
literal|0
else|:
operator|-
literal|1
operator|)
condition|;
name|j
operator|++
control|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|initNormalCell
argument_list|(
literal|""
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isShowInstructor
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|initNormalCell
argument_list|(
literal|""
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getDisplayTimetable
argument_list|()
operator|&&
name|isShowTimetable
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|TIMETABLE_COLUMN_ORDER
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|initNormalCell
argument_list|(
literal|""
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isShowTitle
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|this
operator|.
name|initNormalCell
argument_list|(
literal|""
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowCredit
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|initNormalCell
argument_list|(
literal|""
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowSubpartCredit
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|initNormalCell
argument_list|(
literal|""
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowConsent
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|this
operator|.
name|initNormalCell
argument_list|(
literal|""
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowDesignatorRequired
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|this
operator|.
name|initNormalCell
argument_list|(
literal|""
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowSchedulePrintNote
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|initNormalCell
argument_list|(
literal|""
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowNote
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|initNormalCell
argument_list|(
literal|""
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/* -- configuration line is not clickable 		    row.setOnMouseOver(this.getRowMouseOver(isHeaderRow, isEditable)); 	        row.setOnMouseOut(this.getRowMouseOut(isHeaderRow)); 	        */
if|if
condition|(
name|isShowExam
argument_list|()
condition|)
block|{
name|TreeSet
name|exams
init|=
operator|new
name|TreeSet
argument_list|(
name|Exam
operator|.
name|findAll
argument_list|(
name|ExamOwner
operator|.
name|sOwnerTypeConfig
argument_list|,
name|ioc
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|isShowExamName
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|this
operator|.
name|buildExamName
argument_list|(
name|exams
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowExamTimetable
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|this
operator|.
name|buildExamPeriod
argument_list|(
name|examAssignment
argument_list|,
name|exams
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|this
operator|.
name|buildExamRoom
argument_list|(
name|examAssignment
argument_list|,
name|exams
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|hasConfig
operator|=
literal|true
expr_stmt|;
block|}
name|ArrayList
name|subpartList
init|=
operator|new
name|ArrayList
argument_list|(
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|subpartList
argument_list|,
operator|new
name|SchedulingSubpartComparator
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
name|it
init|=
name|subpartList
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|SchedulingSubpart
name|ss
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ss
operator|=
operator|(
name|SchedulingSubpart
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|ss
operator|.
name|getParentSubpart
argument_list|()
operator|==
literal|null
condition|)
block|{
name|buildSchedulingSubpartRows
argument_list|(
name|subpartIds
argument_list|,
name|classAssignment
argument_list|,
name|examAssignment
argument_list|,
name|table
argument_list|,
name|ss
argument_list|,
operator|(
name|hasConfig
condition|?
name|indent
operator|+
name|indent
else|:
name|indent
operator|)
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
block|}
name|it
operator|=
name|subpartList
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|int
name|ct
init|=
literal|0
decl_stmt|;
name|String
name|prevLabel
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ss
operator|=
operator|(
name|SchedulingSubpart
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|ss
operator|.
name|getParentSubpart
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|ss
operator|.
name|getClasses
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Vector
name|classes
init|=
operator|new
name|Vector
argument_list|(
name|ss
operator|.
name|getClasses
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|classes
argument_list|,
name|iClassComparator
argument_list|)
expr_stmt|;
name|Iterator
name|cIt
init|=
name|classes
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Class_
name|c
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|cIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|c
operator|=
operator|(
name|Class_
operator|)
name|cIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|buildClassRows
argument_list|(
name|classAssignment
argument_list|,
name|examAssignment
argument_list|,
operator|++
name|ct
argument_list|,
name|table
argument_list|,
name|c
argument_list|,
name|indent
argument_list|,
name|user
argument_list|,
name|prevLabel
argument_list|)
expr_stmt|;
name|prevLabel
operator|=
name|c
operator|.
name|htmlLabel
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Config Reservations
if|if
condition|(
name|printConfigReservation
condition|)
block|{
name|ReservationsTableBuilder
name|r
init|=
operator|new
name|ReservationsTableBuilder
argument_list|()
decl_stmt|;
name|String
name|resvTable
init|=
name|r
operator|.
name|htmlTableForReservations
argument_list|(
name|ioc
operator|.
name|effectiveReservations
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|true
argument_list|,
name|ioc
operator|.
name|isViewableBy
argument_list|(
name|user
argument_list|)
argument_list|,
name|ioc
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|isLimitedEditableBy
argument_list|(
name|user
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|resvTable
operator|!=
literal|null
operator|&&
name|resvTable
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|TableRow
name|row
init|=
name|this
operator|.
name|initRow
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|TableCell
name|cell
init|=
name|initColSpanCell
argument_list|(
name|r
operator|.
name|createTable
argument_list|(
name|resvTable
argument_list|,
literal|"margin:0;"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|12
argument_list|)
decl_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|)
expr_stmt|;
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|buildConfigRows
parameter_list|(
name|ClassAssignmentProxy
name|classAssignment
parameter_list|,
name|ExamAssignmentProxy
name|examAssignment
parameter_list|,
name|TableStream
name|table
parameter_list|,
name|Set
name|instrOfferingConfigs
parameter_list|,
name|User
name|user
parameter_list|,
name|boolean
name|printConfigLine
parameter_list|,
name|boolean
name|printConfigReservation
parameter_list|)
block|{
name|Iterator
name|it
init|=
name|instrOfferingConfigs
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|InstrOfferingConfig
name|ioc
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ioc
operator|=
operator|(
name|InstrOfferingConfig
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|buildConfigRow
argument_list|(
literal|null
argument_list|,
name|classAssignment
argument_list|,
name|examAssignment
argument_list|,
name|table
argument_list|,
name|ioc
argument_list|,
name|user
argument_list|,
name|printConfigLine
operator|&&
name|instrOfferingConfigs
operator|.
name|size
argument_list|()
operator|>
literal|1
argument_list|,
name|printConfigReservation
argument_list|)
expr_stmt|;
block|}
block|}
comment|//NOTE: if changing column order column order must be changed in
comment|//		buildTableHeader, addInstrOffrRowsToTable, buildClassOrSubpartRow, and buildConfigRow
specifier|private
name|void
name|addInstrOffrRowsToTable
parameter_list|(
name|ClassAssignmentProxy
name|classAssignment
parameter_list|,
name|ExamAssignmentProxy
name|examAssignment
parameter_list|,
name|TableStream
name|table
parameter_list|,
name|InstructionalOffering
name|io
parameter_list|,
name|Long
name|subjectAreaId
parameter_list|,
name|User
name|user
parameter_list|)
block|{
name|CourseOffering
name|co
init|=
name|io
operator|.
name|findSortCourseOfferingForSubjectArea
argument_list|(
name|subjectAreaId
argument_list|)
decl_stmt|;
name|boolean
name|isEditable
init|=
name|io
operator|.
name|isViewableBy
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isEditable
condition|)
block|{
if|if
condition|(
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|!=
literal|null
operator|&&
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|boolean
name|canEdit
init|=
literal|true
decl_stmt|;
name|Iterator
name|it
init|=
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|InstrOfferingConfig
name|ioc
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|canEdit
operator|&&
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ioc
operator|=
operator|(
name|InstrOfferingConfig
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|ioc
operator|.
name|isViewableBy
argument_list|(
name|user
argument_list|)
condition|)
block|{
name|canEdit
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|isEditable
operator|=
name|canEdit
expr_stmt|;
block|}
block|}
name|TableRow
name|row
init|=
operator|(
name|this
operator|.
name|initRow
argument_list|(
literal|true
argument_list|)
operator|)
decl_stmt|;
name|row
operator|.
name|setOnMouseOver
argument_list|(
name|this
operator|.
name|getRowMouseOver
argument_list|(
literal|true
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|setOnMouseOut
argument_list|(
name|this
operator|.
name|getRowMouseOut
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|setOnClick
argument_list|(
name|subjectOnClickAction
argument_list|(
name|io
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|isManagedAs
init|=
operator|!
name|co
operator|.
name|isIsControl
argument_list|()
operator|.
name|booleanValue
argument_list|()
decl_stmt|;
name|TableCell
name|cell
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isShowLabel
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|subjectAndCourseInfo
argument_list|(
name|io
argument_list|,
name|co
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowDivSec
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|initNormalCell
argument_list|(
literal|""
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowDemand
argument_list|()
condition|)
block|{
name|String
name|demand
init|=
literal|"0"
decl_stmt|;
if|if
condition|(
name|StudentClassEnrollment
operator|.
name|sessionHasEnrollments
argument_list|(
name|io
operator|.
name|getSessionId
argument_list|()
argument_list|)
condition|)
block|{
name|demand
operator|=
operator|(
name|io
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
condition|?
name|io
operator|.
name|getEnrollment
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|"0"
operator|)
expr_stmt|;
block|}
else|else
block|{
name|demand
operator|=
operator|(
name|io
operator|.
name|getDemand
argument_list|()
operator|!=
literal|null
condition|?
name|io
operator|.
name|getDemand
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|"0"
operator|)
expr_stmt|;
if|if
condition|(
name|co
operator|.
name|isIsControl
argument_list|()
operator|.
name|booleanValue
argument_list|()
operator|&&
operator|!
name|io
operator|.
name|isNotOffered
argument_list|()
operator|.
name|booleanValue
argument_list|()
operator|&&
operator|(
name|io
operator|.
name|getDemand
argument_list|()
operator|==
literal|null
operator|||
name|io
operator|.
name|getDemand
argument_list|()
operator|.
name|intValue
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
name|demand
operator|=
literal|"<span style='font-weight:bold;color:red;'>0</span>"
expr_stmt|;
block|}
block|}
name|cell
operator|=
name|initNormalCell
argument_list|(
name|demand
argument_list|,
name|co
operator|.
name|isIsControl
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setAlign
argument_list|(
literal|"right"
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowProjectedDemand
argument_list|()
condition|)
block|{
name|cell
operator|=
name|initNormalCell
argument_list|(
operator|(
name|io
operator|.
name|getProjectedDemand
argument_list|()
operator|!=
literal|null
condition|?
name|io
operator|.
name|getProjectedDemand
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|"0"
operator|)
argument_list|,
name|co
operator|.
name|isIsControl
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setAlign
argument_list|(
literal|"right"
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowLimit
argument_list|()
condition|)
block|{
name|boolean
name|unlimited
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|x
init|=
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
operator|!
name|unlimited
operator|&&
name|x
operator|.
name|hasNext
argument_list|()
condition|;
control|)
if|if
condition|(
operator|(
operator|(
operator|(
name|InstrOfferingConfig
operator|)
name|x
operator|.
name|next
argument_list|()
operator|)
operator|)
operator|.
name|isUnlimitedEnrollment
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
name|unlimited
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|unlimited
condition|)
name|cell
operator|=
name|initNormalCell
argument_list|(
literal|"<font size=\"+1\">&infin;</font>"
argument_list|,
name|co
operator|.
name|isIsControl
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|cell
operator|=
name|initNormalCell
argument_list|(
name|io
operator|.
name|getLimit
argument_list|()
operator|!=
literal|null
condition|?
name|io
operator|.
name|getLimit
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|""
argument_list|,
name|co
operator|.
name|isIsControl
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setAlign
argument_list|(
literal|"right"
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
name|int
name|emptyCells
init|=
literal|0
decl_stmt|;
name|cell
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|isShowRoomRatio
argument_list|()
condition|)
block|{
name|emptyCells
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|isShowManager
argument_list|()
condition|)
block|{
name|emptyCells
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|isShowDatePattern
argument_list|()
condition|)
block|{
name|emptyCells
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|isShowMinPerWk
argument_list|()
condition|)
block|{
name|emptyCells
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|isShowTimePattern
argument_list|()
condition|)
block|{
name|emptyCells
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|isShowPreferences
argument_list|()
condition|)
block|{
name|emptyCells
operator|+=
name|PREFERENCE_COLUMN_ORDER
operator|.
name|length
operator|+
operator|(
name|iDisplayDistributionPrefs
condition|?
literal|0
else|:
operator|-
literal|1
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowInstructor
argument_list|()
condition|)
block|{
name|emptyCells
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|getDisplayTimetable
argument_list|()
operator|&&
name|isShowTimetable
argument_list|()
condition|)
block|{
name|emptyCells
operator|+=
name|TIMETABLE_COLUMN_ORDER
operator|.
name|length
expr_stmt|;
block|}
if|if
condition|(
name|emptyCells
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|isManagedAs
condition|)
block|{
if|if
condition|(
operator|!
name|isShowTitle
argument_list|()
operator|&&
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getTitle
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|title
init|=
literal|"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"
decl_stmt|;
if|if
condition|(
name|co
operator|.
name|getTitle
argument_list|()
operator|!=
literal|null
operator|&&
name|co
operator|.
name|getTitle
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|title
operator|+=
literal|"<b>"
operator|+
name|co
operator|.
name|getTitle
argument_list|()
operator|+
literal|"</b>"
expr_stmt|;
name|title
operator|+=
literal|" (<span title='"
operator|+
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getCourseNameWithTitle
argument_list|()
operator|+
literal|"'>Managed As "
operator|+
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
operator|+
literal|"</span>)"
expr_stmt|;
block|}
else|else
block|{
name|title
operator|+=
literal|"<span title='"
operator|+
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getCourseNameWithTitle
argument_list|()
operator|+
literal|"'>Managed As "
operator|+
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
operator|+
literal|"</span>"
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|it
init|=
name|io
operator|.
name|courseOfferingsMinusSortCourseOfferingForSubjectArea
argument_list|(
name|co
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOffering
name|x
init|=
operator|(
name|CourseOffering
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|title
operator|+=
literal|"<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"
expr_stmt|;
if|if
condition|(
name|x
operator|.
name|getTitle
argument_list|()
operator|!=
literal|null
condition|)
name|title
operator|+=
literal|"<font color=\""
operator|+
name|disabledColor
operator|+
literal|"\">"
operator|+
name|x
operator|.
name|getTitle
argument_list|()
operator|+
literal|"</font>"
expr_stmt|;
block|}
name|cell
operator|=
name|initNormalCell
argument_list|(
literal|"<font color=\""
operator|+
name|disabledColor
operator|+
literal|"\">"
operator|+
name|title
operator|+
literal|"</font>"
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cell
operator|=
name|initNormalCell
argument_list|(
literal|"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=\""
operator|+
name|disabledColor
operator|+
literal|"\"><span title='"
operator|+
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getCourseNameWithTitle
argument_list|()
operator|+
literal|"'>Managed As "
operator|+
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
operator|+
literal|"</span></font>"
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|isShowTitle
argument_list|()
operator|&&
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getTitle
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|title
init|=
literal|"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"
decl_stmt|;
if|if
condition|(
name|co
operator|.
name|isIsControl
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
name|title
operator|+=
literal|"<b>"
expr_stmt|;
name|title
operator|+=
operator|(
name|co
operator|.
name|getTitle
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|co
operator|.
name|getTitle
argument_list|()
operator|)
expr_stmt|;
if|if
condition|(
name|co
operator|.
name|isIsControl
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
name|title
operator|+=
literal|"</b>"
expr_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|io
operator|.
name|courseOfferingsMinusSortCourseOfferingForSubjectArea
argument_list|(
name|co
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOffering
name|x
init|=
operator|(
name|CourseOffering
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|title
operator|+=
literal|"<br>"
expr_stmt|;
if|if
condition|(
name|x
operator|.
name|getTitle
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|title
operator|+=
literal|"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=\""
operator|+
name|disabledColor
operator|+
literal|"\">"
operator|+
name|x
operator|.
name|getTitle
argument_list|()
operator|+
literal|"</font>"
expr_stmt|;
block|}
block|}
name|cell
operator|=
name|initNormalCell
argument_list|(
name|title
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cell
operator|=
name|initNormalCell
argument_list|(
literal|""
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
block|}
block|}
name|cell
operator|.
name|setColSpan
argument_list|(
name|emptyCells
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setAlign
argument_list|(
literal|"left"
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowTitle
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|initNormalCell
argument_list|(
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getTitle
argument_list|()
operator|!=
literal|null
condition|?
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getTitle
argument_list|()
else|:
literal|"&nbsp;"
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowCredit
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|initNormalCell
argument_list|(
operator|(
name|io
operator|.
name|getCredit
argument_list|()
operator|!=
literal|null
condition|?
literal|"<span title='"
operator|+
name|io
operator|.
name|getCredit
argument_list|()
operator|.
name|creditText
argument_list|()
operator|+
literal|"'>"
operator|+
name|io
operator|.
name|getCredit
argument_list|()
operator|.
name|creditAbbv
argument_list|()
operator|+
literal|"</span>"
else|:
literal|""
operator|)
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowSubpartCredit
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|initNormalCell
argument_list|(
literal|""
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowConsent
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|initNormalCell
argument_list|(
name|io
operator|.
name|getConsentType
argument_list|()
operator|!=
literal|null
condition|?
literal|"<span title='"
operator|+
name|io
operator|.
name|getConsentType
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|"'>"
operator|+
name|io
operator|.
name|getConsentType
argument_list|()
operator|.
name|getAbbv
argument_list|()
operator|+
literal|"</span>"
else|:
literal|"&nbsp;"
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowDesignatorRequired
argument_list|()
condition|)
block|{
name|cell
operator|=
name|initNormalCell
argument_list|(
name|io
operator|.
name|isDesignatorRequired
argument_list|()
operator|!=
literal|null
operator|&&
name|io
operator|.
name|isDesignatorRequired
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"<IMG border='0' alt='Yes' title='Designator is required.' align='absmiddle' src='images/tick.gif'>"
else|:
literal|""
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setAlign
argument_list|(
literal|"center"
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowSchedulePrintNote
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|buildSchedulePrintNote
argument_list|(
name|io
argument_list|,
name|isEditable
argument_list|,
name|user
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowNote
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|initNormalCell
argument_list|(
literal|""
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowExam
argument_list|()
condition|)
block|{
name|TreeSet
name|exams
init|=
operator|new
name|TreeSet
argument_list|(
name|Exam
operator|.
name|findAll
argument_list|(
name|ExamOwner
operator|.
name|sOwnerTypeOffering
argument_list|,
name|io
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|io
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOffering
name|cox
init|=
operator|(
name|CourseOffering
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|exams
operator|.
name|addAll
argument_list|(
name|Exam
operator|.
name|findAll
argument_list|(
name|ExamOwner
operator|.
name|sOwnerTypeCourse
argument_list|,
name|cox
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|ioc
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|exams
operator|.
name|addAll
argument_list|(
name|Exam
operator|.
name|findAll
argument_list|(
name|ExamOwner
operator|.
name|sOwnerTypeConfig
argument_list|,
name|ioc
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isShowExamName
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|this
operator|.
name|buildExamName
argument_list|(
name|exams
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowExamTimetable
argument_list|()
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|this
operator|.
name|buildExamPeriod
argument_list|(
name|examAssignment
argument_list|,
name|exams
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|this
operator|.
name|buildExamRoom
argument_list|(
name|examAssignment
argument_list|,
name|exams
argument_list|,
name|isEditable
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|table
operator|.
name|addContent
argument_list|(
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|!=
literal|null
operator|&
operator|!
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|TreeSet
name|configs
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|InstrOfferingConfigComparator
argument_list|(
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|configs
operator|.
name|addAll
argument_list|(
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
argument_list|)
expr_stmt|;
name|buildConfigRows
argument_list|(
name|classAssignment
argument_list|,
name|examAssignment
argument_list|,
name|table
argument_list|,
name|configs
argument_list|,
name|user
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|TableStream
name|initTable
parameter_list|(
name|JspWriter
name|outputStream
parameter_list|,
name|Long
name|sessionId
parameter_list|)
block|{
name|TableStream
name|table
init|=
operator|new
name|TableStream
argument_list|(
name|outputStream
argument_list|)
decl_stmt|;
name|table
operator|.
name|setWidth
argument_list|(
literal|"90%"
argument_list|)
expr_stmt|;
name|table
operator|.
name|setBorder
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|table
operator|.
name|setCellSpacing
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|table
operator|.
name|setCellPadding
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|table
operator|.
name|tableDefComplete
argument_list|()
expr_stmt|;
name|this
operator|.
name|buildTableHeader
argument_list|(
name|table
argument_list|,
name|sessionId
argument_list|)
expr_stmt|;
return|return
operator|(
name|table
operator|)
return|;
block|}
specifier|public
name|void
name|htmlTableForInstructionalOffering
parameter_list|(
name|HttpSession
name|session
parameter_list|,
name|ClassAssignmentProxy
name|classAssignment
parameter_list|,
name|ExamAssignmentProxy
name|examAssignment
parameter_list|,
name|Long
name|instructionalOfferingId
parameter_list|,
name|User
name|user
parameter_list|,
name|JspWriter
name|outputStream
parameter_list|,
name|Comparator
name|classComparator
parameter_list|)
block|{
if|if
condition|(
name|instructionalOfferingId
operator|!=
literal|null
operator|&&
name|user
operator|!=
literal|null
condition|)
block|{
name|InstructionalOfferingDAO
name|idao
init|=
operator|new
name|InstructionalOfferingDAO
argument_list|()
decl_stmt|;
name|InstructionalOffering
name|io
init|=
name|idao
operator|.
name|get
argument_list|(
name|instructionalOfferingId
argument_list|)
decl_stmt|;
name|Long
name|subjectAreaId
init|=
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
decl_stmt|;
comment|// Get Configuration
name|TreeSet
name|ts
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
name|ts
operator|.
name|add
argument_list|(
name|io
argument_list|)
expr_stmt|;
name|WebInstructionalOfferingTableBuilder
name|iotbl
init|=
operator|new
name|WebInstructionalOfferingTableBuilder
argument_list|()
decl_stmt|;
name|iotbl
operator|.
name|setDisplayDistributionPrefs
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setVisibleColumns
argument_list|(
name|COLUMNS
argument_list|)
expr_stmt|;
name|htmlTableForInstructionalOfferings
argument_list|(
name|session
argument_list|,
name|classAssignment
argument_list|,
name|examAssignment
argument_list|,
name|ts
argument_list|,
name|subjectAreaId
argument_list|,
name|user
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|outputStream
argument_list|,
name|classComparator
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|htmlTableForInstructionalOfferings
parameter_list|(
name|HttpSession
name|session
parameter_list|,
name|ClassAssignmentProxy
name|classAssignment
parameter_list|,
name|ExamAssignmentProxy
name|examAssignment
parameter_list|,
name|InstructionalOfferingListForm
name|form
parameter_list|,
name|Long
name|subjectAreaId
parameter_list|,
name|User
name|user
parameter_list|,
name|boolean
name|displayHeader
parameter_list|,
name|boolean
name|allCoursesAreGiven
parameter_list|,
name|JspWriter
name|outputStream
parameter_list|,
name|String
name|backType
parameter_list|,
name|String
name|backId
parameter_list|)
block|{
name|setBackType
argument_list|(
name|backType
argument_list|)
expr_stmt|;
name|setBackId
argument_list|(
name|backId
argument_list|)
expr_stmt|;
name|this
operator|.
name|setVisibleColumns
argument_list|(
name|form
argument_list|)
expr_stmt|;
name|htmlTableForInstructionalOfferings
argument_list|(
name|session
argument_list|,
name|classAssignment
argument_list|,
name|examAssignment
argument_list|,
operator|(
name|TreeSet
operator|)
name|form
operator|.
name|getInstructionalOfferings
argument_list|()
argument_list|,
name|subjectAreaId
argument_list|,
name|user
argument_list|,
name|displayHeader
argument_list|,
name|allCoursesAreGiven
argument_list|,
name|outputStream
argument_list|,
operator|new
name|ClassComparator
argument_list|(
name|form
operator|.
name|getSortBy
argument_list|()
argument_list|,
name|classAssignment
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|htmlTableForInstructionalOfferings
parameter_list|(
name|HttpSession
name|session
parameter_list|,
name|ClassAssignmentProxy
name|classAssignment
parameter_list|,
name|ExamAssignmentProxy
name|examAssignment
parameter_list|,
name|TreeSet
name|insructionalOfferings
parameter_list|,
name|Long
name|subjectAreaId
parameter_list|,
name|User
name|user
parameter_list|,
name|boolean
name|displayHeader
parameter_list|,
name|boolean
name|allCoursesAreGiven
parameter_list|,
name|JspWriter
name|outputStream
parameter_list|,
name|Comparator
name|classComparator
parameter_list|)
block|{
if|if
condition|(
name|classComparator
operator|!=
literal|null
condition|)
name|setClassComparator
argument_list|(
name|classComparator
argument_list|)
expr_stmt|;
if|if
condition|(
name|isShowTimetable
argument_list|()
condition|)
block|{
name|boolean
name|hasTimetable
init|=
literal|false
decl_stmt|;
try|try
block|{
name|TimetableManager
name|manager
init|=
name|TimetableManager
operator|.
name|getManager
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|manager
operator|!=
literal|null
operator|&&
name|manager
operator|.
name|canSeeTimetable
argument_list|(
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
argument_list|,
name|user
argument_list|)
operator|&&
name|classAssignment
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|classAssignment
operator|instanceof
name|CachedClassAssignmentProxy
condition|)
block|{
name|Vector
name|allClasses
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|insructionalOfferings
operator|.
name|iterator
argument_list|()
init|;
operator|!
name|hasTimetable
operator|&&
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstructionalOffering
name|io
init|=
operator|(
name|InstructionalOffering
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
operator|!
name|hasTimetable
operator|&&
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|ioc
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|k
init|=
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
operator|!
name|hasTimetable
operator|&&
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|ss
init|=
operator|(
name|SchedulingSubpart
operator|)
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|l
init|=
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|l
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|l
operator|.
name|next
argument_list|()
decl_stmt|;
name|allClasses
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
operator|(
operator|(
name|CachedClassAssignmentProxy
operator|)
name|classAssignment
operator|)
operator|.
name|setCache
argument_list|(
name|allClasses
argument_list|)
expr_stmt|;
name|hasTimetable
operator|=
operator|!
name|classAssignment
operator|.
name|getAssignmentTable
argument_list|(
name|allClasses
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|insructionalOfferings
operator|.
name|iterator
argument_list|()
init|;
operator|!
name|hasTimetable
operator|&&
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstructionalOffering
name|io
init|=
operator|(
name|InstructionalOffering
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
operator|!
name|hasTimetable
operator|&&
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|ioc
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|k
init|=
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
operator|!
name|hasTimetable
operator|&&
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|ss
init|=
operator|(
name|SchedulingSubpart
operator|)
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|l
init|=
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|l
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|l
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|classAssignment
operator|.
name|getAssignment
argument_list|(
name|clazz
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|hasTimetable
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|setDisplayTimetable
argument_list|(
name|hasTimetable
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShowExam
argument_list|()
condition|)
name|setShowExamTimetable
argument_list|(
name|examAssignment
operator|!=
literal|null
operator|||
name|Exam
operator|.
name|hasTimetable
argument_list|(
operator|(
name|Long
operator|)
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|SESSION_ID_ATTR_NAME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ArrayList
name|notOfferedOfferings
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|ArrayList
name|offeredOfferings
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|ArrayList
name|offeringIds
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Iterator
name|it
init|=
name|insructionalOfferings
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|InstructionalOffering
name|io
init|=
literal|null
decl_stmt|;
name|boolean
name|hasOfferedCourses
init|=
literal|false
decl_stmt|;
name|boolean
name|hasNotOfferedCourses
init|=
literal|false
decl_stmt|;
name|setUserSettings
argument_list|(
name|user
argument_list|)
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|io
operator|=
operator|(
name|InstructionalOffering
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|io
operator|.
name|isNotOffered
argument_list|()
operator|==
literal|null
operator|||
name|io
operator|.
name|isNotOffered
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|hasNotOfferedCourses
operator|=
literal|true
expr_stmt|;
name|notOfferedOfferings
operator|.
name|add
argument_list|(
name|io
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hasOfferedCourses
operator|=
literal|true
expr_stmt|;
name|offeredOfferings
operator|.
name|add
argument_list|(
name|io
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|hasOfferedCourses
operator|||
name|allCoursesAreGiven
condition|)
block|{
if|if
condition|(
name|displayHeader
condition|)
block|{
try|try
block|{
if|if
condition|(
name|allCoursesAreGiven
condition|)
name|outputStream
operator|.
name|print
argument_list|(
literal|"<DIV align=\"right\"><A class=\"l7\" href=\"#notOffered\">Courses Not Offered</A></DIV>"
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|print
argument_list|(
literal|"<DIV class=\"WelcomeRowHead\"><A name=\"offered\"></A>Offered Courses</DIV>"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|hasOfferedCourses
condition|)
block|{
name|it
operator|=
name|offeredOfferings
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|TableStream
name|offeredTable
init|=
name|this
operator|.
name|initTable
argument_list|(
name|outputStream
argument_list|,
operator|(
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
operator|==
literal|null
condition|?
literal|null
else|:
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
operator|.
name|getUniqueId
argument_list|()
operator|)
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|io
operator|=
operator|(
name|InstructionalOffering
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|offeringIds
operator|.
name|add
argument_list|(
name|io
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|addInstrOffrRowsToTable
argument_list|(
name|classAssignment
argument_list|,
name|examAssignment
argument_list|,
name|offeredTable
argument_list|,
name|io
argument_list|,
name|subjectAreaId
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
name|offeredTable
operator|.
name|tableComplete
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|displayHeader
condition|)
try|try
block|{
name|outputStream
operator|.
name|print
argument_list|(
literal|"<font class=\"error\">There are no courses currently offered for this subject.</font>"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|hasNotOfferedCourses
operator|||
name|allCoursesAreGiven
condition|)
block|{
if|if
condition|(
name|displayHeader
condition|)
block|{
try|try
block|{
name|outputStream
operator|.
name|print
argument_list|(
literal|"<br>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|allCoursesAreGiven
condition|)
name|outputStream
operator|.
name|print
argument_list|(
literal|"<DIV align=\"right\"><A class=\"l7\" href=\"#offered\">Offered Courses</A></DIV>"
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|print
argument_list|(
literal|"<DIV class=\"WelcomeRowHead\"><A name=\"notOffered\"></A>Not Offered Courses</DIV>"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|hasNotOfferedCourses
condition|)
block|{
name|it
operator|=
name|notOfferedOfferings
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|TableStream
name|notOfferedTable
init|=
name|this
operator|.
name|initTable
argument_list|(
name|outputStream
argument_list|,
operator|(
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
operator|==
literal|null
condition|?
literal|null
else|:
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
operator|.
name|getUniqueId
argument_list|()
operator|)
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|io
operator|=
operator|(
name|InstructionalOffering
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|offeringIds
operator|.
name|add
argument_list|(
name|io
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|addInstrOffrRowsToTable
argument_list|(
name|classAssignment
argument_list|,
name|examAssignment
argument_list|,
name|notOfferedTable
argument_list|,
name|io
argument_list|,
name|subjectAreaId
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
name|notOfferedTable
operator|.
name|tableComplete
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|displayHeader
condition|)
try|try
block|{
name|outputStream
operator|.
name|print
argument_list|(
literal|"<font class=\"normal\">&nbsp;<br>All courses are currently being offered for this subject.</font>"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|Navigation
operator|.
name|set
argument_list|(
name|session
argument_list|,
name|Navigation
operator|.
name|sInstructionalOfferingLevel
argument_list|,
name|offeringIds
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setVisibleColumns
parameter_list|(
name|InstructionalOfferingListFormInterface
name|form
parameter_list|)
block|{
name|setShowLabel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setShowDivSec
argument_list|(
name|form
operator|.
name|getDivSec
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|setShowDemand
argument_list|(
name|form
operator|.
name|getDemand
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|setShowProjectedDemand
argument_list|(
name|form
operator|.
name|getProjectedDemand
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|setShowMinPerWk
argument_list|(
name|form
operator|.
name|getMinPerWk
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|setShowLimit
argument_list|(
name|form
operator|.
name|getLimit
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|setShowRoomRatio
argument_list|(
name|form
operator|.
name|getRoomLimit
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|setShowManager
argument_list|(
name|form
operator|.
name|getManager
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|setShowDatePattern
argument_list|(
name|form
operator|.
name|getDatePattern
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|setShowTimePattern
argument_list|(
name|form
operator|.
name|getTimePattern
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|setShowPreferences
argument_list|(
name|form
operator|.
name|getPreferences
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|setShowInstructor
argument_list|(
name|form
operator|.
name|getInstructor
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|form
operator|.
name|getTimetable
argument_list|()
operator|!=
literal|null
condition|)
name|setShowTimetable
argument_list|(
name|form
operator|.
name|getTimetable
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|setShowTimetable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setShowCredit
argument_list|(
name|form
operator|.
name|getCredit
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|setShowSubpartCredit
argument_list|(
name|form
operator|.
name|getSubpartCredit
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|setShowSchedulePrintNote
argument_list|(
name|form
operator|.
name|getSchedulePrintNote
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|setShowNote
argument_list|(
name|form
operator|.
name|getNote
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|setShowConsent
argument_list|(
name|form
operator|.
name|getConsent
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|setShowDesignatorRequired
argument_list|(
name|form
operator|.
name|getDesignatorRequired
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|setShowTitle
argument_list|(
name|form
operator|.
name|getTitle
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|form
operator|.
name|getCanSeeExams
argument_list|()
condition|)
block|{
name|setShowExam
argument_list|(
name|form
operator|.
name|getExams
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setShowExam
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|setVisibleColumns
parameter_list|(
name|String
index|[]
name|columns
parameter_list|)
block|{
name|ArrayList
name|a
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|a
operator|.
name|add
argument_list|(
name|columns
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|setShowLabel
argument_list|(
name|a
operator|.
name|contains
argument_list|(
name|LABEL
argument_list|)
argument_list|)
expr_stmt|;
name|setShowDivSec
argument_list|(
name|a
operator|.
name|contains
argument_list|(
name|DIV_SEC
argument_list|)
argument_list|)
expr_stmt|;
name|setShowDemand
argument_list|(
name|a
operator|.
name|contains
argument_list|(
name|DEMAND
argument_list|)
argument_list|)
expr_stmt|;
name|setShowProjectedDemand
argument_list|(
name|a
operator|.
name|contains
argument_list|(
name|PROJECTED_DEMAND
argument_list|)
argument_list|)
expr_stmt|;
name|setShowMinPerWk
argument_list|(
name|a
operator|.
name|contains
argument_list|(
name|MIN_PER_WK
argument_list|)
argument_list|)
expr_stmt|;
name|setShowLimit
argument_list|(
name|a
operator|.
name|contains
argument_list|(
name|LIMIT
argument_list|)
argument_list|)
expr_stmt|;
name|setShowRoomRatio
argument_list|(
name|a
operator|.
name|contains
argument_list|(
name|ROOM_RATIO
argument_list|)
argument_list|)
expr_stmt|;
name|setShowManager
argument_list|(
name|a
operator|.
name|contains
argument_list|(
name|MANAGER
argument_list|)
argument_list|)
expr_stmt|;
name|setShowDatePattern
argument_list|(
name|a
operator|.
name|contains
argument_list|(
name|DATE_PATTERN
argument_list|)
argument_list|)
expr_stmt|;
name|setShowTimePattern
argument_list|(
name|a
operator|.
name|contains
argument_list|(
name|TIME_PATTERN
argument_list|)
argument_list|)
expr_stmt|;
name|setShowPreferences
argument_list|(
name|a
operator|.
name|contains
argument_list|(
name|PREFERENCES
argument_list|)
argument_list|)
expr_stmt|;
name|setShowInstructor
argument_list|(
name|a
operator|.
name|contains
argument_list|(
name|INSTRUCTOR
argument_list|)
argument_list|)
expr_stmt|;
name|setShowTimetable
argument_list|(
name|a
operator|.
name|contains
argument_list|(
name|TIMETABLE
argument_list|)
argument_list|)
expr_stmt|;
name|setShowCredit
argument_list|(
name|a
operator|.
name|contains
argument_list|(
name|CREDIT
argument_list|)
argument_list|)
expr_stmt|;
name|setShowSubpartCredit
argument_list|(
name|a
operator|.
name|contains
argument_list|(
name|SCHEDULING_SUBPART_CREDIT
argument_list|)
argument_list|)
expr_stmt|;
name|setShowSchedulePrintNote
argument_list|(
name|a
operator|.
name|contains
argument_list|(
name|SCHEDULE_PRINT_NOTE
argument_list|)
argument_list|)
expr_stmt|;
name|setShowNote
argument_list|(
name|a
operator|.
name|contains
argument_list|(
name|NOTE
argument_list|)
argument_list|)
expr_stmt|;
name|setShowConsent
argument_list|(
name|a
operator|.
name|contains
argument_list|(
name|CONSENT
argument_list|)
argument_list|)
expr_stmt|;
name|setShowDesignatorRequired
argument_list|(
name|a
operator|.
name|contains
argument_list|(
name|DESIGNATOR_REQ
argument_list|)
argument_list|)
expr_stmt|;
name|setShowTitle
argument_list|(
name|a
operator|.
name|contains
argument_list|(
name|TITLE
argument_list|)
argument_list|)
expr_stmt|;
name|setShowExam
argument_list|(
name|a
operator|.
name|contains
argument_list|(
name|EXAM
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isShowCredit
parameter_list|()
block|{
return|return
name|showCredit
return|;
block|}
specifier|public
name|void
name|setShowCredit
parameter_list|(
name|boolean
name|showCredit
parameter_list|)
block|{
name|this
operator|.
name|showCredit
operator|=
name|showCredit
expr_stmt|;
block|}
specifier|public
name|boolean
name|isShowDatePattern
parameter_list|()
block|{
return|return
name|showDatePattern
return|;
block|}
specifier|public
name|void
name|setShowDatePattern
parameter_list|(
name|boolean
name|showDatePattern
parameter_list|)
block|{
name|this
operator|.
name|showDatePattern
operator|=
name|showDatePattern
expr_stmt|;
block|}
specifier|public
name|boolean
name|isShowDemand
parameter_list|()
block|{
return|return
name|showDemand
return|;
block|}
specifier|public
name|void
name|setShowDemand
parameter_list|(
name|boolean
name|showDemand
parameter_list|)
block|{
name|this
operator|.
name|showDemand
operator|=
name|showDemand
expr_stmt|;
block|}
specifier|public
name|boolean
name|isShowDivSec
parameter_list|()
block|{
return|return
name|showDivSec
return|;
block|}
specifier|public
name|void
name|setShowDivSec
parameter_list|(
name|boolean
name|showDivSec
parameter_list|)
block|{
name|this
operator|.
name|showDivSec
operator|=
name|showDivSec
expr_stmt|;
block|}
specifier|public
name|boolean
name|isShowLabel
parameter_list|()
block|{
return|return
name|showLabel
return|;
block|}
specifier|public
name|void
name|setShowLabel
parameter_list|(
name|boolean
name|showLabel
parameter_list|)
block|{
name|this
operator|.
name|showLabel
operator|=
name|showLabel
expr_stmt|;
block|}
specifier|public
name|boolean
name|isShowLimit
parameter_list|()
block|{
return|return
name|showLimit
return|;
block|}
specifier|public
name|void
name|setShowLimit
parameter_list|(
name|boolean
name|showLimit
parameter_list|)
block|{
name|this
operator|.
name|showLimit
operator|=
name|showLimit
expr_stmt|;
block|}
specifier|public
name|boolean
name|isShowManager
parameter_list|()
block|{
return|return
name|showManager
return|;
block|}
specifier|public
name|void
name|setShowManager
parameter_list|(
name|boolean
name|showManager
parameter_list|)
block|{
name|this
operator|.
name|showManager
operator|=
name|showManager
expr_stmt|;
block|}
specifier|public
name|boolean
name|isShowMinPerWk
parameter_list|()
block|{
return|return
name|showMinPerWk
return|;
block|}
specifier|public
name|void
name|setShowMinPerWk
parameter_list|(
name|boolean
name|showMinPerWk
parameter_list|)
block|{
name|this
operator|.
name|showMinPerWk
operator|=
name|showMinPerWk
expr_stmt|;
block|}
specifier|public
name|boolean
name|isShowNote
parameter_list|()
block|{
return|return
name|showNote
return|;
block|}
specifier|public
name|void
name|setShowNote
parameter_list|(
name|boolean
name|showNote
parameter_list|)
block|{
name|this
operator|.
name|showNote
operator|=
name|showNote
expr_stmt|;
block|}
specifier|public
name|boolean
name|isShowPreferences
parameter_list|()
block|{
return|return
name|showPreferences
return|;
block|}
specifier|public
name|void
name|setShowPreferences
parameter_list|(
name|boolean
name|showPreferences
parameter_list|)
block|{
name|this
operator|.
name|showPreferences
operator|=
name|showPreferences
expr_stmt|;
block|}
specifier|public
name|boolean
name|isShowProjectedDemand
parameter_list|()
block|{
return|return
name|showProjectedDemand
return|;
block|}
specifier|public
name|void
name|setShowProjectedDemand
parameter_list|(
name|boolean
name|showProjectedDemand
parameter_list|)
block|{
name|this
operator|.
name|showProjectedDemand
operator|=
name|showProjectedDemand
expr_stmt|;
block|}
specifier|public
name|boolean
name|isShowRoomRatio
parameter_list|()
block|{
return|return
name|showRoomRatio
return|;
block|}
specifier|public
name|void
name|setShowRoomRatio
parameter_list|(
name|boolean
name|showRoomRatio
parameter_list|)
block|{
name|this
operator|.
name|showRoomRatio
operator|=
name|showRoomRatio
expr_stmt|;
block|}
specifier|public
name|boolean
name|isShowSchedulePrintNote
parameter_list|()
block|{
return|return
name|showSchedulePrintNote
return|;
block|}
specifier|public
name|void
name|setShowSchedulePrintNote
parameter_list|(
name|boolean
name|showSchedulePrintNote
parameter_list|)
block|{
name|this
operator|.
name|showSchedulePrintNote
operator|=
name|showSchedulePrintNote
expr_stmt|;
block|}
specifier|public
name|boolean
name|isShowTimePattern
parameter_list|()
block|{
return|return
name|showTimePattern
return|;
block|}
specifier|public
name|void
name|setShowTimePattern
parameter_list|(
name|boolean
name|showTimePattern
parameter_list|)
block|{
name|this
operator|.
name|showTimePattern
operator|=
name|showTimePattern
expr_stmt|;
block|}
specifier|public
name|boolean
name|isShowTimetable
parameter_list|()
block|{
return|return
name|showTimetable
return|;
block|}
specifier|public
name|void
name|setShowTimetable
parameter_list|(
name|boolean
name|showTimetable
parameter_list|)
block|{
name|this
operator|.
name|showTimetable
operator|=
name|showTimetable
expr_stmt|;
block|}
specifier|public
name|boolean
name|isShowInstructor
parameter_list|()
block|{
return|return
name|showInstructor
return|;
block|}
specifier|public
name|void
name|setShowInstructor
parameter_list|(
name|boolean
name|showInstructor
parameter_list|)
block|{
name|this
operator|.
name|showInstructor
operator|=
name|showInstructor
expr_stmt|;
block|}
specifier|public
name|Comparator
name|getClassComparator
parameter_list|()
block|{
return|return
name|iClassComparator
return|;
block|}
specifier|public
name|void
name|setClassComparator
parameter_list|(
name|Comparator
name|comparator
parameter_list|)
block|{
name|iClassComparator
operator|=
name|comparator
expr_stmt|;
block|}
specifier|public
name|String
name|getBackType
parameter_list|()
block|{
return|return
name|iBackType
return|;
block|}
specifier|public
name|void
name|setBackType
parameter_list|(
name|String
name|backType
parameter_list|)
block|{
name|iBackType
operator|=
name|backType
expr_stmt|;
block|}
specifier|public
name|String
name|getBackId
parameter_list|()
block|{
return|return
name|iBackId
return|;
block|}
specifier|public
name|void
name|setBackId
parameter_list|(
name|String
name|backId
parameter_list|)
block|{
name|iBackId
operator|=
name|backId
expr_stmt|;
block|}
specifier|public
name|boolean
name|isShowSubpartCredit
parameter_list|()
block|{
return|return
name|showSubpartCredit
return|;
block|}
specifier|public
name|void
name|setShowSubpartCredit
parameter_list|(
name|boolean
name|showSubpartCredit
parameter_list|)
block|{
name|this
operator|.
name|showSubpartCredit
operator|=
name|showSubpartCredit
expr_stmt|;
block|}
block|}
end_class

end_unit

