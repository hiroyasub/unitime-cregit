begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.0 (University Course Timetabling& Student Sectioning Application)  * Copyright (C) 2007, UniTime.org, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
package|;
end_package

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  * Miscellaneous function to generate javascript based on settings  *   * @author Heston Fernandes  */
end_comment

begin_class
specifier|public
class|class
name|JavascriptFunctions
block|{
specifier|public
specifier|static
name|boolean
name|isJsConfirm
parameter_list|(
name|User
name|user
parameter_list|)
block|{
name|String
name|jsConfirm
init|=
name|Settings
operator|.
name|getSettingValue
argument_list|(
name|user
argument_list|,
name|Constants
operator|.
name|SETTINGS_JS_DIALOGS
argument_list|)
decl_stmt|;
return|return
operator|(
name|jsConfirm
operator|==
literal|null
operator|||
operator|!
name|jsConfirm
operator|.
name|equals
argument_list|(
literal|"no"
argument_list|)
operator|)
return|;
block|}
comment|/**      * Returns the javascript variable 'jsConfirm' set to true/false depending      * on the user setting. This function is called from JSPs and is used to      * determine whether confirmation dialogs are displayed to the user      * @param user User Object      * @return String "var jsConfirm = true;" OR "var jsConfirm = false;"      */
specifier|public
specifier|static
name|String
name|getJsConfirm
parameter_list|(
name|User
name|user
parameter_list|)
block|{
return|return
literal|"var jsConfirm = "
operator|+
operator|(
name|isJsConfirm
argument_list|(
name|user
argument_list|)
condition|?
literal|"true"
else|:
literal|"false"
operator|)
operator|+
literal|";"
return|;
block|}
specifier|public
specifier|static
name|String
name|getInheritInstructorPreferencesCondition
parameter_list|(
name|User
name|user
parameter_list|)
block|{
name|String
name|inheritInstrPref
init|=
name|Settings
operator|.
name|getSettingValue
argument_list|(
name|user
argument_list|,
name|Constants
operator|.
name|SETTINGS_INHERIT_INSTRUCTOR_PREF
argument_list|)
decl_stmt|;
if|if
condition|(
name|Constants
operator|.
name|SETTINGS_INHERIT_INSTRUCTOR_PREF_YES
operator|.
name|equals
argument_list|(
name|inheritInstrPref
argument_list|)
condition|)
block|{
return|return
literal|"true"
return|;
block|}
if|else if
condition|(
name|Constants
operator|.
name|SETTINGS_INHERIT_INSTRUCTOR_PREF_NO
operator|.
name|equals
argument_list|(
name|inheritInstrPref
argument_list|)
condition|)
block|{
return|return
literal|"false"
return|;
block|}
if|else if
condition|(
name|Constants
operator|.
name|SETTINGS_INHERIT_INSTRUCTOR_PREF_CONFIRM
operator|.
name|equals
argument_list|(
name|inheritInstrPref
argument_list|)
condition|)
block|{
return|return
literal|"confirm('Do you want to apply instructor preferences to this class?')"
return|;
block|}
else|else
block|{
return|return
literal|"confirm('Do you want to apply instructor preferences to this class?')"
return|;
block|}
block|}
specifier|public
specifier|static
name|String
name|getCancelInheritInstructorPreferencesCondition
parameter_list|(
name|User
name|user
parameter_list|)
block|{
name|String
name|inheritInstrPref
init|=
name|Settings
operator|.
name|getSettingValue
argument_list|(
name|user
argument_list|,
name|Constants
operator|.
name|SETTINGS_INHERIT_INSTRUCTOR_PREF
argument_list|)
decl_stmt|;
if|if
condition|(
name|Constants
operator|.
name|SETTINGS_INHERIT_INSTRUCTOR_PREF_YES
operator|.
name|equals
argument_list|(
name|inheritInstrPref
argument_list|)
condition|)
block|{
return|return
literal|"true"
return|;
block|}
if|else if
condition|(
name|Constants
operator|.
name|SETTINGS_INHERIT_INSTRUCTOR_PREF_NO
operator|.
name|equals
argument_list|(
name|inheritInstrPref
argument_list|)
condition|)
block|{
return|return
literal|"false"
return|;
block|}
if|else if
condition|(
name|Constants
operator|.
name|SETTINGS_INHERIT_INSTRUCTOR_PREF_CONFIRM
operator|.
name|equals
argument_list|(
name|inheritInstrPref
argument_list|)
condition|)
block|{
return|return
literal|"confirm('Do you want to remove any instructor preferences \\nthat may have been applied to this class?')"
return|;
block|}
else|else
block|{
return|return
literal|"confirm('Do you want to remove any instructor preferences \\nthat may have been applied to this class?')"
return|;
block|}
block|}
block|}
end_class

end_unit

