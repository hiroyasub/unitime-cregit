begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
package|;
end_package

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|messages
operator|.
name|CourseMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|CommonValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|UserProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  * Miscellaneous function to generate javascript based on settings  *   * @author Heston Fernandes  */
end_comment

begin_class
specifier|public
class|class
name|JavascriptFunctions
block|{
specifier|protected
specifier|final
specifier|static
name|CourseMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|CourseMessages
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Deprecated
specifier|public
specifier|static
name|boolean
name|isJsConfirm
parameter_list|(
name|User
name|user
parameter_list|)
block|{
name|String
name|jsConfirm
init|=
name|Settings
operator|.
name|getSettingValue
argument_list|(
name|user
argument_list|,
name|Constants
operator|.
name|SETTINGS_JS_DIALOGS
argument_list|)
decl_stmt|;
return|return
operator|(
name|jsConfirm
operator|==
literal|null
operator|||
operator|!
name|jsConfirm
operator|.
name|equals
argument_list|(
literal|"no"
argument_list|)
operator|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isJsConfirm
parameter_list|(
name|SessionContext
name|context
parameter_list|)
block|{
return|return
operator|(
name|context
operator|.
name|isAuthenticated
argument_list|()
condition|?
name|CommonValues
operator|.
name|Yes
operator|.
name|eq
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
name|UserProperty
operator|.
name|ConfirmationDialogs
argument_list|)
argument_list|)
else|:
literal|true
operator|)
return|;
block|}
comment|/**      * Returns the javascript variable 'jsConfirm' set to true/false depending      * on the user setting. This function is called from JSPs and is used to      * determine whether confirmation dialogs are displayed to the user      * @param user User Object      * @return String "var jsConfirm = true;" OR "var jsConfirm = false;"      */
annotation|@
name|Deprecated
specifier|public
specifier|static
name|String
name|getJsConfirm
parameter_list|(
name|User
name|user
parameter_list|)
block|{
return|return
literal|"var jsConfirm = "
operator|+
operator|(
name|isJsConfirm
argument_list|(
name|user
argument_list|)
condition|?
literal|"true"
else|:
literal|"false"
operator|)
operator|+
literal|";"
return|;
block|}
specifier|public
specifier|static
name|String
name|getJsConfirm
parameter_list|(
name|SessionContext
name|context
parameter_list|)
block|{
return|return
literal|"var jsConfirm = "
operator|+
operator|(
name|isJsConfirm
argument_list|(
name|context
argument_list|)
condition|?
literal|"true"
else|:
literal|"false"
operator|)
operator|+
literal|";"
return|;
block|}
annotation|@
name|Deprecated
specifier|public
specifier|static
name|String
name|getInheritInstructorPreferencesCondition
parameter_list|(
name|User
name|user
parameter_list|)
block|{
name|String
name|inheritInstrPref
init|=
name|Settings
operator|.
name|getSettingValue
argument_list|(
name|user
argument_list|,
name|Constants
operator|.
name|SETTINGS_INHERIT_INSTRUCTOR_PREF
argument_list|)
decl_stmt|;
if|if
condition|(
name|Constants
operator|.
name|SETTINGS_INHERIT_INSTRUCTOR_PREF_YES
operator|.
name|equals
argument_list|(
name|inheritInstrPref
argument_list|)
condition|)
block|{
return|return
literal|"true"
return|;
block|}
if|else if
condition|(
name|Constants
operator|.
name|SETTINGS_INHERIT_INSTRUCTOR_PREF_NO
operator|.
name|equals
argument_list|(
name|inheritInstrPref
argument_list|)
condition|)
block|{
return|return
literal|"false"
return|;
block|}
if|else if
condition|(
name|Constants
operator|.
name|SETTINGS_INHERIT_INSTRUCTOR_PREF_CONFIRM
operator|.
name|equals
argument_list|(
name|inheritInstrPref
argument_list|)
condition|)
block|{
return|return
literal|"confirm('"
operator|+
name|MSG
operator|.
name|confirmApplyInstructorPreferencesToClass
argument_list|()
operator|+
literal|"')"
return|;
block|}
else|else
block|{
return|return
literal|"confirm('"
operator|+
name|MSG
operator|.
name|confirmApplyInstructorPreferencesToClass
argument_list|()
operator|+
literal|"')"
return|;
block|}
block|}
specifier|public
specifier|static
name|String
name|getInheritInstructorPreferencesCondition
parameter_list|(
name|SessionContext
name|context
parameter_list|)
block|{
name|String
name|inheritInstrPref
init|=
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
name|UserProperty
operator|.
name|InheritInstructorPrefs
argument_list|)
decl_stmt|;
if|if
condition|(
name|CommonValues
operator|.
name|Always
operator|.
name|eq
argument_list|(
name|inheritInstrPref
argument_list|)
condition|)
block|{
return|return
literal|"true"
return|;
block|}
if|else if
condition|(
name|CommonValues
operator|.
name|Never
operator|.
name|eq
argument_list|(
name|inheritInstrPref
argument_list|)
condition|)
block|{
return|return
literal|"false"
return|;
block|}
else|else
block|{
return|return
literal|"confirm('"
operator|+
name|MSG
operator|.
name|confirmApplyInstructorPreferencesToClass
argument_list|()
operator|+
literal|"')"
return|;
block|}
block|}
annotation|@
name|Deprecated
specifier|public
specifier|static
name|String
name|getCancelInheritInstructorPreferencesCondition
parameter_list|(
name|User
name|user
parameter_list|)
block|{
name|String
name|inheritInstrPref
init|=
name|Settings
operator|.
name|getSettingValue
argument_list|(
name|user
argument_list|,
name|Constants
operator|.
name|SETTINGS_INHERIT_INSTRUCTOR_PREF
argument_list|)
decl_stmt|;
if|if
condition|(
name|Constants
operator|.
name|SETTINGS_INHERIT_INSTRUCTOR_PREF_YES
operator|.
name|equals
argument_list|(
name|inheritInstrPref
argument_list|)
condition|)
block|{
return|return
literal|"true"
return|;
block|}
if|else if
condition|(
name|Constants
operator|.
name|SETTINGS_INHERIT_INSTRUCTOR_PREF_NO
operator|.
name|equals
argument_list|(
name|inheritInstrPref
argument_list|)
condition|)
block|{
return|return
literal|"false"
return|;
block|}
if|else if
condition|(
name|Constants
operator|.
name|SETTINGS_INHERIT_INSTRUCTOR_PREF_CONFIRM
operator|.
name|equals
argument_list|(
name|inheritInstrPref
argument_list|)
condition|)
block|{
return|return
literal|"confirm('"
operator|+
name|MSG
operator|.
name|confirmRemoveInstructorPreferencesFromClass
argument_list|()
operator|+
literal|"')"
return|;
block|}
else|else
block|{
return|return
literal|"confirm('"
operator|+
name|MSG
operator|.
name|confirmRemoveInstructorPreferencesFromClass
argument_list|()
operator|+
literal|"')"
return|;
block|}
block|}
specifier|public
specifier|static
name|String
name|getCancelInheritInstructorPreferencesCondition
parameter_list|(
name|SessionContext
name|context
parameter_list|)
block|{
name|String
name|inheritInstrPref
init|=
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
name|UserProperty
operator|.
name|InheritInstructorPrefs
argument_list|)
decl_stmt|;
if|if
condition|(
name|CommonValues
operator|.
name|Always
operator|.
name|eq
argument_list|(
name|inheritInstrPref
argument_list|)
condition|)
block|{
return|return
literal|"true"
return|;
block|}
if|else if
condition|(
name|CommonValues
operator|.
name|Never
operator|.
name|eq
argument_list|(
name|inheritInstrPref
argument_list|)
condition|)
block|{
return|return
literal|"false"
return|;
block|}
else|else
block|{
return|return
literal|"confirm('"
operator|+
name|MSG
operator|.
name|confirmRemoveInstructorPreferencesFromClass
argument_list|()
operator|+
literal|"')"
return|;
block|}
block|}
block|}
end_class

end_unit

