begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2011, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|Web
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|WebTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ItypeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SimpleItypeConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  * Build Configuration Edit Tree  *   * @author Heston Fernandes  */
end_comment

begin_class
specifier|public
class|class
name|SchedulingSubpartTableBuilder
block|{
comment|/**      * Reads the user defined config object and generates html code to display it      * @param request      * @param limit      * @param uid      * @param createAsNew      * @param unlimitedEnroll      * @return Html code for displaying user defined config      */
specifier|public
specifier|static
name|String
name|buildSubpartsTable
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|int
name|limit
parameter_list|,
name|String
name|uid
parameter_list|,
name|boolean
name|createAsNew
parameter_list|,
name|boolean
name|unlimitedEnroll
parameter_list|)
throws|throws
name|Exception
block|{
name|HttpSession
name|webSession
init|=
name|request
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|webSession
argument_list|)
decl_stmt|;
comment|// Check if variable limits is selected
name|boolean
name|varLimits
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"varLimits"
argument_list|)
operator|!=
literal|null
condition|)
name|varLimits
operator|=
literal|true
expr_stmt|;
comment|// Read user defined config
name|Vector
name|sp
init|=
operator|(
name|Vector
operator|)
name|webSession
operator|.
name|getAttribute
argument_list|(
name|SimpleItypeConfig
operator|.
name|CONFIGS_ATTR_NAME
argument_list|)
decl_stmt|;
comment|// Read setting for auto calculation
name|String
name|autoCalcStr
init|=
name|Settings
operator|.
name|getSettingValue
argument_list|(
name|user
argument_list|,
name|Constants
operator|.
name|SETTINGS_AUTOCALC
argument_list|)
decl_stmt|;
name|Debug
operator|.
name|debug
argument_list|(
literal|"User auto calc setting: "
operator|+
name|autoCalcStr
argument_list|)
expr_stmt|;
name|boolean
name|autoCalc
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|autoCalcStr
operator|!=
literal|null
operator|&&
operator|!
name|autoCalcStr
operator|.
name|equals
argument_list|(
literal|"yes"
argument_list|)
condition|)
name|autoCalc
operator|=
literal|false
expr_stmt|;
comment|// Get external depts
name|Collection
name|extDepts
init|=
operator|(
name|Collection
operator|)
name|request
operator|.
name|getAttribute
argument_list|(
name|Department
operator|.
name|EXTERNAL_DEPT_ATTR_NAME
argument_list|)
decl_stmt|;
name|String
name|extDeptsOption
init|=
literal|"<OPTION value='-1'>Department</OPTION>"
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|extDepts
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|d
init|=
operator|(
name|Department
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|extDeptsOption
operator|+=
literal|"<OPTION value='"
operator|+
name|d
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"'>"
operator|+
name|d
operator|.
name|getManagingDeptLabel
argument_list|()
operator|+
literal|"</OPTION>"
expr_stmt|;
block|}
comment|// Subparts exist
if|if
condition|(
name|sp
operator|!=
literal|null
operator|&&
name|sp
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|varLimits
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sp
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SimpleItypeConfig
name|sic
init|=
operator|(
name|SimpleItypeConfig
operator|)
name|sp
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasVarLimitsInSubpart
argument_list|(
name|request
argument_list|,
name|sic
argument_list|)
condition|)
block|{
name|varLimits
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|// Create a table
name|WebTable
name|tbl
init|=
operator|new
name|WebTable
argument_list|(
literal|9
argument_list|,
literal|""
argument_list|,
operator|new
name|String
index|[]
block|{
name|unlimitedEnroll
condition|?
literal|""
else|:
literal|"<<00>>"
block|,
literal|"&nbsp;"
block|,
operator|!
name|varLimits
condition|?
literal|"<<1>>"
else|:
literal|"Min Limit<br>per Class"
block|,
operator|!
name|varLimits
condition|?
literal|"<<11>>"
else|:
literal|"Max Limit<br>per Class"
block|,
literal|"Number<br>of Classes"
block|,
literal|"Minutes<br>per Week"
block|,
literal|"Number<br>of Rooms"
block|,
literal|"Room<br>Ratio"
block|,
literal|"Managing<br>Department"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"left"
block|,
literal|"left"
block|,
literal|"center"
block|,
literal|"center"
block|,
literal|"center"
block|,
literal|"center"
block|,
literal|"center"
block|,
literal|"center"
block|,
literal|"center"
block|}
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|tbl
operator|.
name|setSuppressRowHighlight
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Loop through itypes
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sp
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SimpleItypeConfig
name|sic
init|=
operator|(
name|SimpleItypeConfig
operator|)
name|sp
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// Recursively process each itype config
name|setupSubpart
argument_list|(
name|request
argument_list|,
name|sic
argument_list|,
literal|1
argument_list|,
name|tbl
argument_list|,
name|i
argument_list|,
name|sp
operator|.
name|size
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|limit
argument_list|,
literal|null
argument_list|,
name|autoCalc
argument_list|,
name|createAsNew
argument_list|,
name|extDeptsOption
argument_list|,
name|unlimitedEnroll
argument_list|,
name|varLimits
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|setAttribute
argument_list|(
literal|"subpartsExist"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|String
name|varLimitsCheckBox
init|=
literal|"<input type='checkbox' name='varLimits' value='y'<<0>>"
operator|+
operator|(
name|varLimits
condition|?
literal|"checked"
else|:
literal|""
operator|)
operator|+
literal|" onClick=\"doClick('multipleLimits', 0);\"><small>Allow variable limits</small>"
decl_stmt|;
name|String
name|tblStr
init|=
name|tbl
operator|.
name|printTable
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getAttribute
argument_list|(
literal|"varLimits"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|tblStr
operator|=
name|tblStr
operator|.
name|replaceAll
argument_list|(
literal|"<<00>>"
argument_list|,
name|varLimitsCheckBox
argument_list|)
expr_stmt|;
name|tblStr
operator|=
name|tblStr
operator|.
name|replaceAll
argument_list|(
literal|"<<0>>"
argument_list|,
literal|"checked"
argument_list|)
expr_stmt|;
name|tblStr
operator|=
name|tblStr
operator|.
name|replaceAll
argument_list|(
literal|"<<1>>"
argument_list|,
literal|"Min Limit<br>per Class"
argument_list|)
expr_stmt|;
name|tblStr
operator|=
name|tblStr
operator|.
name|replaceAll
argument_list|(
literal|"<<11>>"
argument_list|,
literal|"Max Limit<br>per Class"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|showVarLimits
init|=
name|Settings
operator|.
name|getSettingValue
argument_list|(
name|user
argument_list|,
name|Constants
operator|.
name|SETTINGS_SHOW_VAR_LIMITS
argument_list|)
decl_stmt|;
if|if
condition|(
name|showVarLimits
operator|!=
literal|null
operator|&&
operator|!
name|showVarLimits
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"no"
argument_list|)
condition|)
block|{
name|tblStr
operator|=
name|tblStr
operator|.
name|replaceAll
argument_list|(
literal|"<<00>>"
argument_list|,
name|varLimitsCheckBox
argument_list|)
expr_stmt|;
name|tblStr
operator|=
name|tblStr
operator|.
name|replaceAll
argument_list|(
literal|"<<0>>"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
block|}
else|else
name|tblStr
operator|=
name|tblStr
operator|.
name|replaceAll
argument_list|(
literal|"<<00>>"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|tblStr
operator|=
name|tblStr
operator|.
name|replaceAll
argument_list|(
literal|"<<1>>"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|tblStr
operator|=
name|tblStr
operator|.
name|replaceAll
argument_list|(
literal|"<<11>>"
argument_list|,
literal|"Limit<br>per Class"
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|tblStr
operator|)
return|;
block|}
else|else
block|{
name|request
operator|.
name|setAttribute
argument_list|(
literal|"subpartsExist"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
return|return
literal|""
return|;
block|}
block|}
comment|/**      * Checks if any subpart in the config has variable limits      * @param request Http Request object      * @param sic SimpleItypeConfig object      * @return true if var limits found, false otherwise      */
specifier|private
specifier|static
name|boolean
name|hasVarLimitsInSubpart
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|SimpleItypeConfig
name|sic
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"mnlpc"
operator|+
name|sic
operator|.
name|getId
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
name|sic
operator|.
name|setMinLimitPerClass
argument_list|(
name|Constants
operator|.
name|getPositiveInteger
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"mnlpc"
operator|+
name|sic
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"mxlpc"
operator|+
name|sic
operator|.
name|getId
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
name|sic
operator|.
name|setMaxLimitPerClass
argument_list|(
name|Constants
operator|.
name|getPositiveInteger
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"mxlpc"
operator|+
name|sic
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|mnlpc
init|=
name|sic
operator|.
name|getMinLimitPerClass
argument_list|()
decl_stmt|;
name|int
name|mxlpc
init|=
name|sic
operator|.
name|getMaxLimitPerClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|mnlpc
operator|!=
name|mxlpc
condition|)
return|return
literal|true
return|;
name|Vector
name|v
init|=
name|sic
operator|.
name|getSubparts
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|v
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SimpleItypeConfig
name|sic1
init|=
operator|(
name|SimpleItypeConfig
operator|)
name|v
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasVarLimitsInSubpart
argument_list|(
name|request
argument_list|,
name|sic1
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Recursive function generates the html code for displaying the config      * @param request Http Request object      * @param sic SimpleItypeConfig object      * @param level Recurse Level      * @param tbl WebTable object      * @param rowNum Row Number (in config)      * @param maxRows Max elements in config      * @param spRowNum row number of subpart      * @param maxSp Max subparts      * @param limit       * @param parentSic      * @param autoCalc       */
specifier|private
specifier|static
name|void
name|setupSubpart
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|SimpleItypeConfig
name|sic
parameter_list|,
name|int
name|level
parameter_list|,
name|WebTable
name|tbl
parameter_list|,
name|int
name|rowNum
parameter_list|,
name|int
name|maxRows
parameter_list|,
name|int
name|spRowNum
parameter_list|,
name|int
name|maxSp
parameter_list|,
name|int
name|limit
parameter_list|,
name|SimpleItypeConfig
name|parentSic
parameter_list|,
name|boolean
name|autoCalc
parameter_list|,
name|boolean
name|createAsNew
parameter_list|,
name|String
name|extDepts
parameter_list|,
name|boolean
name|unlimitedEnroll
parameter_list|,
name|boolean
name|varLimits
parameter_list|)
throws|throws
name|Exception
block|{
name|ItypeDesc
name|itype
init|=
name|sic
operator|.
name|getItype
argument_list|()
decl_stmt|;
comment|// Set attributes
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"mnlpc"
operator|+
name|sic
operator|.
name|getId
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
name|sic
operator|.
name|setMinLimitPerClass
argument_list|(
name|Constants
operator|.
name|getPositiveInteger
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"mnlpc"
operator|+
name|sic
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"mxlpc"
operator|+
name|sic
operator|.
name|getId
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
name|sic
operator|.
name|setMaxLimitPerClass
argument_list|(
name|Constants
operator|.
name|getPositiveInteger
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"mxlpc"
operator|+
name|sic
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"mpw"
operator|+
name|sic
operator|.
name|getId
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
name|sic
operator|.
name|setMinPerWeek
argument_list|(
name|Constants
operator|.
name|getPositiveInteger
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"mpw"
operator|+
name|sic
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"nc"
operator|+
name|sic
operator|.
name|getId
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
name|sic
operator|.
name|setNumClasses
argument_list|(
name|Constants
operator|.
name|getPositiveInteger
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"nc"
operator|+
name|sic
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"nr"
operator|+
name|sic
operator|.
name|getId
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
name|sic
operator|.
name|setNumRooms
argument_list|(
name|Constants
operator|.
name|getPositiveInteger
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"nr"
operator|+
name|sic
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"rr"
operator|+
name|sic
operator|.
name|getId
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
name|sic
operator|.
name|setRoomRatio
argument_list|(
name|Constants
operator|.
name|getPositiveFloat
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"rr"
operator|+
name|sic
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"md"
operator|+
name|sic
operator|.
name|getId
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
name|sic
operator|.
name|setManagingDeptId
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"md"
operator|+
name|sic
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"disabled"
operator|+
name|sic
operator|.
name|getId
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
name|sic
operator|.
name|setDisabled
argument_list|(
operator|new
name|Boolean
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"disabled"
operator|+
name|sic
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// Read attributes
name|int
name|mnlpc
init|=
name|sic
operator|.
name|getMinLimitPerClass
argument_list|()
decl_stmt|;
name|int
name|mxlpc
init|=
name|sic
operator|.
name|getMaxLimitPerClass
argument_list|()
decl_stmt|;
name|int
name|mpw
init|=
name|sic
operator|.
name|getMinPerWeek
argument_list|()
decl_stmt|;
name|int
name|nc
init|=
name|sic
operator|.
name|getNumClasses
argument_list|()
decl_stmt|;
name|int
name|nr
init|=
name|sic
operator|.
name|getNumRooms
argument_list|()
decl_stmt|;
name|float
name|rr
init|=
name|sic
operator|.
name|getRoomRatio
argument_list|()
decl_stmt|;
name|long
name|md
init|=
name|sic
operator|.
name|getManagingDeptId
argument_list|()
decl_stmt|;
name|long
name|subpartId
init|=
operator|-
literal|1L
decl_stmt|;
if|if
condition|(
operator|!
name|createAsNew
condition|)
name|subpartId
operator|=
name|sic
operator|.
name|getSubpartId
argument_list|()
expr_stmt|;
name|long
name|sicId
init|=
name|sic
operator|.
name|getId
argument_list|()
decl_stmt|;
name|boolean
name|disabled
init|=
name|sic
operator|.
name|isDisabled
argument_list|()
decl_stmt|;
name|boolean
name|notOwned
init|=
name|sic
operator|.
name|isNotOwned
argument_list|()
decl_stmt|;
name|boolean
name|hasError
init|=
name|sic
operator|.
name|getHasError
argument_list|()
decl_stmt|;
name|boolean
name|uDisabled
init|=
name|unlimitedEnroll
decl_stmt|;
name|Vector
name|v
init|=
name|sic
operator|.
name|getSubparts
argument_list|()
decl_stmt|;
comment|// If status is not LLR Edit then do not show option to change to external manager
name|boolean
name|mgrDisabled
init|=
literal|false
decl_stmt|;
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|request
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|user
operator|.
name|isAdmin
argument_list|()
operator|&&
operator|!
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
operator|.
name|getStatusType
argument_list|()
operator|.
name|canOwnerEdit
argument_list|()
condition|)
block|{
name|mgrDisabled
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|createAsNew
condition|)
block|{
name|md
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
if|if
condition|(
name|unlimitedEnroll
condition|)
block|{
name|mnlpc
operator|=
operator|-
literal|1
expr_stmt|;
name|mxlpc
operator|=
operator|-
literal|1
expr_stmt|;
name|nr
operator|=
operator|-
literal|1
expr_stmt|;
name|rr
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|Debug
operator|.
name|debug
argument_list|(
literal|"setting up subpart: "
operator|+
name|itype
operator|.
name|getAbbv
argument_list|()
operator|+
literal|", Level: "
operator|+
name|level
argument_list|)
expr_stmt|;
comment|// Generate Javascript
name|String
name|onBlur1
init|=
literal|""
decl_stmt|;
name|String
name|onBlur2
init|=
literal|""
decl_stmt|;
name|String
name|maxClasses
init|=
literal|"if ( document.forms[0].nc"
operator|+
name|sicId
operator|+
literal|".value> 999) { document.forms[0].nc"
operator|+
name|sicId
operator|+
literal|".value=0 } "
decl_stmt|;
if|if
condition|(
name|autoCalc
condition|)
block|{
name|onBlur1
operator|=
literal|" onBlur=\"if (this.value!=0&& (document.forms[0].mxlpc"
operator|+
name|sicId
operator|+
literal|".value==''|| document.forms[0].mxlpc"
operator|+
name|sicId
operator|+
literal|".value==null) ) {"
operator|+
literal|" document.forms[0].mxlpc"
operator|+
name|sicId
operator|+
literal|".value=this.value; }\""
expr_stmt|;
if|if
condition|(
name|parentSic
operator|!=
literal|null
condition|)
block|{
name|onBlur2
operator|=
literal|" onBlur=\"if (this.value!=0) "
operator|+
literal|"{ document.forms[0].nc"
operator|+
name|sicId
operator|+
literal|".value=Math.ceil( (document.forms[0].mxlpc"
operator|+
name|parentSic
operator|.
name|getId
argument_list|()
operator|+
literal|".value * document.forms[0].nc"
operator|+
name|parentSic
operator|.
name|getId
argument_list|()
operator|+
literal|".value) / this.value ); "
operator|+
name|maxClasses
operator|+
literal|" } "
expr_stmt|;
block|}
else|else
block|{
name|onBlur2
operator|=
literal|" onBlur=\"if (this.value!=0) { document.forms[0].nc"
operator|+
name|sicId
operator|+
literal|".value=Math.ceil(document.forms[0].limit.value/this.value); "
operator|+
name|maxClasses
operator|+
literal|"} "
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|varLimits
condition|)
block|{
if|if
condition|(
name|onBlur2
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|onBlur2
operator|=
literal|"onBlur=\"document.forms[0].mnlpc"
operator|+
name|sicId
operator|+
literal|".value=this.value; \""
expr_stmt|;
else|else
name|onBlur2
operator|+=
literal|"document.forms[0].mnlpc"
operator|+
name|sicId
operator|+
literal|".value=this.value; \""
expr_stmt|;
block|}
else|else
block|{
name|onBlur2
operator|+=
literal|"\""
expr_stmt|;
block|}
comment|// Generate indentation depending on recursive level
name|String
name|indent
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|level
condition|;
name|i
operator|++
control|)
name|indent
operator|+=
literal|"\n<IMG width=\"10\" align=\"absmiddle\" src=\"images/blank.gif\">"
expr_stmt|;
if|if
condition|(
name|indent
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
name|indent
operator|+=
literal|"\n<IMG align=\"absmiddle\" src=\"images/dot_line.gif\">&nbsp;"
expr_stmt|;
if|if
condition|(
operator|!
name|varLimits
operator|&&
name|mnlpc
operator|!=
name|mxlpc
condition|)
block|{
if|if
condition|(
name|mnlpc
operator|==
operator|-
literal|1
condition|)
name|mnlpc
operator|=
name|mxlpc
expr_stmt|;
else|else
name|request
operator|.
name|setAttribute
argument_list|(
literal|"varLimits"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
block|}
comment|// Generate html row for itype config
name|tbl
operator|.
name|addLine
argument_list|(
operator|new
name|String
index|[]
block|{
name|indent
operator|+
literal|"<span style='font-weight:bold;'>"
operator|+
name|itype
operator|.
name|getDesc
argument_list|()
operator|+
literal|"</span>"
operator|+
operator|(
name|hasError
condition|?
literal|"&nbsp;<IMG align=\"absmiddle\" src=\"images/Error16.jpg\">"
else|:
literal|""
operator|)
block|,
operator|(
operator|!
name|disabled
operator|)
condition|?
name|getIcons
argument_list|(
name|sic
argument_list|,
name|level
argument_list|,
name|rowNum
argument_list|,
name|maxRows
argument_list|,
name|spRowNum
argument_list|,
name|maxSp
argument_list|)
else|:
operator|(
name|notOwned
operator|)
condition|?
literal|"<img border=\"0\" src=\"images/lock.gif\">"
else|:
literal|""
block|,
literal|"\n\t<INPUT type=\"hidden\" name=\"subpartId"
operator|+
name|sicId
operator|+
literal|"\" value=\""
operator|+
name|subpartId
operator|+
literal|"\">"
operator|+
literal|"\n\t<INPUT type=\"hidden\" name=\"disabled"
operator|+
name|sicId
operator|+
literal|"\" value=\""
operator|+
name|disabled
operator|+
literal|"\">"
operator|+
operator|(
operator|(
name|disabled
operator|||
name|uDisabled
operator|||
operator|(
operator|!
name|varLimits
operator|&&
name|mnlpc
operator|==
name|mxlpc
operator|)
operator|)
condition|?
operator|(
literal|"\n\t<INPUT "
operator|+
literal|" name=\"mnlpc"
operator|+
name|sicId
operator|+
literal|"\" type=\"hidden\" value=\""
operator|+
operator|(
name|mnlpc
operator|>=
literal|0
condition|?
literal|""
operator|+
name|mnlpc
else|:
literal|""
operator|)
operator|+
literal|"\""
operator|+
literal|">"
operator|+
operator|(
operator|(
operator|(
name|disabled
operator|||
name|uDisabled
operator|)
operator|&&
name|mnlpc
operator|>=
literal|0
operator|)
operator|||
operator|(
operator|!
name|varLimits
operator|&&
name|mnlpc
operator|!=
name|mxlpc
operator|)
condition|?
literal|""
operator|+
name|mnlpc
else|:
literal|""
operator|)
operator|)
else|:
operator|(
literal|"\n\t<INPUT "
operator|+
literal|" name=\"mnlpc"
operator|+
name|sicId
operator|+
literal|"\" type=\"text\" size=\"4\" maxlength=\"4\" value=\""
operator|+
operator|(
name|mnlpc
operator|>=
literal|0
condition|?
literal|""
operator|+
name|mnlpc
else|:
literal|""
operator|)
operator|+
literal|"\""
operator|+
name|onBlur1
operator|+
literal|">"
operator|)
operator|)
block|,
operator|(
operator|(
name|disabled
operator|||
name|uDisabled
operator|)
condition|?
operator|(
literal|"\n\t<INPUT "
operator|+
literal|" name=\"mxlpc"
operator|+
name|sicId
operator|+
literal|"\" type=\"hidden\" value=\""
operator|+
operator|(
name|mxlpc
operator|>=
literal|0
condition|?
literal|""
operator|+
name|mxlpc
else|:
literal|""
operator|)
operator|+
literal|"\""
operator|+
literal|">"
operator|+
operator|(
name|mxlpc
operator|>=
literal|0
condition|?
literal|""
operator|+
name|mxlpc
else|:
literal|""
operator|)
operator|)
else|:
operator|(
literal|"\n\t<INPUT "
operator|+
literal|" name=\"mxlpc"
operator|+
name|sicId
operator|+
literal|"\" type=\"text\" size=\"4\" maxlength=\"4\" value=\""
operator|+
operator|(
name|mxlpc
operator|>=
literal|0
condition|?
literal|""
operator|+
name|mxlpc
else|:
literal|""
operator|)
operator|+
literal|"\""
operator|+
name|onBlur2
operator|+
literal|">"
operator|)
operator|)
block|,
operator|(
operator|(
name|disabled
operator|)
condition|?
operator|(
literal|"\n\t<INPUT "
operator|+
literal|" name=\"nc"
operator|+
name|sicId
operator|+
literal|"\" type=\"hidden\" value=\""
operator|+
operator|(
name|nc
operator|>=
literal|0
condition|?
literal|""
operator|+
name|nc
else|:
literal|""
operator|)
operator|+
literal|"\">"
operator|+
operator|(
name|nc
operator|>=
literal|0
condition|?
literal|""
operator|+
name|nc
else|:
literal|""
operator|)
operator|)
else|:
operator|(
literal|"\n\t<INPUT "
operator|+
literal|" name=\"nc"
operator|+
name|sicId
operator|+
literal|"\" type=\"text\" size=\"3\" maxlength=\"3\" value=\""
operator|+
operator|(
name|nc
operator|>=
literal|0
condition|?
literal|""
operator|+
name|nc
else|:
literal|""
operator|)
operator|+
literal|"\" onblur=\"if (!confirmNumClasses(this.value)) { this.value = 0 }\">"
operator|)
operator|)
block|,
operator|(
operator|(
name|disabled
operator|)
condition|?
operator|(
literal|"\n\t<INPUT "
operator|+
literal|" name=\"mpw"
operator|+
name|sicId
operator|+
literal|"\" type=\"hidden\" value=\""
operator|+
operator|(
name|mpw
operator|>=
literal|0
condition|?
literal|""
operator|+
name|mpw
else|:
literal|""
operator|)
operator|+
literal|"\">"
operator|+
operator|(
name|mpw
operator|>=
literal|0
condition|?
literal|""
operator|+
name|mpw
else|:
literal|""
operator|)
operator|)
else|:
operator|(
literal|"\n\t<INPUT "
operator|+
literal|" name=\"mpw"
operator|+
name|sicId
operator|+
literal|"\" type=\"text\" size=\"4\" maxlength=\"4\" value=\""
operator|+
operator|(
name|mpw
operator|>=
literal|0
condition|?
literal|""
operator|+
name|mpw
else|:
literal|""
operator|)
operator|+
literal|"\">"
operator|)
operator|)
block|,
operator|(
operator|(
name|disabled
operator|||
name|uDisabled
operator|)
condition|?
operator|(
literal|"\n\t<INPUT "
operator|+
literal|" name=\"nr"
operator|+
name|sicId
operator|+
literal|"\" type=\"hidden\" value=\""
operator|+
operator|(
name|nr
operator|>=
literal|0
condition|?
literal|""
operator|+
name|nr
else|:
literal|""
operator|)
operator|+
literal|"\">"
operator|+
operator|(
name|nr
operator|>=
literal|0
condition|?
literal|""
operator|+
name|nr
else|:
literal|""
operator|)
operator|)
else|:
operator|(
literal|"\n\t<INPUT "
operator|+
literal|" name=\"nr"
operator|+
name|sicId
operator|+
literal|"\" type=\"text\" size=\"4\" maxlength=\"2\" value=\""
operator|+
operator|(
name|nr
operator|>=
literal|0
condition|?
literal|""
operator|+
name|nr
else|:
literal|""
operator|)
operator|+
literal|"\">"
operator|)
operator|)
block|,
operator|(
operator|(
name|disabled
operator|||
name|uDisabled
operator|)
condition|?
operator|(
literal|"\n\t<INPUT "
operator|+
literal|" name=\"rr"
operator|+
name|sicId
operator|+
literal|"\" type=\"hidden\" value=\""
operator|+
operator|(
name|rr
operator|>=
literal|0
condition|?
literal|""
operator|+
name|rr
else|:
literal|""
operator|)
operator|+
literal|"\">"
operator|+
operator|(
name|rr
operator|>=
literal|0
condition|?
literal|""
operator|+
name|rr
else|:
literal|""
operator|)
operator|)
else|:
operator|(
literal|"\n\t<INPUT "
operator|+
literal|" name=\"rr"
operator|+
name|sicId
operator|+
literal|"\" type=\"text\" size=\"4\" maxlength=\"4\" value=\""
operator|+
operator|(
name|rr
operator|>=
literal|0
condition|?
literal|""
operator|+
name|rr
else|:
literal|""
operator|)
operator|+
literal|"\">"
operator|)
operator|)
block|,
operator|(
operator|(
name|disabled
operator|||
name|mgrDisabled
operator|)
condition|?
operator|(
literal|"\n\t<INPUT "
operator|+
literal|" name=\"md"
operator|+
name|sicId
operator|+
literal|"\" type=\"hidden\" value=\""
operator|+
name|md
operator|+
literal|"\">"
operator|+
name|getManagingDeptLabel
argument_list|(
name|request
argument_list|,
name|md
argument_list|)
operator|)
else|:
operator|(
literal|"\n\t<SELECT "
operator|+
literal|" name=\"md"
operator|+
name|sicId
operator|+
literal|"\">"
operator|+
name|extDepts
operator|.
name|replaceAll
argument_list|(
literal|"'"
operator|+
name|md
operator|+
literal|"'"
argument_list|,
literal|"'"
operator|+
name|md
operator|+
literal|"' selected"
argument_list|)
operator|+
literal|"</SELECT>"
operator|)
operator|)
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Loop through children sub-parts
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|v
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SimpleItypeConfig
name|sic1
init|=
operator|(
name|SimpleItypeConfig
operator|)
name|v
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|setupSubpart
argument_list|(
name|request
argument_list|,
name|sic1
argument_list|,
name|level
operator|+
literal|1
argument_list|,
name|tbl
argument_list|,
name|rowNum
argument_list|,
name|maxRows
argument_list|,
name|i
argument_list|,
name|v
operator|.
name|size
argument_list|()
argument_list|,
name|limit
argument_list|,
name|sic
argument_list|,
name|autoCalc
argument_list|,
name|createAsNew
argument_list|,
name|extDepts
argument_list|,
name|unlimitedEnroll
argument_list|,
name|varLimits
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @param md      * @return      */
specifier|private
specifier|static
name|String
name|getManagingDeptLabel
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|long
name|md
parameter_list|)
block|{
if|if
condition|(
name|md
operator|<
literal|0
condition|)
return|return
literal|"Department"
return|;
if|if
condition|(
name|md
operator|==
name|Constants
operator|.
name|MANAGED_BY_MULTIPLE_DEPTS
condition|)
return|return
literal|"Multiple Departments"
return|;
name|Department
name|d
init|=
operator|new
name|DepartmentDAO
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|md
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|d
operator|.
name|isExternalManager
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
return|return
name|d
operator|.
name|getExternalMgrLabel
argument_list|()
return|;
else|else
return|return
literal|"Department"
return|;
block|}
return|return
literal|"Not Found"
return|;
block|}
comment|/**      * Generates icons for shifting and deleting operations on itype config elements      * @param sic SimpleItypeConfig object      * @param level Recurse Level      * @param rowNum Row Number (in config)      * @param maxRows Max elements in config      * @param uid Unique Id of course offering      * @param spRowNum row number of subpart      * @param maxSp Max subparts      * @return Html code for arrow images      */
specifier|private
specifier|static
name|String
name|getIcons
parameter_list|(
name|SimpleItypeConfig
name|sic
parameter_list|,
name|int
name|level
parameter_list|,
name|int
name|rowNum
parameter_list|,
name|int
name|maxRows
parameter_list|,
name|int
name|spRowNum
parameter_list|,
name|int
name|maxSp
parameter_list|)
block|{
name|String
name|html
init|=
literal|""
decl_stmt|;
comment|// Right Arrow
if|if
condition|(
operator|(
name|level
operator|==
literal|1
operator|&&
name|rowNum
operator|>
literal|0
operator|)
operator|||
operator|(
name|level
operator|>
literal|1
operator|&&
name|spRowNum
operator|>
literal|0
operator|)
condition|)
name|html
operator|+=
literal|"<IMG border=\"0\" alt=\"Move to Child Level\" title=\"Move to Child Level\" align=\"top\" src=\"images/arrow_r.gif\" "
operator|+
literal|"onClick=\"doClick('shiftRight', "
operator|+
name|sic
operator|.
name|getId
argument_list|()
operator|+
literal|");\" onMouseOver=\"this.style.cursor='hand';this.style.cursor='pointer';\">"
expr_stmt|;
else|else
name|html
operator|+=
literal|"<IMG align=\"top\" src=\"images/blank.gif\">"
expr_stmt|;
comment|// Left Arrow
if|if
condition|(
name|level
operator|>
literal|1
condition|)
name|html
operator|+=
literal|"<IMG border=\"0\" alt=\"Move to Parent Level\" title=\"Move to Parent Level\" align=\"top\" src=\"images/arrow_l.gif\" "
operator|+
literal|"onClick=\"doClick('shiftLeft', "
operator|+
name|sic
operator|.
name|getId
argument_list|()
operator|+
literal|");\" onMouseOver=\"this.style.cursor='hand';this.style.cursor='pointer';\">"
expr_stmt|;
else|else
name|html
operator|+=
literal|"<IMG align=\"top\" src=\"images/blank.gif\">"
expr_stmt|;
comment|// Up Arrow
if|if
condition|(
operator|(
name|level
operator|==
literal|1
operator|&&
name|rowNum
operator|>
literal|0
operator|)
operator|||
operator|(
name|level
operator|>
literal|1
operator|&&
name|spRowNum
operator|>
literal|0
operator|)
condition|)
name|html
operator|+=
literal|"<IMG border=\"0\" alt=\"Move Up\" align=\"absmiddle\" src=\"images/arrow_u.gif\" "
operator|+
literal|"onClick=\"doClick('shiftUp', "
operator|+
name|sic
operator|.
name|getId
argument_list|()
operator|+
literal|");\" onMouseOver=\"this.style.cursor='hand';this.style.cursor='pointer';\">"
expr_stmt|;
else|else
name|html
operator|+=
literal|"<IMG align=\"absmiddle\" src=\"images/blank.gif\">"
expr_stmt|;
comment|// Down Arrow
if|if
condition|(
operator|(
name|level
operator|==
literal|1
operator|&&
operator|(
name|rowNum
operator|+
literal|1
operator|)
operator|<
name|maxRows
operator|)
operator|||
operator|(
name|level
operator|>
literal|1
operator|&&
operator|(
name|spRowNum
operator|+
literal|1
operator|)
operator|<
name|maxSp
operator|)
condition|)
name|html
operator|+=
literal|"<IMG border=\"0\" alt=\"Move Down\" align=\"absmiddle\" src=\"images/arrow_d.gif\" "
operator|+
literal|"onClick=\"doClick('shiftDown', "
operator|+
name|sic
operator|.
name|getId
argument_list|()
operator|+
literal|");\" onMouseOver=\"this.style.cursor='hand';this.style.cursor='pointer';\">"
expr_stmt|;
else|else
name|html
operator|+=
literal|"<IMG align=\"absmiddle\" src=\"images/blank.gif\">"
expr_stmt|;
comment|// Delete
name|html
operator|+=
literal|"<IMG border=\"0\" alt=\"Delete\" title=\"Delete Instructional Type\" align=\"top\" src=\"images/Delete16.gif\" "
operator|+
literal|"onClick=\"doClick('delete', "
operator|+
name|sic
operator|.
name|getId
argument_list|()
operator|+
literal|");\" onMouseOver=\"this.style.cursor='hand';this.style.cursor='pointer';\">&nbsp; "
expr_stmt|;
name|html
operator|+=
literal|"&nbsp;&nbsp;"
expr_stmt|;
return|return
name|html
return|;
block|}
block|}
end_class

end_unit

