begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.0 (University Course Timetabling& Student Sectioning Application)  * Copyright (C) 2007, UniTime.org, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|commands
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|HibernateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RefTableEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|RefTableEntryDAO
import|;
end_import

begin_comment
comment|/**  * @author Stephanie Schluttenhofer  *  * methods to return ref table information  */
end_comment

begin_class
specifier|public
class|class
name|RefTableCommands
block|{
comment|/**      *       */
specifier|public
name|RefTableCommands
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|List
name|validLabels
parameter_list|(
name|Class
name|refClass
parameter_list|)
block|{
name|Session
name|hSession
init|=
operator|(
operator|new
name|RefTableEntryDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
decl_stmt|;
return|return
name|hSession
operator|.
name|createQuery
argument_list|(
literal|"select ref.label from "
operator|+
name|refClass
operator|.
name|getName
argument_list|()
operator|+
literal|" ref"
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|List
name|validReferences
parameter_list|(
name|Class
name|refClass
parameter_list|)
block|{
name|Session
name|hSession
init|=
operator|(
operator|new
name|RefTableEntryDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
decl_stmt|;
return|return
name|hSession
operator|.
name|createQuery
argument_list|(
literal|"select ref.reference from "
operator|+
name|refClass
operator|.
name|getName
argument_list|()
operator|+
literal|" ref"
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|referenceForLabel
parameter_list|(
name|Class
name|refClass
parameter_list|,
name|String
name|label
parameter_list|)
block|{
name|String
name|ref
decl_stmt|;
name|Session
name|hSession
init|=
operator|(
operator|new
name|RefTableEntryDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|ArrayList
name|list
init|=
operator|(
name|ArrayList
operator|)
name|hSession
operator|.
name|createQuery
argument_list|(
literal|"select ref.reference from "
operator|+
name|refClass
operator|.
name|getName
argument_list|()
operator|+
literal|" ref where ref.label = '"
operator|+
name|label
operator|+
literal|"'"
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|ref
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|ref
operator|=
operator|(
name|String
operator|)
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|ref
return|;
block|}
specifier|public
specifier|static
name|String
name|referenceForLabel
parameter_list|(
name|String
name|label
parameter_list|,
name|ArrayList
name|list
parameter_list|)
throws|throws
name|HibernateException
block|{
name|Iterator
name|it
init|=
name|list
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|String
name|reference
init|=
operator|new
name|String
argument_list|()
decl_stmt|;
name|RefTableEntry
name|refEntry
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
operator|&&
name|reference
operator|==
literal|""
condition|)
block|{
name|refEntry
operator|=
operator|(
name|RefTableEntry
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|refEntry
operator|.
name|getLabel
argument_list|()
operator|.
name|equals
argument_list|(
name|label
argument_list|)
condition|)
block|{
name|reference
operator|=
name|refEntry
operator|.
name|getReference
argument_list|()
expr_stmt|;
block|}
block|}
return|return
operator|(
name|reference
operator|)
return|;
block|}
specifier|public
specifier|static
name|String
name|labelForReference
parameter_list|(
name|Class
name|refClass
parameter_list|,
name|String
name|reference
parameter_list|)
block|{
name|String
name|label
decl_stmt|;
name|Session
name|hSession
init|=
operator|(
operator|new
name|RefTableEntryDAO
argument_list|()
operator|)
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|ArrayList
name|list
init|=
operator|(
name|ArrayList
operator|)
name|hSession
operator|.
name|createQuery
argument_list|(
literal|"select ref.label from "
operator|+
name|refClass
operator|.
name|getName
argument_list|()
operator|+
literal|" ref where ref.reference = '"
operator|+
name|reference
operator|+
literal|"'"
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|label
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|label
operator|=
operator|(
name|String
operator|)
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|label
return|;
block|}
block|}
end_class

end_unit

