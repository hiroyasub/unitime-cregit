begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.0 (University Course Timetabling& Student Sectioning Application)  * Copyright (C) 2007, UniTime.org, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterChain
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|Web
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Roles
import|;
end_import

begin_comment
comment|/**  *   * @author Tomas Muller  *  */
end_comment

begin_class
specifier|public
class|class
name|UserAccessFilter
implements|implements
name|Filter
block|{
specifier|public
specifier|static
name|String
name|sAllowNone
init|=
literal|"none"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sAllowAdmin
init|=
literal|"admin"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sAllowLoggedIn
init|=
literal|"logged-in"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sAllowAll
init|=
literal|"all"
decl_stmt|;
specifier|private
name|String
name|iAllow
init|=
literal|null
decl_stmt|;
specifier|public
name|void
name|init
parameter_list|(
name|FilterConfig
name|cfg
parameter_list|)
throws|throws
name|ServletException
block|{
name|iAllow
operator|=
name|cfg
operator|.
name|getInitParameter
argument_list|(
literal|"allow"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|doFilter
parameter_list|(
name|ServletRequest
name|request
parameter_list|,
name|ServletResponse
name|response
parameter_list|,
name|FilterChain
name|chain
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
if|if
condition|(
operator|!
name|sAllowAll
operator|.
name|equals
argument_list|(
name|iAllow
argument_list|)
condition|)
block|{
if|if
condition|(
name|request
operator|instanceof
name|HttpServletRequest
condition|)
block|{
name|HttpServletRequest
name|httpRequest
init|=
operator|(
name|HttpServletRequest
operator|)
name|request
decl_stmt|;
name|HttpServletResponse
name|httpResponse
init|=
operator|(
name|HttpServletResponse
operator|)
name|response
decl_stmt|;
name|HttpSession
name|session
init|=
name|httpRequest
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
name|sAllowLoggedIn
operator|.
name|equals
argument_list|(
name|iAllow
argument_list|)
operator|&&
operator|!
name|Web
operator|.
name|isLoggedIn
argument_list|(
name|session
argument_list|)
condition|)
block|{
name|session
operator|.
name|setAttribute
argument_list|(
literal|"exception"
argument_list|,
operator|new
name|ServletException
argument_list|(
literal|"Access Denied."
argument_list|)
argument_list|)
expr_stmt|;
name|httpResponse
operator|.
name|sendRedirect
argument_list|(
name|httpRequest
operator|.
name|getContextPath
argument_list|()
operator|+
literal|"/error.jsp"
argument_list|)
expr_stmt|;
return|return;
block|}
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|session
argument_list|)
decl_stmt|;
if|if
condition|(
name|sAllowAdmin
operator|.
name|equals
argument_list|(
name|iAllow
argument_list|)
operator|&&
operator|(
name|user
operator|==
literal|null
operator|||
operator|!
name|user
operator|.
name|getRole
argument_list|()
operator|.
name|equals
argument_list|(
name|Roles
operator|.
name|ADMIN_ROLE
argument_list|)
operator|)
condition|)
block|{
name|session
operator|.
name|setAttribute
argument_list|(
literal|"exception"
argument_list|,
operator|new
name|ServletException
argument_list|(
literal|"Access Denied."
argument_list|)
argument_list|)
expr_stmt|;
name|httpResponse
operator|.
name|sendRedirect
argument_list|(
name|httpRequest
operator|.
name|getContextPath
argument_list|()
operator|+
literal|"/error.jsp"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Access Denied."
argument_list|)
throw|;
block|}
block|}
comment|// Process request
name|chain
operator|.
name|doFilter
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|destroy
parameter_list|()
block|{
block|}
block|}
end_class

end_unit

