begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 - 3.5 (University Timetabling Application)  * Copyright (C) 2008 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterChain
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|NoCacheFilter
implements|implements
name|Filter
block|{
specifier|private
name|Pattern
name|iUserAgent
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|FilterConfig
name|cfg
parameter_list|)
throws|throws
name|ServletException
block|{
name|iUserAgent
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|cfg
operator|.
name|getInitParameter
argument_list|(
literal|"user-agent"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|destroy
parameter_list|()
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|doFilter
parameter_list|(
name|ServletRequest
name|request
parameter_list|,
name|ServletResponse
name|response
parameter_list|,
name|FilterChain
name|chain
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
if|if
condition|(
name|request
operator|instanceof
name|HttpServletRequest
operator|&&
name|response
operator|instanceof
name|HttpServletResponse
condition|)
block|{
name|String
name|agent
init|=
operator|(
operator|(
name|HttpServletRequest
operator|)
name|request
operator|)
operator|.
name|getHeader
argument_list|(
literal|"user-agent"
argument_list|)
decl_stmt|;
if|if
condition|(
name|agent
operator|!=
literal|null
operator|&&
name|iUserAgent
operator|.
name|matcher
argument_list|(
name|agent
argument_list|)
operator|.
name|find
argument_list|()
condition|)
name|response
operator|=
operator|new
name|HttpServletResponseWrapper
argument_list|(
operator|(
name|HttpServletResponse
operator|)
name|response
argument_list|)
operator|.
name|createResponse
argument_list|()
expr_stmt|;
block|}
name|chain
operator|.
name|doFilter
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|HttpServletResponseWrapper
implements|implements
name|InvocationHandler
block|{
specifier|private
name|HttpServletResponse
name|iResponse
decl_stmt|;
specifier|public
name|HttpServletResponseWrapper
parameter_list|(
name|HttpServletResponse
name|r
parameter_list|)
block|{
name|iResponse
operator|=
name|r
expr_stmt|;
block|}
specifier|public
name|HttpServletResponse
name|createResponse
parameter_list|()
block|{
return|return
operator|(
name|HttpServletResponse
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|QueryLogFilter
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
index|[]
block|{
name|HttpServletResponse
operator|.
name|class
block|}
argument_list|,
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
if|if
condition|(
literal|"sendRedirect"
operator|.
name|equals
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|location
init|=
operator|(
name|String
operator|)
name|args
index|[
literal|0
index|]
decl_stmt|;
name|String
name|hash
init|=
literal|null
decl_stmt|;
name|int
name|hashIdx
init|=
name|location
operator|.
name|lastIndexOf
argument_list|(
literal|'#'
argument_list|)
decl_stmt|;
if|if
condition|(
name|hashIdx
operator|>=
literal|0
condition|)
block|{
name|hash
operator|=
name|location
operator|.
name|substring
argument_list|(
name|hashIdx
argument_list|)
expr_stmt|;
name|location
operator|=
name|location
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|hashIdx
argument_list|)
expr_stmt|;
block|}
name|String
name|redirect
init|=
name|location
operator|+
operator|(
name|location
operator|.
name|indexOf
argument_list|(
literal|'?'
argument_list|)
operator|>=
literal|0
condition|?
literal|"&"
else|:
literal|"?"
operator|)
operator|+
literal|"noCacheTS="
operator|+
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
operator|+
operator|(
name|hash
operator|==
literal|null
condition|?
literal|""
else|:
name|hash
operator|)
decl_stmt|;
name|iResponse
operator|.
name|setHeader
argument_list|(
literal|"Pragma"
argument_list|,
literal|"no-cache"
argument_list|)
expr_stmt|;
name|iResponse
operator|.
name|addHeader
argument_list|(
literal|"Cache-Control"
argument_list|,
literal|"must-revalidate"
argument_list|)
expr_stmt|;
name|iResponse
operator|.
name|addHeader
argument_list|(
literal|"Cache-Control"
argument_list|,
literal|"no-cache"
argument_list|)
expr_stmt|;
name|iResponse
operator|.
name|addHeader
argument_list|(
literal|"Cache-Control"
argument_list|,
literal|"no-store"
argument_list|)
expr_stmt|;
name|iResponse
operator|.
name|setDateHeader
argument_list|(
literal|"Expires"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|iResponse
operator|.
name|sendRedirect
argument_list|(
name|redirect
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|iResponse
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|method
operator|.
name|getParameterTypes
argument_list|()
argument_list|)
operator|.
name|invoke
argument_list|(
name|iResponse
argument_list|,
name|args
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

