begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *   */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|spring
operator|.
name|security
package|;
end_package

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|core
operator|.
name|userdetails
operator|.
name|UserDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|core
operator|.
name|userdetails
operator|.
name|UserDetailsService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|core
operator|.
name|userdetails
operator|.
name|UsernameNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|UserDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|context
operator|.
name|UniTimeUserContext
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"unitimeUserDetailsService"
argument_list|)
specifier|public
class|class
name|UniTimeUserDetailService
implements|implements
name|UserDetailsService
block|{
annotation|@
name|Override
specifier|public
name|UserDetails
name|loadUserByUsername
parameter_list|(
name|String
name|username
parameter_list|)
throws|throws
name|UsernameNotFoundException
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|UserDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|createNewSession
argument_list|()
decl_stmt|;
try|try
block|{
name|User
name|user
init|=
operator|(
name|User
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from User where username=:userName"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"userName"
argument_list|,
name|username
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
throw|throw
operator|new
name|UsernameNotFoundException
argument_list|(
literal|"User "
operator|+
name|username
operator|+
literal|" is not known."
argument_list|)
throw|;
return|return
operator|new
name|UniTimeUserContext
argument_list|(
name|user
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|user
operator|.
name|getUsername
argument_list|()
argument_list|,
literal|null
argument_list|,
name|user
operator|.
name|getPassword
argument_list|()
argument_list|)
return|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

