begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.4 (University Timetabling Application)  * Copyright (C) 2012, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|spring
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|access
operator|.
name|PermissionEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|core
operator|.
name|Authentication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|_RootDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|permissions
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|permissions
operator|.
name|Permission
operator|.
name|PermissionDepartment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|permissions
operator|.
name|Permission
operator|.
name|PermissionSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_class
annotation|@
name|Service
argument_list|(
literal|"unitimePermissionEvaluator"
argument_list|)
specifier|public
class|class
name|UniTimePermissionEvaluator
implements|implements
name|PermissionEvaluator
block|{
specifier|private
specifier|static
name|Log
name|sLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|UniTimePermissionEvaluator
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Autowired
name|PermissionDepartment
name|permissionDepartment
decl_stmt|;
annotation|@
name|Autowired
name|PermissionSession
name|permissionSession
decl_stmt|;
annotation|@
name|Autowired
name|ApplicationContext
name|applicationContext
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasPermission
parameter_list|(
name|Authentication
name|authentication
parameter_list|,
name|Object
name|domainObject
parameter_list|,
name|Object
name|permission
parameter_list|)
block|{
if|if
condition|(
name|domainObject
operator|!=
literal|null
operator|&&
name|domainObject
operator|instanceof
name|Collection
condition|)
block|{
for|for
control|(
name|Object
name|o
range|:
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|domainObject
control|)
block|{
if|if
condition|(
operator|!
name|hasPermission
argument_list|(
name|authentication
argument_list|,
name|o
argument_list|,
name|permission
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
try|try
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Checking "
operator|+
name|permission
operator|+
literal|" for "
operator|+
name|domainObject
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|authentication
operator|.
name|isAuthenticated
argument_list|()
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"   ... not authenticated"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|authentication
operator|.
name|getPrincipal
argument_list|()
operator|==
literal|null
operator|||
operator|!
operator|(
name|authentication
operator|.
name|getPrincipal
argument_list|()
operator|instanceof
name|UserContext
operator|)
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"   ... bad principal"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|Right
name|right
init|=
operator|(
name|permission
operator|instanceof
name|Right
condition|?
operator|(
name|Right
operator|)
name|permission
else|:
name|Right
operator|.
name|valueOf
argument_list|(
name|permission
operator|.
name|toString
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|right
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"   ... unknown permission "
operator|+
name|permission
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|UserContext
name|user
init|=
operator|(
name|UserContext
operator|)
name|authentication
operator|.
name|getPrincipal
argument_list|()
decl_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"   ... user: "
operator|+
name|user
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|user
operator|.
name|getCurrentAuthority
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"   ... user has no role"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Permission
argument_list|<
name|?
argument_list|>
name|perm
init|=
operator|(
name|Permission
argument_list|<
name|?
argument_list|>
operator|)
name|applicationContext
operator|.
name|getBean
argument_list|(
literal|"permission"
operator|+
name|permission
argument_list|)
decl_stmt|;
if|if
condition|(
name|perm
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|(
name|Boolean
operator|)
name|perm
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"check"
argument_list|,
name|UserContext
operator|.
name|class
argument_list|,
name|domainObject
operator|.
name|getClass
argument_list|()
argument_list|)
operator|.
name|invoke
argument_list|(
name|perm
argument_list|,
name|user
argument_list|,
name|domainObject
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"   ... permission check failed"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
block|}
if|if
condition|(
name|domainObject
operator|instanceof
name|Session
condition|)
block|{
if|if
condition|(
name|permissionSession
operator|.
name|check
argument_list|(
name|user
argument_list|,
operator|(
name|Session
operator|)
name|domainObject
argument_list|,
name|right
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"   ... session check failed"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
if|else if
condition|(
name|domainObject
operator|instanceof
name|Department
condition|)
block|{
if|if
condition|(
name|permissionDepartment
operator|.
name|check
argument_list|(
name|user
argument_list|,
operator|(
name|Department
operator|)
name|domainObject
argument_list|,
name|right
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"   ... session check failed"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"   ... permission check failed ("
operator|+
operator|(
name|ex
operator|==
literal|null
condition|?
literal|"no check found"
else|:
name|ex
operator|.
name|getMessage
argument_list|()
operator|+
literal|")"
operator|)
argument_list|)
expr_stmt|;
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Failed to evaluate permission "
operator|+
name|permission
operator|+
literal|" for "
operator|+
name|domainObject
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasPermission
parameter_list|(
name|Authentication
name|authentication
parameter_list|,
name|Serializable
name|targetId
parameter_list|,
name|String
name|targetType
parameter_list|,
name|Object
name|permission
parameter_list|)
block|{
if|if
condition|(
name|targetId
operator|!=
literal|null
operator|&&
name|targetId
operator|instanceof
name|Collection
condition|)
block|{
for|for
control|(
name|Serializable
name|id
range|:
operator|(
name|Collection
argument_list|<
name|Serializable
argument_list|>
operator|)
name|targetId
control|)
block|{
if|if
condition|(
operator|!
name|hasPermission
argument_list|(
name|authentication
argument_list|,
name|id
argument_list|,
name|targetType
argument_list|,
name|permission
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
try|try
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Checking "
operator|+
name|permission
operator|+
literal|" for "
operator|+
name|targetType
operator|+
literal|"@"
operator|+
name|targetId
argument_list|)
expr_stmt|;
if|if
condition|(
name|targetId
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"  ... no id"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|targetId
operator|instanceof
name|String
condition|)
block|{
try|try
block|{
name|targetId
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
operator|(
name|String
operator|)
name|targetId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
block|}
if|if
condition|(
operator|!
operator|(
name|targetId
operator|instanceof
name|Long
operator|)
condition|)
block|{
try|try
block|{
name|targetId
operator|=
operator|(
name|Serializable
operator|)
name|targetId
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getUniqueId"
argument_list|)
operator|.
name|invoke
argument_list|(
name|targetId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
try|try
block|{
name|targetId
operator|=
operator|(
name|Serializable
operator|)
name|targetId
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getId"
argument_list|)
operator|.
name|invoke
argument_list|(
name|targetId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
name|String
name|className
init|=
name|targetType
decl_stmt|;
if|if
condition|(
name|className
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|<
literal|0
condition|)
name|className
operator|=
literal|"org.unitime.timetable.model."
operator|+
name|className
expr_stmt|;
return|return
name|hasPermission
argument_list|(
name|authentication
argument_list|,
operator|new
name|_RootDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|get
argument_list|(
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
argument_list|,
name|targetId
argument_list|)
argument_list|,
name|permission
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Failed to evaluate permission "
operator|+
name|permission
operator|+
literal|" for "
operator|+
name|targetType
operator|+
literal|"@ "
operator|+
name|targetId
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

