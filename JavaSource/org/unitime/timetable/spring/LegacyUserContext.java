begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.4 (University Timetabling Application)  * Copyright (C) 2012, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|spring
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|UserData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_class
specifier|public
class|class
name|LegacyUserContext
implements|implements
name|UserContext
implements|,
name|UserContext
operator|.
name|CanSetCurrentSessionId
implements|,
name|UserContext
operator|.
name|CanUseChameleon
block|{
specifier|private
name|User
name|iUser
init|=
literal|null
decl_stmt|;
specifier|public
name|LegacyUserContext
parameter_list|(
name|User
name|user
parameter_list|)
block|{
name|iUser
operator|=
name|user
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getExternalUserId
parameter_list|()
block|{
return|return
name|iUser
operator|.
name|getId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iUser
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Long
name|getCurrentAcademicSessionId
parameter_list|()
block|{
return|return
operator|(
name|Long
operator|)
name|iUser
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|SESSION_ID_ATTR_NAME
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setCurrentAcademicSessionId
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
name|iUser
operator|.
name|setAttribute
argument_list|(
name|Constants
operator|.
name|SESSION_ID_ATTR_NAME
argument_list|,
name|sessionId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getCurrentRole
parameter_list|()
block|{
return|return
name|iUser
operator|.
name|getRole
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasRole
parameter_list|(
name|String
name|role
parameter_list|)
block|{
return|return
name|iUser
operator|.
name|getRoles
argument_list|()
operator|!=
literal|null
operator|&&
name|iUser
operator|.
name|getRoles
argument_list|()
operator|.
name|contains
argument_list|(
name|role
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getProperty
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|UserData
operator|.
name|getProperty
argument_list|(
name|getExternalUserId
argument_list|()
argument_list|,
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|UserData
operator|.
name|setProperty
argument_list|(
name|getExternalUserId
argument_list|()
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
name|UserData
operator|.
name|getProperties
argument_list|(
name|getExternalUserId
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Set
argument_list|<
name|Long
argument_list|>
name|iDepartments
init|=
literal|null
decl_stmt|;
specifier|protected
name|Set
argument_list|<
name|Long
argument_list|>
name|getDepartments
parameter_list|()
block|{
if|if
condition|(
name|iDepartments
operator|==
literal|null
condition|)
block|{
name|iDepartments
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|TimetableManager
name|mgr
init|=
name|TimetableManager
operator|.
name|findByExternalId
argument_list|(
name|iUser
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mgr
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Department
name|dept
range|:
name|mgr
operator|.
name|getDepartments
argument_list|()
control|)
name|iDepartments
operator|.
name|add
argument_list|(
name|dept
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|iDepartments
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasDepartment
parameter_list|(
name|Long
name|departmentId
parameter_list|)
block|{
return|return
name|getDepartments
argument_list|()
operator|.
name|contains
argument_list|(
name|departmentId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getOriginalExternalUserId
parameter_list|()
block|{
return|return
operator|(
name|String
operator|)
name|iUser
operator|.
name|getAttribute
argument_list|(
literal|"authUserExtId"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

