begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|spring
package|;
end_package

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|BeansException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_comment
comment|/**  * Simple application context wrapper to be used for accessing Spring beans from legacy code.  *  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"springApplicationContext"
argument_list|)
specifier|public
class|class
name|SpringApplicationContextHolder
implements|implements
name|ApplicationContextAware
block|{
specifier|private
specifier|static
name|ApplicationContext
name|sApplicationContext
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setApplicationContext
parameter_list|(
name|ApplicationContext
name|applicationContext
parameter_list|)
throws|throws
name|BeansException
block|{
name|sApplicationContext
operator|=
name|applicationContext
expr_stmt|;
block|}
specifier|public
specifier|static
name|Object
name|getBean
parameter_list|(
name|String
name|beanName
parameter_list|)
block|{
return|return
name|sApplicationContext
operator|.
name|getBean
argument_list|(
name|beanName
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isInitialized
parameter_list|()
block|{
return|return
name|sApplicationContext
operator|!=
literal|null
return|;
block|}
block|}
end_class

end_unit

