begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|reports
operator|.
name|studentsct
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|CSVFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|StudentSectioningModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Enrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|FreeTimeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|report
operator|.
name|StudentSectioningReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StudentDAO
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|PerturbationsReport
implements|implements
name|StudentSectioningReport
block|{
specifier|private
specifier|static
name|DecimalFormat
name|sDF
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0.000"
argument_list|)
decl_stmt|;
specifier|private
name|StudentSectioningModel
name|iModel
decl_stmt|;
specifier|protected
name|double
name|iSameChoiceWeight
init|=
literal|0.900
decl_stmt|;
specifier|protected
name|double
name|iSameTimeWeight
init|=
literal|0.700
decl_stmt|;
specifier|protected
name|double
name|iSameConfigWeight
init|=
literal|0.500
decl_stmt|;
specifier|public
name|PerturbationsReport
parameter_list|(
name|StudentSectioningModel
name|model
parameter_list|)
block|{
name|iModel
operator|=
name|model
expr_stmt|;
name|iSameChoiceWeight
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyDouble
argument_list|(
literal|"StudentWeights.SameChoice"
argument_list|,
name|iSameChoiceWeight
argument_list|)
expr_stmt|;
name|iSameTimeWeight
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyDouble
argument_list|(
literal|"StudentWeights.SameTime"
argument_list|,
name|iSameTimeWeight
argument_list|)
expr_stmt|;
name|iSameConfigWeight
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyDouble
argument_list|(
literal|"StudentWeights.SameConfig"
argument_list|,
name|iSameConfigWeight
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|double
name|getDifference
parameter_list|(
name|Section
name|section
parameter_list|,
name|Enrollment
name|other
parameter_list|)
block|{
if|if
condition|(
name|section
operator|==
literal|null
condition|)
block|{
return|return
literal|0.0
return|;
block|}
if|else if
condition|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getConfig
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|Section
name|initial
range|:
name|other
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|equals
argument_list|(
name|initial
operator|.
name|getSubpart
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|section
operator|.
name|equals
argument_list|(
name|initial
argument_list|)
condition|)
block|{
return|return
literal|1.0
return|;
block|}
if|else if
condition|(
name|section
operator|.
name|sameChoice
argument_list|(
name|initial
argument_list|)
condition|)
block|{
return|return
name|iSameChoiceWeight
return|;
block|}
if|else if
condition|(
name|section
operator|.
name|sameTime
argument_list|(
name|initial
argument_list|)
condition|)
block|{
return|return
name|iSameTimeWeight
return|;
block|}
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|Section
name|initial
range|:
name|other
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|section
operator|.
name|sameChoice
argument_list|(
name|initial
argument_list|)
condition|)
block|{
return|return
name|iSameChoiceWeight
return|;
block|}
if|else if
condition|(
name|section
operator|.
name|sameInstructionalType
argument_list|(
name|initial
argument_list|)
operator|&&
name|section
operator|.
name|sameTime
argument_list|(
name|initial
argument_list|)
condition|)
block|{
return|return
name|iSameTimeWeight
return|;
block|}
block|}
block|}
return|return
literal|0.0
return|;
block|}
annotation|@
name|Override
specifier|public
name|CSVFile
name|create
parameter_list|(
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
parameter_list|,
name|DataProperties
name|properties
parameter_list|)
block|{
name|boolean
name|useAmPm
init|=
name|properties
operator|.
name|getPropertyBoolean
argument_list|(
literal|"useAmPm"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|CSVFile
name|csv
init|=
operator|new
name|CSVFile
argument_list|()
decl_stmt|;
name|csv
operator|.
name|setHeader
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
index|[]
block|{
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|"__Student"
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|"Student\nId"
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|"Student\nName"
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|"Student\nEmail"
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|"Course"
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|"Original\nClass"
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|"Original\nTime"
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|"Original\nDate"
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|"Original\nRoom"
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|"Assigned\nClass"
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|"Assigned\nTime"
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|"Assigned\nDate"
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|"Assigned\nRoom"
argument_list|)
block|,
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|"Penalization"
argument_list|)
block|,                 }
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Student
argument_list|>
name|students
init|=
operator|new
name|TreeSet
argument_list|<
name|Student
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|Student
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Student
name|s1
parameter_list|,
name|Student
name|s2
parameter_list|)
block|{
return|return
name|s1
operator|.
name|getExternalId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getExternalId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|students
operator|.
name|addAll
argument_list|(
name|iModel
operator|.
name|getStudents
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|includeLastLikeStudents
init|=
name|properties
operator|.
name|getPropertyBoolean
argument_list|(
literal|"lastlike"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|boolean
name|includeRealStudents
init|=
name|properties
operator|.
name|getPropertyBoolean
argument_list|(
literal|"real"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|Student
name|student
range|:
name|students
control|)
block|{
if|if
condition|(
name|student
operator|.
name|isDummy
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|student
operator|.
name|isDummy
argument_list|()
operator|&&
operator|!
name|includeLastLikeStudents
condition|)
continue|continue;
if|if
condition|(
operator|!
name|student
operator|.
name|isDummy
argument_list|()
operator|&&
operator|!
name|includeRealStudents
condition|)
continue|continue;
for|for
control|(
name|Request
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
name|Enrollment
name|e
init|=
name|assignment
operator|.
name|getValue
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|Enrollment
name|i
init|=
name|r
operator|.
name|getInitialAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|null
operator|||
name|r
operator|instanceof
name|FreeTimeRequest
operator|||
name|i
operator|.
name|equals
argument_list|(
name|e
argument_list|)
condition|)
continue|continue;
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|s
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|student
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|Section
name|sct
range|:
name|i
operator|.
name|getSections
argument_list|()
control|)
block|{
name|List
argument_list|<
name|CSVFile
operator|.
name|CSVField
argument_list|>
name|line
init|=
operator|new
name|ArrayList
argument_list|<
name|CSVFile
operator|.
name|CSVField
argument_list|>
argument_list|()
decl_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|student
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|student
operator|.
name|getExternalId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|student
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|s
operator|==
literal|null
condition|?
literal|null
else|:
name|s
operator|.
name|getEmail
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|i
operator|.
name|getCourse
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|sct
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|sct
operator|.
name|getName
argument_list|(
name|i
operator|.
name|getCourse
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|sct
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|sct
operator|.
name|getTime
argument_list|()
operator|.
name|getDayHeader
argument_list|()
operator|+
literal|" "
operator|+
name|sct
operator|.
name|getTime
argument_list|()
operator|.
name|getStartTimeHeader
argument_list|(
name|useAmPm
argument_list|)
operator|+
literal|" - "
operator|+
name|sct
operator|.
name|getTime
argument_list|()
operator|.
name|getEndTimeHeader
argument_list|(
name|useAmPm
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|sct
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|sct
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|sct
operator|.
name|getNrRooms
argument_list|()
operator|==
literal|0
condition|?
literal|""
else|:
name|sct
operator|.
name|getPlacement
argument_list|()
operator|.
name|getRoomName
argument_list|(
literal|", "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|"Not Assigned"
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|sDF
operator|.
name|format
argument_list|(
literal|1.0
operator|-
name|getDifference
argument_list|(
literal|null
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|csv
operator|.
name|addLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|i
operator|.
name|getConfig
argument_list|()
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getConfig
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|Section
name|org
range|:
name|i
operator|.
name|getSections
argument_list|()
control|)
block|{
name|Section
name|sct
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Section
name|x
range|:
name|e
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|org
operator|.
name|getSubpart
argument_list|()
operator|.
name|equals
argument_list|(
name|x
operator|.
name|getSubpart
argument_list|()
argument_list|)
condition|)
block|{
name|sct
operator|=
name|x
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|sct
operator|==
literal|null
operator|||
name|org
operator|.
name|equals
argument_list|(
name|sct
argument_list|)
condition|)
continue|continue;
name|List
argument_list|<
name|CSVFile
operator|.
name|CSVField
argument_list|>
name|line
init|=
operator|new
name|ArrayList
argument_list|<
name|CSVFile
operator|.
name|CSVField
argument_list|>
argument_list|()
decl_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|student
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|student
operator|.
name|getExternalId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|student
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|s
operator|==
literal|null
condition|?
literal|null
else|:
name|s
operator|.
name|getEmail
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|i
operator|.
name|getCourse
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|org
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|org
operator|.
name|getName
argument_list|(
name|i
operator|.
name|getCourse
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|org
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|org
operator|.
name|getTime
argument_list|()
operator|.
name|getDayHeader
argument_list|()
operator|+
literal|" "
operator|+
name|org
operator|.
name|getTime
argument_list|()
operator|.
name|getStartTimeHeader
argument_list|(
name|useAmPm
argument_list|)
operator|+
literal|" - "
operator|+
name|org
operator|.
name|getTime
argument_list|()
operator|.
name|getEndTimeHeader
argument_list|(
name|useAmPm
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|org
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|org
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|org
operator|.
name|getNrRooms
argument_list|()
operator|==
literal|0
condition|?
literal|""
else|:
name|org
operator|.
name|getPlacement
argument_list|()
operator|.
name|getRoomName
argument_list|(
literal|", "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|sct
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|sct
operator|.
name|getName
argument_list|(
name|i
operator|.
name|getCourse
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|sct
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|sct
operator|.
name|getTime
argument_list|()
operator|.
name|getDayHeader
argument_list|()
operator|+
literal|" "
operator|+
name|sct
operator|.
name|getTime
argument_list|()
operator|.
name|getStartTimeHeader
argument_list|(
name|useAmPm
argument_list|)
operator|+
literal|" - "
operator|+
name|sct
operator|.
name|getTime
argument_list|()
operator|.
name|getEndTimeHeader
argument_list|(
name|useAmPm
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|sct
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|sct
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|sct
operator|.
name|getNrRooms
argument_list|()
operator|==
literal|0
condition|?
literal|""
else|:
name|sct
operator|.
name|getPlacement
argument_list|()
operator|.
name|getRoomName
argument_list|(
literal|", "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|sDF
operator|.
name|format
argument_list|(
literal|1.0
operator|-
name|getDifference
argument_list|(
name|sct
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|csv
operator|.
name|addLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Iterator
argument_list|<
name|Section
argument_list|>
name|orgIt
init|=
name|i
operator|.
name|getSections
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Section
argument_list|>
name|sctIt
init|=
name|e
operator|.
name|getSections
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|orgIt
operator|.
name|hasNext
argument_list|()
operator|||
name|sctIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Section
name|sct
init|=
operator|(
name|sctIt
operator|.
name|hasNext
argument_list|()
condition|?
name|sctIt
operator|.
name|next
argument_list|()
else|:
literal|null
operator|)
decl_stmt|;
name|Section
name|org
init|=
operator|(
name|orgIt
operator|.
name|hasNext
argument_list|()
condition|?
name|orgIt
operator|.
name|next
argument_list|()
else|:
literal|null
operator|)
decl_stmt|;
name|List
argument_list|<
name|CSVFile
operator|.
name|CSVField
argument_list|>
name|line
init|=
operator|new
name|ArrayList
argument_list|<
name|CSVFile
operator|.
name|CSVField
argument_list|>
argument_list|()
decl_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|student
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|student
operator|.
name|getExternalId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|student
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|s
operator|==
literal|null
condition|?
literal|null
else|:
name|s
operator|.
name|getEmail
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|i
operator|.
name|getCourse
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|org
operator|!=
literal|null
condition|)
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|org
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|org
operator|.
name|getName
argument_list|(
name|i
operator|.
name|getCourse
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|org
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|org
operator|.
name|getTime
argument_list|()
operator|.
name|getDayHeader
argument_list|()
operator|+
literal|" "
operator|+
name|org
operator|.
name|getTime
argument_list|()
operator|.
name|getStartTimeHeader
argument_list|(
name|useAmPm
argument_list|)
operator|+
literal|" - "
operator|+
name|org
operator|.
name|getTime
argument_list|()
operator|.
name|getEndTimeHeader
argument_list|(
name|useAmPm
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|org
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|org
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|org
operator|.
name|getNrRooms
argument_list|()
operator|==
literal|0
condition|?
literal|""
else|:
name|org
operator|.
name|getPlacement
argument_list|()
operator|.
name|getRoomName
argument_list|(
literal|", "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sct
operator|!=
literal|null
condition|)
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|sct
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|sct
operator|.
name|getName
argument_list|(
name|i
operator|.
name|getCourse
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|sct
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|sct
operator|.
name|getTime
argument_list|()
operator|.
name|getDayHeader
argument_list|()
operator|+
literal|" "
operator|+
name|sct
operator|.
name|getTime
argument_list|()
operator|.
name|getStartTimeHeader
argument_list|(
name|useAmPm
argument_list|)
operator|+
literal|" - "
operator|+
name|sct
operator|.
name|getTime
argument_list|()
operator|.
name|getEndTimeHeader
argument_list|(
name|useAmPm
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|sct
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|sct
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|sct
operator|.
name|getNrRooms
argument_list|()
operator|==
literal|0
condition|?
literal|""
else|:
name|sct
operator|.
name|getPlacement
argument_list|()
operator|.
name|getRoomName
argument_list|(
literal|", "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
name|sDF
operator|.
name|format
argument_list|(
literal|1.0
operator|-
name|getDifference
argument_list|(
name|sct
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|CSVFile
operator|.
name|CSVField
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|csv
operator|.
name|addLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|csv
return|;
block|}
block|}
end_class

end_unit

