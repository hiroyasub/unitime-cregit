begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|reports
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|usermodel
operator|.
name|HSSFPalette
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|usermodel
operator|.
name|HSSFWorkbook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|util
operator|.
name|HSSFColor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|ss
operator|.
name|usermodel
operator|.
name|BorderStyle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|ss
operator|.
name|usermodel
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|ss
operator|.
name|usermodel
operator|.
name|CellStyle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|ss
operator|.
name|usermodel
operator|.
name|Font
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|ss
operator|.
name|usermodel
operator|.
name|HorizontalAlignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|ss
operator|.
name|usermodel
operator|.
name|IndexedColors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|ss
operator|.
name|usermodel
operator|.
name|PrintSetup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|ss
operator|.
name|usermodel
operator|.
name|Row
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|ss
operator|.
name|usermodel
operator|.
name|Sheet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|ss
operator|.
name|usermodel
operator|.
name|VerticalAlignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|ss
operator|.
name|usermodel
operator|.
name|Workbook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|ss
operator|.
name|util
operator|.
name|CellRangeAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|reports
operator|.
name|AbstractReport
operator|.
name|Alignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|reports
operator|.
name|AbstractReport
operator|.
name|Line
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|DocumentException
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|XlsReportWriter
implements|implements
name|ReportWriter
block|{
specifier|private
name|Workbook
name|iWorkbook
decl_stmt|;
specifier|private
name|OutputStream
name|iOutput
decl_stmt|;
specifier|private
name|Sheet
name|iSheet
decl_stmt|;
specifier|private
name|int
name|iPageNo
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|int
name|iLineNo
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|iNrColumns
init|=
literal|0
decl_stmt|,
name|iMaxColumns
init|=
literal|0
decl_stmt|;
specifier|private
name|boolean
name|iHeaderPrinted
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|iEmpty
init|=
literal|true
decl_stmt|;
specifier|private
name|String
name|iFooter
init|=
literal|null
decl_stmt|,
name|iPageName
init|=
literal|null
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|CellStyle
argument_list|>
name|iStyles
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CellStyle
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Font
argument_list|>
name|iFonts
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Font
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|iColors
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Line
name|iHeaderLine
index|[]
init|=
literal|null
decl_stmt|;
specifier|public
name|XlsReportWriter
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|String
name|title
parameter_list|,
name|String
name|title2
parameter_list|,
name|String
name|subject
parameter_list|,
name|String
name|session
parameter_list|)
throws|throws
name|DocumentException
throws|,
name|IOException
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
name|open
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setFooter
parameter_list|(
name|String
name|footer
parameter_list|)
block|{
name|iFooter
operator|=
name|footer
expr_stmt|;
if|if
condition|(
name|iWorkbook
operator|!=
literal|null
condition|)
try|try
block|{
name|iWorkbook
operator|.
name|setSheetName
argument_list|(
name|iPageNo
argument_list|,
name|footer
operator|.
name|replaceAll
argument_list|(
literal|"/"
argument_list|,
literal|"-"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|":"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setHeader
parameter_list|(
name|Line
modifier|...
name|line
parameter_list|)
block|{
if|if
condition|(
name|iHeaderPrinted
condition|)
block|{
try|try
block|{
name|printSeparator
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DocumentException
name|e
parameter_list|)
block|{
block|}
block|}
name|iHeaderLine
operator|=
name|line
expr_stmt|;
name|iNrColumns
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Line
name|l
range|:
name|line
control|)
block|{
if|if
condition|(
name|l
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|int
name|cols
init|=
name|countColumns
argument_list|(
name|l
argument_list|)
decl_stmt|;
if|if
condition|(
name|cols
operator|>
name|iNrColumns
condition|)
name|iNrColumns
operator|=
name|cols
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iMaxColumns
operator|<
name|iNrColumns
condition|)
name|iMaxColumns
operator|=
name|iNrColumns
expr_stmt|;
name|iHeaderPrinted
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Line
index|[]
name|getHeader
parameter_list|()
block|{
return|return
name|iHeaderLine
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|printLine
parameter_list|(
name|Line
name|line
parameter_list|)
throws|throws
name|DocumentException
block|{
name|render
argument_list|(
name|line
argument_list|,
name|iSheet
operator|.
name|createRow
argument_list|(
name|iLineNo
operator|++
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|iEmpty
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
throws|,
name|DocumentException
block|{
name|lastPage
argument_list|()
expr_stmt|;
name|iWorkbook
operator|.
name|write
argument_list|(
name|iOutput
argument_list|)
expr_stmt|;
name|iWorkbook
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|open
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|DocumentException
throws|,
name|IOException
block|{
name|iOutput
operator|=
name|out
expr_stmt|;
name|iWorkbook
operator|=
operator|new
name|HSSFWorkbook
argument_list|()
expr_stmt|;
name|createSheet
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|createSheet
parameter_list|()
block|{
name|iSheet
operator|=
name|iWorkbook
operator|.
name|createSheet
argument_list|()
expr_stmt|;
comment|// iSheet.setDisplayGridlines(false);
name|iSheet
operator|.
name|setPrintGridlines
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iSheet
operator|.
name|setFitToPage
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iSheet
operator|.
name|setHorizontallyCenter
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|PrintSetup
name|printSetup
init|=
name|iSheet
operator|.
name|getPrintSetup
argument_list|()
decl_stmt|;
name|printSetup
operator|.
name|setLandscape
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iSheet
operator|.
name|setAutobreaks
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|printSetup
operator|.
name|setFitHeight
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|printSetup
operator|.
name|setFitWidth
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|iPageNo
operator|++
expr_stmt|;
name|iLineNo
operator|=
literal|0
expr_stmt|;
name|iMaxColumns
operator|=
literal|0
expr_stmt|;
name|iEmpty
operator|=
literal|true
expr_stmt|;
name|iFooter
operator|=
literal|null
expr_stmt|;
name|iPageName
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|iHeaderLine
operator|!=
literal|null
operator|&&
name|iHeaderLine
operator|.
name|length
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|printHeader
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DocumentException
name|e
parameter_list|)
block|{
block|}
name|iMaxColumns
operator|=
name|iNrColumns
expr_stmt|;
block|}
block|}
specifier|protected
name|Font
name|getFont
parameter_list|(
name|boolean
name|bold
parameter_list|,
name|boolean
name|italic
parameter_list|,
name|boolean
name|underline
parameter_list|,
name|Color
name|c
parameter_list|)
block|{
name|Short
name|color
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
name|c
operator|=
name|Color
operator|.
name|BLACK
expr_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|String
name|colorId
init|=
name|Integer
operator|.
name|toHexString
argument_list|(
name|c
operator|.
name|getRGB
argument_list|()
argument_list|)
decl_stmt|;
name|color
operator|=
name|iColors
operator|.
name|get
argument_list|(
name|colorId
argument_list|)
expr_stmt|;
if|if
condition|(
name|color
operator|==
literal|null
condition|)
block|{
name|HSSFPalette
name|palette
init|=
operator|(
operator|(
name|HSSFWorkbook
operator|)
name|iWorkbook
operator|)
operator|.
name|getCustomPalette
argument_list|()
decl_stmt|;
name|HSSFColor
name|clr
init|=
name|palette
operator|.
name|findSimilarColor
argument_list|(
name|c
operator|.
name|getRed
argument_list|()
argument_list|,
name|c
operator|.
name|getGreen
argument_list|()
argument_list|,
name|c
operator|.
name|getBlue
argument_list|()
argument_list|)
decl_stmt|;
name|color
operator|=
operator|(
name|clr
operator|==
literal|null
condition|?
name|IndexedColors
operator|.
name|BLACK
operator|.
name|getIndex
argument_list|()
else|:
name|clr
operator|.
name|getIndex
argument_list|()
operator|)
expr_stmt|;
name|iColors
operator|.
name|put
argument_list|(
name|colorId
argument_list|,
name|color
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|fontId
init|=
operator|(
name|bold
condition|?
literal|"b"
else|:
literal|""
operator|)
operator|+
operator|(
name|italic
condition|?
literal|"i"
else|:
literal|""
operator|)
operator|+
operator|(
name|underline
condition|?
literal|"u"
else|:
literal|""
operator|)
operator|+
operator|(
name|color
operator|==
literal|null
condition|?
literal|""
else|:
name|color
operator|)
decl_stmt|;
name|Font
name|font
init|=
name|iFonts
operator|.
name|get
argument_list|(
name|fontId
argument_list|)
decl_stmt|;
if|if
condition|(
name|font
operator|==
literal|null
condition|)
block|{
name|font
operator|=
name|iWorkbook
operator|.
name|createFont
argument_list|()
expr_stmt|;
name|font
operator|.
name|setBold
argument_list|(
name|bold
argument_list|)
expr_stmt|;
name|font
operator|.
name|setItalic
argument_list|(
name|italic
argument_list|)
expr_stmt|;
name|font
operator|.
name|setUnderline
argument_list|(
name|underline
condition|?
name|Font
operator|.
name|U_SINGLE
else|:
name|Font
operator|.
name|U_NONE
argument_list|)
expr_stmt|;
name|font
operator|.
name|setColor
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|font
operator|.
name|setFontHeightInPoints
argument_list|(
operator|(
name|short
operator|)
literal|10
argument_list|)
expr_stmt|;
name|font
operator|.
name|setFontName
argument_list|(
literal|"Arial"
argument_list|)
expr_stmt|;
name|iFonts
operator|.
name|put
argument_list|(
name|fontId
argument_list|,
name|font
argument_list|)
expr_stmt|;
block|}
return|return
name|font
return|;
block|}
specifier|protected
name|CellStyle
name|getStyle
parameter_list|(
name|boolean
name|header
parameter_list|,
name|Alignment
name|a
parameter_list|)
block|{
name|String
name|styleId
init|=
operator|(
name|header
condition|?
literal|"H"
else|:
literal|""
operator|)
operator|+
operator|(
name|a
operator|.
name|name
argument_list|()
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|)
decl_stmt|;
name|CellStyle
name|style
init|=
name|iStyles
operator|.
name|get
argument_list|(
name|styleId
argument_list|)
decl_stmt|;
if|if
condition|(
name|style
operator|==
literal|null
condition|)
block|{
name|style
operator|=
name|iWorkbook
operator|.
name|createCellStyle
argument_list|()
expr_stmt|;
name|style
operator|.
name|setAlignment
argument_list|(
name|a
operator|==
name|Alignment
operator|.
name|Left
condition|?
name|HorizontalAlignment
operator|.
name|LEFT
else|:
name|a
operator|==
name|Alignment
operator|.
name|Right
condition|?
name|HorizontalAlignment
operator|.
name|RIGHT
else|:
name|HorizontalAlignment
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|style
operator|.
name|setVerticalAlignment
argument_list|(
name|VerticalAlignment
operator|.
name|TOP
argument_list|)
expr_stmt|;
name|style
operator|.
name|setFont
argument_list|(
name|getFont
argument_list|(
name|header
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Color
operator|.
name|BLACK
argument_list|)
argument_list|)
expr_stmt|;
name|style
operator|.
name|setWrapText
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|header
condition|)
block|{
name|style
operator|.
name|setFillForegroundColor
argument_list|(
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|ss
operator|.
name|usermodel
operator|.
name|IndexedColors
operator|.
name|GREY_25_PERCENT
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|style
operator|.
name|setFillPattern
argument_list|(
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|ss
operator|.
name|usermodel
operator|.
name|FillPatternType
operator|.
name|SOLID_FOREGROUND
argument_list|)
expr_stmt|;
block|}
name|iStyles
operator|.
name|put
argument_list|(
name|styleId
argument_list|,
name|style
argument_list|)
expr_stmt|;
block|}
return|return
name|style
return|;
block|}
specifier|protected
name|CellStyle
name|cloneStyle
parameter_list|(
name|CellStyle
name|style
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|CellStyle
name|clone
init|=
name|iStyles
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|clone
operator|!=
literal|null
condition|)
return|return
name|clone
return|;
name|clone
operator|=
name|iWorkbook
operator|.
name|createCellStyle
argument_list|()
expr_stmt|;
name|clone
operator|.
name|setFont
argument_list|(
name|iWorkbook
operator|.
name|getFontAt
argument_list|(
name|style
operator|.
name|getFontIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|clone
operator|.
name|setVerticalAlignment
argument_list|(
name|VerticalAlignment
operator|.
name|TOP
argument_list|)
expr_stmt|;
name|clone
operator|.
name|setAlignment
argument_list|(
name|style
operator|.
name|getAlignmentEnum
argument_list|()
argument_list|)
expr_stmt|;
name|clone
operator|.
name|setBorderBottom
argument_list|(
name|style
operator|.
name|getBorderBottomEnum
argument_list|()
argument_list|)
expr_stmt|;
name|clone
operator|.
name|setBorderTop
argument_list|(
name|style
operator|.
name|getBorderTopEnum
argument_list|()
argument_list|)
expr_stmt|;
name|clone
operator|.
name|setBorderLeft
argument_list|(
name|style
operator|.
name|getBorderLeftEnum
argument_list|()
argument_list|)
expr_stmt|;
name|clone
operator|.
name|setBorderRight
argument_list|(
name|style
operator|.
name|getBorderRightEnum
argument_list|()
argument_list|)
expr_stmt|;
name|clone
operator|.
name|setBottomBorderColor
argument_list|(
name|style
operator|.
name|getBottomBorderColor
argument_list|()
argument_list|)
expr_stmt|;
name|clone
operator|.
name|setTopBorderColor
argument_list|(
name|style
operator|.
name|getTopBorderColor
argument_list|()
argument_list|)
expr_stmt|;
name|clone
operator|.
name|setLeftBorderColor
argument_list|(
name|style
operator|.
name|getLeftBorderColor
argument_list|()
argument_list|)
expr_stmt|;
name|clone
operator|.
name|setRightBorderColor
argument_list|(
name|style
operator|.
name|getRightBorderColor
argument_list|()
argument_list|)
expr_stmt|;
name|clone
operator|.
name|setWrapText
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|clone
operator|.
name|setFillForegroundColor
argument_list|(
name|style
operator|.
name|getFillForegroundColor
argument_list|()
argument_list|)
expr_stmt|;
name|clone
operator|.
name|setFillPattern
argument_list|(
name|style
operator|.
name|getFillPatternEnum
argument_list|()
argument_list|)
expr_stmt|;
name|iStyles
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|clone
argument_list|)
expr_stmt|;
return|return
name|clone
return|;
block|}
specifier|protected
name|String
name|getStyleName
parameter_list|(
name|CellStyle
name|style
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|CellStyle
argument_list|>
name|e
range|:
name|iStyles
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getIndex
argument_list|()
operator|==
name|style
operator|.
name|getIndex
argument_list|()
condition|)
return|return
name|e
operator|.
name|getKey
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|CellStyle
name|addBottomRow
parameter_list|(
name|CellStyle
name|style
parameter_list|)
block|{
if|if
condition|(
name|style
operator|.
name|getBorderBottomEnum
argument_list|()
operator|==
name|BorderStyle
operator|.
name|THIN
condition|)
return|return
name|style
return|;
name|String
name|name
init|=
name|getStyleName
argument_list|(
name|style
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
return|return
name|style
return|;
name|CellStyle
name|clone
init|=
name|cloneStyle
argument_list|(
name|style
argument_list|,
name|name
operator|+
literal|"|B"
argument_list|)
decl_stmt|;
name|clone
operator|.
name|setBottomBorderColor
argument_list|(
name|IndexedColors
operator|.
name|BLACK
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|clone
operator|.
name|setBorderBottom
argument_list|(
name|BorderStyle
operator|.
name|THIN
argument_list|)
expr_stmt|;
return|return
name|clone
return|;
block|}
specifier|protected
name|CellStyle
name|addTopRow
parameter_list|(
name|CellStyle
name|style
parameter_list|)
block|{
if|if
condition|(
name|style
operator|.
name|getBorderTopEnum
argument_list|()
operator|==
name|BorderStyle
operator|.
name|THIN
condition|)
return|return
name|style
return|;
name|String
name|name
init|=
name|getStyleName
argument_list|(
name|style
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
return|return
name|style
return|;
name|CellStyle
name|clone
init|=
name|cloneStyle
argument_list|(
name|style
argument_list|,
name|name
operator|+
literal|"|T"
argument_list|)
decl_stmt|;
name|clone
operator|.
name|setTopBorderColor
argument_list|(
name|IndexedColors
operator|.
name|BLACK
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|clone
operator|.
name|setBorderTop
argument_list|(
name|BorderStyle
operator|.
name|THIN
argument_list|)
expr_stmt|;
return|return
name|clone
return|;
block|}
specifier|protected
name|CellStyle
name|addLeftRow
parameter_list|(
name|CellStyle
name|style
parameter_list|)
block|{
if|if
condition|(
name|style
operator|.
name|getBorderLeftEnum
argument_list|()
operator|==
name|BorderStyle
operator|.
name|THIN
condition|)
return|return
name|style
return|;
name|String
name|name
init|=
name|getStyleName
argument_list|(
name|style
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
return|return
name|style
return|;
name|CellStyle
name|clone
init|=
name|cloneStyle
argument_list|(
name|style
argument_list|,
name|name
operator|+
literal|"|L"
argument_list|)
decl_stmt|;
name|clone
operator|.
name|setLeftBorderColor
argument_list|(
name|IndexedColors
operator|.
name|BLACK
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|clone
operator|.
name|setBorderLeft
argument_list|(
name|BorderStyle
operator|.
name|THIN
argument_list|)
expr_stmt|;
return|return
name|clone
return|;
block|}
specifier|protected
name|CellStyle
name|addRightRow
parameter_list|(
name|CellStyle
name|style
parameter_list|)
block|{
if|if
condition|(
name|style
operator|.
name|getBorderRightEnum
argument_list|()
operator|==
name|BorderStyle
operator|.
name|THIN
condition|)
return|return
name|style
return|;
name|String
name|name
init|=
name|getStyleName
argument_list|(
name|style
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
return|return
name|style
return|;
name|CellStyle
name|clone
init|=
name|cloneStyle
argument_list|(
name|style
argument_list|,
name|name
operator|+
literal|"|R"
argument_list|)
decl_stmt|;
name|clone
operator|.
name|setRightBorderColor
argument_list|(
name|IndexedColors
operator|.
name|BLACK
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|clone
operator|.
name|setBorderRight
argument_list|(
name|BorderStyle
operator|.
name|THIN
argument_list|)
expr_stmt|;
return|return
name|clone
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setPageName
parameter_list|(
name|String
name|pageName
parameter_list|)
block|{
name|iPageName
operator|=
name|pageName
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setCont
parameter_list|(
name|String
name|cont
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|printHeader
parameter_list|(
name|boolean
name|newPage
parameter_list|)
throws|throws
name|DocumentException
block|{
if|if
condition|(
operator|!
name|iEmpty
operator|&&
name|newPage
condition|)
name|newPage
argument_list|()
expr_stmt|;
if|if
condition|(
name|iHeaderLine
operator|!=
literal|null
condition|)
block|{
name|iHeaderPrinted
operator|=
literal|true
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Line
name|line
range|:
name|iHeaderLine
control|)
block|{
if|if
condition|(
name|line
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|Row
name|row
init|=
name|iSheet
operator|.
name|createRow
argument_list|(
name|iLineNo
operator|++
argument_list|)
decl_stmt|;
name|render
argument_list|(
name|line
argument_list|,
name|row
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|iEmpty
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|first
condition|)
block|{
for|for
control|(
name|int
name|c
init|=
name|row
operator|.
name|getFirstCellNum
argument_list|()
init|;
name|c
operator|<
name|row
operator|.
name|getLastCellNum
argument_list|()
condition|;
name|c
operator|++
control|)
name|row
operator|.
name|getCell
argument_list|(
name|c
argument_list|)
operator|.
name|setCellStyle
argument_list|(
name|addTopRow
argument_list|(
name|row
operator|.
name|getCell
argument_list|(
name|c
argument_list|)
operator|.
name|getCellStyle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|printSeparator
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|newPage
parameter_list|()
throws|throws
name|DocumentException
block|{
name|lastPage
argument_list|()
expr_stmt|;
name|createSheet
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|lastPage
parameter_list|()
throws|throws
name|DocumentException
block|{
for|for
control|(
name|short
name|col
init|=
literal|0
init|;
name|col
operator|<
name|iMaxColumns
condition|;
name|col
operator|++
control|)
if|if
condition|(
name|iSheet
operator|.
name|getColumnWidth
argument_list|(
name|col
argument_list|)
operator|==
literal|256
operator|*
name|iSheet
operator|.
name|getDefaultColumnWidth
argument_list|()
condition|)
name|iSheet
operator|.
name|autoSizeColumn
argument_list|(
name|col
argument_list|)
expr_stmt|;
if|if
condition|(
name|iPageName
operator|!=
literal|null
operator|&&
name|iFooter
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|iWorkbook
operator|.
name|setSheetName
argument_list|(
name|iPageNo
argument_list|,
name|iPageName
operator|.
name|replaceAll
argument_list|(
literal|"/"
argument_list|,
literal|"-"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|":"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
block|}
block|}
name|printSeparator
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getLineNumber
parameter_list|()
block|{
return|return
name|iLineNo
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getNrLinesPerPage
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getNrCharsPerLine
parameter_list|()
block|{
return|return
literal|1000
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|printSeparator
parameter_list|(
name|Line
name|line
parameter_list|)
throws|throws
name|DocumentException
block|{
if|if
condition|(
name|iLineNo
operator|>
literal|0
condition|)
block|{
name|Row
name|row
init|=
name|iSheet
operator|.
name|getRow
argument_list|(
name|iLineNo
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|row
operator|!=
literal|null
condition|)
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|iNrColumns
condition|;
name|c
operator|++
control|)
block|{
name|Cell
name|cell
init|=
name|row
operator|.
name|getCell
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|cell
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cell
operator|.
name|getCellStyle
argument_list|()
operator|!=
literal|null
condition|)
name|cell
operator|.
name|setCellStyle
argument_list|(
name|addBottomRow
argument_list|(
name|cell
operator|.
name|getCellStyle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|cell
operator|.
name|setCellStyle
argument_list|(
name|addBottomRow
argument_list|(
name|getStyle
argument_list|(
literal|false
argument_list|,
name|Alignment
operator|.
name|Left
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cell
operator|=
name|row
operator|.
name|createCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setCellStyle
argument_list|(
name|addBottomRow
argument_list|(
name|getStyle
argument_list|(
literal|false
argument_list|,
name|Alignment
operator|.
name|Left
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|getSeparatorNrLines
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|private
name|String
name|render
parameter_list|(
name|AbstractReport
operator|.
name|Cell
name|cell
parameter_list|)
block|{
name|StringBuffer
name|ret
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|cell
operator|.
name|getText
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cell
operator|.
name|getPadding
argument_list|()
operator|!=
literal|' '
operator|&&
name|cell
operator|.
name|getText
argument_list|()
operator|.
name|length
argument_list|()
operator|<
name|cell
operator|.
name|getLength
argument_list|()
condition|)
name|ret
operator|.
name|append
argument_list|(
name|cell
operator|.
name|render
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|ret
operator|.
name|append
argument_list|(
name|cell
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cell
operator|.
name|getCells
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cell
operator|.
name|getText
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cell
operator|.
name|getCellSeparator
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|ret
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
else|else
name|ret
operator|.
name|append
argument_list|(
name|cell
operator|.
name|getCellSeparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cell
operator|.
name|getCells
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|cell
operator|.
name|getCells
argument_list|()
index|[
name|i
operator|-
literal|1
index|]
operator|.
name|getCellSeparator
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|ret
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
else|else
name|ret
operator|.
name|append
argument_list|(
name|cell
operator|.
name|getCells
argument_list|()
index|[
name|i
operator|-
literal|1
index|]
operator|.
name|getCellSeparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|append
argument_list|(
name|render
argument_list|(
name|cell
operator|.
name|getCells
argument_list|()
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|int
name|render
parameter_list|(
name|Line
name|line
parameter_list|,
name|Row
name|row
parameter_list|,
name|boolean
name|header
parameter_list|,
name|int
name|col
parameter_list|)
block|{
if|if
condition|(
name|line
operator|==
literal|null
condition|)
return|return
name|col
return|;
if|if
condition|(
name|line
operator|.
name|getLines
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|line
operator|.
name|getLines
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|col
operator|=
name|render
argument_list|(
name|line
operator|.
name|getLines
argument_list|()
index|[
name|i
index|]
argument_list|,
name|row
argument_list|,
name|header
argument_list|,
name|col
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|line
operator|.
name|getCells
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|leftOver
init|=
literal|null
decl_stmt|;
for|for
control|(
name|AbstractReport
operator|.
name|Cell
name|cell
range|:
name|line
operator|.
name|getCells
argument_list|()
control|)
block|{
if|if
condition|(
name|cell
operator|.
name|getColSpan
argument_list|()
operator|==
literal|0
condition|)
block|{
name|leftOver
operator|=
operator|(
operator|(
name|leftOver
operator|==
literal|null
operator|||
name|leftOver
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
name|leftOver
operator|+
literal|" "
operator|)
operator|+
name|render
argument_list|(
name|cell
argument_list|)
operator|)
operator|.
name|trim
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|Cell
name|c
init|=
name|row
operator|.
name|createCell
argument_list|(
name|col
argument_list|)
decl_stmt|;
name|CellStyle
name|style
init|=
name|getStyle
argument_list|(
name|header
argument_list|,
name|cell
operator|.
name|getAlignment
argument_list|()
argument_list|)
decl_stmt|;
name|c
operator|.
name|setCellStyle
argument_list|(
name|style
argument_list|)
expr_stmt|;
name|c
operator|.
name|setCellValue
argument_list|(
operator|(
name|leftOver
operator|==
literal|null
operator|||
name|leftOver
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
name|leftOver
operator|+
literal|" "
operator|)
operator|+
name|render
argument_list|(
name|cell
argument_list|)
argument_list|)
expr_stmt|;
name|Cell
name|last
init|=
name|c
decl_stmt|;
if|if
condition|(
name|cell
operator|.
name|getColSpan
argument_list|()
operator|>
literal|1
condition|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|1
init|;
name|x
operator|<
name|cell
operator|.
name|getColSpan
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|Cell
name|d
init|=
name|row
operator|.
name|createCell
argument_list|(
name|col
operator|+
name|x
argument_list|)
decl_stmt|;
name|d
operator|.
name|setCellStyle
argument_list|(
name|style
argument_list|)
expr_stmt|;
name|last
operator|=
name|d
expr_stmt|;
block|}
name|iSheet
operator|.
name|addMergedRegion
argument_list|(
operator|new
name|CellRangeAddress
argument_list|(
name|row
operator|.
name|getRowNum
argument_list|()
argument_list|,
name|row
operator|.
name|getRowNum
argument_list|()
argument_list|,
name|col
argument_list|,
name|col
operator|+
name|cell
operator|.
name|getColSpan
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cell
operator|.
name|getCellSeparator
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|"|"
argument_list|)
condition|)
name|last
operator|.
name|setCellStyle
argument_list|(
name|addRightRow
argument_list|(
name|style
argument_list|)
argument_list|)
expr_stmt|;
name|col
operator|+=
name|cell
operator|.
name|getColSpan
argument_list|()
expr_stmt|;
name|leftOver
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|row
operator|.
name|getLastCellNum
argument_list|()
operator|<
literal|0
operator|&&
name|iNrColumns
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iNrColumns
condition|;
name|i
operator|++
control|)
block|{
name|Cell
name|c
init|=
name|row
operator|.
name|createCell
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|c
operator|.
name|setCellStyle
argument_list|(
name|getStyle
argument_list|(
name|header
argument_list|,
name|Alignment
operator|.
name|Left
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iSheet
operator|.
name|addMergedRegion
argument_list|(
operator|new
name|CellRangeAddress
argument_list|(
name|row
operator|.
name|getRowNum
argument_list|()
argument_list|,
name|row
operator|.
name|getRowNum
argument_list|()
argument_list|,
literal|0
argument_list|,
name|iNrColumns
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iHeaderPrinted
condition|)
block|{
name|row
operator|.
name|getCell
argument_list|(
name|row
operator|.
name|getFirstCellNum
argument_list|()
argument_list|)
operator|.
name|setCellStyle
argument_list|(
name|addLeftRow
argument_list|(
name|row
operator|.
name|getCell
argument_list|(
literal|0
argument_list|)
operator|.
name|getCellStyle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|getCell
argument_list|(
name|row
operator|.
name|getLastCellNum
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|setCellStyle
argument_list|(
name|addRightRow
argument_list|(
name|row
operator|.
name|getCell
argument_list|(
name|row
operator|.
name|getLastCellNum
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getCellStyle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|col
return|;
block|}
specifier|private
name|int
name|countColumns
parameter_list|(
name|Line
name|line
parameter_list|)
block|{
if|if
condition|(
name|line
operator|==
literal|null
condition|)
return|return
literal|0
return|;
name|int
name|cols
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|getLines
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Line
name|l
range|:
name|line
operator|.
name|getLines
argument_list|()
control|)
name|cols
operator|+=
name|countColumns
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|getCells
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AbstractReport
operator|.
name|Cell
name|cell
range|:
name|line
operator|.
name|getCells
argument_list|()
control|)
name|cols
operator|+=
name|cell
operator|.
name|getColSpan
argument_list|()
expr_stmt|;
block|}
return|return
name|cols
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setListener
parameter_list|(
name|Listener
name|listener
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSkipRepeating
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

