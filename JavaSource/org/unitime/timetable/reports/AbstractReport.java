begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|reports
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|DocumentException
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractReport
implements|implements
name|ReportWriter
operator|.
name|Listener
block|{
specifier|protected
name|ReportWriter
name|iWriter
decl_stmt|;
specifier|protected
name|Mode
name|iMode
decl_stmt|;
specifier|protected
specifier|static
enum|enum
name|Mode
block|{
name|LegacyPdfLetter
block|,
name|LegacyPdfLedger
block|,
name|LegacyText
block|,
name|CSV
block|,
name|PDF
block|,
name|XLS
block|, 	}
specifier|public
name|AbstractReport
parameter_list|(
name|Mode
name|mode
parameter_list|,
name|OutputStream
name|out
parameter_list|,
name|String
name|title
parameter_list|,
name|String
name|title2
parameter_list|,
name|String
name|subject
parameter_list|,
name|String
name|session
parameter_list|)
throws|throws
name|IOException
throws|,
name|DocumentException
block|{
name|iMode
operator|=
name|mode
expr_stmt|;
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|LegacyPdfLetter
case|:
name|iWriter
operator|=
operator|new
name|PdfLegacyReport
argument_list|(
name|PdfLegacyReport
operator|.
name|sModeNormal
argument_list|,
name|out
argument_list|,
name|title
argument_list|,
name|title2
argument_list|,
name|subject
argument_list|,
name|session
argument_list|)
expr_stmt|;
break|break;
case|case
name|LegacyPdfLedger
case|:
name|iWriter
operator|=
operator|new
name|PdfLegacyReport
argument_list|(
name|PdfLegacyReport
operator|.
name|sModeLedger
argument_list|,
name|out
argument_list|,
name|title
argument_list|,
name|title2
argument_list|,
name|subject
argument_list|,
name|session
argument_list|)
expr_stmt|;
break|break;
case|case
name|LegacyText
case|:
name|iWriter
operator|=
operator|new
name|PdfLegacyReport
argument_list|(
name|PdfLegacyReport
operator|.
name|sModeText
argument_list|,
name|out
argument_list|,
name|title
argument_list|,
name|title2
argument_list|,
name|subject
argument_list|,
name|session
argument_list|)
expr_stmt|;
break|break;
case|case
name|CSV
case|:
name|iWriter
operator|=
operator|new
name|CsvReportWriter
argument_list|(
name|out
argument_list|,
name|title
argument_list|,
name|title2
argument_list|,
name|subject
argument_list|,
name|session
argument_list|)
expr_stmt|;
break|break;
case|case
name|PDF
case|:
name|iWriter
operator|=
operator|new
name|PdfReportWriter
argument_list|(
name|out
argument_list|,
name|title
argument_list|,
name|title2
argument_list|,
name|subject
argument_list|,
name|session
argument_list|)
expr_stmt|;
break|break;
case|case
name|XLS
case|:
name|iWriter
operator|=
operator|new
name|XlsReportWriter
argument_list|(
name|out
argument_list|,
name|title
argument_list|,
name|title2
argument_list|,
name|subject
argument_list|,
name|session
argument_list|)
expr_stmt|;
break|break;
block|}
name|iWriter
operator|.
name|setListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ReportWriter
name|getWriter
parameter_list|()
block|{
return|return
name|iWriter
return|;
block|}
specifier|protected
name|void
name|setFooter
parameter_list|(
name|String
name|footer
parameter_list|)
block|{
name|getWriter
argument_list|()
operator|.
name|setFooter
argument_list|(
name|footer
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setHeaderLine
parameter_list|(
name|Line
modifier|...
name|line
parameter_list|)
block|{
name|getWriter
argument_list|()
operator|.
name|setHeader
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Line
index|[]
name|getHeader
parameter_list|()
block|{
return|return
name|getWriter
argument_list|()
operator|.
name|getHeader
argument_list|()
return|;
block|}
specifier|protected
name|void
name|setPageName
parameter_list|(
name|String
name|pageName
parameter_list|)
block|{
name|getWriter
argument_list|()
operator|.
name|setPageName
argument_list|(
name|pageName
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setCont
parameter_list|(
name|String
name|cont
parameter_list|)
block|{
name|getWriter
argument_list|()
operator|.
name|setCont
argument_list|(
name|cont
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Cell
name|lpad
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|len
parameter_list|)
block|{
return|return
operator|new
name|Cell
argument_list|(
name|s
argument_list|,
name|Alignment
operator|.
name|Right
argument_list|,
name|len
argument_list|)
return|;
block|}
specifier|protected
name|Cell
name|lpad
parameter_list|(
name|String
name|s
parameter_list|,
name|char
name|c
parameter_list|,
name|int
name|len
parameter_list|)
block|{
return|return
operator|new
name|Cell
argument_list|(
name|s
argument_list|,
name|Alignment
operator|.
name|Right
argument_list|,
name|len
argument_list|)
operator|.
name|withPadding
argument_list|(
name|c
argument_list|)
return|;
block|}
specifier|protected
name|Cell
name|mpad
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|len
parameter_list|)
block|{
return|return
operator|new
name|Cell
argument_list|(
name|s
argument_list|,
name|Alignment
operator|.
name|Center
argument_list|,
name|len
argument_list|)
return|;
block|}
specifier|protected
name|Cell
name|mpad
parameter_list|(
name|String
name|s
parameter_list|,
name|char
name|c
parameter_list|,
name|int
name|len
parameter_list|)
block|{
return|return
operator|new
name|Cell
argument_list|(
name|s
argument_list|,
name|Alignment
operator|.
name|Center
argument_list|,
name|len
argument_list|)
operator|.
name|withPadding
argument_list|(
name|c
argument_list|)
return|;
block|}
specifier|protected
name|Cell
name|rpad
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|len
parameter_list|)
block|{
return|return
operator|new
name|Cell
argument_list|(
name|s
argument_list|,
name|Alignment
operator|.
name|Left
argument_list|,
name|len
argument_list|)
return|;
block|}
specifier|protected
name|Cell
name|rpad
parameter_list|(
name|String
name|s
parameter_list|,
name|char
name|c
parameter_list|,
name|int
name|len
parameter_list|)
block|{
return|return
operator|new
name|Cell
argument_list|(
name|s
argument_list|,
name|Alignment
operator|.
name|Left
argument_list|,
name|len
argument_list|)
operator|.
name|withPadding
argument_list|(
name|c
argument_list|)
return|;
block|}
specifier|protected
name|Cell
name|rpad
parameter_list|(
name|Cell
name|c
parameter_list|,
name|int
name|len
parameter_list|)
block|{
return|return
operator|new
name|Cell
argument_list|(
name|c
argument_list|)
operator|.
name|withAlignment
argument_list|(
name|Alignment
operator|.
name|Left
argument_list|)
operator|.
name|withLength
argument_list|(
name|len
argument_list|)
return|;
block|}
specifier|public
name|void
name|printHeader
parameter_list|()
throws|throws
name|DocumentException
block|{
name|printHeader
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|printHeader
parameter_list|(
name|boolean
name|newPage
parameter_list|)
throws|throws
name|DocumentException
block|{
name|getWriter
argument_list|()
operator|.
name|printHeader
argument_list|(
name|newPage
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|headerPrinted
parameter_list|()
block|{
block|}
empty_stmt|;
specifier|protected
name|void
name|newPage
parameter_list|()
throws|throws
name|DocumentException
block|{
name|getWriter
argument_list|()
operator|.
name|newPage
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|lastPage
parameter_list|()
throws|throws
name|DocumentException
block|{
name|getWriter
argument_list|()
operator|.
name|lastPage
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|open
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|DocumentException
throws|,
name|IOException
block|{
name|open
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|open
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|DocumentException
throws|,
name|IOException
block|{
name|getWriter
argument_list|()
operator|.
name|open
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
throws|,
name|DocumentException
block|{
name|getWriter
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|int
name|getLineNumber
parameter_list|()
block|{
return|return
name|getWriter
argument_list|()
operator|.
name|getLineNumber
argument_list|()
return|;
block|}
specifier|protected
name|int
name|getNrLinesPerPage
parameter_list|()
block|{
return|return
name|getWriter
argument_list|()
operator|.
name|getNrLinesPerPage
argument_list|()
return|;
block|}
specifier|protected
name|int
name|getNrCharsPerLine
parameter_list|()
block|{
return|return
name|getWriter
argument_list|()
operator|.
name|getNrCharsPerLine
argument_list|()
return|;
block|}
specifier|protected
name|int
name|getSeparatorNrLines
parameter_list|()
block|{
return|return
name|getWriter
argument_list|()
operator|.
name|getSeparatorNrLines
argument_list|()
return|;
block|}
specifier|protected
name|boolean
name|isSkipRepeating
parameter_list|()
block|{
return|return
name|getWriter
argument_list|()
operator|.
name|isSkipRepeating
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|getExtension
parameter_list|(
name|Mode
name|mode
parameter_list|)
block|{
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|LegacyPdfLetter
case|:
case|case
name|LegacyPdfLedger
case|:
case|case
name|PDF
case|:
return|return
literal|".pdf"
return|;
case|case
name|LegacyText
case|:
return|return
literal|".txt"
return|;
case|case
name|CSV
case|:
return|return
literal|".csv"
return|;
case|case
name|XLS
case|:
return|return
literal|".xls"
return|;
default|default:
return|return
literal|".pdf"
return|;
block|}
block|}
specifier|public
specifier|static
name|String
name|getExtension
parameter_list|(
name|int
name|mode
parameter_list|)
block|{
return|return
name|getExtension
argument_list|(
name|Mode
operator|.
name|values
argument_list|()
index|[
name|mode
index|]
argument_list|)
return|;
block|}
specifier|public
name|String
name|getExtension
parameter_list|()
block|{
return|return
name|getExtension
argument_list|(
name|iMode
argument_list|)
return|;
block|}
specifier|protected
name|void
name|println
parameter_list|()
throws|throws
name|DocumentException
block|{
name|printLine
argument_list|(
operator|new
name|Line
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|printSeparator
parameter_list|(
name|Cell
modifier|...
name|cells
parameter_list|)
throws|throws
name|DocumentException
block|{
if|if
condition|(
name|cells
operator|.
name|length
operator|==
literal|0
condition|)
name|getWriter
argument_list|()
operator|.
name|printSeparator
argument_list|(
literal|null
argument_list|)
expr_stmt|;
else|else
name|getWriter
argument_list|()
operator|.
name|printSeparator
argument_list|(
operator|new
name|Line
argument_list|(
name|cells
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|println
parameter_list|(
name|Line
modifier|...
name|line
parameter_list|)
throws|throws
name|DocumentException
block|{
if|if
condition|(
name|line
operator|.
name|length
operator|==
literal|0
condition|)
name|printLine
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|else if
condition|(
name|line
operator|.
name|length
operator|==
literal|1
condition|)
name|printLine
argument_list|(
name|line
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
else|else
name|printLine
argument_list|(
operator|new
name|Line
argument_list|(
name|line
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|println
parameter_list|(
name|Cell
modifier|...
name|cells
parameter_list|)
throws|throws
name|DocumentException
block|{
name|printLine
argument_list|(
operator|new
name|Line
argument_list|(
name|cells
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|printLine
parameter_list|(
name|Line
name|line
parameter_list|)
throws|throws
name|DocumentException
block|{
name|getWriter
argument_list|()
operator|.
name|printLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
enum|enum
name|Alignment
block|{
name|Left
block|,
name|Center
block|,
name|Right
block|}
empty_stmt|;
specifier|protected
specifier|static
name|Cell
name|NULL
init|=
operator|new
name|Cell
argument_list|(
literal|""
argument_list|)
operator|.
name|withColSpan
argument_list|(
literal|0
argument_list|)
operator|.
name|withSeparator
argument_list|(
literal|""
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
class|class
name|Cell
block|{
specifier|private
name|String
name|iText
decl_stmt|;
specifier|private
name|Alignment
name|iAlignment
decl_stmt|;
specifier|private
name|int
name|iLength
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|iColSpan
init|=
literal|1
decl_stmt|;
specifier|private
name|char
name|iPadding
init|=
literal|' '
decl_stmt|;
specifier|private
name|Cell
index|[]
name|iCells
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iCellSeparator
init|=
literal|" "
decl_stmt|;
specifier|public
name|Cell
parameter_list|(
name|String
name|text
parameter_list|,
name|Alignment
name|alignment
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|iText
operator|=
name|text
expr_stmt|;
name|iAlignment
operator|=
name|alignment
expr_stmt|;
name|iLength
operator|=
name|length
expr_stmt|;
block|}
specifier|public
name|Cell
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|this
argument_list|(
name|text
argument_list|,
name|Alignment
operator|.
name|Left
argument_list|,
name|text
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Cell
parameter_list|(
name|Cell
modifier|...
name|cells
parameter_list|)
block|{
name|iCells
operator|=
name|cells
expr_stmt|;
name|iAlignment
operator|=
name|Alignment
operator|.
name|Left
expr_stmt|;
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
if|if
condition|(
name|iText
operator|!=
literal|null
operator|&&
operator|!
name|iText
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|iCells
operator|!=
literal|null
condition|)
for|for
control|(
name|Cell
name|cell
range|:
name|iCells
control|)
if|if
condition|(
operator|!
name|cell
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
specifier|public
name|String
name|getText
parameter_list|()
block|{
return|return
name|iText
return|;
block|}
specifier|public
name|Cell
index|[]
name|getCells
parameter_list|()
block|{
return|return
name|iCells
return|;
block|}
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|iLength
return|;
block|}
specifier|public
name|int
name|getColSpan
parameter_list|()
block|{
return|return
name|iColSpan
return|;
block|}
specifier|public
name|Alignment
name|getAlignment
parameter_list|()
block|{
return|return
name|iAlignment
return|;
block|}
specifier|public
name|char
name|getPadding
parameter_list|()
block|{
return|return
name|iPadding
return|;
block|}
specifier|public
name|String
name|getCellSeparator
parameter_list|()
block|{
return|return
name|iCellSeparator
return|;
block|}
specifier|public
name|Cell
name|withAlignment
parameter_list|(
name|Alignment
name|alignment
parameter_list|)
block|{
name|iAlignment
operator|=
name|alignment
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Cell
name|withLength
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|iLength
operator|=
name|length
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Cell
name|withColSpan
parameter_list|(
name|int
name|colSpan
parameter_list|)
block|{
name|iColSpan
operator|=
name|colSpan
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Cell
name|withPadding
parameter_list|(
name|char
name|padding
parameter_list|)
block|{
name|iPadding
operator|=
name|padding
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Cell
name|withSeparator
parameter_list|(
name|String
name|separator
parameter_list|)
block|{
name|iCellSeparator
operator|=
name|separator
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|String
name|render
parameter_list|()
block|{
name|StringBuffer
name|ret
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|StringBuffer
name|text
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|getText
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|text
operator|.
name|append
argument_list|(
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getCells
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|getText
argument_list|()
operator|!=
literal|null
condition|)
name|text
operator|.
name|append
argument_list|(
name|getCellSeparator
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getCells
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|text
operator|.
name|append
argument_list|(
name|getCells
argument_list|()
index|[
name|i
operator|-
literal|1
index|]
operator|.
name|getCellSeparator
argument_list|()
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
name|getCells
argument_list|()
index|[
name|i
index|]
operator|.
name|render
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
switch|switch
condition|(
name|getAlignment
argument_list|()
condition|)
block|{
case|case
name|Left
case|:
name|ret
operator|.
name|append
argument_list|(
name|rpad
argument_list|(
name|text
operator|.
name|toString
argument_list|()
argument_list|,
name|getPadding
argument_list|()
argument_list|,
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Right
case|:
name|ret
operator|.
name|append
argument_list|(
name|lpad
argument_list|(
name|text
operator|.
name|toString
argument_list|()
argument_list|,
name|getPadding
argument_list|()
argument_list|,
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Center
case|:
name|ret
operator|.
name|append
argument_list|(
name|mpad
argument_list|(
name|text
operator|.
name|toString
argument_list|()
argument_list|,
name|getPadding
argument_list|()
argument_list|,
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|ret
operator|.
name|append
argument_list|(
name|rpad
argument_list|(
name|text
operator|.
name|toString
argument_list|()
argument_list|,
name|getPadding
argument_list|()
argument_list|,
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
name|ret
operator|.
name|append
argument_list|(
name|text
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|render
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|lpad
parameter_list|(
name|String
name|s
parameter_list|,
name|char
name|ch
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
condition|)
name|s
operator|=
literal|""
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|>
name|len
condition|)
return|return
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|len
argument_list|)
return|;
while|while
condition|(
name|s
operator|.
name|length
argument_list|()
operator|<
name|len
condition|)
name|s
operator|=
name|ch
operator|+
name|s
expr_stmt|;
return|return
name|s
return|;
block|}
specifier|public
specifier|static
name|String
name|lpad
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
condition|)
name|s
operator|=
literal|""
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|>
name|len
condition|)
return|return
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|len
argument_list|)
return|;
return|return
name|lpad
argument_list|(
name|s
argument_list|,
literal|' '
argument_list|,
name|len
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|String
name|rpad
parameter_list|(
name|String
name|s
parameter_list|,
name|char
name|ch
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
condition|)
name|s
operator|=
literal|""
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|>
name|len
condition|)
return|return
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|len
argument_list|)
return|;
while|while
condition|(
name|s
operator|.
name|length
argument_list|()
operator|<
name|len
condition|)
name|s
operator|=
name|s
operator|+
name|ch
expr_stmt|;
return|return
name|s
return|;
block|}
specifier|public
specifier|static
name|String
name|rpad
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
condition|)
name|s
operator|=
literal|""
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|>
name|len
condition|)
return|return
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|len
argument_list|)
return|;
return|return
name|rpad
argument_list|(
name|s
argument_list|,
literal|' '
argument_list|,
name|len
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|String
name|mpad
parameter_list|(
name|String
name|s
parameter_list|,
name|char
name|ch
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
condition|)
name|s
operator|=
literal|""
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|>
name|len
condition|)
return|return
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|len
argument_list|)
return|;
while|while
condition|(
name|s
operator|.
name|length
argument_list|()
operator|<
name|len
condition|)
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|%
literal|2
operator|==
literal|0
condition|)
name|s
operator|=
name|s
operator|+
name|ch
expr_stmt|;
else|else
name|s
operator|=
name|ch
operator|+
name|s
expr_stmt|;
return|return
name|s
return|;
block|}
specifier|public
specifier|static
name|String
name|mpad
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|len
parameter_list|)
block|{
return|return
name|mpad
argument_list|(
name|s
argument_list|,
literal|' '
argument_list|,
name|len
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|String
name|mpad
parameter_list|(
name|String
name|s1
parameter_list|,
name|String
name|s2
parameter_list|,
name|char
name|ch
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|String
name|m
init|=
literal|""
decl_stmt|;
while|while
condition|(
operator|(
name|s1
operator|+
name|m
operator|+
name|s2
operator|)
operator|.
name|length
argument_list|()
operator|<
name|len
condition|)
name|m
operator|+=
name|ch
expr_stmt|;
return|return
name|s1
operator|+
name|m
operator|+
name|s2
return|;
block|}
block|}
specifier|protected
specifier|static
class|class
name|Line
block|{
specifier|private
name|Cell
index|[]
name|iCells
decl_stmt|;
specifier|private
name|Line
index|[]
name|iLines
decl_stmt|;
specifier|private
name|String
name|iLineSeparator
init|=
literal|"| "
decl_stmt|;
specifier|private
name|Alignment
name|iAlignment
init|=
name|Alignment
operator|.
name|Left
decl_stmt|;
specifier|private
name|int
name|iLength
init|=
literal|0
decl_stmt|;
specifier|public
name|Line
parameter_list|()
block|{
name|iCells
operator|=
operator|new
name|Cell
index|[]
block|{}
expr_stmt|;
block|}
specifier|public
name|Line
parameter_list|(
name|Cell
modifier|...
name|cells
parameter_list|)
block|{
name|iCells
operator|=
name|cells
expr_stmt|;
if|if
condition|(
name|iCells
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|iAlignment
operator|=
name|iCells
index|[
literal|0
index|]
operator|.
name|getAlignment
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|Line
parameter_list|(
name|String
modifier|...
name|cells
parameter_list|)
block|{
name|iCells
operator|=
operator|new
name|Cell
index|[
name|cells
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cells
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|iCells
index|[
name|i
index|]
operator|=
operator|new
name|Cell
argument_list|(
name|cells
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
argument_list|,
name|Alignment
operator|.
name|Left
argument_list|,
name|cells
index|[
name|i
index|]
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Line
parameter_list|(
name|Line
modifier|...
name|lines
parameter_list|)
block|{
name|iLines
operator|=
name|lines
expr_stmt|;
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
if|if
condition|(
name|iCells
operator|!=
literal|null
condition|)
for|for
control|(
name|Cell
name|cell
range|:
name|iCells
control|)
if|if
condition|(
operator|!
name|cell
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|iLines
operator|!=
literal|null
condition|)
for|for
control|(
name|Line
name|line
range|:
name|iLines
control|)
if|if
condition|(
operator|!
name|line
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
specifier|public
name|Cell
index|[]
name|getCells
parameter_list|()
block|{
return|return
name|iCells
return|;
block|}
specifier|public
name|Line
index|[]
name|getLines
parameter_list|()
block|{
return|return
name|iLines
return|;
block|}
specifier|public
name|String
name|getLineSeparator
parameter_list|()
block|{
return|return
name|iLineSeparator
return|;
block|}
specifier|public
name|Line
name|withLineSeparator
parameter_list|(
name|String
name|sep
parameter_list|)
block|{
name|iLineSeparator
operator|=
name|sep
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|iLength
return|;
block|}
specifier|public
name|Alignment
name|getAlignment
parameter_list|()
block|{
return|return
name|iAlignment
return|;
block|}
specifier|public
name|Line
name|withAlignment
parameter_list|(
name|Alignment
name|alignment
parameter_list|)
block|{
name|iAlignment
operator|=
name|alignment
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Line
name|withLength
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|iLength
operator|=
name|length
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|String
name|render
parameter_list|()
block|{
if|if
condition|(
name|getLines
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|StringBuffer
name|ret
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getLines
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|ret
operator|.
name|append
argument_list|(
name|getLines
argument_list|()
index|[
name|i
operator|-
literal|1
index|]
operator|.
name|getLineSeparator
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|append
argument_list|(
name|getLines
argument_list|()
index|[
name|i
index|]
operator|.
name|render
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
switch|switch
condition|(
name|getAlignment
argument_list|()
condition|)
block|{
case|case
name|Left
case|:
return|return
name|Cell
operator|.
name|rpad
argument_list|(
name|ret
operator|.
name|toString
argument_list|()
argument_list|,
name|getLength
argument_list|()
argument_list|)
return|;
case|case
name|Right
case|:
return|return
name|Cell
operator|.
name|lpad
argument_list|(
name|ret
operator|.
name|toString
argument_list|()
argument_list|,
name|getLength
argument_list|()
argument_list|)
return|;
case|case
name|Center
case|:
return|return
name|Cell
operator|.
name|mpad
argument_list|(
name|ret
operator|.
name|toString
argument_list|()
argument_list|,
name|getLength
argument_list|()
argument_list|)
return|;
default|default:
return|return
name|Cell
operator|.
name|rpad
argument_list|(
name|ret
operator|.
name|toString
argument_list|()
argument_list|,
name|getLength
argument_list|()
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
name|ret
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
if|if
condition|(
name|getCells
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|StringBuffer
name|ret
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getCells
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|ret
operator|.
name|append
argument_list|(
name|getCells
argument_list|()
index|[
name|i
operator|-
literal|1
index|]
operator|.
name|getCellSeparator
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|append
argument_list|(
name|getCells
argument_list|()
index|[
name|i
index|]
operator|.
name|render
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
switch|switch
condition|(
name|getAlignment
argument_list|()
condition|)
block|{
case|case
name|Left
case|:
return|return
name|Cell
operator|.
name|rpad
argument_list|(
name|ret
operator|.
name|toString
argument_list|()
argument_list|,
name|getLength
argument_list|()
argument_list|)
return|;
case|case
name|Right
case|:
return|return
name|Cell
operator|.
name|lpad
argument_list|(
name|ret
operator|.
name|toString
argument_list|()
argument_list|,
name|getLength
argument_list|()
argument_list|)
return|;
case|case
name|Center
case|:
return|return
name|Cell
operator|.
name|mpad
argument_list|(
name|ret
operator|.
name|toString
argument_list|()
argument_list|,
name|getLength
argument_list|()
argument_list|)
return|;
default|default:
return|return
name|Cell
operator|.
name|rpad
argument_list|(
name|ret
operator|.
name|toString
argument_list|()
argument_list|,
name|getLength
argument_list|()
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
name|ret
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
return|return
literal|""
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|render
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

