begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|reports
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|reports
operator|.
name|AbstractReport
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|reports
operator|.
name|AbstractReport
operator|.
name|Line
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|PdfEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|PdfFont
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|DocumentException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Font
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|PageSize
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Paragraph
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|pdf
operator|.
name|PdfContentByte
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|pdf
operator|.
name|PdfPCell
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|pdf
operator|.
name|PdfPRow
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|pdf
operator|.
name|PdfPTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|pdf
operator|.
name|PdfWriter
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|PdfReportWriter
implements|implements
name|ReportWriter
block|{
specifier|private
name|Document
name|iDocument
decl_stmt|;
specifier|private
name|PdfWriter
name|iWriter
decl_stmt|;
specifier|private
name|String
name|iTitle
decl_stmt|,
name|iTitle2
decl_stmt|;
specifier|private
name|String
name|iSession
decl_stmt|;
specifier|private
name|int
name|iPageNo
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|iLineNo
init|=
literal|0
decl_stmt|;
specifier|private
name|boolean
name|iEmpty
init|=
literal|true
decl_stmt|;
specifier|private
name|String
name|iPageId
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iCont
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iFooter
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iSubject
init|=
literal|null
decl_stmt|;
specifier|private
name|Line
name|iHeaderLine
index|[]
init|=
literal|null
decl_stmt|;
specifier|private
name|PdfPTable
name|iTable
init|=
literal|null
decl_stmt|;
specifier|private
name|Font
name|iFont
init|=
literal|null
decl_stmt|;
specifier|private
name|Font
name|iBoldFont
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iNewPage
init|=
literal|true
decl_stmt|;
specifier|private
name|Listener
name|iListener
init|=
literal|null
decl_stmt|;
specifier|public
name|PdfReportWriter
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|String
name|title
parameter_list|,
name|String
name|title2
parameter_list|,
name|String
name|subject
parameter_list|,
name|String
name|session
parameter_list|)
throws|throws
name|DocumentException
throws|,
name|IOException
block|{
name|iTitle
operator|=
name|title
expr_stmt|;
name|iTitle2
operator|=
name|title2
expr_stmt|;
name|iSubject
operator|=
name|subject
expr_stmt|;
name|iSession
operator|=
name|session
expr_stmt|;
name|iFont
operator|=
name|PdfFont
operator|.
name|createFont
argument_list|(
name|ApplicationProperty
operator|.
name|PdfFontSizeExams
operator|.
name|floatValue
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iBoldFont
operator|=
name|PdfFont
operator|.
name|createFont
argument_list|(
name|ApplicationProperty
operator|.
name|PdfFontSizeExams
operator|.
name|floatValue
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
name|open
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setFooter
parameter_list|(
name|String
name|footer
parameter_list|)
block|{
name|iFooter
operator|=
name|footer
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setHeader
parameter_list|(
name|Line
modifier|...
name|line
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|iTable
operator|!=
literal|null
condition|)
name|finishCurrentTable
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DocumentException
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|iHeaderLine
operator|=
name|line
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Line
index|[]
name|getHeader
parameter_list|()
block|{
return|return
name|iHeaderLine
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|printLine
parameter_list|(
name|Line
name|line
parameter_list|)
throws|throws
name|DocumentException
block|{
if|if
condition|(
name|iTable
operator|==
literal|null
condition|)
block|{
name|String
name|text
init|=
operator|(
name|line
operator|==
literal|null
condition|?
literal|" "
else|:
name|line
operator|.
name|render
argument_list|()
operator|.
name|trim
argument_list|()
operator|)
decl_stmt|;
name|Paragraph
name|p
init|=
operator|new
name|Paragraph
argument_list|(
name|text
operator|.
name|isEmpty
argument_list|()
condition|?
literal|" "
else|:
name|text
argument_list|,
name|iFont
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|line
operator|.
name|getAlignment
argument_list|()
condition|)
block|{
case|case
name|Center
case|:
name|p
operator|.
name|setAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_CENTER
argument_list|)
expr_stmt|;
break|break;
case|case
name|Left
case|:
name|p
operator|.
name|setAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
break|break;
case|case
name|Right
case|:
name|p
operator|.
name|setAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
break|break;
block|}
name|iDocument
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|iLineNo
operator|++
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|line
operator|==
literal|null
condition|)
return|return;
name|List
argument_list|<
name|PdfPCell
argument_list|>
name|cells
init|=
name|render
argument_list|(
name|line
argument_list|,
name|iFont
argument_list|)
decl_stmt|;
name|int
name|colspan
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|PdfPCell
argument_list|>
name|i
init|=
name|cells
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|PdfPCell
name|cell
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|colspan
operator|+=
name|cell
operator|.
name|getColspan
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|i
operator|.
name|hasNext
argument_list|()
operator|&&
name|colspan
operator|<
name|iTable
operator|.
name|getNumberOfColumns
argument_list|()
condition|)
block|{
name|cell
operator|.
name|setColspan
argument_list|(
name|iTable
operator|.
name|getNumberOfColumns
argument_list|()
operator|-
name|colspan
operator|+
name|cell
operator|.
name|getColspan
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iTable
operator|.
name|addCell
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
name|iTable
operator|.
name|completeRow
argument_list|()
expr_stmt|;
name|iLineNo
operator|++
expr_stmt|;
block|}
name|iNewPage
operator|=
literal|false
expr_stmt|;
name|iEmpty
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|iLineNo
operator|>=
name|getNrLinesPerPage
argument_list|()
condition|)
name|newPage
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
throws|,
name|DocumentException
block|{
if|if
condition|(
name|iEmpty
condition|)
block|{
name|Paragraph
name|p
init|=
operator|new
name|Paragraph
argument_list|(
literal|"Nothing to report."
argument_list|,
name|iFont
argument_list|)
decl_stmt|;
name|p
operator|.
name|setAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|iDocument
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|lastPage
argument_list|()
expr_stmt|;
name|iDocument
operator|.
name|close
argument_list|()
expr_stmt|;
name|iWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|open
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|DocumentException
throws|,
name|IOException
block|{
name|iDocument
operator|=
operator|new
name|Document
argument_list|(
name|PageSize
operator|.
name|LETTER
operator|.
name|rotate
argument_list|()
argument_list|,
literal|36
argument_list|,
literal|36
argument_list|,
literal|60
argument_list|,
literal|48
argument_list|)
expr_stmt|;
name|iWriter
operator|=
name|PdfWriter
operator|.
name|getInstance
argument_list|(
name|iDocument
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|iWriter
operator|.
name|setPageEvent
argument_list|(
operator|new
name|PdfEventHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onEndPage
parameter_list|(
name|PdfWriter
name|writer
parameter_list|,
name|Document
name|document
parameter_list|)
block|{
try|try
block|{
name|printFooter
argument_list|(
name|writer
argument_list|,
name|document
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DocumentException
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
literal|"Failed to print footer: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onStartPage
parameter_list|(
name|PdfWriter
name|writer
parameter_list|,
name|Document
name|document
parameter_list|)
block|{
try|try
block|{
name|printHeader
argument_list|(
name|writer
argument_list|,
name|document
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DocumentException
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
literal|"Failed to print header: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|iDocument
operator|.
name|addTitle
argument_list|(
name|iTitle
argument_list|)
expr_stmt|;
name|iDocument
operator|.
name|addAuthor
argument_list|(
literal|"UniTime "
operator|+
name|Constants
operator|.
name|getVersion
argument_list|()
operator|+
literal|", www.unitime.org"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSubject
operator|!=
literal|null
condition|)
name|iDocument
operator|.
name|addSubject
argument_list|(
name|iSubject
argument_list|)
expr_stmt|;
name|iDocument
operator|.
name|addCreator
argument_list|(
literal|"UniTime "
operator|+
name|Constants
operator|.
name|getVersion
argument_list|()
operator|+
literal|", www.unitime.org"
argument_list|)
expr_stmt|;
name|iDocument
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|printFooter
parameter_list|(
name|PdfWriter
name|writer
parameter_list|,
name|Document
name|document
parameter_list|)
throws|throws
name|DocumentException
block|{
name|PdfContentByte
name|cb
init|=
name|writer
operator|.
name|getDirectContent
argument_list|()
decl_stmt|;
name|cb
operator|.
name|beginText
argument_list|()
expr_stmt|;
name|cb
operator|.
name|setFontAndSize
argument_list|(
name|iFont
operator|.
name|getBaseFont
argument_list|()
argument_list|,
name|iFont
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|cb
operator|.
name|showTextAligned
argument_list|(
name|PdfContentByte
operator|.
name|ALIGN_LEFT
argument_list|,
operator|(
name|iFooter
operator|==
literal|null
condition|?
literal|""
else|:
name|iFooter
operator|)
argument_list|,
name|document
operator|.
name|left
argument_list|()
argument_list|,
name|document
operator|.
name|bottom
argument_list|()
operator|-
literal|12
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cb
operator|.
name|showTextAligned
argument_list|(
name|PdfContentByte
operator|.
name|ALIGN_RIGHT
argument_list|,
operator|(
name|iPageId
operator|==
literal|null
operator|||
name|iPageId
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
name|iPageId
operator|)
argument_list|,
name|document
operator|.
name|right
argument_list|()
argument_list|,
name|document
operator|.
name|bottom
argument_list|()
operator|-
literal|12
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cb
operator|.
name|showTextAligned
argument_list|(
name|PdfContentByte
operator|.
name|ALIGN_CENTER
argument_list|,
literal|"Page "
operator|+
operator|(
name|iPageNo
operator|+
literal|1
operator|)
argument_list|,
operator|(
name|document
operator|.
name|left
argument_list|()
operator|+
name|document
operator|.
name|right
argument_list|()
operator|)
operator|/
literal|2
argument_list|,
name|document
operator|.
name|bottom
argument_list|()
operator|-
literal|12
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cb
operator|.
name|endText
argument_list|()
expr_stmt|;
name|iPageNo
operator|++
expr_stmt|;
block|}
specifier|protected
name|void
name|printHeader
parameter_list|(
name|PdfWriter
name|writer
parameter_list|,
name|Document
name|document
parameter_list|)
throws|throws
name|DocumentException
block|{
name|PdfContentByte
name|cb
init|=
name|writer
operator|.
name|getDirectContent
argument_list|()
decl_stmt|;
if|if
condition|(
name|iCont
operator|!=
literal|null
operator|&&
operator|!
name|iCont
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|cb
operator|.
name|beginText
argument_list|()
expr_stmt|;
name|cb
operator|.
name|setFontAndSize
argument_list|(
name|iFont
operator|.
name|getBaseFont
argument_list|()
argument_list|,
name|iFont
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|cb
operator|.
name|showTextAligned
argument_list|(
name|PdfContentByte
operator|.
name|ALIGN_LEFT
argument_list|,
literal|"UniTime "
operator|+
name|Constants
operator|.
name|getVersion
argument_list|()
argument_list|,
name|document
operator|.
name|left
argument_list|()
argument_list|,
name|document
operator|.
name|top
argument_list|()
operator|+
literal|24
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cb
operator|.
name|showTextAligned
argument_list|(
name|PdfContentByte
operator|.
name|ALIGN_RIGHT
argument_list|,
name|iTitle
argument_list|,
name|document
operator|.
name|right
argument_list|()
argument_list|,
name|document
operator|.
name|top
argument_list|()
operator|+
literal|24
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cb
operator|.
name|showTextAligned
argument_list|(
name|PdfContentByte
operator|.
name|ALIGN_CENTER
argument_list|,
name|iTitle2
argument_list|,
operator|(
name|document
operator|.
name|left
argument_list|()
operator|+
name|document
operator|.
name|right
argument_list|()
operator|)
operator|/
literal|2
argument_list|,
name|document
operator|.
name|top
argument_list|()
operator|+
literal|24
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cb
operator|.
name|showTextAligned
argument_list|(
name|PdfContentByte
operator|.
name|ALIGN_LEFT
argument_list|,
operator|new
name|SimpleDateFormat
argument_list|(
literal|"EEE MMM dd, yyyy"
argument_list|)
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|,
name|document
operator|.
name|left
argument_list|()
argument_list|,
name|document
operator|.
name|top
argument_list|()
operator|+
literal|16
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cb
operator|.
name|showTextAligned
argument_list|(
name|PdfContentByte
operator|.
name|ALIGN_RIGHT
argument_list|,
name|iSession
argument_list|,
name|document
operator|.
name|right
argument_list|()
argument_list|,
name|document
operator|.
name|top
argument_list|()
operator|+
literal|16
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cb
operator|.
name|showTextAligned
argument_list|(
name|PdfContentByte
operator|.
name|ALIGN_RIGHT
argument_list|,
literal|"("
operator|+
name|iCont
operator|+
literal|" Continued)"
argument_list|,
name|document
operator|.
name|right
argument_list|()
argument_list|,
name|document
operator|.
name|top
argument_list|()
operator|+
literal|4
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cb
operator|.
name|endText
argument_list|()
expr_stmt|;
name|cb
operator|.
name|setColorStroke
argument_list|(
name|Color
operator|.
name|BLACK
argument_list|)
expr_stmt|;
name|cb
operator|.
name|moveTo
argument_list|(
name|document
operator|.
name|left
argument_list|()
argument_list|,
name|document
operator|.
name|top
argument_list|()
operator|+
literal|12
argument_list|)
expr_stmt|;
name|cb
operator|.
name|lineTo
argument_list|(
name|document
operator|.
name|right
argument_list|()
argument_list|,
name|document
operator|.
name|top
argument_list|()
operator|+
literal|12
argument_list|)
expr_stmt|;
name|cb
operator|.
name|closePathStroke
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|cb
operator|.
name|beginText
argument_list|()
expr_stmt|;
name|cb
operator|.
name|setFontAndSize
argument_list|(
name|iFont
operator|.
name|getBaseFont
argument_list|()
argument_list|,
name|iFont
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|cb
operator|.
name|showTextAligned
argument_list|(
name|PdfContentByte
operator|.
name|ALIGN_LEFT
argument_list|,
literal|"UniTime "
operator|+
name|Constants
operator|.
name|getVersion
argument_list|()
argument_list|,
name|document
operator|.
name|left
argument_list|()
argument_list|,
name|document
operator|.
name|top
argument_list|()
operator|+
literal|14
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cb
operator|.
name|showTextAligned
argument_list|(
name|PdfContentByte
operator|.
name|ALIGN_RIGHT
argument_list|,
name|iTitle
argument_list|,
name|document
operator|.
name|right
argument_list|()
argument_list|,
name|document
operator|.
name|top
argument_list|()
operator|+
literal|14
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cb
operator|.
name|showTextAligned
argument_list|(
name|PdfContentByte
operator|.
name|ALIGN_CENTER
argument_list|,
name|iTitle2
argument_list|,
operator|(
name|document
operator|.
name|left
argument_list|()
operator|+
name|document
operator|.
name|right
argument_list|()
operator|)
operator|/
literal|2
argument_list|,
name|document
operator|.
name|top
argument_list|()
operator|+
literal|14
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cb
operator|.
name|showTextAligned
argument_list|(
name|PdfContentByte
operator|.
name|ALIGN_LEFT
argument_list|,
operator|new
name|SimpleDateFormat
argument_list|(
literal|"EEE MMM dd, yyyy"
argument_list|)
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|,
name|document
operator|.
name|left
argument_list|()
argument_list|,
name|document
operator|.
name|top
argument_list|()
operator|+
literal|4
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cb
operator|.
name|showTextAligned
argument_list|(
name|PdfContentByte
operator|.
name|ALIGN_RIGHT
argument_list|,
name|iSession
argument_list|,
name|document
operator|.
name|right
argument_list|()
argument_list|,
name|document
operator|.
name|top
argument_list|()
operator|+
literal|4
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cb
operator|.
name|endText
argument_list|()
expr_stmt|;
name|cb
operator|.
name|setColorStroke
argument_list|(
name|Color
operator|.
name|BLACK
argument_list|)
expr_stmt|;
name|cb
operator|.
name|moveTo
argument_list|(
name|document
operator|.
name|left
argument_list|()
argument_list|,
name|document
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
name|cb
operator|.
name|lineTo
argument_list|(
name|document
operator|.
name|right
argument_list|()
argument_list|,
name|document
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
name|cb
operator|.
name|closePathStroke
argument_list|()
expr_stmt|;
block|}
name|iLineNo
operator|=
literal|0
expr_stmt|;
name|iNewPage
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|iListener
operator|!=
literal|null
condition|)
name|iListener
operator|.
name|headerPrinted
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setPageName
parameter_list|(
name|String
name|pageName
parameter_list|)
block|{
name|iPageId
operator|=
name|pageName
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setCont
parameter_list|(
name|String
name|cont
parameter_list|)
block|{
name|iCont
operator|=
name|cont
expr_stmt|;
block|}
specifier|protected
name|void
name|computeColumnWidths
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|List
argument_list|<
name|Float
argument_list|>
name|widths
parameter_list|)
block|{
if|if
condition|(
name|cell
operator|.
name|getColSpan
argument_list|()
operator|==
literal|0
condition|)
return|return;
name|float
name|width
init|=
name|cell
operator|.
name|getLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|width
operator|==
literal|0f
condition|)
name|width
operator|=
literal|1f
expr_stmt|;
name|widths
operator|.
name|add
argument_list|(
name|width
operator|/
name|cell
operator|.
name|getColSpan
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|computeColumnWidths
parameter_list|(
name|Line
name|line
parameter_list|,
name|List
argument_list|<
name|Float
argument_list|>
name|widths
parameter_list|)
block|{
if|if
condition|(
name|line
operator|.
name|getCells
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|length
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Cell
name|c
range|:
name|line
operator|.
name|getCells
argument_list|()
control|)
block|{
name|length
operator|+=
name|c
operator|.
name|getLength
argument_list|()
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getColSpan
argument_list|()
operator|==
literal|0
condition|)
continue|continue;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|c
operator|.
name|getColSpan
argument_list|()
condition|;
name|i
operator|++
control|)
name|widths
operator|.
name|add
argument_list|(
literal|1f
operator|+
operator|(
operator|(
name|length
operator|==
literal|0
condition|?
literal|1f
else|:
operator|(
name|float
operator|)
name|length
operator|)
operator|/
name|c
operator|.
name|getColSpan
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|length
operator|=
literal|0
expr_stmt|;
block|}
block|}
if|if
condition|(
name|line
operator|.
name|getLines
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|line
operator|.
name|getLines
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|computeColumnWidths
argument_list|(
name|line
operator|.
name|getLines
argument_list|()
index|[
name|i
index|]
argument_list|,
name|widths
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|float
index|[]
name|getColumnWidth
parameter_list|(
name|Line
name|line
parameter_list|)
block|{
name|List
argument_list|<
name|Float
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|Float
argument_list|>
argument_list|()
decl_stmt|;
name|computeColumnWidths
argument_list|(
name|iHeaderLine
index|[
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|iHeaderLine
operator|.
name|length
operator|-
literal|2
argument_list|)
index|]
argument_list|,
name|cols
argument_list|)
expr_stmt|;
name|float
index|[]
name|ret
init|=
operator|new
name|float
index|[
name|cols
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cols
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|ret
index|[
name|i
index|]
operator|=
name|cols
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|printHeader
parameter_list|(
name|boolean
name|newPage
parameter_list|)
throws|throws
name|DocumentException
block|{
name|finishCurrentTable
argument_list|()
expr_stmt|;
name|createNewTable
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|finishCurrentTable
parameter_list|()
throws|throws
name|DocumentException
block|{
if|if
condition|(
name|iTable
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|iTable
operator|.
name|getRows
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|PdfPRow
name|row
init|=
name|iTable
operator|.
name|getRow
argument_list|(
name|iTable
operator|.
name|getRows
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|PdfPCell
name|c
range|:
name|row
operator|.
name|getCells
argument_list|()
control|)
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
name|c
operator|.
name|setBorder
argument_list|(
name|c
operator|.
name|getBorder
argument_list|()
operator||
name|PdfPCell
operator|.
name|BOTTOM
argument_list|)
expr_stmt|;
block|}
name|iDocument
operator|.
name|add
argument_list|(
name|iTable
argument_list|)
expr_stmt|;
name|iTable
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|createNewTable
parameter_list|()
throws|throws
name|DocumentException
block|{
if|if
condition|(
name|iTable
operator|!=
literal|null
condition|)
name|finishCurrentTable
argument_list|()
expr_stmt|;
if|if
condition|(
name|iHeaderLine
operator|!=
literal|null
operator|&&
name|iHeaderLine
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|iTable
operator|=
operator|new
name|PdfPTable
argument_list|(
name|getColumnWidth
argument_list|(
name|iHeaderLine
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getDefaultCell
argument_list|()
operator|.
name|setBorder
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|setWidthPercentage
argument_list|(
literal|100f
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|setSpacingBefore
argument_list|(
literal|4
argument_list|)
expr_stmt|;
for|for
control|(
name|Line
name|line
range|:
name|iHeaderLine
control|)
block|{
if|if
condition|(
operator|!
name|line
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|PdfPCell
name|cell
range|:
name|render
argument_list|(
name|line
argument_list|,
name|iBoldFont
argument_list|)
control|)
block|{
name|cell
operator|.
name|setBackgroundColor
argument_list|(
name|Color
operator|.
name|LIGHT_GRAY
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|addCell
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
name|iTable
operator|.
name|completeRow
argument_list|()
expr_stmt|;
name|iLineNo
operator|++
expr_stmt|;
block|}
block|}
name|iTable
operator|.
name|setHeaderRows
argument_list|(
name|iTable
operator|.
name|getRows
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iTable
operator|.
name|getRows
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|PdfPRow
name|row
init|=
name|iTable
operator|.
name|getRow
argument_list|(
name|iTable
operator|.
name|getRows
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|PdfPCell
name|c
range|:
name|row
operator|.
name|getCells
argument_list|()
control|)
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
name|c
operator|.
name|setBorder
argument_list|(
name|c
operator|.
name|getBorder
argument_list|()
operator||
name|PdfPCell
operator|.
name|BOTTOM
argument_list|)
expr_stmt|;
name|row
operator|=
name|iTable
operator|.
name|getRow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|PdfPCell
name|c
range|:
name|row
operator|.
name|getCells
argument_list|()
control|)
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
name|c
operator|.
name|setBorder
argument_list|(
name|c
operator|.
name|getBorder
argument_list|()
operator||
name|PdfPCell
operator|.
name|TOP
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|newPage
parameter_list|()
throws|throws
name|DocumentException
block|{
if|if
condition|(
name|iTable
operator|!=
literal|null
condition|)
name|finishCurrentTable
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|iNewPage
condition|)
block|{
name|iDocument
operator|.
name|newPage
argument_list|()
expr_stmt|;
block|}
name|createNewTable
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|lastPage
parameter_list|()
throws|throws
name|DocumentException
block|{
name|finishCurrentTable
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getLineNumber
parameter_list|()
block|{
return|return
name|iLineNo
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getNrLinesPerPage
parameter_list|()
block|{
return|return
operator|(
name|int
operator|)
operator|(
operator|(
name|iDocument
operator|.
name|top
argument_list|()
operator|-
name|iDocument
operator|.
name|bottom
argument_list|()
operator|)
operator|/
operator|(
literal|1.5
operator|*
name|iFont
operator|.
name|getSize
argument_list|()
operator|)
operator|)
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getNrCharsPerLine
parameter_list|()
block|{
return|return
literal|1000
return|;
block|}
specifier|private
name|String
name|render
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
name|StringBuffer
name|ret
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|cell
operator|.
name|getText
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cell
operator|.
name|getPadding
argument_list|()
operator|!=
literal|' '
operator|&&
name|cell
operator|.
name|getText
argument_list|()
operator|.
name|length
argument_list|()
operator|<
name|cell
operator|.
name|getLength
argument_list|()
condition|)
name|ret
operator|.
name|append
argument_list|(
name|cell
operator|.
name|render
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|ret
operator|.
name|append
argument_list|(
name|cell
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cell
operator|.
name|getCells
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cell
operator|.
name|getText
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cell
operator|.
name|getCellSeparator
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|ret
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
else|else
name|ret
operator|.
name|append
argument_list|(
name|cell
operator|.
name|getCellSeparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cell
operator|.
name|getCells
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|cell
operator|.
name|getCells
argument_list|()
index|[
name|i
operator|-
literal|1
index|]
operator|.
name|getCellSeparator
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|ret
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
else|else
name|ret
operator|.
name|append
argument_list|(
name|cell
operator|.
name|getCells
argument_list|()
index|[
name|i
operator|-
literal|1
index|]
operator|.
name|getCellSeparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|append
argument_list|(
name|render
argument_list|(
name|cell
operator|.
name|getCells
argument_list|()
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|List
argument_list|<
name|PdfPCell
argument_list|>
name|render
parameter_list|(
name|Line
name|line
parameter_list|,
name|Font
name|font
parameter_list|)
block|{
if|if
condition|(
name|line
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|line
operator|.
name|getLines
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|PdfPCell
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|PdfPCell
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|line
operator|.
name|getLines
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ret
operator|.
name|addAll
argument_list|(
name|render
argument_list|(
name|line
operator|.
name|getLines
argument_list|()
index|[
name|i
index|]
argument_list|,
name|font
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
if|if
condition|(
name|line
operator|.
name|getCells
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|PdfPCell
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|PdfPCell
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|leftOver
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|line
operator|.
name|getCells
argument_list|()
control|)
block|{
if|if
condition|(
name|cell
operator|.
name|getColSpan
argument_list|()
operator|==
literal|0
condition|)
block|{
name|leftOver
operator|=
operator|(
operator|(
name|leftOver
operator|==
literal|null
operator|||
name|leftOver
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
name|leftOver
operator|+
literal|" "
operator|)
operator|+
name|render
argument_list|(
name|cell
argument_list|)
operator|)
operator|.
name|trim
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|PdfPCell
name|c
init|=
operator|new
name|PdfPCell
argument_list|()
decl_stmt|;
name|c
operator|.
name|setVerticalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_TOP
argument_list|)
expr_stmt|;
name|Paragraph
name|ch
init|=
operator|new
name|Paragraph
argument_list|(
operator|(
name|leftOver
operator|==
literal|null
operator|||
name|leftOver
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
name|leftOver
operator|+
literal|" "
operator|)
operator|+
name|render
argument_list|(
name|cell
argument_list|)
argument_list|,
name|font
argument_list|)
decl_stmt|;
if|if
condition|(
name|cell
operator|.
name|getAlignment
argument_list|()
operator|!=
literal|null
condition|)
switch|switch
condition|(
name|cell
operator|.
name|getAlignment
argument_list|()
condition|)
block|{
case|case
name|Center
case|:
name|ch
operator|.
name|setAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_CENTER
argument_list|)
expr_stmt|;
break|break;
case|case
name|Left
case|:
name|ch
operator|.
name|setAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
break|break;
case|case
name|Right
case|:
name|ch
operator|.
name|setAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
name|c
operator|.
name|setPaddingRight
argument_list|(
literal|5f
argument_list|)
expr_stmt|;
break|break;
block|}
name|c
operator|.
name|setFixedHeight
argument_list|(
name|iFont
operator|.
name|getSize
argument_list|()
operator|*
literal|1.5f
argument_list|)
expr_stmt|;
name|ch
operator|.
name|setLeading
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|c
operator|.
name|addElement
argument_list|(
name|ch
argument_list|)
expr_stmt|;
name|c
operator|.
name|setBorder
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|c
operator|.
name|setColspan
argument_list|(
name|cell
operator|.
name|getColSpan
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cell
operator|.
name|getCellSeparator
argument_list|()
operator|!=
literal|null
operator|&&
name|cell
operator|.
name|getCellSeparator
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|"|"
argument_list|)
condition|)
name|c
operator|.
name|setBorder
argument_list|(
name|PdfPCell
operator|.
name|RIGHT
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|leftOver
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|ret
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|PdfPCell
name|c
init|=
operator|new
name|PdfPCell
argument_list|()
decl_stmt|;
name|c
operator|.
name|setVerticalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_TOP
argument_list|)
expr_stmt|;
name|c
operator|.
name|setBorder
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|c
operator|.
name|setColspan
argument_list|(
name|iTable
operator|.
name|getNumberOfColumns
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setFixedHeight
argument_list|(
name|iFont
operator|.
name|getSize
argument_list|()
operator|*
literal|1.5f
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ret
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ret
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|setBorder
argument_list|(
name|ret
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBorder
argument_list|()
operator||
name|PdfPCell
operator|.
name|LEFT
argument_list|)
expr_stmt|;
name|ret
operator|.
name|get
argument_list|(
name|ret
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|setBorder
argument_list|(
name|ret
operator|.
name|get
argument_list|(
name|ret
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getBorder
argument_list|()
operator||
name|PdfPCell
operator|.
name|RIGHT
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|printSeparator
parameter_list|(
name|Line
name|line
parameter_list|)
throws|throws
name|DocumentException
block|{
if|if
condition|(
name|iTable
operator|!=
literal|null
operator|&&
operator|!
name|iTable
operator|.
name|getRows
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|PdfPRow
name|row
init|=
name|iTable
operator|.
name|getRow
argument_list|(
name|iTable
operator|.
name|getRows
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|PdfPCell
name|c
range|:
name|row
operator|.
name|getCells
argument_list|()
control|)
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
name|c
operator|.
name|setBorder
argument_list|(
name|c
operator|.
name|getBorder
argument_list|()
operator||
name|PdfPCell
operator|.
name|BOTTOM
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|getSeparatorNrLines
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setListener
parameter_list|(
name|Listener
name|listener
parameter_list|)
block|{
name|iListener
operator|=
name|listener
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSkipRepeating
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

