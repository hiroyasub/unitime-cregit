begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|reports
operator|.
name|exam
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|PropertyConfigurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
operator|.
name|HibernateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StudentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignmentInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamRoomInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignmentInfo
operator|.
name|BackToBackConflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignmentInfo
operator|.
name|DirectConflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignmentInfo
operator|.
name|MoreThanTwoADayConflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamInfo
operator|.
name|ExamInstructorInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamInfo
operator|.
name|ExamSectionInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|DocumentException
import|;
end_import

begin_class
specifier|public
class|class
name|InstructorExamReport
extends|extends
name|PdfLegacyExamReport
block|{
specifier|protected
specifier|static
name|Logger
name|sLog
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|InstructorExamReport
operator|.
name|class
argument_list|)
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|iStudentNames
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
specifier|public
name|InstructorExamReport
parameter_list|(
name|int
name|mode
parameter_list|,
name|File
name|file
parameter_list|,
name|Session
name|session
parameter_list|,
name|int
name|examType
parameter_list|,
name|SubjectArea
name|subjectArea
parameter_list|,
name|Collection
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
parameter_list|)
throws|throws
name|IOException
throws|,
name|DocumentException
block|{
name|super
argument_list|(
name|mode
argument_list|,
name|file
argument_list|,
literal|"INSTRUCTOR EXAMINATION SCHEDULE"
argument_list|,
name|session
argument_list|,
name|examType
argument_list|,
name|subjectArea
argument_list|,
name|exams
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"  Loading students ..."
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|StudentDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select s.uniqueId, s.externalUniqueId, s.lastName, s.firstName, s.middleName from Student s where s.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|iStudentNames
operator|.
name|put
argument_list|(
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
argument_list|,
operator|(
name|String
operator|)
name|o
index|[
literal|2
index|]
operator|+
operator|(
name|o
index|[
literal|3
index|]
operator|==
literal|null
condition|?
literal|""
else|:
literal|" "
operator|+
operator|(
operator|(
name|String
operator|)
name|o
index|[
literal|3
index|]
operator|)
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|)
operator|+
operator|(
name|o
index|[
literal|4
index|]
operator|==
literal|null
condition|?
literal|""
else|:
literal|" "
operator|+
operator|(
operator|(
name|String
operator|)
name|o
index|[
literal|4
index|]
operator|)
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|printReport
parameter_list|()
throws|throws
name|DocumentException
block|{
name|Hashtable
argument_list|<
name|ExamInstructorInfo
argument_list|,
name|TreeSet
argument_list|<
name|ExamAssignmentInfo
argument_list|>
argument_list|>
name|exams
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|getExams
argument_list|()
control|)
block|{
for|for
control|(
name|ExamInstructorInfo
name|instructor
range|:
name|exam
operator|.
name|getInstructors
argument_list|()
control|)
block|{
name|TreeSet
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|examsThisInstructor
init|=
name|exams
operator|.
name|get
argument_list|(
name|instructor
argument_list|)
decl_stmt|;
if|if
condition|(
name|examsThisInstructor
operator|==
literal|null
condition|)
block|{
name|examsThisInstructor
operator|=
operator|new
name|TreeSet
argument_list|<
name|ExamAssignmentInfo
argument_list|>
argument_list|()
expr_stmt|;
name|exams
operator|.
name|put
argument_list|(
name|instructor
argument_list|,
name|examsThisInstructor
argument_list|)
expr_stmt|;
block|}
name|examsThisInstructor
operator|.
name|add
argument_list|(
name|exam
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|firstInstructor
init|=
literal|true
decl_stmt|;
name|printHeader
argument_list|()
expr_stmt|;
for|for
control|(
name|ExamInstructorInfo
name|instructor
range|:
operator|new
name|TreeSet
argument_list|<
name|ExamInstructorInfo
argument_list|>
argument_list|(
name|exams
operator|.
name|keySet
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|firstInstructor
condition|)
name|newPage
argument_list|()
expr_stmt|;
name|printReport
argument_list|(
name|instructor
argument_list|,
name|exams
operator|.
name|get
argument_list|(
name|instructor
argument_list|)
argument_list|)
expr_stmt|;
name|firstInstructor
operator|=
literal|false
expr_stmt|;
block|}
name|lastPage
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Hashtable
argument_list|<
name|ExamInstructorInfo
argument_list|,
name|File
argument_list|>
name|printInstructorReports
parameter_list|(
name|int
name|mode
parameter_list|,
name|String
name|filePrefix
parameter_list|,
name|Date
name|since
parameter_list|,
name|FileGenerator
name|gen
parameter_list|)
throws|throws
name|DocumentException
throws|,
name|IOException
block|{
name|Hashtable
argument_list|<
name|ExamInstructorInfo
argument_list|,
name|File
argument_list|>
name|files
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|ExamInstructorInfo
argument_list|,
name|TreeSet
argument_list|<
name|ExamAssignmentInfo
argument_list|>
argument_list|>
name|exams
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|getExams
argument_list|()
control|)
block|{
for|for
control|(
name|ExamInstructorInfo
name|instructor
range|:
name|exam
operator|.
name|getInstructors
argument_list|()
control|)
block|{
name|TreeSet
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|examsThisInstructor
init|=
name|exams
operator|.
name|get
argument_list|(
name|instructor
argument_list|)
decl_stmt|;
if|if
condition|(
name|examsThisInstructor
operator|==
literal|null
condition|)
block|{
name|examsThisInstructor
operator|=
operator|new
name|TreeSet
argument_list|<
name|ExamAssignmentInfo
argument_list|>
argument_list|()
expr_stmt|;
name|exams
operator|.
name|put
argument_list|(
name|instructor
argument_list|,
name|examsThisInstructor
argument_list|)
expr_stmt|;
block|}
name|examsThisInstructor
operator|.
name|add
argument_list|(
name|exam
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|ExamInstructorInfo
name|instructor
range|:
operator|new
name|TreeSet
argument_list|<
name|ExamInstructorInfo
argument_list|>
argument_list|(
name|exams
operator|.
name|keySet
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|since
operator|!=
literal|null
condition|)
block|{
name|ChangeLog
name|last
init|=
name|getLastChange
argument_list|(
name|instructor
argument_list|,
name|exams
operator|.
name|get
argument_list|(
name|instructor
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|last
operator|==
literal|null
operator|||
name|since
operator|.
name|compareTo
argument_list|(
name|last
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
operator|>
literal|0
condition|)
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"No change found for "
operator|+
name|instructor
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
name|sLog
operator|.
name|debug
argument_list|(
literal|"Generating file for "
operator|+
name|instructor
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|gen
operator|.
name|generate
argument_list|(
name|filePrefix
operator|+
literal|"_"
operator|+
operator|(
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|?
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
else|:
name|instructor
operator|.
name|getInstructor
argument_list|()
operator|.
name|getLastName
argument_list|()
operator|)
argument_list|,
operator|(
name|mode
operator|==
name|sModeText
condition|?
literal|"txt"
else|:
literal|"pdf"
operator|)
argument_list|)
decl_stmt|;
comment|//ApplicationProperties.getTempFile(filePrefix+"_"+(instructor.getExternalUniqueId()!=null?instructor.getExternalUniqueId():instructor.getInstructor().getLastName()), (mode==sModeText?"txt":"pdf"));
name|open
argument_list|(
name|file
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|printHeader
argument_list|()
expr_stmt|;
name|printReport
argument_list|(
name|instructor
argument_list|,
name|exams
operator|.
name|get
argument_list|(
name|instructor
argument_list|)
argument_list|)
expr_stmt|;
name|lastPage
argument_list|()
expr_stmt|;
name|close
argument_list|()
expr_stmt|;
name|files
operator|.
name|put
argument_list|(
name|instructor
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
return|return
name|files
return|;
block|}
specifier|public
name|void
name|printReport
parameter_list|(
name|ExamInstructorInfo
name|instructor
parameter_list|)
throws|throws
name|DocumentException
block|{
name|TreeSet
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|getExams
argument_list|()
control|)
block|{
if|if
condition|(
name|exam
operator|.
name|getInstructors
argument_list|()
operator|.
name|contains
argument_list|(
name|instructor
argument_list|)
condition|)
empty_stmt|;
block|}
if|if
condition|(
name|exams
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|printHeader
argument_list|()
expr_stmt|;
name|printReport
argument_list|(
name|instructor
argument_list|,
name|exams
argument_list|)
expr_stmt|;
name|lastPage
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ChangeLog
name|getLastChange
parameter_list|(
name|ExamInstructorInfo
name|instructor
parameter_list|,
name|TreeSet
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
parameter_list|)
block|{
name|ChangeLog
name|lastChange
init|=
name|ChangeLog
operator|.
name|findLastChange
argument_list|(
name|instructor
operator|.
name|getInstructor
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|exams
control|)
block|{
name|ChangeLog
name|c
init|=
name|ChangeLog
operator|.
name|findLastChange
argument_list|(
name|exam
operator|.
name|getExam
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
operator|&&
operator|(
name|lastChange
operator|==
literal|null
operator|||
name|lastChange
operator|.
name|getTimeStamp
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
operator|<
literal|0
operator|)
condition|)
block|{
name|lastChange
operator|=
name|c
expr_stmt|;
block|}
block|}
return|return
name|lastChange
return|;
block|}
specifier|public
name|void
name|printReport
parameter_list|(
name|ExamInstructorInfo
name|instructor
parameter_list|,
name|TreeSet
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
parameter_list|)
throws|throws
name|DocumentException
block|{
name|TreeSet
argument_list|<
name|ExamSectionInfo
argument_list|>
name|sections
init|=
operator|new
name|TreeSet
argument_list|<
name|ExamSectionInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|exams
control|)
name|sections
operator|.
name|addAll
argument_list|(
name|exam
operator|.
name|getSections
argument_list|()
argument_list|)
expr_stmt|;
name|setFooter
argument_list|(
name|instructor
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|//+" ("+instructor.getInstructor().getExternalUniqueId()+")");
name|setCont
argument_list|(
name|instructor
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|println
argument_list|(
literal|"Instructor:  "
operator|+
name|instructor
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getInstructor
argument_list|()
operator|.
name|getEmail
argument_list|()
operator|!=
literal|null
condition|)
name|println
argument_list|(
literal|"Email:       "
operator|+
name|instructor
operator|.
name|getInstructor
argument_list|()
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
name|Date
name|lastChange
init|=
literal|null
decl_stmt|;
name|String
name|changeObject
init|=
literal|null
decl_stmt|;
name|ChangeLog
name|c
init|=
name|ChangeLog
operator|.
name|findLastChange
argument_list|(
name|instructor
operator|.
name|getInstructor
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
operator|&&
operator|(
name|lastChange
operator|==
literal|null
operator|||
name|lastChange
operator|.
name|compareTo
argument_list|(
name|c
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
operator|<
literal|0
operator|)
condition|)
block|{
name|lastChange
operator|=
name|c
operator|.
name|getTimeStamp
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|exams
control|)
block|{
name|c
operator|=
name|ChangeLog
operator|.
name|findLastChange
argument_list|(
name|exam
operator|.
name|getExam
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
operator|&&
operator|(
name|lastChange
operator|==
literal|null
operator|||
name|lastChange
operator|.
name|compareTo
argument_list|(
name|c
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
operator|<
literal|0
operator|)
condition|)
block|{
name|lastChange
operator|=
name|c
operator|.
name|getTimeStamp
argument_list|()
expr_stmt|;
name|changeObject
operator|=
name|c
operator|.
name|getObjectTitle
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"&rarr;"
argument_list|,
literal|"->"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|lastChange
operator|!=
literal|null
condition|)
name|println
argument_list|(
literal|"Last Change: "
operator|+
operator|new
name|SimpleDateFormat
argument_list|(
literal|"EEE, MM/dd/yyyy hh:mmaa"
argument_list|)
operator|.
name|format
argument_list|(
name|lastChange
argument_list|)
operator|+
operator|(
name|changeObject
operator|==
literal|null
condition|?
literal|""
else|:
literal|" "
operator|+
name|changeObject
operator|)
argument_list|)
expr_stmt|;
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|setHeader
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"Subj Crsnbr "
operator|+
operator|(
name|iItype
condition|?
literal|"InsTyp "
else|:
literal|""
operator|)
operator|+
literal|"Sect   Meeting Times                         Enrl    Date And Time                   Room         Cap ExCap"
block|,
literal|"---- ------ "
operator|+
operator|(
name|iItype
condition|?
literal|"------ "
else|:
literal|""
operator|)
operator|+
literal|"---- -------------------------------------- -----  -------------------------------- ----------- ----- -----"
block|}
argument_list|)
expr_stmt|;
name|println
argument_list|(
name|mpad
argument_list|(
literal|"~ ~ ~ ~ ~ EXAMINATION SECHEDULE ~ ~ ~ ~ ~"
argument_list|,
name|iNrChars
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getHeader
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|println
argument_list|(
name|getHeader
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|iSubjectPrinted
operator|=
literal|false
expr_stmt|;
name|String
name|lastSubject
init|=
literal|null
decl_stmt|;
name|iCoursePrinted
operator|=
literal|false
expr_stmt|;
name|String
name|lastCourse
init|=
literal|null
decl_stmt|;
name|iITypePrinted
operator|=
literal|false
expr_stmt|;
name|String
name|lastItype
init|=
literal|null
decl_stmt|;
name|iPeriodPrinted
operator|=
literal|false
expr_stmt|;
name|String
name|lastSection
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|exams
control|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|ExamSectionInfo
argument_list|>
name|j
init|=
name|exam
operator|.
name|getSections
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamSectionInfo
name|section
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|iSubjectPrinted
operator|&&
operator|!
name|section
operator|.
name|getSubject
argument_list|()
operator|.
name|equals
argument_list|(
name|lastSubject
argument_list|)
condition|)
block|{
name|iSubjectPrinted
operator|=
literal|false
expr_stmt|;
name|iCoursePrinted
operator|=
literal|false
expr_stmt|;
name|iITypePrinted
operator|=
literal|false
expr_stmt|;
name|iPeriodPrinted
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|iCoursePrinted
operator|&&
operator|!
name|section
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|equals
argument_list|(
name|lastCourse
argument_list|)
condition|)
block|{
name|iCoursePrinted
operator|=
literal|false
expr_stmt|;
name|iITypePrinted
operator|=
literal|false
expr_stmt|;
name|iPeriodPrinted
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|iITypePrinted
operator|&&
operator|!
name|section
operator|.
name|getItype
argument_list|()
operator|.
name|equals
argument_list|(
name|lastItype
argument_list|)
condition|)
block|{
name|iITypePrinted
operator|=
literal|false
expr_stmt|;
name|iPeriodPrinted
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|iPeriodPrinted
operator|&&
operator|!
name|section
operator|.
name|getSection
argument_list|()
operator|.
name|equals
argument_list|(
name|lastSection
argument_list|)
condition|)
block|{
name|iPeriodPrinted
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|section
operator|.
name|getExamAssignment
argument_list|()
operator|.
name|getRooms
argument_list|()
operator|==
literal|null
operator|||
name|section
operator|.
name|getExamAssignment
argument_list|()
operator|.
name|getRooms
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|println
argument_list|(
name|rpad
argument_list|(
name|iSubjectPrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getSubject
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|iItype
condition|?
name|rpad
argument_list|(
name|iITypePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getItype
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|lpad
argument_list|(
name|iPeriodPrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getSection
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|getMeetingTime
argument_list|(
name|section
argument_list|)
argument_list|,
literal|38
argument_list|)
operator|+
literal|" "
operator|+
name|lpad
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|section
operator|.
name|getNrStudents
argument_list|()
argument_list|)
argument_list|,
literal|5
argument_list|)
operator|+
literal|"  "
operator|+
name|rpad
argument_list|(
operator|(
name|section
operator|.
name|getExamAssignment
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|section
operator|.
name|getExamAssignment
argument_list|()
operator|.
name|getPeriodNameFixedLength
argument_list|()
operator|)
argument_list|,
literal|32
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|section
operator|.
name|getExamAssignment
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|iNoRoom
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|getLineNumber
argument_list|()
operator|+
name|section
operator|.
name|getExamAssignment
argument_list|()
operator|.
name|getRooms
argument_list|()
operator|.
name|size
argument_list|()
operator|>
name|iNrLines
condition|)
name|newPage
argument_list|()
expr_stmt|;
name|boolean
name|firstRoom
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ExamRoomInfo
name|room
range|:
name|section
operator|.
name|getExamAssignment
argument_list|()
operator|.
name|getRooms
argument_list|()
control|)
block|{
name|println
argument_list|(
name|rpad
argument_list|(
operator|!
name|firstRoom
operator|||
name|iSubjectPrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getSubject
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
operator|!
name|firstRoom
operator|||
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|iItype
condition|?
name|rpad
argument_list|(
operator|!
name|firstRoom
operator|||
name|iITypePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getItype
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|lpad
argument_list|(
operator|!
name|firstRoom
operator|||
name|iPeriodPrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getSection
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
operator|!
name|firstRoom
condition|?
literal|""
else|:
name|getMeetingTime
argument_list|(
name|section
argument_list|)
argument_list|,
literal|38
argument_list|)
operator|+
literal|" "
operator|+
name|lpad
argument_list|(
operator|!
name|firstRoom
condition|?
literal|""
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|section
operator|.
name|getNrStudents
argument_list|()
argument_list|)
argument_list|,
literal|5
argument_list|)
operator|+
literal|"  "
operator|+
name|rpad
argument_list|(
operator|!
name|firstRoom
condition|?
literal|""
else|:
operator|(
name|section
operator|.
name|getExamAssignment
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|section
operator|.
name|getExamAssignment
argument_list|()
operator|.
name|getPeriodNameFixedLength
argument_list|()
operator|)
argument_list|,
literal|32
argument_list|)
operator|+
literal|" "
operator|+
name|formatRoom
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|lpad
argument_list|(
literal|""
operator|+
name|room
operator|.
name|getCapacity
argument_list|()
argument_list|,
literal|5
argument_list|)
operator|+
literal|" "
operator|+
name|lpad
argument_list|(
literal|""
operator|+
name|room
operator|.
name|getExamCapacity
argument_list|()
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|firstRoom
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iNewPage
condition|)
block|{
name|iSubjectPrinted
operator|=
name|iITypePrinted
operator|=
name|iCoursePrinted
operator|=
name|iPeriodPrinted
operator|=
literal|false
expr_stmt|;
name|lastSubject
operator|=
name|lastItype
operator|=
name|lastCourse
operator|=
name|lastSection
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|iSubjectPrinted
operator|=
name|iITypePrinted
operator|=
name|iCoursePrinted
operator|=
name|iPeriodPrinted
operator|=
literal|true
expr_stmt|;
name|lastSubject
operator|=
name|section
operator|.
name|getSubject
argument_list|()
expr_stmt|;
name|lastItype
operator|=
name|section
operator|.
name|getItype
argument_list|()
expr_stmt|;
name|lastCourse
operator|=
name|section
operator|.
name|getCourseNbr
argument_list|()
expr_stmt|;
name|lastSection
operator|=
name|section
operator|.
name|getSection
argument_list|()
expr_stmt|;
block|}
block|}
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
name|boolean
name|headerPrinted
init|=
literal|false
decl_stmt|;
name|lastSubject
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|sections
control|)
block|{
name|iSubjectPrinted
operator|=
operator|(
operator|!
name|iNewPage
operator|&&
name|lastSubject
operator|!=
literal|null
operator|&&
name|lastSubject
operator|.
name|equals
argument_list|(
name|section
operator|.
name|getSubject
argument_list|()
argument_list|)
operator|)
expr_stmt|;
name|ExamAssignmentInfo
name|exam
init|=
name|section
operator|.
name|getExamAssignmentInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|exam
operator|==
literal|null
operator|||
name|exam
operator|.
name|getPeriod
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|ExamPeriod
name|period
init|=
name|exam
operator|.
name|getPeriod
argument_list|()
decl_stmt|;
name|iCoursePrinted
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|iDirect
condition|)
for|for
control|(
name|DirectConflict
name|conflict
range|:
name|exam
operator|.
name|getInstructorDirectConflicts
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|conflict
operator|.
name|getStudents
argument_list|()
operator|.
name|contains
argument_list|(
name|instructor
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|iPeriodPrinted
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ExamSectionInfo
name|other
range|:
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getInstructors
argument_list|()
operator|.
name|contains
argument_list|(
name|instructor
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|headerPrinted
condition|)
block|{
if|if
condition|(
operator|!
name|iNewPage
condition|)
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|setHeader
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|getLineNumber
argument_list|()
operator|+
literal|5
operator|>=
name|iNrLines
condition|)
name|newPage
argument_list|()
expr_stmt|;
name|setHeader
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"Subj Crsnbr "
operator|+
operator|(
name|iItype
condition|?
literal|"InsTyp "
else|:
literal|""
operator|)
operator|+
literal|"Sect Date And Time                Type   Subj Crsnbr "
operator|+
operator|(
name|iItype
condition|?
literal|"InsTyp "
else|:
literal|""
operator|)
operator|+
literal|"Sect Time                 "
block|,
literal|"---- ------ "
operator|+
operator|(
name|iItype
condition|?
literal|"------ "
else|:
literal|""
operator|)
operator|+
literal|"---- ---------------------------- ------ ---- ------ "
operator|+
operator|(
name|iItype
condition|?
literal|"------ "
else|:
literal|""
operator|)
operator|+
literal|"---- ---------------------"
block|}
argument_list|)
expr_stmt|;
name|println
argument_list|(
name|mpad
argument_list|(
literal|"~ ~ ~ ~ ~ INSTRUCTOR CONFLICTS ~ ~ ~ ~ ~"
argument_list|,
name|iNrChars
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getHeader
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|println
argument_list|(
name|getHeader
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|setCont
argument_list|(
name|instructor
operator|.
name|getName
argument_list|()
operator|+
literal|"  INSTRUCTOR CONFLICTS"
argument_list|)
expr_stmt|;
name|headerPrinted
operator|=
literal|true
expr_stmt|;
block|}
name|println
argument_list|(
name|rpad
argument_list|(
name|iSubjectPrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getSubject
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|iItype
condition|?
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getItype
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|lpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getSection
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|exam
operator|.
name|getPeriodNameFixedLength
argument_list|()
argument_list|,
literal|28
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iPeriodPrinted
condition|?
literal|""
else|:
literal|"DIRECT"
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|other
operator|.
name|getSubject
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|other
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|iItype
condition|?
name|rpad
argument_list|(
name|other
operator|.
name|getItype
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|lpad
argument_list|(
name|other
operator|.
name|getSection
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|other
operator|.
name|getExamAssignment
argument_list|()
operator|.
name|getTimeFixedLength
argument_list|()
argument_list|)
expr_stmt|;
name|iSubjectPrinted
operator|=
name|iCoursePrinted
operator|=
name|iStudentPrinted
operator|=
name|iPeriodPrinted
operator|=
operator|!
name|iNewPage
expr_stmt|;
name|lastSubject
operator|=
name|section
operator|.
name|getSubject
argument_list|()
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|conflict
operator|.
name|getOtherEventId
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|headerPrinted
condition|)
block|{
if|if
condition|(
operator|!
name|iNewPage
condition|)
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|setHeader
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|getLineNumber
argument_list|()
operator|+
literal|5
operator|>=
name|iNrLines
condition|)
name|newPage
argument_list|()
expr_stmt|;
name|setHeader
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"Subj Crsnbr "
operator|+
operator|(
name|iItype
condition|?
literal|"InsTyp "
else|:
literal|""
operator|)
operator|+
literal|"Sect Date And Time                Type   Subj Crsnbr "
operator|+
operator|(
name|iItype
condition|?
literal|"InsTyp "
else|:
literal|""
operator|)
operator|+
literal|"Sect Time                 "
block|,
literal|"---- ------ "
operator|+
operator|(
name|iItype
condition|?
literal|"------ "
else|:
literal|""
operator|)
operator|+
literal|"---- ---------------------------- ------ ---- ------ "
operator|+
operator|(
name|iItype
condition|?
literal|"------ "
else|:
literal|""
operator|)
operator|+
literal|"---- ---------------------"
block|}
argument_list|)
expr_stmt|;
name|println
argument_list|(
name|mpad
argument_list|(
literal|"~ ~ ~ ~ ~ INSTRUCTOR CONFLICTS ~ ~ ~ ~ ~"
argument_list|,
name|iNrChars
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getHeader
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|println
argument_list|(
name|getHeader
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|setCont
argument_list|(
name|instructor
operator|.
name|getName
argument_list|()
operator|+
literal|"  INSTRUCTOR CONFLICTS"
argument_list|)
expr_stmt|;
name|headerPrinted
operator|=
literal|true
expr_stmt|;
block|}
name|println
argument_list|(
name|rpad
argument_list|(
name|iSubjectPrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getSubject
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|iItype
condition|?
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getItype
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|lpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getSection
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|exam
operator|.
name|getPeriodNameFixedLength
argument_list|()
argument_list|,
literal|28
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iPeriodPrinted
condition|?
literal|""
else|:
literal|"CLASS"
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|conflict
operator|.
name|getOtherClass
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|conflict
operator|.
name|getOtherClass
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|iItype
condition|?
name|rpad
argument_list|(
name|conflict
operator|.
name|getOtherClass
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|lpad
argument_list|(
name|iUseClassSuffix
operator|&&
name|conflict
operator|.
name|getOtherClass
argument_list|()
operator|.
name|getClassSuffix
argument_list|()
operator|!=
literal|null
condition|?
name|conflict
operator|.
name|getOtherClass
argument_list|()
operator|.
name|getClassSuffix
argument_list|()
else|:
name|conflict
operator|.
name|getOtherClass
argument_list|()
operator|.
name|getSectionNumberString
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|getMeetingTime
argument_list|(
name|conflict
operator|.
name|getOtherEventTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iSubjectPrinted
operator|=
name|iCoursePrinted
operator|=
name|iStudentPrinted
operator|=
name|iPeriodPrinted
operator|=
operator|!
name|iNewPage
expr_stmt|;
name|lastSubject
operator|=
name|section
operator|.
name|getSubject
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iM2d
condition|)
for|for
control|(
name|MoreThanTwoADayConflict
name|conflict
range|:
name|exam
operator|.
name|getInstructorMoreThanTwoADaysConflicts
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|conflict
operator|.
name|getStudents
argument_list|()
operator|.
name|contains
argument_list|(
name|instructor
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|iPeriodPrinted
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|ExamAssignment
name|otherExam
range|:
name|conflict
operator|.
name|getOtherExams
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|otherExam
operator|.
name|getInstructors
argument_list|()
operator|.
name|contains
argument_list|(
name|instructor
argument_list|)
condition|)
continue|continue;
for|for
control|(
name|ExamSectionInfo
name|other
range|:
name|otherExam
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|headerPrinted
condition|)
block|{
if|if
condition|(
operator|!
name|iNewPage
condition|)
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|setHeader
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|getLineNumber
argument_list|()
operator|+
literal|5
operator|>=
name|iNrLines
condition|)
name|newPage
argument_list|()
expr_stmt|;
name|setHeader
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"Subj Crsnbr "
operator|+
operator|(
name|iItype
condition|?
literal|"InsTyp "
else|:
literal|""
operator|)
operator|+
literal|"Sect Date And Time                Type   Subj Crsnbr "
operator|+
operator|(
name|iItype
condition|?
literal|"InsTyp "
else|:
literal|""
operator|)
operator|+
literal|"Sect Time                 "
block|,
literal|"---- ------ "
operator|+
operator|(
name|iItype
condition|?
literal|"------ "
else|:
literal|""
operator|)
operator|+
literal|"---- ---------------------------- ------ ---- ------ "
operator|+
operator|(
name|iItype
condition|?
literal|"------ "
else|:
literal|""
operator|)
operator|+
literal|"---- ---------------------"
block|}
argument_list|)
expr_stmt|;
name|println
argument_list|(
name|mpad
argument_list|(
literal|"~ ~ ~ ~ ~ INSTRUCTOR CONFLICTS ~ ~ ~ ~ ~"
argument_list|,
name|iNrChars
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getHeader
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|println
argument_list|(
name|getHeader
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|setCont
argument_list|(
name|instructor
operator|.
name|getName
argument_list|()
operator|+
literal|"  INSTRUCTOR CONFLICTS"
argument_list|)
expr_stmt|;
name|headerPrinted
operator|=
literal|true
expr_stmt|;
block|}
name|println
argument_list|(
name|rpad
argument_list|(
name|iSubjectPrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getSubject
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|iItype
condition|?
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getItype
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|lpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getSection
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|exam
operator|.
name|getPeriodNameFixedLength
argument_list|()
argument_list|,
literal|28
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iPeriodPrinted
condition|?
literal|""
else|:
literal|">2-DAY"
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|other
operator|.
name|getSubject
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|other
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|iItype
condition|?
name|rpad
argument_list|(
name|other
operator|.
name|getItype
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|lpad
argument_list|(
name|other
operator|.
name|getSection
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|other
operator|.
name|getExamAssignment
argument_list|()
operator|.
name|getTimeFixedLength
argument_list|()
argument_list|)
expr_stmt|;
name|iSubjectPrinted
operator|=
name|iCoursePrinted
operator|=
name|iStudentPrinted
operator|=
name|iPeriodPrinted
operator|=
operator|!
name|iNewPage
expr_stmt|;
name|lastSubject
operator|=
name|section
operator|.
name|getSubject
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|iBtb
condition|)
for|for
control|(
name|BackToBackConflict
name|conflict
range|:
name|exam
operator|.
name|getInstructorBackToBackConflicts
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|conflict
operator|.
name|getStudents
argument_list|()
operator|.
name|contains
argument_list|(
name|instructor
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|iPeriodPrinted
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|ExamSectionInfo
name|other
range|:
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getInstructors
argument_list|()
operator|.
name|contains
argument_list|(
name|instructor
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|headerPrinted
condition|)
block|{
if|if
condition|(
operator|!
name|iNewPage
condition|)
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|setHeader
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|getLineNumber
argument_list|()
operator|+
literal|5
operator|>=
name|iNrLines
condition|)
name|newPage
argument_list|()
expr_stmt|;
name|setHeader
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"Subj Crsnbr "
operator|+
operator|(
name|iItype
condition|?
literal|"InsTyp "
else|:
literal|""
operator|)
operator|+
literal|"Sect Date And Time                Type   Subj Crsnbr "
operator|+
operator|(
name|iItype
condition|?
literal|"InsTyp "
else|:
literal|""
operator|)
operator|+
literal|"Sect Time                 "
block|,
literal|"---- ------ "
operator|+
operator|(
name|iItype
condition|?
literal|"------ "
else|:
literal|""
operator|)
operator|+
literal|"---- ---------------------------- ------ ---- ------ "
operator|+
operator|(
name|iItype
condition|?
literal|"------ "
else|:
literal|""
operator|)
operator|+
literal|"---- ---------------------"
block|}
argument_list|)
expr_stmt|;
name|println
argument_list|(
name|mpad
argument_list|(
literal|"~ ~ ~ ~ ~ INSTRUCTOR CONFLICTS ~ ~ ~ ~ ~"
argument_list|,
name|iNrChars
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getHeader
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|println
argument_list|(
name|getHeader
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|setCont
argument_list|(
name|instructor
operator|.
name|getName
argument_list|()
operator|+
literal|"  INSTRUCTOR CONFLICTS"
argument_list|)
expr_stmt|;
name|headerPrinted
operator|=
literal|true
expr_stmt|;
block|}
name|println
argument_list|(
name|rpad
argument_list|(
name|iSubjectPrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getSubject
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|iItype
condition|?
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getItype
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|lpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getSection
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|exam
operator|.
name|getPeriodNameFixedLength
argument_list|()
argument_list|,
literal|28
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iPeriodPrinted
condition|?
literal|""
else|:
literal|"BTB"
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|other
operator|.
name|getSubject
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|other
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|iItype
condition|?
name|rpad
argument_list|(
name|other
operator|.
name|getItype
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|lpad
argument_list|(
name|other
operator|.
name|getSection
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|other
operator|.
name|getExamAssignment
argument_list|()
operator|.
name|getTimeFixedLength
argument_list|()
argument_list|)
expr_stmt|;
name|iSubjectPrinted
operator|=
name|iCoursePrinted
operator|=
name|iStudentPrinted
operator|=
name|iPeriodPrinted
operator|=
operator|!
name|iNewPage
expr_stmt|;
name|lastSubject
operator|=
name|section
operator|.
name|getSubject
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|headerPrinted
operator|&&
operator|!
name|iNewPage
condition|)
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iNewPage
condition|)
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|setHeader
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|getLineNumber
argument_list|()
operator|+
literal|5
operator|>=
name|iNrLines
condition|)
name|newPage
argument_list|()
expr_stmt|;
name|setHeader
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"Subj Crsnbr "
operator|+
operator|(
name|iItype
condition|?
literal|"InsTyp "
else|:
literal|""
operator|)
operator|+
literal|"Sect Date And Time                Name                      Type   Subj Crsnbr "
operator|+
operator|(
name|iItype
condition|?
literal|"InsTyp "
else|:
literal|""
operator|)
operator|+
literal|"Sect Time                 "
block|,
literal|"---- ------ "
operator|+
operator|(
name|iItype
condition|?
literal|"------ "
else|:
literal|""
operator|)
operator|+
literal|"---- ---------------------------- ------------------------- ------ ---- ------ "
operator|+
operator|(
name|iItype
condition|?
literal|"------ "
else|:
literal|""
operator|)
operator|+
literal|"---- ---------------------"
block|}
argument_list|)
expr_stmt|;
name|println
argument_list|(
name|mpad
argument_list|(
literal|"~ ~ ~ ~ ~ STUDENT CONFLICTS ~ ~ ~ ~ ~"
argument_list|,
name|iNrChars
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getHeader
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|println
argument_list|(
name|getHeader
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|setCont
argument_list|(
name|instructor
operator|.
name|getName
argument_list|()
operator|+
literal|"  STUDENT CONFLICTS"
argument_list|)
expr_stmt|;
name|lastSubject
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|sections
control|)
block|{
name|iSubjectPrinted
operator|=
operator|(
operator|!
name|iNewPage
operator|&&
name|lastSubject
operator|!=
literal|null
operator|&&
name|lastSubject
operator|.
name|equals
argument_list|(
name|section
operator|.
name|getSubject
argument_list|()
argument_list|)
operator|)
expr_stmt|;
name|ExamAssignmentInfo
name|exam
init|=
name|section
operator|.
name|getExamAssignmentInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|exam
operator|==
literal|null
operator|||
name|exam
operator|.
name|getPeriod
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|ExamPeriod
name|period
init|=
name|exam
operator|.
name|getPeriod
argument_list|()
decl_stmt|;
name|iCoursePrinted
operator|=
literal|false
expr_stmt|;
name|Vector
argument_list|<
name|Long
argument_list|>
name|students
init|=
operator|new
name|Vector
argument_list|<
name|Long
argument_list|>
argument_list|(
name|section
operator|.
name|getStudentIds
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|students
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Long
name|s1
parameter_list|,
name|Long
name|s2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|iStudentNames
operator|.
name|get
argument_list|(
name|s1
argument_list|)
operator|.
name|compareTo
argument_list|(
name|iStudentNames
operator|.
name|get
argument_list|(
name|s2
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|s1
operator|.
name|compareTo
argument_list|(
name|s2
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|Long
name|studentId
range|:
name|students
control|)
block|{
name|iStudentPrinted
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|iDirect
condition|)
for|for
control|(
name|DirectConflict
name|conflict
range|:
name|exam
operator|.
name|getDirectConflicts
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|conflict
operator|.
name|getStudents
argument_list|()
operator|.
name|contains
argument_list|(
name|studentId
argument_list|)
condition|)
continue|continue;
name|iPeriodPrinted
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ExamSectionInfo
name|other
range|:
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|other
operator|.
name|getStudentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|studentId
argument_list|)
condition|)
continue|continue;
name|println
argument_list|(
name|rpad
argument_list|(
name|iSubjectPrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getSubject
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|iItype
condition|?
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getItype
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|lpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getSection
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|exam
operator|.
name|getPeriodNameFixedLength
argument_list|()
argument_list|,
literal|28
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iStudentPrinted
condition|?
literal|""
else|:
name|iStudentNames
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
argument_list|,
literal|25
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iPeriodPrinted
condition|?
literal|""
else|:
literal|"DIRECT"
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|other
operator|.
name|getSubject
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|other
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|iItype
condition|?
name|rpad
argument_list|(
name|other
operator|.
name|getItype
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|lpad
argument_list|(
name|other
operator|.
name|getSection
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|other
operator|.
name|getExamAssignment
argument_list|()
operator|.
name|getTimeFixedLength
argument_list|()
argument_list|)
expr_stmt|;
name|iSubjectPrinted
operator|=
name|iCoursePrinted
operator|=
name|iStudentPrinted
operator|=
name|iPeriodPrinted
operator|=
operator|!
name|iNewPage
expr_stmt|;
name|lastSubject
operator|=
name|section
operator|.
name|getSubject
argument_list|()
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|conflict
operator|.
name|getOtherEventId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|println
argument_list|(
name|rpad
argument_list|(
name|iSubjectPrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getSubject
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|iItype
condition|?
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getItype
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|lpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getSection
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|exam
operator|.
name|getPeriodNameFixedLength
argument_list|()
argument_list|,
literal|28
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iStudentPrinted
condition|?
literal|""
else|:
name|iStudentNames
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
argument_list|,
literal|25
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iPeriodPrinted
condition|?
literal|""
else|:
literal|"CLASS"
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|conflict
operator|.
name|getOtherClass
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|conflict
operator|.
name|getOtherClass
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|iItype
condition|?
name|rpad
argument_list|(
name|conflict
operator|.
name|getOtherClass
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|lpad
argument_list|(
name|iUseClassSuffix
operator|&&
name|conflict
operator|.
name|getOtherClass
argument_list|()
operator|.
name|getClassSuffix
argument_list|()
operator|!=
literal|null
condition|?
name|conflict
operator|.
name|getOtherClass
argument_list|()
operator|.
name|getClassSuffix
argument_list|()
else|:
name|conflict
operator|.
name|getOtherClass
argument_list|()
operator|.
name|getSectionNumberString
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|getMeetingTime
argument_list|(
name|conflict
operator|.
name|getOtherEventTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iSubjectPrinted
operator|=
name|iCoursePrinted
operator|=
name|iStudentPrinted
operator|=
name|iPeriodPrinted
operator|=
operator|!
name|iNewPage
expr_stmt|;
name|lastSubject
operator|=
name|section
operator|.
name|getSubject
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iM2d
condition|)
for|for
control|(
name|MoreThanTwoADayConflict
name|conflict
range|:
name|exam
operator|.
name|getMoreThanTwoADaysConflicts
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|conflict
operator|.
name|getStudents
argument_list|()
operator|.
name|contains
argument_list|(
name|studentId
argument_list|)
condition|)
continue|continue;
name|iPeriodPrinted
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|ExamAssignment
name|otherExam
range|:
name|conflict
operator|.
name|getOtherExams
argument_list|()
control|)
block|{
for|for
control|(
name|ExamSectionInfo
name|other
range|:
name|otherExam
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|other
operator|.
name|getStudentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|studentId
argument_list|)
condition|)
continue|continue;
name|println
argument_list|(
name|rpad
argument_list|(
name|iSubjectPrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getSubject
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|iItype
condition|?
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getItype
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|lpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getSection
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|exam
operator|.
name|getPeriodNameFixedLength
argument_list|()
argument_list|,
literal|28
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iStudentPrinted
condition|?
literal|""
else|:
name|iStudentNames
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
argument_list|,
literal|25
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iPeriodPrinted
condition|?
literal|""
else|:
literal|">2-DAY"
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|other
operator|.
name|getSubject
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|other
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|iItype
condition|?
name|rpad
argument_list|(
name|other
operator|.
name|getItype
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|lpad
argument_list|(
name|other
operator|.
name|getSection
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|other
operator|.
name|getExamAssignment
argument_list|()
operator|.
name|getTimeFixedLength
argument_list|()
argument_list|)
expr_stmt|;
name|iSubjectPrinted
operator|=
name|iCoursePrinted
operator|=
name|iStudentPrinted
operator|=
name|iPeriodPrinted
operator|=
operator|!
name|iNewPage
expr_stmt|;
name|lastSubject
operator|=
name|section
operator|.
name|getSubject
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|iBtb
condition|)
for|for
control|(
name|BackToBackConflict
name|conflict
range|:
name|exam
operator|.
name|getBackToBackConflicts
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|conflict
operator|.
name|getStudents
argument_list|()
operator|.
name|contains
argument_list|(
name|studentId
argument_list|)
condition|)
continue|continue;
name|iPeriodPrinted
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|ExamSectionInfo
name|other
range|:
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|other
operator|.
name|getStudentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|studentId
argument_list|)
condition|)
continue|continue;
name|println
argument_list|(
name|rpad
argument_list|(
name|iSubjectPrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getSubject
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|iItype
condition|?
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getItype
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|lpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getSection
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|exam
operator|.
name|getPeriodNameFixedLength
argument_list|()
argument_list|,
literal|28
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iStudentPrinted
condition|?
literal|""
else|:
name|iStudentNames
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
argument_list|,
literal|25
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iPeriodPrinted
condition|?
literal|""
else|:
literal|"BTB"
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|other
operator|.
name|getSubject
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|other
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|iItype
condition|?
name|rpad
argument_list|(
name|other
operator|.
name|getItype
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|lpad
argument_list|(
name|other
operator|.
name|getSection
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|other
operator|.
name|getExamAssignment
argument_list|()
operator|.
name|getTimeFixedLength
argument_list|()
argument_list|)
expr_stmt|;
name|iSubjectPrinted
operator|=
name|iCoursePrinted
operator|=
name|iStudentPrinted
operator|=
name|iPeriodPrinted
operator|=
operator|!
name|iNewPage
expr_stmt|;
name|lastSubject
operator|=
name|section
operator|.
name|getSubject
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
name|setHeader
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|setCont
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.rootLogger"
argument_list|,
literal|"DEBUG, A1"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.appender.A1"
argument_list|,
literal|"org.apache.log4j.ConsoleAppender"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.appender.A1.layout"
argument_list|,
literal|"org.apache.log4j.PatternLayout"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.appender.A1.layout.ConversionPattern"
argument_list|,
literal|"%-5p %c{2}: %m%n"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.hibernate"
argument_list|,
literal|"INFO"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.hibernate.cfg"
argument_list|,
literal|"WARN"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.hibernate.cache.EhCacheProvider"
argument_list|,
literal|"ERROR"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.unitime.commons.hibernate"
argument_list|,
literal|"INFO"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.net"
argument_list|,
literal|"INFO"
argument_list|)
expr_stmt|;
name|PropertyConfigurator
operator|.
name|configure
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|HibernateUtil
operator|.
name|configureHibernate
argument_list|(
name|ApplicationProperties
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getSessionUsingInitiativeYearTerm
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"initiative"
argument_list|,
literal|"puWestLafayetteTrdtn"
argument_list|)
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"year"
argument_list|,
literal|"2008"
argument_list|)
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"term"
argument_list|,
literal|"Spr"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Academic session not found, use properties initiative, year, and term to set academic session."
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Session: "
operator|+
name|session
argument_list|)
expr_stmt|;
block|}
name|int
name|examType
init|=
operator|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"type"
argument_list|,
literal|"final"
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"final"
argument_list|)
condition|?
name|Exam
operator|.
name|sExamTypeFinal
else|:
name|Exam
operator|.
name|sExamTypeEvening
operator|)
decl_stmt|;
name|int
name|mode
init|=
name|sModeNormal
decl_stmt|;
if|if
condition|(
literal|"text"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"mode"
argument_list|)
argument_list|)
condition|)
name|mode
operator|=
name|sModeText
expr_stmt|;
if|if
condition|(
literal|"ledger"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"mode"
argument_list|)
argument_list|)
condition|)
name|mode
operator|=
name|sModeLedger
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Exam type: "
operator|+
name|Exam
operator|.
name|sExamTypes
index|[
name|examType
index|]
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Loading exams..."
argument_list|)
expr_stmt|;
name|Vector
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
init|=
operator|new
name|Vector
argument_list|<
name|ExamAssignmentInfo
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|SubjectArea
argument_list|,
name|Vector
argument_list|<
name|ExamAssignmentInfo
argument_list|>
argument_list|>
name|examsPerSubj
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|Exam
operator|.
name|findAll
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|examType
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamAssignmentInfo
name|exam
init|=
operator|new
name|ExamAssignmentInfo
argument_list|(
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|exams
operator|.
name|add
argument_list|(
name|exam
argument_list|)
expr_stmt|;
block|}
name|Date
name|since
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"since"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|since
operator|=
operator|new
name|SimpleDateFormat
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"sinceFormat"
argument_list|,
literal|"MM/dd/yy"
argument_list|)
argument_list|)
operator|.
name|parse
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"since"
argument_list|)
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Since: "
operator|+
name|since
argument_list|)
expr_stmt|;
block|}
name|InstructorExamReport
name|report
init|=
operator|new
name|InstructorExamReport
argument_list|(
name|mode
argument_list|,
literal|null
argument_list|,
name|session
argument_list|,
name|examType
argument_list|,
literal|null
argument_list|,
name|exams
argument_list|)
decl_stmt|;
name|report
operator|.
name|printInstructorReports
argument_list|(
name|mode
argument_list|,
name|session
operator|.
name|getAcademicTerm
argument_list|()
operator|+
name|session
operator|.
name|getYear
argument_list|()
operator|+
operator|(
name|examType
operator|==
name|Exam
operator|.
name|sExamTypeEvening
condition|?
literal|"evn"
else|:
literal|"fin"
operator|)
argument_list|,
name|since
argument_list|,
operator|new
name|FileGenerator
argument_list|()
block|{
specifier|public
name|File
name|generate
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|ext
parameter_list|)
block|{
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|prefix
operator|+
literal|"."
operator|+
name|ext
argument_list|)
decl_stmt|;
while|while
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|idx
operator|++
expr_stmt|;
name|file
operator|=
operator|new
name|File
argument_list|(
name|prefix
operator|+
literal|"_"
operator|+
name|idx
operator|+
literal|"."
operator|+
name|ext
argument_list|)
expr_stmt|;
block|}
return|return
name|file
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Done."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
interface|interface
name|FileGenerator
block|{
specifier|public
name|File
name|generate
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|ext
parameter_list|)
function_decl|;
block|}
block|}
end_class

end_unit

