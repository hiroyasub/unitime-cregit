begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|reports
operator|.
name|exam
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignmentInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamInfo
operator|.
name|ExamSectionInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|DocumentException
import|;
end_import

begin_class
specifier|public
class|class
name|ScheduleByPeriodReport
extends|extends
name|PdfLegacyExamReport
block|{
specifier|protected
specifier|static
name|Logger
name|sLog
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|ScheduleByPeriodReport
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|ScheduleByPeriodReport
parameter_list|(
name|File
name|file
parameter_list|,
name|Session
name|session
parameter_list|,
name|int
name|examType
parameter_list|,
name|Collection
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
parameter_list|)
throws|throws
name|IOException
throws|,
name|DocumentException
block|{
name|super
argument_list|(
name|file
argument_list|,
literal|"SCHEDULE BY PERIOD"
argument_list|,
name|session
argument_list|,
name|examType
argument_list|,
name|exams
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|printReport
parameter_list|()
throws|throws
name|DocumentException
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"  Sorting sections ..."
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|TreeSet
argument_list|<
name|ExamSectionInfo
argument_list|>
argument_list|>
name|subject2courseSections
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|ExamInfo
name|exam
range|:
name|getExams
argument_list|()
control|)
block|{
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|exam
operator|.
name|getSections
argument_list|()
control|)
block|{
name|TreeSet
argument_list|<
name|ExamSectionInfo
argument_list|>
name|sections
init|=
name|subject2courseSections
operator|.
name|get
argument_list|(
name|section
operator|.
name|getSubject
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sections
operator|==
literal|null
condition|)
block|{
name|sections
operator|=
operator|new
name|TreeSet
argument_list|()
expr_stmt|;
name|subject2courseSections
operator|.
name|put
argument_list|(
name|section
operator|.
name|getSubject
argument_list|()
argument_list|,
name|sections
argument_list|)
expr_stmt|;
block|}
name|sections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
block|}
name|setHeader
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"Date And Time                          Subj Crsnbr InsTyp Sect   Meeting Times                         Enrl"
block|,
literal|"-------------------------------------- ---- ------ ------ ---- -------------------------------------- -----"
block|}
argument_list|)
expr_stmt|;
name|printHeader
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|p
init|=
name|ExamPeriod
operator|.
name|findAll
argument_list|(
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|getExamType
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|p
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamPeriod
name|period
init|=
operator|(
name|ExamPeriod
operator|)
name|p
operator|.
name|next
argument_list|()
decl_stmt|;
name|iPeriodPrinted
operator|=
literal|false
expr_stmt|;
name|setPageName
argument_list|(
name|period
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|setCont
argument_list|(
name|period
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|i
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|subject2courseSections
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|subject
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|ExamSectionInfo
argument_list|>
name|sections
init|=
name|subject2courseSections
operator|.
name|get
argument_list|(
name|subject
argument_list|)
decl_stmt|;
name|iSubjectPrinted
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|ExamSectionInfo
argument_list|>
name|j
init|=
name|sections
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamSectionInfo
name|section
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|period
operator|.
name|equals
argument_list|(
name|section
operator|.
name|getExamAssignment
argument_list|()
operator|.
name|getPeriod
argument_list|()
argument_list|)
condition|)
continue|continue;
name|String
name|meetingTime
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|section
operator|.
name|getOwner
argument_list|()
operator|.
name|getOwnerObject
argument_list|()
operator|instanceof
name|Class_
condition|)
block|{
name|Assignment
name|assignment
init|=
operator|(
operator|(
name|Class_
operator|)
name|section
operator|.
name|getOwner
argument_list|()
operator|.
name|getOwnerObject
argument_list|()
operator|)
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|assignment
operator|!=
literal|null
condition|)
block|{
name|String
name|dpat
init|=
literal|""
decl_stmt|;
name|DatePattern
name|dp
init|=
name|assignment
operator|.
name|getDatePattern
argument_list|()
decl_stmt|;
if|if
condition|(
name|dp
operator|!=
literal|null
operator|&&
operator|!
name|dp
operator|.
name|isDefault
argument_list|()
condition|)
block|{
if|if
condition|(
name|dp
operator|.
name|getType
argument_list|()
operator|.
name|intValue
argument_list|()
operator|==
name|DatePattern
operator|.
name|sTypeAlternate
condition|)
name|dpat
operator|=
literal|" "
operator|+
name|dp
operator|.
name|getName
argument_list|()
expr_stmt|;
else|else
block|{
name|SimpleDateFormat
name|dpf
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd"
argument_list|)
decl_stmt|;
name|dpat
operator|=
literal|", "
operator|+
name|dpf
operator|.
name|format
argument_list|(
name|dp
operator|.
name|getStartDate
argument_list|()
argument_list|)
operator|+
literal|" - "
operator|+
name|dpf
operator|.
name|format
argument_list|(
name|dp
operator|.
name|getEndDate
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|TimeLocation
name|t
init|=
name|assignment
operator|.
name|getTimeLocation
argument_list|()
decl_stmt|;
name|meetingTime
operator|=
name|t
operator|.
name|getDayHeader
argument_list|()
operator|+
literal|" "
operator|+
name|t
operator|.
name|getStartTimeHeader
argument_list|()
operator|+
literal|" - "
operator|+
name|t
operator|.
name|getEndTimeHeader
argument_list|()
operator|+
name|dpat
expr_stmt|;
block|}
block|}
name|println
argument_list|(
name|rpad
argument_list|(
name|iPeriodPrinted
condition|?
literal|""
else|:
name|period
operator|.
name|getName
argument_list|()
argument_list|,
literal|38
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iSubjectPrinted
condition|?
literal|""
else|:
name|subject
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|section
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|section
operator|.
name|getItype
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
name|lpad
argument_list|(
name|section
operator|.
name|getSection
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|meetingTime
argument_list|,
literal|38
argument_list|)
operator|+
literal|" "
operator|+
name|lpad
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|section
operator|.
name|getNrStudents
argument_list|()
argument_list|)
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|iPeriodPrinted
operator|=
name|iSubjectPrinted
operator|=
operator|!
name|iNewPage
expr_stmt|;
block|}
block|}
name|setCont
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|newPage
argument_list|()
expr_stmt|;
block|}
block|}
name|lastPage
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

