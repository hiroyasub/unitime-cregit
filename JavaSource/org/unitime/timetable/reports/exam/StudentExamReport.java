begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|reports
operator|.
name|exam
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StudentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignmentInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamRoomInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignmentInfo
operator|.
name|BackToBackConflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignmentInfo
operator|.
name|DirectConflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignmentInfo
operator|.
name|MoreThanTwoADayConflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamInfo
operator|.
name|ExamSectionInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|DocumentException
import|;
end_import

begin_class
specifier|public
class|class
name|StudentExamReport
extends|extends
name|PdfLegacyExamReport
block|{
specifier|protected
specifier|static
name|Logger
name|sLog
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|InstructorExamReport
operator|.
name|class
argument_list|)
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|iStudentNames
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
specifier|public
name|StudentExamReport
parameter_list|(
name|int
name|mode
parameter_list|,
name|File
name|file
parameter_list|,
name|Session
name|session
parameter_list|,
name|int
name|examType
parameter_list|,
name|SubjectArea
name|subjectArea
parameter_list|,
name|Collection
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
parameter_list|)
throws|throws
name|IOException
throws|,
name|DocumentException
block|{
name|super
argument_list|(
name|mode
argument_list|,
name|file
argument_list|,
literal|"STUDENT EXAMINATION SCHEDULE"
argument_list|,
name|session
argument_list|,
name|examType
argument_list|,
name|subjectArea
argument_list|,
name|exams
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|printReport
parameter_list|()
throws|throws
name|DocumentException
block|{
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|TreeSet
argument_list|<
name|ExamSectionInfo
argument_list|>
argument_list|>
name|sections
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|getExams
argument_list|()
control|)
block|{
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|exam
operator|.
name|getSections
argument_list|()
control|)
block|{
for|for
control|(
name|Long
name|studentId
range|:
name|section
operator|.
name|getStudentIds
argument_list|()
control|)
block|{
name|TreeSet
argument_list|<
name|ExamSectionInfo
argument_list|>
name|sectionsThisStudent
init|=
name|sections
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|sectionsThisStudent
operator|==
literal|null
condition|)
block|{
name|sectionsThisStudent
operator|=
operator|new
name|TreeSet
argument_list|<
name|ExamSectionInfo
argument_list|>
argument_list|()
expr_stmt|;
name|sections
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|sectionsThisStudent
argument_list|)
expr_stmt|;
block|}
name|sectionsThisStudent
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|boolean
name|firstStudent
init|=
literal|true
decl_stmt|;
name|printHeader
argument_list|()
expr_stmt|;
name|TreeSet
argument_list|<
name|Long
argument_list|>
name|students
init|=
operator|new
name|TreeSet
argument_list|<
name|Long
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Long
name|s1
parameter_list|,
name|Long
name|s2
parameter_list|)
block|{
return|return
operator|new
name|StudentDAO
argument_list|()
operator|.
name|get
argument_list|(
name|s1
argument_list|)
operator|.
name|compareTo
argument_list|(
operator|new
name|StudentDAO
argument_list|()
operator|.
name|get
argument_list|(
name|s2
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|students
operator|.
name|addAll
argument_list|(
name|sections
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Long
name|studentId
range|:
name|students
control|)
block|{
if|if
condition|(
operator|!
name|firstStudent
condition|)
name|newPage
argument_list|()
expr_stmt|;
name|printReport
argument_list|(
name|studentId
argument_list|,
name|sections
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
argument_list|)
expr_stmt|;
name|firstStudent
operator|=
literal|false
expr_stmt|;
block|}
name|lastPage
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|printReport
parameter_list|(
name|Long
name|studentId
parameter_list|)
throws|throws
name|DocumentException
block|{
name|TreeSet
argument_list|<
name|ExamSectionInfo
argument_list|>
name|sections
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|getExams
argument_list|()
control|)
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|exam
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|section
operator|.
name|getStudentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|studentId
argument_list|)
condition|)
name|sections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
if|if
condition|(
name|sections
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|printHeader
argument_list|()
expr_stmt|;
name|printReport
argument_list|(
name|studentId
argument_list|,
name|sections
argument_list|)
expr_stmt|;
name|lastPage
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|printReport
parameter_list|(
name|Long
name|studentId
parameter_list|,
name|TreeSet
argument_list|<
name|ExamSectionInfo
argument_list|>
name|sections
parameter_list|)
throws|throws
name|DocumentException
block|{
name|Student
name|student
init|=
operator|new
name|StudentDAO
argument_list|()
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|student
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatLastFist
argument_list|)
decl_stmt|;
name|String
name|shortName
init|=
name|student
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatLastInitial
argument_list|)
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
name|setPageName
argument_list|(
name|shortName
argument_list|)
expr_stmt|;
name|setCont
argument_list|(
name|shortName
argument_list|)
expr_stmt|;
name|println
argument_list|(
literal|"Name:  "
operator|+
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getEmail
argument_list|()
operator|!=
literal|null
condition|)
name|println
argument_list|(
literal|"Email:       "
operator|+
name|student
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
name|Date
name|lastChange
init|=
literal|null
decl_stmt|;
name|String
name|changeObject
init|=
literal|null
decl_stmt|;
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|setHeader
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"Subj Crsnbr "
operator|+
operator|(
name|iItype
condition|?
literal|"InsTyp "
else|:
literal|""
operator|)
operator|+
literal|"Sect   Meeting Times                          Date And Time                   Room      "
block|,
literal|"---- ------ "
operator|+
operator|(
name|iItype
condition|?
literal|"------ "
else|:
literal|""
operator|)
operator|+
literal|"---- -------------------------------------- -------------------------------- -----------"
block|}
argument_list|)
expr_stmt|;
name|println
argument_list|(
name|mpad
argument_list|(
literal|"~ ~ ~ ~ ~ EXAMINATION SECHEDULE ~ ~ ~ ~ ~"
argument_list|,
name|iNrChars
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getHeader
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|println
argument_list|(
name|getHeader
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|iSubjectPrinted
operator|=
literal|false
expr_stmt|;
name|String
name|lastSubject
init|=
literal|null
decl_stmt|;
name|iCoursePrinted
operator|=
literal|false
expr_stmt|;
name|String
name|lastCourse
init|=
literal|null
decl_stmt|;
name|iITypePrinted
operator|=
literal|false
expr_stmt|;
name|String
name|lastItype
init|=
literal|null
decl_stmt|;
name|iPeriodPrinted
operator|=
literal|false
expr_stmt|;
name|String
name|lastSection
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|sections
control|)
block|{
if|if
condition|(
name|iSubjectPrinted
operator|&&
operator|!
name|section
operator|.
name|getSubject
argument_list|()
operator|.
name|equals
argument_list|(
name|lastSubject
argument_list|)
condition|)
block|{
name|iSubjectPrinted
operator|=
literal|false
expr_stmt|;
name|iCoursePrinted
operator|=
literal|false
expr_stmt|;
name|iITypePrinted
operator|=
literal|false
expr_stmt|;
name|iPeriodPrinted
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|iCoursePrinted
operator|&&
operator|!
name|section
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|equals
argument_list|(
name|lastCourse
argument_list|)
condition|)
block|{
name|iCoursePrinted
operator|=
literal|false
expr_stmt|;
name|iITypePrinted
operator|=
literal|false
expr_stmt|;
name|iPeriodPrinted
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|iITypePrinted
operator|&&
operator|!
name|section
operator|.
name|getItype
argument_list|()
operator|.
name|equals
argument_list|(
name|lastItype
argument_list|)
condition|)
block|{
name|iITypePrinted
operator|=
literal|false
expr_stmt|;
name|iPeriodPrinted
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|iPeriodPrinted
operator|&&
operator|!
name|section
operator|.
name|getSection
argument_list|()
operator|.
name|equals
argument_list|(
name|lastSection
argument_list|)
condition|)
block|{
name|iPeriodPrinted
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|section
operator|.
name|getExamAssignment
argument_list|()
operator|.
name|getRooms
argument_list|()
operator|==
literal|null
operator|||
name|section
operator|.
name|getExamAssignment
argument_list|()
operator|.
name|getRooms
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|println
argument_list|(
name|rpad
argument_list|(
name|iSubjectPrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getSubject
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|iItype
condition|?
name|rpad
argument_list|(
name|iITypePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getItype
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|lpad
argument_list|(
name|iPeriodPrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getSection
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|getMeetingTime
argument_list|(
name|section
argument_list|)
argument_list|,
literal|38
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
operator|(
name|section
operator|.
name|getExamAssignment
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|section
operator|.
name|getExamAssignment
argument_list|()
operator|.
name|getPeriodNameFixedLength
argument_list|()
operator|)
argument_list|,
literal|32
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|section
operator|.
name|getExamAssignment
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|iNoRoom
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|getLineNumber
argument_list|()
operator|+
name|section
operator|.
name|getExamAssignment
argument_list|()
operator|.
name|getRooms
argument_list|()
operator|.
name|size
argument_list|()
operator|>
name|iNrLines
condition|)
name|newPage
argument_list|()
expr_stmt|;
name|boolean
name|firstRoom
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ExamRoomInfo
name|room
range|:
name|section
operator|.
name|getExamAssignment
argument_list|()
operator|.
name|getRooms
argument_list|()
control|)
block|{
name|println
argument_list|(
name|rpad
argument_list|(
operator|!
name|firstRoom
operator|||
name|iSubjectPrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getSubject
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
operator|!
name|firstRoom
operator|||
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|iItype
condition|?
name|rpad
argument_list|(
operator|!
name|firstRoom
operator|||
name|iITypePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getItype
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|lpad
argument_list|(
operator|!
name|firstRoom
operator|||
name|iPeriodPrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getSection
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
operator|!
name|firstRoom
condition|?
literal|""
else|:
name|getMeetingTime
argument_list|(
name|section
argument_list|)
argument_list|,
literal|38
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
operator|!
name|firstRoom
condition|?
literal|""
else|:
operator|(
name|section
operator|.
name|getExamAssignment
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|section
operator|.
name|getExamAssignment
argument_list|()
operator|.
name|getPeriodNameFixedLength
argument_list|()
operator|)
argument_list|,
literal|32
argument_list|)
operator|+
literal|" "
operator|+
name|formatRoom
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|firstRoom
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iNewPage
condition|)
block|{
name|iSubjectPrinted
operator|=
name|iITypePrinted
operator|=
name|iCoursePrinted
operator|=
name|iPeriodPrinted
operator|=
literal|false
expr_stmt|;
name|lastSubject
operator|=
name|lastItype
operator|=
name|lastCourse
operator|=
name|lastSection
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|iSubjectPrinted
operator|=
name|iITypePrinted
operator|=
name|iCoursePrinted
operator|=
name|iPeriodPrinted
operator|=
literal|true
expr_stmt|;
name|lastSubject
operator|=
name|section
operator|.
name|getSubject
argument_list|()
expr_stmt|;
name|lastItype
operator|=
name|section
operator|.
name|getItype
argument_list|()
expr_stmt|;
name|lastCourse
operator|=
name|section
operator|.
name|getCourseNbr
argument_list|()
expr_stmt|;
name|lastSection
operator|=
name|section
operator|.
name|getSection
argument_list|()
expr_stmt|;
block|}
block|}
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|boolean
name|headerPrinted
init|=
literal|false
decl_stmt|;
name|lastSubject
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|sections
control|)
block|{
name|iSubjectPrinted
operator|=
operator|(
operator|!
name|iNewPage
operator|&&
name|lastSubject
operator|!=
literal|null
operator|&&
name|lastSubject
operator|.
name|equals
argument_list|(
name|section
operator|.
name|getSubject
argument_list|()
argument_list|)
operator|)
expr_stmt|;
name|ExamAssignmentInfo
name|exam
init|=
name|section
operator|.
name|getExamAssignmentInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|exam
operator|==
literal|null
operator|||
name|exam
operator|.
name|getPeriod
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|ExamPeriod
name|period
init|=
name|exam
operator|.
name|getPeriod
argument_list|()
decl_stmt|;
name|iCoursePrinted
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|iDirect
condition|)
for|for
control|(
name|DirectConflict
name|conflict
range|:
name|exam
operator|.
name|getDirectConflicts
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|conflict
operator|.
name|getStudents
argument_list|()
operator|.
name|contains
argument_list|(
name|studentId
argument_list|)
condition|)
continue|continue;
name|iPeriodPrinted
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ExamSectionInfo
name|other
range|:
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|other
operator|.
name|getStudentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|studentId
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|headerPrinted
condition|)
block|{
if|if
condition|(
operator|!
name|iNewPage
condition|)
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|setHeader
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|getLineNumber
argument_list|()
operator|+
literal|5
operator|>=
name|iNrLines
condition|)
name|newPage
argument_list|()
expr_stmt|;
name|setHeader
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"Subj Crsnbr "
operator|+
operator|(
name|iItype
condition|?
literal|"InsTyp "
else|:
literal|""
operator|)
operator|+
literal|"Sect Date And Time                Type   Subj Crsnbr "
operator|+
operator|(
name|iItype
condition|?
literal|"InsTyp "
else|:
literal|""
operator|)
operator|+
literal|"Sect Time                 "
block|,
literal|"---- ------ "
operator|+
operator|(
name|iItype
condition|?
literal|"------ "
else|:
literal|""
operator|)
operator|+
literal|"---- ---------------------------- ------ ---- ------ "
operator|+
operator|(
name|iItype
condition|?
literal|"------ "
else|:
literal|""
operator|)
operator|+
literal|"---- ---------------------"
block|}
argument_list|)
expr_stmt|;
name|println
argument_list|(
name|mpad
argument_list|(
literal|"~ ~ ~ ~ ~ STUDENT CONFLICTS ~ ~ ~ ~ ~"
argument_list|,
name|iNrChars
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getHeader
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|println
argument_list|(
name|getHeader
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|setCont
argument_list|(
name|shortName
operator|+
literal|"  STUDENT CONFLICTS"
argument_list|)
expr_stmt|;
name|headerPrinted
operator|=
literal|true
expr_stmt|;
block|}
name|println
argument_list|(
name|rpad
argument_list|(
name|iSubjectPrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getSubject
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|iItype
condition|?
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getItype
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|lpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getSection
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|exam
operator|.
name|getPeriodNameFixedLength
argument_list|()
argument_list|,
literal|28
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iPeriodPrinted
condition|?
literal|""
else|:
literal|"DIRECT"
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|other
operator|.
name|getSubject
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|other
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|iItype
condition|?
name|rpad
argument_list|(
name|other
operator|.
name|getItype
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|lpad
argument_list|(
name|other
operator|.
name|getSection
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|other
operator|.
name|getExamAssignment
argument_list|()
operator|.
name|getTimeFixedLength
argument_list|()
argument_list|)
expr_stmt|;
name|iSubjectPrinted
operator|=
name|iCoursePrinted
operator|=
name|iStudentPrinted
operator|=
name|iPeriodPrinted
operator|=
operator|!
name|iNewPage
expr_stmt|;
name|lastSubject
operator|=
name|section
operator|.
name|getSubject
argument_list|()
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|conflict
operator|.
name|getOtherEventId
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|headerPrinted
condition|)
block|{
if|if
condition|(
operator|!
name|iNewPage
condition|)
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|setHeader
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|getLineNumber
argument_list|()
operator|+
literal|5
operator|>=
name|iNrLines
condition|)
name|newPage
argument_list|()
expr_stmt|;
name|setHeader
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"Subj Crsnbr "
operator|+
operator|(
name|iItype
condition|?
literal|"InsTyp "
else|:
literal|""
operator|)
operator|+
literal|"Sect Date And Time                Type   Subj Crsnbr "
operator|+
operator|(
name|iItype
condition|?
literal|"InsTyp "
else|:
literal|""
operator|)
operator|+
literal|"Sect Time                 "
block|,
literal|"---- ------ "
operator|+
operator|(
name|iItype
condition|?
literal|"------ "
else|:
literal|""
operator|)
operator|+
literal|"---- ---------------------------- ------ ---- ------ "
operator|+
operator|(
name|iItype
condition|?
literal|"------ "
else|:
literal|""
operator|)
operator|+
literal|"---- ---------------------"
block|}
argument_list|)
expr_stmt|;
name|println
argument_list|(
name|mpad
argument_list|(
literal|"~ ~ ~ ~ ~ STUDENT CONFLICTS ~ ~ ~ ~ ~"
argument_list|,
name|iNrChars
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getHeader
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|println
argument_list|(
name|getHeader
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|setCont
argument_list|(
name|shortName
operator|+
literal|"  STUDENT CONFLICTS"
argument_list|)
expr_stmt|;
name|headerPrinted
operator|=
literal|true
expr_stmt|;
block|}
name|println
argument_list|(
name|rpad
argument_list|(
name|iSubjectPrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getSubject
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|iItype
condition|?
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getItype
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|lpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getSection
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|exam
operator|.
name|getPeriodNameFixedLength
argument_list|()
argument_list|,
literal|28
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iPeriodPrinted
condition|?
literal|""
else|:
literal|"CLASS"
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|conflict
operator|.
name|getOtherClass
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|conflict
operator|.
name|getOtherClass
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|iItype
condition|?
name|rpad
argument_list|(
name|conflict
operator|.
name|getOtherClass
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|lpad
argument_list|(
name|iUseClassSuffix
operator|&&
name|conflict
operator|.
name|getOtherClass
argument_list|()
operator|.
name|getClassSuffix
argument_list|()
operator|!=
literal|null
condition|?
name|conflict
operator|.
name|getOtherClass
argument_list|()
operator|.
name|getClassSuffix
argument_list|()
else|:
name|conflict
operator|.
name|getOtherClass
argument_list|()
operator|.
name|getSectionNumberString
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|getMeetingTime
argument_list|(
name|conflict
operator|.
name|getOtherEventTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iSubjectPrinted
operator|=
name|iCoursePrinted
operator|=
name|iStudentPrinted
operator|=
name|iPeriodPrinted
operator|=
operator|!
name|iNewPage
expr_stmt|;
name|lastSubject
operator|=
name|section
operator|.
name|getSubject
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iM2d
condition|)
for|for
control|(
name|MoreThanTwoADayConflict
name|conflict
range|:
name|exam
operator|.
name|getMoreThanTwoADaysConflicts
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|conflict
operator|.
name|getStudents
argument_list|()
operator|.
name|contains
argument_list|(
name|studentId
argument_list|)
condition|)
continue|continue;
name|iPeriodPrinted
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|ExamAssignment
name|otherExam
range|:
name|conflict
operator|.
name|getOtherExams
argument_list|()
control|)
block|{
for|for
control|(
name|ExamSectionInfo
name|other
range|:
name|otherExam
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|other
operator|.
name|getStudentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|studentId
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|headerPrinted
condition|)
block|{
if|if
condition|(
operator|!
name|iNewPage
condition|)
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|setHeader
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|getLineNumber
argument_list|()
operator|+
literal|5
operator|>=
name|iNrLines
condition|)
name|newPage
argument_list|()
expr_stmt|;
name|setHeader
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"Subj Crsnbr "
operator|+
operator|(
name|iItype
condition|?
literal|"InsTyp "
else|:
literal|""
operator|)
operator|+
literal|"Sect Date And Time                Type   Subj Crsnbr "
operator|+
operator|(
name|iItype
condition|?
literal|"InsTyp "
else|:
literal|""
operator|)
operator|+
literal|"Sect Time                 "
block|,
literal|"---- ------ "
operator|+
operator|(
name|iItype
condition|?
literal|"------ "
else|:
literal|""
operator|)
operator|+
literal|"---- ---------------------------- ------ ---- ------ "
operator|+
operator|(
name|iItype
condition|?
literal|"------ "
else|:
literal|""
operator|)
operator|+
literal|"---- ---------------------"
block|}
argument_list|)
expr_stmt|;
name|println
argument_list|(
name|mpad
argument_list|(
literal|"~ ~ ~ ~ ~ STUDENT CONFLICTS ~ ~ ~ ~ ~"
argument_list|,
name|iNrChars
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getHeader
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|println
argument_list|(
name|getHeader
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|setCont
argument_list|(
name|shortName
operator|+
literal|"  STUDENT CONFLICTS"
argument_list|)
expr_stmt|;
name|headerPrinted
operator|=
literal|true
expr_stmt|;
block|}
name|println
argument_list|(
name|rpad
argument_list|(
name|iSubjectPrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getSubject
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|iItype
condition|?
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getItype
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|lpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getSection
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|exam
operator|.
name|getPeriodNameFixedLength
argument_list|()
argument_list|,
literal|28
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iPeriodPrinted
condition|?
literal|""
else|:
literal|">2-DAY"
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|other
operator|.
name|getSubject
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|other
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|iItype
condition|?
name|rpad
argument_list|(
name|other
operator|.
name|getItype
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|lpad
argument_list|(
name|other
operator|.
name|getSection
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|other
operator|.
name|getExamAssignment
argument_list|()
operator|.
name|getTimeFixedLength
argument_list|()
argument_list|)
expr_stmt|;
name|iSubjectPrinted
operator|=
name|iCoursePrinted
operator|=
name|iStudentPrinted
operator|=
name|iPeriodPrinted
operator|=
operator|!
name|iNewPage
expr_stmt|;
name|lastSubject
operator|=
name|section
operator|.
name|getSubject
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|iBtb
condition|)
for|for
control|(
name|BackToBackConflict
name|conflict
range|:
name|exam
operator|.
name|getBackToBackConflicts
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|conflict
operator|.
name|getStudents
argument_list|()
operator|.
name|contains
argument_list|(
name|studentId
argument_list|)
condition|)
continue|continue;
name|iPeriodPrinted
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|ExamSectionInfo
name|other
range|:
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|other
operator|.
name|getStudentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|studentId
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|headerPrinted
condition|)
block|{
if|if
condition|(
operator|!
name|iNewPage
condition|)
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|setHeader
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|getLineNumber
argument_list|()
operator|+
literal|5
operator|>=
name|iNrLines
condition|)
name|newPage
argument_list|()
expr_stmt|;
name|setHeader
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"Subj Crsnbr "
operator|+
operator|(
name|iItype
condition|?
literal|"InsTyp "
else|:
literal|""
operator|)
operator|+
literal|"Sect Date And Time                Type   Subj Crsnbr "
operator|+
operator|(
name|iItype
condition|?
literal|"InsTyp "
else|:
literal|""
operator|)
operator|+
literal|"Sect Time                 "
block|,
literal|"---- ------ "
operator|+
operator|(
name|iItype
condition|?
literal|"------ "
else|:
literal|""
operator|)
operator|+
literal|"---- ---------------------------- ------ ---- ------ "
operator|+
operator|(
name|iItype
condition|?
literal|"------ "
else|:
literal|""
operator|)
operator|+
literal|"---- ---------------------"
block|}
argument_list|)
expr_stmt|;
name|println
argument_list|(
name|mpad
argument_list|(
literal|"~ ~ ~ ~ ~ STUDENT CONFLICTS ~ ~ ~ ~ ~"
argument_list|,
name|iNrChars
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getHeader
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|println
argument_list|(
name|getHeader
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|setCont
argument_list|(
name|shortName
operator|+
literal|"  STUDENT CONFLICTS"
argument_list|)
expr_stmt|;
name|headerPrinted
operator|=
literal|true
expr_stmt|;
block|}
name|println
argument_list|(
name|rpad
argument_list|(
name|iSubjectPrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getSubject
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|iItype
condition|?
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getItype
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|lpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getSection
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|exam
operator|.
name|getPeriodNameFixedLength
argument_list|()
argument_list|,
literal|28
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iPeriodPrinted
condition|?
literal|""
else|:
literal|"BTB"
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|other
operator|.
name|getSubject
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|other
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|iItype
condition|?
name|rpad
argument_list|(
name|other
operator|.
name|getItype
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|lpad
argument_list|(
name|other
operator|.
name|getSection
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|other
operator|.
name|getExamAssignment
argument_list|()
operator|.
name|getTimeFixedLength
argument_list|()
argument_list|)
expr_stmt|;
name|iSubjectPrinted
operator|=
name|iCoursePrinted
operator|=
name|iStudentPrinted
operator|=
name|iPeriodPrinted
operator|=
operator|!
name|iNewPage
expr_stmt|;
name|lastSubject
operator|=
name|section
operator|.
name|getSubject
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|setHeader
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|setCont
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

