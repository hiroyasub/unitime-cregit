begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|reports
operator|.
name|exam
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentClassEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Event
operator|.
name|MultiMeeting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StudentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|reports
operator|.
name|exam
operator|.
name|InstructorExamReport
operator|.
name|FileGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignmentInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamRoomInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignmentInfo
operator|.
name|BackToBackConflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignmentInfo
operator|.
name|DirectConflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignmentInfo
operator|.
name|MoreThanTwoADayConflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamInfo
operator|.
name|ExamSectionInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|DocumentException
import|;
end_import

begin_class
specifier|public
class|class
name|StudentExamReport
extends|extends
name|PdfLegacyExamReport
block|{
specifier|protected
specifier|static
name|Logger
name|sLog
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|StudentExamReport
operator|.
name|class
argument_list|)
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Student
argument_list|>
name|iStudents
init|=
literal|null
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|ClassEvent
argument_list|>
name|iClass2event
init|=
literal|null
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Location
argument_list|>
name|iLocations
init|=
literal|null
decl_stmt|;
specifier|public
name|StudentExamReport
parameter_list|(
name|int
name|mode
parameter_list|,
name|File
name|file
parameter_list|,
name|Session
name|session
parameter_list|,
name|int
name|examType
parameter_list|,
name|SubjectArea
name|subjectArea
parameter_list|,
name|Collection
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
parameter_list|)
throws|throws
name|IOException
throws|,
name|DocumentException
block|{
name|super
argument_list|(
name|mode
argument_list|,
name|file
argument_list|,
literal|"STUDENT EXAMINATION SCHEDULE"
argument_list|,
name|session
argument_list|,
name|examType
argument_list|,
name|subjectArea
argument_list|,
name|exams
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateCache
parameter_list|()
block|{
if|if
condition|(
name|iStudents
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"  Loading students..."
argument_list|)
expr_stmt|;
name|iStudents
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|StudentDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select s from Student s where s.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Student
name|s
init|=
operator|(
name|Student
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|iStudents
operator|.
name|put
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iClass2event
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"  Loading class events..."
argument_list|)
expr_stmt|;
name|iClass2event
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
if|if
condition|(
name|getSubjectArea
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|SessionDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c.uniqueId, e from ClassEvent e inner join e.clazz c left join fetch e.meetings m "
operator|+
literal|"inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co where "
operator|+
literal|"co.subjectArea.uniqueId=:subjectAreaId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"subjectAreaId"
argument_list|,
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|iClass2event
operator|.
name|put
argument_list|(
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
argument_list|,
operator|(
name|ClassEvent
operator|)
name|o
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|SessionDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c.uniqueId, e from ClassEvent e inner join e.clazz c left join fetch e.meetings m "
operator|+
literal|"inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co where "
operator|+
literal|"co.subjectArea.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|iClass2event
operator|.
name|put
argument_list|(
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
argument_list|,
operator|(
name|ClassEvent
operator|)
name|o
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|iLocations
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"  Loading locations..."
argument_list|)
expr_stmt|;
name|iLocations
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|SessionDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select r from Room r where r.session.uniqueId=:sessionId and r.permanentId!=null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|location
init|=
operator|(
name|Location
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|iLocations
operator|.
name|put
argument_list|(
name|location
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|SessionDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select r from NonUniversityLocation r where r.session.uniqueId=:sessionId and r.permanentId!=null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|location
init|=
operator|(
name|Location
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|iLocations
operator|.
name|put
argument_list|(
name|location
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|boolean
name|isOfSubjectArea
parameter_list|(
name|TreeSet
argument_list|<
name|ExamSectionInfo
argument_list|>
name|sections
parameter_list|)
block|{
if|if
condition|(
name|getSubjectArea
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|true
return|;
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|sections
control|)
if|if
condition|(
name|getSubjectArea
argument_list|()
operator|.
name|equals
argument_list|(
name|section
operator|.
name|getOwner
argument_list|()
operator|.
name|getCourse
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|printReport
parameter_list|()
throws|throws
name|DocumentException
block|{
name|generateCache
argument_list|()
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"  Printing report..."
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|Student
argument_list|,
name|TreeSet
argument_list|<
name|ExamSectionInfo
argument_list|>
argument_list|>
name|sections
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|getExams
argument_list|()
control|)
block|{
if|if
condition|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|exam
operator|.
name|getSectionsIncludeCrosslistedDummies
argument_list|()
control|)
block|{
for|for
control|(
name|Long
name|studentId
range|:
name|section
operator|.
name|getStudentIds
argument_list|()
control|)
block|{
name|Student
name|student
init|=
name|iStudents
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
name|TreeSet
argument_list|<
name|ExamSectionInfo
argument_list|>
name|sectionsThisStudent
init|=
name|sections
operator|.
name|get
argument_list|(
name|student
argument_list|)
decl_stmt|;
if|if
condition|(
name|sectionsThisStudent
operator|==
literal|null
condition|)
block|{
name|sectionsThisStudent
operator|=
operator|new
name|TreeSet
argument_list|<
name|ExamSectionInfo
argument_list|>
argument_list|()
expr_stmt|;
name|sections
operator|.
name|put
argument_list|(
name|student
argument_list|,
name|sectionsThisStudent
argument_list|)
expr_stmt|;
block|}
name|sectionsThisStudent
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|printHeader
argument_list|()
expr_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Student
name|student
range|:
operator|new
name|TreeSet
argument_list|<
name|Student
argument_list|>
argument_list|(
name|sections
operator|.
name|keySet
argument_list|()
argument_list|)
control|)
block|{
name|TreeSet
argument_list|<
name|ExamSectionInfo
argument_list|>
name|sectionsThisStudent
init|=
name|sections
operator|.
name|get
argument_list|(
name|student
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isOfSubjectArea
argument_list|(
name|sectionsThisStudent
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|iSince
operator|!=
literal|null
condition|)
block|{
name|ChangeLog
name|last
init|=
name|getLastChange
argument_list|(
name|sectionsThisStudent
argument_list|)
decl_stmt|;
if|if
condition|(
name|last
operator|==
literal|null
operator|||
name|iSince
operator|.
name|compareTo
argument_list|(
name|last
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
operator|>
literal|0
condition|)
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"No change found for "
operator|+
name|student
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatLastFist
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
if|if
condition|(
name|index
operator|>
literal|0
condition|)
name|newPage
argument_list|()
expr_stmt|;
name|printReport
argument_list|(
name|student
argument_list|,
name|sectionsThisStudent
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
if|if
condition|(
operator|(
name|index
operator|%
literal|100
operator|)
operator|==
literal|0
condition|)
name|sLog
operator|.
name|debug
argument_list|(
literal|"  "
operator|+
name|index
operator|+
literal|" students printed"
argument_list|)
expr_stmt|;
block|}
name|lastPage
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|printReport
parameter_list|(
name|Long
name|studentId
parameter_list|)
throws|throws
name|DocumentException
block|{
name|TreeSet
argument_list|<
name|ExamSectionInfo
argument_list|>
name|sections
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|getExams
argument_list|()
control|)
block|{
if|if
condition|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|exam
operator|.
name|getSectionsIncludeCrosslistedDummies
argument_list|()
control|)
if|if
condition|(
name|section
operator|.
name|getStudentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|studentId
argument_list|)
condition|)
name|sections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sections
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|Student
name|student
init|=
operator|new
name|StudentDAO
argument_list|()
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
name|printHeader
argument_list|()
expr_stmt|;
name|printReport
argument_list|(
name|student
argument_list|,
name|sections
argument_list|)
expr_stmt|;
name|lastPage
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|StudentClassComparator
implements|implements
name|Comparator
argument_list|<
name|Class_
argument_list|>
block|{
specifier|private
name|Student
name|iStudent
decl_stmt|;
specifier|public
name|StudentClassComparator
parameter_list|(
name|Student
name|student
parameter_list|)
block|{
name|iStudent
operator|=
name|student
expr_stmt|;
block|}
specifier|public
name|CourseOffering
name|getCourse
parameter_list|(
name|Class_
name|clazz
parameter_list|)
block|{
name|CourseOffering
name|correctedCourse
init|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iStudent
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|StudentClassEnrollment
name|sce
init|=
operator|(
name|StudentClassEnrollment
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|sce
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|equals
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
argument_list|)
condition|)
block|{
name|correctedCourse
operator|=
name|sce
operator|.
name|getCourseOffering
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
return|return
name|correctedCourse
return|;
block|}
specifier|public
name|int
name|compare
parameter_list|(
name|Class_
name|c1
parameter_list|,
name|Class_
name|c2
parameter_list|)
block|{
name|CourseOffering
name|co1
init|=
name|getCourse
argument_list|(
name|c1
argument_list|)
decl_stmt|;
name|CourseOffering
name|co2
init|=
name|getCourse
argument_list|(
name|c2
argument_list|)
decl_stmt|;
name|int
name|cmp
init|=
name|co1
operator|.
name|getSubjectAreaAbbv
argument_list|()
operator|.
name|compareTo
argument_list|(
name|co2
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|co1
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|compareTo
argument_list|(
name|co2
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
if|if
condition|(
name|isParentOf
argument_list|(
name|c1
argument_list|,
name|c2
argument_list|)
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|isParentOf
argument_list|(
name|c2
argument_list|,
name|c1
argument_list|)
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|c1
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|c1
operator|.
name|getUniqueId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isParentOf
parameter_list|(
name|Class_
name|c1
parameter_list|,
name|Class_
name|c2
parameter_list|)
block|{
if|if
condition|(
name|c2
operator|.
name|getParentClass
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|c2
operator|.
name|getParentClass
argument_list|()
operator|.
name|equals
argument_list|(
name|c1
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
name|isParentOf
argument_list|(
name|c1
argument_list|,
name|c2
operator|.
name|getParentClass
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|void
name|printReport
parameter_list|(
name|Student
name|student
parameter_list|,
name|TreeSet
argument_list|<
name|ExamSectionInfo
argument_list|>
name|sections
parameter_list|)
throws|throws
name|DocumentException
block|{
name|String
name|name
init|=
name|student
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatLastFist
argument_list|)
decl_stmt|;
name|String
name|shortName
init|=
name|student
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatLastInitial
argument_list|)
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
name|setPageName
argument_list|(
name|shortName
argument_list|)
expr_stmt|;
name|setCont
argument_list|(
name|shortName
argument_list|)
expr_stmt|;
name|println
argument_list|(
literal|"Name:  "
operator|+
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getEmail
argument_list|()
operator|!=
literal|null
condition|)
name|println
argument_list|(
literal|"Email:       "
operator|+
name|student
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
name|Date
name|lastChange
init|=
literal|null
decl_stmt|;
name|String
name|changeObject
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|iClassSchedule
condition|)
block|{
name|StudentClassComparator
name|scc
init|=
operator|new
name|StudentClassComparator
argument_list|(
name|student
argument_list|)
decl_stmt|;
name|TreeSet
argument_list|<
name|Class_
argument_list|>
name|allClasses
init|=
operator|new
name|TreeSet
argument_list|(
name|scc
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|student
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|StudentClassEnrollment
name|sce
init|=
operator|(
name|StudentClassEnrollment
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|allClasses
operator|.
name|add
argument_list|(
name|sce
operator|.
name|getClazz
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|allClasses
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|setHeader
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"Subj Crsnbr "
operator|+
operator|(
name|iItype
condition|?
name|iExternal
condition|?
literal|"ExtnID "
else|:
literal|"InsTyp "
else|:
literal|""
operator|)
operator|+
literal|"Sect   Dates                     Time            Room        Instructor"
block|,
literal|"---- ------ "
operator|+
operator|(
name|iItype
condition|?
literal|"------ "
else|:
literal|""
operator|)
operator|+
literal|"----- ------------------------- --------------- ----------- -------------------------"
block|}
argument_list|)
expr_stmt|;
name|println
argument_list|(
name|mpad
argument_list|(
literal|"~ ~ ~ ~ ~ CLASS SECHEDULE ~ ~ ~ ~ ~"
argument_list|,
name|iNrChars
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getHeader
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|println
argument_list|(
name|getHeader
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|Class_
name|clazz
range|:
name|allClasses
control|)
block|{
name|String
name|instructor
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|clazz
operator|.
name|isDisplayInstructor
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|TreeSet
argument_list|(
name|clazz
operator|.
name|getClassInstructors
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|ci
init|=
operator|(
name|ClassInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|instructor
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|instructor
operator|+=
literal|", "
expr_stmt|;
name|instructor
operator|+=
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatLastInitial
argument_list|)
expr_stmt|;
block|}
block|}
name|CourseOffering
name|correctedCourse
init|=
name|scc
operator|.
name|getCourse
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
name|String
name|subject
init|=
name|correctedCourse
operator|.
name|getSubjectAreaAbbv
argument_list|()
decl_stmt|;
name|String
name|course
init|=
name|correctedCourse
operator|.
name|getCourseNbr
argument_list|()
decl_stmt|;
name|String
name|itype
init|=
name|getItype
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
name|String
name|section
init|=
operator|(
name|iUseClassSuffix
operator|&&
name|clazz
operator|.
name|getClassSuffix
argument_list|()
operator|!=
literal|null
condition|?
name|clazz
operator|.
name|getClassSuffix
argument_list|()
else|:
name|clazz
operator|.
name|getSectionNumberString
argument_list|()
operator|)
decl_stmt|;
name|ClassEvent
name|event
init|=
operator|(
name|iClass2event
operator|==
literal|null
condition|?
name|clazz
operator|.
name|getEvent
argument_list|()
else|:
name|iClass2event
operator|.
name|get
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|event
operator|==
literal|null
operator|&&
name|iClass2event
operator|!=
literal|null
operator|&&
name|getSubjectArea
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getSubjectArea
argument_list|()
operator|.
name|equals
argument_list|(
name|subject
argument_list|)
condition|)
name|event
operator|=
name|clazz
operator|.
name|getEvent
argument_list|()
expr_stmt|;
if|if
condition|(
name|event
operator|==
literal|null
operator|||
name|event
operator|.
name|getMeetings
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|println
argument_list|(
name|rpad
argument_list|(
name|subject
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|course
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|iItype
condition|?
name|rpad
argument_list|(
name|itype
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|lpad
argument_list|(
name|section
argument_list|,
literal|5
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
literal|"ARRANGED HOURS"
argument_list|,
literal|54
argument_list|)
operator|+
name|rpad
argument_list|(
name|instructor
argument_list|,
literal|55
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|MultiMeeting
name|last
init|=
literal|null
decl_stmt|;
name|String
name|lastTime
init|=
literal|null
decl_stmt|,
name|lastDate
init|=
literal|null
decl_stmt|;
name|String
name|lastLoc
init|=
literal|null
decl_stmt|;
for|for
control|(
name|MultiMeeting
name|meeting
range|:
name|event
operator|.
name|getMultiMeetings
argument_list|()
control|)
block|{
name|String
name|line
decl_stmt|;
if|if
condition|(
name|last
operator|==
literal|null
condition|)
block|{
name|line
operator|=
name|rpad
argument_list|(
name|subject
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|course
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|iItype
condition|?
name|rpad
argument_list|(
name|itype
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|lpad
argument_list|(
name|section
argument_list|,
literal|5
argument_list|)
operator|+
literal|" "
expr_stmt|;
block|}
else|else
block|{
name|line
operator|=
name|rpad
argument_list|(
literal|""
argument_list|,
literal|18
operator|+
operator|(
name|iItype
condition|?
literal|7
else|:
literal|0
operator|)
argument_list|)
expr_stmt|;
block|}
name|String
name|date
init|=
name|getMeetingDate
argument_list|(
name|meeting
argument_list|)
decl_stmt|;
name|String
name|time
init|=
name|getMeetingTime
argument_list|(
name|meeting
operator|.
name|getMeetings
argument_list|()
operator|.
name|first
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|last
operator|==
literal|null
operator|||
operator|!
name|time
operator|.
name|equals
argument_list|(
name|lastTime
argument_list|)
operator|||
operator|!
name|date
operator|.
name|equals
argument_list|(
name|lastDate
argument_list|)
condition|)
block|{
name|line
operator|+=
name|rpad
argument_list|(
name|date
operator|.
name|equals
argument_list|(
name|lastDate
argument_list|)
condition|?
literal|""
else|:
name|date
argument_list|,
literal|25
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|time
operator|.
name|equals
argument_list|(
name|lastTime
argument_list|)
condition|?
literal|""
else|:
name|time
argument_list|,
literal|15
argument_list|)
operator|+
literal|" "
expr_stmt|;
block|}
else|else
block|{
name|line
operator|+=
name|rpad
argument_list|(
literal|""
argument_list|,
literal|39
argument_list|)
expr_stmt|;
block|}
name|Long
name|permId
init|=
name|meeting
operator|.
name|getMeetings
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|getLocationPermanentId
argument_list|()
decl_stmt|;
name|Location
name|location
init|=
operator|(
name|permId
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|iLocations
operator|==
literal|null
condition|?
name|meeting
operator|.
name|getMeetings
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|getLocation
argument_list|()
else|:
name|iLocations
operator|.
name|get
argument_list|(
name|permId
argument_list|)
operator|)
operator|)
decl_stmt|;
if|if
condition|(
name|location
operator|==
literal|null
operator|&&
name|iLocations
operator|!=
literal|null
operator|&&
name|getSubjectArea
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getSubjectArea
argument_list|()
operator|.
name|equals
argument_list|(
name|subject
argument_list|)
condition|)
name|location
operator|=
name|meeting
operator|.
name|getMeetings
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|getLocation
argument_list|()
expr_stmt|;
name|String
name|loc
init|=
operator|(
name|location
operator|==
literal|null
condition|?
name|rpad
argument_list|(
literal|""
argument_list|,
literal|11
argument_list|)
else|:
name|formatRoom
argument_list|(
name|location
operator|.
name|getLabel
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|last
operator|==
literal|null
operator|||
operator|!
name|loc
operator|.
name|equals
argument_list|(
name|lastLoc
argument_list|)
condition|)
block|{
name|line
operator|+=
name|loc
operator|+
literal|" "
expr_stmt|;
block|}
else|else
block|{
name|line
operator|+=
name|rpad
argument_list|(
literal|""
argument_list|,
literal|12
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|last
operator|==
literal|null
condition|)
name|line
operator|+=
name|instructor
expr_stmt|;
name|lastLoc
operator|=
name|loc
expr_stmt|;
name|lastTime
operator|=
name|time
expr_stmt|;
name|lastDate
operator|=
name|date
expr_stmt|;
name|last
operator|=
name|meeting
expr_stmt|;
name|println
argument_list|(
name|line
argument_list|)
expr_stmt|;
if|if
condition|(
name|iNewPage
condition|)
block|{
name|last
operator|=
literal|null
expr_stmt|;
name|lastTime
operator|=
literal|null
expr_stmt|;
name|lastDate
operator|=
literal|null
expr_stmt|;
name|lastLoc
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|setHeader
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"Subj Crsnbr "
operator|+
operator|(
name|iItype
condition|?
name|iExternal
condition|?
literal|"ExtnID "
else|:
literal|"InsTyp "
else|:
literal|""
operator|)
operator|+
literal|"Sect    Meeting Times                          Date And Time                   Room      "
block|,
literal|"---- ------ "
operator|+
operator|(
name|iItype
condition|?
literal|"------ "
else|:
literal|""
operator|)
operator|+
literal|"----- -------------------------------------- -------------------------------- -----------"
block|}
argument_list|)
expr_stmt|;
name|println
argument_list|(
name|mpad
argument_list|(
literal|"~ ~ ~ ~ ~ EXAMINATION SECHEDULE ~ ~ ~ ~ ~"
argument_list|,
name|iNrChars
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getHeader
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|println
argument_list|(
name|getHeader
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|iSubjectPrinted
operator|=
literal|false
expr_stmt|;
name|String
name|lastSubject
init|=
literal|null
decl_stmt|;
name|iCoursePrinted
operator|=
literal|false
expr_stmt|;
name|String
name|lastCourse
init|=
literal|null
decl_stmt|;
name|iITypePrinted
operator|=
literal|false
expr_stmt|;
name|String
name|lastItype
init|=
literal|null
decl_stmt|;
name|iPeriodPrinted
operator|=
literal|false
expr_stmt|;
name|String
name|lastSection
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|sections
control|)
block|{
if|if
condition|(
name|iSubjectPrinted
operator|&&
operator|!
name|section
operator|.
name|getSubject
argument_list|()
operator|.
name|equals
argument_list|(
name|lastSubject
argument_list|)
condition|)
block|{
name|iSubjectPrinted
operator|=
literal|false
expr_stmt|;
name|iCoursePrinted
operator|=
literal|false
expr_stmt|;
name|iITypePrinted
operator|=
literal|false
expr_stmt|;
name|iPeriodPrinted
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|iCoursePrinted
operator|&&
operator|!
name|section
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|equals
argument_list|(
name|lastCourse
argument_list|)
condition|)
block|{
name|iCoursePrinted
operator|=
literal|false
expr_stmt|;
name|iITypePrinted
operator|=
literal|false
expr_stmt|;
name|iPeriodPrinted
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|iITypePrinted
operator|&&
operator|!
name|section
operator|.
name|getItype
argument_list|()
operator|.
name|equals
argument_list|(
name|lastItype
argument_list|)
condition|)
block|{
name|iITypePrinted
operator|=
literal|false
expr_stmt|;
name|iPeriodPrinted
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|iPeriodPrinted
operator|&&
operator|!
name|section
operator|.
name|getSection
argument_list|()
operator|.
name|equals
argument_list|(
name|lastSection
argument_list|)
condition|)
block|{
name|iPeriodPrinted
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|section
operator|.
name|getExamAssignment
argument_list|()
operator|.
name|getRooms
argument_list|()
operator|==
literal|null
operator|||
name|section
operator|.
name|getExamAssignment
argument_list|()
operator|.
name|getRooms
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|println
argument_list|(
name|rpad
argument_list|(
name|iSubjectPrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getSubject
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|iItype
condition|?
name|rpad
argument_list|(
name|iITypePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getItype
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|lpad
argument_list|(
name|iPeriodPrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getSection
argument_list|()
argument_list|,
literal|5
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|getMeetingTime
argument_list|(
name|section
argument_list|)
argument_list|,
literal|38
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
operator|(
name|section
operator|.
name|getExamAssignment
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|section
operator|.
name|getExamAssignment
argument_list|()
operator|.
name|getPeriodNameFixedLength
argument_list|()
operator|)
argument_list|,
literal|32
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|section
operator|.
name|getExamAssignment
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|iNoRoom
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|getLineNumber
argument_list|()
operator|+
name|section
operator|.
name|getExamAssignment
argument_list|()
operator|.
name|getRooms
argument_list|()
operator|.
name|size
argument_list|()
operator|>
name|iNrLines
condition|)
name|newPage
argument_list|()
expr_stmt|;
name|boolean
name|firstRoom
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ExamRoomInfo
name|room
range|:
name|section
operator|.
name|getExamAssignment
argument_list|()
operator|.
name|getRooms
argument_list|()
control|)
block|{
name|println
argument_list|(
name|rpad
argument_list|(
operator|!
name|firstRoom
operator|||
name|iSubjectPrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getSubject
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
operator|!
name|firstRoom
operator|||
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|iItype
condition|?
name|rpad
argument_list|(
operator|!
name|firstRoom
operator|||
name|iITypePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getItype
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|lpad
argument_list|(
operator|!
name|firstRoom
operator|||
name|iPeriodPrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getSection
argument_list|()
argument_list|,
literal|5
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
operator|!
name|firstRoom
condition|?
literal|""
else|:
name|getMeetingTime
argument_list|(
name|section
argument_list|)
argument_list|,
literal|38
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
operator|!
name|firstRoom
condition|?
literal|""
else|:
operator|(
name|section
operator|.
name|getExamAssignment
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|section
operator|.
name|getExamAssignment
argument_list|()
operator|.
name|getPeriodNameFixedLength
argument_list|()
operator|)
argument_list|,
literal|32
argument_list|)
operator|+
literal|" "
operator|+
name|formatRoom
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|firstRoom
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iNewPage
condition|)
block|{
name|iSubjectPrinted
operator|=
name|iITypePrinted
operator|=
name|iCoursePrinted
operator|=
name|iPeriodPrinted
operator|=
literal|false
expr_stmt|;
name|lastSubject
operator|=
name|lastItype
operator|=
name|lastCourse
operator|=
name|lastSection
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|iSubjectPrinted
operator|=
name|iITypePrinted
operator|=
name|iCoursePrinted
operator|=
name|iPeriodPrinted
operator|=
literal|true
expr_stmt|;
name|lastSubject
operator|=
name|section
operator|.
name|getSubject
argument_list|()
expr_stmt|;
name|lastItype
operator|=
name|section
operator|.
name|getItype
argument_list|()
expr_stmt|;
name|lastCourse
operator|=
name|section
operator|.
name|getCourseNbr
argument_list|()
expr_stmt|;
name|lastSection
operator|=
name|section
operator|.
name|getSection
argument_list|()
expr_stmt|;
block|}
block|}
name|boolean
name|headerPrinted
init|=
literal|false
decl_stmt|;
name|lastSubject
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|sections
control|)
block|{
name|iSubjectPrinted
operator|=
operator|(
operator|!
name|iNewPage
operator|&&
name|lastSubject
operator|!=
literal|null
operator|&&
name|lastSubject
operator|.
name|equals
argument_list|(
name|section
operator|.
name|getSubject
argument_list|()
argument_list|)
operator|)
expr_stmt|;
name|ExamAssignmentInfo
name|exam
init|=
name|section
operator|.
name|getExamAssignmentInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|exam
operator|==
literal|null
operator|||
name|exam
operator|.
name|getPeriod
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|ExamPeriod
name|period
init|=
name|exam
operator|.
name|getPeriod
argument_list|()
decl_stmt|;
name|iCoursePrinted
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|iDirect
condition|)
for|for
control|(
name|DirectConflict
name|conflict
range|:
name|exam
operator|.
name|getDirectConflicts
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|conflict
operator|.
name|getStudents
argument_list|()
operator|.
name|contains
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|iPeriodPrinted
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ExamSectionInfo
name|other
range|:
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getSectionsIncludeCrosslistedDummies
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|other
operator|.
name|getStudentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|headerPrinted
condition|)
block|{
if|if
condition|(
operator|!
name|iNewPage
condition|)
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|setHeader
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|getLineNumber
argument_list|()
operator|+
literal|5
operator|>=
name|iNrLines
condition|)
name|newPage
argument_list|()
expr_stmt|;
name|setHeader
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"Subj Crsnbr "
operator|+
operator|(
name|iItype
condition|?
name|iExternal
condition|?
literal|"ExtnID "
else|:
literal|"InsTyp "
else|:
literal|""
operator|)
operator|+
literal|"Sect  Date And Time                Type   Subj Crsnbr "
operator|+
operator|(
name|iItype
condition|?
name|iExternal
condition|?
literal|"ExtnID "
else|:
literal|"InsTyp "
else|:
literal|""
operator|)
operator|+
literal|"Sect  Time                 "
block|,
literal|"---- ------ "
operator|+
operator|(
name|iItype
condition|?
literal|"------ "
else|:
literal|""
operator|)
operator|+
literal|"----- ---------------------------- ------ ---- ------ "
operator|+
operator|(
name|iItype
condition|?
literal|"------ "
else|:
literal|""
operator|)
operator|+
literal|"----- ---------------------"
block|}
argument_list|)
expr_stmt|;
name|println
argument_list|(
name|mpad
argument_list|(
literal|"~ ~ ~ ~ ~ STUDENT CONFLICTS ~ ~ ~ ~ ~"
argument_list|,
name|iNrChars
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getHeader
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|println
argument_list|(
name|getHeader
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|setCont
argument_list|(
name|shortName
operator|+
literal|"  STUDENT CONFLICTS"
argument_list|)
expr_stmt|;
name|headerPrinted
operator|=
literal|true
expr_stmt|;
block|}
name|println
argument_list|(
name|rpad
argument_list|(
name|iSubjectPrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getSubject
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|iItype
condition|?
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getItype
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|lpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getSection
argument_list|()
argument_list|,
literal|5
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|exam
operator|.
name|getPeriodNameFixedLength
argument_list|()
argument_list|,
literal|28
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iPeriodPrinted
condition|?
literal|""
else|:
literal|"DIRECT"
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|other
operator|.
name|getSubject
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|other
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|iItype
condition|?
name|rpad
argument_list|(
name|other
operator|.
name|getItype
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|lpad
argument_list|(
name|other
operator|.
name|getSection
argument_list|()
argument_list|,
literal|5
argument_list|)
operator|+
literal|" "
operator|+
name|other
operator|.
name|getExamAssignment
argument_list|()
operator|.
name|getTimeFixedLength
argument_list|()
argument_list|)
expr_stmt|;
name|iSubjectPrinted
operator|=
name|iCoursePrinted
operator|=
name|iStudentPrinted
operator|=
name|iPeriodPrinted
operator|=
operator|!
name|iNewPage
expr_stmt|;
name|lastSubject
operator|=
name|section
operator|.
name|getSubject
argument_list|()
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|conflict
operator|.
name|getOtherEventId
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|headerPrinted
condition|)
block|{
if|if
condition|(
operator|!
name|iNewPage
condition|)
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|setHeader
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|getLineNumber
argument_list|()
operator|+
literal|5
operator|>=
name|iNrLines
condition|)
name|newPage
argument_list|()
expr_stmt|;
name|setHeader
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"Subj Crsnbr "
operator|+
operator|(
name|iItype
condition|?
name|iExternal
condition|?
literal|"ExtnID "
else|:
literal|"InsTyp "
else|:
literal|""
operator|)
operator|+
literal|"Sect  Date And Time                Type   Subj Crsnbr "
operator|+
operator|(
name|iItype
condition|?
name|iExternal
condition|?
literal|"ExtnID "
else|:
literal|"InsTyp "
else|:
literal|""
operator|)
operator|+
literal|"Sect  Time                 "
block|,
literal|"---- ------ "
operator|+
operator|(
name|iItype
condition|?
literal|"------ "
else|:
literal|""
operator|)
operator|+
literal|"----- ---------------------------- ------ ---- ------ "
operator|+
operator|(
name|iItype
condition|?
literal|"------ "
else|:
literal|""
operator|)
operator|+
literal|"----- ---------------------"
block|}
argument_list|)
expr_stmt|;
name|println
argument_list|(
name|mpad
argument_list|(
literal|"~ ~ ~ ~ ~ STUDENT CONFLICTS ~ ~ ~ ~ ~"
argument_list|,
name|iNrChars
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getHeader
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|println
argument_list|(
name|getHeader
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|setCont
argument_list|(
name|shortName
operator|+
literal|"  STUDENT CONFLICTS"
argument_list|)
expr_stmt|;
name|headerPrinted
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|conflict
operator|.
name|isOtherClass
argument_list|()
condition|)
block|{
name|println
argument_list|(
name|rpad
argument_list|(
name|iSubjectPrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getSubject
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|iItype
condition|?
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getItype
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|lpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getSection
argument_list|()
argument_list|,
literal|5
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|exam
operator|.
name|getPeriodNameFixedLength
argument_list|()
argument_list|,
literal|28
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iPeriodPrinted
condition|?
literal|""
else|:
literal|"CLASS"
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|conflict
operator|.
name|getOtherClass
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|conflict
operator|.
name|getOtherClass
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|iItype
condition|?
name|rpad
argument_list|(
name|iExternal
condition|?
name|conflict
operator|.
name|getOtherClass
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
else|:
name|conflict
operator|.
name|getOtherClass
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|lpad
argument_list|(
name|iUseClassSuffix
operator|&&
name|conflict
operator|.
name|getOtherClass
argument_list|()
operator|.
name|getClassSuffix
argument_list|()
operator|!=
literal|null
condition|?
name|conflict
operator|.
name|getOtherClass
argument_list|()
operator|.
name|getClassSuffix
argument_list|()
else|:
name|conflict
operator|.
name|getOtherClass
argument_list|()
operator|.
name|getSectionNumberString
argument_list|()
argument_list|,
literal|5
argument_list|)
operator|+
literal|" "
operator|+
name|getMeetingTime
argument_list|(
name|conflict
operator|.
name|getOtherEventTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|println
argument_list|(
name|rpad
argument_list|(
name|iSubjectPrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getSubject
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|iItype
condition|?
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getItype
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|lpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getSection
argument_list|()
argument_list|,
literal|5
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|exam
operator|.
name|getPeriodNameFixedLength
argument_list|()
argument_list|,
literal|28
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iPeriodPrinted
condition|?
literal|""
else|:
literal|"EVENT"
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|conflict
operator|.
name|getOtherEventName
argument_list|()
argument_list|,
operator|(
name|iItype
condition|?
literal|24
else|:
literal|17
operator|)
argument_list|)
operator|+
literal|" "
operator|+
name|getMeetingTime
argument_list|(
name|conflict
operator|.
name|getOtherEventTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iSubjectPrinted
operator|=
name|iCoursePrinted
operator|=
name|iStudentPrinted
operator|=
name|iPeriodPrinted
operator|=
operator|!
name|iNewPage
expr_stmt|;
name|lastSubject
operator|=
name|section
operator|.
name|getSubject
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iM2d
condition|)
for|for
control|(
name|MoreThanTwoADayConflict
name|conflict
range|:
name|exam
operator|.
name|getMoreThanTwoADaysConflicts
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|conflict
operator|.
name|getStudents
argument_list|()
operator|.
name|contains
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|iPeriodPrinted
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|ExamAssignment
name|otherExam
range|:
name|conflict
operator|.
name|getOtherExams
argument_list|()
control|)
block|{
for|for
control|(
name|ExamSectionInfo
name|other
range|:
name|otherExam
operator|.
name|getSectionsIncludeCrosslistedDummies
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|other
operator|.
name|getStudentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|headerPrinted
condition|)
block|{
if|if
condition|(
operator|!
name|iNewPage
condition|)
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|setHeader
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|getLineNumber
argument_list|()
operator|+
literal|5
operator|>=
name|iNrLines
condition|)
name|newPage
argument_list|()
expr_stmt|;
name|setHeader
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"Subj Crsnbr "
operator|+
operator|(
name|iItype
condition|?
name|iExternal
condition|?
literal|"ExtnID "
else|:
literal|"InsTyp "
else|:
literal|""
operator|)
operator|+
literal|"Sect  Date And Time                Type   Subj Crsnbr "
operator|+
operator|(
name|iItype
condition|?
name|iExternal
condition|?
literal|"ExtnID "
else|:
literal|"InsTyp "
else|:
literal|""
operator|)
operator|+
literal|"Sect  Time                 "
block|,
literal|"---- ------ "
operator|+
operator|(
name|iItype
condition|?
literal|"------ "
else|:
literal|""
operator|)
operator|+
literal|"----- ---------------------------- ------ ---- ------ "
operator|+
operator|(
name|iItype
condition|?
literal|"------ "
else|:
literal|""
operator|)
operator|+
literal|"----- ---------------------"
block|}
argument_list|)
expr_stmt|;
name|println
argument_list|(
name|mpad
argument_list|(
literal|"~ ~ ~ ~ ~ STUDENT CONFLICTS ~ ~ ~ ~ ~"
argument_list|,
name|iNrChars
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getHeader
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|println
argument_list|(
name|getHeader
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|setCont
argument_list|(
name|shortName
operator|+
literal|"  STUDENT CONFLICTS"
argument_list|)
expr_stmt|;
name|headerPrinted
operator|=
literal|true
expr_stmt|;
block|}
name|println
argument_list|(
name|rpad
argument_list|(
name|iSubjectPrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getSubject
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|iItype
condition|?
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getItype
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|lpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getSection
argument_list|()
argument_list|,
literal|5
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|exam
operator|.
name|getPeriodNameFixedLength
argument_list|()
argument_list|,
literal|28
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iPeriodPrinted
condition|?
literal|""
else|:
literal|">2-DAY"
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|other
operator|.
name|getSubject
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|other
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|iItype
condition|?
name|rpad
argument_list|(
name|other
operator|.
name|getItype
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|lpad
argument_list|(
name|other
operator|.
name|getSection
argument_list|()
argument_list|,
literal|5
argument_list|)
operator|+
literal|" "
operator|+
name|other
operator|.
name|getExamAssignment
argument_list|()
operator|.
name|getTimeFixedLength
argument_list|()
argument_list|)
expr_stmt|;
name|iSubjectPrinted
operator|=
name|iCoursePrinted
operator|=
name|iStudentPrinted
operator|=
name|iPeriodPrinted
operator|=
operator|!
name|iNewPage
expr_stmt|;
name|lastSubject
operator|=
name|section
operator|.
name|getSubject
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|iBtb
condition|)
for|for
control|(
name|BackToBackConflict
name|conflict
range|:
name|exam
operator|.
name|getBackToBackConflicts
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|conflict
operator|.
name|getStudents
argument_list|()
operator|.
name|contains
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|iPeriodPrinted
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|ExamSectionInfo
name|other
range|:
name|conflict
operator|.
name|getOtherExam
argument_list|()
operator|.
name|getSectionsIncludeCrosslistedDummies
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|other
operator|.
name|getStudentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|headerPrinted
condition|)
block|{
if|if
condition|(
operator|!
name|iNewPage
condition|)
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|setHeader
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|getLineNumber
argument_list|()
operator|+
literal|5
operator|>=
name|iNrLines
condition|)
name|newPage
argument_list|()
expr_stmt|;
name|setHeader
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"Subj Crsnbr "
operator|+
operator|(
name|iItype
condition|?
name|iExternal
condition|?
literal|"ExtnID "
else|:
literal|"InsTyp "
else|:
literal|""
operator|)
operator|+
literal|"Sect  Date And Time                Type   Subj Crsnbr "
operator|+
operator|(
name|iItype
condition|?
name|iExternal
condition|?
literal|"ExtnID "
else|:
literal|"InsTyp "
else|:
literal|""
operator|)
operator|+
literal|"Sect  Time                 "
block|,
literal|"---- ------ "
operator|+
operator|(
name|iItype
condition|?
literal|"------ "
else|:
literal|""
operator|)
operator|+
literal|"----- ---------------------------- ------ ---- ------ "
operator|+
operator|(
name|iItype
condition|?
literal|"------ "
else|:
literal|""
operator|)
operator|+
literal|"----- ---------------------"
block|}
argument_list|)
expr_stmt|;
name|println
argument_list|(
name|mpad
argument_list|(
literal|"~ ~ ~ ~ ~ STUDENT CONFLICTS ~ ~ ~ ~ ~"
argument_list|,
name|iNrChars
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getHeader
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|println
argument_list|(
name|getHeader
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|setCont
argument_list|(
name|shortName
operator|+
literal|"  STUDENT CONFLICTS"
argument_list|)
expr_stmt|;
name|headerPrinted
operator|=
literal|true
expr_stmt|;
block|}
name|println
argument_list|(
name|rpad
argument_list|(
name|iSubjectPrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getSubject
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|iItype
condition|?
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getItype
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|lpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getSection
argument_list|()
argument_list|,
literal|5
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|exam
operator|.
name|getPeriodNameFixedLength
argument_list|()
argument_list|,
literal|28
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iPeriodPrinted
condition|?
literal|""
else|:
literal|"BTB"
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|other
operator|.
name|getSubject
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|other
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|iItype
condition|?
name|rpad
argument_list|(
name|other
operator|.
name|getItype
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|lpad
argument_list|(
name|other
operator|.
name|getSection
argument_list|()
argument_list|,
literal|5
argument_list|)
operator|+
literal|" "
operator|+
name|other
operator|.
name|getExamAssignment
argument_list|()
operator|.
name|getTimeFixedLength
argument_list|()
argument_list|)
expr_stmt|;
name|iSubjectPrinted
operator|=
name|iCoursePrinted
operator|=
name|iStudentPrinted
operator|=
name|iPeriodPrinted
operator|=
operator|!
name|iNewPage
expr_stmt|;
name|lastSubject
operator|=
name|section
operator|.
name|getSubject
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|setHeader
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|setCont
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ChangeLog
name|getLastChange
parameter_list|(
name|TreeSet
argument_list|<
name|ExamSectionInfo
argument_list|>
name|sections
parameter_list|)
block|{
name|ChangeLog
name|lastChange
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|sections
control|)
block|{
name|ChangeLog
name|c
init|=
name|ChangeLog
operator|.
name|findLastChange
argument_list|(
name|section
operator|.
name|getExam
argument_list|()
operator|.
name|getExam
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
operator|&&
operator|(
name|lastChange
operator|==
literal|null
operator|||
name|lastChange
operator|.
name|getTimeStamp
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
operator|<
literal|0
operator|)
condition|)
block|{
name|lastChange
operator|=
name|c
expr_stmt|;
block|}
block|}
return|return
name|lastChange
return|;
block|}
specifier|public
name|Hashtable
argument_list|<
name|Student
argument_list|,
name|File
argument_list|>
name|printStudentReports
parameter_list|(
name|int
name|mode
parameter_list|,
name|String
name|filePrefix
parameter_list|,
name|FileGenerator
name|gen
parameter_list|)
throws|throws
name|DocumentException
throws|,
name|IOException
block|{
name|generateCache
argument_list|()
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Printing individual student reports..."
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|Student
argument_list|,
name|File
argument_list|>
name|files
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Student
argument_list|,
name|TreeSet
argument_list|<
name|ExamSectionInfo
argument_list|>
argument_list|>
name|sections
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|getExams
argument_list|()
control|)
block|{
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|exam
operator|.
name|getSectionsIncludeCrosslistedDummies
argument_list|()
control|)
block|{
for|for
control|(
name|Long
name|studentId
range|:
name|section
operator|.
name|getStudentIds
argument_list|()
control|)
block|{
name|Student
name|student
init|=
name|iStudents
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
name|TreeSet
argument_list|<
name|ExamSectionInfo
argument_list|>
name|sectionsThisStudent
init|=
name|sections
operator|.
name|get
argument_list|(
name|student
argument_list|)
decl_stmt|;
if|if
condition|(
name|sectionsThisStudent
operator|==
literal|null
condition|)
block|{
name|sectionsThisStudent
operator|=
operator|new
name|TreeSet
argument_list|<
name|ExamSectionInfo
argument_list|>
argument_list|()
expr_stmt|;
name|sections
operator|.
name|put
argument_list|(
name|student
argument_list|,
name|sectionsThisStudent
argument_list|)
expr_stmt|;
block|}
name|sectionsThisStudent
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Student
name|student
range|:
operator|new
name|TreeSet
argument_list|<
name|Student
argument_list|>
argument_list|(
name|sections
operator|.
name|keySet
argument_list|()
argument_list|)
control|)
block|{
name|TreeSet
argument_list|<
name|ExamSectionInfo
argument_list|>
name|sectionsThisStudent
init|=
name|sections
operator|.
name|get
argument_list|(
name|student
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isOfSubjectArea
argument_list|(
name|sectionsThisStudent
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|iSince
operator|!=
literal|null
condition|)
block|{
name|ChangeLog
name|last
init|=
name|getLastChange
argument_list|(
name|sectionsThisStudent
argument_list|)
decl_stmt|;
if|if
condition|(
name|last
operator|==
literal|null
operator|||
name|iSince
operator|.
name|compareTo
argument_list|(
name|last
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
operator|>
literal|0
condition|)
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"No change found for "
operator|+
name|student
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatLastFist
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
name|sLog
operator|.
name|debug
argument_list|(
literal|"  Generating file for "
operator|+
name|student
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatLastFist
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|gen
operator|.
name|generate
argument_list|(
name|filePrefix
operator|+
literal|"_"
operator|+
operator|(
name|student
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|?
name|student
operator|.
name|getExternalUniqueId
argument_list|()
else|:
name|student
operator|.
name|getLastName
argument_list|()
operator|)
argument_list|,
operator|(
name|mode
operator|==
name|sModeText
condition|?
literal|"txt"
else|:
literal|"pdf"
operator|)
argument_list|)
decl_stmt|;
comment|//ApplicationProperties.getTempFile(filePrefix+"_"+(instructor.getExternalUniqueId()!=null?instructor.getExternalUniqueId():instructor.getInstructor().getLastName()), (mode==sModeText?"txt":"pdf"));
name|open
argument_list|(
name|file
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|printHeader
argument_list|()
expr_stmt|;
name|printReport
argument_list|(
name|student
argument_list|,
name|sectionsThisStudent
argument_list|)
expr_stmt|;
name|lastPage
argument_list|()
expr_stmt|;
name|close
argument_list|()
expr_stmt|;
name|files
operator|.
name|put
argument_list|(
name|student
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
return|return
name|files
return|;
block|}
block|}
end_class

end_unit

