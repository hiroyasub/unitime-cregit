begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|reports
operator|.
name|exam
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignmentInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamRoomInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamInfo
operator|.
name|ExamSectionInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|DocumentException
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ScheduleByRoomReport
extends|extends
name|PdfLegacyExamReport
block|{
specifier|protected
specifier|static
name|Logger
name|sLog
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|ScheduleByRoomReport
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|ScheduleByRoomReport
parameter_list|(
name|int
name|mode
parameter_list|,
name|File
name|file
parameter_list|,
name|Session
name|session
parameter_list|,
name|ExamType
name|examType
parameter_list|,
name|Collection
argument_list|<
name|SubjectArea
argument_list|>
name|subjectAreas
parameter_list|,
name|Collection
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
parameter_list|)
throws|throws
name|IOException
throws|,
name|DocumentException
block|{
name|super
argument_list|(
name|mode
argument_list|,
name|file
argument_list|,
literal|"SCHEDULE BY ROOM"
argument_list|,
name|session
argument_list|,
name|examType
argument_list|,
name|subjectAreas
argument_list|,
name|exams
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|printReport
parameter_list|()
throws|throws
name|DocumentException
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"  Computing room table..."
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|ExamRoomInfo
argument_list|,
name|Hashtable
argument_list|<
name|ExamPeriod
argument_list|,
name|List
argument_list|<
name|ExamAssignmentInfo
argument_list|>
argument_list|>
argument_list|>
name|table
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|getExams
argument_list|()
control|)
block|{
if|if
condition|(
name|exam
operator|.
name|getPeriod
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|hasSubjectArea
argument_list|(
name|exam
argument_list|)
condition|)
continue|continue;
for|for
control|(
name|ExamRoomInfo
name|room
range|:
name|exam
operator|.
name|getRooms
argument_list|()
control|)
block|{
name|Hashtable
argument_list|<
name|ExamPeriod
argument_list|,
name|List
argument_list|<
name|ExamAssignmentInfo
argument_list|>
argument_list|>
name|roomAssignments
init|=
name|table
operator|.
name|get
argument_list|(
name|room
argument_list|)
decl_stmt|;
if|if
condition|(
name|roomAssignments
operator|==
literal|null
condition|)
block|{
name|roomAssignments
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|room
argument_list|,
name|roomAssignments
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
init|=
name|roomAssignments
operator|.
name|get
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|exams
operator|==
literal|null
condition|)
block|{
name|exams
operator|=
operator|new
name|ArrayList
argument_list|<
name|ExamAssignmentInfo
argument_list|>
argument_list|()
expr_stmt|;
name|roomAssignments
operator|.
name|put
argument_list|(
name|exam
operator|.
name|getPeriod
argument_list|()
argument_list|,
name|exams
argument_list|)
expr_stmt|;
block|}
name|exams
operator|.
name|add
argument_list|(
name|exam
argument_list|)
expr_stmt|;
block|}
block|}
name|TreeSet
argument_list|<
name|ExamRoomInfo
argument_list|>
name|rooms
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|Comparator
argument_list|<
name|ExamRoomInfo
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|ExamRoomInfo
name|r1
parameter_list|,
name|ExamRoomInfo
name|r2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|r1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|r1
operator|.
name|getLocationId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getLocationId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|rooms
operator|.
name|addAll
argument_list|(
name|table
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|Vector
name|periods
init|=
operator|new
name|Vector
argument_list|(
name|ExamPeriod
operator|.
name|findAll
argument_list|(
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|getExamType
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"  Printing report..."
argument_list|)
expr_stmt|;
name|setHeader
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"Bldg  Room  Capacity  ExCap Period Date And Time                          Subj Crsnbr "
operator|+
operator|(
name|iItype
condition|?
name|iExternal
condition|?
literal|"ExtnID "
else|:
literal|"InsTyp "
else|:
literal|""
operator|)
operator|+
literal|"Sect   Enrl"
block|,
literal|"----- ----- -------- ------ ------ -------------------------------------- ---- ------ "
operator|+
operator|(
name|iItype
condition|?
literal|"------ "
else|:
literal|""
operator|)
operator|+
literal|"----- -----"
block|}
argument_list|)
expr_stmt|;
name|printHeader
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|ExamRoomInfo
argument_list|>
name|i
init|=
name|rooms
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamRoomInfo
name|room
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|iPeriodPrinted
operator|=
literal|false
expr_stmt|;
name|setPageName
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|setCont
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|ExamPeriod
argument_list|,
name|List
argument_list|<
name|ExamAssignmentInfo
argument_list|>
argument_list|>
name|roomAssignments
init|=
name|table
operator|.
name|get
argument_list|(
name|room
argument_list|)
decl_stmt|;
name|ExamPeriod
name|lastPeriod
init|=
literal|null
decl_stmt|;
name|boolean
name|somethingPrinted
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|periods
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamPeriod
name|period
init|=
operator|(
name|ExamPeriod
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|iStudentPrinted
operator|=
literal|false
expr_stmt|;
name|List
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
init|=
name|roomAssignments
operator|.
name|get
argument_list|(
name|period
argument_list|)
decl_stmt|;
if|if
condition|(
name|exams
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|exams
control|)
block|{
name|ExamSectionInfo
name|lastSection
init|=
literal|null
decl_stmt|;
name|iSubjectPrinted
operator|=
name|iCoursePrinted
operator|=
name|iITypePrinted
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|exam
operator|.
name|getSectionsIncludeCrosslistedDummies
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|hasSubjectArea
argument_list|(
name|section
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|lastSection
operator|!=
literal|null
operator|&&
name|iSubjectPrinted
condition|)
block|{
name|iSubjectPrinted
operator|=
name|iCoursePrinted
operator|=
name|iITypePrinted
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getSubject
argument_list|()
operator|.
name|equals
argument_list|(
name|lastSection
operator|.
name|getSubject
argument_list|()
argument_list|)
condition|)
block|{
name|iSubjectPrinted
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|equals
argument_list|(
name|lastSection
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
condition|)
block|{
name|iCoursePrinted
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getItype
argument_list|()
operator|.
name|equals
argument_list|(
name|lastSection
operator|.
name|getItype
argument_list|()
argument_list|)
condition|)
block|{
name|iITypePrinted
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|lastPeriod
operator|!=
literal|null
operator|&&
operator|!
name|lastPeriod
operator|.
name|getDateOffset
argument_list|()
operator|.
name|equals
argument_list|(
name|period
operator|.
name|getDateOffset
argument_list|()
argument_list|)
operator|&&
operator|!
name|iNewPage
condition|)
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|lastPeriod
operator|=
name|period
expr_stmt|;
name|println
argument_list|(
operator|(
name|iPeriodPrinted
condition|?
name|rpad
argument_list|(
literal|""
argument_list|,
literal|11
argument_list|)
else|:
name|formatRoom
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|)
operator|)
operator|+
literal|" "
operator|+
name|lpad
argument_list|(
name|iPeriodPrinted
condition|?
literal|""
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|room
operator|.
name|getCapacity
argument_list|()
argument_list|)
argument_list|,
literal|8
argument_list|)
operator|+
literal|" "
operator|+
name|lpad
argument_list|(
name|iPeriodPrinted
condition|?
literal|""
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|room
operator|.
name|getExamCapacity
argument_list|()
argument_list|)
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
name|lpad
argument_list|(
name|iStudentPrinted
condition|?
literal|""
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|periods
operator|.
name|indexOf
argument_list|(
name|period
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iStudentPrinted
condition|?
literal|""
else|:
name|formatPeriod
argument_list|(
name|section
operator|.
name|getExamAssignment
argument_list|()
argument_list|)
argument_list|,
literal|38
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iSubjectPrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getSubject
argument_list|()
argument_list|,
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|iCoursePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
operator|+
operator|(
name|iItype
condition|?
name|rpad
argument_list|(
name|iITypePrinted
condition|?
literal|""
else|:
name|section
operator|.
name|getItype
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|lpad
argument_list|(
name|section
operator|.
name|getSection
argument_list|()
argument_list|,
literal|5
argument_list|)
operator|+
literal|" "
operator|+
name|lpad
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|section
operator|.
name|getNrStudents
argument_list|()
argument_list|)
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|iPeriodPrinted
operator|=
name|iStudentPrinted
operator|=
name|iSubjectPrinted
operator|=
name|iCoursePrinted
operator|=
name|iITypePrinted
operator|=
operator|!
name|iNewPage
expr_stmt|;
name|lastSection
operator|=
name|section
expr_stmt|;
name|somethingPrinted
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/*} else {                         if (lastPeriod!=null&& !lastPeriod.getDateOffset().equals(period.getDateOffset())&& !iNewPage) println("");                         lastPeriod = period;                         println((iPeriodPrinted?rpad("",11):formatRoom(room.getName()))+" "+                                 lpad(iPeriodPrinted?"":String.valueOf(room.getCapacity()),8)+" "+                                 lpad(iPeriodPrinted?"":String.valueOf(room.getExamCapacity()),6)+" "+                                 lpad(String.valueOf(periods.indexOf(period)+1),6)+" "+                                 rpad(formatPeriod(period),38)                                 );                         iPeriodPrinted = !iNewPage;                         //println("");                     }*/
block|}
block|}
name|setCont
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|somethingPrinted
operator|&&
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|newPage
argument_list|()
expr_stmt|;
block|}
block|}
name|lastPage
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

