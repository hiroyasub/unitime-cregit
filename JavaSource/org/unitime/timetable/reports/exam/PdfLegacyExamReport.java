begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|reports
operator|.
name|exam
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|PropertyConfigurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
operator|.
name|HibernateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Meeting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|_RootDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|reports
operator|.
name|PdfLegacyReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignmentInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamInfo
operator|.
name|ExamSectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|DocumentException
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|PdfLegacyExamReport
extends|extends
name|PdfLegacyReport
block|{
specifier|protected
specifier|static
name|Logger
name|sLog
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|PdfLegacyExamReport
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
name|sRegisteredReports
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|String
name|sAllRegisteredReports
init|=
literal|""
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|iExams
init|=
literal|null
decl_stmt|;
specifier|private
name|Session
name|iSession
init|=
literal|null
decl_stmt|;
specifier|private
name|SubjectArea
name|iSubjectArea
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|iExamType
init|=
operator|-
literal|1
decl_stmt|;
specifier|protected
name|boolean
name|iDispRooms
init|=
literal|true
decl_stmt|;
specifier|protected
name|String
name|iNoRoom
init|=
literal|""
decl_stmt|;
specifier|protected
name|boolean
name|iDirect
init|=
literal|true
decl_stmt|;
specifier|protected
name|boolean
name|iM2d
init|=
literal|true
decl_stmt|;
specifier|protected
name|boolean
name|iBtb
init|=
literal|false
decl_stmt|;
specifier|protected
name|int
name|iLimit
init|=
operator|-
literal|1
decl_stmt|;
specifier|protected
name|boolean
name|iItype
init|=
literal|false
decl_stmt|;
static|static
block|{
name|sRegisteredReports
operator|.
name|put
argument_list|(
literal|"crsn"
argument_list|,
name|ScheduleByCourseReport
operator|.
name|class
argument_list|)
expr_stmt|;
name|sRegisteredReports
operator|.
name|put
argument_list|(
literal|"conf"
argument_list|,
name|ConflictsByCourseAndStudentReport
operator|.
name|class
argument_list|)
expr_stmt|;
name|sRegisteredReports
operator|.
name|put
argument_list|(
literal|"iconf"
argument_list|,
name|ConflictsByCourseAndInstructorReport
operator|.
name|class
argument_list|)
expr_stmt|;
name|sRegisteredReports
operator|.
name|put
argument_list|(
literal|"pern"
argument_list|,
name|ScheduleByPeriodReport
operator|.
name|class
argument_list|)
expr_stmt|;
name|sRegisteredReports
operator|.
name|put
argument_list|(
literal|"xpern"
argument_list|,
name|ExamScheduleByPeriodReport
operator|.
name|class
argument_list|)
expr_stmt|;
name|sRegisteredReports
operator|.
name|put
argument_list|(
literal|"room"
argument_list|,
name|ScheduleByRoomReport
operator|.
name|class
argument_list|)
expr_stmt|;
name|sRegisteredReports
operator|.
name|put
argument_list|(
literal|"chart"
argument_list|,
name|PeriodChartReport
operator|.
name|class
argument_list|)
expr_stmt|;
name|sRegisteredReports
operator|.
name|put
argument_list|(
literal|"ver"
argument_list|,
name|ExamVerificationReport
operator|.
name|class
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|report
range|:
name|sRegisteredReports
operator|.
name|keySet
argument_list|()
control|)
name|sAllRegisteredReports
operator|+=
operator|(
name|sAllRegisteredReports
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
literal|","
else|:
literal|""
operator|)
operator|+
name|report
expr_stmt|;
block|}
specifier|public
name|PdfLegacyExamReport
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|title
parameter_list|,
name|Session
name|session
parameter_list|,
name|int
name|examType
parameter_list|,
name|SubjectArea
name|subjectArea
parameter_list|,
name|Collection
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
parameter_list|)
throws|throws
name|DocumentException
throws|,
name|IOException
block|{
name|super
argument_list|(
name|file
argument_list|,
name|title
argument_list|,
operator|(
name|examType
operator|==
name|Exam
operator|.
name|sExamTypeFinal
condition|?
literal|"FINAL"
else|:
literal|"EVENING"
operator|)
operator|+
literal|" EXAMINATIONS"
argument_list|,
name|title
operator|+
literal|" -- "
operator|+
name|session
operator|.
name|getLabel
argument_list|()
argument_list|,
name|session
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|subjectArea
operator|!=
literal|null
condition|)
name|setFooter
argument_list|(
name|subjectArea
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|iExams
operator|=
name|exams
expr_stmt|;
name|iSession
operator|=
name|session
expr_stmt|;
name|iExamType
operator|=
name|examType
expr_stmt|;
name|iSubjectArea
operator|=
name|subjectArea
expr_stmt|;
name|iDispRooms
operator|=
literal|"true"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"room"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|iNoRoom
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"noroom"
argument_list|,
literal|"INSTR OFFC"
argument_list|)
expr_stmt|;
name|iDirect
operator|=
literal|"true"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"direct"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|iM2d
operator|=
literal|"true"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"m2d"
argument_list|,
operator|(
name|examType
operator|==
name|Exam
operator|.
name|sExamTypeFinal
condition|?
literal|"true"
else|:
literal|"false"
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|iBtb
operator|=
literal|"true"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"btb"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
name|iLimit
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"limit"
argument_list|,
literal|"-1"
argument_list|)
argument_list|)
expr_stmt|;
name|iItype
operator|=
literal|"true"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"itype"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setDispRooms
parameter_list|(
name|boolean
name|dispRooms
parameter_list|)
block|{
name|iDispRooms
operator|=
name|dispRooms
expr_stmt|;
block|}
specifier|public
name|void
name|setNoRoom
parameter_list|(
name|String
name|noRoom
parameter_list|)
block|{
name|iNoRoom
operator|=
name|noRoom
expr_stmt|;
block|}
specifier|public
name|void
name|setDirect
parameter_list|(
name|boolean
name|direct
parameter_list|)
block|{
name|iDirect
operator|=
name|direct
expr_stmt|;
block|}
specifier|public
name|void
name|setM2d
parameter_list|(
name|boolean
name|m2d
parameter_list|)
block|{
name|iM2d
operator|=
name|m2d
expr_stmt|;
block|}
specifier|public
name|void
name|setBtb
parameter_list|(
name|boolean
name|btb
parameter_list|)
block|{
name|iBtb
operator|=
name|btb
expr_stmt|;
block|}
specifier|public
name|void
name|setLimit
parameter_list|(
name|int
name|limit
parameter_list|)
block|{
name|iLimit
operator|=
name|limit
expr_stmt|;
block|}
specifier|public
name|void
name|setItype
parameter_list|(
name|boolean
name|itype
parameter_list|)
block|{
name|iItype
operator|=
name|itype
expr_stmt|;
block|}
specifier|public
name|Collection
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|getExams
parameter_list|()
block|{
return|return
name|iExams
return|;
block|}
specifier|public
name|Session
name|getSession
parameter_list|()
block|{
return|return
name|iSession
return|;
block|}
specifier|public
name|int
name|getExamType
parameter_list|()
block|{
return|return
name|iExamType
return|;
block|}
specifier|public
name|SubjectArea
name|getSubjectArea
parameter_list|()
block|{
return|return
name|iSubjectArea
return|;
block|}
specifier|public
specifier|abstract
name|void
name|printReport
parameter_list|()
throws|throws
name|DocumentException
function_decl|;
specifier|protected
name|boolean
name|iSubjectPrinted
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|iITypePrinted
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|iConfigPrinted
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|iCoursePrinted
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|iStudentPrinted
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|iPeriodPrinted
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|iNewPage
init|=
literal|false
decl_stmt|;
specifier|protected
name|void
name|headerPrinted
parameter_list|()
block|{
name|iSubjectPrinted
operator|=
literal|false
expr_stmt|;
name|iCoursePrinted
operator|=
literal|false
expr_stmt|;
name|iStudentPrinted
operator|=
literal|false
expr_stmt|;
name|iPeriodPrinted
operator|=
literal|false
expr_stmt|;
name|iITypePrinted
operator|=
literal|false
expr_stmt|;
name|iConfigPrinted
operator|=
literal|false
expr_stmt|;
name|iNewPage
operator|=
literal|true
expr_stmt|;
block|}
specifier|protected
name|void
name|println
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|DocumentException
block|{
name|iNewPage
operator|=
literal|false
expr_stmt|;
name|super
operator|.
name|println
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getDaysCode
parameter_list|(
name|Set
name|meetings
parameter_list|)
block|{
name|int
name|daysCode
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|meetings
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Meeting
name|meeting
init|=
operator|(
name|Meeting
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Calendar
name|date
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|date
operator|.
name|setTime
argument_list|(
name|meeting
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|date
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
name|daysCode
operator||=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_MON
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
name|daysCode
operator||=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_TUE
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
name|daysCode
operator||=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_WED
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
name|daysCode
operator||=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_THU
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
name|daysCode
operator||=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_FRI
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
name|daysCode
operator||=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_SAT
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
name|daysCode
operator||=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_SUN
index|]
expr_stmt|;
break|break;
block|}
block|}
return|return
name|daysCode
return|;
block|}
specifier|public
specifier|static
name|String
name|DAY_NAMES_SHORT
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|"M"
block|,
literal|"T"
block|,
literal|"W"
block|,
literal|"R"
block|,
literal|"F"
block|,
literal|"S"
block|,
literal|"U"
block|}
decl_stmt|;
specifier|protected
name|String
name|getMeetingTime
parameter_list|(
name|ExamSectionInfo
name|section
parameter_list|)
block|{
name|String
name|meetingTime
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|section
operator|.
name|getOwner
argument_list|()
operator|.
name|getOwnerObject
argument_list|()
operator|instanceof
name|Class_
condition|)
block|{
name|SimpleDateFormat
name|dpf
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd"
argument_list|)
decl_stmt|;
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|section
operator|.
name|getOwner
argument_list|()
operator|.
name|getOwnerObject
argument_list|()
decl_stmt|;
name|Assignment
name|assignment
init|=
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
name|Event
name|event
init|=
operator|(
name|assignment
operator|==
literal|null
operator|||
name|assignment
operator|.
name|getEvent
argument_list|()
operator|==
literal|null
condition|?
name|Event
operator|.
name|findClassEvent
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
else|:
name|assignment
operator|.
name|getEvent
argument_list|()
operator|)
decl_stmt|;
name|TreeSet
name|meetings
init|=
operator|(
name|event
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|TreeSet
argument_list|(
name|event
operator|.
name|getMeetings
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|meetings
operator|!=
literal|null
operator|&&
operator|!
name|meetings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Date
name|first
init|=
operator|(
operator|(
name|Meeting
operator|)
name|meetings
operator|.
name|first
argument_list|()
operator|)
operator|.
name|getMeetingDate
argument_list|()
decl_stmt|;
name|Date
name|last
init|=
operator|(
operator|(
name|Meeting
operator|)
name|meetings
operator|.
name|last
argument_list|()
operator|)
operator|.
name|getMeetingDate
argument_list|()
decl_stmt|;
name|meetingTime
operator|+=
name|dpf
operator|.
name|format
argument_list|(
name|first
argument_list|)
operator|+
literal|" - "
operator|+
name|dpf
operator|.
name|format
argument_list|(
name|last
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|assignment
operator|!=
literal|null
operator|&&
name|assignment
operator|.
name|getDatePattern
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|DatePattern
name|dp
init|=
name|assignment
operator|.
name|getDatePattern
argument_list|()
decl_stmt|;
if|if
condition|(
name|dp
operator|!=
literal|null
operator|&&
operator|!
name|dp
operator|.
name|isDefault
argument_list|()
condition|)
block|{
if|if
condition|(
name|dp
operator|.
name|getType
argument_list|()
operator|.
name|intValue
argument_list|()
operator|==
name|DatePattern
operator|.
name|sTypeAlternate
condition|)
name|meetingTime
operator|+=
name|rpad
argument_list|(
name|dp
operator|.
name|getName
argument_list|()
argument_list|,
literal|13
argument_list|)
expr_stmt|;
else|else
block|{
name|meetingTime
operator|+=
name|dpf
operator|.
name|format
argument_list|(
name|dp
operator|.
name|getStartDate
argument_list|()
argument_list|)
operator|+
literal|" - "
operator|+
name|dpf
operator|.
name|format
argument_list|(
name|dp
operator|.
name|getEndDate
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|meetingTime
operator|=
name|rpad
argument_list|(
literal|""
argument_list|,
literal|13
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|meetings
operator|!=
literal|null
operator|&&
operator|!
name|meetings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|dayCode
init|=
name|getDaysCode
argument_list|(
name|meetings
argument_list|)
decl_stmt|;
name|String
name|days
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|DAY_CODES
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
operator|(
name|dayCode
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|i
index|]
operator|)
operator|!=
literal|0
condition|)
name|days
operator|+=
name|DAY_NAMES_SHORT
index|[
name|i
index|]
expr_stmt|;
name|meetingTime
operator|+=
literal|" "
operator|+
name|rpad
argument_list|(
name|days
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|Meeting
name|first
init|=
operator|(
name|Meeting
operator|)
name|meetings
operator|.
name|first
argument_list|()
decl_stmt|;
name|meetingTime
operator|+=
literal|" "
operator|+
name|lpad
argument_list|(
name|first
operator|.
name|startTime
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" - "
operator|+
name|lpad
argument_list|(
name|first
operator|.
name|stopTime
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|assignment
operator|!=
literal|null
condition|)
block|{
name|TimeLocation
name|t
init|=
name|assignment
operator|.
name|getTimeLocation
argument_list|()
decl_stmt|;
name|meetingTime
operator|+=
literal|" "
operator|+
name|rpad
argument_list|(
name|t
operator|.
name|getDayHeader
argument_list|()
argument_list|,
literal|5
argument_list|)
operator|+
literal|" "
operator|+
name|lpad
argument_list|(
name|t
operator|.
name|getStartTimeHeader
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" - "
operator|+
name|lpad
argument_list|(
name|t
operator|.
name|getEndTimeHeader
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|meetingTime
return|;
block|}
specifier|protected
name|String
name|getMeetingTime
parameter_list|(
name|Meeting
name|meeting
parameter_list|)
block|{
return|return
name|lpad
argument_list|(
name|meeting
operator|.
name|startTime
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" - "
operator|+
name|lpad
argument_list|(
name|meeting
operator|.
name|stopTime
argument_list|()
argument_list|,
literal|6
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getMeetingTime
parameter_list|(
name|String
name|time
parameter_list|)
block|{
name|int
name|idx
init|=
name|time
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
condition|)
return|return
name|lpad
argument_list|(
name|time
argument_list|,
literal|15
argument_list|)
return|;
name|String
name|start
init|=
name|time
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|stop
init|=
name|time
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
return|return
name|lpad
argument_list|(
name|start
argument_list|,
literal|'0'
argument_list|,
literal|6
argument_list|)
operator|+
literal|" - "
operator|+
name|lpad
argument_list|(
name|stop
argument_list|,
literal|'0'
argument_list|,
literal|6
argument_list|)
return|;
block|}
specifier|public
name|String
name|formatRoom
parameter_list|(
name|String
name|room
parameter_list|)
block|{
name|String
name|r
init|=
name|room
operator|.
name|trim
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
name|r
operator|.
name|lastIndexOf
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>=
literal|0
operator|&&
name|idx
operator|<=
literal|5
operator|&&
name|r
operator|.
name|length
argument_list|()
operator|-
name|idx
operator|-
literal|1
operator|<=
literal|5
condition|)
return|return
name|rpad
argument_list|(
name|r
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
argument_list|,
literal|5
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|room
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
argument_list|,
literal|5
argument_list|)
return|;
return|return
name|rpad
argument_list|(
name|room
argument_list|,
literal|11
argument_list|)
return|;
block|}
specifier|public
name|String
name|formatPeriod
parameter_list|(
name|ExamPeriod
name|period
parameter_list|)
block|{
return|return
name|period
operator|.
name|getStartDateLabel
argument_list|()
operator|+
literal|" "
operator|+
name|lpad
argument_list|(
name|period
operator|.
name|getStartTimeLabel
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" - "
operator|+
name|lpad
argument_list|(
name|period
operator|.
name|getEndTimeLabel
argument_list|()
argument_list|,
literal|6
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.rootLogger"
argument_list|,
literal|"DEBUG, A1"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.appender.A1"
argument_list|,
literal|"org.apache.log4j.ConsoleAppender"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.appender.A1.layout"
argument_list|,
literal|"org.apache.log4j.PatternLayout"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.appender.A1.layout.ConversionPattern"
argument_list|,
literal|"%-5p %c{2}: %m%n"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.hibernate"
argument_list|,
literal|"INFO"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.hibernate.cfg"
argument_list|,
literal|"WARN"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.hibernate.cache.EhCacheProvider"
argument_list|,
literal|"ERROR"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.unitime.commons.hibernate"
argument_list|,
literal|"INFO"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.net"
argument_list|,
literal|"INFO"
argument_list|)
expr_stmt|;
name|PropertyConfigurator
operator|.
name|configure
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|HibernateUtil
operator|.
name|configureHibernate
argument_list|(
name|ApplicationProperties
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getSessionUsingInitiativeYearTerm
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"initiative"
argument_list|,
literal|"puWestLafayetteTrdtn"
argument_list|)
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"year"
argument_list|,
literal|"2008"
argument_list|)
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"term"
argument_list|,
literal|"Spr"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Academic session not found, use properties initiative, year, and term to set academic session."
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Session: "
operator|+
name|session
argument_list|)
expr_stmt|;
block|}
name|int
name|examType
init|=
operator|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"type"
argument_list|,
literal|"final"
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"final"
argument_list|)
condition|?
name|Exam
operator|.
name|sExamTypeFinal
else|:
name|Exam
operator|.
name|sExamTypeEvening
operator|)
decl_stmt|;
name|boolean
name|assgn
init|=
literal|"true"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"assgn"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
decl_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Exam type: "
operator|+
name|Exam
operator|.
name|sExamTypes
index|[
name|examType
index|]
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Loading exams..."
argument_list|)
expr_stmt|;
name|boolean
name|perSubject
init|=
literal|"true"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"persubject"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
decl_stmt|;
name|HashSet
argument_list|<
name|SubjectArea
argument_list|>
name|subjects
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"subject"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|perSubject
operator|=
literal|true
expr_stmt|;
name|subjects
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|String
name|inSubjects
init|=
literal|""
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"subject"
argument_list|)
argument_list|,
literal|","
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
name|inSubjects
operator|+=
literal|"'"
operator|+
name|s
operator|.
name|nextToken
argument_list|()
operator|+
literal|"'"
operator|+
operator|(
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|?
literal|","
else|:
literal|""
operator|)
expr_stmt|;
name|subjects
operator|.
name|addAll
argument_list|(
operator|new
name|_RootDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select sa from SubjectArea sa where sa.session.uniqueId=:sessionId and sa.subjectAreaAbbreviation in ("
operator|+
name|inSubjects
operator|+
literal|")"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Vector
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
init|=
operator|new
name|Vector
argument_list|<
name|ExamAssignmentInfo
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|SubjectArea
argument_list|,
name|Vector
argument_list|<
name|ExamAssignmentInfo
argument_list|>
argument_list|>
name|examsPerSubj
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
if|if
condition|(
name|subjects
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|Exam
operator|.
name|findAll
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|examType
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamAssignmentInfo
name|exam
init|=
operator|(
name|assgn
condition|?
operator|new
name|ExamAssignmentInfo
argument_list|(
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
else|:
operator|new
name|ExamAssignmentInfo
argument_list|(
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|)
decl_stmt|;
name|exams
operator|.
name|add
argument_list|(
name|exam
argument_list|)
expr_stmt|;
if|if
condition|(
name|perSubject
condition|)
block|{
name|HashSet
argument_list|<
name|SubjectArea
argument_list|>
name|sas
init|=
operator|new
name|HashSet
argument_list|<
name|SubjectArea
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|exam
operator|.
name|getExam
argument_list|()
operator|.
name|getOwners
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamOwner
name|owner
init|=
operator|(
name|ExamOwner
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|SubjectArea
name|sa
init|=
name|owner
operator|.
name|getCourse
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|sas
operator|.
name|add
argument_list|(
name|sa
argument_list|)
condition|)
continue|continue;
name|Vector
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|x
init|=
name|examsPerSubj
operator|.
name|get
argument_list|(
name|sa
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|==
literal|null
condition|)
block|{
name|x
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
name|examsPerSubj
operator|.
name|put
argument_list|(
name|sa
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
name|x
operator|.
name|add
argument_list|(
name|exam
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
for|for
control|(
name|SubjectArea
name|subject
range|:
name|subjects
control|)
block|{
name|Vector
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|examsOfThisSubject
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|Exam
operator|.
name|findExamsOfSubjectArea
argument_list|(
name|subject
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|examType
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamAssignmentInfo
name|exam
init|=
operator|(
name|assgn
condition|?
operator|new
name|ExamAssignmentInfo
argument_list|(
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
else|:
operator|new
name|ExamAssignmentInfo
argument_list|(
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|)
decl_stmt|;
name|exams
operator|.
name|add
argument_list|(
name|exam
argument_list|)
expr_stmt|;
name|examsOfThisSubject
operator|.
name|add
argument_list|(
name|exam
argument_list|)
expr_stmt|;
block|}
name|examsPerSubj
operator|.
name|put
argument_list|(
name|subject
argument_list|,
name|examsOfThisSubject
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|StringTokenizer
name|stk
init|=
operator|new
name|StringTokenizer
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"report"
argument_list|,
name|sAllRegisteredReports
argument_list|)
argument_list|,
literal|","
argument_list|)
init|;
name|stk
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|reportName
init|=
name|stk
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|Class
name|reportClass
init|=
name|sRegisteredReports
operator|.
name|get
argument_list|(
name|reportName
argument_list|)
decl_stmt|;
if|if
condition|(
name|reportClass
operator|==
literal|null
condition|)
continue|continue;
name|sLog
operator|.
name|info
argument_list|(
literal|"Report: "
operator|+
name|reportClass
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
name|reportClass
operator|.
name|getName
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|perSubject
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|SubjectArea
argument_list|,
name|Vector
argument_list|<
name|ExamAssignmentInfo
argument_list|>
argument_list|>
name|entry
range|:
name|examsPerSubj
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"output"
argument_list|,
literal|"."
argument_list|)
argument_list|)
argument_list|,
name|session
operator|.
name|getAcademicTerm
argument_list|()
operator|+
name|session
operator|.
name|getYear
argument_list|()
operator|+
operator|(
name|examType
operator|==
name|Exam
operator|.
name|sExamTypeEvening
condition|?
literal|"evn"
else|:
literal|"fin"
operator|)
operator|+
literal|"_"
operator|+
name|reportName
operator|+
literal|"_"
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|".pdf"
argument_list|)
decl_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Generating report "
operator|+
name|file
operator|+
literal|" ("
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|") ..."
argument_list|)
expr_stmt|;
name|PdfLegacyExamReport
name|report
init|=
operator|(
name|PdfLegacyExamReport
operator|)
name|reportClass
operator|.
name|getConstructor
argument_list|(
name|File
operator|.
name|class
argument_list|,
name|Session
operator|.
name|class
argument_list|,
name|int
operator|.
name|class
argument_list|,
name|SubjectArea
operator|.
name|class
argument_list|,
name|Collection
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|file
argument_list|,
name|session
argument_list|,
name|examType
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|report
operator|.
name|printReport
argument_list|()
expr_stmt|;
name|report
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"output"
argument_list|,
literal|"."
argument_list|)
argument_list|)
argument_list|,
name|session
operator|.
name|getAcademicTerm
argument_list|()
operator|+
name|session
operator|.
name|getYear
argument_list|()
operator|+
operator|(
name|examType
operator|==
name|Exam
operator|.
name|sExamTypeEvening
condition|?
literal|"evn"
else|:
literal|"fin"
operator|)
operator|+
literal|"_"
operator|+
name|reportName
operator|+
literal|".pdf"
argument_list|)
decl_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Generating report "
operator|+
name|file
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|PdfLegacyExamReport
name|report
init|=
operator|(
name|PdfLegacyExamReport
operator|)
name|reportClass
operator|.
name|getConstructor
argument_list|(
name|File
operator|.
name|class
argument_list|,
name|Session
operator|.
name|class
argument_list|,
name|int
operator|.
name|class
argument_list|,
name|SubjectArea
operator|.
name|class
argument_list|,
name|Collection
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|file
argument_list|,
name|session
argument_list|,
name|examType
argument_list|,
literal|null
argument_list|,
name|exams
argument_list|)
decl_stmt|;
name|report
operator|.
name|printReport
argument_list|()
expr_stmt|;
name|report
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|sLog
operator|.
name|info
argument_list|(
literal|"Done."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

