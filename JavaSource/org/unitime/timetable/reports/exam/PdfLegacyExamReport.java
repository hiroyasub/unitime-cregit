begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 - 3.5 (University Timetabling Application)  * Copyright (C) 2008 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|reports
operator|.
name|exam
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|PropertyConfigurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Email
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
operator|.
name|HibernateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Meeting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Event
operator|.
name|MultiMeeting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExamDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExamTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|_RootDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|reports
operator|.
name|PdfLegacyReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignmentInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignmentInfo
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamInfo
operator|.
name|ExamInstructorInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamInfo
operator|.
name|ExamSectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|DateUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|DocumentException
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|PdfLegacyExamReport
extends|extends
name|PdfLegacyReport
block|{
specifier|protected
specifier|static
name|GwtConstants
name|CONSTANTS
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|Logger
name|sLog
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|PdfLegacyExamReport
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
name|sRegisteredReports
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|String
name|sAllRegisteredReports
init|=
literal|""
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|iExams
init|=
literal|null
decl_stmt|;
specifier|private
name|Session
name|iSession
init|=
literal|null
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|SubjectArea
argument_list|>
name|iSubjectAreas
init|=
literal|null
decl_stmt|;
specifier|private
name|ExamType
name|iExamType
init|=
literal|null
decl_stmt|;
specifier|protected
name|boolean
name|iDispRooms
init|=
literal|true
decl_stmt|;
specifier|protected
name|String
name|iNoRoom
init|=
literal|""
decl_stmt|;
specifier|protected
name|boolean
name|iDirect
init|=
literal|true
decl_stmt|;
specifier|protected
name|boolean
name|iM2d
init|=
literal|true
decl_stmt|;
specifier|protected
name|boolean
name|iBtb
init|=
literal|false
decl_stmt|;
specifier|protected
name|int
name|iLimit
init|=
operator|-
literal|1
decl_stmt|;
specifier|protected
name|boolean
name|iItype
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|iClassSchedule
init|=
literal|false
decl_stmt|;
specifier|protected
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|iRoomCodes
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
specifier|protected
name|String
name|iRC
init|=
literal|null
decl_stmt|;
specifier|protected
name|boolean
name|iTotals
init|=
literal|true
decl_stmt|;
specifier|protected
name|boolean
name|iUseClassSuffix
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|iDispLimits
init|=
literal|true
decl_stmt|;
specifier|protected
name|Date
name|iSince
init|=
literal|null
decl_stmt|;
specifier|protected
name|boolean
name|iExternal
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|iDispFullTermDates
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|iFullTermCheckDatePattern
init|=
literal|true
decl_stmt|;
specifier|protected
name|boolean
name|iMeetingTimeUseEvents
init|=
literal|false
decl_stmt|;
specifier|protected
specifier|static
name|DecimalFormat
name|sDF
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0.0"
argument_list|)
decl_stmt|;
static|static
block|{
name|sRegisteredReports
operator|.
name|put
argument_list|(
literal|"crsn"
argument_list|,
name|ScheduleByCourseReport
operator|.
name|class
argument_list|)
expr_stmt|;
name|sRegisteredReports
operator|.
name|put
argument_list|(
literal|"conf"
argument_list|,
name|ConflictsByCourseAndStudentReport
operator|.
name|class
argument_list|)
expr_stmt|;
name|sRegisteredReports
operator|.
name|put
argument_list|(
literal|"iconf"
argument_list|,
name|ConflictsByCourseAndInstructorReport
operator|.
name|class
argument_list|)
expr_stmt|;
name|sRegisteredReports
operator|.
name|put
argument_list|(
literal|"pern"
argument_list|,
name|ScheduleByPeriodReport
operator|.
name|class
argument_list|)
expr_stmt|;
name|sRegisteredReports
operator|.
name|put
argument_list|(
literal|"xpern"
argument_list|,
name|ExamScheduleByPeriodReport
operator|.
name|class
argument_list|)
expr_stmt|;
name|sRegisteredReports
operator|.
name|put
argument_list|(
literal|"room"
argument_list|,
name|ScheduleByRoomReport
operator|.
name|class
argument_list|)
expr_stmt|;
name|sRegisteredReports
operator|.
name|put
argument_list|(
literal|"chart"
argument_list|,
name|PeriodChartReport
operator|.
name|class
argument_list|)
expr_stmt|;
name|sRegisteredReports
operator|.
name|put
argument_list|(
literal|"xchart"
argument_list|,
name|ExamPeriodChartReport
operator|.
name|class
argument_list|)
expr_stmt|;
name|sRegisteredReports
operator|.
name|put
argument_list|(
literal|"ver"
argument_list|,
name|ExamVerificationReport
operator|.
name|class
argument_list|)
expr_stmt|;
name|sRegisteredReports
operator|.
name|put
argument_list|(
literal|"abbv"
argument_list|,
name|AbbvScheduleByCourseReport
operator|.
name|class
argument_list|)
expr_stmt|;
name|sRegisteredReports
operator|.
name|put
argument_list|(
literal|"xabbv"
argument_list|,
name|AbbvExamScheduleByCourseReport
operator|.
name|class
argument_list|)
expr_stmt|;
name|sRegisteredReports
operator|.
name|put
argument_list|(
literal|"instr"
argument_list|,
name|InstructorExamReport
operator|.
name|class
argument_list|)
expr_stmt|;
name|sRegisteredReports
operator|.
name|put
argument_list|(
literal|"stud"
argument_list|,
name|StudentExamReport
operator|.
name|class
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|report
range|:
name|sRegisteredReports
operator|.
name|keySet
argument_list|()
control|)
name|sAllRegisteredReports
operator|+=
operator|(
name|sAllRegisteredReports
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
literal|","
else|:
literal|""
operator|)
operator|+
name|report
expr_stmt|;
block|}
specifier|public
name|PdfLegacyExamReport
parameter_list|(
name|int
name|mode
parameter_list|,
name|File
name|file
parameter_list|,
name|String
name|title
parameter_list|,
name|Session
name|session
parameter_list|,
name|ExamType
name|examType
parameter_list|,
name|Collection
argument_list|<
name|SubjectArea
argument_list|>
name|subjectAreas
parameter_list|,
name|Collection
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
parameter_list|)
throws|throws
name|DocumentException
throws|,
name|IOException
block|{
name|this
argument_list|(
name|mode
argument_list|,
operator|(
name|file
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
operator|)
argument_list|,
name|title
argument_list|,
name|session
argument_list|,
name|examType
argument_list|,
name|subjectAreas
argument_list|,
name|exams
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PdfLegacyExamReport
parameter_list|(
name|int
name|mode
parameter_list|,
name|OutputStream
name|out
parameter_list|,
name|String
name|title
parameter_list|,
name|Session
name|session
parameter_list|,
name|ExamType
name|examType
parameter_list|,
name|Collection
argument_list|<
name|SubjectArea
argument_list|>
name|subjectAreas
parameter_list|,
name|Collection
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
parameter_list|)
throws|throws
name|DocumentException
throws|,
name|IOException
block|{
name|super
argument_list|(
name|mode
argument_list|,
name|out
argument_list|,
name|title
argument_list|,
name|ApplicationProperty
operator|.
name|ExaminationPdfReportTitle
operator|.
name|value
argument_list|(
name|examType
operator|==
literal|null
condition|?
literal|"all"
else|:
name|examType
operator|.
name|getReference
argument_list|()
argument_list|,
name|examType
operator|==
literal|null
condition|?
literal|"EXAMINATIONS"
else|:
name|examType
operator|.
name|getLabel
argument_list|()
operator|.
name|toUpperCase
argument_list|()
operator|+
literal|" EXAMINATIONS"
argument_list|)
argument_list|,
name|title
operator|+
literal|" -- "
operator|+
name|session
operator|.
name|getLabel
argument_list|()
argument_list|,
name|session
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|subjectAreas
operator|!=
literal|null
operator|&&
name|subjectAreas
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
name|setFooter
argument_list|(
name|subjectAreas
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|iExams
operator|=
name|exams
expr_stmt|;
name|iSession
operator|=
name|session
expr_stmt|;
name|iExamType
operator|=
name|examType
expr_stmt|;
name|iSubjectAreas
operator|=
name|subjectAreas
expr_stmt|;
name|iDispRooms
operator|=
literal|"true"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"room"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|iNoRoom
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"noroom"
argument_list|,
name|ApplicationProperty
operator|.
name|ExaminationsNoRoomText
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|iDirect
operator|=
literal|"true"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"direct"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|iM2d
operator|=
literal|"true"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"m2d"
argument_list|,
operator|(
name|examType
operator|==
literal|null
operator|||
name|examType
operator|.
name|getType
argument_list|()
operator|==
name|ExamType
operator|.
name|sExamTypeFinal
condition|?
literal|"true"
else|:
literal|"false"
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|iBtb
operator|=
literal|"true"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"btb"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
name|iLimit
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"limit"
argument_list|,
literal|"-1"
argument_list|)
argument_list|)
expr_stmt|;
name|iItype
operator|=
literal|"true"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"itype"
argument_list|,
name|ApplicationProperty
operator|.
name|ExaminationReportsShowInstructionalType
operator|.
name|value
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iTotals
operator|=
literal|"true"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"totals"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|iUseClassSuffix
operator|=
literal|"true"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"suffix"
argument_list|,
name|ApplicationProperty
operator|.
name|ExaminationReportsClassSufix
operator|.
name|value
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iExternal
operator|=
name|ApplicationProperty
operator|.
name|ExaminationReportsExternalId
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|iDispLimits
operator|=
literal|"true"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"verlimit"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|iClassSchedule
operator|=
literal|"true"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"cschedule"
argument_list|,
name|ApplicationProperty
operator|.
name|ExaminationPdfReportsIncludeClassSchedule
operator|.
name|value
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iDispFullTermDates
operator|=
literal|"true"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"fullterm"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
name|iFullTermCheckDatePattern
operator|=
name|ApplicationProperty
operator|.
name|ExaminationPdfReportsFullTermCheckDatePattern
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|iMeetingTimeUseEvents
operator|=
name|ApplicationProperty
operator|.
name|ExaminationPdfReportsUseEventsForMeetingTimes
operator|.
name|isTrue
argument_list|()
expr_stmt|;
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"since"
argument_list|)
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|iSince
operator|=
operator|new
name|SimpleDateFormat
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"sinceFormat"
argument_list|,
literal|"MM/dd/yy"
argument_list|)
argument_list|)
operator|.
name|parse
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"since"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Unable to parse date "
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"since"
argument_list|)
operator|+
literal|", reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|setRoomCode
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"roomcode"
argument_list|,
name|ApplicationProperty
operator|.
name|ExaminationRoomCode
operator|.
name|value
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setDispRooms
parameter_list|(
name|boolean
name|dispRooms
parameter_list|)
block|{
name|iDispRooms
operator|=
name|dispRooms
expr_stmt|;
block|}
specifier|public
name|void
name|setNoRoom
parameter_list|(
name|String
name|noRoom
parameter_list|)
block|{
name|iNoRoom
operator|=
name|noRoom
expr_stmt|;
block|}
specifier|public
name|void
name|setDirect
parameter_list|(
name|boolean
name|direct
parameter_list|)
block|{
name|iDirect
operator|=
name|direct
expr_stmt|;
block|}
specifier|public
name|void
name|setM2d
parameter_list|(
name|boolean
name|m2d
parameter_list|)
block|{
name|iM2d
operator|=
name|m2d
expr_stmt|;
block|}
specifier|public
name|void
name|setBtb
parameter_list|(
name|boolean
name|btb
parameter_list|)
block|{
name|iBtb
operator|=
name|btb
expr_stmt|;
block|}
specifier|public
name|void
name|setLimit
parameter_list|(
name|int
name|limit
parameter_list|)
block|{
name|iLimit
operator|=
name|limit
expr_stmt|;
block|}
specifier|public
name|void
name|setItype
parameter_list|(
name|boolean
name|itype
parameter_list|)
block|{
name|iItype
operator|=
name|itype
expr_stmt|;
block|}
specifier|public
name|void
name|setTotals
parameter_list|(
name|boolean
name|totals
parameter_list|)
block|{
name|iTotals
operator|=
name|totals
expr_stmt|;
block|}
specifier|public
name|void
name|setUseClassSuffix
parameter_list|(
name|boolean
name|useClassSuffix
parameter_list|)
block|{
name|iUseClassSuffix
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|setDispLimits
parameter_list|(
name|boolean
name|dispLimits
parameter_list|)
block|{
name|iDispLimits
operator|=
name|dispLimits
expr_stmt|;
block|}
specifier|public
name|void
name|setClassSchedule
parameter_list|(
name|boolean
name|classSchedule
parameter_list|)
block|{
name|iClassSchedule
operator|=
name|classSchedule
expr_stmt|;
block|}
specifier|public
name|void
name|setSince
parameter_list|(
name|Date
name|since
parameter_list|)
block|{
name|iSince
operator|=
name|since
expr_stmt|;
block|}
specifier|public
name|void
name|setDispFullTermDates
parameter_list|(
name|boolean
name|dispFullTermDates
parameter_list|)
block|{
name|iDispFullTermDates
operator|=
name|dispFullTermDates
expr_stmt|;
block|}
specifier|public
name|void
name|setRoomCode
parameter_list|(
name|String
name|roomCode
parameter_list|)
block|{
if|if
condition|(
name|roomCode
operator|==
literal|null
operator|||
name|roomCode
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|iRoomCodes
operator|=
literal|null
expr_stmt|;
name|iRC
operator|=
literal|null
expr_stmt|;
return|return;
block|}
name|iRoomCodes
operator|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|iRC
operator|=
literal|""
expr_stmt|;
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|roomCode
argument_list|,
literal|":;,="
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|room
init|=
name|s
operator|.
name|nextToken
argument_list|()
decl_stmt|,
name|code
init|=
operator|(
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|?
name|s
operator|.
name|nextToken
argument_list|()
else|:
literal|"#"
operator|)
decl_stmt|;
name|iRoomCodes
operator|.
name|put
argument_list|(
name|room
argument_list|,
name|code
argument_list|)
expr_stmt|;
if|if
condition|(
name|iRC
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|iRC
operator|+=
literal|", "
expr_stmt|;
name|iRC
operator|+=
name|code
operator|+
literal|":"
operator|+
name|room
expr_stmt|;
block|}
block|}
specifier|public
name|Collection
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|getExams
parameter_list|()
block|{
return|return
name|iExams
return|;
block|}
specifier|public
name|Session
name|getSession
parameter_list|()
block|{
return|return
name|iSession
return|;
block|}
specifier|public
name|ExamType
name|getExamType
parameter_list|()
block|{
return|return
name|iExamType
return|;
block|}
specifier|public
name|boolean
name|hasSubjectArea
parameter_list|(
name|String
name|abbv
parameter_list|)
block|{
if|if
condition|(
name|iSubjectAreas
operator|==
literal|null
condition|)
return|return
literal|true
return|;
for|for
control|(
name|SubjectArea
name|area
range|:
name|iSubjectAreas
control|)
if|if
condition|(
name|area
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|.
name|equals
argument_list|(
name|abbv
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|hasSubjectArea
parameter_list|(
name|SubjectArea
name|subject
parameter_list|)
block|{
return|return
name|iSubjectAreas
operator|==
literal|null
operator|||
name|iSubjectAreas
operator|.
name|contains
argument_list|(
name|subject
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|hasSubjectArea
parameter_list|(
name|ExamInfo
name|exam
parameter_list|)
block|{
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|exam
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|hasSubjectArea
argument_list|(
name|section
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|hasSubjectArea
parameter_list|(
name|ExamSectionInfo
name|section
parameter_list|)
block|{
return|return
name|hasSubjectArea
argument_list|(
name|section
operator|.
name|getSubject
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|hasSubjectAreas
parameter_list|()
block|{
return|return
name|iSubjectAreas
operator|!=
literal|null
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|SubjectArea
argument_list|>
name|getSubjectAreas
parameter_list|()
block|{
return|return
name|iSubjectAreas
return|;
block|}
specifier|public
specifier|abstract
name|void
name|printReport
parameter_list|()
throws|throws
name|DocumentException
function_decl|;
specifier|protected
name|boolean
name|iSubjectPrinted
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|iITypePrinted
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|iConfigPrinted
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|iCoursePrinted
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|iStudentPrinted
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|iPeriodPrinted
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|iNewPage
init|=
literal|false
decl_stmt|;
specifier|protected
name|void
name|headerPrinted
parameter_list|()
block|{
name|iSubjectPrinted
operator|=
literal|false
expr_stmt|;
name|iCoursePrinted
operator|=
literal|false
expr_stmt|;
name|iStudentPrinted
operator|=
literal|false
expr_stmt|;
name|iPeriodPrinted
operator|=
literal|false
expr_stmt|;
name|iITypePrinted
operator|=
literal|false
expr_stmt|;
name|iConfigPrinted
operator|=
literal|false
expr_stmt|;
name|iNewPage
operator|=
literal|true
expr_stmt|;
block|}
specifier|protected
name|void
name|println
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|DocumentException
block|{
name|iNewPage
operator|=
literal|false
expr_stmt|;
name|super
operator|.
name|println
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getDaysCode
parameter_list|(
name|Set
name|meetings
parameter_list|)
block|{
name|int
name|daysCode
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|meetings
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Meeting
name|meeting
init|=
operator|(
name|Meeting
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Calendar
name|date
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|date
operator|.
name|setTime
argument_list|(
name|meeting
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|date
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
name|daysCode
operator||=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_MON
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
name|daysCode
operator||=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_TUE
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
name|daysCode
operator||=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_WED
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
name|daysCode
operator||=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_THU
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
name|daysCode
operator||=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_FRI
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
name|daysCode
operator||=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_SAT
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
name|daysCode
operator||=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_SUN
index|]
expr_stmt|;
break|break;
block|}
block|}
return|return
name|daysCode
return|;
block|}
specifier|public
specifier|static
name|String
name|DAY_NAMES_SHORT
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|"M"
block|,
literal|"T"
block|,
literal|"W"
block|,
literal|"R"
block|,
literal|"F"
block|,
literal|"S"
block|,
literal|"U"
block|}
decl_stmt|;
specifier|public
name|String
name|getMeetingDate
parameter_list|(
name|MultiMeeting
name|m
parameter_list|)
block|{
if|if
condition|(
name|m
operator|.
name|getMeetings
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|"ARRANGED HOURS"
return|;
name|SimpleDateFormat
name|df
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd"
argument_list|)
decl_stmt|;
return|return
name|df
operator|.
name|format
argument_list|(
name|m
operator|.
name|getMeetings
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
operator|+
literal|" - "
operator|+
name|df
operator|.
name|format
argument_list|(
name|m
operator|.
name|getMeetings
argument_list|()
operator|.
name|last
argument_list|()
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|m
operator|.
name|getDays
argument_list|(
name|DAY_NAMES_SHORT
argument_list|,
name|DAY_NAMES_SHORT
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isFullTerm
parameter_list|(
name|DatePattern
name|dp
parameter_list|,
name|Date
index|[]
name|firstLast
parameter_list|)
block|{
if|if
condition|(
name|iFullTermCheckDatePattern
condition|)
block|{
if|if
condition|(
name|dp
operator|!=
literal|null
condition|)
return|return
name|dp
operator|.
name|isDefault
argument_list|()
return|;
block|}
if|if
condition|(
name|firstLast
operator|!=
literal|null
condition|)
block|{
name|Date
name|first
init|=
name|firstLast
index|[
literal|0
index|]
decl_stmt|,
name|last
init|=
name|firstLast
index|[
literal|1
index|]
decl_stmt|;
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|c
operator|.
name|setTime
argument_list|(
name|getSession
argument_list|()
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|WEEK_OF_YEAR
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|first
operator|.
name|compareTo
argument_list|(
name|c
operator|.
name|getTime
argument_list|()
argument_list|)
operator|>=
literal|0
condition|)
return|return
literal|false
return|;
name|c
operator|.
name|setTime
argument_list|(
name|getSession
argument_list|()
operator|.
name|getClassesEndDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|WEEK_OF_YEAR
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|last
operator|.
name|compareTo
argument_list|(
name|c
operator|.
name|getTime
argument_list|()
argument_list|)
operator|<=
literal|0
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isFullTerm
parameter_list|(
name|ClassEvent
name|classEvent
parameter_list|)
block|{
if|if
condition|(
name|iFullTermCheckDatePattern
condition|)
block|{
name|DatePattern
name|dp
init|=
name|classEvent
operator|.
name|getClazz
argument_list|()
operator|.
name|effectiveDatePattern
argument_list|()
decl_stmt|;
if|if
condition|(
name|dp
operator|!=
literal|null
condition|)
return|return
name|dp
operator|.
name|isDefault
argument_list|()
return|;
block|}
if|if
condition|(
name|classEvent
operator|!=
literal|null
operator|&&
operator|!
name|classEvent
operator|.
name|getMeetings
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Date
name|first
init|=
literal|null
decl_stmt|,
name|last
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|classEvent
operator|.
name|getMeetings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Meeting
name|m
init|=
operator|(
name|Meeting
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|first
operator|==
literal|null
operator|||
name|first
operator|.
name|compareTo
argument_list|(
name|m
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
operator|>
literal|0
condition|)
name|first
operator|=
name|m
operator|.
name|getMeetingDate
argument_list|()
expr_stmt|;
if|if
condition|(
name|last
operator|==
literal|null
operator|||
name|last
operator|.
name|compareTo
argument_list|(
name|m
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
name|last
operator|=
name|m
operator|.
name|getMeetingDate
argument_list|()
expr_stmt|;
block|}
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|c
operator|.
name|setTime
argument_list|(
name|getSession
argument_list|()
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|WEEK_OF_YEAR
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|first
operator|.
name|compareTo
argument_list|(
name|c
operator|.
name|getTime
argument_list|()
argument_list|)
operator|>=
literal|0
condition|)
return|return
literal|false
return|;
name|c
operator|.
name|setTime
argument_list|(
name|getSession
argument_list|()
operator|.
name|getClassesEndDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|WEEK_OF_YEAR
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|last
operator|.
name|compareTo
argument_list|(
name|c
operator|.
name|getTime
argument_list|()
argument_list|)
operator|<=
literal|0
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|protected
name|String
name|getMeetingTime
parameter_list|(
name|ExamSectionInfo
name|section
parameter_list|)
block|{
if|if
condition|(
name|section
operator|.
name|getOwner
argument_list|()
operator|.
name|getOwnerObject
argument_list|()
operator|instanceof
name|Class_
condition|)
block|{
name|SimpleDateFormat
name|dpf
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd"
argument_list|)
decl_stmt|;
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|section
operator|.
name|getOwner
argument_list|()
operator|.
name|getOwnerObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|iMeetingTimeUseEvents
condition|)
block|{
name|Set
name|meetings
init|=
operator|(
name|clazz
operator|.
name|getCachedEvent
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|clazz
operator|.
name|getCachedEvent
argument_list|()
operator|.
name|getMeetings
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|meetings
operator|!=
literal|null
operator|&&
operator|!
name|meetings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|dayCode
init|=
name|getDaysCode
argument_list|(
name|meetings
argument_list|)
decl_stmt|;
name|String
name|days
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|DAY_CODES
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
operator|(
name|dayCode
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|i
index|]
operator|)
operator|!=
literal|0
condition|)
name|days
operator|+=
name|DAY_NAMES_SHORT
index|[
name|i
index|]
expr_stmt|;
name|String
name|meetingTime
init|=
name|rpad
argument_list|(
name|days
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|Meeting
index|[]
name|firstLastMeeting
init|=
name|firstLastMeeting
argument_list|(
name|clazz
operator|.
name|getCachedEvent
argument_list|()
argument_list|)
decl_stmt|;
name|meetingTime
operator|+=
literal|" "
operator|+
name|lpad
argument_list|(
name|firstLastMeeting
index|[
literal|0
index|]
operator|.
name|startTime
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" - "
operator|+
name|lpad
argument_list|(
name|firstLastMeeting
index|[
literal|0
index|]
operator|.
name|stopTime
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
expr_stmt|;
name|Date
name|first
init|=
name|firstLastMeeting
index|[
literal|0
index|]
operator|.
name|getMeetingDate
argument_list|()
decl_stmt|;
name|Date
name|last
init|=
name|firstLastMeeting
index|[
literal|1
index|]
operator|.
name|getMeetingDate
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|iDispFullTermDates
operator|&&
name|isFullTerm
argument_list|(
name|clazz
operator|.
name|getEvent
argument_list|()
argument_list|)
condition|)
block|{
name|meetingTime
operator|+=
name|rpad
argument_list|(
literal|""
argument_list|,
literal|14
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|meetingTime
operator|+=
name|dpf
operator|.
name|format
argument_list|(
name|first
argument_list|)
operator|+
literal|" - "
operator|+
name|dpf
operator|.
name|format
argument_list|(
name|last
argument_list|)
expr_stmt|;
block|}
return|return
name|meetingTime
return|;
block|}
block|}
name|Assignment
name|assignment
init|=
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
name|Date
index|[]
name|firstLast
init|=
operator|(
name|assignment
operator|==
literal|null
condition|?
literal|null
else|:
name|firstLastDate
argument_list|(
name|assignment
operator|.
name|getTimeLocation
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|assignment
operator|!=
literal|null
condition|)
block|{
name|TimeLocation
name|t
init|=
name|assignment
operator|.
name|getTimeLocation
argument_list|()
decl_stmt|;
name|String
name|meetingTime
init|=
name|rpad
argument_list|(
name|t
operator|.
name|getDayHeader
argument_list|()
argument_list|,
literal|5
argument_list|)
operator|+
literal|" "
operator|+
name|lpad
argument_list|(
name|t
operator|.
name|getStartTimeHeader
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|,
literal|6
argument_list|)
operator|+
literal|" - "
operator|+
name|lpad
argument_list|(
name|t
operator|.
name|getEndTimeHeader
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|,
literal|6
argument_list|)
operator|+
literal|" "
decl_stmt|;
if|if
condition|(
operator|!
name|iDispFullTermDates
operator|&&
name|isFullTerm
argument_list|(
name|assignment
operator|.
name|getDatePattern
argument_list|()
argument_list|,
name|firstLast
argument_list|)
condition|)
block|{
name|meetingTime
operator|+=
name|rpad
argument_list|(
literal|""
argument_list|,
literal|14
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|firstLast
operator|!=
literal|null
condition|)
block|{
name|meetingTime
operator|+=
name|dpf
operator|.
name|format
argument_list|(
name|firstLast
index|[
literal|0
index|]
argument_list|)
operator|+
literal|" - "
operator|+
name|dpf
operator|.
name|format
argument_list|(
name|firstLast
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|meetingTime
operator|+=
name|rpad
argument_list|(
name|t
operator|.
name|getDatePatternName
argument_list|()
argument_list|,
literal|14
argument_list|)
expr_stmt|;
block|}
return|return
name|meetingTime
return|;
block|}
block|}
return|return
name|rpad
argument_list|(
literal|""
argument_list|,
literal|36
argument_list|)
return|;
block|}
specifier|private
name|Meeting
index|[]
name|firstLastMeeting
parameter_list|(
name|ClassEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Meeting
name|first
init|=
literal|null
decl_stmt|,
name|last
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|event
operator|.
name|getMeetings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Meeting
name|m
init|=
operator|(
name|Meeting
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|first
operator|==
literal|null
operator|||
name|first
operator|.
name|getMeetingDate
argument_list|()
operator|.
name|after
argument_list|(
name|m
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
condition|)
name|first
operator|=
name|m
expr_stmt|;
if|if
condition|(
name|last
operator|==
literal|null
operator|||
name|last
operator|.
name|getMeetingDate
argument_list|()
operator|.
name|before
argument_list|(
name|m
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
condition|)
name|last
operator|=
name|m
expr_stmt|;
block|}
if|if
condition|(
name|first
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|Meeting
index|[]
block|{
name|first
block|,
name|last
block|}
return|;
block|}
specifier|private
name|Date
name|iSessionFirstDate
init|=
literal|null
decl_stmt|;
specifier|private
name|Date
index|[]
name|firstLastDate
parameter_list|(
name|TimeLocation
name|time
parameter_list|)
block|{
if|if
condition|(
name|time
operator|==
literal|null
operator|||
name|time
operator|.
name|getWeekCode
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setLenient
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSessionFirstDate
operator|==
literal|null
condition|)
name|iSessionFirstDate
operator|=
name|DateUtils
operator|.
name|getDate
argument_list|(
literal|1
argument_list|,
name|iSession
operator|.
name|getPatternStartMonth
argument_list|()
argument_list|,
name|iSession
operator|.
name|getSessionStartYear
argument_list|()
argument_list|)
expr_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|iSessionFirstDate
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
name|time
operator|.
name|getWeekCode
argument_list|()
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|Date
name|first
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|idx
operator|<
name|time
operator|.
name|getWeekCode
argument_list|()
operator|.
name|size
argument_list|()
operator|&&
name|first
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|time
operator|.
name|getWeekCode
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
condition|)
block|{
name|int
name|dow
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|dow
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_MON
index|]
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_TUE
index|]
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_WED
index|]
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_THU
index|]
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_FRI
index|]
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_SAT
index|]
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_SUN
index|]
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|first
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|cal
operator|.
name|setTime
argument_list|(
name|iSessionFirstDate
argument_list|)
expr_stmt|;
name|idx
operator|=
name|time
operator|.
name|getWeekCode
argument_list|()
operator|.
name|length
argument_list|()
operator|-
literal|1
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|Date
name|last
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|idx
operator|>=
literal|0
operator|&&
name|last
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|time
operator|.
name|getWeekCode
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
condition|)
block|{
name|int
name|dow
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|dow
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_MON
index|]
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_TUE
index|]
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_WED
index|]
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_THU
index|]
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_FRI
index|]
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_SAT
index|]
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_SUN
index|]
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|idx
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|last
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|Date
index|[]
block|{
name|first
block|,
name|last
block|}
return|;
block|}
specifier|protected
name|String
name|getMeetingTime
parameter_list|(
name|Meeting
name|meeting
parameter_list|)
block|{
return|return
name|lpad
argument_list|(
name|meeting
operator|.
name|startTime
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" - "
operator|+
name|lpad
argument_list|(
name|meeting
operator|.
name|stopTime
argument_list|()
argument_list|,
literal|6
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getMeetingTime
parameter_list|(
name|String
name|time
parameter_list|)
block|{
name|int
name|idx
init|=
name|time
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
condition|)
return|return
name|lpad
argument_list|(
name|time
argument_list|,
literal|15
argument_list|)
return|;
name|String
name|start
init|=
name|time
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|stop
init|=
name|time
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
return|return
name|lpad
argument_list|(
name|start
argument_list|,
literal|'0'
argument_list|,
literal|6
argument_list|)
operator|+
literal|" - "
operator|+
name|lpad
argument_list|(
name|stop
argument_list|,
literal|'0'
argument_list|,
literal|6
argument_list|)
return|;
block|}
specifier|public
name|String
name|formatRoom
parameter_list|(
name|String
name|room
parameter_list|)
block|{
name|String
name|r
init|=
name|room
operator|.
name|trim
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
name|r
operator|.
name|lastIndexOf
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>=
literal|0
operator|&&
name|idx
operator|<=
literal|5
operator|&&
name|r
operator|.
name|length
argument_list|()
operator|-
name|idx
operator|-
literal|1
operator|<=
literal|5
condition|)
return|return
name|rpad
argument_list|(
name|r
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
argument_list|,
literal|5
argument_list|)
operator|+
literal|" "
operator|+
name|rpad
argument_list|(
name|room
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
argument_list|,
literal|5
argument_list|)
return|;
return|return
name|rpad
argument_list|(
name|room
argument_list|,
literal|11
argument_list|)
return|;
block|}
specifier|public
name|String
name|formatPeriod
parameter_list|(
name|ExamPeriod
name|period
parameter_list|)
block|{
return|return
name|period
operator|.
name|getStartDateLabel
argument_list|()
operator|+
literal|" "
operator|+
name|lpad
argument_list|(
name|period
operator|.
name|getStartTimeLabel
argument_list|()
argument_list|,
literal|6
argument_list|)
operator|+
literal|" - "
operator|+
name|lpad
argument_list|(
name|period
operator|.
name|getEndTimeLabel
argument_list|()
argument_list|,
literal|6
argument_list|)
return|;
block|}
specifier|public
name|String
name|formatPeriod
parameter_list|(
name|ExamPeriod
name|period
parameter_list|,
name|int
name|length
parameter_list|,
name|Integer
name|printOffset
parameter_list|)
block|{
return|return
name|period
operator|.
name|getStartDateLabel
argument_list|()
operator|+
literal|" "
operator|+
name|lpad
argument_list|(
name|period
operator|.
name|getStartTimeLabel
argument_list|(
name|printOffset
operator|==
literal|null
condition|?
literal|0
else|:
name|printOffset
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|,
literal|6
argument_list|)
operator|+
literal|" - "
operator|+
name|lpad
argument_list|(
name|period
operator|.
name|getEndTimeLabel
argument_list|(
name|length
argument_list|,
operator|(
name|printOffset
operator|==
literal|null
condition|?
literal|0
else|:
name|printOffset
operator|.
name|intValue
argument_list|()
operator|)
argument_list|)
argument_list|,
literal|6
argument_list|)
return|;
block|}
specifier|public
name|String
name|formatPeriod
parameter_list|(
name|ExamAssignment
name|assignment
parameter_list|)
block|{
return|return
name|assignment
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartDateLabel
argument_list|()
operator|+
literal|" "
operator|+
name|lpad
argument_list|(
name|assignment
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartTimeLabel
argument_list|(
name|assignment
operator|.
name|getPrintOffset
argument_list|()
argument_list|)
argument_list|,
literal|6
argument_list|)
operator|+
literal|" - "
operator|+
name|lpad
argument_list|(
name|assignment
operator|.
name|getPeriod
argument_list|()
operator|.
name|getEndTimeLabel
argument_list|(
name|assignment
operator|.
name|getLength
argument_list|()
argument_list|,
name|assignment
operator|.
name|getPrintOffset
argument_list|()
argument_list|)
argument_list|,
literal|6
argument_list|)
return|;
block|}
specifier|public
name|String
name|getShortDate
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|c
operator|.
name|setTime
argument_list|(
name|date
argument_list|)
expr_stmt|;
name|String
name|day
init|=
literal|""
decl_stmt|;
switch|switch
condition|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
name|day
operator|=
name|DAY_NAMES_SHORT
index|[
name|Constants
operator|.
name|DAY_MON
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
name|day
operator|=
name|DAY_NAMES_SHORT
index|[
name|Constants
operator|.
name|DAY_TUE
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
name|day
operator|=
name|DAY_NAMES_SHORT
index|[
name|Constants
operator|.
name|DAY_WED
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
name|day
operator|=
name|DAY_NAMES_SHORT
index|[
name|Constants
operator|.
name|DAY_THU
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
name|day
operator|=
name|DAY_NAMES_SHORT
index|[
name|Constants
operator|.
name|DAY_FRI
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
name|day
operator|=
name|DAY_NAMES_SHORT
index|[
name|Constants
operator|.
name|DAY_SAT
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
name|day
operator|=
name|DAY_NAMES_SHORT
index|[
name|Constants
operator|.
name|DAY_SUN
index|]
expr_stmt|;
break|break;
block|}
return|return
name|day
operator|+
literal|" "
operator|+
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd"
argument_list|)
operator|.
name|format
argument_list|(
name|date
argument_list|)
return|;
block|}
specifier|public
name|String
name|formatShortPeriod
parameter_list|(
name|ExamPeriod
name|period
parameter_list|,
name|int
name|length
parameter_list|,
name|Integer
name|printOffset
parameter_list|)
block|{
return|return
name|getShortDate
argument_list|(
name|period
operator|.
name|getStartDate
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|lpad
argument_list|(
name|period
operator|.
name|getStartTimeLabel
argument_list|(
name|printOffset
operator|==
literal|null
condition|?
literal|0
else|:
name|printOffset
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|,
literal|6
argument_list|)
operator|+
literal|"-"
operator|+
name|lpad
argument_list|(
name|period
operator|.
name|getEndTimeLabel
argument_list|(
name|length
argument_list|,
name|printOffset
operator|==
literal|null
condition|?
literal|0
else|:
name|printOffset
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|,
literal|6
argument_list|)
return|;
block|}
specifier|public
name|String
name|formatShortPeriod
parameter_list|(
name|ExamAssignment
name|assignment
parameter_list|)
block|{
return|return
name|getShortDate
argument_list|(
name|assignment
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartDate
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|lpad
argument_list|(
name|assignment
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartTimeLabel
argument_list|(
name|assignment
operator|.
name|getPrintOffset
argument_list|()
argument_list|)
argument_list|,
literal|6
argument_list|)
operator|+
literal|"-"
operator|+
name|lpad
argument_list|(
name|assignment
operator|.
name|getPeriod
argument_list|()
operator|.
name|getEndTimeLabel
argument_list|(
name|assignment
operator|.
name|getLength
argument_list|()
argument_list|,
name|assignment
operator|.
name|getPrintOffset
argument_list|()
argument_list|)
argument_list|,
literal|6
argument_list|)
return|;
block|}
specifier|public
name|String
name|formatShortPeriodNoEndTime
parameter_list|(
name|ExamAssignment
name|assignment
parameter_list|)
block|{
return|return
name|getShortDate
argument_list|(
name|assignment
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartDate
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|lpad
argument_list|(
name|assignment
operator|.
name|getPeriod
argument_list|()
operator|.
name|getStartTimeLabel
argument_list|(
name|assignment
operator|.
name|getPrintOffset
argument_list|()
argument_list|)
argument_list|,
literal|6
argument_list|)
return|;
block|}
specifier|public
name|String
name|getItype
parameter_list|(
name|CourseOffering
name|course
parameter_list|,
name|Class_
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|iExternal
condition|)
block|{
name|String
name|ext
init|=
name|clazz
operator|.
name|getExternalId
argument_list|(
name|course
argument_list|)
decl_stmt|;
return|return
operator|(
name|ext
operator|==
literal|null
condition|?
literal|""
else|:
name|ext
operator|)
return|;
block|}
else|else
return|return
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|void
name|sendEmails
parameter_list|(
name|String
name|prefix
parameter_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
name|output
parameter_list|,
name|Hashtable
argument_list|<
name|SubjectArea
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
argument_list|>
name|outputPerSubject
parameter_list|,
name|Hashtable
argument_list|<
name|ExamInstructorInfo
argument_list|,
name|File
argument_list|>
name|ireports
parameter_list|,
name|Hashtable
argument_list|<
name|Student
argument_list|,
name|File
argument_list|>
name|sreports
parameter_list|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Sending email(s)..."
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputPerSubject
operator|.
name|isEmpty
argument_list|()
operator|&&
literal|"true"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"email.deputies"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
condition|)
block|{
name|Hashtable
argument_list|<
name|TimetableManager
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
argument_list|>
name|files2send
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|SubjectArea
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
argument_list|>
name|entry
range|:
name|outputPerSubject
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getDepartment
argument_list|()
operator|.
name|getTimetableManagers
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|sLog
operator|.
name|warn
argument_list|(
literal|"No manager associated with subject area "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|" ("
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getDepartment
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|")</font>"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getDepartment
argument_list|()
operator|.
name|getTimetableManagers
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimetableManager
name|g
init|=
operator|(
name|TimetableManager
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|g
operator|.
name|getEmailAddress
argument_list|()
operator|==
literal|null
operator|||
name|g
operator|.
name|getEmailAddress
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Manager "
operator|+
name|g
operator|.
name|getName
argument_list|()
operator|+
literal|" has no email address."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
name|files
init|=
name|files2send
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|==
literal|null
condition|)
block|{
name|files
operator|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
argument_list|()
expr_stmt|;
name|files2send
operator|.
name|put
argument_list|(
name|g
argument_list|,
name|files
argument_list|)
expr_stmt|;
block|}
name|files
operator|.
name|putAll
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|files2send
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Nothing to send."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Set
argument_list|<
name|TimetableManager
argument_list|>
name|managers
init|=
name|files2send
operator|.
name|keySet
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|managers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|TimetableManager
name|manager
init|=
name|managers
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
name|files
init|=
name|files2send
operator|.
name|get
argument_list|(
name|manager
argument_list|)
decl_stmt|;
name|managers
operator|.
name|remove
argument_list|(
name|manager
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Sending email to "
operator|+
name|manager
operator|.
name|getName
argument_list|()
operator|+
literal|" ("
operator|+
name|manager
operator|.
name|getEmailAddress
argument_list|()
operator|+
literal|")..."
argument_list|)
expr_stmt|;
try|try
block|{
name|Email
name|mail
init|=
name|Email
operator|.
name|createEmail
argument_list|()
decl_stmt|;
name|mail
operator|.
name|setSubject
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"email.subject"
argument_list|,
literal|"Examination Report"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"email.body"
argument_list|)
decl_stmt|;
name|String
name|url
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"email.url"
argument_list|)
decl_stmt|;
name|mail
operator|.
name|setText
argument_list|(
operator|(
name|message
operator|==
literal|null
condition|?
literal|""
else|:
name|message
operator|+
literal|"\r\n\r\n"
operator|)
operator|+
operator|(
name|url
operator|==
literal|null
condition|?
literal|""
else|:
literal|"For an up-to-date examination report, please visit "
operator|+
name|url
operator|+
literal|"/\r\n\r\n"
operator|)
operator|+
literal|"This email was automatically generated by "
operator|+
literal|"UniTime "
operator|+
name|Constants
operator|.
name|getVersion
argument_list|()
operator|+
literal|" (Univesity Timetabling Application, http://www.unitime.org)."
argument_list|)
expr_stmt|;
name|mail
operator|.
name|addRecipient
argument_list|(
name|manager
operator|.
name|getEmailAddress
argument_list|()
argument_list|,
name|manager
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|TimetableManager
argument_list|>
name|i
init|=
name|managers
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimetableManager
name|m
init|=
operator|(
name|TimetableManager
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|.
name|equals
argument_list|(
name|files2send
operator|.
name|get
argument_list|(
name|m
argument_list|)
argument_list|)
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"  Including "
operator|+
name|m
operator|.
name|getName
argument_list|()
operator|+
literal|" ("
operator|+
name|m
operator|.
name|getEmailAddress
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|mail
operator|.
name|addRecipient
argument_list|(
name|m
operator|.
name|getEmailAddress
argument_list|()
argument_list|,
name|m
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"email.to"
argument_list|)
operator|!=
literal|null
condition|)
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"email.to"
argument_list|)
argument_list|,
literal|";,\n\r "
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
name|mail
operator|.
name|addRecipient
argument_list|(
name|s
operator|.
name|nextToken
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"email.cc"
argument_list|)
operator|!=
literal|null
condition|)
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"email.cc"
argument_list|)
argument_list|,
literal|";,\n\r "
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
name|mail
operator|.
name|addRecipientCC
argument_list|(
name|s
operator|.
name|nextToken
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"email.bcc"
argument_list|)
operator|!=
literal|null
condition|)
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"email.bcc"
argument_list|)
argument_list|,
literal|";,\n\r "
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
name|mail
operator|.
name|addRecipientBCC
argument_list|(
name|s
operator|.
name|nextToken
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
name|entry
range|:
name|files
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|mail
operator|.
name|addAttachement
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|prefix
operator|+
literal|"_"
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"  Attaching<a href='temp/"
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"'>"
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"</a>"
argument_list|)
expr_stmt|;
block|}
name|mail
operator|.
name|send
argument_list|()
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Email sent."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Unable to send email: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
try|try
block|{
name|Email
name|mail
init|=
name|Email
operator|.
name|createEmail
argument_list|()
decl_stmt|;
name|mail
operator|.
name|setSubject
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"email.subject"
argument_list|,
literal|"Examination Report"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"email.body"
argument_list|)
decl_stmt|;
name|String
name|url
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"email.url"
argument_list|)
decl_stmt|;
name|mail
operator|.
name|setText
argument_list|(
operator|(
name|message
operator|==
literal|null
condition|?
literal|""
else|:
name|message
operator|+
literal|"\r\n\r\n"
operator|)
operator|+
operator|(
name|url
operator|==
literal|null
condition|?
literal|""
else|:
literal|"For an up-to-date examination report, please visit "
operator|+
name|url
operator|+
literal|"/\r\n\r\n"
operator|)
operator|+
literal|"This email was automatically generated by "
operator|+
literal|"UniTime "
operator|+
name|Constants
operator|.
name|getVersion
argument_list|()
operator|+
literal|" (Univesity Timetabling Application, http://www.unitime.org)."
argument_list|)
expr_stmt|;
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"email.to"
argument_list|)
operator|!=
literal|null
condition|)
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"email.to"
argument_list|)
argument_list|,
literal|";,\n\r "
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
name|mail
operator|.
name|addRecipient
argument_list|(
name|s
operator|.
name|nextToken
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"email.cc"
argument_list|)
operator|!=
literal|null
condition|)
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"email.cc"
argument_list|)
argument_list|,
literal|";,\n\r "
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
name|mail
operator|.
name|addRecipientCC
argument_list|(
name|s
operator|.
name|nextToken
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"email.bcc"
argument_list|)
operator|!=
literal|null
condition|)
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"email.bcc"
argument_list|)
argument_list|,
literal|";,\n\r "
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
name|mail
operator|.
name|addRecipientBCC
argument_list|(
name|s
operator|.
name|nextToken
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
name|entry
range|:
name|output
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|mail
operator|.
name|addAttachement
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|prefix
operator|+
literal|"_"
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|mail
operator|.
name|send
argument_list|()
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Email sent."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Unable to send email: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"email.instructors"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
operator|&&
name|ireports
operator|!=
literal|null
operator|&&
operator|!
name|ireports
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Emailing instructors..."
argument_list|)
expr_stmt|;
for|for
control|(
name|ExamInstructorInfo
name|instructor
range|:
operator|new
name|TreeSet
argument_list|<
name|ExamInstructorInfo
argument_list|>
argument_list|(
name|ireports
operator|.
name|keySet
argument_list|()
argument_list|)
control|)
block|{
name|File
name|report
init|=
name|ireports
operator|.
name|get
argument_list|(
name|instructor
argument_list|)
decl_stmt|;
name|String
name|email
init|=
name|instructor
operator|.
name|getInstructor
argument_list|()
operator|.
name|getEmail
argument_list|()
decl_stmt|;
if|if
condition|(
name|email
operator|==
literal|null
operator|||
name|email
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Unable to email<a href='temp/"
operator|+
name|report
operator|.
name|getName
argument_list|()
operator|+
literal|"'>"
operator|+
name|instructor
operator|.
name|getName
argument_list|()
operator|+
literal|"</a> -- instructor has no email address."
argument_list|)
expr_stmt|;
continue|continue;
block|}
try|try
block|{
name|Email
name|mail
init|=
name|Email
operator|.
name|createEmail
argument_list|()
decl_stmt|;
name|mail
operator|.
name|setSubject
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"email.subject"
argument_list|,
literal|"Examination Report"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"email.body"
argument_list|)
decl_stmt|;
name|String
name|url
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"email.url"
argument_list|)
decl_stmt|;
name|mail
operator|.
name|setText
argument_list|(
operator|(
name|message
operator|==
literal|null
condition|?
literal|""
else|:
name|message
operator|+
literal|"\r\n\r\n"
operator|)
operator|+
operator|(
name|url
operator|==
literal|null
condition|?
literal|""
else|:
literal|"For an up-to-date examination report, please visit "
operator|+
name|url
operator|+
literal|"/\r\n\r\n"
operator|)
operator|+
literal|"This email was automatically generated by "
operator|+
literal|"UniTime "
operator|+
name|Constants
operator|.
name|getVersion
argument_list|()
operator|+
literal|" (Univesity Timetabling Application, http://www.unitime.org)."
argument_list|)
expr_stmt|;
name|mail
operator|.
name|addRecipient
argument_list|(
name|email
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"email.cc"
argument_list|)
operator|!=
literal|null
condition|)
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"email.cc"
argument_list|)
argument_list|,
literal|";,\n\r "
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
name|mail
operator|.
name|addRecipientCC
argument_list|(
name|s
operator|.
name|nextToken
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"email.bcc"
argument_list|)
operator|!=
literal|null
condition|)
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"email.bcc"
argument_list|)
argument_list|,
literal|";,\n\r "
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
name|mail
operator|.
name|addRecipientBCC
argument_list|(
name|s
operator|.
name|nextToken
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mail
operator|.
name|addAttachement
argument_list|(
name|report
argument_list|,
name|prefix
operator|+
operator|(
name|report
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".txt"
argument_list|)
condition|?
literal|".txt"
else|:
literal|".pdf"
operator|)
argument_list|)
expr_stmt|;
name|mail
operator|.
name|send
argument_list|()
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"&nbsp;&nbsp;An email was sent to<a href='temp/"
operator|+
name|report
operator|.
name|getName
argument_list|()
operator|+
literal|"'>"
operator|+
name|instructor
operator|.
name|getName
argument_list|()
operator|+
literal|"</a>."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Unable to email<a href='temp/"
operator|+
name|report
operator|.
name|getName
argument_list|()
operator|+
literal|"'>"
operator|+
name|instructor
operator|.
name|getName
argument_list|()
operator|+
literal|"</a> -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|sLog
operator|.
name|info
argument_list|(
literal|"Emails sent."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"email.students"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
operator|&&
name|sreports
operator|!=
literal|null
operator|&&
operator|!
name|sreports
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Emailing instructors..."
argument_list|)
expr_stmt|;
for|for
control|(
name|Student
name|student
range|:
operator|new
name|TreeSet
argument_list|<
name|Student
argument_list|>
argument_list|(
name|sreports
operator|.
name|keySet
argument_list|()
argument_list|)
control|)
block|{
name|File
name|report
init|=
name|sreports
operator|.
name|get
argument_list|(
name|student
argument_list|)
decl_stmt|;
name|String
name|email
init|=
name|student
operator|.
name|getEmail
argument_list|()
decl_stmt|;
if|if
condition|(
name|email
operator|==
literal|null
operator|||
name|email
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"  Unable to email<a href='temp/"
operator|+
name|report
operator|.
name|getName
argument_list|()
operator|+
literal|"'>"
operator|+
name|student
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatLastFist
argument_list|)
operator|+
literal|"</a> -- student has no email address."
argument_list|)
expr_stmt|;
continue|continue;
block|}
try|try
block|{
name|Email
name|mail
init|=
name|Email
operator|.
name|createEmail
argument_list|()
decl_stmt|;
name|mail
operator|.
name|setSubject
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"email.subject"
argument_list|,
literal|"Examination Report"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"email.body"
argument_list|)
decl_stmt|;
name|String
name|url
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"email.url"
argument_list|)
decl_stmt|;
name|mail
operator|.
name|setText
argument_list|(
operator|(
name|message
operator|==
literal|null
condition|?
literal|""
else|:
name|message
operator|+
literal|"\r\n\r\n"
operator|)
operator|+
operator|(
name|url
operator|==
literal|null
condition|?
literal|""
else|:
literal|"For an up-to-date examination report, please visit "
operator|+
name|url
operator|+
literal|"/\r\n\r\n"
operator|)
operator|+
literal|"This email was automatically generated by "
operator|+
literal|"UniTime "
operator|+
name|Constants
operator|.
name|getVersion
argument_list|()
operator|+
literal|" (Univesity Timetabling Application, http://www.unitime.org)."
argument_list|)
expr_stmt|;
name|mail
operator|.
name|addRecipient
argument_list|(
name|email
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"email.cc"
argument_list|)
operator|!=
literal|null
condition|)
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"email.cc"
argument_list|)
argument_list|,
literal|";,\n\r "
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
name|mail
operator|.
name|addRecipientCC
argument_list|(
name|s
operator|.
name|nextToken
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"email.bcc"
argument_list|)
operator|!=
literal|null
condition|)
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"email.bcc"
argument_list|)
argument_list|,
literal|";,\n\r "
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
name|mail
operator|.
name|addRecipientBCC
argument_list|(
name|s
operator|.
name|nextToken
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mail
operator|.
name|addAttachement
argument_list|(
name|report
argument_list|,
name|prefix
operator|+
operator|(
name|report
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".txt"
argument_list|)
condition|?
literal|".txt"
else|:
literal|".pdf"
operator|)
argument_list|)
expr_stmt|;
name|mail
operator|.
name|send
argument_list|()
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|" An email was sent to<a href='temp/"
operator|+
name|report
operator|.
name|getName
argument_list|()
operator|+
literal|"'>"
operator|+
name|student
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatLastFist
argument_list|)
operator|+
literal|"</a>."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Unable to email<a href='temp/"
operator|+
name|report
operator|.
name|getName
argument_list|()
operator|+
literal|"'>"
operator|+
name|student
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatLastFist
argument_list|)
operator|+
literal|"</a> -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
name|sLog
operator|.
name|info
argument_list|(
literal|"Emails sent."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|TreeSet
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|loadExams
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|Long
name|examTypeId
parameter_list|,
name|boolean
name|assgn
parameter_list|,
name|boolean
name|ignNoEnrl
parameter_list|,
name|boolean
name|eventConf
parameter_list|)
throws|throws
name|Exception
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Loading exams..."
argument_list|)
expr_stmt|;
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Exam
argument_list|>
name|exams
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select x from Exam x where x.session.uniqueId=:sessionId and x.examType.uniqueId=:examTypeId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examTypeId"
argument_list|,
name|examTypeId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|exams
operator|.
name|put
argument_list|(
name|exam
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|exam
argument_list|)
expr_stmt|;
block|}
name|sLog
operator|.
name|info
argument_list|(
literal|"  Fetching related objects (class)..."
argument_list|)
expr_stmt|;
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c from Class_ c, ExamOwner o where o.exam.session.uniqueId=:sessionId and o.exam.examType.uniqueId=:examTypeId and o.ownerType=:classType and c.uniqueId=o.ownerId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examTypeId"
argument_list|,
name|examTypeId
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"classType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeClass
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"  Fetching related objects (config)..."
argument_list|)
expr_stmt|;
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c from InstrOfferingConfig c, ExamOwner o where o.exam.session.uniqueId=:sessionId and o.exam.examType.uniqueId=:examTypeId and o.ownerType=:configType and c.uniqueId=o.ownerId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examTypeId"
argument_list|,
name|examTypeId
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"configType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeConfig
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"  Fetching related objects (course)..."
argument_list|)
expr_stmt|;
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c from CourseOffering c, ExamOwner o where o.exam.session.uniqueId=:sessionId and o.exam.examType.uniqueId=:examTypeId and o.ownerType=:courseType and c.uniqueId=o.ownerId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examTypeId"
argument_list|,
name|examTypeId
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"courseType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeCourse
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"  Fetching related objects (offering)..."
argument_list|)
expr_stmt|;
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c from InstructionalOffering c, ExamOwner o where o.exam.session.uniqueId=:sessionId and o.exam.examType.uniqueId=:examTypeId and o.ownerType=:offeringType and c.uniqueId=o.ownerId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examTypeId"
argument_list|,
name|examTypeId
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"offeringType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeOffering
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"  Fetching related class events..."
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|ClassEvent
argument_list|>
name|classEvents
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|ExamDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c from ClassEvent c left join fetch c.meetings m, ExamOwner o where o.exam.session.uniqueId=:sessionId and o.exam.examType.uniqueId=:examTypeId and o.ownerType=:classType and c.clazz.uniqueId=o.ownerId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examTypeId"
argument_list|,
name|examTypeId
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"classType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeClass
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassEvent
name|ce
init|=
operator|(
name|ClassEvent
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|classEvents
operator|.
name|put
argument_list|(
name|ce
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|ce
argument_list|)
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|owner2students
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Exam
argument_list|>
argument_list|>
name|student2exams
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|>
name|owner2course2students
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
if|if
condition|(
name|assgn
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"  Loading students (class)..."
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select x.uniqueId, o.uniqueId, e.student.uniqueId, e.courseOffering.uniqueId from "
operator|+
literal|"Exam x inner join x.owners o, "
operator|+
literal|"StudentClassEnrollment e inner join e.clazz c "
operator|+
literal|"where x.session.uniqueId=:sessionId and x.examType.uniqueId=:examTypeId and "
operator|+
literal|"o.ownerType="
operator|+
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
operator|.
name|sOwnerTypeClass
operator|+
literal|" and "
operator|+
literal|"o.ownerId=c.uniqueId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examTypeId"
argument_list|,
name|examTypeId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|examId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Long
name|ownerId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|2
index|]
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|studentsOfOwner
init|=
name|owner2students
operator|.
name|get
argument_list|(
name|ownerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentsOfOwner
operator|==
literal|null
condition|)
block|{
name|studentsOfOwner
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|owner2students
operator|.
name|put
argument_list|(
name|ownerId
argument_list|,
name|studentsOfOwner
argument_list|)
expr_stmt|;
block|}
name|studentsOfOwner
operator|.
name|add
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Exam
argument_list|>
name|examsOfStudent
init|=
name|student2exams
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|examsOfStudent
operator|==
literal|null
condition|)
block|{
name|examsOfStudent
operator|=
operator|new
name|HashSet
argument_list|<
name|Exam
argument_list|>
argument_list|()
expr_stmt|;
name|student2exams
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|examsOfStudent
argument_list|)
expr_stmt|;
block|}
name|examsOfStudent
operator|.
name|add
argument_list|(
name|exams
operator|.
name|get
argument_list|(
name|examId
argument_list|)
argument_list|)
expr_stmt|;
name|Long
name|courseId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|3
index|]
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|course2students
init|=
name|owner2course2students
operator|.
name|get
argument_list|(
name|ownerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|course2students
operator|==
literal|null
condition|)
block|{
name|course2students
operator|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|owner2course2students
operator|.
name|put
argument_list|(
name|ownerId
argument_list|,
name|course2students
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Long
argument_list|>
name|studentsOfCourse
init|=
name|course2students
operator|.
name|get
argument_list|(
name|courseId
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentsOfCourse
operator|==
literal|null
condition|)
block|{
name|studentsOfCourse
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|course2students
operator|.
name|put
argument_list|(
name|courseId
argument_list|,
name|studentsOfCourse
argument_list|)
expr_stmt|;
block|}
name|studentsOfCourse
operator|.
name|add
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
block|}
name|sLog
operator|.
name|info
argument_list|(
literal|"  Loading students (config)..."
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select x.uniqueId, o.uniqueId, e.student.uniqueId, e.courseOffering.uniqueId from "
operator|+
literal|"Exam x inner join x.owners o, "
operator|+
literal|"StudentClassEnrollment e inner join e.clazz c "
operator|+
literal|"inner join c.schedulingSubpart.instrOfferingConfig ioc "
operator|+
literal|"where x.session.uniqueId=:sessionId and x.examType.uniqueId=:examTypeId and "
operator|+
literal|"o.ownerType="
operator|+
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
operator|.
name|sOwnerTypeConfig
operator|+
literal|" and "
operator|+
literal|"o.ownerId=ioc.uniqueId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examTypeId"
argument_list|,
name|examTypeId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|examId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Long
name|ownerId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|2
index|]
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|studentsOfOwner
init|=
name|owner2students
operator|.
name|get
argument_list|(
name|ownerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentsOfOwner
operator|==
literal|null
condition|)
block|{
name|studentsOfOwner
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|owner2students
operator|.
name|put
argument_list|(
name|ownerId
argument_list|,
name|studentsOfOwner
argument_list|)
expr_stmt|;
block|}
name|studentsOfOwner
operator|.
name|add
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Exam
argument_list|>
name|examsOfStudent
init|=
name|student2exams
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|examsOfStudent
operator|==
literal|null
condition|)
block|{
name|examsOfStudent
operator|=
operator|new
name|HashSet
argument_list|<
name|Exam
argument_list|>
argument_list|()
expr_stmt|;
name|student2exams
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|examsOfStudent
argument_list|)
expr_stmt|;
block|}
name|examsOfStudent
operator|.
name|add
argument_list|(
name|exams
operator|.
name|get
argument_list|(
name|examId
argument_list|)
argument_list|)
expr_stmt|;
name|Long
name|courseId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|3
index|]
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|course2students
init|=
name|owner2course2students
operator|.
name|get
argument_list|(
name|ownerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|course2students
operator|==
literal|null
condition|)
block|{
name|course2students
operator|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|owner2course2students
operator|.
name|put
argument_list|(
name|ownerId
argument_list|,
name|course2students
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Long
argument_list|>
name|studentsOfCourse
init|=
name|course2students
operator|.
name|get
argument_list|(
name|courseId
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentsOfCourse
operator|==
literal|null
condition|)
block|{
name|studentsOfCourse
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|course2students
operator|.
name|put
argument_list|(
name|courseId
argument_list|,
name|studentsOfCourse
argument_list|)
expr_stmt|;
block|}
name|studentsOfCourse
operator|.
name|add
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
block|}
name|sLog
operator|.
name|info
argument_list|(
literal|"  Loading students (course)..."
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select x.uniqueId, o.uniqueId, e.student.uniqueId, e.courseOffering.uniqueId from "
operator|+
literal|"Exam x inner join x.owners o, "
operator|+
literal|"StudentClassEnrollment e inner join e.courseOffering co "
operator|+
literal|"where x.session.uniqueId=:sessionId and x.examType.uniqueId=:examTypeId and "
operator|+
literal|"o.ownerType="
operator|+
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
operator|.
name|sOwnerTypeCourse
operator|+
literal|" and "
operator|+
literal|"o.ownerId=co.uniqueId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examTypeId"
argument_list|,
name|examTypeId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|examId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Long
name|ownerId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|2
index|]
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|studentsOfOwner
init|=
name|owner2students
operator|.
name|get
argument_list|(
name|ownerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentsOfOwner
operator|==
literal|null
condition|)
block|{
name|studentsOfOwner
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|owner2students
operator|.
name|put
argument_list|(
name|ownerId
argument_list|,
name|studentsOfOwner
argument_list|)
expr_stmt|;
block|}
name|studentsOfOwner
operator|.
name|add
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Exam
argument_list|>
name|examsOfStudent
init|=
name|student2exams
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|examsOfStudent
operator|==
literal|null
condition|)
block|{
name|examsOfStudent
operator|=
operator|new
name|HashSet
argument_list|<
name|Exam
argument_list|>
argument_list|()
expr_stmt|;
name|student2exams
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|examsOfStudent
argument_list|)
expr_stmt|;
block|}
name|examsOfStudent
operator|.
name|add
argument_list|(
name|exams
operator|.
name|get
argument_list|(
name|examId
argument_list|)
argument_list|)
expr_stmt|;
name|Long
name|courseId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|3
index|]
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|course2students
init|=
name|owner2course2students
operator|.
name|get
argument_list|(
name|ownerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|course2students
operator|==
literal|null
condition|)
block|{
name|course2students
operator|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|owner2course2students
operator|.
name|put
argument_list|(
name|ownerId
argument_list|,
name|course2students
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Long
argument_list|>
name|studentsOfCourse
init|=
name|course2students
operator|.
name|get
argument_list|(
name|courseId
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentsOfCourse
operator|==
literal|null
condition|)
block|{
name|studentsOfCourse
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|course2students
operator|.
name|put
argument_list|(
name|courseId
argument_list|,
name|studentsOfCourse
argument_list|)
expr_stmt|;
block|}
name|studentsOfCourse
operator|.
name|add
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
block|}
name|sLog
operator|.
name|info
argument_list|(
literal|"  Loading students (offering)..."
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select x.uniqueId, o.uniqueId, e.student.uniqueId, e.courseOffering.uniqueId from "
operator|+
literal|"Exam x inner join x.owners o, "
operator|+
literal|"StudentClassEnrollment e inner join e.courseOffering.instructionalOffering io "
operator|+
literal|"where x.session.uniqueId=:sessionId and x.examType.uniqueId=:examTypeId and "
operator|+
literal|"o.ownerType="
operator|+
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
operator|.
name|sOwnerTypeOffering
operator|+
literal|" and "
operator|+
literal|"o.ownerId=io.uniqueId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examTypeId"
argument_list|,
name|examTypeId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|examId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Long
name|ownerId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|2
index|]
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|studentsOfOwner
init|=
name|owner2students
operator|.
name|get
argument_list|(
name|ownerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentsOfOwner
operator|==
literal|null
condition|)
block|{
name|studentsOfOwner
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|owner2students
operator|.
name|put
argument_list|(
name|ownerId
argument_list|,
name|studentsOfOwner
argument_list|)
expr_stmt|;
block|}
name|studentsOfOwner
operator|.
name|add
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Exam
argument_list|>
name|examsOfStudent
init|=
name|student2exams
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|examsOfStudent
operator|==
literal|null
condition|)
block|{
name|examsOfStudent
operator|=
operator|new
name|HashSet
argument_list|<
name|Exam
argument_list|>
argument_list|()
expr_stmt|;
name|student2exams
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|examsOfStudent
argument_list|)
expr_stmt|;
block|}
name|examsOfStudent
operator|.
name|add
argument_list|(
name|exams
operator|.
name|get
argument_list|(
name|examId
argument_list|)
argument_list|)
expr_stmt|;
name|Long
name|courseId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|3
index|]
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|course2students
init|=
name|owner2course2students
operator|.
name|get
argument_list|(
name|ownerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|course2students
operator|==
literal|null
condition|)
block|{
name|course2students
operator|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|owner2course2students
operator|.
name|put
argument_list|(
name|ownerId
argument_list|,
name|course2students
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Long
argument_list|>
name|studentsOfCourse
init|=
name|course2students
operator|.
name|get
argument_list|(
name|courseId
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentsOfCourse
operator|==
literal|null
condition|)
block|{
name|studentsOfCourse
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|course2students
operator|.
name|put
argument_list|(
name|courseId
argument_list|,
name|studentsOfCourse
argument_list|)
expr_stmt|;
block|}
name|studentsOfCourse
operator|.
name|add
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
block|}
block|}
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Meeting
argument_list|>
argument_list|>
name|period2meetings
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|ExamType
name|type
init|=
name|ExamTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|examTypeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|assgn
operator|&&
name|eventConf
operator|&&
name|ApplicationProperty
operator|.
name|ExaminationConsiderEventConflicts
operator|.
name|isTrue
argument_list|(
name|type
operator|.
name|getReference
argument_list|()
argument_list|)
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"  Loading overlapping class meetings..."
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select p.uniqueId, m from ClassEvent ce inner join ce.meetings m, ExamPeriod p "
operator|+
literal|"where p.startSlot - :travelTime< m.stopPeriod and m.startPeriod< p.startSlot + p.length + :travelTime and "
operator|+
name|HibernateUtil
operator|.
name|addDate
argument_list|(
literal|"p.session.examBeginDate"
argument_list|,
literal|"p.dateOffset"
argument_list|)
operator|+
literal|" = m.meetingDate and p.session.uniqueId=:sessionId and p.examType.uniqueId=:examTypeId"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"travelTime"
argument_list|,
name|ApplicationProperty
operator|.
name|ExaminationTravelTimeClass
operator|.
name|intValue
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examTypeId"
argument_list|,
name|examTypeId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|periodId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Meeting
name|meeting
init|=
operator|(
name|Meeting
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Set
argument_list|<
name|Meeting
argument_list|>
name|meetings
init|=
name|period2meetings
operator|.
name|get
argument_list|(
name|periodId
argument_list|)
decl_stmt|;
if|if
condition|(
name|meetings
operator|==
literal|null
condition|)
block|{
name|meetings
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|period2meetings
operator|.
name|put
argument_list|(
name|periodId
argument_list|,
name|meetings
argument_list|)
expr_stmt|;
block|}
name|meetings
operator|.
name|add
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
block|}
name|sLog
operator|.
name|info
argument_list|(
literal|"  Loading overlapping course meetings..."
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|ExamDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select p.uniqueId, m from CourseEvent ce inner join ce.meetings m, ExamPeriod p "
operator|+
literal|"where ce.reqAttendance=true and m.approvalStatus = 1 and p.startSlot - :travelTime< m.stopPeriod and m.startPeriod< p.startSlot + p.length + :travelTime and "
operator|+
name|HibernateUtil
operator|.
name|addDate
argument_list|(
literal|"p.session.examBeginDate"
argument_list|,
literal|"p.dateOffset"
argument_list|)
operator|+
literal|" = m.meetingDate and p.session.uniqueId=:sessionId and p.examType.uniqueId=:examTypeId"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"travelTime"
argument_list|,
name|ApplicationProperty
operator|.
name|ExaminationTravelTimeCourse
operator|.
name|intValue
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"examTypeId"
argument_list|,
name|examTypeId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|periodId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Meeting
name|meeting
init|=
operator|(
name|Meeting
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Set
argument_list|<
name|Meeting
argument_list|>
name|meetings
init|=
name|period2meetings
operator|.
name|get
argument_list|(
name|periodId
argument_list|)
decl_stmt|;
if|if
condition|(
name|meetings
operator|==
literal|null
condition|)
block|{
name|meetings
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|period2meetings
operator|.
name|put
argument_list|(
name|periodId
argument_list|,
name|meetings
argument_list|)
expr_stmt|;
block|}
name|meetings
operator|.
name|add
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
block|}
block|}
name|Parameters
name|p
init|=
operator|new
name|Parameters
argument_list|(
name|sessionId
argument_list|,
name|examTypeId
argument_list|)
decl_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"  Creating exam assignments..."
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|ret
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|Exam
argument_list|>
name|e
init|=
name|exams
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|ExamAssignmentInfo
name|info
init|=
operator|(
name|assgn
condition|?
operator|new
name|ExamAssignmentInfo
argument_list|(
name|exam
argument_list|,
name|owner2students
argument_list|,
name|owner2course2students
argument_list|,
name|student2exams
argument_list|,
name|period2meetings
argument_list|,
name|p
argument_list|)
else|:
operator|new
name|ExamAssignmentInfo
argument_list|(
name|exam
argument_list|,
operator|(
name|ExamPeriod
operator|)
literal|null
argument_list|,
literal|null
argument_list|)
operator|)
decl_stmt|;
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|info
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|section
operator|.
name|getOwnerType
argument_list|()
operator|!=
name|ExamOwner
operator|.
name|sOwnerTypeClass
condition|)
continue|continue;
name|ClassEvent
name|evt
init|=
name|classEvents
operator|.
name|get
argument_list|(
name|section
operator|.
name|getOwnerId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|evt
operator|!=
literal|null
condition|)
operator|(
operator|(
name|Class_
operator|)
name|section
operator|.
name|getOwner
argument_list|()
operator|.
name|getOwnerObject
argument_list|()
operator|)
operator|.
name|setEvent
argument_list|(
name|evt
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ignNoEnrl
operator|&&
name|info
operator|.
name|getStudentIds
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|ret
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Exams loaded in "
operator|+
name|sDF
operator|.
name|format
argument_list|(
operator|(
name|t1
operator|-
name|t0
operator|)
operator|/
literal|1000.0
argument_list|)
operator|+
literal|"s."
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.rootLogger"
argument_list|,
literal|"DEBUG, A1"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.appender.A1"
argument_list|,
literal|"org.apache.log4j.ConsoleAppender"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.appender.A1.layout"
argument_list|,
literal|"org.apache.log4j.PatternLayout"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.appender.A1.layout.ConversionPattern"
argument_list|,
literal|"%-5p %c{2}: %m%n"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.hibernate"
argument_list|,
literal|"INFO"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.hibernate.cfg"
argument_list|,
literal|"WARN"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.hibernate.cache.EhCacheProvider"
argument_list|,
literal|"ERROR"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.unitime.commons.hibernate"
argument_list|,
literal|"INFO"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.net"
argument_list|,
literal|"INFO"
argument_list|)
expr_stmt|;
name|PropertyConfigurator
operator|.
name|configure
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|HibernateUtil
operator|.
name|configureHibernate
argument_list|(
name|ApplicationProperties
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getSessionUsingInitiativeYearTerm
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"initiative"
argument_list|,
literal|"puWestLafayetteTrdtn"
argument_list|)
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"year"
argument_list|,
literal|"2008"
argument_list|)
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"term"
argument_list|,
literal|"Spr"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Academic session not found, use properties initiative, year, and term to set academic session."
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Session: "
operator|+
name|session
argument_list|)
expr_stmt|;
block|}
name|ExamType
name|examType
init|=
name|ExamType
operator|.
name|findByReference
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"type"
argument_list|,
literal|"final"
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|assgn
init|=
literal|"true"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"assgn"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|ignempty
init|=
literal|"true"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"ignempty"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|mode
init|=
name|sModeNormal
decl_stmt|;
if|if
condition|(
literal|"text"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"mode"
argument_list|)
argument_list|)
condition|)
name|mode
operator|=
name|sModeText
expr_stmt|;
if|if
condition|(
literal|"ledger"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"mode"
argument_list|)
argument_list|)
condition|)
name|mode
operator|=
name|sModeLedger
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Exam type: "
operator|+
name|examType
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|perSubject
init|=
literal|"true"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"persubject"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
decl_stmt|;
name|TreeSet
argument_list|<
name|SubjectArea
argument_list|>
name|subjects
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"subject"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Loading subjects..."
argument_list|)
expr_stmt|;
name|subjects
operator|=
operator|new
name|TreeSet
argument_list|()
expr_stmt|;
name|String
name|inSubjects
init|=
literal|""
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"subject"
argument_list|)
argument_list|,
literal|","
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
name|inSubjects
operator|+=
literal|"'"
operator|+
name|s
operator|.
name|nextToken
argument_list|()
operator|+
literal|"'"
operator|+
operator|(
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|?
literal|","
else|:
literal|""
operator|)
expr_stmt|;
name|subjects
operator|.
name|addAll
argument_list|(
operator|new
name|_RootDAO
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select sa from SubjectArea sa where sa.session.uniqueId=:sessionId and sa.subjectAreaAbbreviation in ("
operator|+
name|inSubjects
operator|+
literal|")"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|TreeSet
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
init|=
name|loadExams
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|examType
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|assgn
argument_list|,
name|ignempty
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|subjects
operator|==
literal|null
condition|)
block|{
name|subjects
operator|=
operator|new
name|TreeSet
argument_list|()
expr_stmt|;
for|for
control|(
name|ExamAssignmentInfo
name|exam
range|:
name|exams
control|)
for|for
control|(
name|ExamSectionInfo
name|section
range|:
name|exam
operator|.
name|getSections
argument_list|()
control|)
name|subjects
operator|.
name|add
argument_list|(
name|section
operator|.
name|getOwner
argument_list|()
operator|.
name|getCourse
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*             if (subjects==null) {                 if (perSubject) examsPerSubj = new Hashtable();                 for (Iterator i=Exam.findAll(session.getUniqueId(),examType).iterator();i.hasNext();) {                     ExamAssignmentInfo exam = (assgn?new ExamAssignmentInfo((Exam)i.next()):new ExamAssignmentInfo((Exam)i.next(),null,null,null,null));                     exams.add(exam);                     if (perSubject) {                         HashSet<SubjectArea> sas = new HashSet<SubjectArea>();                         for (Iterator j=exam.getExam().getOwners().iterator();j.hasNext();) {                             ExamOwner owner = (ExamOwner)j.next();                             SubjectArea sa = owner.getCourse().getSubjectArea();                             if (!sas.add(sa)) continue;                             Vector<ExamAssignmentInfo> x = examsPerSubj.get(sa);                             if (x==null) { x = new Vector(); examsPerSubj.put(sa,x); }                             x.add(exam);                         }                     }                 }             } else for (SubjectArea subject : subjects) {                 Vector<ExamAssignmentInfo> examsOfThisSubject = new Vector();                 for (Iterator i=Exam.findExamsOfSubjectArea(subject.getUniqueId(),examType).iterator();i.hasNext();) {                     ExamAssignmentInfo exam = (assgn?new ExamAssignmentInfo((Exam)i.next()):new ExamAssignmentInfo((Exam)i.next(),null,null,null,null));                      exams.add(exam);                     examsOfThisSubject.add(exam);                 }                 examsPerSubj.put(subject, examsOfThisSubject);             }             */
name|Hashtable
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
name|output
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|SubjectArea
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
argument_list|>
name|outputPerSubject
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|ExamInstructorInfo
argument_list|,
name|File
argument_list|>
name|ireports
init|=
literal|null
decl_stmt|;
name|Hashtable
argument_list|<
name|Student
argument_list|,
name|File
argument_list|>
name|sreports
init|=
literal|null
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|stk
init|=
operator|new
name|StringTokenizer
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"report"
argument_list|,
name|sAllRegisteredReports
argument_list|)
argument_list|,
literal|","
argument_list|)
init|;
name|stk
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|reportName
init|=
name|stk
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|Class
name|reportClass
init|=
name|sRegisteredReports
operator|.
name|get
argument_list|(
name|reportName
argument_list|)
decl_stmt|;
if|if
condition|(
name|reportClass
operator|==
literal|null
condition|)
continue|continue;
name|sLog
operator|.
name|info
argument_list|(
literal|"Report: "
operator|+
name|reportClass
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
name|reportClass
operator|.
name|getName
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|perSubject
condition|)
block|{
for|for
control|(
name|SubjectArea
name|subject
range|:
name|subjects
control|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"output"
argument_list|,
literal|"."
argument_list|)
argument_list|)
argument_list|,
name|session
operator|.
name|getAcademicTerm
argument_list|()
operator|+
name|session
operator|.
name|getSessionStartYear
argument_list|()
operator|+
name|examType
operator|.
name|getReference
argument_list|()
operator|+
literal|"_"
operator|+
name|reportName
operator|+
literal|"_"
operator|+
name|subject
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
operator|(
name|mode
operator|==
name|sModeText
condition|?
literal|".txt"
else|:
literal|".pdf"
operator|)
argument_list|)
decl_stmt|;
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Generating report "
operator|+
name|file
operator|+
literal|" ("
operator|+
name|subject
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|") ..."
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SubjectArea
argument_list|>
name|subjectList
init|=
operator|new
name|ArrayList
argument_list|<
name|SubjectArea
argument_list|>
argument_list|()
decl_stmt|;
name|subjectList
operator|.
name|add
argument_list|(
name|subject
argument_list|)
expr_stmt|;
name|PdfLegacyExamReport
name|report
init|=
operator|(
name|PdfLegacyExamReport
operator|)
name|reportClass
operator|.
name|getConstructor
argument_list|(
name|int
operator|.
name|class
argument_list|,
name|File
operator|.
name|class
argument_list|,
name|Session
operator|.
name|class
argument_list|,
name|ExamType
operator|.
name|class
argument_list|,
name|Collection
operator|.
name|class
argument_list|,
name|Collection
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|mode
argument_list|,
name|file
argument_list|,
name|session
argument_list|,
name|examType
argument_list|,
name|subjectList
argument_list|,
name|exams
argument_list|)
decl_stmt|;
name|report
operator|.
name|printReport
argument_list|()
expr_stmt|;
name|report
operator|.
name|close
argument_list|()
expr_stmt|;
name|output
operator|.
name|put
argument_list|(
name|subject
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|"_"
operator|+
name|reportName
operator|+
literal|"."
operator|+
operator|(
name|mode
operator|==
name|sModeText
condition|?
literal|"txt"
else|:
literal|"pdf"
operator|)
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
name|files
init|=
name|outputPerSubject
operator|.
name|get
argument_list|(
name|subject
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|==
literal|null
condition|)
block|{
name|files
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
name|outputPerSubject
operator|.
name|put
argument_list|(
name|subject
argument_list|,
name|files
argument_list|)
expr_stmt|;
block|}
name|files
operator|.
name|put
argument_list|(
name|subject
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|"_"
operator|+
name|reportName
operator|+
literal|"."
operator|+
operator|(
name|mode
operator|==
name|sModeText
condition|?
literal|"txt"
else|:
literal|"pdf"
operator|)
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Report "
operator|+
name|file
operator|+
literal|" generated in "
operator|+
name|sDF
operator|.
name|format
argument_list|(
operator|(
name|t1
operator|-
name|t0
operator|)
operator|/
literal|1000.0
argument_list|)
operator|+
literal|"s."
argument_list|)
expr_stmt|;
if|if
condition|(
name|report
operator|instanceof
name|InstructorExamReport
operator|&&
literal|"true"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"email.instructors"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
condition|)
block|{
name|ireports
operator|=
operator|(
operator|(
name|InstructorExamReport
operator|)
name|report
operator|)
operator|.
name|printInstructorReports
argument_list|(
name|mode
argument_list|,
name|session
operator|.
name|getAcademicTerm
argument_list|()
operator|+
name|session
operator|.
name|getSessionStartYear
argument_list|()
operator|+
name|examType
operator|.
name|getReference
argument_list|()
argument_list|,
operator|new
name|InstructorExamReport
operator|.
name|FileGenerator
argument_list|()
block|{
specifier|public
name|File
name|generate
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|ext
parameter_list|)
block|{
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|prefix
operator|+
literal|"."
operator|+
name|ext
argument_list|)
decl_stmt|;
while|while
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|idx
operator|++
expr_stmt|;
name|file
operator|=
operator|new
name|File
argument_list|(
name|prefix
operator|+
literal|"_"
operator|+
name|idx
operator|+
literal|"."
operator|+
name|ext
argument_list|)
expr_stmt|;
block|}
return|return
name|file
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|report
operator|instanceof
name|StudentExamReport
operator|&&
literal|"true"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"email.students"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
condition|)
block|{
name|sreports
operator|=
operator|(
operator|(
name|StudentExamReport
operator|)
name|report
operator|)
operator|.
name|printStudentReports
argument_list|(
name|mode
argument_list|,
name|session
operator|.
name|getAcademicTerm
argument_list|()
operator|+
name|session
operator|.
name|getSessionStartYear
argument_list|()
operator|+
name|examType
operator|.
name|getReference
argument_list|()
argument_list|,
operator|new
name|InstructorExamReport
operator|.
name|FileGenerator
argument_list|()
block|{
specifier|public
name|File
name|generate
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|ext
parameter_list|)
block|{
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|prefix
operator|+
literal|"."
operator|+
name|ext
argument_list|)
decl_stmt|;
while|while
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|idx
operator|++
expr_stmt|;
name|file
operator|=
operator|new
name|File
argument_list|(
name|prefix
operator|+
literal|"_"
operator|+
name|idx
operator|+
literal|"."
operator|+
name|ext
argument_list|)
expr_stmt|;
block|}
return|return
name|file
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"output"
argument_list|,
literal|"."
argument_list|)
argument_list|)
argument_list|,
name|session
operator|.
name|getAcademicTerm
argument_list|()
operator|+
name|session
operator|.
name|getSessionStartYear
argument_list|()
operator|+
name|examType
operator|.
name|getReference
argument_list|()
operator|+
literal|"_"
operator|+
name|reportName
operator|+
operator|(
name|mode
operator|==
name|sModeText
condition|?
literal|".txt"
else|:
literal|".pdf"
operator|)
argument_list|)
decl_stmt|;
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Generating report "
operator|+
name|file
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|PdfLegacyExamReport
name|report
init|=
operator|(
name|PdfLegacyExamReport
operator|)
name|reportClass
operator|.
name|getConstructor
argument_list|(
name|int
operator|.
name|class
argument_list|,
name|File
operator|.
name|class
argument_list|,
name|Session
operator|.
name|class
argument_list|,
name|ExamType
operator|.
name|class
argument_list|,
name|Collection
operator|.
name|class
argument_list|,
name|Collection
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|mode
argument_list|,
name|file
argument_list|,
name|session
argument_list|,
name|examType
argument_list|,
name|subjects
argument_list|,
name|exams
argument_list|)
decl_stmt|;
name|report
operator|.
name|printReport
argument_list|()
expr_stmt|;
name|report
operator|.
name|close
argument_list|()
expr_stmt|;
name|output
operator|.
name|put
argument_list|(
name|reportName
operator|+
literal|"."
operator|+
operator|(
name|mode
operator|==
name|sModeText
condition|?
literal|"txt"
else|:
literal|"pdf"
operator|)
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Report "
operator|+
name|file
operator|.
name|getName
argument_list|()
operator|+
literal|" generated in "
operator|+
name|sDF
operator|.
name|format
argument_list|(
operator|(
name|t1
operator|-
name|t0
operator|)
operator|/
literal|1000.0
argument_list|)
operator|+
literal|"s."
argument_list|)
expr_stmt|;
if|if
condition|(
name|report
operator|instanceof
name|InstructorExamReport
operator|&&
literal|"true"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"email.instructors"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
condition|)
block|{
name|ireports
operator|=
operator|(
operator|(
name|InstructorExamReport
operator|)
name|report
operator|)
operator|.
name|printInstructorReports
argument_list|(
name|mode
argument_list|,
name|session
operator|.
name|getAcademicTerm
argument_list|()
operator|+
name|session
operator|.
name|getSessionStartYear
argument_list|()
operator|+
name|examType
operator|.
name|getReference
argument_list|()
argument_list|,
operator|new
name|InstructorExamReport
operator|.
name|FileGenerator
argument_list|()
block|{
specifier|public
name|File
name|generate
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|ext
parameter_list|)
block|{
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|prefix
operator|+
literal|"."
operator|+
name|ext
argument_list|)
decl_stmt|;
while|while
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|idx
operator|++
expr_stmt|;
name|file
operator|=
operator|new
name|File
argument_list|(
name|prefix
operator|+
literal|"_"
operator|+
name|idx
operator|+
literal|"."
operator|+
name|ext
argument_list|)
expr_stmt|;
block|}
return|return
name|file
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|report
operator|instanceof
name|StudentExamReport
operator|&&
literal|"true"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"email.students"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
condition|)
block|{
name|sreports
operator|=
operator|(
operator|(
name|StudentExamReport
operator|)
name|report
operator|)
operator|.
name|printStudentReports
argument_list|(
name|mode
argument_list|,
name|session
operator|.
name|getAcademicTerm
argument_list|()
operator|+
name|session
operator|.
name|getSessionStartYear
argument_list|()
operator|+
name|examType
operator|.
name|getReference
argument_list|()
argument_list|,
operator|new
name|InstructorExamReport
operator|.
name|FileGenerator
argument_list|()
block|{
specifier|public
name|File
name|generate
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|ext
parameter_list|)
block|{
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|prefix
operator|+
literal|"."
operator|+
name|ext
argument_list|)
decl_stmt|;
while|while
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|idx
operator|++
expr_stmt|;
name|file
operator|=
operator|new
name|File
argument_list|(
name|prefix
operator|+
literal|"_"
operator|+
name|idx
operator|+
literal|"."
operator|+
name|ext
argument_list|)
expr_stmt|;
block|}
return|return
name|file
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"email"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
condition|)
block|{
name|sendEmails
argument_list|(
name|session
operator|.
name|getAcademicTerm
argument_list|()
operator|+
name|session
operator|.
name|getSessionStartYear
argument_list|()
operator|+
name|examType
operator|.
name|getReference
argument_list|()
argument_list|,
name|output
argument_list|,
name|outputPerSubject
argument_list|,
name|ireports
argument_list|,
name|sreports
argument_list|)
expr_stmt|;
block|}
name|sLog
operator|.
name|info
argument_list|(
literal|"All done."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

