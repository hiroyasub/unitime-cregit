begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|reports
operator|.
name|exam
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|PropertyConfigurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
operator|.
name|HibernateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|reports
operator|.
name|PdfLegacyReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignmentInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|DocumentException
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|PdfLegacyExamReport
extends|extends
name|PdfLegacyReport
block|{
specifier|protected
specifier|static
name|Logger
name|sLog
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|PdfLegacyExamReport
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
name|sRegisteredReports
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|String
name|sAllRegisteredReports
init|=
literal|""
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|iExams
init|=
literal|null
decl_stmt|;
specifier|private
name|Session
name|iSession
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|iExamType
init|=
operator|-
literal|1
decl_stmt|;
specifier|protected
name|boolean
name|iDispRooms
init|=
literal|true
decl_stmt|;
specifier|protected
name|String
name|iNoRoom
init|=
literal|""
decl_stmt|;
specifier|protected
name|boolean
name|iDirect
init|=
literal|true
decl_stmt|;
specifier|protected
name|boolean
name|iM2d
init|=
literal|true
decl_stmt|;
specifier|protected
name|boolean
name|iBtb
init|=
literal|false
decl_stmt|;
specifier|protected
name|int
name|iLimit
init|=
operator|-
literal|1
decl_stmt|;
static|static
block|{
name|sRegisteredReports
operator|.
name|put
argument_list|(
literal|"crsn"
argument_list|,
name|ScheduleByCourseReport
operator|.
name|class
argument_list|)
expr_stmt|;
name|sRegisteredReports
operator|.
name|put
argument_list|(
literal|"conf"
argument_list|,
name|ConflictsByCourseAndStudentReport
operator|.
name|class
argument_list|)
expr_stmt|;
name|sRegisteredReports
operator|.
name|put
argument_list|(
literal|"iconf"
argument_list|,
name|ConflictsByCourseAndInstructorReport
operator|.
name|class
argument_list|)
expr_stmt|;
name|sRegisteredReports
operator|.
name|put
argument_list|(
literal|"pern"
argument_list|,
name|ScheduleByPeriodReport
operator|.
name|class
argument_list|)
expr_stmt|;
name|sRegisteredReports
operator|.
name|put
argument_list|(
literal|"xpern"
argument_list|,
name|ExamScheduleByPeriodReport
operator|.
name|class
argument_list|)
expr_stmt|;
name|sRegisteredReports
operator|.
name|put
argument_list|(
literal|"room"
argument_list|,
name|ScheduleByRoomReport
operator|.
name|class
argument_list|)
expr_stmt|;
name|sRegisteredReports
operator|.
name|put
argument_list|(
literal|"chart"
argument_list|,
name|PeriodChartReport
operator|.
name|class
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|report
range|:
name|sRegisteredReports
operator|.
name|keySet
argument_list|()
control|)
name|sAllRegisteredReports
operator|+=
operator|(
name|sAllRegisteredReports
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
literal|","
else|:
literal|""
operator|)
operator|+
name|report
expr_stmt|;
block|}
specifier|public
name|PdfLegacyExamReport
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|title
parameter_list|,
name|Session
name|session
parameter_list|,
name|int
name|examType
parameter_list|,
name|Collection
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
parameter_list|)
throws|throws
name|DocumentException
throws|,
name|IOException
block|{
name|super
argument_list|(
name|file
argument_list|,
name|title
argument_list|,
operator|(
name|examType
operator|==
name|Exam
operator|.
name|sExamTypeFinal
condition|?
literal|"FINAL"
else|:
literal|"EVENING"
operator|)
operator|+
literal|" EXAMINATIONS"
argument_list|,
name|title
operator|+
literal|" -- "
operator|+
name|session
operator|.
name|getLabel
argument_list|()
argument_list|,
name|session
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|iExams
operator|=
name|exams
expr_stmt|;
name|iSession
operator|=
name|session
expr_stmt|;
name|iExamType
operator|=
name|examType
expr_stmt|;
name|iDispRooms
operator|=
literal|"true"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"room"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|iNoRoom
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"noroom"
argument_list|,
literal|"INSTR OFFC"
argument_list|)
expr_stmt|;
name|iDirect
operator|=
literal|"true"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"direct"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|iM2d
operator|=
literal|"true"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"m2d"
argument_list|,
operator|(
name|examType
operator|==
name|Exam
operator|.
name|sExamTypeFinal
condition|?
literal|"true"
else|:
literal|"false"
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|iBtb
operator|=
literal|"true"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"btb"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
name|iLimit
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"limit"
argument_list|,
literal|"-1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setDispRooms
parameter_list|(
name|boolean
name|dispRooms
parameter_list|)
block|{
name|iDispRooms
operator|=
name|dispRooms
expr_stmt|;
block|}
specifier|public
name|void
name|setNoRoom
parameter_list|(
name|String
name|noRoom
parameter_list|)
block|{
name|iNoRoom
operator|=
name|noRoom
expr_stmt|;
block|}
specifier|public
name|void
name|setDirect
parameter_list|(
name|boolean
name|direct
parameter_list|)
block|{
name|iDirect
operator|=
name|direct
expr_stmt|;
block|}
specifier|public
name|void
name|setM2d
parameter_list|(
name|boolean
name|m2d
parameter_list|)
block|{
name|iM2d
operator|=
name|m2d
expr_stmt|;
block|}
specifier|public
name|void
name|setBtb
parameter_list|(
name|boolean
name|btb
parameter_list|)
block|{
name|iBtb
operator|=
name|btb
expr_stmt|;
block|}
specifier|public
name|void
name|setLimit
parameter_list|(
name|int
name|limit
parameter_list|)
block|{
name|iLimit
operator|=
name|limit
expr_stmt|;
block|}
specifier|public
name|Collection
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|getExams
parameter_list|()
block|{
return|return
name|iExams
return|;
block|}
specifier|public
name|Session
name|getSession
parameter_list|()
block|{
return|return
name|iSession
return|;
block|}
specifier|public
name|int
name|getExamType
parameter_list|()
block|{
return|return
name|iExamType
return|;
block|}
specifier|public
specifier|abstract
name|void
name|printReport
parameter_list|()
throws|throws
name|DocumentException
function_decl|;
specifier|protected
name|boolean
name|iSubjectPrinted
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|iITypePrinted
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|iCoursePrinted
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|iStudentPrinted
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|iPeriodPrinted
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|iNewPage
init|=
literal|false
decl_stmt|;
specifier|protected
name|void
name|headerPrinted
parameter_list|()
block|{
name|iSubjectPrinted
operator|=
literal|false
expr_stmt|;
name|iCoursePrinted
operator|=
literal|false
expr_stmt|;
name|iStudentPrinted
operator|=
literal|false
expr_stmt|;
name|iPeriodPrinted
operator|=
literal|false
expr_stmt|;
name|iITypePrinted
operator|=
literal|false
expr_stmt|;
name|iNewPage
operator|=
literal|true
expr_stmt|;
block|}
specifier|protected
name|void
name|println
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|DocumentException
block|{
name|iNewPage
operator|=
literal|false
expr_stmt|;
name|super
operator|.
name|println
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.rootLogger"
argument_list|,
literal|"DEBUG, A1"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.appender.A1"
argument_list|,
literal|"org.apache.log4j.ConsoleAppender"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.appender.A1.layout"
argument_list|,
literal|"org.apache.log4j.PatternLayout"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.appender.A1.layout.ConversionPattern"
argument_list|,
literal|"%-5p %c{2}: %m%n"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.hibernate"
argument_list|,
literal|"INFO"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.hibernate.cfg"
argument_list|,
literal|"WARN"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.hibernate.cache.EhCacheProvider"
argument_list|,
literal|"ERROR"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.org.unitime.commons.hibernate"
argument_list|,
literal|"INFO"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"log4j.logger.net"
argument_list|,
literal|"INFO"
argument_list|)
expr_stmt|;
name|PropertyConfigurator
operator|.
name|configure
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|HibernateUtil
operator|.
name|configureHibernate
argument_list|(
name|ApplicationProperties
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getSessionUsingInitiativeYearTerm
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"initiative"
argument_list|,
literal|"puWestLafayetteTrdtn"
argument_list|)
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"year"
argument_list|,
literal|"2008"
argument_list|)
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"term"
argument_list|,
literal|"Spr"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Academic session not found, use properties initiative, year, and term to set academic session."
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Session: "
operator|+
name|session
argument_list|)
expr_stmt|;
block|}
name|int
name|examType
init|=
operator|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"type"
argument_list|,
literal|"final"
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"final"
argument_list|)
condition|?
name|Exam
operator|.
name|sExamTypeFinal
else|:
name|Exam
operator|.
name|sExamTypeEvening
operator|)
decl_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Exam type: "
operator|+
name|Exam
operator|.
name|sExamTypes
index|[
name|examType
index|]
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Loading exams..."
argument_list|)
expr_stmt|;
name|Vector
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|exams
init|=
operator|new
name|Vector
argument_list|<
name|ExamAssignmentInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|Exam
operator|.
name|findAll
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|examType
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|exams
operator|.
name|add
argument_list|(
operator|new
name|ExamAssignmentInfo
argument_list|(
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|StringTokenizer
name|stk
init|=
operator|new
name|StringTokenizer
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"report"
argument_list|,
name|sAllRegisteredReports
argument_list|)
argument_list|,
literal|","
argument_list|)
init|;
name|stk
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|reportName
init|=
name|stk
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|Class
name|reportClass
init|=
name|sRegisteredReports
operator|.
name|get
argument_list|(
name|reportName
argument_list|)
decl_stmt|;
if|if
condition|(
name|reportClass
operator|==
literal|null
condition|)
continue|continue;
name|sLog
operator|.
name|info
argument_list|(
literal|"Report: "
operator|+
name|reportClass
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
name|reportClass
operator|.
name|getName
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"output"
argument_list|,
literal|"."
argument_list|)
argument_list|)
argument_list|,
name|session
operator|.
name|getAcademicTerm
argument_list|()
operator|+
name|session
operator|.
name|getYear
argument_list|()
operator|+
operator|(
name|examType
operator|==
name|Exam
operator|.
name|sExamTypeEvening
condition|?
literal|"evn"
else|:
literal|"fin"
operator|)
operator|+
literal|"_"
operator|+
name|reportName
operator|+
literal|".pdf"
argument_list|)
decl_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Generating report "
operator|+
name|file
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|PdfLegacyExamReport
name|report
init|=
operator|(
name|PdfLegacyExamReport
operator|)
name|reportClass
operator|.
name|getConstructor
argument_list|(
operator|new
name|Class
index|[]
block|{
name|File
operator|.
name|class
block|,
name|Session
operator|.
name|class
block|,
name|int
operator|.
name|class
block|,
name|Collection
operator|.
name|class
block|}
argument_list|)
operator|.
name|newInstance
argument_list|(
name|file
argument_list|,
name|session
argument_list|,
name|examType
argument_list|,
name|exams
argument_list|)
decl_stmt|;
name|report
operator|.
name|printReport
argument_list|()
expr_stmt|;
name|report
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|sLog
operator|.
name|info
argument_list|(
literal|"Done."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

